import{S as zNt,i as WNt,s as QNt,e as a,k as l,w as F,t as o,M as HNt,c as n,d as t,m as i,a as s,x as T,h as r,b as c,G as e,g as b,y as M,q as E,o as C,B as w,v as UNt,L as I}from"../../chunks/vendor-hf-doc-builder.js";import{T as UUr}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as P}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as re}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as B}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function JNt(y){let g,v,p,m,u,d,h,Eo,Fi,Lf,at,Ti,Mi,gA,yf,Oe,We,Ei,Sn,hA,Rn,Pn,pA,Ci,Bn,uA,wi,xf,ya;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),u=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Eo=o(`, make sure its
`),Fi=a("code"),Lf=o("model_type"),at=o(" attribute is set to the same key you use when registering the config (here "),Ti=a("code"),Mi=o('"new-model"'),gA=o(")."),yf=l(),Oe=a("p"),We=o("Likewise, if your "),Ei=a("code"),Sn=o("NewModel"),hA=o(" is a subclass of "),Rn=a("a"),Pn=o("PreTrainedModel"),pA=o(`, make sure its
`),Ci=a("code"),Bn=o("config_class"),uA=o(` attribute is set to the same class you use when registering the model (here
`),wi=a("code"),xf=o("NewModelConfig"),ya=o(")."),this.h()},l(Qe){g=n(Qe,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var Vk=s(p);m=r(Vk,"NewModelConfig"),Vk.forEach(t),u=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var Ai=s(d);h=r(Ai,"PretrainedConfig"),Ai.forEach(t),Eo=r(Ae,`, make sure its
`),Fi=n(Ae,"CODE",{});var Xk=s(Fi);Lf=r(Xk,"model_type"),Xk.forEach(t),at=r(Ae," attribute is set to the same key you use when registering the config (here "),Ti=n(Ae,"CODE",{});var zk=s(Ti);Mi=r(zk,'"new-model"'),zk.forEach(t),gA=r(Ae,")."),Ae.forEach(t),yf=i(Qe),Oe=n(Qe,"P",{});var Co=s(Oe);We=r(Co,"Likewise, if your "),Ei=n(Co,"CODE",{});var xa=s(Ei);Sn=r(xa,"NewModel"),xa.forEach(t),hA=r(Co," is a subclass of "),Rn=n(Co,"A",{href:!0});var Wk=s(Rn);Pn=r(Wk,"PreTrainedModel"),Wk.forEach(t),pA=r(Co,`, make sure its
`),Ci=n(Co,"CODE",{});var $f=s(Ci);Bn=r($f,"config_class"),$f.forEach(t),uA=r(Co,` attribute is set to the same class you use when registering the model (here
`),wi=n(Co,"CODE",{});var Qk=s(wi);xf=r(Qk,"NewModelConfig"),Qk.forEach(t),ya=r(Co,")."),Co.forEach(t),this.h()},h(){c(Rn,"href","/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel")},m(Qe,Ae){b(Qe,g,Ae),e(g,v),e(g,p),e(p,m),e(g,u),e(g,d),e(d,h),e(g,Eo),e(g,Fi),e(Fi,Lf),e(g,at),e(g,Ti),e(Ti,Mi),e(g,gA),b(Qe,yf,Ae),b(Qe,Oe,Ae),e(Oe,We),e(Oe,Ei),e(Ei,Sn),e(Oe,hA),e(Oe,Rn),e(Rn,Pn),e(Oe,pA),e(Oe,Ci),e(Ci,Bn),e(Oe,uA),e(Oe,wi),e(wi,xf),e(Oe,ya)},d(Qe){Qe&&t(g),Qe&&t(yf),Qe&&t(Oe)}}}function YNt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KNt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")

# Download vocabulary from huggingface.co and define model-specific arguments
tokenizer = AutoTokenizer.from_pretrained("roberta-base", add_prefix_space=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and define model-specific arguments</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;roberta-base&quot;</span>, add_prefix_space=<span class="hljs-literal">True</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZNt(y){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Eo=s(p);m=r(Eo,"use_auth_token=True"),Eo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function eqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oqt(y){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Eo=s(p);m=r(Eo,"use_auth_token=True"),Eo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function rqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _qt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Fqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Tqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Mqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Eqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Cqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Aqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Lqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("dandelin/vilt-b32-finetuned-vqa")
model = AutoModelForVisualQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $qt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa")

# Update configuration during loading
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/vilt_tf_model_config.json")
model = AutoModelForVisualQuestionAnswering.from_pretrained(
    "./tf_model/vilt_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/vilt_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/vilt_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Sqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Rqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Pqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Bqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Iqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Nqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Dqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Gqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Oqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Vqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Xqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Wqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Qqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Hqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Uqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Jqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Yqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Kqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Zqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ejt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ojt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ajt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function njt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ljt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ijt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function djt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ujt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _jt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Fjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Tjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Mjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ejt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Cjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ajt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ljt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $jt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Sjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Rjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Pjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Bjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ijt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Njt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Djt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Gjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ojt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Vjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Xjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Wjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Qjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Hjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ujt(y){let g,v,p,m,u,d,h,Eo,Fi,Lf,at,Ti,Mi,gA,yf,Oe,We,Ei,Sn,hA,Rn,Pn,pA,Ci,Bn,uA,wi,xf,ya,Qe,Ae,Vk,Ai,Xk,zk,Co,xa,Wk,$f,Qk,nze,XDe,Li,kf,Dre,_A,sze,Gre,lze,zDe,In,ize,Ore,dze,cze,Vre,fze,mze,WDe,bA,QDe,Hk,gze,HDe,Sf,UDe,yi,Rf,Xre,vA,hze,zre,pze,JDe,wo,FA,uze,TA,_ze,Uk,bze,vze,Fze,MA,Tze,Wre,Mze,Eze,Cze,wr,EA,wze,Qre,Aze,Lze,xi,yze,Hre,xze,$ze,Ure,kze,Sze,Rze,A,Pf,Jre,Pze,Bze,Jk,Ize,Nze,qze,Bf,Yre,jze,Dze,Yk,Gze,Oze,Vze,If,Kre,Xze,zze,Kk,Wze,Qze,Hze,Nf,Zre,Uze,Jze,Zk,Yze,Kze,Zze,qf,ete,eWe,oWe,eS,rWe,tWe,aWe,jf,ote,nWe,sWe,oS,lWe,iWe,dWe,Df,rte,cWe,fWe,rS,mWe,gWe,hWe,Gf,tte,pWe,uWe,tS,_We,bWe,vWe,Of,ate,FWe,TWe,aS,MWe,EWe,CWe,Vf,nte,wWe,AWe,nS,LWe,yWe,xWe,Xf,ste,$We,kWe,sS,SWe,RWe,PWe,zf,lte,BWe,IWe,lS,NWe,qWe,jWe,Wf,ite,DWe,GWe,iS,OWe,VWe,XWe,Qf,dte,zWe,WWe,dS,QWe,HWe,UWe,Hf,cte,JWe,YWe,cS,KWe,ZWe,eQe,Uf,fte,oQe,rQe,fS,tQe,aQe,nQe,Jf,mte,sQe,lQe,mS,iQe,dQe,cQe,Yf,gte,fQe,mQe,gS,gQe,hQe,pQe,Kf,hte,uQe,_Qe,hS,bQe,vQe,FQe,Zf,pte,TQe,MQe,pS,EQe,CQe,wQe,em,ute,AQe,LQe,uS,yQe,xQe,$Qe,om,_te,kQe,SQe,_S,RQe,PQe,BQe,rm,bte,IQe,NQe,bS,qQe,jQe,DQe,tm,vte,GQe,OQe,vS,VQe,XQe,zQe,am,Fte,WQe,QQe,FS,HQe,UQe,JQe,nm,Tte,YQe,KQe,TS,ZQe,eHe,oHe,sm,Mte,rHe,tHe,MS,aHe,nHe,sHe,lm,Ete,lHe,iHe,ES,dHe,cHe,fHe,im,Cte,mHe,gHe,CS,hHe,pHe,uHe,dm,wte,_He,bHe,wS,vHe,FHe,THe,cm,Ate,MHe,EHe,AS,CHe,wHe,AHe,fm,Lte,LHe,yHe,LS,xHe,$He,kHe,mm,yte,SHe,RHe,yS,PHe,BHe,IHe,gm,xte,NHe,qHe,xS,jHe,DHe,GHe,hm,$te,OHe,VHe,$S,XHe,zHe,WHe,pm,kte,QHe,HHe,kS,UHe,JHe,YHe,um,Ste,KHe,ZHe,SS,eUe,oUe,rUe,_m,Rte,tUe,aUe,RS,nUe,sUe,lUe,bm,Pte,iUe,dUe,PS,cUe,fUe,mUe,vm,Bte,gUe,hUe,BS,pUe,uUe,_Ue,Fm,Ite,bUe,vUe,IS,FUe,TUe,MUe,Tm,Nte,EUe,CUe,NS,wUe,AUe,LUe,Mm,qte,yUe,xUe,qS,$Ue,kUe,SUe,Em,jte,RUe,PUe,jS,BUe,IUe,NUe,Cm,Dte,qUe,jUe,DS,DUe,GUe,OUe,wm,Gte,VUe,XUe,GS,zUe,WUe,QUe,Am,Ote,HUe,UUe,OS,JUe,YUe,KUe,Lm,Vte,ZUe,eJe,VS,oJe,rJe,tJe,ym,Xte,aJe,nJe,XS,sJe,lJe,iJe,xm,zte,dJe,cJe,zS,fJe,mJe,gJe,$m,Wte,hJe,pJe,WS,uJe,_Je,bJe,km,Qte,vJe,FJe,QS,TJe,MJe,EJe,Sm,Hte,CJe,wJe,HS,AJe,LJe,yJe,Rm,Ute,xJe,$Je,US,kJe,SJe,RJe,Pm,Jte,PJe,BJe,JS,IJe,NJe,qJe,Bm,Yte,jJe,DJe,YS,GJe,OJe,VJe,Im,Kte,XJe,zJe,KS,WJe,QJe,HJe,Nm,Zte,UJe,JJe,ZS,YJe,KJe,ZJe,qm,eae,eYe,oYe,eR,rYe,tYe,aYe,jm,oae,nYe,sYe,oR,lYe,iYe,dYe,Dm,rae,cYe,fYe,rR,mYe,gYe,hYe,Gm,tae,pYe,uYe,tR,_Ye,bYe,vYe,Om,aae,FYe,TYe,aR,MYe,EYe,CYe,Vm,nae,wYe,AYe,nR,LYe,yYe,xYe,Xm,sae,$Ye,kYe,sR,SYe,RYe,PYe,zm,lae,BYe,IYe,lR,NYe,qYe,jYe,Wm,iae,DYe,GYe,iR,OYe,VYe,XYe,Qm,dae,zYe,WYe,dR,QYe,HYe,UYe,Hm,cae,JYe,YYe,cR,KYe,ZYe,eKe,Um,fae,oKe,rKe,fR,tKe,aKe,nKe,Jm,mae,sKe,lKe,mR,iKe,dKe,cKe,Ym,gae,fKe,mKe,gR,gKe,hKe,pKe,Km,hae,uKe,_Ke,hR,bKe,vKe,FKe,Zm,pae,TKe,MKe,pR,EKe,CKe,wKe,eg,uae,AKe,LKe,uR,yKe,xKe,$Ke,og,_ae,kKe,SKe,_R,RKe,PKe,BKe,rg,bae,IKe,NKe,bR,qKe,jKe,DKe,tg,vae,GKe,OKe,vR,VKe,XKe,zKe,ag,Fae,WKe,QKe,FR,HKe,UKe,JKe,ng,Tae,YKe,KKe,TR,ZKe,eZe,oZe,sg,Mae,rZe,tZe,MR,aZe,nZe,sZe,lg,Eae,lZe,iZe,ER,dZe,cZe,fZe,ig,Cae,mZe,gZe,CR,hZe,pZe,uZe,dg,wae,_Ze,bZe,wR,vZe,FZe,TZe,cg,Aae,MZe,EZe,AR,CZe,wZe,AZe,fg,Lae,LZe,yZe,LR,xZe,$Ze,kZe,mg,yae,SZe,RZe,yR,PZe,BZe,IZe,gg,xae,NZe,qZe,xR,jZe,DZe,GZe,hg,$ae,OZe,VZe,$R,XZe,zZe,WZe,pg,kae,QZe,HZe,kR,UZe,JZe,YZe,ug,Sae,KZe,ZZe,SR,eeo,oeo,reo,_g,Rae,teo,aeo,RR,neo,seo,leo,bg,Pae,ieo,deo,PR,ceo,feo,meo,vg,Bae,geo,heo,BR,peo,ueo,_eo,Fg,Iae,beo,veo,IR,Feo,Teo,Meo,Tg,Nae,Eeo,Ceo,NR,weo,Aeo,Leo,Mg,qae,yeo,xeo,qR,$eo,keo,Seo,Eg,jae,Reo,Peo,jR,Beo,Ieo,Neo,Cg,Dae,qeo,jeo,DR,Deo,Geo,Oeo,wg,Gae,Veo,Xeo,GR,zeo,Weo,Qeo,Ag,Oae,Heo,Ueo,OR,Jeo,Yeo,Keo,Lg,Vae,Zeo,eoo,VR,ooo,roo,too,yg,Xae,aoo,noo,XR,soo,loo,ioo,xg,zae,doo,coo,zR,foo,moo,goo,$g,Wae,hoo,poo,WR,uoo,_oo,boo,kg,Qae,voo,Foo,QR,Too,Moo,Eoo,Sg,Hae,Coo,woo,HR,Aoo,Loo,yoo,Rg,Uae,xoo,$oo,UR,koo,Soo,Roo,Pg,Jae,Poo,Boo,JR,Ioo,Noo,qoo,Bg,Yae,joo,Doo,YR,Goo,Ooo,Voo,Ig,Kae,Xoo,zoo,KR,Woo,Qoo,Hoo,Ng,Zae,Uoo,Joo,ZR,Yoo,Koo,Zoo,qg,ene,ero,oro,eP,rro,tro,aro,jg,nro,Dg,CA,sro,one,lro,YDe,$i,Gg,rne,wA,iro,tne,dro,KDe,Ao,AA,cro,LA,fro,oP,mro,gro,hro,yA,pro,ane,uro,_ro,bro,Ar,xA,vro,nne,Fro,Tro,$a,Mro,sne,Ero,Cro,lne,wro,Aro,ine,Lro,yro,xro,k,Nn,dne,$ro,kro,rP,Sro,Rro,tP,Pro,Bro,Iro,qn,cne,Nro,qro,aP,jro,Dro,nP,Gro,Oro,Vro,jn,fne,Xro,zro,sP,Wro,Qro,lP,Hro,Uro,Jro,Og,mne,Yro,Kro,iP,Zro,eto,oto,Dn,gne,rto,tto,dP,ato,nto,cP,sto,lto,ito,Vg,hne,dto,cto,fP,fto,mto,gto,Xg,pne,hto,pto,mP,uto,_to,bto,zg,une,vto,Fto,gP,Tto,Mto,Eto,Gn,_ne,Cto,wto,hP,Ato,Lto,pP,yto,xto,$to,On,bne,kto,Sto,uP,Rto,Pto,_P,Bto,Ito,Nto,Vn,vne,qto,jto,bP,Dto,Gto,vP,Oto,Vto,Xto,Wg,Fne,zto,Wto,FP,Qto,Hto,Uto,Qg,Tne,Jto,Yto,TP,Kto,Zto,eao,Hg,Mne,oao,rao,MP,tao,aao,nao,Xn,Ene,sao,lao,EP,iao,dao,CP,cao,fao,mao,Ug,Cne,gao,hao,wP,pao,uao,_ao,zn,wne,bao,vao,AP,Fao,Tao,LP,Mao,Eao,Cao,Wn,Ane,wao,Aao,yP,Lao,yao,xP,xao,$ao,kao,Qn,Lne,Sao,Rao,$P,Pao,Bao,kP,Iao,Nao,qao,Jg,yne,jao,Dao,SP,Gao,Oao,Vao,Hn,xne,Xao,zao,RP,Wao,Qao,PP,Hao,Uao,Jao,Un,$ne,Yao,Kao,BP,Zao,eno,IP,ono,rno,tno,Jn,kne,ano,nno,NP,sno,lno,qP,ino,dno,cno,Yn,Sne,fno,mno,jP,gno,hno,DP,pno,uno,_no,Kn,Rne,bno,vno,GP,Fno,Tno,OP,Mno,Eno,Cno,Zn,Pne,wno,Ano,VP,Lno,yno,XP,xno,$no,kno,Yg,Bne,Sno,Rno,zP,Pno,Bno,Ino,es,Ine,Nno,qno,WP,jno,Dno,QP,Gno,Ono,Vno,Kg,Nne,Xno,zno,HP,Wno,Qno,Hno,os,qne,Uno,Jno,UP,Yno,Kno,JP,Zno,eso,oso,rs,jne,rso,tso,YP,aso,nso,KP,sso,lso,iso,ts,Dne,dso,cso,ZP,fso,mso,eB,gso,hso,pso,Zg,Gne,uso,_so,oB,bso,vso,Fso,as,One,Tso,Mso,rB,Eso,Cso,tB,wso,Aso,Lso,ns,Vne,yso,xso,aB,$so,kso,nB,Sso,Rso,Pso,eh,Xne,Bso,Iso,sB,Nso,qso,jso,ss,zne,Dso,Gso,lB,Oso,Vso,iB,Xso,zso,Wso,ls,Wne,Qso,Hso,dB,Uso,Jso,cB,Yso,Kso,Zso,is,Qne,elo,olo,fB,rlo,tlo,mB,alo,nlo,slo,ds,Hne,llo,ilo,gB,dlo,clo,hB,flo,mlo,glo,cs,Une,hlo,plo,pB,ulo,_lo,uB,blo,vlo,Flo,fs,Jne,Tlo,Mlo,_B,Elo,Clo,bB,wlo,Alo,Llo,ms,Yne,ylo,xlo,vB,$lo,klo,FB,Slo,Rlo,Plo,gs,Kne,Blo,Ilo,TB,Nlo,qlo,MB,jlo,Dlo,Glo,oh,Zne,Olo,Vlo,EB,Xlo,zlo,Wlo,hs,ese,Qlo,Hlo,CB,Ulo,Jlo,wB,Ylo,Klo,Zlo,rh,ose,eio,oio,AB,rio,tio,aio,th,rse,nio,sio,LB,lio,iio,dio,ps,tse,cio,fio,yB,mio,gio,xB,hio,pio,uio,us,ase,_io,bio,$B,vio,Fio,kB,Tio,Mio,Eio,_s,nse,Cio,wio,SB,Aio,Lio,RB,yio,xio,$io,ah,sse,kio,Sio,PB,Rio,Pio,Bio,bs,lse,Iio,Nio,BB,qio,jio,IB,Dio,Gio,Oio,vs,ise,Vio,Xio,NB,zio,Wio,qB,Qio,Hio,Uio,Fs,dse,Jio,Yio,jB,Kio,Zio,DB,edo,odo,rdo,Ts,cse,tdo,ado,GB,ndo,sdo,OB,ldo,ido,ddo,Ms,fse,cdo,fdo,VB,mdo,gdo,XB,hdo,pdo,udo,nh,mse,_do,bdo,zB,vdo,Fdo,Tdo,Es,gse,Mdo,Edo,WB,Cdo,wdo,QB,Ado,Ldo,ydo,sh,hse,xdo,$do,HB,kdo,Sdo,Rdo,lh,pse,Pdo,Bdo,UB,Ido,Ndo,qdo,ih,use,jdo,Ddo,JB,Gdo,Odo,Vdo,dh,_se,Xdo,zdo,YB,Wdo,Qdo,Hdo,Cs,bse,Udo,Jdo,KB,Ydo,Kdo,ZB,Zdo,eco,oco,ch,vse,rco,tco,eI,aco,nco,sco,ws,Fse,lco,ico,oI,dco,cco,rI,fco,mco,gco,As,Tse,hco,pco,tI,uco,_co,aI,bco,vco,Fco,Ls,Mse,Tco,Mco,nI,Eco,Cco,sI,wco,Aco,Lco,ys,Ese,yco,xco,lI,$co,kco,iI,Sco,Rco,Pco,xs,Cse,Bco,Ico,dI,Nco,qco,cI,jco,Dco,Gco,$s,wse,Oco,Vco,fI,Xco,zco,mI,Wco,Qco,Hco,fh,Ase,Uco,Jco,gI,Yco,Kco,Zco,mh,Lse,efo,ofo,hI,rfo,tfo,afo,ks,yse,nfo,sfo,pI,lfo,ifo,uI,dfo,cfo,ffo,Ss,xse,mfo,gfo,_I,hfo,pfo,bI,ufo,_fo,bfo,Rs,$se,vfo,Ffo,vI,Tfo,Mfo,FI,Efo,Cfo,wfo,gh,kse,Afo,Lfo,TI,yfo,xfo,$fo,hh,Sse,kfo,Sfo,MI,Rfo,Pfo,Bfo,ph,Rse,Ifo,Nfo,EI,qfo,jfo,Dfo,Ps,Pse,Gfo,Ofo,CI,Vfo,Xfo,wI,zfo,Wfo,Qfo,Bs,Bse,Hfo,Ufo,AI,Jfo,Yfo,LI,Kfo,Zfo,emo,uh,Ise,omo,rmo,yI,tmo,amo,nmo,_h,Nse,smo,lmo,xI,imo,dmo,cmo,bh,qse,fmo,mmo,$I,gmo,hmo,pmo,Is,jse,umo,_mo,kI,bmo,vmo,SI,Fmo,Tmo,Mmo,vh,Dse,Emo,Cmo,RI,wmo,Amo,Lmo,Fh,Gse,ymo,xmo,PI,$mo,kmo,Smo,Ns,Ose,Rmo,Pmo,BI,Bmo,Imo,II,Nmo,qmo,jmo,qs,Vse,Dmo,Gmo,NI,Omo,Vmo,qI,Xmo,zmo,Wmo,js,Xse,Qmo,Hmo,jI,Umo,Jmo,DI,Ymo,Kmo,Zmo,Ds,zse,ego,ogo,GI,rgo,tgo,OI,ago,ngo,sgo,Th,lgo,Mh,$A,igo,Wse,dgo,ZDe,ki,Eh,Qse,kA,cgo,Hse,fgo,eGe,Lo,SA,mgo,RA,ggo,VI,hgo,pgo,ugo,PA,_go,Use,bgo,vgo,Fgo,He,BA,Tgo,Jse,Mgo,Ego,ka,Cgo,Yse,wgo,Ago,Kse,Lgo,ygo,Zse,xgo,$go,kgo,Y,Ch,ele,Sgo,Rgo,XI,Pgo,Bgo,Igo,wh,ole,Ngo,qgo,zI,jgo,Dgo,Ggo,Ah,rle,Ogo,Vgo,WI,Xgo,zgo,Wgo,Lh,tle,Qgo,Hgo,QI,Ugo,Jgo,Ygo,yh,ale,Kgo,Zgo,HI,eho,oho,rho,xh,nle,tho,aho,UI,nho,sho,lho,$h,sle,iho,dho,JI,cho,fho,mho,kh,lle,gho,hho,YI,pho,uho,_ho,Sh,ile,bho,vho,KI,Fho,Tho,Mho,Rh,dle,Eho,Cho,ZI,who,Aho,Lho,Ph,cle,yho,xho,eN,$ho,kho,Sho,Bh,fle,Rho,Pho,oN,Bho,Iho,Nho,Ih,mle,qho,jho,rN,Dho,Gho,Oho,Nh,gle,Vho,Xho,tN,zho,Who,Qho,qh,hle,Hho,Uho,aN,Jho,Yho,Kho,jh,ple,Zho,epo,nN,opo,rpo,tpo,Dh,ule,apo,npo,sN,spo,lpo,ipo,Gh,_le,dpo,cpo,lN,fpo,mpo,gpo,Oh,ble,hpo,ppo,iN,upo,_po,bpo,Vh,vle,vpo,Fpo,dN,Tpo,Mpo,Epo,Xh,Fle,Cpo,wpo,cN,Apo,Lpo,ypo,zh,Tle,xpo,$po,fN,kpo,Spo,Rpo,Wh,Mle,Ppo,Bpo,mN,Ipo,Npo,qpo,Qh,Ele,jpo,Dpo,gN,Gpo,Opo,Vpo,Hh,Cle,Xpo,zpo,hN,Wpo,Qpo,Hpo,Uh,wle,Upo,Jpo,pN,Ypo,Kpo,Zpo,Jh,Ale,euo,ouo,uN,ruo,tuo,auo,Yh,Lle,nuo,suo,_N,luo,iuo,duo,Kh,yle,cuo,fuo,bN,muo,guo,huo,Zh,xle,puo,uuo,vN,_uo,buo,vuo,ep,$le,Fuo,Tuo,FN,Muo,Euo,Cuo,op,kle,wuo,Auo,TN,Luo,yuo,xuo,rp,$uo,tp,kuo,ap,IA,Suo,Sle,Ruo,oGe,Si,np,Rle,NA,Puo,Ple,Buo,rGe,yo,qA,Iuo,jA,Nuo,MN,quo,juo,Duo,DA,Guo,Ble,Ouo,Vuo,Xuo,Ue,GA,zuo,Ile,Wuo,Quo,Ri,Huo,Nle,Uuo,Juo,qle,Yuo,Kuo,Zuo,he,sp,jle,e_o,o_o,EN,r_o,t_o,a_o,lp,Dle,n_o,s_o,Gle,l_o,i_o,d_o,ip,Ole,c_o,f_o,CN,m_o,g_o,h_o,dp,Vle,p_o,u_o,wN,__o,b_o,v_o,cp,Xle,F_o,T_o,AN,M_o,E_o,C_o,fp,zle,w_o,A_o,LN,L_o,y_o,x_o,mp,Wle,$_o,k_o,yN,S_o,R_o,P_o,gp,Qle,B_o,I_o,xN,N_o,q_o,j_o,hp,Hle,D_o,G_o,$N,O_o,V_o,X_o,pp,Ule,z_o,W_o,kN,Q_o,H_o,U_o,up,Jle,J_o,Y_o,SN,K_o,Z_o,e2o,_p,Yle,o2o,r2o,RN,t2o,a2o,n2o,bp,Kle,s2o,l2o,PN,i2o,d2o,c2o,vp,Zle,f2o,m2o,BN,g2o,h2o,p2o,Fp,eie,u2o,_2o,IN,b2o,v2o,F2o,Tp,oie,T2o,M2o,NN,E2o,C2o,w2o,Mp,rie,A2o,L2o,qN,y2o,x2o,$2o,Ep,k2o,Cp,S2o,wp,OA,R2o,tie,P2o,tGe,Pi,Ap,aie,VA,B2o,nie,I2o,aGe,xo,XA,N2o,Bi,q2o,jN,j2o,D2o,DN,G2o,O2o,V2o,zA,X2o,sie,z2o,W2o,Q2o,nt,WA,H2o,lie,U2o,J2o,Ii,Y2o,iie,K2o,Z2o,GN,e1o,o1o,r1o,Lp,t1o,Je,QA,a1o,die,n1o,s1o,Sa,l1o,cie,i1o,d1o,fie,c1o,f1o,mie,m1o,g1o,h1o,x,yp,gie,p1o,u1o,ON,_1o,b1o,v1o,xp,hie,F1o,T1o,VN,M1o,E1o,C1o,$p,pie,w1o,A1o,XN,L1o,y1o,x1o,kp,uie,$1o,k1o,zN,S1o,R1o,P1o,Sp,_ie,B1o,I1o,WN,N1o,q1o,j1o,Rp,bie,D1o,G1o,QN,O1o,V1o,X1o,Pp,vie,z1o,W1o,HN,Q1o,H1o,U1o,Bp,Fie,J1o,Y1o,UN,K1o,Z1o,ebo,Ip,Tie,obo,rbo,JN,tbo,abo,nbo,Np,Mie,sbo,lbo,YN,ibo,dbo,cbo,qp,Eie,fbo,mbo,KN,gbo,hbo,pbo,jp,Cie,ubo,_bo,ZN,bbo,vbo,Fbo,Dp,wie,Tbo,Mbo,eq,Ebo,Cbo,wbo,Gp,Aie,Abo,Lbo,oq,ybo,xbo,$bo,Op,Lie,kbo,Sbo,rq,Rbo,Pbo,Bbo,Vp,yie,Ibo,Nbo,tq,qbo,jbo,Dbo,Xp,xie,Gbo,Obo,aq,Vbo,Xbo,zbo,zp,$ie,Wbo,Qbo,nq,Hbo,Ubo,Jbo,Wp,kie,Ybo,Kbo,sq,Zbo,evo,ovo,Qp,Sie,rvo,tvo,lq,avo,nvo,svo,Hp,Rie,lvo,ivo,iq,dvo,cvo,fvo,Up,Pie,mvo,gvo,dq,hvo,pvo,uvo,Jp,Bie,_vo,bvo,cq,vvo,Fvo,Tvo,Yp,Iie,Mvo,Evo,fq,Cvo,wvo,Avo,Kp,Nie,Lvo,yvo,mq,xvo,$vo,kvo,Zp,qie,Svo,Rvo,gq,Pvo,Bvo,Ivo,eu,jie,Nvo,qvo,hq,jvo,Dvo,Gvo,ou,Die,Ovo,Vvo,pq,Xvo,zvo,Wvo,ru,Gie,Qvo,Hvo,uq,Uvo,Jvo,Yvo,tu,Oie,Kvo,Zvo,_q,eFo,oFo,rFo,au,Vie,tFo,aFo,bq,nFo,sFo,lFo,nu,Xie,iFo,dFo,vq,cFo,fFo,mFo,su,zie,gFo,hFo,Fq,pFo,uFo,_Fo,Gs,Wie,bFo,vFo,Tq,FFo,TFo,Mq,MFo,EFo,CFo,lu,Qie,wFo,AFo,Eq,LFo,yFo,xFo,iu,Hie,$Fo,kFo,Cq,SFo,RFo,PFo,du,Uie,BFo,IFo,wq,NFo,qFo,jFo,cu,Jie,DFo,GFo,Aq,OFo,VFo,XFo,fu,Yie,zFo,WFo,Lq,QFo,HFo,UFo,mu,Kie,JFo,YFo,yq,KFo,ZFo,e6o,gu,Zie,o6o,r6o,xq,t6o,a6o,n6o,hu,ede,s6o,l6o,$q,i6o,d6o,c6o,pu,ode,f6o,m6o,kq,g6o,h6o,p6o,uu,rde,u6o,_6o,Sq,b6o,v6o,F6o,_u,tde,T6o,M6o,Rq,E6o,C6o,w6o,bu,ade,A6o,L6o,Pq,y6o,x6o,$6o,vu,nde,k6o,S6o,Bq,R6o,P6o,B6o,Fu,sde,I6o,N6o,Iq,q6o,j6o,D6o,Tu,lde,G6o,O6o,Nq,V6o,X6o,z6o,Mu,ide,W6o,Q6o,qq,H6o,U6o,J6o,Eu,dde,Y6o,K6o,jq,Z6o,eTo,oTo,Cu,cde,rTo,tTo,Dq,aTo,nTo,sTo,wu,fde,lTo,iTo,Gq,dTo,cTo,fTo,Au,mde,mTo,gTo,Oq,hTo,pTo,uTo,Lu,gde,_To,bTo,Vq,vTo,FTo,TTo,yu,hde,MTo,ETo,Xq,CTo,wTo,ATo,xu,pde,LTo,yTo,zq,xTo,$To,kTo,$u,ude,STo,RTo,Wq,PTo,BTo,ITo,ku,_de,NTo,qTo,Qq,jTo,DTo,GTo,Su,bde,OTo,VTo,Hq,XTo,zTo,WTo,Ru,vde,QTo,HTo,Uq,UTo,JTo,YTo,Pu,Fde,KTo,ZTo,Jq,e7o,o7o,r7o,Bu,Tde,t7o,a7o,Yq,n7o,s7o,l7o,Iu,Mde,i7o,d7o,Kq,c7o,f7o,m7o,Nu,Ede,g7o,h7o,Zq,p7o,u7o,_7o,qu,Cde,b7o,v7o,ej,F7o,T7o,M7o,ju,wde,E7o,C7o,oj,w7o,A7o,L7o,Du,Ade,y7o,x7o,rj,$7o,k7o,S7o,Gu,Lde,R7o,P7o,tj,B7o,I7o,N7o,Ou,yde,q7o,j7o,aj,D7o,G7o,O7o,Vu,xde,V7o,X7o,nj,z7o,W7o,Q7o,Xu,$de,H7o,U7o,sj,J7o,Y7o,K7o,zu,kde,Z7o,e9o,lj,o9o,r9o,t9o,Wu,Sde,a9o,n9o,ij,s9o,l9o,i9o,Qu,Rde,d9o,c9o,dj,f9o,m9o,g9o,Hu,Pde,h9o,p9o,cj,u9o,_9o,b9o,Uu,Bde,v9o,F9o,fj,T9o,M9o,E9o,Ju,Ide,C9o,w9o,mj,A9o,L9o,y9o,Yu,Nde,x9o,$9o,gj,k9o,S9o,R9o,Ku,qde,P9o,B9o,hj,I9o,N9o,q9o,Zu,jde,j9o,D9o,pj,G9o,O9o,V9o,e_,Dde,X9o,z9o,uj,W9o,Q9o,H9o,o_,Gde,U9o,J9o,_j,Y9o,K9o,Z9o,r_,Ode,eMo,oMo,bj,rMo,tMo,aMo,t_,Vde,nMo,sMo,vj,lMo,iMo,dMo,a_,Xde,cMo,fMo,Fj,mMo,gMo,hMo,n_,zde,pMo,uMo,Tj,_Mo,bMo,vMo,s_,Wde,FMo,TMo,Mj,MMo,EMo,CMo,l_,Qde,wMo,AMo,Ej,LMo,yMo,xMo,i_,Hde,$Mo,kMo,Cj,SMo,RMo,PMo,d_,Ude,BMo,IMo,wj,NMo,qMo,jMo,c_,Jde,DMo,GMo,Aj,OMo,VMo,XMo,f_,Yde,zMo,WMo,Lj,QMo,HMo,UMo,m_,Kde,JMo,YMo,yj,KMo,ZMo,e4o,g_,Zde,o4o,r4o,xj,t4o,a4o,n4o,h_,ece,s4o,l4o,$j,i4o,d4o,c4o,p_,oce,f4o,m4o,kj,g4o,h4o,p4o,u_,rce,u4o,_4o,Sj,b4o,v4o,F4o,__,tce,T4o,M4o,Rj,E4o,C4o,w4o,b_,ace,A4o,L4o,Pj,y4o,x4o,$4o,v_,nce,k4o,S4o,Bj,R4o,P4o,B4o,F_,sce,I4o,N4o,Ij,q4o,j4o,D4o,T_,lce,G4o,O4o,Nj,V4o,X4o,z4o,M_,ice,W4o,Q4o,qj,H4o,U4o,J4o,E_,dce,Y4o,K4o,jj,Z4o,eEo,oEo,C_,cce,rEo,tEo,Dj,aEo,nEo,sEo,w_,lEo,fce,iEo,dEo,mce,cEo,fEo,A_,nGe,Ni,L_,gce,HA,mEo,hce,gEo,sGe,$o,UA,hEo,qi,pEo,Gj,uEo,_Eo,Oj,bEo,vEo,FEo,JA,TEo,pce,MEo,EEo,CEo,st,YA,wEo,uce,AEo,LEo,ji,yEo,_ce,xEo,$Eo,Vj,kEo,SEo,REo,y_,PEo,Ye,KA,BEo,bce,IEo,NEo,Ra,qEo,vce,jEo,DEo,Fce,GEo,OEo,Tce,VEo,XEo,zEo,G,x_,Mce,WEo,QEo,Xj,HEo,UEo,JEo,$_,Ece,YEo,KEo,zj,ZEo,eCo,oCo,k_,Cce,rCo,tCo,Wj,aCo,nCo,sCo,S_,wce,lCo,iCo,Qj,dCo,cCo,fCo,R_,Ace,mCo,gCo,Hj,hCo,pCo,uCo,P_,Lce,_Co,bCo,Uj,vCo,FCo,TCo,B_,yce,MCo,ECo,Jj,CCo,wCo,ACo,I_,xce,LCo,yCo,Yj,xCo,$Co,kCo,N_,$ce,SCo,RCo,Kj,PCo,BCo,ICo,q_,kce,NCo,qCo,Zj,jCo,DCo,GCo,j_,Sce,OCo,VCo,eD,XCo,zCo,WCo,D_,Rce,QCo,HCo,oD,UCo,JCo,YCo,G_,Pce,KCo,ZCo,rD,e5o,o5o,r5o,O_,Bce,t5o,a5o,tD,n5o,s5o,l5o,V_,Ice,i5o,d5o,aD,c5o,f5o,m5o,X_,Nce,g5o,h5o,nD,p5o,u5o,_5o,z_,qce,b5o,v5o,sD,F5o,T5o,M5o,W_,jce,E5o,C5o,lD,w5o,A5o,L5o,Q_,Dce,y5o,x5o,iD,$5o,k5o,S5o,H_,Gce,R5o,P5o,dD,B5o,I5o,N5o,U_,Oce,q5o,j5o,cD,D5o,G5o,O5o,J_,Vce,V5o,X5o,fD,z5o,W5o,Q5o,Y_,Xce,H5o,U5o,mD,J5o,Y5o,K5o,K_,zce,Z5o,e3o,gD,o3o,r3o,t3o,Z_,Wce,a3o,n3o,hD,s3o,l3o,i3o,e2,Qce,d3o,c3o,pD,f3o,m3o,g3o,o2,Hce,h3o,p3o,uD,u3o,_3o,b3o,r2,Uce,v3o,F3o,_D,T3o,M3o,E3o,t2,Jce,C3o,w3o,bD,A3o,L3o,y3o,a2,Yce,x3o,$3o,vD,k3o,S3o,R3o,n2,Kce,P3o,B3o,FD,I3o,N3o,q3o,s2,Zce,j3o,D3o,TD,G3o,O3o,V3o,l2,efe,X3o,z3o,MD,W3o,Q3o,H3o,i2,ofe,U3o,J3o,ED,Y3o,K3o,Z3o,d2,rfe,e0o,o0o,CD,r0o,t0o,a0o,c2,tfe,n0o,s0o,wD,l0o,i0o,d0o,f2,afe,c0o,f0o,AD,m0o,g0o,h0o,m2,nfe,p0o,u0o,LD,_0o,b0o,v0o,g2,sfe,F0o,T0o,yD,M0o,E0o,C0o,h2,lfe,w0o,A0o,xD,L0o,y0o,x0o,p2,ife,$0o,k0o,$D,S0o,R0o,P0o,u2,dfe,B0o,I0o,kD,N0o,q0o,j0o,_2,cfe,D0o,G0o,SD,O0o,V0o,X0o,b2,z0o,ffe,W0o,Q0o,mfe,H0o,U0o,v2,lGe,Di,F2,gfe,ZA,J0o,hfe,Y0o,iGe,ko,eL,K0o,Gi,Z0o,RD,ewo,owo,PD,rwo,two,awo,oL,nwo,pfe,swo,lwo,iwo,lt,rL,dwo,ufe,cwo,fwo,Oi,mwo,_fe,gwo,hwo,BD,pwo,uwo,_wo,T2,bwo,Ke,tL,vwo,bfe,Fwo,Two,Pa,Mwo,vfe,Ewo,Cwo,Ffe,wwo,Awo,Tfe,Lwo,ywo,xwo,z,M2,Mfe,$wo,kwo,ID,Swo,Rwo,Pwo,E2,Efe,Bwo,Iwo,ND,Nwo,qwo,jwo,C2,Cfe,Dwo,Gwo,qD,Owo,Vwo,Xwo,w2,wfe,zwo,Wwo,jD,Qwo,Hwo,Uwo,A2,Afe,Jwo,Ywo,DD,Kwo,Zwo,eAo,L2,Lfe,oAo,rAo,GD,tAo,aAo,nAo,y2,yfe,sAo,lAo,OD,iAo,dAo,cAo,x2,xfe,fAo,mAo,VD,gAo,hAo,pAo,$2,$fe,uAo,_Ao,XD,bAo,vAo,FAo,k2,kfe,TAo,MAo,zD,EAo,CAo,wAo,S2,Sfe,AAo,LAo,WD,yAo,xAo,$Ao,R2,Rfe,kAo,SAo,QD,RAo,PAo,BAo,P2,Pfe,IAo,NAo,HD,qAo,jAo,DAo,B2,Bfe,GAo,OAo,UD,VAo,XAo,zAo,I2,Ife,WAo,QAo,JD,HAo,UAo,JAo,N2,Nfe,YAo,KAo,YD,ZAo,eLo,oLo,q2,qfe,rLo,tLo,KD,aLo,nLo,sLo,j2,jfe,lLo,iLo,ZD,dLo,cLo,fLo,D2,Dfe,mLo,gLo,eG,hLo,pLo,uLo,G2,Gfe,_Lo,bLo,oG,vLo,FLo,TLo,O2,Ofe,MLo,ELo,rG,CLo,wLo,ALo,V2,Vfe,LLo,yLo,tG,xLo,$Lo,kLo,X2,Xfe,SLo,RLo,aG,PLo,BLo,ILo,z2,zfe,NLo,qLo,nG,jLo,DLo,GLo,W2,Wfe,OLo,VLo,sG,XLo,zLo,WLo,Q2,Qfe,QLo,HLo,lG,ULo,JLo,YLo,H2,Hfe,KLo,ZLo,iG,eyo,oyo,ryo,U2,Ufe,tyo,ayo,dG,nyo,syo,lyo,J2,Jfe,iyo,dyo,cG,cyo,fyo,myo,Y2,Yfe,gyo,hyo,fG,pyo,uyo,_yo,K2,Kfe,byo,vyo,mG,Fyo,Tyo,Myo,Z2,Zfe,Eyo,Cyo,gG,wyo,Ayo,Lyo,e1,eme,yyo,xyo,hG,$yo,kyo,Syo,o1,ome,Ryo,Pyo,pG,Byo,Iyo,Nyo,r1,rme,qyo,jyo,uG,Dyo,Gyo,Oyo,t1,tme,Vyo,Xyo,_G,zyo,Wyo,Qyo,a1,ame,Hyo,Uyo,bG,Jyo,Yyo,Kyo,n1,nme,Zyo,e8o,vG,o8o,r8o,t8o,s1,a8o,sme,n8o,s8o,lme,l8o,i8o,l1,dGe,Vi,i1,ime,aL,d8o,dme,c8o,cGe,So,nL,f8o,Xi,m8o,FG,g8o,h8o,TG,p8o,u8o,_8o,sL,b8o,cme,v8o,F8o,T8o,it,lL,M8o,fme,E8o,C8o,zi,w8o,mme,A8o,L8o,MG,y8o,x8o,$8o,d1,k8o,Ze,iL,S8o,gme,R8o,P8o,Ba,B8o,hme,I8o,N8o,pme,q8o,j8o,ume,D8o,G8o,O8o,Q,c1,_me,V8o,X8o,EG,z8o,W8o,Q8o,f1,bme,H8o,U8o,CG,J8o,Y8o,K8o,m1,vme,Z8o,exo,wG,oxo,rxo,txo,g1,Fme,axo,nxo,AG,sxo,lxo,ixo,h1,Tme,dxo,cxo,LG,fxo,mxo,gxo,p1,Mme,hxo,pxo,yG,uxo,_xo,bxo,u1,Eme,vxo,Fxo,xG,Txo,Mxo,Exo,_1,Cme,Cxo,wxo,$G,Axo,Lxo,yxo,b1,wme,xxo,$xo,kG,kxo,Sxo,Rxo,v1,Ame,Pxo,Bxo,SG,Ixo,Nxo,qxo,F1,Lme,jxo,Dxo,RG,Gxo,Oxo,Vxo,T1,yme,Xxo,zxo,PG,Wxo,Qxo,Hxo,M1,xme,Uxo,Jxo,BG,Yxo,Kxo,Zxo,E1,$me,e$o,o$o,IG,r$o,t$o,a$o,C1,kme,n$o,s$o,NG,l$o,i$o,d$o,w1,Sme,c$o,f$o,qG,m$o,g$o,h$o,A1,Rme,p$o,u$o,jG,_$o,b$o,v$o,L1,Pme,F$o,T$o,DG,M$o,E$o,C$o,y1,Bme,w$o,A$o,GG,L$o,y$o,x$o,x1,Ime,$$o,k$o,OG,S$o,R$o,P$o,$1,Nme,B$o,I$o,VG,N$o,q$o,j$o,k1,qme,D$o,G$o,XG,O$o,V$o,X$o,S1,jme,z$o,W$o,zG,Q$o,H$o,U$o,R1,Dme,J$o,Y$o,WG,K$o,Z$o,eko,P1,Gme,oko,rko,QG,tko,ako,nko,B1,Ome,sko,lko,HG,iko,dko,cko,I1,Vme,fko,mko,UG,gko,hko,pko,N1,Xme,uko,_ko,JG,bko,vko,Fko,q1,zme,Tko,Mko,YG,Eko,Cko,wko,j1,Wme,Ako,Lko,KG,yko,xko,$ko,D1,Qme,kko,Sko,ZG,Rko,Pko,Bko,G1,Hme,Iko,Nko,Ume,qko,jko,Dko,O1,Jme,Gko,Oko,eO,Vko,Xko,zko,V1,Yme,Wko,Qko,oO,Hko,Uko,Jko,X1,Kme,Yko,Kko,rO,Zko,eSo,oSo,z1,Zme,rSo,tSo,tO,aSo,nSo,sSo,W1,lSo,ege,iSo,dSo,oge,cSo,fSo,Q1,fGe,Wi,H1,rge,dL,mSo,tge,gSo,mGe,Ro,cL,hSo,Qi,pSo,aO,uSo,_So,nO,bSo,vSo,FSo,fL,TSo,age,MSo,ESo,CSo,dt,mL,wSo,nge,ASo,LSo,Hi,ySo,sge,xSo,$So,sO,kSo,SSo,RSo,U1,PSo,eo,gL,BSo,lge,ISo,NSo,Ia,qSo,ige,jSo,DSo,dge,GSo,OSo,cge,VSo,XSo,zSo,pe,J1,fge,WSo,QSo,lO,HSo,USo,JSo,Y1,mge,YSo,KSo,iO,ZSo,eRo,oRo,K1,gge,rRo,tRo,dO,aRo,nRo,sRo,Z1,hge,lRo,iRo,cO,dRo,cRo,fRo,eb,pge,mRo,gRo,fO,hRo,pRo,uRo,ob,uge,_Ro,bRo,mO,vRo,FRo,TRo,rb,_ge,MRo,ERo,gO,CRo,wRo,ARo,tb,bge,LRo,yRo,hO,xRo,$Ro,kRo,ab,vge,SRo,RRo,pO,PRo,BRo,IRo,nb,Fge,NRo,qRo,uO,jRo,DRo,GRo,sb,Tge,ORo,VRo,_O,XRo,zRo,WRo,lb,Mge,QRo,HRo,bO,URo,JRo,YRo,ib,Ege,KRo,ZRo,vO,ePo,oPo,rPo,db,Cge,tPo,aPo,FO,nPo,sPo,lPo,cb,wge,iPo,dPo,TO,cPo,fPo,mPo,fb,Age,gPo,hPo,MO,pPo,uPo,_Po,mb,Lge,bPo,vPo,EO,FPo,TPo,MPo,gb,EPo,yge,CPo,wPo,xge,APo,LPo,hb,gGe,Ui,pb,$ge,hL,yPo,kge,xPo,hGe,Po,pL,$Po,Ji,kPo,CO,SPo,RPo,wO,PPo,BPo,IPo,uL,NPo,Sge,qPo,jPo,DPo,ct,_L,GPo,Rge,OPo,VPo,Yi,XPo,Pge,zPo,WPo,AO,QPo,HPo,UPo,ub,JPo,oo,bL,YPo,Bge,KPo,ZPo,Na,eBo,Ige,oBo,rBo,Nge,tBo,aBo,qge,nBo,sBo,lBo,N,_b,jge,iBo,dBo,LO,cBo,fBo,mBo,bb,Dge,gBo,hBo,yO,pBo,uBo,_Bo,vb,Gge,bBo,vBo,xO,FBo,TBo,MBo,Fb,Oge,EBo,CBo,$O,wBo,ABo,LBo,Tb,Vge,yBo,xBo,kO,$Bo,kBo,SBo,Mb,Xge,RBo,PBo,SO,BBo,IBo,NBo,Eb,zge,qBo,jBo,RO,DBo,GBo,OBo,Cb,Wge,VBo,XBo,PO,zBo,WBo,QBo,wb,Qge,HBo,UBo,BO,JBo,YBo,KBo,Ab,Hge,ZBo,eIo,IO,oIo,rIo,tIo,Lb,Uge,aIo,nIo,NO,sIo,lIo,iIo,yb,Jge,dIo,cIo,qO,fIo,mIo,gIo,xb,Yge,hIo,pIo,jO,uIo,_Io,bIo,$b,Kge,vIo,FIo,DO,TIo,MIo,EIo,kb,Zge,CIo,wIo,GO,AIo,LIo,yIo,Sb,ehe,xIo,$Io,OO,kIo,SIo,RIo,Rb,ohe,PIo,BIo,VO,IIo,NIo,qIo,Pb,rhe,jIo,DIo,XO,GIo,OIo,VIo,Bb,the,XIo,zIo,zO,WIo,QIo,HIo,Ib,ahe,UIo,JIo,WO,YIo,KIo,ZIo,Nb,nhe,eNo,oNo,QO,rNo,tNo,aNo,qb,she,nNo,sNo,HO,lNo,iNo,dNo,jb,lhe,cNo,fNo,UO,mNo,gNo,hNo,Db,ihe,pNo,uNo,JO,_No,bNo,vNo,Gb,dhe,FNo,TNo,YO,MNo,ENo,CNo,Ob,che,wNo,ANo,KO,LNo,yNo,xNo,Vb,fhe,$No,kNo,ZO,SNo,RNo,PNo,Xb,mhe,BNo,INo,eV,NNo,qNo,jNo,zb,ghe,DNo,GNo,oV,ONo,VNo,XNo,Wb,hhe,zNo,WNo,rV,QNo,HNo,UNo,Qb,phe,JNo,YNo,tV,KNo,ZNo,eqo,Hb,uhe,oqo,rqo,aV,tqo,aqo,nqo,Ub,_he,sqo,lqo,nV,iqo,dqo,cqo,Jb,bhe,fqo,mqo,sV,gqo,hqo,pqo,Yb,vhe,uqo,_qo,lV,bqo,vqo,Fqo,Kb,Fhe,Tqo,Mqo,iV,Eqo,Cqo,wqo,Zb,The,Aqo,Lqo,dV,yqo,xqo,$qo,ev,Mhe,kqo,Sqo,cV,Rqo,Pqo,Bqo,ov,Ehe,Iqo,Nqo,fV,qqo,jqo,Dqo,rv,Che,Gqo,Oqo,mV,Vqo,Xqo,zqo,tv,whe,Wqo,Qqo,gV,Hqo,Uqo,Jqo,av,Ahe,Yqo,Kqo,hV,Zqo,ejo,ojo,nv,Lhe,rjo,tjo,pV,ajo,njo,sjo,sv,yhe,ljo,ijo,uV,djo,cjo,fjo,lv,xhe,mjo,gjo,_V,hjo,pjo,ujo,iv,$he,_jo,bjo,bV,vjo,Fjo,Tjo,dv,khe,Mjo,Ejo,vV,Cjo,wjo,Ajo,cv,Ljo,She,yjo,xjo,Rhe,$jo,kjo,fv,pGe,Ki,mv,Phe,vL,Sjo,Bhe,Rjo,uGe,Bo,FL,Pjo,Zi,Bjo,FV,Ijo,Njo,TV,qjo,jjo,Djo,TL,Gjo,Ihe,Ojo,Vjo,Xjo,ft,ML,zjo,Nhe,Wjo,Qjo,ed,Hjo,qhe,Ujo,Jjo,MV,Yjo,Kjo,Zjo,gv,eDo,ro,EL,oDo,jhe,rDo,tDo,qa,aDo,Dhe,nDo,sDo,Ghe,lDo,iDo,Ohe,dDo,cDo,fDo,Z,hv,Vhe,mDo,gDo,EV,hDo,pDo,uDo,pv,Xhe,_Do,bDo,CV,vDo,FDo,TDo,uv,zhe,MDo,EDo,wV,CDo,wDo,ADo,_v,Whe,LDo,yDo,AV,xDo,$Do,kDo,bv,Qhe,SDo,RDo,LV,PDo,BDo,IDo,vv,Hhe,NDo,qDo,yV,jDo,DDo,GDo,Fv,Uhe,ODo,VDo,xV,XDo,zDo,WDo,Tv,Jhe,QDo,HDo,$V,UDo,JDo,YDo,Mv,Yhe,KDo,ZDo,kV,eGo,oGo,rGo,Ev,Khe,tGo,aGo,SV,nGo,sGo,lGo,Cv,Zhe,iGo,dGo,RV,cGo,fGo,mGo,wv,epe,gGo,hGo,PV,pGo,uGo,_Go,Av,ope,bGo,vGo,BV,FGo,TGo,MGo,Lv,rpe,EGo,CGo,IV,wGo,AGo,LGo,yv,tpe,yGo,xGo,NV,$Go,kGo,SGo,xv,ape,RGo,PGo,qV,BGo,IGo,NGo,$v,npe,qGo,jGo,jV,DGo,GGo,OGo,kv,spe,VGo,XGo,DV,zGo,WGo,QGo,Sv,lpe,HGo,UGo,GV,JGo,YGo,KGo,Rv,ipe,ZGo,eOo,OV,oOo,rOo,tOo,Pv,dpe,aOo,nOo,VV,sOo,lOo,iOo,Bv,cpe,dOo,cOo,XV,fOo,mOo,gOo,Iv,fpe,hOo,pOo,zV,uOo,_Oo,bOo,Nv,mpe,vOo,FOo,WV,TOo,MOo,EOo,qv,gpe,COo,wOo,QV,AOo,LOo,yOo,jv,hpe,xOo,$Oo,HV,kOo,SOo,ROo,Dv,ppe,POo,BOo,UV,IOo,NOo,qOo,Gv,upe,jOo,DOo,JV,GOo,OOo,VOo,Ov,_pe,XOo,zOo,YV,WOo,QOo,HOo,Vv,UOo,bpe,JOo,YOo,vpe,KOo,ZOo,Xv,_Ge,od,zv,Fpe,CL,eVo,Tpe,oVo,bGe,Io,wL,rVo,rd,tVo,KV,aVo,nVo,ZV,sVo,lVo,iVo,AL,dVo,Mpe,cVo,fVo,mVo,mt,LL,gVo,Epe,hVo,pVo,td,uVo,Cpe,_Vo,bVo,eX,vVo,FVo,TVo,Wv,MVo,to,yL,EVo,wpe,CVo,wVo,ja,AVo,Ape,LVo,yVo,Lpe,xVo,$Vo,ype,kVo,SVo,RVo,Zr,Qv,xpe,PVo,BVo,oX,IVo,NVo,qVo,Hv,$pe,jVo,DVo,rX,GVo,OVo,VVo,Uv,kpe,XVo,zVo,tX,WVo,QVo,HVo,Jv,Spe,UVo,JVo,aX,YVo,KVo,ZVo,Yv,Rpe,eXo,oXo,nX,rXo,tXo,aXo,Kv,nXo,Ppe,sXo,lXo,Bpe,iXo,dXo,Zv,vGe,ad,eF,Ipe,xL,cXo,Npe,fXo,FGe,No,$L,mXo,nd,gXo,sX,hXo,pXo,lX,uXo,_Xo,bXo,kL,vXo,qpe,FXo,TXo,MXo,gt,SL,EXo,jpe,CXo,wXo,sd,AXo,Dpe,LXo,yXo,iX,xXo,$Xo,kXo,oF,SXo,ao,RL,RXo,Gpe,PXo,BXo,Da,IXo,Ope,NXo,qXo,Vpe,jXo,DXo,Xpe,GXo,OXo,VXo,U,rF,zpe,XXo,zXo,dX,WXo,QXo,HXo,tF,Wpe,UXo,JXo,cX,YXo,KXo,ZXo,aF,Qpe,ezo,ozo,fX,rzo,tzo,azo,nF,Hpe,nzo,szo,mX,lzo,izo,dzo,sF,Upe,czo,fzo,gX,mzo,gzo,hzo,lF,Jpe,pzo,uzo,hX,_zo,bzo,vzo,iF,Ype,Fzo,Tzo,pX,Mzo,Ezo,Czo,dF,Kpe,wzo,Azo,uX,Lzo,yzo,xzo,cF,Zpe,$zo,kzo,_X,Szo,Rzo,Pzo,fF,eue,Bzo,Izo,bX,Nzo,qzo,jzo,mF,oue,Dzo,Gzo,vX,Ozo,Vzo,Xzo,gF,rue,zzo,Wzo,FX,Qzo,Hzo,Uzo,hF,tue,Jzo,Yzo,TX,Kzo,Zzo,eWo,pF,aue,oWo,rWo,MX,tWo,aWo,nWo,uF,nue,sWo,lWo,EX,iWo,dWo,cWo,_F,sue,fWo,mWo,CX,gWo,hWo,pWo,bF,lue,uWo,_Wo,wX,bWo,vWo,FWo,vF,iue,TWo,MWo,AX,EWo,CWo,wWo,FF,due,AWo,LWo,LX,yWo,xWo,$Wo,TF,cue,kWo,SWo,yX,RWo,PWo,BWo,MF,fue,IWo,NWo,xX,qWo,jWo,DWo,EF,mue,GWo,OWo,$X,VWo,XWo,zWo,CF,gue,WWo,QWo,kX,HWo,UWo,JWo,wF,hue,YWo,KWo,SX,ZWo,eQo,oQo,AF,pue,rQo,tQo,RX,aQo,nQo,sQo,LF,uue,lQo,iQo,PX,dQo,cQo,fQo,yF,_ue,mQo,gQo,BX,hQo,pQo,uQo,xF,bue,_Qo,bQo,IX,vQo,FQo,TQo,$F,vue,MQo,EQo,NX,CQo,wQo,AQo,kF,Fue,LQo,yQo,qX,xQo,$Qo,kQo,SF,Tue,SQo,RQo,jX,PQo,BQo,IQo,RF,Mue,NQo,qQo,DX,jQo,DQo,GQo,PF,Eue,OQo,VQo,GX,XQo,zQo,WQo,BF,Cue,QQo,HQo,OX,UQo,JQo,YQo,IF,KQo,wue,ZQo,eHo,Aue,oHo,rHo,NF,TGe,ld,qF,Lue,PL,tHo,yue,aHo,MGe,qo,BL,nHo,id,sHo,VX,lHo,iHo,XX,dHo,cHo,fHo,IL,mHo,xue,gHo,hHo,pHo,ht,NL,uHo,$ue,_Ho,bHo,dd,vHo,kue,FHo,THo,zX,MHo,EHo,CHo,jF,wHo,no,qL,AHo,Sue,LHo,yHo,Ga,xHo,Rue,$Ho,kHo,Pue,SHo,RHo,Bue,PHo,BHo,IHo,V,DF,Iue,NHo,qHo,WX,jHo,DHo,GHo,GF,Nue,OHo,VHo,QX,XHo,zHo,WHo,OF,que,QHo,HHo,HX,UHo,JHo,YHo,VF,jue,KHo,ZHo,UX,eUo,oUo,rUo,XF,Due,tUo,aUo,JX,nUo,sUo,lUo,zF,Gue,iUo,dUo,YX,cUo,fUo,mUo,WF,Oue,gUo,hUo,KX,pUo,uUo,_Uo,QF,Vue,bUo,vUo,ZX,FUo,TUo,MUo,HF,Xue,EUo,CUo,ez,wUo,AUo,LUo,UF,zue,yUo,xUo,oz,$Uo,kUo,SUo,JF,Wue,RUo,PUo,rz,BUo,IUo,NUo,YF,Que,qUo,jUo,tz,DUo,GUo,OUo,KF,Hue,VUo,XUo,az,zUo,WUo,QUo,ZF,Uue,HUo,UUo,nz,JUo,YUo,KUo,e6,Jue,ZUo,eJo,sz,oJo,rJo,tJo,o6,Yue,aJo,nJo,lz,sJo,lJo,iJo,r6,Kue,dJo,cJo,iz,fJo,mJo,gJo,t6,Zue,hJo,pJo,dz,uJo,_Jo,bJo,a6,e_e,vJo,FJo,cz,TJo,MJo,EJo,n6,o_e,CJo,wJo,fz,AJo,LJo,yJo,s6,r_e,xJo,$Jo,mz,kJo,SJo,RJo,l6,t_e,PJo,BJo,gz,IJo,NJo,qJo,i6,a_e,jJo,DJo,hz,GJo,OJo,VJo,d6,n_e,XJo,zJo,pz,WJo,QJo,HJo,c6,s_e,UJo,JJo,uz,YJo,KJo,ZJo,f6,l_e,eYo,oYo,_z,rYo,tYo,aYo,m6,i_e,nYo,sYo,bz,lYo,iYo,dYo,g6,d_e,cYo,fYo,vz,mYo,gYo,hYo,h6,c_e,pYo,uYo,Fz,_Yo,bYo,vYo,p6,f_e,FYo,TYo,Tz,MYo,EYo,CYo,u6,m_e,wYo,AYo,Mz,LYo,yYo,xYo,_6,g_e,$Yo,kYo,Ez,SYo,RYo,PYo,b6,h_e,BYo,IYo,Cz,NYo,qYo,jYo,v6,p_e,DYo,GYo,wz,OYo,VYo,XYo,F6,u_e,zYo,WYo,Az,QYo,HYo,UYo,T6,__e,JYo,YYo,Lz,KYo,ZYo,eKo,M6,b_e,oKo,rKo,yz,tKo,aKo,nKo,E6,v_e,sKo,lKo,xz,iKo,dKo,cKo,C6,F_e,fKo,mKo,$z,gKo,hKo,pKo,w6,T_e,uKo,_Ko,kz,bKo,vKo,FKo,A6,TKo,M_e,MKo,EKo,E_e,CKo,wKo,L6,EGe,cd,y6,C_e,jL,AKo,w_e,LKo,CGe,jo,DL,yKo,fd,xKo,Sz,$Ko,kKo,Rz,SKo,RKo,PKo,GL,BKo,A_e,IKo,NKo,qKo,pt,OL,jKo,L_e,DKo,GKo,md,OKo,y_e,VKo,XKo,Pz,zKo,WKo,QKo,x6,HKo,so,VL,UKo,x_e,JKo,YKo,Oa,KKo,$_e,ZKo,eZo,k_e,oZo,rZo,S_e,tZo,aZo,nZo,R_e,$6,P_e,sZo,lZo,Bz,iZo,dZo,cZo,k6,fZo,B_e,mZo,gZo,I_e,hZo,pZo,S6,wGe,gd,R6,N_e,XL,uZo,q_e,_Zo,AGe,Do,zL,bZo,hd,vZo,Iz,FZo,TZo,Nz,MZo,EZo,CZo,WL,wZo,j_e,AZo,LZo,yZo,ut,QL,xZo,D_e,$Zo,kZo,pd,SZo,G_e,RZo,PZo,qz,BZo,IZo,NZo,P6,qZo,lo,HL,jZo,O_e,DZo,GZo,Va,OZo,V_e,VZo,XZo,X_e,zZo,WZo,z_e,QZo,HZo,UZo,Fe,B6,W_e,JZo,YZo,jz,KZo,ZZo,eer,I6,Q_e,oer,rer,Dz,ter,aer,ner,N6,H_e,ser,ler,Gz,ier,der,cer,q6,U_e,fer,mer,Oz,ger,her,per,Os,J_e,uer,_er,Vz,ber,ver,Xz,Fer,Ter,Mer,j6,Y_e,Eer,Cer,zz,wer,Aer,Ler,Vs,K_e,yer,xer,Wz,$er,ker,Qz,Ser,Rer,Per,_t,Z_e,Ber,Ier,Hz,Ner,qer,Uz,jer,Der,Jz,Ger,Oer,Ver,D6,e2e,Xer,zer,Yz,Wer,Qer,Her,G6,o2e,Uer,Jer,Kz,Yer,Ker,Zer,O6,r2e,eor,oor,Zz,ror,tor,aor,V6,t2e,nor,sor,eW,lor,ior,dor,X6,a2e,cor,mor,oW,gor,hor,por,z6,n2e,uor,_or,rW,bor,vor,For,W6,s2e,Tor,Mor,tW,Eor,Cor,wor,Q6,Aor,l2e,Lor,yor,i2e,xor,$or,H6,LGe,ud,U6,d2e,UL,kor,c2e,Sor,yGe,Go,JL,Ror,_d,Por,aW,Bor,Ior,nW,Nor,qor,jor,YL,Dor,f2e,Gor,Oor,Vor,bt,KL,Xor,m2e,zor,Wor,bd,Qor,g2e,Hor,Uor,sW,Jor,Yor,Kor,J6,Zor,io,ZL,err,h2e,orr,rrr,Xa,trr,p2e,arr,nrr,u2e,srr,lrr,_2e,irr,drr,crr,b2e,Y6,v2e,frr,mrr,lW,grr,hrr,prr,K6,urr,F2e,_rr,brr,T2e,vrr,Frr,Z6,xGe,vd,eT,M2e,ey,Trr,E2e,Mrr,$Ge,Oo,oy,Err,Fd,Crr,iW,wrr,Arr,dW,Lrr,yrr,xrr,ry,$rr,C2e,krr,Srr,Rrr,vt,ty,Prr,w2e,Brr,Irr,Td,Nrr,A2e,qrr,jrr,cW,Drr,Grr,Orr,oT,Vrr,co,ay,Xrr,L2e,zrr,Wrr,za,Qrr,y2e,Hrr,Urr,x2e,Jrr,Yrr,$2e,Krr,Zrr,etr,k2e,rT,S2e,otr,rtr,fW,ttr,atr,ntr,tT,str,R2e,ltr,itr,P2e,dtr,ctr,aT,kGe,Md,nT,B2e,ny,ftr,I2e,mtr,SGe,Vo,sy,gtr,Ed,htr,mW,ptr,utr,gW,_tr,btr,vtr,ly,Ftr,N2e,Ttr,Mtr,Etr,Ft,iy,Ctr,q2e,wtr,Atr,Cd,Ltr,j2e,ytr,xtr,hW,$tr,ktr,Str,sT,Rtr,fo,dy,Ptr,D2e,Btr,Itr,Wa,Ntr,G2e,qtr,jtr,O2e,Dtr,Gtr,V2e,Otr,Vtr,Xtr,Pe,lT,X2e,ztr,Wtr,pW,Qtr,Htr,Utr,iT,z2e,Jtr,Ytr,uW,Ktr,Ztr,ear,dT,W2e,oar,rar,_W,tar,aar,nar,cT,Q2e,sar,lar,bW,iar,dar,car,fT,H2e,far,mar,vW,gar,har,par,mT,U2e,uar,_ar,FW,bar,Far,Tar,gT,J2e,Mar,Ear,TW,Car,war,Aar,hT,Y2e,Lar,yar,MW,xar,$ar,kar,pT,K2e,Sar,Rar,EW,Par,Bar,Iar,uT,Nar,Z2e,qar,jar,e1e,Dar,Gar,_T,RGe,wd,bT,o1e,cy,Oar,r1e,Var,PGe,Xo,fy,Xar,Ad,zar,CW,War,Qar,wW,Har,Uar,Jar,my,Yar,t1e,Kar,Zar,enr,Tt,gy,onr,a1e,rnr,tnr,Ld,anr,n1e,nnr,snr,AW,lnr,inr,dnr,vT,cnr,mo,hy,fnr,s1e,mnr,gnr,Qa,hnr,l1e,pnr,unr,i1e,_nr,bnr,d1e,vnr,Fnr,Tnr,et,FT,c1e,Mnr,Enr,LW,Cnr,wnr,Anr,TT,f1e,Lnr,ynr,yW,xnr,$nr,knr,MT,m1e,Snr,Rnr,xW,Pnr,Bnr,Inr,ET,g1e,Nnr,qnr,$W,jnr,Dnr,Gnr,CT,h1e,Onr,Vnr,kW,Xnr,znr,Wnr,wT,Qnr,p1e,Hnr,Unr,u1e,Jnr,Ynr,AT,BGe,yd,LT,_1e,py,Knr,b1e,Znr,IGe,zo,uy,esr,xd,osr,SW,rsr,tsr,RW,asr,nsr,ssr,_y,lsr,v1e,isr,dsr,csr,Mt,by,fsr,F1e,msr,gsr,$d,hsr,T1e,psr,usr,PW,_sr,bsr,vsr,yT,Fsr,go,vy,Tsr,M1e,Msr,Esr,Ha,Csr,E1e,wsr,Asr,C1e,Lsr,ysr,w1e,xsr,$sr,ksr,Le,xT,A1e,Ssr,Rsr,BW,Psr,Bsr,Isr,$T,L1e,Nsr,qsr,IW,jsr,Dsr,Gsr,kT,y1e,Osr,Vsr,NW,Xsr,zsr,Wsr,ST,x1e,Qsr,Hsr,qW,Usr,Jsr,Ysr,RT,$1e,Ksr,Zsr,jW,elr,olr,rlr,PT,k1e,tlr,alr,DW,nlr,slr,llr,BT,S1e,ilr,dlr,GW,clr,flr,mlr,IT,R1e,glr,hlr,OW,plr,ulr,_lr,NT,P1e,blr,vlr,VW,Flr,Tlr,Mlr,qT,B1e,Elr,Clr,XW,wlr,Alr,Llr,jT,ylr,I1e,xlr,$lr,N1e,klr,Slr,DT,NGe,kd,GT,q1e,Fy,Rlr,j1e,Plr,qGe,Wo,Ty,Blr,Sd,Ilr,zW,Nlr,qlr,WW,jlr,Dlr,Glr,My,Olr,D1e,Vlr,Xlr,zlr,Et,Ey,Wlr,G1e,Qlr,Hlr,Rd,Ulr,O1e,Jlr,Ylr,QW,Klr,Zlr,eir,OT,oir,ho,Cy,rir,V1e,tir,air,Ua,nir,X1e,sir,lir,z1e,iir,dir,W1e,cir,fir,mir,wy,VT,Q1e,gir,hir,HW,pir,uir,_ir,XT,H1e,bir,vir,UW,Fir,Tir,Mir,zT,Eir,U1e,Cir,wir,J1e,Air,Lir,WT,jGe,Pd,QT,Y1e,Ay,yir,K1e,xir,DGe,Qo,Ly,$ir,Bd,kir,JW,Sir,Rir,YW,Pir,Bir,Iir,yy,Nir,Z1e,qir,jir,Dir,Ct,xy,Gir,ebe,Oir,Vir,Id,Xir,obe,zir,Wir,KW,Qir,Hir,Uir,HT,Jir,po,$y,Yir,rbe,Kir,Zir,Ja,edr,tbe,odr,rdr,abe,tdr,adr,nbe,ndr,sdr,ldr,ot,UT,sbe,idr,ddr,ZW,cdr,fdr,mdr,JT,lbe,gdr,hdr,eQ,pdr,udr,_dr,YT,ibe,bdr,vdr,oQ,Fdr,Tdr,Mdr,KT,dbe,Edr,Cdr,rQ,wdr,Adr,Ldr,ZT,cbe,ydr,xdr,tQ,$dr,kdr,Sdr,e7,Rdr,fbe,Pdr,Bdr,mbe,Idr,Ndr,o7,GGe,Nd,r7,gbe,ky,qdr,hbe,jdr,OGe,Ho,Sy,Ddr,qd,Gdr,aQ,Odr,Vdr,nQ,Xdr,zdr,Wdr,Ry,Qdr,pbe,Hdr,Udr,Jdr,wt,Py,Ydr,ube,Kdr,Zdr,jd,ecr,_be,ocr,rcr,sQ,tcr,acr,ncr,t7,scr,uo,By,lcr,bbe,icr,dcr,Ya,ccr,vbe,fcr,mcr,Fbe,gcr,hcr,Tbe,pcr,ucr,_cr,Dd,a7,Mbe,bcr,vcr,lQ,Fcr,Tcr,Mcr,n7,Ebe,Ecr,Ccr,iQ,wcr,Acr,Lcr,s7,Cbe,ycr,xcr,dQ,$cr,kcr,Scr,l7,Rcr,wbe,Pcr,Bcr,Abe,Icr,Ncr,i7,VGe,Gd,d7,Lbe,Iy,qcr,ybe,jcr,XGe,Uo,Ny,Dcr,Od,Gcr,cQ,Ocr,Vcr,fQ,Xcr,zcr,Wcr,qy,Qcr,xbe,Hcr,Ucr,Jcr,At,jy,Ycr,$be,Kcr,Zcr,Vd,efr,kbe,ofr,rfr,mQ,tfr,afr,nfr,c7,sfr,_o,Dy,lfr,Sbe,ifr,dfr,Ka,cfr,Rbe,ffr,mfr,Pbe,gfr,hfr,Bbe,pfr,ufr,_fr,Gy,f7,Ibe,bfr,vfr,gQ,Ffr,Tfr,Mfr,m7,Nbe,Efr,Cfr,hQ,wfr,Afr,Lfr,g7,yfr,qbe,xfr,$fr,jbe,kfr,Sfr,h7,zGe,Xd,p7,Dbe,Oy,Rfr,Gbe,Pfr,WGe,Jo,Vy,Bfr,zd,Ifr,pQ,Nfr,qfr,uQ,jfr,Dfr,Gfr,Xy,Ofr,Obe,Vfr,Xfr,zfr,Lt,zy,Wfr,Vbe,Qfr,Hfr,Wd,Ufr,Xbe,Jfr,Yfr,_Q,Kfr,Zfr,emr,u7,omr,bo,Wy,rmr,zbe,tmr,amr,Za,nmr,Wbe,smr,lmr,Qbe,imr,dmr,Hbe,cmr,fmr,mmr,Ube,_7,Jbe,gmr,hmr,bQ,pmr,umr,_mr,b7,bmr,Ybe,vmr,Fmr,Kbe,Tmr,Mmr,v7,QGe,Qd,F7,Zbe,Qy,Emr,eve,Cmr,HGe,Yo,Hy,wmr,Hd,Amr,vQ,Lmr,ymr,FQ,xmr,$mr,kmr,Uy,Smr,ove,Rmr,Pmr,Bmr,yt,Jy,Imr,rve,Nmr,qmr,Ud,jmr,tve,Dmr,Gmr,TQ,Omr,Vmr,Xmr,T7,zmr,vo,Yy,Wmr,ave,Qmr,Hmr,en,Umr,nve,Jmr,Ymr,sve,Kmr,Zmr,lve,egr,ogr,rgr,on,M7,ive,tgr,agr,MQ,ngr,sgr,lgr,E7,dve,igr,dgr,EQ,cgr,fgr,mgr,C7,cve,ggr,hgr,CQ,pgr,ugr,_gr,w7,fve,bgr,vgr,wQ,Fgr,Tgr,Mgr,A7,Egr,mve,Cgr,wgr,gve,Agr,Lgr,L7,UGe,Jd,y7,hve,Ky,ygr,pve,xgr,JGe,Ko,Zy,$gr,Yd,kgr,AQ,Sgr,Rgr,LQ,Pgr,Bgr,Igr,e8,Ngr,uve,qgr,jgr,Dgr,xt,o8,Ggr,_ve,Ogr,Vgr,Kd,Xgr,bve,zgr,Wgr,yQ,Qgr,Hgr,Ugr,x7,Jgr,Fo,r8,Ygr,vve,Kgr,Zgr,rn,ehr,Fve,ohr,rhr,Tve,thr,ahr,Mve,nhr,shr,lhr,Eve,$7,Cve,ihr,dhr,xQ,chr,fhr,mhr,k7,ghr,wve,hhr,phr,Ave,uhr,_hr,S7,YGe,Zd,R7,Lve,t8,bhr,yve,vhr,KGe,Zo,a8,Fhr,ec,Thr,$Q,Mhr,Ehr,kQ,Chr,whr,Ahr,n8,Lhr,xve,yhr,xhr,$hr,$t,s8,khr,$ve,Shr,Rhr,oc,Phr,kve,Bhr,Ihr,SQ,Nhr,qhr,jhr,P7,Dhr,Lr,l8,Ghr,Sve,Ohr,Vhr,tn,Xhr,Rve,zhr,Whr,Pve,Qhr,Hhr,Bve,Uhr,Jhr,Yhr,q,B7,Ive,Khr,Zhr,RQ,epr,opr,rpr,I7,Nve,tpr,apr,PQ,npr,spr,lpr,N7,qve,ipr,dpr,BQ,cpr,fpr,mpr,q7,jve,gpr,hpr,IQ,ppr,upr,_pr,j7,Dve,bpr,vpr,NQ,Fpr,Tpr,Mpr,D7,Gve,Epr,Cpr,qQ,wpr,Apr,Lpr,G7,Ove,ypr,xpr,jQ,$pr,kpr,Spr,O7,Vve,Rpr,Ppr,DQ,Bpr,Ipr,Npr,V7,Xve,qpr,jpr,GQ,Dpr,Gpr,Opr,X7,zve,Vpr,Xpr,OQ,zpr,Wpr,Qpr,z7,Wve,Hpr,Upr,VQ,Jpr,Ypr,Kpr,W7,Qve,Zpr,eur,XQ,our,rur,tur,Q7,Hve,aur,nur,zQ,sur,lur,iur,H7,Uve,dur,cur,WQ,fur,mur,gur,U7,Jve,hur,pur,QQ,uur,_ur,bur,J7,Yve,vur,Fur,HQ,Tur,Mur,Eur,Y7,Kve,Cur,wur,UQ,Aur,Lur,yur,Xs,Zve,xur,$ur,JQ,kur,Sur,YQ,Rur,Pur,Bur,K7,eFe,Iur,Nur,KQ,qur,jur,Dur,Z7,oFe,Gur,Our,ZQ,Vur,Xur,zur,e9,rFe,Wur,Qur,eH,Hur,Uur,Jur,o9,tFe,Yur,Kur,oH,Zur,e_r,o_r,r9,aFe,r_r,t_r,rH,a_r,n_r,s_r,t9,nFe,l_r,i_r,tH,d_r,c_r,f_r,a9,sFe,m_r,g_r,aH,h_r,p_r,u_r,n9,lFe,__r,b_r,nH,v_r,F_r,T_r,s9,iFe,M_r,E_r,sH,C_r,w_r,A_r,l9,dFe,L_r,y_r,lH,x_r,$_r,k_r,i9,cFe,S_r,R_r,iH,P_r,B_r,I_r,d9,fFe,N_r,q_r,dH,j_r,D_r,G_r,c9,mFe,O_r,V_r,cH,X_r,z_r,W_r,f9,gFe,Q_r,H_r,fH,U_r,J_r,Y_r,m9,hFe,K_r,Z_r,mH,e2r,o2r,r2r,g9,pFe,t2r,a2r,gH,n2r,s2r,l2r,h9,uFe,i2r,d2r,hH,c2r,f2r,m2r,p9,_Fe,g2r,h2r,pH,p2r,u2r,_2r,u9,bFe,b2r,v2r,uH,F2r,T2r,M2r,_9,vFe,E2r,C2r,_H,w2r,A2r,L2r,b9,FFe,y2r,x2r,bH,$2r,k2r,S2r,v9,TFe,R2r,P2r,vH,B2r,I2r,N2r,F9,MFe,q2r,j2r,FH,D2r,G2r,O2r,T9,EFe,V2r,X2r,TH,z2r,W2r,Q2r,M9,CFe,H2r,U2r,MH,J2r,Y2r,K2r,E9,wFe,Z2r,e1r,EH,o1r,r1r,t1r,C9,AFe,a1r,n1r,CH,s1r,l1r,i1r,w9,LFe,d1r,c1r,wH,f1r,m1r,g1r,A9,yFe,h1r,p1r,AH,u1r,_1r,b1r,L9,ZGe,rc,y9,xFe,i8,v1r,$Fe,F1r,eOe,er,d8,T1r,tc,M1r,LH,E1r,C1r,yH,w1r,A1r,L1r,c8,y1r,kFe,x1r,$1r,k1r,kt,f8,S1r,SFe,R1r,P1r,ac,B1r,RFe,I1r,N1r,xH,q1r,j1r,D1r,x9,G1r,yr,m8,O1r,PFe,V1r,X1r,an,z1r,BFe,W1r,Q1r,IFe,H1r,U1r,NFe,J1r,Y1r,K1r,se,$9,qFe,Z1r,ebr,$H,obr,rbr,tbr,k9,jFe,abr,nbr,kH,sbr,lbr,ibr,S9,DFe,dbr,cbr,SH,fbr,mbr,gbr,R9,GFe,hbr,pbr,RH,ubr,_br,bbr,P9,OFe,vbr,Fbr,PH,Tbr,Mbr,Ebr,B9,VFe,Cbr,wbr,BH,Abr,Lbr,ybr,I9,XFe,xbr,$br,IH,kbr,Sbr,Rbr,N9,zFe,Pbr,Bbr,NH,Ibr,Nbr,qbr,q9,WFe,jbr,Dbr,qH,Gbr,Obr,Vbr,j9,QFe,Xbr,zbr,jH,Wbr,Qbr,Hbr,D9,HFe,Ubr,Jbr,DH,Ybr,Kbr,Zbr,G9,UFe,evr,ovr,GH,rvr,tvr,avr,O9,JFe,nvr,svr,OH,lvr,ivr,dvr,V9,YFe,cvr,fvr,VH,mvr,gvr,hvr,X9,KFe,pvr,uvr,XH,_vr,bvr,vvr,z9,ZFe,Fvr,Tvr,zH,Mvr,Evr,Cvr,W9,e6e,wvr,Avr,WH,Lvr,yvr,xvr,Q9,o6e,$vr,kvr,QH,Svr,Rvr,Pvr,H9,r6e,Bvr,Ivr,HH,Nvr,qvr,jvr,U9,t6e,Dvr,Gvr,UH,Ovr,Vvr,Xvr,J9,a6e,zvr,Wvr,JH,Qvr,Hvr,Uvr,Y9,n6e,Jvr,Yvr,YH,Kvr,Zvr,eFr,K9,s6e,oFr,rFr,KH,tFr,aFr,nFr,Z9,oOe,nc,eM,l6e,g8,sFr,i6e,lFr,rOe,or,h8,iFr,sc,dFr,ZH,cFr,fFr,eU,mFr,gFr,hFr,p8,pFr,d6e,uFr,_Fr,bFr,St,u8,vFr,c6e,FFr,TFr,lc,MFr,f6e,EFr,CFr,oU,wFr,AFr,LFr,oM,yFr,xr,_8,xFr,m6e,$Fr,kFr,nn,SFr,g6e,RFr,PFr,h6e,BFr,IFr,p6e,NFr,qFr,jFr,Me,rM,u6e,DFr,GFr,rU,OFr,VFr,XFr,tM,_6e,zFr,WFr,tU,QFr,HFr,UFr,aM,b6e,JFr,YFr,aU,KFr,ZFr,e6r,nM,v6e,o6r,r6r,nU,t6r,a6r,n6r,sM,F6e,s6r,l6r,sU,i6r,d6r,c6r,lM,T6e,f6r,m6r,lU,g6r,h6r,p6r,iM,M6e,u6r,_6r,iU,b6r,v6r,F6r,dM,E6e,T6r,M6r,dU,E6r,C6r,w6r,cM,C6e,A6r,L6r,cU,y6r,x6r,$6r,fM,w6e,k6r,S6r,fU,R6r,P6r,B6r,mM,A6e,I6r,N6r,mU,q6r,j6r,D6r,gM,L6e,G6r,O6r,gU,V6r,X6r,z6r,hM,y6e,W6r,Q6r,hU,H6r,U6r,J6r,pM,tOe,ic,uM,x6e,b8,Y6r,$6e,K6r,aOe,rr,v8,Z6r,dc,eTr,pU,oTr,rTr,uU,tTr,aTr,nTr,F8,sTr,k6e,lTr,iTr,dTr,Rt,T8,cTr,S6e,fTr,mTr,cc,gTr,R6e,hTr,pTr,_U,uTr,_Tr,bTr,_M,vTr,$r,M8,FTr,P6e,TTr,MTr,sn,ETr,B6e,CTr,wTr,I6e,ATr,LTr,N6e,yTr,xTr,$Tr,ln,bM,q6e,kTr,STr,bU,RTr,PTr,BTr,vM,j6e,ITr,NTr,vU,qTr,jTr,DTr,FM,D6e,GTr,OTr,FU,VTr,XTr,zTr,TM,G6e,WTr,QTr,TU,HTr,UTr,JTr,MM,nOe,fc,EM,O6e,E8,YTr,V6e,KTr,sOe,tr,C8,ZTr,mc,e7r,MU,o7r,r7r,EU,t7r,a7r,n7r,w8,s7r,X6e,l7r,i7r,d7r,Pt,A8,c7r,z6e,f7r,m7r,gc,g7r,W6e,h7r,p7r,CU,u7r,_7r,b7r,CM,v7r,kr,L8,F7r,Q6e,T7r,M7r,dn,E7r,H6e,C7r,w7r,U6e,A7r,L7r,J6e,y7r,x7r,$7r,ie,wM,Y6e,k7r,S7r,wU,R7r,P7r,B7r,AM,K6e,I7r,N7r,AU,q7r,j7r,D7r,LM,Z6e,G7r,O7r,LU,V7r,X7r,z7r,yM,eTe,W7r,Q7r,yU,H7r,U7r,J7r,xM,oTe,Y7r,K7r,xU,Z7r,e9r,o9r,$M,rTe,r9r,t9r,$U,a9r,n9r,s9r,kM,tTe,l9r,i9r,kU,d9r,c9r,f9r,SM,aTe,m9r,g9r,SU,h9r,p9r,u9r,RM,nTe,_9r,b9r,RU,v9r,F9r,T9r,PM,sTe,M9r,E9r,PU,C9r,w9r,A9r,BM,lTe,L9r,y9r,BU,x9r,$9r,k9r,IM,iTe,S9r,R9r,IU,P9r,B9r,I9r,NM,dTe,N9r,q9r,NU,j9r,D9r,G9r,qM,cTe,O9r,V9r,qU,X9r,z9r,W9r,jM,fTe,Q9r,H9r,jU,U9r,J9r,Y9r,DM,mTe,K9r,Z9r,DU,eMr,oMr,rMr,GM,gTe,tMr,aMr,GU,nMr,sMr,lMr,OM,hTe,iMr,dMr,OU,cMr,fMr,mMr,VM,pTe,gMr,hMr,VU,pMr,uMr,_Mr,XM,uTe,bMr,vMr,XU,FMr,TMr,MMr,zM,lOe,hc,WM,_Te,y8,EMr,bTe,CMr,iOe,ar,x8,wMr,pc,AMr,zU,LMr,yMr,WU,xMr,$Mr,kMr,$8,SMr,vTe,RMr,PMr,BMr,Bt,k8,IMr,FTe,NMr,qMr,uc,jMr,TTe,DMr,GMr,QU,OMr,VMr,XMr,QM,zMr,Sr,S8,WMr,MTe,QMr,HMr,cn,UMr,ETe,JMr,YMr,CTe,KMr,ZMr,wTe,e4r,o4r,r4r,ye,HM,ATe,t4r,a4r,HU,n4r,s4r,l4r,UM,LTe,i4r,d4r,UU,c4r,f4r,m4r,JM,yTe,g4r,h4r,JU,p4r,u4r,_4r,YM,xTe,b4r,v4r,YU,F4r,T4r,M4r,KM,$Te,E4r,C4r,KU,w4r,A4r,L4r,ZM,kTe,y4r,x4r,ZU,$4r,k4r,S4r,e4,STe,R4r,P4r,eJ,B4r,I4r,N4r,o4,RTe,q4r,j4r,oJ,D4r,G4r,O4r,r4,PTe,V4r,X4r,rJ,z4r,W4r,Q4r,t4,BTe,H4r,U4r,tJ,J4r,Y4r,K4r,a4,dOe,_c,n4,ITe,R8,Z4r,NTe,eEr,cOe,nr,P8,oEr,bc,rEr,aJ,tEr,aEr,nJ,nEr,sEr,lEr,B8,iEr,qTe,dEr,cEr,fEr,It,I8,mEr,jTe,gEr,hEr,vc,pEr,DTe,uEr,_Er,sJ,bEr,vEr,FEr,s4,TEr,Rr,N8,MEr,GTe,EEr,CEr,fn,wEr,OTe,AEr,LEr,VTe,yEr,xEr,XTe,$Er,kEr,SEr,te,l4,zTe,REr,PEr,lJ,BEr,IEr,NEr,i4,WTe,qEr,jEr,iJ,DEr,GEr,OEr,d4,QTe,VEr,XEr,dJ,zEr,WEr,QEr,c4,HTe,HEr,UEr,cJ,JEr,YEr,KEr,f4,UTe,ZEr,eCr,fJ,oCr,rCr,tCr,m4,JTe,aCr,nCr,mJ,sCr,lCr,iCr,g4,YTe,dCr,cCr,gJ,fCr,mCr,gCr,h4,KTe,hCr,pCr,hJ,uCr,_Cr,bCr,p4,ZTe,vCr,FCr,pJ,TCr,MCr,ECr,u4,e7e,CCr,wCr,uJ,ACr,LCr,yCr,_4,o7e,xCr,$Cr,_J,kCr,SCr,RCr,b4,r7e,PCr,BCr,bJ,ICr,NCr,qCr,v4,t7e,jCr,DCr,vJ,GCr,OCr,VCr,F4,a7e,XCr,zCr,FJ,WCr,QCr,HCr,T4,n7e,UCr,JCr,TJ,YCr,KCr,ZCr,M4,s7e,e5r,o5r,MJ,r5r,t5r,a5r,E4,l7e,n5r,s5r,EJ,l5r,i5r,d5r,C4,i7e,c5r,f5r,CJ,m5r,g5r,h5r,w4,d7e,p5r,u5r,wJ,_5r,b5r,v5r,A4,c7e,F5r,T5r,AJ,M5r,E5r,C5r,L4,f7e,w5r,A5r,LJ,L5r,y5r,x5r,y4,m7e,$5r,k5r,yJ,S5r,R5r,P5r,x4,g7e,B5r,I5r,xJ,N5r,q5r,j5r,$4,h7e,D5r,G5r,$J,O5r,V5r,X5r,k4,p7e,z5r,W5r,kJ,Q5r,H5r,U5r,S4,u7e,J5r,Y5r,SJ,K5r,Z5r,e3r,R4,fOe,Fc,P4,_7e,q8,o3r,b7e,r3r,mOe,sr,j8,t3r,Tc,a3r,RJ,n3r,s3r,PJ,l3r,i3r,d3r,D8,c3r,v7e,f3r,m3r,g3r,Nt,G8,h3r,F7e,p3r,u3r,Mc,_3r,T7e,b3r,v3r,BJ,F3r,T3r,M3r,B4,E3r,Pr,O8,C3r,M7e,w3r,A3r,mn,L3r,E7e,y3r,x3r,C7e,$3r,k3r,w7e,S3r,R3r,P3r,ue,I4,A7e,B3r,I3r,IJ,N3r,q3r,j3r,N4,L7e,D3r,G3r,NJ,O3r,V3r,X3r,q4,y7e,z3r,W3r,qJ,Q3r,H3r,U3r,j4,x7e,J3r,Y3r,jJ,K3r,Z3r,e0r,D4,$7e,o0r,r0r,DJ,t0r,a0r,n0r,G4,k7e,s0r,l0r,GJ,i0r,d0r,c0r,O4,S7e,f0r,m0r,OJ,g0r,h0r,p0r,V4,R7e,u0r,_0r,VJ,b0r,v0r,F0r,X4,P7e,T0r,M0r,XJ,E0r,C0r,w0r,z4,B7e,A0r,L0r,zJ,y0r,x0r,$0r,W4,I7e,k0r,S0r,WJ,R0r,P0r,B0r,Q4,N7e,I0r,N0r,QJ,q0r,j0r,D0r,H4,q7e,G0r,O0r,HJ,V0r,X0r,z0r,U4,j7e,W0r,Q0r,UJ,H0r,U0r,J0r,J4,D7e,Y0r,K0r,JJ,Z0r,ewr,owr,Y4,G7e,rwr,twr,YJ,awr,nwr,swr,K4,O7e,lwr,iwr,KJ,dwr,cwr,fwr,Z4,gOe,Ec,eE,V7e,V8,mwr,X7e,gwr,hOe,lr,X8,hwr,Cc,pwr,ZJ,uwr,_wr,eY,bwr,vwr,Fwr,z8,Twr,z7e,Mwr,Ewr,Cwr,qt,W8,wwr,W7e,Awr,Lwr,wc,ywr,Q7e,xwr,$wr,oY,kwr,Swr,Rwr,oE,Pwr,Br,Q8,Bwr,H7e,Iwr,Nwr,gn,qwr,U7e,jwr,Dwr,J7e,Gwr,Owr,Y7e,Vwr,Xwr,zwr,H8,rE,K7e,Wwr,Qwr,rY,Hwr,Uwr,Jwr,tE,Z7e,Ywr,Kwr,tY,Zwr,eAr,oAr,aE,pOe,Ac,nE,e9e,U8,rAr,o9e,tAr,uOe,ir,J8,aAr,Lc,nAr,aY,sAr,lAr,nY,iAr,dAr,cAr,Y8,fAr,r9e,mAr,gAr,hAr,jt,K8,pAr,t9e,uAr,_Ar,yc,bAr,a9e,vAr,FAr,sY,TAr,MAr,EAr,sE,CAr,Ir,Z8,wAr,n9e,AAr,LAr,hn,yAr,s9e,xAr,$Ar,l9e,kAr,SAr,i9e,RAr,PAr,BAr,d9e,lE,c9e,IAr,NAr,lY,qAr,jAr,DAr,iE,_Oe,xc,dE,f9e,ex,GAr,m9e,OAr,bOe,dr,ox,VAr,$c,XAr,iY,zAr,WAr,dY,QAr,HAr,UAr,rx,JAr,g9e,YAr,KAr,ZAr,Dt,tx,eLr,h9e,oLr,rLr,kc,tLr,p9e,aLr,nLr,cY,sLr,lLr,iLr,cE,dLr,Nr,ax,cLr,u9e,fLr,mLr,pn,gLr,_9e,hLr,pLr,b9e,uLr,_Lr,v9e,bLr,vLr,FLr,de,fE,F9e,TLr,MLr,fY,ELr,CLr,wLr,mE,T9e,ALr,LLr,mY,yLr,xLr,$Lr,gE,M9e,kLr,SLr,gY,RLr,PLr,BLr,hE,E9e,ILr,NLr,hY,qLr,jLr,DLr,pE,C9e,GLr,OLr,pY,VLr,XLr,zLr,uE,w9e,WLr,QLr,uY,HLr,ULr,JLr,_E,A9e,YLr,KLr,_Y,ZLr,eyr,oyr,bE,L9e,ryr,tyr,bY,ayr,nyr,syr,vE,y9e,lyr,iyr,vY,dyr,cyr,fyr,FE,x9e,myr,gyr,FY,hyr,pyr,uyr,TE,$9e,_yr,byr,TY,vyr,Fyr,Tyr,ME,k9e,Myr,Eyr,MY,Cyr,wyr,Ayr,EE,S9e,Lyr,yyr,EY,xyr,$yr,kyr,CE,R9e,Syr,Ryr,CY,Pyr,Byr,Iyr,wE,P9e,Nyr,qyr,wY,jyr,Dyr,Gyr,AE,B9e,Oyr,Vyr,AY,Xyr,zyr,Wyr,LE,I9e,Qyr,Hyr,LY,Uyr,Jyr,Yyr,yE,N9e,Kyr,Zyr,yY,e8r,o8r,r8r,xE,q9e,t8r,a8r,xY,n8r,s8r,l8r,$E,j9e,i8r,d8r,$Y,c8r,f8r,m8r,kE,vOe,Sc,SE,D9e,nx,g8r,G9e,h8r,FOe,cr,sx,p8r,Rc,u8r,kY,_8r,b8r,SY,v8r,F8r,T8r,lx,M8r,O9e,E8r,C8r,w8r,Gt,ix,A8r,V9e,L8r,y8r,Pc,x8r,X9e,$8r,k8r,RY,S8r,R8r,P8r,RE,B8r,qr,dx,I8r,z9e,N8r,q8r,un,j8r,W9e,D8r,G8r,Q9e,O8r,V8r,H9e,X8r,z8r,W8r,ce,PE,U9e,Q8r,H8r,PY,U8r,J8r,Y8r,BE,J9e,K8r,Z8r,BY,exr,oxr,rxr,IE,Y9e,txr,axr,IY,nxr,sxr,lxr,NE,K9e,ixr,dxr,NY,cxr,fxr,mxr,qE,Z9e,gxr,hxr,qY,pxr,uxr,_xr,jE,eMe,bxr,vxr,jY,Fxr,Txr,Mxr,DE,oMe,Exr,Cxr,DY,wxr,Axr,Lxr,GE,rMe,yxr,xxr,GY,$xr,kxr,Sxr,OE,tMe,Rxr,Pxr,OY,Bxr,Ixr,Nxr,VE,aMe,qxr,jxr,VY,Dxr,Gxr,Oxr,XE,nMe,Vxr,Xxr,XY,zxr,Wxr,Qxr,zE,sMe,Hxr,Uxr,zY,Jxr,Yxr,Kxr,WE,lMe,Zxr,e$r,WY,o$r,r$r,t$r,QE,iMe,a$r,n$r,QY,s$r,l$r,i$r,HE,dMe,d$r,c$r,HY,f$r,m$r,g$r,UE,cMe,h$r,p$r,UY,u$r,_$r,b$r,JE,fMe,v$r,F$r,JY,T$r,M$r,E$r,YE,mMe,C$r,w$r,YY,A$r,L$r,y$r,KE,gMe,x$r,$$r,KY,k$r,S$r,R$r,ZE,hMe,P$r,B$r,ZY,I$r,N$r,q$r,eC,TOe,Bc,oC,pMe,cx,j$r,uMe,D$r,MOe,fr,fx,G$r,Ic,O$r,eK,V$r,X$r,oK,z$r,W$r,Q$r,mx,H$r,_Me,U$r,J$r,Y$r,Ot,gx,K$r,bMe,Z$r,ekr,Nc,okr,vMe,rkr,tkr,rK,akr,nkr,skr,rC,lkr,jr,hx,ikr,FMe,dkr,ckr,_n,fkr,TMe,mkr,gkr,MMe,hkr,pkr,EMe,ukr,_kr,bkr,CMe,tC,wMe,vkr,Fkr,tK,Tkr,Mkr,Ekr,aC,EOe,qc,nC,AMe,px,Ckr,LMe,wkr,COe,mr,ux,Akr,jc,Lkr,aK,ykr,xkr,nK,$kr,kkr,Skr,_x,Rkr,yMe,Pkr,Bkr,Ikr,Vt,bx,Nkr,xMe,qkr,jkr,Dc,Dkr,$Me,Gkr,Okr,sK,Vkr,Xkr,zkr,sC,Wkr,Dr,vx,Qkr,kMe,Hkr,Ukr,bn,Jkr,SMe,Ykr,Kkr,RMe,Zkr,eSr,PMe,oSr,rSr,tSr,BMe,lC,IMe,aSr,nSr,lK,sSr,lSr,iSr,iC,wOe,Gc,dC,NMe,Fx,dSr,qMe,cSr,AOe,gr,Tx,fSr,Oc,mSr,iK,gSr,hSr,dK,pSr,uSr,_Sr,Mx,bSr,jMe,vSr,FSr,TSr,Xt,Ex,MSr,DMe,ESr,CSr,Vc,wSr,GMe,ASr,LSr,cK,ySr,xSr,$Sr,cC,kSr,Gr,Cx,SSr,OMe,RSr,PSr,vn,BSr,VMe,ISr,NSr,XMe,qSr,jSr,zMe,DSr,GSr,OSr,oe,fC,WMe,VSr,XSr,fK,zSr,WSr,QSr,mC,QMe,HSr,USr,mK,JSr,YSr,KSr,gC,HMe,ZSr,eRr,gK,oRr,rRr,tRr,hC,UMe,aRr,nRr,hK,sRr,lRr,iRr,pC,JMe,dRr,cRr,pK,fRr,mRr,gRr,uC,YMe,hRr,pRr,uK,uRr,_Rr,bRr,_C,KMe,vRr,FRr,_K,TRr,MRr,ERr,bC,ZMe,CRr,wRr,bK,ARr,LRr,yRr,vC,e4e,xRr,$Rr,vK,kRr,SRr,RRr,FC,o4e,PRr,BRr,FK,IRr,NRr,qRr,TC,r4e,jRr,DRr,TK,GRr,ORr,VRr,MC,t4e,XRr,zRr,MK,WRr,QRr,HRr,EC,a4e,URr,JRr,EK,YRr,KRr,ZRr,CC,n4e,ePr,oPr,CK,rPr,tPr,aPr,wC,s4e,nPr,sPr,wK,lPr,iPr,dPr,AC,l4e,cPr,fPr,AK,mPr,gPr,hPr,LC,i4e,pPr,uPr,LK,_Pr,bPr,vPr,yC,d4e,FPr,TPr,yK,MPr,EPr,CPr,xC,c4e,wPr,APr,xK,LPr,yPr,xPr,$C,f4e,$Pr,kPr,$K,SPr,RPr,PPr,kC,m4e,BPr,IPr,kK,NPr,qPr,jPr,SC,g4e,DPr,GPr,SK,OPr,VPr,XPr,RC,h4e,zPr,WPr,RK,QPr,HPr,UPr,PC,p4e,JPr,YPr,PK,KPr,ZPr,eBr,BC,u4e,oBr,rBr,BK,tBr,aBr,nBr,IC,_4e,sBr,lBr,IK,iBr,dBr,cBr,NC,b4e,fBr,mBr,NK,gBr,hBr,pBr,qC,LOe,Xc,jC,v4e,wx,uBr,F4e,_Br,yOe,hr,Ax,bBr,zc,vBr,qK,FBr,TBr,jK,MBr,EBr,CBr,Lx,wBr,T4e,ABr,LBr,yBr,zt,yx,xBr,M4e,$Br,kBr,Wc,SBr,E4e,RBr,PBr,DK,BBr,IBr,NBr,DC,qBr,Or,xx,jBr,C4e,DBr,GBr,Fn,OBr,w4e,VBr,XBr,A4e,zBr,WBr,L4e,QBr,HBr,UBr,xe,GC,y4e,JBr,YBr,GK,KBr,ZBr,eIr,OC,x4e,oIr,rIr,OK,tIr,aIr,nIr,VC,$4e,sIr,lIr,VK,iIr,dIr,cIr,XC,k4e,fIr,mIr,XK,gIr,hIr,pIr,zC,S4e,uIr,_Ir,zK,bIr,vIr,FIr,WC,R4e,TIr,MIr,WK,EIr,CIr,wIr,QC,P4e,AIr,LIr,QK,yIr,xIr,$Ir,HC,B4e,kIr,SIr,HK,RIr,PIr,BIr,UC,I4e,IIr,NIr,UK,qIr,jIr,DIr,JC,N4e,GIr,OIr,JK,VIr,XIr,zIr,YC,xOe,Qc,KC,q4e,$x,WIr,j4e,QIr,$Oe,pr,kx,HIr,Hc,UIr,YK,JIr,YIr,KK,KIr,ZIr,eNr,Sx,oNr,D4e,rNr,tNr,aNr,Wt,Rx,nNr,G4e,sNr,lNr,Uc,iNr,O4e,dNr,cNr,ZK,fNr,mNr,gNr,ZC,hNr,Vr,Px,pNr,V4e,uNr,_Nr,Tn,bNr,X4e,vNr,FNr,z4e,TNr,MNr,W4e,ENr,CNr,wNr,Ee,e5,Q4e,ANr,LNr,eZ,yNr,xNr,$Nr,o5,H4e,kNr,SNr,oZ,RNr,PNr,BNr,r5,U4e,INr,NNr,rZ,qNr,jNr,DNr,t5,J4e,GNr,ONr,tZ,VNr,XNr,zNr,a5,Y4e,WNr,QNr,aZ,HNr,UNr,JNr,n5,K4e,YNr,KNr,nZ,ZNr,eqr,oqr,s5,Z4e,rqr,tqr,sZ,aqr,nqr,sqr,l5,eEe,lqr,iqr,lZ,dqr,cqr,fqr,i5,oEe,mqr,gqr,iZ,hqr,pqr,uqr,d5,rEe,_qr,bqr,dZ,vqr,Fqr,Tqr,c5,tEe,Mqr,Eqr,cZ,Cqr,wqr,Aqr,f5,aEe,Lqr,yqr,fZ,xqr,$qr,kqr,m5,nEe,Sqr,Rqr,mZ,Pqr,Bqr,Iqr,g5,kOe,Jc,h5,sEe,Bx,Nqr,lEe,qqr,SOe,ur,Ix,jqr,Yc,Dqr,gZ,Gqr,Oqr,hZ,Vqr,Xqr,zqr,Nx,Wqr,iEe,Qqr,Hqr,Uqr,Qt,qx,Jqr,dEe,Yqr,Kqr,Kc,Zqr,cEe,ejr,ojr,pZ,rjr,tjr,ajr,p5,njr,Xr,jx,sjr,fEe,ljr,ijr,Mn,djr,mEe,cjr,fjr,gEe,mjr,gjr,hEe,hjr,pjr,ujr,$e,u5,pEe,_jr,bjr,uZ,vjr,Fjr,Tjr,_5,uEe,Mjr,Ejr,_Z,Cjr,wjr,Ajr,b5,_Ee,Ljr,yjr,bZ,xjr,$jr,kjr,v5,bEe,Sjr,Rjr,vZ,Pjr,Bjr,Ijr,F5,vEe,Njr,qjr,FZ,jjr,Djr,Gjr,T5,FEe,Ojr,Vjr,TZ,Xjr,zjr,Wjr,M5,TEe,Qjr,Hjr,MZ,Ujr,Jjr,Yjr,E5,MEe,Kjr,Zjr,EZ,eDr,oDr,rDr,C5,EEe,tDr,aDr,CZ,nDr,sDr,lDr,w5,CEe,iDr,dDr,wZ,cDr,fDr,mDr,A5,ROe,Zc,L5,wEe,Dx,gDr,AEe,hDr,POe,_r,Gx,pDr,ef,uDr,AZ,_Dr,bDr,LZ,vDr,FDr,TDr,Ox,MDr,LEe,EDr,CDr,wDr,Ht,Vx,ADr,yEe,LDr,yDr,of,xDr,xEe,$Dr,kDr,yZ,SDr,RDr,PDr,y5,BDr,zr,Xx,IDr,$Ee,NDr,qDr,En,jDr,kEe,DDr,GDr,SEe,ODr,VDr,REe,XDr,zDr,WDr,ke,x5,PEe,QDr,HDr,xZ,UDr,JDr,YDr,$5,BEe,KDr,ZDr,$Z,eGr,oGr,rGr,k5,IEe,tGr,aGr,kZ,nGr,sGr,lGr,S5,NEe,iGr,dGr,SZ,cGr,fGr,mGr,R5,qEe,gGr,hGr,RZ,pGr,uGr,_Gr,P5,jEe,bGr,vGr,PZ,FGr,TGr,MGr,B5,DEe,EGr,CGr,BZ,wGr,AGr,LGr,I5,GEe,yGr,xGr,IZ,$Gr,kGr,SGr,N5,OEe,RGr,PGr,NZ,BGr,IGr,NGr,q5,VEe,qGr,jGr,qZ,DGr,GGr,OGr,j5,BOe,rf,D5,XEe,zx,VGr,zEe,XGr,IOe,br,Wx,zGr,tf,WGr,jZ,QGr,HGr,DZ,UGr,JGr,YGr,Qx,KGr,WEe,ZGr,eOr,oOr,Ut,Hx,rOr,QEe,tOr,aOr,af,nOr,HEe,sOr,lOr,GZ,iOr,dOr,cOr,G5,fOr,Wr,Ux,mOr,UEe,gOr,hOr,Cn,pOr,JEe,uOr,_Or,YEe,bOr,vOr,KEe,FOr,TOr,MOr,Se,O5,ZEe,EOr,COr,OZ,wOr,AOr,LOr,V5,eCe,yOr,xOr,VZ,$Or,kOr,SOr,X5,oCe,ROr,POr,XZ,BOr,IOr,NOr,z5,rCe,qOr,jOr,zZ,DOr,GOr,OOr,W5,tCe,VOr,XOr,WZ,zOr,WOr,QOr,Q5,aCe,HOr,UOr,QZ,JOr,YOr,KOr,H5,nCe,ZOr,eVr,HZ,oVr,rVr,tVr,U5,sCe,aVr,nVr,UZ,sVr,lVr,iVr,J5,lCe,dVr,cVr,JZ,fVr,mVr,gVr,Y5,iCe,hVr,pVr,YZ,uVr,_Vr,bVr,K5,NOe,nf,Z5,dCe,Jx,vVr,cCe,FVr,qOe,vr,Yx,TVr,sf,MVr,KZ,EVr,CVr,ZZ,wVr,AVr,LVr,Kx,yVr,fCe,xVr,$Vr,kVr,Jt,Zx,SVr,mCe,RVr,PVr,lf,BVr,gCe,IVr,NVr,eee,qVr,jVr,DVr,e3,GVr,Qr,e$,OVr,hCe,VVr,XVr,wn,zVr,pCe,WVr,QVr,uCe,HVr,UVr,_Ce,JVr,YVr,KVr,Re,o3,bCe,ZVr,eXr,oee,oXr,rXr,tXr,r3,vCe,aXr,nXr,ree,sXr,lXr,iXr,t3,FCe,dXr,cXr,tee,fXr,mXr,gXr,a3,TCe,hXr,pXr,aee,uXr,_Xr,bXr,n3,MCe,vXr,FXr,nee,TXr,MXr,EXr,s3,ECe,CXr,wXr,see,AXr,LXr,yXr,l3,CCe,xXr,$Xr,lee,kXr,SXr,RXr,i3,wCe,PXr,BXr,iee,IXr,NXr,qXr,d3,ACe,jXr,DXr,dee,GXr,OXr,VXr,c3,LCe,XXr,zXr,cee,WXr,QXr,HXr,f3,jOe,df,m3,yCe,o$,UXr,xCe,JXr,DOe,Fr,r$,YXr,cf,KXr,fee,ZXr,ezr,mee,ozr,rzr,tzr,t$,azr,$Ce,nzr,szr,lzr,Yt,a$,izr,kCe,dzr,czr,ff,fzr,SCe,mzr,gzr,gee,hzr,pzr,uzr,g3,_zr,Hr,n$,bzr,RCe,vzr,Fzr,An,Tzr,PCe,Mzr,Ezr,BCe,Czr,wzr,ICe,Azr,Lzr,yzr,Ve,h3,NCe,xzr,$zr,hee,kzr,Szr,Rzr,p3,qCe,Pzr,Bzr,pee,Izr,Nzr,qzr,u3,jCe,jzr,Dzr,uee,Gzr,Ozr,Vzr,_3,DCe,Xzr,zzr,_ee,Wzr,Qzr,Hzr,b3,GCe,Uzr,Jzr,bee,Yzr,Kzr,Zzr,v3,OCe,eWr,oWr,vee,rWr,tWr,aWr,F3,VCe,nWr,sWr,Fee,lWr,iWr,dWr,T3,XCe,cWr,fWr,Tee,mWr,gWr,hWr,M3,GOe,mf,E3,zCe,s$,pWr,WCe,uWr,OOe,Tr,l$,_Wr,gf,bWr,Mee,vWr,FWr,Eee,TWr,MWr,EWr,i$,CWr,QCe,wWr,AWr,LWr,Kt,d$,yWr,HCe,xWr,$Wr,hf,kWr,UCe,SWr,RWr,Cee,PWr,BWr,IWr,C3,NWr,Ur,c$,qWr,JCe,jWr,DWr,Ln,GWr,YCe,OWr,VWr,KCe,XWr,zWr,ZCe,WWr,QWr,HWr,Xe,w3,e5e,UWr,JWr,wee,YWr,KWr,ZWr,A3,o5e,eQr,oQr,Aee,rQr,tQr,aQr,L3,r5e,nQr,sQr,Lee,lQr,iQr,dQr,y3,t5e,cQr,fQr,yee,mQr,gQr,hQr,x3,a5e,pQr,uQr,xee,_Qr,bQr,vQr,$3,n5e,FQr,TQr,$ee,MQr,EQr,CQr,k3,s5e,wQr,AQr,kee,LQr,yQr,xQr,S3,l5e,$Qr,kQr,See,SQr,RQr,PQr,R3,VOe,pf,P3,i5e,f$,BQr,d5e,IQr,XOe,Mr,m$,NQr,uf,qQr,Ree,jQr,DQr,Pee,GQr,OQr,VQr,g$,XQr,c5e,zQr,WQr,QQr,Zt,h$,HQr,f5e,UQr,JQr,_f,YQr,m5e,KQr,ZQr,Bee,eHr,oHr,rHr,B3,tHr,Jr,p$,aHr,g5e,nHr,sHr,yn,lHr,h5e,iHr,dHr,p5e,cHr,fHr,u5e,mHr,gHr,hHr,_5e,I3,b5e,pHr,uHr,Iee,_Hr,bHr,vHr,N3,zOe,bf,q3,v5e,u$,FHr,F5e,THr,WOe,Er,_$,MHr,vf,EHr,Nee,CHr,wHr,qee,AHr,LHr,yHr,b$,xHr,T5e,$Hr,kHr,SHr,ea,v$,RHr,M5e,PHr,BHr,Ff,IHr,E5e,NHr,qHr,jee,jHr,DHr,GHr,j3,OHr,Yr,F$,VHr,C5e,XHr,zHr,xn,WHr,w5e,QHr,HHr,A5e,UHr,JHr,L5e,YHr,KHr,ZHr,T$,D3,y5e,eUr,oUr,Dee,rUr,tUr,aUr,G3,x5e,nUr,sUr,Gee,lUr,iUr,dUr,O3,QOe,Tf,V3,$5e,M$,cUr,k5e,fUr,HOe,Cr,E$,mUr,Mf,gUr,Oee,hUr,pUr,Vee,uUr,_Ur,bUr,C$,vUr,S5e,FUr,TUr,MUr,oa,w$,EUr,R5e,CUr,wUr,Ef,AUr,P5e,LUr,yUr,Xee,xUr,$Ur,kUr,X3,SUr,Kr,A$,RUr,B5e,PUr,BUr,$n,IUr,I5e,NUr,qUr,N5e,jUr,DUr,q5e,GUr,OUr,VUr,j5e,z3,D5e,XUr,zUr,zee,WUr,QUr,HUr,W3,UOe;return d=new re({}),ya=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),_A=new re({}),bA=new P({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Sf=new UUr({props:{warning:!0,$$slots:{default:[JNt]},$$scope:{ctx:y}}}),vA=new re({}),FA=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/configuration_auto.py#L594"}}),EA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/configuration_auto.py#L617"}}),jg=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[YNt]},$$scope:{ctx:y}}}),CA=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/configuration_auto.py#L740"}}),wA=new re({}),AA=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/tokenization_auto.py#L399"}}),xA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_16792/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/tokenization_auto.py#L413"}}),Th=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[KNt]},$$scope:{ctx:y}}}),$A=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/tokenization_auto.py#L612"}}),kA=new re({}),SA=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/feature_extraction_auto.py#L193"}}),BA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_16792/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/feature_extraction_auto.py#L207"}}),rp=new UUr({props:{$$slots:{default:[ZNt]},$$scope:{ctx:y}}}),tp=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[eqt]},$$scope:{ctx:y}}}),IA=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/feature_extraction_auto.py#L334"}}),NA=new re({}),qA=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/processing_auto.py#L88"}}),GA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/processing_auto.py#L102"}}),Ep=new UUr({props:{$$slots:{default:[oqt]},$$scope:{ctx:y}}}),Cp=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[rqt]},$$scope:{ctx:y}}}),OA=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/processing_auto.py#L255"}}),VA=new re({}),XA=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L756"}}),WA=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bloom#transformers.BloomModel">BloomModel</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt_neox#transformers.GPTNeoXModel">GPTNeoXModel</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/levit#transformers.LevitModel">LevitModel</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longt5#transformers.LongT5Model">LongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mctct#transformers.MCTCTModel">MCTCTModel</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),Lp=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[tqt]},$$scope:{ctx:y}}}),QA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),A_=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[aqt]},$$scope:{ctx:y}}}),HA=new re({}),UA=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L763"}}),YA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),y_=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[nqt]},$$scope:{ctx:y}}}),KA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),v2=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[sqt]},$$scope:{ctx:y}}}),ZA=new re({}),eL=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L778"}}),rL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM">GPTNeoXForCausalLM</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),T2=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[lqt]},$$scope:{ctx:y}}}),tL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),l1=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[iqt]},$$scope:{ctx:y}}}),aL=new re({}),nL=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L785"}}),lL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),d1=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[dqt]},$$scope:{ctx:y}}}),iL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),Q1=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[cqt]},$$scope:{ctx:y}}}),dL=new re({}),cL=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L792"}}),mL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration">LongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLM-ProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),U1=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[fqt]},$$scope:{ctx:y}}}),gL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),hb=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[mqt]},$$scope:{ctx:y}}}),hL=new re({}),pL=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L801"}}),_L=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),ub=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[gqt]},$$scope:{ctx:y}}}),bL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),fv=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[hqt]},$$scope:{ctx:y}}}),vL=new re({}),FL=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L846"}}),ML=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),gv=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[pqt]},$$scope:{ctx:y}}}),EL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),Xv=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[uqt]},$$scope:{ctx:y}}}),CL=new re({}),wL=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L853"}}),LL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),Wv=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[_qt]},$$scope:{ctx:y}}}),yL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),Zv=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[bqt]},$$scope:{ctx:y}}}),xL=new re({}),$L=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L839"}}),SL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),oF=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[vqt]},$$scope:{ctx:y}}}),RL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),NF=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[Fqt]},$$scope:{ctx:y}}}),PL=new re({}),BL=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L810"}}),NL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),jF=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[Tqt]},$$scope:{ctx:y}}}),qL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),L6=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[Mqt]},$$scope:{ctx:y}}}),jL=new re({}),DL=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L817"}}),OL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),x6=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[Eqt]},$$scope:{ctx:y}}}),VL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),S6=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[Cqt]},$$scope:{ctx:y}}}),XL=new re({}),zL=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L862"}}),QL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_16792/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/levit#transformers.LevitForImageClassification">LevitForImageClassification</a> or <a href="/docs/transformers/pr_16792/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher">LevitForImageClassificationWithTeacher</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),P6=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[wqt]},$$scope:{ctx:y}}}),HL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),H6=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[Aqt]},$$scope:{ctx:y}}}),UL=new re({}),JL=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L901"}}),KL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),J6=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[Lqt]},$$scope:{ctx:y}}}),ZL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),Z6=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[yqt]},$$scope:{ctx:y}}}),ey=new re({}),oy=new R({props:{name:"class transformers.AutoModelForVisualQuestionAnswering",anchor:"transformers.AutoModelForVisualQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L828"}}),ty=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vilt#transformers.ViltForQuestionAnswering">ViltForQuestionAnswering</a> (ViLT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),oT=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.example",$$slots:{default:[xqt]},$$scope:{ctx:y}}}),ay=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),aT=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.example",$$slots:{default:[$qt]},$$scope:{ctx:y}}}),ny=new re({}),sy=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L908"}}),iy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),sT=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[kqt]},$$scope:{ctx:y}}}),dy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),_T=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[Sqt]},$$scope:{ctx:y}}}),cy=new re({}),fy=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L931"}}),gy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),vT=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[Rqt]},$$scope:{ctx:y}}}),hy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),AT=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[Pqt]},$$scope:{ctx:y}}}),py=new re({}),uy=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L915"}}),by=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mctct#transformers.MCTCTForCTC">MCTCTForCTC</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),yT=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[Bqt]},$$scope:{ctx:y}}}),vy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),DT=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[Iqt]},$$scope:{ctx:y}}}),Fy=new re({}),Ty=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L922"}}),Ey=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),OT=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[Nqt]},$$scope:{ctx:y}}}),Cy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),WT=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[qqt]},$$scope:{ctx:y}}}),Ay=new re({}),Ly=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L940"}}),xy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),HT=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[jqt]},$$scope:{ctx:y}}}),$y=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),o7=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[Dqt]},$$scope:{ctx:y}}}),ky=new re({}),Sy=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L947"}}),Py=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),t7=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[Gqt]},$$scope:{ctx:y}}}),By=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),i7=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[Oqt]},$$scope:{ctx:y}}}),Iy=new re({}),Ny=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L894"}}),jy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),c7=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[Vqt]},$$scope:{ctx:y}}}),Dy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),h7=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[Xqt]},$$scope:{ctx:y}}}),Oy=new re({}),Vy=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L869"}}),zy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),u7=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[zqt]},$$scope:{ctx:y}}}),Wy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),v7=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[Wqt]},$$scope:{ctx:y}}}),Qy=new re({}),Hy=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L876"}}),Jy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),T7=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[Qqt]},$$scope:{ctx:y}}}),Yy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),L7=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[Hqt]},$$scope:{ctx:y}}}),Ky=new re({}),Zy=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L885"}}),o8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),x7=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[Uqt]},$$scope:{ctx:y}}}),r8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),S7=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[Jqt]},$$scope:{ctx:y}}}),t8=new re({}),a8=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_tf_auto.py#L406"}}),s8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/opt#transformers.TFOPTModel">TFOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),P7=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[Yqt]},$$scope:{ctx:y}}}),l8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),L9=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[Kqt]},$$scope:{ctx:y}}}),i8=new re({}),d8=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_tf_auto.py#L413"}}),f8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),x9=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[Zqt]},$$scope:{ctx:y}}}),m8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),Z9=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[ejt]},$$scope:{ctx:y}}}),g8=new re({}),h8=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_tf_auto.py#L428"}}),u8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/opt#transformers.TFOPTForCausalLM">TFOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),oM=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[ojt]},$$scope:{ctx:y}}}),_8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),pM=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[rjt]},$$scope:{ctx:y}}}),b8=new re({}),v8=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_tf_auto.py#L444"}}),T8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),_M=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[tjt]},$$scope:{ctx:y}}}),M8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),MM=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[ajt]},$$scope:{ctx:y}}}),E8=new re({}),C8=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_tf_auto.py#L469"}}),A8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),CM=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[njt]},$$scope:{ctx:y}}}),L8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),zM=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[sjt]},$$scope:{ctx:y}}}),y8=new re({}),x8=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_tf_auto.py#L476"}}),k8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),QM=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[ljt]},$$scope:{ctx:y}}}),S8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),a4=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[ijt]},$$scope:{ctx:y}}}),R8=new re({}),P8=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_tf_auto.py#L485"}}),I8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),s4=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[djt]},$$scope:{ctx:y}}}),N8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),R4=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[cjt]},$$scope:{ctx:y}}}),q8=new re({}),j8=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_tf_auto.py#L521"}}),G8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),B4=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[fjt]},$$scope:{ctx:y}}}),O8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),Z4=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[mjt]},$$scope:{ctx:y}}}),V8=new re({}),X8=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_tf_auto.py#L528"}}),W8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),oE=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[gjt]},$$scope:{ctx:y}}}),Q8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),aE=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[hjt]},$$scope:{ctx:y}}}),U8=new re({}),J8=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_tf_auto.py#L501"}}),K8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),sE=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[pjt]},$$scope:{ctx:y}}}),Z8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),iE=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[ujt]},$$scope:{ctx:y}}}),ex=new re({}),ox=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_tf_auto.py#L512"}}),tx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),cE=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[_jt]},$$scope:{ctx:y}}}),ax=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),kE=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[bjt]},$$scope:{ctx:y}}}),nx=new re({}),sx=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_tf_auto.py#L494"}}),ix=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),RE=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[vjt]},$$scope:{ctx:y}}}),dx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),eC=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[Fjt]},$$scope:{ctx:y}}}),cx=new re({}),fx=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_tf_auto.py#L462"}}),gx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),rC=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[Tjt]},$$scope:{ctx:y}}}),hx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),aC=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[Mjt]},$$scope:{ctx:y}}}),px=new re({}),ux=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_tf_auto.py#L537"}}),bx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),sC=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[Ejt]},$$scope:{ctx:y}}}),vx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),iC=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[Cjt]},$$scope:{ctx:y}}}),Fx=new re({}),Tx=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_flax_auto.py#L246"}}),Ex=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longt5#transformers.FlaxLongT5Model">FlaxLongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/opt#transformers.FlaxOPTModel">FlaxOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),cC=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[wjt]},$$scope:{ctx:y}}}),Cx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),qC=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[Ajt]},$$scope:{ctx:y}}}),wx=new re({}),Ax=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_flax_auto.py#L260"}}),yx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/opt#transformers.FlaxOPTForCausalLM">FlaxOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),DC=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[Ljt]},$$scope:{ctx:y}}}),xx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),YC=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[yjt]},$$scope:{ctx:y}}}),$x=new re({}),kx=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_flax_auto.py#L253"}}),Rx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),ZC=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[xjt]},$$scope:{ctx:y}}}),Px=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),g5=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[$jt]},$$scope:{ctx:y}}}),Bx=new re({}),Ix=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_flax_auto.py#L267"}}),qx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),p5=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[kjt]},$$scope:{ctx:y}}}),jx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),A5=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[Sjt]},$$scope:{ctx:y}}}),Dx=new re({}),Gx=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),Vx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),y5=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[Rjt]},$$scope:{ctx:y}}}),Xx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),j5=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[Pjt]},$$scope:{ctx:y}}}),zx=new re({}),Wx=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),Hx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),G5=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[Bjt]},$$scope:{ctx:y}}}),Ux=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),K5=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[Ijt]},$$scope:{ctx:y}}}),Jx=new re({}),Yx=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_flax_auto.py#L292"}}),Zx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),e3=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[Njt]},$$scope:{ctx:y}}}),e$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),f3=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[qjt]},$$scope:{ctx:y}}}),o$=new re({}),r$=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),a$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),g3=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[jjt]},$$scope:{ctx:y}}}),n$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),M3=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[Djt]},$$scope:{ctx:y}}}),s$=new re({}),l$=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_flax_auto.py#L308"}}),d$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),C3=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[Gjt]},$$scope:{ctx:y}}}),c$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),R3=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[Ojt]},$$scope:{ctx:y}}}),f$=new re({}),m$=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),h$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),B3=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[Vjt]},$$scope:{ctx:y}}}),p$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),N3=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[Xjt]},$$scope:{ctx:y}}}),u$=new re({}),_$=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),v$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),j3=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[zjt]},$$scope:{ctx:y}}}),F$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),O3=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[Wjt]},$$scope:{ctx:y}}}),M$=new re({}),E$=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_flax_auto.py#L333"}}),w$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),X3=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[Qjt]},$$scope:{ctx:y}}}),A$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),W3=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[Hjt]},$$scope:{ctx:y}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),u=a("span"),F(d.$$.fragment),h=l(),Eo=a("span"),Fi=o("Auto Classes"),Lf=l(),at=a("p"),Ti=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Mi=a("code"),gA=o("from_pretrained()"),yf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Oe=l(),We=a("p"),Ei=o("Instantiating one of "),Sn=a("a"),hA=o("AutoConfig"),Rn=o(", "),Pn=a("a"),pA=o("AutoModel"),Ci=o(`, and
`),Bn=a("a"),uA=o("AutoTokenizer"),wi=o(" will directly create a class of the relevant architecture. For instance"),xf=l(),F(ya.$$.fragment),Qe=l(),Ae=a("p"),Vk=o("will create a model that is an instance of "),Ai=a("a"),Xk=o("BertModel"),zk=o("."),Co=l(),xa=a("p"),Wk=o("There is one class of "),$f=a("code"),Qk=o("AutoModel"),nze=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),XDe=l(),Li=a("h2"),kf=a("a"),Dre=a("span"),F(_A.$$.fragment),sze=l(),Gre=a("span"),lze=o("Extending the Auto Classes"),zDe=l(),In=a("p"),ize=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Ore=a("code"),dze=o("NewModel"),cze=o(", make sure you have a "),Vre=a("code"),fze=o("NewModelConfig"),mze=o(` then you can add those to the auto
classes like this:`),WDe=l(),F(bA.$$.fragment),QDe=l(),Hk=a("p"),gze=o("You will then be able to use the auto classes like you would usually do!"),HDe=l(),F(Sf.$$.fragment),UDe=l(),yi=a("h2"),Rf=a("a"),Xre=a("span"),F(vA.$$.fragment),hze=l(),zre=a("span"),pze=o("AutoConfig"),JDe=l(),wo=a("div"),F(FA.$$.fragment),uze=l(),TA=a("p"),_ze=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),Uk=a("a"),bze=o("from_pretrained()"),vze=o(" class method."),Fze=l(),MA=a("p"),Tze=o("This class cannot be instantiated directly using "),Wre=a("code"),Mze=o("__init__()"),Eze=o(" (throws an error)."),Cze=l(),wr=a("div"),F(EA.$$.fragment),wze=l(),Qre=a("p"),Aze=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),Lze=l(),xi=a("p"),yze=o("The configuration class to instantiate is selected based on the "),Hre=a("code"),xze=o("model_type"),$ze=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Ure=a("code"),kze=o("pretrained_model_name_or_path"),Sze=o(":"),Rze=l(),A=a("ul"),Pf=a("li"),Jre=a("strong"),Pze=o("albert"),Bze=o(" \u2014 "),Jk=a("a"),Ize=o("AlbertConfig"),Nze=o(" (ALBERT model)"),qze=l(),Bf=a("li"),Yre=a("strong"),jze=o("bart"),Dze=o(" \u2014 "),Yk=a("a"),Gze=o("BartConfig"),Oze=o(" (BART model)"),Vze=l(),If=a("li"),Kre=a("strong"),Xze=o("beit"),zze=o(" \u2014 "),Kk=a("a"),Wze=o("BeitConfig"),Qze=o(" (BEiT model)"),Hze=l(),Nf=a("li"),Zre=a("strong"),Uze=o("bert"),Jze=o(" \u2014 "),Zk=a("a"),Yze=o("BertConfig"),Kze=o(" (BERT model)"),Zze=l(),qf=a("li"),ete=a("strong"),eWe=o("bert-generation"),oWe=o(" \u2014 "),eS=a("a"),rWe=o("BertGenerationConfig"),tWe=o(" (Bert Generation model)"),aWe=l(),jf=a("li"),ote=a("strong"),nWe=o("big_bird"),sWe=o(" \u2014 "),oS=a("a"),lWe=o("BigBirdConfig"),iWe=o(" (BigBird model)"),dWe=l(),Df=a("li"),rte=a("strong"),cWe=o("bigbird_pegasus"),fWe=o(" \u2014 "),rS=a("a"),mWe=o("BigBirdPegasusConfig"),gWe=o(" (BigBird-Pegasus model)"),hWe=l(),Gf=a("li"),tte=a("strong"),pWe=o("blenderbot"),uWe=o(" \u2014 "),tS=a("a"),_We=o("BlenderbotConfig"),bWe=o(" (Blenderbot model)"),vWe=l(),Of=a("li"),ate=a("strong"),FWe=o("blenderbot-small"),TWe=o(" \u2014 "),aS=a("a"),MWe=o("BlenderbotSmallConfig"),EWe=o(" (BlenderbotSmall model)"),CWe=l(),Vf=a("li"),nte=a("strong"),wWe=o("bloom"),AWe=o(" \u2014 "),nS=a("a"),LWe=o("BloomConfig"),yWe=o(" (BLOOM model)"),xWe=l(),Xf=a("li"),ste=a("strong"),$We=o("camembert"),kWe=o(" \u2014 "),sS=a("a"),SWe=o("CamembertConfig"),RWe=o(" (CamemBERT model)"),PWe=l(),zf=a("li"),lte=a("strong"),BWe=o("canine"),IWe=o(" \u2014 "),lS=a("a"),NWe=o("CanineConfig"),qWe=o(" (CANINE model)"),jWe=l(),Wf=a("li"),ite=a("strong"),DWe=o("clip"),GWe=o(" \u2014 "),iS=a("a"),OWe=o("CLIPConfig"),VWe=o(" (CLIP model)"),XWe=l(),Qf=a("li"),dte=a("strong"),zWe=o("convbert"),WWe=o(" \u2014 "),dS=a("a"),QWe=o("ConvBertConfig"),HWe=o(" (ConvBERT model)"),UWe=l(),Hf=a("li"),cte=a("strong"),JWe=o("convnext"),YWe=o(" \u2014 "),cS=a("a"),KWe=o("ConvNextConfig"),ZWe=o(" (ConvNeXT model)"),eQe=l(),Uf=a("li"),fte=a("strong"),oQe=o("ctrl"),rQe=o(" \u2014 "),fS=a("a"),tQe=o("CTRLConfig"),aQe=o(" (CTRL model)"),nQe=l(),Jf=a("li"),mte=a("strong"),sQe=o("cvt"),lQe=o(" \u2014 "),mS=a("a"),iQe=o("CvtConfig"),dQe=o(" (CvT model)"),cQe=l(),Yf=a("li"),gte=a("strong"),fQe=o("data2vec-audio"),mQe=o(" \u2014 "),gS=a("a"),gQe=o("Data2VecAudioConfig"),hQe=o(" (Data2VecAudio model)"),pQe=l(),Kf=a("li"),hte=a("strong"),uQe=o("data2vec-text"),_Qe=o(" \u2014 "),hS=a("a"),bQe=o("Data2VecTextConfig"),vQe=o(" (Data2VecText model)"),FQe=l(),Zf=a("li"),pte=a("strong"),TQe=o("data2vec-vision"),MQe=o(" \u2014 "),pS=a("a"),EQe=o("Data2VecVisionConfig"),CQe=o(" (Data2VecVision model)"),wQe=l(),em=a("li"),ute=a("strong"),AQe=o("deberta"),LQe=o(" \u2014 "),uS=a("a"),yQe=o("DebertaConfig"),xQe=o(" (DeBERTa model)"),$Qe=l(),om=a("li"),_te=a("strong"),kQe=o("deberta-v2"),SQe=o(" \u2014 "),_S=a("a"),RQe=o("DebertaV2Config"),PQe=o(" (DeBERTa-v2 model)"),BQe=l(),rm=a("li"),bte=a("strong"),IQe=o("decision_transformer"),NQe=o(" \u2014 "),bS=a("a"),qQe=o("DecisionTransformerConfig"),jQe=o(" (Decision Transformer model)"),DQe=l(),tm=a("li"),vte=a("strong"),GQe=o("deit"),OQe=o(" \u2014 "),vS=a("a"),VQe=o("DeiTConfig"),XQe=o(" (DeiT model)"),zQe=l(),am=a("li"),Fte=a("strong"),WQe=o("detr"),QQe=o(" \u2014 "),FS=a("a"),HQe=o("DetrConfig"),UQe=o(" (DETR model)"),JQe=l(),nm=a("li"),Tte=a("strong"),YQe=o("distilbert"),KQe=o(" \u2014 "),TS=a("a"),ZQe=o("DistilBertConfig"),eHe=o(" (DistilBERT model)"),oHe=l(),sm=a("li"),Mte=a("strong"),rHe=o("dpr"),tHe=o(" \u2014 "),MS=a("a"),aHe=o("DPRConfig"),nHe=o(" (DPR model)"),sHe=l(),lm=a("li"),Ete=a("strong"),lHe=o("dpt"),iHe=o(" \u2014 "),ES=a("a"),dHe=o("DPTConfig"),cHe=o(" (DPT model)"),fHe=l(),im=a("li"),Cte=a("strong"),mHe=o("electra"),gHe=o(" \u2014 "),CS=a("a"),hHe=o("ElectraConfig"),pHe=o(" (ELECTRA model)"),uHe=l(),dm=a("li"),wte=a("strong"),_He=o("encoder-decoder"),bHe=o(" \u2014 "),wS=a("a"),vHe=o("EncoderDecoderConfig"),FHe=o(" (Encoder decoder model)"),THe=l(),cm=a("li"),Ate=a("strong"),MHe=o("flaubert"),EHe=o(" \u2014 "),AS=a("a"),CHe=o("FlaubertConfig"),wHe=o(" (FlauBERT model)"),AHe=l(),fm=a("li"),Lte=a("strong"),LHe=o("flava"),yHe=o(" \u2014 "),LS=a("a"),xHe=o("FlavaConfig"),$He=o(" (FLAVA model)"),kHe=l(),mm=a("li"),yte=a("strong"),SHe=o("fnet"),RHe=o(" \u2014 "),yS=a("a"),PHe=o("FNetConfig"),BHe=o(" (FNet model)"),IHe=l(),gm=a("li"),xte=a("strong"),NHe=o("fsmt"),qHe=o(" \u2014 "),xS=a("a"),jHe=o("FSMTConfig"),DHe=o(" (FairSeq Machine-Translation model)"),GHe=l(),hm=a("li"),$te=a("strong"),OHe=o("funnel"),VHe=o(" \u2014 "),$S=a("a"),XHe=o("FunnelConfig"),zHe=o(" (Funnel Transformer model)"),WHe=l(),pm=a("li"),kte=a("strong"),QHe=o("glpn"),HHe=o(" \u2014 "),kS=a("a"),UHe=o("GLPNConfig"),JHe=o(" (GLPN model)"),YHe=l(),um=a("li"),Ste=a("strong"),KHe=o("gpt2"),ZHe=o(" \u2014 "),SS=a("a"),eUe=o("GPT2Config"),oUe=o(" (OpenAI GPT-2 model)"),rUe=l(),_m=a("li"),Rte=a("strong"),tUe=o("gpt_neo"),aUe=o(" \u2014 "),RS=a("a"),nUe=o("GPTNeoConfig"),sUe=o(" (GPT Neo model)"),lUe=l(),bm=a("li"),Pte=a("strong"),iUe=o("gpt_neox"),dUe=o(" \u2014 "),PS=a("a"),cUe=o("GPTNeoXConfig"),fUe=o(" (GPT NeoX model)"),mUe=l(),vm=a("li"),Bte=a("strong"),gUe=o("gptj"),hUe=o(" \u2014 "),BS=a("a"),pUe=o("GPTJConfig"),uUe=o(" (GPT-J model)"),_Ue=l(),Fm=a("li"),Ite=a("strong"),bUe=o("hubert"),vUe=o(" \u2014 "),IS=a("a"),FUe=o("HubertConfig"),TUe=o(" (Hubert model)"),MUe=l(),Tm=a("li"),Nte=a("strong"),EUe=o("ibert"),CUe=o(" \u2014 "),NS=a("a"),wUe=o("IBertConfig"),AUe=o(" (I-BERT model)"),LUe=l(),Mm=a("li"),qte=a("strong"),yUe=o("imagegpt"),xUe=o(" \u2014 "),qS=a("a"),$Ue=o("ImageGPTConfig"),kUe=o(" (ImageGPT model)"),SUe=l(),Em=a("li"),jte=a("strong"),RUe=o("layoutlm"),PUe=o(" \u2014 "),jS=a("a"),BUe=o("LayoutLMConfig"),IUe=o(" (LayoutLM model)"),NUe=l(),Cm=a("li"),Dte=a("strong"),qUe=o("layoutlmv2"),jUe=o(" \u2014 "),DS=a("a"),DUe=o("LayoutLMv2Config"),GUe=o(" (LayoutLMv2 model)"),OUe=l(),wm=a("li"),Gte=a("strong"),VUe=o("layoutlmv3"),XUe=o(" \u2014 "),GS=a("a"),zUe=o("LayoutLMv3Config"),WUe=o(" (LayoutLMv3 model)"),QUe=l(),Am=a("li"),Ote=a("strong"),HUe=o("led"),UUe=o(" \u2014 "),OS=a("a"),JUe=o("LEDConfig"),YUe=o(" (LED model)"),KUe=l(),Lm=a("li"),Vte=a("strong"),ZUe=o("levit"),eJe=o(" \u2014 "),VS=a("a"),oJe=o("LevitConfig"),rJe=o(" (LeViT model)"),tJe=l(),ym=a("li"),Xte=a("strong"),aJe=o("longformer"),nJe=o(" \u2014 "),XS=a("a"),sJe=o("LongformerConfig"),lJe=o(" (Longformer model)"),iJe=l(),xm=a("li"),zte=a("strong"),dJe=o("longt5"),cJe=o(" \u2014 "),zS=a("a"),fJe=o("LongT5Config"),mJe=o(" (LongT5 model)"),gJe=l(),$m=a("li"),Wte=a("strong"),hJe=o("luke"),pJe=o(" \u2014 "),WS=a("a"),uJe=o("LukeConfig"),_Je=o(" (LUKE model)"),bJe=l(),km=a("li"),Qte=a("strong"),vJe=o("lxmert"),FJe=o(" \u2014 "),QS=a("a"),TJe=o("LxmertConfig"),MJe=o(" (LXMERT model)"),EJe=l(),Sm=a("li"),Hte=a("strong"),CJe=o("m2m_100"),wJe=o(" \u2014 "),HS=a("a"),AJe=o("M2M100Config"),LJe=o(" (M2M100 model)"),yJe=l(),Rm=a("li"),Ute=a("strong"),xJe=o("marian"),$Je=o(" \u2014 "),US=a("a"),kJe=o("MarianConfig"),SJe=o(" (Marian model)"),RJe=l(),Pm=a("li"),Jte=a("strong"),PJe=o("maskformer"),BJe=o(" \u2014 "),JS=a("a"),IJe=o("MaskFormerConfig"),NJe=o(" (MaskFormer model)"),qJe=l(),Bm=a("li"),Yte=a("strong"),jJe=o("mbart"),DJe=o(" \u2014 "),YS=a("a"),GJe=o("MBartConfig"),OJe=o(" (mBART model)"),VJe=l(),Im=a("li"),Kte=a("strong"),XJe=o("mctct"),zJe=o(" \u2014 "),KS=a("a"),WJe=o("MCTCTConfig"),QJe=o(" (M-CTC-T model)"),HJe=l(),Nm=a("li"),Zte=a("strong"),UJe=o("megatron-bert"),JJe=o(" \u2014 "),ZS=a("a"),YJe=o("MegatronBertConfig"),KJe=o(" (Megatron-BERT model)"),ZJe=l(),qm=a("li"),eae=a("strong"),eYe=o("mobilebert"),oYe=o(" \u2014 "),eR=a("a"),rYe=o("MobileBertConfig"),tYe=o(" (MobileBERT model)"),aYe=l(),jm=a("li"),oae=a("strong"),nYe=o("mpnet"),sYe=o(" \u2014 "),oR=a("a"),lYe=o("MPNetConfig"),iYe=o(" (MPNet model)"),dYe=l(),Dm=a("li"),rae=a("strong"),cYe=o("mt5"),fYe=o(" \u2014 "),rR=a("a"),mYe=o("MT5Config"),gYe=o(" (MT5 model)"),hYe=l(),Gm=a("li"),tae=a("strong"),pYe=o("nystromformer"),uYe=o(" \u2014 "),tR=a("a"),_Ye=o("NystromformerConfig"),bYe=o(" (Nystr\xF6mformer model)"),vYe=l(),Om=a("li"),aae=a("strong"),FYe=o("openai-gpt"),TYe=o(" \u2014 "),aR=a("a"),MYe=o("OpenAIGPTConfig"),EYe=o(" (OpenAI GPT model)"),CYe=l(),Vm=a("li"),nae=a("strong"),wYe=o("opt"),AYe=o(" \u2014 "),nR=a("a"),LYe=o("OPTConfig"),yYe=o(" (OPT model)"),xYe=l(),Xm=a("li"),sae=a("strong"),$Ye=o("pegasus"),kYe=o(" \u2014 "),sR=a("a"),SYe=o("PegasusConfig"),RYe=o(" (Pegasus model)"),PYe=l(),zm=a("li"),lae=a("strong"),BYe=o("perceiver"),IYe=o(" \u2014 "),lR=a("a"),NYe=o("PerceiverConfig"),qYe=o(" (Perceiver model)"),jYe=l(),Wm=a("li"),iae=a("strong"),DYe=o("plbart"),GYe=o(" \u2014 "),iR=a("a"),OYe=o("PLBartConfig"),VYe=o(" (PLBart model)"),XYe=l(),Qm=a("li"),dae=a("strong"),zYe=o("poolformer"),WYe=o(" \u2014 "),dR=a("a"),QYe=o("PoolFormerConfig"),HYe=o(" (PoolFormer model)"),UYe=l(),Hm=a("li"),cae=a("strong"),JYe=o("prophetnet"),YYe=o(" \u2014 "),cR=a("a"),KYe=o("ProphetNetConfig"),ZYe=o(" (ProphetNet model)"),eKe=l(),Um=a("li"),fae=a("strong"),oKe=o("qdqbert"),rKe=o(" \u2014 "),fR=a("a"),tKe=o("QDQBertConfig"),aKe=o(" (QDQBert model)"),nKe=l(),Jm=a("li"),mae=a("strong"),sKe=o("rag"),lKe=o(" \u2014 "),mR=a("a"),iKe=o("RagConfig"),dKe=o(" (RAG model)"),cKe=l(),Ym=a("li"),gae=a("strong"),fKe=o("realm"),mKe=o(" \u2014 "),gR=a("a"),gKe=o("RealmConfig"),hKe=o(" (REALM model)"),pKe=l(),Km=a("li"),hae=a("strong"),uKe=o("reformer"),_Ke=o(" \u2014 "),hR=a("a"),bKe=o("ReformerConfig"),vKe=o(" (Reformer model)"),FKe=l(),Zm=a("li"),pae=a("strong"),TKe=o("regnet"),MKe=o(" \u2014 "),pR=a("a"),EKe=o("RegNetConfig"),CKe=o(" (RegNet model)"),wKe=l(),eg=a("li"),uae=a("strong"),AKe=o("rembert"),LKe=o(" \u2014 "),uR=a("a"),yKe=o("RemBertConfig"),xKe=o(" (RemBERT model)"),$Ke=l(),og=a("li"),_ae=a("strong"),kKe=o("resnet"),SKe=o(" \u2014 "),_R=a("a"),RKe=o("ResNetConfig"),PKe=o(" (ResNet model)"),BKe=l(),rg=a("li"),bae=a("strong"),IKe=o("retribert"),NKe=o(" \u2014 "),bR=a("a"),qKe=o("RetriBertConfig"),jKe=o(" (RetriBERT model)"),DKe=l(),tg=a("li"),vae=a("strong"),GKe=o("roberta"),OKe=o(" \u2014 "),vR=a("a"),VKe=o("RobertaConfig"),XKe=o(" (RoBERTa model)"),zKe=l(),ag=a("li"),Fae=a("strong"),WKe=o("roformer"),QKe=o(" \u2014 "),FR=a("a"),HKe=o("RoFormerConfig"),UKe=o(" (RoFormer model)"),JKe=l(),ng=a("li"),Tae=a("strong"),YKe=o("segformer"),KKe=o(" \u2014 "),TR=a("a"),ZKe=o("SegformerConfig"),eZe=o(" (SegFormer model)"),oZe=l(),sg=a("li"),Mae=a("strong"),rZe=o("sew"),tZe=o(" \u2014 "),MR=a("a"),aZe=o("SEWConfig"),nZe=o(" (SEW model)"),sZe=l(),lg=a("li"),Eae=a("strong"),lZe=o("sew-d"),iZe=o(" \u2014 "),ER=a("a"),dZe=o("SEWDConfig"),cZe=o(" (SEW-D model)"),fZe=l(),ig=a("li"),Cae=a("strong"),mZe=o("speech-encoder-decoder"),gZe=o(" \u2014 "),CR=a("a"),hZe=o("SpeechEncoderDecoderConfig"),pZe=o(" (Speech Encoder decoder model)"),uZe=l(),dg=a("li"),wae=a("strong"),_Ze=o("speech_to_text"),bZe=o(" \u2014 "),wR=a("a"),vZe=o("Speech2TextConfig"),FZe=o(" (Speech2Text model)"),TZe=l(),cg=a("li"),Aae=a("strong"),MZe=o("speech_to_text_2"),EZe=o(" \u2014 "),AR=a("a"),CZe=o("Speech2Text2Config"),wZe=o(" (Speech2Text2 model)"),AZe=l(),fg=a("li"),Lae=a("strong"),LZe=o("splinter"),yZe=o(" \u2014 "),LR=a("a"),xZe=o("SplinterConfig"),$Ze=o(" (Splinter model)"),kZe=l(),mg=a("li"),yae=a("strong"),SZe=o("squeezebert"),RZe=o(" \u2014 "),yR=a("a"),PZe=o("SqueezeBertConfig"),BZe=o(" (SqueezeBERT model)"),IZe=l(),gg=a("li"),xae=a("strong"),NZe=o("swin"),qZe=o(" \u2014 "),xR=a("a"),jZe=o("SwinConfig"),DZe=o(" (Swin Transformer model)"),GZe=l(),hg=a("li"),$ae=a("strong"),OZe=o("t5"),VZe=o(" \u2014 "),$R=a("a"),XZe=o("T5Config"),zZe=o(" (T5 model)"),WZe=l(),pg=a("li"),kae=a("strong"),QZe=o("tapas"),HZe=o(" \u2014 "),kR=a("a"),UZe=o("TapasConfig"),JZe=o(" (TAPAS model)"),YZe=l(),ug=a("li"),Sae=a("strong"),KZe=o("trajectory_transformer"),ZZe=o(" \u2014 "),SR=a("a"),eeo=o("TrajectoryTransformerConfig"),oeo=o(" (Trajectory Transformer model)"),reo=l(),_g=a("li"),Rae=a("strong"),teo=o("transfo-xl"),aeo=o(" \u2014 "),RR=a("a"),neo=o("TransfoXLConfig"),seo=o(" (Transformer-XL model)"),leo=l(),bg=a("li"),Pae=a("strong"),ieo=o("trocr"),deo=o(" \u2014 "),PR=a("a"),ceo=o("TrOCRConfig"),feo=o(" (TrOCR model)"),meo=l(),vg=a("li"),Bae=a("strong"),geo=o("unispeech"),heo=o(" \u2014 "),BR=a("a"),peo=o("UniSpeechConfig"),ueo=o(" (UniSpeech model)"),_eo=l(),Fg=a("li"),Iae=a("strong"),beo=o("unispeech-sat"),veo=o(" \u2014 "),IR=a("a"),Feo=o("UniSpeechSatConfig"),Teo=o(" (UniSpeechSat model)"),Meo=l(),Tg=a("li"),Nae=a("strong"),Eeo=o("van"),Ceo=o(" \u2014 "),NR=a("a"),weo=o("VanConfig"),Aeo=o(" (VAN model)"),Leo=l(),Mg=a("li"),qae=a("strong"),yeo=o("vilt"),xeo=o(" \u2014 "),qR=a("a"),$eo=o("ViltConfig"),keo=o(" (ViLT model)"),Seo=l(),Eg=a("li"),jae=a("strong"),Reo=o("vision-encoder-decoder"),Peo=o(" \u2014 "),jR=a("a"),Beo=o("VisionEncoderDecoderConfig"),Ieo=o(" (Vision Encoder decoder model)"),Neo=l(),Cg=a("li"),Dae=a("strong"),qeo=o("vision-text-dual-encoder"),jeo=o(" \u2014 "),DR=a("a"),Deo=o("VisionTextDualEncoderConfig"),Geo=o(" (VisionTextDualEncoder model)"),Oeo=l(),wg=a("li"),Gae=a("strong"),Veo=o("visual_bert"),Xeo=o(" \u2014 "),GR=a("a"),zeo=o("VisualBertConfig"),Weo=o(" (VisualBERT model)"),Qeo=l(),Ag=a("li"),Oae=a("strong"),Heo=o("vit"),Ueo=o(" \u2014 "),OR=a("a"),Jeo=o("ViTConfig"),Yeo=o(" (ViT model)"),Keo=l(),Lg=a("li"),Vae=a("strong"),Zeo=o("vit_mae"),eoo=o(" \u2014 "),VR=a("a"),ooo=o("ViTMAEConfig"),roo=o(" (ViTMAE model)"),too=l(),yg=a("li"),Xae=a("strong"),aoo=o("wav2vec2"),noo=o(" \u2014 "),XR=a("a"),soo=o("Wav2Vec2Config"),loo=o(" (Wav2Vec2 model)"),ioo=l(),xg=a("li"),zae=a("strong"),doo=o("wav2vec2-conformer"),coo=o(" \u2014 "),zR=a("a"),foo=o("Wav2Vec2ConformerConfig"),moo=o(" (Wav2Vec2-Conformer model)"),goo=l(),$g=a("li"),Wae=a("strong"),hoo=o("wavlm"),poo=o(" \u2014 "),WR=a("a"),uoo=o("WavLMConfig"),_oo=o(" (WavLM model)"),boo=l(),kg=a("li"),Qae=a("strong"),voo=o("xglm"),Foo=o(" \u2014 "),QR=a("a"),Too=o("XGLMConfig"),Moo=o(" (XGLM model)"),Eoo=l(),Sg=a("li"),Hae=a("strong"),Coo=o("xlm"),woo=o(" \u2014 "),HR=a("a"),Aoo=o("XLMConfig"),Loo=o(" (XLM model)"),yoo=l(),Rg=a("li"),Uae=a("strong"),xoo=o("xlm-prophetnet"),$oo=o(" \u2014 "),UR=a("a"),koo=o("XLMProphetNetConfig"),Soo=o(" (XLM-ProphetNet model)"),Roo=l(),Pg=a("li"),Jae=a("strong"),Poo=o("xlm-roberta"),Boo=o(" \u2014 "),JR=a("a"),Ioo=o("XLMRobertaConfig"),Noo=o(" (XLM-RoBERTa model)"),qoo=l(),Bg=a("li"),Yae=a("strong"),joo=o("xlm-roberta-xl"),Doo=o(" \u2014 "),YR=a("a"),Goo=o("XLMRobertaXLConfig"),Ooo=o(" (XLM-RoBERTa-XL model)"),Voo=l(),Ig=a("li"),Kae=a("strong"),Xoo=o("xlnet"),zoo=o(" \u2014 "),KR=a("a"),Woo=o("XLNetConfig"),Qoo=o(" (XLNet model)"),Hoo=l(),Ng=a("li"),Zae=a("strong"),Uoo=o("yolos"),Joo=o(" \u2014 "),ZR=a("a"),Yoo=o("YolosConfig"),Koo=o(" (YOLOS model)"),Zoo=l(),qg=a("li"),ene=a("strong"),ero=o("yoso"),oro=o(" \u2014 "),eP=a("a"),rro=o("YosoConfig"),tro=o(" (YOSO model)"),aro=l(),F(jg.$$.fragment),nro=l(),Dg=a("div"),F(CA.$$.fragment),sro=l(),one=a("p"),lro=o("Register a new configuration for this class."),YDe=l(),$i=a("h2"),Gg=a("a"),rne=a("span"),F(wA.$$.fragment),iro=l(),tne=a("span"),dro=o("AutoTokenizer"),KDe=l(),Ao=a("div"),F(AA.$$.fragment),cro=l(),LA=a("p"),fro=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),oP=a("a"),mro=o("AutoTokenizer.from_pretrained()"),gro=o(" class method."),hro=l(),yA=a("p"),pro=o("This class cannot be instantiated directly using "),ane=a("code"),uro=o("__init__()"),_ro=o(" (throws an error)."),bro=l(),Ar=a("div"),F(xA.$$.fragment),vro=l(),nne=a("p"),Fro=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),Tro=l(),$a=a("p"),Mro=o("The tokenizer class to instantiate is selected based on the "),sne=a("code"),Ero=o("model_type"),Cro=o(` property of the config object (either
passed as an argument or loaded from `),lne=a("code"),wro=o("pretrained_model_name_or_path"),Aro=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ine=a("code"),Lro=o("pretrained_model_name_or_path"),yro=o(":"),xro=l(),k=a("ul"),Nn=a("li"),dne=a("strong"),$ro=o("albert"),kro=o(" \u2014 "),rP=a("a"),Sro=o("AlbertTokenizer"),Rro=o(" or "),tP=a("a"),Pro=o("AlbertTokenizerFast"),Bro=o(" (ALBERT model)"),Iro=l(),qn=a("li"),cne=a("strong"),Nro=o("bart"),qro=o(" \u2014 "),aP=a("a"),jro=o("BartTokenizer"),Dro=o(" or "),nP=a("a"),Gro=o("BartTokenizerFast"),Oro=o(" (BART model)"),Vro=l(),jn=a("li"),fne=a("strong"),Xro=o("barthez"),zro=o(" \u2014 "),sP=a("a"),Wro=o("BarthezTokenizer"),Qro=o(" or "),lP=a("a"),Hro=o("BarthezTokenizerFast"),Uro=o(" (BARThez model)"),Jro=l(),Og=a("li"),mne=a("strong"),Yro=o("bartpho"),Kro=o(" \u2014 "),iP=a("a"),Zro=o("BartphoTokenizer"),eto=o(" (BARTpho model)"),oto=l(),Dn=a("li"),gne=a("strong"),rto=o("bert"),tto=o(" \u2014 "),dP=a("a"),ato=o("BertTokenizer"),nto=o(" or "),cP=a("a"),sto=o("BertTokenizerFast"),lto=o(" (BERT model)"),ito=l(),Vg=a("li"),hne=a("strong"),dto=o("bert-generation"),cto=o(" \u2014 "),fP=a("a"),fto=o("BertGenerationTokenizer"),mto=o(" (Bert Generation model)"),gto=l(),Xg=a("li"),pne=a("strong"),hto=o("bert-japanese"),pto=o(" \u2014 "),mP=a("a"),uto=o("BertJapaneseTokenizer"),_to=o(" (BertJapanese model)"),bto=l(),zg=a("li"),une=a("strong"),vto=o("bertweet"),Fto=o(" \u2014 "),gP=a("a"),Tto=o("BertweetTokenizer"),Mto=o(" (BERTweet model)"),Eto=l(),Gn=a("li"),_ne=a("strong"),Cto=o("big_bird"),wto=o(" \u2014 "),hP=a("a"),Ato=o("BigBirdTokenizer"),Lto=o(" or "),pP=a("a"),yto=o("BigBirdTokenizerFast"),xto=o(" (BigBird model)"),$to=l(),On=a("li"),bne=a("strong"),kto=o("bigbird_pegasus"),Sto=o(" \u2014 "),uP=a("a"),Rto=o("PegasusTokenizer"),Pto=o(" or "),_P=a("a"),Bto=o("PegasusTokenizerFast"),Ito=o(" (BigBird-Pegasus model)"),Nto=l(),Vn=a("li"),vne=a("strong"),qto=o("blenderbot"),jto=o(" \u2014 "),bP=a("a"),Dto=o("BlenderbotTokenizer"),Gto=o(" or "),vP=a("a"),Oto=o("BlenderbotTokenizerFast"),Vto=o(" (Blenderbot model)"),Xto=l(),Wg=a("li"),Fne=a("strong"),zto=o("blenderbot-small"),Wto=o(" \u2014 "),FP=a("a"),Qto=o("BlenderbotSmallTokenizer"),Hto=o(" (BlenderbotSmall model)"),Uto=l(),Qg=a("li"),Tne=a("strong"),Jto=o("bloom"),Yto=o(" \u2014 "),TP=a("a"),Kto=o("BloomTokenizerFast"),Zto=o(" (BLOOM model)"),eao=l(),Hg=a("li"),Mne=a("strong"),oao=o("byt5"),rao=o(" \u2014 "),MP=a("a"),tao=o("ByT5Tokenizer"),aao=o(" (ByT5 model)"),nao=l(),Xn=a("li"),Ene=a("strong"),sao=o("camembert"),lao=o(" \u2014 "),EP=a("a"),iao=o("CamembertTokenizer"),dao=o(" or "),CP=a("a"),cao=o("CamembertTokenizerFast"),fao=o(" (CamemBERT model)"),mao=l(),Ug=a("li"),Cne=a("strong"),gao=o("canine"),hao=o(" \u2014 "),wP=a("a"),pao=o("CanineTokenizer"),uao=o(" (CANINE model)"),_ao=l(),zn=a("li"),wne=a("strong"),bao=o("clip"),vao=o(" \u2014 "),AP=a("a"),Fao=o("CLIPTokenizer"),Tao=o(" or "),LP=a("a"),Mao=o("CLIPTokenizerFast"),Eao=o(" (CLIP model)"),Cao=l(),Wn=a("li"),Ane=a("strong"),wao=o("convbert"),Aao=o(" \u2014 "),yP=a("a"),Lao=o("ConvBertTokenizer"),yao=o(" or "),xP=a("a"),xao=o("ConvBertTokenizerFast"),$ao=o(" (ConvBERT model)"),kao=l(),Qn=a("li"),Lne=a("strong"),Sao=o("cpm"),Rao=o(" \u2014 "),$P=a("a"),Pao=o("CpmTokenizer"),Bao=o(" or "),kP=a("a"),Iao=o("CpmTokenizerFast"),Nao=o(" (CPM model)"),qao=l(),Jg=a("li"),yne=a("strong"),jao=o("ctrl"),Dao=o(" \u2014 "),SP=a("a"),Gao=o("CTRLTokenizer"),Oao=o(" (CTRL model)"),Vao=l(),Hn=a("li"),xne=a("strong"),Xao=o("data2vec-text"),zao=o(" \u2014 "),RP=a("a"),Wao=o("RobertaTokenizer"),Qao=o(" or "),PP=a("a"),Hao=o("RobertaTokenizerFast"),Uao=o(" (Data2VecText model)"),Jao=l(),Un=a("li"),$ne=a("strong"),Yao=o("deberta"),Kao=o(" \u2014 "),BP=a("a"),Zao=o("DebertaTokenizer"),eno=o(" or "),IP=a("a"),ono=o("DebertaTokenizerFast"),rno=o(" (DeBERTa model)"),tno=l(),Jn=a("li"),kne=a("strong"),ano=o("deberta-v2"),nno=o(" \u2014 "),NP=a("a"),sno=o("DebertaV2Tokenizer"),lno=o(" or "),qP=a("a"),ino=o("DebertaV2TokenizerFast"),dno=o(" (DeBERTa-v2 model)"),cno=l(),Yn=a("li"),Sne=a("strong"),fno=o("distilbert"),mno=o(" \u2014 "),jP=a("a"),gno=o("DistilBertTokenizer"),hno=o(" or "),DP=a("a"),pno=o("DistilBertTokenizerFast"),uno=o(" (DistilBERT model)"),_no=l(),Kn=a("li"),Rne=a("strong"),bno=o("dpr"),vno=o(" \u2014 "),GP=a("a"),Fno=o("DPRQuestionEncoderTokenizer"),Tno=o(" or "),OP=a("a"),Mno=o("DPRQuestionEncoderTokenizerFast"),Eno=o(" (DPR model)"),Cno=l(),Zn=a("li"),Pne=a("strong"),wno=o("electra"),Ano=o(" \u2014 "),VP=a("a"),Lno=o("ElectraTokenizer"),yno=o(" or "),XP=a("a"),xno=o("ElectraTokenizerFast"),$no=o(" (ELECTRA model)"),kno=l(),Yg=a("li"),Bne=a("strong"),Sno=o("flaubert"),Rno=o(" \u2014 "),zP=a("a"),Pno=o("FlaubertTokenizer"),Bno=o(" (FlauBERT model)"),Ino=l(),es=a("li"),Ine=a("strong"),Nno=o("fnet"),qno=o(" \u2014 "),WP=a("a"),jno=o("FNetTokenizer"),Dno=o(" or "),QP=a("a"),Gno=o("FNetTokenizerFast"),Ono=o(" (FNet model)"),Vno=l(),Kg=a("li"),Nne=a("strong"),Xno=o("fsmt"),zno=o(" \u2014 "),HP=a("a"),Wno=o("FSMTTokenizer"),Qno=o(" (FairSeq Machine-Translation model)"),Hno=l(),os=a("li"),qne=a("strong"),Uno=o("funnel"),Jno=o(" \u2014 "),UP=a("a"),Yno=o("FunnelTokenizer"),Kno=o(" or "),JP=a("a"),Zno=o("FunnelTokenizerFast"),eso=o(" (Funnel Transformer model)"),oso=l(),rs=a("li"),jne=a("strong"),rso=o("gpt2"),tso=o(" \u2014 "),YP=a("a"),aso=o("GPT2Tokenizer"),nso=o(" or "),KP=a("a"),sso=o("GPT2TokenizerFast"),lso=o(" (OpenAI GPT-2 model)"),iso=l(),ts=a("li"),Dne=a("strong"),dso=o("gpt_neo"),cso=o(" \u2014 "),ZP=a("a"),fso=o("GPT2Tokenizer"),mso=o(" or "),eB=a("a"),gso=o("GPT2TokenizerFast"),hso=o(" (GPT Neo model)"),pso=l(),Zg=a("li"),Gne=a("strong"),uso=o("gpt_neox"),_so=o(" \u2014 "),oB=a("a"),bso=o("GPTNeoXTokenizerFast"),vso=o(" (GPT NeoX model)"),Fso=l(),as=a("li"),One=a("strong"),Tso=o("gptj"),Mso=o(" \u2014 "),rB=a("a"),Eso=o("GPT2Tokenizer"),Cso=o(" or "),tB=a("a"),wso=o("GPT2TokenizerFast"),Aso=o(" (GPT-J model)"),Lso=l(),ns=a("li"),Vne=a("strong"),yso=o("herbert"),xso=o(" \u2014 "),aB=a("a"),$so=o("HerbertTokenizer"),kso=o(" or "),nB=a("a"),Sso=o("HerbertTokenizerFast"),Rso=o(" (HerBERT model)"),Pso=l(),eh=a("li"),Xne=a("strong"),Bso=o("hubert"),Iso=o(" \u2014 "),sB=a("a"),Nso=o("Wav2Vec2CTCTokenizer"),qso=o(" (Hubert model)"),jso=l(),ss=a("li"),zne=a("strong"),Dso=o("ibert"),Gso=o(" \u2014 "),lB=a("a"),Oso=o("RobertaTokenizer"),Vso=o(" or "),iB=a("a"),Xso=o("RobertaTokenizerFast"),zso=o(" (I-BERT model)"),Wso=l(),ls=a("li"),Wne=a("strong"),Qso=o("layoutlm"),Hso=o(" \u2014 "),dB=a("a"),Uso=o("LayoutLMTokenizer"),Jso=o(" or "),cB=a("a"),Yso=o("LayoutLMTokenizerFast"),Kso=o(" (LayoutLM model)"),Zso=l(),is=a("li"),Qne=a("strong"),elo=o("layoutlmv2"),olo=o(" \u2014 "),fB=a("a"),rlo=o("LayoutLMv2Tokenizer"),tlo=o(" or "),mB=a("a"),alo=o("LayoutLMv2TokenizerFast"),nlo=o(" (LayoutLMv2 model)"),slo=l(),ds=a("li"),Hne=a("strong"),llo=o("layoutlmv3"),ilo=o(" \u2014 "),gB=a("a"),dlo=o("LayoutLMv3Tokenizer"),clo=o(" or "),hB=a("a"),flo=o("LayoutLMv3TokenizerFast"),mlo=o(" (LayoutLMv3 model)"),glo=l(),cs=a("li"),Une=a("strong"),hlo=o("layoutxlm"),plo=o(" \u2014 "),pB=a("a"),ulo=o("LayoutXLMTokenizer"),_lo=o(" or "),uB=a("a"),blo=o("LayoutXLMTokenizerFast"),vlo=o(" (LayoutXLM model)"),Flo=l(),fs=a("li"),Jne=a("strong"),Tlo=o("led"),Mlo=o(" \u2014 "),_B=a("a"),Elo=o("LEDTokenizer"),Clo=o(" or "),bB=a("a"),wlo=o("LEDTokenizerFast"),Alo=o(" (LED model)"),Llo=l(),ms=a("li"),Yne=a("strong"),ylo=o("longformer"),xlo=o(" \u2014 "),vB=a("a"),$lo=o("LongformerTokenizer"),klo=o(" or "),FB=a("a"),Slo=o("LongformerTokenizerFast"),Rlo=o(" (Longformer model)"),Plo=l(),gs=a("li"),Kne=a("strong"),Blo=o("longt5"),Ilo=o(" \u2014 "),TB=a("a"),Nlo=o("T5Tokenizer"),qlo=o(" or "),MB=a("a"),jlo=o("T5TokenizerFast"),Dlo=o(" (LongT5 model)"),Glo=l(),oh=a("li"),Zne=a("strong"),Olo=o("luke"),Vlo=o(" \u2014 "),EB=a("a"),Xlo=o("LukeTokenizer"),zlo=o(" (LUKE model)"),Wlo=l(),hs=a("li"),ese=a("strong"),Qlo=o("lxmert"),Hlo=o(" \u2014 "),CB=a("a"),Ulo=o("LxmertTokenizer"),Jlo=o(" or "),wB=a("a"),Ylo=o("LxmertTokenizerFast"),Klo=o(" (LXMERT model)"),Zlo=l(),rh=a("li"),ose=a("strong"),eio=o("m2m_100"),oio=o(" \u2014 "),AB=a("a"),rio=o("M2M100Tokenizer"),tio=o(" (M2M100 model)"),aio=l(),th=a("li"),rse=a("strong"),nio=o("marian"),sio=o(" \u2014 "),LB=a("a"),lio=o("MarianTokenizer"),iio=o(" (Marian model)"),dio=l(),ps=a("li"),tse=a("strong"),cio=o("mbart"),fio=o(" \u2014 "),yB=a("a"),mio=o("MBartTokenizer"),gio=o(" or "),xB=a("a"),hio=o("MBartTokenizerFast"),pio=o(" (mBART model)"),uio=l(),us=a("li"),ase=a("strong"),_io=o("mbart50"),bio=o(" \u2014 "),$B=a("a"),vio=o("MBart50Tokenizer"),Fio=o(" or "),kB=a("a"),Tio=o("MBart50TokenizerFast"),Mio=o(" (mBART-50 model)"),Eio=l(),_s=a("li"),nse=a("strong"),Cio=o("megatron-bert"),wio=o(" \u2014 "),SB=a("a"),Aio=o("BertTokenizer"),Lio=o(" or "),RB=a("a"),yio=o("BertTokenizerFast"),xio=o(" (Megatron-BERT model)"),$io=l(),ah=a("li"),sse=a("strong"),kio=o("mluke"),Sio=o(" \u2014 "),PB=a("a"),Rio=o("MLukeTokenizer"),Pio=o(" (mLUKE model)"),Bio=l(),bs=a("li"),lse=a("strong"),Iio=o("mobilebert"),Nio=o(" \u2014 "),BB=a("a"),qio=o("MobileBertTokenizer"),jio=o(" or "),IB=a("a"),Dio=o("MobileBertTokenizerFast"),Gio=o(" (MobileBERT model)"),Oio=l(),vs=a("li"),ise=a("strong"),Vio=o("mpnet"),Xio=o(" \u2014 "),NB=a("a"),zio=o("MPNetTokenizer"),Wio=o(" or "),qB=a("a"),Qio=o("MPNetTokenizerFast"),Hio=o(" (MPNet model)"),Uio=l(),Fs=a("li"),dse=a("strong"),Jio=o("mt5"),Yio=o(" \u2014 "),jB=a("a"),Kio=o("MT5Tokenizer"),Zio=o(" or "),DB=a("a"),edo=o("MT5TokenizerFast"),odo=o(" (MT5 model)"),rdo=l(),Ts=a("li"),cse=a("strong"),tdo=o("nystromformer"),ado=o(" \u2014 "),GB=a("a"),ndo=o("AlbertTokenizer"),sdo=o(" or "),OB=a("a"),ldo=o("AlbertTokenizerFast"),ido=o(" (Nystr\xF6mformer model)"),ddo=l(),Ms=a("li"),fse=a("strong"),cdo=o("openai-gpt"),fdo=o(" \u2014 "),VB=a("a"),mdo=o("OpenAIGPTTokenizer"),gdo=o(" or "),XB=a("a"),hdo=o("OpenAIGPTTokenizerFast"),pdo=o(" (OpenAI GPT model)"),udo=l(),nh=a("li"),mse=a("strong"),_do=o("opt"),bdo=o(" \u2014 "),zB=a("a"),vdo=o("GPT2Tokenizer"),Fdo=o(" (OPT model)"),Tdo=l(),Es=a("li"),gse=a("strong"),Mdo=o("pegasus"),Edo=o(" \u2014 "),WB=a("a"),Cdo=o("PegasusTokenizer"),wdo=o(" or "),QB=a("a"),Ado=o("PegasusTokenizerFast"),Ldo=o(" (Pegasus model)"),ydo=l(),sh=a("li"),hse=a("strong"),xdo=o("perceiver"),$do=o(" \u2014 "),HB=a("a"),kdo=o("PerceiverTokenizer"),Sdo=o(" (Perceiver model)"),Rdo=l(),lh=a("li"),pse=a("strong"),Pdo=o("phobert"),Bdo=o(" \u2014 "),UB=a("a"),Ido=o("PhobertTokenizer"),Ndo=o(" (PhoBERT model)"),qdo=l(),ih=a("li"),use=a("strong"),jdo=o("plbart"),Ddo=o(" \u2014 "),JB=a("a"),Gdo=o("PLBartTokenizer"),Odo=o(" (PLBart model)"),Vdo=l(),dh=a("li"),_se=a("strong"),Xdo=o("prophetnet"),zdo=o(" \u2014 "),YB=a("a"),Wdo=o("ProphetNetTokenizer"),Qdo=o(" (ProphetNet model)"),Hdo=l(),Cs=a("li"),bse=a("strong"),Udo=o("qdqbert"),Jdo=o(" \u2014 "),KB=a("a"),Ydo=o("BertTokenizer"),Kdo=o(" or "),ZB=a("a"),Zdo=o("BertTokenizerFast"),eco=o(" (QDQBert model)"),oco=l(),ch=a("li"),vse=a("strong"),rco=o("rag"),tco=o(" \u2014 "),eI=a("a"),aco=o("RagTokenizer"),nco=o(" (RAG model)"),sco=l(),ws=a("li"),Fse=a("strong"),lco=o("realm"),ico=o(" \u2014 "),oI=a("a"),dco=o("RealmTokenizer"),cco=o(" or "),rI=a("a"),fco=o("RealmTokenizerFast"),mco=o(" (REALM model)"),gco=l(),As=a("li"),Tse=a("strong"),hco=o("reformer"),pco=o(" \u2014 "),tI=a("a"),uco=o("ReformerTokenizer"),_co=o(" or "),aI=a("a"),bco=o("ReformerTokenizerFast"),vco=o(" (Reformer model)"),Fco=l(),Ls=a("li"),Mse=a("strong"),Tco=o("rembert"),Mco=o(" \u2014 "),nI=a("a"),Eco=o("RemBertTokenizer"),Cco=o(" or "),sI=a("a"),wco=o("RemBertTokenizerFast"),Aco=o(" (RemBERT model)"),Lco=l(),ys=a("li"),Ese=a("strong"),yco=o("retribert"),xco=o(" \u2014 "),lI=a("a"),$co=o("RetriBertTokenizer"),kco=o(" or "),iI=a("a"),Sco=o("RetriBertTokenizerFast"),Rco=o(" (RetriBERT model)"),Pco=l(),xs=a("li"),Cse=a("strong"),Bco=o("roberta"),Ico=o(" \u2014 "),dI=a("a"),Nco=o("RobertaTokenizer"),qco=o(" or "),cI=a("a"),jco=o("RobertaTokenizerFast"),Dco=o(" (RoBERTa model)"),Gco=l(),$s=a("li"),wse=a("strong"),Oco=o("roformer"),Vco=o(" \u2014 "),fI=a("a"),Xco=o("RoFormerTokenizer"),zco=o(" or "),mI=a("a"),Wco=o("RoFormerTokenizerFast"),Qco=o(" (RoFormer model)"),Hco=l(),fh=a("li"),Ase=a("strong"),Uco=o("speech_to_text"),Jco=o(" \u2014 "),gI=a("a"),Yco=o("Speech2TextTokenizer"),Kco=o(" (Speech2Text model)"),Zco=l(),mh=a("li"),Lse=a("strong"),efo=o("speech_to_text_2"),ofo=o(" \u2014 "),hI=a("a"),rfo=o("Speech2Text2Tokenizer"),tfo=o(" (Speech2Text2 model)"),afo=l(),ks=a("li"),yse=a("strong"),nfo=o("splinter"),sfo=o(" \u2014 "),pI=a("a"),lfo=o("SplinterTokenizer"),ifo=o(" or "),uI=a("a"),dfo=o("SplinterTokenizerFast"),cfo=o(" (Splinter model)"),ffo=l(),Ss=a("li"),xse=a("strong"),mfo=o("squeezebert"),gfo=o(" \u2014 "),_I=a("a"),hfo=o("SqueezeBertTokenizer"),pfo=o(" or "),bI=a("a"),ufo=o("SqueezeBertTokenizerFast"),_fo=o(" (SqueezeBERT model)"),bfo=l(),Rs=a("li"),$se=a("strong"),vfo=o("t5"),Ffo=o(" \u2014 "),vI=a("a"),Tfo=o("T5Tokenizer"),Mfo=o(" or "),FI=a("a"),Efo=o("T5TokenizerFast"),Cfo=o(" (T5 model)"),wfo=l(),gh=a("li"),kse=a("strong"),Afo=o("tapas"),Lfo=o(" \u2014 "),TI=a("a"),yfo=o("TapasTokenizer"),xfo=o(" (TAPAS model)"),$fo=l(),hh=a("li"),Sse=a("strong"),kfo=o("tapex"),Sfo=o(" \u2014 "),MI=a("a"),Rfo=o("TapexTokenizer"),Pfo=o(" (TAPEX model)"),Bfo=l(),ph=a("li"),Rse=a("strong"),Ifo=o("transfo-xl"),Nfo=o(" \u2014 "),EI=a("a"),qfo=o("TransfoXLTokenizer"),jfo=o(" (Transformer-XL model)"),Dfo=l(),Ps=a("li"),Pse=a("strong"),Gfo=o("vilt"),Ofo=o(" \u2014 "),CI=a("a"),Vfo=o("BertTokenizer"),Xfo=o(" or "),wI=a("a"),zfo=o("BertTokenizerFast"),Wfo=o(" (ViLT model)"),Qfo=l(),Bs=a("li"),Bse=a("strong"),Hfo=o("visual_bert"),Ufo=o(" \u2014 "),AI=a("a"),Jfo=o("BertTokenizer"),Yfo=o(" or "),LI=a("a"),Kfo=o("BertTokenizerFast"),Zfo=o(" (VisualBERT model)"),emo=l(),uh=a("li"),Ise=a("strong"),omo=o("wav2vec2"),rmo=o(" \u2014 "),yI=a("a"),tmo=o("Wav2Vec2CTCTokenizer"),amo=o(" (Wav2Vec2 model)"),nmo=l(),_h=a("li"),Nse=a("strong"),smo=o("wav2vec2-conformer"),lmo=o(" \u2014 "),xI=a("a"),imo=o("Wav2Vec2CTCTokenizer"),dmo=o(" (Wav2Vec2-Conformer model)"),cmo=l(),bh=a("li"),qse=a("strong"),fmo=o("wav2vec2_phoneme"),mmo=o(" \u2014 "),$I=a("a"),gmo=o("Wav2Vec2PhonemeCTCTokenizer"),hmo=o(" (Wav2Vec2Phoneme model)"),pmo=l(),Is=a("li"),jse=a("strong"),umo=o("xglm"),_mo=o(" \u2014 "),kI=a("a"),bmo=o("XGLMTokenizer"),vmo=o(" or "),SI=a("a"),Fmo=o("XGLMTokenizerFast"),Tmo=o(" (XGLM model)"),Mmo=l(),vh=a("li"),Dse=a("strong"),Emo=o("xlm"),Cmo=o(" \u2014 "),RI=a("a"),wmo=o("XLMTokenizer"),Amo=o(" (XLM model)"),Lmo=l(),Fh=a("li"),Gse=a("strong"),ymo=o("xlm-prophetnet"),xmo=o(" \u2014 "),PI=a("a"),$mo=o("XLMProphetNetTokenizer"),kmo=o(" (XLM-ProphetNet model)"),Smo=l(),Ns=a("li"),Ose=a("strong"),Rmo=o("xlm-roberta"),Pmo=o(" \u2014 "),BI=a("a"),Bmo=o("XLMRobertaTokenizer"),Imo=o(" or "),II=a("a"),Nmo=o("XLMRobertaTokenizerFast"),qmo=o(" (XLM-RoBERTa model)"),jmo=l(),qs=a("li"),Vse=a("strong"),Dmo=o("xlm-roberta-xl"),Gmo=o(" \u2014 "),NI=a("a"),Omo=o("RobertaTokenizer"),Vmo=o(" or "),qI=a("a"),Xmo=o("RobertaTokenizerFast"),zmo=o(" (XLM-RoBERTa-XL model)"),Wmo=l(),js=a("li"),Xse=a("strong"),Qmo=o("xlnet"),Hmo=o(" \u2014 "),jI=a("a"),Umo=o("XLNetTokenizer"),Jmo=o(" or "),DI=a("a"),Ymo=o("XLNetTokenizerFast"),Kmo=o(" (XLNet model)"),Zmo=l(),Ds=a("li"),zse=a("strong"),ego=o("yoso"),ogo=o(" \u2014 "),GI=a("a"),rgo=o("AlbertTokenizer"),tgo=o(" or "),OI=a("a"),ago=o("AlbertTokenizerFast"),ngo=o(" (YOSO model)"),sgo=l(),F(Th.$$.fragment),lgo=l(),Mh=a("div"),F($A.$$.fragment),igo=l(),Wse=a("p"),dgo=o("Register a new tokenizer in this mapping."),ZDe=l(),ki=a("h2"),Eh=a("a"),Qse=a("span"),F(kA.$$.fragment),cgo=l(),Hse=a("span"),fgo=o("AutoFeatureExtractor"),eGe=l(),Lo=a("div"),F(SA.$$.fragment),mgo=l(),RA=a("p"),ggo=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),VI=a("a"),hgo=o("AutoFeatureExtractor.from_pretrained()"),pgo=o(" class method."),ugo=l(),PA=a("p"),_go=o("This class cannot be instantiated directly using "),Use=a("code"),bgo=o("__init__()"),vgo=o(" (throws an error)."),Fgo=l(),He=a("div"),F(BA.$$.fragment),Tgo=l(),Jse=a("p"),Mgo=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Ego=l(),ka=a("p"),Cgo=o("The feature extractor class to instantiate is selected based on the "),Yse=a("code"),wgo=o("model_type"),Ago=o(` property of the config object
(either passed as an argument or loaded from `),Kse=a("code"),Lgo=o("pretrained_model_name_or_path"),ygo=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Zse=a("code"),xgo=o("pretrained_model_name_or_path"),$go=o(":"),kgo=l(),Y=a("ul"),Ch=a("li"),ele=a("strong"),Sgo=o("beit"),Rgo=o(" \u2014 "),XI=a("a"),Pgo=o("BeitFeatureExtractor"),Bgo=o(" (BEiT model)"),Igo=l(),wh=a("li"),ole=a("strong"),Ngo=o("clip"),qgo=o(" \u2014 "),zI=a("a"),jgo=o("CLIPFeatureExtractor"),Dgo=o(" (CLIP model)"),Ggo=l(),Ah=a("li"),rle=a("strong"),Ogo=o("convnext"),Vgo=o(" \u2014 "),WI=a("a"),Xgo=o("ConvNextFeatureExtractor"),zgo=o(" (ConvNeXT model)"),Wgo=l(),Lh=a("li"),tle=a("strong"),Qgo=o("cvt"),Hgo=o(" \u2014 "),QI=a("a"),Ugo=o("ConvNextFeatureExtractor"),Jgo=o(" (CvT model)"),Ygo=l(),yh=a("li"),ale=a("strong"),Kgo=o("data2vec-audio"),Zgo=o(" \u2014 "),HI=a("a"),eho=o("Wav2Vec2FeatureExtractor"),oho=o(" (Data2VecAudio model)"),rho=l(),xh=a("li"),nle=a("strong"),tho=o("data2vec-vision"),aho=o(" \u2014 "),UI=a("a"),nho=o("BeitFeatureExtractor"),sho=o(" (Data2VecVision model)"),lho=l(),$h=a("li"),sle=a("strong"),iho=o("deit"),dho=o(" \u2014 "),JI=a("a"),cho=o("DeiTFeatureExtractor"),fho=o(" (DeiT model)"),mho=l(),kh=a("li"),lle=a("strong"),gho=o("detr"),hho=o(" \u2014 "),YI=a("a"),pho=o("DetrFeatureExtractor"),uho=o(" (DETR model)"),_ho=l(),Sh=a("li"),ile=a("strong"),bho=o("dpt"),vho=o(" \u2014 "),KI=a("a"),Fho=o("DPTFeatureExtractor"),Tho=o(" (DPT model)"),Mho=l(),Rh=a("li"),dle=a("strong"),Eho=o("flava"),Cho=o(" \u2014 "),ZI=a("a"),who=o("FlavaFeatureExtractor"),Aho=o(" (FLAVA model)"),Lho=l(),Ph=a("li"),cle=a("strong"),yho=o("glpn"),xho=o(" \u2014 "),eN=a("a"),$ho=o("GLPNFeatureExtractor"),kho=o(" (GLPN model)"),Sho=l(),Bh=a("li"),fle=a("strong"),Rho=o("hubert"),Pho=o(" \u2014 "),oN=a("a"),Bho=o("Wav2Vec2FeatureExtractor"),Iho=o(" (Hubert model)"),Nho=l(),Ih=a("li"),mle=a("strong"),qho=o("imagegpt"),jho=o(" \u2014 "),rN=a("a"),Dho=o("ImageGPTFeatureExtractor"),Gho=o(" (ImageGPT model)"),Oho=l(),Nh=a("li"),gle=a("strong"),Vho=o("layoutlmv2"),Xho=o(" \u2014 "),tN=a("a"),zho=o("LayoutLMv2FeatureExtractor"),Who=o(" (LayoutLMv2 model)"),Qho=l(),qh=a("li"),hle=a("strong"),Hho=o("layoutlmv3"),Uho=o(" \u2014 "),aN=a("a"),Jho=o("LayoutLMv3FeatureExtractor"),Yho=o(" (LayoutLMv3 model)"),Kho=l(),jh=a("li"),ple=a("strong"),Zho=o("levit"),epo=o(" \u2014 "),nN=a("a"),opo=o("LevitFeatureExtractor"),rpo=o(" (LeViT model)"),tpo=l(),Dh=a("li"),ule=a("strong"),apo=o("maskformer"),npo=o(" \u2014 "),sN=a("a"),spo=o("MaskFormerFeatureExtractor"),lpo=o(" (MaskFormer model)"),ipo=l(),Gh=a("li"),_le=a("strong"),dpo=o("mctct"),cpo=o(" \u2014 "),lN=a("a"),fpo=o("MCTCTFeatureExtractor"),mpo=o(" (M-CTC-T model)"),gpo=l(),Oh=a("li"),ble=a("strong"),hpo=o("perceiver"),ppo=o(" \u2014 "),iN=a("a"),upo=o("PerceiverFeatureExtractor"),_po=o(" (Perceiver model)"),bpo=l(),Vh=a("li"),vle=a("strong"),vpo=o("poolformer"),Fpo=o(" \u2014 "),dN=a("a"),Tpo=o("PoolFormerFeatureExtractor"),Mpo=o(" (PoolFormer model)"),Epo=l(),Xh=a("li"),Fle=a("strong"),Cpo=o("regnet"),wpo=o(" \u2014 "),cN=a("a"),Apo=o("ConvNextFeatureExtractor"),Lpo=o(" (RegNet model)"),ypo=l(),zh=a("li"),Tle=a("strong"),xpo=o("resnet"),$po=o(" \u2014 "),fN=a("a"),kpo=o("ConvNextFeatureExtractor"),Spo=o(" (ResNet model)"),Rpo=l(),Wh=a("li"),Mle=a("strong"),Ppo=o("segformer"),Bpo=o(" \u2014 "),mN=a("a"),Ipo=o("SegformerFeatureExtractor"),Npo=o(" (SegFormer model)"),qpo=l(),Qh=a("li"),Ele=a("strong"),jpo=o("speech_to_text"),Dpo=o(" \u2014 "),gN=a("a"),Gpo=o("Speech2TextFeatureExtractor"),Opo=o(" (Speech2Text model)"),Vpo=l(),Hh=a("li"),Cle=a("strong"),Xpo=o("swin"),zpo=o(" \u2014 "),hN=a("a"),Wpo=o("ViTFeatureExtractor"),Qpo=o(" (Swin Transformer model)"),Hpo=l(),Uh=a("li"),wle=a("strong"),Upo=o("van"),Jpo=o(" \u2014 "),pN=a("a"),Ypo=o("ConvNextFeatureExtractor"),Kpo=o(" (VAN model)"),Zpo=l(),Jh=a("li"),Ale=a("strong"),euo=o("vilt"),ouo=o(" \u2014 "),uN=a("a"),ruo=o("ViltFeatureExtractor"),tuo=o(" (ViLT model)"),auo=l(),Yh=a("li"),Lle=a("strong"),nuo=o("vit"),suo=o(" \u2014 "),_N=a("a"),luo=o("ViTFeatureExtractor"),iuo=o(" (ViT model)"),duo=l(),Kh=a("li"),yle=a("strong"),cuo=o("vit_mae"),fuo=o(" \u2014 "),bN=a("a"),muo=o("ViTFeatureExtractor"),guo=o(" (ViTMAE model)"),huo=l(),Zh=a("li"),xle=a("strong"),puo=o("wav2vec2"),uuo=o(" \u2014 "),vN=a("a"),_uo=o("Wav2Vec2FeatureExtractor"),buo=o(" (Wav2Vec2 model)"),vuo=l(),ep=a("li"),$le=a("strong"),Fuo=o("wav2vec2-conformer"),Tuo=o(" \u2014 "),FN=a("a"),Muo=o("Wav2Vec2FeatureExtractor"),Euo=o(" (Wav2Vec2-Conformer model)"),Cuo=l(),op=a("li"),kle=a("strong"),wuo=o("yolos"),Auo=o(" \u2014 "),TN=a("a"),Luo=o("YolosFeatureExtractor"),yuo=o(" (YOLOS model)"),xuo=l(),F(rp.$$.fragment),$uo=l(),F(tp.$$.fragment),kuo=l(),ap=a("div"),F(IA.$$.fragment),Suo=l(),Sle=a("p"),Ruo=o("Register a new feature extractor for this class."),oGe=l(),Si=a("h2"),np=a("a"),Rle=a("span"),F(NA.$$.fragment),Puo=l(),Ple=a("span"),Buo=o("AutoProcessor"),rGe=l(),yo=a("div"),F(qA.$$.fragment),Iuo=l(),jA=a("p"),Nuo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),MN=a("a"),quo=o("AutoProcessor.from_pretrained()"),juo=o(" class method."),Duo=l(),DA=a("p"),Guo=o("This class cannot be instantiated directly using "),Ble=a("code"),Ouo=o("__init__()"),Vuo=o(" (throws an error)."),Xuo=l(),Ue=a("div"),F(GA.$$.fragment),zuo=l(),Ile=a("p"),Wuo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Quo=l(),Ri=a("p"),Huo=o("The processor class to instantiate is selected based on the "),Nle=a("code"),Uuo=o("model_type"),Juo=o(` property of the config object (either
passed as an argument or loaded from `),qle=a("code"),Yuo=o("pretrained_model_name_or_path"),Kuo=o(" if possible):"),Zuo=l(),he=a("ul"),sp=a("li"),jle=a("strong"),e_o=o("clip"),o_o=o(" \u2014 "),EN=a("a"),r_o=o("CLIPProcessor"),t_o=o(" (CLIP model)"),a_o=l(),lp=a("li"),Dle=a("strong"),n_o=o("flava"),s_o=o(" \u2014 "),Gle=a("code"),l_o=o("FLAVAProcessor"),i_o=o(" (FLAVA model)"),d_o=l(),ip=a("li"),Ole=a("strong"),c_o=o("layoutlmv2"),f_o=o(" \u2014 "),CN=a("a"),m_o=o("LayoutLMv2Processor"),g_o=o(" (LayoutLMv2 model)"),h_o=l(),dp=a("li"),Vle=a("strong"),p_o=o("layoutlmv3"),u_o=o(" \u2014 "),wN=a("a"),__o=o("LayoutLMv3Processor"),b_o=o(" (LayoutLMv3 model)"),v_o=l(),cp=a("li"),Xle=a("strong"),F_o=o("layoutxlm"),T_o=o(" \u2014 "),AN=a("a"),M_o=o("LayoutXLMProcessor"),E_o=o(" (LayoutXLM model)"),C_o=l(),fp=a("li"),zle=a("strong"),w_o=o("sew"),A_o=o(" \u2014 "),LN=a("a"),L_o=o("Wav2Vec2Processor"),y_o=o(" (SEW model)"),x_o=l(),mp=a("li"),Wle=a("strong"),$_o=o("sew-d"),k_o=o(" \u2014 "),yN=a("a"),S_o=o("Wav2Vec2Processor"),R_o=o(" (SEW-D model)"),P_o=l(),gp=a("li"),Qle=a("strong"),B_o=o("speech_to_text"),I_o=o(" \u2014 "),xN=a("a"),N_o=o("Speech2TextProcessor"),q_o=o(" (Speech2Text model)"),j_o=l(),hp=a("li"),Hle=a("strong"),D_o=o("speech_to_text_2"),G_o=o(" \u2014 "),$N=a("a"),O_o=o("Speech2Text2Processor"),V_o=o(" (Speech2Text2 model)"),X_o=l(),pp=a("li"),Ule=a("strong"),z_o=o("trocr"),W_o=o(" \u2014 "),kN=a("a"),Q_o=o("TrOCRProcessor"),H_o=o(" (TrOCR model)"),U_o=l(),up=a("li"),Jle=a("strong"),J_o=o("unispeech"),Y_o=o(" \u2014 "),SN=a("a"),K_o=o("Wav2Vec2Processor"),Z_o=o(" (UniSpeech model)"),e2o=l(),_p=a("li"),Yle=a("strong"),o2o=o("unispeech-sat"),r2o=o(" \u2014 "),RN=a("a"),t2o=o("Wav2Vec2Processor"),a2o=o(" (UniSpeechSat model)"),n2o=l(),bp=a("li"),Kle=a("strong"),s2o=o("vilt"),l2o=o(" \u2014 "),PN=a("a"),i2o=o("ViltProcessor"),d2o=o(" (ViLT model)"),c2o=l(),vp=a("li"),Zle=a("strong"),f2o=o("vision-text-dual-encoder"),m2o=o(" \u2014 "),BN=a("a"),g2o=o("VisionTextDualEncoderProcessor"),h2o=o(" (VisionTextDualEncoder model)"),p2o=l(),Fp=a("li"),eie=a("strong"),u2o=o("wav2vec2"),_2o=o(" \u2014 "),IN=a("a"),b2o=o("Wav2Vec2Processor"),v2o=o(" (Wav2Vec2 model)"),F2o=l(),Tp=a("li"),oie=a("strong"),T2o=o("wav2vec2-conformer"),M2o=o(" \u2014 "),NN=a("a"),E2o=o("Wav2Vec2Processor"),C2o=o(" (Wav2Vec2-Conformer model)"),w2o=l(),Mp=a("li"),rie=a("strong"),A2o=o("wavlm"),L2o=o(" \u2014 "),qN=a("a"),y2o=o("Wav2Vec2Processor"),x2o=o(" (WavLM model)"),$2o=l(),F(Ep.$$.fragment),k2o=l(),F(Cp.$$.fragment),S2o=l(),wp=a("div"),F(OA.$$.fragment),R2o=l(),tie=a("p"),P2o=o("Register a new processor for this class."),tGe=l(),Pi=a("h2"),Ap=a("a"),aie=a("span"),F(VA.$$.fragment),B2o=l(),nie=a("span"),I2o=o("AutoModel"),aGe=l(),xo=a("div"),F(XA.$$.fragment),N2o=l(),Bi=a("p"),q2o=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),jN=a("a"),j2o=o("from_pretrained()"),D2o=o(" class method or the "),DN=a("a"),G2o=o("from_config()"),O2o=o(` class
method.`),V2o=l(),zA=a("p"),X2o=o("This class cannot be instantiated directly using "),sie=a("code"),z2o=o("__init__()"),W2o=o(" (throws an error)."),Q2o=l(),nt=a("div"),F(WA.$$.fragment),H2o=l(),lie=a("p"),U2o=o("Instantiates one of the base model classes of the library from a configuration."),J2o=l(),Ii=a("p"),Y2o=o(`Note:
Loading a model from its configuration file does `),iie=a("strong"),K2o=o("not"),Z2o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GN=a("a"),e1o=o("from_pretrained()"),o1o=o(" to load the model weights."),r1o=l(),F(Lp.$$.fragment),t1o=l(),Je=a("div"),F(QA.$$.fragment),a1o=l(),die=a("p"),n1o=o("Instantiate one of the base model classes of the library from a pretrained model."),s1o=l(),Sa=a("p"),l1o=o("The model class to instantiate is selected based on the "),cie=a("code"),i1o=o("model_type"),d1o=o(` property of the config object (either
passed as an argument or loaded from `),fie=a("code"),c1o=o("pretrained_model_name_or_path"),f1o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mie=a("code"),m1o=o("pretrained_model_name_or_path"),g1o=o(":"),h1o=l(),x=a("ul"),yp=a("li"),gie=a("strong"),p1o=o("albert"),u1o=o(" \u2014 "),ON=a("a"),_1o=o("AlbertModel"),b1o=o(" (ALBERT model)"),v1o=l(),xp=a("li"),hie=a("strong"),F1o=o("bart"),T1o=o(" \u2014 "),VN=a("a"),M1o=o("BartModel"),E1o=o(" (BART model)"),C1o=l(),$p=a("li"),pie=a("strong"),w1o=o("beit"),A1o=o(" \u2014 "),XN=a("a"),L1o=o("BeitModel"),y1o=o(" (BEiT model)"),x1o=l(),kp=a("li"),uie=a("strong"),$1o=o("bert"),k1o=o(" \u2014 "),zN=a("a"),S1o=o("BertModel"),R1o=o(" (BERT model)"),P1o=l(),Sp=a("li"),_ie=a("strong"),B1o=o("bert-generation"),I1o=o(" \u2014 "),WN=a("a"),N1o=o("BertGenerationEncoder"),q1o=o(" (Bert Generation model)"),j1o=l(),Rp=a("li"),bie=a("strong"),D1o=o("big_bird"),G1o=o(" \u2014 "),QN=a("a"),O1o=o("BigBirdModel"),V1o=o(" (BigBird model)"),X1o=l(),Pp=a("li"),vie=a("strong"),z1o=o("bigbird_pegasus"),W1o=o(" \u2014 "),HN=a("a"),Q1o=o("BigBirdPegasusModel"),H1o=o(" (BigBird-Pegasus model)"),U1o=l(),Bp=a("li"),Fie=a("strong"),J1o=o("blenderbot"),Y1o=o(" \u2014 "),UN=a("a"),K1o=o("BlenderbotModel"),Z1o=o(" (Blenderbot model)"),ebo=l(),Ip=a("li"),Tie=a("strong"),obo=o("blenderbot-small"),rbo=o(" \u2014 "),JN=a("a"),tbo=o("BlenderbotSmallModel"),abo=o(" (BlenderbotSmall model)"),nbo=l(),Np=a("li"),Mie=a("strong"),sbo=o("bloom"),lbo=o(" \u2014 "),YN=a("a"),ibo=o("BloomModel"),dbo=o(" (BLOOM model)"),cbo=l(),qp=a("li"),Eie=a("strong"),fbo=o("camembert"),mbo=o(" \u2014 "),KN=a("a"),gbo=o("CamembertModel"),hbo=o(" (CamemBERT model)"),pbo=l(),jp=a("li"),Cie=a("strong"),ubo=o("canine"),_bo=o(" \u2014 "),ZN=a("a"),bbo=o("CanineModel"),vbo=o(" (CANINE model)"),Fbo=l(),Dp=a("li"),wie=a("strong"),Tbo=o("clip"),Mbo=o(" \u2014 "),eq=a("a"),Ebo=o("CLIPModel"),Cbo=o(" (CLIP model)"),wbo=l(),Gp=a("li"),Aie=a("strong"),Abo=o("convbert"),Lbo=o(" \u2014 "),oq=a("a"),ybo=o("ConvBertModel"),xbo=o(" (ConvBERT model)"),$bo=l(),Op=a("li"),Lie=a("strong"),kbo=o("convnext"),Sbo=o(" \u2014 "),rq=a("a"),Rbo=o("ConvNextModel"),Pbo=o(" (ConvNeXT model)"),Bbo=l(),Vp=a("li"),yie=a("strong"),Ibo=o("ctrl"),Nbo=o(" \u2014 "),tq=a("a"),qbo=o("CTRLModel"),jbo=o(" (CTRL model)"),Dbo=l(),Xp=a("li"),xie=a("strong"),Gbo=o("cvt"),Obo=o(" \u2014 "),aq=a("a"),Vbo=o("CvtModel"),Xbo=o(" (CvT model)"),zbo=l(),zp=a("li"),$ie=a("strong"),Wbo=o("data2vec-audio"),Qbo=o(" \u2014 "),nq=a("a"),Hbo=o("Data2VecAudioModel"),Ubo=o(" (Data2VecAudio model)"),Jbo=l(),Wp=a("li"),kie=a("strong"),Ybo=o("data2vec-text"),Kbo=o(" \u2014 "),sq=a("a"),Zbo=o("Data2VecTextModel"),evo=o(" (Data2VecText model)"),ovo=l(),Qp=a("li"),Sie=a("strong"),rvo=o("data2vec-vision"),tvo=o(" \u2014 "),lq=a("a"),avo=o("Data2VecVisionModel"),nvo=o(" (Data2VecVision model)"),svo=l(),Hp=a("li"),Rie=a("strong"),lvo=o("deberta"),ivo=o(" \u2014 "),iq=a("a"),dvo=o("DebertaModel"),cvo=o(" (DeBERTa model)"),fvo=l(),Up=a("li"),Pie=a("strong"),mvo=o("deberta-v2"),gvo=o(" \u2014 "),dq=a("a"),hvo=o("DebertaV2Model"),pvo=o(" (DeBERTa-v2 model)"),uvo=l(),Jp=a("li"),Bie=a("strong"),_vo=o("decision_transformer"),bvo=o(" \u2014 "),cq=a("a"),vvo=o("DecisionTransformerModel"),Fvo=o(" (Decision Transformer model)"),Tvo=l(),Yp=a("li"),Iie=a("strong"),Mvo=o("deit"),Evo=o(" \u2014 "),fq=a("a"),Cvo=o("DeiTModel"),wvo=o(" (DeiT model)"),Avo=l(),Kp=a("li"),Nie=a("strong"),Lvo=o("detr"),yvo=o(" \u2014 "),mq=a("a"),xvo=o("DetrModel"),$vo=o(" (DETR model)"),kvo=l(),Zp=a("li"),qie=a("strong"),Svo=o("distilbert"),Rvo=o(" \u2014 "),gq=a("a"),Pvo=o("DistilBertModel"),Bvo=o(" (DistilBERT model)"),Ivo=l(),eu=a("li"),jie=a("strong"),Nvo=o("dpr"),qvo=o(" \u2014 "),hq=a("a"),jvo=o("DPRQuestionEncoder"),Dvo=o(" (DPR model)"),Gvo=l(),ou=a("li"),Die=a("strong"),Ovo=o("dpt"),Vvo=o(" \u2014 "),pq=a("a"),Xvo=o("DPTModel"),zvo=o(" (DPT model)"),Wvo=l(),ru=a("li"),Gie=a("strong"),Qvo=o("electra"),Hvo=o(" \u2014 "),uq=a("a"),Uvo=o("ElectraModel"),Jvo=o(" (ELECTRA model)"),Yvo=l(),tu=a("li"),Oie=a("strong"),Kvo=o("flaubert"),Zvo=o(" \u2014 "),_q=a("a"),eFo=o("FlaubertModel"),oFo=o(" (FlauBERT model)"),rFo=l(),au=a("li"),Vie=a("strong"),tFo=o("flava"),aFo=o(" \u2014 "),bq=a("a"),nFo=o("FlavaModel"),sFo=o(" (FLAVA model)"),lFo=l(),nu=a("li"),Xie=a("strong"),iFo=o("fnet"),dFo=o(" \u2014 "),vq=a("a"),cFo=o("FNetModel"),fFo=o(" (FNet model)"),mFo=l(),su=a("li"),zie=a("strong"),gFo=o("fsmt"),hFo=o(" \u2014 "),Fq=a("a"),pFo=o("FSMTModel"),uFo=o(" (FairSeq Machine-Translation model)"),_Fo=l(),Gs=a("li"),Wie=a("strong"),bFo=o("funnel"),vFo=o(" \u2014 "),Tq=a("a"),FFo=o("FunnelModel"),TFo=o(" or "),Mq=a("a"),MFo=o("FunnelBaseModel"),EFo=o(" (Funnel Transformer model)"),CFo=l(),lu=a("li"),Qie=a("strong"),wFo=o("glpn"),AFo=o(" \u2014 "),Eq=a("a"),LFo=o("GLPNModel"),yFo=o(" (GLPN model)"),xFo=l(),iu=a("li"),Hie=a("strong"),$Fo=o("gpt2"),kFo=o(" \u2014 "),Cq=a("a"),SFo=o("GPT2Model"),RFo=o(" (OpenAI GPT-2 model)"),PFo=l(),du=a("li"),Uie=a("strong"),BFo=o("gpt_neo"),IFo=o(" \u2014 "),wq=a("a"),NFo=o("GPTNeoModel"),qFo=o(" (GPT Neo model)"),jFo=l(),cu=a("li"),Jie=a("strong"),DFo=o("gpt_neox"),GFo=o(" \u2014 "),Aq=a("a"),OFo=o("GPTNeoXModel"),VFo=o(" (GPT NeoX model)"),XFo=l(),fu=a("li"),Yie=a("strong"),zFo=o("gptj"),WFo=o(" \u2014 "),Lq=a("a"),QFo=o("GPTJModel"),HFo=o(" (GPT-J model)"),UFo=l(),mu=a("li"),Kie=a("strong"),JFo=o("hubert"),YFo=o(" \u2014 "),yq=a("a"),KFo=o("HubertModel"),ZFo=o(" (Hubert model)"),e6o=l(),gu=a("li"),Zie=a("strong"),o6o=o("ibert"),r6o=o(" \u2014 "),xq=a("a"),t6o=o("IBertModel"),a6o=o(" (I-BERT model)"),n6o=l(),hu=a("li"),ede=a("strong"),s6o=o("imagegpt"),l6o=o(" \u2014 "),$q=a("a"),i6o=o("ImageGPTModel"),d6o=o(" (ImageGPT model)"),c6o=l(),pu=a("li"),ode=a("strong"),f6o=o("layoutlm"),m6o=o(" \u2014 "),kq=a("a"),g6o=o("LayoutLMModel"),h6o=o(" (LayoutLM model)"),p6o=l(),uu=a("li"),rde=a("strong"),u6o=o("layoutlmv2"),_6o=o(" \u2014 "),Sq=a("a"),b6o=o("LayoutLMv2Model"),v6o=o(" (LayoutLMv2 model)"),F6o=l(),_u=a("li"),tde=a("strong"),T6o=o("layoutlmv3"),M6o=o(" \u2014 "),Rq=a("a"),E6o=o("LayoutLMv3Model"),C6o=o(" (LayoutLMv3 model)"),w6o=l(),bu=a("li"),ade=a("strong"),A6o=o("led"),L6o=o(" \u2014 "),Pq=a("a"),y6o=o("LEDModel"),x6o=o(" (LED model)"),$6o=l(),vu=a("li"),nde=a("strong"),k6o=o("levit"),S6o=o(" \u2014 "),Bq=a("a"),R6o=o("LevitModel"),P6o=o(" (LeViT model)"),B6o=l(),Fu=a("li"),sde=a("strong"),I6o=o("longformer"),N6o=o(" \u2014 "),Iq=a("a"),q6o=o("LongformerModel"),j6o=o(" (Longformer model)"),D6o=l(),Tu=a("li"),lde=a("strong"),G6o=o("longt5"),O6o=o(" \u2014 "),Nq=a("a"),V6o=o("LongT5Model"),X6o=o(" (LongT5 model)"),z6o=l(),Mu=a("li"),ide=a("strong"),W6o=o("luke"),Q6o=o(" \u2014 "),qq=a("a"),H6o=o("LukeModel"),U6o=o(" (LUKE model)"),J6o=l(),Eu=a("li"),dde=a("strong"),Y6o=o("lxmert"),K6o=o(" \u2014 "),jq=a("a"),Z6o=o("LxmertModel"),eTo=o(" (LXMERT model)"),oTo=l(),Cu=a("li"),cde=a("strong"),rTo=o("m2m_100"),tTo=o(" \u2014 "),Dq=a("a"),aTo=o("M2M100Model"),nTo=o(" (M2M100 model)"),sTo=l(),wu=a("li"),fde=a("strong"),lTo=o("marian"),iTo=o(" \u2014 "),Gq=a("a"),dTo=o("MarianModel"),cTo=o(" (Marian model)"),fTo=l(),Au=a("li"),mde=a("strong"),mTo=o("maskformer"),gTo=o(" \u2014 "),Oq=a("a"),hTo=o("MaskFormerModel"),pTo=o(" (MaskFormer model)"),uTo=l(),Lu=a("li"),gde=a("strong"),_To=o("mbart"),bTo=o(" \u2014 "),Vq=a("a"),vTo=o("MBartModel"),FTo=o(" (mBART model)"),TTo=l(),yu=a("li"),hde=a("strong"),MTo=o("mctct"),ETo=o(" \u2014 "),Xq=a("a"),CTo=o("MCTCTModel"),wTo=o(" (M-CTC-T model)"),ATo=l(),xu=a("li"),pde=a("strong"),LTo=o("megatron-bert"),yTo=o(" \u2014 "),zq=a("a"),xTo=o("MegatronBertModel"),$To=o(" (Megatron-BERT model)"),kTo=l(),$u=a("li"),ude=a("strong"),STo=o("mobilebert"),RTo=o(" \u2014 "),Wq=a("a"),PTo=o("MobileBertModel"),BTo=o(" (MobileBERT model)"),ITo=l(),ku=a("li"),_de=a("strong"),NTo=o("mpnet"),qTo=o(" \u2014 "),Qq=a("a"),jTo=o("MPNetModel"),DTo=o(" (MPNet model)"),GTo=l(),Su=a("li"),bde=a("strong"),OTo=o("mt5"),VTo=o(" \u2014 "),Hq=a("a"),XTo=o("MT5Model"),zTo=o(" (MT5 model)"),WTo=l(),Ru=a("li"),vde=a("strong"),QTo=o("nystromformer"),HTo=o(" \u2014 "),Uq=a("a"),UTo=o("NystromformerModel"),JTo=o(" (Nystr\xF6mformer model)"),YTo=l(),Pu=a("li"),Fde=a("strong"),KTo=o("openai-gpt"),ZTo=o(" \u2014 "),Jq=a("a"),e7o=o("OpenAIGPTModel"),o7o=o(" (OpenAI GPT model)"),r7o=l(),Bu=a("li"),Tde=a("strong"),t7o=o("opt"),a7o=o(" \u2014 "),Yq=a("a"),n7o=o("OPTModel"),s7o=o(" (OPT model)"),l7o=l(),Iu=a("li"),Mde=a("strong"),i7o=o("pegasus"),d7o=o(" \u2014 "),Kq=a("a"),c7o=o("PegasusModel"),f7o=o(" (Pegasus model)"),m7o=l(),Nu=a("li"),Ede=a("strong"),g7o=o("perceiver"),h7o=o(" \u2014 "),Zq=a("a"),p7o=o("PerceiverModel"),u7o=o(" (Perceiver model)"),_7o=l(),qu=a("li"),Cde=a("strong"),b7o=o("plbart"),v7o=o(" \u2014 "),ej=a("a"),F7o=o("PLBartModel"),T7o=o(" (PLBart model)"),M7o=l(),ju=a("li"),wde=a("strong"),E7o=o("poolformer"),C7o=o(" \u2014 "),oj=a("a"),w7o=o("PoolFormerModel"),A7o=o(" (PoolFormer model)"),L7o=l(),Du=a("li"),Ade=a("strong"),y7o=o("prophetnet"),x7o=o(" \u2014 "),rj=a("a"),$7o=o("ProphetNetModel"),k7o=o(" (ProphetNet model)"),S7o=l(),Gu=a("li"),Lde=a("strong"),R7o=o("qdqbert"),P7o=o(" \u2014 "),tj=a("a"),B7o=o("QDQBertModel"),I7o=o(" (QDQBert model)"),N7o=l(),Ou=a("li"),yde=a("strong"),q7o=o("reformer"),j7o=o(" \u2014 "),aj=a("a"),D7o=o("ReformerModel"),G7o=o(" (Reformer model)"),O7o=l(),Vu=a("li"),xde=a("strong"),V7o=o("regnet"),X7o=o(" \u2014 "),nj=a("a"),z7o=o("RegNetModel"),W7o=o(" (RegNet model)"),Q7o=l(),Xu=a("li"),$de=a("strong"),H7o=o("rembert"),U7o=o(" \u2014 "),sj=a("a"),J7o=o("RemBertModel"),Y7o=o(" (RemBERT model)"),K7o=l(),zu=a("li"),kde=a("strong"),Z7o=o("resnet"),e9o=o(" \u2014 "),lj=a("a"),o9o=o("ResNetModel"),r9o=o(" (ResNet model)"),t9o=l(),Wu=a("li"),Sde=a("strong"),a9o=o("retribert"),n9o=o(" \u2014 "),ij=a("a"),s9o=o("RetriBertModel"),l9o=o(" (RetriBERT model)"),i9o=l(),Qu=a("li"),Rde=a("strong"),d9o=o("roberta"),c9o=o(" \u2014 "),dj=a("a"),f9o=o("RobertaModel"),m9o=o(" (RoBERTa model)"),g9o=l(),Hu=a("li"),Pde=a("strong"),h9o=o("roformer"),p9o=o(" \u2014 "),cj=a("a"),u9o=o("RoFormerModel"),_9o=o(" (RoFormer model)"),b9o=l(),Uu=a("li"),Bde=a("strong"),v9o=o("segformer"),F9o=o(" \u2014 "),fj=a("a"),T9o=o("SegformerModel"),M9o=o(" (SegFormer model)"),E9o=l(),Ju=a("li"),Ide=a("strong"),C9o=o("sew"),w9o=o(" \u2014 "),mj=a("a"),A9o=o("SEWModel"),L9o=o(" (SEW model)"),y9o=l(),Yu=a("li"),Nde=a("strong"),x9o=o("sew-d"),$9o=o(" \u2014 "),gj=a("a"),k9o=o("SEWDModel"),S9o=o(" (SEW-D model)"),R9o=l(),Ku=a("li"),qde=a("strong"),P9o=o("speech_to_text"),B9o=o(" \u2014 "),hj=a("a"),I9o=o("Speech2TextModel"),N9o=o(" (Speech2Text model)"),q9o=l(),Zu=a("li"),jde=a("strong"),j9o=o("splinter"),D9o=o(" \u2014 "),pj=a("a"),G9o=o("SplinterModel"),O9o=o(" (Splinter model)"),V9o=l(),e_=a("li"),Dde=a("strong"),X9o=o("squeezebert"),z9o=o(" \u2014 "),uj=a("a"),W9o=o("SqueezeBertModel"),Q9o=o(" (SqueezeBERT model)"),H9o=l(),o_=a("li"),Gde=a("strong"),U9o=o("swin"),J9o=o(" \u2014 "),_j=a("a"),Y9o=o("SwinModel"),K9o=o(" (Swin Transformer model)"),Z9o=l(),r_=a("li"),Ode=a("strong"),eMo=o("t5"),oMo=o(" \u2014 "),bj=a("a"),rMo=o("T5Model"),tMo=o(" (T5 model)"),aMo=l(),t_=a("li"),Vde=a("strong"),nMo=o("tapas"),sMo=o(" \u2014 "),vj=a("a"),lMo=o("TapasModel"),iMo=o(" (TAPAS model)"),dMo=l(),a_=a("li"),Xde=a("strong"),cMo=o("trajectory_transformer"),fMo=o(" \u2014 "),Fj=a("a"),mMo=o("TrajectoryTransformerModel"),gMo=o(" (Trajectory Transformer model)"),hMo=l(),n_=a("li"),zde=a("strong"),pMo=o("transfo-xl"),uMo=o(" \u2014 "),Tj=a("a"),_Mo=o("TransfoXLModel"),bMo=o(" (Transformer-XL model)"),vMo=l(),s_=a("li"),Wde=a("strong"),FMo=o("unispeech"),TMo=o(" \u2014 "),Mj=a("a"),MMo=o("UniSpeechModel"),EMo=o(" (UniSpeech model)"),CMo=l(),l_=a("li"),Qde=a("strong"),wMo=o("unispeech-sat"),AMo=o(" \u2014 "),Ej=a("a"),LMo=o("UniSpeechSatModel"),yMo=o(" (UniSpeechSat model)"),xMo=l(),i_=a("li"),Hde=a("strong"),$Mo=o("van"),kMo=o(" \u2014 "),Cj=a("a"),SMo=o("VanModel"),RMo=o(" (VAN model)"),PMo=l(),d_=a("li"),Ude=a("strong"),BMo=o("vilt"),IMo=o(" \u2014 "),wj=a("a"),NMo=o("ViltModel"),qMo=o(" (ViLT model)"),jMo=l(),c_=a("li"),Jde=a("strong"),DMo=o("vision-text-dual-encoder"),GMo=o(" \u2014 "),Aj=a("a"),OMo=o("VisionTextDualEncoderModel"),VMo=o(" (VisionTextDualEncoder model)"),XMo=l(),f_=a("li"),Yde=a("strong"),zMo=o("visual_bert"),WMo=o(" \u2014 "),Lj=a("a"),QMo=o("VisualBertModel"),HMo=o(" (VisualBERT model)"),UMo=l(),m_=a("li"),Kde=a("strong"),JMo=o("vit"),YMo=o(" \u2014 "),yj=a("a"),KMo=o("ViTModel"),ZMo=o(" (ViT model)"),e4o=l(),g_=a("li"),Zde=a("strong"),o4o=o("vit_mae"),r4o=o(" \u2014 "),xj=a("a"),t4o=o("ViTMAEModel"),a4o=o(" (ViTMAE model)"),n4o=l(),h_=a("li"),ece=a("strong"),s4o=o("wav2vec2"),l4o=o(" \u2014 "),$j=a("a"),i4o=o("Wav2Vec2Model"),d4o=o(" (Wav2Vec2 model)"),c4o=l(),p_=a("li"),oce=a("strong"),f4o=o("wav2vec2-conformer"),m4o=o(" \u2014 "),kj=a("a"),g4o=o("Wav2Vec2ConformerModel"),h4o=o(" (Wav2Vec2-Conformer model)"),p4o=l(),u_=a("li"),rce=a("strong"),u4o=o("wavlm"),_4o=o(" \u2014 "),Sj=a("a"),b4o=o("WavLMModel"),v4o=o(" (WavLM model)"),F4o=l(),__=a("li"),tce=a("strong"),T4o=o("xglm"),M4o=o(" \u2014 "),Rj=a("a"),E4o=o("XGLMModel"),C4o=o(" (XGLM model)"),w4o=l(),b_=a("li"),ace=a("strong"),A4o=o("xlm"),L4o=o(" \u2014 "),Pj=a("a"),y4o=o("XLMModel"),x4o=o(" (XLM model)"),$4o=l(),v_=a("li"),nce=a("strong"),k4o=o("xlm-prophetnet"),S4o=o(" \u2014 "),Bj=a("a"),R4o=o("XLMProphetNetModel"),P4o=o(" (XLM-ProphetNet model)"),B4o=l(),F_=a("li"),sce=a("strong"),I4o=o("xlm-roberta"),N4o=o(" \u2014 "),Ij=a("a"),q4o=o("XLMRobertaModel"),j4o=o(" (XLM-RoBERTa model)"),D4o=l(),T_=a("li"),lce=a("strong"),G4o=o("xlm-roberta-xl"),O4o=o(" \u2014 "),Nj=a("a"),V4o=o("XLMRobertaXLModel"),X4o=o(" (XLM-RoBERTa-XL model)"),z4o=l(),M_=a("li"),ice=a("strong"),W4o=o("xlnet"),Q4o=o(" \u2014 "),qj=a("a"),H4o=o("XLNetModel"),U4o=o(" (XLNet model)"),J4o=l(),E_=a("li"),dce=a("strong"),Y4o=o("yolos"),K4o=o(" \u2014 "),jj=a("a"),Z4o=o("YolosModel"),eEo=o(" (YOLOS model)"),oEo=l(),C_=a("li"),cce=a("strong"),rEo=o("yoso"),tEo=o(" \u2014 "),Dj=a("a"),aEo=o("YosoModel"),nEo=o(" (YOSO model)"),sEo=l(),w_=a("p"),lEo=o("The model is set in evaluation mode by default using "),fce=a("code"),iEo=o("model.eval()"),dEo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mce=a("code"),cEo=o("model.train()"),fEo=l(),F(A_.$$.fragment),nGe=l(),Ni=a("h2"),L_=a("a"),gce=a("span"),F(HA.$$.fragment),mEo=l(),hce=a("span"),gEo=o("AutoModelForPreTraining"),sGe=l(),$o=a("div"),F(UA.$$.fragment),hEo=l(),qi=a("p"),pEo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Gj=a("a"),uEo=o("from_pretrained()"),_Eo=o(" class method or the "),Oj=a("a"),bEo=o("from_config()"),vEo=o(` class
method.`),FEo=l(),JA=a("p"),TEo=o("This class cannot be instantiated directly using "),pce=a("code"),MEo=o("__init__()"),EEo=o(" (throws an error)."),CEo=l(),st=a("div"),F(YA.$$.fragment),wEo=l(),uce=a("p"),AEo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),LEo=l(),ji=a("p"),yEo=o(`Note:
Loading a model from its configuration file does `),_ce=a("strong"),xEo=o("not"),$Eo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Vj=a("a"),kEo=o("from_pretrained()"),SEo=o(" to load the model weights."),REo=l(),F(y_.$$.fragment),PEo=l(),Ye=a("div"),F(KA.$$.fragment),BEo=l(),bce=a("p"),IEo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),NEo=l(),Ra=a("p"),qEo=o("The model class to instantiate is selected based on the "),vce=a("code"),jEo=o("model_type"),DEo=o(` property of the config object (either
passed as an argument or loaded from `),Fce=a("code"),GEo=o("pretrained_model_name_or_path"),OEo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tce=a("code"),VEo=o("pretrained_model_name_or_path"),XEo=o(":"),zEo=l(),G=a("ul"),x_=a("li"),Mce=a("strong"),WEo=o("albert"),QEo=o(" \u2014 "),Xj=a("a"),HEo=o("AlbertForPreTraining"),UEo=o(" (ALBERT model)"),JEo=l(),$_=a("li"),Ece=a("strong"),YEo=o("bart"),KEo=o(" \u2014 "),zj=a("a"),ZEo=o("BartForConditionalGeneration"),eCo=o(" (BART model)"),oCo=l(),k_=a("li"),Cce=a("strong"),rCo=o("bert"),tCo=o(" \u2014 "),Wj=a("a"),aCo=o("BertForPreTraining"),nCo=o(" (BERT model)"),sCo=l(),S_=a("li"),wce=a("strong"),lCo=o("big_bird"),iCo=o(" \u2014 "),Qj=a("a"),dCo=o("BigBirdForPreTraining"),cCo=o(" (BigBird model)"),fCo=l(),R_=a("li"),Ace=a("strong"),mCo=o("bloom"),gCo=o(" \u2014 "),Hj=a("a"),hCo=o("BloomForCausalLM"),pCo=o(" (BLOOM model)"),uCo=l(),P_=a("li"),Lce=a("strong"),_Co=o("camembert"),bCo=o(" \u2014 "),Uj=a("a"),vCo=o("CamembertForMaskedLM"),FCo=o(" (CamemBERT model)"),TCo=l(),B_=a("li"),yce=a("strong"),MCo=o("ctrl"),ECo=o(" \u2014 "),Jj=a("a"),CCo=o("CTRLLMHeadModel"),wCo=o(" (CTRL model)"),ACo=l(),I_=a("li"),xce=a("strong"),LCo=o("data2vec-text"),yCo=o(" \u2014 "),Yj=a("a"),xCo=o("Data2VecTextForMaskedLM"),$Co=o(" (Data2VecText model)"),kCo=l(),N_=a("li"),$ce=a("strong"),SCo=o("deberta"),RCo=o(" \u2014 "),Kj=a("a"),PCo=o("DebertaForMaskedLM"),BCo=o(" (DeBERTa model)"),ICo=l(),q_=a("li"),kce=a("strong"),NCo=o("deberta-v2"),qCo=o(" \u2014 "),Zj=a("a"),jCo=o("DebertaV2ForMaskedLM"),DCo=o(" (DeBERTa-v2 model)"),GCo=l(),j_=a("li"),Sce=a("strong"),OCo=o("distilbert"),VCo=o(" \u2014 "),eD=a("a"),XCo=o("DistilBertForMaskedLM"),zCo=o(" (DistilBERT model)"),WCo=l(),D_=a("li"),Rce=a("strong"),QCo=o("electra"),HCo=o(" \u2014 "),oD=a("a"),UCo=o("ElectraForPreTraining"),JCo=o(" (ELECTRA model)"),YCo=l(),G_=a("li"),Pce=a("strong"),KCo=o("flaubert"),ZCo=o(" \u2014 "),rD=a("a"),e5o=o("FlaubertWithLMHeadModel"),o5o=o(" (FlauBERT model)"),r5o=l(),O_=a("li"),Bce=a("strong"),t5o=o("flava"),a5o=o(" \u2014 "),tD=a("a"),n5o=o("FlavaForPreTraining"),s5o=o(" (FLAVA model)"),l5o=l(),V_=a("li"),Ice=a("strong"),i5o=o("fnet"),d5o=o(" \u2014 "),aD=a("a"),c5o=o("FNetForPreTraining"),f5o=o(" (FNet model)"),m5o=l(),X_=a("li"),Nce=a("strong"),g5o=o("fsmt"),h5o=o(" \u2014 "),nD=a("a"),p5o=o("FSMTForConditionalGeneration"),u5o=o(" (FairSeq Machine-Translation model)"),_5o=l(),z_=a("li"),qce=a("strong"),b5o=o("funnel"),v5o=o(" \u2014 "),sD=a("a"),F5o=o("FunnelForPreTraining"),T5o=o(" (Funnel Transformer model)"),M5o=l(),W_=a("li"),jce=a("strong"),E5o=o("gpt2"),C5o=o(" \u2014 "),lD=a("a"),w5o=o("GPT2LMHeadModel"),A5o=o(" (OpenAI GPT-2 model)"),L5o=l(),Q_=a("li"),Dce=a("strong"),y5o=o("ibert"),x5o=o(" \u2014 "),iD=a("a"),$5o=o("IBertForMaskedLM"),k5o=o(" (I-BERT model)"),S5o=l(),H_=a("li"),Gce=a("strong"),R5o=o("layoutlm"),P5o=o(" \u2014 "),dD=a("a"),B5o=o("LayoutLMForMaskedLM"),I5o=o(" (LayoutLM model)"),N5o=l(),U_=a("li"),Oce=a("strong"),q5o=o("longformer"),j5o=o(" \u2014 "),cD=a("a"),D5o=o("LongformerForMaskedLM"),G5o=o(" (Longformer model)"),O5o=l(),J_=a("li"),Vce=a("strong"),V5o=o("lxmert"),X5o=o(" \u2014 "),fD=a("a"),z5o=o("LxmertForPreTraining"),W5o=o(" (LXMERT model)"),Q5o=l(),Y_=a("li"),Xce=a("strong"),H5o=o("megatron-bert"),U5o=o(" \u2014 "),mD=a("a"),J5o=o("MegatronBertForPreTraining"),Y5o=o(" (Megatron-BERT model)"),K5o=l(),K_=a("li"),zce=a("strong"),Z5o=o("mobilebert"),e3o=o(" \u2014 "),gD=a("a"),o3o=o("MobileBertForPreTraining"),r3o=o(" (MobileBERT model)"),t3o=l(),Z_=a("li"),Wce=a("strong"),a3o=o("mpnet"),n3o=o(" \u2014 "),hD=a("a"),s3o=o("MPNetForMaskedLM"),l3o=o(" (MPNet model)"),i3o=l(),e2=a("li"),Qce=a("strong"),d3o=o("openai-gpt"),c3o=o(" \u2014 "),pD=a("a"),f3o=o("OpenAIGPTLMHeadModel"),m3o=o(" (OpenAI GPT model)"),g3o=l(),o2=a("li"),Hce=a("strong"),h3o=o("retribert"),p3o=o(" \u2014 "),uD=a("a"),u3o=o("RetriBertModel"),_3o=o(" (RetriBERT model)"),b3o=l(),r2=a("li"),Uce=a("strong"),v3o=o("roberta"),F3o=o(" \u2014 "),_D=a("a"),T3o=o("RobertaForMaskedLM"),M3o=o(" (RoBERTa model)"),E3o=l(),t2=a("li"),Jce=a("strong"),C3o=o("splinter"),w3o=o(" \u2014 "),bD=a("a"),A3o=o("SplinterForPreTraining"),L3o=o(" (Splinter model)"),y3o=l(),a2=a("li"),Yce=a("strong"),x3o=o("squeezebert"),$3o=o(" \u2014 "),vD=a("a"),k3o=o("SqueezeBertForMaskedLM"),S3o=o(" (SqueezeBERT model)"),R3o=l(),n2=a("li"),Kce=a("strong"),P3o=o("t5"),B3o=o(" \u2014 "),FD=a("a"),I3o=o("T5ForConditionalGeneration"),N3o=o(" (T5 model)"),q3o=l(),s2=a("li"),Zce=a("strong"),j3o=o("tapas"),D3o=o(" \u2014 "),TD=a("a"),G3o=o("TapasForMaskedLM"),O3o=o(" (TAPAS model)"),V3o=l(),l2=a("li"),efe=a("strong"),X3o=o("transfo-xl"),z3o=o(" \u2014 "),MD=a("a"),W3o=o("TransfoXLLMHeadModel"),Q3o=o(" (Transformer-XL model)"),H3o=l(),i2=a("li"),ofe=a("strong"),U3o=o("unispeech"),J3o=o(" \u2014 "),ED=a("a"),Y3o=o("UniSpeechForPreTraining"),K3o=o(" (UniSpeech model)"),Z3o=l(),d2=a("li"),rfe=a("strong"),e0o=o("unispeech-sat"),o0o=o(" \u2014 "),CD=a("a"),r0o=o("UniSpeechSatForPreTraining"),t0o=o(" (UniSpeechSat model)"),a0o=l(),c2=a("li"),tfe=a("strong"),n0o=o("visual_bert"),s0o=o(" \u2014 "),wD=a("a"),l0o=o("VisualBertForPreTraining"),i0o=o(" (VisualBERT model)"),d0o=l(),f2=a("li"),afe=a("strong"),c0o=o("vit_mae"),f0o=o(" \u2014 "),AD=a("a"),m0o=o("ViTMAEForPreTraining"),g0o=o(" (ViTMAE model)"),h0o=l(),m2=a("li"),nfe=a("strong"),p0o=o("wav2vec2"),u0o=o(" \u2014 "),LD=a("a"),_0o=o("Wav2Vec2ForPreTraining"),b0o=o(" (Wav2Vec2 model)"),v0o=l(),g2=a("li"),sfe=a("strong"),F0o=o("wav2vec2-conformer"),T0o=o(" \u2014 "),yD=a("a"),M0o=o("Wav2Vec2ConformerForPreTraining"),E0o=o(" (Wav2Vec2-Conformer model)"),C0o=l(),h2=a("li"),lfe=a("strong"),w0o=o("xlm"),A0o=o(" \u2014 "),xD=a("a"),L0o=o("XLMWithLMHeadModel"),y0o=o(" (XLM model)"),x0o=l(),p2=a("li"),ife=a("strong"),$0o=o("xlm-roberta"),k0o=o(" \u2014 "),$D=a("a"),S0o=o("XLMRobertaForMaskedLM"),R0o=o(" (XLM-RoBERTa model)"),P0o=l(),u2=a("li"),dfe=a("strong"),B0o=o("xlm-roberta-xl"),I0o=o(" \u2014 "),kD=a("a"),N0o=o("XLMRobertaXLForMaskedLM"),q0o=o(" (XLM-RoBERTa-XL model)"),j0o=l(),_2=a("li"),cfe=a("strong"),D0o=o("xlnet"),G0o=o(" \u2014 "),SD=a("a"),O0o=o("XLNetLMHeadModel"),V0o=o(" (XLNet model)"),X0o=l(),b2=a("p"),z0o=o("The model is set in evaluation mode by default using "),ffe=a("code"),W0o=o("model.eval()"),Q0o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mfe=a("code"),H0o=o("model.train()"),U0o=l(),F(v2.$$.fragment),lGe=l(),Di=a("h2"),F2=a("a"),gfe=a("span"),F(ZA.$$.fragment),J0o=l(),hfe=a("span"),Y0o=o("AutoModelForCausalLM"),iGe=l(),ko=a("div"),F(eL.$$.fragment),K0o=l(),Gi=a("p"),Z0o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),RD=a("a"),ewo=o("from_pretrained()"),owo=o(" class method or the "),PD=a("a"),rwo=o("from_config()"),two=o(` class
method.`),awo=l(),oL=a("p"),nwo=o("This class cannot be instantiated directly using "),pfe=a("code"),swo=o("__init__()"),lwo=o(" (throws an error)."),iwo=l(),lt=a("div"),F(rL.$$.fragment),dwo=l(),ufe=a("p"),cwo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),fwo=l(),Oi=a("p"),mwo=o(`Note:
Loading a model from its configuration file does `),_fe=a("strong"),gwo=o("not"),hwo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BD=a("a"),pwo=o("from_pretrained()"),uwo=o(" to load the model weights."),_wo=l(),F(T2.$$.fragment),bwo=l(),Ke=a("div"),F(tL.$$.fragment),vwo=l(),bfe=a("p"),Fwo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Two=l(),Pa=a("p"),Mwo=o("The model class to instantiate is selected based on the "),vfe=a("code"),Ewo=o("model_type"),Cwo=o(` property of the config object (either
passed as an argument or loaded from `),Ffe=a("code"),wwo=o("pretrained_model_name_or_path"),Awo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tfe=a("code"),Lwo=o("pretrained_model_name_or_path"),ywo=o(":"),xwo=l(),z=a("ul"),M2=a("li"),Mfe=a("strong"),$wo=o("bart"),kwo=o(" \u2014 "),ID=a("a"),Swo=o("BartForCausalLM"),Rwo=o(" (BART model)"),Pwo=l(),E2=a("li"),Efe=a("strong"),Bwo=o("bert"),Iwo=o(" \u2014 "),ND=a("a"),Nwo=o("BertLMHeadModel"),qwo=o(" (BERT model)"),jwo=l(),C2=a("li"),Cfe=a("strong"),Dwo=o("bert-generation"),Gwo=o(" \u2014 "),qD=a("a"),Owo=o("BertGenerationDecoder"),Vwo=o(" (Bert Generation model)"),Xwo=l(),w2=a("li"),wfe=a("strong"),zwo=o("big_bird"),Wwo=o(" \u2014 "),jD=a("a"),Qwo=o("BigBirdForCausalLM"),Hwo=o(" (BigBird model)"),Uwo=l(),A2=a("li"),Afe=a("strong"),Jwo=o("bigbird_pegasus"),Ywo=o(" \u2014 "),DD=a("a"),Kwo=o("BigBirdPegasusForCausalLM"),Zwo=o(" (BigBird-Pegasus model)"),eAo=l(),L2=a("li"),Lfe=a("strong"),oAo=o("blenderbot"),rAo=o(" \u2014 "),GD=a("a"),tAo=o("BlenderbotForCausalLM"),aAo=o(" (Blenderbot model)"),nAo=l(),y2=a("li"),yfe=a("strong"),sAo=o("blenderbot-small"),lAo=o(" \u2014 "),OD=a("a"),iAo=o("BlenderbotSmallForCausalLM"),dAo=o(" (BlenderbotSmall model)"),cAo=l(),x2=a("li"),xfe=a("strong"),fAo=o("bloom"),mAo=o(" \u2014 "),VD=a("a"),gAo=o("BloomForCausalLM"),hAo=o(" (BLOOM model)"),pAo=l(),$2=a("li"),$fe=a("strong"),uAo=o("camembert"),_Ao=o(" \u2014 "),XD=a("a"),bAo=o("CamembertForCausalLM"),vAo=o(" (CamemBERT model)"),FAo=l(),k2=a("li"),kfe=a("strong"),TAo=o("ctrl"),MAo=o(" \u2014 "),zD=a("a"),EAo=o("CTRLLMHeadModel"),CAo=o(" (CTRL model)"),wAo=l(),S2=a("li"),Sfe=a("strong"),AAo=o("data2vec-text"),LAo=o(" \u2014 "),WD=a("a"),yAo=o("Data2VecTextForCausalLM"),xAo=o(" (Data2VecText model)"),$Ao=l(),R2=a("li"),Rfe=a("strong"),kAo=o("electra"),SAo=o(" \u2014 "),QD=a("a"),RAo=o("ElectraForCausalLM"),PAo=o(" (ELECTRA model)"),BAo=l(),P2=a("li"),Pfe=a("strong"),IAo=o("gpt2"),NAo=o(" \u2014 "),HD=a("a"),qAo=o("GPT2LMHeadModel"),jAo=o(" (OpenAI GPT-2 model)"),DAo=l(),B2=a("li"),Bfe=a("strong"),GAo=o("gpt_neo"),OAo=o(" \u2014 "),UD=a("a"),VAo=o("GPTNeoForCausalLM"),XAo=o(" (GPT Neo model)"),zAo=l(),I2=a("li"),Ife=a("strong"),WAo=o("gpt_neox"),QAo=o(" \u2014 "),JD=a("a"),HAo=o("GPTNeoXForCausalLM"),UAo=o(" (GPT NeoX model)"),JAo=l(),N2=a("li"),Nfe=a("strong"),YAo=o("gptj"),KAo=o(" \u2014 "),YD=a("a"),ZAo=o("GPTJForCausalLM"),eLo=o(" (GPT-J model)"),oLo=l(),q2=a("li"),qfe=a("strong"),rLo=o("marian"),tLo=o(" \u2014 "),KD=a("a"),aLo=o("MarianForCausalLM"),nLo=o(" (Marian model)"),sLo=l(),j2=a("li"),jfe=a("strong"),lLo=o("mbart"),iLo=o(" \u2014 "),ZD=a("a"),dLo=o("MBartForCausalLM"),cLo=o(" (mBART model)"),fLo=l(),D2=a("li"),Dfe=a("strong"),mLo=o("megatron-bert"),gLo=o(" \u2014 "),eG=a("a"),hLo=o("MegatronBertForCausalLM"),pLo=o(" (Megatron-BERT model)"),uLo=l(),G2=a("li"),Gfe=a("strong"),_Lo=o("openai-gpt"),bLo=o(" \u2014 "),oG=a("a"),vLo=o("OpenAIGPTLMHeadModel"),FLo=o(" (OpenAI GPT model)"),TLo=l(),O2=a("li"),Ofe=a("strong"),MLo=o("opt"),ELo=o(" \u2014 "),rG=a("a"),CLo=o("OPTForCausalLM"),wLo=o(" (OPT model)"),ALo=l(),V2=a("li"),Vfe=a("strong"),LLo=o("pegasus"),yLo=o(" \u2014 "),tG=a("a"),xLo=o("PegasusForCausalLM"),$Lo=o(" (Pegasus model)"),kLo=l(),X2=a("li"),Xfe=a("strong"),SLo=o("plbart"),RLo=o(" \u2014 "),aG=a("a"),PLo=o("PLBartForCausalLM"),BLo=o(" (PLBart model)"),ILo=l(),z2=a("li"),zfe=a("strong"),NLo=o("prophetnet"),qLo=o(" \u2014 "),nG=a("a"),jLo=o("ProphetNetForCausalLM"),DLo=o(" (ProphetNet model)"),GLo=l(),W2=a("li"),Wfe=a("strong"),OLo=o("qdqbert"),VLo=o(" \u2014 "),sG=a("a"),XLo=o("QDQBertLMHeadModel"),zLo=o(" (QDQBert model)"),WLo=l(),Q2=a("li"),Qfe=a("strong"),QLo=o("reformer"),HLo=o(" \u2014 "),lG=a("a"),ULo=o("ReformerModelWithLMHead"),JLo=o(" (Reformer model)"),YLo=l(),H2=a("li"),Hfe=a("strong"),KLo=o("rembert"),ZLo=o(" \u2014 "),iG=a("a"),eyo=o("RemBertForCausalLM"),oyo=o(" (RemBERT model)"),ryo=l(),U2=a("li"),Ufe=a("strong"),tyo=o("roberta"),ayo=o(" \u2014 "),dG=a("a"),nyo=o("RobertaForCausalLM"),syo=o(" (RoBERTa model)"),lyo=l(),J2=a("li"),Jfe=a("strong"),iyo=o("roformer"),dyo=o(" \u2014 "),cG=a("a"),cyo=o("RoFormerForCausalLM"),fyo=o(" (RoFormer model)"),myo=l(),Y2=a("li"),Yfe=a("strong"),gyo=o("speech_to_text_2"),hyo=o(" \u2014 "),fG=a("a"),pyo=o("Speech2Text2ForCausalLM"),uyo=o(" (Speech2Text2 model)"),_yo=l(),K2=a("li"),Kfe=a("strong"),byo=o("transfo-xl"),vyo=o(" \u2014 "),mG=a("a"),Fyo=o("TransfoXLLMHeadModel"),Tyo=o(" (Transformer-XL model)"),Myo=l(),Z2=a("li"),Zfe=a("strong"),Eyo=o("trocr"),Cyo=o(" \u2014 "),gG=a("a"),wyo=o("TrOCRForCausalLM"),Ayo=o(" (TrOCR model)"),Lyo=l(),e1=a("li"),eme=a("strong"),yyo=o("xglm"),xyo=o(" \u2014 "),hG=a("a"),$yo=o("XGLMForCausalLM"),kyo=o(" (XGLM model)"),Syo=l(),o1=a("li"),ome=a("strong"),Ryo=o("xlm"),Pyo=o(" \u2014 "),pG=a("a"),Byo=o("XLMWithLMHeadModel"),Iyo=o(" (XLM model)"),Nyo=l(),r1=a("li"),rme=a("strong"),qyo=o("xlm-prophetnet"),jyo=o(" \u2014 "),uG=a("a"),Dyo=o("XLMProphetNetForCausalLM"),Gyo=o(" (XLM-ProphetNet model)"),Oyo=l(),t1=a("li"),tme=a("strong"),Vyo=o("xlm-roberta"),Xyo=o(" \u2014 "),_G=a("a"),zyo=o("XLMRobertaForCausalLM"),Wyo=o(" (XLM-RoBERTa model)"),Qyo=l(),a1=a("li"),ame=a("strong"),Hyo=o("xlm-roberta-xl"),Uyo=o(" \u2014 "),bG=a("a"),Jyo=o("XLMRobertaXLForCausalLM"),Yyo=o(" (XLM-RoBERTa-XL model)"),Kyo=l(),n1=a("li"),nme=a("strong"),Zyo=o("xlnet"),e8o=o(" \u2014 "),vG=a("a"),o8o=o("XLNetLMHeadModel"),r8o=o(" (XLNet model)"),t8o=l(),s1=a("p"),a8o=o("The model is set in evaluation mode by default using "),sme=a("code"),n8o=o("model.eval()"),s8o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lme=a("code"),l8o=o("model.train()"),i8o=l(),F(l1.$$.fragment),dGe=l(),Vi=a("h2"),i1=a("a"),ime=a("span"),F(aL.$$.fragment),d8o=l(),dme=a("span"),c8o=o("AutoModelForMaskedLM"),cGe=l(),So=a("div"),F(nL.$$.fragment),f8o=l(),Xi=a("p"),m8o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),FG=a("a"),g8o=o("from_pretrained()"),h8o=o(" class method or the "),TG=a("a"),p8o=o("from_config()"),u8o=o(` class
method.`),_8o=l(),sL=a("p"),b8o=o("This class cannot be instantiated directly using "),cme=a("code"),v8o=o("__init__()"),F8o=o(" (throws an error)."),T8o=l(),it=a("div"),F(lL.$$.fragment),M8o=l(),fme=a("p"),E8o=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),C8o=l(),zi=a("p"),w8o=o(`Note:
Loading a model from its configuration file does `),mme=a("strong"),A8o=o("not"),L8o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MG=a("a"),y8o=o("from_pretrained()"),x8o=o(" to load the model weights."),$8o=l(),F(d1.$$.fragment),k8o=l(),Ze=a("div"),F(iL.$$.fragment),S8o=l(),gme=a("p"),R8o=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),P8o=l(),Ba=a("p"),B8o=o("The model class to instantiate is selected based on the "),hme=a("code"),I8o=o("model_type"),N8o=o(` property of the config object (either
passed as an argument or loaded from `),pme=a("code"),q8o=o("pretrained_model_name_or_path"),j8o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ume=a("code"),D8o=o("pretrained_model_name_or_path"),G8o=o(":"),O8o=l(),Q=a("ul"),c1=a("li"),_me=a("strong"),V8o=o("albert"),X8o=o(" \u2014 "),EG=a("a"),z8o=o("AlbertForMaskedLM"),W8o=o(" (ALBERT model)"),Q8o=l(),f1=a("li"),bme=a("strong"),H8o=o("bart"),U8o=o(" \u2014 "),CG=a("a"),J8o=o("BartForConditionalGeneration"),Y8o=o(" (BART model)"),K8o=l(),m1=a("li"),vme=a("strong"),Z8o=o("bert"),exo=o(" \u2014 "),wG=a("a"),oxo=o("BertForMaskedLM"),rxo=o(" (BERT model)"),txo=l(),g1=a("li"),Fme=a("strong"),axo=o("big_bird"),nxo=o(" \u2014 "),AG=a("a"),sxo=o("BigBirdForMaskedLM"),lxo=o(" (BigBird model)"),ixo=l(),h1=a("li"),Tme=a("strong"),dxo=o("camembert"),cxo=o(" \u2014 "),LG=a("a"),fxo=o("CamembertForMaskedLM"),mxo=o(" (CamemBERT model)"),gxo=l(),p1=a("li"),Mme=a("strong"),hxo=o("convbert"),pxo=o(" \u2014 "),yG=a("a"),uxo=o("ConvBertForMaskedLM"),_xo=o(" (ConvBERT model)"),bxo=l(),u1=a("li"),Eme=a("strong"),vxo=o("data2vec-text"),Fxo=o(" \u2014 "),xG=a("a"),Txo=o("Data2VecTextForMaskedLM"),Mxo=o(" (Data2VecText model)"),Exo=l(),_1=a("li"),Cme=a("strong"),Cxo=o("deberta"),wxo=o(" \u2014 "),$G=a("a"),Axo=o("DebertaForMaskedLM"),Lxo=o(" (DeBERTa model)"),yxo=l(),b1=a("li"),wme=a("strong"),xxo=o("deberta-v2"),$xo=o(" \u2014 "),kG=a("a"),kxo=o("DebertaV2ForMaskedLM"),Sxo=o(" (DeBERTa-v2 model)"),Rxo=l(),v1=a("li"),Ame=a("strong"),Pxo=o("distilbert"),Bxo=o(" \u2014 "),SG=a("a"),Ixo=o("DistilBertForMaskedLM"),Nxo=o(" (DistilBERT model)"),qxo=l(),F1=a("li"),Lme=a("strong"),jxo=o("electra"),Dxo=o(" \u2014 "),RG=a("a"),Gxo=o("ElectraForMaskedLM"),Oxo=o(" (ELECTRA model)"),Vxo=l(),T1=a("li"),yme=a("strong"),Xxo=o("flaubert"),zxo=o(" \u2014 "),PG=a("a"),Wxo=o("FlaubertWithLMHeadModel"),Qxo=o(" (FlauBERT model)"),Hxo=l(),M1=a("li"),xme=a("strong"),Uxo=o("fnet"),Jxo=o(" \u2014 "),BG=a("a"),Yxo=o("FNetForMaskedLM"),Kxo=o(" (FNet model)"),Zxo=l(),E1=a("li"),$me=a("strong"),e$o=o("funnel"),o$o=o(" \u2014 "),IG=a("a"),r$o=o("FunnelForMaskedLM"),t$o=o(" (Funnel Transformer model)"),a$o=l(),C1=a("li"),kme=a("strong"),n$o=o("ibert"),s$o=o(" \u2014 "),NG=a("a"),l$o=o("IBertForMaskedLM"),i$o=o(" (I-BERT model)"),d$o=l(),w1=a("li"),Sme=a("strong"),c$o=o("layoutlm"),f$o=o(" \u2014 "),qG=a("a"),m$o=o("LayoutLMForMaskedLM"),g$o=o(" (LayoutLM model)"),h$o=l(),A1=a("li"),Rme=a("strong"),p$o=o("longformer"),u$o=o(" \u2014 "),jG=a("a"),_$o=o("LongformerForMaskedLM"),b$o=o(" (Longformer model)"),v$o=l(),L1=a("li"),Pme=a("strong"),F$o=o("luke"),T$o=o(" \u2014 "),DG=a("a"),M$o=o("LukeForMaskedLM"),E$o=o(" (LUKE model)"),C$o=l(),y1=a("li"),Bme=a("strong"),w$o=o("mbart"),A$o=o(" \u2014 "),GG=a("a"),L$o=o("MBartForConditionalGeneration"),y$o=o(" (mBART model)"),x$o=l(),x1=a("li"),Ime=a("strong"),$$o=o("megatron-bert"),k$o=o(" \u2014 "),OG=a("a"),S$o=o("MegatronBertForMaskedLM"),R$o=o(" (Megatron-BERT model)"),P$o=l(),$1=a("li"),Nme=a("strong"),B$o=o("mobilebert"),I$o=o(" \u2014 "),VG=a("a"),N$o=o("MobileBertForMaskedLM"),q$o=o(" (MobileBERT model)"),j$o=l(),k1=a("li"),qme=a("strong"),D$o=o("mpnet"),G$o=o(" \u2014 "),XG=a("a"),O$o=o("MPNetForMaskedLM"),V$o=o(" (MPNet model)"),X$o=l(),S1=a("li"),jme=a("strong"),z$o=o("nystromformer"),W$o=o(" \u2014 "),zG=a("a"),Q$o=o("NystromformerForMaskedLM"),H$o=o(" (Nystr\xF6mformer model)"),U$o=l(),R1=a("li"),Dme=a("strong"),J$o=o("perceiver"),Y$o=o(" \u2014 "),WG=a("a"),K$o=o("PerceiverForMaskedLM"),Z$o=o(" (Perceiver model)"),eko=l(),P1=a("li"),Gme=a("strong"),oko=o("qdqbert"),rko=o(" \u2014 "),QG=a("a"),tko=o("QDQBertForMaskedLM"),ako=o(" (QDQBert model)"),nko=l(),B1=a("li"),Ome=a("strong"),sko=o("reformer"),lko=o(" \u2014 "),HG=a("a"),iko=o("ReformerForMaskedLM"),dko=o(" (Reformer model)"),cko=l(),I1=a("li"),Vme=a("strong"),fko=o("rembert"),mko=o(" \u2014 "),UG=a("a"),gko=o("RemBertForMaskedLM"),hko=o(" (RemBERT model)"),pko=l(),N1=a("li"),Xme=a("strong"),uko=o("roberta"),_ko=o(" \u2014 "),JG=a("a"),bko=o("RobertaForMaskedLM"),vko=o(" (RoBERTa model)"),Fko=l(),q1=a("li"),zme=a("strong"),Tko=o("roformer"),Mko=o(" \u2014 "),YG=a("a"),Eko=o("RoFormerForMaskedLM"),Cko=o(" (RoFormer model)"),wko=l(),j1=a("li"),Wme=a("strong"),Ako=o("squeezebert"),Lko=o(" \u2014 "),KG=a("a"),yko=o("SqueezeBertForMaskedLM"),xko=o(" (SqueezeBERT model)"),$ko=l(),D1=a("li"),Qme=a("strong"),kko=o("tapas"),Sko=o(" \u2014 "),ZG=a("a"),Rko=o("TapasForMaskedLM"),Pko=o(" (TAPAS model)"),Bko=l(),G1=a("li"),Hme=a("strong"),Iko=o("wav2vec2"),Nko=o(" \u2014 "),Ume=a("code"),qko=o("Wav2Vec2ForMaskedLM"),jko=o(" (Wav2Vec2 model)"),Dko=l(),O1=a("li"),Jme=a("strong"),Gko=o("xlm"),Oko=o(" \u2014 "),eO=a("a"),Vko=o("XLMWithLMHeadModel"),Xko=o(" (XLM model)"),zko=l(),V1=a("li"),Yme=a("strong"),Wko=o("xlm-roberta"),Qko=o(" \u2014 "),oO=a("a"),Hko=o("XLMRobertaForMaskedLM"),Uko=o(" (XLM-RoBERTa model)"),Jko=l(),X1=a("li"),Kme=a("strong"),Yko=o("xlm-roberta-xl"),Kko=o(" \u2014 "),rO=a("a"),Zko=o("XLMRobertaXLForMaskedLM"),eSo=o(" (XLM-RoBERTa-XL model)"),oSo=l(),z1=a("li"),Zme=a("strong"),rSo=o("yoso"),tSo=o(" \u2014 "),tO=a("a"),aSo=o("YosoForMaskedLM"),nSo=o(" (YOSO model)"),sSo=l(),W1=a("p"),lSo=o("The model is set in evaluation mode by default using "),ege=a("code"),iSo=o("model.eval()"),dSo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),oge=a("code"),cSo=o("model.train()"),fSo=l(),F(Q1.$$.fragment),fGe=l(),Wi=a("h2"),H1=a("a"),rge=a("span"),F(dL.$$.fragment),mSo=l(),tge=a("span"),gSo=o("AutoModelForSeq2SeqLM"),mGe=l(),Ro=a("div"),F(cL.$$.fragment),hSo=l(),Qi=a("p"),pSo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),aO=a("a"),uSo=o("from_pretrained()"),_So=o(" class method or the "),nO=a("a"),bSo=o("from_config()"),vSo=o(` class
method.`),FSo=l(),fL=a("p"),TSo=o("This class cannot be instantiated directly using "),age=a("code"),MSo=o("__init__()"),ESo=o(" (throws an error)."),CSo=l(),dt=a("div"),F(mL.$$.fragment),wSo=l(),nge=a("p"),ASo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),LSo=l(),Hi=a("p"),ySo=o(`Note:
Loading a model from its configuration file does `),sge=a("strong"),xSo=o("not"),$So=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sO=a("a"),kSo=o("from_pretrained()"),SSo=o(" to load the model weights."),RSo=l(),F(U1.$$.fragment),PSo=l(),eo=a("div"),F(gL.$$.fragment),BSo=l(),lge=a("p"),ISo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),NSo=l(),Ia=a("p"),qSo=o("The model class to instantiate is selected based on the "),ige=a("code"),jSo=o("model_type"),DSo=o(` property of the config object (either
passed as an argument or loaded from `),dge=a("code"),GSo=o("pretrained_model_name_or_path"),OSo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cge=a("code"),VSo=o("pretrained_model_name_or_path"),XSo=o(":"),zSo=l(),pe=a("ul"),J1=a("li"),fge=a("strong"),WSo=o("bart"),QSo=o(" \u2014 "),lO=a("a"),HSo=o("BartForConditionalGeneration"),USo=o(" (BART model)"),JSo=l(),Y1=a("li"),mge=a("strong"),YSo=o("bigbird_pegasus"),KSo=o(" \u2014 "),iO=a("a"),ZSo=o("BigBirdPegasusForConditionalGeneration"),eRo=o(" (BigBird-Pegasus model)"),oRo=l(),K1=a("li"),gge=a("strong"),rRo=o("blenderbot"),tRo=o(" \u2014 "),dO=a("a"),aRo=o("BlenderbotForConditionalGeneration"),nRo=o(" (Blenderbot model)"),sRo=l(),Z1=a("li"),hge=a("strong"),lRo=o("blenderbot-small"),iRo=o(" \u2014 "),cO=a("a"),dRo=o("BlenderbotSmallForConditionalGeneration"),cRo=o(" (BlenderbotSmall model)"),fRo=l(),eb=a("li"),pge=a("strong"),mRo=o("encoder-decoder"),gRo=o(" \u2014 "),fO=a("a"),hRo=o("EncoderDecoderModel"),pRo=o(" (Encoder decoder model)"),uRo=l(),ob=a("li"),uge=a("strong"),_Ro=o("fsmt"),bRo=o(" \u2014 "),mO=a("a"),vRo=o("FSMTForConditionalGeneration"),FRo=o(" (FairSeq Machine-Translation model)"),TRo=l(),rb=a("li"),_ge=a("strong"),MRo=o("led"),ERo=o(" \u2014 "),gO=a("a"),CRo=o("LEDForConditionalGeneration"),wRo=o(" (LED model)"),ARo=l(),tb=a("li"),bge=a("strong"),LRo=o("longt5"),yRo=o(" \u2014 "),hO=a("a"),xRo=o("LongT5ForConditionalGeneration"),$Ro=o(" (LongT5 model)"),kRo=l(),ab=a("li"),vge=a("strong"),SRo=o("m2m_100"),RRo=o(" \u2014 "),pO=a("a"),PRo=o("M2M100ForConditionalGeneration"),BRo=o(" (M2M100 model)"),IRo=l(),nb=a("li"),Fge=a("strong"),NRo=o("marian"),qRo=o(" \u2014 "),uO=a("a"),jRo=o("MarianMTModel"),DRo=o(" (Marian model)"),GRo=l(),sb=a("li"),Tge=a("strong"),ORo=o("mbart"),VRo=o(" \u2014 "),_O=a("a"),XRo=o("MBartForConditionalGeneration"),zRo=o(" (mBART model)"),WRo=l(),lb=a("li"),Mge=a("strong"),QRo=o("mt5"),HRo=o(" \u2014 "),bO=a("a"),URo=o("MT5ForConditionalGeneration"),JRo=o(" (MT5 model)"),YRo=l(),ib=a("li"),Ege=a("strong"),KRo=o("pegasus"),ZRo=o(" \u2014 "),vO=a("a"),ePo=o("PegasusForConditionalGeneration"),oPo=o(" (Pegasus model)"),rPo=l(),db=a("li"),Cge=a("strong"),tPo=o("plbart"),aPo=o(" \u2014 "),FO=a("a"),nPo=o("PLBartForConditionalGeneration"),sPo=o(" (PLBart model)"),lPo=l(),cb=a("li"),wge=a("strong"),iPo=o("prophetnet"),dPo=o(" \u2014 "),TO=a("a"),cPo=o("ProphetNetForConditionalGeneration"),fPo=o(" (ProphetNet model)"),mPo=l(),fb=a("li"),Age=a("strong"),gPo=o("t5"),hPo=o(" \u2014 "),MO=a("a"),pPo=o("T5ForConditionalGeneration"),uPo=o(" (T5 model)"),_Po=l(),mb=a("li"),Lge=a("strong"),bPo=o("xlm-prophetnet"),vPo=o(" \u2014 "),EO=a("a"),FPo=o("XLMProphetNetForConditionalGeneration"),TPo=o(" (XLM-ProphetNet model)"),MPo=l(),gb=a("p"),EPo=o("The model is set in evaluation mode by default using "),yge=a("code"),CPo=o("model.eval()"),wPo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xge=a("code"),APo=o("model.train()"),LPo=l(),F(hb.$$.fragment),gGe=l(),Ui=a("h2"),pb=a("a"),$ge=a("span"),F(hL.$$.fragment),yPo=l(),kge=a("span"),xPo=o("AutoModelForSequenceClassification"),hGe=l(),Po=a("div"),F(pL.$$.fragment),$Po=l(),Ji=a("p"),kPo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),CO=a("a"),SPo=o("from_pretrained()"),RPo=o(" class method or the "),wO=a("a"),PPo=o("from_config()"),BPo=o(` class
method.`),IPo=l(),uL=a("p"),NPo=o("This class cannot be instantiated directly using "),Sge=a("code"),qPo=o("__init__()"),jPo=o(" (throws an error)."),DPo=l(),ct=a("div"),F(_L.$$.fragment),GPo=l(),Rge=a("p"),OPo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),VPo=l(),Yi=a("p"),XPo=o(`Note:
Loading a model from its configuration file does `),Pge=a("strong"),zPo=o("not"),WPo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AO=a("a"),QPo=o("from_pretrained()"),HPo=o(" to load the model weights."),UPo=l(),F(ub.$$.fragment),JPo=l(),oo=a("div"),F(bL.$$.fragment),YPo=l(),Bge=a("p"),KPo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),ZPo=l(),Na=a("p"),eBo=o("The model class to instantiate is selected based on the "),Ige=a("code"),oBo=o("model_type"),rBo=o(` property of the config object (either
passed as an argument or loaded from `),Nge=a("code"),tBo=o("pretrained_model_name_or_path"),aBo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qge=a("code"),nBo=o("pretrained_model_name_or_path"),sBo=o(":"),lBo=l(),N=a("ul"),_b=a("li"),jge=a("strong"),iBo=o("albert"),dBo=o(" \u2014 "),LO=a("a"),cBo=o("AlbertForSequenceClassification"),fBo=o(" (ALBERT model)"),mBo=l(),bb=a("li"),Dge=a("strong"),gBo=o("bart"),hBo=o(" \u2014 "),yO=a("a"),pBo=o("BartForSequenceClassification"),uBo=o(" (BART model)"),_Bo=l(),vb=a("li"),Gge=a("strong"),bBo=o("bert"),vBo=o(" \u2014 "),xO=a("a"),FBo=o("BertForSequenceClassification"),TBo=o(" (BERT model)"),MBo=l(),Fb=a("li"),Oge=a("strong"),EBo=o("big_bird"),CBo=o(" \u2014 "),$O=a("a"),wBo=o("BigBirdForSequenceClassification"),ABo=o(" (BigBird model)"),LBo=l(),Tb=a("li"),Vge=a("strong"),yBo=o("bigbird_pegasus"),xBo=o(" \u2014 "),kO=a("a"),$Bo=o("BigBirdPegasusForSequenceClassification"),kBo=o(" (BigBird-Pegasus model)"),SBo=l(),Mb=a("li"),Xge=a("strong"),RBo=o("camembert"),PBo=o(" \u2014 "),SO=a("a"),BBo=o("CamembertForSequenceClassification"),IBo=o(" (CamemBERT model)"),NBo=l(),Eb=a("li"),zge=a("strong"),qBo=o("canine"),jBo=o(" \u2014 "),RO=a("a"),DBo=o("CanineForSequenceClassification"),GBo=o(" (CANINE model)"),OBo=l(),Cb=a("li"),Wge=a("strong"),VBo=o("convbert"),XBo=o(" \u2014 "),PO=a("a"),zBo=o("ConvBertForSequenceClassification"),WBo=o(" (ConvBERT model)"),QBo=l(),wb=a("li"),Qge=a("strong"),HBo=o("ctrl"),UBo=o(" \u2014 "),BO=a("a"),JBo=o("CTRLForSequenceClassification"),YBo=o(" (CTRL model)"),KBo=l(),Ab=a("li"),Hge=a("strong"),ZBo=o("data2vec-text"),eIo=o(" \u2014 "),IO=a("a"),oIo=o("Data2VecTextForSequenceClassification"),rIo=o(" (Data2VecText model)"),tIo=l(),Lb=a("li"),Uge=a("strong"),aIo=o("deberta"),nIo=o(" \u2014 "),NO=a("a"),sIo=o("DebertaForSequenceClassification"),lIo=o(" (DeBERTa model)"),iIo=l(),yb=a("li"),Jge=a("strong"),dIo=o("deberta-v2"),cIo=o(" \u2014 "),qO=a("a"),fIo=o("DebertaV2ForSequenceClassification"),mIo=o(" (DeBERTa-v2 model)"),gIo=l(),xb=a("li"),Yge=a("strong"),hIo=o("distilbert"),pIo=o(" \u2014 "),jO=a("a"),uIo=o("DistilBertForSequenceClassification"),_Io=o(" (DistilBERT model)"),bIo=l(),$b=a("li"),Kge=a("strong"),vIo=o("electra"),FIo=o(" \u2014 "),DO=a("a"),TIo=o("ElectraForSequenceClassification"),MIo=o(" (ELECTRA model)"),EIo=l(),kb=a("li"),Zge=a("strong"),CIo=o("flaubert"),wIo=o(" \u2014 "),GO=a("a"),AIo=o("FlaubertForSequenceClassification"),LIo=o(" (FlauBERT model)"),yIo=l(),Sb=a("li"),ehe=a("strong"),xIo=o("fnet"),$Io=o(" \u2014 "),OO=a("a"),kIo=o("FNetForSequenceClassification"),SIo=o(" (FNet model)"),RIo=l(),Rb=a("li"),ohe=a("strong"),PIo=o("funnel"),BIo=o(" \u2014 "),VO=a("a"),IIo=o("FunnelForSequenceClassification"),NIo=o(" (Funnel Transformer model)"),qIo=l(),Pb=a("li"),rhe=a("strong"),jIo=o("gpt2"),DIo=o(" \u2014 "),XO=a("a"),GIo=o("GPT2ForSequenceClassification"),OIo=o(" (OpenAI GPT-2 model)"),VIo=l(),Bb=a("li"),the=a("strong"),XIo=o("gpt_neo"),zIo=o(" \u2014 "),zO=a("a"),WIo=o("GPTNeoForSequenceClassification"),QIo=o(" (GPT Neo model)"),HIo=l(),Ib=a("li"),ahe=a("strong"),UIo=o("gptj"),JIo=o(" \u2014 "),WO=a("a"),YIo=o("GPTJForSequenceClassification"),KIo=o(" (GPT-J model)"),ZIo=l(),Nb=a("li"),nhe=a("strong"),eNo=o("ibert"),oNo=o(" \u2014 "),QO=a("a"),rNo=o("IBertForSequenceClassification"),tNo=o(" (I-BERT model)"),aNo=l(),qb=a("li"),she=a("strong"),nNo=o("layoutlm"),sNo=o(" \u2014 "),HO=a("a"),lNo=o("LayoutLMForSequenceClassification"),iNo=o(" (LayoutLM model)"),dNo=l(),jb=a("li"),lhe=a("strong"),cNo=o("layoutlmv2"),fNo=o(" \u2014 "),UO=a("a"),mNo=o("LayoutLMv2ForSequenceClassification"),gNo=o(" (LayoutLMv2 model)"),hNo=l(),Db=a("li"),ihe=a("strong"),pNo=o("layoutlmv3"),uNo=o(" \u2014 "),JO=a("a"),_No=o("LayoutLMv3ForSequenceClassification"),bNo=o(" (LayoutLMv3 model)"),vNo=l(),Gb=a("li"),dhe=a("strong"),FNo=o("led"),TNo=o(" \u2014 "),YO=a("a"),MNo=o("LEDForSequenceClassification"),ENo=o(" (LED model)"),CNo=l(),Ob=a("li"),che=a("strong"),wNo=o("longformer"),ANo=o(" \u2014 "),KO=a("a"),LNo=o("LongformerForSequenceClassification"),yNo=o(" (Longformer model)"),xNo=l(),Vb=a("li"),fhe=a("strong"),$No=o("mbart"),kNo=o(" \u2014 "),ZO=a("a"),SNo=o("MBartForSequenceClassification"),RNo=o(" (mBART model)"),PNo=l(),Xb=a("li"),mhe=a("strong"),BNo=o("megatron-bert"),INo=o(" \u2014 "),eV=a("a"),NNo=o("MegatronBertForSequenceClassification"),qNo=o(" (Megatron-BERT model)"),jNo=l(),zb=a("li"),ghe=a("strong"),DNo=o("mobilebert"),GNo=o(" \u2014 "),oV=a("a"),ONo=o("MobileBertForSequenceClassification"),VNo=o(" (MobileBERT model)"),XNo=l(),Wb=a("li"),hhe=a("strong"),zNo=o("mpnet"),WNo=o(" \u2014 "),rV=a("a"),QNo=o("MPNetForSequenceClassification"),HNo=o(" (MPNet model)"),UNo=l(),Qb=a("li"),phe=a("strong"),JNo=o("nystromformer"),YNo=o(" \u2014 "),tV=a("a"),KNo=o("NystromformerForSequenceClassification"),ZNo=o(" (Nystr\xF6mformer model)"),eqo=l(),Hb=a("li"),uhe=a("strong"),oqo=o("openai-gpt"),rqo=o(" \u2014 "),aV=a("a"),tqo=o("OpenAIGPTForSequenceClassification"),aqo=o(" (OpenAI GPT model)"),nqo=l(),Ub=a("li"),_he=a("strong"),sqo=o("perceiver"),lqo=o(" \u2014 "),nV=a("a"),iqo=o("PerceiverForSequenceClassification"),dqo=o(" (Perceiver model)"),cqo=l(),Jb=a("li"),bhe=a("strong"),fqo=o("plbart"),mqo=o(" \u2014 "),sV=a("a"),gqo=o("PLBartForSequenceClassification"),hqo=o(" (PLBart model)"),pqo=l(),Yb=a("li"),vhe=a("strong"),uqo=o("qdqbert"),_qo=o(" \u2014 "),lV=a("a"),bqo=o("QDQBertForSequenceClassification"),vqo=o(" (QDQBert model)"),Fqo=l(),Kb=a("li"),Fhe=a("strong"),Tqo=o("reformer"),Mqo=o(" \u2014 "),iV=a("a"),Eqo=o("ReformerForSequenceClassification"),Cqo=o(" (Reformer model)"),wqo=l(),Zb=a("li"),The=a("strong"),Aqo=o("rembert"),Lqo=o(" \u2014 "),dV=a("a"),yqo=o("RemBertForSequenceClassification"),xqo=o(" (RemBERT model)"),$qo=l(),ev=a("li"),Mhe=a("strong"),kqo=o("roberta"),Sqo=o(" \u2014 "),cV=a("a"),Rqo=o("RobertaForSequenceClassification"),Pqo=o(" (RoBERTa model)"),Bqo=l(),ov=a("li"),Ehe=a("strong"),Iqo=o("roformer"),Nqo=o(" \u2014 "),fV=a("a"),qqo=o("RoFormerForSequenceClassification"),jqo=o(" (RoFormer model)"),Dqo=l(),rv=a("li"),Che=a("strong"),Gqo=o("squeezebert"),Oqo=o(" \u2014 "),mV=a("a"),Vqo=o("SqueezeBertForSequenceClassification"),Xqo=o(" (SqueezeBERT model)"),zqo=l(),tv=a("li"),whe=a("strong"),Wqo=o("tapas"),Qqo=o(" \u2014 "),gV=a("a"),Hqo=o("TapasForSequenceClassification"),Uqo=o(" (TAPAS model)"),Jqo=l(),av=a("li"),Ahe=a("strong"),Yqo=o("transfo-xl"),Kqo=o(" \u2014 "),hV=a("a"),Zqo=o("TransfoXLForSequenceClassification"),ejo=o(" (Transformer-XL model)"),ojo=l(),nv=a("li"),Lhe=a("strong"),rjo=o("xlm"),tjo=o(" \u2014 "),pV=a("a"),ajo=o("XLMForSequenceClassification"),njo=o(" (XLM model)"),sjo=l(),sv=a("li"),yhe=a("strong"),ljo=o("xlm-roberta"),ijo=o(" \u2014 "),uV=a("a"),djo=o("XLMRobertaForSequenceClassification"),cjo=o(" (XLM-RoBERTa model)"),fjo=l(),lv=a("li"),xhe=a("strong"),mjo=o("xlm-roberta-xl"),gjo=o(" \u2014 "),_V=a("a"),hjo=o("XLMRobertaXLForSequenceClassification"),pjo=o(" (XLM-RoBERTa-XL model)"),ujo=l(),iv=a("li"),$he=a("strong"),_jo=o("xlnet"),bjo=o(" \u2014 "),bV=a("a"),vjo=o("XLNetForSequenceClassification"),Fjo=o(" (XLNet model)"),Tjo=l(),dv=a("li"),khe=a("strong"),Mjo=o("yoso"),Ejo=o(" \u2014 "),vV=a("a"),Cjo=o("YosoForSequenceClassification"),wjo=o(" (YOSO model)"),Ajo=l(),cv=a("p"),Ljo=o("The model is set in evaluation mode by default using "),She=a("code"),yjo=o("model.eval()"),xjo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rhe=a("code"),$jo=o("model.train()"),kjo=l(),F(fv.$$.fragment),pGe=l(),Ki=a("h2"),mv=a("a"),Phe=a("span"),F(vL.$$.fragment),Sjo=l(),Bhe=a("span"),Rjo=o("AutoModelForMultipleChoice"),uGe=l(),Bo=a("div"),F(FL.$$.fragment),Pjo=l(),Zi=a("p"),Bjo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),FV=a("a"),Ijo=o("from_pretrained()"),Njo=o(" class method or the "),TV=a("a"),qjo=o("from_config()"),jjo=o(` class
method.`),Djo=l(),TL=a("p"),Gjo=o("This class cannot be instantiated directly using "),Ihe=a("code"),Ojo=o("__init__()"),Vjo=o(" (throws an error)."),Xjo=l(),ft=a("div"),F(ML.$$.fragment),zjo=l(),Nhe=a("p"),Wjo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Qjo=l(),ed=a("p"),Hjo=o(`Note:
Loading a model from its configuration file does `),qhe=a("strong"),Ujo=o("not"),Jjo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MV=a("a"),Yjo=o("from_pretrained()"),Kjo=o(" to load the model weights."),Zjo=l(),F(gv.$$.fragment),eDo=l(),ro=a("div"),F(EL.$$.fragment),oDo=l(),jhe=a("p"),rDo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),tDo=l(),qa=a("p"),aDo=o("The model class to instantiate is selected based on the "),Dhe=a("code"),nDo=o("model_type"),sDo=o(` property of the config object (either
passed as an argument or loaded from `),Ghe=a("code"),lDo=o("pretrained_model_name_or_path"),iDo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ohe=a("code"),dDo=o("pretrained_model_name_or_path"),cDo=o(":"),fDo=l(),Z=a("ul"),hv=a("li"),Vhe=a("strong"),mDo=o("albert"),gDo=o(" \u2014 "),EV=a("a"),hDo=o("AlbertForMultipleChoice"),pDo=o(" (ALBERT model)"),uDo=l(),pv=a("li"),Xhe=a("strong"),_Do=o("bert"),bDo=o(" \u2014 "),CV=a("a"),vDo=o("BertForMultipleChoice"),FDo=o(" (BERT model)"),TDo=l(),uv=a("li"),zhe=a("strong"),MDo=o("big_bird"),EDo=o(" \u2014 "),wV=a("a"),CDo=o("BigBirdForMultipleChoice"),wDo=o(" (BigBird model)"),ADo=l(),_v=a("li"),Whe=a("strong"),LDo=o("camembert"),yDo=o(" \u2014 "),AV=a("a"),xDo=o("CamembertForMultipleChoice"),$Do=o(" (CamemBERT model)"),kDo=l(),bv=a("li"),Qhe=a("strong"),SDo=o("canine"),RDo=o(" \u2014 "),LV=a("a"),PDo=o("CanineForMultipleChoice"),BDo=o(" (CANINE model)"),IDo=l(),vv=a("li"),Hhe=a("strong"),NDo=o("convbert"),qDo=o(" \u2014 "),yV=a("a"),jDo=o("ConvBertForMultipleChoice"),DDo=o(" (ConvBERT model)"),GDo=l(),Fv=a("li"),Uhe=a("strong"),ODo=o("data2vec-text"),VDo=o(" \u2014 "),xV=a("a"),XDo=o("Data2VecTextForMultipleChoice"),zDo=o(" (Data2VecText model)"),WDo=l(),Tv=a("li"),Jhe=a("strong"),QDo=o("deberta-v2"),HDo=o(" \u2014 "),$V=a("a"),UDo=o("DebertaV2ForMultipleChoice"),JDo=o(" (DeBERTa-v2 model)"),YDo=l(),Mv=a("li"),Yhe=a("strong"),KDo=o("distilbert"),ZDo=o(" \u2014 "),kV=a("a"),eGo=o("DistilBertForMultipleChoice"),oGo=o(" (DistilBERT model)"),rGo=l(),Ev=a("li"),Khe=a("strong"),tGo=o("electra"),aGo=o(" \u2014 "),SV=a("a"),nGo=o("ElectraForMultipleChoice"),sGo=o(" (ELECTRA model)"),lGo=l(),Cv=a("li"),Zhe=a("strong"),iGo=o("flaubert"),dGo=o(" \u2014 "),RV=a("a"),cGo=o("FlaubertForMultipleChoice"),fGo=o(" (FlauBERT model)"),mGo=l(),wv=a("li"),epe=a("strong"),gGo=o("fnet"),hGo=o(" \u2014 "),PV=a("a"),pGo=o("FNetForMultipleChoice"),uGo=o(" (FNet model)"),_Go=l(),Av=a("li"),ope=a("strong"),bGo=o("funnel"),vGo=o(" \u2014 "),BV=a("a"),FGo=o("FunnelForMultipleChoice"),TGo=o(" (Funnel Transformer model)"),MGo=l(),Lv=a("li"),rpe=a("strong"),EGo=o("ibert"),CGo=o(" \u2014 "),IV=a("a"),wGo=o("IBertForMultipleChoice"),AGo=o(" (I-BERT model)"),LGo=l(),yv=a("li"),tpe=a("strong"),yGo=o("longformer"),xGo=o(" \u2014 "),NV=a("a"),$Go=o("LongformerForMultipleChoice"),kGo=o(" (Longformer model)"),SGo=l(),xv=a("li"),ape=a("strong"),RGo=o("megatron-bert"),PGo=o(" \u2014 "),qV=a("a"),BGo=o("MegatronBertForMultipleChoice"),IGo=o(" (Megatron-BERT model)"),NGo=l(),$v=a("li"),npe=a("strong"),qGo=o("mobilebert"),jGo=o(" \u2014 "),jV=a("a"),DGo=o("MobileBertForMultipleChoice"),GGo=o(" (MobileBERT model)"),OGo=l(),kv=a("li"),spe=a("strong"),VGo=o("mpnet"),XGo=o(" \u2014 "),DV=a("a"),zGo=o("MPNetForMultipleChoice"),WGo=o(" (MPNet model)"),QGo=l(),Sv=a("li"),lpe=a("strong"),HGo=o("nystromformer"),UGo=o(" \u2014 "),GV=a("a"),JGo=o("NystromformerForMultipleChoice"),YGo=o(" (Nystr\xF6mformer model)"),KGo=l(),Rv=a("li"),ipe=a("strong"),ZGo=o("qdqbert"),eOo=o(" \u2014 "),OV=a("a"),oOo=o("QDQBertForMultipleChoice"),rOo=o(" (QDQBert model)"),tOo=l(),Pv=a("li"),dpe=a("strong"),aOo=o("rembert"),nOo=o(" \u2014 "),VV=a("a"),sOo=o("RemBertForMultipleChoice"),lOo=o(" (RemBERT model)"),iOo=l(),Bv=a("li"),cpe=a("strong"),dOo=o("roberta"),cOo=o(" \u2014 "),XV=a("a"),fOo=o("RobertaForMultipleChoice"),mOo=o(" (RoBERTa model)"),gOo=l(),Iv=a("li"),fpe=a("strong"),hOo=o("roformer"),pOo=o(" \u2014 "),zV=a("a"),uOo=o("RoFormerForMultipleChoice"),_Oo=o(" (RoFormer model)"),bOo=l(),Nv=a("li"),mpe=a("strong"),vOo=o("squeezebert"),FOo=o(" \u2014 "),WV=a("a"),TOo=o("SqueezeBertForMultipleChoice"),MOo=o(" (SqueezeBERT model)"),EOo=l(),qv=a("li"),gpe=a("strong"),COo=o("xlm"),wOo=o(" \u2014 "),QV=a("a"),AOo=o("XLMForMultipleChoice"),LOo=o(" (XLM model)"),yOo=l(),jv=a("li"),hpe=a("strong"),xOo=o("xlm-roberta"),$Oo=o(" \u2014 "),HV=a("a"),kOo=o("XLMRobertaForMultipleChoice"),SOo=o(" (XLM-RoBERTa model)"),ROo=l(),Dv=a("li"),ppe=a("strong"),POo=o("xlm-roberta-xl"),BOo=o(" \u2014 "),UV=a("a"),IOo=o("XLMRobertaXLForMultipleChoice"),NOo=o(" (XLM-RoBERTa-XL model)"),qOo=l(),Gv=a("li"),upe=a("strong"),jOo=o("xlnet"),DOo=o(" \u2014 "),JV=a("a"),GOo=o("XLNetForMultipleChoice"),OOo=o(" (XLNet model)"),VOo=l(),Ov=a("li"),_pe=a("strong"),XOo=o("yoso"),zOo=o(" \u2014 "),YV=a("a"),WOo=o("YosoForMultipleChoice"),QOo=o(" (YOSO model)"),HOo=l(),Vv=a("p"),UOo=o("The model is set in evaluation mode by default using "),bpe=a("code"),JOo=o("model.eval()"),YOo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vpe=a("code"),KOo=o("model.train()"),ZOo=l(),F(Xv.$$.fragment),_Ge=l(),od=a("h2"),zv=a("a"),Fpe=a("span"),F(CL.$$.fragment),eVo=l(),Tpe=a("span"),oVo=o("AutoModelForNextSentencePrediction"),bGe=l(),Io=a("div"),F(wL.$$.fragment),rVo=l(),rd=a("p"),tVo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),KV=a("a"),aVo=o("from_pretrained()"),nVo=o(" class method or the "),ZV=a("a"),sVo=o("from_config()"),lVo=o(` class
method.`),iVo=l(),AL=a("p"),dVo=o("This class cannot be instantiated directly using "),Mpe=a("code"),cVo=o("__init__()"),fVo=o(" (throws an error)."),mVo=l(),mt=a("div"),F(LL.$$.fragment),gVo=l(),Epe=a("p"),hVo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),pVo=l(),td=a("p"),uVo=o(`Note:
Loading a model from its configuration file does `),Cpe=a("strong"),_Vo=o("not"),bVo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eX=a("a"),vVo=o("from_pretrained()"),FVo=o(" to load the model weights."),TVo=l(),F(Wv.$$.fragment),MVo=l(),to=a("div"),F(yL.$$.fragment),EVo=l(),wpe=a("p"),CVo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),wVo=l(),ja=a("p"),AVo=o("The model class to instantiate is selected based on the "),Ape=a("code"),LVo=o("model_type"),yVo=o(` property of the config object (either
passed as an argument or loaded from `),Lpe=a("code"),xVo=o("pretrained_model_name_or_path"),$Vo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ype=a("code"),kVo=o("pretrained_model_name_or_path"),SVo=o(":"),RVo=l(),Zr=a("ul"),Qv=a("li"),xpe=a("strong"),PVo=o("bert"),BVo=o(" \u2014 "),oX=a("a"),IVo=o("BertForNextSentencePrediction"),NVo=o(" (BERT model)"),qVo=l(),Hv=a("li"),$pe=a("strong"),jVo=o("fnet"),DVo=o(" \u2014 "),rX=a("a"),GVo=o("FNetForNextSentencePrediction"),OVo=o(" (FNet model)"),VVo=l(),Uv=a("li"),kpe=a("strong"),XVo=o("megatron-bert"),zVo=o(" \u2014 "),tX=a("a"),WVo=o("MegatronBertForNextSentencePrediction"),QVo=o(" (Megatron-BERT model)"),HVo=l(),Jv=a("li"),Spe=a("strong"),UVo=o("mobilebert"),JVo=o(" \u2014 "),aX=a("a"),YVo=o("MobileBertForNextSentencePrediction"),KVo=o(" (MobileBERT model)"),ZVo=l(),Yv=a("li"),Rpe=a("strong"),eXo=o("qdqbert"),oXo=o(" \u2014 "),nX=a("a"),rXo=o("QDQBertForNextSentencePrediction"),tXo=o(" (QDQBert model)"),aXo=l(),Kv=a("p"),nXo=o("The model is set in evaluation mode by default using "),Ppe=a("code"),sXo=o("model.eval()"),lXo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bpe=a("code"),iXo=o("model.train()"),dXo=l(),F(Zv.$$.fragment),vGe=l(),ad=a("h2"),eF=a("a"),Ipe=a("span"),F(xL.$$.fragment),cXo=l(),Npe=a("span"),fXo=o("AutoModelForTokenClassification"),FGe=l(),No=a("div"),F($L.$$.fragment),mXo=l(),nd=a("p"),gXo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),sX=a("a"),hXo=o("from_pretrained()"),pXo=o(" class method or the "),lX=a("a"),uXo=o("from_config()"),_Xo=o(` class
method.`),bXo=l(),kL=a("p"),vXo=o("This class cannot be instantiated directly using "),qpe=a("code"),FXo=o("__init__()"),TXo=o(" (throws an error)."),MXo=l(),gt=a("div"),F(SL.$$.fragment),EXo=l(),jpe=a("p"),CXo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),wXo=l(),sd=a("p"),AXo=o(`Note:
Loading a model from its configuration file does `),Dpe=a("strong"),LXo=o("not"),yXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iX=a("a"),xXo=o("from_pretrained()"),$Xo=o(" to load the model weights."),kXo=l(),F(oF.$$.fragment),SXo=l(),ao=a("div"),F(RL.$$.fragment),RXo=l(),Gpe=a("p"),PXo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),BXo=l(),Da=a("p"),IXo=o("The model class to instantiate is selected based on the "),Ope=a("code"),NXo=o("model_type"),qXo=o(` property of the config object (either
passed as an argument or loaded from `),Vpe=a("code"),jXo=o("pretrained_model_name_or_path"),DXo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xpe=a("code"),GXo=o("pretrained_model_name_or_path"),OXo=o(":"),VXo=l(),U=a("ul"),rF=a("li"),zpe=a("strong"),XXo=o("albert"),zXo=o(" \u2014 "),dX=a("a"),WXo=o("AlbertForTokenClassification"),QXo=o(" (ALBERT model)"),HXo=l(),tF=a("li"),Wpe=a("strong"),UXo=o("bert"),JXo=o(" \u2014 "),cX=a("a"),YXo=o("BertForTokenClassification"),KXo=o(" (BERT model)"),ZXo=l(),aF=a("li"),Qpe=a("strong"),ezo=o("big_bird"),ozo=o(" \u2014 "),fX=a("a"),rzo=o("BigBirdForTokenClassification"),tzo=o(" (BigBird model)"),azo=l(),nF=a("li"),Hpe=a("strong"),nzo=o("camembert"),szo=o(" \u2014 "),mX=a("a"),lzo=o("CamembertForTokenClassification"),izo=o(" (CamemBERT model)"),dzo=l(),sF=a("li"),Upe=a("strong"),czo=o("canine"),fzo=o(" \u2014 "),gX=a("a"),mzo=o("CanineForTokenClassification"),gzo=o(" (CANINE model)"),hzo=l(),lF=a("li"),Jpe=a("strong"),pzo=o("convbert"),uzo=o(" \u2014 "),hX=a("a"),_zo=o("ConvBertForTokenClassification"),bzo=o(" (ConvBERT model)"),vzo=l(),iF=a("li"),Ype=a("strong"),Fzo=o("data2vec-text"),Tzo=o(" \u2014 "),pX=a("a"),Mzo=o("Data2VecTextForTokenClassification"),Ezo=o(" (Data2VecText model)"),Czo=l(),dF=a("li"),Kpe=a("strong"),wzo=o("deberta"),Azo=o(" \u2014 "),uX=a("a"),Lzo=o("DebertaForTokenClassification"),yzo=o(" (DeBERTa model)"),xzo=l(),cF=a("li"),Zpe=a("strong"),$zo=o("deberta-v2"),kzo=o(" \u2014 "),_X=a("a"),Szo=o("DebertaV2ForTokenClassification"),Rzo=o(" (DeBERTa-v2 model)"),Pzo=l(),fF=a("li"),eue=a("strong"),Bzo=o("distilbert"),Izo=o(" \u2014 "),bX=a("a"),Nzo=o("DistilBertForTokenClassification"),qzo=o(" (DistilBERT model)"),jzo=l(),mF=a("li"),oue=a("strong"),Dzo=o("electra"),Gzo=o(" \u2014 "),vX=a("a"),Ozo=o("ElectraForTokenClassification"),Vzo=o(" (ELECTRA model)"),Xzo=l(),gF=a("li"),rue=a("strong"),zzo=o("flaubert"),Wzo=o(" \u2014 "),FX=a("a"),Qzo=o("FlaubertForTokenClassification"),Hzo=o(" (FlauBERT model)"),Uzo=l(),hF=a("li"),tue=a("strong"),Jzo=o("fnet"),Yzo=o(" \u2014 "),TX=a("a"),Kzo=o("FNetForTokenClassification"),Zzo=o(" (FNet model)"),eWo=l(),pF=a("li"),aue=a("strong"),oWo=o("funnel"),rWo=o(" \u2014 "),MX=a("a"),tWo=o("FunnelForTokenClassification"),aWo=o(" (Funnel Transformer model)"),nWo=l(),uF=a("li"),nue=a("strong"),sWo=o("gpt2"),lWo=o(" \u2014 "),EX=a("a"),iWo=o("GPT2ForTokenClassification"),dWo=o(" (OpenAI GPT-2 model)"),cWo=l(),_F=a("li"),sue=a("strong"),fWo=o("ibert"),mWo=o(" \u2014 "),CX=a("a"),gWo=o("IBertForTokenClassification"),hWo=o(" (I-BERT model)"),pWo=l(),bF=a("li"),lue=a("strong"),uWo=o("layoutlm"),_Wo=o(" \u2014 "),wX=a("a"),bWo=o("LayoutLMForTokenClassification"),vWo=o(" (LayoutLM model)"),FWo=l(),vF=a("li"),iue=a("strong"),TWo=o("layoutlmv2"),MWo=o(" \u2014 "),AX=a("a"),EWo=o("LayoutLMv2ForTokenClassification"),CWo=o(" (LayoutLMv2 model)"),wWo=l(),FF=a("li"),due=a("strong"),AWo=o("layoutlmv3"),LWo=o(" \u2014 "),LX=a("a"),yWo=o("LayoutLMv3ForTokenClassification"),xWo=o(" (LayoutLMv3 model)"),$Wo=l(),TF=a("li"),cue=a("strong"),kWo=o("longformer"),SWo=o(" \u2014 "),yX=a("a"),RWo=o("LongformerForTokenClassification"),PWo=o(" (Longformer model)"),BWo=l(),MF=a("li"),fue=a("strong"),IWo=o("megatron-bert"),NWo=o(" \u2014 "),xX=a("a"),qWo=o("MegatronBertForTokenClassification"),jWo=o(" (Megatron-BERT model)"),DWo=l(),EF=a("li"),mue=a("strong"),GWo=o("mobilebert"),OWo=o(" \u2014 "),$X=a("a"),VWo=o("MobileBertForTokenClassification"),XWo=o(" (MobileBERT model)"),zWo=l(),CF=a("li"),gue=a("strong"),WWo=o("mpnet"),QWo=o(" \u2014 "),kX=a("a"),HWo=o("MPNetForTokenClassification"),UWo=o(" (MPNet model)"),JWo=l(),wF=a("li"),hue=a("strong"),YWo=o("nystromformer"),KWo=o(" \u2014 "),SX=a("a"),ZWo=o("NystromformerForTokenClassification"),eQo=o(" (Nystr\xF6mformer model)"),oQo=l(),AF=a("li"),pue=a("strong"),rQo=o("qdqbert"),tQo=o(" \u2014 "),RX=a("a"),aQo=o("QDQBertForTokenClassification"),nQo=o(" (QDQBert model)"),sQo=l(),LF=a("li"),uue=a("strong"),lQo=o("rembert"),iQo=o(" \u2014 "),PX=a("a"),dQo=o("RemBertForTokenClassification"),cQo=o(" (RemBERT model)"),fQo=l(),yF=a("li"),_ue=a("strong"),mQo=o("roberta"),gQo=o(" \u2014 "),BX=a("a"),hQo=o("RobertaForTokenClassification"),pQo=o(" (RoBERTa model)"),uQo=l(),xF=a("li"),bue=a("strong"),_Qo=o("roformer"),bQo=o(" \u2014 "),IX=a("a"),vQo=o("RoFormerForTokenClassification"),FQo=o(" (RoFormer model)"),TQo=l(),$F=a("li"),vue=a("strong"),MQo=o("squeezebert"),EQo=o(" \u2014 "),NX=a("a"),CQo=o("SqueezeBertForTokenClassification"),wQo=o(" (SqueezeBERT model)"),AQo=l(),kF=a("li"),Fue=a("strong"),LQo=o("xlm"),yQo=o(" \u2014 "),qX=a("a"),xQo=o("XLMForTokenClassification"),$Qo=o(" (XLM model)"),kQo=l(),SF=a("li"),Tue=a("strong"),SQo=o("xlm-roberta"),RQo=o(" \u2014 "),jX=a("a"),PQo=o("XLMRobertaForTokenClassification"),BQo=o(" (XLM-RoBERTa model)"),IQo=l(),RF=a("li"),Mue=a("strong"),NQo=o("xlm-roberta-xl"),qQo=o(" \u2014 "),DX=a("a"),jQo=o("XLMRobertaXLForTokenClassification"),DQo=o(" (XLM-RoBERTa-XL model)"),GQo=l(),PF=a("li"),Eue=a("strong"),OQo=o("xlnet"),VQo=o(" \u2014 "),GX=a("a"),XQo=o("XLNetForTokenClassification"),zQo=o(" (XLNet model)"),WQo=l(),BF=a("li"),Cue=a("strong"),QQo=o("yoso"),HQo=o(" \u2014 "),OX=a("a"),UQo=o("YosoForTokenClassification"),JQo=o(" (YOSO model)"),YQo=l(),IF=a("p"),KQo=o("The model is set in evaluation mode by default using "),wue=a("code"),ZQo=o("model.eval()"),eHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Aue=a("code"),oHo=o("model.train()"),rHo=l(),F(NF.$$.fragment),TGe=l(),ld=a("h2"),qF=a("a"),Lue=a("span"),F(PL.$$.fragment),tHo=l(),yue=a("span"),aHo=o("AutoModelForQuestionAnswering"),MGe=l(),qo=a("div"),F(BL.$$.fragment),nHo=l(),id=a("p"),sHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),VX=a("a"),lHo=o("from_pretrained()"),iHo=o(" class method or the "),XX=a("a"),dHo=o("from_config()"),cHo=o(` class
method.`),fHo=l(),IL=a("p"),mHo=o("This class cannot be instantiated directly using "),xue=a("code"),gHo=o("__init__()"),hHo=o(" (throws an error)."),pHo=l(),ht=a("div"),F(NL.$$.fragment),uHo=l(),$ue=a("p"),_Ho=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),bHo=l(),dd=a("p"),vHo=o(`Note:
Loading a model from its configuration file does `),kue=a("strong"),FHo=o("not"),THo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zX=a("a"),MHo=o("from_pretrained()"),EHo=o(" to load the model weights."),CHo=l(),F(jF.$$.fragment),wHo=l(),no=a("div"),F(qL.$$.fragment),AHo=l(),Sue=a("p"),LHo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),yHo=l(),Ga=a("p"),xHo=o("The model class to instantiate is selected based on the "),Rue=a("code"),$Ho=o("model_type"),kHo=o(` property of the config object (either
passed as an argument or loaded from `),Pue=a("code"),SHo=o("pretrained_model_name_or_path"),RHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bue=a("code"),PHo=o("pretrained_model_name_or_path"),BHo=o(":"),IHo=l(),V=a("ul"),DF=a("li"),Iue=a("strong"),NHo=o("albert"),qHo=o(" \u2014 "),WX=a("a"),jHo=o("AlbertForQuestionAnswering"),DHo=o(" (ALBERT model)"),GHo=l(),GF=a("li"),Nue=a("strong"),OHo=o("bart"),VHo=o(" \u2014 "),QX=a("a"),XHo=o("BartForQuestionAnswering"),zHo=o(" (BART model)"),WHo=l(),OF=a("li"),que=a("strong"),QHo=o("bert"),HHo=o(" \u2014 "),HX=a("a"),UHo=o("BertForQuestionAnswering"),JHo=o(" (BERT model)"),YHo=l(),VF=a("li"),jue=a("strong"),KHo=o("big_bird"),ZHo=o(" \u2014 "),UX=a("a"),eUo=o("BigBirdForQuestionAnswering"),oUo=o(" (BigBird model)"),rUo=l(),XF=a("li"),Due=a("strong"),tUo=o("bigbird_pegasus"),aUo=o(" \u2014 "),JX=a("a"),nUo=o("BigBirdPegasusForQuestionAnswering"),sUo=o(" (BigBird-Pegasus model)"),lUo=l(),zF=a("li"),Gue=a("strong"),iUo=o("camembert"),dUo=o(" \u2014 "),YX=a("a"),cUo=o("CamembertForQuestionAnswering"),fUo=o(" (CamemBERT model)"),mUo=l(),WF=a("li"),Oue=a("strong"),gUo=o("canine"),hUo=o(" \u2014 "),KX=a("a"),pUo=o("CanineForQuestionAnswering"),uUo=o(" (CANINE model)"),_Uo=l(),QF=a("li"),Vue=a("strong"),bUo=o("convbert"),vUo=o(" \u2014 "),ZX=a("a"),FUo=o("ConvBertForQuestionAnswering"),TUo=o(" (ConvBERT model)"),MUo=l(),HF=a("li"),Xue=a("strong"),EUo=o("data2vec-text"),CUo=o(" \u2014 "),ez=a("a"),wUo=o("Data2VecTextForQuestionAnswering"),AUo=o(" (Data2VecText model)"),LUo=l(),UF=a("li"),zue=a("strong"),yUo=o("deberta"),xUo=o(" \u2014 "),oz=a("a"),$Uo=o("DebertaForQuestionAnswering"),kUo=o(" (DeBERTa model)"),SUo=l(),JF=a("li"),Wue=a("strong"),RUo=o("deberta-v2"),PUo=o(" \u2014 "),rz=a("a"),BUo=o("DebertaV2ForQuestionAnswering"),IUo=o(" (DeBERTa-v2 model)"),NUo=l(),YF=a("li"),Que=a("strong"),qUo=o("distilbert"),jUo=o(" \u2014 "),tz=a("a"),DUo=o("DistilBertForQuestionAnswering"),GUo=o(" (DistilBERT model)"),OUo=l(),KF=a("li"),Hue=a("strong"),VUo=o("electra"),XUo=o(" \u2014 "),az=a("a"),zUo=o("ElectraForQuestionAnswering"),WUo=o(" (ELECTRA model)"),QUo=l(),ZF=a("li"),Uue=a("strong"),HUo=o("flaubert"),UUo=o(" \u2014 "),nz=a("a"),JUo=o("FlaubertForQuestionAnsweringSimple"),YUo=o(" (FlauBERT model)"),KUo=l(),e6=a("li"),Jue=a("strong"),ZUo=o("fnet"),eJo=o(" \u2014 "),sz=a("a"),oJo=o("FNetForQuestionAnswering"),rJo=o(" (FNet model)"),tJo=l(),o6=a("li"),Yue=a("strong"),aJo=o("funnel"),nJo=o(" \u2014 "),lz=a("a"),sJo=o("FunnelForQuestionAnswering"),lJo=o(" (Funnel Transformer model)"),iJo=l(),r6=a("li"),Kue=a("strong"),dJo=o("gptj"),cJo=o(" \u2014 "),iz=a("a"),fJo=o("GPTJForQuestionAnswering"),mJo=o(" (GPT-J model)"),gJo=l(),t6=a("li"),Zue=a("strong"),hJo=o("ibert"),pJo=o(" \u2014 "),dz=a("a"),uJo=o("IBertForQuestionAnswering"),_Jo=o(" (I-BERT model)"),bJo=l(),a6=a("li"),e_e=a("strong"),vJo=o("layoutlmv2"),FJo=o(" \u2014 "),cz=a("a"),TJo=o("LayoutLMv2ForQuestionAnswering"),MJo=o(" (LayoutLMv2 model)"),EJo=l(),n6=a("li"),o_e=a("strong"),CJo=o("layoutlmv3"),wJo=o(" \u2014 "),fz=a("a"),AJo=o("LayoutLMv3ForQuestionAnswering"),LJo=o(" (LayoutLMv3 model)"),yJo=l(),s6=a("li"),r_e=a("strong"),xJo=o("led"),$Jo=o(" \u2014 "),mz=a("a"),kJo=o("LEDForQuestionAnswering"),SJo=o(" (LED model)"),RJo=l(),l6=a("li"),t_e=a("strong"),PJo=o("longformer"),BJo=o(" \u2014 "),gz=a("a"),IJo=o("LongformerForQuestionAnswering"),NJo=o(" (Longformer model)"),qJo=l(),i6=a("li"),a_e=a("strong"),jJo=o("lxmert"),DJo=o(" \u2014 "),hz=a("a"),GJo=o("LxmertForQuestionAnswering"),OJo=o(" (LXMERT model)"),VJo=l(),d6=a("li"),n_e=a("strong"),XJo=o("mbart"),zJo=o(" \u2014 "),pz=a("a"),WJo=o("MBartForQuestionAnswering"),QJo=o(" (mBART model)"),HJo=l(),c6=a("li"),s_e=a("strong"),UJo=o("megatron-bert"),JJo=o(" \u2014 "),uz=a("a"),YJo=o("MegatronBertForQuestionAnswering"),KJo=o(" (Megatron-BERT model)"),ZJo=l(),f6=a("li"),l_e=a("strong"),eYo=o("mobilebert"),oYo=o(" \u2014 "),_z=a("a"),rYo=o("MobileBertForQuestionAnswering"),tYo=o(" (MobileBERT model)"),aYo=l(),m6=a("li"),i_e=a("strong"),nYo=o("mpnet"),sYo=o(" \u2014 "),bz=a("a"),lYo=o("MPNetForQuestionAnswering"),iYo=o(" (MPNet model)"),dYo=l(),g6=a("li"),d_e=a("strong"),cYo=o("nystromformer"),fYo=o(" \u2014 "),vz=a("a"),mYo=o("NystromformerForQuestionAnswering"),gYo=o(" (Nystr\xF6mformer model)"),hYo=l(),h6=a("li"),c_e=a("strong"),pYo=o("qdqbert"),uYo=o(" \u2014 "),Fz=a("a"),_Yo=o("QDQBertForQuestionAnswering"),bYo=o(" (QDQBert model)"),vYo=l(),p6=a("li"),f_e=a("strong"),FYo=o("reformer"),TYo=o(" \u2014 "),Tz=a("a"),MYo=o("ReformerForQuestionAnswering"),EYo=o(" (Reformer model)"),CYo=l(),u6=a("li"),m_e=a("strong"),wYo=o("rembert"),AYo=o(" \u2014 "),Mz=a("a"),LYo=o("RemBertForQuestionAnswering"),yYo=o(" (RemBERT model)"),xYo=l(),_6=a("li"),g_e=a("strong"),$Yo=o("roberta"),kYo=o(" \u2014 "),Ez=a("a"),SYo=o("RobertaForQuestionAnswering"),RYo=o(" (RoBERTa model)"),PYo=l(),b6=a("li"),h_e=a("strong"),BYo=o("roformer"),IYo=o(" \u2014 "),Cz=a("a"),NYo=o("RoFormerForQuestionAnswering"),qYo=o(" (RoFormer model)"),jYo=l(),v6=a("li"),p_e=a("strong"),DYo=o("splinter"),GYo=o(" \u2014 "),wz=a("a"),OYo=o("SplinterForQuestionAnswering"),VYo=o(" (Splinter model)"),XYo=l(),F6=a("li"),u_e=a("strong"),zYo=o("squeezebert"),WYo=o(" \u2014 "),Az=a("a"),QYo=o("SqueezeBertForQuestionAnswering"),HYo=o(" (SqueezeBERT model)"),UYo=l(),T6=a("li"),__e=a("strong"),JYo=o("xlm"),YYo=o(" \u2014 "),Lz=a("a"),KYo=o("XLMForQuestionAnsweringSimple"),ZYo=o(" (XLM model)"),eKo=l(),M6=a("li"),b_e=a("strong"),oKo=o("xlm-roberta"),rKo=o(" \u2014 "),yz=a("a"),tKo=o("XLMRobertaForQuestionAnswering"),aKo=o(" (XLM-RoBERTa model)"),nKo=l(),E6=a("li"),v_e=a("strong"),sKo=o("xlm-roberta-xl"),lKo=o(" \u2014 "),xz=a("a"),iKo=o("XLMRobertaXLForQuestionAnswering"),dKo=o(" (XLM-RoBERTa-XL model)"),cKo=l(),C6=a("li"),F_e=a("strong"),fKo=o("xlnet"),mKo=o(" \u2014 "),$z=a("a"),gKo=o("XLNetForQuestionAnsweringSimple"),hKo=o(" (XLNet model)"),pKo=l(),w6=a("li"),T_e=a("strong"),uKo=o("yoso"),_Ko=o(" \u2014 "),kz=a("a"),bKo=o("YosoForQuestionAnswering"),vKo=o(" (YOSO model)"),FKo=l(),A6=a("p"),TKo=o("The model is set in evaluation mode by default using "),M_e=a("code"),MKo=o("model.eval()"),EKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),E_e=a("code"),CKo=o("model.train()"),wKo=l(),F(L6.$$.fragment),EGe=l(),cd=a("h2"),y6=a("a"),C_e=a("span"),F(jL.$$.fragment),AKo=l(),w_e=a("span"),LKo=o("AutoModelForTableQuestionAnswering"),CGe=l(),jo=a("div"),F(DL.$$.fragment),yKo=l(),fd=a("p"),xKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Sz=a("a"),$Ko=o("from_pretrained()"),kKo=o(" class method or the "),Rz=a("a"),SKo=o("from_config()"),RKo=o(` class
method.`),PKo=l(),GL=a("p"),BKo=o("This class cannot be instantiated directly using "),A_e=a("code"),IKo=o("__init__()"),NKo=o(" (throws an error)."),qKo=l(),pt=a("div"),F(OL.$$.fragment),jKo=l(),L_e=a("p"),DKo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),GKo=l(),md=a("p"),OKo=o(`Note:
Loading a model from its configuration file does `),y_e=a("strong"),VKo=o("not"),XKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Pz=a("a"),zKo=o("from_pretrained()"),WKo=o(" to load the model weights."),QKo=l(),F(x6.$$.fragment),HKo=l(),so=a("div"),F(VL.$$.fragment),UKo=l(),x_e=a("p"),JKo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),YKo=l(),Oa=a("p"),KKo=o("The model class to instantiate is selected based on the "),$_e=a("code"),ZKo=o("model_type"),eZo=o(` property of the config object (either
passed as an argument or loaded from `),k_e=a("code"),oZo=o("pretrained_model_name_or_path"),rZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S_e=a("code"),tZo=o("pretrained_model_name_or_path"),aZo=o(":"),nZo=l(),R_e=a("ul"),$6=a("li"),P_e=a("strong"),sZo=o("tapas"),lZo=o(" \u2014 "),Bz=a("a"),iZo=o("TapasForQuestionAnswering"),dZo=o(" (TAPAS model)"),cZo=l(),k6=a("p"),fZo=o("The model is set in evaluation mode by default using "),B_e=a("code"),mZo=o("model.eval()"),gZo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),I_e=a("code"),hZo=o("model.train()"),pZo=l(),F(S6.$$.fragment),wGe=l(),gd=a("h2"),R6=a("a"),N_e=a("span"),F(XL.$$.fragment),uZo=l(),q_e=a("span"),_Zo=o("AutoModelForImageClassification"),AGe=l(),Do=a("div"),F(zL.$$.fragment),bZo=l(),hd=a("p"),vZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Iz=a("a"),FZo=o("from_pretrained()"),TZo=o(" class method or the "),Nz=a("a"),MZo=o("from_config()"),EZo=o(` class
method.`),CZo=l(),WL=a("p"),wZo=o("This class cannot be instantiated directly using "),j_e=a("code"),AZo=o("__init__()"),LZo=o(" (throws an error)."),yZo=l(),ut=a("div"),F(QL.$$.fragment),xZo=l(),D_e=a("p"),$Zo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),kZo=l(),pd=a("p"),SZo=o(`Note:
Loading a model from its configuration file does `),G_e=a("strong"),RZo=o("not"),PZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qz=a("a"),BZo=o("from_pretrained()"),IZo=o(" to load the model weights."),NZo=l(),F(P6.$$.fragment),qZo=l(),lo=a("div"),F(HL.$$.fragment),jZo=l(),O_e=a("p"),DZo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),GZo=l(),Va=a("p"),OZo=o("The model class to instantiate is selected based on the "),V_e=a("code"),VZo=o("model_type"),XZo=o(` property of the config object (either
passed as an argument or loaded from `),X_e=a("code"),zZo=o("pretrained_model_name_or_path"),WZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z_e=a("code"),QZo=o("pretrained_model_name_or_path"),HZo=o(":"),UZo=l(),Fe=a("ul"),B6=a("li"),W_e=a("strong"),JZo=o("beit"),YZo=o(" \u2014 "),jz=a("a"),KZo=o("BeitForImageClassification"),ZZo=o(" (BEiT model)"),eer=l(),I6=a("li"),Q_e=a("strong"),oer=o("convnext"),rer=o(" \u2014 "),Dz=a("a"),ter=o("ConvNextForImageClassification"),aer=o(" (ConvNeXT model)"),ner=l(),N6=a("li"),H_e=a("strong"),ser=o("cvt"),ler=o(" \u2014 "),Gz=a("a"),ier=o("CvtForImageClassification"),der=o(" (CvT model)"),cer=l(),q6=a("li"),U_e=a("strong"),fer=o("data2vec-vision"),mer=o(" \u2014 "),Oz=a("a"),ger=o("Data2VecVisionForImageClassification"),her=o(" (Data2VecVision model)"),per=l(),Os=a("li"),J_e=a("strong"),uer=o("deit"),_er=o(" \u2014 "),Vz=a("a"),ber=o("DeiTForImageClassification"),ver=o(" or "),Xz=a("a"),Fer=o("DeiTForImageClassificationWithTeacher"),Ter=o(" (DeiT model)"),Mer=l(),j6=a("li"),Y_e=a("strong"),Eer=o("imagegpt"),Cer=o(" \u2014 "),zz=a("a"),wer=o("ImageGPTForImageClassification"),Aer=o(" (ImageGPT model)"),Ler=l(),Vs=a("li"),K_e=a("strong"),yer=o("levit"),xer=o(" \u2014 "),Wz=a("a"),$er=o("LevitForImageClassification"),ker=o(" or "),Qz=a("a"),Ser=o("LevitForImageClassificationWithTeacher"),Rer=o(" (LeViT model)"),Per=l(),_t=a("li"),Z_e=a("strong"),Ber=o("perceiver"),Ier=o(" \u2014 "),Hz=a("a"),Ner=o("PerceiverForImageClassificationLearned"),qer=o(" or "),Uz=a("a"),jer=o("PerceiverForImageClassificationFourier"),Der=o(" or "),Jz=a("a"),Ger=o("PerceiverForImageClassificationConvProcessing"),Oer=o(" (Perceiver model)"),Ver=l(),D6=a("li"),e2e=a("strong"),Xer=o("poolformer"),zer=o(" \u2014 "),Yz=a("a"),Wer=o("PoolFormerForImageClassification"),Qer=o(" (PoolFormer model)"),Her=l(),G6=a("li"),o2e=a("strong"),Uer=o("regnet"),Jer=o(" \u2014 "),Kz=a("a"),Yer=o("RegNetForImageClassification"),Ker=o(" (RegNet model)"),Zer=l(),O6=a("li"),r2e=a("strong"),eor=o("resnet"),oor=o(" \u2014 "),Zz=a("a"),ror=o("ResNetForImageClassification"),tor=o(" (ResNet model)"),aor=l(),V6=a("li"),t2e=a("strong"),nor=o("segformer"),sor=o(" \u2014 "),eW=a("a"),lor=o("SegformerForImageClassification"),ior=o(" (SegFormer model)"),dor=l(),X6=a("li"),a2e=a("strong"),cor=o("swin"),mor=o(" \u2014 "),oW=a("a"),gor=o("SwinForImageClassification"),hor=o(" (Swin Transformer model)"),por=l(),z6=a("li"),n2e=a("strong"),uor=o("van"),_or=o(" \u2014 "),rW=a("a"),bor=o("VanForImageClassification"),vor=o(" (VAN model)"),For=l(),W6=a("li"),s2e=a("strong"),Tor=o("vit"),Mor=o(" \u2014 "),tW=a("a"),Eor=o("ViTForImageClassification"),Cor=o(" (ViT model)"),wor=l(),Q6=a("p"),Aor=o("The model is set in evaluation mode by default using "),l2e=a("code"),Lor=o("model.eval()"),yor=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),i2e=a("code"),xor=o("model.train()"),$or=l(),F(H6.$$.fragment),LGe=l(),ud=a("h2"),U6=a("a"),d2e=a("span"),F(UL.$$.fragment),kor=l(),c2e=a("span"),Sor=o("AutoModelForVision2Seq"),yGe=l(),Go=a("div"),F(JL.$$.fragment),Ror=l(),_d=a("p"),Por=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),aW=a("a"),Bor=o("from_pretrained()"),Ior=o(" class method or the "),nW=a("a"),Nor=o("from_config()"),qor=o(` class
method.`),jor=l(),YL=a("p"),Dor=o("This class cannot be instantiated directly using "),f2e=a("code"),Gor=o("__init__()"),Oor=o(" (throws an error)."),Vor=l(),bt=a("div"),F(KL.$$.fragment),Xor=l(),m2e=a("p"),zor=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Wor=l(),bd=a("p"),Qor=o(`Note:
Loading a model from its configuration file does `),g2e=a("strong"),Hor=o("not"),Uor=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sW=a("a"),Jor=o("from_pretrained()"),Yor=o(" to load the model weights."),Kor=l(),F(J6.$$.fragment),Zor=l(),io=a("div"),F(ZL.$$.fragment),err=l(),h2e=a("p"),orr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),rrr=l(),Xa=a("p"),trr=o("The model class to instantiate is selected based on the "),p2e=a("code"),arr=o("model_type"),nrr=o(` property of the config object (either
passed as an argument or loaded from `),u2e=a("code"),srr=o("pretrained_model_name_or_path"),lrr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_2e=a("code"),irr=o("pretrained_model_name_or_path"),drr=o(":"),crr=l(),b2e=a("ul"),Y6=a("li"),v2e=a("strong"),frr=o("vision-encoder-decoder"),mrr=o(" \u2014 "),lW=a("a"),grr=o("VisionEncoderDecoderModel"),hrr=o(" (Vision Encoder decoder model)"),prr=l(),K6=a("p"),urr=o("The model is set in evaluation mode by default using "),F2e=a("code"),_rr=o("model.eval()"),brr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),T2e=a("code"),vrr=o("model.train()"),Frr=l(),F(Z6.$$.fragment),xGe=l(),vd=a("h2"),eT=a("a"),M2e=a("span"),F(ey.$$.fragment),Trr=l(),E2e=a("span"),Mrr=o("AutoModelForVisualQuestionAnswering"),$Ge=l(),Oo=a("div"),F(oy.$$.fragment),Err=l(),Fd=a("p"),Crr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),iW=a("a"),wrr=o("from_pretrained()"),Arr=o(" class method or the "),dW=a("a"),Lrr=o("from_config()"),yrr=o(` class
method.`),xrr=l(),ry=a("p"),$rr=o("This class cannot be instantiated directly using "),C2e=a("code"),krr=o("__init__()"),Srr=o(" (throws an error)."),Rrr=l(),vt=a("div"),F(ty.$$.fragment),Prr=l(),w2e=a("p"),Brr=o("Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),Irr=l(),Td=a("p"),Nrr=o(`Note:
Loading a model from its configuration file does `),A2e=a("strong"),qrr=o("not"),jrr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cW=a("a"),Drr=o("from_pretrained()"),Grr=o(" to load the model weights."),Orr=l(),F(oT.$$.fragment),Vrr=l(),co=a("div"),F(ay.$$.fragment),Xrr=l(),L2e=a("p"),zrr=o("Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),Wrr=l(),za=a("p"),Qrr=o("The model class to instantiate is selected based on the "),y2e=a("code"),Hrr=o("model_type"),Urr=o(` property of the config object (either
passed as an argument or loaded from `),x2e=a("code"),Jrr=o("pretrained_model_name_or_path"),Yrr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$2e=a("code"),Krr=o("pretrained_model_name_or_path"),Zrr=o(":"),etr=l(),k2e=a("ul"),rT=a("li"),S2e=a("strong"),otr=o("vilt"),rtr=o(" \u2014 "),fW=a("a"),ttr=o("ViltForQuestionAnswering"),atr=o(" (ViLT model)"),ntr=l(),tT=a("p"),str=o("The model is set in evaluation mode by default using "),R2e=a("code"),ltr=o("model.eval()"),itr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),P2e=a("code"),dtr=o("model.train()"),ctr=l(),F(aT.$$.fragment),kGe=l(),Md=a("h2"),nT=a("a"),B2e=a("span"),F(ny.$$.fragment),ftr=l(),I2e=a("span"),mtr=o("AutoModelForAudioClassification"),SGe=l(),Vo=a("div"),F(sy.$$.fragment),gtr=l(),Ed=a("p"),htr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),mW=a("a"),ptr=o("from_pretrained()"),utr=o(" class method or the "),gW=a("a"),_tr=o("from_config()"),btr=o(` class
method.`),vtr=l(),ly=a("p"),Ftr=o("This class cannot be instantiated directly using "),N2e=a("code"),Ttr=o("__init__()"),Mtr=o(" (throws an error)."),Etr=l(),Ft=a("div"),F(iy.$$.fragment),Ctr=l(),q2e=a("p"),wtr=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Atr=l(),Cd=a("p"),Ltr=o(`Note:
Loading a model from its configuration file does `),j2e=a("strong"),ytr=o("not"),xtr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hW=a("a"),$tr=o("from_pretrained()"),ktr=o(" to load the model weights."),Str=l(),F(sT.$$.fragment),Rtr=l(),fo=a("div"),F(dy.$$.fragment),Ptr=l(),D2e=a("p"),Btr=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),Itr=l(),Wa=a("p"),Ntr=o("The model class to instantiate is selected based on the "),G2e=a("code"),qtr=o("model_type"),jtr=o(` property of the config object (either
passed as an argument or loaded from `),O2e=a("code"),Dtr=o("pretrained_model_name_or_path"),Gtr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V2e=a("code"),Otr=o("pretrained_model_name_or_path"),Vtr=o(":"),Xtr=l(),Pe=a("ul"),lT=a("li"),X2e=a("strong"),ztr=o("data2vec-audio"),Wtr=o(" \u2014 "),pW=a("a"),Qtr=o("Data2VecAudioForSequenceClassification"),Htr=o(" (Data2VecAudio model)"),Utr=l(),iT=a("li"),z2e=a("strong"),Jtr=o("hubert"),Ytr=o(" \u2014 "),uW=a("a"),Ktr=o("HubertForSequenceClassification"),Ztr=o(" (Hubert model)"),ear=l(),dT=a("li"),W2e=a("strong"),oar=o("sew"),rar=o(" \u2014 "),_W=a("a"),tar=o("SEWForSequenceClassification"),aar=o(" (SEW model)"),nar=l(),cT=a("li"),Q2e=a("strong"),sar=o("sew-d"),lar=o(" \u2014 "),bW=a("a"),iar=o("SEWDForSequenceClassification"),dar=o(" (SEW-D model)"),car=l(),fT=a("li"),H2e=a("strong"),far=o("unispeech"),mar=o(" \u2014 "),vW=a("a"),gar=o("UniSpeechForSequenceClassification"),har=o(" (UniSpeech model)"),par=l(),mT=a("li"),U2e=a("strong"),uar=o("unispeech-sat"),_ar=o(" \u2014 "),FW=a("a"),bar=o("UniSpeechSatForSequenceClassification"),Far=o(" (UniSpeechSat model)"),Tar=l(),gT=a("li"),J2e=a("strong"),Mar=o("wav2vec2"),Ear=o(" \u2014 "),TW=a("a"),Car=o("Wav2Vec2ForSequenceClassification"),war=o(" (Wav2Vec2 model)"),Aar=l(),hT=a("li"),Y2e=a("strong"),Lar=o("wav2vec2-conformer"),yar=o(" \u2014 "),MW=a("a"),xar=o("Wav2Vec2ConformerForSequenceClassification"),$ar=o(" (Wav2Vec2-Conformer model)"),kar=l(),pT=a("li"),K2e=a("strong"),Sar=o("wavlm"),Rar=o(" \u2014 "),EW=a("a"),Par=o("WavLMForSequenceClassification"),Bar=o(" (WavLM model)"),Iar=l(),uT=a("p"),Nar=o("The model is set in evaluation mode by default using "),Z2e=a("code"),qar=o("model.eval()"),jar=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),e1e=a("code"),Dar=o("model.train()"),Gar=l(),F(_T.$$.fragment),RGe=l(),wd=a("h2"),bT=a("a"),o1e=a("span"),F(cy.$$.fragment),Oar=l(),r1e=a("span"),Var=o("AutoModelForAudioFrameClassification"),PGe=l(),Xo=a("div"),F(fy.$$.fragment),Xar=l(),Ad=a("p"),zar=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),CW=a("a"),War=o("from_pretrained()"),Qar=o(" class method or the "),wW=a("a"),Har=o("from_config()"),Uar=o(` class
method.`),Jar=l(),my=a("p"),Yar=o("This class cannot be instantiated directly using "),t1e=a("code"),Kar=o("__init__()"),Zar=o(" (throws an error)."),enr=l(),Tt=a("div"),F(gy.$$.fragment),onr=l(),a1e=a("p"),rnr=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),tnr=l(),Ld=a("p"),anr=o(`Note:
Loading a model from its configuration file does `),n1e=a("strong"),nnr=o("not"),snr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AW=a("a"),lnr=o("from_pretrained()"),inr=o(" to load the model weights."),dnr=l(),F(vT.$$.fragment),cnr=l(),mo=a("div"),F(hy.$$.fragment),fnr=l(),s1e=a("p"),mnr=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),gnr=l(),Qa=a("p"),hnr=o("The model class to instantiate is selected based on the "),l1e=a("code"),pnr=o("model_type"),unr=o(` property of the config object (either
passed as an argument or loaded from `),i1e=a("code"),_nr=o("pretrained_model_name_or_path"),bnr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d1e=a("code"),vnr=o("pretrained_model_name_or_path"),Fnr=o(":"),Tnr=l(),et=a("ul"),FT=a("li"),c1e=a("strong"),Mnr=o("data2vec-audio"),Enr=o(" \u2014 "),LW=a("a"),Cnr=o("Data2VecAudioForAudioFrameClassification"),wnr=o(" (Data2VecAudio model)"),Anr=l(),TT=a("li"),f1e=a("strong"),Lnr=o("unispeech-sat"),ynr=o(" \u2014 "),yW=a("a"),xnr=o("UniSpeechSatForAudioFrameClassification"),$nr=o(" (UniSpeechSat model)"),knr=l(),MT=a("li"),m1e=a("strong"),Snr=o("wav2vec2"),Rnr=o(" \u2014 "),xW=a("a"),Pnr=o("Wav2Vec2ForAudioFrameClassification"),Bnr=o(" (Wav2Vec2 model)"),Inr=l(),ET=a("li"),g1e=a("strong"),Nnr=o("wav2vec2-conformer"),qnr=o(" \u2014 "),$W=a("a"),jnr=o("Wav2Vec2ConformerForAudioFrameClassification"),Dnr=o(" (Wav2Vec2-Conformer model)"),Gnr=l(),CT=a("li"),h1e=a("strong"),Onr=o("wavlm"),Vnr=o(" \u2014 "),kW=a("a"),Xnr=o("WavLMForAudioFrameClassification"),znr=o(" (WavLM model)"),Wnr=l(),wT=a("p"),Qnr=o("The model is set in evaluation mode by default using "),p1e=a("code"),Hnr=o("model.eval()"),Unr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),u1e=a("code"),Jnr=o("model.train()"),Ynr=l(),F(AT.$$.fragment),BGe=l(),yd=a("h2"),LT=a("a"),_1e=a("span"),F(py.$$.fragment),Knr=l(),b1e=a("span"),Znr=o("AutoModelForCTC"),IGe=l(),zo=a("div"),F(uy.$$.fragment),esr=l(),xd=a("p"),osr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),SW=a("a"),rsr=o("from_pretrained()"),tsr=o(" class method or the "),RW=a("a"),asr=o("from_config()"),nsr=o(` class
method.`),ssr=l(),_y=a("p"),lsr=o("This class cannot be instantiated directly using "),v1e=a("code"),isr=o("__init__()"),dsr=o(" (throws an error)."),csr=l(),Mt=a("div"),F(by.$$.fragment),fsr=l(),F1e=a("p"),msr=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),gsr=l(),$d=a("p"),hsr=o(`Note:
Loading a model from its configuration file does `),T1e=a("strong"),psr=o("not"),usr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PW=a("a"),_sr=o("from_pretrained()"),bsr=o(" to load the model weights."),vsr=l(),F(yT.$$.fragment),Fsr=l(),go=a("div"),F(vy.$$.fragment),Tsr=l(),M1e=a("p"),Msr=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Esr=l(),Ha=a("p"),Csr=o("The model class to instantiate is selected based on the "),E1e=a("code"),wsr=o("model_type"),Asr=o(` property of the config object (either
passed as an argument or loaded from `),C1e=a("code"),Lsr=o("pretrained_model_name_or_path"),ysr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w1e=a("code"),xsr=o("pretrained_model_name_or_path"),$sr=o(":"),ksr=l(),Le=a("ul"),xT=a("li"),A1e=a("strong"),Ssr=o("data2vec-audio"),Rsr=o(" \u2014 "),BW=a("a"),Psr=o("Data2VecAudioForCTC"),Bsr=o(" (Data2VecAudio model)"),Isr=l(),$T=a("li"),L1e=a("strong"),Nsr=o("hubert"),qsr=o(" \u2014 "),IW=a("a"),jsr=o("HubertForCTC"),Dsr=o(" (Hubert model)"),Gsr=l(),kT=a("li"),y1e=a("strong"),Osr=o("mctct"),Vsr=o(" \u2014 "),NW=a("a"),Xsr=o("MCTCTForCTC"),zsr=o(" (M-CTC-T model)"),Wsr=l(),ST=a("li"),x1e=a("strong"),Qsr=o("sew"),Hsr=o(" \u2014 "),qW=a("a"),Usr=o("SEWForCTC"),Jsr=o(" (SEW model)"),Ysr=l(),RT=a("li"),$1e=a("strong"),Ksr=o("sew-d"),Zsr=o(" \u2014 "),jW=a("a"),elr=o("SEWDForCTC"),olr=o(" (SEW-D model)"),rlr=l(),PT=a("li"),k1e=a("strong"),tlr=o("unispeech"),alr=o(" \u2014 "),DW=a("a"),nlr=o("UniSpeechForCTC"),slr=o(" (UniSpeech model)"),llr=l(),BT=a("li"),S1e=a("strong"),ilr=o("unispeech-sat"),dlr=o(" \u2014 "),GW=a("a"),clr=o("UniSpeechSatForCTC"),flr=o(" (UniSpeechSat model)"),mlr=l(),IT=a("li"),R1e=a("strong"),glr=o("wav2vec2"),hlr=o(" \u2014 "),OW=a("a"),plr=o("Wav2Vec2ForCTC"),ulr=o(" (Wav2Vec2 model)"),_lr=l(),NT=a("li"),P1e=a("strong"),blr=o("wav2vec2-conformer"),vlr=o(" \u2014 "),VW=a("a"),Flr=o("Wav2Vec2ConformerForCTC"),Tlr=o(" (Wav2Vec2-Conformer model)"),Mlr=l(),qT=a("li"),B1e=a("strong"),Elr=o("wavlm"),Clr=o(" \u2014 "),XW=a("a"),wlr=o("WavLMForCTC"),Alr=o(" (WavLM model)"),Llr=l(),jT=a("p"),ylr=o("The model is set in evaluation mode by default using "),I1e=a("code"),xlr=o("model.eval()"),$lr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),N1e=a("code"),klr=o("model.train()"),Slr=l(),F(DT.$$.fragment),NGe=l(),kd=a("h2"),GT=a("a"),q1e=a("span"),F(Fy.$$.fragment),Rlr=l(),j1e=a("span"),Plr=o("AutoModelForSpeechSeq2Seq"),qGe=l(),Wo=a("div"),F(Ty.$$.fragment),Blr=l(),Sd=a("p"),Ilr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),zW=a("a"),Nlr=o("from_pretrained()"),qlr=o(" class method or the "),WW=a("a"),jlr=o("from_config()"),Dlr=o(` class
method.`),Glr=l(),My=a("p"),Olr=o("This class cannot be instantiated directly using "),D1e=a("code"),Vlr=o("__init__()"),Xlr=o(" (throws an error)."),zlr=l(),Et=a("div"),F(Ey.$$.fragment),Wlr=l(),G1e=a("p"),Qlr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Hlr=l(),Rd=a("p"),Ulr=o(`Note:
Loading a model from its configuration file does `),O1e=a("strong"),Jlr=o("not"),Ylr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QW=a("a"),Klr=o("from_pretrained()"),Zlr=o(" to load the model weights."),eir=l(),F(OT.$$.fragment),oir=l(),ho=a("div"),F(Cy.$$.fragment),rir=l(),V1e=a("p"),tir=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),air=l(),Ua=a("p"),nir=o("The model class to instantiate is selected based on the "),X1e=a("code"),sir=o("model_type"),lir=o(` property of the config object (either
passed as an argument or loaded from `),z1e=a("code"),iir=o("pretrained_model_name_or_path"),dir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W1e=a("code"),cir=o("pretrained_model_name_or_path"),fir=o(":"),mir=l(),wy=a("ul"),VT=a("li"),Q1e=a("strong"),gir=o("speech-encoder-decoder"),hir=o(" \u2014 "),HW=a("a"),pir=o("SpeechEncoderDecoderModel"),uir=o(" (Speech Encoder decoder model)"),_ir=l(),XT=a("li"),H1e=a("strong"),bir=o("speech_to_text"),vir=o(" \u2014 "),UW=a("a"),Fir=o("Speech2TextForConditionalGeneration"),Tir=o(" (Speech2Text model)"),Mir=l(),zT=a("p"),Eir=o("The model is set in evaluation mode by default using "),U1e=a("code"),Cir=o("model.eval()"),wir=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),J1e=a("code"),Air=o("model.train()"),Lir=l(),F(WT.$$.fragment),jGe=l(),Pd=a("h2"),QT=a("a"),Y1e=a("span"),F(Ay.$$.fragment),yir=l(),K1e=a("span"),xir=o("AutoModelForAudioXVector"),DGe=l(),Qo=a("div"),F(Ly.$$.fragment),$ir=l(),Bd=a("p"),kir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),JW=a("a"),Sir=o("from_pretrained()"),Rir=o(" class method or the "),YW=a("a"),Pir=o("from_config()"),Bir=o(` class
method.`),Iir=l(),yy=a("p"),Nir=o("This class cannot be instantiated directly using "),Z1e=a("code"),qir=o("__init__()"),jir=o(" (throws an error)."),Dir=l(),Ct=a("div"),F(xy.$$.fragment),Gir=l(),ebe=a("p"),Oir=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),Vir=l(),Id=a("p"),Xir=o(`Note:
Loading a model from its configuration file does `),obe=a("strong"),zir=o("not"),Wir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KW=a("a"),Qir=o("from_pretrained()"),Hir=o(" to load the model weights."),Uir=l(),F(HT.$$.fragment),Jir=l(),po=a("div"),F($y.$$.fragment),Yir=l(),rbe=a("p"),Kir=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Zir=l(),Ja=a("p"),edr=o("The model class to instantiate is selected based on the "),tbe=a("code"),odr=o("model_type"),rdr=o(` property of the config object (either
passed as an argument or loaded from `),abe=a("code"),tdr=o("pretrained_model_name_or_path"),adr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nbe=a("code"),ndr=o("pretrained_model_name_or_path"),sdr=o(":"),ldr=l(),ot=a("ul"),UT=a("li"),sbe=a("strong"),idr=o("data2vec-audio"),ddr=o(" \u2014 "),ZW=a("a"),cdr=o("Data2VecAudioForXVector"),fdr=o(" (Data2VecAudio model)"),mdr=l(),JT=a("li"),lbe=a("strong"),gdr=o("unispeech-sat"),hdr=o(" \u2014 "),eQ=a("a"),pdr=o("UniSpeechSatForXVector"),udr=o(" (UniSpeechSat model)"),_dr=l(),YT=a("li"),ibe=a("strong"),bdr=o("wav2vec2"),vdr=o(" \u2014 "),oQ=a("a"),Fdr=o("Wav2Vec2ForXVector"),Tdr=o(" (Wav2Vec2 model)"),Mdr=l(),KT=a("li"),dbe=a("strong"),Edr=o("wav2vec2-conformer"),Cdr=o(" \u2014 "),rQ=a("a"),wdr=o("Wav2Vec2ConformerForXVector"),Adr=o(" (Wav2Vec2-Conformer model)"),Ldr=l(),ZT=a("li"),cbe=a("strong"),ydr=o("wavlm"),xdr=o(" \u2014 "),tQ=a("a"),$dr=o("WavLMForXVector"),kdr=o(" (WavLM model)"),Sdr=l(),e7=a("p"),Rdr=o("The model is set in evaluation mode by default using "),fbe=a("code"),Pdr=o("model.eval()"),Bdr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mbe=a("code"),Idr=o("model.train()"),Ndr=l(),F(o7.$$.fragment),GGe=l(),Nd=a("h2"),r7=a("a"),gbe=a("span"),F(ky.$$.fragment),qdr=l(),hbe=a("span"),jdr=o("AutoModelForMaskedImageModeling"),OGe=l(),Ho=a("div"),F(Sy.$$.fragment),Ddr=l(),qd=a("p"),Gdr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),aQ=a("a"),Odr=o("from_pretrained()"),Vdr=o(" class method or the "),nQ=a("a"),Xdr=o("from_config()"),zdr=o(` class
method.`),Wdr=l(),Ry=a("p"),Qdr=o("This class cannot be instantiated directly using "),pbe=a("code"),Hdr=o("__init__()"),Udr=o(" (throws an error)."),Jdr=l(),wt=a("div"),F(Py.$$.fragment),Ydr=l(),ube=a("p"),Kdr=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Zdr=l(),jd=a("p"),ecr=o(`Note:
Loading a model from its configuration file does `),_be=a("strong"),ocr=o("not"),rcr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sQ=a("a"),tcr=o("from_pretrained()"),acr=o(" to load the model weights."),ncr=l(),F(t7.$$.fragment),scr=l(),uo=a("div"),F(By.$$.fragment),lcr=l(),bbe=a("p"),icr=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),dcr=l(),Ya=a("p"),ccr=o("The model class to instantiate is selected based on the "),vbe=a("code"),fcr=o("model_type"),mcr=o(` property of the config object (either
passed as an argument or loaded from `),Fbe=a("code"),gcr=o("pretrained_model_name_or_path"),hcr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tbe=a("code"),pcr=o("pretrained_model_name_or_path"),ucr=o(":"),_cr=l(),Dd=a("ul"),a7=a("li"),Mbe=a("strong"),bcr=o("deit"),vcr=o(" \u2014 "),lQ=a("a"),Fcr=o("DeiTForMaskedImageModeling"),Tcr=o(" (DeiT model)"),Mcr=l(),n7=a("li"),Ebe=a("strong"),Ecr=o("swin"),Ccr=o(" \u2014 "),iQ=a("a"),wcr=o("SwinForMaskedImageModeling"),Acr=o(" (Swin Transformer model)"),Lcr=l(),s7=a("li"),Cbe=a("strong"),ycr=o("vit"),xcr=o(" \u2014 "),dQ=a("a"),$cr=o("ViTForMaskedImageModeling"),kcr=o(" (ViT model)"),Scr=l(),l7=a("p"),Rcr=o("The model is set in evaluation mode by default using "),wbe=a("code"),Pcr=o("model.eval()"),Bcr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Abe=a("code"),Icr=o("model.train()"),Ncr=l(),F(i7.$$.fragment),VGe=l(),Gd=a("h2"),d7=a("a"),Lbe=a("span"),F(Iy.$$.fragment),qcr=l(),ybe=a("span"),jcr=o("AutoModelForObjectDetection"),XGe=l(),Uo=a("div"),F(Ny.$$.fragment),Dcr=l(),Od=a("p"),Gcr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),cQ=a("a"),Ocr=o("from_pretrained()"),Vcr=o(" class method or the "),fQ=a("a"),Xcr=o("from_config()"),zcr=o(` class
method.`),Wcr=l(),qy=a("p"),Qcr=o("This class cannot be instantiated directly using "),xbe=a("code"),Hcr=o("__init__()"),Ucr=o(" (throws an error)."),Jcr=l(),At=a("div"),F(jy.$$.fragment),Ycr=l(),$be=a("p"),Kcr=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Zcr=l(),Vd=a("p"),efr=o(`Note:
Loading a model from its configuration file does `),kbe=a("strong"),ofr=o("not"),rfr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mQ=a("a"),tfr=o("from_pretrained()"),afr=o(" to load the model weights."),nfr=l(),F(c7.$$.fragment),sfr=l(),_o=a("div"),F(Dy.$$.fragment),lfr=l(),Sbe=a("p"),ifr=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),dfr=l(),Ka=a("p"),cfr=o("The model class to instantiate is selected based on the "),Rbe=a("code"),ffr=o("model_type"),mfr=o(` property of the config object (either
passed as an argument or loaded from `),Pbe=a("code"),gfr=o("pretrained_model_name_or_path"),hfr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bbe=a("code"),pfr=o("pretrained_model_name_or_path"),ufr=o(":"),_fr=l(),Gy=a("ul"),f7=a("li"),Ibe=a("strong"),bfr=o("detr"),vfr=o(" \u2014 "),gQ=a("a"),Ffr=o("DetrForObjectDetection"),Tfr=o(" (DETR model)"),Mfr=l(),m7=a("li"),Nbe=a("strong"),Efr=o("yolos"),Cfr=o(" \u2014 "),hQ=a("a"),wfr=o("YolosForObjectDetection"),Afr=o(" (YOLOS model)"),Lfr=l(),g7=a("p"),yfr=o("The model is set in evaluation mode by default using "),qbe=a("code"),xfr=o("model.eval()"),$fr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jbe=a("code"),kfr=o("model.train()"),Sfr=l(),F(h7.$$.fragment),zGe=l(),Xd=a("h2"),p7=a("a"),Dbe=a("span"),F(Oy.$$.fragment),Rfr=l(),Gbe=a("span"),Pfr=o("AutoModelForImageSegmentation"),WGe=l(),Jo=a("div"),F(Vy.$$.fragment),Bfr=l(),zd=a("p"),Ifr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),pQ=a("a"),Nfr=o("from_pretrained()"),qfr=o(" class method or the "),uQ=a("a"),jfr=o("from_config()"),Dfr=o(` class
method.`),Gfr=l(),Xy=a("p"),Ofr=o("This class cannot be instantiated directly using "),Obe=a("code"),Vfr=o("__init__()"),Xfr=o(" (throws an error)."),zfr=l(),Lt=a("div"),F(zy.$$.fragment),Wfr=l(),Vbe=a("p"),Qfr=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Hfr=l(),Wd=a("p"),Ufr=o(`Note:
Loading a model from its configuration file does `),Xbe=a("strong"),Jfr=o("not"),Yfr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_Q=a("a"),Kfr=o("from_pretrained()"),Zfr=o(" to load the model weights."),emr=l(),F(u7.$$.fragment),omr=l(),bo=a("div"),F(Wy.$$.fragment),rmr=l(),zbe=a("p"),tmr=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),amr=l(),Za=a("p"),nmr=o("The model class to instantiate is selected based on the "),Wbe=a("code"),smr=o("model_type"),lmr=o(` property of the config object (either
passed as an argument or loaded from `),Qbe=a("code"),imr=o("pretrained_model_name_or_path"),dmr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hbe=a("code"),cmr=o("pretrained_model_name_or_path"),fmr=o(":"),mmr=l(),Ube=a("ul"),_7=a("li"),Jbe=a("strong"),gmr=o("detr"),hmr=o(" \u2014 "),bQ=a("a"),pmr=o("DetrForSegmentation"),umr=o(" (DETR model)"),_mr=l(),b7=a("p"),bmr=o("The model is set in evaluation mode by default using "),Ybe=a("code"),vmr=o("model.eval()"),Fmr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kbe=a("code"),Tmr=o("model.train()"),Mmr=l(),F(v7.$$.fragment),QGe=l(),Qd=a("h2"),F7=a("a"),Zbe=a("span"),F(Qy.$$.fragment),Emr=l(),eve=a("span"),Cmr=o("AutoModelForSemanticSegmentation"),HGe=l(),Yo=a("div"),F(Hy.$$.fragment),wmr=l(),Hd=a("p"),Amr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),vQ=a("a"),Lmr=o("from_pretrained()"),ymr=o(" class method or the "),FQ=a("a"),xmr=o("from_config()"),$mr=o(` class
method.`),kmr=l(),Uy=a("p"),Smr=o("This class cannot be instantiated directly using "),ove=a("code"),Rmr=o("__init__()"),Pmr=o(" (throws an error)."),Bmr=l(),yt=a("div"),F(Jy.$$.fragment),Imr=l(),rve=a("p"),Nmr=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),qmr=l(),Ud=a("p"),jmr=o(`Note:
Loading a model from its configuration file does `),tve=a("strong"),Dmr=o("not"),Gmr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TQ=a("a"),Omr=o("from_pretrained()"),Vmr=o(" to load the model weights."),Xmr=l(),F(T7.$$.fragment),zmr=l(),vo=a("div"),F(Yy.$$.fragment),Wmr=l(),ave=a("p"),Qmr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Hmr=l(),en=a("p"),Umr=o("The model class to instantiate is selected based on the "),nve=a("code"),Jmr=o("model_type"),Ymr=o(` property of the config object (either
passed as an argument or loaded from `),sve=a("code"),Kmr=o("pretrained_model_name_or_path"),Zmr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lve=a("code"),egr=o("pretrained_model_name_or_path"),ogr=o(":"),rgr=l(),on=a("ul"),M7=a("li"),ive=a("strong"),tgr=o("beit"),agr=o(" \u2014 "),MQ=a("a"),ngr=o("BeitForSemanticSegmentation"),sgr=o(" (BEiT model)"),lgr=l(),E7=a("li"),dve=a("strong"),igr=o("data2vec-vision"),dgr=o(" \u2014 "),EQ=a("a"),cgr=o("Data2VecVisionForSemanticSegmentation"),fgr=o(" (Data2VecVision model)"),mgr=l(),C7=a("li"),cve=a("strong"),ggr=o("dpt"),hgr=o(" \u2014 "),CQ=a("a"),pgr=o("DPTForSemanticSegmentation"),ugr=o(" (DPT model)"),_gr=l(),w7=a("li"),fve=a("strong"),bgr=o("segformer"),vgr=o(" \u2014 "),wQ=a("a"),Fgr=o("SegformerForSemanticSegmentation"),Tgr=o(" (SegFormer model)"),Mgr=l(),A7=a("p"),Egr=o("The model is set in evaluation mode by default using "),mve=a("code"),Cgr=o("model.eval()"),wgr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gve=a("code"),Agr=o("model.train()"),Lgr=l(),F(L7.$$.fragment),UGe=l(),Jd=a("h2"),y7=a("a"),hve=a("span"),F(Ky.$$.fragment),ygr=l(),pve=a("span"),xgr=o("AutoModelForInstanceSegmentation"),JGe=l(),Ko=a("div"),F(Zy.$$.fragment),$gr=l(),Yd=a("p"),kgr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),AQ=a("a"),Sgr=o("from_pretrained()"),Rgr=o(" class method or the "),LQ=a("a"),Pgr=o("from_config()"),Bgr=o(` class
method.`),Igr=l(),e8=a("p"),Ngr=o("This class cannot be instantiated directly using "),uve=a("code"),qgr=o("__init__()"),jgr=o(" (throws an error)."),Dgr=l(),xt=a("div"),F(o8.$$.fragment),Ggr=l(),_ve=a("p"),Ogr=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Vgr=l(),Kd=a("p"),Xgr=o(`Note:
Loading a model from its configuration file does `),bve=a("strong"),zgr=o("not"),Wgr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yQ=a("a"),Qgr=o("from_pretrained()"),Hgr=o(" to load the model weights."),Ugr=l(),F(x7.$$.fragment),Jgr=l(),Fo=a("div"),F(r8.$$.fragment),Ygr=l(),vve=a("p"),Kgr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Zgr=l(),rn=a("p"),ehr=o("The model class to instantiate is selected based on the "),Fve=a("code"),ohr=o("model_type"),rhr=o(` property of the config object (either
passed as an argument or loaded from `),Tve=a("code"),thr=o("pretrained_model_name_or_path"),ahr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mve=a("code"),nhr=o("pretrained_model_name_or_path"),shr=o(":"),lhr=l(),Eve=a("ul"),$7=a("li"),Cve=a("strong"),ihr=o("maskformer"),dhr=o(" \u2014 "),xQ=a("a"),chr=o("MaskFormerForInstanceSegmentation"),fhr=o(" (MaskFormer model)"),mhr=l(),k7=a("p"),ghr=o("The model is set in evaluation mode by default using "),wve=a("code"),hhr=o("model.eval()"),phr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ave=a("code"),uhr=o("model.train()"),_hr=l(),F(S7.$$.fragment),YGe=l(),Zd=a("h2"),R7=a("a"),Lve=a("span"),F(t8.$$.fragment),bhr=l(),yve=a("span"),vhr=o("TFAutoModel"),KGe=l(),Zo=a("div"),F(a8.$$.fragment),Fhr=l(),ec=a("p"),Thr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),$Q=a("a"),Mhr=o("from_pretrained()"),Ehr=o(" class method or the "),kQ=a("a"),Chr=o("from_config()"),whr=o(` class
method.`),Ahr=l(),n8=a("p"),Lhr=o("This class cannot be instantiated directly using "),xve=a("code"),yhr=o("__init__()"),xhr=o(" (throws an error)."),$hr=l(),$t=a("div"),F(s8.$$.fragment),khr=l(),$ve=a("p"),Shr=o("Instantiates one of the base model classes of the library from a configuration."),Rhr=l(),oc=a("p"),Phr=o(`Note:
Loading a model from its configuration file does `),kve=a("strong"),Bhr=o("not"),Ihr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SQ=a("a"),Nhr=o("from_pretrained()"),qhr=o(" to load the model weights."),jhr=l(),F(P7.$$.fragment),Dhr=l(),Lr=a("div"),F(l8.$$.fragment),Ghr=l(),Sve=a("p"),Ohr=o("Instantiate one of the base model classes of the library from a pretrained model."),Vhr=l(),tn=a("p"),Xhr=o("The model class to instantiate is selected based on the "),Rve=a("code"),zhr=o("model_type"),Whr=o(` property of the config object (either
passed as an argument or loaded from `),Pve=a("code"),Qhr=o("pretrained_model_name_or_path"),Hhr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bve=a("code"),Uhr=o("pretrained_model_name_or_path"),Jhr=o(":"),Yhr=l(),q=a("ul"),B7=a("li"),Ive=a("strong"),Khr=o("albert"),Zhr=o(" \u2014 "),RQ=a("a"),epr=o("TFAlbertModel"),opr=o(" (ALBERT model)"),rpr=l(),I7=a("li"),Nve=a("strong"),tpr=o("bart"),apr=o(" \u2014 "),PQ=a("a"),npr=o("TFBartModel"),spr=o(" (BART model)"),lpr=l(),N7=a("li"),qve=a("strong"),ipr=o("bert"),dpr=o(" \u2014 "),BQ=a("a"),cpr=o("TFBertModel"),fpr=o(" (BERT model)"),mpr=l(),q7=a("li"),jve=a("strong"),gpr=o("blenderbot"),hpr=o(" \u2014 "),IQ=a("a"),ppr=o("TFBlenderbotModel"),upr=o(" (Blenderbot model)"),_pr=l(),j7=a("li"),Dve=a("strong"),bpr=o("blenderbot-small"),vpr=o(" \u2014 "),NQ=a("a"),Fpr=o("TFBlenderbotSmallModel"),Tpr=o(" (BlenderbotSmall model)"),Mpr=l(),D7=a("li"),Gve=a("strong"),Epr=o("camembert"),Cpr=o(" \u2014 "),qQ=a("a"),wpr=o("TFCamembertModel"),Apr=o(" (CamemBERT model)"),Lpr=l(),G7=a("li"),Ove=a("strong"),ypr=o("clip"),xpr=o(" \u2014 "),jQ=a("a"),$pr=o("TFCLIPModel"),kpr=o(" (CLIP model)"),Spr=l(),O7=a("li"),Vve=a("strong"),Rpr=o("convbert"),Ppr=o(" \u2014 "),DQ=a("a"),Bpr=o("TFConvBertModel"),Ipr=o(" (ConvBERT model)"),Npr=l(),V7=a("li"),Xve=a("strong"),qpr=o("convnext"),jpr=o(" \u2014 "),GQ=a("a"),Dpr=o("TFConvNextModel"),Gpr=o(" (ConvNeXT model)"),Opr=l(),X7=a("li"),zve=a("strong"),Vpr=o("ctrl"),Xpr=o(" \u2014 "),OQ=a("a"),zpr=o("TFCTRLModel"),Wpr=o(" (CTRL model)"),Qpr=l(),z7=a("li"),Wve=a("strong"),Hpr=o("data2vec-vision"),Upr=o(" \u2014 "),VQ=a("a"),Jpr=o("TFData2VecVisionModel"),Ypr=o(" (Data2VecVision model)"),Kpr=l(),W7=a("li"),Qve=a("strong"),Zpr=o("deberta"),eur=o(" \u2014 "),XQ=a("a"),our=o("TFDebertaModel"),rur=o(" (DeBERTa model)"),tur=l(),Q7=a("li"),Hve=a("strong"),aur=o("deberta-v2"),nur=o(" \u2014 "),zQ=a("a"),sur=o("TFDebertaV2Model"),lur=o(" (DeBERTa-v2 model)"),iur=l(),H7=a("li"),Uve=a("strong"),dur=o("distilbert"),cur=o(" \u2014 "),WQ=a("a"),fur=o("TFDistilBertModel"),mur=o(" (DistilBERT model)"),gur=l(),U7=a("li"),Jve=a("strong"),hur=o("dpr"),pur=o(" \u2014 "),QQ=a("a"),uur=o("TFDPRQuestionEncoder"),_ur=o(" (DPR model)"),bur=l(),J7=a("li"),Yve=a("strong"),vur=o("electra"),Fur=o(" \u2014 "),HQ=a("a"),Tur=o("TFElectraModel"),Mur=o(" (ELECTRA model)"),Eur=l(),Y7=a("li"),Kve=a("strong"),Cur=o("flaubert"),wur=o(" \u2014 "),UQ=a("a"),Aur=o("TFFlaubertModel"),Lur=o(" (FlauBERT model)"),yur=l(),Xs=a("li"),Zve=a("strong"),xur=o("funnel"),$ur=o(" \u2014 "),JQ=a("a"),kur=o("TFFunnelModel"),Sur=o(" or "),YQ=a("a"),Rur=o("TFFunnelBaseModel"),Pur=o(" (Funnel Transformer model)"),Bur=l(),K7=a("li"),eFe=a("strong"),Iur=o("gpt2"),Nur=o(" \u2014 "),KQ=a("a"),qur=o("TFGPT2Model"),jur=o(" (OpenAI GPT-2 model)"),Dur=l(),Z7=a("li"),oFe=a("strong"),Gur=o("gptj"),Our=o(" \u2014 "),ZQ=a("a"),Vur=o("TFGPTJModel"),Xur=o(" (GPT-J model)"),zur=l(),e9=a("li"),rFe=a("strong"),Wur=o("hubert"),Qur=o(" \u2014 "),eH=a("a"),Hur=o("TFHubertModel"),Uur=o(" (Hubert model)"),Jur=l(),o9=a("li"),tFe=a("strong"),Yur=o("layoutlm"),Kur=o(" \u2014 "),oH=a("a"),Zur=o("TFLayoutLMModel"),e_r=o(" (LayoutLM model)"),o_r=l(),r9=a("li"),aFe=a("strong"),r_r=o("led"),t_r=o(" \u2014 "),rH=a("a"),a_r=o("TFLEDModel"),n_r=o(" (LED model)"),s_r=l(),t9=a("li"),nFe=a("strong"),l_r=o("longformer"),i_r=o(" \u2014 "),tH=a("a"),d_r=o("TFLongformerModel"),c_r=o(" (Longformer model)"),f_r=l(),a9=a("li"),sFe=a("strong"),m_r=o("lxmert"),g_r=o(" \u2014 "),aH=a("a"),h_r=o("TFLxmertModel"),p_r=o(" (LXMERT model)"),u_r=l(),n9=a("li"),lFe=a("strong"),__r=o("marian"),b_r=o(" \u2014 "),nH=a("a"),v_r=o("TFMarianModel"),F_r=o(" (Marian model)"),T_r=l(),s9=a("li"),iFe=a("strong"),M_r=o("mbart"),E_r=o(" \u2014 "),sH=a("a"),C_r=o("TFMBartModel"),w_r=o(" (mBART model)"),A_r=l(),l9=a("li"),dFe=a("strong"),L_r=o("mobilebert"),y_r=o(" \u2014 "),lH=a("a"),x_r=o("TFMobileBertModel"),$_r=o(" (MobileBERT model)"),k_r=l(),i9=a("li"),cFe=a("strong"),S_r=o("mpnet"),R_r=o(" \u2014 "),iH=a("a"),P_r=o("TFMPNetModel"),B_r=o(" (MPNet model)"),I_r=l(),d9=a("li"),fFe=a("strong"),N_r=o("mt5"),q_r=o(" \u2014 "),dH=a("a"),j_r=o("TFMT5Model"),D_r=o(" (MT5 model)"),G_r=l(),c9=a("li"),mFe=a("strong"),O_r=o("openai-gpt"),V_r=o(" \u2014 "),cH=a("a"),X_r=o("TFOpenAIGPTModel"),z_r=o(" (OpenAI GPT model)"),W_r=l(),f9=a("li"),gFe=a("strong"),Q_r=o("opt"),H_r=o(" \u2014 "),fH=a("a"),U_r=o("TFOPTModel"),J_r=o(" (OPT model)"),Y_r=l(),m9=a("li"),hFe=a("strong"),K_r=o("pegasus"),Z_r=o(" \u2014 "),mH=a("a"),e2r=o("TFPegasusModel"),o2r=o(" (Pegasus model)"),r2r=l(),g9=a("li"),pFe=a("strong"),t2r=o("rembert"),a2r=o(" \u2014 "),gH=a("a"),n2r=o("TFRemBertModel"),s2r=o(" (RemBERT model)"),l2r=l(),h9=a("li"),uFe=a("strong"),i2r=o("roberta"),d2r=o(" \u2014 "),hH=a("a"),c2r=o("TFRobertaModel"),f2r=o(" (RoBERTa model)"),m2r=l(),p9=a("li"),_Fe=a("strong"),g2r=o("roformer"),h2r=o(" \u2014 "),pH=a("a"),p2r=o("TFRoFormerModel"),u2r=o(" (RoFormer model)"),_2r=l(),u9=a("li"),bFe=a("strong"),b2r=o("speech_to_text"),v2r=o(" \u2014 "),uH=a("a"),F2r=o("TFSpeech2TextModel"),T2r=o(" (Speech2Text model)"),M2r=l(),_9=a("li"),vFe=a("strong"),E2r=o("swin"),C2r=o(" \u2014 "),_H=a("a"),w2r=o("TFSwinModel"),A2r=o(" (Swin Transformer model)"),L2r=l(),b9=a("li"),FFe=a("strong"),y2r=o("t5"),x2r=o(" \u2014 "),bH=a("a"),$2r=o("TFT5Model"),k2r=o(" (T5 model)"),S2r=l(),v9=a("li"),TFe=a("strong"),R2r=o("tapas"),P2r=o(" \u2014 "),vH=a("a"),B2r=o("TFTapasModel"),I2r=o(" (TAPAS model)"),N2r=l(),F9=a("li"),MFe=a("strong"),q2r=o("transfo-xl"),j2r=o(" \u2014 "),FH=a("a"),D2r=o("TFTransfoXLModel"),G2r=o(" (Transformer-XL model)"),O2r=l(),T9=a("li"),EFe=a("strong"),V2r=o("vit"),X2r=o(" \u2014 "),TH=a("a"),z2r=o("TFViTModel"),W2r=o(" (ViT model)"),Q2r=l(),M9=a("li"),CFe=a("strong"),H2r=o("vit_mae"),U2r=o(" \u2014 "),MH=a("a"),J2r=o("TFViTMAEModel"),Y2r=o(" (ViTMAE model)"),K2r=l(),E9=a("li"),wFe=a("strong"),Z2r=o("wav2vec2"),e1r=o(" \u2014 "),EH=a("a"),o1r=o("TFWav2Vec2Model"),r1r=o(" (Wav2Vec2 model)"),t1r=l(),C9=a("li"),AFe=a("strong"),a1r=o("xlm"),n1r=o(" \u2014 "),CH=a("a"),s1r=o("TFXLMModel"),l1r=o(" (XLM model)"),i1r=l(),w9=a("li"),LFe=a("strong"),d1r=o("xlm-roberta"),c1r=o(" \u2014 "),wH=a("a"),f1r=o("TFXLMRobertaModel"),m1r=o(" (XLM-RoBERTa model)"),g1r=l(),A9=a("li"),yFe=a("strong"),h1r=o("xlnet"),p1r=o(" \u2014 "),AH=a("a"),u1r=o("TFXLNetModel"),_1r=o(" (XLNet model)"),b1r=l(),F(L9.$$.fragment),ZGe=l(),rc=a("h2"),y9=a("a"),xFe=a("span"),F(i8.$$.fragment),v1r=l(),$Fe=a("span"),F1r=o("TFAutoModelForPreTraining"),eOe=l(),er=a("div"),F(d8.$$.fragment),T1r=l(),tc=a("p"),M1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),LH=a("a"),E1r=o("from_pretrained()"),C1r=o(" class method or the "),yH=a("a"),w1r=o("from_config()"),A1r=o(` class
method.`),L1r=l(),c8=a("p"),y1r=o("This class cannot be instantiated directly using "),kFe=a("code"),x1r=o("__init__()"),$1r=o(" (throws an error)."),k1r=l(),kt=a("div"),F(f8.$$.fragment),S1r=l(),SFe=a("p"),R1r=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),P1r=l(),ac=a("p"),B1r=o(`Note:
Loading a model from its configuration file does `),RFe=a("strong"),I1r=o("not"),N1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xH=a("a"),q1r=o("from_pretrained()"),j1r=o(" to load the model weights."),D1r=l(),F(x9.$$.fragment),G1r=l(),yr=a("div"),F(m8.$$.fragment),O1r=l(),PFe=a("p"),V1r=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),X1r=l(),an=a("p"),z1r=o("The model class to instantiate is selected based on the "),BFe=a("code"),W1r=o("model_type"),Q1r=o(` property of the config object (either
passed as an argument or loaded from `),IFe=a("code"),H1r=o("pretrained_model_name_or_path"),U1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),NFe=a("code"),J1r=o("pretrained_model_name_or_path"),Y1r=o(":"),K1r=l(),se=a("ul"),$9=a("li"),qFe=a("strong"),Z1r=o("albert"),ebr=o(" \u2014 "),$H=a("a"),obr=o("TFAlbertForPreTraining"),rbr=o(" (ALBERT model)"),tbr=l(),k9=a("li"),jFe=a("strong"),abr=o("bart"),nbr=o(" \u2014 "),kH=a("a"),sbr=o("TFBartForConditionalGeneration"),lbr=o(" (BART model)"),ibr=l(),S9=a("li"),DFe=a("strong"),dbr=o("bert"),cbr=o(" \u2014 "),SH=a("a"),fbr=o("TFBertForPreTraining"),mbr=o(" (BERT model)"),gbr=l(),R9=a("li"),GFe=a("strong"),hbr=o("camembert"),pbr=o(" \u2014 "),RH=a("a"),ubr=o("TFCamembertForMaskedLM"),_br=o(" (CamemBERT model)"),bbr=l(),P9=a("li"),OFe=a("strong"),vbr=o("ctrl"),Fbr=o(" \u2014 "),PH=a("a"),Tbr=o("TFCTRLLMHeadModel"),Mbr=o(" (CTRL model)"),Ebr=l(),B9=a("li"),VFe=a("strong"),Cbr=o("distilbert"),wbr=o(" \u2014 "),BH=a("a"),Abr=o("TFDistilBertForMaskedLM"),Lbr=o(" (DistilBERT model)"),ybr=l(),I9=a("li"),XFe=a("strong"),xbr=o("electra"),$br=o(" \u2014 "),IH=a("a"),kbr=o("TFElectraForPreTraining"),Sbr=o(" (ELECTRA model)"),Rbr=l(),N9=a("li"),zFe=a("strong"),Pbr=o("flaubert"),Bbr=o(" \u2014 "),NH=a("a"),Ibr=o("TFFlaubertWithLMHeadModel"),Nbr=o(" (FlauBERT model)"),qbr=l(),q9=a("li"),WFe=a("strong"),jbr=o("funnel"),Dbr=o(" \u2014 "),qH=a("a"),Gbr=o("TFFunnelForPreTraining"),Obr=o(" (Funnel Transformer model)"),Vbr=l(),j9=a("li"),QFe=a("strong"),Xbr=o("gpt2"),zbr=o(" \u2014 "),jH=a("a"),Wbr=o("TFGPT2LMHeadModel"),Qbr=o(" (OpenAI GPT-2 model)"),Hbr=l(),D9=a("li"),HFe=a("strong"),Ubr=o("layoutlm"),Jbr=o(" \u2014 "),DH=a("a"),Ybr=o("TFLayoutLMForMaskedLM"),Kbr=o(" (LayoutLM model)"),Zbr=l(),G9=a("li"),UFe=a("strong"),evr=o("lxmert"),ovr=o(" \u2014 "),GH=a("a"),rvr=o("TFLxmertForPreTraining"),tvr=o(" (LXMERT model)"),avr=l(),O9=a("li"),JFe=a("strong"),nvr=o("mobilebert"),svr=o(" \u2014 "),OH=a("a"),lvr=o("TFMobileBertForPreTraining"),ivr=o(" (MobileBERT model)"),dvr=l(),V9=a("li"),YFe=a("strong"),cvr=o("mpnet"),fvr=o(" \u2014 "),VH=a("a"),mvr=o("TFMPNetForMaskedLM"),gvr=o(" (MPNet model)"),hvr=l(),X9=a("li"),KFe=a("strong"),pvr=o("openai-gpt"),uvr=o(" \u2014 "),XH=a("a"),_vr=o("TFOpenAIGPTLMHeadModel"),bvr=o(" (OpenAI GPT model)"),vvr=l(),z9=a("li"),ZFe=a("strong"),Fvr=o("roberta"),Tvr=o(" \u2014 "),zH=a("a"),Mvr=o("TFRobertaForMaskedLM"),Evr=o(" (RoBERTa model)"),Cvr=l(),W9=a("li"),e6e=a("strong"),wvr=o("t5"),Avr=o(" \u2014 "),WH=a("a"),Lvr=o("TFT5ForConditionalGeneration"),yvr=o(" (T5 model)"),xvr=l(),Q9=a("li"),o6e=a("strong"),$vr=o("tapas"),kvr=o(" \u2014 "),QH=a("a"),Svr=o("TFTapasForMaskedLM"),Rvr=o(" (TAPAS model)"),Pvr=l(),H9=a("li"),r6e=a("strong"),Bvr=o("transfo-xl"),Ivr=o(" \u2014 "),HH=a("a"),Nvr=o("TFTransfoXLLMHeadModel"),qvr=o(" (Transformer-XL model)"),jvr=l(),U9=a("li"),t6e=a("strong"),Dvr=o("vit_mae"),Gvr=o(" \u2014 "),UH=a("a"),Ovr=o("TFViTMAEForPreTraining"),Vvr=o(" (ViTMAE model)"),Xvr=l(),J9=a("li"),a6e=a("strong"),zvr=o("xlm"),Wvr=o(" \u2014 "),JH=a("a"),Qvr=o("TFXLMWithLMHeadModel"),Hvr=o(" (XLM model)"),Uvr=l(),Y9=a("li"),n6e=a("strong"),Jvr=o("xlm-roberta"),Yvr=o(" \u2014 "),YH=a("a"),Kvr=o("TFXLMRobertaForMaskedLM"),Zvr=o(" (XLM-RoBERTa model)"),eFr=l(),K9=a("li"),s6e=a("strong"),oFr=o("xlnet"),rFr=o(" \u2014 "),KH=a("a"),tFr=o("TFXLNetLMHeadModel"),aFr=o(" (XLNet model)"),nFr=l(),F(Z9.$$.fragment),oOe=l(),nc=a("h2"),eM=a("a"),l6e=a("span"),F(g8.$$.fragment),sFr=l(),i6e=a("span"),lFr=o("TFAutoModelForCausalLM"),rOe=l(),or=a("div"),F(h8.$$.fragment),iFr=l(),sc=a("p"),dFr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),ZH=a("a"),cFr=o("from_pretrained()"),fFr=o(" class method or the "),eU=a("a"),mFr=o("from_config()"),gFr=o(` class
method.`),hFr=l(),p8=a("p"),pFr=o("This class cannot be instantiated directly using "),d6e=a("code"),uFr=o("__init__()"),_Fr=o(" (throws an error)."),bFr=l(),St=a("div"),F(u8.$$.fragment),vFr=l(),c6e=a("p"),FFr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),TFr=l(),lc=a("p"),MFr=o(`Note:
Loading a model from its configuration file does `),f6e=a("strong"),EFr=o("not"),CFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oU=a("a"),wFr=o("from_pretrained()"),AFr=o(" to load the model weights."),LFr=l(),F(oM.$$.fragment),yFr=l(),xr=a("div"),F(_8.$$.fragment),xFr=l(),m6e=a("p"),$Fr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),kFr=l(),nn=a("p"),SFr=o("The model class to instantiate is selected based on the "),g6e=a("code"),RFr=o("model_type"),PFr=o(` property of the config object (either
passed as an argument or loaded from `),h6e=a("code"),BFr=o("pretrained_model_name_or_path"),IFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p6e=a("code"),NFr=o("pretrained_model_name_or_path"),qFr=o(":"),jFr=l(),Me=a("ul"),rM=a("li"),u6e=a("strong"),DFr=o("bert"),GFr=o(" \u2014 "),rU=a("a"),OFr=o("TFBertLMHeadModel"),VFr=o(" (BERT model)"),XFr=l(),tM=a("li"),_6e=a("strong"),zFr=o("camembert"),WFr=o(" \u2014 "),tU=a("a"),QFr=o("TFCamembertForCausalLM"),HFr=o(" (CamemBERT model)"),UFr=l(),aM=a("li"),b6e=a("strong"),JFr=o("ctrl"),YFr=o(" \u2014 "),aU=a("a"),KFr=o("TFCTRLLMHeadModel"),ZFr=o(" (CTRL model)"),e6r=l(),nM=a("li"),v6e=a("strong"),o6r=o("gpt2"),r6r=o(" \u2014 "),nU=a("a"),t6r=o("TFGPT2LMHeadModel"),a6r=o(" (OpenAI GPT-2 model)"),n6r=l(),sM=a("li"),F6e=a("strong"),s6r=o("gptj"),l6r=o(" \u2014 "),sU=a("a"),i6r=o("TFGPTJForCausalLM"),d6r=o(" (GPT-J model)"),c6r=l(),lM=a("li"),T6e=a("strong"),f6r=o("openai-gpt"),m6r=o(" \u2014 "),lU=a("a"),g6r=o("TFOpenAIGPTLMHeadModel"),h6r=o(" (OpenAI GPT model)"),p6r=l(),iM=a("li"),M6e=a("strong"),u6r=o("opt"),_6r=o(" \u2014 "),iU=a("a"),b6r=o("TFOPTForCausalLM"),v6r=o(" (OPT model)"),F6r=l(),dM=a("li"),E6e=a("strong"),T6r=o("rembert"),M6r=o(" \u2014 "),dU=a("a"),E6r=o("TFRemBertForCausalLM"),C6r=o(" (RemBERT model)"),w6r=l(),cM=a("li"),C6e=a("strong"),A6r=o("roberta"),L6r=o(" \u2014 "),cU=a("a"),y6r=o("TFRobertaForCausalLM"),x6r=o(" (RoBERTa model)"),$6r=l(),fM=a("li"),w6e=a("strong"),k6r=o("roformer"),S6r=o(" \u2014 "),fU=a("a"),R6r=o("TFRoFormerForCausalLM"),P6r=o(" (RoFormer model)"),B6r=l(),mM=a("li"),A6e=a("strong"),I6r=o("transfo-xl"),N6r=o(" \u2014 "),mU=a("a"),q6r=o("TFTransfoXLLMHeadModel"),j6r=o(" (Transformer-XL model)"),D6r=l(),gM=a("li"),L6e=a("strong"),G6r=o("xlm"),O6r=o(" \u2014 "),gU=a("a"),V6r=o("TFXLMWithLMHeadModel"),X6r=o(" (XLM model)"),z6r=l(),hM=a("li"),y6e=a("strong"),W6r=o("xlnet"),Q6r=o(" \u2014 "),hU=a("a"),H6r=o("TFXLNetLMHeadModel"),U6r=o(" (XLNet model)"),J6r=l(),F(pM.$$.fragment),tOe=l(),ic=a("h2"),uM=a("a"),x6e=a("span"),F(b8.$$.fragment),Y6r=l(),$6e=a("span"),K6r=o("TFAutoModelForImageClassification"),aOe=l(),rr=a("div"),F(v8.$$.fragment),Z6r=l(),dc=a("p"),eTr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),pU=a("a"),oTr=o("from_pretrained()"),rTr=o(" class method or the "),uU=a("a"),tTr=o("from_config()"),aTr=o(` class
method.`),nTr=l(),F8=a("p"),sTr=o("This class cannot be instantiated directly using "),k6e=a("code"),lTr=o("__init__()"),iTr=o(" (throws an error)."),dTr=l(),Rt=a("div"),F(T8.$$.fragment),cTr=l(),S6e=a("p"),fTr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),mTr=l(),cc=a("p"),gTr=o(`Note:
Loading a model from its configuration file does `),R6e=a("strong"),hTr=o("not"),pTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_U=a("a"),uTr=o("from_pretrained()"),_Tr=o(" to load the model weights."),bTr=l(),F(_M.$$.fragment),vTr=l(),$r=a("div"),F(M8.$$.fragment),FTr=l(),P6e=a("p"),TTr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),MTr=l(),sn=a("p"),ETr=o("The model class to instantiate is selected based on the "),B6e=a("code"),CTr=o("model_type"),wTr=o(` property of the config object (either
passed as an argument or loaded from `),I6e=a("code"),ATr=o("pretrained_model_name_or_path"),LTr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N6e=a("code"),yTr=o("pretrained_model_name_or_path"),xTr=o(":"),$Tr=l(),ln=a("ul"),bM=a("li"),q6e=a("strong"),kTr=o("convnext"),STr=o(" \u2014 "),bU=a("a"),RTr=o("TFConvNextForImageClassification"),PTr=o(" (ConvNeXT model)"),BTr=l(),vM=a("li"),j6e=a("strong"),ITr=o("data2vec-vision"),NTr=o(" \u2014 "),vU=a("a"),qTr=o("TFData2VecVisionForImageClassification"),jTr=o(" (Data2VecVision model)"),DTr=l(),FM=a("li"),D6e=a("strong"),GTr=o("swin"),OTr=o(" \u2014 "),FU=a("a"),VTr=o("TFSwinForImageClassification"),XTr=o(" (Swin Transformer model)"),zTr=l(),TM=a("li"),G6e=a("strong"),WTr=o("vit"),QTr=o(" \u2014 "),TU=a("a"),HTr=o("TFViTForImageClassification"),UTr=o(" (ViT model)"),JTr=l(),F(MM.$$.fragment),nOe=l(),fc=a("h2"),EM=a("a"),O6e=a("span"),F(E8.$$.fragment),YTr=l(),V6e=a("span"),KTr=o("TFAutoModelForMaskedLM"),sOe=l(),tr=a("div"),F(C8.$$.fragment),ZTr=l(),mc=a("p"),e7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),MU=a("a"),o7r=o("from_pretrained()"),r7r=o(" class method or the "),EU=a("a"),t7r=o("from_config()"),a7r=o(` class
method.`),n7r=l(),w8=a("p"),s7r=o("This class cannot be instantiated directly using "),X6e=a("code"),l7r=o("__init__()"),i7r=o(" (throws an error)."),d7r=l(),Pt=a("div"),F(A8.$$.fragment),c7r=l(),z6e=a("p"),f7r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),m7r=l(),gc=a("p"),g7r=o(`Note:
Loading a model from its configuration file does `),W6e=a("strong"),h7r=o("not"),p7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CU=a("a"),u7r=o("from_pretrained()"),_7r=o(" to load the model weights."),b7r=l(),F(CM.$$.fragment),v7r=l(),kr=a("div"),F(L8.$$.fragment),F7r=l(),Q6e=a("p"),T7r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),M7r=l(),dn=a("p"),E7r=o("The model class to instantiate is selected based on the "),H6e=a("code"),C7r=o("model_type"),w7r=o(` property of the config object (either
passed as an argument or loaded from `),U6e=a("code"),A7r=o("pretrained_model_name_or_path"),L7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J6e=a("code"),y7r=o("pretrained_model_name_or_path"),x7r=o(":"),$7r=l(),ie=a("ul"),wM=a("li"),Y6e=a("strong"),k7r=o("albert"),S7r=o(" \u2014 "),wU=a("a"),R7r=o("TFAlbertForMaskedLM"),P7r=o(" (ALBERT model)"),B7r=l(),AM=a("li"),K6e=a("strong"),I7r=o("bert"),N7r=o(" \u2014 "),AU=a("a"),q7r=o("TFBertForMaskedLM"),j7r=o(" (BERT model)"),D7r=l(),LM=a("li"),Z6e=a("strong"),G7r=o("camembert"),O7r=o(" \u2014 "),LU=a("a"),V7r=o("TFCamembertForMaskedLM"),X7r=o(" (CamemBERT model)"),z7r=l(),yM=a("li"),eTe=a("strong"),W7r=o("convbert"),Q7r=o(" \u2014 "),yU=a("a"),H7r=o("TFConvBertForMaskedLM"),U7r=o(" (ConvBERT model)"),J7r=l(),xM=a("li"),oTe=a("strong"),Y7r=o("deberta"),K7r=o(" \u2014 "),xU=a("a"),Z7r=o("TFDebertaForMaskedLM"),e9r=o(" (DeBERTa model)"),o9r=l(),$M=a("li"),rTe=a("strong"),r9r=o("deberta-v2"),t9r=o(" \u2014 "),$U=a("a"),a9r=o("TFDebertaV2ForMaskedLM"),n9r=o(" (DeBERTa-v2 model)"),s9r=l(),kM=a("li"),tTe=a("strong"),l9r=o("distilbert"),i9r=o(" \u2014 "),kU=a("a"),d9r=o("TFDistilBertForMaskedLM"),c9r=o(" (DistilBERT model)"),f9r=l(),SM=a("li"),aTe=a("strong"),m9r=o("electra"),g9r=o(" \u2014 "),SU=a("a"),h9r=o("TFElectraForMaskedLM"),p9r=o(" (ELECTRA model)"),u9r=l(),RM=a("li"),nTe=a("strong"),_9r=o("flaubert"),b9r=o(" \u2014 "),RU=a("a"),v9r=o("TFFlaubertWithLMHeadModel"),F9r=o(" (FlauBERT model)"),T9r=l(),PM=a("li"),sTe=a("strong"),M9r=o("funnel"),E9r=o(" \u2014 "),PU=a("a"),C9r=o("TFFunnelForMaskedLM"),w9r=o(" (Funnel Transformer model)"),A9r=l(),BM=a("li"),lTe=a("strong"),L9r=o("layoutlm"),y9r=o(" \u2014 "),BU=a("a"),x9r=o("TFLayoutLMForMaskedLM"),$9r=o(" (LayoutLM model)"),k9r=l(),IM=a("li"),iTe=a("strong"),S9r=o("longformer"),R9r=o(" \u2014 "),IU=a("a"),P9r=o("TFLongformerForMaskedLM"),B9r=o(" (Longformer model)"),I9r=l(),NM=a("li"),dTe=a("strong"),N9r=o("mobilebert"),q9r=o(" \u2014 "),NU=a("a"),j9r=o("TFMobileBertForMaskedLM"),D9r=o(" (MobileBERT model)"),G9r=l(),qM=a("li"),cTe=a("strong"),O9r=o("mpnet"),V9r=o(" \u2014 "),qU=a("a"),X9r=o("TFMPNetForMaskedLM"),z9r=o(" (MPNet model)"),W9r=l(),jM=a("li"),fTe=a("strong"),Q9r=o("rembert"),H9r=o(" \u2014 "),jU=a("a"),U9r=o("TFRemBertForMaskedLM"),J9r=o(" (RemBERT model)"),Y9r=l(),DM=a("li"),mTe=a("strong"),K9r=o("roberta"),Z9r=o(" \u2014 "),DU=a("a"),eMr=o("TFRobertaForMaskedLM"),oMr=o(" (RoBERTa model)"),rMr=l(),GM=a("li"),gTe=a("strong"),tMr=o("roformer"),aMr=o(" \u2014 "),GU=a("a"),nMr=o("TFRoFormerForMaskedLM"),sMr=o(" (RoFormer model)"),lMr=l(),OM=a("li"),hTe=a("strong"),iMr=o("tapas"),dMr=o(" \u2014 "),OU=a("a"),cMr=o("TFTapasForMaskedLM"),fMr=o(" (TAPAS model)"),mMr=l(),VM=a("li"),pTe=a("strong"),gMr=o("xlm"),hMr=o(" \u2014 "),VU=a("a"),pMr=o("TFXLMWithLMHeadModel"),uMr=o(" (XLM model)"),_Mr=l(),XM=a("li"),uTe=a("strong"),bMr=o("xlm-roberta"),vMr=o(" \u2014 "),XU=a("a"),FMr=o("TFXLMRobertaForMaskedLM"),TMr=o(" (XLM-RoBERTa model)"),MMr=l(),F(zM.$$.fragment),lOe=l(),hc=a("h2"),WM=a("a"),_Te=a("span"),F(y8.$$.fragment),EMr=l(),bTe=a("span"),CMr=o("TFAutoModelForSeq2SeqLM"),iOe=l(),ar=a("div"),F(x8.$$.fragment),wMr=l(),pc=a("p"),AMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),zU=a("a"),LMr=o("from_pretrained()"),yMr=o(" class method or the "),WU=a("a"),xMr=o("from_config()"),$Mr=o(` class
method.`),kMr=l(),$8=a("p"),SMr=o("This class cannot be instantiated directly using "),vTe=a("code"),RMr=o("__init__()"),PMr=o(" (throws an error)."),BMr=l(),Bt=a("div"),F(k8.$$.fragment),IMr=l(),FTe=a("p"),NMr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),qMr=l(),uc=a("p"),jMr=o(`Note:
Loading a model from its configuration file does `),TTe=a("strong"),DMr=o("not"),GMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QU=a("a"),OMr=o("from_pretrained()"),VMr=o(" to load the model weights."),XMr=l(),F(QM.$$.fragment),zMr=l(),Sr=a("div"),F(S8.$$.fragment),WMr=l(),MTe=a("p"),QMr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),HMr=l(),cn=a("p"),UMr=o("The model class to instantiate is selected based on the "),ETe=a("code"),JMr=o("model_type"),YMr=o(` property of the config object (either
passed as an argument or loaded from `),CTe=a("code"),KMr=o("pretrained_model_name_or_path"),ZMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wTe=a("code"),e4r=o("pretrained_model_name_or_path"),o4r=o(":"),r4r=l(),ye=a("ul"),HM=a("li"),ATe=a("strong"),t4r=o("bart"),a4r=o(" \u2014 "),HU=a("a"),n4r=o("TFBartForConditionalGeneration"),s4r=o(" (BART model)"),l4r=l(),UM=a("li"),LTe=a("strong"),i4r=o("blenderbot"),d4r=o(" \u2014 "),UU=a("a"),c4r=o("TFBlenderbotForConditionalGeneration"),f4r=o(" (Blenderbot model)"),m4r=l(),JM=a("li"),yTe=a("strong"),g4r=o("blenderbot-small"),h4r=o(" \u2014 "),JU=a("a"),p4r=o("TFBlenderbotSmallForConditionalGeneration"),u4r=o(" (BlenderbotSmall model)"),_4r=l(),YM=a("li"),xTe=a("strong"),b4r=o("encoder-decoder"),v4r=o(" \u2014 "),YU=a("a"),F4r=o("TFEncoderDecoderModel"),T4r=o(" (Encoder decoder model)"),M4r=l(),KM=a("li"),$Te=a("strong"),E4r=o("led"),C4r=o(" \u2014 "),KU=a("a"),w4r=o("TFLEDForConditionalGeneration"),A4r=o(" (LED model)"),L4r=l(),ZM=a("li"),kTe=a("strong"),y4r=o("marian"),x4r=o(" \u2014 "),ZU=a("a"),$4r=o("TFMarianMTModel"),k4r=o(" (Marian model)"),S4r=l(),e4=a("li"),STe=a("strong"),R4r=o("mbart"),P4r=o(" \u2014 "),eJ=a("a"),B4r=o("TFMBartForConditionalGeneration"),I4r=o(" (mBART model)"),N4r=l(),o4=a("li"),RTe=a("strong"),q4r=o("mt5"),j4r=o(" \u2014 "),oJ=a("a"),D4r=o("TFMT5ForConditionalGeneration"),G4r=o(" (MT5 model)"),O4r=l(),r4=a("li"),PTe=a("strong"),V4r=o("pegasus"),X4r=o(" \u2014 "),rJ=a("a"),z4r=o("TFPegasusForConditionalGeneration"),W4r=o(" (Pegasus model)"),Q4r=l(),t4=a("li"),BTe=a("strong"),H4r=o("t5"),U4r=o(" \u2014 "),tJ=a("a"),J4r=o("TFT5ForConditionalGeneration"),Y4r=o(" (T5 model)"),K4r=l(),F(a4.$$.fragment),dOe=l(),_c=a("h2"),n4=a("a"),ITe=a("span"),F(R8.$$.fragment),Z4r=l(),NTe=a("span"),eEr=o("TFAutoModelForSequenceClassification"),cOe=l(),nr=a("div"),F(P8.$$.fragment),oEr=l(),bc=a("p"),rEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),aJ=a("a"),tEr=o("from_pretrained()"),aEr=o(" class method or the "),nJ=a("a"),nEr=o("from_config()"),sEr=o(` class
method.`),lEr=l(),B8=a("p"),iEr=o("This class cannot be instantiated directly using "),qTe=a("code"),dEr=o("__init__()"),cEr=o(" (throws an error)."),fEr=l(),It=a("div"),F(I8.$$.fragment),mEr=l(),jTe=a("p"),gEr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),hEr=l(),vc=a("p"),pEr=o(`Note:
Loading a model from its configuration file does `),DTe=a("strong"),uEr=o("not"),_Er=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sJ=a("a"),bEr=o("from_pretrained()"),vEr=o(" to load the model weights."),FEr=l(),F(s4.$$.fragment),TEr=l(),Rr=a("div"),F(N8.$$.fragment),MEr=l(),GTe=a("p"),EEr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),CEr=l(),fn=a("p"),wEr=o("The model class to instantiate is selected based on the "),OTe=a("code"),AEr=o("model_type"),LEr=o(` property of the config object (either
passed as an argument or loaded from `),VTe=a("code"),yEr=o("pretrained_model_name_or_path"),xEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),XTe=a("code"),$Er=o("pretrained_model_name_or_path"),kEr=o(":"),SEr=l(),te=a("ul"),l4=a("li"),zTe=a("strong"),REr=o("albert"),PEr=o(" \u2014 "),lJ=a("a"),BEr=o("TFAlbertForSequenceClassification"),IEr=o(" (ALBERT model)"),NEr=l(),i4=a("li"),WTe=a("strong"),qEr=o("bert"),jEr=o(" \u2014 "),iJ=a("a"),DEr=o("TFBertForSequenceClassification"),GEr=o(" (BERT model)"),OEr=l(),d4=a("li"),QTe=a("strong"),VEr=o("camembert"),XEr=o(" \u2014 "),dJ=a("a"),zEr=o("TFCamembertForSequenceClassification"),WEr=o(" (CamemBERT model)"),QEr=l(),c4=a("li"),HTe=a("strong"),HEr=o("convbert"),UEr=o(" \u2014 "),cJ=a("a"),JEr=o("TFConvBertForSequenceClassification"),YEr=o(" (ConvBERT model)"),KEr=l(),f4=a("li"),UTe=a("strong"),ZEr=o("ctrl"),eCr=o(" \u2014 "),fJ=a("a"),oCr=o("TFCTRLForSequenceClassification"),rCr=o(" (CTRL model)"),tCr=l(),m4=a("li"),JTe=a("strong"),aCr=o("deberta"),nCr=o(" \u2014 "),mJ=a("a"),sCr=o("TFDebertaForSequenceClassification"),lCr=o(" (DeBERTa model)"),iCr=l(),g4=a("li"),YTe=a("strong"),dCr=o("deberta-v2"),cCr=o(" \u2014 "),gJ=a("a"),fCr=o("TFDebertaV2ForSequenceClassification"),mCr=o(" (DeBERTa-v2 model)"),gCr=l(),h4=a("li"),KTe=a("strong"),hCr=o("distilbert"),pCr=o(" \u2014 "),hJ=a("a"),uCr=o("TFDistilBertForSequenceClassification"),_Cr=o(" (DistilBERT model)"),bCr=l(),p4=a("li"),ZTe=a("strong"),vCr=o("electra"),FCr=o(" \u2014 "),pJ=a("a"),TCr=o("TFElectraForSequenceClassification"),MCr=o(" (ELECTRA model)"),ECr=l(),u4=a("li"),e7e=a("strong"),CCr=o("flaubert"),wCr=o(" \u2014 "),uJ=a("a"),ACr=o("TFFlaubertForSequenceClassification"),LCr=o(" (FlauBERT model)"),yCr=l(),_4=a("li"),o7e=a("strong"),xCr=o("funnel"),$Cr=o(" \u2014 "),_J=a("a"),kCr=o("TFFunnelForSequenceClassification"),SCr=o(" (Funnel Transformer model)"),RCr=l(),b4=a("li"),r7e=a("strong"),PCr=o("gpt2"),BCr=o(" \u2014 "),bJ=a("a"),ICr=o("TFGPT2ForSequenceClassification"),NCr=o(" (OpenAI GPT-2 model)"),qCr=l(),v4=a("li"),t7e=a("strong"),jCr=o("gptj"),DCr=o(" \u2014 "),vJ=a("a"),GCr=o("TFGPTJForSequenceClassification"),OCr=o(" (GPT-J model)"),VCr=l(),F4=a("li"),a7e=a("strong"),XCr=o("layoutlm"),zCr=o(" \u2014 "),FJ=a("a"),WCr=o("TFLayoutLMForSequenceClassification"),QCr=o(" (LayoutLM model)"),HCr=l(),T4=a("li"),n7e=a("strong"),UCr=o("longformer"),JCr=o(" \u2014 "),TJ=a("a"),YCr=o("TFLongformerForSequenceClassification"),KCr=o(" (Longformer model)"),ZCr=l(),M4=a("li"),s7e=a("strong"),e5r=o("mobilebert"),o5r=o(" \u2014 "),MJ=a("a"),r5r=o("TFMobileBertForSequenceClassification"),t5r=o(" (MobileBERT model)"),a5r=l(),E4=a("li"),l7e=a("strong"),n5r=o("mpnet"),s5r=o(" \u2014 "),EJ=a("a"),l5r=o("TFMPNetForSequenceClassification"),i5r=o(" (MPNet model)"),d5r=l(),C4=a("li"),i7e=a("strong"),c5r=o("openai-gpt"),f5r=o(" \u2014 "),CJ=a("a"),m5r=o("TFOpenAIGPTForSequenceClassification"),g5r=o(" (OpenAI GPT model)"),h5r=l(),w4=a("li"),d7e=a("strong"),p5r=o("rembert"),u5r=o(" \u2014 "),wJ=a("a"),_5r=o("TFRemBertForSequenceClassification"),b5r=o(" (RemBERT model)"),v5r=l(),A4=a("li"),c7e=a("strong"),F5r=o("roberta"),T5r=o(" \u2014 "),AJ=a("a"),M5r=o("TFRobertaForSequenceClassification"),E5r=o(" (RoBERTa model)"),C5r=l(),L4=a("li"),f7e=a("strong"),w5r=o("roformer"),A5r=o(" \u2014 "),LJ=a("a"),L5r=o("TFRoFormerForSequenceClassification"),y5r=o(" (RoFormer model)"),x5r=l(),y4=a("li"),m7e=a("strong"),$5r=o("tapas"),k5r=o(" \u2014 "),yJ=a("a"),S5r=o("TFTapasForSequenceClassification"),R5r=o(" (TAPAS model)"),P5r=l(),x4=a("li"),g7e=a("strong"),B5r=o("transfo-xl"),I5r=o(" \u2014 "),xJ=a("a"),N5r=o("TFTransfoXLForSequenceClassification"),q5r=o(" (Transformer-XL model)"),j5r=l(),$4=a("li"),h7e=a("strong"),D5r=o("xlm"),G5r=o(" \u2014 "),$J=a("a"),O5r=o("TFXLMForSequenceClassification"),V5r=o(" (XLM model)"),X5r=l(),k4=a("li"),p7e=a("strong"),z5r=o("xlm-roberta"),W5r=o(" \u2014 "),kJ=a("a"),Q5r=o("TFXLMRobertaForSequenceClassification"),H5r=o(" (XLM-RoBERTa model)"),U5r=l(),S4=a("li"),u7e=a("strong"),J5r=o("xlnet"),Y5r=o(" \u2014 "),SJ=a("a"),K5r=o("TFXLNetForSequenceClassification"),Z5r=o(" (XLNet model)"),e3r=l(),F(R4.$$.fragment),fOe=l(),Fc=a("h2"),P4=a("a"),_7e=a("span"),F(q8.$$.fragment),o3r=l(),b7e=a("span"),r3r=o("TFAutoModelForMultipleChoice"),mOe=l(),sr=a("div"),F(j8.$$.fragment),t3r=l(),Tc=a("p"),a3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),RJ=a("a"),n3r=o("from_pretrained()"),s3r=o(" class method or the "),PJ=a("a"),l3r=o("from_config()"),i3r=o(` class
method.`),d3r=l(),D8=a("p"),c3r=o("This class cannot be instantiated directly using "),v7e=a("code"),f3r=o("__init__()"),m3r=o(" (throws an error)."),g3r=l(),Nt=a("div"),F(G8.$$.fragment),h3r=l(),F7e=a("p"),p3r=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),u3r=l(),Mc=a("p"),_3r=o(`Note:
Loading a model from its configuration file does `),T7e=a("strong"),b3r=o("not"),v3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BJ=a("a"),F3r=o("from_pretrained()"),T3r=o(" to load the model weights."),M3r=l(),F(B4.$$.fragment),E3r=l(),Pr=a("div"),F(O8.$$.fragment),C3r=l(),M7e=a("p"),w3r=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),A3r=l(),mn=a("p"),L3r=o("The model class to instantiate is selected based on the "),E7e=a("code"),y3r=o("model_type"),x3r=o(` property of the config object (either
passed as an argument or loaded from `),C7e=a("code"),$3r=o("pretrained_model_name_or_path"),k3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w7e=a("code"),S3r=o("pretrained_model_name_or_path"),R3r=o(":"),P3r=l(),ue=a("ul"),I4=a("li"),A7e=a("strong"),B3r=o("albert"),I3r=o(" \u2014 "),IJ=a("a"),N3r=o("TFAlbertForMultipleChoice"),q3r=o(" (ALBERT model)"),j3r=l(),N4=a("li"),L7e=a("strong"),D3r=o("bert"),G3r=o(" \u2014 "),NJ=a("a"),O3r=o("TFBertForMultipleChoice"),V3r=o(" (BERT model)"),X3r=l(),q4=a("li"),y7e=a("strong"),z3r=o("camembert"),W3r=o(" \u2014 "),qJ=a("a"),Q3r=o("TFCamembertForMultipleChoice"),H3r=o(" (CamemBERT model)"),U3r=l(),j4=a("li"),x7e=a("strong"),J3r=o("convbert"),Y3r=o(" \u2014 "),jJ=a("a"),K3r=o("TFConvBertForMultipleChoice"),Z3r=o(" (ConvBERT model)"),e0r=l(),D4=a("li"),$7e=a("strong"),o0r=o("distilbert"),r0r=o(" \u2014 "),DJ=a("a"),t0r=o("TFDistilBertForMultipleChoice"),a0r=o(" (DistilBERT model)"),n0r=l(),G4=a("li"),k7e=a("strong"),s0r=o("electra"),l0r=o(" \u2014 "),GJ=a("a"),i0r=o("TFElectraForMultipleChoice"),d0r=o(" (ELECTRA model)"),c0r=l(),O4=a("li"),S7e=a("strong"),f0r=o("flaubert"),m0r=o(" \u2014 "),OJ=a("a"),g0r=o("TFFlaubertForMultipleChoice"),h0r=o(" (FlauBERT model)"),p0r=l(),V4=a("li"),R7e=a("strong"),u0r=o("funnel"),_0r=o(" \u2014 "),VJ=a("a"),b0r=o("TFFunnelForMultipleChoice"),v0r=o(" (Funnel Transformer model)"),F0r=l(),X4=a("li"),P7e=a("strong"),T0r=o("longformer"),M0r=o(" \u2014 "),XJ=a("a"),E0r=o("TFLongformerForMultipleChoice"),C0r=o(" (Longformer model)"),w0r=l(),z4=a("li"),B7e=a("strong"),A0r=o("mobilebert"),L0r=o(" \u2014 "),zJ=a("a"),y0r=o("TFMobileBertForMultipleChoice"),x0r=o(" (MobileBERT model)"),$0r=l(),W4=a("li"),I7e=a("strong"),k0r=o("mpnet"),S0r=o(" \u2014 "),WJ=a("a"),R0r=o("TFMPNetForMultipleChoice"),P0r=o(" (MPNet model)"),B0r=l(),Q4=a("li"),N7e=a("strong"),I0r=o("rembert"),N0r=o(" \u2014 "),QJ=a("a"),q0r=o("TFRemBertForMultipleChoice"),j0r=o(" (RemBERT model)"),D0r=l(),H4=a("li"),q7e=a("strong"),G0r=o("roberta"),O0r=o(" \u2014 "),HJ=a("a"),V0r=o("TFRobertaForMultipleChoice"),X0r=o(" (RoBERTa model)"),z0r=l(),U4=a("li"),j7e=a("strong"),W0r=o("roformer"),Q0r=o(" \u2014 "),UJ=a("a"),H0r=o("TFRoFormerForMultipleChoice"),U0r=o(" (RoFormer model)"),J0r=l(),J4=a("li"),D7e=a("strong"),Y0r=o("xlm"),K0r=o(" \u2014 "),JJ=a("a"),Z0r=o("TFXLMForMultipleChoice"),ewr=o(" (XLM model)"),owr=l(),Y4=a("li"),G7e=a("strong"),rwr=o("xlm-roberta"),twr=o(" \u2014 "),YJ=a("a"),awr=o("TFXLMRobertaForMultipleChoice"),nwr=o(" (XLM-RoBERTa model)"),swr=l(),K4=a("li"),O7e=a("strong"),lwr=o("xlnet"),iwr=o(" \u2014 "),KJ=a("a"),dwr=o("TFXLNetForMultipleChoice"),cwr=o(" (XLNet model)"),fwr=l(),F(Z4.$$.fragment),gOe=l(),Ec=a("h2"),eE=a("a"),V7e=a("span"),F(V8.$$.fragment),mwr=l(),X7e=a("span"),gwr=o("TFAutoModelForNextSentencePrediction"),hOe=l(),lr=a("div"),F(X8.$$.fragment),hwr=l(),Cc=a("p"),pwr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),ZJ=a("a"),uwr=o("from_pretrained()"),_wr=o(" class method or the "),eY=a("a"),bwr=o("from_config()"),vwr=o(` class
method.`),Fwr=l(),z8=a("p"),Twr=o("This class cannot be instantiated directly using "),z7e=a("code"),Mwr=o("__init__()"),Ewr=o(" (throws an error)."),Cwr=l(),qt=a("div"),F(W8.$$.fragment),wwr=l(),W7e=a("p"),Awr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Lwr=l(),wc=a("p"),ywr=o(`Note:
Loading a model from its configuration file does `),Q7e=a("strong"),xwr=o("not"),$wr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oY=a("a"),kwr=o("from_pretrained()"),Swr=o(" to load the model weights."),Rwr=l(),F(oE.$$.fragment),Pwr=l(),Br=a("div"),F(Q8.$$.fragment),Bwr=l(),H7e=a("p"),Iwr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Nwr=l(),gn=a("p"),qwr=o("The model class to instantiate is selected based on the "),U7e=a("code"),jwr=o("model_type"),Dwr=o(` property of the config object (either
passed as an argument or loaded from `),J7e=a("code"),Gwr=o("pretrained_model_name_or_path"),Owr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y7e=a("code"),Vwr=o("pretrained_model_name_or_path"),Xwr=o(":"),zwr=l(),H8=a("ul"),rE=a("li"),K7e=a("strong"),Wwr=o("bert"),Qwr=o(" \u2014 "),rY=a("a"),Hwr=o("TFBertForNextSentencePrediction"),Uwr=o(" (BERT model)"),Jwr=l(),tE=a("li"),Z7e=a("strong"),Ywr=o("mobilebert"),Kwr=o(" \u2014 "),tY=a("a"),Zwr=o("TFMobileBertForNextSentencePrediction"),eAr=o(" (MobileBERT model)"),oAr=l(),F(aE.$$.fragment),pOe=l(),Ac=a("h2"),nE=a("a"),e9e=a("span"),F(U8.$$.fragment),rAr=l(),o9e=a("span"),tAr=o("TFAutoModelForTableQuestionAnswering"),uOe=l(),ir=a("div"),F(J8.$$.fragment),aAr=l(),Lc=a("p"),nAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),aY=a("a"),sAr=o("from_pretrained()"),lAr=o(" class method or the "),nY=a("a"),iAr=o("from_config()"),dAr=o(` class
method.`),cAr=l(),Y8=a("p"),fAr=o("This class cannot be instantiated directly using "),r9e=a("code"),mAr=o("__init__()"),gAr=o(" (throws an error)."),hAr=l(),jt=a("div"),F(K8.$$.fragment),pAr=l(),t9e=a("p"),uAr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),_Ar=l(),yc=a("p"),bAr=o(`Note:
Loading a model from its configuration file does `),a9e=a("strong"),vAr=o("not"),FAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sY=a("a"),TAr=o("from_pretrained()"),MAr=o(" to load the model weights."),EAr=l(),F(sE.$$.fragment),CAr=l(),Ir=a("div"),F(Z8.$$.fragment),wAr=l(),n9e=a("p"),AAr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),LAr=l(),hn=a("p"),yAr=o("The model class to instantiate is selected based on the "),s9e=a("code"),xAr=o("model_type"),$Ar=o(` property of the config object (either
passed as an argument or loaded from `),l9e=a("code"),kAr=o("pretrained_model_name_or_path"),SAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i9e=a("code"),RAr=o("pretrained_model_name_or_path"),PAr=o(":"),BAr=l(),d9e=a("ul"),lE=a("li"),c9e=a("strong"),IAr=o("tapas"),NAr=o(" \u2014 "),lY=a("a"),qAr=o("TFTapasForQuestionAnswering"),jAr=o(" (TAPAS model)"),DAr=l(),F(iE.$$.fragment),_Oe=l(),xc=a("h2"),dE=a("a"),f9e=a("span"),F(ex.$$.fragment),GAr=l(),m9e=a("span"),OAr=o("TFAutoModelForTokenClassification"),bOe=l(),dr=a("div"),F(ox.$$.fragment),VAr=l(),$c=a("p"),XAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),iY=a("a"),zAr=o("from_pretrained()"),WAr=o(" class method or the "),dY=a("a"),QAr=o("from_config()"),HAr=o(` class
method.`),UAr=l(),rx=a("p"),JAr=o("This class cannot be instantiated directly using "),g9e=a("code"),YAr=o("__init__()"),KAr=o(" (throws an error)."),ZAr=l(),Dt=a("div"),F(tx.$$.fragment),eLr=l(),h9e=a("p"),oLr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),rLr=l(),kc=a("p"),tLr=o(`Note:
Loading a model from its configuration file does `),p9e=a("strong"),aLr=o("not"),nLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cY=a("a"),sLr=o("from_pretrained()"),lLr=o(" to load the model weights."),iLr=l(),F(cE.$$.fragment),dLr=l(),Nr=a("div"),F(ax.$$.fragment),cLr=l(),u9e=a("p"),fLr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),mLr=l(),pn=a("p"),gLr=o("The model class to instantiate is selected based on the "),_9e=a("code"),hLr=o("model_type"),pLr=o(` property of the config object (either
passed as an argument or loaded from `),b9e=a("code"),uLr=o("pretrained_model_name_or_path"),_Lr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v9e=a("code"),bLr=o("pretrained_model_name_or_path"),vLr=o(":"),FLr=l(),de=a("ul"),fE=a("li"),F9e=a("strong"),TLr=o("albert"),MLr=o(" \u2014 "),fY=a("a"),ELr=o("TFAlbertForTokenClassification"),CLr=o(" (ALBERT model)"),wLr=l(),mE=a("li"),T9e=a("strong"),ALr=o("bert"),LLr=o(" \u2014 "),mY=a("a"),yLr=o("TFBertForTokenClassification"),xLr=o(" (BERT model)"),$Lr=l(),gE=a("li"),M9e=a("strong"),kLr=o("camembert"),SLr=o(" \u2014 "),gY=a("a"),RLr=o("TFCamembertForTokenClassification"),PLr=o(" (CamemBERT model)"),BLr=l(),hE=a("li"),E9e=a("strong"),ILr=o("convbert"),NLr=o(" \u2014 "),hY=a("a"),qLr=o("TFConvBertForTokenClassification"),jLr=o(" (ConvBERT model)"),DLr=l(),pE=a("li"),C9e=a("strong"),GLr=o("deberta"),OLr=o(" \u2014 "),pY=a("a"),VLr=o("TFDebertaForTokenClassification"),XLr=o(" (DeBERTa model)"),zLr=l(),uE=a("li"),w9e=a("strong"),WLr=o("deberta-v2"),QLr=o(" \u2014 "),uY=a("a"),HLr=o("TFDebertaV2ForTokenClassification"),ULr=o(" (DeBERTa-v2 model)"),JLr=l(),_E=a("li"),A9e=a("strong"),YLr=o("distilbert"),KLr=o(" \u2014 "),_Y=a("a"),ZLr=o("TFDistilBertForTokenClassification"),eyr=o(" (DistilBERT model)"),oyr=l(),bE=a("li"),L9e=a("strong"),ryr=o("electra"),tyr=o(" \u2014 "),bY=a("a"),ayr=o("TFElectraForTokenClassification"),nyr=o(" (ELECTRA model)"),syr=l(),vE=a("li"),y9e=a("strong"),lyr=o("flaubert"),iyr=o(" \u2014 "),vY=a("a"),dyr=o("TFFlaubertForTokenClassification"),cyr=o(" (FlauBERT model)"),fyr=l(),FE=a("li"),x9e=a("strong"),myr=o("funnel"),gyr=o(" \u2014 "),FY=a("a"),hyr=o("TFFunnelForTokenClassification"),pyr=o(" (Funnel Transformer model)"),uyr=l(),TE=a("li"),$9e=a("strong"),_yr=o("layoutlm"),byr=o(" \u2014 "),TY=a("a"),vyr=o("TFLayoutLMForTokenClassification"),Fyr=o(" (LayoutLM model)"),Tyr=l(),ME=a("li"),k9e=a("strong"),Myr=o("longformer"),Eyr=o(" \u2014 "),MY=a("a"),Cyr=o("TFLongformerForTokenClassification"),wyr=o(" (Longformer model)"),Ayr=l(),EE=a("li"),S9e=a("strong"),Lyr=o("mobilebert"),yyr=o(" \u2014 "),EY=a("a"),xyr=o("TFMobileBertForTokenClassification"),$yr=o(" (MobileBERT model)"),kyr=l(),CE=a("li"),R9e=a("strong"),Syr=o("mpnet"),Ryr=o(" \u2014 "),CY=a("a"),Pyr=o("TFMPNetForTokenClassification"),Byr=o(" (MPNet model)"),Iyr=l(),wE=a("li"),P9e=a("strong"),Nyr=o("rembert"),qyr=o(" \u2014 "),wY=a("a"),jyr=o("TFRemBertForTokenClassification"),Dyr=o(" (RemBERT model)"),Gyr=l(),AE=a("li"),B9e=a("strong"),Oyr=o("roberta"),Vyr=o(" \u2014 "),AY=a("a"),Xyr=o("TFRobertaForTokenClassification"),zyr=o(" (RoBERTa model)"),Wyr=l(),LE=a("li"),I9e=a("strong"),Qyr=o("roformer"),Hyr=o(" \u2014 "),LY=a("a"),Uyr=o("TFRoFormerForTokenClassification"),Jyr=o(" (RoFormer model)"),Yyr=l(),yE=a("li"),N9e=a("strong"),Kyr=o("xlm"),Zyr=o(" \u2014 "),yY=a("a"),e8r=o("TFXLMForTokenClassification"),o8r=o(" (XLM model)"),r8r=l(),xE=a("li"),q9e=a("strong"),t8r=o("xlm-roberta"),a8r=o(" \u2014 "),xY=a("a"),n8r=o("TFXLMRobertaForTokenClassification"),s8r=o(" (XLM-RoBERTa model)"),l8r=l(),$E=a("li"),j9e=a("strong"),i8r=o("xlnet"),d8r=o(" \u2014 "),$Y=a("a"),c8r=o("TFXLNetForTokenClassification"),f8r=o(" (XLNet model)"),m8r=l(),F(kE.$$.fragment),vOe=l(),Sc=a("h2"),SE=a("a"),D9e=a("span"),F(nx.$$.fragment),g8r=l(),G9e=a("span"),h8r=o("TFAutoModelForQuestionAnswering"),FOe=l(),cr=a("div"),F(sx.$$.fragment),p8r=l(),Rc=a("p"),u8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),kY=a("a"),_8r=o("from_pretrained()"),b8r=o(" class method or the "),SY=a("a"),v8r=o("from_config()"),F8r=o(` class
method.`),T8r=l(),lx=a("p"),M8r=o("This class cannot be instantiated directly using "),O9e=a("code"),E8r=o("__init__()"),C8r=o(" (throws an error)."),w8r=l(),Gt=a("div"),F(ix.$$.fragment),A8r=l(),V9e=a("p"),L8r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),y8r=l(),Pc=a("p"),x8r=o(`Note:
Loading a model from its configuration file does `),X9e=a("strong"),$8r=o("not"),k8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RY=a("a"),S8r=o("from_pretrained()"),R8r=o(" to load the model weights."),P8r=l(),F(RE.$$.fragment),B8r=l(),qr=a("div"),F(dx.$$.fragment),I8r=l(),z9e=a("p"),N8r=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),q8r=l(),un=a("p"),j8r=o("The model class to instantiate is selected based on the "),W9e=a("code"),D8r=o("model_type"),G8r=o(` property of the config object (either
passed as an argument or loaded from `),Q9e=a("code"),O8r=o("pretrained_model_name_or_path"),V8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H9e=a("code"),X8r=o("pretrained_model_name_or_path"),z8r=o(":"),W8r=l(),ce=a("ul"),PE=a("li"),U9e=a("strong"),Q8r=o("albert"),H8r=o(" \u2014 "),PY=a("a"),U8r=o("TFAlbertForQuestionAnswering"),J8r=o(" (ALBERT model)"),Y8r=l(),BE=a("li"),J9e=a("strong"),K8r=o("bert"),Z8r=o(" \u2014 "),BY=a("a"),exr=o("TFBertForQuestionAnswering"),oxr=o(" (BERT model)"),rxr=l(),IE=a("li"),Y9e=a("strong"),txr=o("camembert"),axr=o(" \u2014 "),IY=a("a"),nxr=o("TFCamembertForQuestionAnswering"),sxr=o(" (CamemBERT model)"),lxr=l(),NE=a("li"),K9e=a("strong"),ixr=o("convbert"),dxr=o(" \u2014 "),NY=a("a"),cxr=o("TFConvBertForQuestionAnswering"),fxr=o(" (ConvBERT model)"),mxr=l(),qE=a("li"),Z9e=a("strong"),gxr=o("deberta"),hxr=o(" \u2014 "),qY=a("a"),pxr=o("TFDebertaForQuestionAnswering"),uxr=o(" (DeBERTa model)"),_xr=l(),jE=a("li"),eMe=a("strong"),bxr=o("deberta-v2"),vxr=o(" \u2014 "),jY=a("a"),Fxr=o("TFDebertaV2ForQuestionAnswering"),Txr=o(" (DeBERTa-v2 model)"),Mxr=l(),DE=a("li"),oMe=a("strong"),Exr=o("distilbert"),Cxr=o(" \u2014 "),DY=a("a"),wxr=o("TFDistilBertForQuestionAnswering"),Axr=o(" (DistilBERT model)"),Lxr=l(),GE=a("li"),rMe=a("strong"),yxr=o("electra"),xxr=o(" \u2014 "),GY=a("a"),$xr=o("TFElectraForQuestionAnswering"),kxr=o(" (ELECTRA model)"),Sxr=l(),OE=a("li"),tMe=a("strong"),Rxr=o("flaubert"),Pxr=o(" \u2014 "),OY=a("a"),Bxr=o("TFFlaubertForQuestionAnsweringSimple"),Ixr=o(" (FlauBERT model)"),Nxr=l(),VE=a("li"),aMe=a("strong"),qxr=o("funnel"),jxr=o(" \u2014 "),VY=a("a"),Dxr=o("TFFunnelForQuestionAnswering"),Gxr=o(" (Funnel Transformer model)"),Oxr=l(),XE=a("li"),nMe=a("strong"),Vxr=o("gptj"),Xxr=o(" \u2014 "),XY=a("a"),zxr=o("TFGPTJForQuestionAnswering"),Wxr=o(" (GPT-J model)"),Qxr=l(),zE=a("li"),sMe=a("strong"),Hxr=o("longformer"),Uxr=o(" \u2014 "),zY=a("a"),Jxr=o("TFLongformerForQuestionAnswering"),Yxr=o(" (Longformer model)"),Kxr=l(),WE=a("li"),lMe=a("strong"),Zxr=o("mobilebert"),e$r=o(" \u2014 "),WY=a("a"),o$r=o("TFMobileBertForQuestionAnswering"),r$r=o(" (MobileBERT model)"),t$r=l(),QE=a("li"),iMe=a("strong"),a$r=o("mpnet"),n$r=o(" \u2014 "),QY=a("a"),s$r=o("TFMPNetForQuestionAnswering"),l$r=o(" (MPNet model)"),i$r=l(),HE=a("li"),dMe=a("strong"),d$r=o("rembert"),c$r=o(" \u2014 "),HY=a("a"),f$r=o("TFRemBertForQuestionAnswering"),m$r=o(" (RemBERT model)"),g$r=l(),UE=a("li"),cMe=a("strong"),h$r=o("roberta"),p$r=o(" \u2014 "),UY=a("a"),u$r=o("TFRobertaForQuestionAnswering"),_$r=o(" (RoBERTa model)"),b$r=l(),JE=a("li"),fMe=a("strong"),v$r=o("roformer"),F$r=o(" \u2014 "),JY=a("a"),T$r=o("TFRoFormerForQuestionAnswering"),M$r=o(" (RoFormer model)"),E$r=l(),YE=a("li"),mMe=a("strong"),C$r=o("xlm"),w$r=o(" \u2014 "),YY=a("a"),A$r=o("TFXLMForQuestionAnsweringSimple"),L$r=o(" (XLM model)"),y$r=l(),KE=a("li"),gMe=a("strong"),x$r=o("xlm-roberta"),$$r=o(" \u2014 "),KY=a("a"),k$r=o("TFXLMRobertaForQuestionAnswering"),S$r=o(" (XLM-RoBERTa model)"),R$r=l(),ZE=a("li"),hMe=a("strong"),P$r=o("xlnet"),B$r=o(" \u2014 "),ZY=a("a"),I$r=o("TFXLNetForQuestionAnsweringSimple"),N$r=o(" (XLNet model)"),q$r=l(),F(eC.$$.fragment),TOe=l(),Bc=a("h2"),oC=a("a"),pMe=a("span"),F(cx.$$.fragment),j$r=l(),uMe=a("span"),D$r=o("TFAutoModelForVision2Seq"),MOe=l(),fr=a("div"),F(fx.$$.fragment),G$r=l(),Ic=a("p"),O$r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),eK=a("a"),V$r=o("from_pretrained()"),X$r=o(" class method or the "),oK=a("a"),z$r=o("from_config()"),W$r=o(` class
method.`),Q$r=l(),mx=a("p"),H$r=o("This class cannot be instantiated directly using "),_Me=a("code"),U$r=o("__init__()"),J$r=o(" (throws an error)."),Y$r=l(),Ot=a("div"),F(gx.$$.fragment),K$r=l(),bMe=a("p"),Z$r=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),ekr=l(),Nc=a("p"),okr=o(`Note:
Loading a model from its configuration file does `),vMe=a("strong"),rkr=o("not"),tkr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rK=a("a"),akr=o("from_pretrained()"),nkr=o(" to load the model weights."),skr=l(),F(rC.$$.fragment),lkr=l(),jr=a("div"),F(hx.$$.fragment),ikr=l(),FMe=a("p"),dkr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),ckr=l(),_n=a("p"),fkr=o("The model class to instantiate is selected based on the "),TMe=a("code"),mkr=o("model_type"),gkr=o(` property of the config object (either
passed as an argument or loaded from `),MMe=a("code"),hkr=o("pretrained_model_name_or_path"),pkr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),EMe=a("code"),ukr=o("pretrained_model_name_or_path"),_kr=o(":"),bkr=l(),CMe=a("ul"),tC=a("li"),wMe=a("strong"),vkr=o("vision-encoder-decoder"),Fkr=o(" \u2014 "),tK=a("a"),Tkr=o("TFVisionEncoderDecoderModel"),Mkr=o(" (Vision Encoder decoder model)"),Ekr=l(),F(aC.$$.fragment),EOe=l(),qc=a("h2"),nC=a("a"),AMe=a("span"),F(px.$$.fragment),Ckr=l(),LMe=a("span"),wkr=o("TFAutoModelForSpeechSeq2Seq"),COe=l(),mr=a("div"),F(ux.$$.fragment),Akr=l(),jc=a("p"),Lkr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),aK=a("a"),ykr=o("from_pretrained()"),xkr=o(" class method or the "),nK=a("a"),$kr=o("from_config()"),kkr=o(` class
method.`),Skr=l(),_x=a("p"),Rkr=o("This class cannot be instantiated directly using "),yMe=a("code"),Pkr=o("__init__()"),Bkr=o(" (throws an error)."),Ikr=l(),Vt=a("div"),F(bx.$$.fragment),Nkr=l(),xMe=a("p"),qkr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),jkr=l(),Dc=a("p"),Dkr=o(`Note:
Loading a model from its configuration file does `),$Me=a("strong"),Gkr=o("not"),Okr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sK=a("a"),Vkr=o("from_pretrained()"),Xkr=o(" to load the model weights."),zkr=l(),F(sC.$$.fragment),Wkr=l(),Dr=a("div"),F(vx.$$.fragment),Qkr=l(),kMe=a("p"),Hkr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Ukr=l(),bn=a("p"),Jkr=o("The model class to instantiate is selected based on the "),SMe=a("code"),Ykr=o("model_type"),Kkr=o(` property of the config object (either
passed as an argument or loaded from `),RMe=a("code"),Zkr=o("pretrained_model_name_or_path"),eSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PMe=a("code"),oSr=o("pretrained_model_name_or_path"),rSr=o(":"),tSr=l(),BMe=a("ul"),lC=a("li"),IMe=a("strong"),aSr=o("speech_to_text"),nSr=o(" \u2014 "),lK=a("a"),sSr=o("TFSpeech2TextForConditionalGeneration"),lSr=o(" (Speech2Text model)"),iSr=l(),F(iC.$$.fragment),wOe=l(),Gc=a("h2"),dC=a("a"),NMe=a("span"),F(Fx.$$.fragment),dSr=l(),qMe=a("span"),cSr=o("FlaxAutoModel"),AOe=l(),gr=a("div"),F(Tx.$$.fragment),fSr=l(),Oc=a("p"),mSr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),iK=a("a"),gSr=o("from_pretrained()"),hSr=o(" class method or the "),dK=a("a"),pSr=o("from_config()"),uSr=o(` class
method.`),_Sr=l(),Mx=a("p"),bSr=o("This class cannot be instantiated directly using "),jMe=a("code"),vSr=o("__init__()"),FSr=o(" (throws an error)."),TSr=l(),Xt=a("div"),F(Ex.$$.fragment),MSr=l(),DMe=a("p"),ESr=o("Instantiates one of the base model classes of the library from a configuration."),CSr=l(),Vc=a("p"),wSr=o(`Note:
Loading a model from its configuration file does `),GMe=a("strong"),ASr=o("not"),LSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cK=a("a"),ySr=o("from_pretrained()"),xSr=o(" to load the model weights."),$Sr=l(),F(cC.$$.fragment),kSr=l(),Gr=a("div"),F(Cx.$$.fragment),SSr=l(),OMe=a("p"),RSr=o("Instantiate one of the base model classes of the library from a pretrained model."),PSr=l(),vn=a("p"),BSr=o("The model class to instantiate is selected based on the "),VMe=a("code"),ISr=o("model_type"),NSr=o(` property of the config object (either
passed as an argument or loaded from `),XMe=a("code"),qSr=o("pretrained_model_name_or_path"),jSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zMe=a("code"),DSr=o("pretrained_model_name_or_path"),GSr=o(":"),OSr=l(),oe=a("ul"),fC=a("li"),WMe=a("strong"),VSr=o("albert"),XSr=o(" \u2014 "),fK=a("a"),zSr=o("FlaxAlbertModel"),WSr=o(" (ALBERT model)"),QSr=l(),mC=a("li"),QMe=a("strong"),HSr=o("bart"),USr=o(" \u2014 "),mK=a("a"),JSr=o("FlaxBartModel"),YSr=o(" (BART model)"),KSr=l(),gC=a("li"),HMe=a("strong"),ZSr=o("beit"),eRr=o(" \u2014 "),gK=a("a"),oRr=o("FlaxBeitModel"),rRr=o(" (BEiT model)"),tRr=l(),hC=a("li"),UMe=a("strong"),aRr=o("bert"),nRr=o(" \u2014 "),hK=a("a"),sRr=o("FlaxBertModel"),lRr=o(" (BERT model)"),iRr=l(),pC=a("li"),JMe=a("strong"),dRr=o("big_bird"),cRr=o(" \u2014 "),pK=a("a"),fRr=o("FlaxBigBirdModel"),mRr=o(" (BigBird model)"),gRr=l(),uC=a("li"),YMe=a("strong"),hRr=o("blenderbot"),pRr=o(" \u2014 "),uK=a("a"),uRr=o("FlaxBlenderbotModel"),_Rr=o(" (Blenderbot model)"),bRr=l(),_C=a("li"),KMe=a("strong"),vRr=o("blenderbot-small"),FRr=o(" \u2014 "),_K=a("a"),TRr=o("FlaxBlenderbotSmallModel"),MRr=o(" (BlenderbotSmall model)"),ERr=l(),bC=a("li"),ZMe=a("strong"),CRr=o("clip"),wRr=o(" \u2014 "),bK=a("a"),ARr=o("FlaxCLIPModel"),LRr=o(" (CLIP model)"),yRr=l(),vC=a("li"),e4e=a("strong"),xRr=o("distilbert"),$Rr=o(" \u2014 "),vK=a("a"),kRr=o("FlaxDistilBertModel"),SRr=o(" (DistilBERT model)"),RRr=l(),FC=a("li"),o4e=a("strong"),PRr=o("electra"),BRr=o(" \u2014 "),FK=a("a"),IRr=o("FlaxElectraModel"),NRr=o(" (ELECTRA model)"),qRr=l(),TC=a("li"),r4e=a("strong"),jRr=o("gpt2"),DRr=o(" \u2014 "),TK=a("a"),GRr=o("FlaxGPT2Model"),ORr=o(" (OpenAI GPT-2 model)"),VRr=l(),MC=a("li"),t4e=a("strong"),XRr=o("gpt_neo"),zRr=o(" \u2014 "),MK=a("a"),WRr=o("FlaxGPTNeoModel"),QRr=o(" (GPT Neo model)"),HRr=l(),EC=a("li"),a4e=a("strong"),URr=o("gptj"),JRr=o(" \u2014 "),EK=a("a"),YRr=o("FlaxGPTJModel"),KRr=o(" (GPT-J model)"),ZRr=l(),CC=a("li"),n4e=a("strong"),ePr=o("longt5"),oPr=o(" \u2014 "),CK=a("a"),rPr=o("FlaxLongT5Model"),tPr=o(" (LongT5 model)"),aPr=l(),wC=a("li"),s4e=a("strong"),nPr=o("marian"),sPr=o(" \u2014 "),wK=a("a"),lPr=o("FlaxMarianModel"),iPr=o(" (Marian model)"),dPr=l(),AC=a("li"),l4e=a("strong"),cPr=o("mbart"),fPr=o(" \u2014 "),AK=a("a"),mPr=o("FlaxMBartModel"),gPr=o(" (mBART model)"),hPr=l(),LC=a("li"),i4e=a("strong"),pPr=o("mt5"),uPr=o(" \u2014 "),LK=a("a"),_Pr=o("FlaxMT5Model"),bPr=o(" (MT5 model)"),vPr=l(),yC=a("li"),d4e=a("strong"),FPr=o("opt"),TPr=o(" \u2014 "),yK=a("a"),MPr=o("FlaxOPTModel"),EPr=o(" (OPT model)"),CPr=l(),xC=a("li"),c4e=a("strong"),wPr=o("pegasus"),APr=o(" \u2014 "),xK=a("a"),LPr=o("FlaxPegasusModel"),yPr=o(" (Pegasus model)"),xPr=l(),$C=a("li"),f4e=a("strong"),$Pr=o("roberta"),kPr=o(" \u2014 "),$K=a("a"),SPr=o("FlaxRobertaModel"),RPr=o(" (RoBERTa model)"),PPr=l(),kC=a("li"),m4e=a("strong"),BPr=o("roformer"),IPr=o(" \u2014 "),kK=a("a"),NPr=o("FlaxRoFormerModel"),qPr=o(" (RoFormer model)"),jPr=l(),SC=a("li"),g4e=a("strong"),DPr=o("t5"),GPr=o(" \u2014 "),SK=a("a"),OPr=o("FlaxT5Model"),VPr=o(" (T5 model)"),XPr=l(),RC=a("li"),h4e=a("strong"),zPr=o("vision-text-dual-encoder"),WPr=o(" \u2014 "),RK=a("a"),QPr=o("FlaxVisionTextDualEncoderModel"),HPr=o(" (VisionTextDualEncoder model)"),UPr=l(),PC=a("li"),p4e=a("strong"),JPr=o("vit"),YPr=o(" \u2014 "),PK=a("a"),KPr=o("FlaxViTModel"),ZPr=o(" (ViT model)"),eBr=l(),BC=a("li"),u4e=a("strong"),oBr=o("wav2vec2"),rBr=o(" \u2014 "),BK=a("a"),tBr=o("FlaxWav2Vec2Model"),aBr=o(" (Wav2Vec2 model)"),nBr=l(),IC=a("li"),_4e=a("strong"),sBr=o("xglm"),lBr=o(" \u2014 "),IK=a("a"),iBr=o("FlaxXGLMModel"),dBr=o(" (XGLM model)"),cBr=l(),NC=a("li"),b4e=a("strong"),fBr=o("xlm-roberta"),mBr=o(" \u2014 "),NK=a("a"),gBr=o("FlaxXLMRobertaModel"),hBr=o(" (XLM-RoBERTa model)"),pBr=l(),F(qC.$$.fragment),LOe=l(),Xc=a("h2"),jC=a("a"),v4e=a("span"),F(wx.$$.fragment),uBr=l(),F4e=a("span"),_Br=o("FlaxAutoModelForCausalLM"),yOe=l(),hr=a("div"),F(Ax.$$.fragment),bBr=l(),zc=a("p"),vBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),qK=a("a"),FBr=o("from_pretrained()"),TBr=o(" class method or the "),jK=a("a"),MBr=o("from_config()"),EBr=o(` class
method.`),CBr=l(),Lx=a("p"),wBr=o("This class cannot be instantiated directly using "),T4e=a("code"),ABr=o("__init__()"),LBr=o(" (throws an error)."),yBr=l(),zt=a("div"),F(yx.$$.fragment),xBr=l(),M4e=a("p"),$Br=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),kBr=l(),Wc=a("p"),SBr=o(`Note:
Loading a model from its configuration file does `),E4e=a("strong"),RBr=o("not"),PBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DK=a("a"),BBr=o("from_pretrained()"),IBr=o(" to load the model weights."),NBr=l(),F(DC.$$.fragment),qBr=l(),Or=a("div"),F(xx.$$.fragment),jBr=l(),C4e=a("p"),DBr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),GBr=l(),Fn=a("p"),OBr=o("The model class to instantiate is selected based on the "),w4e=a("code"),VBr=o("model_type"),XBr=o(` property of the config object (either
passed as an argument or loaded from `),A4e=a("code"),zBr=o("pretrained_model_name_or_path"),WBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L4e=a("code"),QBr=o("pretrained_model_name_or_path"),HBr=o(":"),UBr=l(),xe=a("ul"),GC=a("li"),y4e=a("strong"),JBr=o("bart"),YBr=o(" \u2014 "),GK=a("a"),KBr=o("FlaxBartForCausalLM"),ZBr=o(" (BART model)"),eIr=l(),OC=a("li"),x4e=a("strong"),oIr=o("bert"),rIr=o(" \u2014 "),OK=a("a"),tIr=o("FlaxBertForCausalLM"),aIr=o(" (BERT model)"),nIr=l(),VC=a("li"),$4e=a("strong"),sIr=o("big_bird"),lIr=o(" \u2014 "),VK=a("a"),iIr=o("FlaxBigBirdForCausalLM"),dIr=o(" (BigBird model)"),cIr=l(),XC=a("li"),k4e=a("strong"),fIr=o("electra"),mIr=o(" \u2014 "),XK=a("a"),gIr=o("FlaxElectraForCausalLM"),hIr=o(" (ELECTRA model)"),pIr=l(),zC=a("li"),S4e=a("strong"),uIr=o("gpt2"),_Ir=o(" \u2014 "),zK=a("a"),bIr=o("FlaxGPT2LMHeadModel"),vIr=o(" (OpenAI GPT-2 model)"),FIr=l(),WC=a("li"),R4e=a("strong"),TIr=o("gpt_neo"),MIr=o(" \u2014 "),WK=a("a"),EIr=o("FlaxGPTNeoForCausalLM"),CIr=o(" (GPT Neo model)"),wIr=l(),QC=a("li"),P4e=a("strong"),AIr=o("gptj"),LIr=o(" \u2014 "),QK=a("a"),yIr=o("FlaxGPTJForCausalLM"),xIr=o(" (GPT-J model)"),$Ir=l(),HC=a("li"),B4e=a("strong"),kIr=o("opt"),SIr=o(" \u2014 "),HK=a("a"),RIr=o("FlaxOPTForCausalLM"),PIr=o(" (OPT model)"),BIr=l(),UC=a("li"),I4e=a("strong"),IIr=o("roberta"),NIr=o(" \u2014 "),UK=a("a"),qIr=o("FlaxRobertaForCausalLM"),jIr=o(" (RoBERTa model)"),DIr=l(),JC=a("li"),N4e=a("strong"),GIr=o("xglm"),OIr=o(" \u2014 "),JK=a("a"),VIr=o("FlaxXGLMForCausalLM"),XIr=o(" (XGLM model)"),zIr=l(),F(YC.$$.fragment),xOe=l(),Qc=a("h2"),KC=a("a"),q4e=a("span"),F($x.$$.fragment),WIr=l(),j4e=a("span"),QIr=o("FlaxAutoModelForPreTraining"),$Oe=l(),pr=a("div"),F(kx.$$.fragment),HIr=l(),Hc=a("p"),UIr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),YK=a("a"),JIr=o("from_pretrained()"),YIr=o(" class method or the "),KK=a("a"),KIr=o("from_config()"),ZIr=o(` class
method.`),eNr=l(),Sx=a("p"),oNr=o("This class cannot be instantiated directly using "),D4e=a("code"),rNr=o("__init__()"),tNr=o(" (throws an error)."),aNr=l(),Wt=a("div"),F(Rx.$$.fragment),nNr=l(),G4e=a("p"),sNr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),lNr=l(),Uc=a("p"),iNr=o(`Note:
Loading a model from its configuration file does `),O4e=a("strong"),dNr=o("not"),cNr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZK=a("a"),fNr=o("from_pretrained()"),mNr=o(" to load the model weights."),gNr=l(),F(ZC.$$.fragment),hNr=l(),Vr=a("div"),F(Px.$$.fragment),pNr=l(),V4e=a("p"),uNr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),_Nr=l(),Tn=a("p"),bNr=o("The model class to instantiate is selected based on the "),X4e=a("code"),vNr=o("model_type"),FNr=o(` property of the config object (either
passed as an argument or loaded from `),z4e=a("code"),TNr=o("pretrained_model_name_or_path"),MNr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W4e=a("code"),ENr=o("pretrained_model_name_or_path"),CNr=o(":"),wNr=l(),Ee=a("ul"),e5=a("li"),Q4e=a("strong"),ANr=o("albert"),LNr=o(" \u2014 "),eZ=a("a"),yNr=o("FlaxAlbertForPreTraining"),xNr=o(" (ALBERT model)"),$Nr=l(),o5=a("li"),H4e=a("strong"),kNr=o("bart"),SNr=o(" \u2014 "),oZ=a("a"),RNr=o("FlaxBartForConditionalGeneration"),PNr=o(" (BART model)"),BNr=l(),r5=a("li"),U4e=a("strong"),INr=o("bert"),NNr=o(" \u2014 "),rZ=a("a"),qNr=o("FlaxBertForPreTraining"),jNr=o(" (BERT model)"),DNr=l(),t5=a("li"),J4e=a("strong"),GNr=o("big_bird"),ONr=o(" \u2014 "),tZ=a("a"),VNr=o("FlaxBigBirdForPreTraining"),XNr=o(" (BigBird model)"),zNr=l(),a5=a("li"),Y4e=a("strong"),WNr=o("electra"),QNr=o(" \u2014 "),aZ=a("a"),HNr=o("FlaxElectraForPreTraining"),UNr=o(" (ELECTRA model)"),JNr=l(),n5=a("li"),K4e=a("strong"),YNr=o("longt5"),KNr=o(" \u2014 "),nZ=a("a"),ZNr=o("FlaxLongT5ForConditionalGeneration"),eqr=o(" (LongT5 model)"),oqr=l(),s5=a("li"),Z4e=a("strong"),rqr=o("mbart"),tqr=o(" \u2014 "),sZ=a("a"),aqr=o("FlaxMBartForConditionalGeneration"),nqr=o(" (mBART model)"),sqr=l(),l5=a("li"),eEe=a("strong"),lqr=o("mt5"),iqr=o(" \u2014 "),lZ=a("a"),dqr=o("FlaxMT5ForConditionalGeneration"),cqr=o(" (MT5 model)"),fqr=l(),i5=a("li"),oEe=a("strong"),mqr=o("roberta"),gqr=o(" \u2014 "),iZ=a("a"),hqr=o("FlaxRobertaForMaskedLM"),pqr=o(" (RoBERTa model)"),uqr=l(),d5=a("li"),rEe=a("strong"),_qr=o("roformer"),bqr=o(" \u2014 "),dZ=a("a"),vqr=o("FlaxRoFormerForMaskedLM"),Fqr=o(" (RoFormer model)"),Tqr=l(),c5=a("li"),tEe=a("strong"),Mqr=o("t5"),Eqr=o(" \u2014 "),cZ=a("a"),Cqr=o("FlaxT5ForConditionalGeneration"),wqr=o(" (T5 model)"),Aqr=l(),f5=a("li"),aEe=a("strong"),Lqr=o("wav2vec2"),yqr=o(" \u2014 "),fZ=a("a"),xqr=o("FlaxWav2Vec2ForPreTraining"),$qr=o(" (Wav2Vec2 model)"),kqr=l(),m5=a("li"),nEe=a("strong"),Sqr=o("xlm-roberta"),Rqr=o(" \u2014 "),mZ=a("a"),Pqr=o("FlaxXLMRobertaForMaskedLM"),Bqr=o(" (XLM-RoBERTa model)"),Iqr=l(),F(g5.$$.fragment),kOe=l(),Jc=a("h2"),h5=a("a"),sEe=a("span"),F(Bx.$$.fragment),Nqr=l(),lEe=a("span"),qqr=o("FlaxAutoModelForMaskedLM"),SOe=l(),ur=a("div"),F(Ix.$$.fragment),jqr=l(),Yc=a("p"),Dqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),gZ=a("a"),Gqr=o("from_pretrained()"),Oqr=o(" class method or the "),hZ=a("a"),Vqr=o("from_config()"),Xqr=o(` class
method.`),zqr=l(),Nx=a("p"),Wqr=o("This class cannot be instantiated directly using "),iEe=a("code"),Qqr=o("__init__()"),Hqr=o(" (throws an error)."),Uqr=l(),Qt=a("div"),F(qx.$$.fragment),Jqr=l(),dEe=a("p"),Yqr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Kqr=l(),Kc=a("p"),Zqr=o(`Note:
Loading a model from its configuration file does `),cEe=a("strong"),ejr=o("not"),ojr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pZ=a("a"),rjr=o("from_pretrained()"),tjr=o(" to load the model weights."),ajr=l(),F(p5.$$.fragment),njr=l(),Xr=a("div"),F(jx.$$.fragment),sjr=l(),fEe=a("p"),ljr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),ijr=l(),Mn=a("p"),djr=o("The model class to instantiate is selected based on the "),mEe=a("code"),cjr=o("model_type"),fjr=o(` property of the config object (either
passed as an argument or loaded from `),gEe=a("code"),mjr=o("pretrained_model_name_or_path"),gjr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hEe=a("code"),hjr=o("pretrained_model_name_or_path"),pjr=o(":"),ujr=l(),$e=a("ul"),u5=a("li"),pEe=a("strong"),_jr=o("albert"),bjr=o(" \u2014 "),uZ=a("a"),vjr=o("FlaxAlbertForMaskedLM"),Fjr=o(" (ALBERT model)"),Tjr=l(),_5=a("li"),uEe=a("strong"),Mjr=o("bart"),Ejr=o(" \u2014 "),_Z=a("a"),Cjr=o("FlaxBartForConditionalGeneration"),wjr=o(" (BART model)"),Ajr=l(),b5=a("li"),_Ee=a("strong"),Ljr=o("bert"),yjr=o(" \u2014 "),bZ=a("a"),xjr=o("FlaxBertForMaskedLM"),$jr=o(" (BERT model)"),kjr=l(),v5=a("li"),bEe=a("strong"),Sjr=o("big_bird"),Rjr=o(" \u2014 "),vZ=a("a"),Pjr=o("FlaxBigBirdForMaskedLM"),Bjr=o(" (BigBird model)"),Ijr=l(),F5=a("li"),vEe=a("strong"),Njr=o("distilbert"),qjr=o(" \u2014 "),FZ=a("a"),jjr=o("FlaxDistilBertForMaskedLM"),Djr=o(" (DistilBERT model)"),Gjr=l(),T5=a("li"),FEe=a("strong"),Ojr=o("electra"),Vjr=o(" \u2014 "),TZ=a("a"),Xjr=o("FlaxElectraForMaskedLM"),zjr=o(" (ELECTRA model)"),Wjr=l(),M5=a("li"),TEe=a("strong"),Qjr=o("mbart"),Hjr=o(" \u2014 "),MZ=a("a"),Ujr=o("FlaxMBartForConditionalGeneration"),Jjr=o(" (mBART model)"),Yjr=l(),E5=a("li"),MEe=a("strong"),Kjr=o("roberta"),Zjr=o(" \u2014 "),EZ=a("a"),eDr=o("FlaxRobertaForMaskedLM"),oDr=o(" (RoBERTa model)"),rDr=l(),C5=a("li"),EEe=a("strong"),tDr=o("roformer"),aDr=o(" \u2014 "),CZ=a("a"),nDr=o("FlaxRoFormerForMaskedLM"),sDr=o(" (RoFormer model)"),lDr=l(),w5=a("li"),CEe=a("strong"),iDr=o("xlm-roberta"),dDr=o(" \u2014 "),wZ=a("a"),cDr=o("FlaxXLMRobertaForMaskedLM"),fDr=o(" (XLM-RoBERTa model)"),mDr=l(),F(A5.$$.fragment),ROe=l(),Zc=a("h2"),L5=a("a"),wEe=a("span"),F(Dx.$$.fragment),gDr=l(),AEe=a("span"),hDr=o("FlaxAutoModelForSeq2SeqLM"),POe=l(),_r=a("div"),F(Gx.$$.fragment),pDr=l(),ef=a("p"),uDr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),AZ=a("a"),_Dr=o("from_pretrained()"),bDr=o(" class method or the "),LZ=a("a"),vDr=o("from_config()"),FDr=o(` class
method.`),TDr=l(),Ox=a("p"),MDr=o("This class cannot be instantiated directly using "),LEe=a("code"),EDr=o("__init__()"),CDr=o(" (throws an error)."),wDr=l(),Ht=a("div"),F(Vx.$$.fragment),ADr=l(),yEe=a("p"),LDr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),yDr=l(),of=a("p"),xDr=o(`Note:
Loading a model from its configuration file does `),xEe=a("strong"),$Dr=o("not"),kDr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yZ=a("a"),SDr=o("from_pretrained()"),RDr=o(" to load the model weights."),PDr=l(),F(y5.$$.fragment),BDr=l(),zr=a("div"),F(Xx.$$.fragment),IDr=l(),$Ee=a("p"),NDr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),qDr=l(),En=a("p"),jDr=o("The model class to instantiate is selected based on the "),kEe=a("code"),DDr=o("model_type"),GDr=o(` property of the config object (either
passed as an argument or loaded from `),SEe=a("code"),ODr=o("pretrained_model_name_or_path"),VDr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),REe=a("code"),XDr=o("pretrained_model_name_or_path"),zDr=o(":"),WDr=l(),ke=a("ul"),x5=a("li"),PEe=a("strong"),QDr=o("bart"),HDr=o(" \u2014 "),xZ=a("a"),UDr=o("FlaxBartForConditionalGeneration"),JDr=o(" (BART model)"),YDr=l(),$5=a("li"),BEe=a("strong"),KDr=o("blenderbot"),ZDr=o(" \u2014 "),$Z=a("a"),eGr=o("FlaxBlenderbotForConditionalGeneration"),oGr=o(" (Blenderbot model)"),rGr=l(),k5=a("li"),IEe=a("strong"),tGr=o("blenderbot-small"),aGr=o(" \u2014 "),kZ=a("a"),nGr=o("FlaxBlenderbotSmallForConditionalGeneration"),sGr=o(" (BlenderbotSmall model)"),lGr=l(),S5=a("li"),NEe=a("strong"),iGr=o("encoder-decoder"),dGr=o(" \u2014 "),SZ=a("a"),cGr=o("FlaxEncoderDecoderModel"),fGr=o(" (Encoder decoder model)"),mGr=l(),R5=a("li"),qEe=a("strong"),gGr=o("longt5"),hGr=o(" \u2014 "),RZ=a("a"),pGr=o("FlaxLongT5ForConditionalGeneration"),uGr=o(" (LongT5 model)"),_Gr=l(),P5=a("li"),jEe=a("strong"),bGr=o("marian"),vGr=o(" \u2014 "),PZ=a("a"),FGr=o("FlaxMarianMTModel"),TGr=o(" (Marian model)"),MGr=l(),B5=a("li"),DEe=a("strong"),EGr=o("mbart"),CGr=o(" \u2014 "),BZ=a("a"),wGr=o("FlaxMBartForConditionalGeneration"),AGr=o(" (mBART model)"),LGr=l(),I5=a("li"),GEe=a("strong"),yGr=o("mt5"),xGr=o(" \u2014 "),IZ=a("a"),$Gr=o("FlaxMT5ForConditionalGeneration"),kGr=o(" (MT5 model)"),SGr=l(),N5=a("li"),OEe=a("strong"),RGr=o("pegasus"),PGr=o(" \u2014 "),NZ=a("a"),BGr=o("FlaxPegasusForConditionalGeneration"),IGr=o(" (Pegasus model)"),NGr=l(),q5=a("li"),VEe=a("strong"),qGr=o("t5"),jGr=o(" \u2014 "),qZ=a("a"),DGr=o("FlaxT5ForConditionalGeneration"),GGr=o(" (T5 model)"),OGr=l(),F(j5.$$.fragment),BOe=l(),rf=a("h2"),D5=a("a"),XEe=a("span"),F(zx.$$.fragment),VGr=l(),zEe=a("span"),XGr=o("FlaxAutoModelForSequenceClassification"),IOe=l(),br=a("div"),F(Wx.$$.fragment),zGr=l(),tf=a("p"),WGr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),jZ=a("a"),QGr=o("from_pretrained()"),HGr=o(" class method or the "),DZ=a("a"),UGr=o("from_config()"),JGr=o(` class
method.`),YGr=l(),Qx=a("p"),KGr=o("This class cannot be instantiated directly using "),WEe=a("code"),ZGr=o("__init__()"),eOr=o(" (throws an error)."),oOr=l(),Ut=a("div"),F(Hx.$$.fragment),rOr=l(),QEe=a("p"),tOr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),aOr=l(),af=a("p"),nOr=o(`Note:
Loading a model from its configuration file does `),HEe=a("strong"),sOr=o("not"),lOr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GZ=a("a"),iOr=o("from_pretrained()"),dOr=o(" to load the model weights."),cOr=l(),F(G5.$$.fragment),fOr=l(),Wr=a("div"),F(Ux.$$.fragment),mOr=l(),UEe=a("p"),gOr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),hOr=l(),Cn=a("p"),pOr=o("The model class to instantiate is selected based on the "),JEe=a("code"),uOr=o("model_type"),_Or=o(` property of the config object (either
passed as an argument or loaded from `),YEe=a("code"),bOr=o("pretrained_model_name_or_path"),vOr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),KEe=a("code"),FOr=o("pretrained_model_name_or_path"),TOr=o(":"),MOr=l(),Se=a("ul"),O5=a("li"),ZEe=a("strong"),EOr=o("albert"),COr=o(" \u2014 "),OZ=a("a"),wOr=o("FlaxAlbertForSequenceClassification"),AOr=o(" (ALBERT model)"),LOr=l(),V5=a("li"),eCe=a("strong"),yOr=o("bart"),xOr=o(" \u2014 "),VZ=a("a"),$Or=o("FlaxBartForSequenceClassification"),kOr=o(" (BART model)"),SOr=l(),X5=a("li"),oCe=a("strong"),ROr=o("bert"),POr=o(" \u2014 "),XZ=a("a"),BOr=o("FlaxBertForSequenceClassification"),IOr=o(" (BERT model)"),NOr=l(),z5=a("li"),rCe=a("strong"),qOr=o("big_bird"),jOr=o(" \u2014 "),zZ=a("a"),DOr=o("FlaxBigBirdForSequenceClassification"),GOr=o(" (BigBird model)"),OOr=l(),W5=a("li"),tCe=a("strong"),VOr=o("distilbert"),XOr=o(" \u2014 "),WZ=a("a"),zOr=o("FlaxDistilBertForSequenceClassification"),WOr=o(" (DistilBERT model)"),QOr=l(),Q5=a("li"),aCe=a("strong"),HOr=o("electra"),UOr=o(" \u2014 "),QZ=a("a"),JOr=o("FlaxElectraForSequenceClassification"),YOr=o(" (ELECTRA model)"),KOr=l(),H5=a("li"),nCe=a("strong"),ZOr=o("mbart"),eVr=o(" \u2014 "),HZ=a("a"),oVr=o("FlaxMBartForSequenceClassification"),rVr=o(" (mBART model)"),tVr=l(),U5=a("li"),sCe=a("strong"),aVr=o("roberta"),nVr=o(" \u2014 "),UZ=a("a"),sVr=o("FlaxRobertaForSequenceClassification"),lVr=o(" (RoBERTa model)"),iVr=l(),J5=a("li"),lCe=a("strong"),dVr=o("roformer"),cVr=o(" \u2014 "),JZ=a("a"),fVr=o("FlaxRoFormerForSequenceClassification"),mVr=o(" (RoFormer model)"),gVr=l(),Y5=a("li"),iCe=a("strong"),hVr=o("xlm-roberta"),pVr=o(" \u2014 "),YZ=a("a"),uVr=o("FlaxXLMRobertaForSequenceClassification"),_Vr=o(" (XLM-RoBERTa model)"),bVr=l(),F(K5.$$.fragment),NOe=l(),nf=a("h2"),Z5=a("a"),dCe=a("span"),F(Jx.$$.fragment),vVr=l(),cCe=a("span"),FVr=o("FlaxAutoModelForQuestionAnswering"),qOe=l(),vr=a("div"),F(Yx.$$.fragment),TVr=l(),sf=a("p"),MVr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),KZ=a("a"),EVr=o("from_pretrained()"),CVr=o(" class method or the "),ZZ=a("a"),wVr=o("from_config()"),AVr=o(` class
method.`),LVr=l(),Kx=a("p"),yVr=o("This class cannot be instantiated directly using "),fCe=a("code"),xVr=o("__init__()"),$Vr=o(" (throws an error)."),kVr=l(),Jt=a("div"),F(Zx.$$.fragment),SVr=l(),mCe=a("p"),RVr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),PVr=l(),lf=a("p"),BVr=o(`Note:
Loading a model from its configuration file does `),gCe=a("strong"),IVr=o("not"),NVr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eee=a("a"),qVr=o("from_pretrained()"),jVr=o(" to load the model weights."),DVr=l(),F(e3.$$.fragment),GVr=l(),Qr=a("div"),F(e$.$$.fragment),OVr=l(),hCe=a("p"),VVr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),XVr=l(),wn=a("p"),zVr=o("The model class to instantiate is selected based on the "),pCe=a("code"),WVr=o("model_type"),QVr=o(` property of the config object (either
passed as an argument or loaded from `),uCe=a("code"),HVr=o("pretrained_model_name_or_path"),UVr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_Ce=a("code"),JVr=o("pretrained_model_name_or_path"),YVr=o(":"),KVr=l(),Re=a("ul"),o3=a("li"),bCe=a("strong"),ZVr=o("albert"),eXr=o(" \u2014 "),oee=a("a"),oXr=o("FlaxAlbertForQuestionAnswering"),rXr=o(" (ALBERT model)"),tXr=l(),r3=a("li"),vCe=a("strong"),aXr=o("bart"),nXr=o(" \u2014 "),ree=a("a"),sXr=o("FlaxBartForQuestionAnswering"),lXr=o(" (BART model)"),iXr=l(),t3=a("li"),FCe=a("strong"),dXr=o("bert"),cXr=o(" \u2014 "),tee=a("a"),fXr=o("FlaxBertForQuestionAnswering"),mXr=o(" (BERT model)"),gXr=l(),a3=a("li"),TCe=a("strong"),hXr=o("big_bird"),pXr=o(" \u2014 "),aee=a("a"),uXr=o("FlaxBigBirdForQuestionAnswering"),_Xr=o(" (BigBird model)"),bXr=l(),n3=a("li"),MCe=a("strong"),vXr=o("distilbert"),FXr=o(" \u2014 "),nee=a("a"),TXr=o("FlaxDistilBertForQuestionAnswering"),MXr=o(" (DistilBERT model)"),EXr=l(),s3=a("li"),ECe=a("strong"),CXr=o("electra"),wXr=o(" \u2014 "),see=a("a"),AXr=o("FlaxElectraForQuestionAnswering"),LXr=o(" (ELECTRA model)"),yXr=l(),l3=a("li"),CCe=a("strong"),xXr=o("mbart"),$Xr=o(" \u2014 "),lee=a("a"),kXr=o("FlaxMBartForQuestionAnswering"),SXr=o(" (mBART model)"),RXr=l(),i3=a("li"),wCe=a("strong"),PXr=o("roberta"),BXr=o(" \u2014 "),iee=a("a"),IXr=o("FlaxRobertaForQuestionAnswering"),NXr=o(" (RoBERTa model)"),qXr=l(),d3=a("li"),ACe=a("strong"),jXr=o("roformer"),DXr=o(" \u2014 "),dee=a("a"),GXr=o("FlaxRoFormerForQuestionAnswering"),OXr=o(" (RoFormer model)"),VXr=l(),c3=a("li"),LCe=a("strong"),XXr=o("xlm-roberta"),zXr=o(" \u2014 "),cee=a("a"),WXr=o("FlaxXLMRobertaForQuestionAnswering"),QXr=o(" (XLM-RoBERTa model)"),HXr=l(),F(f3.$$.fragment),jOe=l(),df=a("h2"),m3=a("a"),yCe=a("span"),F(o$.$$.fragment),UXr=l(),xCe=a("span"),JXr=o("FlaxAutoModelForTokenClassification"),DOe=l(),Fr=a("div"),F(r$.$$.fragment),YXr=l(),cf=a("p"),KXr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),fee=a("a"),ZXr=o("from_pretrained()"),ezr=o(" class method or the "),mee=a("a"),ozr=o("from_config()"),rzr=o(` class
method.`),tzr=l(),t$=a("p"),azr=o("This class cannot be instantiated directly using "),$Ce=a("code"),nzr=o("__init__()"),szr=o(" (throws an error)."),lzr=l(),Yt=a("div"),F(a$.$$.fragment),izr=l(),kCe=a("p"),dzr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),czr=l(),ff=a("p"),fzr=o(`Note:
Loading a model from its configuration file does `),SCe=a("strong"),mzr=o("not"),gzr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gee=a("a"),hzr=o("from_pretrained()"),pzr=o(" to load the model weights."),uzr=l(),F(g3.$$.fragment),_zr=l(),Hr=a("div"),F(n$.$$.fragment),bzr=l(),RCe=a("p"),vzr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Fzr=l(),An=a("p"),Tzr=o("The model class to instantiate is selected based on the "),PCe=a("code"),Mzr=o("model_type"),Ezr=o(` property of the config object (either
passed as an argument or loaded from `),BCe=a("code"),Czr=o("pretrained_model_name_or_path"),wzr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ICe=a("code"),Azr=o("pretrained_model_name_or_path"),Lzr=o(":"),yzr=l(),Ve=a("ul"),h3=a("li"),NCe=a("strong"),xzr=o("albert"),$zr=o(" \u2014 "),hee=a("a"),kzr=o("FlaxAlbertForTokenClassification"),Szr=o(" (ALBERT model)"),Rzr=l(),p3=a("li"),qCe=a("strong"),Pzr=o("bert"),Bzr=o(" \u2014 "),pee=a("a"),Izr=o("FlaxBertForTokenClassification"),Nzr=o(" (BERT model)"),qzr=l(),u3=a("li"),jCe=a("strong"),jzr=o("big_bird"),Dzr=o(" \u2014 "),uee=a("a"),Gzr=o("FlaxBigBirdForTokenClassification"),Ozr=o(" (BigBird model)"),Vzr=l(),_3=a("li"),DCe=a("strong"),Xzr=o("distilbert"),zzr=o(" \u2014 "),_ee=a("a"),Wzr=o("FlaxDistilBertForTokenClassification"),Qzr=o(" (DistilBERT model)"),Hzr=l(),b3=a("li"),GCe=a("strong"),Uzr=o("electra"),Jzr=o(" \u2014 "),bee=a("a"),Yzr=o("FlaxElectraForTokenClassification"),Kzr=o(" (ELECTRA model)"),Zzr=l(),v3=a("li"),OCe=a("strong"),eWr=o("roberta"),oWr=o(" \u2014 "),vee=a("a"),rWr=o("FlaxRobertaForTokenClassification"),tWr=o(" (RoBERTa model)"),aWr=l(),F3=a("li"),VCe=a("strong"),nWr=o("roformer"),sWr=o(" \u2014 "),Fee=a("a"),lWr=o("FlaxRoFormerForTokenClassification"),iWr=o(" (RoFormer model)"),dWr=l(),T3=a("li"),XCe=a("strong"),cWr=o("xlm-roberta"),fWr=o(" \u2014 "),Tee=a("a"),mWr=o("FlaxXLMRobertaForTokenClassification"),gWr=o(" (XLM-RoBERTa model)"),hWr=l(),F(M3.$$.fragment),GOe=l(),mf=a("h2"),E3=a("a"),zCe=a("span"),F(s$.$$.fragment),pWr=l(),WCe=a("span"),uWr=o("FlaxAutoModelForMultipleChoice"),OOe=l(),Tr=a("div"),F(l$.$$.fragment),_Wr=l(),gf=a("p"),bWr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Mee=a("a"),vWr=o("from_pretrained()"),FWr=o(" class method or the "),Eee=a("a"),TWr=o("from_config()"),MWr=o(` class
method.`),EWr=l(),i$=a("p"),CWr=o("This class cannot be instantiated directly using "),QCe=a("code"),wWr=o("__init__()"),AWr=o(" (throws an error)."),LWr=l(),Kt=a("div"),F(d$.$$.fragment),yWr=l(),HCe=a("p"),xWr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),$Wr=l(),hf=a("p"),kWr=o(`Note:
Loading a model from its configuration file does `),UCe=a("strong"),SWr=o("not"),RWr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Cee=a("a"),PWr=o("from_pretrained()"),BWr=o(" to load the model weights."),IWr=l(),F(C3.$$.fragment),NWr=l(),Ur=a("div"),F(c$.$$.fragment),qWr=l(),JCe=a("p"),jWr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),DWr=l(),Ln=a("p"),GWr=o("The model class to instantiate is selected based on the "),YCe=a("code"),OWr=o("model_type"),VWr=o(` property of the config object (either
passed as an argument or loaded from `),KCe=a("code"),XWr=o("pretrained_model_name_or_path"),zWr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ZCe=a("code"),WWr=o("pretrained_model_name_or_path"),QWr=o(":"),HWr=l(),Xe=a("ul"),w3=a("li"),e5e=a("strong"),UWr=o("albert"),JWr=o(" \u2014 "),wee=a("a"),YWr=o("FlaxAlbertForMultipleChoice"),KWr=o(" (ALBERT model)"),ZWr=l(),A3=a("li"),o5e=a("strong"),eQr=o("bert"),oQr=o(" \u2014 "),Aee=a("a"),rQr=o("FlaxBertForMultipleChoice"),tQr=o(" (BERT model)"),aQr=l(),L3=a("li"),r5e=a("strong"),nQr=o("big_bird"),sQr=o(" \u2014 "),Lee=a("a"),lQr=o("FlaxBigBirdForMultipleChoice"),iQr=o(" (BigBird model)"),dQr=l(),y3=a("li"),t5e=a("strong"),cQr=o("distilbert"),fQr=o(" \u2014 "),yee=a("a"),mQr=o("FlaxDistilBertForMultipleChoice"),gQr=o(" (DistilBERT model)"),hQr=l(),x3=a("li"),a5e=a("strong"),pQr=o("electra"),uQr=o(" \u2014 "),xee=a("a"),_Qr=o("FlaxElectraForMultipleChoice"),bQr=o(" (ELECTRA model)"),vQr=l(),$3=a("li"),n5e=a("strong"),FQr=o("roberta"),TQr=o(" \u2014 "),$ee=a("a"),MQr=o("FlaxRobertaForMultipleChoice"),EQr=o(" (RoBERTa model)"),CQr=l(),k3=a("li"),s5e=a("strong"),wQr=o("roformer"),AQr=o(" \u2014 "),kee=a("a"),LQr=o("FlaxRoFormerForMultipleChoice"),yQr=o(" (RoFormer model)"),xQr=l(),S3=a("li"),l5e=a("strong"),$Qr=o("xlm-roberta"),kQr=o(" \u2014 "),See=a("a"),SQr=o("FlaxXLMRobertaForMultipleChoice"),RQr=o(" (XLM-RoBERTa model)"),PQr=l(),F(R3.$$.fragment),VOe=l(),pf=a("h2"),P3=a("a"),i5e=a("span"),F(f$.$$.fragment),BQr=l(),d5e=a("span"),IQr=o("FlaxAutoModelForNextSentencePrediction"),XOe=l(),Mr=a("div"),F(m$.$$.fragment),NQr=l(),uf=a("p"),qQr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Ree=a("a"),jQr=o("from_pretrained()"),DQr=o(" class method or the "),Pee=a("a"),GQr=o("from_config()"),OQr=o(` class
method.`),VQr=l(),g$=a("p"),XQr=o("This class cannot be instantiated directly using "),c5e=a("code"),zQr=o("__init__()"),WQr=o(" (throws an error)."),QQr=l(),Zt=a("div"),F(h$.$$.fragment),HQr=l(),f5e=a("p"),UQr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),JQr=l(),_f=a("p"),YQr=o(`Note:
Loading a model from its configuration file does `),m5e=a("strong"),KQr=o("not"),ZQr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Bee=a("a"),eHr=o("from_pretrained()"),oHr=o(" to load the model weights."),rHr=l(),F(B3.$$.fragment),tHr=l(),Jr=a("div"),F(p$.$$.fragment),aHr=l(),g5e=a("p"),nHr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),sHr=l(),yn=a("p"),lHr=o("The model class to instantiate is selected based on the "),h5e=a("code"),iHr=o("model_type"),dHr=o(` property of the config object (either
passed as an argument or loaded from `),p5e=a("code"),cHr=o("pretrained_model_name_or_path"),fHr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u5e=a("code"),mHr=o("pretrained_model_name_or_path"),gHr=o(":"),hHr=l(),_5e=a("ul"),I3=a("li"),b5e=a("strong"),pHr=o("bert"),uHr=o(" \u2014 "),Iee=a("a"),_Hr=o("FlaxBertForNextSentencePrediction"),bHr=o(" (BERT model)"),vHr=l(),F(N3.$$.fragment),zOe=l(),bf=a("h2"),q3=a("a"),v5e=a("span"),F(u$.$$.fragment),FHr=l(),F5e=a("span"),THr=o("FlaxAutoModelForImageClassification"),WOe=l(),Er=a("div"),F(_$.$$.fragment),MHr=l(),vf=a("p"),EHr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Nee=a("a"),CHr=o("from_pretrained()"),wHr=o(" class method or the "),qee=a("a"),AHr=o("from_config()"),LHr=o(` class
method.`),yHr=l(),b$=a("p"),xHr=o("This class cannot be instantiated directly using "),T5e=a("code"),$Hr=o("__init__()"),kHr=o(" (throws an error)."),SHr=l(),ea=a("div"),F(v$.$$.fragment),RHr=l(),M5e=a("p"),PHr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),BHr=l(),Ff=a("p"),IHr=o(`Note:
Loading a model from its configuration file does `),E5e=a("strong"),NHr=o("not"),qHr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jee=a("a"),jHr=o("from_pretrained()"),DHr=o(" to load the model weights."),GHr=l(),F(j3.$$.fragment),OHr=l(),Yr=a("div"),F(F$.$$.fragment),VHr=l(),C5e=a("p"),XHr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),zHr=l(),xn=a("p"),WHr=o("The model class to instantiate is selected based on the "),w5e=a("code"),QHr=o("model_type"),HHr=o(` property of the config object (either
passed as an argument or loaded from `),A5e=a("code"),UHr=o("pretrained_model_name_or_path"),JHr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L5e=a("code"),YHr=o("pretrained_model_name_or_path"),KHr=o(":"),ZHr=l(),T$=a("ul"),D3=a("li"),y5e=a("strong"),eUr=o("beit"),oUr=o(" \u2014 "),Dee=a("a"),rUr=o("FlaxBeitForImageClassification"),tUr=o(" (BEiT model)"),aUr=l(),G3=a("li"),x5e=a("strong"),nUr=o("vit"),sUr=o(" \u2014 "),Gee=a("a"),lUr=o("FlaxViTForImageClassification"),iUr=o(" (ViT model)"),dUr=l(),F(O3.$$.fragment),QOe=l(),Tf=a("h2"),V3=a("a"),$5e=a("span"),F(M$.$$.fragment),cUr=l(),k5e=a("span"),fUr=o("FlaxAutoModelForVision2Seq"),HOe=l(),Cr=a("div"),F(E$.$$.fragment),mUr=l(),Mf=a("p"),gUr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Oee=a("a"),hUr=o("from_pretrained()"),pUr=o(" class method or the "),Vee=a("a"),uUr=o("from_config()"),_Ur=o(` class
method.`),bUr=l(),C$=a("p"),vUr=o("This class cannot be instantiated directly using "),S5e=a("code"),FUr=o("__init__()"),TUr=o(" (throws an error)."),MUr=l(),oa=a("div"),F(w$.$$.fragment),EUr=l(),R5e=a("p"),CUr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),wUr=l(),Ef=a("p"),AUr=o(`Note:
Loading a model from its configuration file does `),P5e=a("strong"),LUr=o("not"),yUr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Xee=a("a"),xUr=o("from_pretrained()"),$Ur=o(" to load the model weights."),kUr=l(),F(X3.$$.fragment),SUr=l(),Kr=a("div"),F(A$.$$.fragment),RUr=l(),B5e=a("p"),PUr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),BUr=l(),$n=a("p"),IUr=o("The model class to instantiate is selected based on the "),I5e=a("code"),NUr=o("model_type"),qUr=o(` property of the config object (either
passed as an argument or loaded from `),N5e=a("code"),jUr=o("pretrained_model_name_or_path"),DUr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q5e=a("code"),GUr=o("pretrained_model_name_or_path"),OUr=o(":"),VUr=l(),j5e=a("ul"),z3=a("li"),D5e=a("strong"),XUr=o("vision-encoder-decoder"),zUr=o(" \u2014 "),zee=a("a"),WUr=o("FlaxVisionEncoderDecoderModel"),QUr=o(" (Vision Encoder decoder model)"),HUr=l(),F(W3.$$.fragment),this.h()},l(f){const _=HNt('[data-svelte="svelte-1phssyn"]',document.head);g=n(_,"META",{name:!0,content:!0}),_.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var L$=s(p);m=n(L$,"A",{id:!0,class:!0,href:!0});var G5e=s(m);u=n(G5e,"SPAN",{});var O5e=s(u);T(d.$$.fragment,O5e),O5e.forEach(t),G5e.forEach(t),h=i(L$),Eo=n(L$,"SPAN",{});var V5e=s(Eo);Fi=r(V5e,"Auto Classes"),V5e.forEach(t),L$.forEach(t),Lf=i(f),at=n(f,"P",{});var y$=s(at);Ti=r(y$,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Mi=n(y$,"CODE",{});var X5e=s(Mi);gA=r(X5e,"from_pretrained()"),X5e.forEach(t),yf=r(y$,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),y$.forEach(t),Oe=i(f),We=n(f,"P",{});var kn=s(We);Ei=r(kn,"Instantiating one of "),Sn=n(kn,"A",{href:!0});var z5e=s(Sn);hA=r(z5e,"AutoConfig"),z5e.forEach(t),Rn=r(kn,", "),Pn=n(kn,"A",{href:!0});var W5e=s(Pn);pA=r(W5e,"AutoModel"),W5e.forEach(t),Ci=r(kn,`, and
`),Bn=n(kn,"A",{href:!0});var Q5e=s(Bn);uA=r(Q5e,"AutoTokenizer"),Q5e.forEach(t),wi=r(kn," will directly create a class of the relevant architecture. For instance"),kn.forEach(t),xf=i(f),T(ya.$$.fragment,f),Qe=i(f),Ae=n(f,"P",{});var x$=s(Ae);Vk=r(x$,"will create a model that is an instance of "),Ai=n(x$,"A",{href:!0});var H5e=s(Ai);Xk=r(H5e,"BertModel"),H5e.forEach(t),zk=r(x$,"."),x$.forEach(t),Co=i(f),xa=n(f,"P",{});var $$=s(xa);Wk=r($$,"There is one class of "),$f=n($$,"CODE",{});var U5e=s($f);Qk=r(U5e,"AutoModel"),U5e.forEach(t),nze=r($$," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),$$.forEach(t),XDe=i(f),Li=n(f,"H2",{class:!0});var k$=s(Li);kf=n(k$,"A",{id:!0,class:!0,href:!0});var J5e=s(kf);Dre=n(J5e,"SPAN",{});var Y5e=s(Dre);T(_A.$$.fragment,Y5e),Y5e.forEach(t),J5e.forEach(t),sze=i(k$),Gre=n(k$,"SPAN",{});var K5e=s(Gre);lze=r(K5e,"Extending the Auto Classes"),K5e.forEach(t),k$.forEach(t),zDe=i(f),In=n(f,"P",{});var Cf=s(In);ize=r(Cf,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Ore=n(Cf,"CODE",{});var Z5e=s(Ore);dze=r(Z5e,"NewModel"),Z5e.forEach(t),cze=r(Cf,", make sure you have a "),Vre=n(Cf,"CODE",{});var e3e=s(Vre);fze=r(e3e,"NewModelConfig"),e3e.forEach(t),mze=r(Cf,` then you can add those to the auto
classes like this:`),Cf.forEach(t),WDe=i(f),T(bA.$$.fragment,f),QDe=i(f),Hk=n(f,"P",{});var o3e=s(Hk);gze=r(o3e,"You will then be able to use the auto classes like you would usually do!"),o3e.forEach(t),HDe=i(f),T(Sf.$$.fragment,f),UDe=i(f),yi=n(f,"H2",{class:!0});var S$=s(yi);Rf=n(S$,"A",{id:!0,class:!0,href:!0});var r3e=s(Rf);Xre=n(r3e,"SPAN",{});var t3e=s(Xre);T(vA.$$.fragment,t3e),t3e.forEach(t),r3e.forEach(t),hze=i(S$),zre=n(S$,"SPAN",{});var a3e=s(zre);pze=r(a3e,"AutoConfig"),a3e.forEach(t),S$.forEach(t),JDe=i(f),wo=n(f,"DIV",{class:!0});var rt=s(wo);T(FA.$$.fragment,rt),uze=i(rt),TA=n(rt,"P",{});var R$=s(TA);_ze=r(R$,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),Uk=n(R$,"A",{href:!0});var n3e=s(Uk);bze=r(n3e,"from_pretrained()"),n3e.forEach(t),vze=r(R$," class method."),R$.forEach(t),Fze=i(rt),MA=n(rt,"P",{});var P$=s(MA);Tze=r(P$,"This class cannot be instantiated directly using "),Wre=n(P$,"CODE",{});var s3e=s(Wre);Mze=r(s3e,"__init__()"),s3e.forEach(t),Eze=r(P$," (throws an error)."),P$.forEach(t),Cze=i(rt),wr=n(rt,"DIV",{class:!0});var tt=s(wr);T(EA.$$.fragment,tt),wze=i(tt),Qre=n(tt,"P",{});var l3e=s(Qre);Aze=r(l3e,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),l3e.forEach(t),Lze=i(tt),xi=n(tt,"P",{});var wf=s(xi);yze=r(wf,"The configuration class to instantiate is selected based on the "),Hre=n(wf,"CODE",{});var i3e=s(Hre);xze=r(i3e,"model_type"),i3e.forEach(t),$ze=r(wf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Ure=n(wf,"CODE",{});var d3e=s(Ure);kze=r(d3e,"pretrained_model_name_or_path"),d3e.forEach(t),Sze=r(wf,":"),wf.forEach(t),Rze=i(tt),A=n(tt,"UL",{});var L=s(A);Pf=n(L,"LI",{});var Q3=s(Pf);Jre=n(Q3,"STRONG",{});var c3e=s(Jre);Pze=r(c3e,"albert"),c3e.forEach(t),Bze=r(Q3," \u2014 "),Jk=n(Q3,"A",{href:!0});var f3e=s(Jk);Ize=r(f3e,"AlbertConfig"),f3e.forEach(t),Nze=r(Q3," (ALBERT model)"),Q3.forEach(t),qze=i(L),Bf=n(L,"LI",{});var H3=s(Bf);Yre=n(H3,"STRONG",{});var m3e=s(Yre);jze=r(m3e,"bart"),m3e.forEach(t),Dze=r(H3," \u2014 "),Yk=n(H3,"A",{href:!0});var g3e=s(Yk);Gze=r(g3e,"BartConfig"),g3e.forEach(t),Oze=r(H3," (BART model)"),H3.forEach(t),Vze=i(L),If=n(L,"LI",{});var U3=s(If);Kre=n(U3,"STRONG",{});var h3e=s(Kre);Xze=r(h3e,"beit"),h3e.forEach(t),zze=r(U3," \u2014 "),Kk=n(U3,"A",{href:!0});var p3e=s(Kk);Wze=r(p3e,"BeitConfig"),p3e.forEach(t),Qze=r(U3," (BEiT model)"),U3.forEach(t),Hze=i(L),Nf=n(L,"LI",{});var J3=s(Nf);Zre=n(J3,"STRONG",{});var u3e=s(Zre);Uze=r(u3e,"bert"),u3e.forEach(t),Jze=r(J3," \u2014 "),Zk=n(J3,"A",{href:!0});var _3e=s(Zk);Yze=r(_3e,"BertConfig"),_3e.forEach(t),Kze=r(J3," (BERT model)"),J3.forEach(t),Zze=i(L),qf=n(L,"LI",{});var Y3=s(qf);ete=n(Y3,"STRONG",{});var b3e=s(ete);eWe=r(b3e,"bert-generation"),b3e.forEach(t),oWe=r(Y3," \u2014 "),eS=n(Y3,"A",{href:!0});var v3e=s(eS);rWe=r(v3e,"BertGenerationConfig"),v3e.forEach(t),tWe=r(Y3," (Bert Generation model)"),Y3.forEach(t),aWe=i(L),jf=n(L,"LI",{});var K3=s(jf);ote=n(K3,"STRONG",{});var F3e=s(ote);nWe=r(F3e,"big_bird"),F3e.forEach(t),sWe=r(K3," \u2014 "),oS=n(K3,"A",{href:!0});var T3e=s(oS);lWe=r(T3e,"BigBirdConfig"),T3e.forEach(t),iWe=r(K3," (BigBird model)"),K3.forEach(t),dWe=i(L),Df=n(L,"LI",{});var Z3=s(Df);rte=n(Z3,"STRONG",{});var M3e=s(rte);cWe=r(M3e,"bigbird_pegasus"),M3e.forEach(t),fWe=r(Z3," \u2014 "),rS=n(Z3,"A",{href:!0});var E3e=s(rS);mWe=r(E3e,"BigBirdPegasusConfig"),E3e.forEach(t),gWe=r(Z3," (BigBird-Pegasus model)"),Z3.forEach(t),hWe=i(L),Gf=n(L,"LI",{});var e0=s(Gf);tte=n(e0,"STRONG",{});var C3e=s(tte);pWe=r(C3e,"blenderbot"),C3e.forEach(t),uWe=r(e0," \u2014 "),tS=n(e0,"A",{href:!0});var w3e=s(tS);_We=r(w3e,"BlenderbotConfig"),w3e.forEach(t),bWe=r(e0," (Blenderbot model)"),e0.forEach(t),vWe=i(L),Of=n(L,"LI",{});var o0=s(Of);ate=n(o0,"STRONG",{});var A3e=s(ate);FWe=r(A3e,"blenderbot-small"),A3e.forEach(t),TWe=r(o0," \u2014 "),aS=n(o0,"A",{href:!0});var L3e=s(aS);MWe=r(L3e,"BlenderbotSmallConfig"),L3e.forEach(t),EWe=r(o0," (BlenderbotSmall model)"),o0.forEach(t),CWe=i(L),Vf=n(L,"LI",{});var r0=s(Vf);nte=n(r0,"STRONG",{});var y3e=s(nte);wWe=r(y3e,"bloom"),y3e.forEach(t),AWe=r(r0," \u2014 "),nS=n(r0,"A",{href:!0});var x3e=s(nS);LWe=r(x3e,"BloomConfig"),x3e.forEach(t),yWe=r(r0," (BLOOM model)"),r0.forEach(t),xWe=i(L),Xf=n(L,"LI",{});var t0=s(Xf);ste=n(t0,"STRONG",{});var $3e=s(ste);$We=r($3e,"camembert"),$3e.forEach(t),kWe=r(t0," \u2014 "),sS=n(t0,"A",{href:!0});var k3e=s(sS);SWe=r(k3e,"CamembertConfig"),k3e.forEach(t),RWe=r(t0," (CamemBERT model)"),t0.forEach(t),PWe=i(L),zf=n(L,"LI",{});var a0=s(zf);lte=n(a0,"STRONG",{});var S3e=s(lte);BWe=r(S3e,"canine"),S3e.forEach(t),IWe=r(a0," \u2014 "),lS=n(a0,"A",{href:!0});var R3e=s(lS);NWe=r(R3e,"CanineConfig"),R3e.forEach(t),qWe=r(a0," (CANINE model)"),a0.forEach(t),jWe=i(L),Wf=n(L,"LI",{});var n0=s(Wf);ite=n(n0,"STRONG",{});var P3e=s(ite);DWe=r(P3e,"clip"),P3e.forEach(t),GWe=r(n0," \u2014 "),iS=n(n0,"A",{href:!0});var B3e=s(iS);OWe=r(B3e,"CLIPConfig"),B3e.forEach(t),VWe=r(n0," (CLIP model)"),n0.forEach(t),XWe=i(L),Qf=n(L,"LI",{});var s0=s(Qf);dte=n(s0,"STRONG",{});var I3e=s(dte);zWe=r(I3e,"convbert"),I3e.forEach(t),WWe=r(s0," \u2014 "),dS=n(s0,"A",{href:!0});var N3e=s(dS);QWe=r(N3e,"ConvBertConfig"),N3e.forEach(t),HWe=r(s0," (ConvBERT model)"),s0.forEach(t),UWe=i(L),Hf=n(L,"LI",{});var l0=s(Hf);cte=n(l0,"STRONG",{});var q3e=s(cte);JWe=r(q3e,"convnext"),q3e.forEach(t),YWe=r(l0," \u2014 "),cS=n(l0,"A",{href:!0});var j3e=s(cS);KWe=r(j3e,"ConvNextConfig"),j3e.forEach(t),ZWe=r(l0," (ConvNeXT model)"),l0.forEach(t),eQe=i(L),Uf=n(L,"LI",{});var i0=s(Uf);fte=n(i0,"STRONG",{});var D3e=s(fte);oQe=r(D3e,"ctrl"),D3e.forEach(t),rQe=r(i0," \u2014 "),fS=n(i0,"A",{href:!0});var G3e=s(fS);tQe=r(G3e,"CTRLConfig"),G3e.forEach(t),aQe=r(i0," (CTRL model)"),i0.forEach(t),nQe=i(L),Jf=n(L,"LI",{});var d0=s(Jf);mte=n(d0,"STRONG",{});var O3e=s(mte);sQe=r(O3e,"cvt"),O3e.forEach(t),lQe=r(d0," \u2014 "),mS=n(d0,"A",{href:!0});var V3e=s(mS);iQe=r(V3e,"CvtConfig"),V3e.forEach(t),dQe=r(d0," (CvT model)"),d0.forEach(t),cQe=i(L),Yf=n(L,"LI",{});var c0=s(Yf);gte=n(c0,"STRONG",{});var X3e=s(gte);fQe=r(X3e,"data2vec-audio"),X3e.forEach(t),mQe=r(c0," \u2014 "),gS=n(c0,"A",{href:!0});var z3e=s(gS);gQe=r(z3e,"Data2VecAudioConfig"),z3e.forEach(t),hQe=r(c0," (Data2VecAudio model)"),c0.forEach(t),pQe=i(L),Kf=n(L,"LI",{});var f0=s(Kf);hte=n(f0,"STRONG",{});var W3e=s(hte);uQe=r(W3e,"data2vec-text"),W3e.forEach(t),_Qe=r(f0," \u2014 "),hS=n(f0,"A",{href:!0});var Q3e=s(hS);bQe=r(Q3e,"Data2VecTextConfig"),Q3e.forEach(t),vQe=r(f0," (Data2VecText model)"),f0.forEach(t),FQe=i(L),Zf=n(L,"LI",{});var m0=s(Zf);pte=n(m0,"STRONG",{});var H3e=s(pte);TQe=r(H3e,"data2vec-vision"),H3e.forEach(t),MQe=r(m0," \u2014 "),pS=n(m0,"A",{href:!0});var U3e=s(pS);EQe=r(U3e,"Data2VecVisionConfig"),U3e.forEach(t),CQe=r(m0," (Data2VecVision model)"),m0.forEach(t),wQe=i(L),em=n(L,"LI",{});var g0=s(em);ute=n(g0,"STRONG",{});var J3e=s(ute);AQe=r(J3e,"deberta"),J3e.forEach(t),LQe=r(g0," \u2014 "),uS=n(g0,"A",{href:!0});var Y3e=s(uS);yQe=r(Y3e,"DebertaConfig"),Y3e.forEach(t),xQe=r(g0," (DeBERTa model)"),g0.forEach(t),$Qe=i(L),om=n(L,"LI",{});var h0=s(om);_te=n(h0,"STRONG",{});var K3e=s(_te);kQe=r(K3e,"deberta-v2"),K3e.forEach(t),SQe=r(h0," \u2014 "),_S=n(h0,"A",{href:!0});var Z3e=s(_S);RQe=r(Z3e,"DebertaV2Config"),Z3e.forEach(t),PQe=r(h0," (DeBERTa-v2 model)"),h0.forEach(t),BQe=i(L),rm=n(L,"LI",{});var p0=s(rm);bte=n(p0,"STRONG",{});var e0e=s(bte);IQe=r(e0e,"decision_transformer"),e0e.forEach(t),NQe=r(p0," \u2014 "),bS=n(p0,"A",{href:!0});var o0e=s(bS);qQe=r(o0e,"DecisionTransformerConfig"),o0e.forEach(t),jQe=r(p0," (Decision Transformer model)"),p0.forEach(t),DQe=i(L),tm=n(L,"LI",{});var u0=s(tm);vte=n(u0,"STRONG",{});var JUr=s(vte);GQe=r(JUr,"deit"),JUr.forEach(t),OQe=r(u0," \u2014 "),vS=n(u0,"A",{href:!0});var YUr=s(vS);VQe=r(YUr,"DeiTConfig"),YUr.forEach(t),XQe=r(u0," (DeiT model)"),u0.forEach(t),zQe=i(L),am=n(L,"LI",{});var r0e=s(am);Fte=n(r0e,"STRONG",{});var KUr=s(Fte);WQe=r(KUr,"detr"),KUr.forEach(t),QQe=r(r0e," \u2014 "),FS=n(r0e,"A",{href:!0});var ZUr=s(FS);HQe=r(ZUr,"DetrConfig"),ZUr.forEach(t),UQe=r(r0e," (DETR model)"),r0e.forEach(t),JQe=i(L),nm=n(L,"LI",{});var t0e=s(nm);Tte=n(t0e,"STRONG",{});var eJr=s(Tte);YQe=r(eJr,"distilbert"),eJr.forEach(t),KQe=r(t0e," \u2014 "),TS=n(t0e,"A",{href:!0});var oJr=s(TS);ZQe=r(oJr,"DistilBertConfig"),oJr.forEach(t),eHe=r(t0e," (DistilBERT model)"),t0e.forEach(t),oHe=i(L),sm=n(L,"LI",{});var a0e=s(sm);Mte=n(a0e,"STRONG",{});var rJr=s(Mte);rHe=r(rJr,"dpr"),rJr.forEach(t),tHe=r(a0e," \u2014 "),MS=n(a0e,"A",{href:!0});var tJr=s(MS);aHe=r(tJr,"DPRConfig"),tJr.forEach(t),nHe=r(a0e," (DPR model)"),a0e.forEach(t),sHe=i(L),lm=n(L,"LI",{});var n0e=s(lm);Ete=n(n0e,"STRONG",{});var aJr=s(Ete);lHe=r(aJr,"dpt"),aJr.forEach(t),iHe=r(n0e," \u2014 "),ES=n(n0e,"A",{href:!0});var nJr=s(ES);dHe=r(nJr,"DPTConfig"),nJr.forEach(t),cHe=r(n0e," (DPT model)"),n0e.forEach(t),fHe=i(L),im=n(L,"LI",{});var s0e=s(im);Cte=n(s0e,"STRONG",{});var sJr=s(Cte);mHe=r(sJr,"electra"),sJr.forEach(t),gHe=r(s0e," \u2014 "),CS=n(s0e,"A",{href:!0});var lJr=s(CS);hHe=r(lJr,"ElectraConfig"),lJr.forEach(t),pHe=r(s0e," (ELECTRA model)"),s0e.forEach(t),uHe=i(L),dm=n(L,"LI",{});var l0e=s(dm);wte=n(l0e,"STRONG",{});var iJr=s(wte);_He=r(iJr,"encoder-decoder"),iJr.forEach(t),bHe=r(l0e," \u2014 "),wS=n(l0e,"A",{href:!0});var dJr=s(wS);vHe=r(dJr,"EncoderDecoderConfig"),dJr.forEach(t),FHe=r(l0e," (Encoder decoder model)"),l0e.forEach(t),THe=i(L),cm=n(L,"LI",{});var i0e=s(cm);Ate=n(i0e,"STRONG",{});var cJr=s(Ate);MHe=r(cJr,"flaubert"),cJr.forEach(t),EHe=r(i0e," \u2014 "),AS=n(i0e,"A",{href:!0});var fJr=s(AS);CHe=r(fJr,"FlaubertConfig"),fJr.forEach(t),wHe=r(i0e," (FlauBERT model)"),i0e.forEach(t),AHe=i(L),fm=n(L,"LI",{});var d0e=s(fm);Lte=n(d0e,"STRONG",{});var mJr=s(Lte);LHe=r(mJr,"flava"),mJr.forEach(t),yHe=r(d0e," \u2014 "),LS=n(d0e,"A",{href:!0});var gJr=s(LS);xHe=r(gJr,"FlavaConfig"),gJr.forEach(t),$He=r(d0e," (FLAVA model)"),d0e.forEach(t),kHe=i(L),mm=n(L,"LI",{});var c0e=s(mm);yte=n(c0e,"STRONG",{});var hJr=s(yte);SHe=r(hJr,"fnet"),hJr.forEach(t),RHe=r(c0e," \u2014 "),yS=n(c0e,"A",{href:!0});var pJr=s(yS);PHe=r(pJr,"FNetConfig"),pJr.forEach(t),BHe=r(c0e," (FNet model)"),c0e.forEach(t),IHe=i(L),gm=n(L,"LI",{});var f0e=s(gm);xte=n(f0e,"STRONG",{});var uJr=s(xte);NHe=r(uJr,"fsmt"),uJr.forEach(t),qHe=r(f0e," \u2014 "),xS=n(f0e,"A",{href:!0});var _Jr=s(xS);jHe=r(_Jr,"FSMTConfig"),_Jr.forEach(t),DHe=r(f0e," (FairSeq Machine-Translation model)"),f0e.forEach(t),GHe=i(L),hm=n(L,"LI",{});var m0e=s(hm);$te=n(m0e,"STRONG",{});var bJr=s($te);OHe=r(bJr,"funnel"),bJr.forEach(t),VHe=r(m0e," \u2014 "),$S=n(m0e,"A",{href:!0});var vJr=s($S);XHe=r(vJr,"FunnelConfig"),vJr.forEach(t),zHe=r(m0e," (Funnel Transformer model)"),m0e.forEach(t),WHe=i(L),pm=n(L,"LI",{});var g0e=s(pm);kte=n(g0e,"STRONG",{});var FJr=s(kte);QHe=r(FJr,"glpn"),FJr.forEach(t),HHe=r(g0e," \u2014 "),kS=n(g0e,"A",{href:!0});var TJr=s(kS);UHe=r(TJr,"GLPNConfig"),TJr.forEach(t),JHe=r(g0e," (GLPN model)"),g0e.forEach(t),YHe=i(L),um=n(L,"LI",{});var h0e=s(um);Ste=n(h0e,"STRONG",{});var MJr=s(Ste);KHe=r(MJr,"gpt2"),MJr.forEach(t),ZHe=r(h0e," \u2014 "),SS=n(h0e,"A",{href:!0});var EJr=s(SS);eUe=r(EJr,"GPT2Config"),EJr.forEach(t),oUe=r(h0e," (OpenAI GPT-2 model)"),h0e.forEach(t),rUe=i(L),_m=n(L,"LI",{});var p0e=s(_m);Rte=n(p0e,"STRONG",{});var CJr=s(Rte);tUe=r(CJr,"gpt_neo"),CJr.forEach(t),aUe=r(p0e," \u2014 "),RS=n(p0e,"A",{href:!0});var wJr=s(RS);nUe=r(wJr,"GPTNeoConfig"),wJr.forEach(t),sUe=r(p0e," (GPT Neo model)"),p0e.forEach(t),lUe=i(L),bm=n(L,"LI",{});var u0e=s(bm);Pte=n(u0e,"STRONG",{});var AJr=s(Pte);iUe=r(AJr,"gpt_neox"),AJr.forEach(t),dUe=r(u0e," \u2014 "),PS=n(u0e,"A",{href:!0});var LJr=s(PS);cUe=r(LJr,"GPTNeoXConfig"),LJr.forEach(t),fUe=r(u0e," (GPT NeoX model)"),u0e.forEach(t),mUe=i(L),vm=n(L,"LI",{});var _0e=s(vm);Bte=n(_0e,"STRONG",{});var yJr=s(Bte);gUe=r(yJr,"gptj"),yJr.forEach(t),hUe=r(_0e," \u2014 "),BS=n(_0e,"A",{href:!0});var xJr=s(BS);pUe=r(xJr,"GPTJConfig"),xJr.forEach(t),uUe=r(_0e," (GPT-J model)"),_0e.forEach(t),_Ue=i(L),Fm=n(L,"LI",{});var b0e=s(Fm);Ite=n(b0e,"STRONG",{});var $Jr=s(Ite);bUe=r($Jr,"hubert"),$Jr.forEach(t),vUe=r(b0e," \u2014 "),IS=n(b0e,"A",{href:!0});var kJr=s(IS);FUe=r(kJr,"HubertConfig"),kJr.forEach(t),TUe=r(b0e," (Hubert model)"),b0e.forEach(t),MUe=i(L),Tm=n(L,"LI",{});var v0e=s(Tm);Nte=n(v0e,"STRONG",{});var SJr=s(Nte);EUe=r(SJr,"ibert"),SJr.forEach(t),CUe=r(v0e," \u2014 "),NS=n(v0e,"A",{href:!0});var RJr=s(NS);wUe=r(RJr,"IBertConfig"),RJr.forEach(t),AUe=r(v0e," (I-BERT model)"),v0e.forEach(t),LUe=i(L),Mm=n(L,"LI",{});var F0e=s(Mm);qte=n(F0e,"STRONG",{});var PJr=s(qte);yUe=r(PJr,"imagegpt"),PJr.forEach(t),xUe=r(F0e," \u2014 "),qS=n(F0e,"A",{href:!0});var BJr=s(qS);$Ue=r(BJr,"ImageGPTConfig"),BJr.forEach(t),kUe=r(F0e," (ImageGPT model)"),F0e.forEach(t),SUe=i(L),Em=n(L,"LI",{});var T0e=s(Em);jte=n(T0e,"STRONG",{});var IJr=s(jte);RUe=r(IJr,"layoutlm"),IJr.forEach(t),PUe=r(T0e," \u2014 "),jS=n(T0e,"A",{href:!0});var NJr=s(jS);BUe=r(NJr,"LayoutLMConfig"),NJr.forEach(t),IUe=r(T0e," (LayoutLM model)"),T0e.forEach(t),NUe=i(L),Cm=n(L,"LI",{});var M0e=s(Cm);Dte=n(M0e,"STRONG",{});var qJr=s(Dte);qUe=r(qJr,"layoutlmv2"),qJr.forEach(t),jUe=r(M0e," \u2014 "),DS=n(M0e,"A",{href:!0});var jJr=s(DS);DUe=r(jJr,"LayoutLMv2Config"),jJr.forEach(t),GUe=r(M0e," (LayoutLMv2 model)"),M0e.forEach(t),OUe=i(L),wm=n(L,"LI",{});var E0e=s(wm);Gte=n(E0e,"STRONG",{});var DJr=s(Gte);VUe=r(DJr,"layoutlmv3"),DJr.forEach(t),XUe=r(E0e," \u2014 "),GS=n(E0e,"A",{href:!0});var GJr=s(GS);zUe=r(GJr,"LayoutLMv3Config"),GJr.forEach(t),WUe=r(E0e," (LayoutLMv3 model)"),E0e.forEach(t),QUe=i(L),Am=n(L,"LI",{});var C0e=s(Am);Ote=n(C0e,"STRONG",{});var OJr=s(Ote);HUe=r(OJr,"led"),OJr.forEach(t),UUe=r(C0e," \u2014 "),OS=n(C0e,"A",{href:!0});var VJr=s(OS);JUe=r(VJr,"LEDConfig"),VJr.forEach(t),YUe=r(C0e," (LED model)"),C0e.forEach(t),KUe=i(L),Lm=n(L,"LI",{});var w0e=s(Lm);Vte=n(w0e,"STRONG",{});var XJr=s(Vte);ZUe=r(XJr,"levit"),XJr.forEach(t),eJe=r(w0e," \u2014 "),VS=n(w0e,"A",{href:!0});var zJr=s(VS);oJe=r(zJr,"LevitConfig"),zJr.forEach(t),rJe=r(w0e," (LeViT model)"),w0e.forEach(t),tJe=i(L),ym=n(L,"LI",{});var A0e=s(ym);Xte=n(A0e,"STRONG",{});var WJr=s(Xte);aJe=r(WJr,"longformer"),WJr.forEach(t),nJe=r(A0e," \u2014 "),XS=n(A0e,"A",{href:!0});var QJr=s(XS);sJe=r(QJr,"LongformerConfig"),QJr.forEach(t),lJe=r(A0e," (Longformer model)"),A0e.forEach(t),iJe=i(L),xm=n(L,"LI",{});var L0e=s(xm);zte=n(L0e,"STRONG",{});var HJr=s(zte);dJe=r(HJr,"longt5"),HJr.forEach(t),cJe=r(L0e," \u2014 "),zS=n(L0e,"A",{href:!0});var UJr=s(zS);fJe=r(UJr,"LongT5Config"),UJr.forEach(t),mJe=r(L0e," (LongT5 model)"),L0e.forEach(t),gJe=i(L),$m=n(L,"LI",{});var y0e=s($m);Wte=n(y0e,"STRONG",{});var JJr=s(Wte);hJe=r(JJr,"luke"),JJr.forEach(t),pJe=r(y0e," \u2014 "),WS=n(y0e,"A",{href:!0});var YJr=s(WS);uJe=r(YJr,"LukeConfig"),YJr.forEach(t),_Je=r(y0e," (LUKE model)"),y0e.forEach(t),bJe=i(L),km=n(L,"LI",{});var x0e=s(km);Qte=n(x0e,"STRONG",{});var KJr=s(Qte);vJe=r(KJr,"lxmert"),KJr.forEach(t),FJe=r(x0e," \u2014 "),QS=n(x0e,"A",{href:!0});var ZJr=s(QS);TJe=r(ZJr,"LxmertConfig"),ZJr.forEach(t),MJe=r(x0e," (LXMERT model)"),x0e.forEach(t),EJe=i(L),Sm=n(L,"LI",{});var $0e=s(Sm);Hte=n($0e,"STRONG",{});var eYr=s(Hte);CJe=r(eYr,"m2m_100"),eYr.forEach(t),wJe=r($0e," \u2014 "),HS=n($0e,"A",{href:!0});var oYr=s(HS);AJe=r(oYr,"M2M100Config"),oYr.forEach(t),LJe=r($0e," (M2M100 model)"),$0e.forEach(t),yJe=i(L),Rm=n(L,"LI",{});var k0e=s(Rm);Ute=n(k0e,"STRONG",{});var rYr=s(Ute);xJe=r(rYr,"marian"),rYr.forEach(t),$Je=r(k0e," \u2014 "),US=n(k0e,"A",{href:!0});var tYr=s(US);kJe=r(tYr,"MarianConfig"),tYr.forEach(t),SJe=r(k0e," (Marian model)"),k0e.forEach(t),RJe=i(L),Pm=n(L,"LI",{});var S0e=s(Pm);Jte=n(S0e,"STRONG",{});var aYr=s(Jte);PJe=r(aYr,"maskformer"),aYr.forEach(t),BJe=r(S0e," \u2014 "),JS=n(S0e,"A",{href:!0});var nYr=s(JS);IJe=r(nYr,"MaskFormerConfig"),nYr.forEach(t),NJe=r(S0e," (MaskFormer model)"),S0e.forEach(t),qJe=i(L),Bm=n(L,"LI",{});var R0e=s(Bm);Yte=n(R0e,"STRONG",{});var sYr=s(Yte);jJe=r(sYr,"mbart"),sYr.forEach(t),DJe=r(R0e," \u2014 "),YS=n(R0e,"A",{href:!0});var lYr=s(YS);GJe=r(lYr,"MBartConfig"),lYr.forEach(t),OJe=r(R0e," (mBART model)"),R0e.forEach(t),VJe=i(L),Im=n(L,"LI",{});var P0e=s(Im);Kte=n(P0e,"STRONG",{});var iYr=s(Kte);XJe=r(iYr,"mctct"),iYr.forEach(t),zJe=r(P0e," \u2014 "),KS=n(P0e,"A",{href:!0});var dYr=s(KS);WJe=r(dYr,"MCTCTConfig"),dYr.forEach(t),QJe=r(P0e," (M-CTC-T model)"),P0e.forEach(t),HJe=i(L),Nm=n(L,"LI",{});var B0e=s(Nm);Zte=n(B0e,"STRONG",{});var cYr=s(Zte);UJe=r(cYr,"megatron-bert"),cYr.forEach(t),JJe=r(B0e," \u2014 "),ZS=n(B0e,"A",{href:!0});var fYr=s(ZS);YJe=r(fYr,"MegatronBertConfig"),fYr.forEach(t),KJe=r(B0e," (Megatron-BERT model)"),B0e.forEach(t),ZJe=i(L),qm=n(L,"LI",{});var I0e=s(qm);eae=n(I0e,"STRONG",{});var mYr=s(eae);eYe=r(mYr,"mobilebert"),mYr.forEach(t),oYe=r(I0e," \u2014 "),eR=n(I0e,"A",{href:!0});var gYr=s(eR);rYe=r(gYr,"MobileBertConfig"),gYr.forEach(t),tYe=r(I0e," (MobileBERT model)"),I0e.forEach(t),aYe=i(L),jm=n(L,"LI",{});var N0e=s(jm);oae=n(N0e,"STRONG",{});var hYr=s(oae);nYe=r(hYr,"mpnet"),hYr.forEach(t),sYe=r(N0e," \u2014 "),oR=n(N0e,"A",{href:!0});var pYr=s(oR);lYe=r(pYr,"MPNetConfig"),pYr.forEach(t),iYe=r(N0e," (MPNet model)"),N0e.forEach(t),dYe=i(L),Dm=n(L,"LI",{});var q0e=s(Dm);rae=n(q0e,"STRONG",{});var uYr=s(rae);cYe=r(uYr,"mt5"),uYr.forEach(t),fYe=r(q0e," \u2014 "),rR=n(q0e,"A",{href:!0});var _Yr=s(rR);mYe=r(_Yr,"MT5Config"),_Yr.forEach(t),gYe=r(q0e," (MT5 model)"),q0e.forEach(t),hYe=i(L),Gm=n(L,"LI",{});var j0e=s(Gm);tae=n(j0e,"STRONG",{});var bYr=s(tae);pYe=r(bYr,"nystromformer"),bYr.forEach(t),uYe=r(j0e," \u2014 "),tR=n(j0e,"A",{href:!0});var vYr=s(tR);_Ye=r(vYr,"NystromformerConfig"),vYr.forEach(t),bYe=r(j0e," (Nystr\xF6mformer model)"),j0e.forEach(t),vYe=i(L),Om=n(L,"LI",{});var D0e=s(Om);aae=n(D0e,"STRONG",{});var FYr=s(aae);FYe=r(FYr,"openai-gpt"),FYr.forEach(t),TYe=r(D0e," \u2014 "),aR=n(D0e,"A",{href:!0});var TYr=s(aR);MYe=r(TYr,"OpenAIGPTConfig"),TYr.forEach(t),EYe=r(D0e," (OpenAI GPT model)"),D0e.forEach(t),CYe=i(L),Vm=n(L,"LI",{});var G0e=s(Vm);nae=n(G0e,"STRONG",{});var MYr=s(nae);wYe=r(MYr,"opt"),MYr.forEach(t),AYe=r(G0e," \u2014 "),nR=n(G0e,"A",{href:!0});var EYr=s(nR);LYe=r(EYr,"OPTConfig"),EYr.forEach(t),yYe=r(G0e," (OPT model)"),G0e.forEach(t),xYe=i(L),Xm=n(L,"LI",{});var O0e=s(Xm);sae=n(O0e,"STRONG",{});var CYr=s(sae);$Ye=r(CYr,"pegasus"),CYr.forEach(t),kYe=r(O0e," \u2014 "),sR=n(O0e,"A",{href:!0});var wYr=s(sR);SYe=r(wYr,"PegasusConfig"),wYr.forEach(t),RYe=r(O0e," (Pegasus model)"),O0e.forEach(t),PYe=i(L),zm=n(L,"LI",{});var V0e=s(zm);lae=n(V0e,"STRONG",{});var AYr=s(lae);BYe=r(AYr,"perceiver"),AYr.forEach(t),IYe=r(V0e," \u2014 "),lR=n(V0e,"A",{href:!0});var LYr=s(lR);NYe=r(LYr,"PerceiverConfig"),LYr.forEach(t),qYe=r(V0e," (Perceiver model)"),V0e.forEach(t),jYe=i(L),Wm=n(L,"LI",{});var X0e=s(Wm);iae=n(X0e,"STRONG",{});var yYr=s(iae);DYe=r(yYr,"plbart"),yYr.forEach(t),GYe=r(X0e," \u2014 "),iR=n(X0e,"A",{href:!0});var xYr=s(iR);OYe=r(xYr,"PLBartConfig"),xYr.forEach(t),VYe=r(X0e," (PLBart model)"),X0e.forEach(t),XYe=i(L),Qm=n(L,"LI",{});var z0e=s(Qm);dae=n(z0e,"STRONG",{});var $Yr=s(dae);zYe=r($Yr,"poolformer"),$Yr.forEach(t),WYe=r(z0e," \u2014 "),dR=n(z0e,"A",{href:!0});var kYr=s(dR);QYe=r(kYr,"PoolFormerConfig"),kYr.forEach(t),HYe=r(z0e," (PoolFormer model)"),z0e.forEach(t),UYe=i(L),Hm=n(L,"LI",{});var W0e=s(Hm);cae=n(W0e,"STRONG",{});var SYr=s(cae);JYe=r(SYr,"prophetnet"),SYr.forEach(t),YYe=r(W0e," \u2014 "),cR=n(W0e,"A",{href:!0});var RYr=s(cR);KYe=r(RYr,"ProphetNetConfig"),RYr.forEach(t),ZYe=r(W0e," (ProphetNet model)"),W0e.forEach(t),eKe=i(L),Um=n(L,"LI",{});var Q0e=s(Um);fae=n(Q0e,"STRONG",{});var PYr=s(fae);oKe=r(PYr,"qdqbert"),PYr.forEach(t),rKe=r(Q0e," \u2014 "),fR=n(Q0e,"A",{href:!0});var BYr=s(fR);tKe=r(BYr,"QDQBertConfig"),BYr.forEach(t),aKe=r(Q0e," (QDQBert model)"),Q0e.forEach(t),nKe=i(L),Jm=n(L,"LI",{});var H0e=s(Jm);mae=n(H0e,"STRONG",{});var IYr=s(mae);sKe=r(IYr,"rag"),IYr.forEach(t),lKe=r(H0e," \u2014 "),mR=n(H0e,"A",{href:!0});var NYr=s(mR);iKe=r(NYr,"RagConfig"),NYr.forEach(t),dKe=r(H0e," (RAG model)"),H0e.forEach(t),cKe=i(L),Ym=n(L,"LI",{});var U0e=s(Ym);gae=n(U0e,"STRONG",{});var qYr=s(gae);fKe=r(qYr,"realm"),qYr.forEach(t),mKe=r(U0e," \u2014 "),gR=n(U0e,"A",{href:!0});var jYr=s(gR);gKe=r(jYr,"RealmConfig"),jYr.forEach(t),hKe=r(U0e," (REALM model)"),U0e.forEach(t),pKe=i(L),Km=n(L,"LI",{});var J0e=s(Km);hae=n(J0e,"STRONG",{});var DYr=s(hae);uKe=r(DYr,"reformer"),DYr.forEach(t),_Ke=r(J0e," \u2014 "),hR=n(J0e,"A",{href:!0});var GYr=s(hR);bKe=r(GYr,"ReformerConfig"),GYr.forEach(t),vKe=r(J0e," (Reformer model)"),J0e.forEach(t),FKe=i(L),Zm=n(L,"LI",{});var Y0e=s(Zm);pae=n(Y0e,"STRONG",{});var OYr=s(pae);TKe=r(OYr,"regnet"),OYr.forEach(t),MKe=r(Y0e," \u2014 "),pR=n(Y0e,"A",{href:!0});var VYr=s(pR);EKe=r(VYr,"RegNetConfig"),VYr.forEach(t),CKe=r(Y0e," (RegNet model)"),Y0e.forEach(t),wKe=i(L),eg=n(L,"LI",{});var K0e=s(eg);uae=n(K0e,"STRONG",{});var XYr=s(uae);AKe=r(XYr,"rembert"),XYr.forEach(t),LKe=r(K0e," \u2014 "),uR=n(K0e,"A",{href:!0});var zYr=s(uR);yKe=r(zYr,"RemBertConfig"),zYr.forEach(t),xKe=r(K0e," (RemBERT model)"),K0e.forEach(t),$Ke=i(L),og=n(L,"LI",{});var Z0e=s(og);_ae=n(Z0e,"STRONG",{});var WYr=s(_ae);kKe=r(WYr,"resnet"),WYr.forEach(t),SKe=r(Z0e," \u2014 "),_R=n(Z0e,"A",{href:!0});var QYr=s(_R);RKe=r(QYr,"ResNetConfig"),QYr.forEach(t),PKe=r(Z0e," (ResNet model)"),Z0e.forEach(t),BKe=i(L),rg=n(L,"LI",{});var ewe=s(rg);bae=n(ewe,"STRONG",{});var HYr=s(bae);IKe=r(HYr,"retribert"),HYr.forEach(t),NKe=r(ewe," \u2014 "),bR=n(ewe,"A",{href:!0});var UYr=s(bR);qKe=r(UYr,"RetriBertConfig"),UYr.forEach(t),jKe=r(ewe," (RetriBERT model)"),ewe.forEach(t),DKe=i(L),tg=n(L,"LI",{});var owe=s(tg);vae=n(owe,"STRONG",{});var JYr=s(vae);GKe=r(JYr,"roberta"),JYr.forEach(t),OKe=r(owe," \u2014 "),vR=n(owe,"A",{href:!0});var YYr=s(vR);VKe=r(YYr,"RobertaConfig"),YYr.forEach(t),XKe=r(owe," (RoBERTa model)"),owe.forEach(t),zKe=i(L),ag=n(L,"LI",{});var rwe=s(ag);Fae=n(rwe,"STRONG",{});var KYr=s(Fae);WKe=r(KYr,"roformer"),KYr.forEach(t),QKe=r(rwe," \u2014 "),FR=n(rwe,"A",{href:!0});var ZYr=s(FR);HKe=r(ZYr,"RoFormerConfig"),ZYr.forEach(t),UKe=r(rwe," (RoFormer model)"),rwe.forEach(t),JKe=i(L),ng=n(L,"LI",{});var twe=s(ng);Tae=n(twe,"STRONG",{});var eKr=s(Tae);YKe=r(eKr,"segformer"),eKr.forEach(t),KKe=r(twe," \u2014 "),TR=n(twe,"A",{href:!0});var oKr=s(TR);ZKe=r(oKr,"SegformerConfig"),oKr.forEach(t),eZe=r(twe," (SegFormer model)"),twe.forEach(t),oZe=i(L),sg=n(L,"LI",{});var awe=s(sg);Mae=n(awe,"STRONG",{});var rKr=s(Mae);rZe=r(rKr,"sew"),rKr.forEach(t),tZe=r(awe," \u2014 "),MR=n(awe,"A",{href:!0});var tKr=s(MR);aZe=r(tKr,"SEWConfig"),tKr.forEach(t),nZe=r(awe," (SEW model)"),awe.forEach(t),sZe=i(L),lg=n(L,"LI",{});var nwe=s(lg);Eae=n(nwe,"STRONG",{});var aKr=s(Eae);lZe=r(aKr,"sew-d"),aKr.forEach(t),iZe=r(nwe," \u2014 "),ER=n(nwe,"A",{href:!0});var nKr=s(ER);dZe=r(nKr,"SEWDConfig"),nKr.forEach(t),cZe=r(nwe," (SEW-D model)"),nwe.forEach(t),fZe=i(L),ig=n(L,"LI",{});var swe=s(ig);Cae=n(swe,"STRONG",{});var sKr=s(Cae);mZe=r(sKr,"speech-encoder-decoder"),sKr.forEach(t),gZe=r(swe," \u2014 "),CR=n(swe,"A",{href:!0});var lKr=s(CR);hZe=r(lKr,"SpeechEncoderDecoderConfig"),lKr.forEach(t),pZe=r(swe," (Speech Encoder decoder model)"),swe.forEach(t),uZe=i(L),dg=n(L,"LI",{});var lwe=s(dg);wae=n(lwe,"STRONG",{});var iKr=s(wae);_Ze=r(iKr,"speech_to_text"),iKr.forEach(t),bZe=r(lwe," \u2014 "),wR=n(lwe,"A",{href:!0});var dKr=s(wR);vZe=r(dKr,"Speech2TextConfig"),dKr.forEach(t),FZe=r(lwe," (Speech2Text model)"),lwe.forEach(t),TZe=i(L),cg=n(L,"LI",{});var iwe=s(cg);Aae=n(iwe,"STRONG",{});var cKr=s(Aae);MZe=r(cKr,"speech_to_text_2"),cKr.forEach(t),EZe=r(iwe," \u2014 "),AR=n(iwe,"A",{href:!0});var fKr=s(AR);CZe=r(fKr,"Speech2Text2Config"),fKr.forEach(t),wZe=r(iwe," (Speech2Text2 model)"),iwe.forEach(t),AZe=i(L),fg=n(L,"LI",{});var dwe=s(fg);Lae=n(dwe,"STRONG",{});var mKr=s(Lae);LZe=r(mKr,"splinter"),mKr.forEach(t),yZe=r(dwe," \u2014 "),LR=n(dwe,"A",{href:!0});var gKr=s(LR);xZe=r(gKr,"SplinterConfig"),gKr.forEach(t),$Ze=r(dwe," (Splinter model)"),dwe.forEach(t),kZe=i(L),mg=n(L,"LI",{});var cwe=s(mg);yae=n(cwe,"STRONG",{});var hKr=s(yae);SZe=r(hKr,"squeezebert"),hKr.forEach(t),RZe=r(cwe," \u2014 "),yR=n(cwe,"A",{href:!0});var pKr=s(yR);PZe=r(pKr,"SqueezeBertConfig"),pKr.forEach(t),BZe=r(cwe," (SqueezeBERT model)"),cwe.forEach(t),IZe=i(L),gg=n(L,"LI",{});var fwe=s(gg);xae=n(fwe,"STRONG",{});var uKr=s(xae);NZe=r(uKr,"swin"),uKr.forEach(t),qZe=r(fwe," \u2014 "),xR=n(fwe,"A",{href:!0});var _Kr=s(xR);jZe=r(_Kr,"SwinConfig"),_Kr.forEach(t),DZe=r(fwe," (Swin Transformer model)"),fwe.forEach(t),GZe=i(L),hg=n(L,"LI",{});var mwe=s(hg);$ae=n(mwe,"STRONG",{});var bKr=s($ae);OZe=r(bKr,"t5"),bKr.forEach(t),VZe=r(mwe," \u2014 "),$R=n(mwe,"A",{href:!0});var vKr=s($R);XZe=r(vKr,"T5Config"),vKr.forEach(t),zZe=r(mwe," (T5 model)"),mwe.forEach(t),WZe=i(L),pg=n(L,"LI",{});var gwe=s(pg);kae=n(gwe,"STRONG",{});var FKr=s(kae);QZe=r(FKr,"tapas"),FKr.forEach(t),HZe=r(gwe," \u2014 "),kR=n(gwe,"A",{href:!0});var TKr=s(kR);UZe=r(TKr,"TapasConfig"),TKr.forEach(t),JZe=r(gwe," (TAPAS model)"),gwe.forEach(t),YZe=i(L),ug=n(L,"LI",{});var hwe=s(ug);Sae=n(hwe,"STRONG",{});var MKr=s(Sae);KZe=r(MKr,"trajectory_transformer"),MKr.forEach(t),ZZe=r(hwe," \u2014 "),SR=n(hwe,"A",{href:!0});var EKr=s(SR);eeo=r(EKr,"TrajectoryTransformerConfig"),EKr.forEach(t),oeo=r(hwe," (Trajectory Transformer model)"),hwe.forEach(t),reo=i(L),_g=n(L,"LI",{});var pwe=s(_g);Rae=n(pwe,"STRONG",{});var CKr=s(Rae);teo=r(CKr,"transfo-xl"),CKr.forEach(t),aeo=r(pwe," \u2014 "),RR=n(pwe,"A",{href:!0});var wKr=s(RR);neo=r(wKr,"TransfoXLConfig"),wKr.forEach(t),seo=r(pwe," (Transformer-XL model)"),pwe.forEach(t),leo=i(L),bg=n(L,"LI",{});var uwe=s(bg);Pae=n(uwe,"STRONG",{});var AKr=s(Pae);ieo=r(AKr,"trocr"),AKr.forEach(t),deo=r(uwe," \u2014 "),PR=n(uwe,"A",{href:!0});var LKr=s(PR);ceo=r(LKr,"TrOCRConfig"),LKr.forEach(t),feo=r(uwe," (TrOCR model)"),uwe.forEach(t),meo=i(L),vg=n(L,"LI",{});var _we=s(vg);Bae=n(_we,"STRONG",{});var yKr=s(Bae);geo=r(yKr,"unispeech"),yKr.forEach(t),heo=r(_we," \u2014 "),BR=n(_we,"A",{href:!0});var xKr=s(BR);peo=r(xKr,"UniSpeechConfig"),xKr.forEach(t),ueo=r(_we," (UniSpeech model)"),_we.forEach(t),_eo=i(L),Fg=n(L,"LI",{});var bwe=s(Fg);Iae=n(bwe,"STRONG",{});var $Kr=s(Iae);beo=r($Kr,"unispeech-sat"),$Kr.forEach(t),veo=r(bwe," \u2014 "),IR=n(bwe,"A",{href:!0});var kKr=s(IR);Feo=r(kKr,"UniSpeechSatConfig"),kKr.forEach(t),Teo=r(bwe," (UniSpeechSat model)"),bwe.forEach(t),Meo=i(L),Tg=n(L,"LI",{});var vwe=s(Tg);Nae=n(vwe,"STRONG",{});var SKr=s(Nae);Eeo=r(SKr,"van"),SKr.forEach(t),Ceo=r(vwe," \u2014 "),NR=n(vwe,"A",{href:!0});var RKr=s(NR);weo=r(RKr,"VanConfig"),RKr.forEach(t),Aeo=r(vwe," (VAN model)"),vwe.forEach(t),Leo=i(L),Mg=n(L,"LI",{});var Fwe=s(Mg);qae=n(Fwe,"STRONG",{});var PKr=s(qae);yeo=r(PKr,"vilt"),PKr.forEach(t),xeo=r(Fwe," \u2014 "),qR=n(Fwe,"A",{href:!0});var BKr=s(qR);$eo=r(BKr,"ViltConfig"),BKr.forEach(t),keo=r(Fwe," (ViLT model)"),Fwe.forEach(t),Seo=i(L),Eg=n(L,"LI",{});var Twe=s(Eg);jae=n(Twe,"STRONG",{});var IKr=s(jae);Reo=r(IKr,"vision-encoder-decoder"),IKr.forEach(t),Peo=r(Twe," \u2014 "),jR=n(Twe,"A",{href:!0});var NKr=s(jR);Beo=r(NKr,"VisionEncoderDecoderConfig"),NKr.forEach(t),Ieo=r(Twe," (Vision Encoder decoder model)"),Twe.forEach(t),Neo=i(L),Cg=n(L,"LI",{});var Mwe=s(Cg);Dae=n(Mwe,"STRONG",{});var qKr=s(Dae);qeo=r(qKr,"vision-text-dual-encoder"),qKr.forEach(t),jeo=r(Mwe," \u2014 "),DR=n(Mwe,"A",{href:!0});var jKr=s(DR);Deo=r(jKr,"VisionTextDualEncoderConfig"),jKr.forEach(t),Geo=r(Mwe," (VisionTextDualEncoder model)"),Mwe.forEach(t),Oeo=i(L),wg=n(L,"LI",{});var Ewe=s(wg);Gae=n(Ewe,"STRONG",{});var DKr=s(Gae);Veo=r(DKr,"visual_bert"),DKr.forEach(t),Xeo=r(Ewe," \u2014 "),GR=n(Ewe,"A",{href:!0});var GKr=s(GR);zeo=r(GKr,"VisualBertConfig"),GKr.forEach(t),Weo=r(Ewe," (VisualBERT model)"),Ewe.forEach(t),Qeo=i(L),Ag=n(L,"LI",{});var Cwe=s(Ag);Oae=n(Cwe,"STRONG",{});var OKr=s(Oae);Heo=r(OKr,"vit"),OKr.forEach(t),Ueo=r(Cwe," \u2014 "),OR=n(Cwe,"A",{href:!0});var VKr=s(OR);Jeo=r(VKr,"ViTConfig"),VKr.forEach(t),Yeo=r(Cwe," (ViT model)"),Cwe.forEach(t),Keo=i(L),Lg=n(L,"LI",{});var wwe=s(Lg);Vae=n(wwe,"STRONG",{});var XKr=s(Vae);Zeo=r(XKr,"vit_mae"),XKr.forEach(t),eoo=r(wwe," \u2014 "),VR=n(wwe,"A",{href:!0});var zKr=s(VR);ooo=r(zKr,"ViTMAEConfig"),zKr.forEach(t),roo=r(wwe," (ViTMAE model)"),wwe.forEach(t),too=i(L),yg=n(L,"LI",{});var Awe=s(yg);Xae=n(Awe,"STRONG",{});var WKr=s(Xae);aoo=r(WKr,"wav2vec2"),WKr.forEach(t),noo=r(Awe," \u2014 "),XR=n(Awe,"A",{href:!0});var QKr=s(XR);soo=r(QKr,"Wav2Vec2Config"),QKr.forEach(t),loo=r(Awe," (Wav2Vec2 model)"),Awe.forEach(t),ioo=i(L),xg=n(L,"LI",{});var Lwe=s(xg);zae=n(Lwe,"STRONG",{});var HKr=s(zae);doo=r(HKr,"wav2vec2-conformer"),HKr.forEach(t),coo=r(Lwe," \u2014 "),zR=n(Lwe,"A",{href:!0});var UKr=s(zR);foo=r(UKr,"Wav2Vec2ConformerConfig"),UKr.forEach(t),moo=r(Lwe," (Wav2Vec2-Conformer model)"),Lwe.forEach(t),goo=i(L),$g=n(L,"LI",{});var ywe=s($g);Wae=n(ywe,"STRONG",{});var JKr=s(Wae);hoo=r(JKr,"wavlm"),JKr.forEach(t),poo=r(ywe," \u2014 "),WR=n(ywe,"A",{href:!0});var YKr=s(WR);uoo=r(YKr,"WavLMConfig"),YKr.forEach(t),_oo=r(ywe," (WavLM model)"),ywe.forEach(t),boo=i(L),kg=n(L,"LI",{});var xwe=s(kg);Qae=n(xwe,"STRONG",{});var KKr=s(Qae);voo=r(KKr,"xglm"),KKr.forEach(t),Foo=r(xwe," \u2014 "),QR=n(xwe,"A",{href:!0});var ZKr=s(QR);Too=r(ZKr,"XGLMConfig"),ZKr.forEach(t),Moo=r(xwe," (XGLM model)"),xwe.forEach(t),Eoo=i(L),Sg=n(L,"LI",{});var $we=s(Sg);Hae=n($we,"STRONG",{});var eZr=s(Hae);Coo=r(eZr,"xlm"),eZr.forEach(t),woo=r($we," \u2014 "),HR=n($we,"A",{href:!0});var oZr=s(HR);Aoo=r(oZr,"XLMConfig"),oZr.forEach(t),Loo=r($we," (XLM model)"),$we.forEach(t),yoo=i(L),Rg=n(L,"LI",{});var kwe=s(Rg);Uae=n(kwe,"STRONG",{});var rZr=s(Uae);xoo=r(rZr,"xlm-prophetnet"),rZr.forEach(t),$oo=r(kwe," \u2014 "),UR=n(kwe,"A",{href:!0});var tZr=s(UR);koo=r(tZr,"XLMProphetNetConfig"),tZr.forEach(t),Soo=r(kwe," (XLM-ProphetNet model)"),kwe.forEach(t),Roo=i(L),Pg=n(L,"LI",{});var Swe=s(Pg);Jae=n(Swe,"STRONG",{});var aZr=s(Jae);Poo=r(aZr,"xlm-roberta"),aZr.forEach(t),Boo=r(Swe," \u2014 "),JR=n(Swe,"A",{href:!0});var nZr=s(JR);Ioo=r(nZr,"XLMRobertaConfig"),nZr.forEach(t),Noo=r(Swe," (XLM-RoBERTa model)"),Swe.forEach(t),qoo=i(L),Bg=n(L,"LI",{});var Rwe=s(Bg);Yae=n(Rwe,"STRONG",{});var sZr=s(Yae);joo=r(sZr,"xlm-roberta-xl"),sZr.forEach(t),Doo=r(Rwe," \u2014 "),YR=n(Rwe,"A",{href:!0});var lZr=s(YR);Goo=r(lZr,"XLMRobertaXLConfig"),lZr.forEach(t),Ooo=r(Rwe," (XLM-RoBERTa-XL model)"),Rwe.forEach(t),Voo=i(L),Ig=n(L,"LI",{});var Pwe=s(Ig);Kae=n(Pwe,"STRONG",{});var iZr=s(Kae);Xoo=r(iZr,"xlnet"),iZr.forEach(t),zoo=r(Pwe," \u2014 "),KR=n(Pwe,"A",{href:!0});var dZr=s(KR);Woo=r(dZr,"XLNetConfig"),dZr.forEach(t),Qoo=r(Pwe," (XLNet model)"),Pwe.forEach(t),Hoo=i(L),Ng=n(L,"LI",{});var Bwe=s(Ng);Zae=n(Bwe,"STRONG",{});var cZr=s(Zae);Uoo=r(cZr,"yolos"),cZr.forEach(t),Joo=r(Bwe," \u2014 "),ZR=n(Bwe,"A",{href:!0});var fZr=s(ZR);Yoo=r(fZr,"YolosConfig"),fZr.forEach(t),Koo=r(Bwe," (YOLOS model)"),Bwe.forEach(t),Zoo=i(L),qg=n(L,"LI",{});var Iwe=s(qg);ene=n(Iwe,"STRONG",{});var mZr=s(ene);ero=r(mZr,"yoso"),mZr.forEach(t),oro=r(Iwe," \u2014 "),eP=n(Iwe,"A",{href:!0});var gZr=s(eP);rro=r(gZr,"YosoConfig"),gZr.forEach(t),tro=r(Iwe," (YOSO model)"),Iwe.forEach(t),L.forEach(t),aro=i(tt),T(jg.$$.fragment,tt),tt.forEach(t),nro=i(rt),Dg=n(rt,"DIV",{class:!0});var JOe=s(Dg);T(CA.$$.fragment,JOe),sro=i(JOe),one=n(JOe,"P",{});var hZr=s(one);lro=r(hZr,"Register a new configuration for this class."),hZr.forEach(t),JOe.forEach(t),rt.forEach(t),YDe=i(f),$i=n(f,"H2",{class:!0});var YOe=s($i);Gg=n(YOe,"A",{id:!0,class:!0,href:!0});var pZr=s(Gg);rne=n(pZr,"SPAN",{});var uZr=s(rne);T(wA.$$.fragment,uZr),uZr.forEach(t),pZr.forEach(t),iro=i(YOe),tne=n(YOe,"SPAN",{});var _Zr=s(tne);dro=r(_Zr,"AutoTokenizer"),_Zr.forEach(t),YOe.forEach(t),KDe=i(f),Ao=n(f,"DIV",{class:!0});var zs=s(Ao);T(AA.$$.fragment,zs),cro=i(zs),LA=n(zs,"P",{});var KOe=s(LA);fro=r(KOe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),oP=n(KOe,"A",{href:!0});var bZr=s(oP);mro=r(bZr,"AutoTokenizer.from_pretrained()"),bZr.forEach(t),gro=r(KOe," class method."),KOe.forEach(t),hro=i(zs),yA=n(zs,"P",{});var ZOe=s(yA);pro=r(ZOe,"This class cannot be instantiated directly using "),ane=n(ZOe,"CODE",{});var vZr=s(ane);uro=r(vZr,"__init__()"),vZr.forEach(t),_ro=r(ZOe," (throws an error)."),ZOe.forEach(t),bro=i(zs),Ar=n(zs,"DIV",{class:!0});var Ws=s(Ar);T(xA.$$.fragment,Ws),vro=i(Ws),nne=n(Ws,"P",{});var FZr=s(nne);Fro=r(FZr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),FZr.forEach(t),Tro=i(Ws),$a=n(Ws,"P",{});var _0=s($a);Mro=r(_0,"The tokenizer class to instantiate is selected based on the "),sne=n(_0,"CODE",{});var TZr=s(sne);Ero=r(TZr,"model_type"),TZr.forEach(t),Cro=r(_0,` property of the config object (either
passed as an argument or loaded from `),lne=n(_0,"CODE",{});var MZr=s(lne);wro=r(MZr,"pretrained_model_name_or_path"),MZr.forEach(t),Aro=r(_0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ine=n(_0,"CODE",{});var EZr=s(ine);Lro=r(EZr,"pretrained_model_name_or_path"),EZr.forEach(t),yro=r(_0,":"),_0.forEach(t),xro=i(Ws),k=n(Ws,"UL",{});var S=s(k);Nn=n(S,"LI",{});var B$=s(Nn);dne=n(B$,"STRONG",{});var CZr=s(dne);$ro=r(CZr,"albert"),CZr.forEach(t),kro=r(B$," \u2014 "),rP=n(B$,"A",{href:!0});var wZr=s(rP);Sro=r(wZr,"AlbertTokenizer"),wZr.forEach(t),Rro=r(B$," or "),tP=n(B$,"A",{href:!0});var AZr=s(tP);Pro=r(AZr,"AlbertTokenizerFast"),AZr.forEach(t),Bro=r(B$," (ALBERT model)"),B$.forEach(t),Iro=i(S),qn=n(S,"LI",{});var I$=s(qn);cne=n(I$,"STRONG",{});var LZr=s(cne);Nro=r(LZr,"bart"),LZr.forEach(t),qro=r(I$," \u2014 "),aP=n(I$,"A",{href:!0});var yZr=s(aP);jro=r(yZr,"BartTokenizer"),yZr.forEach(t),Dro=r(I$," or "),nP=n(I$,"A",{href:!0});var xZr=s(nP);Gro=r(xZr,"BartTokenizerFast"),xZr.forEach(t),Oro=r(I$," (BART model)"),I$.forEach(t),Vro=i(S),jn=n(S,"LI",{});var N$=s(jn);fne=n(N$,"STRONG",{});var $Zr=s(fne);Xro=r($Zr,"barthez"),$Zr.forEach(t),zro=r(N$," \u2014 "),sP=n(N$,"A",{href:!0});var kZr=s(sP);Wro=r(kZr,"BarthezTokenizer"),kZr.forEach(t),Qro=r(N$," or "),lP=n(N$,"A",{href:!0});var SZr=s(lP);Hro=r(SZr,"BarthezTokenizerFast"),SZr.forEach(t),Uro=r(N$," (BARThez model)"),N$.forEach(t),Jro=i(S),Og=n(S,"LI",{});var Nwe=s(Og);mne=n(Nwe,"STRONG",{});var RZr=s(mne);Yro=r(RZr,"bartpho"),RZr.forEach(t),Kro=r(Nwe," \u2014 "),iP=n(Nwe,"A",{href:!0});var PZr=s(iP);Zro=r(PZr,"BartphoTokenizer"),PZr.forEach(t),eto=r(Nwe," (BARTpho model)"),Nwe.forEach(t),oto=i(S),Dn=n(S,"LI",{});var q$=s(Dn);gne=n(q$,"STRONG",{});var BZr=s(gne);rto=r(BZr,"bert"),BZr.forEach(t),tto=r(q$," \u2014 "),dP=n(q$,"A",{href:!0});var IZr=s(dP);ato=r(IZr,"BertTokenizer"),IZr.forEach(t),nto=r(q$," or "),cP=n(q$,"A",{href:!0});var NZr=s(cP);sto=r(NZr,"BertTokenizerFast"),NZr.forEach(t),lto=r(q$," (BERT model)"),q$.forEach(t),ito=i(S),Vg=n(S,"LI",{});var qwe=s(Vg);hne=n(qwe,"STRONG",{});var qZr=s(hne);dto=r(qZr,"bert-generation"),qZr.forEach(t),cto=r(qwe," \u2014 "),fP=n(qwe,"A",{href:!0});var jZr=s(fP);fto=r(jZr,"BertGenerationTokenizer"),jZr.forEach(t),mto=r(qwe," (Bert Generation model)"),qwe.forEach(t),gto=i(S),Xg=n(S,"LI",{});var jwe=s(Xg);pne=n(jwe,"STRONG",{});var DZr=s(pne);hto=r(DZr,"bert-japanese"),DZr.forEach(t),pto=r(jwe," \u2014 "),mP=n(jwe,"A",{href:!0});var GZr=s(mP);uto=r(GZr,"BertJapaneseTokenizer"),GZr.forEach(t),_to=r(jwe," (BertJapanese model)"),jwe.forEach(t),bto=i(S),zg=n(S,"LI",{});var Dwe=s(zg);une=n(Dwe,"STRONG",{});var OZr=s(une);vto=r(OZr,"bertweet"),OZr.forEach(t),Fto=r(Dwe," \u2014 "),gP=n(Dwe,"A",{href:!0});var VZr=s(gP);Tto=r(VZr,"BertweetTokenizer"),VZr.forEach(t),Mto=r(Dwe," (BERTweet model)"),Dwe.forEach(t),Eto=i(S),Gn=n(S,"LI",{});var j$=s(Gn);_ne=n(j$,"STRONG",{});var XZr=s(_ne);Cto=r(XZr,"big_bird"),XZr.forEach(t),wto=r(j$," \u2014 "),hP=n(j$,"A",{href:!0});var zZr=s(hP);Ato=r(zZr,"BigBirdTokenizer"),zZr.forEach(t),Lto=r(j$," or "),pP=n(j$,"A",{href:!0});var WZr=s(pP);yto=r(WZr,"BigBirdTokenizerFast"),WZr.forEach(t),xto=r(j$," (BigBird model)"),j$.forEach(t),$to=i(S),On=n(S,"LI",{});var D$=s(On);bne=n(D$,"STRONG",{});var QZr=s(bne);kto=r(QZr,"bigbird_pegasus"),QZr.forEach(t),Sto=r(D$," \u2014 "),uP=n(D$,"A",{href:!0});var HZr=s(uP);Rto=r(HZr,"PegasusTokenizer"),HZr.forEach(t),Pto=r(D$," or "),_P=n(D$,"A",{href:!0});var UZr=s(_P);Bto=r(UZr,"PegasusTokenizerFast"),UZr.forEach(t),Ito=r(D$," (BigBird-Pegasus model)"),D$.forEach(t),Nto=i(S),Vn=n(S,"LI",{});var G$=s(Vn);vne=n(G$,"STRONG",{});var JZr=s(vne);qto=r(JZr,"blenderbot"),JZr.forEach(t),jto=r(G$," \u2014 "),bP=n(G$,"A",{href:!0});var YZr=s(bP);Dto=r(YZr,"BlenderbotTokenizer"),YZr.forEach(t),Gto=r(G$," or "),vP=n(G$,"A",{href:!0});var KZr=s(vP);Oto=r(KZr,"BlenderbotTokenizerFast"),KZr.forEach(t),Vto=r(G$," (Blenderbot model)"),G$.forEach(t),Xto=i(S),Wg=n(S,"LI",{});var Gwe=s(Wg);Fne=n(Gwe,"STRONG",{});var ZZr=s(Fne);zto=r(ZZr,"blenderbot-small"),ZZr.forEach(t),Wto=r(Gwe," \u2014 "),FP=n(Gwe,"A",{href:!0});var eet=s(FP);Qto=r(eet,"BlenderbotSmallTokenizer"),eet.forEach(t),Hto=r(Gwe," (BlenderbotSmall model)"),Gwe.forEach(t),Uto=i(S),Qg=n(S,"LI",{});var Owe=s(Qg);Tne=n(Owe,"STRONG",{});var oet=s(Tne);Jto=r(oet,"bloom"),oet.forEach(t),Yto=r(Owe," \u2014 "),TP=n(Owe,"A",{href:!0});var ret=s(TP);Kto=r(ret,"BloomTokenizerFast"),ret.forEach(t),Zto=r(Owe," (BLOOM model)"),Owe.forEach(t),eao=i(S),Hg=n(S,"LI",{});var Vwe=s(Hg);Mne=n(Vwe,"STRONG",{});var tet=s(Mne);oao=r(tet,"byt5"),tet.forEach(t),rao=r(Vwe," \u2014 "),MP=n(Vwe,"A",{href:!0});var aet=s(MP);tao=r(aet,"ByT5Tokenizer"),aet.forEach(t),aao=r(Vwe," (ByT5 model)"),Vwe.forEach(t),nao=i(S),Xn=n(S,"LI",{});var O$=s(Xn);Ene=n(O$,"STRONG",{});var net=s(Ene);sao=r(net,"camembert"),net.forEach(t),lao=r(O$," \u2014 "),EP=n(O$,"A",{href:!0});var set=s(EP);iao=r(set,"CamembertTokenizer"),set.forEach(t),dao=r(O$," or "),CP=n(O$,"A",{href:!0});var iet=s(CP);cao=r(iet,"CamembertTokenizerFast"),iet.forEach(t),fao=r(O$," (CamemBERT model)"),O$.forEach(t),mao=i(S),Ug=n(S,"LI",{});var Xwe=s(Ug);Cne=n(Xwe,"STRONG",{});var det=s(Cne);gao=r(det,"canine"),det.forEach(t),hao=r(Xwe," \u2014 "),wP=n(Xwe,"A",{href:!0});var cet=s(wP);pao=r(cet,"CanineTokenizer"),cet.forEach(t),uao=r(Xwe," (CANINE model)"),Xwe.forEach(t),_ao=i(S),zn=n(S,"LI",{});var V$=s(zn);wne=n(V$,"STRONG",{});var fet=s(wne);bao=r(fet,"clip"),fet.forEach(t),vao=r(V$," \u2014 "),AP=n(V$,"A",{href:!0});var met=s(AP);Fao=r(met,"CLIPTokenizer"),met.forEach(t),Tao=r(V$," or "),LP=n(V$,"A",{href:!0});var get=s(LP);Mao=r(get,"CLIPTokenizerFast"),get.forEach(t),Eao=r(V$," (CLIP model)"),V$.forEach(t),Cao=i(S),Wn=n(S,"LI",{});var X$=s(Wn);Ane=n(X$,"STRONG",{});var het=s(Ane);wao=r(het,"convbert"),het.forEach(t),Aao=r(X$," \u2014 "),yP=n(X$,"A",{href:!0});var pet=s(yP);Lao=r(pet,"ConvBertTokenizer"),pet.forEach(t),yao=r(X$," or "),xP=n(X$,"A",{href:!0});var uet=s(xP);xao=r(uet,"ConvBertTokenizerFast"),uet.forEach(t),$ao=r(X$," (ConvBERT model)"),X$.forEach(t),kao=i(S),Qn=n(S,"LI",{});var z$=s(Qn);Lne=n(z$,"STRONG",{});var _et=s(Lne);Sao=r(_et,"cpm"),_et.forEach(t),Rao=r(z$," \u2014 "),$P=n(z$,"A",{href:!0});var bet=s($P);Pao=r(bet,"CpmTokenizer"),bet.forEach(t),Bao=r(z$," or "),kP=n(z$,"A",{href:!0});var vet=s(kP);Iao=r(vet,"CpmTokenizerFast"),vet.forEach(t),Nao=r(z$," (CPM model)"),z$.forEach(t),qao=i(S),Jg=n(S,"LI",{});var zwe=s(Jg);yne=n(zwe,"STRONG",{});var Fet=s(yne);jao=r(Fet,"ctrl"),Fet.forEach(t),Dao=r(zwe," \u2014 "),SP=n(zwe,"A",{href:!0});var Tet=s(SP);Gao=r(Tet,"CTRLTokenizer"),Tet.forEach(t),Oao=r(zwe," (CTRL model)"),zwe.forEach(t),Vao=i(S),Hn=n(S,"LI",{});var W$=s(Hn);xne=n(W$,"STRONG",{});var Met=s(xne);Xao=r(Met,"data2vec-text"),Met.forEach(t),zao=r(W$," \u2014 "),RP=n(W$,"A",{href:!0});var Eet=s(RP);Wao=r(Eet,"RobertaTokenizer"),Eet.forEach(t),Qao=r(W$," or "),PP=n(W$,"A",{href:!0});var Cet=s(PP);Hao=r(Cet,"RobertaTokenizerFast"),Cet.forEach(t),Uao=r(W$," (Data2VecText model)"),W$.forEach(t),Jao=i(S),Un=n(S,"LI",{});var Q$=s(Un);$ne=n(Q$,"STRONG",{});var wet=s($ne);Yao=r(wet,"deberta"),wet.forEach(t),Kao=r(Q$," \u2014 "),BP=n(Q$,"A",{href:!0});var Aet=s(BP);Zao=r(Aet,"DebertaTokenizer"),Aet.forEach(t),eno=r(Q$," or "),IP=n(Q$,"A",{href:!0});var Let=s(IP);ono=r(Let,"DebertaTokenizerFast"),Let.forEach(t),rno=r(Q$," (DeBERTa model)"),Q$.forEach(t),tno=i(S),Jn=n(S,"LI",{});var H$=s(Jn);kne=n(H$,"STRONG",{});var yet=s(kne);ano=r(yet,"deberta-v2"),yet.forEach(t),nno=r(H$," \u2014 "),NP=n(H$,"A",{href:!0});var xet=s(NP);sno=r(xet,"DebertaV2Tokenizer"),xet.forEach(t),lno=r(H$," or "),qP=n(H$,"A",{href:!0});var $et=s(qP);ino=r($et,"DebertaV2TokenizerFast"),$et.forEach(t),dno=r(H$," (DeBERTa-v2 model)"),H$.forEach(t),cno=i(S),Yn=n(S,"LI",{});var U$=s(Yn);Sne=n(U$,"STRONG",{});var ket=s(Sne);fno=r(ket,"distilbert"),ket.forEach(t),mno=r(U$," \u2014 "),jP=n(U$,"A",{href:!0});var Set=s(jP);gno=r(Set,"DistilBertTokenizer"),Set.forEach(t),hno=r(U$," or "),DP=n(U$,"A",{href:!0});var Ret=s(DP);pno=r(Ret,"DistilBertTokenizerFast"),Ret.forEach(t),uno=r(U$," (DistilBERT model)"),U$.forEach(t),_no=i(S),Kn=n(S,"LI",{});var J$=s(Kn);Rne=n(J$,"STRONG",{});var Pet=s(Rne);bno=r(Pet,"dpr"),Pet.forEach(t),vno=r(J$," \u2014 "),GP=n(J$,"A",{href:!0});var Bet=s(GP);Fno=r(Bet,"DPRQuestionEncoderTokenizer"),Bet.forEach(t),Tno=r(J$," or "),OP=n(J$,"A",{href:!0});var Iet=s(OP);Mno=r(Iet,"DPRQuestionEncoderTokenizerFast"),Iet.forEach(t),Eno=r(J$," (DPR model)"),J$.forEach(t),Cno=i(S),Zn=n(S,"LI",{});var Y$=s(Zn);Pne=n(Y$,"STRONG",{});var Net=s(Pne);wno=r(Net,"electra"),Net.forEach(t),Ano=r(Y$," \u2014 "),VP=n(Y$,"A",{href:!0});var qet=s(VP);Lno=r(qet,"ElectraTokenizer"),qet.forEach(t),yno=r(Y$," or "),XP=n(Y$,"A",{href:!0});var jet=s(XP);xno=r(jet,"ElectraTokenizerFast"),jet.forEach(t),$no=r(Y$," (ELECTRA model)"),Y$.forEach(t),kno=i(S),Yg=n(S,"LI",{});var Wwe=s(Yg);Bne=n(Wwe,"STRONG",{});var Det=s(Bne);Sno=r(Det,"flaubert"),Det.forEach(t),Rno=r(Wwe," \u2014 "),zP=n(Wwe,"A",{href:!0});var Get=s(zP);Pno=r(Get,"FlaubertTokenizer"),Get.forEach(t),Bno=r(Wwe," (FlauBERT model)"),Wwe.forEach(t),Ino=i(S),es=n(S,"LI",{});var K$=s(es);Ine=n(K$,"STRONG",{});var Oet=s(Ine);Nno=r(Oet,"fnet"),Oet.forEach(t),qno=r(K$," \u2014 "),WP=n(K$,"A",{href:!0});var Vet=s(WP);jno=r(Vet,"FNetTokenizer"),Vet.forEach(t),Dno=r(K$," or "),QP=n(K$,"A",{href:!0});var Xet=s(QP);Gno=r(Xet,"FNetTokenizerFast"),Xet.forEach(t),Ono=r(K$," (FNet model)"),K$.forEach(t),Vno=i(S),Kg=n(S,"LI",{});var Qwe=s(Kg);Nne=n(Qwe,"STRONG",{});var zet=s(Nne);Xno=r(zet,"fsmt"),zet.forEach(t),zno=r(Qwe," \u2014 "),HP=n(Qwe,"A",{href:!0});var Wet=s(HP);Wno=r(Wet,"FSMTTokenizer"),Wet.forEach(t),Qno=r(Qwe," (FairSeq Machine-Translation model)"),Qwe.forEach(t),Hno=i(S),os=n(S,"LI",{});var Z$=s(os);qne=n(Z$,"STRONG",{});var Qet=s(qne);Uno=r(Qet,"funnel"),Qet.forEach(t),Jno=r(Z$," \u2014 "),UP=n(Z$,"A",{href:!0});var Het=s(UP);Yno=r(Het,"FunnelTokenizer"),Het.forEach(t),Kno=r(Z$," or "),JP=n(Z$,"A",{href:!0});var Uet=s(JP);Zno=r(Uet,"FunnelTokenizerFast"),Uet.forEach(t),eso=r(Z$," (Funnel Transformer model)"),Z$.forEach(t),oso=i(S),rs=n(S,"LI",{});var ek=s(rs);jne=n(ek,"STRONG",{});var Jet=s(jne);rso=r(Jet,"gpt2"),Jet.forEach(t),tso=r(ek," \u2014 "),YP=n(ek,"A",{href:!0});var Yet=s(YP);aso=r(Yet,"GPT2Tokenizer"),Yet.forEach(t),nso=r(ek," or "),KP=n(ek,"A",{href:!0});var Ket=s(KP);sso=r(Ket,"GPT2TokenizerFast"),Ket.forEach(t),lso=r(ek," (OpenAI GPT-2 model)"),ek.forEach(t),iso=i(S),ts=n(S,"LI",{});var ok=s(ts);Dne=n(ok,"STRONG",{});var Zet=s(Dne);dso=r(Zet,"gpt_neo"),Zet.forEach(t),cso=r(ok," \u2014 "),ZP=n(ok,"A",{href:!0});var eot=s(ZP);fso=r(eot,"GPT2Tokenizer"),eot.forEach(t),mso=r(ok," or "),eB=n(ok,"A",{href:!0});var oot=s(eB);gso=r(oot,"GPT2TokenizerFast"),oot.forEach(t),hso=r(ok," (GPT Neo model)"),ok.forEach(t),pso=i(S),Zg=n(S,"LI",{});var Hwe=s(Zg);Gne=n(Hwe,"STRONG",{});var rot=s(Gne);uso=r(rot,"gpt_neox"),rot.forEach(t),_so=r(Hwe," \u2014 "),oB=n(Hwe,"A",{href:!0});var tot=s(oB);bso=r(tot,"GPTNeoXTokenizerFast"),tot.forEach(t),vso=r(Hwe," (GPT NeoX model)"),Hwe.forEach(t),Fso=i(S),as=n(S,"LI",{});var rk=s(as);One=n(rk,"STRONG",{});var aot=s(One);Tso=r(aot,"gptj"),aot.forEach(t),Mso=r(rk," \u2014 "),rB=n(rk,"A",{href:!0});var not=s(rB);Eso=r(not,"GPT2Tokenizer"),not.forEach(t),Cso=r(rk," or "),tB=n(rk,"A",{href:!0});var sot=s(tB);wso=r(sot,"GPT2TokenizerFast"),sot.forEach(t),Aso=r(rk," (GPT-J model)"),rk.forEach(t),Lso=i(S),ns=n(S,"LI",{});var tk=s(ns);Vne=n(tk,"STRONG",{});var lot=s(Vne);yso=r(lot,"herbert"),lot.forEach(t),xso=r(tk," \u2014 "),aB=n(tk,"A",{href:!0});var iot=s(aB);$so=r(iot,"HerbertTokenizer"),iot.forEach(t),kso=r(tk," or "),nB=n(tk,"A",{href:!0});var dot=s(nB);Sso=r(dot,"HerbertTokenizerFast"),dot.forEach(t),Rso=r(tk," (HerBERT model)"),tk.forEach(t),Pso=i(S),eh=n(S,"LI",{});var Uwe=s(eh);Xne=n(Uwe,"STRONG",{});var cot=s(Xne);Bso=r(cot,"hubert"),cot.forEach(t),Iso=r(Uwe," \u2014 "),sB=n(Uwe,"A",{href:!0});var fot=s(sB);Nso=r(fot,"Wav2Vec2CTCTokenizer"),fot.forEach(t),qso=r(Uwe," (Hubert model)"),Uwe.forEach(t),jso=i(S),ss=n(S,"LI",{});var ak=s(ss);zne=n(ak,"STRONG",{});var mot=s(zne);Dso=r(mot,"ibert"),mot.forEach(t),Gso=r(ak," \u2014 "),lB=n(ak,"A",{href:!0});var got=s(lB);Oso=r(got,"RobertaTokenizer"),got.forEach(t),Vso=r(ak," or "),iB=n(ak,"A",{href:!0});var hot=s(iB);Xso=r(hot,"RobertaTokenizerFast"),hot.forEach(t),zso=r(ak," (I-BERT model)"),ak.forEach(t),Wso=i(S),ls=n(S,"LI",{});var nk=s(ls);Wne=n(nk,"STRONG",{});var pot=s(Wne);Qso=r(pot,"layoutlm"),pot.forEach(t),Hso=r(nk," \u2014 "),dB=n(nk,"A",{href:!0});var uot=s(dB);Uso=r(uot,"LayoutLMTokenizer"),uot.forEach(t),Jso=r(nk," or "),cB=n(nk,"A",{href:!0});var _ot=s(cB);Yso=r(_ot,"LayoutLMTokenizerFast"),_ot.forEach(t),Kso=r(nk," (LayoutLM model)"),nk.forEach(t),Zso=i(S),is=n(S,"LI",{});var sk=s(is);Qne=n(sk,"STRONG",{});var bot=s(Qne);elo=r(bot,"layoutlmv2"),bot.forEach(t),olo=r(sk," \u2014 "),fB=n(sk,"A",{href:!0});var vot=s(fB);rlo=r(vot,"LayoutLMv2Tokenizer"),vot.forEach(t),tlo=r(sk," or "),mB=n(sk,"A",{href:!0});var Fot=s(mB);alo=r(Fot,"LayoutLMv2TokenizerFast"),Fot.forEach(t),nlo=r(sk," (LayoutLMv2 model)"),sk.forEach(t),slo=i(S),ds=n(S,"LI",{});var lk=s(ds);Hne=n(lk,"STRONG",{});var Tot=s(Hne);llo=r(Tot,"layoutlmv3"),Tot.forEach(t),ilo=r(lk," \u2014 "),gB=n(lk,"A",{href:!0});var Mot=s(gB);dlo=r(Mot,"LayoutLMv3Tokenizer"),Mot.forEach(t),clo=r(lk," or "),hB=n(lk,"A",{href:!0});var Eot=s(hB);flo=r(Eot,"LayoutLMv3TokenizerFast"),Eot.forEach(t),mlo=r(lk," (LayoutLMv3 model)"),lk.forEach(t),glo=i(S),cs=n(S,"LI",{});var ik=s(cs);Une=n(ik,"STRONG",{});var Cot=s(Une);hlo=r(Cot,"layoutxlm"),Cot.forEach(t),plo=r(ik," \u2014 "),pB=n(ik,"A",{href:!0});var wot=s(pB);ulo=r(wot,"LayoutXLMTokenizer"),wot.forEach(t),_lo=r(ik," or "),uB=n(ik,"A",{href:!0});var Aot=s(uB);blo=r(Aot,"LayoutXLMTokenizerFast"),Aot.forEach(t),vlo=r(ik," (LayoutXLM model)"),ik.forEach(t),Flo=i(S),fs=n(S,"LI",{});var dk=s(fs);Jne=n(dk,"STRONG",{});var Lot=s(Jne);Tlo=r(Lot,"led"),Lot.forEach(t),Mlo=r(dk," \u2014 "),_B=n(dk,"A",{href:!0});var yot=s(_B);Elo=r(yot,"LEDTokenizer"),yot.forEach(t),Clo=r(dk," or "),bB=n(dk,"A",{href:!0});var xot=s(bB);wlo=r(xot,"LEDTokenizerFast"),xot.forEach(t),Alo=r(dk," (LED model)"),dk.forEach(t),Llo=i(S),ms=n(S,"LI",{});var ck=s(ms);Yne=n(ck,"STRONG",{});var $ot=s(Yne);ylo=r($ot,"longformer"),$ot.forEach(t),xlo=r(ck," \u2014 "),vB=n(ck,"A",{href:!0});var kot=s(vB);$lo=r(kot,"LongformerTokenizer"),kot.forEach(t),klo=r(ck," or "),FB=n(ck,"A",{href:!0});var Sot=s(FB);Slo=r(Sot,"LongformerTokenizerFast"),Sot.forEach(t),Rlo=r(ck," (Longformer model)"),ck.forEach(t),Plo=i(S),gs=n(S,"LI",{});var fk=s(gs);Kne=n(fk,"STRONG",{});var Rot=s(Kne);Blo=r(Rot,"longt5"),Rot.forEach(t),Ilo=r(fk," \u2014 "),TB=n(fk,"A",{href:!0});var Pot=s(TB);Nlo=r(Pot,"T5Tokenizer"),Pot.forEach(t),qlo=r(fk," or "),MB=n(fk,"A",{href:!0});var Bot=s(MB);jlo=r(Bot,"T5TokenizerFast"),Bot.forEach(t),Dlo=r(fk," (LongT5 model)"),fk.forEach(t),Glo=i(S),oh=n(S,"LI",{});var Jwe=s(oh);Zne=n(Jwe,"STRONG",{});var Iot=s(Zne);Olo=r(Iot,"luke"),Iot.forEach(t),Vlo=r(Jwe," \u2014 "),EB=n(Jwe,"A",{href:!0});var Not=s(EB);Xlo=r(Not,"LukeTokenizer"),Not.forEach(t),zlo=r(Jwe," (LUKE model)"),Jwe.forEach(t),Wlo=i(S),hs=n(S,"LI",{});var mk=s(hs);ese=n(mk,"STRONG",{});var qot=s(ese);Qlo=r(qot,"lxmert"),qot.forEach(t),Hlo=r(mk," \u2014 "),CB=n(mk,"A",{href:!0});var jot=s(CB);Ulo=r(jot,"LxmertTokenizer"),jot.forEach(t),Jlo=r(mk," or "),wB=n(mk,"A",{href:!0});var Dot=s(wB);Ylo=r(Dot,"LxmertTokenizerFast"),Dot.forEach(t),Klo=r(mk," (LXMERT model)"),mk.forEach(t),Zlo=i(S),rh=n(S,"LI",{});var Ywe=s(rh);ose=n(Ywe,"STRONG",{});var Got=s(ose);eio=r(Got,"m2m_100"),Got.forEach(t),oio=r(Ywe," \u2014 "),AB=n(Ywe,"A",{href:!0});var Oot=s(AB);rio=r(Oot,"M2M100Tokenizer"),Oot.forEach(t),tio=r(Ywe," (M2M100 model)"),Ywe.forEach(t),aio=i(S),th=n(S,"LI",{});var Kwe=s(th);rse=n(Kwe,"STRONG",{});var Vot=s(rse);nio=r(Vot,"marian"),Vot.forEach(t),sio=r(Kwe," \u2014 "),LB=n(Kwe,"A",{href:!0});var Xot=s(LB);lio=r(Xot,"MarianTokenizer"),Xot.forEach(t),iio=r(Kwe," (Marian model)"),Kwe.forEach(t),dio=i(S),ps=n(S,"LI",{});var gk=s(ps);tse=n(gk,"STRONG",{});var zot=s(tse);cio=r(zot,"mbart"),zot.forEach(t),fio=r(gk," \u2014 "),yB=n(gk,"A",{href:!0});var Wot=s(yB);mio=r(Wot,"MBartTokenizer"),Wot.forEach(t),gio=r(gk," or "),xB=n(gk,"A",{href:!0});var Qot=s(xB);hio=r(Qot,"MBartTokenizerFast"),Qot.forEach(t),pio=r(gk," (mBART model)"),gk.forEach(t),uio=i(S),us=n(S,"LI",{});var hk=s(us);ase=n(hk,"STRONG",{});var Hot=s(ase);_io=r(Hot,"mbart50"),Hot.forEach(t),bio=r(hk," \u2014 "),$B=n(hk,"A",{href:!0});var Uot=s($B);vio=r(Uot,"MBart50Tokenizer"),Uot.forEach(t),Fio=r(hk," or "),kB=n(hk,"A",{href:!0});var Jot=s(kB);Tio=r(Jot,"MBart50TokenizerFast"),Jot.forEach(t),Mio=r(hk," (mBART-50 model)"),hk.forEach(t),Eio=i(S),_s=n(S,"LI",{});var pk=s(_s);nse=n(pk,"STRONG",{});var Yot=s(nse);Cio=r(Yot,"megatron-bert"),Yot.forEach(t),wio=r(pk," \u2014 "),SB=n(pk,"A",{href:!0});var Kot=s(SB);Aio=r(Kot,"BertTokenizer"),Kot.forEach(t),Lio=r(pk," or "),RB=n(pk,"A",{href:!0});var Zot=s(RB);yio=r(Zot,"BertTokenizerFast"),Zot.forEach(t),xio=r(pk," (Megatron-BERT model)"),pk.forEach(t),$io=i(S),ah=n(S,"LI",{});var Zwe=s(ah);sse=n(Zwe,"STRONG",{});var ert=s(sse);kio=r(ert,"mluke"),ert.forEach(t),Sio=r(Zwe," \u2014 "),PB=n(Zwe,"A",{href:!0});var ort=s(PB);Rio=r(ort,"MLukeTokenizer"),ort.forEach(t),Pio=r(Zwe," (mLUKE model)"),Zwe.forEach(t),Bio=i(S),bs=n(S,"LI",{});var uk=s(bs);lse=n(uk,"STRONG",{});var rrt=s(lse);Iio=r(rrt,"mobilebert"),rrt.forEach(t),Nio=r(uk," \u2014 "),BB=n(uk,"A",{href:!0});var trt=s(BB);qio=r(trt,"MobileBertTokenizer"),trt.forEach(t),jio=r(uk," or "),IB=n(uk,"A",{href:!0});var art=s(IB);Dio=r(art,"MobileBertTokenizerFast"),art.forEach(t),Gio=r(uk," (MobileBERT model)"),uk.forEach(t),Oio=i(S),vs=n(S,"LI",{});var _k=s(vs);ise=n(_k,"STRONG",{});var nrt=s(ise);Vio=r(nrt,"mpnet"),nrt.forEach(t),Xio=r(_k," \u2014 "),NB=n(_k,"A",{href:!0});var srt=s(NB);zio=r(srt,"MPNetTokenizer"),srt.forEach(t),Wio=r(_k," or "),qB=n(_k,"A",{href:!0});var lrt=s(qB);Qio=r(lrt,"MPNetTokenizerFast"),lrt.forEach(t),Hio=r(_k," (MPNet model)"),_k.forEach(t),Uio=i(S),Fs=n(S,"LI",{});var bk=s(Fs);dse=n(bk,"STRONG",{});var irt=s(dse);Jio=r(irt,"mt5"),irt.forEach(t),Yio=r(bk," \u2014 "),jB=n(bk,"A",{href:!0});var drt=s(jB);Kio=r(drt,"MT5Tokenizer"),drt.forEach(t),Zio=r(bk," or "),DB=n(bk,"A",{href:!0});var crt=s(DB);edo=r(crt,"MT5TokenizerFast"),crt.forEach(t),odo=r(bk," (MT5 model)"),bk.forEach(t),rdo=i(S),Ts=n(S,"LI",{});var vk=s(Ts);cse=n(vk,"STRONG",{});var frt=s(cse);tdo=r(frt,"nystromformer"),frt.forEach(t),ado=r(vk," \u2014 "),GB=n(vk,"A",{href:!0});var mrt=s(GB);ndo=r(mrt,"AlbertTokenizer"),mrt.forEach(t),sdo=r(vk," or "),OB=n(vk,"A",{href:!0});var grt=s(OB);ldo=r(grt,"AlbertTokenizerFast"),grt.forEach(t),ido=r(vk," (Nystr\xF6mformer model)"),vk.forEach(t),ddo=i(S),Ms=n(S,"LI",{});var Fk=s(Ms);fse=n(Fk,"STRONG",{});var hrt=s(fse);cdo=r(hrt,"openai-gpt"),hrt.forEach(t),fdo=r(Fk," \u2014 "),VB=n(Fk,"A",{href:!0});var prt=s(VB);mdo=r(prt,"OpenAIGPTTokenizer"),prt.forEach(t),gdo=r(Fk," or "),XB=n(Fk,"A",{href:!0});var urt=s(XB);hdo=r(urt,"OpenAIGPTTokenizerFast"),urt.forEach(t),pdo=r(Fk," (OpenAI GPT model)"),Fk.forEach(t),udo=i(S),nh=n(S,"LI",{});var eAe=s(nh);mse=n(eAe,"STRONG",{});var _rt=s(mse);_do=r(_rt,"opt"),_rt.forEach(t),bdo=r(eAe," \u2014 "),zB=n(eAe,"A",{href:!0});var brt=s(zB);vdo=r(brt,"GPT2Tokenizer"),brt.forEach(t),Fdo=r(eAe," (OPT model)"),eAe.forEach(t),Tdo=i(S),Es=n(S,"LI",{});var Tk=s(Es);gse=n(Tk,"STRONG",{});var vrt=s(gse);Mdo=r(vrt,"pegasus"),vrt.forEach(t),Edo=r(Tk," \u2014 "),WB=n(Tk,"A",{href:!0});var Frt=s(WB);Cdo=r(Frt,"PegasusTokenizer"),Frt.forEach(t),wdo=r(Tk," or "),QB=n(Tk,"A",{href:!0});var Trt=s(QB);Ado=r(Trt,"PegasusTokenizerFast"),Trt.forEach(t),Ldo=r(Tk," (Pegasus model)"),Tk.forEach(t),ydo=i(S),sh=n(S,"LI",{});var oAe=s(sh);hse=n(oAe,"STRONG",{});var Mrt=s(hse);xdo=r(Mrt,"perceiver"),Mrt.forEach(t),$do=r(oAe," \u2014 "),HB=n(oAe,"A",{href:!0});var Ert=s(HB);kdo=r(Ert,"PerceiverTokenizer"),Ert.forEach(t),Sdo=r(oAe," (Perceiver model)"),oAe.forEach(t),Rdo=i(S),lh=n(S,"LI",{});var rAe=s(lh);pse=n(rAe,"STRONG",{});var Crt=s(pse);Pdo=r(Crt,"phobert"),Crt.forEach(t),Bdo=r(rAe," \u2014 "),UB=n(rAe,"A",{href:!0});var wrt=s(UB);Ido=r(wrt,"PhobertTokenizer"),wrt.forEach(t),Ndo=r(rAe," (PhoBERT model)"),rAe.forEach(t),qdo=i(S),ih=n(S,"LI",{});var tAe=s(ih);use=n(tAe,"STRONG",{});var Art=s(use);jdo=r(Art,"plbart"),Art.forEach(t),Ddo=r(tAe," \u2014 "),JB=n(tAe,"A",{href:!0});var Lrt=s(JB);Gdo=r(Lrt,"PLBartTokenizer"),Lrt.forEach(t),Odo=r(tAe," (PLBart model)"),tAe.forEach(t),Vdo=i(S),dh=n(S,"LI",{});var aAe=s(dh);_se=n(aAe,"STRONG",{});var yrt=s(_se);Xdo=r(yrt,"prophetnet"),yrt.forEach(t),zdo=r(aAe," \u2014 "),YB=n(aAe,"A",{href:!0});var xrt=s(YB);Wdo=r(xrt,"ProphetNetTokenizer"),xrt.forEach(t),Qdo=r(aAe," (ProphetNet model)"),aAe.forEach(t),Hdo=i(S),Cs=n(S,"LI",{});var Mk=s(Cs);bse=n(Mk,"STRONG",{});var $rt=s(bse);Udo=r($rt,"qdqbert"),$rt.forEach(t),Jdo=r(Mk," \u2014 "),KB=n(Mk,"A",{href:!0});var krt=s(KB);Ydo=r(krt,"BertTokenizer"),krt.forEach(t),Kdo=r(Mk," or "),ZB=n(Mk,"A",{href:!0});var Srt=s(ZB);Zdo=r(Srt,"BertTokenizerFast"),Srt.forEach(t),eco=r(Mk," (QDQBert model)"),Mk.forEach(t),oco=i(S),ch=n(S,"LI",{});var nAe=s(ch);vse=n(nAe,"STRONG",{});var Rrt=s(vse);rco=r(Rrt,"rag"),Rrt.forEach(t),tco=r(nAe," \u2014 "),eI=n(nAe,"A",{href:!0});var Prt=s(eI);aco=r(Prt,"RagTokenizer"),Prt.forEach(t),nco=r(nAe," (RAG model)"),nAe.forEach(t),sco=i(S),ws=n(S,"LI",{});var Ek=s(ws);Fse=n(Ek,"STRONG",{});var Brt=s(Fse);lco=r(Brt,"realm"),Brt.forEach(t),ico=r(Ek," \u2014 "),oI=n(Ek,"A",{href:!0});var Irt=s(oI);dco=r(Irt,"RealmTokenizer"),Irt.forEach(t),cco=r(Ek," or "),rI=n(Ek,"A",{href:!0});var Nrt=s(rI);fco=r(Nrt,"RealmTokenizerFast"),Nrt.forEach(t),mco=r(Ek," (REALM model)"),Ek.forEach(t),gco=i(S),As=n(S,"LI",{});var Ck=s(As);Tse=n(Ck,"STRONG",{});var qrt=s(Tse);hco=r(qrt,"reformer"),qrt.forEach(t),pco=r(Ck," \u2014 "),tI=n(Ck,"A",{href:!0});var jrt=s(tI);uco=r(jrt,"ReformerTokenizer"),jrt.forEach(t),_co=r(Ck," or "),aI=n(Ck,"A",{href:!0});var Drt=s(aI);bco=r(Drt,"ReformerTokenizerFast"),Drt.forEach(t),vco=r(Ck," (Reformer model)"),Ck.forEach(t),Fco=i(S),Ls=n(S,"LI",{});var wk=s(Ls);Mse=n(wk,"STRONG",{});var Grt=s(Mse);Tco=r(Grt,"rembert"),Grt.forEach(t),Mco=r(wk," \u2014 "),nI=n(wk,"A",{href:!0});var Ort=s(nI);Eco=r(Ort,"RemBertTokenizer"),Ort.forEach(t),Cco=r(wk," or "),sI=n(wk,"A",{href:!0});var Vrt=s(sI);wco=r(Vrt,"RemBertTokenizerFast"),Vrt.forEach(t),Aco=r(wk," (RemBERT model)"),wk.forEach(t),Lco=i(S),ys=n(S,"LI",{});var Ak=s(ys);Ese=n(Ak,"STRONG",{});var Xrt=s(Ese);yco=r(Xrt,"retribert"),Xrt.forEach(t),xco=r(Ak," \u2014 "),lI=n(Ak,"A",{href:!0});var zrt=s(lI);$co=r(zrt,"RetriBertTokenizer"),zrt.forEach(t),kco=r(Ak," or "),iI=n(Ak,"A",{href:!0});var Wrt=s(iI);Sco=r(Wrt,"RetriBertTokenizerFast"),Wrt.forEach(t),Rco=r(Ak," (RetriBERT model)"),Ak.forEach(t),Pco=i(S),xs=n(S,"LI",{});var Lk=s(xs);Cse=n(Lk,"STRONG",{});var Qrt=s(Cse);Bco=r(Qrt,"roberta"),Qrt.forEach(t),Ico=r(Lk," \u2014 "),dI=n(Lk,"A",{href:!0});var Hrt=s(dI);Nco=r(Hrt,"RobertaTokenizer"),Hrt.forEach(t),qco=r(Lk," or "),cI=n(Lk,"A",{href:!0});var Urt=s(cI);jco=r(Urt,"RobertaTokenizerFast"),Urt.forEach(t),Dco=r(Lk," (RoBERTa model)"),Lk.forEach(t),Gco=i(S),$s=n(S,"LI",{});var yk=s($s);wse=n(yk,"STRONG",{});var Jrt=s(wse);Oco=r(Jrt,"roformer"),Jrt.forEach(t),Vco=r(yk," \u2014 "),fI=n(yk,"A",{href:!0});var Yrt=s(fI);Xco=r(Yrt,"RoFormerTokenizer"),Yrt.forEach(t),zco=r(yk," or "),mI=n(yk,"A",{href:!0});var Krt=s(mI);Wco=r(Krt,"RoFormerTokenizerFast"),Krt.forEach(t),Qco=r(yk," (RoFormer model)"),yk.forEach(t),Hco=i(S),fh=n(S,"LI",{});var sAe=s(fh);Ase=n(sAe,"STRONG",{});var Zrt=s(Ase);Uco=r(Zrt,"speech_to_text"),Zrt.forEach(t),Jco=r(sAe," \u2014 "),gI=n(sAe,"A",{href:!0});var ett=s(gI);Yco=r(ett,"Speech2TextTokenizer"),ett.forEach(t),Kco=r(sAe," (Speech2Text model)"),sAe.forEach(t),Zco=i(S),mh=n(S,"LI",{});var lAe=s(mh);Lse=n(lAe,"STRONG",{});var ott=s(Lse);efo=r(ott,"speech_to_text_2"),ott.forEach(t),ofo=r(lAe," \u2014 "),hI=n(lAe,"A",{href:!0});var rtt=s(hI);rfo=r(rtt,"Speech2Text2Tokenizer"),rtt.forEach(t),tfo=r(lAe," (Speech2Text2 model)"),lAe.forEach(t),afo=i(S),ks=n(S,"LI",{});var xk=s(ks);yse=n(xk,"STRONG",{});var ttt=s(yse);nfo=r(ttt,"splinter"),ttt.forEach(t),sfo=r(xk," \u2014 "),pI=n(xk,"A",{href:!0});var att=s(pI);lfo=r(att,"SplinterTokenizer"),att.forEach(t),ifo=r(xk," or "),uI=n(xk,"A",{href:!0});var ntt=s(uI);dfo=r(ntt,"SplinterTokenizerFast"),ntt.forEach(t),cfo=r(xk," (Splinter model)"),xk.forEach(t),ffo=i(S),Ss=n(S,"LI",{});var $k=s(Ss);xse=n($k,"STRONG",{});var stt=s(xse);mfo=r(stt,"squeezebert"),stt.forEach(t),gfo=r($k," \u2014 "),_I=n($k,"A",{href:!0});var ltt=s(_I);hfo=r(ltt,"SqueezeBertTokenizer"),ltt.forEach(t),pfo=r($k," or "),bI=n($k,"A",{href:!0});var itt=s(bI);ufo=r(itt,"SqueezeBertTokenizerFast"),itt.forEach(t),_fo=r($k," (SqueezeBERT model)"),$k.forEach(t),bfo=i(S),Rs=n(S,"LI",{});var kk=s(Rs);$se=n(kk,"STRONG",{});var dtt=s($se);vfo=r(dtt,"t5"),dtt.forEach(t),Ffo=r(kk," \u2014 "),vI=n(kk,"A",{href:!0});var ctt=s(vI);Tfo=r(ctt,"T5Tokenizer"),ctt.forEach(t),Mfo=r(kk," or "),FI=n(kk,"A",{href:!0});var ftt=s(FI);Efo=r(ftt,"T5TokenizerFast"),ftt.forEach(t),Cfo=r(kk," (T5 model)"),kk.forEach(t),wfo=i(S),gh=n(S,"LI",{});var iAe=s(gh);kse=n(iAe,"STRONG",{});var mtt=s(kse);Afo=r(mtt,"tapas"),mtt.forEach(t),Lfo=r(iAe," \u2014 "),TI=n(iAe,"A",{href:!0});var gtt=s(TI);yfo=r(gtt,"TapasTokenizer"),gtt.forEach(t),xfo=r(iAe," (TAPAS model)"),iAe.forEach(t),$fo=i(S),hh=n(S,"LI",{});var dAe=s(hh);Sse=n(dAe,"STRONG",{});var htt=s(Sse);kfo=r(htt,"tapex"),htt.forEach(t),Sfo=r(dAe," \u2014 "),MI=n(dAe,"A",{href:!0});var ptt=s(MI);Rfo=r(ptt,"TapexTokenizer"),ptt.forEach(t),Pfo=r(dAe," (TAPEX model)"),dAe.forEach(t),Bfo=i(S),ph=n(S,"LI",{});var cAe=s(ph);Rse=n(cAe,"STRONG",{});var utt=s(Rse);Ifo=r(utt,"transfo-xl"),utt.forEach(t),Nfo=r(cAe," \u2014 "),EI=n(cAe,"A",{href:!0});var _tt=s(EI);qfo=r(_tt,"TransfoXLTokenizer"),_tt.forEach(t),jfo=r(cAe," (Transformer-XL model)"),cAe.forEach(t),Dfo=i(S),Ps=n(S,"LI",{});var Sk=s(Ps);Pse=n(Sk,"STRONG",{});var btt=s(Pse);Gfo=r(btt,"vilt"),btt.forEach(t),Ofo=r(Sk," \u2014 "),CI=n(Sk,"A",{href:!0});var vtt=s(CI);Vfo=r(vtt,"BertTokenizer"),vtt.forEach(t),Xfo=r(Sk," or "),wI=n(Sk,"A",{href:!0});var Ftt=s(wI);zfo=r(Ftt,"BertTokenizerFast"),Ftt.forEach(t),Wfo=r(Sk," (ViLT model)"),Sk.forEach(t),Qfo=i(S),Bs=n(S,"LI",{});var Rk=s(Bs);Bse=n(Rk,"STRONG",{});var Ttt=s(Bse);Hfo=r(Ttt,"visual_bert"),Ttt.forEach(t),Ufo=r(Rk," \u2014 "),AI=n(Rk,"A",{href:!0});var Mtt=s(AI);Jfo=r(Mtt,"BertTokenizer"),Mtt.forEach(t),Yfo=r(Rk," or "),LI=n(Rk,"A",{href:!0});var Ett=s(LI);Kfo=r(Ett,"BertTokenizerFast"),Ett.forEach(t),Zfo=r(Rk," (VisualBERT model)"),Rk.forEach(t),emo=i(S),uh=n(S,"LI",{});var fAe=s(uh);Ise=n(fAe,"STRONG",{});var Ctt=s(Ise);omo=r(Ctt,"wav2vec2"),Ctt.forEach(t),rmo=r(fAe," \u2014 "),yI=n(fAe,"A",{href:!0});var wtt=s(yI);tmo=r(wtt,"Wav2Vec2CTCTokenizer"),wtt.forEach(t),amo=r(fAe," (Wav2Vec2 model)"),fAe.forEach(t),nmo=i(S),_h=n(S,"LI",{});var mAe=s(_h);Nse=n(mAe,"STRONG",{});var Att=s(Nse);smo=r(Att,"wav2vec2-conformer"),Att.forEach(t),lmo=r(mAe," \u2014 "),xI=n(mAe,"A",{href:!0});var Ltt=s(xI);imo=r(Ltt,"Wav2Vec2CTCTokenizer"),Ltt.forEach(t),dmo=r(mAe," (Wav2Vec2-Conformer model)"),mAe.forEach(t),cmo=i(S),bh=n(S,"LI",{});var gAe=s(bh);qse=n(gAe,"STRONG",{});var ytt=s(qse);fmo=r(ytt,"wav2vec2_phoneme"),ytt.forEach(t),mmo=r(gAe," \u2014 "),$I=n(gAe,"A",{href:!0});var xtt=s($I);gmo=r(xtt,"Wav2Vec2PhonemeCTCTokenizer"),xtt.forEach(t),hmo=r(gAe," (Wav2Vec2Phoneme model)"),gAe.forEach(t),pmo=i(S),Is=n(S,"LI",{});var Pk=s(Is);jse=n(Pk,"STRONG",{});var $tt=s(jse);umo=r($tt,"xglm"),$tt.forEach(t),_mo=r(Pk," \u2014 "),kI=n(Pk,"A",{href:!0});var ktt=s(kI);bmo=r(ktt,"XGLMTokenizer"),ktt.forEach(t),vmo=r(Pk," or "),SI=n(Pk,"A",{href:!0});var Stt=s(SI);Fmo=r(Stt,"XGLMTokenizerFast"),Stt.forEach(t),Tmo=r(Pk," (XGLM model)"),Pk.forEach(t),Mmo=i(S),vh=n(S,"LI",{});var hAe=s(vh);Dse=n(hAe,"STRONG",{});var Rtt=s(Dse);Emo=r(Rtt,"xlm"),Rtt.forEach(t),Cmo=r(hAe," \u2014 "),RI=n(hAe,"A",{href:!0});var Ptt=s(RI);wmo=r(Ptt,"XLMTokenizer"),Ptt.forEach(t),Amo=r(hAe," (XLM model)"),hAe.forEach(t),Lmo=i(S),Fh=n(S,"LI",{});var pAe=s(Fh);Gse=n(pAe,"STRONG",{});var Btt=s(Gse);ymo=r(Btt,"xlm-prophetnet"),Btt.forEach(t),xmo=r(pAe," \u2014 "),PI=n(pAe,"A",{href:!0});var Itt=s(PI);$mo=r(Itt,"XLMProphetNetTokenizer"),Itt.forEach(t),kmo=r(pAe," (XLM-ProphetNet model)"),pAe.forEach(t),Smo=i(S),Ns=n(S,"LI",{});var Bk=s(Ns);Ose=n(Bk,"STRONG",{});var Ntt=s(Ose);Rmo=r(Ntt,"xlm-roberta"),Ntt.forEach(t),Pmo=r(Bk," \u2014 "),BI=n(Bk,"A",{href:!0});var qtt=s(BI);Bmo=r(qtt,"XLMRobertaTokenizer"),qtt.forEach(t),Imo=r(Bk," or "),II=n(Bk,"A",{href:!0});var jtt=s(II);Nmo=r(jtt,"XLMRobertaTokenizerFast"),jtt.forEach(t),qmo=r(Bk," (XLM-RoBERTa model)"),Bk.forEach(t),jmo=i(S),qs=n(S,"LI",{});var Ik=s(qs);Vse=n(Ik,"STRONG",{});var Dtt=s(Vse);Dmo=r(Dtt,"xlm-roberta-xl"),Dtt.forEach(t),Gmo=r(Ik," \u2014 "),NI=n(Ik,"A",{href:!0});var Gtt=s(NI);Omo=r(Gtt,"RobertaTokenizer"),Gtt.forEach(t),Vmo=r(Ik," or "),qI=n(Ik,"A",{href:!0});var Ott=s(qI);Xmo=r(Ott,"RobertaTokenizerFast"),Ott.forEach(t),zmo=r(Ik," (XLM-RoBERTa-XL model)"),Ik.forEach(t),Wmo=i(S),js=n(S,"LI",{});var Nk=s(js);Xse=n(Nk,"STRONG",{});var Vtt=s(Xse);Qmo=r(Vtt,"xlnet"),Vtt.forEach(t),Hmo=r(Nk," \u2014 "),jI=n(Nk,"A",{href:!0});var Xtt=s(jI);Umo=r(Xtt,"XLNetTokenizer"),Xtt.forEach(t),Jmo=r(Nk," or "),DI=n(Nk,"A",{href:!0});var ztt=s(DI);Ymo=r(ztt,"XLNetTokenizerFast"),ztt.forEach(t),Kmo=r(Nk," (XLNet model)"),Nk.forEach(t),Zmo=i(S),Ds=n(S,"LI",{});var qk=s(Ds);zse=n(qk,"STRONG",{});var Wtt=s(zse);ego=r(Wtt,"yoso"),Wtt.forEach(t),ogo=r(qk," \u2014 "),GI=n(qk,"A",{href:!0});var Qtt=s(GI);rgo=r(Qtt,"AlbertTokenizer"),Qtt.forEach(t),tgo=r(qk," or "),OI=n(qk,"A",{href:!0});var Htt=s(OI);ago=r(Htt,"AlbertTokenizerFast"),Htt.forEach(t),ngo=r(qk," (YOSO model)"),qk.forEach(t),S.forEach(t),sgo=i(Ws),T(Th.$$.fragment,Ws),Ws.forEach(t),lgo=i(zs),Mh=n(zs,"DIV",{class:!0});var eVe=s(Mh);T($A.$$.fragment,eVe),igo=i(eVe),Wse=n(eVe,"P",{});var Utt=s(Wse);dgo=r(Utt,"Register a new tokenizer in this mapping."),Utt.forEach(t),eVe.forEach(t),zs.forEach(t),ZDe=i(f),ki=n(f,"H2",{class:!0});var oVe=s(ki);Eh=n(oVe,"A",{id:!0,class:!0,href:!0});var Jtt=s(Eh);Qse=n(Jtt,"SPAN",{});var Ytt=s(Qse);T(kA.$$.fragment,Ytt),Ytt.forEach(t),Jtt.forEach(t),cgo=i(oVe),Hse=n(oVe,"SPAN",{});var Ktt=s(Hse);fgo=r(Ktt,"AutoFeatureExtractor"),Ktt.forEach(t),oVe.forEach(t),eGe=i(f),Lo=n(f,"DIV",{class:!0});var Qs=s(Lo);T(SA.$$.fragment,Qs),mgo=i(Qs),RA=n(Qs,"P",{});var rVe=s(RA);ggo=r(rVe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),VI=n(rVe,"A",{href:!0});var Ztt=s(VI);hgo=r(Ztt,"AutoFeatureExtractor.from_pretrained()"),Ztt.forEach(t),pgo=r(rVe," class method."),rVe.forEach(t),ugo=i(Qs),PA=n(Qs,"P",{});var tVe=s(PA);_go=r(tVe,"This class cannot be instantiated directly using "),Use=n(tVe,"CODE",{});var eat=s(Use);bgo=r(eat,"__init__()"),eat.forEach(t),vgo=r(tVe," (throws an error)."),tVe.forEach(t),Fgo=i(Qs),He=n(Qs,"DIV",{class:!0});var ra=s(He);T(BA.$$.fragment,ra),Tgo=i(ra),Jse=n(ra,"P",{});var oat=s(Jse);Mgo=r(oat,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),oat.forEach(t),Ego=i(ra),ka=n(ra,"P",{});var b0=s(ka);Cgo=r(b0,"The feature extractor class to instantiate is selected based on the "),Yse=n(b0,"CODE",{});var rat=s(Yse);wgo=r(rat,"model_type"),rat.forEach(t),Ago=r(b0,` property of the config object
(either passed as an argument or loaded from `),Kse=n(b0,"CODE",{});var tat=s(Kse);Lgo=r(tat,"pretrained_model_name_or_path"),tat.forEach(t),ygo=r(b0,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Zse=n(b0,"CODE",{});var aat=s(Zse);xgo=r(aat,"pretrained_model_name_or_path"),aat.forEach(t),$go=r(b0,":"),b0.forEach(t),kgo=i(ra),Y=n(ra,"UL",{});var K=s(Y);Ch=n(K,"LI",{});var uAe=s(Ch);ele=n(uAe,"STRONG",{});var nat=s(ele);Sgo=r(nat,"beit"),nat.forEach(t),Rgo=r(uAe," \u2014 "),XI=n(uAe,"A",{href:!0});var sat=s(XI);Pgo=r(sat,"BeitFeatureExtractor"),sat.forEach(t),Bgo=r(uAe," (BEiT model)"),uAe.forEach(t),Igo=i(K),wh=n(K,"LI",{});var _Ae=s(wh);ole=n(_Ae,"STRONG",{});var lat=s(ole);Ngo=r(lat,"clip"),lat.forEach(t),qgo=r(_Ae," \u2014 "),zI=n(_Ae,"A",{href:!0});var iat=s(zI);jgo=r(iat,"CLIPFeatureExtractor"),iat.forEach(t),Dgo=r(_Ae," (CLIP model)"),_Ae.forEach(t),Ggo=i(K),Ah=n(K,"LI",{});var bAe=s(Ah);rle=n(bAe,"STRONG",{});var dat=s(rle);Ogo=r(dat,"convnext"),dat.forEach(t),Vgo=r(bAe," \u2014 "),WI=n(bAe,"A",{href:!0});var cat=s(WI);Xgo=r(cat,"ConvNextFeatureExtractor"),cat.forEach(t),zgo=r(bAe," (ConvNeXT model)"),bAe.forEach(t),Wgo=i(K),Lh=n(K,"LI",{});var vAe=s(Lh);tle=n(vAe,"STRONG",{});var fat=s(tle);Qgo=r(fat,"cvt"),fat.forEach(t),Hgo=r(vAe," \u2014 "),QI=n(vAe,"A",{href:!0});var mat=s(QI);Ugo=r(mat,"ConvNextFeatureExtractor"),mat.forEach(t),Jgo=r(vAe," (CvT model)"),vAe.forEach(t),Ygo=i(K),yh=n(K,"LI",{});var FAe=s(yh);ale=n(FAe,"STRONG",{});var gat=s(ale);Kgo=r(gat,"data2vec-audio"),gat.forEach(t),Zgo=r(FAe," \u2014 "),HI=n(FAe,"A",{href:!0});var hat=s(HI);eho=r(hat,"Wav2Vec2FeatureExtractor"),hat.forEach(t),oho=r(FAe," (Data2VecAudio model)"),FAe.forEach(t),rho=i(K),xh=n(K,"LI",{});var TAe=s(xh);nle=n(TAe,"STRONG",{});var pat=s(nle);tho=r(pat,"data2vec-vision"),pat.forEach(t),aho=r(TAe," \u2014 "),UI=n(TAe,"A",{href:!0});var uat=s(UI);nho=r(uat,"BeitFeatureExtractor"),uat.forEach(t),sho=r(TAe," (Data2VecVision model)"),TAe.forEach(t),lho=i(K),$h=n(K,"LI",{});var MAe=s($h);sle=n(MAe,"STRONG",{});var _at=s(sle);iho=r(_at,"deit"),_at.forEach(t),dho=r(MAe," \u2014 "),JI=n(MAe,"A",{href:!0});var bat=s(JI);cho=r(bat,"DeiTFeatureExtractor"),bat.forEach(t),fho=r(MAe," (DeiT model)"),MAe.forEach(t),mho=i(K),kh=n(K,"LI",{});var EAe=s(kh);lle=n(EAe,"STRONG",{});var vat=s(lle);gho=r(vat,"detr"),vat.forEach(t),hho=r(EAe," \u2014 "),YI=n(EAe,"A",{href:!0});var Fat=s(YI);pho=r(Fat,"DetrFeatureExtractor"),Fat.forEach(t),uho=r(EAe," (DETR model)"),EAe.forEach(t),_ho=i(K),Sh=n(K,"LI",{});var CAe=s(Sh);ile=n(CAe,"STRONG",{});var Tat=s(ile);bho=r(Tat,"dpt"),Tat.forEach(t),vho=r(CAe," \u2014 "),KI=n(CAe,"A",{href:!0});var Mat=s(KI);Fho=r(Mat,"DPTFeatureExtractor"),Mat.forEach(t),Tho=r(CAe," (DPT model)"),CAe.forEach(t),Mho=i(K),Rh=n(K,"LI",{});var wAe=s(Rh);dle=n(wAe,"STRONG",{});var Eat=s(dle);Eho=r(Eat,"flava"),Eat.forEach(t),Cho=r(wAe," \u2014 "),ZI=n(wAe,"A",{href:!0});var Cat=s(ZI);who=r(Cat,"FlavaFeatureExtractor"),Cat.forEach(t),Aho=r(wAe," (FLAVA model)"),wAe.forEach(t),Lho=i(K),Ph=n(K,"LI",{});var AAe=s(Ph);cle=n(AAe,"STRONG",{});var wat=s(cle);yho=r(wat,"glpn"),wat.forEach(t),xho=r(AAe," \u2014 "),eN=n(AAe,"A",{href:!0});var Aat=s(eN);$ho=r(Aat,"GLPNFeatureExtractor"),Aat.forEach(t),kho=r(AAe," (GLPN model)"),AAe.forEach(t),Sho=i(K),Bh=n(K,"LI",{});var LAe=s(Bh);fle=n(LAe,"STRONG",{});var Lat=s(fle);Rho=r(Lat,"hubert"),Lat.forEach(t),Pho=r(LAe," \u2014 "),oN=n(LAe,"A",{href:!0});var yat=s(oN);Bho=r(yat,"Wav2Vec2FeatureExtractor"),yat.forEach(t),Iho=r(LAe," (Hubert model)"),LAe.forEach(t),Nho=i(K),Ih=n(K,"LI",{});var yAe=s(Ih);mle=n(yAe,"STRONG",{});var xat=s(mle);qho=r(xat,"imagegpt"),xat.forEach(t),jho=r(yAe," \u2014 "),rN=n(yAe,"A",{href:!0});var $at=s(rN);Dho=r($at,"ImageGPTFeatureExtractor"),$at.forEach(t),Gho=r(yAe," (ImageGPT model)"),yAe.forEach(t),Oho=i(K),Nh=n(K,"LI",{});var xAe=s(Nh);gle=n(xAe,"STRONG",{});var kat=s(gle);Vho=r(kat,"layoutlmv2"),kat.forEach(t),Xho=r(xAe," \u2014 "),tN=n(xAe,"A",{href:!0});var Sat=s(tN);zho=r(Sat,"LayoutLMv2FeatureExtractor"),Sat.forEach(t),Who=r(xAe," (LayoutLMv2 model)"),xAe.forEach(t),Qho=i(K),qh=n(K,"LI",{});var $Ae=s(qh);hle=n($Ae,"STRONG",{});var Rat=s(hle);Hho=r(Rat,"layoutlmv3"),Rat.forEach(t),Uho=r($Ae," \u2014 "),aN=n($Ae,"A",{href:!0});var Pat=s(aN);Jho=r(Pat,"LayoutLMv3FeatureExtractor"),Pat.forEach(t),Yho=r($Ae," (LayoutLMv3 model)"),$Ae.forEach(t),Kho=i(K),jh=n(K,"LI",{});var kAe=s(jh);ple=n(kAe,"STRONG",{});var Bat=s(ple);Zho=r(Bat,"levit"),Bat.forEach(t),epo=r(kAe," \u2014 "),nN=n(kAe,"A",{href:!0});var Iat=s(nN);opo=r(Iat,"LevitFeatureExtractor"),Iat.forEach(t),rpo=r(kAe," (LeViT model)"),kAe.forEach(t),tpo=i(K),Dh=n(K,"LI",{});var SAe=s(Dh);ule=n(SAe,"STRONG",{});var Nat=s(ule);apo=r(Nat,"maskformer"),Nat.forEach(t),npo=r(SAe," \u2014 "),sN=n(SAe,"A",{href:!0});var qat=s(sN);spo=r(qat,"MaskFormerFeatureExtractor"),qat.forEach(t),lpo=r(SAe," (MaskFormer model)"),SAe.forEach(t),ipo=i(K),Gh=n(K,"LI",{});var RAe=s(Gh);_le=n(RAe,"STRONG",{});var jat=s(_le);dpo=r(jat,"mctct"),jat.forEach(t),cpo=r(RAe," \u2014 "),lN=n(RAe,"A",{href:!0});var Dat=s(lN);fpo=r(Dat,"MCTCTFeatureExtractor"),Dat.forEach(t),mpo=r(RAe," (M-CTC-T model)"),RAe.forEach(t),gpo=i(K),Oh=n(K,"LI",{});var PAe=s(Oh);ble=n(PAe,"STRONG",{});var Gat=s(ble);hpo=r(Gat,"perceiver"),Gat.forEach(t),ppo=r(PAe," \u2014 "),iN=n(PAe,"A",{href:!0});var Oat=s(iN);upo=r(Oat,"PerceiverFeatureExtractor"),Oat.forEach(t),_po=r(PAe," (Perceiver model)"),PAe.forEach(t),bpo=i(K),Vh=n(K,"LI",{});var BAe=s(Vh);vle=n(BAe,"STRONG",{});var Vat=s(vle);vpo=r(Vat,"poolformer"),Vat.forEach(t),Fpo=r(BAe," \u2014 "),dN=n(BAe,"A",{href:!0});var Xat=s(dN);Tpo=r(Xat,"PoolFormerFeatureExtractor"),Xat.forEach(t),Mpo=r(BAe," (PoolFormer model)"),BAe.forEach(t),Epo=i(K),Xh=n(K,"LI",{});var IAe=s(Xh);Fle=n(IAe,"STRONG",{});var zat=s(Fle);Cpo=r(zat,"regnet"),zat.forEach(t),wpo=r(IAe," \u2014 "),cN=n(IAe,"A",{href:!0});var Wat=s(cN);Apo=r(Wat,"ConvNextFeatureExtractor"),Wat.forEach(t),Lpo=r(IAe," (RegNet model)"),IAe.forEach(t),ypo=i(K),zh=n(K,"LI",{});var NAe=s(zh);Tle=n(NAe,"STRONG",{});var Qat=s(Tle);xpo=r(Qat,"resnet"),Qat.forEach(t),$po=r(NAe," \u2014 "),fN=n(NAe,"A",{href:!0});var Hat=s(fN);kpo=r(Hat,"ConvNextFeatureExtractor"),Hat.forEach(t),Spo=r(NAe," (ResNet model)"),NAe.forEach(t),Rpo=i(K),Wh=n(K,"LI",{});var qAe=s(Wh);Mle=n(qAe,"STRONG",{});var Uat=s(Mle);Ppo=r(Uat,"segformer"),Uat.forEach(t),Bpo=r(qAe," \u2014 "),mN=n(qAe,"A",{href:!0});var Jat=s(mN);Ipo=r(Jat,"SegformerFeatureExtractor"),Jat.forEach(t),Npo=r(qAe," (SegFormer model)"),qAe.forEach(t),qpo=i(K),Qh=n(K,"LI",{});var jAe=s(Qh);Ele=n(jAe,"STRONG",{});var Yat=s(Ele);jpo=r(Yat,"speech_to_text"),Yat.forEach(t),Dpo=r(jAe," \u2014 "),gN=n(jAe,"A",{href:!0});var Kat=s(gN);Gpo=r(Kat,"Speech2TextFeatureExtractor"),Kat.forEach(t),Opo=r(jAe," (Speech2Text model)"),jAe.forEach(t),Vpo=i(K),Hh=n(K,"LI",{});var DAe=s(Hh);Cle=n(DAe,"STRONG",{});var Zat=s(Cle);Xpo=r(Zat,"swin"),Zat.forEach(t),zpo=r(DAe," \u2014 "),hN=n(DAe,"A",{href:!0});var ent=s(hN);Wpo=r(ent,"ViTFeatureExtractor"),ent.forEach(t),Qpo=r(DAe," (Swin Transformer model)"),DAe.forEach(t),Hpo=i(K),Uh=n(K,"LI",{});var GAe=s(Uh);wle=n(GAe,"STRONG",{});var ont=s(wle);Upo=r(ont,"van"),ont.forEach(t),Jpo=r(GAe," \u2014 "),pN=n(GAe,"A",{href:!0});var rnt=s(pN);Ypo=r(rnt,"ConvNextFeatureExtractor"),rnt.forEach(t),Kpo=r(GAe," (VAN model)"),GAe.forEach(t),Zpo=i(K),Jh=n(K,"LI",{});var OAe=s(Jh);Ale=n(OAe,"STRONG",{});var tnt=s(Ale);euo=r(tnt,"vilt"),tnt.forEach(t),ouo=r(OAe," \u2014 "),uN=n(OAe,"A",{href:!0});var ant=s(uN);ruo=r(ant,"ViltFeatureExtractor"),ant.forEach(t),tuo=r(OAe," (ViLT model)"),OAe.forEach(t),auo=i(K),Yh=n(K,"LI",{});var VAe=s(Yh);Lle=n(VAe,"STRONG",{});var nnt=s(Lle);nuo=r(nnt,"vit"),nnt.forEach(t),suo=r(VAe," \u2014 "),_N=n(VAe,"A",{href:!0});var snt=s(_N);luo=r(snt,"ViTFeatureExtractor"),snt.forEach(t),iuo=r(VAe," (ViT model)"),VAe.forEach(t),duo=i(K),Kh=n(K,"LI",{});var XAe=s(Kh);yle=n(XAe,"STRONG",{});var lnt=s(yle);cuo=r(lnt,"vit_mae"),lnt.forEach(t),fuo=r(XAe," \u2014 "),bN=n(XAe,"A",{href:!0});var int=s(bN);muo=r(int,"ViTFeatureExtractor"),int.forEach(t),guo=r(XAe," (ViTMAE model)"),XAe.forEach(t),huo=i(K),Zh=n(K,"LI",{});var zAe=s(Zh);xle=n(zAe,"STRONG",{});var dnt=s(xle);puo=r(dnt,"wav2vec2"),dnt.forEach(t),uuo=r(zAe," \u2014 "),vN=n(zAe,"A",{href:!0});var cnt=s(vN);_uo=r(cnt,"Wav2Vec2FeatureExtractor"),cnt.forEach(t),buo=r(zAe," (Wav2Vec2 model)"),zAe.forEach(t),vuo=i(K),ep=n(K,"LI",{});var WAe=s(ep);$le=n(WAe,"STRONG",{});var fnt=s($le);Fuo=r(fnt,"wav2vec2-conformer"),fnt.forEach(t),Tuo=r(WAe," \u2014 "),FN=n(WAe,"A",{href:!0});var mnt=s(FN);Muo=r(mnt,"Wav2Vec2FeatureExtractor"),mnt.forEach(t),Euo=r(WAe," (Wav2Vec2-Conformer model)"),WAe.forEach(t),Cuo=i(K),op=n(K,"LI",{});var QAe=s(op);kle=n(QAe,"STRONG",{});var gnt=s(kle);wuo=r(gnt,"yolos"),gnt.forEach(t),Auo=r(QAe," \u2014 "),TN=n(QAe,"A",{href:!0});var hnt=s(TN);Luo=r(hnt,"YolosFeatureExtractor"),hnt.forEach(t),yuo=r(QAe," (YOLOS model)"),QAe.forEach(t),K.forEach(t),xuo=i(ra),T(rp.$$.fragment,ra),$uo=i(ra),T(tp.$$.fragment,ra),ra.forEach(t),kuo=i(Qs),ap=n(Qs,"DIV",{class:!0});var aVe=s(ap);T(IA.$$.fragment,aVe),Suo=i(aVe),Sle=n(aVe,"P",{});var pnt=s(Sle);Ruo=r(pnt,"Register a new feature extractor for this class."),pnt.forEach(t),aVe.forEach(t),Qs.forEach(t),oGe=i(f),Si=n(f,"H2",{class:!0});var nVe=s(Si);np=n(nVe,"A",{id:!0,class:!0,href:!0});var unt=s(np);Rle=n(unt,"SPAN",{});var _nt=s(Rle);T(NA.$$.fragment,_nt),_nt.forEach(t),unt.forEach(t),Puo=i(nVe),Ple=n(nVe,"SPAN",{});var bnt=s(Ple);Buo=r(bnt,"AutoProcessor"),bnt.forEach(t),nVe.forEach(t),rGe=i(f),yo=n(f,"DIV",{class:!0});var Hs=s(yo);T(qA.$$.fragment,Hs),Iuo=i(Hs),jA=n(Hs,"P",{});var sVe=s(jA);Nuo=r(sVe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),MN=n(sVe,"A",{href:!0});var vnt=s(MN);quo=r(vnt,"AutoProcessor.from_pretrained()"),vnt.forEach(t),juo=r(sVe," class method."),sVe.forEach(t),Duo=i(Hs),DA=n(Hs,"P",{});var lVe=s(DA);Guo=r(lVe,"This class cannot be instantiated directly using "),Ble=n(lVe,"CODE",{});var Fnt=s(Ble);Ouo=r(Fnt,"__init__()"),Fnt.forEach(t),Vuo=r(lVe," (throws an error)."),lVe.forEach(t),Xuo=i(Hs),Ue=n(Hs,"DIV",{class:!0});var ta=s(Ue);T(GA.$$.fragment,ta),zuo=i(ta),Ile=n(ta,"P",{});var Tnt=s(Ile);Wuo=r(Tnt,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Tnt.forEach(t),Quo=i(ta),Ri=n(ta,"P",{});var Wee=s(Ri);Huo=r(Wee,"The processor class to instantiate is selected based on the "),Nle=n(Wee,"CODE",{});var Mnt=s(Nle);Uuo=r(Mnt,"model_type"),Mnt.forEach(t),Juo=r(Wee,` property of the config object (either
passed as an argument or loaded from `),qle=n(Wee,"CODE",{});var Ent=s(qle);Yuo=r(Ent,"pretrained_model_name_or_path"),Ent.forEach(t),Kuo=r(Wee," if possible):"),Wee.forEach(t),Zuo=i(ta),he=n(ta,"UL",{});var _e=s(he);sp=n(_e,"LI",{});var HAe=s(sp);jle=n(HAe,"STRONG",{});var Cnt=s(jle);e_o=r(Cnt,"clip"),Cnt.forEach(t),o_o=r(HAe," \u2014 "),EN=n(HAe,"A",{href:!0});var wnt=s(EN);r_o=r(wnt,"CLIPProcessor"),wnt.forEach(t),t_o=r(HAe," (CLIP model)"),HAe.forEach(t),a_o=i(_e),lp=n(_e,"LI",{});var UAe=s(lp);Dle=n(UAe,"STRONG",{});var Ant=s(Dle);n_o=r(Ant,"flava"),Ant.forEach(t),s_o=r(UAe," \u2014 "),Gle=n(UAe,"CODE",{});var Lnt=s(Gle);l_o=r(Lnt,"FLAVAProcessor"),Lnt.forEach(t),i_o=r(UAe," (FLAVA model)"),UAe.forEach(t),d_o=i(_e),ip=n(_e,"LI",{});var JAe=s(ip);Ole=n(JAe,"STRONG",{});var ynt=s(Ole);c_o=r(ynt,"layoutlmv2"),ynt.forEach(t),f_o=r(JAe," \u2014 "),CN=n(JAe,"A",{href:!0});var xnt=s(CN);m_o=r(xnt,"LayoutLMv2Processor"),xnt.forEach(t),g_o=r(JAe," (LayoutLMv2 model)"),JAe.forEach(t),h_o=i(_e),dp=n(_e,"LI",{});var YAe=s(dp);Vle=n(YAe,"STRONG",{});var $nt=s(Vle);p_o=r($nt,"layoutlmv3"),$nt.forEach(t),u_o=r(YAe," \u2014 "),wN=n(YAe,"A",{href:!0});var knt=s(wN);__o=r(knt,"LayoutLMv3Processor"),knt.forEach(t),b_o=r(YAe," (LayoutLMv3 model)"),YAe.forEach(t),v_o=i(_e),cp=n(_e,"LI",{});var KAe=s(cp);Xle=n(KAe,"STRONG",{});var Snt=s(Xle);F_o=r(Snt,"layoutxlm"),Snt.forEach(t),T_o=r(KAe," \u2014 "),AN=n(KAe,"A",{href:!0});var Rnt=s(AN);M_o=r(Rnt,"LayoutXLMProcessor"),Rnt.forEach(t),E_o=r(KAe," (LayoutXLM model)"),KAe.forEach(t),C_o=i(_e),fp=n(_e,"LI",{});var ZAe=s(fp);zle=n(ZAe,"STRONG",{});var Pnt=s(zle);w_o=r(Pnt,"sew"),Pnt.forEach(t),A_o=r(ZAe," \u2014 "),LN=n(ZAe,"A",{href:!0});var Bnt=s(LN);L_o=r(Bnt,"Wav2Vec2Processor"),Bnt.forEach(t),y_o=r(ZAe," (SEW model)"),ZAe.forEach(t),x_o=i(_e),mp=n(_e,"LI",{});var eLe=s(mp);Wle=n(eLe,"STRONG",{});var Int=s(Wle);$_o=r(Int,"sew-d"),Int.forEach(t),k_o=r(eLe," \u2014 "),yN=n(eLe,"A",{href:!0});var Nnt=s(yN);S_o=r(Nnt,"Wav2Vec2Processor"),Nnt.forEach(t),R_o=r(eLe," (SEW-D model)"),eLe.forEach(t),P_o=i(_e),gp=n(_e,"LI",{});var oLe=s(gp);Qle=n(oLe,"STRONG",{});var qnt=s(Qle);B_o=r(qnt,"speech_to_text"),qnt.forEach(t),I_o=r(oLe," \u2014 "),xN=n(oLe,"A",{href:!0});var jnt=s(xN);N_o=r(jnt,"Speech2TextProcessor"),jnt.forEach(t),q_o=r(oLe," (Speech2Text model)"),oLe.forEach(t),j_o=i(_e),hp=n(_e,"LI",{});var rLe=s(hp);Hle=n(rLe,"STRONG",{});var Dnt=s(Hle);D_o=r(Dnt,"speech_to_text_2"),Dnt.forEach(t),G_o=r(rLe," \u2014 "),$N=n(rLe,"A",{href:!0});var Gnt=s($N);O_o=r(Gnt,"Speech2Text2Processor"),Gnt.forEach(t),V_o=r(rLe," (Speech2Text2 model)"),rLe.forEach(t),X_o=i(_e),pp=n(_e,"LI",{});var tLe=s(pp);Ule=n(tLe,"STRONG",{});var Ont=s(Ule);z_o=r(Ont,"trocr"),Ont.forEach(t),W_o=r(tLe," \u2014 "),kN=n(tLe,"A",{href:!0});var Vnt=s(kN);Q_o=r(Vnt,"TrOCRProcessor"),Vnt.forEach(t),H_o=r(tLe," (TrOCR model)"),tLe.forEach(t),U_o=i(_e),up=n(_e,"LI",{});var aLe=s(up);Jle=n(aLe,"STRONG",{});var Xnt=s(Jle);J_o=r(Xnt,"unispeech"),Xnt.forEach(t),Y_o=r(aLe," \u2014 "),SN=n(aLe,"A",{href:!0});var znt=s(SN);K_o=r(znt,"Wav2Vec2Processor"),znt.forEach(t),Z_o=r(aLe," (UniSpeech model)"),aLe.forEach(t),e2o=i(_e),_p=n(_e,"LI",{});var nLe=s(_p);Yle=n(nLe,"STRONG",{});var Wnt=s(Yle);o2o=r(Wnt,"unispeech-sat"),Wnt.forEach(t),r2o=r(nLe," \u2014 "),RN=n(nLe,"A",{href:!0});var Qnt=s(RN);t2o=r(Qnt,"Wav2Vec2Processor"),Qnt.forEach(t),a2o=r(nLe," (UniSpeechSat model)"),nLe.forEach(t),n2o=i(_e),bp=n(_e,"LI",{});var sLe=s(bp);Kle=n(sLe,"STRONG",{});var Hnt=s(Kle);s2o=r(Hnt,"vilt"),Hnt.forEach(t),l2o=r(sLe," \u2014 "),PN=n(sLe,"A",{href:!0});var Unt=s(PN);i2o=r(Unt,"ViltProcessor"),Unt.forEach(t),d2o=r(sLe," (ViLT model)"),sLe.forEach(t),c2o=i(_e),vp=n(_e,"LI",{});var lLe=s(vp);Zle=n(lLe,"STRONG",{});var Jnt=s(Zle);f2o=r(Jnt,"vision-text-dual-encoder"),Jnt.forEach(t),m2o=r(lLe," \u2014 "),BN=n(lLe,"A",{href:!0});var Ynt=s(BN);g2o=r(Ynt,"VisionTextDualEncoderProcessor"),Ynt.forEach(t),h2o=r(lLe," (VisionTextDualEncoder model)"),lLe.forEach(t),p2o=i(_e),Fp=n(_e,"LI",{});var iLe=s(Fp);eie=n(iLe,"STRONG",{});var Knt=s(eie);u2o=r(Knt,"wav2vec2"),Knt.forEach(t),_2o=r(iLe," \u2014 "),IN=n(iLe,"A",{href:!0});var Znt=s(IN);b2o=r(Znt,"Wav2Vec2Processor"),Znt.forEach(t),v2o=r(iLe," (Wav2Vec2 model)"),iLe.forEach(t),F2o=i(_e),Tp=n(_e,"LI",{});var dLe=s(Tp);oie=n(dLe,"STRONG",{});var est=s(oie);T2o=r(est,"wav2vec2-conformer"),est.forEach(t),M2o=r(dLe," \u2014 "),NN=n(dLe,"A",{href:!0});var ost=s(NN);E2o=r(ost,"Wav2Vec2Processor"),ost.forEach(t),C2o=r(dLe," (Wav2Vec2-Conformer model)"),dLe.forEach(t),w2o=i(_e),Mp=n(_e,"LI",{});var cLe=s(Mp);rie=n(cLe,"STRONG",{});var rst=s(rie);A2o=r(rst,"wavlm"),rst.forEach(t),L2o=r(cLe," \u2014 "),qN=n(cLe,"A",{href:!0});var tst=s(qN);y2o=r(tst,"Wav2Vec2Processor"),tst.forEach(t),x2o=r(cLe," (WavLM model)"),cLe.forEach(t),_e.forEach(t),$2o=i(ta),T(Ep.$$.fragment,ta),k2o=i(ta),T(Cp.$$.fragment,ta),ta.forEach(t),S2o=i(Hs),wp=n(Hs,"DIV",{class:!0});var iVe=s(wp);T(OA.$$.fragment,iVe),R2o=i(iVe),tie=n(iVe,"P",{});var ast=s(tie);P2o=r(ast,"Register a new processor for this class."),ast.forEach(t),iVe.forEach(t),Hs.forEach(t),tGe=i(f),Pi=n(f,"H2",{class:!0});var dVe=s(Pi);Ap=n(dVe,"A",{id:!0,class:!0,href:!0});var nst=s(Ap);aie=n(nst,"SPAN",{});var sst=s(aie);T(VA.$$.fragment,sst),sst.forEach(t),nst.forEach(t),B2o=i(dVe),nie=n(dVe,"SPAN",{});var lst=s(nie);I2o=r(lst,"AutoModel"),lst.forEach(t),dVe.forEach(t),aGe=i(f),xo=n(f,"DIV",{class:!0});var Us=s(xo);T(XA.$$.fragment,Us),N2o=i(Us),Bi=n(Us,"P",{});var Qee=s(Bi);q2o=r(Qee,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),jN=n(Qee,"A",{href:!0});var ist=s(jN);j2o=r(ist,"from_pretrained()"),ist.forEach(t),D2o=r(Qee," class method or the "),DN=n(Qee,"A",{href:!0});var dst=s(DN);G2o=r(dst,"from_config()"),dst.forEach(t),O2o=r(Qee,` class
method.`),Qee.forEach(t),V2o=i(Us),zA=n(Us,"P",{});var cVe=s(zA);X2o=r(cVe,"This class cannot be instantiated directly using "),sie=n(cVe,"CODE",{});var cst=s(sie);z2o=r(cst,"__init__()"),cst.forEach(t),W2o=r(cVe," (throws an error)."),cVe.forEach(t),Q2o=i(Us),nt=n(Us,"DIV",{class:!0});var v0=s(nt);T(WA.$$.fragment,v0),H2o=i(v0),lie=n(v0,"P",{});var fst=s(lie);U2o=r(fst,"Instantiates one of the base model classes of the library from a configuration."),fst.forEach(t),J2o=i(v0),Ii=n(v0,"P",{});var Hee=s(Ii);Y2o=r(Hee,`Note:
Loading a model from its configuration file does `),iie=n(Hee,"STRONG",{});var mst=s(iie);K2o=r(mst,"not"),mst.forEach(t),Z2o=r(Hee,` load the model weights. It only affects the
model\u2019s configuration. Use `),GN=n(Hee,"A",{href:!0});var gst=s(GN);e1o=r(gst,"from_pretrained()"),gst.forEach(t),o1o=r(Hee," to load the model weights."),Hee.forEach(t),r1o=i(v0),T(Lp.$$.fragment,v0),v0.forEach(t),t1o=i(Us),Je=n(Us,"DIV",{class:!0});var aa=s(Je);T(QA.$$.fragment,aa),a1o=i(aa),die=n(aa,"P",{});var hst=s(die);n1o=r(hst,"Instantiate one of the base model classes of the library from a pretrained model."),hst.forEach(t),s1o=i(aa),Sa=n(aa,"P",{});var F0=s(Sa);l1o=r(F0,"The model class to instantiate is selected based on the "),cie=n(F0,"CODE",{});var pst=s(cie);i1o=r(pst,"model_type"),pst.forEach(t),d1o=r(F0,` property of the config object (either
passed as an argument or loaded from `),fie=n(F0,"CODE",{});var ust=s(fie);c1o=r(ust,"pretrained_model_name_or_path"),ust.forEach(t),f1o=r(F0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mie=n(F0,"CODE",{});var _st=s(mie);m1o=r(_st,"pretrained_model_name_or_path"),_st.forEach(t),g1o=r(F0,":"),F0.forEach(t),h1o=i(aa),x=n(aa,"UL",{});var $=s(x);yp=n($,"LI",{});var fLe=s(yp);gie=n(fLe,"STRONG",{});var bst=s(gie);p1o=r(bst,"albert"),bst.forEach(t),u1o=r(fLe," \u2014 "),ON=n(fLe,"A",{href:!0});var vst=s(ON);_1o=r(vst,"AlbertModel"),vst.forEach(t),b1o=r(fLe," (ALBERT model)"),fLe.forEach(t),v1o=i($),xp=n($,"LI",{});var mLe=s(xp);hie=n(mLe,"STRONG",{});var Fst=s(hie);F1o=r(Fst,"bart"),Fst.forEach(t),T1o=r(mLe," \u2014 "),VN=n(mLe,"A",{href:!0});var Tst=s(VN);M1o=r(Tst,"BartModel"),Tst.forEach(t),E1o=r(mLe," (BART model)"),mLe.forEach(t),C1o=i($),$p=n($,"LI",{});var gLe=s($p);pie=n(gLe,"STRONG",{});var Mst=s(pie);w1o=r(Mst,"beit"),Mst.forEach(t),A1o=r(gLe," \u2014 "),XN=n(gLe,"A",{href:!0});var Est=s(XN);L1o=r(Est,"BeitModel"),Est.forEach(t),y1o=r(gLe," (BEiT model)"),gLe.forEach(t),x1o=i($),kp=n($,"LI",{});var hLe=s(kp);uie=n(hLe,"STRONG",{});var Cst=s(uie);$1o=r(Cst,"bert"),Cst.forEach(t),k1o=r(hLe," \u2014 "),zN=n(hLe,"A",{href:!0});var wst=s(zN);S1o=r(wst,"BertModel"),wst.forEach(t),R1o=r(hLe," (BERT model)"),hLe.forEach(t),P1o=i($),Sp=n($,"LI",{});var pLe=s(Sp);_ie=n(pLe,"STRONG",{});var Ast=s(_ie);B1o=r(Ast,"bert-generation"),Ast.forEach(t),I1o=r(pLe," \u2014 "),WN=n(pLe,"A",{href:!0});var Lst=s(WN);N1o=r(Lst,"BertGenerationEncoder"),Lst.forEach(t),q1o=r(pLe," (Bert Generation model)"),pLe.forEach(t),j1o=i($),Rp=n($,"LI",{});var uLe=s(Rp);bie=n(uLe,"STRONG",{});var yst=s(bie);D1o=r(yst,"big_bird"),yst.forEach(t),G1o=r(uLe," \u2014 "),QN=n(uLe,"A",{href:!0});var xst=s(QN);O1o=r(xst,"BigBirdModel"),xst.forEach(t),V1o=r(uLe," (BigBird model)"),uLe.forEach(t),X1o=i($),Pp=n($,"LI",{});var _Le=s(Pp);vie=n(_Le,"STRONG",{});var $st=s(vie);z1o=r($st,"bigbird_pegasus"),$st.forEach(t),W1o=r(_Le," \u2014 "),HN=n(_Le,"A",{href:!0});var kst=s(HN);Q1o=r(kst,"BigBirdPegasusModel"),kst.forEach(t),H1o=r(_Le," (BigBird-Pegasus model)"),_Le.forEach(t),U1o=i($),Bp=n($,"LI",{});var bLe=s(Bp);Fie=n(bLe,"STRONG",{});var Sst=s(Fie);J1o=r(Sst,"blenderbot"),Sst.forEach(t),Y1o=r(bLe," \u2014 "),UN=n(bLe,"A",{href:!0});var Rst=s(UN);K1o=r(Rst,"BlenderbotModel"),Rst.forEach(t),Z1o=r(bLe," (Blenderbot model)"),bLe.forEach(t),ebo=i($),Ip=n($,"LI",{});var vLe=s(Ip);Tie=n(vLe,"STRONG",{});var Pst=s(Tie);obo=r(Pst,"blenderbot-small"),Pst.forEach(t),rbo=r(vLe," \u2014 "),JN=n(vLe,"A",{href:!0});var Bst=s(JN);tbo=r(Bst,"BlenderbotSmallModel"),Bst.forEach(t),abo=r(vLe," (BlenderbotSmall model)"),vLe.forEach(t),nbo=i($),Np=n($,"LI",{});var FLe=s(Np);Mie=n(FLe,"STRONG",{});var Ist=s(Mie);sbo=r(Ist,"bloom"),Ist.forEach(t),lbo=r(FLe," \u2014 "),YN=n(FLe,"A",{href:!0});var Nst=s(YN);ibo=r(Nst,"BloomModel"),Nst.forEach(t),dbo=r(FLe," (BLOOM model)"),FLe.forEach(t),cbo=i($),qp=n($,"LI",{});var TLe=s(qp);Eie=n(TLe,"STRONG",{});var qst=s(Eie);fbo=r(qst,"camembert"),qst.forEach(t),mbo=r(TLe," \u2014 "),KN=n(TLe,"A",{href:!0});var jst=s(KN);gbo=r(jst,"CamembertModel"),jst.forEach(t),hbo=r(TLe," (CamemBERT model)"),TLe.forEach(t),pbo=i($),jp=n($,"LI",{});var MLe=s(jp);Cie=n(MLe,"STRONG",{});var Dst=s(Cie);ubo=r(Dst,"canine"),Dst.forEach(t),_bo=r(MLe," \u2014 "),ZN=n(MLe,"A",{href:!0});var Gst=s(ZN);bbo=r(Gst,"CanineModel"),Gst.forEach(t),vbo=r(MLe," (CANINE model)"),MLe.forEach(t),Fbo=i($),Dp=n($,"LI",{});var ELe=s(Dp);wie=n(ELe,"STRONG",{});var Ost=s(wie);Tbo=r(Ost,"clip"),Ost.forEach(t),Mbo=r(ELe," \u2014 "),eq=n(ELe,"A",{href:!0});var Vst=s(eq);Ebo=r(Vst,"CLIPModel"),Vst.forEach(t),Cbo=r(ELe," (CLIP model)"),ELe.forEach(t),wbo=i($),Gp=n($,"LI",{});var CLe=s(Gp);Aie=n(CLe,"STRONG",{});var Xst=s(Aie);Abo=r(Xst,"convbert"),Xst.forEach(t),Lbo=r(CLe," \u2014 "),oq=n(CLe,"A",{href:!0});var zst=s(oq);ybo=r(zst,"ConvBertModel"),zst.forEach(t),xbo=r(CLe," (ConvBERT model)"),CLe.forEach(t),$bo=i($),Op=n($,"LI",{});var wLe=s(Op);Lie=n(wLe,"STRONG",{});var Wst=s(Lie);kbo=r(Wst,"convnext"),Wst.forEach(t),Sbo=r(wLe," \u2014 "),rq=n(wLe,"A",{href:!0});var Qst=s(rq);Rbo=r(Qst,"ConvNextModel"),Qst.forEach(t),Pbo=r(wLe," (ConvNeXT model)"),wLe.forEach(t),Bbo=i($),Vp=n($,"LI",{});var ALe=s(Vp);yie=n(ALe,"STRONG",{});var Hst=s(yie);Ibo=r(Hst,"ctrl"),Hst.forEach(t),Nbo=r(ALe," \u2014 "),tq=n(ALe,"A",{href:!0});var Ust=s(tq);qbo=r(Ust,"CTRLModel"),Ust.forEach(t),jbo=r(ALe," (CTRL model)"),ALe.forEach(t),Dbo=i($),Xp=n($,"LI",{});var LLe=s(Xp);xie=n(LLe,"STRONG",{});var Jst=s(xie);Gbo=r(Jst,"cvt"),Jst.forEach(t),Obo=r(LLe," \u2014 "),aq=n(LLe,"A",{href:!0});var Yst=s(aq);Vbo=r(Yst,"CvtModel"),Yst.forEach(t),Xbo=r(LLe," (CvT model)"),LLe.forEach(t),zbo=i($),zp=n($,"LI",{});var yLe=s(zp);$ie=n(yLe,"STRONG",{});var Kst=s($ie);Wbo=r(Kst,"data2vec-audio"),Kst.forEach(t),Qbo=r(yLe," \u2014 "),nq=n(yLe,"A",{href:!0});var Zst=s(nq);Hbo=r(Zst,"Data2VecAudioModel"),Zst.forEach(t),Ubo=r(yLe," (Data2VecAudio model)"),yLe.forEach(t),Jbo=i($),Wp=n($,"LI",{});var xLe=s(Wp);kie=n(xLe,"STRONG",{});var elt=s(kie);Ybo=r(elt,"data2vec-text"),elt.forEach(t),Kbo=r(xLe," \u2014 "),sq=n(xLe,"A",{href:!0});var olt=s(sq);Zbo=r(olt,"Data2VecTextModel"),olt.forEach(t),evo=r(xLe," (Data2VecText model)"),xLe.forEach(t),ovo=i($),Qp=n($,"LI",{});var $Le=s(Qp);Sie=n($Le,"STRONG",{});var rlt=s(Sie);rvo=r(rlt,"data2vec-vision"),rlt.forEach(t),tvo=r($Le," \u2014 "),lq=n($Le,"A",{href:!0});var tlt=s(lq);avo=r(tlt,"Data2VecVisionModel"),tlt.forEach(t),nvo=r($Le," (Data2VecVision model)"),$Le.forEach(t),svo=i($),Hp=n($,"LI",{});var kLe=s(Hp);Rie=n(kLe,"STRONG",{});var alt=s(Rie);lvo=r(alt,"deberta"),alt.forEach(t),ivo=r(kLe," \u2014 "),iq=n(kLe,"A",{href:!0});var nlt=s(iq);dvo=r(nlt,"DebertaModel"),nlt.forEach(t),cvo=r(kLe," (DeBERTa model)"),kLe.forEach(t),fvo=i($),Up=n($,"LI",{});var SLe=s(Up);Pie=n(SLe,"STRONG",{});var slt=s(Pie);mvo=r(slt,"deberta-v2"),slt.forEach(t),gvo=r(SLe," \u2014 "),dq=n(SLe,"A",{href:!0});var llt=s(dq);hvo=r(llt,"DebertaV2Model"),llt.forEach(t),pvo=r(SLe," (DeBERTa-v2 model)"),SLe.forEach(t),uvo=i($),Jp=n($,"LI",{});var RLe=s(Jp);Bie=n(RLe,"STRONG",{});var ilt=s(Bie);_vo=r(ilt,"decision_transformer"),ilt.forEach(t),bvo=r(RLe," \u2014 "),cq=n(RLe,"A",{href:!0});var dlt=s(cq);vvo=r(dlt,"DecisionTransformerModel"),dlt.forEach(t),Fvo=r(RLe," (Decision Transformer model)"),RLe.forEach(t),Tvo=i($),Yp=n($,"LI",{});var PLe=s(Yp);Iie=n(PLe,"STRONG",{});var clt=s(Iie);Mvo=r(clt,"deit"),clt.forEach(t),Evo=r(PLe," \u2014 "),fq=n(PLe,"A",{href:!0});var flt=s(fq);Cvo=r(flt,"DeiTModel"),flt.forEach(t),wvo=r(PLe," (DeiT model)"),PLe.forEach(t),Avo=i($),Kp=n($,"LI",{});var BLe=s(Kp);Nie=n(BLe,"STRONG",{});var mlt=s(Nie);Lvo=r(mlt,"detr"),mlt.forEach(t),yvo=r(BLe," \u2014 "),mq=n(BLe,"A",{href:!0});var glt=s(mq);xvo=r(glt,"DetrModel"),glt.forEach(t),$vo=r(BLe," (DETR model)"),BLe.forEach(t),kvo=i($),Zp=n($,"LI",{});var ILe=s(Zp);qie=n(ILe,"STRONG",{});var hlt=s(qie);Svo=r(hlt,"distilbert"),hlt.forEach(t),Rvo=r(ILe," \u2014 "),gq=n(ILe,"A",{href:!0});var plt=s(gq);Pvo=r(plt,"DistilBertModel"),plt.forEach(t),Bvo=r(ILe," (DistilBERT model)"),ILe.forEach(t),Ivo=i($),eu=n($,"LI",{});var NLe=s(eu);jie=n(NLe,"STRONG",{});var ult=s(jie);Nvo=r(ult,"dpr"),ult.forEach(t),qvo=r(NLe," \u2014 "),hq=n(NLe,"A",{href:!0});var _lt=s(hq);jvo=r(_lt,"DPRQuestionEncoder"),_lt.forEach(t),Dvo=r(NLe," (DPR model)"),NLe.forEach(t),Gvo=i($),ou=n($,"LI",{});var qLe=s(ou);Die=n(qLe,"STRONG",{});var blt=s(Die);Ovo=r(blt,"dpt"),blt.forEach(t),Vvo=r(qLe," \u2014 "),pq=n(qLe,"A",{href:!0});var vlt=s(pq);Xvo=r(vlt,"DPTModel"),vlt.forEach(t),zvo=r(qLe," (DPT model)"),qLe.forEach(t),Wvo=i($),ru=n($,"LI",{});var jLe=s(ru);Gie=n(jLe,"STRONG",{});var Flt=s(Gie);Qvo=r(Flt,"electra"),Flt.forEach(t),Hvo=r(jLe," \u2014 "),uq=n(jLe,"A",{href:!0});var Tlt=s(uq);Uvo=r(Tlt,"ElectraModel"),Tlt.forEach(t),Jvo=r(jLe," (ELECTRA model)"),jLe.forEach(t),Yvo=i($),tu=n($,"LI",{});var DLe=s(tu);Oie=n(DLe,"STRONG",{});var Mlt=s(Oie);Kvo=r(Mlt,"flaubert"),Mlt.forEach(t),Zvo=r(DLe," \u2014 "),_q=n(DLe,"A",{href:!0});var Elt=s(_q);eFo=r(Elt,"FlaubertModel"),Elt.forEach(t),oFo=r(DLe," (FlauBERT model)"),DLe.forEach(t),rFo=i($),au=n($,"LI",{});var GLe=s(au);Vie=n(GLe,"STRONG",{});var Clt=s(Vie);tFo=r(Clt,"flava"),Clt.forEach(t),aFo=r(GLe," \u2014 "),bq=n(GLe,"A",{href:!0});var wlt=s(bq);nFo=r(wlt,"FlavaModel"),wlt.forEach(t),sFo=r(GLe," (FLAVA model)"),GLe.forEach(t),lFo=i($),nu=n($,"LI",{});var OLe=s(nu);Xie=n(OLe,"STRONG",{});var Alt=s(Xie);iFo=r(Alt,"fnet"),Alt.forEach(t),dFo=r(OLe," \u2014 "),vq=n(OLe,"A",{href:!0});var Llt=s(vq);cFo=r(Llt,"FNetModel"),Llt.forEach(t),fFo=r(OLe," (FNet model)"),OLe.forEach(t),mFo=i($),su=n($,"LI",{});var VLe=s(su);zie=n(VLe,"STRONG",{});var ylt=s(zie);gFo=r(ylt,"fsmt"),ylt.forEach(t),hFo=r(VLe," \u2014 "),Fq=n(VLe,"A",{href:!0});var xlt=s(Fq);pFo=r(xlt,"FSMTModel"),xlt.forEach(t),uFo=r(VLe," (FairSeq Machine-Translation model)"),VLe.forEach(t),_Fo=i($),Gs=n($,"LI",{});var jk=s(Gs);Wie=n(jk,"STRONG",{});var $lt=s(Wie);bFo=r($lt,"funnel"),$lt.forEach(t),vFo=r(jk," \u2014 "),Tq=n(jk,"A",{href:!0});var klt=s(Tq);FFo=r(klt,"FunnelModel"),klt.forEach(t),TFo=r(jk," or "),Mq=n(jk,"A",{href:!0});var Slt=s(Mq);MFo=r(Slt,"FunnelBaseModel"),Slt.forEach(t),EFo=r(jk," (Funnel Transformer model)"),jk.forEach(t),CFo=i($),lu=n($,"LI",{});var XLe=s(lu);Qie=n(XLe,"STRONG",{});var Rlt=s(Qie);wFo=r(Rlt,"glpn"),Rlt.forEach(t),AFo=r(XLe," \u2014 "),Eq=n(XLe,"A",{href:!0});var Plt=s(Eq);LFo=r(Plt,"GLPNModel"),Plt.forEach(t),yFo=r(XLe," (GLPN model)"),XLe.forEach(t),xFo=i($),iu=n($,"LI",{});var zLe=s(iu);Hie=n(zLe,"STRONG",{});var Blt=s(Hie);$Fo=r(Blt,"gpt2"),Blt.forEach(t),kFo=r(zLe," \u2014 "),Cq=n(zLe,"A",{href:!0});var Ilt=s(Cq);SFo=r(Ilt,"GPT2Model"),Ilt.forEach(t),RFo=r(zLe," (OpenAI GPT-2 model)"),zLe.forEach(t),PFo=i($),du=n($,"LI",{});var WLe=s(du);Uie=n(WLe,"STRONG",{});var Nlt=s(Uie);BFo=r(Nlt,"gpt_neo"),Nlt.forEach(t),IFo=r(WLe," \u2014 "),wq=n(WLe,"A",{href:!0});var qlt=s(wq);NFo=r(qlt,"GPTNeoModel"),qlt.forEach(t),qFo=r(WLe," (GPT Neo model)"),WLe.forEach(t),jFo=i($),cu=n($,"LI",{});var QLe=s(cu);Jie=n(QLe,"STRONG",{});var jlt=s(Jie);DFo=r(jlt,"gpt_neox"),jlt.forEach(t),GFo=r(QLe," \u2014 "),Aq=n(QLe,"A",{href:!0});var Dlt=s(Aq);OFo=r(Dlt,"GPTNeoXModel"),Dlt.forEach(t),VFo=r(QLe," (GPT NeoX model)"),QLe.forEach(t),XFo=i($),fu=n($,"LI",{});var HLe=s(fu);Yie=n(HLe,"STRONG",{});var Glt=s(Yie);zFo=r(Glt,"gptj"),Glt.forEach(t),WFo=r(HLe," \u2014 "),Lq=n(HLe,"A",{href:!0});var Olt=s(Lq);QFo=r(Olt,"GPTJModel"),Olt.forEach(t),HFo=r(HLe," (GPT-J model)"),HLe.forEach(t),UFo=i($),mu=n($,"LI",{});var ULe=s(mu);Kie=n(ULe,"STRONG",{});var Vlt=s(Kie);JFo=r(Vlt,"hubert"),Vlt.forEach(t),YFo=r(ULe," \u2014 "),yq=n(ULe,"A",{href:!0});var Xlt=s(yq);KFo=r(Xlt,"HubertModel"),Xlt.forEach(t),ZFo=r(ULe," (Hubert model)"),ULe.forEach(t),e6o=i($),gu=n($,"LI",{});var JLe=s(gu);Zie=n(JLe,"STRONG",{});var zlt=s(Zie);o6o=r(zlt,"ibert"),zlt.forEach(t),r6o=r(JLe," \u2014 "),xq=n(JLe,"A",{href:!0});var Wlt=s(xq);t6o=r(Wlt,"IBertModel"),Wlt.forEach(t),a6o=r(JLe," (I-BERT model)"),JLe.forEach(t),n6o=i($),hu=n($,"LI",{});var YLe=s(hu);ede=n(YLe,"STRONG",{});var Qlt=s(ede);s6o=r(Qlt,"imagegpt"),Qlt.forEach(t),l6o=r(YLe," \u2014 "),$q=n(YLe,"A",{href:!0});var Hlt=s($q);i6o=r(Hlt,"ImageGPTModel"),Hlt.forEach(t),d6o=r(YLe," (ImageGPT model)"),YLe.forEach(t),c6o=i($),pu=n($,"LI",{});var KLe=s(pu);ode=n(KLe,"STRONG",{});var Ult=s(ode);f6o=r(Ult,"layoutlm"),Ult.forEach(t),m6o=r(KLe," \u2014 "),kq=n(KLe,"A",{href:!0});var Jlt=s(kq);g6o=r(Jlt,"LayoutLMModel"),Jlt.forEach(t),h6o=r(KLe," (LayoutLM model)"),KLe.forEach(t),p6o=i($),uu=n($,"LI",{});var ZLe=s(uu);rde=n(ZLe,"STRONG",{});var Ylt=s(rde);u6o=r(Ylt,"layoutlmv2"),Ylt.forEach(t),_6o=r(ZLe," \u2014 "),Sq=n(ZLe,"A",{href:!0});var Klt=s(Sq);b6o=r(Klt,"LayoutLMv2Model"),Klt.forEach(t),v6o=r(ZLe," (LayoutLMv2 model)"),ZLe.forEach(t),F6o=i($),_u=n($,"LI",{});var eye=s(_u);tde=n(eye,"STRONG",{});var Zlt=s(tde);T6o=r(Zlt,"layoutlmv3"),Zlt.forEach(t),M6o=r(eye," \u2014 "),Rq=n(eye,"A",{href:!0});var eit=s(Rq);E6o=r(eit,"LayoutLMv3Model"),eit.forEach(t),C6o=r(eye," (LayoutLMv3 model)"),eye.forEach(t),w6o=i($),bu=n($,"LI",{});var oye=s(bu);ade=n(oye,"STRONG",{});var oit=s(ade);A6o=r(oit,"led"),oit.forEach(t),L6o=r(oye," \u2014 "),Pq=n(oye,"A",{href:!0});var rit=s(Pq);y6o=r(rit,"LEDModel"),rit.forEach(t),x6o=r(oye," (LED model)"),oye.forEach(t),$6o=i($),vu=n($,"LI",{});var rye=s(vu);nde=n(rye,"STRONG",{});var tit=s(nde);k6o=r(tit,"levit"),tit.forEach(t),S6o=r(rye," \u2014 "),Bq=n(rye,"A",{href:!0});var ait=s(Bq);R6o=r(ait,"LevitModel"),ait.forEach(t),P6o=r(rye," (LeViT model)"),rye.forEach(t),B6o=i($),Fu=n($,"LI",{});var tye=s(Fu);sde=n(tye,"STRONG",{});var nit=s(sde);I6o=r(nit,"longformer"),nit.forEach(t),N6o=r(tye," \u2014 "),Iq=n(tye,"A",{href:!0});var sit=s(Iq);q6o=r(sit,"LongformerModel"),sit.forEach(t),j6o=r(tye," (Longformer model)"),tye.forEach(t),D6o=i($),Tu=n($,"LI",{});var aye=s(Tu);lde=n(aye,"STRONG",{});var lit=s(lde);G6o=r(lit,"longt5"),lit.forEach(t),O6o=r(aye," \u2014 "),Nq=n(aye,"A",{href:!0});var iit=s(Nq);V6o=r(iit,"LongT5Model"),iit.forEach(t),X6o=r(aye," (LongT5 model)"),aye.forEach(t),z6o=i($),Mu=n($,"LI",{});var nye=s(Mu);ide=n(nye,"STRONG",{});var dit=s(ide);W6o=r(dit,"luke"),dit.forEach(t),Q6o=r(nye," \u2014 "),qq=n(nye,"A",{href:!0});var cit=s(qq);H6o=r(cit,"LukeModel"),cit.forEach(t),U6o=r(nye," (LUKE model)"),nye.forEach(t),J6o=i($),Eu=n($,"LI",{});var sye=s(Eu);dde=n(sye,"STRONG",{});var fit=s(dde);Y6o=r(fit,"lxmert"),fit.forEach(t),K6o=r(sye," \u2014 "),jq=n(sye,"A",{href:!0});var mit=s(jq);Z6o=r(mit,"LxmertModel"),mit.forEach(t),eTo=r(sye," (LXMERT model)"),sye.forEach(t),oTo=i($),Cu=n($,"LI",{});var lye=s(Cu);cde=n(lye,"STRONG",{});var git=s(cde);rTo=r(git,"m2m_100"),git.forEach(t),tTo=r(lye," \u2014 "),Dq=n(lye,"A",{href:!0});var hit=s(Dq);aTo=r(hit,"M2M100Model"),hit.forEach(t),nTo=r(lye," (M2M100 model)"),lye.forEach(t),sTo=i($),wu=n($,"LI",{});var iye=s(wu);fde=n(iye,"STRONG",{});var pit=s(fde);lTo=r(pit,"marian"),pit.forEach(t),iTo=r(iye," \u2014 "),Gq=n(iye,"A",{href:!0});var uit=s(Gq);dTo=r(uit,"MarianModel"),uit.forEach(t),cTo=r(iye," (Marian model)"),iye.forEach(t),fTo=i($),Au=n($,"LI",{});var dye=s(Au);mde=n(dye,"STRONG",{});var _it=s(mde);mTo=r(_it,"maskformer"),_it.forEach(t),gTo=r(dye," \u2014 "),Oq=n(dye,"A",{href:!0});var bit=s(Oq);hTo=r(bit,"MaskFormerModel"),bit.forEach(t),pTo=r(dye," (MaskFormer model)"),dye.forEach(t),uTo=i($),Lu=n($,"LI",{});var cye=s(Lu);gde=n(cye,"STRONG",{});var vit=s(gde);_To=r(vit,"mbart"),vit.forEach(t),bTo=r(cye," \u2014 "),Vq=n(cye,"A",{href:!0});var Fit=s(Vq);vTo=r(Fit,"MBartModel"),Fit.forEach(t),FTo=r(cye," (mBART model)"),cye.forEach(t),TTo=i($),yu=n($,"LI",{});var fye=s(yu);hde=n(fye,"STRONG",{});var Tit=s(hde);MTo=r(Tit,"mctct"),Tit.forEach(t),ETo=r(fye," \u2014 "),Xq=n(fye,"A",{href:!0});var Mit=s(Xq);CTo=r(Mit,"MCTCTModel"),Mit.forEach(t),wTo=r(fye," (M-CTC-T model)"),fye.forEach(t),ATo=i($),xu=n($,"LI",{});var mye=s(xu);pde=n(mye,"STRONG",{});var Eit=s(pde);LTo=r(Eit,"megatron-bert"),Eit.forEach(t),yTo=r(mye," \u2014 "),zq=n(mye,"A",{href:!0});var Cit=s(zq);xTo=r(Cit,"MegatronBertModel"),Cit.forEach(t),$To=r(mye," (Megatron-BERT model)"),mye.forEach(t),kTo=i($),$u=n($,"LI",{});var gye=s($u);ude=n(gye,"STRONG",{});var wit=s(ude);STo=r(wit,"mobilebert"),wit.forEach(t),RTo=r(gye," \u2014 "),Wq=n(gye,"A",{href:!0});var Ait=s(Wq);PTo=r(Ait,"MobileBertModel"),Ait.forEach(t),BTo=r(gye," (MobileBERT model)"),gye.forEach(t),ITo=i($),ku=n($,"LI",{});var hye=s(ku);_de=n(hye,"STRONG",{});var Lit=s(_de);NTo=r(Lit,"mpnet"),Lit.forEach(t),qTo=r(hye," \u2014 "),Qq=n(hye,"A",{href:!0});var yit=s(Qq);jTo=r(yit,"MPNetModel"),yit.forEach(t),DTo=r(hye," (MPNet model)"),hye.forEach(t),GTo=i($),Su=n($,"LI",{});var pye=s(Su);bde=n(pye,"STRONG",{});var xit=s(bde);OTo=r(xit,"mt5"),xit.forEach(t),VTo=r(pye," \u2014 "),Hq=n(pye,"A",{href:!0});var $it=s(Hq);XTo=r($it,"MT5Model"),$it.forEach(t),zTo=r(pye," (MT5 model)"),pye.forEach(t),WTo=i($),Ru=n($,"LI",{});var uye=s(Ru);vde=n(uye,"STRONG",{});var kit=s(vde);QTo=r(kit,"nystromformer"),kit.forEach(t),HTo=r(uye," \u2014 "),Uq=n(uye,"A",{href:!0});var Sit=s(Uq);UTo=r(Sit,"NystromformerModel"),Sit.forEach(t),JTo=r(uye," (Nystr\xF6mformer model)"),uye.forEach(t),YTo=i($),Pu=n($,"LI",{});var _ye=s(Pu);Fde=n(_ye,"STRONG",{});var Rit=s(Fde);KTo=r(Rit,"openai-gpt"),Rit.forEach(t),ZTo=r(_ye," \u2014 "),Jq=n(_ye,"A",{href:!0});var Pit=s(Jq);e7o=r(Pit,"OpenAIGPTModel"),Pit.forEach(t),o7o=r(_ye," (OpenAI GPT model)"),_ye.forEach(t),r7o=i($),Bu=n($,"LI",{});var bye=s(Bu);Tde=n(bye,"STRONG",{});var Bit=s(Tde);t7o=r(Bit,"opt"),Bit.forEach(t),a7o=r(bye," \u2014 "),Yq=n(bye,"A",{href:!0});var Iit=s(Yq);n7o=r(Iit,"OPTModel"),Iit.forEach(t),s7o=r(bye," (OPT model)"),bye.forEach(t),l7o=i($),Iu=n($,"LI",{});var vye=s(Iu);Mde=n(vye,"STRONG",{});var Nit=s(Mde);i7o=r(Nit,"pegasus"),Nit.forEach(t),d7o=r(vye," \u2014 "),Kq=n(vye,"A",{href:!0});var qit=s(Kq);c7o=r(qit,"PegasusModel"),qit.forEach(t),f7o=r(vye," (Pegasus model)"),vye.forEach(t),m7o=i($),Nu=n($,"LI",{});var Fye=s(Nu);Ede=n(Fye,"STRONG",{});var jit=s(Ede);g7o=r(jit,"perceiver"),jit.forEach(t),h7o=r(Fye," \u2014 "),Zq=n(Fye,"A",{href:!0});var Dit=s(Zq);p7o=r(Dit,"PerceiverModel"),Dit.forEach(t),u7o=r(Fye," (Perceiver model)"),Fye.forEach(t),_7o=i($),qu=n($,"LI",{});var Tye=s(qu);Cde=n(Tye,"STRONG",{});var Git=s(Cde);b7o=r(Git,"plbart"),Git.forEach(t),v7o=r(Tye," \u2014 "),ej=n(Tye,"A",{href:!0});var Oit=s(ej);F7o=r(Oit,"PLBartModel"),Oit.forEach(t),T7o=r(Tye," (PLBart model)"),Tye.forEach(t),M7o=i($),ju=n($,"LI",{});var Mye=s(ju);wde=n(Mye,"STRONG",{});var Vit=s(wde);E7o=r(Vit,"poolformer"),Vit.forEach(t),C7o=r(Mye," \u2014 "),oj=n(Mye,"A",{href:!0});var Xit=s(oj);w7o=r(Xit,"PoolFormerModel"),Xit.forEach(t),A7o=r(Mye," (PoolFormer model)"),Mye.forEach(t),L7o=i($),Du=n($,"LI",{});var Eye=s(Du);Ade=n(Eye,"STRONG",{});var zit=s(Ade);y7o=r(zit,"prophetnet"),zit.forEach(t),x7o=r(Eye," \u2014 "),rj=n(Eye,"A",{href:!0});var Wit=s(rj);$7o=r(Wit,"ProphetNetModel"),Wit.forEach(t),k7o=r(Eye," (ProphetNet model)"),Eye.forEach(t),S7o=i($),Gu=n($,"LI",{});var Cye=s(Gu);Lde=n(Cye,"STRONG",{});var Qit=s(Lde);R7o=r(Qit,"qdqbert"),Qit.forEach(t),P7o=r(Cye," \u2014 "),tj=n(Cye,"A",{href:!0});var Hit=s(tj);B7o=r(Hit,"QDQBertModel"),Hit.forEach(t),I7o=r(Cye," (QDQBert model)"),Cye.forEach(t),N7o=i($),Ou=n($,"LI",{});var wye=s(Ou);yde=n(wye,"STRONG",{});var Uit=s(yde);q7o=r(Uit,"reformer"),Uit.forEach(t),j7o=r(wye," \u2014 "),aj=n(wye,"A",{href:!0});var Jit=s(aj);D7o=r(Jit,"ReformerModel"),Jit.forEach(t),G7o=r(wye," (Reformer model)"),wye.forEach(t),O7o=i($),Vu=n($,"LI",{});var Aye=s(Vu);xde=n(Aye,"STRONG",{});var Yit=s(xde);V7o=r(Yit,"regnet"),Yit.forEach(t),X7o=r(Aye," \u2014 "),nj=n(Aye,"A",{href:!0});var Kit=s(nj);z7o=r(Kit,"RegNetModel"),Kit.forEach(t),W7o=r(Aye," (RegNet model)"),Aye.forEach(t),Q7o=i($),Xu=n($,"LI",{});var Lye=s(Xu);$de=n(Lye,"STRONG",{});var Zit=s($de);H7o=r(Zit,"rembert"),Zit.forEach(t),U7o=r(Lye," \u2014 "),sj=n(Lye,"A",{href:!0});var edt=s(sj);J7o=r(edt,"RemBertModel"),edt.forEach(t),Y7o=r(Lye," (RemBERT model)"),Lye.forEach(t),K7o=i($),zu=n($,"LI",{});var yye=s(zu);kde=n(yye,"STRONG",{});var odt=s(kde);Z7o=r(odt,"resnet"),odt.forEach(t),e9o=r(yye," \u2014 "),lj=n(yye,"A",{href:!0});var rdt=s(lj);o9o=r(rdt,"ResNetModel"),rdt.forEach(t),r9o=r(yye," (ResNet model)"),yye.forEach(t),t9o=i($),Wu=n($,"LI",{});var xye=s(Wu);Sde=n(xye,"STRONG",{});var tdt=s(Sde);a9o=r(tdt,"retribert"),tdt.forEach(t),n9o=r(xye," \u2014 "),ij=n(xye,"A",{href:!0});var adt=s(ij);s9o=r(adt,"RetriBertModel"),adt.forEach(t),l9o=r(xye," (RetriBERT model)"),xye.forEach(t),i9o=i($),Qu=n($,"LI",{});var $ye=s(Qu);Rde=n($ye,"STRONG",{});var ndt=s(Rde);d9o=r(ndt,"roberta"),ndt.forEach(t),c9o=r($ye," \u2014 "),dj=n($ye,"A",{href:!0});var sdt=s(dj);f9o=r(sdt,"RobertaModel"),sdt.forEach(t),m9o=r($ye," (RoBERTa model)"),$ye.forEach(t),g9o=i($),Hu=n($,"LI",{});var kye=s(Hu);Pde=n(kye,"STRONG",{});var ldt=s(Pde);h9o=r(ldt,"roformer"),ldt.forEach(t),p9o=r(kye," \u2014 "),cj=n(kye,"A",{href:!0});var idt=s(cj);u9o=r(idt,"RoFormerModel"),idt.forEach(t),_9o=r(kye," (RoFormer model)"),kye.forEach(t),b9o=i($),Uu=n($,"LI",{});var Sye=s(Uu);Bde=n(Sye,"STRONG",{});var ddt=s(Bde);v9o=r(ddt,"segformer"),ddt.forEach(t),F9o=r(Sye," \u2014 "),fj=n(Sye,"A",{href:!0});var cdt=s(fj);T9o=r(cdt,"SegformerModel"),cdt.forEach(t),M9o=r(Sye," (SegFormer model)"),Sye.forEach(t),E9o=i($),Ju=n($,"LI",{});var Rye=s(Ju);Ide=n(Rye,"STRONG",{});var fdt=s(Ide);C9o=r(fdt,"sew"),fdt.forEach(t),w9o=r(Rye," \u2014 "),mj=n(Rye,"A",{href:!0});var mdt=s(mj);A9o=r(mdt,"SEWModel"),mdt.forEach(t),L9o=r(Rye," (SEW model)"),Rye.forEach(t),y9o=i($),Yu=n($,"LI",{});var Pye=s(Yu);Nde=n(Pye,"STRONG",{});var gdt=s(Nde);x9o=r(gdt,"sew-d"),gdt.forEach(t),$9o=r(Pye," \u2014 "),gj=n(Pye,"A",{href:!0});var hdt=s(gj);k9o=r(hdt,"SEWDModel"),hdt.forEach(t),S9o=r(Pye," (SEW-D model)"),Pye.forEach(t),R9o=i($),Ku=n($,"LI",{});var Bye=s(Ku);qde=n(Bye,"STRONG",{});var pdt=s(qde);P9o=r(pdt,"speech_to_text"),pdt.forEach(t),B9o=r(Bye," \u2014 "),hj=n(Bye,"A",{href:!0});var udt=s(hj);I9o=r(udt,"Speech2TextModel"),udt.forEach(t),N9o=r(Bye," (Speech2Text model)"),Bye.forEach(t),q9o=i($),Zu=n($,"LI",{});var Iye=s(Zu);jde=n(Iye,"STRONG",{});var _dt=s(jde);j9o=r(_dt,"splinter"),_dt.forEach(t),D9o=r(Iye," \u2014 "),pj=n(Iye,"A",{href:!0});var bdt=s(pj);G9o=r(bdt,"SplinterModel"),bdt.forEach(t),O9o=r(Iye," (Splinter model)"),Iye.forEach(t),V9o=i($),e_=n($,"LI",{});var Nye=s(e_);Dde=n(Nye,"STRONG",{});var vdt=s(Dde);X9o=r(vdt,"squeezebert"),vdt.forEach(t),z9o=r(Nye," \u2014 "),uj=n(Nye,"A",{href:!0});var Fdt=s(uj);W9o=r(Fdt,"SqueezeBertModel"),Fdt.forEach(t),Q9o=r(Nye," (SqueezeBERT model)"),Nye.forEach(t),H9o=i($),o_=n($,"LI",{});var qye=s(o_);Gde=n(qye,"STRONG",{});var Tdt=s(Gde);U9o=r(Tdt,"swin"),Tdt.forEach(t),J9o=r(qye," \u2014 "),_j=n(qye,"A",{href:!0});var Mdt=s(_j);Y9o=r(Mdt,"SwinModel"),Mdt.forEach(t),K9o=r(qye," (Swin Transformer model)"),qye.forEach(t),Z9o=i($),r_=n($,"LI",{});var jye=s(r_);Ode=n(jye,"STRONG",{});var Edt=s(Ode);eMo=r(Edt,"t5"),Edt.forEach(t),oMo=r(jye," \u2014 "),bj=n(jye,"A",{href:!0});var Cdt=s(bj);rMo=r(Cdt,"T5Model"),Cdt.forEach(t),tMo=r(jye," (T5 model)"),jye.forEach(t),aMo=i($),t_=n($,"LI",{});var Dye=s(t_);Vde=n(Dye,"STRONG",{});var wdt=s(Vde);nMo=r(wdt,"tapas"),wdt.forEach(t),sMo=r(Dye," \u2014 "),vj=n(Dye,"A",{href:!0});var Adt=s(vj);lMo=r(Adt,"TapasModel"),Adt.forEach(t),iMo=r(Dye," (TAPAS model)"),Dye.forEach(t),dMo=i($),a_=n($,"LI",{});var Gye=s(a_);Xde=n(Gye,"STRONG",{});var Ldt=s(Xde);cMo=r(Ldt,"trajectory_transformer"),Ldt.forEach(t),fMo=r(Gye," \u2014 "),Fj=n(Gye,"A",{href:!0});var ydt=s(Fj);mMo=r(ydt,"TrajectoryTransformerModel"),ydt.forEach(t),gMo=r(Gye," (Trajectory Transformer model)"),Gye.forEach(t),hMo=i($),n_=n($,"LI",{});var Oye=s(n_);zde=n(Oye,"STRONG",{});var xdt=s(zde);pMo=r(xdt,"transfo-xl"),xdt.forEach(t),uMo=r(Oye," \u2014 "),Tj=n(Oye,"A",{href:!0});var $dt=s(Tj);_Mo=r($dt,"TransfoXLModel"),$dt.forEach(t),bMo=r(Oye," (Transformer-XL model)"),Oye.forEach(t),vMo=i($),s_=n($,"LI",{});var Vye=s(s_);Wde=n(Vye,"STRONG",{});var kdt=s(Wde);FMo=r(kdt,"unispeech"),kdt.forEach(t),TMo=r(Vye," \u2014 "),Mj=n(Vye,"A",{href:!0});var Sdt=s(Mj);MMo=r(Sdt,"UniSpeechModel"),Sdt.forEach(t),EMo=r(Vye," (UniSpeech model)"),Vye.forEach(t),CMo=i($),l_=n($,"LI",{});var Xye=s(l_);Qde=n(Xye,"STRONG",{});var Rdt=s(Qde);wMo=r(Rdt,"unispeech-sat"),Rdt.forEach(t),AMo=r(Xye," \u2014 "),Ej=n(Xye,"A",{href:!0});var Pdt=s(Ej);LMo=r(Pdt,"UniSpeechSatModel"),Pdt.forEach(t),yMo=r(Xye," (UniSpeechSat model)"),Xye.forEach(t),xMo=i($),i_=n($,"LI",{});var zye=s(i_);Hde=n(zye,"STRONG",{});var Bdt=s(Hde);$Mo=r(Bdt,"van"),Bdt.forEach(t),kMo=r(zye," \u2014 "),Cj=n(zye,"A",{href:!0});var Idt=s(Cj);SMo=r(Idt,"VanModel"),Idt.forEach(t),RMo=r(zye," (VAN model)"),zye.forEach(t),PMo=i($),d_=n($,"LI",{});var Wye=s(d_);Ude=n(Wye,"STRONG",{});var Ndt=s(Ude);BMo=r(Ndt,"vilt"),Ndt.forEach(t),IMo=r(Wye," \u2014 "),wj=n(Wye,"A",{href:!0});var qdt=s(wj);NMo=r(qdt,"ViltModel"),qdt.forEach(t),qMo=r(Wye," (ViLT model)"),Wye.forEach(t),jMo=i($),c_=n($,"LI",{});var Qye=s(c_);Jde=n(Qye,"STRONG",{});var jdt=s(Jde);DMo=r(jdt,"vision-text-dual-encoder"),jdt.forEach(t),GMo=r(Qye," \u2014 "),Aj=n(Qye,"A",{href:!0});var Ddt=s(Aj);OMo=r(Ddt,"VisionTextDualEncoderModel"),Ddt.forEach(t),VMo=r(Qye," (VisionTextDualEncoder model)"),Qye.forEach(t),XMo=i($),f_=n($,"LI",{});var Hye=s(f_);Yde=n(Hye,"STRONG",{});var Gdt=s(Yde);zMo=r(Gdt,"visual_bert"),Gdt.forEach(t),WMo=r(Hye," \u2014 "),Lj=n(Hye,"A",{href:!0});var Odt=s(Lj);QMo=r(Odt,"VisualBertModel"),Odt.forEach(t),HMo=r(Hye," (VisualBERT model)"),Hye.forEach(t),UMo=i($),m_=n($,"LI",{});var Uye=s(m_);Kde=n(Uye,"STRONG",{});var Vdt=s(Kde);JMo=r(Vdt,"vit"),Vdt.forEach(t),YMo=r(Uye," \u2014 "),yj=n(Uye,"A",{href:!0});var Xdt=s(yj);KMo=r(Xdt,"ViTModel"),Xdt.forEach(t),ZMo=r(Uye," (ViT model)"),Uye.forEach(t),e4o=i($),g_=n($,"LI",{});var Jye=s(g_);Zde=n(Jye,"STRONG",{});var zdt=s(Zde);o4o=r(zdt,"vit_mae"),zdt.forEach(t),r4o=r(Jye," \u2014 "),xj=n(Jye,"A",{href:!0});var Wdt=s(xj);t4o=r(Wdt,"ViTMAEModel"),Wdt.forEach(t),a4o=r(Jye," (ViTMAE model)"),Jye.forEach(t),n4o=i($),h_=n($,"LI",{});var Yye=s(h_);ece=n(Yye,"STRONG",{});var Qdt=s(ece);s4o=r(Qdt,"wav2vec2"),Qdt.forEach(t),l4o=r(Yye," \u2014 "),$j=n(Yye,"A",{href:!0});var Hdt=s($j);i4o=r(Hdt,"Wav2Vec2Model"),Hdt.forEach(t),d4o=r(Yye," (Wav2Vec2 model)"),Yye.forEach(t),c4o=i($),p_=n($,"LI",{});var Kye=s(p_);oce=n(Kye,"STRONG",{});var Udt=s(oce);f4o=r(Udt,"wav2vec2-conformer"),Udt.forEach(t),m4o=r(Kye," \u2014 "),kj=n(Kye,"A",{href:!0});var Jdt=s(kj);g4o=r(Jdt,"Wav2Vec2ConformerModel"),Jdt.forEach(t),h4o=r(Kye," (Wav2Vec2-Conformer model)"),Kye.forEach(t),p4o=i($),u_=n($,"LI",{});var Zye=s(u_);rce=n(Zye,"STRONG",{});var Ydt=s(rce);u4o=r(Ydt,"wavlm"),Ydt.forEach(t),_4o=r(Zye," \u2014 "),Sj=n(Zye,"A",{href:!0});var Kdt=s(Sj);b4o=r(Kdt,"WavLMModel"),Kdt.forEach(t),v4o=r(Zye," (WavLM model)"),Zye.forEach(t),F4o=i($),__=n($,"LI",{});var e8e=s(__);tce=n(e8e,"STRONG",{});var Zdt=s(tce);T4o=r(Zdt,"xglm"),Zdt.forEach(t),M4o=r(e8e," \u2014 "),Rj=n(e8e,"A",{href:!0});var ect=s(Rj);E4o=r(ect,"XGLMModel"),ect.forEach(t),C4o=r(e8e," (XGLM model)"),e8e.forEach(t),w4o=i($),b_=n($,"LI",{});var o8e=s(b_);ace=n(o8e,"STRONG",{});var oct=s(ace);A4o=r(oct,"xlm"),oct.forEach(t),L4o=r(o8e," \u2014 "),Pj=n(o8e,"A",{href:!0});var rct=s(Pj);y4o=r(rct,"XLMModel"),rct.forEach(t),x4o=r(o8e," (XLM model)"),o8e.forEach(t),$4o=i($),v_=n($,"LI",{});var r8e=s(v_);nce=n(r8e,"STRONG",{});var tct=s(nce);k4o=r(tct,"xlm-prophetnet"),tct.forEach(t),S4o=r(r8e," \u2014 "),Bj=n(r8e,"A",{href:!0});var act=s(Bj);R4o=r(act,"XLMProphetNetModel"),act.forEach(t),P4o=r(r8e," (XLM-ProphetNet model)"),r8e.forEach(t),B4o=i($),F_=n($,"LI",{});var t8e=s(F_);sce=n(t8e,"STRONG",{});var nct=s(sce);I4o=r(nct,"xlm-roberta"),nct.forEach(t),N4o=r(t8e," \u2014 "),Ij=n(t8e,"A",{href:!0});var sct=s(Ij);q4o=r(sct,"XLMRobertaModel"),sct.forEach(t),j4o=r(t8e," (XLM-RoBERTa model)"),t8e.forEach(t),D4o=i($),T_=n($,"LI",{});var a8e=s(T_);lce=n(a8e,"STRONG",{});var lct=s(lce);G4o=r(lct,"xlm-roberta-xl"),lct.forEach(t),O4o=r(a8e," \u2014 "),Nj=n(a8e,"A",{href:!0});var ict=s(Nj);V4o=r(ict,"XLMRobertaXLModel"),ict.forEach(t),X4o=r(a8e," (XLM-RoBERTa-XL model)"),a8e.forEach(t),z4o=i($),M_=n($,"LI",{});var n8e=s(M_);ice=n(n8e,"STRONG",{});var dct=s(ice);W4o=r(dct,"xlnet"),dct.forEach(t),Q4o=r(n8e," \u2014 "),qj=n(n8e,"A",{href:!0});var cct=s(qj);H4o=r(cct,"XLNetModel"),cct.forEach(t),U4o=r(n8e," (XLNet model)"),n8e.forEach(t),J4o=i($),E_=n($,"LI",{});var s8e=s(E_);dce=n(s8e,"STRONG",{});var fct=s(dce);Y4o=r(fct,"yolos"),fct.forEach(t),K4o=r(s8e," \u2014 "),jj=n(s8e,"A",{href:!0});var mct=s(jj);Z4o=r(mct,"YolosModel"),mct.forEach(t),eEo=r(s8e," (YOLOS model)"),s8e.forEach(t),oEo=i($),C_=n($,"LI",{});var l8e=s(C_);cce=n(l8e,"STRONG",{});var gct=s(cce);rEo=r(gct,"yoso"),gct.forEach(t),tEo=r(l8e," \u2014 "),Dj=n(l8e,"A",{href:!0});var hct=s(Dj);aEo=r(hct,"YosoModel"),hct.forEach(t),nEo=r(l8e," (YOSO model)"),l8e.forEach(t),$.forEach(t),sEo=i(aa),w_=n(aa,"P",{});var i8e=s(w_);lEo=r(i8e,"The model is set in evaluation mode by default using "),fce=n(i8e,"CODE",{});var pct=s(fce);iEo=r(pct,"model.eval()"),pct.forEach(t),dEo=r(i8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mce=n(i8e,"CODE",{});var uct=s(mce);cEo=r(uct,"model.train()"),uct.forEach(t),i8e.forEach(t),fEo=i(aa),T(A_.$$.fragment,aa),aa.forEach(t),Us.forEach(t),nGe=i(f),Ni=n(f,"H2",{class:!0});var fVe=s(Ni);L_=n(fVe,"A",{id:!0,class:!0,href:!0});var _ct=s(L_);gce=n(_ct,"SPAN",{});var bct=s(gce);T(HA.$$.fragment,bct),bct.forEach(t),_ct.forEach(t),mEo=i(fVe),hce=n(fVe,"SPAN",{});var vct=s(hce);gEo=r(vct,"AutoModelForPreTraining"),vct.forEach(t),fVe.forEach(t),sGe=i(f),$o=n(f,"DIV",{class:!0});var Js=s($o);T(UA.$$.fragment,Js),hEo=i(Js),qi=n(Js,"P",{});var Uee=s(qi);pEo=r(Uee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Gj=n(Uee,"A",{href:!0});var Fct=s(Gj);uEo=r(Fct,"from_pretrained()"),Fct.forEach(t),_Eo=r(Uee," class method or the "),Oj=n(Uee,"A",{href:!0});var Tct=s(Oj);bEo=r(Tct,"from_config()"),Tct.forEach(t),vEo=r(Uee,` class
method.`),Uee.forEach(t),FEo=i(Js),JA=n(Js,"P",{});var mVe=s(JA);TEo=r(mVe,"This class cannot be instantiated directly using "),pce=n(mVe,"CODE",{});var Mct=s(pce);MEo=r(Mct,"__init__()"),Mct.forEach(t),EEo=r(mVe," (throws an error)."),mVe.forEach(t),CEo=i(Js),st=n(Js,"DIV",{class:!0});var T0=s(st);T(YA.$$.fragment,T0),wEo=i(T0),uce=n(T0,"P",{});var Ect=s(uce);AEo=r(Ect,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Ect.forEach(t),LEo=i(T0),ji=n(T0,"P",{});var Jee=s(ji);yEo=r(Jee,`Note:
Loading a model from its configuration file does `),_ce=n(Jee,"STRONG",{});var Cct=s(_ce);xEo=r(Cct,"not"),Cct.forEach(t),$Eo=r(Jee,` load the model weights. It only affects the
model\u2019s configuration. Use `),Vj=n(Jee,"A",{href:!0});var wct=s(Vj);kEo=r(wct,"from_pretrained()"),wct.forEach(t),SEo=r(Jee," to load the model weights."),Jee.forEach(t),REo=i(T0),T(y_.$$.fragment,T0),T0.forEach(t),PEo=i(Js),Ye=n(Js,"DIV",{class:!0});var na=s(Ye);T(KA.$$.fragment,na),BEo=i(na),bce=n(na,"P",{});var Act=s(bce);IEo=r(Act,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Act.forEach(t),NEo=i(na),Ra=n(na,"P",{});var M0=s(Ra);qEo=r(M0,"The model class to instantiate is selected based on the "),vce=n(M0,"CODE",{});var Lct=s(vce);jEo=r(Lct,"model_type"),Lct.forEach(t),DEo=r(M0,` property of the config object (either
passed as an argument or loaded from `),Fce=n(M0,"CODE",{});var yct=s(Fce);GEo=r(yct,"pretrained_model_name_or_path"),yct.forEach(t),OEo=r(M0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tce=n(M0,"CODE",{});var xct=s(Tce);VEo=r(xct,"pretrained_model_name_or_path"),xct.forEach(t),XEo=r(M0,":"),M0.forEach(t),zEo=i(na),G=n(na,"UL",{});var O=s(G);x_=n(O,"LI",{});var d8e=s(x_);Mce=n(d8e,"STRONG",{});var $ct=s(Mce);WEo=r($ct,"albert"),$ct.forEach(t),QEo=r(d8e," \u2014 "),Xj=n(d8e,"A",{href:!0});var kct=s(Xj);HEo=r(kct,"AlbertForPreTraining"),kct.forEach(t),UEo=r(d8e," (ALBERT model)"),d8e.forEach(t),JEo=i(O),$_=n(O,"LI",{});var c8e=s($_);Ece=n(c8e,"STRONG",{});var Sct=s(Ece);YEo=r(Sct,"bart"),Sct.forEach(t),KEo=r(c8e," \u2014 "),zj=n(c8e,"A",{href:!0});var Rct=s(zj);ZEo=r(Rct,"BartForConditionalGeneration"),Rct.forEach(t),eCo=r(c8e," (BART model)"),c8e.forEach(t),oCo=i(O),k_=n(O,"LI",{});var f8e=s(k_);Cce=n(f8e,"STRONG",{});var Pct=s(Cce);rCo=r(Pct,"bert"),Pct.forEach(t),tCo=r(f8e," \u2014 "),Wj=n(f8e,"A",{href:!0});var Bct=s(Wj);aCo=r(Bct,"BertForPreTraining"),Bct.forEach(t),nCo=r(f8e," (BERT model)"),f8e.forEach(t),sCo=i(O),S_=n(O,"LI",{});var m8e=s(S_);wce=n(m8e,"STRONG",{});var Ict=s(wce);lCo=r(Ict,"big_bird"),Ict.forEach(t),iCo=r(m8e," \u2014 "),Qj=n(m8e,"A",{href:!0});var Nct=s(Qj);dCo=r(Nct,"BigBirdForPreTraining"),Nct.forEach(t),cCo=r(m8e," (BigBird model)"),m8e.forEach(t),fCo=i(O),R_=n(O,"LI",{});var g8e=s(R_);Ace=n(g8e,"STRONG",{});var qct=s(Ace);mCo=r(qct,"bloom"),qct.forEach(t),gCo=r(g8e," \u2014 "),Hj=n(g8e,"A",{href:!0});var jct=s(Hj);hCo=r(jct,"BloomForCausalLM"),jct.forEach(t),pCo=r(g8e," (BLOOM model)"),g8e.forEach(t),uCo=i(O),P_=n(O,"LI",{});var h8e=s(P_);Lce=n(h8e,"STRONG",{});var Dct=s(Lce);_Co=r(Dct,"camembert"),Dct.forEach(t),bCo=r(h8e," \u2014 "),Uj=n(h8e,"A",{href:!0});var Gct=s(Uj);vCo=r(Gct,"CamembertForMaskedLM"),Gct.forEach(t),FCo=r(h8e," (CamemBERT model)"),h8e.forEach(t),TCo=i(O),B_=n(O,"LI",{});var p8e=s(B_);yce=n(p8e,"STRONG",{});var Oct=s(yce);MCo=r(Oct,"ctrl"),Oct.forEach(t),ECo=r(p8e," \u2014 "),Jj=n(p8e,"A",{href:!0});var Vct=s(Jj);CCo=r(Vct,"CTRLLMHeadModel"),Vct.forEach(t),wCo=r(p8e," (CTRL model)"),p8e.forEach(t),ACo=i(O),I_=n(O,"LI",{});var u8e=s(I_);xce=n(u8e,"STRONG",{});var Xct=s(xce);LCo=r(Xct,"data2vec-text"),Xct.forEach(t),yCo=r(u8e," \u2014 "),Yj=n(u8e,"A",{href:!0});var zct=s(Yj);xCo=r(zct,"Data2VecTextForMaskedLM"),zct.forEach(t),$Co=r(u8e," (Data2VecText model)"),u8e.forEach(t),kCo=i(O),N_=n(O,"LI",{});var _8e=s(N_);$ce=n(_8e,"STRONG",{});var Wct=s($ce);SCo=r(Wct,"deberta"),Wct.forEach(t),RCo=r(_8e," \u2014 "),Kj=n(_8e,"A",{href:!0});var Qct=s(Kj);PCo=r(Qct,"DebertaForMaskedLM"),Qct.forEach(t),BCo=r(_8e," (DeBERTa model)"),_8e.forEach(t),ICo=i(O),q_=n(O,"LI",{});var b8e=s(q_);kce=n(b8e,"STRONG",{});var Hct=s(kce);NCo=r(Hct,"deberta-v2"),Hct.forEach(t),qCo=r(b8e," \u2014 "),Zj=n(b8e,"A",{href:!0});var Uct=s(Zj);jCo=r(Uct,"DebertaV2ForMaskedLM"),Uct.forEach(t),DCo=r(b8e," (DeBERTa-v2 model)"),b8e.forEach(t),GCo=i(O),j_=n(O,"LI",{});var v8e=s(j_);Sce=n(v8e,"STRONG",{});var Jct=s(Sce);OCo=r(Jct,"distilbert"),Jct.forEach(t),VCo=r(v8e," \u2014 "),eD=n(v8e,"A",{href:!0});var Yct=s(eD);XCo=r(Yct,"DistilBertForMaskedLM"),Yct.forEach(t),zCo=r(v8e," (DistilBERT model)"),v8e.forEach(t),WCo=i(O),D_=n(O,"LI",{});var F8e=s(D_);Rce=n(F8e,"STRONG",{});var Kct=s(Rce);QCo=r(Kct,"electra"),Kct.forEach(t),HCo=r(F8e," \u2014 "),oD=n(F8e,"A",{href:!0});var Zct=s(oD);UCo=r(Zct,"ElectraForPreTraining"),Zct.forEach(t),JCo=r(F8e," (ELECTRA model)"),F8e.forEach(t),YCo=i(O),G_=n(O,"LI",{});var T8e=s(G_);Pce=n(T8e,"STRONG",{});var eft=s(Pce);KCo=r(eft,"flaubert"),eft.forEach(t),ZCo=r(T8e," \u2014 "),rD=n(T8e,"A",{href:!0});var oft=s(rD);e5o=r(oft,"FlaubertWithLMHeadModel"),oft.forEach(t),o5o=r(T8e," (FlauBERT model)"),T8e.forEach(t),r5o=i(O),O_=n(O,"LI",{});var M8e=s(O_);Bce=n(M8e,"STRONG",{});var rft=s(Bce);t5o=r(rft,"flava"),rft.forEach(t),a5o=r(M8e," \u2014 "),tD=n(M8e,"A",{href:!0});var tft=s(tD);n5o=r(tft,"FlavaForPreTraining"),tft.forEach(t),s5o=r(M8e," (FLAVA model)"),M8e.forEach(t),l5o=i(O),V_=n(O,"LI",{});var E8e=s(V_);Ice=n(E8e,"STRONG",{});var aft=s(Ice);i5o=r(aft,"fnet"),aft.forEach(t),d5o=r(E8e," \u2014 "),aD=n(E8e,"A",{href:!0});var nft=s(aD);c5o=r(nft,"FNetForPreTraining"),nft.forEach(t),f5o=r(E8e," (FNet model)"),E8e.forEach(t),m5o=i(O),X_=n(O,"LI",{});var C8e=s(X_);Nce=n(C8e,"STRONG",{});var sft=s(Nce);g5o=r(sft,"fsmt"),sft.forEach(t),h5o=r(C8e," \u2014 "),nD=n(C8e,"A",{href:!0});var lft=s(nD);p5o=r(lft,"FSMTForConditionalGeneration"),lft.forEach(t),u5o=r(C8e," (FairSeq Machine-Translation model)"),C8e.forEach(t),_5o=i(O),z_=n(O,"LI",{});var w8e=s(z_);qce=n(w8e,"STRONG",{});var ift=s(qce);b5o=r(ift,"funnel"),ift.forEach(t),v5o=r(w8e," \u2014 "),sD=n(w8e,"A",{href:!0});var dft=s(sD);F5o=r(dft,"FunnelForPreTraining"),dft.forEach(t),T5o=r(w8e," (Funnel Transformer model)"),w8e.forEach(t),M5o=i(O),W_=n(O,"LI",{});var A8e=s(W_);jce=n(A8e,"STRONG",{});var cft=s(jce);E5o=r(cft,"gpt2"),cft.forEach(t),C5o=r(A8e," \u2014 "),lD=n(A8e,"A",{href:!0});var fft=s(lD);w5o=r(fft,"GPT2LMHeadModel"),fft.forEach(t),A5o=r(A8e," (OpenAI GPT-2 model)"),A8e.forEach(t),L5o=i(O),Q_=n(O,"LI",{});var L8e=s(Q_);Dce=n(L8e,"STRONG",{});var mft=s(Dce);y5o=r(mft,"ibert"),mft.forEach(t),x5o=r(L8e," \u2014 "),iD=n(L8e,"A",{href:!0});var gft=s(iD);$5o=r(gft,"IBertForMaskedLM"),gft.forEach(t),k5o=r(L8e," (I-BERT model)"),L8e.forEach(t),S5o=i(O),H_=n(O,"LI",{});var y8e=s(H_);Gce=n(y8e,"STRONG",{});var hft=s(Gce);R5o=r(hft,"layoutlm"),hft.forEach(t),P5o=r(y8e," \u2014 "),dD=n(y8e,"A",{href:!0});var pft=s(dD);B5o=r(pft,"LayoutLMForMaskedLM"),pft.forEach(t),I5o=r(y8e," (LayoutLM model)"),y8e.forEach(t),N5o=i(O),U_=n(O,"LI",{});var x8e=s(U_);Oce=n(x8e,"STRONG",{});var uft=s(Oce);q5o=r(uft,"longformer"),uft.forEach(t),j5o=r(x8e," \u2014 "),cD=n(x8e,"A",{href:!0});var _ft=s(cD);D5o=r(_ft,"LongformerForMaskedLM"),_ft.forEach(t),G5o=r(x8e," (Longformer model)"),x8e.forEach(t),O5o=i(O),J_=n(O,"LI",{});var $8e=s(J_);Vce=n($8e,"STRONG",{});var bft=s(Vce);V5o=r(bft,"lxmert"),bft.forEach(t),X5o=r($8e," \u2014 "),fD=n($8e,"A",{href:!0});var vft=s(fD);z5o=r(vft,"LxmertForPreTraining"),vft.forEach(t),W5o=r($8e," (LXMERT model)"),$8e.forEach(t),Q5o=i(O),Y_=n(O,"LI",{});var k8e=s(Y_);Xce=n(k8e,"STRONG",{});var Fft=s(Xce);H5o=r(Fft,"megatron-bert"),Fft.forEach(t),U5o=r(k8e," \u2014 "),mD=n(k8e,"A",{href:!0});var Tft=s(mD);J5o=r(Tft,"MegatronBertForPreTraining"),Tft.forEach(t),Y5o=r(k8e," (Megatron-BERT model)"),k8e.forEach(t),K5o=i(O),K_=n(O,"LI",{});var S8e=s(K_);zce=n(S8e,"STRONG",{});var Mft=s(zce);Z5o=r(Mft,"mobilebert"),Mft.forEach(t),e3o=r(S8e," \u2014 "),gD=n(S8e,"A",{href:!0});var Eft=s(gD);o3o=r(Eft,"MobileBertForPreTraining"),Eft.forEach(t),r3o=r(S8e," (MobileBERT model)"),S8e.forEach(t),t3o=i(O),Z_=n(O,"LI",{});var R8e=s(Z_);Wce=n(R8e,"STRONG",{});var Cft=s(Wce);a3o=r(Cft,"mpnet"),Cft.forEach(t),n3o=r(R8e," \u2014 "),hD=n(R8e,"A",{href:!0});var wft=s(hD);s3o=r(wft,"MPNetForMaskedLM"),wft.forEach(t),l3o=r(R8e," (MPNet model)"),R8e.forEach(t),i3o=i(O),e2=n(O,"LI",{});var P8e=s(e2);Qce=n(P8e,"STRONG",{});var Aft=s(Qce);d3o=r(Aft,"openai-gpt"),Aft.forEach(t),c3o=r(P8e," \u2014 "),pD=n(P8e,"A",{href:!0});var Lft=s(pD);f3o=r(Lft,"OpenAIGPTLMHeadModel"),Lft.forEach(t),m3o=r(P8e," (OpenAI GPT model)"),P8e.forEach(t),g3o=i(O),o2=n(O,"LI",{});var B8e=s(o2);Hce=n(B8e,"STRONG",{});var yft=s(Hce);h3o=r(yft,"retribert"),yft.forEach(t),p3o=r(B8e," \u2014 "),uD=n(B8e,"A",{href:!0});var xft=s(uD);u3o=r(xft,"RetriBertModel"),xft.forEach(t),_3o=r(B8e," (RetriBERT model)"),B8e.forEach(t),b3o=i(O),r2=n(O,"LI",{});var I8e=s(r2);Uce=n(I8e,"STRONG",{});var $ft=s(Uce);v3o=r($ft,"roberta"),$ft.forEach(t),F3o=r(I8e," \u2014 "),_D=n(I8e,"A",{href:!0});var kft=s(_D);T3o=r(kft,"RobertaForMaskedLM"),kft.forEach(t),M3o=r(I8e," (RoBERTa model)"),I8e.forEach(t),E3o=i(O),t2=n(O,"LI",{});var N8e=s(t2);Jce=n(N8e,"STRONG",{});var Sft=s(Jce);C3o=r(Sft,"splinter"),Sft.forEach(t),w3o=r(N8e," \u2014 "),bD=n(N8e,"A",{href:!0});var Rft=s(bD);A3o=r(Rft,"SplinterForPreTraining"),Rft.forEach(t),L3o=r(N8e," (Splinter model)"),N8e.forEach(t),y3o=i(O),a2=n(O,"LI",{});var q8e=s(a2);Yce=n(q8e,"STRONG",{});var Pft=s(Yce);x3o=r(Pft,"squeezebert"),Pft.forEach(t),$3o=r(q8e," \u2014 "),vD=n(q8e,"A",{href:!0});var Bft=s(vD);k3o=r(Bft,"SqueezeBertForMaskedLM"),Bft.forEach(t),S3o=r(q8e," (SqueezeBERT model)"),q8e.forEach(t),R3o=i(O),n2=n(O,"LI",{});var j8e=s(n2);Kce=n(j8e,"STRONG",{});var Ift=s(Kce);P3o=r(Ift,"t5"),Ift.forEach(t),B3o=r(j8e," \u2014 "),FD=n(j8e,"A",{href:!0});var Nft=s(FD);I3o=r(Nft,"T5ForConditionalGeneration"),Nft.forEach(t),N3o=r(j8e," (T5 model)"),j8e.forEach(t),q3o=i(O),s2=n(O,"LI",{});var D8e=s(s2);Zce=n(D8e,"STRONG",{});var qft=s(Zce);j3o=r(qft,"tapas"),qft.forEach(t),D3o=r(D8e," \u2014 "),TD=n(D8e,"A",{href:!0});var jft=s(TD);G3o=r(jft,"TapasForMaskedLM"),jft.forEach(t),O3o=r(D8e," (TAPAS model)"),D8e.forEach(t),V3o=i(O),l2=n(O,"LI",{});var G8e=s(l2);efe=n(G8e,"STRONG",{});var Dft=s(efe);X3o=r(Dft,"transfo-xl"),Dft.forEach(t),z3o=r(G8e," \u2014 "),MD=n(G8e,"A",{href:!0});var Gft=s(MD);W3o=r(Gft,"TransfoXLLMHeadModel"),Gft.forEach(t),Q3o=r(G8e," (Transformer-XL model)"),G8e.forEach(t),H3o=i(O),i2=n(O,"LI",{});var O8e=s(i2);ofe=n(O8e,"STRONG",{});var Oft=s(ofe);U3o=r(Oft,"unispeech"),Oft.forEach(t),J3o=r(O8e," \u2014 "),ED=n(O8e,"A",{href:!0});var Vft=s(ED);Y3o=r(Vft,"UniSpeechForPreTraining"),Vft.forEach(t),K3o=r(O8e," (UniSpeech model)"),O8e.forEach(t),Z3o=i(O),d2=n(O,"LI",{});var V8e=s(d2);rfe=n(V8e,"STRONG",{});var Xft=s(rfe);e0o=r(Xft,"unispeech-sat"),Xft.forEach(t),o0o=r(V8e," \u2014 "),CD=n(V8e,"A",{href:!0});var zft=s(CD);r0o=r(zft,"UniSpeechSatForPreTraining"),zft.forEach(t),t0o=r(V8e," (UniSpeechSat model)"),V8e.forEach(t),a0o=i(O),c2=n(O,"LI",{});var X8e=s(c2);tfe=n(X8e,"STRONG",{});var Wft=s(tfe);n0o=r(Wft,"visual_bert"),Wft.forEach(t),s0o=r(X8e," \u2014 "),wD=n(X8e,"A",{href:!0});var Qft=s(wD);l0o=r(Qft,"VisualBertForPreTraining"),Qft.forEach(t),i0o=r(X8e," (VisualBERT model)"),X8e.forEach(t),d0o=i(O),f2=n(O,"LI",{});var z8e=s(f2);afe=n(z8e,"STRONG",{});var Hft=s(afe);c0o=r(Hft,"vit_mae"),Hft.forEach(t),f0o=r(z8e," \u2014 "),AD=n(z8e,"A",{href:!0});var Uft=s(AD);m0o=r(Uft,"ViTMAEForPreTraining"),Uft.forEach(t),g0o=r(z8e," (ViTMAE model)"),z8e.forEach(t),h0o=i(O),m2=n(O,"LI",{});var W8e=s(m2);nfe=n(W8e,"STRONG",{});var Jft=s(nfe);p0o=r(Jft,"wav2vec2"),Jft.forEach(t),u0o=r(W8e," \u2014 "),LD=n(W8e,"A",{href:!0});var Yft=s(LD);_0o=r(Yft,"Wav2Vec2ForPreTraining"),Yft.forEach(t),b0o=r(W8e," (Wav2Vec2 model)"),W8e.forEach(t),v0o=i(O),g2=n(O,"LI",{});var Q8e=s(g2);sfe=n(Q8e,"STRONG",{});var Kft=s(sfe);F0o=r(Kft,"wav2vec2-conformer"),Kft.forEach(t),T0o=r(Q8e," \u2014 "),yD=n(Q8e,"A",{href:!0});var Zft=s(yD);M0o=r(Zft,"Wav2Vec2ConformerForPreTraining"),Zft.forEach(t),E0o=r(Q8e," (Wav2Vec2-Conformer model)"),Q8e.forEach(t),C0o=i(O),h2=n(O,"LI",{});var H8e=s(h2);lfe=n(H8e,"STRONG",{});var emt=s(lfe);w0o=r(emt,"xlm"),emt.forEach(t),A0o=r(H8e," \u2014 "),xD=n(H8e,"A",{href:!0});var omt=s(xD);L0o=r(omt,"XLMWithLMHeadModel"),omt.forEach(t),y0o=r(H8e," (XLM model)"),H8e.forEach(t),x0o=i(O),p2=n(O,"LI",{});var U8e=s(p2);ife=n(U8e,"STRONG",{});var rmt=s(ife);$0o=r(rmt,"xlm-roberta"),rmt.forEach(t),k0o=r(U8e," \u2014 "),$D=n(U8e,"A",{href:!0});var tmt=s($D);S0o=r(tmt,"XLMRobertaForMaskedLM"),tmt.forEach(t),R0o=r(U8e," (XLM-RoBERTa model)"),U8e.forEach(t),P0o=i(O),u2=n(O,"LI",{});var J8e=s(u2);dfe=n(J8e,"STRONG",{});var amt=s(dfe);B0o=r(amt,"xlm-roberta-xl"),amt.forEach(t),I0o=r(J8e," \u2014 "),kD=n(J8e,"A",{href:!0});var nmt=s(kD);N0o=r(nmt,"XLMRobertaXLForMaskedLM"),nmt.forEach(t),q0o=r(J8e," (XLM-RoBERTa-XL model)"),J8e.forEach(t),j0o=i(O),_2=n(O,"LI",{});var Y8e=s(_2);cfe=n(Y8e,"STRONG",{});var smt=s(cfe);D0o=r(smt,"xlnet"),smt.forEach(t),G0o=r(Y8e," \u2014 "),SD=n(Y8e,"A",{href:!0});var lmt=s(SD);O0o=r(lmt,"XLNetLMHeadModel"),lmt.forEach(t),V0o=r(Y8e," (XLNet model)"),Y8e.forEach(t),O.forEach(t),X0o=i(na),b2=n(na,"P",{});var K8e=s(b2);z0o=r(K8e,"The model is set in evaluation mode by default using "),ffe=n(K8e,"CODE",{});var imt=s(ffe);W0o=r(imt,"model.eval()"),imt.forEach(t),Q0o=r(K8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mfe=n(K8e,"CODE",{});var dmt=s(mfe);H0o=r(dmt,"model.train()"),dmt.forEach(t),K8e.forEach(t),U0o=i(na),T(v2.$$.fragment,na),na.forEach(t),Js.forEach(t),lGe=i(f),Di=n(f,"H2",{class:!0});var gVe=s(Di);F2=n(gVe,"A",{id:!0,class:!0,href:!0});var cmt=s(F2);gfe=n(cmt,"SPAN",{});var fmt=s(gfe);T(ZA.$$.fragment,fmt),fmt.forEach(t),cmt.forEach(t),J0o=i(gVe),hfe=n(gVe,"SPAN",{});var mmt=s(hfe);Y0o=r(mmt,"AutoModelForCausalLM"),mmt.forEach(t),gVe.forEach(t),iGe=i(f),ko=n(f,"DIV",{class:!0});var Ys=s(ko);T(eL.$$.fragment,Ys),K0o=i(Ys),Gi=n(Ys,"P",{});var Yee=s(Gi);Z0o=r(Yee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),RD=n(Yee,"A",{href:!0});var gmt=s(RD);ewo=r(gmt,"from_pretrained()"),gmt.forEach(t),owo=r(Yee," class method or the "),PD=n(Yee,"A",{href:!0});var hmt=s(PD);rwo=r(hmt,"from_config()"),hmt.forEach(t),two=r(Yee,` class
method.`),Yee.forEach(t),awo=i(Ys),oL=n(Ys,"P",{});var hVe=s(oL);nwo=r(hVe,"This class cannot be instantiated directly using "),pfe=n(hVe,"CODE",{});var pmt=s(pfe);swo=r(pmt,"__init__()"),pmt.forEach(t),lwo=r(hVe," (throws an error)."),hVe.forEach(t),iwo=i(Ys),lt=n(Ys,"DIV",{class:!0});var E0=s(lt);T(rL.$$.fragment,E0),dwo=i(E0),ufe=n(E0,"P",{});var umt=s(ufe);cwo=r(umt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),umt.forEach(t),fwo=i(E0),Oi=n(E0,"P",{});var Kee=s(Oi);mwo=r(Kee,`Note:
Loading a model from its configuration file does `),_fe=n(Kee,"STRONG",{});var _mt=s(_fe);gwo=r(_mt,"not"),_mt.forEach(t),hwo=r(Kee,` load the model weights. It only affects the
model\u2019s configuration. Use `),BD=n(Kee,"A",{href:!0});var bmt=s(BD);pwo=r(bmt,"from_pretrained()"),bmt.forEach(t),uwo=r(Kee," to load the model weights."),Kee.forEach(t),_wo=i(E0),T(T2.$$.fragment,E0),E0.forEach(t),bwo=i(Ys),Ke=n(Ys,"DIV",{class:!0});var sa=s(Ke);T(tL.$$.fragment,sa),vwo=i(sa),bfe=n(sa,"P",{});var vmt=s(bfe);Fwo=r(vmt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),vmt.forEach(t),Two=i(sa),Pa=n(sa,"P",{});var C0=s(Pa);Mwo=r(C0,"The model class to instantiate is selected based on the "),vfe=n(C0,"CODE",{});var Fmt=s(vfe);Ewo=r(Fmt,"model_type"),Fmt.forEach(t),Cwo=r(C0,` property of the config object (either
passed as an argument or loaded from `),Ffe=n(C0,"CODE",{});var Tmt=s(Ffe);wwo=r(Tmt,"pretrained_model_name_or_path"),Tmt.forEach(t),Awo=r(C0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tfe=n(C0,"CODE",{});var Mmt=s(Tfe);Lwo=r(Mmt,"pretrained_model_name_or_path"),Mmt.forEach(t),ywo=r(C0,":"),C0.forEach(t),xwo=i(sa),z=n(sa,"UL",{});var W=s(z);M2=n(W,"LI",{});var Z8e=s(M2);Mfe=n(Z8e,"STRONG",{});var Emt=s(Mfe);$wo=r(Emt,"bart"),Emt.forEach(t),kwo=r(Z8e," \u2014 "),ID=n(Z8e,"A",{href:!0});var Cmt=s(ID);Swo=r(Cmt,"BartForCausalLM"),Cmt.forEach(t),Rwo=r(Z8e," (BART model)"),Z8e.forEach(t),Pwo=i(W),E2=n(W,"LI",{});var exe=s(E2);Efe=n(exe,"STRONG",{});var wmt=s(Efe);Bwo=r(wmt,"bert"),wmt.forEach(t),Iwo=r(exe," \u2014 "),ND=n(exe,"A",{href:!0});var Amt=s(ND);Nwo=r(Amt,"BertLMHeadModel"),Amt.forEach(t),qwo=r(exe," (BERT model)"),exe.forEach(t),jwo=i(W),C2=n(W,"LI",{});var oxe=s(C2);Cfe=n(oxe,"STRONG",{});var Lmt=s(Cfe);Dwo=r(Lmt,"bert-generation"),Lmt.forEach(t),Gwo=r(oxe," \u2014 "),qD=n(oxe,"A",{href:!0});var ymt=s(qD);Owo=r(ymt,"BertGenerationDecoder"),ymt.forEach(t),Vwo=r(oxe," (Bert Generation model)"),oxe.forEach(t),Xwo=i(W),w2=n(W,"LI",{});var rxe=s(w2);wfe=n(rxe,"STRONG",{});var xmt=s(wfe);zwo=r(xmt,"big_bird"),xmt.forEach(t),Wwo=r(rxe," \u2014 "),jD=n(rxe,"A",{href:!0});var $mt=s(jD);Qwo=r($mt,"BigBirdForCausalLM"),$mt.forEach(t),Hwo=r(rxe," (BigBird model)"),rxe.forEach(t),Uwo=i(W),A2=n(W,"LI",{});var txe=s(A2);Afe=n(txe,"STRONG",{});var kmt=s(Afe);Jwo=r(kmt,"bigbird_pegasus"),kmt.forEach(t),Ywo=r(txe," \u2014 "),DD=n(txe,"A",{href:!0});var Smt=s(DD);Kwo=r(Smt,"BigBirdPegasusForCausalLM"),Smt.forEach(t),Zwo=r(txe," (BigBird-Pegasus model)"),txe.forEach(t),eAo=i(W),L2=n(W,"LI",{});var axe=s(L2);Lfe=n(axe,"STRONG",{});var Rmt=s(Lfe);oAo=r(Rmt,"blenderbot"),Rmt.forEach(t),rAo=r(axe," \u2014 "),GD=n(axe,"A",{href:!0});var Pmt=s(GD);tAo=r(Pmt,"BlenderbotForCausalLM"),Pmt.forEach(t),aAo=r(axe," (Blenderbot model)"),axe.forEach(t),nAo=i(W),y2=n(W,"LI",{});var nxe=s(y2);yfe=n(nxe,"STRONG",{});var Bmt=s(yfe);sAo=r(Bmt,"blenderbot-small"),Bmt.forEach(t),lAo=r(nxe," \u2014 "),OD=n(nxe,"A",{href:!0});var Imt=s(OD);iAo=r(Imt,"BlenderbotSmallForCausalLM"),Imt.forEach(t),dAo=r(nxe," (BlenderbotSmall model)"),nxe.forEach(t),cAo=i(W),x2=n(W,"LI",{});var sxe=s(x2);xfe=n(sxe,"STRONG",{});var Nmt=s(xfe);fAo=r(Nmt,"bloom"),Nmt.forEach(t),mAo=r(sxe," \u2014 "),VD=n(sxe,"A",{href:!0});var qmt=s(VD);gAo=r(qmt,"BloomForCausalLM"),qmt.forEach(t),hAo=r(sxe," (BLOOM model)"),sxe.forEach(t),pAo=i(W),$2=n(W,"LI",{});var lxe=s($2);$fe=n(lxe,"STRONG",{});var jmt=s($fe);uAo=r(jmt,"camembert"),jmt.forEach(t),_Ao=r(lxe," \u2014 "),XD=n(lxe,"A",{href:!0});var Dmt=s(XD);bAo=r(Dmt,"CamembertForCausalLM"),Dmt.forEach(t),vAo=r(lxe," (CamemBERT model)"),lxe.forEach(t),FAo=i(W),k2=n(W,"LI",{});var ixe=s(k2);kfe=n(ixe,"STRONG",{});var Gmt=s(kfe);TAo=r(Gmt,"ctrl"),Gmt.forEach(t),MAo=r(ixe," \u2014 "),zD=n(ixe,"A",{href:!0});var Omt=s(zD);EAo=r(Omt,"CTRLLMHeadModel"),Omt.forEach(t),CAo=r(ixe," (CTRL model)"),ixe.forEach(t),wAo=i(W),S2=n(W,"LI",{});var dxe=s(S2);Sfe=n(dxe,"STRONG",{});var Vmt=s(Sfe);AAo=r(Vmt,"data2vec-text"),Vmt.forEach(t),LAo=r(dxe," \u2014 "),WD=n(dxe,"A",{href:!0});var Xmt=s(WD);yAo=r(Xmt,"Data2VecTextForCausalLM"),Xmt.forEach(t),xAo=r(dxe," (Data2VecText model)"),dxe.forEach(t),$Ao=i(W),R2=n(W,"LI",{});var cxe=s(R2);Rfe=n(cxe,"STRONG",{});var zmt=s(Rfe);kAo=r(zmt,"electra"),zmt.forEach(t),SAo=r(cxe," \u2014 "),QD=n(cxe,"A",{href:!0});var Wmt=s(QD);RAo=r(Wmt,"ElectraForCausalLM"),Wmt.forEach(t),PAo=r(cxe," (ELECTRA model)"),cxe.forEach(t),BAo=i(W),P2=n(W,"LI",{});var fxe=s(P2);Pfe=n(fxe,"STRONG",{});var Qmt=s(Pfe);IAo=r(Qmt,"gpt2"),Qmt.forEach(t),NAo=r(fxe," \u2014 "),HD=n(fxe,"A",{href:!0});var Hmt=s(HD);qAo=r(Hmt,"GPT2LMHeadModel"),Hmt.forEach(t),jAo=r(fxe," (OpenAI GPT-2 model)"),fxe.forEach(t),DAo=i(W),B2=n(W,"LI",{});var mxe=s(B2);Bfe=n(mxe,"STRONG",{});var Umt=s(Bfe);GAo=r(Umt,"gpt_neo"),Umt.forEach(t),OAo=r(mxe," \u2014 "),UD=n(mxe,"A",{href:!0});var Jmt=s(UD);VAo=r(Jmt,"GPTNeoForCausalLM"),Jmt.forEach(t),XAo=r(mxe," (GPT Neo model)"),mxe.forEach(t),zAo=i(W),I2=n(W,"LI",{});var gxe=s(I2);Ife=n(gxe,"STRONG",{});var Ymt=s(Ife);WAo=r(Ymt,"gpt_neox"),Ymt.forEach(t),QAo=r(gxe," \u2014 "),JD=n(gxe,"A",{href:!0});var Kmt=s(JD);HAo=r(Kmt,"GPTNeoXForCausalLM"),Kmt.forEach(t),UAo=r(gxe," (GPT NeoX model)"),gxe.forEach(t),JAo=i(W),N2=n(W,"LI",{});var hxe=s(N2);Nfe=n(hxe,"STRONG",{});var Zmt=s(Nfe);YAo=r(Zmt,"gptj"),Zmt.forEach(t),KAo=r(hxe," \u2014 "),YD=n(hxe,"A",{href:!0});var egt=s(YD);ZAo=r(egt,"GPTJForCausalLM"),egt.forEach(t),eLo=r(hxe," (GPT-J model)"),hxe.forEach(t),oLo=i(W),q2=n(W,"LI",{});var pxe=s(q2);qfe=n(pxe,"STRONG",{});var ogt=s(qfe);rLo=r(ogt,"marian"),ogt.forEach(t),tLo=r(pxe," \u2014 "),KD=n(pxe,"A",{href:!0});var rgt=s(KD);aLo=r(rgt,"MarianForCausalLM"),rgt.forEach(t),nLo=r(pxe," (Marian model)"),pxe.forEach(t),sLo=i(W),j2=n(W,"LI",{});var uxe=s(j2);jfe=n(uxe,"STRONG",{});var tgt=s(jfe);lLo=r(tgt,"mbart"),tgt.forEach(t),iLo=r(uxe," \u2014 "),ZD=n(uxe,"A",{href:!0});var agt=s(ZD);dLo=r(agt,"MBartForCausalLM"),agt.forEach(t),cLo=r(uxe," (mBART model)"),uxe.forEach(t),fLo=i(W),D2=n(W,"LI",{});var _xe=s(D2);Dfe=n(_xe,"STRONG",{});var ngt=s(Dfe);mLo=r(ngt,"megatron-bert"),ngt.forEach(t),gLo=r(_xe," \u2014 "),eG=n(_xe,"A",{href:!0});var sgt=s(eG);hLo=r(sgt,"MegatronBertForCausalLM"),sgt.forEach(t),pLo=r(_xe," (Megatron-BERT model)"),_xe.forEach(t),uLo=i(W),G2=n(W,"LI",{});var bxe=s(G2);Gfe=n(bxe,"STRONG",{});var lgt=s(Gfe);_Lo=r(lgt,"openai-gpt"),lgt.forEach(t),bLo=r(bxe," \u2014 "),oG=n(bxe,"A",{href:!0});var igt=s(oG);vLo=r(igt,"OpenAIGPTLMHeadModel"),igt.forEach(t),FLo=r(bxe," (OpenAI GPT model)"),bxe.forEach(t),TLo=i(W),O2=n(W,"LI",{});var vxe=s(O2);Ofe=n(vxe,"STRONG",{});var dgt=s(Ofe);MLo=r(dgt,"opt"),dgt.forEach(t),ELo=r(vxe," \u2014 "),rG=n(vxe,"A",{href:!0});var cgt=s(rG);CLo=r(cgt,"OPTForCausalLM"),cgt.forEach(t),wLo=r(vxe," (OPT model)"),vxe.forEach(t),ALo=i(W),V2=n(W,"LI",{});var Fxe=s(V2);Vfe=n(Fxe,"STRONG",{});var fgt=s(Vfe);LLo=r(fgt,"pegasus"),fgt.forEach(t),yLo=r(Fxe," \u2014 "),tG=n(Fxe,"A",{href:!0});var mgt=s(tG);xLo=r(mgt,"PegasusForCausalLM"),mgt.forEach(t),$Lo=r(Fxe," (Pegasus model)"),Fxe.forEach(t),kLo=i(W),X2=n(W,"LI",{});var Txe=s(X2);Xfe=n(Txe,"STRONG",{});var ggt=s(Xfe);SLo=r(ggt,"plbart"),ggt.forEach(t),RLo=r(Txe," \u2014 "),aG=n(Txe,"A",{href:!0});var hgt=s(aG);PLo=r(hgt,"PLBartForCausalLM"),hgt.forEach(t),BLo=r(Txe," (PLBart model)"),Txe.forEach(t),ILo=i(W),z2=n(W,"LI",{});var Mxe=s(z2);zfe=n(Mxe,"STRONG",{});var pgt=s(zfe);NLo=r(pgt,"prophetnet"),pgt.forEach(t),qLo=r(Mxe," \u2014 "),nG=n(Mxe,"A",{href:!0});var ugt=s(nG);jLo=r(ugt,"ProphetNetForCausalLM"),ugt.forEach(t),DLo=r(Mxe," (ProphetNet model)"),Mxe.forEach(t),GLo=i(W),W2=n(W,"LI",{});var Exe=s(W2);Wfe=n(Exe,"STRONG",{});var _gt=s(Wfe);OLo=r(_gt,"qdqbert"),_gt.forEach(t),VLo=r(Exe," \u2014 "),sG=n(Exe,"A",{href:!0});var bgt=s(sG);XLo=r(bgt,"QDQBertLMHeadModel"),bgt.forEach(t),zLo=r(Exe," (QDQBert model)"),Exe.forEach(t),WLo=i(W),Q2=n(W,"LI",{});var Cxe=s(Q2);Qfe=n(Cxe,"STRONG",{});var vgt=s(Qfe);QLo=r(vgt,"reformer"),vgt.forEach(t),HLo=r(Cxe," \u2014 "),lG=n(Cxe,"A",{href:!0});var Fgt=s(lG);ULo=r(Fgt,"ReformerModelWithLMHead"),Fgt.forEach(t),JLo=r(Cxe," (Reformer model)"),Cxe.forEach(t),YLo=i(W),H2=n(W,"LI",{});var wxe=s(H2);Hfe=n(wxe,"STRONG",{});var Tgt=s(Hfe);KLo=r(Tgt,"rembert"),Tgt.forEach(t),ZLo=r(wxe," \u2014 "),iG=n(wxe,"A",{href:!0});var Mgt=s(iG);eyo=r(Mgt,"RemBertForCausalLM"),Mgt.forEach(t),oyo=r(wxe," (RemBERT model)"),wxe.forEach(t),ryo=i(W),U2=n(W,"LI",{});var Axe=s(U2);Ufe=n(Axe,"STRONG",{});var Egt=s(Ufe);tyo=r(Egt,"roberta"),Egt.forEach(t),ayo=r(Axe," \u2014 "),dG=n(Axe,"A",{href:!0});var Cgt=s(dG);nyo=r(Cgt,"RobertaForCausalLM"),Cgt.forEach(t),syo=r(Axe," (RoBERTa model)"),Axe.forEach(t),lyo=i(W),J2=n(W,"LI",{});var Lxe=s(J2);Jfe=n(Lxe,"STRONG",{});var wgt=s(Jfe);iyo=r(wgt,"roformer"),wgt.forEach(t),dyo=r(Lxe," \u2014 "),cG=n(Lxe,"A",{href:!0});var Agt=s(cG);cyo=r(Agt,"RoFormerForCausalLM"),Agt.forEach(t),fyo=r(Lxe," (RoFormer model)"),Lxe.forEach(t),myo=i(W),Y2=n(W,"LI",{});var yxe=s(Y2);Yfe=n(yxe,"STRONG",{});var Lgt=s(Yfe);gyo=r(Lgt,"speech_to_text_2"),Lgt.forEach(t),hyo=r(yxe," \u2014 "),fG=n(yxe,"A",{href:!0});var ygt=s(fG);pyo=r(ygt,"Speech2Text2ForCausalLM"),ygt.forEach(t),uyo=r(yxe," (Speech2Text2 model)"),yxe.forEach(t),_yo=i(W),K2=n(W,"LI",{});var xxe=s(K2);Kfe=n(xxe,"STRONG",{});var xgt=s(Kfe);byo=r(xgt,"transfo-xl"),xgt.forEach(t),vyo=r(xxe," \u2014 "),mG=n(xxe,"A",{href:!0});var $gt=s(mG);Fyo=r($gt,"TransfoXLLMHeadModel"),$gt.forEach(t),Tyo=r(xxe," (Transformer-XL model)"),xxe.forEach(t),Myo=i(W),Z2=n(W,"LI",{});var $xe=s(Z2);Zfe=n($xe,"STRONG",{});var kgt=s(Zfe);Eyo=r(kgt,"trocr"),kgt.forEach(t),Cyo=r($xe," \u2014 "),gG=n($xe,"A",{href:!0});var Sgt=s(gG);wyo=r(Sgt,"TrOCRForCausalLM"),Sgt.forEach(t),Ayo=r($xe," (TrOCR model)"),$xe.forEach(t),Lyo=i(W),e1=n(W,"LI",{});var kxe=s(e1);eme=n(kxe,"STRONG",{});var Rgt=s(eme);yyo=r(Rgt,"xglm"),Rgt.forEach(t),xyo=r(kxe," \u2014 "),hG=n(kxe,"A",{href:!0});var Pgt=s(hG);$yo=r(Pgt,"XGLMForCausalLM"),Pgt.forEach(t),kyo=r(kxe," (XGLM model)"),kxe.forEach(t),Syo=i(W),o1=n(W,"LI",{});var Sxe=s(o1);ome=n(Sxe,"STRONG",{});var Bgt=s(ome);Ryo=r(Bgt,"xlm"),Bgt.forEach(t),Pyo=r(Sxe," \u2014 "),pG=n(Sxe,"A",{href:!0});var Igt=s(pG);Byo=r(Igt,"XLMWithLMHeadModel"),Igt.forEach(t),Iyo=r(Sxe," (XLM model)"),Sxe.forEach(t),Nyo=i(W),r1=n(W,"LI",{});var Rxe=s(r1);rme=n(Rxe,"STRONG",{});var Ngt=s(rme);qyo=r(Ngt,"xlm-prophetnet"),Ngt.forEach(t),jyo=r(Rxe," \u2014 "),uG=n(Rxe,"A",{href:!0});var qgt=s(uG);Dyo=r(qgt,"XLMProphetNetForCausalLM"),qgt.forEach(t),Gyo=r(Rxe," (XLM-ProphetNet model)"),Rxe.forEach(t),Oyo=i(W),t1=n(W,"LI",{});var Pxe=s(t1);tme=n(Pxe,"STRONG",{});var jgt=s(tme);Vyo=r(jgt,"xlm-roberta"),jgt.forEach(t),Xyo=r(Pxe," \u2014 "),_G=n(Pxe,"A",{href:!0});var Dgt=s(_G);zyo=r(Dgt,"XLMRobertaForCausalLM"),Dgt.forEach(t),Wyo=r(Pxe," (XLM-RoBERTa model)"),Pxe.forEach(t),Qyo=i(W),a1=n(W,"LI",{});var Bxe=s(a1);ame=n(Bxe,"STRONG",{});var Ggt=s(ame);Hyo=r(Ggt,"xlm-roberta-xl"),Ggt.forEach(t),Uyo=r(Bxe," \u2014 "),bG=n(Bxe,"A",{href:!0});var Ogt=s(bG);Jyo=r(Ogt,"XLMRobertaXLForCausalLM"),Ogt.forEach(t),Yyo=r(Bxe," (XLM-RoBERTa-XL model)"),Bxe.forEach(t),Kyo=i(W),n1=n(W,"LI",{});var Ixe=s(n1);nme=n(Ixe,"STRONG",{});var Vgt=s(nme);Zyo=r(Vgt,"xlnet"),Vgt.forEach(t),e8o=r(Ixe," \u2014 "),vG=n(Ixe,"A",{href:!0});var Xgt=s(vG);o8o=r(Xgt,"XLNetLMHeadModel"),Xgt.forEach(t),r8o=r(Ixe," (XLNet model)"),Ixe.forEach(t),W.forEach(t),t8o=i(sa),s1=n(sa,"P",{});var Nxe=s(s1);a8o=r(Nxe,"The model is set in evaluation mode by default using "),sme=n(Nxe,"CODE",{});var zgt=s(sme);n8o=r(zgt,"model.eval()"),zgt.forEach(t),s8o=r(Nxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lme=n(Nxe,"CODE",{});var Wgt=s(lme);l8o=r(Wgt,"model.train()"),Wgt.forEach(t),Nxe.forEach(t),i8o=i(sa),T(l1.$$.fragment,sa),sa.forEach(t),Ys.forEach(t),dGe=i(f),Vi=n(f,"H2",{class:!0});var pVe=s(Vi);i1=n(pVe,"A",{id:!0,class:!0,href:!0});var Qgt=s(i1);ime=n(Qgt,"SPAN",{});var Hgt=s(ime);T(aL.$$.fragment,Hgt),Hgt.forEach(t),Qgt.forEach(t),d8o=i(pVe),dme=n(pVe,"SPAN",{});var Ugt=s(dme);c8o=r(Ugt,"AutoModelForMaskedLM"),Ugt.forEach(t),pVe.forEach(t),cGe=i(f),So=n(f,"DIV",{class:!0});var Ks=s(So);T(nL.$$.fragment,Ks),f8o=i(Ks),Xi=n(Ks,"P",{});var Zee=s(Xi);m8o=r(Zee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),FG=n(Zee,"A",{href:!0});var Jgt=s(FG);g8o=r(Jgt,"from_pretrained()"),Jgt.forEach(t),h8o=r(Zee," class method or the "),TG=n(Zee,"A",{href:!0});var Ygt=s(TG);p8o=r(Ygt,"from_config()"),Ygt.forEach(t),u8o=r(Zee,` class
method.`),Zee.forEach(t),_8o=i(Ks),sL=n(Ks,"P",{});var uVe=s(sL);b8o=r(uVe,"This class cannot be instantiated directly using "),cme=n(uVe,"CODE",{});var Kgt=s(cme);v8o=r(Kgt,"__init__()"),Kgt.forEach(t),F8o=r(uVe," (throws an error)."),uVe.forEach(t),T8o=i(Ks),it=n(Ks,"DIV",{class:!0});var w0=s(it);T(lL.$$.fragment,w0),M8o=i(w0),fme=n(w0,"P",{});var Zgt=s(fme);E8o=r(Zgt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Zgt.forEach(t),C8o=i(w0),zi=n(w0,"P",{});var eoe=s(zi);w8o=r(eoe,`Note:
Loading a model from its configuration file does `),mme=n(eoe,"STRONG",{});var eht=s(mme);A8o=r(eht,"not"),eht.forEach(t),L8o=r(eoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),MG=n(eoe,"A",{href:!0});var oht=s(MG);y8o=r(oht,"from_pretrained()"),oht.forEach(t),x8o=r(eoe," to load the model weights."),eoe.forEach(t),$8o=i(w0),T(d1.$$.fragment,w0),w0.forEach(t),k8o=i(Ks),Ze=n(Ks,"DIV",{class:!0});var la=s(Ze);T(iL.$$.fragment,la),S8o=i(la),gme=n(la,"P",{});var rht=s(gme);R8o=r(rht,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),rht.forEach(t),P8o=i(la),Ba=n(la,"P",{});var A0=s(Ba);B8o=r(A0,"The model class to instantiate is selected based on the "),hme=n(A0,"CODE",{});var tht=s(hme);I8o=r(tht,"model_type"),tht.forEach(t),N8o=r(A0,` property of the config object (either
passed as an argument or loaded from `),pme=n(A0,"CODE",{});var aht=s(pme);q8o=r(aht,"pretrained_model_name_or_path"),aht.forEach(t),j8o=r(A0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ume=n(A0,"CODE",{});var nht=s(ume);D8o=r(nht,"pretrained_model_name_or_path"),nht.forEach(t),G8o=r(A0,":"),A0.forEach(t),O8o=i(la),Q=n(la,"UL",{});var H=s(Q);c1=n(H,"LI",{});var qxe=s(c1);_me=n(qxe,"STRONG",{});var sht=s(_me);V8o=r(sht,"albert"),sht.forEach(t),X8o=r(qxe," \u2014 "),EG=n(qxe,"A",{href:!0});var lht=s(EG);z8o=r(lht,"AlbertForMaskedLM"),lht.forEach(t),W8o=r(qxe," (ALBERT model)"),qxe.forEach(t),Q8o=i(H),f1=n(H,"LI",{});var jxe=s(f1);bme=n(jxe,"STRONG",{});var iht=s(bme);H8o=r(iht,"bart"),iht.forEach(t),U8o=r(jxe," \u2014 "),CG=n(jxe,"A",{href:!0});var dht=s(CG);J8o=r(dht,"BartForConditionalGeneration"),dht.forEach(t),Y8o=r(jxe," (BART model)"),jxe.forEach(t),K8o=i(H),m1=n(H,"LI",{});var Dxe=s(m1);vme=n(Dxe,"STRONG",{});var cht=s(vme);Z8o=r(cht,"bert"),cht.forEach(t),exo=r(Dxe," \u2014 "),wG=n(Dxe,"A",{href:!0});var fht=s(wG);oxo=r(fht,"BertForMaskedLM"),fht.forEach(t),rxo=r(Dxe," (BERT model)"),Dxe.forEach(t),txo=i(H),g1=n(H,"LI",{});var Gxe=s(g1);Fme=n(Gxe,"STRONG",{});var mht=s(Fme);axo=r(mht,"big_bird"),mht.forEach(t),nxo=r(Gxe," \u2014 "),AG=n(Gxe,"A",{href:!0});var ght=s(AG);sxo=r(ght,"BigBirdForMaskedLM"),ght.forEach(t),lxo=r(Gxe," (BigBird model)"),Gxe.forEach(t),ixo=i(H),h1=n(H,"LI",{});var Oxe=s(h1);Tme=n(Oxe,"STRONG",{});var hht=s(Tme);dxo=r(hht,"camembert"),hht.forEach(t),cxo=r(Oxe," \u2014 "),LG=n(Oxe,"A",{href:!0});var pht=s(LG);fxo=r(pht,"CamembertForMaskedLM"),pht.forEach(t),mxo=r(Oxe," (CamemBERT model)"),Oxe.forEach(t),gxo=i(H),p1=n(H,"LI",{});var Vxe=s(p1);Mme=n(Vxe,"STRONG",{});var uht=s(Mme);hxo=r(uht,"convbert"),uht.forEach(t),pxo=r(Vxe," \u2014 "),yG=n(Vxe,"A",{href:!0});var _ht=s(yG);uxo=r(_ht,"ConvBertForMaskedLM"),_ht.forEach(t),_xo=r(Vxe," (ConvBERT model)"),Vxe.forEach(t),bxo=i(H),u1=n(H,"LI",{});var Xxe=s(u1);Eme=n(Xxe,"STRONG",{});var bht=s(Eme);vxo=r(bht,"data2vec-text"),bht.forEach(t),Fxo=r(Xxe," \u2014 "),xG=n(Xxe,"A",{href:!0});var vht=s(xG);Txo=r(vht,"Data2VecTextForMaskedLM"),vht.forEach(t),Mxo=r(Xxe," (Data2VecText model)"),Xxe.forEach(t),Exo=i(H),_1=n(H,"LI",{});var zxe=s(_1);Cme=n(zxe,"STRONG",{});var Fht=s(Cme);Cxo=r(Fht,"deberta"),Fht.forEach(t),wxo=r(zxe," \u2014 "),$G=n(zxe,"A",{href:!0});var Tht=s($G);Axo=r(Tht,"DebertaForMaskedLM"),Tht.forEach(t),Lxo=r(zxe," (DeBERTa model)"),zxe.forEach(t),yxo=i(H),b1=n(H,"LI",{});var Wxe=s(b1);wme=n(Wxe,"STRONG",{});var Mht=s(wme);xxo=r(Mht,"deberta-v2"),Mht.forEach(t),$xo=r(Wxe," \u2014 "),kG=n(Wxe,"A",{href:!0});var Eht=s(kG);kxo=r(Eht,"DebertaV2ForMaskedLM"),Eht.forEach(t),Sxo=r(Wxe," (DeBERTa-v2 model)"),Wxe.forEach(t),Rxo=i(H),v1=n(H,"LI",{});var Qxe=s(v1);Ame=n(Qxe,"STRONG",{});var Cht=s(Ame);Pxo=r(Cht,"distilbert"),Cht.forEach(t),Bxo=r(Qxe," \u2014 "),SG=n(Qxe,"A",{href:!0});var wht=s(SG);Ixo=r(wht,"DistilBertForMaskedLM"),wht.forEach(t),Nxo=r(Qxe," (DistilBERT model)"),Qxe.forEach(t),qxo=i(H),F1=n(H,"LI",{});var Hxe=s(F1);Lme=n(Hxe,"STRONG",{});var Aht=s(Lme);jxo=r(Aht,"electra"),Aht.forEach(t),Dxo=r(Hxe," \u2014 "),RG=n(Hxe,"A",{href:!0});var Lht=s(RG);Gxo=r(Lht,"ElectraForMaskedLM"),Lht.forEach(t),Oxo=r(Hxe," (ELECTRA model)"),Hxe.forEach(t),Vxo=i(H),T1=n(H,"LI",{});var Uxe=s(T1);yme=n(Uxe,"STRONG",{});var yht=s(yme);Xxo=r(yht,"flaubert"),yht.forEach(t),zxo=r(Uxe," \u2014 "),PG=n(Uxe,"A",{href:!0});var xht=s(PG);Wxo=r(xht,"FlaubertWithLMHeadModel"),xht.forEach(t),Qxo=r(Uxe," (FlauBERT model)"),Uxe.forEach(t),Hxo=i(H),M1=n(H,"LI",{});var Jxe=s(M1);xme=n(Jxe,"STRONG",{});var $ht=s(xme);Uxo=r($ht,"fnet"),$ht.forEach(t),Jxo=r(Jxe," \u2014 "),BG=n(Jxe,"A",{href:!0});var kht=s(BG);Yxo=r(kht,"FNetForMaskedLM"),kht.forEach(t),Kxo=r(Jxe," (FNet model)"),Jxe.forEach(t),Zxo=i(H),E1=n(H,"LI",{});var Yxe=s(E1);$me=n(Yxe,"STRONG",{});var Sht=s($me);e$o=r(Sht,"funnel"),Sht.forEach(t),o$o=r(Yxe," \u2014 "),IG=n(Yxe,"A",{href:!0});var Rht=s(IG);r$o=r(Rht,"FunnelForMaskedLM"),Rht.forEach(t),t$o=r(Yxe," (Funnel Transformer model)"),Yxe.forEach(t),a$o=i(H),C1=n(H,"LI",{});var Kxe=s(C1);kme=n(Kxe,"STRONG",{});var Pht=s(kme);n$o=r(Pht,"ibert"),Pht.forEach(t),s$o=r(Kxe," \u2014 "),NG=n(Kxe,"A",{href:!0});var Bht=s(NG);l$o=r(Bht,"IBertForMaskedLM"),Bht.forEach(t),i$o=r(Kxe," (I-BERT model)"),Kxe.forEach(t),d$o=i(H),w1=n(H,"LI",{});var Zxe=s(w1);Sme=n(Zxe,"STRONG",{});var Iht=s(Sme);c$o=r(Iht,"layoutlm"),Iht.forEach(t),f$o=r(Zxe," \u2014 "),qG=n(Zxe,"A",{href:!0});var Nht=s(qG);m$o=r(Nht,"LayoutLMForMaskedLM"),Nht.forEach(t),g$o=r(Zxe," (LayoutLM model)"),Zxe.forEach(t),h$o=i(H),A1=n(H,"LI",{});var e$e=s(A1);Rme=n(e$e,"STRONG",{});var qht=s(Rme);p$o=r(qht,"longformer"),qht.forEach(t),u$o=r(e$e," \u2014 "),jG=n(e$e,"A",{href:!0});var jht=s(jG);_$o=r(jht,"LongformerForMaskedLM"),jht.forEach(t),b$o=r(e$e," (Longformer model)"),e$e.forEach(t),v$o=i(H),L1=n(H,"LI",{});var o$e=s(L1);Pme=n(o$e,"STRONG",{});var Dht=s(Pme);F$o=r(Dht,"luke"),Dht.forEach(t),T$o=r(o$e," \u2014 "),DG=n(o$e,"A",{href:!0});var Ght=s(DG);M$o=r(Ght,"LukeForMaskedLM"),Ght.forEach(t),E$o=r(o$e," (LUKE model)"),o$e.forEach(t),C$o=i(H),y1=n(H,"LI",{});var r$e=s(y1);Bme=n(r$e,"STRONG",{});var Oht=s(Bme);w$o=r(Oht,"mbart"),Oht.forEach(t),A$o=r(r$e," \u2014 "),GG=n(r$e,"A",{href:!0});var Vht=s(GG);L$o=r(Vht,"MBartForConditionalGeneration"),Vht.forEach(t),y$o=r(r$e," (mBART model)"),r$e.forEach(t),x$o=i(H),x1=n(H,"LI",{});var t$e=s(x1);Ime=n(t$e,"STRONG",{});var Xht=s(Ime);$$o=r(Xht,"megatron-bert"),Xht.forEach(t),k$o=r(t$e," \u2014 "),OG=n(t$e,"A",{href:!0});var zht=s(OG);S$o=r(zht,"MegatronBertForMaskedLM"),zht.forEach(t),R$o=r(t$e," (Megatron-BERT model)"),t$e.forEach(t),P$o=i(H),$1=n(H,"LI",{});var a$e=s($1);Nme=n(a$e,"STRONG",{});var Wht=s(Nme);B$o=r(Wht,"mobilebert"),Wht.forEach(t),I$o=r(a$e," \u2014 "),VG=n(a$e,"A",{href:!0});var Qht=s(VG);N$o=r(Qht,"MobileBertForMaskedLM"),Qht.forEach(t),q$o=r(a$e," (MobileBERT model)"),a$e.forEach(t),j$o=i(H),k1=n(H,"LI",{});var n$e=s(k1);qme=n(n$e,"STRONG",{});var Hht=s(qme);D$o=r(Hht,"mpnet"),Hht.forEach(t),G$o=r(n$e," \u2014 "),XG=n(n$e,"A",{href:!0});var Uht=s(XG);O$o=r(Uht,"MPNetForMaskedLM"),Uht.forEach(t),V$o=r(n$e," (MPNet model)"),n$e.forEach(t),X$o=i(H),S1=n(H,"LI",{});var s$e=s(S1);jme=n(s$e,"STRONG",{});var Jht=s(jme);z$o=r(Jht,"nystromformer"),Jht.forEach(t),W$o=r(s$e," \u2014 "),zG=n(s$e,"A",{href:!0});var Yht=s(zG);Q$o=r(Yht,"NystromformerForMaskedLM"),Yht.forEach(t),H$o=r(s$e," (Nystr\xF6mformer model)"),s$e.forEach(t),U$o=i(H),R1=n(H,"LI",{});var l$e=s(R1);Dme=n(l$e,"STRONG",{});var Kht=s(Dme);J$o=r(Kht,"perceiver"),Kht.forEach(t),Y$o=r(l$e," \u2014 "),WG=n(l$e,"A",{href:!0});var Zht=s(WG);K$o=r(Zht,"PerceiverForMaskedLM"),Zht.forEach(t),Z$o=r(l$e," (Perceiver model)"),l$e.forEach(t),eko=i(H),P1=n(H,"LI",{});var i$e=s(P1);Gme=n(i$e,"STRONG",{});var ept=s(Gme);oko=r(ept,"qdqbert"),ept.forEach(t),rko=r(i$e," \u2014 "),QG=n(i$e,"A",{href:!0});var opt=s(QG);tko=r(opt,"QDQBertForMaskedLM"),opt.forEach(t),ako=r(i$e," (QDQBert model)"),i$e.forEach(t),nko=i(H),B1=n(H,"LI",{});var d$e=s(B1);Ome=n(d$e,"STRONG",{});var rpt=s(Ome);sko=r(rpt,"reformer"),rpt.forEach(t),lko=r(d$e," \u2014 "),HG=n(d$e,"A",{href:!0});var tpt=s(HG);iko=r(tpt,"ReformerForMaskedLM"),tpt.forEach(t),dko=r(d$e," (Reformer model)"),d$e.forEach(t),cko=i(H),I1=n(H,"LI",{});var c$e=s(I1);Vme=n(c$e,"STRONG",{});var apt=s(Vme);fko=r(apt,"rembert"),apt.forEach(t),mko=r(c$e," \u2014 "),UG=n(c$e,"A",{href:!0});var npt=s(UG);gko=r(npt,"RemBertForMaskedLM"),npt.forEach(t),hko=r(c$e," (RemBERT model)"),c$e.forEach(t),pko=i(H),N1=n(H,"LI",{});var f$e=s(N1);Xme=n(f$e,"STRONG",{});var spt=s(Xme);uko=r(spt,"roberta"),spt.forEach(t),_ko=r(f$e," \u2014 "),JG=n(f$e,"A",{href:!0});var lpt=s(JG);bko=r(lpt,"RobertaForMaskedLM"),lpt.forEach(t),vko=r(f$e," (RoBERTa model)"),f$e.forEach(t),Fko=i(H),q1=n(H,"LI",{});var m$e=s(q1);zme=n(m$e,"STRONG",{});var ipt=s(zme);Tko=r(ipt,"roformer"),ipt.forEach(t),Mko=r(m$e," \u2014 "),YG=n(m$e,"A",{href:!0});var dpt=s(YG);Eko=r(dpt,"RoFormerForMaskedLM"),dpt.forEach(t),Cko=r(m$e," (RoFormer model)"),m$e.forEach(t),wko=i(H),j1=n(H,"LI",{});var g$e=s(j1);Wme=n(g$e,"STRONG",{});var cpt=s(Wme);Ako=r(cpt,"squeezebert"),cpt.forEach(t),Lko=r(g$e," \u2014 "),KG=n(g$e,"A",{href:!0});var fpt=s(KG);yko=r(fpt,"SqueezeBertForMaskedLM"),fpt.forEach(t),xko=r(g$e," (SqueezeBERT model)"),g$e.forEach(t),$ko=i(H),D1=n(H,"LI",{});var h$e=s(D1);Qme=n(h$e,"STRONG",{});var mpt=s(Qme);kko=r(mpt,"tapas"),mpt.forEach(t),Sko=r(h$e," \u2014 "),ZG=n(h$e,"A",{href:!0});var gpt=s(ZG);Rko=r(gpt,"TapasForMaskedLM"),gpt.forEach(t),Pko=r(h$e," (TAPAS model)"),h$e.forEach(t),Bko=i(H),G1=n(H,"LI",{});var p$e=s(G1);Hme=n(p$e,"STRONG",{});var hpt=s(Hme);Iko=r(hpt,"wav2vec2"),hpt.forEach(t),Nko=r(p$e," \u2014 "),Ume=n(p$e,"CODE",{});var ppt=s(Ume);qko=r(ppt,"Wav2Vec2ForMaskedLM"),ppt.forEach(t),jko=r(p$e," (Wav2Vec2 model)"),p$e.forEach(t),Dko=i(H),O1=n(H,"LI",{});var u$e=s(O1);Jme=n(u$e,"STRONG",{});var upt=s(Jme);Gko=r(upt,"xlm"),upt.forEach(t),Oko=r(u$e," \u2014 "),eO=n(u$e,"A",{href:!0});var _pt=s(eO);Vko=r(_pt,"XLMWithLMHeadModel"),_pt.forEach(t),Xko=r(u$e," (XLM model)"),u$e.forEach(t),zko=i(H),V1=n(H,"LI",{});var _$e=s(V1);Yme=n(_$e,"STRONG",{});var bpt=s(Yme);Wko=r(bpt,"xlm-roberta"),bpt.forEach(t),Qko=r(_$e," \u2014 "),oO=n(_$e,"A",{href:!0});var vpt=s(oO);Hko=r(vpt,"XLMRobertaForMaskedLM"),vpt.forEach(t),Uko=r(_$e," (XLM-RoBERTa model)"),_$e.forEach(t),Jko=i(H),X1=n(H,"LI",{});var b$e=s(X1);Kme=n(b$e,"STRONG",{});var Fpt=s(Kme);Yko=r(Fpt,"xlm-roberta-xl"),Fpt.forEach(t),Kko=r(b$e," \u2014 "),rO=n(b$e,"A",{href:!0});var Tpt=s(rO);Zko=r(Tpt,"XLMRobertaXLForMaskedLM"),Tpt.forEach(t),eSo=r(b$e," (XLM-RoBERTa-XL model)"),b$e.forEach(t),oSo=i(H),z1=n(H,"LI",{});var v$e=s(z1);Zme=n(v$e,"STRONG",{});var Mpt=s(Zme);rSo=r(Mpt,"yoso"),Mpt.forEach(t),tSo=r(v$e," \u2014 "),tO=n(v$e,"A",{href:!0});var Ept=s(tO);aSo=r(Ept,"YosoForMaskedLM"),Ept.forEach(t),nSo=r(v$e," (YOSO model)"),v$e.forEach(t),H.forEach(t),sSo=i(la),W1=n(la,"P",{});var F$e=s(W1);lSo=r(F$e,"The model is set in evaluation mode by default using "),ege=n(F$e,"CODE",{});var Cpt=s(ege);iSo=r(Cpt,"model.eval()"),Cpt.forEach(t),dSo=r(F$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),oge=n(F$e,"CODE",{});var wpt=s(oge);cSo=r(wpt,"model.train()"),wpt.forEach(t),F$e.forEach(t),fSo=i(la),T(Q1.$$.fragment,la),la.forEach(t),Ks.forEach(t),fGe=i(f),Wi=n(f,"H2",{class:!0});var _Ve=s(Wi);H1=n(_Ve,"A",{id:!0,class:!0,href:!0});var Apt=s(H1);rge=n(Apt,"SPAN",{});var Lpt=s(rge);T(dL.$$.fragment,Lpt),Lpt.forEach(t),Apt.forEach(t),mSo=i(_Ve),tge=n(_Ve,"SPAN",{});var ypt=s(tge);gSo=r(ypt,"AutoModelForSeq2SeqLM"),ypt.forEach(t),_Ve.forEach(t),mGe=i(f),Ro=n(f,"DIV",{class:!0});var Zs=s(Ro);T(cL.$$.fragment,Zs),hSo=i(Zs),Qi=n(Zs,"P",{});var ooe=s(Qi);pSo=r(ooe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),aO=n(ooe,"A",{href:!0});var xpt=s(aO);uSo=r(xpt,"from_pretrained()"),xpt.forEach(t),_So=r(ooe," class method or the "),nO=n(ooe,"A",{href:!0});var $pt=s(nO);bSo=r($pt,"from_config()"),$pt.forEach(t),vSo=r(ooe,` class
method.`),ooe.forEach(t),FSo=i(Zs),fL=n(Zs,"P",{});var bVe=s(fL);TSo=r(bVe,"This class cannot be instantiated directly using "),age=n(bVe,"CODE",{});var kpt=s(age);MSo=r(kpt,"__init__()"),kpt.forEach(t),ESo=r(bVe," (throws an error)."),bVe.forEach(t),CSo=i(Zs),dt=n(Zs,"DIV",{class:!0});var L0=s(dt);T(mL.$$.fragment,L0),wSo=i(L0),nge=n(L0,"P",{});var Spt=s(nge);ASo=r(Spt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Spt.forEach(t),LSo=i(L0),Hi=n(L0,"P",{});var roe=s(Hi);ySo=r(roe,`Note:
Loading a model from its configuration file does `),sge=n(roe,"STRONG",{});var Rpt=s(sge);xSo=r(Rpt,"not"),Rpt.forEach(t),$So=r(roe,` load the model weights. It only affects the
model\u2019s configuration. Use `),sO=n(roe,"A",{href:!0});var Ppt=s(sO);kSo=r(Ppt,"from_pretrained()"),Ppt.forEach(t),SSo=r(roe," to load the model weights."),roe.forEach(t),RSo=i(L0),T(U1.$$.fragment,L0),L0.forEach(t),PSo=i(Zs),eo=n(Zs,"DIV",{class:!0});var ia=s(eo);T(gL.$$.fragment,ia),BSo=i(ia),lge=n(ia,"P",{});var Bpt=s(lge);ISo=r(Bpt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Bpt.forEach(t),NSo=i(ia),Ia=n(ia,"P",{});var y0=s(Ia);qSo=r(y0,"The model class to instantiate is selected based on the "),ige=n(y0,"CODE",{});var Ipt=s(ige);jSo=r(Ipt,"model_type"),Ipt.forEach(t),DSo=r(y0,` property of the config object (either
passed as an argument or loaded from `),dge=n(y0,"CODE",{});var Npt=s(dge);GSo=r(Npt,"pretrained_model_name_or_path"),Npt.forEach(t),OSo=r(y0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cge=n(y0,"CODE",{});var qpt=s(cge);VSo=r(qpt,"pretrained_model_name_or_path"),qpt.forEach(t),XSo=r(y0,":"),y0.forEach(t),zSo=i(ia),pe=n(ia,"UL",{});var be=s(pe);J1=n(be,"LI",{});var T$e=s(J1);fge=n(T$e,"STRONG",{});var jpt=s(fge);WSo=r(jpt,"bart"),jpt.forEach(t),QSo=r(T$e," \u2014 "),lO=n(T$e,"A",{href:!0});var Dpt=s(lO);HSo=r(Dpt,"BartForConditionalGeneration"),Dpt.forEach(t),USo=r(T$e," (BART model)"),T$e.forEach(t),JSo=i(be),Y1=n(be,"LI",{});var M$e=s(Y1);mge=n(M$e,"STRONG",{});var Gpt=s(mge);YSo=r(Gpt,"bigbird_pegasus"),Gpt.forEach(t),KSo=r(M$e," \u2014 "),iO=n(M$e,"A",{href:!0});var Opt=s(iO);ZSo=r(Opt,"BigBirdPegasusForConditionalGeneration"),Opt.forEach(t),eRo=r(M$e," (BigBird-Pegasus model)"),M$e.forEach(t),oRo=i(be),K1=n(be,"LI",{});var E$e=s(K1);gge=n(E$e,"STRONG",{});var Vpt=s(gge);rRo=r(Vpt,"blenderbot"),Vpt.forEach(t),tRo=r(E$e," \u2014 "),dO=n(E$e,"A",{href:!0});var Xpt=s(dO);aRo=r(Xpt,"BlenderbotForConditionalGeneration"),Xpt.forEach(t),nRo=r(E$e," (Blenderbot model)"),E$e.forEach(t),sRo=i(be),Z1=n(be,"LI",{});var C$e=s(Z1);hge=n(C$e,"STRONG",{});var zpt=s(hge);lRo=r(zpt,"blenderbot-small"),zpt.forEach(t),iRo=r(C$e," \u2014 "),cO=n(C$e,"A",{href:!0});var Wpt=s(cO);dRo=r(Wpt,"BlenderbotSmallForConditionalGeneration"),Wpt.forEach(t),cRo=r(C$e," (BlenderbotSmall model)"),C$e.forEach(t),fRo=i(be),eb=n(be,"LI",{});var w$e=s(eb);pge=n(w$e,"STRONG",{});var Qpt=s(pge);mRo=r(Qpt,"encoder-decoder"),Qpt.forEach(t),gRo=r(w$e," \u2014 "),fO=n(w$e,"A",{href:!0});var Hpt=s(fO);hRo=r(Hpt,"EncoderDecoderModel"),Hpt.forEach(t),pRo=r(w$e," (Encoder decoder model)"),w$e.forEach(t),uRo=i(be),ob=n(be,"LI",{});var A$e=s(ob);uge=n(A$e,"STRONG",{});var Upt=s(uge);_Ro=r(Upt,"fsmt"),Upt.forEach(t),bRo=r(A$e," \u2014 "),mO=n(A$e,"A",{href:!0});var Jpt=s(mO);vRo=r(Jpt,"FSMTForConditionalGeneration"),Jpt.forEach(t),FRo=r(A$e," (FairSeq Machine-Translation model)"),A$e.forEach(t),TRo=i(be),rb=n(be,"LI",{});var L$e=s(rb);_ge=n(L$e,"STRONG",{});var Ypt=s(_ge);MRo=r(Ypt,"led"),Ypt.forEach(t),ERo=r(L$e," \u2014 "),gO=n(L$e,"A",{href:!0});var Kpt=s(gO);CRo=r(Kpt,"LEDForConditionalGeneration"),Kpt.forEach(t),wRo=r(L$e," (LED model)"),L$e.forEach(t),ARo=i(be),tb=n(be,"LI",{});var y$e=s(tb);bge=n(y$e,"STRONG",{});var Zpt=s(bge);LRo=r(Zpt,"longt5"),Zpt.forEach(t),yRo=r(y$e," \u2014 "),hO=n(y$e,"A",{href:!0});var eut=s(hO);xRo=r(eut,"LongT5ForConditionalGeneration"),eut.forEach(t),$Ro=r(y$e," (LongT5 model)"),y$e.forEach(t),kRo=i(be),ab=n(be,"LI",{});var x$e=s(ab);vge=n(x$e,"STRONG",{});var out=s(vge);SRo=r(out,"m2m_100"),out.forEach(t),RRo=r(x$e," \u2014 "),pO=n(x$e,"A",{href:!0});var rut=s(pO);PRo=r(rut,"M2M100ForConditionalGeneration"),rut.forEach(t),BRo=r(x$e," (M2M100 model)"),x$e.forEach(t),IRo=i(be),nb=n(be,"LI",{});var $$e=s(nb);Fge=n($$e,"STRONG",{});var tut=s(Fge);NRo=r(tut,"marian"),tut.forEach(t),qRo=r($$e," \u2014 "),uO=n($$e,"A",{href:!0});var aut=s(uO);jRo=r(aut,"MarianMTModel"),aut.forEach(t),DRo=r($$e," (Marian model)"),$$e.forEach(t),GRo=i(be),sb=n(be,"LI",{});var k$e=s(sb);Tge=n(k$e,"STRONG",{});var nut=s(Tge);ORo=r(nut,"mbart"),nut.forEach(t),VRo=r(k$e," \u2014 "),_O=n(k$e,"A",{href:!0});var sut=s(_O);XRo=r(sut,"MBartForConditionalGeneration"),sut.forEach(t),zRo=r(k$e," (mBART model)"),k$e.forEach(t),WRo=i(be),lb=n(be,"LI",{});var S$e=s(lb);Mge=n(S$e,"STRONG",{});var lut=s(Mge);QRo=r(lut,"mt5"),lut.forEach(t),HRo=r(S$e," \u2014 "),bO=n(S$e,"A",{href:!0});var iut=s(bO);URo=r(iut,"MT5ForConditionalGeneration"),iut.forEach(t),JRo=r(S$e," (MT5 model)"),S$e.forEach(t),YRo=i(be),ib=n(be,"LI",{});var R$e=s(ib);Ege=n(R$e,"STRONG",{});var dut=s(Ege);KRo=r(dut,"pegasus"),dut.forEach(t),ZRo=r(R$e," \u2014 "),vO=n(R$e,"A",{href:!0});var cut=s(vO);ePo=r(cut,"PegasusForConditionalGeneration"),cut.forEach(t),oPo=r(R$e," (Pegasus model)"),R$e.forEach(t),rPo=i(be),db=n(be,"LI",{});var P$e=s(db);Cge=n(P$e,"STRONG",{});var fut=s(Cge);tPo=r(fut,"plbart"),fut.forEach(t),aPo=r(P$e," \u2014 "),FO=n(P$e,"A",{href:!0});var mut=s(FO);nPo=r(mut,"PLBartForConditionalGeneration"),mut.forEach(t),sPo=r(P$e," (PLBart model)"),P$e.forEach(t),lPo=i(be),cb=n(be,"LI",{});var B$e=s(cb);wge=n(B$e,"STRONG",{});var gut=s(wge);iPo=r(gut,"prophetnet"),gut.forEach(t),dPo=r(B$e," \u2014 "),TO=n(B$e,"A",{href:!0});var hut=s(TO);cPo=r(hut,"ProphetNetForConditionalGeneration"),hut.forEach(t),fPo=r(B$e," (ProphetNet model)"),B$e.forEach(t),mPo=i(be),fb=n(be,"LI",{});var I$e=s(fb);Age=n(I$e,"STRONG",{});var put=s(Age);gPo=r(put,"t5"),put.forEach(t),hPo=r(I$e," \u2014 "),MO=n(I$e,"A",{href:!0});var uut=s(MO);pPo=r(uut,"T5ForConditionalGeneration"),uut.forEach(t),uPo=r(I$e," (T5 model)"),I$e.forEach(t),_Po=i(be),mb=n(be,"LI",{});var N$e=s(mb);Lge=n(N$e,"STRONG",{});var _ut=s(Lge);bPo=r(_ut,"xlm-prophetnet"),_ut.forEach(t),vPo=r(N$e," \u2014 "),EO=n(N$e,"A",{href:!0});var but=s(EO);FPo=r(but,"XLMProphetNetForConditionalGeneration"),but.forEach(t),TPo=r(N$e," (XLM-ProphetNet model)"),N$e.forEach(t),be.forEach(t),MPo=i(ia),gb=n(ia,"P",{});var q$e=s(gb);EPo=r(q$e,"The model is set in evaluation mode by default using "),yge=n(q$e,"CODE",{});var vut=s(yge);CPo=r(vut,"model.eval()"),vut.forEach(t),wPo=r(q$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xge=n(q$e,"CODE",{});var Fut=s(xge);APo=r(Fut,"model.train()"),Fut.forEach(t),q$e.forEach(t),LPo=i(ia),T(hb.$$.fragment,ia),ia.forEach(t),Zs.forEach(t),gGe=i(f),Ui=n(f,"H2",{class:!0});var vVe=s(Ui);pb=n(vVe,"A",{id:!0,class:!0,href:!0});var Tut=s(pb);$ge=n(Tut,"SPAN",{});var Mut=s($ge);T(hL.$$.fragment,Mut),Mut.forEach(t),Tut.forEach(t),yPo=i(vVe),kge=n(vVe,"SPAN",{});var Eut=s(kge);xPo=r(Eut,"AutoModelForSequenceClassification"),Eut.forEach(t),vVe.forEach(t),hGe=i(f),Po=n(f,"DIV",{class:!0});var el=s(Po);T(pL.$$.fragment,el),$Po=i(el),Ji=n(el,"P",{});var toe=s(Ji);kPo=r(toe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),CO=n(toe,"A",{href:!0});var Cut=s(CO);SPo=r(Cut,"from_pretrained()"),Cut.forEach(t),RPo=r(toe," class method or the "),wO=n(toe,"A",{href:!0});var wut=s(wO);PPo=r(wut,"from_config()"),wut.forEach(t),BPo=r(toe,` class
method.`),toe.forEach(t),IPo=i(el),uL=n(el,"P",{});var FVe=s(uL);NPo=r(FVe,"This class cannot be instantiated directly using "),Sge=n(FVe,"CODE",{});var Aut=s(Sge);qPo=r(Aut,"__init__()"),Aut.forEach(t),jPo=r(FVe," (throws an error)."),FVe.forEach(t),DPo=i(el),ct=n(el,"DIV",{class:!0});var x0=s(ct);T(_L.$$.fragment,x0),GPo=i(x0),Rge=n(x0,"P",{});var Lut=s(Rge);OPo=r(Lut,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Lut.forEach(t),VPo=i(x0),Yi=n(x0,"P",{});var aoe=s(Yi);XPo=r(aoe,`Note:
Loading a model from its configuration file does `),Pge=n(aoe,"STRONG",{});var yut=s(Pge);zPo=r(yut,"not"),yut.forEach(t),WPo=r(aoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),AO=n(aoe,"A",{href:!0});var xut=s(AO);QPo=r(xut,"from_pretrained()"),xut.forEach(t),HPo=r(aoe," to load the model weights."),aoe.forEach(t),UPo=i(x0),T(ub.$$.fragment,x0),x0.forEach(t),JPo=i(el),oo=n(el,"DIV",{class:!0});var da=s(oo);T(bL.$$.fragment,da),YPo=i(da),Bge=n(da,"P",{});var $ut=s(Bge);KPo=r($ut,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),$ut.forEach(t),ZPo=i(da),Na=n(da,"P",{});var $0=s(Na);eBo=r($0,"The model class to instantiate is selected based on the "),Ige=n($0,"CODE",{});var kut=s(Ige);oBo=r(kut,"model_type"),kut.forEach(t),rBo=r($0,` property of the config object (either
passed as an argument or loaded from `),Nge=n($0,"CODE",{});var Sut=s(Nge);tBo=r(Sut,"pretrained_model_name_or_path"),Sut.forEach(t),aBo=r($0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qge=n($0,"CODE",{});var Rut=s(qge);nBo=r(Rut,"pretrained_model_name_or_path"),Rut.forEach(t),sBo=r($0,":"),$0.forEach(t),lBo=i(da),N=n(da,"UL",{});var j=s(N);_b=n(j,"LI",{});var j$e=s(_b);jge=n(j$e,"STRONG",{});var Put=s(jge);iBo=r(Put,"albert"),Put.forEach(t),dBo=r(j$e," \u2014 "),LO=n(j$e,"A",{href:!0});var But=s(LO);cBo=r(But,"AlbertForSequenceClassification"),But.forEach(t),fBo=r(j$e," (ALBERT model)"),j$e.forEach(t),mBo=i(j),bb=n(j,"LI",{});var D$e=s(bb);Dge=n(D$e,"STRONG",{});var Iut=s(Dge);gBo=r(Iut,"bart"),Iut.forEach(t),hBo=r(D$e," \u2014 "),yO=n(D$e,"A",{href:!0});var Nut=s(yO);pBo=r(Nut,"BartForSequenceClassification"),Nut.forEach(t),uBo=r(D$e," (BART model)"),D$e.forEach(t),_Bo=i(j),vb=n(j,"LI",{});var G$e=s(vb);Gge=n(G$e,"STRONG",{});var qut=s(Gge);bBo=r(qut,"bert"),qut.forEach(t),vBo=r(G$e," \u2014 "),xO=n(G$e,"A",{href:!0});var jut=s(xO);FBo=r(jut,"BertForSequenceClassification"),jut.forEach(t),TBo=r(G$e," (BERT model)"),G$e.forEach(t),MBo=i(j),Fb=n(j,"LI",{});var O$e=s(Fb);Oge=n(O$e,"STRONG",{});var Dut=s(Oge);EBo=r(Dut,"big_bird"),Dut.forEach(t),CBo=r(O$e," \u2014 "),$O=n(O$e,"A",{href:!0});var Gut=s($O);wBo=r(Gut,"BigBirdForSequenceClassification"),Gut.forEach(t),ABo=r(O$e," (BigBird model)"),O$e.forEach(t),LBo=i(j),Tb=n(j,"LI",{});var V$e=s(Tb);Vge=n(V$e,"STRONG",{});var Out=s(Vge);yBo=r(Out,"bigbird_pegasus"),Out.forEach(t),xBo=r(V$e," \u2014 "),kO=n(V$e,"A",{href:!0});var Vut=s(kO);$Bo=r(Vut,"BigBirdPegasusForSequenceClassification"),Vut.forEach(t),kBo=r(V$e," (BigBird-Pegasus model)"),V$e.forEach(t),SBo=i(j),Mb=n(j,"LI",{});var X$e=s(Mb);Xge=n(X$e,"STRONG",{});var Xut=s(Xge);RBo=r(Xut,"camembert"),Xut.forEach(t),PBo=r(X$e," \u2014 "),SO=n(X$e,"A",{href:!0});var zut=s(SO);BBo=r(zut,"CamembertForSequenceClassification"),zut.forEach(t),IBo=r(X$e," (CamemBERT model)"),X$e.forEach(t),NBo=i(j),Eb=n(j,"LI",{});var z$e=s(Eb);zge=n(z$e,"STRONG",{});var Wut=s(zge);qBo=r(Wut,"canine"),Wut.forEach(t),jBo=r(z$e," \u2014 "),RO=n(z$e,"A",{href:!0});var Qut=s(RO);DBo=r(Qut,"CanineForSequenceClassification"),Qut.forEach(t),GBo=r(z$e," (CANINE model)"),z$e.forEach(t),OBo=i(j),Cb=n(j,"LI",{});var W$e=s(Cb);Wge=n(W$e,"STRONG",{});var Hut=s(Wge);VBo=r(Hut,"convbert"),Hut.forEach(t),XBo=r(W$e," \u2014 "),PO=n(W$e,"A",{href:!0});var Uut=s(PO);zBo=r(Uut,"ConvBertForSequenceClassification"),Uut.forEach(t),WBo=r(W$e," (ConvBERT model)"),W$e.forEach(t),QBo=i(j),wb=n(j,"LI",{});var Q$e=s(wb);Qge=n(Q$e,"STRONG",{});var Jut=s(Qge);HBo=r(Jut,"ctrl"),Jut.forEach(t),UBo=r(Q$e," \u2014 "),BO=n(Q$e,"A",{href:!0});var Yut=s(BO);JBo=r(Yut,"CTRLForSequenceClassification"),Yut.forEach(t),YBo=r(Q$e," (CTRL model)"),Q$e.forEach(t),KBo=i(j),Ab=n(j,"LI",{});var H$e=s(Ab);Hge=n(H$e,"STRONG",{});var Kut=s(Hge);ZBo=r(Kut,"data2vec-text"),Kut.forEach(t),eIo=r(H$e," \u2014 "),IO=n(H$e,"A",{href:!0});var Zut=s(IO);oIo=r(Zut,"Data2VecTextForSequenceClassification"),Zut.forEach(t),rIo=r(H$e," (Data2VecText model)"),H$e.forEach(t),tIo=i(j),Lb=n(j,"LI",{});var U$e=s(Lb);Uge=n(U$e,"STRONG",{});var e_t=s(Uge);aIo=r(e_t,"deberta"),e_t.forEach(t),nIo=r(U$e," \u2014 "),NO=n(U$e,"A",{href:!0});var o_t=s(NO);sIo=r(o_t,"DebertaForSequenceClassification"),o_t.forEach(t),lIo=r(U$e," (DeBERTa model)"),U$e.forEach(t),iIo=i(j),yb=n(j,"LI",{});var J$e=s(yb);Jge=n(J$e,"STRONG",{});var r_t=s(Jge);dIo=r(r_t,"deberta-v2"),r_t.forEach(t),cIo=r(J$e," \u2014 "),qO=n(J$e,"A",{href:!0});var t_t=s(qO);fIo=r(t_t,"DebertaV2ForSequenceClassification"),t_t.forEach(t),mIo=r(J$e," (DeBERTa-v2 model)"),J$e.forEach(t),gIo=i(j),xb=n(j,"LI",{});var Y$e=s(xb);Yge=n(Y$e,"STRONG",{});var a_t=s(Yge);hIo=r(a_t,"distilbert"),a_t.forEach(t),pIo=r(Y$e," \u2014 "),jO=n(Y$e,"A",{href:!0});var n_t=s(jO);uIo=r(n_t,"DistilBertForSequenceClassification"),n_t.forEach(t),_Io=r(Y$e," (DistilBERT model)"),Y$e.forEach(t),bIo=i(j),$b=n(j,"LI",{});var K$e=s($b);Kge=n(K$e,"STRONG",{});var s_t=s(Kge);vIo=r(s_t,"electra"),s_t.forEach(t),FIo=r(K$e," \u2014 "),DO=n(K$e,"A",{href:!0});var l_t=s(DO);TIo=r(l_t,"ElectraForSequenceClassification"),l_t.forEach(t),MIo=r(K$e," (ELECTRA model)"),K$e.forEach(t),EIo=i(j),kb=n(j,"LI",{});var Z$e=s(kb);Zge=n(Z$e,"STRONG",{});var i_t=s(Zge);CIo=r(i_t,"flaubert"),i_t.forEach(t),wIo=r(Z$e," \u2014 "),GO=n(Z$e,"A",{href:!0});var d_t=s(GO);AIo=r(d_t,"FlaubertForSequenceClassification"),d_t.forEach(t),LIo=r(Z$e," (FlauBERT model)"),Z$e.forEach(t),yIo=i(j),Sb=n(j,"LI",{});var eke=s(Sb);ehe=n(eke,"STRONG",{});var c_t=s(ehe);xIo=r(c_t,"fnet"),c_t.forEach(t),$Io=r(eke," \u2014 "),OO=n(eke,"A",{href:!0});var f_t=s(OO);kIo=r(f_t,"FNetForSequenceClassification"),f_t.forEach(t),SIo=r(eke," (FNet model)"),eke.forEach(t),RIo=i(j),Rb=n(j,"LI",{});var oke=s(Rb);ohe=n(oke,"STRONG",{});var m_t=s(ohe);PIo=r(m_t,"funnel"),m_t.forEach(t),BIo=r(oke," \u2014 "),VO=n(oke,"A",{href:!0});var g_t=s(VO);IIo=r(g_t,"FunnelForSequenceClassification"),g_t.forEach(t),NIo=r(oke," (Funnel Transformer model)"),oke.forEach(t),qIo=i(j),Pb=n(j,"LI",{});var rke=s(Pb);rhe=n(rke,"STRONG",{});var h_t=s(rhe);jIo=r(h_t,"gpt2"),h_t.forEach(t),DIo=r(rke," \u2014 "),XO=n(rke,"A",{href:!0});var p_t=s(XO);GIo=r(p_t,"GPT2ForSequenceClassification"),p_t.forEach(t),OIo=r(rke," (OpenAI GPT-2 model)"),rke.forEach(t),VIo=i(j),Bb=n(j,"LI",{});var tke=s(Bb);the=n(tke,"STRONG",{});var u_t=s(the);XIo=r(u_t,"gpt_neo"),u_t.forEach(t),zIo=r(tke," \u2014 "),zO=n(tke,"A",{href:!0});var __t=s(zO);WIo=r(__t,"GPTNeoForSequenceClassification"),__t.forEach(t),QIo=r(tke," (GPT Neo model)"),tke.forEach(t),HIo=i(j),Ib=n(j,"LI",{});var ake=s(Ib);ahe=n(ake,"STRONG",{});var b_t=s(ahe);UIo=r(b_t,"gptj"),b_t.forEach(t),JIo=r(ake," \u2014 "),WO=n(ake,"A",{href:!0});var v_t=s(WO);YIo=r(v_t,"GPTJForSequenceClassification"),v_t.forEach(t),KIo=r(ake," (GPT-J model)"),ake.forEach(t),ZIo=i(j),Nb=n(j,"LI",{});var nke=s(Nb);nhe=n(nke,"STRONG",{});var F_t=s(nhe);eNo=r(F_t,"ibert"),F_t.forEach(t),oNo=r(nke," \u2014 "),QO=n(nke,"A",{href:!0});var T_t=s(QO);rNo=r(T_t,"IBertForSequenceClassification"),T_t.forEach(t),tNo=r(nke," (I-BERT model)"),nke.forEach(t),aNo=i(j),qb=n(j,"LI",{});var ske=s(qb);she=n(ske,"STRONG",{});var M_t=s(she);nNo=r(M_t,"layoutlm"),M_t.forEach(t),sNo=r(ske," \u2014 "),HO=n(ske,"A",{href:!0});var E_t=s(HO);lNo=r(E_t,"LayoutLMForSequenceClassification"),E_t.forEach(t),iNo=r(ske," (LayoutLM model)"),ske.forEach(t),dNo=i(j),jb=n(j,"LI",{});var lke=s(jb);lhe=n(lke,"STRONG",{});var C_t=s(lhe);cNo=r(C_t,"layoutlmv2"),C_t.forEach(t),fNo=r(lke," \u2014 "),UO=n(lke,"A",{href:!0});var w_t=s(UO);mNo=r(w_t,"LayoutLMv2ForSequenceClassification"),w_t.forEach(t),gNo=r(lke," (LayoutLMv2 model)"),lke.forEach(t),hNo=i(j),Db=n(j,"LI",{});var ike=s(Db);ihe=n(ike,"STRONG",{});var A_t=s(ihe);pNo=r(A_t,"layoutlmv3"),A_t.forEach(t),uNo=r(ike," \u2014 "),JO=n(ike,"A",{href:!0});var L_t=s(JO);_No=r(L_t,"LayoutLMv3ForSequenceClassification"),L_t.forEach(t),bNo=r(ike," (LayoutLMv3 model)"),ike.forEach(t),vNo=i(j),Gb=n(j,"LI",{});var dke=s(Gb);dhe=n(dke,"STRONG",{});var y_t=s(dhe);FNo=r(y_t,"led"),y_t.forEach(t),TNo=r(dke," \u2014 "),YO=n(dke,"A",{href:!0});var x_t=s(YO);MNo=r(x_t,"LEDForSequenceClassification"),x_t.forEach(t),ENo=r(dke," (LED model)"),dke.forEach(t),CNo=i(j),Ob=n(j,"LI",{});var cke=s(Ob);che=n(cke,"STRONG",{});var $_t=s(che);wNo=r($_t,"longformer"),$_t.forEach(t),ANo=r(cke," \u2014 "),KO=n(cke,"A",{href:!0});var k_t=s(KO);LNo=r(k_t,"LongformerForSequenceClassification"),k_t.forEach(t),yNo=r(cke," (Longformer model)"),cke.forEach(t),xNo=i(j),Vb=n(j,"LI",{});var fke=s(Vb);fhe=n(fke,"STRONG",{});var S_t=s(fhe);$No=r(S_t,"mbart"),S_t.forEach(t),kNo=r(fke," \u2014 "),ZO=n(fke,"A",{href:!0});var R_t=s(ZO);SNo=r(R_t,"MBartForSequenceClassification"),R_t.forEach(t),RNo=r(fke," (mBART model)"),fke.forEach(t),PNo=i(j),Xb=n(j,"LI",{});var mke=s(Xb);mhe=n(mke,"STRONG",{});var P_t=s(mhe);BNo=r(P_t,"megatron-bert"),P_t.forEach(t),INo=r(mke," \u2014 "),eV=n(mke,"A",{href:!0});var B_t=s(eV);NNo=r(B_t,"MegatronBertForSequenceClassification"),B_t.forEach(t),qNo=r(mke," (Megatron-BERT model)"),mke.forEach(t),jNo=i(j),zb=n(j,"LI",{});var gke=s(zb);ghe=n(gke,"STRONG",{});var I_t=s(ghe);DNo=r(I_t,"mobilebert"),I_t.forEach(t),GNo=r(gke," \u2014 "),oV=n(gke,"A",{href:!0});var N_t=s(oV);ONo=r(N_t,"MobileBertForSequenceClassification"),N_t.forEach(t),VNo=r(gke," (MobileBERT model)"),gke.forEach(t),XNo=i(j),Wb=n(j,"LI",{});var hke=s(Wb);hhe=n(hke,"STRONG",{});var q_t=s(hhe);zNo=r(q_t,"mpnet"),q_t.forEach(t),WNo=r(hke," \u2014 "),rV=n(hke,"A",{href:!0});var j_t=s(rV);QNo=r(j_t,"MPNetForSequenceClassification"),j_t.forEach(t),HNo=r(hke," (MPNet model)"),hke.forEach(t),UNo=i(j),Qb=n(j,"LI",{});var pke=s(Qb);phe=n(pke,"STRONG",{});var D_t=s(phe);JNo=r(D_t,"nystromformer"),D_t.forEach(t),YNo=r(pke," \u2014 "),tV=n(pke,"A",{href:!0});var G_t=s(tV);KNo=r(G_t,"NystromformerForSequenceClassification"),G_t.forEach(t),ZNo=r(pke," (Nystr\xF6mformer model)"),pke.forEach(t),eqo=i(j),Hb=n(j,"LI",{});var uke=s(Hb);uhe=n(uke,"STRONG",{});var O_t=s(uhe);oqo=r(O_t,"openai-gpt"),O_t.forEach(t),rqo=r(uke," \u2014 "),aV=n(uke,"A",{href:!0});var V_t=s(aV);tqo=r(V_t,"OpenAIGPTForSequenceClassification"),V_t.forEach(t),aqo=r(uke," (OpenAI GPT model)"),uke.forEach(t),nqo=i(j),Ub=n(j,"LI",{});var _ke=s(Ub);_he=n(_ke,"STRONG",{});var X_t=s(_he);sqo=r(X_t,"perceiver"),X_t.forEach(t),lqo=r(_ke," \u2014 "),nV=n(_ke,"A",{href:!0});var z_t=s(nV);iqo=r(z_t,"PerceiverForSequenceClassification"),z_t.forEach(t),dqo=r(_ke," (Perceiver model)"),_ke.forEach(t),cqo=i(j),Jb=n(j,"LI",{});var bke=s(Jb);bhe=n(bke,"STRONG",{});var W_t=s(bhe);fqo=r(W_t,"plbart"),W_t.forEach(t),mqo=r(bke," \u2014 "),sV=n(bke,"A",{href:!0});var Q_t=s(sV);gqo=r(Q_t,"PLBartForSequenceClassification"),Q_t.forEach(t),hqo=r(bke," (PLBart model)"),bke.forEach(t),pqo=i(j),Yb=n(j,"LI",{});var vke=s(Yb);vhe=n(vke,"STRONG",{});var H_t=s(vhe);uqo=r(H_t,"qdqbert"),H_t.forEach(t),_qo=r(vke," \u2014 "),lV=n(vke,"A",{href:!0});var U_t=s(lV);bqo=r(U_t,"QDQBertForSequenceClassification"),U_t.forEach(t),vqo=r(vke," (QDQBert model)"),vke.forEach(t),Fqo=i(j),Kb=n(j,"LI",{});var Fke=s(Kb);Fhe=n(Fke,"STRONG",{});var J_t=s(Fhe);Tqo=r(J_t,"reformer"),J_t.forEach(t),Mqo=r(Fke," \u2014 "),iV=n(Fke,"A",{href:!0});var Y_t=s(iV);Eqo=r(Y_t,"ReformerForSequenceClassification"),Y_t.forEach(t),Cqo=r(Fke," (Reformer model)"),Fke.forEach(t),wqo=i(j),Zb=n(j,"LI",{});var Tke=s(Zb);The=n(Tke,"STRONG",{});var K_t=s(The);Aqo=r(K_t,"rembert"),K_t.forEach(t),Lqo=r(Tke," \u2014 "),dV=n(Tke,"A",{href:!0});var Z_t=s(dV);yqo=r(Z_t,"RemBertForSequenceClassification"),Z_t.forEach(t),xqo=r(Tke," (RemBERT model)"),Tke.forEach(t),$qo=i(j),ev=n(j,"LI",{});var Mke=s(ev);Mhe=n(Mke,"STRONG",{});var e2t=s(Mhe);kqo=r(e2t,"roberta"),e2t.forEach(t),Sqo=r(Mke," \u2014 "),cV=n(Mke,"A",{href:!0});var o2t=s(cV);Rqo=r(o2t,"RobertaForSequenceClassification"),o2t.forEach(t),Pqo=r(Mke," (RoBERTa model)"),Mke.forEach(t),Bqo=i(j),ov=n(j,"LI",{});var Eke=s(ov);Ehe=n(Eke,"STRONG",{});var r2t=s(Ehe);Iqo=r(r2t,"roformer"),r2t.forEach(t),Nqo=r(Eke," \u2014 "),fV=n(Eke,"A",{href:!0});var t2t=s(fV);qqo=r(t2t,"RoFormerForSequenceClassification"),t2t.forEach(t),jqo=r(Eke," (RoFormer model)"),Eke.forEach(t),Dqo=i(j),rv=n(j,"LI",{});var Cke=s(rv);Che=n(Cke,"STRONG",{});var a2t=s(Che);Gqo=r(a2t,"squeezebert"),a2t.forEach(t),Oqo=r(Cke," \u2014 "),mV=n(Cke,"A",{href:!0});var n2t=s(mV);Vqo=r(n2t,"SqueezeBertForSequenceClassification"),n2t.forEach(t),Xqo=r(Cke," (SqueezeBERT model)"),Cke.forEach(t),zqo=i(j),tv=n(j,"LI",{});var wke=s(tv);whe=n(wke,"STRONG",{});var s2t=s(whe);Wqo=r(s2t,"tapas"),s2t.forEach(t),Qqo=r(wke," \u2014 "),gV=n(wke,"A",{href:!0});var l2t=s(gV);Hqo=r(l2t,"TapasForSequenceClassification"),l2t.forEach(t),Uqo=r(wke," (TAPAS model)"),wke.forEach(t),Jqo=i(j),av=n(j,"LI",{});var Ake=s(av);Ahe=n(Ake,"STRONG",{});var i2t=s(Ahe);Yqo=r(i2t,"transfo-xl"),i2t.forEach(t),Kqo=r(Ake," \u2014 "),hV=n(Ake,"A",{href:!0});var d2t=s(hV);Zqo=r(d2t,"TransfoXLForSequenceClassification"),d2t.forEach(t),ejo=r(Ake," (Transformer-XL model)"),Ake.forEach(t),ojo=i(j),nv=n(j,"LI",{});var Lke=s(nv);Lhe=n(Lke,"STRONG",{});var c2t=s(Lhe);rjo=r(c2t,"xlm"),c2t.forEach(t),tjo=r(Lke," \u2014 "),pV=n(Lke,"A",{href:!0});var f2t=s(pV);ajo=r(f2t,"XLMForSequenceClassification"),f2t.forEach(t),njo=r(Lke," (XLM model)"),Lke.forEach(t),sjo=i(j),sv=n(j,"LI",{});var yke=s(sv);yhe=n(yke,"STRONG",{});var m2t=s(yhe);ljo=r(m2t,"xlm-roberta"),m2t.forEach(t),ijo=r(yke," \u2014 "),uV=n(yke,"A",{href:!0});var g2t=s(uV);djo=r(g2t,"XLMRobertaForSequenceClassification"),g2t.forEach(t),cjo=r(yke," (XLM-RoBERTa model)"),yke.forEach(t),fjo=i(j),lv=n(j,"LI",{});var xke=s(lv);xhe=n(xke,"STRONG",{});var h2t=s(xhe);mjo=r(h2t,"xlm-roberta-xl"),h2t.forEach(t),gjo=r(xke," \u2014 "),_V=n(xke,"A",{href:!0});var p2t=s(_V);hjo=r(p2t,"XLMRobertaXLForSequenceClassification"),p2t.forEach(t),pjo=r(xke," (XLM-RoBERTa-XL model)"),xke.forEach(t),ujo=i(j),iv=n(j,"LI",{});var $ke=s(iv);$he=n($ke,"STRONG",{});var u2t=s($he);_jo=r(u2t,"xlnet"),u2t.forEach(t),bjo=r($ke," \u2014 "),bV=n($ke,"A",{href:!0});var _2t=s(bV);vjo=r(_2t,"XLNetForSequenceClassification"),_2t.forEach(t),Fjo=r($ke," (XLNet model)"),$ke.forEach(t),Tjo=i(j),dv=n(j,"LI",{});var kke=s(dv);khe=n(kke,"STRONG",{});var b2t=s(khe);Mjo=r(b2t,"yoso"),b2t.forEach(t),Ejo=r(kke," \u2014 "),vV=n(kke,"A",{href:!0});var v2t=s(vV);Cjo=r(v2t,"YosoForSequenceClassification"),v2t.forEach(t),wjo=r(kke," (YOSO model)"),kke.forEach(t),j.forEach(t),Ajo=i(da),cv=n(da,"P",{});var Ske=s(cv);Ljo=r(Ske,"The model is set in evaluation mode by default using "),She=n(Ske,"CODE",{});var F2t=s(She);yjo=r(F2t,"model.eval()"),F2t.forEach(t),xjo=r(Ske,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rhe=n(Ske,"CODE",{});var T2t=s(Rhe);$jo=r(T2t,"model.train()"),T2t.forEach(t),Ske.forEach(t),kjo=i(da),T(fv.$$.fragment,da),da.forEach(t),el.forEach(t),pGe=i(f),Ki=n(f,"H2",{class:!0});var TVe=s(Ki);mv=n(TVe,"A",{id:!0,class:!0,href:!0});var M2t=s(mv);Phe=n(M2t,"SPAN",{});var E2t=s(Phe);T(vL.$$.fragment,E2t),E2t.forEach(t),M2t.forEach(t),Sjo=i(TVe),Bhe=n(TVe,"SPAN",{});var C2t=s(Bhe);Rjo=r(C2t,"AutoModelForMultipleChoice"),C2t.forEach(t),TVe.forEach(t),uGe=i(f),Bo=n(f,"DIV",{class:!0});var ol=s(Bo);T(FL.$$.fragment,ol),Pjo=i(ol),Zi=n(ol,"P",{});var noe=s(Zi);Bjo=r(noe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),FV=n(noe,"A",{href:!0});var w2t=s(FV);Ijo=r(w2t,"from_pretrained()"),w2t.forEach(t),Njo=r(noe," class method or the "),TV=n(noe,"A",{href:!0});var A2t=s(TV);qjo=r(A2t,"from_config()"),A2t.forEach(t),jjo=r(noe,` class
method.`),noe.forEach(t),Djo=i(ol),TL=n(ol,"P",{});var MVe=s(TL);Gjo=r(MVe,"This class cannot be instantiated directly using "),Ihe=n(MVe,"CODE",{});var L2t=s(Ihe);Ojo=r(L2t,"__init__()"),L2t.forEach(t),Vjo=r(MVe," (throws an error)."),MVe.forEach(t),Xjo=i(ol),ft=n(ol,"DIV",{class:!0});var k0=s(ft);T(ML.$$.fragment,k0),zjo=i(k0),Nhe=n(k0,"P",{});var y2t=s(Nhe);Wjo=r(y2t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),y2t.forEach(t),Qjo=i(k0),ed=n(k0,"P",{});var soe=s(ed);Hjo=r(soe,`Note:
Loading a model from its configuration file does `),qhe=n(soe,"STRONG",{});var x2t=s(qhe);Ujo=r(x2t,"not"),x2t.forEach(t),Jjo=r(soe,` load the model weights. It only affects the
model\u2019s configuration. Use `),MV=n(soe,"A",{href:!0});var $2t=s(MV);Yjo=r($2t,"from_pretrained()"),$2t.forEach(t),Kjo=r(soe," to load the model weights."),soe.forEach(t),Zjo=i(k0),T(gv.$$.fragment,k0),k0.forEach(t),eDo=i(ol),ro=n(ol,"DIV",{class:!0});var ca=s(ro);T(EL.$$.fragment,ca),oDo=i(ca),jhe=n(ca,"P",{});var k2t=s(jhe);rDo=r(k2t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),k2t.forEach(t),tDo=i(ca),qa=n(ca,"P",{});var S0=s(qa);aDo=r(S0,"The model class to instantiate is selected based on the "),Dhe=n(S0,"CODE",{});var S2t=s(Dhe);nDo=r(S2t,"model_type"),S2t.forEach(t),sDo=r(S0,` property of the config object (either
passed as an argument or loaded from `),Ghe=n(S0,"CODE",{});var R2t=s(Ghe);lDo=r(R2t,"pretrained_model_name_or_path"),R2t.forEach(t),iDo=r(S0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ohe=n(S0,"CODE",{});var P2t=s(Ohe);dDo=r(P2t,"pretrained_model_name_or_path"),P2t.forEach(t),cDo=r(S0,":"),S0.forEach(t),fDo=i(ca),Z=n(ca,"UL",{});var ee=s(Z);hv=n(ee,"LI",{});var Rke=s(hv);Vhe=n(Rke,"STRONG",{});var B2t=s(Vhe);mDo=r(B2t,"albert"),B2t.forEach(t),gDo=r(Rke," \u2014 "),EV=n(Rke,"A",{href:!0});var I2t=s(EV);hDo=r(I2t,"AlbertForMultipleChoice"),I2t.forEach(t),pDo=r(Rke," (ALBERT model)"),Rke.forEach(t),uDo=i(ee),pv=n(ee,"LI",{});var Pke=s(pv);Xhe=n(Pke,"STRONG",{});var N2t=s(Xhe);_Do=r(N2t,"bert"),N2t.forEach(t),bDo=r(Pke," \u2014 "),CV=n(Pke,"A",{href:!0});var q2t=s(CV);vDo=r(q2t,"BertForMultipleChoice"),q2t.forEach(t),FDo=r(Pke," (BERT model)"),Pke.forEach(t),TDo=i(ee),uv=n(ee,"LI",{});var Bke=s(uv);zhe=n(Bke,"STRONG",{});var j2t=s(zhe);MDo=r(j2t,"big_bird"),j2t.forEach(t),EDo=r(Bke," \u2014 "),wV=n(Bke,"A",{href:!0});var D2t=s(wV);CDo=r(D2t,"BigBirdForMultipleChoice"),D2t.forEach(t),wDo=r(Bke," (BigBird model)"),Bke.forEach(t),ADo=i(ee),_v=n(ee,"LI",{});var Ike=s(_v);Whe=n(Ike,"STRONG",{});var G2t=s(Whe);LDo=r(G2t,"camembert"),G2t.forEach(t),yDo=r(Ike," \u2014 "),AV=n(Ike,"A",{href:!0});var O2t=s(AV);xDo=r(O2t,"CamembertForMultipleChoice"),O2t.forEach(t),$Do=r(Ike," (CamemBERT model)"),Ike.forEach(t),kDo=i(ee),bv=n(ee,"LI",{});var Nke=s(bv);Qhe=n(Nke,"STRONG",{});var V2t=s(Qhe);SDo=r(V2t,"canine"),V2t.forEach(t),RDo=r(Nke," \u2014 "),LV=n(Nke,"A",{href:!0});var X2t=s(LV);PDo=r(X2t,"CanineForMultipleChoice"),X2t.forEach(t),BDo=r(Nke," (CANINE model)"),Nke.forEach(t),IDo=i(ee),vv=n(ee,"LI",{});var qke=s(vv);Hhe=n(qke,"STRONG",{});var z2t=s(Hhe);NDo=r(z2t,"convbert"),z2t.forEach(t),qDo=r(qke," \u2014 "),yV=n(qke,"A",{href:!0});var W2t=s(yV);jDo=r(W2t,"ConvBertForMultipleChoice"),W2t.forEach(t),DDo=r(qke," (ConvBERT model)"),qke.forEach(t),GDo=i(ee),Fv=n(ee,"LI",{});var jke=s(Fv);Uhe=n(jke,"STRONG",{});var Q2t=s(Uhe);ODo=r(Q2t,"data2vec-text"),Q2t.forEach(t),VDo=r(jke," \u2014 "),xV=n(jke,"A",{href:!0});var H2t=s(xV);XDo=r(H2t,"Data2VecTextForMultipleChoice"),H2t.forEach(t),zDo=r(jke," (Data2VecText model)"),jke.forEach(t),WDo=i(ee),Tv=n(ee,"LI",{});var Dke=s(Tv);Jhe=n(Dke,"STRONG",{});var U2t=s(Jhe);QDo=r(U2t,"deberta-v2"),U2t.forEach(t),HDo=r(Dke," \u2014 "),$V=n(Dke,"A",{href:!0});var J2t=s($V);UDo=r(J2t,"DebertaV2ForMultipleChoice"),J2t.forEach(t),JDo=r(Dke," (DeBERTa-v2 model)"),Dke.forEach(t),YDo=i(ee),Mv=n(ee,"LI",{});var Gke=s(Mv);Yhe=n(Gke,"STRONG",{});var Y2t=s(Yhe);KDo=r(Y2t,"distilbert"),Y2t.forEach(t),ZDo=r(Gke," \u2014 "),kV=n(Gke,"A",{href:!0});var K2t=s(kV);eGo=r(K2t,"DistilBertForMultipleChoice"),K2t.forEach(t),oGo=r(Gke," (DistilBERT model)"),Gke.forEach(t),rGo=i(ee),Ev=n(ee,"LI",{});var Oke=s(Ev);Khe=n(Oke,"STRONG",{});var Z2t=s(Khe);tGo=r(Z2t,"electra"),Z2t.forEach(t),aGo=r(Oke," \u2014 "),SV=n(Oke,"A",{href:!0});var e1t=s(SV);nGo=r(e1t,"ElectraForMultipleChoice"),e1t.forEach(t),sGo=r(Oke," (ELECTRA model)"),Oke.forEach(t),lGo=i(ee),Cv=n(ee,"LI",{});var Vke=s(Cv);Zhe=n(Vke,"STRONG",{});var o1t=s(Zhe);iGo=r(o1t,"flaubert"),o1t.forEach(t),dGo=r(Vke," \u2014 "),RV=n(Vke,"A",{href:!0});var r1t=s(RV);cGo=r(r1t,"FlaubertForMultipleChoice"),r1t.forEach(t),fGo=r(Vke," (FlauBERT model)"),Vke.forEach(t),mGo=i(ee),wv=n(ee,"LI",{});var Xke=s(wv);epe=n(Xke,"STRONG",{});var t1t=s(epe);gGo=r(t1t,"fnet"),t1t.forEach(t),hGo=r(Xke," \u2014 "),PV=n(Xke,"A",{href:!0});var a1t=s(PV);pGo=r(a1t,"FNetForMultipleChoice"),a1t.forEach(t),uGo=r(Xke," (FNet model)"),Xke.forEach(t),_Go=i(ee),Av=n(ee,"LI",{});var zke=s(Av);ope=n(zke,"STRONG",{});var n1t=s(ope);bGo=r(n1t,"funnel"),n1t.forEach(t),vGo=r(zke," \u2014 "),BV=n(zke,"A",{href:!0});var s1t=s(BV);FGo=r(s1t,"FunnelForMultipleChoice"),s1t.forEach(t),TGo=r(zke," (Funnel Transformer model)"),zke.forEach(t),MGo=i(ee),Lv=n(ee,"LI",{});var Wke=s(Lv);rpe=n(Wke,"STRONG",{});var l1t=s(rpe);EGo=r(l1t,"ibert"),l1t.forEach(t),CGo=r(Wke," \u2014 "),IV=n(Wke,"A",{href:!0});var i1t=s(IV);wGo=r(i1t,"IBertForMultipleChoice"),i1t.forEach(t),AGo=r(Wke," (I-BERT model)"),Wke.forEach(t),LGo=i(ee),yv=n(ee,"LI",{});var Qke=s(yv);tpe=n(Qke,"STRONG",{});var d1t=s(tpe);yGo=r(d1t,"longformer"),d1t.forEach(t),xGo=r(Qke," \u2014 "),NV=n(Qke,"A",{href:!0});var c1t=s(NV);$Go=r(c1t,"LongformerForMultipleChoice"),c1t.forEach(t),kGo=r(Qke," (Longformer model)"),Qke.forEach(t),SGo=i(ee),xv=n(ee,"LI",{});var Hke=s(xv);ape=n(Hke,"STRONG",{});var f1t=s(ape);RGo=r(f1t,"megatron-bert"),f1t.forEach(t),PGo=r(Hke," \u2014 "),qV=n(Hke,"A",{href:!0});var m1t=s(qV);BGo=r(m1t,"MegatronBertForMultipleChoice"),m1t.forEach(t),IGo=r(Hke," (Megatron-BERT model)"),Hke.forEach(t),NGo=i(ee),$v=n(ee,"LI",{});var Uke=s($v);npe=n(Uke,"STRONG",{});var g1t=s(npe);qGo=r(g1t,"mobilebert"),g1t.forEach(t),jGo=r(Uke," \u2014 "),jV=n(Uke,"A",{href:!0});var h1t=s(jV);DGo=r(h1t,"MobileBertForMultipleChoice"),h1t.forEach(t),GGo=r(Uke," (MobileBERT model)"),Uke.forEach(t),OGo=i(ee),kv=n(ee,"LI",{});var Jke=s(kv);spe=n(Jke,"STRONG",{});var p1t=s(spe);VGo=r(p1t,"mpnet"),p1t.forEach(t),XGo=r(Jke," \u2014 "),DV=n(Jke,"A",{href:!0});var u1t=s(DV);zGo=r(u1t,"MPNetForMultipleChoice"),u1t.forEach(t),WGo=r(Jke," (MPNet model)"),Jke.forEach(t),QGo=i(ee),Sv=n(ee,"LI",{});var Yke=s(Sv);lpe=n(Yke,"STRONG",{});var _1t=s(lpe);HGo=r(_1t,"nystromformer"),_1t.forEach(t),UGo=r(Yke," \u2014 "),GV=n(Yke,"A",{href:!0});var b1t=s(GV);JGo=r(b1t,"NystromformerForMultipleChoice"),b1t.forEach(t),YGo=r(Yke," (Nystr\xF6mformer model)"),Yke.forEach(t),KGo=i(ee),Rv=n(ee,"LI",{});var Kke=s(Rv);ipe=n(Kke,"STRONG",{});var v1t=s(ipe);ZGo=r(v1t,"qdqbert"),v1t.forEach(t),eOo=r(Kke," \u2014 "),OV=n(Kke,"A",{href:!0});var F1t=s(OV);oOo=r(F1t,"QDQBertForMultipleChoice"),F1t.forEach(t),rOo=r(Kke," (QDQBert model)"),Kke.forEach(t),tOo=i(ee),Pv=n(ee,"LI",{});var Zke=s(Pv);dpe=n(Zke,"STRONG",{});var T1t=s(dpe);aOo=r(T1t,"rembert"),T1t.forEach(t),nOo=r(Zke," \u2014 "),VV=n(Zke,"A",{href:!0});var M1t=s(VV);sOo=r(M1t,"RemBertForMultipleChoice"),M1t.forEach(t),lOo=r(Zke," (RemBERT model)"),Zke.forEach(t),iOo=i(ee),Bv=n(ee,"LI",{});var eSe=s(Bv);cpe=n(eSe,"STRONG",{});var E1t=s(cpe);dOo=r(E1t,"roberta"),E1t.forEach(t),cOo=r(eSe," \u2014 "),XV=n(eSe,"A",{href:!0});var C1t=s(XV);fOo=r(C1t,"RobertaForMultipleChoice"),C1t.forEach(t),mOo=r(eSe," (RoBERTa model)"),eSe.forEach(t),gOo=i(ee),Iv=n(ee,"LI",{});var oSe=s(Iv);fpe=n(oSe,"STRONG",{});var w1t=s(fpe);hOo=r(w1t,"roformer"),w1t.forEach(t),pOo=r(oSe," \u2014 "),zV=n(oSe,"A",{href:!0});var A1t=s(zV);uOo=r(A1t,"RoFormerForMultipleChoice"),A1t.forEach(t),_Oo=r(oSe," (RoFormer model)"),oSe.forEach(t),bOo=i(ee),Nv=n(ee,"LI",{});var rSe=s(Nv);mpe=n(rSe,"STRONG",{});var L1t=s(mpe);vOo=r(L1t,"squeezebert"),L1t.forEach(t),FOo=r(rSe," \u2014 "),WV=n(rSe,"A",{href:!0});var y1t=s(WV);TOo=r(y1t,"SqueezeBertForMultipleChoice"),y1t.forEach(t),MOo=r(rSe," (SqueezeBERT model)"),rSe.forEach(t),EOo=i(ee),qv=n(ee,"LI",{});var tSe=s(qv);gpe=n(tSe,"STRONG",{});var x1t=s(gpe);COo=r(x1t,"xlm"),x1t.forEach(t),wOo=r(tSe," \u2014 "),QV=n(tSe,"A",{href:!0});var $1t=s(QV);AOo=r($1t,"XLMForMultipleChoice"),$1t.forEach(t),LOo=r(tSe," (XLM model)"),tSe.forEach(t),yOo=i(ee),jv=n(ee,"LI",{});var aSe=s(jv);hpe=n(aSe,"STRONG",{});var k1t=s(hpe);xOo=r(k1t,"xlm-roberta"),k1t.forEach(t),$Oo=r(aSe," \u2014 "),HV=n(aSe,"A",{href:!0});var S1t=s(HV);kOo=r(S1t,"XLMRobertaForMultipleChoice"),S1t.forEach(t),SOo=r(aSe," (XLM-RoBERTa model)"),aSe.forEach(t),ROo=i(ee),Dv=n(ee,"LI",{});var nSe=s(Dv);ppe=n(nSe,"STRONG",{});var R1t=s(ppe);POo=r(R1t,"xlm-roberta-xl"),R1t.forEach(t),BOo=r(nSe," \u2014 "),UV=n(nSe,"A",{href:!0});var P1t=s(UV);IOo=r(P1t,"XLMRobertaXLForMultipleChoice"),P1t.forEach(t),NOo=r(nSe," (XLM-RoBERTa-XL model)"),nSe.forEach(t),qOo=i(ee),Gv=n(ee,"LI",{});var sSe=s(Gv);upe=n(sSe,"STRONG",{});var B1t=s(upe);jOo=r(B1t,"xlnet"),B1t.forEach(t),DOo=r(sSe," \u2014 "),JV=n(sSe,"A",{href:!0});var I1t=s(JV);GOo=r(I1t,"XLNetForMultipleChoice"),I1t.forEach(t),OOo=r(sSe," (XLNet model)"),sSe.forEach(t),VOo=i(ee),Ov=n(ee,"LI",{});var lSe=s(Ov);_pe=n(lSe,"STRONG",{});var N1t=s(_pe);XOo=r(N1t,"yoso"),N1t.forEach(t),zOo=r(lSe," \u2014 "),YV=n(lSe,"A",{href:!0});var q1t=s(YV);WOo=r(q1t,"YosoForMultipleChoice"),q1t.forEach(t),QOo=r(lSe," (YOSO model)"),lSe.forEach(t),ee.forEach(t),HOo=i(ca),Vv=n(ca,"P",{});var iSe=s(Vv);UOo=r(iSe,"The model is set in evaluation mode by default using "),bpe=n(iSe,"CODE",{});var j1t=s(bpe);JOo=r(j1t,"model.eval()"),j1t.forEach(t),YOo=r(iSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vpe=n(iSe,"CODE",{});var D1t=s(vpe);KOo=r(D1t,"model.train()"),D1t.forEach(t),iSe.forEach(t),ZOo=i(ca),T(Xv.$$.fragment,ca),ca.forEach(t),ol.forEach(t),_Ge=i(f),od=n(f,"H2",{class:!0});var EVe=s(od);zv=n(EVe,"A",{id:!0,class:!0,href:!0});var G1t=s(zv);Fpe=n(G1t,"SPAN",{});var O1t=s(Fpe);T(CL.$$.fragment,O1t),O1t.forEach(t),G1t.forEach(t),eVo=i(EVe),Tpe=n(EVe,"SPAN",{});var V1t=s(Tpe);oVo=r(V1t,"AutoModelForNextSentencePrediction"),V1t.forEach(t),EVe.forEach(t),bGe=i(f),Io=n(f,"DIV",{class:!0});var rl=s(Io);T(wL.$$.fragment,rl),rVo=i(rl),rd=n(rl,"P",{});var loe=s(rd);tVo=r(loe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),KV=n(loe,"A",{href:!0});var X1t=s(KV);aVo=r(X1t,"from_pretrained()"),X1t.forEach(t),nVo=r(loe," class method or the "),ZV=n(loe,"A",{href:!0});var z1t=s(ZV);sVo=r(z1t,"from_config()"),z1t.forEach(t),lVo=r(loe,` class
method.`),loe.forEach(t),iVo=i(rl),AL=n(rl,"P",{});var CVe=s(AL);dVo=r(CVe,"This class cannot be instantiated directly using "),Mpe=n(CVe,"CODE",{});var W1t=s(Mpe);cVo=r(W1t,"__init__()"),W1t.forEach(t),fVo=r(CVe," (throws an error)."),CVe.forEach(t),mVo=i(rl),mt=n(rl,"DIV",{class:!0});var R0=s(mt);T(LL.$$.fragment,R0),gVo=i(R0),Epe=n(R0,"P",{});var Q1t=s(Epe);hVo=r(Q1t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Q1t.forEach(t),pVo=i(R0),td=n(R0,"P",{});var ioe=s(td);uVo=r(ioe,`Note:
Loading a model from its configuration file does `),Cpe=n(ioe,"STRONG",{});var H1t=s(Cpe);_Vo=r(H1t,"not"),H1t.forEach(t),bVo=r(ioe,` load the model weights. It only affects the
model\u2019s configuration. Use `),eX=n(ioe,"A",{href:!0});var U1t=s(eX);vVo=r(U1t,"from_pretrained()"),U1t.forEach(t),FVo=r(ioe," to load the model weights."),ioe.forEach(t),TVo=i(R0),T(Wv.$$.fragment,R0),R0.forEach(t),MVo=i(rl),to=n(rl,"DIV",{class:!0});var fa=s(to);T(yL.$$.fragment,fa),EVo=i(fa),wpe=n(fa,"P",{});var J1t=s(wpe);CVo=r(J1t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),J1t.forEach(t),wVo=i(fa),ja=n(fa,"P",{});var P0=s(ja);AVo=r(P0,"The model class to instantiate is selected based on the "),Ape=n(P0,"CODE",{});var Y1t=s(Ape);LVo=r(Y1t,"model_type"),Y1t.forEach(t),yVo=r(P0,` property of the config object (either
passed as an argument or loaded from `),Lpe=n(P0,"CODE",{});var K1t=s(Lpe);xVo=r(K1t,"pretrained_model_name_or_path"),K1t.forEach(t),$Vo=r(P0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ype=n(P0,"CODE",{});var Z1t=s(ype);kVo=r(Z1t,"pretrained_model_name_or_path"),Z1t.forEach(t),SVo=r(P0,":"),P0.forEach(t),RVo=i(fa),Zr=n(fa,"UL",{});var tl=s(Zr);Qv=n(tl,"LI",{});var dSe=s(Qv);xpe=n(dSe,"STRONG",{});var ebt=s(xpe);PVo=r(ebt,"bert"),ebt.forEach(t),BVo=r(dSe," \u2014 "),oX=n(dSe,"A",{href:!0});var obt=s(oX);IVo=r(obt,"BertForNextSentencePrediction"),obt.forEach(t),NVo=r(dSe," (BERT model)"),dSe.forEach(t),qVo=i(tl),Hv=n(tl,"LI",{});var cSe=s(Hv);$pe=n(cSe,"STRONG",{});var rbt=s($pe);jVo=r(rbt,"fnet"),rbt.forEach(t),DVo=r(cSe," \u2014 "),rX=n(cSe,"A",{href:!0});var tbt=s(rX);GVo=r(tbt,"FNetForNextSentencePrediction"),tbt.forEach(t),OVo=r(cSe," (FNet model)"),cSe.forEach(t),VVo=i(tl),Uv=n(tl,"LI",{});var fSe=s(Uv);kpe=n(fSe,"STRONG",{});var abt=s(kpe);XVo=r(abt,"megatron-bert"),abt.forEach(t),zVo=r(fSe," \u2014 "),tX=n(fSe,"A",{href:!0});var nbt=s(tX);WVo=r(nbt,"MegatronBertForNextSentencePrediction"),nbt.forEach(t),QVo=r(fSe," (Megatron-BERT model)"),fSe.forEach(t),HVo=i(tl),Jv=n(tl,"LI",{});var mSe=s(Jv);Spe=n(mSe,"STRONG",{});var sbt=s(Spe);UVo=r(sbt,"mobilebert"),sbt.forEach(t),JVo=r(mSe," \u2014 "),aX=n(mSe,"A",{href:!0});var lbt=s(aX);YVo=r(lbt,"MobileBertForNextSentencePrediction"),lbt.forEach(t),KVo=r(mSe," (MobileBERT model)"),mSe.forEach(t),ZVo=i(tl),Yv=n(tl,"LI",{});var gSe=s(Yv);Rpe=n(gSe,"STRONG",{});var ibt=s(Rpe);eXo=r(ibt,"qdqbert"),ibt.forEach(t),oXo=r(gSe," \u2014 "),nX=n(gSe,"A",{href:!0});var dbt=s(nX);rXo=r(dbt,"QDQBertForNextSentencePrediction"),dbt.forEach(t),tXo=r(gSe," (QDQBert model)"),gSe.forEach(t),tl.forEach(t),aXo=i(fa),Kv=n(fa,"P",{});var hSe=s(Kv);nXo=r(hSe,"The model is set in evaluation mode by default using "),Ppe=n(hSe,"CODE",{});var cbt=s(Ppe);sXo=r(cbt,"model.eval()"),cbt.forEach(t),lXo=r(hSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bpe=n(hSe,"CODE",{});var fbt=s(Bpe);iXo=r(fbt,"model.train()"),fbt.forEach(t),hSe.forEach(t),dXo=i(fa),T(Zv.$$.fragment,fa),fa.forEach(t),rl.forEach(t),vGe=i(f),ad=n(f,"H2",{class:!0});var wVe=s(ad);eF=n(wVe,"A",{id:!0,class:!0,href:!0});var mbt=s(eF);Ipe=n(mbt,"SPAN",{});var gbt=s(Ipe);T(xL.$$.fragment,gbt),gbt.forEach(t),mbt.forEach(t),cXo=i(wVe),Npe=n(wVe,"SPAN",{});var hbt=s(Npe);fXo=r(hbt,"AutoModelForTokenClassification"),hbt.forEach(t),wVe.forEach(t),FGe=i(f),No=n(f,"DIV",{class:!0});var al=s(No);T($L.$$.fragment,al),mXo=i(al),nd=n(al,"P",{});var doe=s(nd);gXo=r(doe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),sX=n(doe,"A",{href:!0});var pbt=s(sX);hXo=r(pbt,"from_pretrained()"),pbt.forEach(t),pXo=r(doe," class method or the "),lX=n(doe,"A",{href:!0});var ubt=s(lX);uXo=r(ubt,"from_config()"),ubt.forEach(t),_Xo=r(doe,` class
method.`),doe.forEach(t),bXo=i(al),kL=n(al,"P",{});var AVe=s(kL);vXo=r(AVe,"This class cannot be instantiated directly using "),qpe=n(AVe,"CODE",{});var _bt=s(qpe);FXo=r(_bt,"__init__()"),_bt.forEach(t),TXo=r(AVe," (throws an error)."),AVe.forEach(t),MXo=i(al),gt=n(al,"DIV",{class:!0});var B0=s(gt);T(SL.$$.fragment,B0),EXo=i(B0),jpe=n(B0,"P",{});var bbt=s(jpe);CXo=r(bbt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),bbt.forEach(t),wXo=i(B0),sd=n(B0,"P",{});var coe=s(sd);AXo=r(coe,`Note:
Loading a model from its configuration file does `),Dpe=n(coe,"STRONG",{});var vbt=s(Dpe);LXo=r(vbt,"not"),vbt.forEach(t),yXo=r(coe,` load the model weights. It only affects the
model\u2019s configuration. Use `),iX=n(coe,"A",{href:!0});var Fbt=s(iX);xXo=r(Fbt,"from_pretrained()"),Fbt.forEach(t),$Xo=r(coe," to load the model weights."),coe.forEach(t),kXo=i(B0),T(oF.$$.fragment,B0),B0.forEach(t),SXo=i(al),ao=n(al,"DIV",{class:!0});var ma=s(ao);T(RL.$$.fragment,ma),RXo=i(ma),Gpe=n(ma,"P",{});var Tbt=s(Gpe);PXo=r(Tbt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Tbt.forEach(t),BXo=i(ma),Da=n(ma,"P",{});var I0=s(Da);IXo=r(I0,"The model class to instantiate is selected based on the "),Ope=n(I0,"CODE",{});var Mbt=s(Ope);NXo=r(Mbt,"model_type"),Mbt.forEach(t),qXo=r(I0,` property of the config object (either
passed as an argument or loaded from `),Vpe=n(I0,"CODE",{});var Ebt=s(Vpe);jXo=r(Ebt,"pretrained_model_name_or_path"),Ebt.forEach(t),DXo=r(I0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xpe=n(I0,"CODE",{});var Cbt=s(Xpe);GXo=r(Cbt,"pretrained_model_name_or_path"),Cbt.forEach(t),OXo=r(I0,":"),I0.forEach(t),VXo=i(ma),U=n(ma,"UL",{});var J=s(U);rF=n(J,"LI",{});var pSe=s(rF);zpe=n(pSe,"STRONG",{});var wbt=s(zpe);XXo=r(wbt,"albert"),wbt.forEach(t),zXo=r(pSe," \u2014 "),dX=n(pSe,"A",{href:!0});var Abt=s(dX);WXo=r(Abt,"AlbertForTokenClassification"),Abt.forEach(t),QXo=r(pSe," (ALBERT model)"),pSe.forEach(t),HXo=i(J),tF=n(J,"LI",{});var uSe=s(tF);Wpe=n(uSe,"STRONG",{});var Lbt=s(Wpe);UXo=r(Lbt,"bert"),Lbt.forEach(t),JXo=r(uSe," \u2014 "),cX=n(uSe,"A",{href:!0});var ybt=s(cX);YXo=r(ybt,"BertForTokenClassification"),ybt.forEach(t),KXo=r(uSe," (BERT model)"),uSe.forEach(t),ZXo=i(J),aF=n(J,"LI",{});var _Se=s(aF);Qpe=n(_Se,"STRONG",{});var xbt=s(Qpe);ezo=r(xbt,"big_bird"),xbt.forEach(t),ozo=r(_Se," \u2014 "),fX=n(_Se,"A",{href:!0});var $bt=s(fX);rzo=r($bt,"BigBirdForTokenClassification"),$bt.forEach(t),tzo=r(_Se," (BigBird model)"),_Se.forEach(t),azo=i(J),nF=n(J,"LI",{});var bSe=s(nF);Hpe=n(bSe,"STRONG",{});var kbt=s(Hpe);nzo=r(kbt,"camembert"),kbt.forEach(t),szo=r(bSe," \u2014 "),mX=n(bSe,"A",{href:!0});var Sbt=s(mX);lzo=r(Sbt,"CamembertForTokenClassification"),Sbt.forEach(t),izo=r(bSe," (CamemBERT model)"),bSe.forEach(t),dzo=i(J),sF=n(J,"LI",{});var vSe=s(sF);Upe=n(vSe,"STRONG",{});var Rbt=s(Upe);czo=r(Rbt,"canine"),Rbt.forEach(t),fzo=r(vSe," \u2014 "),gX=n(vSe,"A",{href:!0});var Pbt=s(gX);mzo=r(Pbt,"CanineForTokenClassification"),Pbt.forEach(t),gzo=r(vSe," (CANINE model)"),vSe.forEach(t),hzo=i(J),lF=n(J,"LI",{});var FSe=s(lF);Jpe=n(FSe,"STRONG",{});var Bbt=s(Jpe);pzo=r(Bbt,"convbert"),Bbt.forEach(t),uzo=r(FSe," \u2014 "),hX=n(FSe,"A",{href:!0});var Ibt=s(hX);_zo=r(Ibt,"ConvBertForTokenClassification"),Ibt.forEach(t),bzo=r(FSe," (ConvBERT model)"),FSe.forEach(t),vzo=i(J),iF=n(J,"LI",{});var TSe=s(iF);Ype=n(TSe,"STRONG",{});var Nbt=s(Ype);Fzo=r(Nbt,"data2vec-text"),Nbt.forEach(t),Tzo=r(TSe," \u2014 "),pX=n(TSe,"A",{href:!0});var qbt=s(pX);Mzo=r(qbt,"Data2VecTextForTokenClassification"),qbt.forEach(t),Ezo=r(TSe," (Data2VecText model)"),TSe.forEach(t),Czo=i(J),dF=n(J,"LI",{});var MSe=s(dF);Kpe=n(MSe,"STRONG",{});var jbt=s(Kpe);wzo=r(jbt,"deberta"),jbt.forEach(t),Azo=r(MSe," \u2014 "),uX=n(MSe,"A",{href:!0});var Dbt=s(uX);Lzo=r(Dbt,"DebertaForTokenClassification"),Dbt.forEach(t),yzo=r(MSe," (DeBERTa model)"),MSe.forEach(t),xzo=i(J),cF=n(J,"LI",{});var ESe=s(cF);Zpe=n(ESe,"STRONG",{});var Gbt=s(Zpe);$zo=r(Gbt,"deberta-v2"),Gbt.forEach(t),kzo=r(ESe," \u2014 "),_X=n(ESe,"A",{href:!0});var Obt=s(_X);Szo=r(Obt,"DebertaV2ForTokenClassification"),Obt.forEach(t),Rzo=r(ESe," (DeBERTa-v2 model)"),ESe.forEach(t),Pzo=i(J),fF=n(J,"LI",{});var CSe=s(fF);eue=n(CSe,"STRONG",{});var Vbt=s(eue);Bzo=r(Vbt,"distilbert"),Vbt.forEach(t),Izo=r(CSe," \u2014 "),bX=n(CSe,"A",{href:!0});var Xbt=s(bX);Nzo=r(Xbt,"DistilBertForTokenClassification"),Xbt.forEach(t),qzo=r(CSe," (DistilBERT model)"),CSe.forEach(t),jzo=i(J),mF=n(J,"LI",{});var wSe=s(mF);oue=n(wSe,"STRONG",{});var zbt=s(oue);Dzo=r(zbt,"electra"),zbt.forEach(t),Gzo=r(wSe," \u2014 "),vX=n(wSe,"A",{href:!0});var Wbt=s(vX);Ozo=r(Wbt,"ElectraForTokenClassification"),Wbt.forEach(t),Vzo=r(wSe," (ELECTRA model)"),wSe.forEach(t),Xzo=i(J),gF=n(J,"LI",{});var ASe=s(gF);rue=n(ASe,"STRONG",{});var Qbt=s(rue);zzo=r(Qbt,"flaubert"),Qbt.forEach(t),Wzo=r(ASe," \u2014 "),FX=n(ASe,"A",{href:!0});var Hbt=s(FX);Qzo=r(Hbt,"FlaubertForTokenClassification"),Hbt.forEach(t),Hzo=r(ASe," (FlauBERT model)"),ASe.forEach(t),Uzo=i(J),hF=n(J,"LI",{});var LSe=s(hF);tue=n(LSe,"STRONG",{});var Ubt=s(tue);Jzo=r(Ubt,"fnet"),Ubt.forEach(t),Yzo=r(LSe," \u2014 "),TX=n(LSe,"A",{href:!0});var Jbt=s(TX);Kzo=r(Jbt,"FNetForTokenClassification"),Jbt.forEach(t),Zzo=r(LSe," (FNet model)"),LSe.forEach(t),eWo=i(J),pF=n(J,"LI",{});var ySe=s(pF);aue=n(ySe,"STRONG",{});var Ybt=s(aue);oWo=r(Ybt,"funnel"),Ybt.forEach(t),rWo=r(ySe," \u2014 "),MX=n(ySe,"A",{href:!0});var Kbt=s(MX);tWo=r(Kbt,"FunnelForTokenClassification"),Kbt.forEach(t),aWo=r(ySe," (Funnel Transformer model)"),ySe.forEach(t),nWo=i(J),uF=n(J,"LI",{});var xSe=s(uF);nue=n(xSe,"STRONG",{});var Zbt=s(nue);sWo=r(Zbt,"gpt2"),Zbt.forEach(t),lWo=r(xSe," \u2014 "),EX=n(xSe,"A",{href:!0});var evt=s(EX);iWo=r(evt,"GPT2ForTokenClassification"),evt.forEach(t),dWo=r(xSe," (OpenAI GPT-2 model)"),xSe.forEach(t),cWo=i(J),_F=n(J,"LI",{});var $Se=s(_F);sue=n($Se,"STRONG",{});var ovt=s(sue);fWo=r(ovt,"ibert"),ovt.forEach(t),mWo=r($Se," \u2014 "),CX=n($Se,"A",{href:!0});var rvt=s(CX);gWo=r(rvt,"IBertForTokenClassification"),rvt.forEach(t),hWo=r($Se," (I-BERT model)"),$Se.forEach(t),pWo=i(J),bF=n(J,"LI",{});var kSe=s(bF);lue=n(kSe,"STRONG",{});var tvt=s(lue);uWo=r(tvt,"layoutlm"),tvt.forEach(t),_Wo=r(kSe," \u2014 "),wX=n(kSe,"A",{href:!0});var avt=s(wX);bWo=r(avt,"LayoutLMForTokenClassification"),avt.forEach(t),vWo=r(kSe," (LayoutLM model)"),kSe.forEach(t),FWo=i(J),vF=n(J,"LI",{});var SSe=s(vF);iue=n(SSe,"STRONG",{});var nvt=s(iue);TWo=r(nvt,"layoutlmv2"),nvt.forEach(t),MWo=r(SSe," \u2014 "),AX=n(SSe,"A",{href:!0});var svt=s(AX);EWo=r(svt,"LayoutLMv2ForTokenClassification"),svt.forEach(t),CWo=r(SSe," (LayoutLMv2 model)"),SSe.forEach(t),wWo=i(J),FF=n(J,"LI",{});var RSe=s(FF);due=n(RSe,"STRONG",{});var lvt=s(due);AWo=r(lvt,"layoutlmv3"),lvt.forEach(t),LWo=r(RSe," \u2014 "),LX=n(RSe,"A",{href:!0});var ivt=s(LX);yWo=r(ivt,"LayoutLMv3ForTokenClassification"),ivt.forEach(t),xWo=r(RSe," (LayoutLMv3 model)"),RSe.forEach(t),$Wo=i(J),TF=n(J,"LI",{});var PSe=s(TF);cue=n(PSe,"STRONG",{});var dvt=s(cue);kWo=r(dvt,"longformer"),dvt.forEach(t),SWo=r(PSe," \u2014 "),yX=n(PSe,"A",{href:!0});var cvt=s(yX);RWo=r(cvt,"LongformerForTokenClassification"),cvt.forEach(t),PWo=r(PSe," (Longformer model)"),PSe.forEach(t),BWo=i(J),MF=n(J,"LI",{});var BSe=s(MF);fue=n(BSe,"STRONG",{});var fvt=s(fue);IWo=r(fvt,"megatron-bert"),fvt.forEach(t),NWo=r(BSe," \u2014 "),xX=n(BSe,"A",{href:!0});var mvt=s(xX);qWo=r(mvt,"MegatronBertForTokenClassification"),mvt.forEach(t),jWo=r(BSe," (Megatron-BERT model)"),BSe.forEach(t),DWo=i(J),EF=n(J,"LI",{});var ISe=s(EF);mue=n(ISe,"STRONG",{});var gvt=s(mue);GWo=r(gvt,"mobilebert"),gvt.forEach(t),OWo=r(ISe," \u2014 "),$X=n(ISe,"A",{href:!0});var hvt=s($X);VWo=r(hvt,"MobileBertForTokenClassification"),hvt.forEach(t),XWo=r(ISe," (MobileBERT model)"),ISe.forEach(t),zWo=i(J),CF=n(J,"LI",{});var NSe=s(CF);gue=n(NSe,"STRONG",{});var pvt=s(gue);WWo=r(pvt,"mpnet"),pvt.forEach(t),QWo=r(NSe," \u2014 "),kX=n(NSe,"A",{href:!0});var uvt=s(kX);HWo=r(uvt,"MPNetForTokenClassification"),uvt.forEach(t),UWo=r(NSe," (MPNet model)"),NSe.forEach(t),JWo=i(J),wF=n(J,"LI",{});var qSe=s(wF);hue=n(qSe,"STRONG",{});var _vt=s(hue);YWo=r(_vt,"nystromformer"),_vt.forEach(t),KWo=r(qSe," \u2014 "),SX=n(qSe,"A",{href:!0});var bvt=s(SX);ZWo=r(bvt,"NystromformerForTokenClassification"),bvt.forEach(t),eQo=r(qSe," (Nystr\xF6mformer model)"),qSe.forEach(t),oQo=i(J),AF=n(J,"LI",{});var jSe=s(AF);pue=n(jSe,"STRONG",{});var vvt=s(pue);rQo=r(vvt,"qdqbert"),vvt.forEach(t),tQo=r(jSe," \u2014 "),RX=n(jSe,"A",{href:!0});var Fvt=s(RX);aQo=r(Fvt,"QDQBertForTokenClassification"),Fvt.forEach(t),nQo=r(jSe," (QDQBert model)"),jSe.forEach(t),sQo=i(J),LF=n(J,"LI",{});var DSe=s(LF);uue=n(DSe,"STRONG",{});var Tvt=s(uue);lQo=r(Tvt,"rembert"),Tvt.forEach(t),iQo=r(DSe," \u2014 "),PX=n(DSe,"A",{href:!0});var Mvt=s(PX);dQo=r(Mvt,"RemBertForTokenClassification"),Mvt.forEach(t),cQo=r(DSe," (RemBERT model)"),DSe.forEach(t),fQo=i(J),yF=n(J,"LI",{});var GSe=s(yF);_ue=n(GSe,"STRONG",{});var Evt=s(_ue);mQo=r(Evt,"roberta"),Evt.forEach(t),gQo=r(GSe," \u2014 "),BX=n(GSe,"A",{href:!0});var Cvt=s(BX);hQo=r(Cvt,"RobertaForTokenClassification"),Cvt.forEach(t),pQo=r(GSe," (RoBERTa model)"),GSe.forEach(t),uQo=i(J),xF=n(J,"LI",{});var OSe=s(xF);bue=n(OSe,"STRONG",{});var wvt=s(bue);_Qo=r(wvt,"roformer"),wvt.forEach(t),bQo=r(OSe," \u2014 "),IX=n(OSe,"A",{href:!0});var Avt=s(IX);vQo=r(Avt,"RoFormerForTokenClassification"),Avt.forEach(t),FQo=r(OSe," (RoFormer model)"),OSe.forEach(t),TQo=i(J),$F=n(J,"LI",{});var VSe=s($F);vue=n(VSe,"STRONG",{});var Lvt=s(vue);MQo=r(Lvt,"squeezebert"),Lvt.forEach(t),EQo=r(VSe," \u2014 "),NX=n(VSe,"A",{href:!0});var yvt=s(NX);CQo=r(yvt,"SqueezeBertForTokenClassification"),yvt.forEach(t),wQo=r(VSe," (SqueezeBERT model)"),VSe.forEach(t),AQo=i(J),kF=n(J,"LI",{});var XSe=s(kF);Fue=n(XSe,"STRONG",{});var xvt=s(Fue);LQo=r(xvt,"xlm"),xvt.forEach(t),yQo=r(XSe," \u2014 "),qX=n(XSe,"A",{href:!0});var $vt=s(qX);xQo=r($vt,"XLMForTokenClassification"),$vt.forEach(t),$Qo=r(XSe," (XLM model)"),XSe.forEach(t),kQo=i(J),SF=n(J,"LI",{});var zSe=s(SF);Tue=n(zSe,"STRONG",{});var kvt=s(Tue);SQo=r(kvt,"xlm-roberta"),kvt.forEach(t),RQo=r(zSe," \u2014 "),jX=n(zSe,"A",{href:!0});var Svt=s(jX);PQo=r(Svt,"XLMRobertaForTokenClassification"),Svt.forEach(t),BQo=r(zSe," (XLM-RoBERTa model)"),zSe.forEach(t),IQo=i(J),RF=n(J,"LI",{});var WSe=s(RF);Mue=n(WSe,"STRONG",{});var Rvt=s(Mue);NQo=r(Rvt,"xlm-roberta-xl"),Rvt.forEach(t),qQo=r(WSe," \u2014 "),DX=n(WSe,"A",{href:!0});var Pvt=s(DX);jQo=r(Pvt,"XLMRobertaXLForTokenClassification"),Pvt.forEach(t),DQo=r(WSe," (XLM-RoBERTa-XL model)"),WSe.forEach(t),GQo=i(J),PF=n(J,"LI",{});var QSe=s(PF);Eue=n(QSe,"STRONG",{});var Bvt=s(Eue);OQo=r(Bvt,"xlnet"),Bvt.forEach(t),VQo=r(QSe," \u2014 "),GX=n(QSe,"A",{href:!0});var Ivt=s(GX);XQo=r(Ivt,"XLNetForTokenClassification"),Ivt.forEach(t),zQo=r(QSe," (XLNet model)"),QSe.forEach(t),WQo=i(J),BF=n(J,"LI",{});var HSe=s(BF);Cue=n(HSe,"STRONG",{});var Nvt=s(Cue);QQo=r(Nvt,"yoso"),Nvt.forEach(t),HQo=r(HSe," \u2014 "),OX=n(HSe,"A",{href:!0});var qvt=s(OX);UQo=r(qvt,"YosoForTokenClassification"),qvt.forEach(t),JQo=r(HSe," (YOSO model)"),HSe.forEach(t),J.forEach(t),YQo=i(ma),IF=n(ma,"P",{});var USe=s(IF);KQo=r(USe,"The model is set in evaluation mode by default using "),wue=n(USe,"CODE",{});var jvt=s(wue);ZQo=r(jvt,"model.eval()"),jvt.forEach(t),eHo=r(USe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Aue=n(USe,"CODE",{});var Dvt=s(Aue);oHo=r(Dvt,"model.train()"),Dvt.forEach(t),USe.forEach(t),rHo=i(ma),T(NF.$$.fragment,ma),ma.forEach(t),al.forEach(t),TGe=i(f),ld=n(f,"H2",{class:!0});var LVe=s(ld);qF=n(LVe,"A",{id:!0,class:!0,href:!0});var Gvt=s(qF);Lue=n(Gvt,"SPAN",{});var Ovt=s(Lue);T(PL.$$.fragment,Ovt),Ovt.forEach(t),Gvt.forEach(t),tHo=i(LVe),yue=n(LVe,"SPAN",{});var Vvt=s(yue);aHo=r(Vvt,"AutoModelForQuestionAnswering"),Vvt.forEach(t),LVe.forEach(t),MGe=i(f),qo=n(f,"DIV",{class:!0});var nl=s(qo);T(BL.$$.fragment,nl),nHo=i(nl),id=n(nl,"P",{});var foe=s(id);sHo=r(foe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),VX=n(foe,"A",{href:!0});var Xvt=s(VX);lHo=r(Xvt,"from_pretrained()"),Xvt.forEach(t),iHo=r(foe," class method or the "),XX=n(foe,"A",{href:!0});var zvt=s(XX);dHo=r(zvt,"from_config()"),zvt.forEach(t),cHo=r(foe,` class
method.`),foe.forEach(t),fHo=i(nl),IL=n(nl,"P",{});var yVe=s(IL);mHo=r(yVe,"This class cannot be instantiated directly using "),xue=n(yVe,"CODE",{});var Wvt=s(xue);gHo=r(Wvt,"__init__()"),Wvt.forEach(t),hHo=r(yVe," (throws an error)."),yVe.forEach(t),pHo=i(nl),ht=n(nl,"DIV",{class:!0});var N0=s(ht);T(NL.$$.fragment,N0),uHo=i(N0),$ue=n(N0,"P",{});var Qvt=s($ue);_Ho=r(Qvt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Qvt.forEach(t),bHo=i(N0),dd=n(N0,"P",{});var moe=s(dd);vHo=r(moe,`Note:
Loading a model from its configuration file does `),kue=n(moe,"STRONG",{});var Hvt=s(kue);FHo=r(Hvt,"not"),Hvt.forEach(t),THo=r(moe,` load the model weights. It only affects the
model\u2019s configuration. Use `),zX=n(moe,"A",{href:!0});var Uvt=s(zX);MHo=r(Uvt,"from_pretrained()"),Uvt.forEach(t),EHo=r(moe," to load the model weights."),moe.forEach(t),CHo=i(N0),T(jF.$$.fragment,N0),N0.forEach(t),wHo=i(nl),no=n(nl,"DIV",{class:!0});var ga=s(no);T(qL.$$.fragment,ga),AHo=i(ga),Sue=n(ga,"P",{});var Jvt=s(Sue);LHo=r(Jvt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Jvt.forEach(t),yHo=i(ga),Ga=n(ga,"P",{});var q0=s(Ga);xHo=r(q0,"The model class to instantiate is selected based on the "),Rue=n(q0,"CODE",{});var Yvt=s(Rue);$Ho=r(Yvt,"model_type"),Yvt.forEach(t),kHo=r(q0,` property of the config object (either
passed as an argument or loaded from `),Pue=n(q0,"CODE",{});var Kvt=s(Pue);SHo=r(Kvt,"pretrained_model_name_or_path"),Kvt.forEach(t),RHo=r(q0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bue=n(q0,"CODE",{});var Zvt=s(Bue);PHo=r(Zvt,"pretrained_model_name_or_path"),Zvt.forEach(t),BHo=r(q0,":"),q0.forEach(t),IHo=i(ga),V=n(ga,"UL",{});var X=s(V);DF=n(X,"LI",{});var JSe=s(DF);Iue=n(JSe,"STRONG",{});var eFt=s(Iue);NHo=r(eFt,"albert"),eFt.forEach(t),qHo=r(JSe," \u2014 "),WX=n(JSe,"A",{href:!0});var oFt=s(WX);jHo=r(oFt,"AlbertForQuestionAnswering"),oFt.forEach(t),DHo=r(JSe," (ALBERT model)"),JSe.forEach(t),GHo=i(X),GF=n(X,"LI",{});var YSe=s(GF);Nue=n(YSe,"STRONG",{});var rFt=s(Nue);OHo=r(rFt,"bart"),rFt.forEach(t),VHo=r(YSe," \u2014 "),QX=n(YSe,"A",{href:!0});var tFt=s(QX);XHo=r(tFt,"BartForQuestionAnswering"),tFt.forEach(t),zHo=r(YSe," (BART model)"),YSe.forEach(t),WHo=i(X),OF=n(X,"LI",{});var KSe=s(OF);que=n(KSe,"STRONG",{});var aFt=s(que);QHo=r(aFt,"bert"),aFt.forEach(t),HHo=r(KSe," \u2014 "),HX=n(KSe,"A",{href:!0});var nFt=s(HX);UHo=r(nFt,"BertForQuestionAnswering"),nFt.forEach(t),JHo=r(KSe," (BERT model)"),KSe.forEach(t),YHo=i(X),VF=n(X,"LI",{});var ZSe=s(VF);jue=n(ZSe,"STRONG",{});var sFt=s(jue);KHo=r(sFt,"big_bird"),sFt.forEach(t),ZHo=r(ZSe," \u2014 "),UX=n(ZSe,"A",{href:!0});var lFt=s(UX);eUo=r(lFt,"BigBirdForQuestionAnswering"),lFt.forEach(t),oUo=r(ZSe," (BigBird model)"),ZSe.forEach(t),rUo=i(X),XF=n(X,"LI",{});var eRe=s(XF);Due=n(eRe,"STRONG",{});var iFt=s(Due);tUo=r(iFt,"bigbird_pegasus"),iFt.forEach(t),aUo=r(eRe," \u2014 "),JX=n(eRe,"A",{href:!0});var dFt=s(JX);nUo=r(dFt,"BigBirdPegasusForQuestionAnswering"),dFt.forEach(t),sUo=r(eRe," (BigBird-Pegasus model)"),eRe.forEach(t),lUo=i(X),zF=n(X,"LI",{});var oRe=s(zF);Gue=n(oRe,"STRONG",{});var cFt=s(Gue);iUo=r(cFt,"camembert"),cFt.forEach(t),dUo=r(oRe," \u2014 "),YX=n(oRe,"A",{href:!0});var fFt=s(YX);cUo=r(fFt,"CamembertForQuestionAnswering"),fFt.forEach(t),fUo=r(oRe," (CamemBERT model)"),oRe.forEach(t),mUo=i(X),WF=n(X,"LI",{});var rRe=s(WF);Oue=n(rRe,"STRONG",{});var mFt=s(Oue);gUo=r(mFt,"canine"),mFt.forEach(t),hUo=r(rRe," \u2014 "),KX=n(rRe,"A",{href:!0});var gFt=s(KX);pUo=r(gFt,"CanineForQuestionAnswering"),gFt.forEach(t),uUo=r(rRe," (CANINE model)"),rRe.forEach(t),_Uo=i(X),QF=n(X,"LI",{});var tRe=s(QF);Vue=n(tRe,"STRONG",{});var hFt=s(Vue);bUo=r(hFt,"convbert"),hFt.forEach(t),vUo=r(tRe," \u2014 "),ZX=n(tRe,"A",{href:!0});var pFt=s(ZX);FUo=r(pFt,"ConvBertForQuestionAnswering"),pFt.forEach(t),TUo=r(tRe," (ConvBERT model)"),tRe.forEach(t),MUo=i(X),HF=n(X,"LI",{});var aRe=s(HF);Xue=n(aRe,"STRONG",{});var uFt=s(Xue);EUo=r(uFt,"data2vec-text"),uFt.forEach(t),CUo=r(aRe," \u2014 "),ez=n(aRe,"A",{href:!0});var _Ft=s(ez);wUo=r(_Ft,"Data2VecTextForQuestionAnswering"),_Ft.forEach(t),AUo=r(aRe," (Data2VecText model)"),aRe.forEach(t),LUo=i(X),UF=n(X,"LI",{});var nRe=s(UF);zue=n(nRe,"STRONG",{});var bFt=s(zue);yUo=r(bFt,"deberta"),bFt.forEach(t),xUo=r(nRe," \u2014 "),oz=n(nRe,"A",{href:!0});var vFt=s(oz);$Uo=r(vFt,"DebertaForQuestionAnswering"),vFt.forEach(t),kUo=r(nRe," (DeBERTa model)"),nRe.forEach(t),SUo=i(X),JF=n(X,"LI",{});var sRe=s(JF);Wue=n(sRe,"STRONG",{});var FFt=s(Wue);RUo=r(FFt,"deberta-v2"),FFt.forEach(t),PUo=r(sRe," \u2014 "),rz=n(sRe,"A",{href:!0});var TFt=s(rz);BUo=r(TFt,"DebertaV2ForQuestionAnswering"),TFt.forEach(t),IUo=r(sRe," (DeBERTa-v2 model)"),sRe.forEach(t),NUo=i(X),YF=n(X,"LI",{});var lRe=s(YF);Que=n(lRe,"STRONG",{});var MFt=s(Que);qUo=r(MFt,"distilbert"),MFt.forEach(t),jUo=r(lRe," \u2014 "),tz=n(lRe,"A",{href:!0});var EFt=s(tz);DUo=r(EFt,"DistilBertForQuestionAnswering"),EFt.forEach(t),GUo=r(lRe," (DistilBERT model)"),lRe.forEach(t),OUo=i(X),KF=n(X,"LI",{});var iRe=s(KF);Hue=n(iRe,"STRONG",{});var CFt=s(Hue);VUo=r(CFt,"electra"),CFt.forEach(t),XUo=r(iRe," \u2014 "),az=n(iRe,"A",{href:!0});var wFt=s(az);zUo=r(wFt,"ElectraForQuestionAnswering"),wFt.forEach(t),WUo=r(iRe," (ELECTRA model)"),iRe.forEach(t),QUo=i(X),ZF=n(X,"LI",{});var dRe=s(ZF);Uue=n(dRe,"STRONG",{});var AFt=s(Uue);HUo=r(AFt,"flaubert"),AFt.forEach(t),UUo=r(dRe," \u2014 "),nz=n(dRe,"A",{href:!0});var LFt=s(nz);JUo=r(LFt,"FlaubertForQuestionAnsweringSimple"),LFt.forEach(t),YUo=r(dRe," (FlauBERT model)"),dRe.forEach(t),KUo=i(X),e6=n(X,"LI",{});var cRe=s(e6);Jue=n(cRe,"STRONG",{});var yFt=s(Jue);ZUo=r(yFt,"fnet"),yFt.forEach(t),eJo=r(cRe," \u2014 "),sz=n(cRe,"A",{href:!0});var xFt=s(sz);oJo=r(xFt,"FNetForQuestionAnswering"),xFt.forEach(t),rJo=r(cRe," (FNet model)"),cRe.forEach(t),tJo=i(X),o6=n(X,"LI",{});var fRe=s(o6);Yue=n(fRe,"STRONG",{});var $Ft=s(Yue);aJo=r($Ft,"funnel"),$Ft.forEach(t),nJo=r(fRe," \u2014 "),lz=n(fRe,"A",{href:!0});var kFt=s(lz);sJo=r(kFt,"FunnelForQuestionAnswering"),kFt.forEach(t),lJo=r(fRe," (Funnel Transformer model)"),fRe.forEach(t),iJo=i(X),r6=n(X,"LI",{});var mRe=s(r6);Kue=n(mRe,"STRONG",{});var SFt=s(Kue);dJo=r(SFt,"gptj"),SFt.forEach(t),cJo=r(mRe," \u2014 "),iz=n(mRe,"A",{href:!0});var RFt=s(iz);fJo=r(RFt,"GPTJForQuestionAnswering"),RFt.forEach(t),mJo=r(mRe," (GPT-J model)"),mRe.forEach(t),gJo=i(X),t6=n(X,"LI",{});var gRe=s(t6);Zue=n(gRe,"STRONG",{});var PFt=s(Zue);hJo=r(PFt,"ibert"),PFt.forEach(t),pJo=r(gRe," \u2014 "),dz=n(gRe,"A",{href:!0});var BFt=s(dz);uJo=r(BFt,"IBertForQuestionAnswering"),BFt.forEach(t),_Jo=r(gRe," (I-BERT model)"),gRe.forEach(t),bJo=i(X),a6=n(X,"LI",{});var hRe=s(a6);e_e=n(hRe,"STRONG",{});var IFt=s(e_e);vJo=r(IFt,"layoutlmv2"),IFt.forEach(t),FJo=r(hRe," \u2014 "),cz=n(hRe,"A",{href:!0});var NFt=s(cz);TJo=r(NFt,"LayoutLMv2ForQuestionAnswering"),NFt.forEach(t),MJo=r(hRe," (LayoutLMv2 model)"),hRe.forEach(t),EJo=i(X),n6=n(X,"LI",{});var pRe=s(n6);o_e=n(pRe,"STRONG",{});var qFt=s(o_e);CJo=r(qFt,"layoutlmv3"),qFt.forEach(t),wJo=r(pRe," \u2014 "),fz=n(pRe,"A",{href:!0});var jFt=s(fz);AJo=r(jFt,"LayoutLMv3ForQuestionAnswering"),jFt.forEach(t),LJo=r(pRe," (LayoutLMv3 model)"),pRe.forEach(t),yJo=i(X),s6=n(X,"LI",{});var uRe=s(s6);r_e=n(uRe,"STRONG",{});var DFt=s(r_e);xJo=r(DFt,"led"),DFt.forEach(t),$Jo=r(uRe," \u2014 "),mz=n(uRe,"A",{href:!0});var GFt=s(mz);kJo=r(GFt,"LEDForQuestionAnswering"),GFt.forEach(t),SJo=r(uRe," (LED model)"),uRe.forEach(t),RJo=i(X),l6=n(X,"LI",{});var _Re=s(l6);t_e=n(_Re,"STRONG",{});var OFt=s(t_e);PJo=r(OFt,"longformer"),OFt.forEach(t),BJo=r(_Re," \u2014 "),gz=n(_Re,"A",{href:!0});var VFt=s(gz);IJo=r(VFt,"LongformerForQuestionAnswering"),VFt.forEach(t),NJo=r(_Re," (Longformer model)"),_Re.forEach(t),qJo=i(X),i6=n(X,"LI",{});var bRe=s(i6);a_e=n(bRe,"STRONG",{});var XFt=s(a_e);jJo=r(XFt,"lxmert"),XFt.forEach(t),DJo=r(bRe," \u2014 "),hz=n(bRe,"A",{href:!0});var zFt=s(hz);GJo=r(zFt,"LxmertForQuestionAnswering"),zFt.forEach(t),OJo=r(bRe," (LXMERT model)"),bRe.forEach(t),VJo=i(X),d6=n(X,"LI",{});var vRe=s(d6);n_e=n(vRe,"STRONG",{});var WFt=s(n_e);XJo=r(WFt,"mbart"),WFt.forEach(t),zJo=r(vRe," \u2014 "),pz=n(vRe,"A",{href:!0});var QFt=s(pz);WJo=r(QFt,"MBartForQuestionAnswering"),QFt.forEach(t),QJo=r(vRe," (mBART model)"),vRe.forEach(t),HJo=i(X),c6=n(X,"LI",{});var FRe=s(c6);s_e=n(FRe,"STRONG",{});var HFt=s(s_e);UJo=r(HFt,"megatron-bert"),HFt.forEach(t),JJo=r(FRe," \u2014 "),uz=n(FRe,"A",{href:!0});var UFt=s(uz);YJo=r(UFt,"MegatronBertForQuestionAnswering"),UFt.forEach(t),KJo=r(FRe," (Megatron-BERT model)"),FRe.forEach(t),ZJo=i(X),f6=n(X,"LI",{});var TRe=s(f6);l_e=n(TRe,"STRONG",{});var JFt=s(l_e);eYo=r(JFt,"mobilebert"),JFt.forEach(t),oYo=r(TRe," \u2014 "),_z=n(TRe,"A",{href:!0});var YFt=s(_z);rYo=r(YFt,"MobileBertForQuestionAnswering"),YFt.forEach(t),tYo=r(TRe," (MobileBERT model)"),TRe.forEach(t),aYo=i(X),m6=n(X,"LI",{});var MRe=s(m6);i_e=n(MRe,"STRONG",{});var KFt=s(i_e);nYo=r(KFt,"mpnet"),KFt.forEach(t),sYo=r(MRe," \u2014 "),bz=n(MRe,"A",{href:!0});var ZFt=s(bz);lYo=r(ZFt,"MPNetForQuestionAnswering"),ZFt.forEach(t),iYo=r(MRe," (MPNet model)"),MRe.forEach(t),dYo=i(X),g6=n(X,"LI",{});var ERe=s(g6);d_e=n(ERe,"STRONG",{});var e6t=s(d_e);cYo=r(e6t,"nystromformer"),e6t.forEach(t),fYo=r(ERe," \u2014 "),vz=n(ERe,"A",{href:!0});var o6t=s(vz);mYo=r(o6t,"NystromformerForQuestionAnswering"),o6t.forEach(t),gYo=r(ERe," (Nystr\xF6mformer model)"),ERe.forEach(t),hYo=i(X),h6=n(X,"LI",{});var CRe=s(h6);c_e=n(CRe,"STRONG",{});var r6t=s(c_e);pYo=r(r6t,"qdqbert"),r6t.forEach(t),uYo=r(CRe," \u2014 "),Fz=n(CRe,"A",{href:!0});var t6t=s(Fz);_Yo=r(t6t,"QDQBertForQuestionAnswering"),t6t.forEach(t),bYo=r(CRe," (QDQBert model)"),CRe.forEach(t),vYo=i(X),p6=n(X,"LI",{});var wRe=s(p6);f_e=n(wRe,"STRONG",{});var a6t=s(f_e);FYo=r(a6t,"reformer"),a6t.forEach(t),TYo=r(wRe," \u2014 "),Tz=n(wRe,"A",{href:!0});var n6t=s(Tz);MYo=r(n6t,"ReformerForQuestionAnswering"),n6t.forEach(t),EYo=r(wRe," (Reformer model)"),wRe.forEach(t),CYo=i(X),u6=n(X,"LI",{});var ARe=s(u6);m_e=n(ARe,"STRONG",{});var s6t=s(m_e);wYo=r(s6t,"rembert"),s6t.forEach(t),AYo=r(ARe," \u2014 "),Mz=n(ARe,"A",{href:!0});var l6t=s(Mz);LYo=r(l6t,"RemBertForQuestionAnswering"),l6t.forEach(t),yYo=r(ARe," (RemBERT model)"),ARe.forEach(t),xYo=i(X),_6=n(X,"LI",{});var LRe=s(_6);g_e=n(LRe,"STRONG",{});var i6t=s(g_e);$Yo=r(i6t,"roberta"),i6t.forEach(t),kYo=r(LRe," \u2014 "),Ez=n(LRe,"A",{href:!0});var d6t=s(Ez);SYo=r(d6t,"RobertaForQuestionAnswering"),d6t.forEach(t),RYo=r(LRe," (RoBERTa model)"),LRe.forEach(t),PYo=i(X),b6=n(X,"LI",{});var yRe=s(b6);h_e=n(yRe,"STRONG",{});var c6t=s(h_e);BYo=r(c6t,"roformer"),c6t.forEach(t),IYo=r(yRe," \u2014 "),Cz=n(yRe,"A",{href:!0});var f6t=s(Cz);NYo=r(f6t,"RoFormerForQuestionAnswering"),f6t.forEach(t),qYo=r(yRe," (RoFormer model)"),yRe.forEach(t),jYo=i(X),v6=n(X,"LI",{});var xRe=s(v6);p_e=n(xRe,"STRONG",{});var m6t=s(p_e);DYo=r(m6t,"splinter"),m6t.forEach(t),GYo=r(xRe," \u2014 "),wz=n(xRe,"A",{href:!0});var g6t=s(wz);OYo=r(g6t,"SplinterForQuestionAnswering"),g6t.forEach(t),VYo=r(xRe," (Splinter model)"),xRe.forEach(t),XYo=i(X),F6=n(X,"LI",{});var $Re=s(F6);u_e=n($Re,"STRONG",{});var h6t=s(u_e);zYo=r(h6t,"squeezebert"),h6t.forEach(t),WYo=r($Re," \u2014 "),Az=n($Re,"A",{href:!0});var p6t=s(Az);QYo=r(p6t,"SqueezeBertForQuestionAnswering"),p6t.forEach(t),HYo=r($Re," (SqueezeBERT model)"),$Re.forEach(t),UYo=i(X),T6=n(X,"LI",{});var kRe=s(T6);__e=n(kRe,"STRONG",{});var u6t=s(__e);JYo=r(u6t,"xlm"),u6t.forEach(t),YYo=r(kRe," \u2014 "),Lz=n(kRe,"A",{href:!0});var _6t=s(Lz);KYo=r(_6t,"XLMForQuestionAnsweringSimple"),_6t.forEach(t),ZYo=r(kRe," (XLM model)"),kRe.forEach(t),eKo=i(X),M6=n(X,"LI",{});var SRe=s(M6);b_e=n(SRe,"STRONG",{});var b6t=s(b_e);oKo=r(b6t,"xlm-roberta"),b6t.forEach(t),rKo=r(SRe," \u2014 "),yz=n(SRe,"A",{href:!0});var v6t=s(yz);tKo=r(v6t,"XLMRobertaForQuestionAnswering"),v6t.forEach(t),aKo=r(SRe," (XLM-RoBERTa model)"),SRe.forEach(t),nKo=i(X),E6=n(X,"LI",{});var RRe=s(E6);v_e=n(RRe,"STRONG",{});var F6t=s(v_e);sKo=r(F6t,"xlm-roberta-xl"),F6t.forEach(t),lKo=r(RRe," \u2014 "),xz=n(RRe,"A",{href:!0});var T6t=s(xz);iKo=r(T6t,"XLMRobertaXLForQuestionAnswering"),T6t.forEach(t),dKo=r(RRe," (XLM-RoBERTa-XL model)"),RRe.forEach(t),cKo=i(X),C6=n(X,"LI",{});var PRe=s(C6);F_e=n(PRe,"STRONG",{});var M6t=s(F_e);fKo=r(M6t,"xlnet"),M6t.forEach(t),mKo=r(PRe," \u2014 "),$z=n(PRe,"A",{href:!0});var E6t=s($z);gKo=r(E6t,"XLNetForQuestionAnsweringSimple"),E6t.forEach(t),hKo=r(PRe," (XLNet model)"),PRe.forEach(t),pKo=i(X),w6=n(X,"LI",{});var BRe=s(w6);T_e=n(BRe,"STRONG",{});var C6t=s(T_e);uKo=r(C6t,"yoso"),C6t.forEach(t),_Ko=r(BRe," \u2014 "),kz=n(BRe,"A",{href:!0});var w6t=s(kz);bKo=r(w6t,"YosoForQuestionAnswering"),w6t.forEach(t),vKo=r(BRe," (YOSO model)"),BRe.forEach(t),X.forEach(t),FKo=i(ga),A6=n(ga,"P",{});var IRe=s(A6);TKo=r(IRe,"The model is set in evaluation mode by default using "),M_e=n(IRe,"CODE",{});var A6t=s(M_e);MKo=r(A6t,"model.eval()"),A6t.forEach(t),EKo=r(IRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),E_e=n(IRe,"CODE",{});var L6t=s(E_e);CKo=r(L6t,"model.train()"),L6t.forEach(t),IRe.forEach(t),wKo=i(ga),T(L6.$$.fragment,ga),ga.forEach(t),nl.forEach(t),EGe=i(f),cd=n(f,"H2",{class:!0});var xVe=s(cd);y6=n(xVe,"A",{id:!0,class:!0,href:!0});var y6t=s(y6);C_e=n(y6t,"SPAN",{});var x6t=s(C_e);T(jL.$$.fragment,x6t),x6t.forEach(t),y6t.forEach(t),AKo=i(xVe),w_e=n(xVe,"SPAN",{});var $6t=s(w_e);LKo=r($6t,"AutoModelForTableQuestionAnswering"),$6t.forEach(t),xVe.forEach(t),CGe=i(f),jo=n(f,"DIV",{class:!0});var sl=s(jo);T(DL.$$.fragment,sl),yKo=i(sl),fd=n(sl,"P",{});var goe=s(fd);xKo=r(goe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Sz=n(goe,"A",{href:!0});var k6t=s(Sz);$Ko=r(k6t,"from_pretrained()"),k6t.forEach(t),kKo=r(goe," class method or the "),Rz=n(goe,"A",{href:!0});var S6t=s(Rz);SKo=r(S6t,"from_config()"),S6t.forEach(t),RKo=r(goe,` class
method.`),goe.forEach(t),PKo=i(sl),GL=n(sl,"P",{});var $Ve=s(GL);BKo=r($Ve,"This class cannot be instantiated directly using "),A_e=n($Ve,"CODE",{});var R6t=s(A_e);IKo=r(R6t,"__init__()"),R6t.forEach(t),NKo=r($Ve," (throws an error)."),$Ve.forEach(t),qKo=i(sl),pt=n(sl,"DIV",{class:!0});var j0=s(pt);T(OL.$$.fragment,j0),jKo=i(j0),L_e=n(j0,"P",{});var P6t=s(L_e);DKo=r(P6t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),P6t.forEach(t),GKo=i(j0),md=n(j0,"P",{});var hoe=s(md);OKo=r(hoe,`Note:
Loading a model from its configuration file does `),y_e=n(hoe,"STRONG",{});var B6t=s(y_e);VKo=r(B6t,"not"),B6t.forEach(t),XKo=r(hoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),Pz=n(hoe,"A",{href:!0});var I6t=s(Pz);zKo=r(I6t,"from_pretrained()"),I6t.forEach(t),WKo=r(hoe," to load the model weights."),hoe.forEach(t),QKo=i(j0),T(x6.$$.fragment,j0),j0.forEach(t),HKo=i(sl),so=n(sl,"DIV",{class:!0});var ha=s(so);T(VL.$$.fragment,ha),UKo=i(ha),x_e=n(ha,"P",{});var N6t=s(x_e);JKo=r(N6t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),N6t.forEach(t),YKo=i(ha),Oa=n(ha,"P",{});var D0=s(Oa);KKo=r(D0,"The model class to instantiate is selected based on the "),$_e=n(D0,"CODE",{});var q6t=s($_e);ZKo=r(q6t,"model_type"),q6t.forEach(t),eZo=r(D0,` property of the config object (either
passed as an argument or loaded from `),k_e=n(D0,"CODE",{});var j6t=s(k_e);oZo=r(j6t,"pretrained_model_name_or_path"),j6t.forEach(t),rZo=r(D0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S_e=n(D0,"CODE",{});var D6t=s(S_e);tZo=r(D6t,"pretrained_model_name_or_path"),D6t.forEach(t),aZo=r(D0,":"),D0.forEach(t),nZo=i(ha),R_e=n(ha,"UL",{});var G6t=s(R_e);$6=n(G6t,"LI",{});var NRe=s($6);P_e=n(NRe,"STRONG",{});var O6t=s(P_e);sZo=r(O6t,"tapas"),O6t.forEach(t),lZo=r(NRe," \u2014 "),Bz=n(NRe,"A",{href:!0});var V6t=s(Bz);iZo=r(V6t,"TapasForQuestionAnswering"),V6t.forEach(t),dZo=r(NRe," (TAPAS model)"),NRe.forEach(t),G6t.forEach(t),cZo=i(ha),k6=n(ha,"P",{});var qRe=s(k6);fZo=r(qRe,"The model is set in evaluation mode by default using "),B_e=n(qRe,"CODE",{});var X6t=s(B_e);mZo=r(X6t,"model.eval()"),X6t.forEach(t),gZo=r(qRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),I_e=n(qRe,"CODE",{});var z6t=s(I_e);hZo=r(z6t,"model.train()"),z6t.forEach(t),qRe.forEach(t),pZo=i(ha),T(S6.$$.fragment,ha),ha.forEach(t),sl.forEach(t),wGe=i(f),gd=n(f,"H2",{class:!0});var kVe=s(gd);R6=n(kVe,"A",{id:!0,class:!0,href:!0});var W6t=s(R6);N_e=n(W6t,"SPAN",{});var Q6t=s(N_e);T(XL.$$.fragment,Q6t),Q6t.forEach(t),W6t.forEach(t),uZo=i(kVe),q_e=n(kVe,"SPAN",{});var H6t=s(q_e);_Zo=r(H6t,"AutoModelForImageClassification"),H6t.forEach(t),kVe.forEach(t),AGe=i(f),Do=n(f,"DIV",{class:!0});var ll=s(Do);T(zL.$$.fragment,ll),bZo=i(ll),hd=n(ll,"P",{});var poe=s(hd);vZo=r(poe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Iz=n(poe,"A",{href:!0});var U6t=s(Iz);FZo=r(U6t,"from_pretrained()"),U6t.forEach(t),TZo=r(poe," class method or the "),Nz=n(poe,"A",{href:!0});var J6t=s(Nz);MZo=r(J6t,"from_config()"),J6t.forEach(t),EZo=r(poe,` class
method.`),poe.forEach(t),CZo=i(ll),WL=n(ll,"P",{});var SVe=s(WL);wZo=r(SVe,"This class cannot be instantiated directly using "),j_e=n(SVe,"CODE",{});var Y6t=s(j_e);AZo=r(Y6t,"__init__()"),Y6t.forEach(t),LZo=r(SVe," (throws an error)."),SVe.forEach(t),yZo=i(ll),ut=n(ll,"DIV",{class:!0});var G0=s(ut);T(QL.$$.fragment,G0),xZo=i(G0),D_e=n(G0,"P",{});var K6t=s(D_e);$Zo=r(K6t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),K6t.forEach(t),kZo=i(G0),pd=n(G0,"P",{});var uoe=s(pd);SZo=r(uoe,`Note:
Loading a model from its configuration file does `),G_e=n(uoe,"STRONG",{});var Z6t=s(G_e);RZo=r(Z6t,"not"),Z6t.forEach(t),PZo=r(uoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),qz=n(uoe,"A",{href:!0});var eTt=s(qz);BZo=r(eTt,"from_pretrained()"),eTt.forEach(t),IZo=r(uoe," to load the model weights."),uoe.forEach(t),NZo=i(G0),T(P6.$$.fragment,G0),G0.forEach(t),qZo=i(ll),lo=n(ll,"DIV",{class:!0});var pa=s(lo);T(HL.$$.fragment,pa),jZo=i(pa),O_e=n(pa,"P",{});var oTt=s(O_e);DZo=r(oTt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),oTt.forEach(t),GZo=i(pa),Va=n(pa,"P",{});var O0=s(Va);OZo=r(O0,"The model class to instantiate is selected based on the "),V_e=n(O0,"CODE",{});var rTt=s(V_e);VZo=r(rTt,"model_type"),rTt.forEach(t),XZo=r(O0,` property of the config object (either
passed as an argument or loaded from `),X_e=n(O0,"CODE",{});var tTt=s(X_e);zZo=r(tTt,"pretrained_model_name_or_path"),tTt.forEach(t),WZo=r(O0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z_e=n(O0,"CODE",{});var aTt=s(z_e);QZo=r(aTt,"pretrained_model_name_or_path"),aTt.forEach(t),HZo=r(O0,":"),O0.forEach(t),UZo=i(pa),Fe=n(pa,"UL",{});var Te=s(Fe);B6=n(Te,"LI",{});var jRe=s(B6);W_e=n(jRe,"STRONG",{});var nTt=s(W_e);JZo=r(nTt,"beit"),nTt.forEach(t),YZo=r(jRe," \u2014 "),jz=n(jRe,"A",{href:!0});var sTt=s(jz);KZo=r(sTt,"BeitForImageClassification"),sTt.forEach(t),ZZo=r(jRe," (BEiT model)"),jRe.forEach(t),eer=i(Te),I6=n(Te,"LI",{});var DRe=s(I6);Q_e=n(DRe,"STRONG",{});var lTt=s(Q_e);oer=r(lTt,"convnext"),lTt.forEach(t),rer=r(DRe," \u2014 "),Dz=n(DRe,"A",{href:!0});var iTt=s(Dz);ter=r(iTt,"ConvNextForImageClassification"),iTt.forEach(t),aer=r(DRe," (ConvNeXT model)"),DRe.forEach(t),ner=i(Te),N6=n(Te,"LI",{});var GRe=s(N6);H_e=n(GRe,"STRONG",{});var dTt=s(H_e);ser=r(dTt,"cvt"),dTt.forEach(t),ler=r(GRe," \u2014 "),Gz=n(GRe,"A",{href:!0});var cTt=s(Gz);ier=r(cTt,"CvtForImageClassification"),cTt.forEach(t),der=r(GRe," (CvT model)"),GRe.forEach(t),cer=i(Te),q6=n(Te,"LI",{});var ORe=s(q6);U_e=n(ORe,"STRONG",{});var fTt=s(U_e);fer=r(fTt,"data2vec-vision"),fTt.forEach(t),mer=r(ORe," \u2014 "),Oz=n(ORe,"A",{href:!0});var mTt=s(Oz);ger=r(mTt,"Data2VecVisionForImageClassification"),mTt.forEach(t),her=r(ORe," (Data2VecVision model)"),ORe.forEach(t),per=i(Te),Os=n(Te,"LI",{});var Dk=s(Os);J_e=n(Dk,"STRONG",{});var gTt=s(J_e);uer=r(gTt,"deit"),gTt.forEach(t),_er=r(Dk," \u2014 "),Vz=n(Dk,"A",{href:!0});var hTt=s(Vz);ber=r(hTt,"DeiTForImageClassification"),hTt.forEach(t),ver=r(Dk," or "),Xz=n(Dk,"A",{href:!0});var pTt=s(Xz);Fer=r(pTt,"DeiTForImageClassificationWithTeacher"),pTt.forEach(t),Ter=r(Dk," (DeiT model)"),Dk.forEach(t),Mer=i(Te),j6=n(Te,"LI",{});var VRe=s(j6);Y_e=n(VRe,"STRONG",{});var uTt=s(Y_e);Eer=r(uTt,"imagegpt"),uTt.forEach(t),Cer=r(VRe," \u2014 "),zz=n(VRe,"A",{href:!0});var _Tt=s(zz);wer=r(_Tt,"ImageGPTForImageClassification"),_Tt.forEach(t),Aer=r(VRe," (ImageGPT model)"),VRe.forEach(t),Ler=i(Te),Vs=n(Te,"LI",{});var Gk=s(Vs);K_e=n(Gk,"STRONG",{});var bTt=s(K_e);yer=r(bTt,"levit"),bTt.forEach(t),xer=r(Gk," \u2014 "),Wz=n(Gk,"A",{href:!0});var vTt=s(Wz);$er=r(vTt,"LevitForImageClassification"),vTt.forEach(t),ker=r(Gk," or "),Qz=n(Gk,"A",{href:!0});var FTt=s(Qz);Ser=r(FTt,"LevitForImageClassificationWithTeacher"),FTt.forEach(t),Rer=r(Gk," (LeViT model)"),Gk.forEach(t),Per=i(Te),_t=n(Te,"LI",{});var Af=s(_t);Z_e=n(Af,"STRONG",{});var TTt=s(Z_e);Ber=r(TTt,"perceiver"),TTt.forEach(t),Ier=r(Af," \u2014 "),Hz=n(Af,"A",{href:!0});var MTt=s(Hz);Ner=r(MTt,"PerceiverForImageClassificationLearned"),MTt.forEach(t),qer=r(Af," or "),Uz=n(Af,"A",{href:!0});var ETt=s(Uz);jer=r(ETt,"PerceiverForImageClassificationFourier"),ETt.forEach(t),Der=r(Af," or "),Jz=n(Af,"A",{href:!0});var CTt=s(Jz);Ger=r(CTt,"PerceiverForImageClassificationConvProcessing"),CTt.forEach(t),Oer=r(Af," (Perceiver model)"),Af.forEach(t),Ver=i(Te),D6=n(Te,"LI",{});var XRe=s(D6);e2e=n(XRe,"STRONG",{});var wTt=s(e2e);Xer=r(wTt,"poolformer"),wTt.forEach(t),zer=r(XRe," \u2014 "),Yz=n(XRe,"A",{href:!0});var ATt=s(Yz);Wer=r(ATt,"PoolFormerForImageClassification"),ATt.forEach(t),Qer=r(XRe," (PoolFormer model)"),XRe.forEach(t),Her=i(Te),G6=n(Te,"LI",{});var zRe=s(G6);o2e=n(zRe,"STRONG",{});var LTt=s(o2e);Uer=r(LTt,"regnet"),LTt.forEach(t),Jer=r(zRe," \u2014 "),Kz=n(zRe,"A",{href:!0});var yTt=s(Kz);Yer=r(yTt,"RegNetForImageClassification"),yTt.forEach(t),Ker=r(zRe," (RegNet model)"),zRe.forEach(t),Zer=i(Te),O6=n(Te,"LI",{});var WRe=s(O6);r2e=n(WRe,"STRONG",{});var xTt=s(r2e);eor=r(xTt,"resnet"),xTt.forEach(t),oor=r(WRe," \u2014 "),Zz=n(WRe,"A",{href:!0});var $Tt=s(Zz);ror=r($Tt,"ResNetForImageClassification"),$Tt.forEach(t),tor=r(WRe," (ResNet model)"),WRe.forEach(t),aor=i(Te),V6=n(Te,"LI",{});var QRe=s(V6);t2e=n(QRe,"STRONG",{});var kTt=s(t2e);nor=r(kTt,"segformer"),kTt.forEach(t),sor=r(QRe," \u2014 "),eW=n(QRe,"A",{href:!0});var STt=s(eW);lor=r(STt,"SegformerForImageClassification"),STt.forEach(t),ior=r(QRe," (SegFormer model)"),QRe.forEach(t),dor=i(Te),X6=n(Te,"LI",{});var HRe=s(X6);a2e=n(HRe,"STRONG",{});var RTt=s(a2e);cor=r(RTt,"swin"),RTt.forEach(t),mor=r(HRe," \u2014 "),oW=n(HRe,"A",{href:!0});var PTt=s(oW);gor=r(PTt,"SwinForImageClassification"),PTt.forEach(t),hor=r(HRe," (Swin Transformer model)"),HRe.forEach(t),por=i(Te),z6=n(Te,"LI",{});var URe=s(z6);n2e=n(URe,"STRONG",{});var BTt=s(n2e);uor=r(BTt,"van"),BTt.forEach(t),_or=r(URe," \u2014 "),rW=n(URe,"A",{href:!0});var ITt=s(rW);bor=r(ITt,"VanForImageClassification"),ITt.forEach(t),vor=r(URe," (VAN model)"),URe.forEach(t),For=i(Te),W6=n(Te,"LI",{});var JRe=s(W6);s2e=n(JRe,"STRONG",{});var NTt=s(s2e);Tor=r(NTt,"vit"),NTt.forEach(t),Mor=r(JRe," \u2014 "),tW=n(JRe,"A",{href:!0});var qTt=s(tW);Eor=r(qTt,"ViTForImageClassification"),qTt.forEach(t),Cor=r(JRe," (ViT model)"),JRe.forEach(t),Te.forEach(t),wor=i(pa),Q6=n(pa,"P",{});var YRe=s(Q6);Aor=r(YRe,"The model is set in evaluation mode by default using "),l2e=n(YRe,"CODE",{});var jTt=s(l2e);Lor=r(jTt,"model.eval()"),jTt.forEach(t),yor=r(YRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),i2e=n(YRe,"CODE",{});var DTt=s(i2e);xor=r(DTt,"model.train()"),DTt.forEach(t),YRe.forEach(t),$or=i(pa),T(H6.$$.fragment,pa),pa.forEach(t),ll.forEach(t),LGe=i(f),ud=n(f,"H2",{class:!0});var RVe=s(ud);U6=n(RVe,"A",{id:!0,class:!0,href:!0});var GTt=s(U6);d2e=n(GTt,"SPAN",{});var OTt=s(d2e);T(UL.$$.fragment,OTt),OTt.forEach(t),GTt.forEach(t),kor=i(RVe),c2e=n(RVe,"SPAN",{});var VTt=s(c2e);Sor=r(VTt,"AutoModelForVision2Seq"),VTt.forEach(t),RVe.forEach(t),yGe=i(f),Go=n(f,"DIV",{class:!0});var il=s(Go);T(JL.$$.fragment,il),Ror=i(il),_d=n(il,"P",{});var _oe=s(_d);Por=r(_oe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),aW=n(_oe,"A",{href:!0});var XTt=s(aW);Bor=r(XTt,"from_pretrained()"),XTt.forEach(t),Ior=r(_oe," class method or the "),nW=n(_oe,"A",{href:!0});var zTt=s(nW);Nor=r(zTt,"from_config()"),zTt.forEach(t),qor=r(_oe,` class
method.`),_oe.forEach(t),jor=i(il),YL=n(il,"P",{});var PVe=s(YL);Dor=r(PVe,"This class cannot be instantiated directly using "),f2e=n(PVe,"CODE",{});var WTt=s(f2e);Gor=r(WTt,"__init__()"),WTt.forEach(t),Oor=r(PVe," (throws an error)."),PVe.forEach(t),Vor=i(il),bt=n(il,"DIV",{class:!0});var V0=s(bt);T(KL.$$.fragment,V0),Xor=i(V0),m2e=n(V0,"P",{});var QTt=s(m2e);zor=r(QTt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),QTt.forEach(t),Wor=i(V0),bd=n(V0,"P",{});var boe=s(bd);Qor=r(boe,`Note:
Loading a model from its configuration file does `),g2e=n(boe,"STRONG",{});var HTt=s(g2e);Hor=r(HTt,"not"),HTt.forEach(t),Uor=r(boe,` load the model weights. It only affects the
model\u2019s configuration. Use `),sW=n(boe,"A",{href:!0});var UTt=s(sW);Jor=r(UTt,"from_pretrained()"),UTt.forEach(t),Yor=r(boe," to load the model weights."),boe.forEach(t),Kor=i(V0),T(J6.$$.fragment,V0),V0.forEach(t),Zor=i(il),io=n(il,"DIV",{class:!0});var ua=s(io);T(ZL.$$.fragment,ua),err=i(ua),h2e=n(ua,"P",{});var JTt=s(h2e);orr=r(JTt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),JTt.forEach(t),rrr=i(ua),Xa=n(ua,"P",{});var X0=s(Xa);trr=r(X0,"The model class to instantiate is selected based on the "),p2e=n(X0,"CODE",{});var YTt=s(p2e);arr=r(YTt,"model_type"),YTt.forEach(t),nrr=r(X0,` property of the config object (either
passed as an argument or loaded from `),u2e=n(X0,"CODE",{});var KTt=s(u2e);srr=r(KTt,"pretrained_model_name_or_path"),KTt.forEach(t),lrr=r(X0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_2e=n(X0,"CODE",{});var ZTt=s(_2e);irr=r(ZTt,"pretrained_model_name_or_path"),ZTt.forEach(t),drr=r(X0,":"),X0.forEach(t),crr=i(ua),b2e=n(ua,"UL",{});var e7t=s(b2e);Y6=n(e7t,"LI",{});var KRe=s(Y6);v2e=n(KRe,"STRONG",{});var o7t=s(v2e);frr=r(o7t,"vision-encoder-decoder"),o7t.forEach(t),mrr=r(KRe," \u2014 "),lW=n(KRe,"A",{href:!0});var r7t=s(lW);grr=r(r7t,"VisionEncoderDecoderModel"),r7t.forEach(t),hrr=r(KRe," (Vision Encoder decoder model)"),KRe.forEach(t),e7t.forEach(t),prr=i(ua),K6=n(ua,"P",{});var ZRe=s(K6);urr=r(ZRe,"The model is set in evaluation mode by default using "),F2e=n(ZRe,"CODE",{});var t7t=s(F2e);_rr=r(t7t,"model.eval()"),t7t.forEach(t),brr=r(ZRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),T2e=n(ZRe,"CODE",{});var a7t=s(T2e);vrr=r(a7t,"model.train()"),a7t.forEach(t),ZRe.forEach(t),Frr=i(ua),T(Z6.$$.fragment,ua),ua.forEach(t),il.forEach(t),xGe=i(f),vd=n(f,"H2",{class:!0});var BVe=s(vd);eT=n(BVe,"A",{id:!0,class:!0,href:!0});var n7t=s(eT);M2e=n(n7t,"SPAN",{});var s7t=s(M2e);T(ey.$$.fragment,s7t),s7t.forEach(t),n7t.forEach(t),Trr=i(BVe),E2e=n(BVe,"SPAN",{});var l7t=s(E2e);Mrr=r(l7t,"AutoModelForVisualQuestionAnswering"),l7t.forEach(t),BVe.forEach(t),$Ge=i(f),Oo=n(f,"DIV",{class:!0});var dl=s(Oo);T(oy.$$.fragment,dl),Err=i(dl),Fd=n(dl,"P",{});var voe=s(Fd);Crr=r(voe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),iW=n(voe,"A",{href:!0});var i7t=s(iW);wrr=r(i7t,"from_pretrained()"),i7t.forEach(t),Arr=r(voe," class method or the "),dW=n(voe,"A",{href:!0});var d7t=s(dW);Lrr=r(d7t,"from_config()"),d7t.forEach(t),yrr=r(voe,` class
method.`),voe.forEach(t),xrr=i(dl),ry=n(dl,"P",{});var IVe=s(ry);$rr=r(IVe,"This class cannot be instantiated directly using "),C2e=n(IVe,"CODE",{});var c7t=s(C2e);krr=r(c7t,"__init__()"),c7t.forEach(t),Srr=r(IVe," (throws an error)."),IVe.forEach(t),Rrr=i(dl),vt=n(dl,"DIV",{class:!0});var z0=s(vt);T(ty.$$.fragment,z0),Prr=i(z0),w2e=n(z0,"P",{});var f7t=s(w2e);Brr=r(f7t,"Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),f7t.forEach(t),Irr=i(z0),Td=n(z0,"P",{});var Foe=s(Td);Nrr=r(Foe,`Note:
Loading a model from its configuration file does `),A2e=n(Foe,"STRONG",{});var m7t=s(A2e);qrr=r(m7t,"not"),m7t.forEach(t),jrr=r(Foe,` load the model weights. It only affects the
model\u2019s configuration. Use `),cW=n(Foe,"A",{href:!0});var g7t=s(cW);Drr=r(g7t,"from_pretrained()"),g7t.forEach(t),Grr=r(Foe," to load the model weights."),Foe.forEach(t),Orr=i(z0),T(oT.$$.fragment,z0),z0.forEach(t),Vrr=i(dl),co=n(dl,"DIV",{class:!0});var _a=s(co);T(ay.$$.fragment,_a),Xrr=i(_a),L2e=n(_a,"P",{});var h7t=s(L2e);zrr=r(h7t,"Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),h7t.forEach(t),Wrr=i(_a),za=n(_a,"P",{});var W0=s(za);Qrr=r(W0,"The model class to instantiate is selected based on the "),y2e=n(W0,"CODE",{});var p7t=s(y2e);Hrr=r(p7t,"model_type"),p7t.forEach(t),Urr=r(W0,` property of the config object (either
passed as an argument or loaded from `),x2e=n(W0,"CODE",{});var u7t=s(x2e);Jrr=r(u7t,"pretrained_model_name_or_path"),u7t.forEach(t),Yrr=r(W0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$2e=n(W0,"CODE",{});var _7t=s($2e);Krr=r(_7t,"pretrained_model_name_or_path"),_7t.forEach(t),Zrr=r(W0,":"),W0.forEach(t),etr=i(_a),k2e=n(_a,"UL",{});var b7t=s(k2e);rT=n(b7t,"LI",{});var ePe=s(rT);S2e=n(ePe,"STRONG",{});var v7t=s(S2e);otr=r(v7t,"vilt"),v7t.forEach(t),rtr=r(ePe," \u2014 "),fW=n(ePe,"A",{href:!0});var F7t=s(fW);ttr=r(F7t,"ViltForQuestionAnswering"),F7t.forEach(t),atr=r(ePe," (ViLT model)"),ePe.forEach(t),b7t.forEach(t),ntr=i(_a),tT=n(_a,"P",{});var oPe=s(tT);str=r(oPe,"The model is set in evaluation mode by default using "),R2e=n(oPe,"CODE",{});var T7t=s(R2e);ltr=r(T7t,"model.eval()"),T7t.forEach(t),itr=r(oPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),P2e=n(oPe,"CODE",{});var M7t=s(P2e);dtr=r(M7t,"model.train()"),M7t.forEach(t),oPe.forEach(t),ctr=i(_a),T(aT.$$.fragment,_a),_a.forEach(t),dl.forEach(t),kGe=i(f),Md=n(f,"H2",{class:!0});var NVe=s(Md);nT=n(NVe,"A",{id:!0,class:!0,href:!0});var E7t=s(nT);B2e=n(E7t,"SPAN",{});var C7t=s(B2e);T(ny.$$.fragment,C7t),C7t.forEach(t),E7t.forEach(t),ftr=i(NVe),I2e=n(NVe,"SPAN",{});var w7t=s(I2e);mtr=r(w7t,"AutoModelForAudioClassification"),w7t.forEach(t),NVe.forEach(t),SGe=i(f),Vo=n(f,"DIV",{class:!0});var cl=s(Vo);T(sy.$$.fragment,cl),gtr=i(cl),Ed=n(cl,"P",{});var Toe=s(Ed);htr=r(Toe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),mW=n(Toe,"A",{href:!0});var A7t=s(mW);ptr=r(A7t,"from_pretrained()"),A7t.forEach(t),utr=r(Toe," class method or the "),gW=n(Toe,"A",{href:!0});var L7t=s(gW);_tr=r(L7t,"from_config()"),L7t.forEach(t),btr=r(Toe,` class
method.`),Toe.forEach(t),vtr=i(cl),ly=n(cl,"P",{});var qVe=s(ly);Ftr=r(qVe,"This class cannot be instantiated directly using "),N2e=n(qVe,"CODE",{});var y7t=s(N2e);Ttr=r(y7t,"__init__()"),y7t.forEach(t),Mtr=r(qVe," (throws an error)."),qVe.forEach(t),Etr=i(cl),Ft=n(cl,"DIV",{class:!0});var Q0=s(Ft);T(iy.$$.fragment,Q0),Ctr=i(Q0),q2e=n(Q0,"P",{});var x7t=s(q2e);wtr=r(x7t,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),x7t.forEach(t),Atr=i(Q0),Cd=n(Q0,"P",{});var Moe=s(Cd);Ltr=r(Moe,`Note:
Loading a model from its configuration file does `),j2e=n(Moe,"STRONG",{});var $7t=s(j2e);ytr=r($7t,"not"),$7t.forEach(t),xtr=r(Moe,` load the model weights. It only affects the
model\u2019s configuration. Use `),hW=n(Moe,"A",{href:!0});var k7t=s(hW);$tr=r(k7t,"from_pretrained()"),k7t.forEach(t),ktr=r(Moe," to load the model weights."),Moe.forEach(t),Str=i(Q0),T(sT.$$.fragment,Q0),Q0.forEach(t),Rtr=i(cl),fo=n(cl,"DIV",{class:!0});var ba=s(fo);T(dy.$$.fragment,ba),Ptr=i(ba),D2e=n(ba,"P",{});var S7t=s(D2e);Btr=r(S7t,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),S7t.forEach(t),Itr=i(ba),Wa=n(ba,"P",{});var H0=s(Wa);Ntr=r(H0,"The model class to instantiate is selected based on the "),G2e=n(H0,"CODE",{});var R7t=s(G2e);qtr=r(R7t,"model_type"),R7t.forEach(t),jtr=r(H0,` property of the config object (either
passed as an argument or loaded from `),O2e=n(H0,"CODE",{});var P7t=s(O2e);Dtr=r(P7t,"pretrained_model_name_or_path"),P7t.forEach(t),Gtr=r(H0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V2e=n(H0,"CODE",{});var B7t=s(V2e);Otr=r(B7t,"pretrained_model_name_or_path"),B7t.forEach(t),Vtr=r(H0,":"),H0.forEach(t),Xtr=i(ba),Pe=n(ba,"UL",{});var ze=s(Pe);lT=n(ze,"LI",{});var rPe=s(lT);X2e=n(rPe,"STRONG",{});var I7t=s(X2e);ztr=r(I7t,"data2vec-audio"),I7t.forEach(t),Wtr=r(rPe," \u2014 "),pW=n(rPe,"A",{href:!0});var N7t=s(pW);Qtr=r(N7t,"Data2VecAudioForSequenceClassification"),N7t.forEach(t),Htr=r(rPe," (Data2VecAudio model)"),rPe.forEach(t),Utr=i(ze),iT=n(ze,"LI",{});var tPe=s(iT);z2e=n(tPe,"STRONG",{});var q7t=s(z2e);Jtr=r(q7t,"hubert"),q7t.forEach(t),Ytr=r(tPe," \u2014 "),uW=n(tPe,"A",{href:!0});var j7t=s(uW);Ktr=r(j7t,"HubertForSequenceClassification"),j7t.forEach(t),Ztr=r(tPe," (Hubert model)"),tPe.forEach(t),ear=i(ze),dT=n(ze,"LI",{});var aPe=s(dT);W2e=n(aPe,"STRONG",{});var D7t=s(W2e);oar=r(D7t,"sew"),D7t.forEach(t),rar=r(aPe," \u2014 "),_W=n(aPe,"A",{href:!0});var G7t=s(_W);tar=r(G7t,"SEWForSequenceClassification"),G7t.forEach(t),aar=r(aPe," (SEW model)"),aPe.forEach(t),nar=i(ze),cT=n(ze,"LI",{});var nPe=s(cT);Q2e=n(nPe,"STRONG",{});var O7t=s(Q2e);sar=r(O7t,"sew-d"),O7t.forEach(t),lar=r(nPe," \u2014 "),bW=n(nPe,"A",{href:!0});var V7t=s(bW);iar=r(V7t,"SEWDForSequenceClassification"),V7t.forEach(t),dar=r(nPe," (SEW-D model)"),nPe.forEach(t),car=i(ze),fT=n(ze,"LI",{});var sPe=s(fT);H2e=n(sPe,"STRONG",{});var X7t=s(H2e);far=r(X7t,"unispeech"),X7t.forEach(t),mar=r(sPe," \u2014 "),vW=n(sPe,"A",{href:!0});var z7t=s(vW);gar=r(z7t,"UniSpeechForSequenceClassification"),z7t.forEach(t),har=r(sPe," (UniSpeech model)"),sPe.forEach(t),par=i(ze),mT=n(ze,"LI",{});var lPe=s(mT);U2e=n(lPe,"STRONG",{});var W7t=s(U2e);uar=r(W7t,"unispeech-sat"),W7t.forEach(t),_ar=r(lPe," \u2014 "),FW=n(lPe,"A",{href:!0});var Q7t=s(FW);bar=r(Q7t,"UniSpeechSatForSequenceClassification"),Q7t.forEach(t),Far=r(lPe," (UniSpeechSat model)"),lPe.forEach(t),Tar=i(ze),gT=n(ze,"LI",{});var iPe=s(gT);J2e=n(iPe,"STRONG",{});var H7t=s(J2e);Mar=r(H7t,"wav2vec2"),H7t.forEach(t),Ear=r(iPe," \u2014 "),TW=n(iPe,"A",{href:!0});var U7t=s(TW);Car=r(U7t,"Wav2Vec2ForSequenceClassification"),U7t.forEach(t),war=r(iPe," (Wav2Vec2 model)"),iPe.forEach(t),Aar=i(ze),hT=n(ze,"LI",{});var dPe=s(hT);Y2e=n(dPe,"STRONG",{});var J7t=s(Y2e);Lar=r(J7t,"wav2vec2-conformer"),J7t.forEach(t),yar=r(dPe," \u2014 "),MW=n(dPe,"A",{href:!0});var Y7t=s(MW);xar=r(Y7t,"Wav2Vec2ConformerForSequenceClassification"),Y7t.forEach(t),$ar=r(dPe," (Wav2Vec2-Conformer model)"),dPe.forEach(t),kar=i(ze),pT=n(ze,"LI",{});var cPe=s(pT);K2e=n(cPe,"STRONG",{});var K7t=s(K2e);Sar=r(K7t,"wavlm"),K7t.forEach(t),Rar=r(cPe," \u2014 "),EW=n(cPe,"A",{href:!0});var Z7t=s(EW);Par=r(Z7t,"WavLMForSequenceClassification"),Z7t.forEach(t),Bar=r(cPe," (WavLM model)"),cPe.forEach(t),ze.forEach(t),Iar=i(ba),uT=n(ba,"P",{});var fPe=s(uT);Nar=r(fPe,"The model is set in evaluation mode by default using "),Z2e=n(fPe,"CODE",{});var e9t=s(Z2e);qar=r(e9t,"model.eval()"),e9t.forEach(t),jar=r(fPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),e1e=n(fPe,"CODE",{});var o9t=s(e1e);Dar=r(o9t,"model.train()"),o9t.forEach(t),fPe.forEach(t),Gar=i(ba),T(_T.$$.fragment,ba),ba.forEach(t),cl.forEach(t),RGe=i(f),wd=n(f,"H2",{class:!0});var jVe=s(wd);bT=n(jVe,"A",{id:!0,class:!0,href:!0});var r9t=s(bT);o1e=n(r9t,"SPAN",{});var t9t=s(o1e);T(cy.$$.fragment,t9t),t9t.forEach(t),r9t.forEach(t),Oar=i(jVe),r1e=n(jVe,"SPAN",{});var a9t=s(r1e);Var=r(a9t,"AutoModelForAudioFrameClassification"),a9t.forEach(t),jVe.forEach(t),PGe=i(f),Xo=n(f,"DIV",{class:!0});var fl=s(Xo);T(fy.$$.fragment,fl),Xar=i(fl),Ad=n(fl,"P",{});var Eoe=s(Ad);zar=r(Eoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),CW=n(Eoe,"A",{href:!0});var n9t=s(CW);War=r(n9t,"from_pretrained()"),n9t.forEach(t),Qar=r(Eoe," class method or the "),wW=n(Eoe,"A",{href:!0});var s9t=s(wW);Har=r(s9t,"from_config()"),s9t.forEach(t),Uar=r(Eoe,` class
method.`),Eoe.forEach(t),Jar=i(fl),my=n(fl,"P",{});var DVe=s(my);Yar=r(DVe,"This class cannot be instantiated directly using "),t1e=n(DVe,"CODE",{});var l9t=s(t1e);Kar=r(l9t,"__init__()"),l9t.forEach(t),Zar=r(DVe," (throws an error)."),DVe.forEach(t),enr=i(fl),Tt=n(fl,"DIV",{class:!0});var U0=s(Tt);T(gy.$$.fragment,U0),onr=i(U0),a1e=n(U0,"P",{});var i9t=s(a1e);rnr=r(i9t,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),i9t.forEach(t),tnr=i(U0),Ld=n(U0,"P",{});var Coe=s(Ld);anr=r(Coe,`Note:
Loading a model from its configuration file does `),n1e=n(Coe,"STRONG",{});var d9t=s(n1e);nnr=r(d9t,"not"),d9t.forEach(t),snr=r(Coe,` load the model weights. It only affects the
model\u2019s configuration. Use `),AW=n(Coe,"A",{href:!0});var c9t=s(AW);lnr=r(c9t,"from_pretrained()"),c9t.forEach(t),inr=r(Coe," to load the model weights."),Coe.forEach(t),dnr=i(U0),T(vT.$$.fragment,U0),U0.forEach(t),cnr=i(fl),mo=n(fl,"DIV",{class:!0});var va=s(mo);T(hy.$$.fragment,va),fnr=i(va),s1e=n(va,"P",{});var f9t=s(s1e);mnr=r(f9t,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),f9t.forEach(t),gnr=i(va),Qa=n(va,"P",{});var J0=s(Qa);hnr=r(J0,"The model class to instantiate is selected based on the "),l1e=n(J0,"CODE",{});var m9t=s(l1e);pnr=r(m9t,"model_type"),m9t.forEach(t),unr=r(J0,` property of the config object (either
passed as an argument or loaded from `),i1e=n(J0,"CODE",{});var g9t=s(i1e);_nr=r(g9t,"pretrained_model_name_or_path"),g9t.forEach(t),bnr=r(J0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d1e=n(J0,"CODE",{});var h9t=s(d1e);vnr=r(h9t,"pretrained_model_name_or_path"),h9t.forEach(t),Fnr=r(J0,":"),J0.forEach(t),Tnr=i(va),et=n(va,"UL",{});var ml=s(et);FT=n(ml,"LI",{});var mPe=s(FT);c1e=n(mPe,"STRONG",{});var p9t=s(c1e);Mnr=r(p9t,"data2vec-audio"),p9t.forEach(t),Enr=r(mPe," \u2014 "),LW=n(mPe,"A",{href:!0});var u9t=s(LW);Cnr=r(u9t,"Data2VecAudioForAudioFrameClassification"),u9t.forEach(t),wnr=r(mPe," (Data2VecAudio model)"),mPe.forEach(t),Anr=i(ml),TT=n(ml,"LI",{});var gPe=s(TT);f1e=n(gPe,"STRONG",{});var _9t=s(f1e);Lnr=r(_9t,"unispeech-sat"),_9t.forEach(t),ynr=r(gPe," \u2014 "),yW=n(gPe,"A",{href:!0});var b9t=s(yW);xnr=r(b9t,"UniSpeechSatForAudioFrameClassification"),b9t.forEach(t),$nr=r(gPe," (UniSpeechSat model)"),gPe.forEach(t),knr=i(ml),MT=n(ml,"LI",{});var hPe=s(MT);m1e=n(hPe,"STRONG",{});var v9t=s(m1e);Snr=r(v9t,"wav2vec2"),v9t.forEach(t),Rnr=r(hPe," \u2014 "),xW=n(hPe,"A",{href:!0});var F9t=s(xW);Pnr=r(F9t,"Wav2Vec2ForAudioFrameClassification"),F9t.forEach(t),Bnr=r(hPe," (Wav2Vec2 model)"),hPe.forEach(t),Inr=i(ml),ET=n(ml,"LI",{});var pPe=s(ET);g1e=n(pPe,"STRONG",{});var T9t=s(g1e);Nnr=r(T9t,"wav2vec2-conformer"),T9t.forEach(t),qnr=r(pPe," \u2014 "),$W=n(pPe,"A",{href:!0});var M9t=s($W);jnr=r(M9t,"Wav2Vec2ConformerForAudioFrameClassification"),M9t.forEach(t),Dnr=r(pPe," (Wav2Vec2-Conformer model)"),pPe.forEach(t),Gnr=i(ml),CT=n(ml,"LI",{});var uPe=s(CT);h1e=n(uPe,"STRONG",{});var E9t=s(h1e);Onr=r(E9t,"wavlm"),E9t.forEach(t),Vnr=r(uPe," \u2014 "),kW=n(uPe,"A",{href:!0});var C9t=s(kW);Xnr=r(C9t,"WavLMForAudioFrameClassification"),C9t.forEach(t),znr=r(uPe," (WavLM model)"),uPe.forEach(t),ml.forEach(t),Wnr=i(va),wT=n(va,"P",{});var _Pe=s(wT);Qnr=r(_Pe,"The model is set in evaluation mode by default using "),p1e=n(_Pe,"CODE",{});var w9t=s(p1e);Hnr=r(w9t,"model.eval()"),w9t.forEach(t),Unr=r(_Pe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),u1e=n(_Pe,"CODE",{});var A9t=s(u1e);Jnr=r(A9t,"model.train()"),A9t.forEach(t),_Pe.forEach(t),Ynr=i(va),T(AT.$$.fragment,va),va.forEach(t),fl.forEach(t),BGe=i(f),yd=n(f,"H2",{class:!0});var GVe=s(yd);LT=n(GVe,"A",{id:!0,class:!0,href:!0});var L9t=s(LT);_1e=n(L9t,"SPAN",{});var y9t=s(_1e);T(py.$$.fragment,y9t),y9t.forEach(t),L9t.forEach(t),Knr=i(GVe),b1e=n(GVe,"SPAN",{});var x9t=s(b1e);Znr=r(x9t,"AutoModelForCTC"),x9t.forEach(t),GVe.forEach(t),IGe=i(f),zo=n(f,"DIV",{class:!0});var gl=s(zo);T(uy.$$.fragment,gl),esr=i(gl),xd=n(gl,"P",{});var woe=s(xd);osr=r(woe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),SW=n(woe,"A",{href:!0});var $9t=s(SW);rsr=r($9t,"from_pretrained()"),$9t.forEach(t),tsr=r(woe," class method or the "),RW=n(woe,"A",{href:!0});var k9t=s(RW);asr=r(k9t,"from_config()"),k9t.forEach(t),nsr=r(woe,` class
method.`),woe.forEach(t),ssr=i(gl),_y=n(gl,"P",{});var OVe=s(_y);lsr=r(OVe,"This class cannot be instantiated directly using "),v1e=n(OVe,"CODE",{});var S9t=s(v1e);isr=r(S9t,"__init__()"),S9t.forEach(t),dsr=r(OVe," (throws an error)."),OVe.forEach(t),csr=i(gl),Mt=n(gl,"DIV",{class:!0});var Y0=s(Mt);T(by.$$.fragment,Y0),fsr=i(Y0),F1e=n(Y0,"P",{});var R9t=s(F1e);msr=r(R9t,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),R9t.forEach(t),gsr=i(Y0),$d=n(Y0,"P",{});var Aoe=s($d);hsr=r(Aoe,`Note:
Loading a model from its configuration file does `),T1e=n(Aoe,"STRONG",{});var P9t=s(T1e);psr=r(P9t,"not"),P9t.forEach(t),usr=r(Aoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),PW=n(Aoe,"A",{href:!0});var B9t=s(PW);_sr=r(B9t,"from_pretrained()"),B9t.forEach(t),bsr=r(Aoe," to load the model weights."),Aoe.forEach(t),vsr=i(Y0),T(yT.$$.fragment,Y0),Y0.forEach(t),Fsr=i(gl),go=n(gl,"DIV",{class:!0});var Fa=s(go);T(vy.$$.fragment,Fa),Tsr=i(Fa),M1e=n(Fa,"P",{});var I9t=s(M1e);Msr=r(I9t,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),I9t.forEach(t),Esr=i(Fa),Ha=n(Fa,"P",{});var K0=s(Ha);Csr=r(K0,"The model class to instantiate is selected based on the "),E1e=n(K0,"CODE",{});var N9t=s(E1e);wsr=r(N9t,"model_type"),N9t.forEach(t),Asr=r(K0,` property of the config object (either
passed as an argument or loaded from `),C1e=n(K0,"CODE",{});var q9t=s(C1e);Lsr=r(q9t,"pretrained_model_name_or_path"),q9t.forEach(t),ysr=r(K0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w1e=n(K0,"CODE",{});var j9t=s(w1e);xsr=r(j9t,"pretrained_model_name_or_path"),j9t.forEach(t),$sr=r(K0,":"),K0.forEach(t),ksr=i(Fa),Le=n(Fa,"UL",{});var Be=s(Le);xT=n(Be,"LI",{});var bPe=s(xT);A1e=n(bPe,"STRONG",{});var D9t=s(A1e);Ssr=r(D9t,"data2vec-audio"),D9t.forEach(t),Rsr=r(bPe," \u2014 "),BW=n(bPe,"A",{href:!0});var G9t=s(BW);Psr=r(G9t,"Data2VecAudioForCTC"),G9t.forEach(t),Bsr=r(bPe," (Data2VecAudio model)"),bPe.forEach(t),Isr=i(Be),$T=n(Be,"LI",{});var vPe=s($T);L1e=n(vPe,"STRONG",{});var O9t=s(L1e);Nsr=r(O9t,"hubert"),O9t.forEach(t),qsr=r(vPe," \u2014 "),IW=n(vPe,"A",{href:!0});var V9t=s(IW);jsr=r(V9t,"HubertForCTC"),V9t.forEach(t),Dsr=r(vPe," (Hubert model)"),vPe.forEach(t),Gsr=i(Be),kT=n(Be,"LI",{});var FPe=s(kT);y1e=n(FPe,"STRONG",{});var X9t=s(y1e);Osr=r(X9t,"mctct"),X9t.forEach(t),Vsr=r(FPe," \u2014 "),NW=n(FPe,"A",{href:!0});var z9t=s(NW);Xsr=r(z9t,"MCTCTForCTC"),z9t.forEach(t),zsr=r(FPe," (M-CTC-T model)"),FPe.forEach(t),Wsr=i(Be),ST=n(Be,"LI",{});var TPe=s(ST);x1e=n(TPe,"STRONG",{});var W9t=s(x1e);Qsr=r(W9t,"sew"),W9t.forEach(t),Hsr=r(TPe," \u2014 "),qW=n(TPe,"A",{href:!0});var Q9t=s(qW);Usr=r(Q9t,"SEWForCTC"),Q9t.forEach(t),Jsr=r(TPe," (SEW model)"),TPe.forEach(t),Ysr=i(Be),RT=n(Be,"LI",{});var MPe=s(RT);$1e=n(MPe,"STRONG",{});var H9t=s($1e);Ksr=r(H9t,"sew-d"),H9t.forEach(t),Zsr=r(MPe," \u2014 "),jW=n(MPe,"A",{href:!0});var U9t=s(jW);elr=r(U9t,"SEWDForCTC"),U9t.forEach(t),olr=r(MPe," (SEW-D model)"),MPe.forEach(t),rlr=i(Be),PT=n(Be,"LI",{});var EPe=s(PT);k1e=n(EPe,"STRONG",{});var J9t=s(k1e);tlr=r(J9t,"unispeech"),J9t.forEach(t),alr=r(EPe," \u2014 "),DW=n(EPe,"A",{href:!0});var Y9t=s(DW);nlr=r(Y9t,"UniSpeechForCTC"),Y9t.forEach(t),slr=r(EPe," (UniSpeech model)"),EPe.forEach(t),llr=i(Be),BT=n(Be,"LI",{});var CPe=s(BT);S1e=n(CPe,"STRONG",{});var K9t=s(S1e);ilr=r(K9t,"unispeech-sat"),K9t.forEach(t),dlr=r(CPe," \u2014 "),GW=n(CPe,"A",{href:!0});var Z9t=s(GW);clr=r(Z9t,"UniSpeechSatForCTC"),Z9t.forEach(t),flr=r(CPe," (UniSpeechSat model)"),CPe.forEach(t),mlr=i(Be),IT=n(Be,"LI",{});var wPe=s(IT);R1e=n(wPe,"STRONG",{});var eMt=s(R1e);glr=r(eMt,"wav2vec2"),eMt.forEach(t),hlr=r(wPe," \u2014 "),OW=n(wPe,"A",{href:!0});var oMt=s(OW);plr=r(oMt,"Wav2Vec2ForCTC"),oMt.forEach(t),ulr=r(wPe," (Wav2Vec2 model)"),wPe.forEach(t),_lr=i(Be),NT=n(Be,"LI",{});var APe=s(NT);P1e=n(APe,"STRONG",{});var rMt=s(P1e);blr=r(rMt,"wav2vec2-conformer"),rMt.forEach(t),vlr=r(APe," \u2014 "),VW=n(APe,"A",{href:!0});var tMt=s(VW);Flr=r(tMt,"Wav2Vec2ConformerForCTC"),tMt.forEach(t),Tlr=r(APe," (Wav2Vec2-Conformer model)"),APe.forEach(t),Mlr=i(Be),qT=n(Be,"LI",{});var LPe=s(qT);B1e=n(LPe,"STRONG",{});var aMt=s(B1e);Elr=r(aMt,"wavlm"),aMt.forEach(t),Clr=r(LPe," \u2014 "),XW=n(LPe,"A",{href:!0});var nMt=s(XW);wlr=r(nMt,"WavLMForCTC"),nMt.forEach(t),Alr=r(LPe," (WavLM model)"),LPe.forEach(t),Be.forEach(t),Llr=i(Fa),jT=n(Fa,"P",{});var yPe=s(jT);ylr=r(yPe,"The model is set in evaluation mode by default using "),I1e=n(yPe,"CODE",{});var sMt=s(I1e);xlr=r(sMt,"model.eval()"),sMt.forEach(t),$lr=r(yPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),N1e=n(yPe,"CODE",{});var lMt=s(N1e);klr=r(lMt,"model.train()"),lMt.forEach(t),yPe.forEach(t),Slr=i(Fa),T(DT.$$.fragment,Fa),Fa.forEach(t),gl.forEach(t),NGe=i(f),kd=n(f,"H2",{class:!0});var VVe=s(kd);GT=n(VVe,"A",{id:!0,class:!0,href:!0});var iMt=s(GT);q1e=n(iMt,"SPAN",{});var dMt=s(q1e);T(Fy.$$.fragment,dMt),dMt.forEach(t),iMt.forEach(t),Rlr=i(VVe),j1e=n(VVe,"SPAN",{});var cMt=s(j1e);Plr=r(cMt,"AutoModelForSpeechSeq2Seq"),cMt.forEach(t),VVe.forEach(t),qGe=i(f),Wo=n(f,"DIV",{class:!0});var hl=s(Wo);T(Ty.$$.fragment,hl),Blr=i(hl),Sd=n(hl,"P",{});var Loe=s(Sd);Ilr=r(Loe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),zW=n(Loe,"A",{href:!0});var fMt=s(zW);Nlr=r(fMt,"from_pretrained()"),fMt.forEach(t),qlr=r(Loe," class method or the "),WW=n(Loe,"A",{href:!0});var mMt=s(WW);jlr=r(mMt,"from_config()"),mMt.forEach(t),Dlr=r(Loe,` class
method.`),Loe.forEach(t),Glr=i(hl),My=n(hl,"P",{});var XVe=s(My);Olr=r(XVe,"This class cannot be instantiated directly using "),D1e=n(XVe,"CODE",{});var gMt=s(D1e);Vlr=r(gMt,"__init__()"),gMt.forEach(t),Xlr=r(XVe," (throws an error)."),XVe.forEach(t),zlr=i(hl),Et=n(hl,"DIV",{class:!0});var Z0=s(Et);T(Ey.$$.fragment,Z0),Wlr=i(Z0),G1e=n(Z0,"P",{});var hMt=s(G1e);Qlr=r(hMt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),hMt.forEach(t),Hlr=i(Z0),Rd=n(Z0,"P",{});var yoe=s(Rd);Ulr=r(yoe,`Note:
Loading a model from its configuration file does `),O1e=n(yoe,"STRONG",{});var pMt=s(O1e);Jlr=r(pMt,"not"),pMt.forEach(t),Ylr=r(yoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),QW=n(yoe,"A",{href:!0});var uMt=s(QW);Klr=r(uMt,"from_pretrained()"),uMt.forEach(t),Zlr=r(yoe," to load the model weights."),yoe.forEach(t),eir=i(Z0),T(OT.$$.fragment,Z0),Z0.forEach(t),oir=i(hl),ho=n(hl,"DIV",{class:!0});var Ta=s(ho);T(Cy.$$.fragment,Ta),rir=i(Ta),V1e=n(Ta,"P",{});var _Mt=s(V1e);tir=r(_Mt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),_Mt.forEach(t),air=i(Ta),Ua=n(Ta,"P",{});var ew=s(Ua);nir=r(ew,"The model class to instantiate is selected based on the "),X1e=n(ew,"CODE",{});var bMt=s(X1e);sir=r(bMt,"model_type"),bMt.forEach(t),lir=r(ew,` property of the config object (either
passed as an argument or loaded from `),z1e=n(ew,"CODE",{});var vMt=s(z1e);iir=r(vMt,"pretrained_model_name_or_path"),vMt.forEach(t),dir=r(ew,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W1e=n(ew,"CODE",{});var FMt=s(W1e);cir=r(FMt,"pretrained_model_name_or_path"),FMt.forEach(t),fir=r(ew,":"),ew.forEach(t),mir=i(Ta),wy=n(Ta,"UL",{});var zVe=s(wy);VT=n(zVe,"LI",{});var xPe=s(VT);Q1e=n(xPe,"STRONG",{});var TMt=s(Q1e);gir=r(TMt,"speech-encoder-decoder"),TMt.forEach(t),hir=r(xPe," \u2014 "),HW=n(xPe,"A",{href:!0});var MMt=s(HW);pir=r(MMt,"SpeechEncoderDecoderModel"),MMt.forEach(t),uir=r(xPe," (Speech Encoder decoder model)"),xPe.forEach(t),_ir=i(zVe),XT=n(zVe,"LI",{});var $Pe=s(XT);H1e=n($Pe,"STRONG",{});var EMt=s(H1e);bir=r(EMt,"speech_to_text"),EMt.forEach(t),vir=r($Pe," \u2014 "),UW=n($Pe,"A",{href:!0});var CMt=s(UW);Fir=r(CMt,"Speech2TextForConditionalGeneration"),CMt.forEach(t),Tir=r($Pe," (Speech2Text model)"),$Pe.forEach(t),zVe.forEach(t),Mir=i(Ta),zT=n(Ta,"P",{});var kPe=s(zT);Eir=r(kPe,"The model is set in evaluation mode by default using "),U1e=n(kPe,"CODE",{});var wMt=s(U1e);Cir=r(wMt,"model.eval()"),wMt.forEach(t),wir=r(kPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),J1e=n(kPe,"CODE",{});var AMt=s(J1e);Air=r(AMt,"model.train()"),AMt.forEach(t),kPe.forEach(t),Lir=i(Ta),T(WT.$$.fragment,Ta),Ta.forEach(t),hl.forEach(t),jGe=i(f),Pd=n(f,"H2",{class:!0});var WVe=s(Pd);QT=n(WVe,"A",{id:!0,class:!0,href:!0});var LMt=s(QT);Y1e=n(LMt,"SPAN",{});var yMt=s(Y1e);T(Ay.$$.fragment,yMt),yMt.forEach(t),LMt.forEach(t),yir=i(WVe),K1e=n(WVe,"SPAN",{});var xMt=s(K1e);xir=r(xMt,"AutoModelForAudioXVector"),xMt.forEach(t),WVe.forEach(t),DGe=i(f),Qo=n(f,"DIV",{class:!0});var pl=s(Qo);T(Ly.$$.fragment,pl),$ir=i(pl),Bd=n(pl,"P",{});var xoe=s(Bd);kir=r(xoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),JW=n(xoe,"A",{href:!0});var $Mt=s(JW);Sir=r($Mt,"from_pretrained()"),$Mt.forEach(t),Rir=r(xoe," class method or the "),YW=n(xoe,"A",{href:!0});var kMt=s(YW);Pir=r(kMt,"from_config()"),kMt.forEach(t),Bir=r(xoe,` class
method.`),xoe.forEach(t),Iir=i(pl),yy=n(pl,"P",{});var QVe=s(yy);Nir=r(QVe,"This class cannot be instantiated directly using "),Z1e=n(QVe,"CODE",{});var SMt=s(Z1e);qir=r(SMt,"__init__()"),SMt.forEach(t),jir=r(QVe," (throws an error)."),QVe.forEach(t),Dir=i(pl),Ct=n(pl,"DIV",{class:!0});var ow=s(Ct);T(xy.$$.fragment,ow),Gir=i(ow),ebe=n(ow,"P",{});var RMt=s(ebe);Oir=r(RMt,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),RMt.forEach(t),Vir=i(ow),Id=n(ow,"P",{});var $oe=s(Id);Xir=r($oe,`Note:
Loading a model from its configuration file does `),obe=n($oe,"STRONG",{});var PMt=s(obe);zir=r(PMt,"not"),PMt.forEach(t),Wir=r($oe,` load the model weights. It only affects the
model\u2019s configuration. Use `),KW=n($oe,"A",{href:!0});var BMt=s(KW);Qir=r(BMt,"from_pretrained()"),BMt.forEach(t),Hir=r($oe," to load the model weights."),$oe.forEach(t),Uir=i(ow),T(HT.$$.fragment,ow),ow.forEach(t),Jir=i(pl),po=n(pl,"DIV",{class:!0});var Ma=s(po);T($y.$$.fragment,Ma),Yir=i(Ma),rbe=n(Ma,"P",{});var IMt=s(rbe);Kir=r(IMt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),IMt.forEach(t),Zir=i(Ma),Ja=n(Ma,"P",{});var rw=s(Ja);edr=r(rw,"The model class to instantiate is selected based on the "),tbe=n(rw,"CODE",{});var NMt=s(tbe);odr=r(NMt,"model_type"),NMt.forEach(t),rdr=r(rw,` property of the config object (either
passed as an argument or loaded from `),abe=n(rw,"CODE",{});var qMt=s(abe);tdr=r(qMt,"pretrained_model_name_or_path"),qMt.forEach(t),adr=r(rw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nbe=n(rw,"CODE",{});var jMt=s(nbe);ndr=r(jMt,"pretrained_model_name_or_path"),jMt.forEach(t),sdr=r(rw,":"),rw.forEach(t),ldr=i(Ma),ot=n(Ma,"UL",{});var ul=s(ot);UT=n(ul,"LI",{});var SPe=s(UT);sbe=n(SPe,"STRONG",{});var DMt=s(sbe);idr=r(DMt,"data2vec-audio"),DMt.forEach(t),ddr=r(SPe," \u2014 "),ZW=n(SPe,"A",{href:!0});var GMt=s(ZW);cdr=r(GMt,"Data2VecAudioForXVector"),GMt.forEach(t),fdr=r(SPe," (Data2VecAudio model)"),SPe.forEach(t),mdr=i(ul),JT=n(ul,"LI",{});var RPe=s(JT);lbe=n(RPe,"STRONG",{});var OMt=s(lbe);gdr=r(OMt,"unispeech-sat"),OMt.forEach(t),hdr=r(RPe," \u2014 "),eQ=n(RPe,"A",{href:!0});var VMt=s(eQ);pdr=r(VMt,"UniSpeechSatForXVector"),VMt.forEach(t),udr=r(RPe," (UniSpeechSat model)"),RPe.forEach(t),_dr=i(ul),YT=n(ul,"LI",{});var PPe=s(YT);ibe=n(PPe,"STRONG",{});var XMt=s(ibe);bdr=r(XMt,"wav2vec2"),XMt.forEach(t),vdr=r(PPe," \u2014 "),oQ=n(PPe,"A",{href:!0});var zMt=s(oQ);Fdr=r(zMt,"Wav2Vec2ForXVector"),zMt.forEach(t),Tdr=r(PPe," (Wav2Vec2 model)"),PPe.forEach(t),Mdr=i(ul),KT=n(ul,"LI",{});var BPe=s(KT);dbe=n(BPe,"STRONG",{});var WMt=s(dbe);Edr=r(WMt,"wav2vec2-conformer"),WMt.forEach(t),Cdr=r(BPe," \u2014 "),rQ=n(BPe,"A",{href:!0});var QMt=s(rQ);wdr=r(QMt,"Wav2Vec2ConformerForXVector"),QMt.forEach(t),Adr=r(BPe," (Wav2Vec2-Conformer model)"),BPe.forEach(t),Ldr=i(ul),ZT=n(ul,"LI",{});var IPe=s(ZT);cbe=n(IPe,"STRONG",{});var HMt=s(cbe);ydr=r(HMt,"wavlm"),HMt.forEach(t),xdr=r(IPe," \u2014 "),tQ=n(IPe,"A",{href:!0});var UMt=s(tQ);$dr=r(UMt,"WavLMForXVector"),UMt.forEach(t),kdr=r(IPe," (WavLM model)"),IPe.forEach(t),ul.forEach(t),Sdr=i(Ma),e7=n(Ma,"P",{});var NPe=s(e7);Rdr=r(NPe,"The model is set in evaluation mode by default using "),fbe=n(NPe,"CODE",{});var JMt=s(fbe);Pdr=r(JMt,"model.eval()"),JMt.forEach(t),Bdr=r(NPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mbe=n(NPe,"CODE",{});var YMt=s(mbe);Idr=r(YMt,"model.train()"),YMt.forEach(t),NPe.forEach(t),Ndr=i(Ma),T(o7.$$.fragment,Ma),Ma.forEach(t),pl.forEach(t),GGe=i(f),Nd=n(f,"H2",{class:!0});var HVe=s(Nd);r7=n(HVe,"A",{id:!0,class:!0,href:!0});var KMt=s(r7);gbe=n(KMt,"SPAN",{});var ZMt=s(gbe);T(ky.$$.fragment,ZMt),ZMt.forEach(t),KMt.forEach(t),qdr=i(HVe),hbe=n(HVe,"SPAN",{});var e4t=s(hbe);jdr=r(e4t,"AutoModelForMaskedImageModeling"),e4t.forEach(t),HVe.forEach(t),OGe=i(f),Ho=n(f,"DIV",{class:!0});var _l=s(Ho);T(Sy.$$.fragment,_l),Ddr=i(_l),qd=n(_l,"P",{});var koe=s(qd);Gdr=r(koe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),aQ=n(koe,"A",{href:!0});var o4t=s(aQ);Odr=r(o4t,"from_pretrained()"),o4t.forEach(t),Vdr=r(koe," class method or the "),nQ=n(koe,"A",{href:!0});var r4t=s(nQ);Xdr=r(r4t,"from_config()"),r4t.forEach(t),zdr=r(koe,` class
method.`),koe.forEach(t),Wdr=i(_l),Ry=n(_l,"P",{});var UVe=s(Ry);Qdr=r(UVe,"This class cannot be instantiated directly using "),pbe=n(UVe,"CODE",{});var t4t=s(pbe);Hdr=r(t4t,"__init__()"),t4t.forEach(t),Udr=r(UVe," (throws an error)."),UVe.forEach(t),Jdr=i(_l),wt=n(_l,"DIV",{class:!0});var tw=s(wt);T(Py.$$.fragment,tw),Ydr=i(tw),ube=n(tw,"P",{});var a4t=s(ube);Kdr=r(a4t,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),a4t.forEach(t),Zdr=i(tw),jd=n(tw,"P",{});var Soe=s(jd);ecr=r(Soe,`Note:
Loading a model from its configuration file does `),_be=n(Soe,"STRONG",{});var n4t=s(_be);ocr=r(n4t,"not"),n4t.forEach(t),rcr=r(Soe,` load the model weights. It only affects the
model\u2019s configuration. Use `),sQ=n(Soe,"A",{href:!0});var s4t=s(sQ);tcr=r(s4t,"from_pretrained()"),s4t.forEach(t),acr=r(Soe," to load the model weights."),Soe.forEach(t),ncr=i(tw),T(t7.$$.fragment,tw),tw.forEach(t),scr=i(_l),uo=n(_l,"DIV",{class:!0});var Ea=s(uo);T(By.$$.fragment,Ea),lcr=i(Ea),bbe=n(Ea,"P",{});var l4t=s(bbe);icr=r(l4t,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),l4t.forEach(t),dcr=i(Ea),Ya=n(Ea,"P",{});var aw=s(Ya);ccr=r(aw,"The model class to instantiate is selected based on the "),vbe=n(aw,"CODE",{});var i4t=s(vbe);fcr=r(i4t,"model_type"),i4t.forEach(t),mcr=r(aw,` property of the config object (either
passed as an argument or loaded from `),Fbe=n(aw,"CODE",{});var d4t=s(Fbe);gcr=r(d4t,"pretrained_model_name_or_path"),d4t.forEach(t),hcr=r(aw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tbe=n(aw,"CODE",{});var c4t=s(Tbe);pcr=r(c4t,"pretrained_model_name_or_path"),c4t.forEach(t),ucr=r(aw,":"),aw.forEach(t),_cr=i(Ea),Dd=n(Ea,"UL",{});var Roe=s(Dd);a7=n(Roe,"LI",{});var qPe=s(a7);Mbe=n(qPe,"STRONG",{});var f4t=s(Mbe);bcr=r(f4t,"deit"),f4t.forEach(t),vcr=r(qPe," \u2014 "),lQ=n(qPe,"A",{href:!0});var m4t=s(lQ);Fcr=r(m4t,"DeiTForMaskedImageModeling"),m4t.forEach(t),Tcr=r(qPe," (DeiT model)"),qPe.forEach(t),Mcr=i(Roe),n7=n(Roe,"LI",{});var jPe=s(n7);Ebe=n(jPe,"STRONG",{});var g4t=s(Ebe);Ecr=r(g4t,"swin"),g4t.forEach(t),Ccr=r(jPe," \u2014 "),iQ=n(jPe,"A",{href:!0});var h4t=s(iQ);wcr=r(h4t,"SwinForMaskedImageModeling"),h4t.forEach(t),Acr=r(jPe," (Swin Transformer model)"),jPe.forEach(t),Lcr=i(Roe),s7=n(Roe,"LI",{});var DPe=s(s7);Cbe=n(DPe,"STRONG",{});var p4t=s(Cbe);ycr=r(p4t,"vit"),p4t.forEach(t),xcr=r(DPe," \u2014 "),dQ=n(DPe,"A",{href:!0});var u4t=s(dQ);$cr=r(u4t,"ViTForMaskedImageModeling"),u4t.forEach(t),kcr=r(DPe," (ViT model)"),DPe.forEach(t),Roe.forEach(t),Scr=i(Ea),l7=n(Ea,"P",{});var GPe=s(l7);Rcr=r(GPe,"The model is set in evaluation mode by default using "),wbe=n(GPe,"CODE",{});var _4t=s(wbe);Pcr=r(_4t,"model.eval()"),_4t.forEach(t),Bcr=r(GPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Abe=n(GPe,"CODE",{});var b4t=s(Abe);Icr=r(b4t,"model.train()"),b4t.forEach(t),GPe.forEach(t),Ncr=i(Ea),T(i7.$$.fragment,Ea),Ea.forEach(t),_l.forEach(t),VGe=i(f),Gd=n(f,"H2",{class:!0});var JVe=s(Gd);d7=n(JVe,"A",{id:!0,class:!0,href:!0});var v4t=s(d7);Lbe=n(v4t,"SPAN",{});var F4t=s(Lbe);T(Iy.$$.fragment,F4t),F4t.forEach(t),v4t.forEach(t),qcr=i(JVe),ybe=n(JVe,"SPAN",{});var T4t=s(ybe);jcr=r(T4t,"AutoModelForObjectDetection"),T4t.forEach(t),JVe.forEach(t),XGe=i(f),Uo=n(f,"DIV",{class:!0});var bl=s(Uo);T(Ny.$$.fragment,bl),Dcr=i(bl),Od=n(bl,"P",{});var Poe=s(Od);Gcr=r(Poe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),cQ=n(Poe,"A",{href:!0});var M4t=s(cQ);Ocr=r(M4t,"from_pretrained()"),M4t.forEach(t),Vcr=r(Poe," class method or the "),fQ=n(Poe,"A",{href:!0});var E4t=s(fQ);Xcr=r(E4t,"from_config()"),E4t.forEach(t),zcr=r(Poe,` class
method.`),Poe.forEach(t),Wcr=i(bl),qy=n(bl,"P",{});var YVe=s(qy);Qcr=r(YVe,"This class cannot be instantiated directly using "),xbe=n(YVe,"CODE",{});var C4t=s(xbe);Hcr=r(C4t,"__init__()"),C4t.forEach(t),Ucr=r(YVe," (throws an error)."),YVe.forEach(t),Jcr=i(bl),At=n(bl,"DIV",{class:!0});var nw=s(At);T(jy.$$.fragment,nw),Ycr=i(nw),$be=n(nw,"P",{});var w4t=s($be);Kcr=r(w4t,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),w4t.forEach(t),Zcr=i(nw),Vd=n(nw,"P",{});var Boe=s(Vd);efr=r(Boe,`Note:
Loading a model from its configuration file does `),kbe=n(Boe,"STRONG",{});var A4t=s(kbe);ofr=r(A4t,"not"),A4t.forEach(t),rfr=r(Boe,` load the model weights. It only affects the
model\u2019s configuration. Use `),mQ=n(Boe,"A",{href:!0});var L4t=s(mQ);tfr=r(L4t,"from_pretrained()"),L4t.forEach(t),afr=r(Boe," to load the model weights."),Boe.forEach(t),nfr=i(nw),T(c7.$$.fragment,nw),nw.forEach(t),sfr=i(bl),_o=n(bl,"DIV",{class:!0});var Ca=s(_o);T(Dy.$$.fragment,Ca),lfr=i(Ca),Sbe=n(Ca,"P",{});var y4t=s(Sbe);ifr=r(y4t,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),y4t.forEach(t),dfr=i(Ca),Ka=n(Ca,"P",{});var sw=s(Ka);cfr=r(sw,"The model class to instantiate is selected based on the "),Rbe=n(sw,"CODE",{});var x4t=s(Rbe);ffr=r(x4t,"model_type"),x4t.forEach(t),mfr=r(sw,` property of the config object (either
passed as an argument or loaded from `),Pbe=n(sw,"CODE",{});var $4t=s(Pbe);gfr=r($4t,"pretrained_model_name_or_path"),$4t.forEach(t),hfr=r(sw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bbe=n(sw,"CODE",{});var k4t=s(Bbe);pfr=r(k4t,"pretrained_model_name_or_path"),k4t.forEach(t),ufr=r(sw,":"),sw.forEach(t),_fr=i(Ca),Gy=n(Ca,"UL",{});var KVe=s(Gy);f7=n(KVe,"LI",{});var OPe=s(f7);Ibe=n(OPe,"STRONG",{});var S4t=s(Ibe);bfr=r(S4t,"detr"),S4t.forEach(t),vfr=r(OPe," \u2014 "),gQ=n(OPe,"A",{href:!0});var R4t=s(gQ);Ffr=r(R4t,"DetrForObjectDetection"),R4t.forEach(t),Tfr=r(OPe," (DETR model)"),OPe.forEach(t),Mfr=i(KVe),m7=n(KVe,"LI",{});var VPe=s(m7);Nbe=n(VPe,"STRONG",{});var P4t=s(Nbe);Efr=r(P4t,"yolos"),P4t.forEach(t),Cfr=r(VPe," \u2014 "),hQ=n(VPe,"A",{href:!0});var B4t=s(hQ);wfr=r(B4t,"YolosForObjectDetection"),B4t.forEach(t),Afr=r(VPe," (YOLOS model)"),VPe.forEach(t),KVe.forEach(t),Lfr=i(Ca),g7=n(Ca,"P",{});var XPe=s(g7);yfr=r(XPe,"The model is set in evaluation mode by default using "),qbe=n(XPe,"CODE",{});var I4t=s(qbe);xfr=r(I4t,"model.eval()"),I4t.forEach(t),$fr=r(XPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jbe=n(XPe,"CODE",{});var N4t=s(jbe);kfr=r(N4t,"model.train()"),N4t.forEach(t),XPe.forEach(t),Sfr=i(Ca),T(h7.$$.fragment,Ca),Ca.forEach(t),bl.forEach(t),zGe=i(f),Xd=n(f,"H2",{class:!0});var ZVe=s(Xd);p7=n(ZVe,"A",{id:!0,class:!0,href:!0});var q4t=s(p7);Dbe=n(q4t,"SPAN",{});var j4t=s(Dbe);T(Oy.$$.fragment,j4t),j4t.forEach(t),q4t.forEach(t),Rfr=i(ZVe),Gbe=n(ZVe,"SPAN",{});var D4t=s(Gbe);Pfr=r(D4t,"AutoModelForImageSegmentation"),D4t.forEach(t),ZVe.forEach(t),WGe=i(f),Jo=n(f,"DIV",{class:!0});var vl=s(Jo);T(Vy.$$.fragment,vl),Bfr=i(vl),zd=n(vl,"P",{});var Ioe=s(zd);Ifr=r(Ioe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),pQ=n(Ioe,"A",{href:!0});var G4t=s(pQ);Nfr=r(G4t,"from_pretrained()"),G4t.forEach(t),qfr=r(Ioe," class method or the "),uQ=n(Ioe,"A",{href:!0});var O4t=s(uQ);jfr=r(O4t,"from_config()"),O4t.forEach(t),Dfr=r(Ioe,` class
method.`),Ioe.forEach(t),Gfr=i(vl),Xy=n(vl,"P",{});var eXe=s(Xy);Ofr=r(eXe,"This class cannot be instantiated directly using "),Obe=n(eXe,"CODE",{});var V4t=s(Obe);Vfr=r(V4t,"__init__()"),V4t.forEach(t),Xfr=r(eXe," (throws an error)."),eXe.forEach(t),zfr=i(vl),Lt=n(vl,"DIV",{class:!0});var lw=s(Lt);T(zy.$$.fragment,lw),Wfr=i(lw),Vbe=n(lw,"P",{});var X4t=s(Vbe);Qfr=r(X4t,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),X4t.forEach(t),Hfr=i(lw),Wd=n(lw,"P",{});var Noe=s(Wd);Ufr=r(Noe,`Note:
Loading a model from its configuration file does `),Xbe=n(Noe,"STRONG",{});var z4t=s(Xbe);Jfr=r(z4t,"not"),z4t.forEach(t),Yfr=r(Noe,` load the model weights. It only affects the
model\u2019s configuration. Use `),_Q=n(Noe,"A",{href:!0});var W4t=s(_Q);Kfr=r(W4t,"from_pretrained()"),W4t.forEach(t),Zfr=r(Noe," to load the model weights."),Noe.forEach(t),emr=i(lw),T(u7.$$.fragment,lw),lw.forEach(t),omr=i(vl),bo=n(vl,"DIV",{class:!0});var wa=s(bo);T(Wy.$$.fragment,wa),rmr=i(wa),zbe=n(wa,"P",{});var Q4t=s(zbe);tmr=r(Q4t,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Q4t.forEach(t),amr=i(wa),Za=n(wa,"P",{});var iw=s(Za);nmr=r(iw,"The model class to instantiate is selected based on the "),Wbe=n(iw,"CODE",{});var H4t=s(Wbe);smr=r(H4t,"model_type"),H4t.forEach(t),lmr=r(iw,` property of the config object (either
passed as an argument or loaded from `),Qbe=n(iw,"CODE",{});var U4t=s(Qbe);imr=r(U4t,"pretrained_model_name_or_path"),U4t.forEach(t),dmr=r(iw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hbe=n(iw,"CODE",{});var J4t=s(Hbe);cmr=r(J4t,"pretrained_model_name_or_path"),J4t.forEach(t),fmr=r(iw,":"),iw.forEach(t),mmr=i(wa),Ube=n(wa,"UL",{});var Y4t=s(Ube);_7=n(Y4t,"LI",{});var zPe=s(_7);Jbe=n(zPe,"STRONG",{});var K4t=s(Jbe);gmr=r(K4t,"detr"),K4t.forEach(t),hmr=r(zPe," \u2014 "),bQ=n(zPe,"A",{href:!0});var Z4t=s(bQ);pmr=r(Z4t,"DetrForSegmentation"),Z4t.forEach(t),umr=r(zPe," (DETR model)"),zPe.forEach(t),Y4t.forEach(t),_mr=i(wa),b7=n(wa,"P",{});var WPe=s(b7);bmr=r(WPe,"The model is set in evaluation mode by default using "),Ybe=n(WPe,"CODE",{});var eEt=s(Ybe);vmr=r(eEt,"model.eval()"),eEt.forEach(t),Fmr=r(WPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kbe=n(WPe,"CODE",{});var oEt=s(Kbe);Tmr=r(oEt,"model.train()"),oEt.forEach(t),WPe.forEach(t),Mmr=i(wa),T(v7.$$.fragment,wa),wa.forEach(t),vl.forEach(t),QGe=i(f),Qd=n(f,"H2",{class:!0});var oXe=s(Qd);F7=n(oXe,"A",{id:!0,class:!0,href:!0});var rEt=s(F7);Zbe=n(rEt,"SPAN",{});var tEt=s(Zbe);T(Qy.$$.fragment,tEt),tEt.forEach(t),rEt.forEach(t),Emr=i(oXe),eve=n(oXe,"SPAN",{});var aEt=s(eve);Cmr=r(aEt,"AutoModelForSemanticSegmentation"),aEt.forEach(t),oXe.forEach(t),HGe=i(f),Yo=n(f,"DIV",{class:!0});var Fl=s(Yo);T(Hy.$$.fragment,Fl),wmr=i(Fl),Hd=n(Fl,"P",{});var qoe=s(Hd);Amr=r(qoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),vQ=n(qoe,"A",{href:!0});var nEt=s(vQ);Lmr=r(nEt,"from_pretrained()"),nEt.forEach(t),ymr=r(qoe," class method or the "),FQ=n(qoe,"A",{href:!0});var sEt=s(FQ);xmr=r(sEt,"from_config()"),sEt.forEach(t),$mr=r(qoe,` class
method.`),qoe.forEach(t),kmr=i(Fl),Uy=n(Fl,"P",{});var rXe=s(Uy);Smr=r(rXe,"This class cannot be instantiated directly using "),ove=n(rXe,"CODE",{});var lEt=s(ove);Rmr=r(lEt,"__init__()"),lEt.forEach(t),Pmr=r(rXe," (throws an error)."),rXe.forEach(t),Bmr=i(Fl),yt=n(Fl,"DIV",{class:!0});var dw=s(yt);T(Jy.$$.fragment,dw),Imr=i(dw),rve=n(dw,"P",{});var iEt=s(rve);Nmr=r(iEt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),iEt.forEach(t),qmr=i(dw),Ud=n(dw,"P",{});var joe=s(Ud);jmr=r(joe,`Note:
Loading a model from its configuration file does `),tve=n(joe,"STRONG",{});var dEt=s(tve);Dmr=r(dEt,"not"),dEt.forEach(t),Gmr=r(joe,` load the model weights. It only affects the
model\u2019s configuration. Use `),TQ=n(joe,"A",{href:!0});var cEt=s(TQ);Omr=r(cEt,"from_pretrained()"),cEt.forEach(t),Vmr=r(joe," to load the model weights."),joe.forEach(t),Xmr=i(dw),T(T7.$$.fragment,dw),dw.forEach(t),zmr=i(Fl),vo=n(Fl,"DIV",{class:!0});var Aa=s(vo);T(Yy.$$.fragment,Aa),Wmr=i(Aa),ave=n(Aa,"P",{});var fEt=s(ave);Qmr=r(fEt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),fEt.forEach(t),Hmr=i(Aa),en=n(Aa,"P",{});var cw=s(en);Umr=r(cw,"The model class to instantiate is selected based on the "),nve=n(cw,"CODE",{});var mEt=s(nve);Jmr=r(mEt,"model_type"),mEt.forEach(t),Ymr=r(cw,` property of the config object (either
passed as an argument or loaded from `),sve=n(cw,"CODE",{});var gEt=s(sve);Kmr=r(gEt,"pretrained_model_name_or_path"),gEt.forEach(t),Zmr=r(cw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lve=n(cw,"CODE",{});var hEt=s(lve);egr=r(hEt,"pretrained_model_name_or_path"),hEt.forEach(t),ogr=r(cw,":"),cw.forEach(t),rgr=i(Aa),on=n(Aa,"UL",{});var fw=s(on);M7=n(fw,"LI",{});var QPe=s(M7);ive=n(QPe,"STRONG",{});var pEt=s(ive);tgr=r(pEt,"beit"),pEt.forEach(t),agr=r(QPe," \u2014 "),MQ=n(QPe,"A",{href:!0});var uEt=s(MQ);ngr=r(uEt,"BeitForSemanticSegmentation"),uEt.forEach(t),sgr=r(QPe," (BEiT model)"),QPe.forEach(t),lgr=i(fw),E7=n(fw,"LI",{});var HPe=s(E7);dve=n(HPe,"STRONG",{});var _Et=s(dve);igr=r(_Et,"data2vec-vision"),_Et.forEach(t),dgr=r(HPe," \u2014 "),EQ=n(HPe,"A",{href:!0});var bEt=s(EQ);cgr=r(bEt,"Data2VecVisionForSemanticSegmentation"),bEt.forEach(t),fgr=r(HPe," (Data2VecVision model)"),HPe.forEach(t),mgr=i(fw),C7=n(fw,"LI",{});var UPe=s(C7);cve=n(UPe,"STRONG",{});var vEt=s(cve);ggr=r(vEt,"dpt"),vEt.forEach(t),hgr=r(UPe," \u2014 "),CQ=n(UPe,"A",{href:!0});var FEt=s(CQ);pgr=r(FEt,"DPTForSemanticSegmentation"),FEt.forEach(t),ugr=r(UPe," (DPT model)"),UPe.forEach(t),_gr=i(fw),w7=n(fw,"LI",{});var JPe=s(w7);fve=n(JPe,"STRONG",{});var TEt=s(fve);bgr=r(TEt,"segformer"),TEt.forEach(t),vgr=r(JPe," \u2014 "),wQ=n(JPe,"A",{href:!0});var MEt=s(wQ);Fgr=r(MEt,"SegformerForSemanticSegmentation"),MEt.forEach(t),Tgr=r(JPe," (SegFormer model)"),JPe.forEach(t),fw.forEach(t),Mgr=i(Aa),A7=n(Aa,"P",{});var YPe=s(A7);Egr=r(YPe,"The model is set in evaluation mode by default using "),mve=n(YPe,"CODE",{});var EEt=s(mve);Cgr=r(EEt,"model.eval()"),EEt.forEach(t),wgr=r(YPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gve=n(YPe,"CODE",{});var CEt=s(gve);Agr=r(CEt,"model.train()"),CEt.forEach(t),YPe.forEach(t),Lgr=i(Aa),T(L7.$$.fragment,Aa),Aa.forEach(t),Fl.forEach(t),UGe=i(f),Jd=n(f,"H2",{class:!0});var tXe=s(Jd);y7=n(tXe,"A",{id:!0,class:!0,href:!0});var wEt=s(y7);hve=n(wEt,"SPAN",{});var AEt=s(hve);T(Ky.$$.fragment,AEt),AEt.forEach(t),wEt.forEach(t),ygr=i(tXe),pve=n(tXe,"SPAN",{});var LEt=s(pve);xgr=r(LEt,"AutoModelForInstanceSegmentation"),LEt.forEach(t),tXe.forEach(t),JGe=i(f),Ko=n(f,"DIV",{class:!0});var Tl=s(Ko);T(Zy.$$.fragment,Tl),$gr=i(Tl),Yd=n(Tl,"P",{});var Doe=s(Yd);kgr=r(Doe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),AQ=n(Doe,"A",{href:!0});var yEt=s(AQ);Sgr=r(yEt,"from_pretrained()"),yEt.forEach(t),Rgr=r(Doe," class method or the "),LQ=n(Doe,"A",{href:!0});var xEt=s(LQ);Pgr=r(xEt,"from_config()"),xEt.forEach(t),Bgr=r(Doe,` class
method.`),Doe.forEach(t),Igr=i(Tl),e8=n(Tl,"P",{});var aXe=s(e8);Ngr=r(aXe,"This class cannot be instantiated directly using "),uve=n(aXe,"CODE",{});var $Et=s(uve);qgr=r($Et,"__init__()"),$Et.forEach(t),jgr=r(aXe," (throws an error)."),aXe.forEach(t),Dgr=i(Tl),xt=n(Tl,"DIV",{class:!0});var mw=s(xt);T(o8.$$.fragment,mw),Ggr=i(mw),_ve=n(mw,"P",{});var kEt=s(_ve);Ogr=r(kEt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),kEt.forEach(t),Vgr=i(mw),Kd=n(mw,"P",{});var Goe=s(Kd);Xgr=r(Goe,`Note:
Loading a model from its configuration file does `),bve=n(Goe,"STRONG",{});var SEt=s(bve);zgr=r(SEt,"not"),SEt.forEach(t),Wgr=r(Goe,` load the model weights. It only affects the
model\u2019s configuration. Use `),yQ=n(Goe,"A",{href:!0});var REt=s(yQ);Qgr=r(REt,"from_pretrained()"),REt.forEach(t),Hgr=r(Goe," to load the model weights."),Goe.forEach(t),Ugr=i(mw),T(x7.$$.fragment,mw),mw.forEach(t),Jgr=i(Tl),Fo=n(Tl,"DIV",{class:!0});var La=s(Fo);T(r8.$$.fragment,La),Ygr=i(La),vve=n(La,"P",{});var PEt=s(vve);Kgr=r(PEt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),PEt.forEach(t),Zgr=i(La),rn=n(La,"P",{});var gw=s(rn);ehr=r(gw,"The model class to instantiate is selected based on the "),Fve=n(gw,"CODE",{});var BEt=s(Fve);ohr=r(BEt,"model_type"),BEt.forEach(t),rhr=r(gw,` property of the config object (either
passed as an argument or loaded from `),Tve=n(gw,"CODE",{});var IEt=s(Tve);thr=r(IEt,"pretrained_model_name_or_path"),IEt.forEach(t),ahr=r(gw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mve=n(gw,"CODE",{});var NEt=s(Mve);nhr=r(NEt,"pretrained_model_name_or_path"),NEt.forEach(t),shr=r(gw,":"),gw.forEach(t),lhr=i(La),Eve=n(La,"UL",{});var qEt=s(Eve);$7=n(qEt,"LI",{});var KPe=s($7);Cve=n(KPe,"STRONG",{});var jEt=s(Cve);ihr=r(jEt,"maskformer"),jEt.forEach(t),dhr=r(KPe," \u2014 "),xQ=n(KPe,"A",{href:!0});var DEt=s(xQ);chr=r(DEt,"MaskFormerForInstanceSegmentation"),DEt.forEach(t),fhr=r(KPe," (MaskFormer model)"),KPe.forEach(t),qEt.forEach(t),mhr=i(La),k7=n(La,"P",{});var ZPe=s(k7);ghr=r(ZPe,"The model is set in evaluation mode by default using "),wve=n(ZPe,"CODE",{});var GEt=s(wve);hhr=r(GEt,"model.eval()"),GEt.forEach(t),phr=r(ZPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ave=n(ZPe,"CODE",{});var OEt=s(Ave);uhr=r(OEt,"model.train()"),OEt.forEach(t),ZPe.forEach(t),_hr=i(La),T(S7.$$.fragment,La),La.forEach(t),Tl.forEach(t),YGe=i(f),Zd=n(f,"H2",{class:!0});var nXe=s(Zd);R7=n(nXe,"A",{id:!0,class:!0,href:!0});var VEt=s(R7);Lve=n(VEt,"SPAN",{});var XEt=s(Lve);T(t8.$$.fragment,XEt),XEt.forEach(t),VEt.forEach(t),bhr=i(nXe),yve=n(nXe,"SPAN",{});var zEt=s(yve);vhr=r(zEt,"TFAutoModel"),zEt.forEach(t),nXe.forEach(t),KGe=i(f),Zo=n(f,"DIV",{class:!0});var Ml=s(Zo);T(a8.$$.fragment,Ml),Fhr=i(Ml),ec=n(Ml,"P",{});var Ooe=s(ec);Thr=r(Ooe,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),$Q=n(Ooe,"A",{href:!0});var WEt=s($Q);Mhr=r(WEt,"from_pretrained()"),WEt.forEach(t),Ehr=r(Ooe," class method or the "),kQ=n(Ooe,"A",{href:!0});var QEt=s(kQ);Chr=r(QEt,"from_config()"),QEt.forEach(t),whr=r(Ooe,` class
method.`),Ooe.forEach(t),Ahr=i(Ml),n8=n(Ml,"P",{});var sXe=s(n8);Lhr=r(sXe,"This class cannot be instantiated directly using "),xve=n(sXe,"CODE",{});var HEt=s(xve);yhr=r(HEt,"__init__()"),HEt.forEach(t),xhr=r(sXe," (throws an error)."),sXe.forEach(t),$hr=i(Ml),$t=n(Ml,"DIV",{class:!0});var hw=s($t);T(s8.$$.fragment,hw),khr=i(hw),$ve=n(hw,"P",{});var UEt=s($ve);Shr=r(UEt,"Instantiates one of the base model classes of the library from a configuration."),UEt.forEach(t),Rhr=i(hw),oc=n(hw,"P",{});var Voe=s(oc);Phr=r(Voe,`Note:
Loading a model from its configuration file does `),kve=n(Voe,"STRONG",{});var JEt=s(kve);Bhr=r(JEt,"not"),JEt.forEach(t),Ihr=r(Voe,` load the model weights. It only affects the
model\u2019s configuration. Use `),SQ=n(Voe,"A",{href:!0});var YEt=s(SQ);Nhr=r(YEt,"from_pretrained()"),YEt.forEach(t),qhr=r(Voe," to load the model weights."),Voe.forEach(t),jhr=i(hw),T(P7.$$.fragment,hw),hw.forEach(t),Dhr=i(Ml),Lr=n(Ml,"DIV",{class:!0});var El=s(Lr);T(l8.$$.fragment,El),Ghr=i(El),Sve=n(El,"P",{});var KEt=s(Sve);Ohr=r(KEt,"Instantiate one of the base model classes of the library from a pretrained model."),KEt.forEach(t),Vhr=i(El),tn=n(El,"P",{});var pw=s(tn);Xhr=r(pw,"The model class to instantiate is selected based on the "),Rve=n(pw,"CODE",{});var ZEt=s(Rve);zhr=r(ZEt,"model_type"),ZEt.forEach(t),Whr=r(pw,` property of the config object (either
passed as an argument or loaded from `),Pve=n(pw,"CODE",{});var eCt=s(Pve);Qhr=r(eCt,"pretrained_model_name_or_path"),eCt.forEach(t),Hhr=r(pw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bve=n(pw,"CODE",{});var oCt=s(Bve);Uhr=r(oCt,"pretrained_model_name_or_path"),oCt.forEach(t),Jhr=r(pw,":"),pw.forEach(t),Yhr=i(El),q=n(El,"UL",{});var D=s(q);B7=n(D,"LI",{});var eBe=s(B7);Ive=n(eBe,"STRONG",{});var rCt=s(Ive);Khr=r(rCt,"albert"),rCt.forEach(t),Zhr=r(eBe," \u2014 "),RQ=n(eBe,"A",{href:!0});var tCt=s(RQ);epr=r(tCt,"TFAlbertModel"),tCt.forEach(t),opr=r(eBe," (ALBERT model)"),eBe.forEach(t),rpr=i(D),I7=n(D,"LI",{});var oBe=s(I7);Nve=n(oBe,"STRONG",{});var aCt=s(Nve);tpr=r(aCt,"bart"),aCt.forEach(t),apr=r(oBe," \u2014 "),PQ=n(oBe,"A",{href:!0});var nCt=s(PQ);npr=r(nCt,"TFBartModel"),nCt.forEach(t),spr=r(oBe," (BART model)"),oBe.forEach(t),lpr=i(D),N7=n(D,"LI",{});var rBe=s(N7);qve=n(rBe,"STRONG",{});var sCt=s(qve);ipr=r(sCt,"bert"),sCt.forEach(t),dpr=r(rBe," \u2014 "),BQ=n(rBe,"A",{href:!0});var lCt=s(BQ);cpr=r(lCt,"TFBertModel"),lCt.forEach(t),fpr=r(rBe," (BERT model)"),rBe.forEach(t),mpr=i(D),q7=n(D,"LI",{});var tBe=s(q7);jve=n(tBe,"STRONG",{});var iCt=s(jve);gpr=r(iCt,"blenderbot"),iCt.forEach(t),hpr=r(tBe," \u2014 "),IQ=n(tBe,"A",{href:!0});var dCt=s(IQ);ppr=r(dCt,"TFBlenderbotModel"),dCt.forEach(t),upr=r(tBe," (Blenderbot model)"),tBe.forEach(t),_pr=i(D),j7=n(D,"LI",{});var aBe=s(j7);Dve=n(aBe,"STRONG",{});var cCt=s(Dve);bpr=r(cCt,"blenderbot-small"),cCt.forEach(t),vpr=r(aBe," \u2014 "),NQ=n(aBe,"A",{href:!0});var fCt=s(NQ);Fpr=r(fCt,"TFBlenderbotSmallModel"),fCt.forEach(t),Tpr=r(aBe," (BlenderbotSmall model)"),aBe.forEach(t),Mpr=i(D),D7=n(D,"LI",{});var nBe=s(D7);Gve=n(nBe,"STRONG",{});var mCt=s(Gve);Epr=r(mCt,"camembert"),mCt.forEach(t),Cpr=r(nBe," \u2014 "),qQ=n(nBe,"A",{href:!0});var gCt=s(qQ);wpr=r(gCt,"TFCamembertModel"),gCt.forEach(t),Apr=r(nBe," (CamemBERT model)"),nBe.forEach(t),Lpr=i(D),G7=n(D,"LI",{});var sBe=s(G7);Ove=n(sBe,"STRONG",{});var hCt=s(Ove);ypr=r(hCt,"clip"),hCt.forEach(t),xpr=r(sBe," \u2014 "),jQ=n(sBe,"A",{href:!0});var pCt=s(jQ);$pr=r(pCt,"TFCLIPModel"),pCt.forEach(t),kpr=r(sBe," (CLIP model)"),sBe.forEach(t),Spr=i(D),O7=n(D,"LI",{});var lBe=s(O7);Vve=n(lBe,"STRONG",{});var uCt=s(Vve);Rpr=r(uCt,"convbert"),uCt.forEach(t),Ppr=r(lBe," \u2014 "),DQ=n(lBe,"A",{href:!0});var _Ct=s(DQ);Bpr=r(_Ct,"TFConvBertModel"),_Ct.forEach(t),Ipr=r(lBe," (ConvBERT model)"),lBe.forEach(t),Npr=i(D),V7=n(D,"LI",{});var iBe=s(V7);Xve=n(iBe,"STRONG",{});var bCt=s(Xve);qpr=r(bCt,"convnext"),bCt.forEach(t),jpr=r(iBe," \u2014 "),GQ=n(iBe,"A",{href:!0});var vCt=s(GQ);Dpr=r(vCt,"TFConvNextModel"),vCt.forEach(t),Gpr=r(iBe," (ConvNeXT model)"),iBe.forEach(t),Opr=i(D),X7=n(D,"LI",{});var dBe=s(X7);zve=n(dBe,"STRONG",{});var FCt=s(zve);Vpr=r(FCt,"ctrl"),FCt.forEach(t),Xpr=r(dBe," \u2014 "),OQ=n(dBe,"A",{href:!0});var TCt=s(OQ);zpr=r(TCt,"TFCTRLModel"),TCt.forEach(t),Wpr=r(dBe," (CTRL model)"),dBe.forEach(t),Qpr=i(D),z7=n(D,"LI",{});var cBe=s(z7);Wve=n(cBe,"STRONG",{});var MCt=s(Wve);Hpr=r(MCt,"data2vec-vision"),MCt.forEach(t),Upr=r(cBe," \u2014 "),VQ=n(cBe,"A",{href:!0});var ECt=s(VQ);Jpr=r(ECt,"TFData2VecVisionModel"),ECt.forEach(t),Ypr=r(cBe," (Data2VecVision model)"),cBe.forEach(t),Kpr=i(D),W7=n(D,"LI",{});var fBe=s(W7);Qve=n(fBe,"STRONG",{});var CCt=s(Qve);Zpr=r(CCt,"deberta"),CCt.forEach(t),eur=r(fBe," \u2014 "),XQ=n(fBe,"A",{href:!0});var wCt=s(XQ);our=r(wCt,"TFDebertaModel"),wCt.forEach(t),rur=r(fBe," (DeBERTa model)"),fBe.forEach(t),tur=i(D),Q7=n(D,"LI",{});var mBe=s(Q7);Hve=n(mBe,"STRONG",{});var ACt=s(Hve);aur=r(ACt,"deberta-v2"),ACt.forEach(t),nur=r(mBe," \u2014 "),zQ=n(mBe,"A",{href:!0});var LCt=s(zQ);sur=r(LCt,"TFDebertaV2Model"),LCt.forEach(t),lur=r(mBe," (DeBERTa-v2 model)"),mBe.forEach(t),iur=i(D),H7=n(D,"LI",{});var gBe=s(H7);Uve=n(gBe,"STRONG",{});var yCt=s(Uve);dur=r(yCt,"distilbert"),yCt.forEach(t),cur=r(gBe," \u2014 "),WQ=n(gBe,"A",{href:!0});var xCt=s(WQ);fur=r(xCt,"TFDistilBertModel"),xCt.forEach(t),mur=r(gBe," (DistilBERT model)"),gBe.forEach(t),gur=i(D),U7=n(D,"LI",{});var hBe=s(U7);Jve=n(hBe,"STRONG",{});var $Ct=s(Jve);hur=r($Ct,"dpr"),$Ct.forEach(t),pur=r(hBe," \u2014 "),QQ=n(hBe,"A",{href:!0});var kCt=s(QQ);uur=r(kCt,"TFDPRQuestionEncoder"),kCt.forEach(t),_ur=r(hBe," (DPR model)"),hBe.forEach(t),bur=i(D),J7=n(D,"LI",{});var pBe=s(J7);Yve=n(pBe,"STRONG",{});var SCt=s(Yve);vur=r(SCt,"electra"),SCt.forEach(t),Fur=r(pBe," \u2014 "),HQ=n(pBe,"A",{href:!0});var RCt=s(HQ);Tur=r(RCt,"TFElectraModel"),RCt.forEach(t),Mur=r(pBe," (ELECTRA model)"),pBe.forEach(t),Eur=i(D),Y7=n(D,"LI",{});var uBe=s(Y7);Kve=n(uBe,"STRONG",{});var PCt=s(Kve);Cur=r(PCt,"flaubert"),PCt.forEach(t),wur=r(uBe," \u2014 "),UQ=n(uBe,"A",{href:!0});var BCt=s(UQ);Aur=r(BCt,"TFFlaubertModel"),BCt.forEach(t),Lur=r(uBe," (FlauBERT model)"),uBe.forEach(t),yur=i(D),Xs=n(D,"LI",{});var Ok=s(Xs);Zve=n(Ok,"STRONG",{});var ICt=s(Zve);xur=r(ICt,"funnel"),ICt.forEach(t),$ur=r(Ok," \u2014 "),JQ=n(Ok,"A",{href:!0});var NCt=s(JQ);kur=r(NCt,"TFFunnelModel"),NCt.forEach(t),Sur=r(Ok," or "),YQ=n(Ok,"A",{href:!0});var qCt=s(YQ);Rur=r(qCt,"TFFunnelBaseModel"),qCt.forEach(t),Pur=r(Ok," (Funnel Transformer model)"),Ok.forEach(t),Bur=i(D),K7=n(D,"LI",{});var _Be=s(K7);eFe=n(_Be,"STRONG",{});var jCt=s(eFe);Iur=r(jCt,"gpt2"),jCt.forEach(t),Nur=r(_Be," \u2014 "),KQ=n(_Be,"A",{href:!0});var DCt=s(KQ);qur=r(DCt,"TFGPT2Model"),DCt.forEach(t),jur=r(_Be," (OpenAI GPT-2 model)"),_Be.forEach(t),Dur=i(D),Z7=n(D,"LI",{});var bBe=s(Z7);oFe=n(bBe,"STRONG",{});var GCt=s(oFe);Gur=r(GCt,"gptj"),GCt.forEach(t),Our=r(bBe," \u2014 "),ZQ=n(bBe,"A",{href:!0});var OCt=s(ZQ);Vur=r(OCt,"TFGPTJModel"),OCt.forEach(t),Xur=r(bBe," (GPT-J model)"),bBe.forEach(t),zur=i(D),e9=n(D,"LI",{});var vBe=s(e9);rFe=n(vBe,"STRONG",{});var VCt=s(rFe);Wur=r(VCt,"hubert"),VCt.forEach(t),Qur=r(vBe," \u2014 "),eH=n(vBe,"A",{href:!0});var XCt=s(eH);Hur=r(XCt,"TFHubertModel"),XCt.forEach(t),Uur=r(vBe," (Hubert model)"),vBe.forEach(t),Jur=i(D),o9=n(D,"LI",{});var FBe=s(o9);tFe=n(FBe,"STRONG",{});var zCt=s(tFe);Yur=r(zCt,"layoutlm"),zCt.forEach(t),Kur=r(FBe," \u2014 "),oH=n(FBe,"A",{href:!0});var WCt=s(oH);Zur=r(WCt,"TFLayoutLMModel"),WCt.forEach(t),e_r=r(FBe," (LayoutLM model)"),FBe.forEach(t),o_r=i(D),r9=n(D,"LI",{});var TBe=s(r9);aFe=n(TBe,"STRONG",{});var QCt=s(aFe);r_r=r(QCt,"led"),QCt.forEach(t),t_r=r(TBe," \u2014 "),rH=n(TBe,"A",{href:!0});var HCt=s(rH);a_r=r(HCt,"TFLEDModel"),HCt.forEach(t),n_r=r(TBe," (LED model)"),TBe.forEach(t),s_r=i(D),t9=n(D,"LI",{});var MBe=s(t9);nFe=n(MBe,"STRONG",{});var UCt=s(nFe);l_r=r(UCt,"longformer"),UCt.forEach(t),i_r=r(MBe," \u2014 "),tH=n(MBe,"A",{href:!0});var JCt=s(tH);d_r=r(JCt,"TFLongformerModel"),JCt.forEach(t),c_r=r(MBe," (Longformer model)"),MBe.forEach(t),f_r=i(D),a9=n(D,"LI",{});var EBe=s(a9);sFe=n(EBe,"STRONG",{});var YCt=s(sFe);m_r=r(YCt,"lxmert"),YCt.forEach(t),g_r=r(EBe," \u2014 "),aH=n(EBe,"A",{href:!0});var KCt=s(aH);h_r=r(KCt,"TFLxmertModel"),KCt.forEach(t),p_r=r(EBe," (LXMERT model)"),EBe.forEach(t),u_r=i(D),n9=n(D,"LI",{});var CBe=s(n9);lFe=n(CBe,"STRONG",{});var ZCt=s(lFe);__r=r(ZCt,"marian"),ZCt.forEach(t),b_r=r(CBe," \u2014 "),nH=n(CBe,"A",{href:!0});var e5t=s(nH);v_r=r(e5t,"TFMarianModel"),e5t.forEach(t),F_r=r(CBe," (Marian model)"),CBe.forEach(t),T_r=i(D),s9=n(D,"LI",{});var wBe=s(s9);iFe=n(wBe,"STRONG",{});var o5t=s(iFe);M_r=r(o5t,"mbart"),o5t.forEach(t),E_r=r(wBe," \u2014 "),sH=n(wBe,"A",{href:!0});var r5t=s(sH);C_r=r(r5t,"TFMBartModel"),r5t.forEach(t),w_r=r(wBe," (mBART model)"),wBe.forEach(t),A_r=i(D),l9=n(D,"LI",{});var ABe=s(l9);dFe=n(ABe,"STRONG",{});var t5t=s(dFe);L_r=r(t5t,"mobilebert"),t5t.forEach(t),y_r=r(ABe," \u2014 "),lH=n(ABe,"A",{href:!0});var a5t=s(lH);x_r=r(a5t,"TFMobileBertModel"),a5t.forEach(t),$_r=r(ABe," (MobileBERT model)"),ABe.forEach(t),k_r=i(D),i9=n(D,"LI",{});var LBe=s(i9);cFe=n(LBe,"STRONG",{});var n5t=s(cFe);S_r=r(n5t,"mpnet"),n5t.forEach(t),R_r=r(LBe," \u2014 "),iH=n(LBe,"A",{href:!0});var s5t=s(iH);P_r=r(s5t,"TFMPNetModel"),s5t.forEach(t),B_r=r(LBe," (MPNet model)"),LBe.forEach(t),I_r=i(D),d9=n(D,"LI",{});var yBe=s(d9);fFe=n(yBe,"STRONG",{});var l5t=s(fFe);N_r=r(l5t,"mt5"),l5t.forEach(t),q_r=r(yBe," \u2014 "),dH=n(yBe,"A",{href:!0});var i5t=s(dH);j_r=r(i5t,"TFMT5Model"),i5t.forEach(t),D_r=r(yBe," (MT5 model)"),yBe.forEach(t),G_r=i(D),c9=n(D,"LI",{});var xBe=s(c9);mFe=n(xBe,"STRONG",{});var d5t=s(mFe);O_r=r(d5t,"openai-gpt"),d5t.forEach(t),V_r=r(xBe," \u2014 "),cH=n(xBe,"A",{href:!0});var c5t=s(cH);X_r=r(c5t,"TFOpenAIGPTModel"),c5t.forEach(t),z_r=r(xBe," (OpenAI GPT model)"),xBe.forEach(t),W_r=i(D),f9=n(D,"LI",{});var $Be=s(f9);gFe=n($Be,"STRONG",{});var f5t=s(gFe);Q_r=r(f5t,"opt"),f5t.forEach(t),H_r=r($Be," \u2014 "),fH=n($Be,"A",{href:!0});var m5t=s(fH);U_r=r(m5t,"TFOPTModel"),m5t.forEach(t),J_r=r($Be," (OPT model)"),$Be.forEach(t),Y_r=i(D),m9=n(D,"LI",{});var kBe=s(m9);hFe=n(kBe,"STRONG",{});var g5t=s(hFe);K_r=r(g5t,"pegasus"),g5t.forEach(t),Z_r=r(kBe," \u2014 "),mH=n(kBe,"A",{href:!0});var h5t=s(mH);e2r=r(h5t,"TFPegasusModel"),h5t.forEach(t),o2r=r(kBe," (Pegasus model)"),kBe.forEach(t),r2r=i(D),g9=n(D,"LI",{});var SBe=s(g9);pFe=n(SBe,"STRONG",{});var p5t=s(pFe);t2r=r(p5t,"rembert"),p5t.forEach(t),a2r=r(SBe," \u2014 "),gH=n(SBe,"A",{href:!0});var u5t=s(gH);n2r=r(u5t,"TFRemBertModel"),u5t.forEach(t),s2r=r(SBe," (RemBERT model)"),SBe.forEach(t),l2r=i(D),h9=n(D,"LI",{});var RBe=s(h9);uFe=n(RBe,"STRONG",{});var _5t=s(uFe);i2r=r(_5t,"roberta"),_5t.forEach(t),d2r=r(RBe," \u2014 "),hH=n(RBe,"A",{href:!0});var b5t=s(hH);c2r=r(b5t,"TFRobertaModel"),b5t.forEach(t),f2r=r(RBe," (RoBERTa model)"),RBe.forEach(t),m2r=i(D),p9=n(D,"LI",{});var PBe=s(p9);_Fe=n(PBe,"STRONG",{});var v5t=s(_Fe);g2r=r(v5t,"roformer"),v5t.forEach(t),h2r=r(PBe," \u2014 "),pH=n(PBe,"A",{href:!0});var F5t=s(pH);p2r=r(F5t,"TFRoFormerModel"),F5t.forEach(t),u2r=r(PBe," (RoFormer model)"),PBe.forEach(t),_2r=i(D),u9=n(D,"LI",{});var BBe=s(u9);bFe=n(BBe,"STRONG",{});var T5t=s(bFe);b2r=r(T5t,"speech_to_text"),T5t.forEach(t),v2r=r(BBe," \u2014 "),uH=n(BBe,"A",{href:!0});var M5t=s(uH);F2r=r(M5t,"TFSpeech2TextModel"),M5t.forEach(t),T2r=r(BBe," (Speech2Text model)"),BBe.forEach(t),M2r=i(D),_9=n(D,"LI",{});var IBe=s(_9);vFe=n(IBe,"STRONG",{});var E5t=s(vFe);E2r=r(E5t,"swin"),E5t.forEach(t),C2r=r(IBe," \u2014 "),_H=n(IBe,"A",{href:!0});var C5t=s(_H);w2r=r(C5t,"TFSwinModel"),C5t.forEach(t),A2r=r(IBe," (Swin Transformer model)"),IBe.forEach(t),L2r=i(D),b9=n(D,"LI",{});var NBe=s(b9);FFe=n(NBe,"STRONG",{});var w5t=s(FFe);y2r=r(w5t,"t5"),w5t.forEach(t),x2r=r(NBe," \u2014 "),bH=n(NBe,"A",{href:!0});var A5t=s(bH);$2r=r(A5t,"TFT5Model"),A5t.forEach(t),k2r=r(NBe," (T5 model)"),NBe.forEach(t),S2r=i(D),v9=n(D,"LI",{});var qBe=s(v9);TFe=n(qBe,"STRONG",{});var L5t=s(TFe);R2r=r(L5t,"tapas"),L5t.forEach(t),P2r=r(qBe," \u2014 "),vH=n(qBe,"A",{href:!0});var y5t=s(vH);B2r=r(y5t,"TFTapasModel"),y5t.forEach(t),I2r=r(qBe," (TAPAS model)"),qBe.forEach(t),N2r=i(D),F9=n(D,"LI",{});var jBe=s(F9);MFe=n(jBe,"STRONG",{});var x5t=s(MFe);q2r=r(x5t,"transfo-xl"),x5t.forEach(t),j2r=r(jBe," \u2014 "),FH=n(jBe,"A",{href:!0});var $5t=s(FH);D2r=r($5t,"TFTransfoXLModel"),$5t.forEach(t),G2r=r(jBe," (Transformer-XL model)"),jBe.forEach(t),O2r=i(D),T9=n(D,"LI",{});var DBe=s(T9);EFe=n(DBe,"STRONG",{});var k5t=s(EFe);V2r=r(k5t,"vit"),k5t.forEach(t),X2r=r(DBe," \u2014 "),TH=n(DBe,"A",{href:!0});var S5t=s(TH);z2r=r(S5t,"TFViTModel"),S5t.forEach(t),W2r=r(DBe," (ViT model)"),DBe.forEach(t),Q2r=i(D),M9=n(D,"LI",{});var GBe=s(M9);CFe=n(GBe,"STRONG",{});var R5t=s(CFe);H2r=r(R5t,"vit_mae"),R5t.forEach(t),U2r=r(GBe," \u2014 "),MH=n(GBe,"A",{href:!0});var P5t=s(MH);J2r=r(P5t,"TFViTMAEModel"),P5t.forEach(t),Y2r=r(GBe," (ViTMAE model)"),GBe.forEach(t),K2r=i(D),E9=n(D,"LI",{});var OBe=s(E9);wFe=n(OBe,"STRONG",{});var B5t=s(wFe);Z2r=r(B5t,"wav2vec2"),B5t.forEach(t),e1r=r(OBe," \u2014 "),EH=n(OBe,"A",{href:!0});var I5t=s(EH);o1r=r(I5t,"TFWav2Vec2Model"),I5t.forEach(t),r1r=r(OBe," (Wav2Vec2 model)"),OBe.forEach(t),t1r=i(D),C9=n(D,"LI",{});var VBe=s(C9);AFe=n(VBe,"STRONG",{});var N5t=s(AFe);a1r=r(N5t,"xlm"),N5t.forEach(t),n1r=r(VBe," \u2014 "),CH=n(VBe,"A",{href:!0});var q5t=s(CH);s1r=r(q5t,"TFXLMModel"),q5t.forEach(t),l1r=r(VBe," (XLM model)"),VBe.forEach(t),i1r=i(D),w9=n(D,"LI",{});var XBe=s(w9);LFe=n(XBe,"STRONG",{});var j5t=s(LFe);d1r=r(j5t,"xlm-roberta"),j5t.forEach(t),c1r=r(XBe," \u2014 "),wH=n(XBe,"A",{href:!0});var D5t=s(wH);f1r=r(D5t,"TFXLMRobertaModel"),D5t.forEach(t),m1r=r(XBe," (XLM-RoBERTa model)"),XBe.forEach(t),g1r=i(D),A9=n(D,"LI",{});var zBe=s(A9);yFe=n(zBe,"STRONG",{});var G5t=s(yFe);h1r=r(G5t,"xlnet"),G5t.forEach(t),p1r=r(zBe," \u2014 "),AH=n(zBe,"A",{href:!0});var O5t=s(AH);u1r=r(O5t,"TFXLNetModel"),O5t.forEach(t),_1r=r(zBe," (XLNet model)"),zBe.forEach(t),D.forEach(t),b1r=i(El),T(L9.$$.fragment,El),El.forEach(t),Ml.forEach(t),ZGe=i(f),rc=n(f,"H2",{class:!0});var lXe=s(rc);y9=n(lXe,"A",{id:!0,class:!0,href:!0});var V5t=s(y9);xFe=n(V5t,"SPAN",{});var X5t=s(xFe);T(i8.$$.fragment,X5t),X5t.forEach(t),V5t.forEach(t),v1r=i(lXe),$Fe=n(lXe,"SPAN",{});var z5t=s($Fe);F1r=r(z5t,"TFAutoModelForPreTraining"),z5t.forEach(t),lXe.forEach(t),eOe=i(f),er=n(f,"DIV",{class:!0});var Cl=s(er);T(d8.$$.fragment,Cl),T1r=i(Cl),tc=n(Cl,"P",{});var Xoe=s(tc);M1r=r(Xoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),LH=n(Xoe,"A",{href:!0});var W5t=s(LH);E1r=r(W5t,"from_pretrained()"),W5t.forEach(t),C1r=r(Xoe," class method or the "),yH=n(Xoe,"A",{href:!0});var Q5t=s(yH);w1r=r(Q5t,"from_config()"),Q5t.forEach(t),A1r=r(Xoe,` class
method.`),Xoe.forEach(t),L1r=i(Cl),c8=n(Cl,"P",{});var iXe=s(c8);y1r=r(iXe,"This class cannot be instantiated directly using "),kFe=n(iXe,"CODE",{});var H5t=s(kFe);x1r=r(H5t,"__init__()"),H5t.forEach(t),$1r=r(iXe," (throws an error)."),iXe.forEach(t),k1r=i(Cl),kt=n(Cl,"DIV",{class:!0});var uw=s(kt);T(f8.$$.fragment,uw),S1r=i(uw),SFe=n(uw,"P",{});var U5t=s(SFe);R1r=r(U5t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),U5t.forEach(t),P1r=i(uw),ac=n(uw,"P",{});var zoe=s(ac);B1r=r(zoe,`Note:
Loading a model from its configuration file does `),RFe=n(zoe,"STRONG",{});var J5t=s(RFe);I1r=r(J5t,"not"),J5t.forEach(t),N1r=r(zoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),xH=n(zoe,"A",{href:!0});var Y5t=s(xH);q1r=r(Y5t,"from_pretrained()"),Y5t.forEach(t),j1r=r(zoe," to load the model weights."),zoe.forEach(t),D1r=i(uw),T(x9.$$.fragment,uw),uw.forEach(t),G1r=i(Cl),yr=n(Cl,"DIV",{class:!0});var wl=s(yr);T(m8.$$.fragment,wl),O1r=i(wl),PFe=n(wl,"P",{});var K5t=s(PFe);V1r=r(K5t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),K5t.forEach(t),X1r=i(wl),an=n(wl,"P",{});var _w=s(an);z1r=r(_w,"The model class to instantiate is selected based on the "),BFe=n(_w,"CODE",{});var Z5t=s(BFe);W1r=r(Z5t,"model_type"),Z5t.forEach(t),Q1r=r(_w,` property of the config object (either
passed as an argument or loaded from `),IFe=n(_w,"CODE",{});var e3t=s(IFe);H1r=r(e3t,"pretrained_model_name_or_path"),e3t.forEach(t),U1r=r(_w,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),NFe=n(_w,"CODE",{});var o3t=s(NFe);J1r=r(o3t,"pretrained_model_name_or_path"),o3t.forEach(t),Y1r=r(_w,":"),_w.forEach(t),K1r=i(wl),se=n(wl,"UL",{});var le=s(se);$9=n(le,"LI",{});var WBe=s($9);qFe=n(WBe,"STRONG",{});var r3t=s(qFe);Z1r=r(r3t,"albert"),r3t.forEach(t),ebr=r(WBe," \u2014 "),$H=n(WBe,"A",{href:!0});var t3t=s($H);obr=r(t3t,"TFAlbertForPreTraining"),t3t.forEach(t),rbr=r(WBe," (ALBERT model)"),WBe.forEach(t),tbr=i(le),k9=n(le,"LI",{});var QBe=s(k9);jFe=n(QBe,"STRONG",{});var a3t=s(jFe);abr=r(a3t,"bart"),a3t.forEach(t),nbr=r(QBe," \u2014 "),kH=n(QBe,"A",{href:!0});var n3t=s(kH);sbr=r(n3t,"TFBartForConditionalGeneration"),n3t.forEach(t),lbr=r(QBe," (BART model)"),QBe.forEach(t),ibr=i(le),S9=n(le,"LI",{});var HBe=s(S9);DFe=n(HBe,"STRONG",{});var s3t=s(DFe);dbr=r(s3t,"bert"),s3t.forEach(t),cbr=r(HBe," \u2014 "),SH=n(HBe,"A",{href:!0});var l3t=s(SH);fbr=r(l3t,"TFBertForPreTraining"),l3t.forEach(t),mbr=r(HBe," (BERT model)"),HBe.forEach(t),gbr=i(le),R9=n(le,"LI",{});var UBe=s(R9);GFe=n(UBe,"STRONG",{});var i3t=s(GFe);hbr=r(i3t,"camembert"),i3t.forEach(t),pbr=r(UBe," \u2014 "),RH=n(UBe,"A",{href:!0});var d3t=s(RH);ubr=r(d3t,"TFCamembertForMaskedLM"),d3t.forEach(t),_br=r(UBe," (CamemBERT model)"),UBe.forEach(t),bbr=i(le),P9=n(le,"LI",{});var JBe=s(P9);OFe=n(JBe,"STRONG",{});var c3t=s(OFe);vbr=r(c3t,"ctrl"),c3t.forEach(t),Fbr=r(JBe," \u2014 "),PH=n(JBe,"A",{href:!0});var f3t=s(PH);Tbr=r(f3t,"TFCTRLLMHeadModel"),f3t.forEach(t),Mbr=r(JBe," (CTRL model)"),JBe.forEach(t),Ebr=i(le),B9=n(le,"LI",{});var YBe=s(B9);VFe=n(YBe,"STRONG",{});var m3t=s(VFe);Cbr=r(m3t,"distilbert"),m3t.forEach(t),wbr=r(YBe," \u2014 "),BH=n(YBe,"A",{href:!0});var g3t=s(BH);Abr=r(g3t,"TFDistilBertForMaskedLM"),g3t.forEach(t),Lbr=r(YBe," (DistilBERT model)"),YBe.forEach(t),ybr=i(le),I9=n(le,"LI",{});var KBe=s(I9);XFe=n(KBe,"STRONG",{});var h3t=s(XFe);xbr=r(h3t,"electra"),h3t.forEach(t),$br=r(KBe," \u2014 "),IH=n(KBe,"A",{href:!0});var p3t=s(IH);kbr=r(p3t,"TFElectraForPreTraining"),p3t.forEach(t),Sbr=r(KBe," (ELECTRA model)"),KBe.forEach(t),Rbr=i(le),N9=n(le,"LI",{});var ZBe=s(N9);zFe=n(ZBe,"STRONG",{});var u3t=s(zFe);Pbr=r(u3t,"flaubert"),u3t.forEach(t),Bbr=r(ZBe," \u2014 "),NH=n(ZBe,"A",{href:!0});var _3t=s(NH);Ibr=r(_3t,"TFFlaubertWithLMHeadModel"),_3t.forEach(t),Nbr=r(ZBe," (FlauBERT model)"),ZBe.forEach(t),qbr=i(le),q9=n(le,"LI",{});var eIe=s(q9);WFe=n(eIe,"STRONG",{});var b3t=s(WFe);jbr=r(b3t,"funnel"),b3t.forEach(t),Dbr=r(eIe," \u2014 "),qH=n(eIe,"A",{href:!0});var v3t=s(qH);Gbr=r(v3t,"TFFunnelForPreTraining"),v3t.forEach(t),Obr=r(eIe," (Funnel Transformer model)"),eIe.forEach(t),Vbr=i(le),j9=n(le,"LI",{});var oIe=s(j9);QFe=n(oIe,"STRONG",{});var F3t=s(QFe);Xbr=r(F3t,"gpt2"),F3t.forEach(t),zbr=r(oIe," \u2014 "),jH=n(oIe,"A",{href:!0});var T3t=s(jH);Wbr=r(T3t,"TFGPT2LMHeadModel"),T3t.forEach(t),Qbr=r(oIe," (OpenAI GPT-2 model)"),oIe.forEach(t),Hbr=i(le),D9=n(le,"LI",{});var rIe=s(D9);HFe=n(rIe,"STRONG",{});var M3t=s(HFe);Ubr=r(M3t,"layoutlm"),M3t.forEach(t),Jbr=r(rIe," \u2014 "),DH=n(rIe,"A",{href:!0});var E3t=s(DH);Ybr=r(E3t,"TFLayoutLMForMaskedLM"),E3t.forEach(t),Kbr=r(rIe," (LayoutLM model)"),rIe.forEach(t),Zbr=i(le),G9=n(le,"LI",{});var tIe=s(G9);UFe=n(tIe,"STRONG",{});var C3t=s(UFe);evr=r(C3t,"lxmert"),C3t.forEach(t),ovr=r(tIe," \u2014 "),GH=n(tIe,"A",{href:!0});var w3t=s(GH);rvr=r(w3t,"TFLxmertForPreTraining"),w3t.forEach(t),tvr=r(tIe," (LXMERT model)"),tIe.forEach(t),avr=i(le),O9=n(le,"LI",{});var aIe=s(O9);JFe=n(aIe,"STRONG",{});var A3t=s(JFe);nvr=r(A3t,"mobilebert"),A3t.forEach(t),svr=r(aIe," \u2014 "),OH=n(aIe,"A",{href:!0});var L3t=s(OH);lvr=r(L3t,"TFMobileBertForPreTraining"),L3t.forEach(t),ivr=r(aIe," (MobileBERT model)"),aIe.forEach(t),dvr=i(le),V9=n(le,"LI",{});var nIe=s(V9);YFe=n(nIe,"STRONG",{});var y3t=s(YFe);cvr=r(y3t,"mpnet"),y3t.forEach(t),fvr=r(nIe," \u2014 "),VH=n(nIe,"A",{href:!0});var x3t=s(VH);mvr=r(x3t,"TFMPNetForMaskedLM"),x3t.forEach(t),gvr=r(nIe," (MPNet model)"),nIe.forEach(t),hvr=i(le),X9=n(le,"LI",{});var sIe=s(X9);KFe=n(sIe,"STRONG",{});var $3t=s(KFe);pvr=r($3t,"openai-gpt"),$3t.forEach(t),uvr=r(sIe," \u2014 "),XH=n(sIe,"A",{href:!0});var k3t=s(XH);_vr=r(k3t,"TFOpenAIGPTLMHeadModel"),k3t.forEach(t),bvr=r(sIe," (OpenAI GPT model)"),sIe.forEach(t),vvr=i(le),z9=n(le,"LI",{});var lIe=s(z9);ZFe=n(lIe,"STRONG",{});var S3t=s(ZFe);Fvr=r(S3t,"roberta"),S3t.forEach(t),Tvr=r(lIe," \u2014 "),zH=n(lIe,"A",{href:!0});var R3t=s(zH);Mvr=r(R3t,"TFRobertaForMaskedLM"),R3t.forEach(t),Evr=r(lIe," (RoBERTa model)"),lIe.forEach(t),Cvr=i(le),W9=n(le,"LI",{});var iIe=s(W9);e6e=n(iIe,"STRONG",{});var P3t=s(e6e);wvr=r(P3t,"t5"),P3t.forEach(t),Avr=r(iIe," \u2014 "),WH=n(iIe,"A",{href:!0});var B3t=s(WH);Lvr=r(B3t,"TFT5ForConditionalGeneration"),B3t.forEach(t),yvr=r(iIe," (T5 model)"),iIe.forEach(t),xvr=i(le),Q9=n(le,"LI",{});var dIe=s(Q9);o6e=n(dIe,"STRONG",{});var I3t=s(o6e);$vr=r(I3t,"tapas"),I3t.forEach(t),kvr=r(dIe," \u2014 "),QH=n(dIe,"A",{href:!0});var N3t=s(QH);Svr=r(N3t,"TFTapasForMaskedLM"),N3t.forEach(t),Rvr=r(dIe," (TAPAS model)"),dIe.forEach(t),Pvr=i(le),H9=n(le,"LI",{});var cIe=s(H9);r6e=n(cIe,"STRONG",{});var q3t=s(r6e);Bvr=r(q3t,"transfo-xl"),q3t.forEach(t),Ivr=r(cIe," \u2014 "),HH=n(cIe,"A",{href:!0});var j3t=s(HH);Nvr=r(j3t,"TFTransfoXLLMHeadModel"),j3t.forEach(t),qvr=r(cIe," (Transformer-XL model)"),cIe.forEach(t),jvr=i(le),U9=n(le,"LI",{});var fIe=s(U9);t6e=n(fIe,"STRONG",{});var D3t=s(t6e);Dvr=r(D3t,"vit_mae"),D3t.forEach(t),Gvr=r(fIe," \u2014 "),UH=n(fIe,"A",{href:!0});var G3t=s(UH);Ovr=r(G3t,"TFViTMAEForPreTraining"),G3t.forEach(t),Vvr=r(fIe," (ViTMAE model)"),fIe.forEach(t),Xvr=i(le),J9=n(le,"LI",{});var mIe=s(J9);a6e=n(mIe,"STRONG",{});var O3t=s(a6e);zvr=r(O3t,"xlm"),O3t.forEach(t),Wvr=r(mIe," \u2014 "),JH=n(mIe,"A",{href:!0});var V3t=s(JH);Qvr=r(V3t,"TFXLMWithLMHeadModel"),V3t.forEach(t),Hvr=r(mIe," (XLM model)"),mIe.forEach(t),Uvr=i(le),Y9=n(le,"LI",{});var gIe=s(Y9);n6e=n(gIe,"STRONG",{});var X3t=s(n6e);Jvr=r(X3t,"xlm-roberta"),X3t.forEach(t),Yvr=r(gIe," \u2014 "),YH=n(gIe,"A",{href:!0});var z3t=s(YH);Kvr=r(z3t,"TFXLMRobertaForMaskedLM"),z3t.forEach(t),Zvr=r(gIe," (XLM-RoBERTa model)"),gIe.forEach(t),eFr=i(le),K9=n(le,"LI",{});var hIe=s(K9);s6e=n(hIe,"STRONG",{});var W3t=s(s6e);oFr=r(W3t,"xlnet"),W3t.forEach(t),rFr=r(hIe," \u2014 "),KH=n(hIe,"A",{href:!0});var Q3t=s(KH);tFr=r(Q3t,"TFXLNetLMHeadModel"),Q3t.forEach(t),aFr=r(hIe," (XLNet model)"),hIe.forEach(t),le.forEach(t),nFr=i(wl),T(Z9.$$.fragment,wl),wl.forEach(t),Cl.forEach(t),oOe=i(f),nc=n(f,"H2",{class:!0});var dXe=s(nc);eM=n(dXe,"A",{id:!0,class:!0,href:!0});var H3t=s(eM);l6e=n(H3t,"SPAN",{});var U3t=s(l6e);T(g8.$$.fragment,U3t),U3t.forEach(t),H3t.forEach(t),sFr=i(dXe),i6e=n(dXe,"SPAN",{});var J3t=s(i6e);lFr=r(J3t,"TFAutoModelForCausalLM"),J3t.forEach(t),dXe.forEach(t),rOe=i(f),or=n(f,"DIV",{class:!0});var Al=s(or);T(h8.$$.fragment,Al),iFr=i(Al),sc=n(Al,"P",{});var Woe=s(sc);dFr=r(Woe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),ZH=n(Woe,"A",{href:!0});var Y3t=s(ZH);cFr=r(Y3t,"from_pretrained()"),Y3t.forEach(t),fFr=r(Woe," class method or the "),eU=n(Woe,"A",{href:!0});var K3t=s(eU);mFr=r(K3t,"from_config()"),K3t.forEach(t),gFr=r(Woe,` class
method.`),Woe.forEach(t),hFr=i(Al),p8=n(Al,"P",{});var cXe=s(p8);pFr=r(cXe,"This class cannot be instantiated directly using "),d6e=n(cXe,"CODE",{});var Z3t=s(d6e);uFr=r(Z3t,"__init__()"),Z3t.forEach(t),_Fr=r(cXe," (throws an error)."),cXe.forEach(t),bFr=i(Al),St=n(Al,"DIV",{class:!0});var bw=s(St);T(u8.$$.fragment,bw),vFr=i(bw),c6e=n(bw,"P",{});var e0t=s(c6e);FFr=r(e0t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),e0t.forEach(t),TFr=i(bw),lc=n(bw,"P",{});var Qoe=s(lc);MFr=r(Qoe,`Note:
Loading a model from its configuration file does `),f6e=n(Qoe,"STRONG",{});var o0t=s(f6e);EFr=r(o0t,"not"),o0t.forEach(t),CFr=r(Qoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),oU=n(Qoe,"A",{href:!0});var r0t=s(oU);wFr=r(r0t,"from_pretrained()"),r0t.forEach(t),AFr=r(Qoe," to load the model weights."),Qoe.forEach(t),LFr=i(bw),T(oM.$$.fragment,bw),bw.forEach(t),yFr=i(Al),xr=n(Al,"DIV",{class:!0});var Ll=s(xr);T(_8.$$.fragment,Ll),xFr=i(Ll),m6e=n(Ll,"P",{});var t0t=s(m6e);$Fr=r(t0t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),t0t.forEach(t),kFr=i(Ll),nn=n(Ll,"P",{});var vw=s(nn);SFr=r(vw,"The model class to instantiate is selected based on the "),g6e=n(vw,"CODE",{});var a0t=s(g6e);RFr=r(a0t,"model_type"),a0t.forEach(t),PFr=r(vw,` property of the config object (either
passed as an argument or loaded from `),h6e=n(vw,"CODE",{});var n0t=s(h6e);BFr=r(n0t,"pretrained_model_name_or_path"),n0t.forEach(t),IFr=r(vw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p6e=n(vw,"CODE",{});var s0t=s(p6e);NFr=r(s0t,"pretrained_model_name_or_path"),s0t.forEach(t),qFr=r(vw,":"),vw.forEach(t),jFr=i(Ll),Me=n(Ll,"UL",{});var Ce=s(Me);rM=n(Ce,"LI",{});var pIe=s(rM);u6e=n(pIe,"STRONG",{});var l0t=s(u6e);DFr=r(l0t,"bert"),l0t.forEach(t),GFr=r(pIe," \u2014 "),rU=n(pIe,"A",{href:!0});var i0t=s(rU);OFr=r(i0t,"TFBertLMHeadModel"),i0t.forEach(t),VFr=r(pIe," (BERT model)"),pIe.forEach(t),XFr=i(Ce),tM=n(Ce,"LI",{});var uIe=s(tM);_6e=n(uIe,"STRONG",{});var d0t=s(_6e);zFr=r(d0t,"camembert"),d0t.forEach(t),WFr=r(uIe," \u2014 "),tU=n(uIe,"A",{href:!0});var c0t=s(tU);QFr=r(c0t,"TFCamembertForCausalLM"),c0t.forEach(t),HFr=r(uIe," (CamemBERT model)"),uIe.forEach(t),UFr=i(Ce),aM=n(Ce,"LI",{});var _Ie=s(aM);b6e=n(_Ie,"STRONG",{});var f0t=s(b6e);JFr=r(f0t,"ctrl"),f0t.forEach(t),YFr=r(_Ie," \u2014 "),aU=n(_Ie,"A",{href:!0});var m0t=s(aU);KFr=r(m0t,"TFCTRLLMHeadModel"),m0t.forEach(t),ZFr=r(_Ie," (CTRL model)"),_Ie.forEach(t),e6r=i(Ce),nM=n(Ce,"LI",{});var bIe=s(nM);v6e=n(bIe,"STRONG",{});var g0t=s(v6e);o6r=r(g0t,"gpt2"),g0t.forEach(t),r6r=r(bIe," \u2014 "),nU=n(bIe,"A",{href:!0});var h0t=s(nU);t6r=r(h0t,"TFGPT2LMHeadModel"),h0t.forEach(t),a6r=r(bIe," (OpenAI GPT-2 model)"),bIe.forEach(t),n6r=i(Ce),sM=n(Ce,"LI",{});var vIe=s(sM);F6e=n(vIe,"STRONG",{});var p0t=s(F6e);s6r=r(p0t,"gptj"),p0t.forEach(t),l6r=r(vIe," \u2014 "),sU=n(vIe,"A",{href:!0});var u0t=s(sU);i6r=r(u0t,"TFGPTJForCausalLM"),u0t.forEach(t),d6r=r(vIe," (GPT-J model)"),vIe.forEach(t),c6r=i(Ce),lM=n(Ce,"LI",{});var FIe=s(lM);T6e=n(FIe,"STRONG",{});var _0t=s(T6e);f6r=r(_0t,"openai-gpt"),_0t.forEach(t),m6r=r(FIe," \u2014 "),lU=n(FIe,"A",{href:!0});var b0t=s(lU);g6r=r(b0t,"TFOpenAIGPTLMHeadModel"),b0t.forEach(t),h6r=r(FIe," (OpenAI GPT model)"),FIe.forEach(t),p6r=i(Ce),iM=n(Ce,"LI",{});var TIe=s(iM);M6e=n(TIe,"STRONG",{});var v0t=s(M6e);u6r=r(v0t,"opt"),v0t.forEach(t),_6r=r(TIe," \u2014 "),iU=n(TIe,"A",{href:!0});var F0t=s(iU);b6r=r(F0t,"TFOPTForCausalLM"),F0t.forEach(t),v6r=r(TIe," (OPT model)"),TIe.forEach(t),F6r=i(Ce),dM=n(Ce,"LI",{});var MIe=s(dM);E6e=n(MIe,"STRONG",{});var T0t=s(E6e);T6r=r(T0t,"rembert"),T0t.forEach(t),M6r=r(MIe," \u2014 "),dU=n(MIe,"A",{href:!0});var M0t=s(dU);E6r=r(M0t,"TFRemBertForCausalLM"),M0t.forEach(t),C6r=r(MIe," (RemBERT model)"),MIe.forEach(t),w6r=i(Ce),cM=n(Ce,"LI",{});var EIe=s(cM);C6e=n(EIe,"STRONG",{});var E0t=s(C6e);A6r=r(E0t,"roberta"),E0t.forEach(t),L6r=r(EIe," \u2014 "),cU=n(EIe,"A",{href:!0});var C0t=s(cU);y6r=r(C0t,"TFRobertaForCausalLM"),C0t.forEach(t),x6r=r(EIe," (RoBERTa model)"),EIe.forEach(t),$6r=i(Ce),fM=n(Ce,"LI",{});var CIe=s(fM);w6e=n(CIe,"STRONG",{});var w0t=s(w6e);k6r=r(w0t,"roformer"),w0t.forEach(t),S6r=r(CIe," \u2014 "),fU=n(CIe,"A",{href:!0});var A0t=s(fU);R6r=r(A0t,"TFRoFormerForCausalLM"),A0t.forEach(t),P6r=r(CIe," (RoFormer model)"),CIe.forEach(t),B6r=i(Ce),mM=n(Ce,"LI",{});var wIe=s(mM);A6e=n(wIe,"STRONG",{});var L0t=s(A6e);I6r=r(L0t,"transfo-xl"),L0t.forEach(t),N6r=r(wIe," \u2014 "),mU=n(wIe,"A",{href:!0});var y0t=s(mU);q6r=r(y0t,"TFTransfoXLLMHeadModel"),y0t.forEach(t),j6r=r(wIe," (Transformer-XL model)"),wIe.forEach(t),D6r=i(Ce),gM=n(Ce,"LI",{});var AIe=s(gM);L6e=n(AIe,"STRONG",{});var x0t=s(L6e);G6r=r(x0t,"xlm"),x0t.forEach(t),O6r=r(AIe," \u2014 "),gU=n(AIe,"A",{href:!0});var $0t=s(gU);V6r=r($0t,"TFXLMWithLMHeadModel"),$0t.forEach(t),X6r=r(AIe," (XLM model)"),AIe.forEach(t),z6r=i(Ce),hM=n(Ce,"LI",{});var LIe=s(hM);y6e=n(LIe,"STRONG",{});var k0t=s(y6e);W6r=r(k0t,"xlnet"),k0t.forEach(t),Q6r=r(LIe," \u2014 "),hU=n(LIe,"A",{href:!0});var S0t=s(hU);H6r=r(S0t,"TFXLNetLMHeadModel"),S0t.forEach(t),U6r=r(LIe," (XLNet model)"),LIe.forEach(t),Ce.forEach(t),J6r=i(Ll),T(pM.$$.fragment,Ll),Ll.forEach(t),Al.forEach(t),tOe=i(f),ic=n(f,"H2",{class:!0});var fXe=s(ic);uM=n(fXe,"A",{id:!0,class:!0,href:!0});var R0t=s(uM);x6e=n(R0t,"SPAN",{});var P0t=s(x6e);T(b8.$$.fragment,P0t),P0t.forEach(t),R0t.forEach(t),Y6r=i(fXe),$6e=n(fXe,"SPAN",{});var B0t=s($6e);K6r=r(B0t,"TFAutoModelForImageClassification"),B0t.forEach(t),fXe.forEach(t),aOe=i(f),rr=n(f,"DIV",{class:!0});var yl=s(rr);T(v8.$$.fragment,yl),Z6r=i(yl),dc=n(yl,"P",{});var Hoe=s(dc);eTr=r(Hoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),pU=n(Hoe,"A",{href:!0});var I0t=s(pU);oTr=r(I0t,"from_pretrained()"),I0t.forEach(t),rTr=r(Hoe," class method or the "),uU=n(Hoe,"A",{href:!0});var N0t=s(uU);tTr=r(N0t,"from_config()"),N0t.forEach(t),aTr=r(Hoe,` class
method.`),Hoe.forEach(t),nTr=i(yl),F8=n(yl,"P",{});var mXe=s(F8);sTr=r(mXe,"This class cannot be instantiated directly using "),k6e=n(mXe,"CODE",{});var q0t=s(k6e);lTr=r(q0t,"__init__()"),q0t.forEach(t),iTr=r(mXe," (throws an error)."),mXe.forEach(t),dTr=i(yl),Rt=n(yl,"DIV",{class:!0});var Fw=s(Rt);T(T8.$$.fragment,Fw),cTr=i(Fw),S6e=n(Fw,"P",{});var j0t=s(S6e);fTr=r(j0t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),j0t.forEach(t),mTr=i(Fw),cc=n(Fw,"P",{});var Uoe=s(cc);gTr=r(Uoe,`Note:
Loading a model from its configuration file does `),R6e=n(Uoe,"STRONG",{});var D0t=s(R6e);hTr=r(D0t,"not"),D0t.forEach(t),pTr=r(Uoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),_U=n(Uoe,"A",{href:!0});var G0t=s(_U);uTr=r(G0t,"from_pretrained()"),G0t.forEach(t),_Tr=r(Uoe," to load the model weights."),Uoe.forEach(t),bTr=i(Fw),T(_M.$$.fragment,Fw),Fw.forEach(t),vTr=i(yl),$r=n(yl,"DIV",{class:!0});var xl=s($r);T(M8.$$.fragment,xl),FTr=i(xl),P6e=n(xl,"P",{});var O0t=s(P6e);TTr=r(O0t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),O0t.forEach(t),MTr=i(xl),sn=n(xl,"P",{});var Tw=s(sn);ETr=r(Tw,"The model class to instantiate is selected based on the "),B6e=n(Tw,"CODE",{});var V0t=s(B6e);CTr=r(V0t,"model_type"),V0t.forEach(t),wTr=r(Tw,` property of the config object (either
passed as an argument or loaded from `),I6e=n(Tw,"CODE",{});var X0t=s(I6e);ATr=r(X0t,"pretrained_model_name_or_path"),X0t.forEach(t),LTr=r(Tw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N6e=n(Tw,"CODE",{});var z0t=s(N6e);yTr=r(z0t,"pretrained_model_name_or_path"),z0t.forEach(t),xTr=r(Tw,":"),Tw.forEach(t),$Tr=i(xl),ln=n(xl,"UL",{});var Mw=s(ln);bM=n(Mw,"LI",{});var yIe=s(bM);q6e=n(yIe,"STRONG",{});var W0t=s(q6e);kTr=r(W0t,"convnext"),W0t.forEach(t),STr=r(yIe," \u2014 "),bU=n(yIe,"A",{href:!0});var Q0t=s(bU);RTr=r(Q0t,"TFConvNextForImageClassification"),Q0t.forEach(t),PTr=r(yIe," (ConvNeXT model)"),yIe.forEach(t),BTr=i(Mw),vM=n(Mw,"LI",{});var xIe=s(vM);j6e=n(xIe,"STRONG",{});var H0t=s(j6e);ITr=r(H0t,"data2vec-vision"),H0t.forEach(t),NTr=r(xIe," \u2014 "),vU=n(xIe,"A",{href:!0});var U0t=s(vU);qTr=r(U0t,"TFData2VecVisionForImageClassification"),U0t.forEach(t),jTr=r(xIe," (Data2VecVision model)"),xIe.forEach(t),DTr=i(Mw),FM=n(Mw,"LI",{});var $Ie=s(FM);D6e=n($Ie,"STRONG",{});var J0t=s(D6e);GTr=r(J0t,"swin"),J0t.forEach(t),OTr=r($Ie," \u2014 "),FU=n($Ie,"A",{href:!0});var Y0t=s(FU);VTr=r(Y0t,"TFSwinForImageClassification"),Y0t.forEach(t),XTr=r($Ie," (Swin Transformer model)"),$Ie.forEach(t),zTr=i(Mw),TM=n(Mw,"LI",{});var kIe=s(TM);G6e=n(kIe,"STRONG",{});var K0t=s(G6e);WTr=r(K0t,"vit"),K0t.forEach(t),QTr=r(kIe," \u2014 "),TU=n(kIe,"A",{href:!0});var Z0t=s(TU);HTr=r(Z0t,"TFViTForImageClassification"),Z0t.forEach(t),UTr=r(kIe," (ViT model)"),kIe.forEach(t),Mw.forEach(t),JTr=i(xl),T(MM.$$.fragment,xl),xl.forEach(t),yl.forEach(t),nOe=i(f),fc=n(f,"H2",{class:!0});var gXe=s(fc);EM=n(gXe,"A",{id:!0,class:!0,href:!0});var ewt=s(EM);O6e=n(ewt,"SPAN",{});var owt=s(O6e);T(E8.$$.fragment,owt),owt.forEach(t),ewt.forEach(t),YTr=i(gXe),V6e=n(gXe,"SPAN",{});var rwt=s(V6e);KTr=r(rwt,"TFAutoModelForMaskedLM"),rwt.forEach(t),gXe.forEach(t),sOe=i(f),tr=n(f,"DIV",{class:!0});var $l=s(tr);T(C8.$$.fragment,$l),ZTr=i($l),mc=n($l,"P",{});var Joe=s(mc);e7r=r(Joe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),MU=n(Joe,"A",{href:!0});var twt=s(MU);o7r=r(twt,"from_pretrained()"),twt.forEach(t),r7r=r(Joe," class method or the "),EU=n(Joe,"A",{href:!0});var awt=s(EU);t7r=r(awt,"from_config()"),awt.forEach(t),a7r=r(Joe,` class
method.`),Joe.forEach(t),n7r=i($l),w8=n($l,"P",{});var hXe=s(w8);s7r=r(hXe,"This class cannot be instantiated directly using "),X6e=n(hXe,"CODE",{});var nwt=s(X6e);l7r=r(nwt,"__init__()"),nwt.forEach(t),i7r=r(hXe," (throws an error)."),hXe.forEach(t),d7r=i($l),Pt=n($l,"DIV",{class:!0});var Ew=s(Pt);T(A8.$$.fragment,Ew),c7r=i(Ew),z6e=n(Ew,"P",{});var swt=s(z6e);f7r=r(swt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),swt.forEach(t),m7r=i(Ew),gc=n(Ew,"P",{});var Yoe=s(gc);g7r=r(Yoe,`Note:
Loading a model from its configuration file does `),W6e=n(Yoe,"STRONG",{});var lwt=s(W6e);h7r=r(lwt,"not"),lwt.forEach(t),p7r=r(Yoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),CU=n(Yoe,"A",{href:!0});var iwt=s(CU);u7r=r(iwt,"from_pretrained()"),iwt.forEach(t),_7r=r(Yoe," to load the model weights."),Yoe.forEach(t),b7r=i(Ew),T(CM.$$.fragment,Ew),Ew.forEach(t),v7r=i($l),kr=n($l,"DIV",{class:!0});var kl=s(kr);T(L8.$$.fragment,kl),F7r=i(kl),Q6e=n(kl,"P",{});var dwt=s(Q6e);T7r=r(dwt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),dwt.forEach(t),M7r=i(kl),dn=n(kl,"P",{});var Cw=s(dn);E7r=r(Cw,"The model class to instantiate is selected based on the "),H6e=n(Cw,"CODE",{});var cwt=s(H6e);C7r=r(cwt,"model_type"),cwt.forEach(t),w7r=r(Cw,` property of the config object (either
passed as an argument or loaded from `),U6e=n(Cw,"CODE",{});var fwt=s(U6e);A7r=r(fwt,"pretrained_model_name_or_path"),fwt.forEach(t),L7r=r(Cw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J6e=n(Cw,"CODE",{});var mwt=s(J6e);y7r=r(mwt,"pretrained_model_name_or_path"),mwt.forEach(t),x7r=r(Cw,":"),Cw.forEach(t),$7r=i(kl),ie=n(kl,"UL",{});var fe=s(ie);wM=n(fe,"LI",{});var SIe=s(wM);Y6e=n(SIe,"STRONG",{});var gwt=s(Y6e);k7r=r(gwt,"albert"),gwt.forEach(t),S7r=r(SIe," \u2014 "),wU=n(SIe,"A",{href:!0});var hwt=s(wU);R7r=r(hwt,"TFAlbertForMaskedLM"),hwt.forEach(t),P7r=r(SIe," (ALBERT model)"),SIe.forEach(t),B7r=i(fe),AM=n(fe,"LI",{});var RIe=s(AM);K6e=n(RIe,"STRONG",{});var pwt=s(K6e);I7r=r(pwt,"bert"),pwt.forEach(t),N7r=r(RIe," \u2014 "),AU=n(RIe,"A",{href:!0});var uwt=s(AU);q7r=r(uwt,"TFBertForMaskedLM"),uwt.forEach(t),j7r=r(RIe," (BERT model)"),RIe.forEach(t),D7r=i(fe),LM=n(fe,"LI",{});var PIe=s(LM);Z6e=n(PIe,"STRONG",{});var _wt=s(Z6e);G7r=r(_wt,"camembert"),_wt.forEach(t),O7r=r(PIe," \u2014 "),LU=n(PIe,"A",{href:!0});var bwt=s(LU);V7r=r(bwt,"TFCamembertForMaskedLM"),bwt.forEach(t),X7r=r(PIe," (CamemBERT model)"),PIe.forEach(t),z7r=i(fe),yM=n(fe,"LI",{});var BIe=s(yM);eTe=n(BIe,"STRONG",{});var vwt=s(eTe);W7r=r(vwt,"convbert"),vwt.forEach(t),Q7r=r(BIe," \u2014 "),yU=n(BIe,"A",{href:!0});var Fwt=s(yU);H7r=r(Fwt,"TFConvBertForMaskedLM"),Fwt.forEach(t),U7r=r(BIe," (ConvBERT model)"),BIe.forEach(t),J7r=i(fe),xM=n(fe,"LI",{});var IIe=s(xM);oTe=n(IIe,"STRONG",{});var Twt=s(oTe);Y7r=r(Twt,"deberta"),Twt.forEach(t),K7r=r(IIe," \u2014 "),xU=n(IIe,"A",{href:!0});var Mwt=s(xU);Z7r=r(Mwt,"TFDebertaForMaskedLM"),Mwt.forEach(t),e9r=r(IIe," (DeBERTa model)"),IIe.forEach(t),o9r=i(fe),$M=n(fe,"LI",{});var NIe=s($M);rTe=n(NIe,"STRONG",{});var Ewt=s(rTe);r9r=r(Ewt,"deberta-v2"),Ewt.forEach(t),t9r=r(NIe," \u2014 "),$U=n(NIe,"A",{href:!0});var Cwt=s($U);a9r=r(Cwt,"TFDebertaV2ForMaskedLM"),Cwt.forEach(t),n9r=r(NIe," (DeBERTa-v2 model)"),NIe.forEach(t),s9r=i(fe),kM=n(fe,"LI",{});var qIe=s(kM);tTe=n(qIe,"STRONG",{});var wwt=s(tTe);l9r=r(wwt,"distilbert"),wwt.forEach(t),i9r=r(qIe," \u2014 "),kU=n(qIe,"A",{href:!0});var Awt=s(kU);d9r=r(Awt,"TFDistilBertForMaskedLM"),Awt.forEach(t),c9r=r(qIe," (DistilBERT model)"),qIe.forEach(t),f9r=i(fe),SM=n(fe,"LI",{});var jIe=s(SM);aTe=n(jIe,"STRONG",{});var Lwt=s(aTe);m9r=r(Lwt,"electra"),Lwt.forEach(t),g9r=r(jIe," \u2014 "),SU=n(jIe,"A",{href:!0});var ywt=s(SU);h9r=r(ywt,"TFElectraForMaskedLM"),ywt.forEach(t),p9r=r(jIe," (ELECTRA model)"),jIe.forEach(t),u9r=i(fe),RM=n(fe,"LI",{});var DIe=s(RM);nTe=n(DIe,"STRONG",{});var xwt=s(nTe);_9r=r(xwt,"flaubert"),xwt.forEach(t),b9r=r(DIe," \u2014 "),RU=n(DIe,"A",{href:!0});var $wt=s(RU);v9r=r($wt,"TFFlaubertWithLMHeadModel"),$wt.forEach(t),F9r=r(DIe," (FlauBERT model)"),DIe.forEach(t),T9r=i(fe),PM=n(fe,"LI",{});var GIe=s(PM);sTe=n(GIe,"STRONG",{});var kwt=s(sTe);M9r=r(kwt,"funnel"),kwt.forEach(t),E9r=r(GIe," \u2014 "),PU=n(GIe,"A",{href:!0});var Swt=s(PU);C9r=r(Swt,"TFFunnelForMaskedLM"),Swt.forEach(t),w9r=r(GIe," (Funnel Transformer model)"),GIe.forEach(t),A9r=i(fe),BM=n(fe,"LI",{});var OIe=s(BM);lTe=n(OIe,"STRONG",{});var Rwt=s(lTe);L9r=r(Rwt,"layoutlm"),Rwt.forEach(t),y9r=r(OIe," \u2014 "),BU=n(OIe,"A",{href:!0});var Pwt=s(BU);x9r=r(Pwt,"TFLayoutLMForMaskedLM"),Pwt.forEach(t),$9r=r(OIe," (LayoutLM model)"),OIe.forEach(t),k9r=i(fe),IM=n(fe,"LI",{});var VIe=s(IM);iTe=n(VIe,"STRONG",{});var Bwt=s(iTe);S9r=r(Bwt,"longformer"),Bwt.forEach(t),R9r=r(VIe," \u2014 "),IU=n(VIe,"A",{href:!0});var Iwt=s(IU);P9r=r(Iwt,"TFLongformerForMaskedLM"),Iwt.forEach(t),B9r=r(VIe," (Longformer model)"),VIe.forEach(t),I9r=i(fe),NM=n(fe,"LI",{});var XIe=s(NM);dTe=n(XIe,"STRONG",{});var Nwt=s(dTe);N9r=r(Nwt,"mobilebert"),Nwt.forEach(t),q9r=r(XIe," \u2014 "),NU=n(XIe,"A",{href:!0});var qwt=s(NU);j9r=r(qwt,"TFMobileBertForMaskedLM"),qwt.forEach(t),D9r=r(XIe," (MobileBERT model)"),XIe.forEach(t),G9r=i(fe),qM=n(fe,"LI",{});var zIe=s(qM);cTe=n(zIe,"STRONG",{});var jwt=s(cTe);O9r=r(jwt,"mpnet"),jwt.forEach(t),V9r=r(zIe," \u2014 "),qU=n(zIe,"A",{href:!0});var Dwt=s(qU);X9r=r(Dwt,"TFMPNetForMaskedLM"),Dwt.forEach(t),z9r=r(zIe," (MPNet model)"),zIe.forEach(t),W9r=i(fe),jM=n(fe,"LI",{});var WIe=s(jM);fTe=n(WIe,"STRONG",{});var Gwt=s(fTe);Q9r=r(Gwt,"rembert"),Gwt.forEach(t),H9r=r(WIe," \u2014 "),jU=n(WIe,"A",{href:!0});var Owt=s(jU);U9r=r(Owt,"TFRemBertForMaskedLM"),Owt.forEach(t),J9r=r(WIe," (RemBERT model)"),WIe.forEach(t),Y9r=i(fe),DM=n(fe,"LI",{});var QIe=s(DM);mTe=n(QIe,"STRONG",{});var Vwt=s(mTe);K9r=r(Vwt,"roberta"),Vwt.forEach(t),Z9r=r(QIe," \u2014 "),DU=n(QIe,"A",{href:!0});var Xwt=s(DU);eMr=r(Xwt,"TFRobertaForMaskedLM"),Xwt.forEach(t),oMr=r(QIe," (RoBERTa model)"),QIe.forEach(t),rMr=i(fe),GM=n(fe,"LI",{});var HIe=s(GM);gTe=n(HIe,"STRONG",{});var zwt=s(gTe);tMr=r(zwt,"roformer"),zwt.forEach(t),aMr=r(HIe," \u2014 "),GU=n(HIe,"A",{href:!0});var Wwt=s(GU);nMr=r(Wwt,"TFRoFormerForMaskedLM"),Wwt.forEach(t),sMr=r(HIe," (RoFormer model)"),HIe.forEach(t),lMr=i(fe),OM=n(fe,"LI",{});var UIe=s(OM);hTe=n(UIe,"STRONG",{});var Qwt=s(hTe);iMr=r(Qwt,"tapas"),Qwt.forEach(t),dMr=r(UIe," \u2014 "),OU=n(UIe,"A",{href:!0});var Hwt=s(OU);cMr=r(Hwt,"TFTapasForMaskedLM"),Hwt.forEach(t),fMr=r(UIe," (TAPAS model)"),UIe.forEach(t),mMr=i(fe),VM=n(fe,"LI",{});var JIe=s(VM);pTe=n(JIe,"STRONG",{});var Uwt=s(pTe);gMr=r(Uwt,"xlm"),Uwt.forEach(t),hMr=r(JIe," \u2014 "),VU=n(JIe,"A",{href:!0});var Jwt=s(VU);pMr=r(Jwt,"TFXLMWithLMHeadModel"),Jwt.forEach(t),uMr=r(JIe," (XLM model)"),JIe.forEach(t),_Mr=i(fe),XM=n(fe,"LI",{});var YIe=s(XM);uTe=n(YIe,"STRONG",{});var Ywt=s(uTe);bMr=r(Ywt,"xlm-roberta"),Ywt.forEach(t),vMr=r(YIe," \u2014 "),XU=n(YIe,"A",{href:!0});var Kwt=s(XU);FMr=r(Kwt,"TFXLMRobertaForMaskedLM"),Kwt.forEach(t),TMr=r(YIe," (XLM-RoBERTa model)"),YIe.forEach(t),fe.forEach(t),MMr=i(kl),T(zM.$$.fragment,kl),kl.forEach(t),$l.forEach(t),lOe=i(f),hc=n(f,"H2",{class:!0});var pXe=s(hc);WM=n(pXe,"A",{id:!0,class:!0,href:!0});var Zwt=s(WM);_Te=n(Zwt,"SPAN",{});var eAt=s(_Te);T(y8.$$.fragment,eAt),eAt.forEach(t),Zwt.forEach(t),EMr=i(pXe),bTe=n(pXe,"SPAN",{});var oAt=s(bTe);CMr=r(oAt,"TFAutoModelForSeq2SeqLM"),oAt.forEach(t),pXe.forEach(t),iOe=i(f),ar=n(f,"DIV",{class:!0});var Sl=s(ar);T(x8.$$.fragment,Sl),wMr=i(Sl),pc=n(Sl,"P",{});var Koe=s(pc);AMr=r(Koe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),zU=n(Koe,"A",{href:!0});var rAt=s(zU);LMr=r(rAt,"from_pretrained()"),rAt.forEach(t),yMr=r(Koe," class method or the "),WU=n(Koe,"A",{href:!0});var tAt=s(WU);xMr=r(tAt,"from_config()"),tAt.forEach(t),$Mr=r(Koe,` class
method.`),Koe.forEach(t),kMr=i(Sl),$8=n(Sl,"P",{});var uXe=s($8);SMr=r(uXe,"This class cannot be instantiated directly using "),vTe=n(uXe,"CODE",{});var aAt=s(vTe);RMr=r(aAt,"__init__()"),aAt.forEach(t),PMr=r(uXe," (throws an error)."),uXe.forEach(t),BMr=i(Sl),Bt=n(Sl,"DIV",{class:!0});var ww=s(Bt);T(k8.$$.fragment,ww),IMr=i(ww),FTe=n(ww,"P",{});var nAt=s(FTe);NMr=r(nAt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),nAt.forEach(t),qMr=i(ww),uc=n(ww,"P",{});var Zoe=s(uc);jMr=r(Zoe,`Note:
Loading a model from its configuration file does `),TTe=n(Zoe,"STRONG",{});var sAt=s(TTe);DMr=r(sAt,"not"),sAt.forEach(t),GMr=r(Zoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),QU=n(Zoe,"A",{href:!0});var lAt=s(QU);OMr=r(lAt,"from_pretrained()"),lAt.forEach(t),VMr=r(Zoe," to load the model weights."),Zoe.forEach(t),XMr=i(ww),T(QM.$$.fragment,ww),ww.forEach(t),zMr=i(Sl),Sr=n(Sl,"DIV",{class:!0});var Rl=s(Sr);T(S8.$$.fragment,Rl),WMr=i(Rl),MTe=n(Rl,"P",{});var iAt=s(MTe);QMr=r(iAt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),iAt.forEach(t),HMr=i(Rl),cn=n(Rl,"P",{});var Aw=s(cn);UMr=r(Aw,"The model class to instantiate is selected based on the "),ETe=n(Aw,"CODE",{});var dAt=s(ETe);JMr=r(dAt,"model_type"),dAt.forEach(t),YMr=r(Aw,` property of the config object (either
passed as an argument or loaded from `),CTe=n(Aw,"CODE",{});var cAt=s(CTe);KMr=r(cAt,"pretrained_model_name_or_path"),cAt.forEach(t),ZMr=r(Aw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wTe=n(Aw,"CODE",{});var fAt=s(wTe);e4r=r(fAt,"pretrained_model_name_or_path"),fAt.forEach(t),o4r=r(Aw,":"),Aw.forEach(t),r4r=i(Rl),ye=n(Rl,"UL",{});var Ie=s(ye);HM=n(Ie,"LI",{});var KIe=s(HM);ATe=n(KIe,"STRONG",{});var mAt=s(ATe);t4r=r(mAt,"bart"),mAt.forEach(t),a4r=r(KIe," \u2014 "),HU=n(KIe,"A",{href:!0});var gAt=s(HU);n4r=r(gAt,"TFBartForConditionalGeneration"),gAt.forEach(t),s4r=r(KIe," (BART model)"),KIe.forEach(t),l4r=i(Ie),UM=n(Ie,"LI",{});var ZIe=s(UM);LTe=n(ZIe,"STRONG",{});var hAt=s(LTe);i4r=r(hAt,"blenderbot"),hAt.forEach(t),d4r=r(ZIe," \u2014 "),UU=n(ZIe,"A",{href:!0});var pAt=s(UU);c4r=r(pAt,"TFBlenderbotForConditionalGeneration"),pAt.forEach(t),f4r=r(ZIe," (Blenderbot model)"),ZIe.forEach(t),m4r=i(Ie),JM=n(Ie,"LI",{});var eNe=s(JM);yTe=n(eNe,"STRONG",{});var uAt=s(yTe);g4r=r(uAt,"blenderbot-small"),uAt.forEach(t),h4r=r(eNe," \u2014 "),JU=n(eNe,"A",{href:!0});var _At=s(JU);p4r=r(_At,"TFBlenderbotSmallForConditionalGeneration"),_At.forEach(t),u4r=r(eNe," (BlenderbotSmall model)"),eNe.forEach(t),_4r=i(Ie),YM=n(Ie,"LI",{});var oNe=s(YM);xTe=n(oNe,"STRONG",{});var bAt=s(xTe);b4r=r(bAt,"encoder-decoder"),bAt.forEach(t),v4r=r(oNe," \u2014 "),YU=n(oNe,"A",{href:!0});var vAt=s(YU);F4r=r(vAt,"TFEncoderDecoderModel"),vAt.forEach(t),T4r=r(oNe," (Encoder decoder model)"),oNe.forEach(t),M4r=i(Ie),KM=n(Ie,"LI",{});var rNe=s(KM);$Te=n(rNe,"STRONG",{});var FAt=s($Te);E4r=r(FAt,"led"),FAt.forEach(t),C4r=r(rNe," \u2014 "),KU=n(rNe,"A",{href:!0});var TAt=s(KU);w4r=r(TAt,"TFLEDForConditionalGeneration"),TAt.forEach(t),A4r=r(rNe," (LED model)"),rNe.forEach(t),L4r=i(Ie),ZM=n(Ie,"LI",{});var tNe=s(ZM);kTe=n(tNe,"STRONG",{});var MAt=s(kTe);y4r=r(MAt,"marian"),MAt.forEach(t),x4r=r(tNe," \u2014 "),ZU=n(tNe,"A",{href:!0});var EAt=s(ZU);$4r=r(EAt,"TFMarianMTModel"),EAt.forEach(t),k4r=r(tNe," (Marian model)"),tNe.forEach(t),S4r=i(Ie),e4=n(Ie,"LI",{});var aNe=s(e4);STe=n(aNe,"STRONG",{});var CAt=s(STe);R4r=r(CAt,"mbart"),CAt.forEach(t),P4r=r(aNe," \u2014 "),eJ=n(aNe,"A",{href:!0});var wAt=s(eJ);B4r=r(wAt,"TFMBartForConditionalGeneration"),wAt.forEach(t),I4r=r(aNe," (mBART model)"),aNe.forEach(t),N4r=i(Ie),o4=n(Ie,"LI",{});var nNe=s(o4);RTe=n(nNe,"STRONG",{});var AAt=s(RTe);q4r=r(AAt,"mt5"),AAt.forEach(t),j4r=r(nNe," \u2014 "),oJ=n(nNe,"A",{href:!0});var LAt=s(oJ);D4r=r(LAt,"TFMT5ForConditionalGeneration"),LAt.forEach(t),G4r=r(nNe," (MT5 model)"),nNe.forEach(t),O4r=i(Ie),r4=n(Ie,"LI",{});var sNe=s(r4);PTe=n(sNe,"STRONG",{});var yAt=s(PTe);V4r=r(yAt,"pegasus"),yAt.forEach(t),X4r=r(sNe," \u2014 "),rJ=n(sNe,"A",{href:!0});var xAt=s(rJ);z4r=r(xAt,"TFPegasusForConditionalGeneration"),xAt.forEach(t),W4r=r(sNe," (Pegasus model)"),sNe.forEach(t),Q4r=i(Ie),t4=n(Ie,"LI",{});var lNe=s(t4);BTe=n(lNe,"STRONG",{});var $At=s(BTe);H4r=r($At,"t5"),$At.forEach(t),U4r=r(lNe," \u2014 "),tJ=n(lNe,"A",{href:!0});var kAt=s(tJ);J4r=r(kAt,"TFT5ForConditionalGeneration"),kAt.forEach(t),Y4r=r(lNe," (T5 model)"),lNe.forEach(t),Ie.forEach(t),K4r=i(Rl),T(a4.$$.fragment,Rl),Rl.forEach(t),Sl.forEach(t),dOe=i(f),_c=n(f,"H2",{class:!0});var _Xe=s(_c);n4=n(_Xe,"A",{id:!0,class:!0,href:!0});var SAt=s(n4);ITe=n(SAt,"SPAN",{});var RAt=s(ITe);T(R8.$$.fragment,RAt),RAt.forEach(t),SAt.forEach(t),Z4r=i(_Xe),NTe=n(_Xe,"SPAN",{});var PAt=s(NTe);eEr=r(PAt,"TFAutoModelForSequenceClassification"),PAt.forEach(t),_Xe.forEach(t),cOe=i(f),nr=n(f,"DIV",{class:!0});var Pl=s(nr);T(P8.$$.fragment,Pl),oEr=i(Pl),bc=n(Pl,"P",{});var ere=s(bc);rEr=r(ere,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),aJ=n(ere,"A",{href:!0});var BAt=s(aJ);tEr=r(BAt,"from_pretrained()"),BAt.forEach(t),aEr=r(ere," class method or the "),nJ=n(ere,"A",{href:!0});var IAt=s(nJ);nEr=r(IAt,"from_config()"),IAt.forEach(t),sEr=r(ere,` class
method.`),ere.forEach(t),lEr=i(Pl),B8=n(Pl,"P",{});var bXe=s(B8);iEr=r(bXe,"This class cannot be instantiated directly using "),qTe=n(bXe,"CODE",{});var NAt=s(qTe);dEr=r(NAt,"__init__()"),NAt.forEach(t),cEr=r(bXe," (throws an error)."),bXe.forEach(t),fEr=i(Pl),It=n(Pl,"DIV",{class:!0});var Lw=s(It);T(I8.$$.fragment,Lw),mEr=i(Lw),jTe=n(Lw,"P",{});var qAt=s(jTe);gEr=r(qAt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),qAt.forEach(t),hEr=i(Lw),vc=n(Lw,"P",{});var ore=s(vc);pEr=r(ore,`Note:
Loading a model from its configuration file does `),DTe=n(ore,"STRONG",{});var jAt=s(DTe);uEr=r(jAt,"not"),jAt.forEach(t),_Er=r(ore,` load the model weights. It only affects the
model\u2019s configuration. Use `),sJ=n(ore,"A",{href:!0});var DAt=s(sJ);bEr=r(DAt,"from_pretrained()"),DAt.forEach(t),vEr=r(ore," to load the model weights."),ore.forEach(t),FEr=i(Lw),T(s4.$$.fragment,Lw),Lw.forEach(t),TEr=i(Pl),Rr=n(Pl,"DIV",{class:!0});var Bl=s(Rr);T(N8.$$.fragment,Bl),MEr=i(Bl),GTe=n(Bl,"P",{});var GAt=s(GTe);EEr=r(GAt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),GAt.forEach(t),CEr=i(Bl),fn=n(Bl,"P",{});var yw=s(fn);wEr=r(yw,"The model class to instantiate is selected based on the "),OTe=n(yw,"CODE",{});var OAt=s(OTe);AEr=r(OAt,"model_type"),OAt.forEach(t),LEr=r(yw,` property of the config object (either
passed as an argument or loaded from `),VTe=n(yw,"CODE",{});var VAt=s(VTe);yEr=r(VAt,"pretrained_model_name_or_path"),VAt.forEach(t),xEr=r(yw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),XTe=n(yw,"CODE",{});var XAt=s(XTe);$Er=r(XAt,"pretrained_model_name_or_path"),XAt.forEach(t),kEr=r(yw,":"),yw.forEach(t),SEr=i(Bl),te=n(Bl,"UL",{});var ne=s(te);l4=n(ne,"LI",{});var iNe=s(l4);zTe=n(iNe,"STRONG",{});var zAt=s(zTe);REr=r(zAt,"albert"),zAt.forEach(t),PEr=r(iNe," \u2014 "),lJ=n(iNe,"A",{href:!0});var WAt=s(lJ);BEr=r(WAt,"TFAlbertForSequenceClassification"),WAt.forEach(t),IEr=r(iNe," (ALBERT model)"),iNe.forEach(t),NEr=i(ne),i4=n(ne,"LI",{});var dNe=s(i4);WTe=n(dNe,"STRONG",{});var QAt=s(WTe);qEr=r(QAt,"bert"),QAt.forEach(t),jEr=r(dNe," \u2014 "),iJ=n(dNe,"A",{href:!0});var HAt=s(iJ);DEr=r(HAt,"TFBertForSequenceClassification"),HAt.forEach(t),GEr=r(dNe," (BERT model)"),dNe.forEach(t),OEr=i(ne),d4=n(ne,"LI",{});var cNe=s(d4);QTe=n(cNe,"STRONG",{});var UAt=s(QTe);VEr=r(UAt,"camembert"),UAt.forEach(t),XEr=r(cNe," \u2014 "),dJ=n(cNe,"A",{href:!0});var JAt=s(dJ);zEr=r(JAt,"TFCamembertForSequenceClassification"),JAt.forEach(t),WEr=r(cNe," (CamemBERT model)"),cNe.forEach(t),QEr=i(ne),c4=n(ne,"LI",{});var fNe=s(c4);HTe=n(fNe,"STRONG",{});var YAt=s(HTe);HEr=r(YAt,"convbert"),YAt.forEach(t),UEr=r(fNe," \u2014 "),cJ=n(fNe,"A",{href:!0});var KAt=s(cJ);JEr=r(KAt,"TFConvBertForSequenceClassification"),KAt.forEach(t),YEr=r(fNe," (ConvBERT model)"),fNe.forEach(t),KEr=i(ne),f4=n(ne,"LI",{});var mNe=s(f4);UTe=n(mNe,"STRONG",{});var ZAt=s(UTe);ZEr=r(ZAt,"ctrl"),ZAt.forEach(t),eCr=r(mNe," \u2014 "),fJ=n(mNe,"A",{href:!0});var eLt=s(fJ);oCr=r(eLt,"TFCTRLForSequenceClassification"),eLt.forEach(t),rCr=r(mNe," (CTRL model)"),mNe.forEach(t),tCr=i(ne),m4=n(ne,"LI",{});var gNe=s(m4);JTe=n(gNe,"STRONG",{});var oLt=s(JTe);aCr=r(oLt,"deberta"),oLt.forEach(t),nCr=r(gNe," \u2014 "),mJ=n(gNe,"A",{href:!0});var rLt=s(mJ);sCr=r(rLt,"TFDebertaForSequenceClassification"),rLt.forEach(t),lCr=r(gNe," (DeBERTa model)"),gNe.forEach(t),iCr=i(ne),g4=n(ne,"LI",{});var hNe=s(g4);YTe=n(hNe,"STRONG",{});var tLt=s(YTe);dCr=r(tLt,"deberta-v2"),tLt.forEach(t),cCr=r(hNe," \u2014 "),gJ=n(hNe,"A",{href:!0});var aLt=s(gJ);fCr=r(aLt,"TFDebertaV2ForSequenceClassification"),aLt.forEach(t),mCr=r(hNe," (DeBERTa-v2 model)"),hNe.forEach(t),gCr=i(ne),h4=n(ne,"LI",{});var pNe=s(h4);KTe=n(pNe,"STRONG",{});var nLt=s(KTe);hCr=r(nLt,"distilbert"),nLt.forEach(t),pCr=r(pNe," \u2014 "),hJ=n(pNe,"A",{href:!0});var sLt=s(hJ);uCr=r(sLt,"TFDistilBertForSequenceClassification"),sLt.forEach(t),_Cr=r(pNe," (DistilBERT model)"),pNe.forEach(t),bCr=i(ne),p4=n(ne,"LI",{});var uNe=s(p4);ZTe=n(uNe,"STRONG",{});var lLt=s(ZTe);vCr=r(lLt,"electra"),lLt.forEach(t),FCr=r(uNe," \u2014 "),pJ=n(uNe,"A",{href:!0});var iLt=s(pJ);TCr=r(iLt,"TFElectraForSequenceClassification"),iLt.forEach(t),MCr=r(uNe," (ELECTRA model)"),uNe.forEach(t),ECr=i(ne),u4=n(ne,"LI",{});var _Ne=s(u4);e7e=n(_Ne,"STRONG",{});var dLt=s(e7e);CCr=r(dLt,"flaubert"),dLt.forEach(t),wCr=r(_Ne," \u2014 "),uJ=n(_Ne,"A",{href:!0});var cLt=s(uJ);ACr=r(cLt,"TFFlaubertForSequenceClassification"),cLt.forEach(t),LCr=r(_Ne," (FlauBERT model)"),_Ne.forEach(t),yCr=i(ne),_4=n(ne,"LI",{});var bNe=s(_4);o7e=n(bNe,"STRONG",{});var fLt=s(o7e);xCr=r(fLt,"funnel"),fLt.forEach(t),$Cr=r(bNe," \u2014 "),_J=n(bNe,"A",{href:!0});var mLt=s(_J);kCr=r(mLt,"TFFunnelForSequenceClassification"),mLt.forEach(t),SCr=r(bNe," (Funnel Transformer model)"),bNe.forEach(t),RCr=i(ne),b4=n(ne,"LI",{});var vNe=s(b4);r7e=n(vNe,"STRONG",{});var gLt=s(r7e);PCr=r(gLt,"gpt2"),gLt.forEach(t),BCr=r(vNe," \u2014 "),bJ=n(vNe,"A",{href:!0});var hLt=s(bJ);ICr=r(hLt,"TFGPT2ForSequenceClassification"),hLt.forEach(t),NCr=r(vNe," (OpenAI GPT-2 model)"),vNe.forEach(t),qCr=i(ne),v4=n(ne,"LI",{});var FNe=s(v4);t7e=n(FNe,"STRONG",{});var pLt=s(t7e);jCr=r(pLt,"gptj"),pLt.forEach(t),DCr=r(FNe," \u2014 "),vJ=n(FNe,"A",{href:!0});var uLt=s(vJ);GCr=r(uLt,"TFGPTJForSequenceClassification"),uLt.forEach(t),OCr=r(FNe," (GPT-J model)"),FNe.forEach(t),VCr=i(ne),F4=n(ne,"LI",{});var TNe=s(F4);a7e=n(TNe,"STRONG",{});var _Lt=s(a7e);XCr=r(_Lt,"layoutlm"),_Lt.forEach(t),zCr=r(TNe," \u2014 "),FJ=n(TNe,"A",{href:!0});var bLt=s(FJ);WCr=r(bLt,"TFLayoutLMForSequenceClassification"),bLt.forEach(t),QCr=r(TNe," (LayoutLM model)"),TNe.forEach(t),HCr=i(ne),T4=n(ne,"LI",{});var MNe=s(T4);n7e=n(MNe,"STRONG",{});var vLt=s(n7e);UCr=r(vLt,"longformer"),vLt.forEach(t),JCr=r(MNe," \u2014 "),TJ=n(MNe,"A",{href:!0});var FLt=s(TJ);YCr=r(FLt,"TFLongformerForSequenceClassification"),FLt.forEach(t),KCr=r(MNe," (Longformer model)"),MNe.forEach(t),ZCr=i(ne),M4=n(ne,"LI",{});var ENe=s(M4);s7e=n(ENe,"STRONG",{});var TLt=s(s7e);e5r=r(TLt,"mobilebert"),TLt.forEach(t),o5r=r(ENe," \u2014 "),MJ=n(ENe,"A",{href:!0});var MLt=s(MJ);r5r=r(MLt,"TFMobileBertForSequenceClassification"),MLt.forEach(t),t5r=r(ENe," (MobileBERT model)"),ENe.forEach(t),a5r=i(ne),E4=n(ne,"LI",{});var CNe=s(E4);l7e=n(CNe,"STRONG",{});var ELt=s(l7e);n5r=r(ELt,"mpnet"),ELt.forEach(t),s5r=r(CNe," \u2014 "),EJ=n(CNe,"A",{href:!0});var CLt=s(EJ);l5r=r(CLt,"TFMPNetForSequenceClassification"),CLt.forEach(t),i5r=r(CNe," (MPNet model)"),CNe.forEach(t),d5r=i(ne),C4=n(ne,"LI",{});var wNe=s(C4);i7e=n(wNe,"STRONG",{});var wLt=s(i7e);c5r=r(wLt,"openai-gpt"),wLt.forEach(t),f5r=r(wNe," \u2014 "),CJ=n(wNe,"A",{href:!0});var ALt=s(CJ);m5r=r(ALt,"TFOpenAIGPTForSequenceClassification"),ALt.forEach(t),g5r=r(wNe," (OpenAI GPT model)"),wNe.forEach(t),h5r=i(ne),w4=n(ne,"LI",{});var ANe=s(w4);d7e=n(ANe,"STRONG",{});var LLt=s(d7e);p5r=r(LLt,"rembert"),LLt.forEach(t),u5r=r(ANe," \u2014 "),wJ=n(ANe,"A",{href:!0});var yLt=s(wJ);_5r=r(yLt,"TFRemBertForSequenceClassification"),yLt.forEach(t),b5r=r(ANe," (RemBERT model)"),ANe.forEach(t),v5r=i(ne),A4=n(ne,"LI",{});var LNe=s(A4);c7e=n(LNe,"STRONG",{});var xLt=s(c7e);F5r=r(xLt,"roberta"),xLt.forEach(t),T5r=r(LNe," \u2014 "),AJ=n(LNe,"A",{href:!0});var $Lt=s(AJ);M5r=r($Lt,"TFRobertaForSequenceClassification"),$Lt.forEach(t),E5r=r(LNe," (RoBERTa model)"),LNe.forEach(t),C5r=i(ne),L4=n(ne,"LI",{});var yNe=s(L4);f7e=n(yNe,"STRONG",{});var kLt=s(f7e);w5r=r(kLt,"roformer"),kLt.forEach(t),A5r=r(yNe," \u2014 "),LJ=n(yNe,"A",{href:!0});var SLt=s(LJ);L5r=r(SLt,"TFRoFormerForSequenceClassification"),SLt.forEach(t),y5r=r(yNe," (RoFormer model)"),yNe.forEach(t),x5r=i(ne),y4=n(ne,"LI",{});var xNe=s(y4);m7e=n(xNe,"STRONG",{});var RLt=s(m7e);$5r=r(RLt,"tapas"),RLt.forEach(t),k5r=r(xNe," \u2014 "),yJ=n(xNe,"A",{href:!0});var PLt=s(yJ);S5r=r(PLt,"TFTapasForSequenceClassification"),PLt.forEach(t),R5r=r(xNe," (TAPAS model)"),xNe.forEach(t),P5r=i(ne),x4=n(ne,"LI",{});var $Ne=s(x4);g7e=n($Ne,"STRONG",{});var BLt=s(g7e);B5r=r(BLt,"transfo-xl"),BLt.forEach(t),I5r=r($Ne," \u2014 "),xJ=n($Ne,"A",{href:!0});var ILt=s(xJ);N5r=r(ILt,"TFTransfoXLForSequenceClassification"),ILt.forEach(t),q5r=r($Ne," (Transformer-XL model)"),$Ne.forEach(t),j5r=i(ne),$4=n(ne,"LI",{});var kNe=s($4);h7e=n(kNe,"STRONG",{});var NLt=s(h7e);D5r=r(NLt,"xlm"),NLt.forEach(t),G5r=r(kNe," \u2014 "),$J=n(kNe,"A",{href:!0});var qLt=s($J);O5r=r(qLt,"TFXLMForSequenceClassification"),qLt.forEach(t),V5r=r(kNe," (XLM model)"),kNe.forEach(t),X5r=i(ne),k4=n(ne,"LI",{});var SNe=s(k4);p7e=n(SNe,"STRONG",{});var jLt=s(p7e);z5r=r(jLt,"xlm-roberta"),jLt.forEach(t),W5r=r(SNe," \u2014 "),kJ=n(SNe,"A",{href:!0});var DLt=s(kJ);Q5r=r(DLt,"TFXLMRobertaForSequenceClassification"),DLt.forEach(t),H5r=r(SNe," (XLM-RoBERTa model)"),SNe.forEach(t),U5r=i(ne),S4=n(ne,"LI",{});var RNe=s(S4);u7e=n(RNe,"STRONG",{});var GLt=s(u7e);J5r=r(GLt,"xlnet"),GLt.forEach(t),Y5r=r(RNe," \u2014 "),SJ=n(RNe,"A",{href:!0});var OLt=s(SJ);K5r=r(OLt,"TFXLNetForSequenceClassification"),OLt.forEach(t),Z5r=r(RNe," (XLNet model)"),RNe.forEach(t),ne.forEach(t),e3r=i(Bl),T(R4.$$.fragment,Bl),Bl.forEach(t),Pl.forEach(t),fOe=i(f),Fc=n(f,"H2",{class:!0});var vXe=s(Fc);P4=n(vXe,"A",{id:!0,class:!0,href:!0});var VLt=s(P4);_7e=n(VLt,"SPAN",{});var XLt=s(_7e);T(q8.$$.fragment,XLt),XLt.forEach(t),VLt.forEach(t),o3r=i(vXe),b7e=n(vXe,"SPAN",{});var zLt=s(b7e);r3r=r(zLt,"TFAutoModelForMultipleChoice"),zLt.forEach(t),vXe.forEach(t),mOe=i(f),sr=n(f,"DIV",{class:!0});var Il=s(sr);T(j8.$$.fragment,Il),t3r=i(Il),Tc=n(Il,"P",{});var rre=s(Tc);a3r=r(rre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),RJ=n(rre,"A",{href:!0});var WLt=s(RJ);n3r=r(WLt,"from_pretrained()"),WLt.forEach(t),s3r=r(rre," class method or the "),PJ=n(rre,"A",{href:!0});var QLt=s(PJ);l3r=r(QLt,"from_config()"),QLt.forEach(t),i3r=r(rre,` class
method.`),rre.forEach(t),d3r=i(Il),D8=n(Il,"P",{});var FXe=s(D8);c3r=r(FXe,"This class cannot be instantiated directly using "),v7e=n(FXe,"CODE",{});var HLt=s(v7e);f3r=r(HLt,"__init__()"),HLt.forEach(t),m3r=r(FXe," (throws an error)."),FXe.forEach(t),g3r=i(Il),Nt=n(Il,"DIV",{class:!0});var xw=s(Nt);T(G8.$$.fragment,xw),h3r=i(xw),F7e=n(xw,"P",{});var ULt=s(F7e);p3r=r(ULt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),ULt.forEach(t),u3r=i(xw),Mc=n(xw,"P",{});var tre=s(Mc);_3r=r(tre,`Note:
Loading a model from its configuration file does `),T7e=n(tre,"STRONG",{});var JLt=s(T7e);b3r=r(JLt,"not"),JLt.forEach(t),v3r=r(tre,` load the model weights. It only affects the
model\u2019s configuration. Use `),BJ=n(tre,"A",{href:!0});var YLt=s(BJ);F3r=r(YLt,"from_pretrained()"),YLt.forEach(t),T3r=r(tre," to load the model weights."),tre.forEach(t),M3r=i(xw),T(B4.$$.fragment,xw),xw.forEach(t),E3r=i(Il),Pr=n(Il,"DIV",{class:!0});var Nl=s(Pr);T(O8.$$.fragment,Nl),C3r=i(Nl),M7e=n(Nl,"P",{});var KLt=s(M7e);w3r=r(KLt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),KLt.forEach(t),A3r=i(Nl),mn=n(Nl,"P",{});var $w=s(mn);L3r=r($w,"The model class to instantiate is selected based on the "),E7e=n($w,"CODE",{});var ZLt=s(E7e);y3r=r(ZLt,"model_type"),ZLt.forEach(t),x3r=r($w,` property of the config object (either
passed as an argument or loaded from `),C7e=n($w,"CODE",{});var eyt=s(C7e);$3r=r(eyt,"pretrained_model_name_or_path"),eyt.forEach(t),k3r=r($w,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w7e=n($w,"CODE",{});var oyt=s(w7e);S3r=r(oyt,"pretrained_model_name_or_path"),oyt.forEach(t),R3r=r($w,":"),$w.forEach(t),P3r=i(Nl),ue=n(Nl,"UL",{});var ve=s(ue);I4=n(ve,"LI",{});var PNe=s(I4);A7e=n(PNe,"STRONG",{});var ryt=s(A7e);B3r=r(ryt,"albert"),ryt.forEach(t),I3r=r(PNe," \u2014 "),IJ=n(PNe,"A",{href:!0});var tyt=s(IJ);N3r=r(tyt,"TFAlbertForMultipleChoice"),tyt.forEach(t),q3r=r(PNe," (ALBERT model)"),PNe.forEach(t),j3r=i(ve),N4=n(ve,"LI",{});var BNe=s(N4);L7e=n(BNe,"STRONG",{});var ayt=s(L7e);D3r=r(ayt,"bert"),ayt.forEach(t),G3r=r(BNe," \u2014 "),NJ=n(BNe,"A",{href:!0});var nyt=s(NJ);O3r=r(nyt,"TFBertForMultipleChoice"),nyt.forEach(t),V3r=r(BNe," (BERT model)"),BNe.forEach(t),X3r=i(ve),q4=n(ve,"LI",{});var INe=s(q4);y7e=n(INe,"STRONG",{});var syt=s(y7e);z3r=r(syt,"camembert"),syt.forEach(t),W3r=r(INe," \u2014 "),qJ=n(INe,"A",{href:!0});var lyt=s(qJ);Q3r=r(lyt,"TFCamembertForMultipleChoice"),lyt.forEach(t),H3r=r(INe," (CamemBERT model)"),INe.forEach(t),U3r=i(ve),j4=n(ve,"LI",{});var NNe=s(j4);x7e=n(NNe,"STRONG",{});var iyt=s(x7e);J3r=r(iyt,"convbert"),iyt.forEach(t),Y3r=r(NNe," \u2014 "),jJ=n(NNe,"A",{href:!0});var dyt=s(jJ);K3r=r(dyt,"TFConvBertForMultipleChoice"),dyt.forEach(t),Z3r=r(NNe," (ConvBERT model)"),NNe.forEach(t),e0r=i(ve),D4=n(ve,"LI",{});var qNe=s(D4);$7e=n(qNe,"STRONG",{});var cyt=s($7e);o0r=r(cyt,"distilbert"),cyt.forEach(t),r0r=r(qNe," \u2014 "),DJ=n(qNe,"A",{href:!0});var fyt=s(DJ);t0r=r(fyt,"TFDistilBertForMultipleChoice"),fyt.forEach(t),a0r=r(qNe," (DistilBERT model)"),qNe.forEach(t),n0r=i(ve),G4=n(ve,"LI",{});var jNe=s(G4);k7e=n(jNe,"STRONG",{});var myt=s(k7e);s0r=r(myt,"electra"),myt.forEach(t),l0r=r(jNe," \u2014 "),GJ=n(jNe,"A",{href:!0});var gyt=s(GJ);i0r=r(gyt,"TFElectraForMultipleChoice"),gyt.forEach(t),d0r=r(jNe," (ELECTRA model)"),jNe.forEach(t),c0r=i(ve),O4=n(ve,"LI",{});var DNe=s(O4);S7e=n(DNe,"STRONG",{});var hyt=s(S7e);f0r=r(hyt,"flaubert"),hyt.forEach(t),m0r=r(DNe," \u2014 "),OJ=n(DNe,"A",{href:!0});var pyt=s(OJ);g0r=r(pyt,"TFFlaubertForMultipleChoice"),pyt.forEach(t),h0r=r(DNe," (FlauBERT model)"),DNe.forEach(t),p0r=i(ve),V4=n(ve,"LI",{});var GNe=s(V4);R7e=n(GNe,"STRONG",{});var uyt=s(R7e);u0r=r(uyt,"funnel"),uyt.forEach(t),_0r=r(GNe," \u2014 "),VJ=n(GNe,"A",{href:!0});var _yt=s(VJ);b0r=r(_yt,"TFFunnelForMultipleChoice"),_yt.forEach(t),v0r=r(GNe," (Funnel Transformer model)"),GNe.forEach(t),F0r=i(ve),X4=n(ve,"LI",{});var ONe=s(X4);P7e=n(ONe,"STRONG",{});var byt=s(P7e);T0r=r(byt,"longformer"),byt.forEach(t),M0r=r(ONe," \u2014 "),XJ=n(ONe,"A",{href:!0});var vyt=s(XJ);E0r=r(vyt,"TFLongformerForMultipleChoice"),vyt.forEach(t),C0r=r(ONe," (Longformer model)"),ONe.forEach(t),w0r=i(ve),z4=n(ve,"LI",{});var VNe=s(z4);B7e=n(VNe,"STRONG",{});var Fyt=s(B7e);A0r=r(Fyt,"mobilebert"),Fyt.forEach(t),L0r=r(VNe," \u2014 "),zJ=n(VNe,"A",{href:!0});var Tyt=s(zJ);y0r=r(Tyt,"TFMobileBertForMultipleChoice"),Tyt.forEach(t),x0r=r(VNe," (MobileBERT model)"),VNe.forEach(t),$0r=i(ve),W4=n(ve,"LI",{});var XNe=s(W4);I7e=n(XNe,"STRONG",{});var Myt=s(I7e);k0r=r(Myt,"mpnet"),Myt.forEach(t),S0r=r(XNe," \u2014 "),WJ=n(XNe,"A",{href:!0});var Eyt=s(WJ);R0r=r(Eyt,"TFMPNetForMultipleChoice"),Eyt.forEach(t),P0r=r(XNe," (MPNet model)"),XNe.forEach(t),B0r=i(ve),Q4=n(ve,"LI",{});var zNe=s(Q4);N7e=n(zNe,"STRONG",{});var Cyt=s(N7e);I0r=r(Cyt,"rembert"),Cyt.forEach(t),N0r=r(zNe," \u2014 "),QJ=n(zNe,"A",{href:!0});var wyt=s(QJ);q0r=r(wyt,"TFRemBertForMultipleChoice"),wyt.forEach(t),j0r=r(zNe," (RemBERT model)"),zNe.forEach(t),D0r=i(ve),H4=n(ve,"LI",{});var WNe=s(H4);q7e=n(WNe,"STRONG",{});var Ayt=s(q7e);G0r=r(Ayt,"roberta"),Ayt.forEach(t),O0r=r(WNe," \u2014 "),HJ=n(WNe,"A",{href:!0});var Lyt=s(HJ);V0r=r(Lyt,"TFRobertaForMultipleChoice"),Lyt.forEach(t),X0r=r(WNe," (RoBERTa model)"),WNe.forEach(t),z0r=i(ve),U4=n(ve,"LI",{});var QNe=s(U4);j7e=n(QNe,"STRONG",{});var yyt=s(j7e);W0r=r(yyt,"roformer"),yyt.forEach(t),Q0r=r(QNe," \u2014 "),UJ=n(QNe,"A",{href:!0});var xyt=s(UJ);H0r=r(xyt,"TFRoFormerForMultipleChoice"),xyt.forEach(t),U0r=r(QNe," (RoFormer model)"),QNe.forEach(t),J0r=i(ve),J4=n(ve,"LI",{});var HNe=s(J4);D7e=n(HNe,"STRONG",{});var $yt=s(D7e);Y0r=r($yt,"xlm"),$yt.forEach(t),K0r=r(HNe," \u2014 "),JJ=n(HNe,"A",{href:!0});var kyt=s(JJ);Z0r=r(kyt,"TFXLMForMultipleChoice"),kyt.forEach(t),ewr=r(HNe," (XLM model)"),HNe.forEach(t),owr=i(ve),Y4=n(ve,"LI",{});var UNe=s(Y4);G7e=n(UNe,"STRONG",{});var Syt=s(G7e);rwr=r(Syt,"xlm-roberta"),Syt.forEach(t),twr=r(UNe," \u2014 "),YJ=n(UNe,"A",{href:!0});var Ryt=s(YJ);awr=r(Ryt,"TFXLMRobertaForMultipleChoice"),Ryt.forEach(t),nwr=r(UNe," (XLM-RoBERTa model)"),UNe.forEach(t),swr=i(ve),K4=n(ve,"LI",{});var JNe=s(K4);O7e=n(JNe,"STRONG",{});var Pyt=s(O7e);lwr=r(Pyt,"xlnet"),Pyt.forEach(t),iwr=r(JNe," \u2014 "),KJ=n(JNe,"A",{href:!0});var Byt=s(KJ);dwr=r(Byt,"TFXLNetForMultipleChoice"),Byt.forEach(t),cwr=r(JNe," (XLNet model)"),JNe.forEach(t),ve.forEach(t),fwr=i(Nl),T(Z4.$$.fragment,Nl),Nl.forEach(t),Il.forEach(t),gOe=i(f),Ec=n(f,"H2",{class:!0});var TXe=s(Ec);eE=n(TXe,"A",{id:!0,class:!0,href:!0});var Iyt=s(eE);V7e=n(Iyt,"SPAN",{});var Nyt=s(V7e);T(V8.$$.fragment,Nyt),Nyt.forEach(t),Iyt.forEach(t),mwr=i(TXe),X7e=n(TXe,"SPAN",{});var qyt=s(X7e);gwr=r(qyt,"TFAutoModelForNextSentencePrediction"),qyt.forEach(t),TXe.forEach(t),hOe=i(f),lr=n(f,"DIV",{class:!0});var ql=s(lr);T(X8.$$.fragment,ql),hwr=i(ql),Cc=n(ql,"P",{});var are=s(Cc);pwr=r(are,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),ZJ=n(are,"A",{href:!0});var jyt=s(ZJ);uwr=r(jyt,"from_pretrained()"),jyt.forEach(t),_wr=r(are," class method or the "),eY=n(are,"A",{href:!0});var Dyt=s(eY);bwr=r(Dyt,"from_config()"),Dyt.forEach(t),vwr=r(are,` class
method.`),are.forEach(t),Fwr=i(ql),z8=n(ql,"P",{});var MXe=s(z8);Twr=r(MXe,"This class cannot be instantiated directly using "),z7e=n(MXe,"CODE",{});var Gyt=s(z7e);Mwr=r(Gyt,"__init__()"),Gyt.forEach(t),Ewr=r(MXe," (throws an error)."),MXe.forEach(t),Cwr=i(ql),qt=n(ql,"DIV",{class:!0});var kw=s(qt);T(W8.$$.fragment,kw),wwr=i(kw),W7e=n(kw,"P",{});var Oyt=s(W7e);Awr=r(Oyt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Oyt.forEach(t),Lwr=i(kw),wc=n(kw,"P",{});var nre=s(wc);ywr=r(nre,`Note:
Loading a model from its configuration file does `),Q7e=n(nre,"STRONG",{});var Vyt=s(Q7e);xwr=r(Vyt,"not"),Vyt.forEach(t),$wr=r(nre,` load the model weights. It only affects the
model\u2019s configuration. Use `),oY=n(nre,"A",{href:!0});var Xyt=s(oY);kwr=r(Xyt,"from_pretrained()"),Xyt.forEach(t),Swr=r(nre," to load the model weights."),nre.forEach(t),Rwr=i(kw),T(oE.$$.fragment,kw),kw.forEach(t),Pwr=i(ql),Br=n(ql,"DIV",{class:!0});var jl=s(Br);T(Q8.$$.fragment,jl),Bwr=i(jl),H7e=n(jl,"P",{});var zyt=s(H7e);Iwr=r(zyt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),zyt.forEach(t),Nwr=i(jl),gn=n(jl,"P",{});var Sw=s(gn);qwr=r(Sw,"The model class to instantiate is selected based on the "),U7e=n(Sw,"CODE",{});var Wyt=s(U7e);jwr=r(Wyt,"model_type"),Wyt.forEach(t),Dwr=r(Sw,` property of the config object (either
passed as an argument or loaded from `),J7e=n(Sw,"CODE",{});var Qyt=s(J7e);Gwr=r(Qyt,"pretrained_model_name_or_path"),Qyt.forEach(t),Owr=r(Sw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y7e=n(Sw,"CODE",{});var Hyt=s(Y7e);Vwr=r(Hyt,"pretrained_model_name_or_path"),Hyt.forEach(t),Xwr=r(Sw,":"),Sw.forEach(t),zwr=i(jl),H8=n(jl,"UL",{});var EXe=s(H8);rE=n(EXe,"LI",{});var YNe=s(rE);K7e=n(YNe,"STRONG",{});var Uyt=s(K7e);Wwr=r(Uyt,"bert"),Uyt.forEach(t),Qwr=r(YNe," \u2014 "),rY=n(YNe,"A",{href:!0});var Jyt=s(rY);Hwr=r(Jyt,"TFBertForNextSentencePrediction"),Jyt.forEach(t),Uwr=r(YNe," (BERT model)"),YNe.forEach(t),Jwr=i(EXe),tE=n(EXe,"LI",{});var KNe=s(tE);Z7e=n(KNe,"STRONG",{});var Yyt=s(Z7e);Ywr=r(Yyt,"mobilebert"),Yyt.forEach(t),Kwr=r(KNe," \u2014 "),tY=n(KNe,"A",{href:!0});var Kyt=s(tY);Zwr=r(Kyt,"TFMobileBertForNextSentencePrediction"),Kyt.forEach(t),eAr=r(KNe," (MobileBERT model)"),KNe.forEach(t),EXe.forEach(t),oAr=i(jl),T(aE.$$.fragment,jl),jl.forEach(t),ql.forEach(t),pOe=i(f),Ac=n(f,"H2",{class:!0});var CXe=s(Ac);nE=n(CXe,"A",{id:!0,class:!0,href:!0});var Zyt=s(nE);e9e=n(Zyt,"SPAN",{});var e8t=s(e9e);T(U8.$$.fragment,e8t),e8t.forEach(t),Zyt.forEach(t),rAr=i(CXe),o9e=n(CXe,"SPAN",{});var o8t=s(o9e);tAr=r(o8t,"TFAutoModelForTableQuestionAnswering"),o8t.forEach(t),CXe.forEach(t),uOe=i(f),ir=n(f,"DIV",{class:!0});var Dl=s(ir);T(J8.$$.fragment,Dl),aAr=i(Dl),Lc=n(Dl,"P",{});var sre=s(Lc);nAr=r(sre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),aY=n(sre,"A",{href:!0});var r8t=s(aY);sAr=r(r8t,"from_pretrained()"),r8t.forEach(t),lAr=r(sre," class method or the "),nY=n(sre,"A",{href:!0});var t8t=s(nY);iAr=r(t8t,"from_config()"),t8t.forEach(t),dAr=r(sre,` class
method.`),sre.forEach(t),cAr=i(Dl),Y8=n(Dl,"P",{});var wXe=s(Y8);fAr=r(wXe,"This class cannot be instantiated directly using "),r9e=n(wXe,"CODE",{});var a8t=s(r9e);mAr=r(a8t,"__init__()"),a8t.forEach(t),gAr=r(wXe," (throws an error)."),wXe.forEach(t),hAr=i(Dl),jt=n(Dl,"DIV",{class:!0});var Rw=s(jt);T(K8.$$.fragment,Rw),pAr=i(Rw),t9e=n(Rw,"P",{});var n8t=s(t9e);uAr=r(n8t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),n8t.forEach(t),_Ar=i(Rw),yc=n(Rw,"P",{});var lre=s(yc);bAr=r(lre,`Note:
Loading a model from its configuration file does `),a9e=n(lre,"STRONG",{});var s8t=s(a9e);vAr=r(s8t,"not"),s8t.forEach(t),FAr=r(lre,` load the model weights. It only affects the
model\u2019s configuration. Use `),sY=n(lre,"A",{href:!0});var l8t=s(sY);TAr=r(l8t,"from_pretrained()"),l8t.forEach(t),MAr=r(lre," to load the model weights."),lre.forEach(t),EAr=i(Rw),T(sE.$$.fragment,Rw),Rw.forEach(t),CAr=i(Dl),Ir=n(Dl,"DIV",{class:!0});var Gl=s(Ir);T(Z8.$$.fragment,Gl),wAr=i(Gl),n9e=n(Gl,"P",{});var i8t=s(n9e);AAr=r(i8t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),i8t.forEach(t),LAr=i(Gl),hn=n(Gl,"P",{});var Pw=s(hn);yAr=r(Pw,"The model class to instantiate is selected based on the "),s9e=n(Pw,"CODE",{});var d8t=s(s9e);xAr=r(d8t,"model_type"),d8t.forEach(t),$Ar=r(Pw,` property of the config object (either
passed as an argument or loaded from `),l9e=n(Pw,"CODE",{});var c8t=s(l9e);kAr=r(c8t,"pretrained_model_name_or_path"),c8t.forEach(t),SAr=r(Pw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i9e=n(Pw,"CODE",{});var f8t=s(i9e);RAr=r(f8t,"pretrained_model_name_or_path"),f8t.forEach(t),PAr=r(Pw,":"),Pw.forEach(t),BAr=i(Gl),d9e=n(Gl,"UL",{});var m8t=s(d9e);lE=n(m8t,"LI",{});var ZNe=s(lE);c9e=n(ZNe,"STRONG",{});var g8t=s(c9e);IAr=r(g8t,"tapas"),g8t.forEach(t),NAr=r(ZNe," \u2014 "),lY=n(ZNe,"A",{href:!0});var h8t=s(lY);qAr=r(h8t,"TFTapasForQuestionAnswering"),h8t.forEach(t),jAr=r(ZNe," (TAPAS model)"),ZNe.forEach(t),m8t.forEach(t),DAr=i(Gl),T(iE.$$.fragment,Gl),Gl.forEach(t),Dl.forEach(t),_Oe=i(f),xc=n(f,"H2",{class:!0});var AXe=s(xc);dE=n(AXe,"A",{id:!0,class:!0,href:!0});var p8t=s(dE);f9e=n(p8t,"SPAN",{});var u8t=s(f9e);T(ex.$$.fragment,u8t),u8t.forEach(t),p8t.forEach(t),GAr=i(AXe),m9e=n(AXe,"SPAN",{});var _8t=s(m9e);OAr=r(_8t,"TFAutoModelForTokenClassification"),_8t.forEach(t),AXe.forEach(t),bOe=i(f),dr=n(f,"DIV",{class:!0});var Ol=s(dr);T(ox.$$.fragment,Ol),VAr=i(Ol),$c=n(Ol,"P",{});var ire=s($c);XAr=r(ire,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),iY=n(ire,"A",{href:!0});var b8t=s(iY);zAr=r(b8t,"from_pretrained()"),b8t.forEach(t),WAr=r(ire," class method or the "),dY=n(ire,"A",{href:!0});var v8t=s(dY);QAr=r(v8t,"from_config()"),v8t.forEach(t),HAr=r(ire,` class
method.`),ire.forEach(t),UAr=i(Ol),rx=n(Ol,"P",{});var LXe=s(rx);JAr=r(LXe,"This class cannot be instantiated directly using "),g9e=n(LXe,"CODE",{});var F8t=s(g9e);YAr=r(F8t,"__init__()"),F8t.forEach(t),KAr=r(LXe," (throws an error)."),LXe.forEach(t),ZAr=i(Ol),Dt=n(Ol,"DIV",{class:!0});var Bw=s(Dt);T(tx.$$.fragment,Bw),eLr=i(Bw),h9e=n(Bw,"P",{});var T8t=s(h9e);oLr=r(T8t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),T8t.forEach(t),rLr=i(Bw),kc=n(Bw,"P",{});var dre=s(kc);tLr=r(dre,`Note:
Loading a model from its configuration file does `),p9e=n(dre,"STRONG",{});var M8t=s(p9e);aLr=r(M8t,"not"),M8t.forEach(t),nLr=r(dre,` load the model weights. It only affects the
model\u2019s configuration. Use `),cY=n(dre,"A",{href:!0});var E8t=s(cY);sLr=r(E8t,"from_pretrained()"),E8t.forEach(t),lLr=r(dre," to load the model weights."),dre.forEach(t),iLr=i(Bw),T(cE.$$.fragment,Bw),Bw.forEach(t),dLr=i(Ol),Nr=n(Ol,"DIV",{class:!0});var Vl=s(Nr);T(ax.$$.fragment,Vl),cLr=i(Vl),u9e=n(Vl,"P",{});var C8t=s(u9e);fLr=r(C8t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),C8t.forEach(t),mLr=i(Vl),pn=n(Vl,"P",{});var Iw=s(pn);gLr=r(Iw,"The model class to instantiate is selected based on the "),_9e=n(Iw,"CODE",{});var w8t=s(_9e);hLr=r(w8t,"model_type"),w8t.forEach(t),pLr=r(Iw,` property of the config object (either
passed as an argument or loaded from `),b9e=n(Iw,"CODE",{});var A8t=s(b9e);uLr=r(A8t,"pretrained_model_name_or_path"),A8t.forEach(t),_Lr=r(Iw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v9e=n(Iw,"CODE",{});var L8t=s(v9e);bLr=r(L8t,"pretrained_model_name_or_path"),L8t.forEach(t),vLr=r(Iw,":"),Iw.forEach(t),FLr=i(Vl),de=n(Vl,"UL",{});var me=s(de);fE=n(me,"LI",{});var eqe=s(fE);F9e=n(eqe,"STRONG",{});var y8t=s(F9e);TLr=r(y8t,"albert"),y8t.forEach(t),MLr=r(eqe," \u2014 "),fY=n(eqe,"A",{href:!0});var x8t=s(fY);ELr=r(x8t,"TFAlbertForTokenClassification"),x8t.forEach(t),CLr=r(eqe," (ALBERT model)"),eqe.forEach(t),wLr=i(me),mE=n(me,"LI",{});var oqe=s(mE);T9e=n(oqe,"STRONG",{});var $8t=s(T9e);ALr=r($8t,"bert"),$8t.forEach(t),LLr=r(oqe," \u2014 "),mY=n(oqe,"A",{href:!0});var k8t=s(mY);yLr=r(k8t,"TFBertForTokenClassification"),k8t.forEach(t),xLr=r(oqe," (BERT model)"),oqe.forEach(t),$Lr=i(me),gE=n(me,"LI",{});var rqe=s(gE);M9e=n(rqe,"STRONG",{});var S8t=s(M9e);kLr=r(S8t,"camembert"),S8t.forEach(t),SLr=r(rqe," \u2014 "),gY=n(rqe,"A",{href:!0});var R8t=s(gY);RLr=r(R8t,"TFCamembertForTokenClassification"),R8t.forEach(t),PLr=r(rqe," (CamemBERT model)"),rqe.forEach(t),BLr=i(me),hE=n(me,"LI",{});var tqe=s(hE);E9e=n(tqe,"STRONG",{});var P8t=s(E9e);ILr=r(P8t,"convbert"),P8t.forEach(t),NLr=r(tqe," \u2014 "),hY=n(tqe,"A",{href:!0});var B8t=s(hY);qLr=r(B8t,"TFConvBertForTokenClassification"),B8t.forEach(t),jLr=r(tqe," (ConvBERT model)"),tqe.forEach(t),DLr=i(me),pE=n(me,"LI",{});var aqe=s(pE);C9e=n(aqe,"STRONG",{});var I8t=s(C9e);GLr=r(I8t,"deberta"),I8t.forEach(t),OLr=r(aqe," \u2014 "),pY=n(aqe,"A",{href:!0});var N8t=s(pY);VLr=r(N8t,"TFDebertaForTokenClassification"),N8t.forEach(t),XLr=r(aqe," (DeBERTa model)"),aqe.forEach(t),zLr=i(me),uE=n(me,"LI",{});var nqe=s(uE);w9e=n(nqe,"STRONG",{});var q8t=s(w9e);WLr=r(q8t,"deberta-v2"),q8t.forEach(t),QLr=r(nqe," \u2014 "),uY=n(nqe,"A",{href:!0});var j8t=s(uY);HLr=r(j8t,"TFDebertaV2ForTokenClassification"),j8t.forEach(t),ULr=r(nqe," (DeBERTa-v2 model)"),nqe.forEach(t),JLr=i(me),_E=n(me,"LI",{});var sqe=s(_E);A9e=n(sqe,"STRONG",{});var D8t=s(A9e);YLr=r(D8t,"distilbert"),D8t.forEach(t),KLr=r(sqe," \u2014 "),_Y=n(sqe,"A",{href:!0});var G8t=s(_Y);ZLr=r(G8t,"TFDistilBertForTokenClassification"),G8t.forEach(t),eyr=r(sqe," (DistilBERT model)"),sqe.forEach(t),oyr=i(me),bE=n(me,"LI",{});var lqe=s(bE);L9e=n(lqe,"STRONG",{});var O8t=s(L9e);ryr=r(O8t,"electra"),O8t.forEach(t),tyr=r(lqe," \u2014 "),bY=n(lqe,"A",{href:!0});var V8t=s(bY);ayr=r(V8t,"TFElectraForTokenClassification"),V8t.forEach(t),nyr=r(lqe," (ELECTRA model)"),lqe.forEach(t),syr=i(me),vE=n(me,"LI",{});var iqe=s(vE);y9e=n(iqe,"STRONG",{});var X8t=s(y9e);lyr=r(X8t,"flaubert"),X8t.forEach(t),iyr=r(iqe," \u2014 "),vY=n(iqe,"A",{href:!0});var z8t=s(vY);dyr=r(z8t,"TFFlaubertForTokenClassification"),z8t.forEach(t),cyr=r(iqe," (FlauBERT model)"),iqe.forEach(t),fyr=i(me),FE=n(me,"LI",{});var dqe=s(FE);x9e=n(dqe,"STRONG",{});var W8t=s(x9e);myr=r(W8t,"funnel"),W8t.forEach(t),gyr=r(dqe," \u2014 "),FY=n(dqe,"A",{href:!0});var Q8t=s(FY);hyr=r(Q8t,"TFFunnelForTokenClassification"),Q8t.forEach(t),pyr=r(dqe," (Funnel Transformer model)"),dqe.forEach(t),uyr=i(me),TE=n(me,"LI",{});var cqe=s(TE);$9e=n(cqe,"STRONG",{});var H8t=s($9e);_yr=r(H8t,"layoutlm"),H8t.forEach(t),byr=r(cqe," \u2014 "),TY=n(cqe,"A",{href:!0});var U8t=s(TY);vyr=r(U8t,"TFLayoutLMForTokenClassification"),U8t.forEach(t),Fyr=r(cqe," (LayoutLM model)"),cqe.forEach(t),Tyr=i(me),ME=n(me,"LI",{});var fqe=s(ME);k9e=n(fqe,"STRONG",{});var J8t=s(k9e);Myr=r(J8t,"longformer"),J8t.forEach(t),Eyr=r(fqe," \u2014 "),MY=n(fqe,"A",{href:!0});var Y8t=s(MY);Cyr=r(Y8t,"TFLongformerForTokenClassification"),Y8t.forEach(t),wyr=r(fqe," (Longformer model)"),fqe.forEach(t),Ayr=i(me),EE=n(me,"LI",{});var mqe=s(EE);S9e=n(mqe,"STRONG",{});var K8t=s(S9e);Lyr=r(K8t,"mobilebert"),K8t.forEach(t),yyr=r(mqe," \u2014 "),EY=n(mqe,"A",{href:!0});var Z8t=s(EY);xyr=r(Z8t,"TFMobileBertForTokenClassification"),Z8t.forEach(t),$yr=r(mqe," (MobileBERT model)"),mqe.forEach(t),kyr=i(me),CE=n(me,"LI",{});var gqe=s(CE);R9e=n(gqe,"STRONG",{});var ext=s(R9e);Syr=r(ext,"mpnet"),ext.forEach(t),Ryr=r(gqe," \u2014 "),CY=n(gqe,"A",{href:!0});var oxt=s(CY);Pyr=r(oxt,"TFMPNetForTokenClassification"),oxt.forEach(t),Byr=r(gqe," (MPNet model)"),gqe.forEach(t),Iyr=i(me),wE=n(me,"LI",{});var hqe=s(wE);P9e=n(hqe,"STRONG",{});var rxt=s(P9e);Nyr=r(rxt,"rembert"),rxt.forEach(t),qyr=r(hqe," \u2014 "),wY=n(hqe,"A",{href:!0});var txt=s(wY);jyr=r(txt,"TFRemBertForTokenClassification"),txt.forEach(t),Dyr=r(hqe," (RemBERT model)"),hqe.forEach(t),Gyr=i(me),AE=n(me,"LI",{});var pqe=s(AE);B9e=n(pqe,"STRONG",{});var axt=s(B9e);Oyr=r(axt,"roberta"),axt.forEach(t),Vyr=r(pqe," \u2014 "),AY=n(pqe,"A",{href:!0});var nxt=s(AY);Xyr=r(nxt,"TFRobertaForTokenClassification"),nxt.forEach(t),zyr=r(pqe," (RoBERTa model)"),pqe.forEach(t),Wyr=i(me),LE=n(me,"LI",{});var uqe=s(LE);I9e=n(uqe,"STRONG",{});var sxt=s(I9e);Qyr=r(sxt,"roformer"),sxt.forEach(t),Hyr=r(uqe," \u2014 "),LY=n(uqe,"A",{href:!0});var lxt=s(LY);Uyr=r(lxt,"TFRoFormerForTokenClassification"),lxt.forEach(t),Jyr=r(uqe," (RoFormer model)"),uqe.forEach(t),Yyr=i(me),yE=n(me,"LI",{});var _qe=s(yE);N9e=n(_qe,"STRONG",{});var ixt=s(N9e);Kyr=r(ixt,"xlm"),ixt.forEach(t),Zyr=r(_qe," \u2014 "),yY=n(_qe,"A",{href:!0});var dxt=s(yY);e8r=r(dxt,"TFXLMForTokenClassification"),dxt.forEach(t),o8r=r(_qe," (XLM model)"),_qe.forEach(t),r8r=i(me),xE=n(me,"LI",{});var bqe=s(xE);q9e=n(bqe,"STRONG",{});var cxt=s(q9e);t8r=r(cxt,"xlm-roberta"),cxt.forEach(t),a8r=r(bqe," \u2014 "),xY=n(bqe,"A",{href:!0});var fxt=s(xY);n8r=r(fxt,"TFXLMRobertaForTokenClassification"),fxt.forEach(t),s8r=r(bqe," (XLM-RoBERTa model)"),bqe.forEach(t),l8r=i(me),$E=n(me,"LI",{});var vqe=s($E);j9e=n(vqe,"STRONG",{});var mxt=s(j9e);i8r=r(mxt,"xlnet"),mxt.forEach(t),d8r=r(vqe," \u2014 "),$Y=n(vqe,"A",{href:!0});var gxt=s($Y);c8r=r(gxt,"TFXLNetForTokenClassification"),gxt.forEach(t),f8r=r(vqe," (XLNet model)"),vqe.forEach(t),me.forEach(t),m8r=i(Vl),T(kE.$$.fragment,Vl),Vl.forEach(t),Ol.forEach(t),vOe=i(f),Sc=n(f,"H2",{class:!0});var yXe=s(Sc);SE=n(yXe,"A",{id:!0,class:!0,href:!0});var hxt=s(SE);D9e=n(hxt,"SPAN",{});var pxt=s(D9e);T(nx.$$.fragment,pxt),pxt.forEach(t),hxt.forEach(t),g8r=i(yXe),G9e=n(yXe,"SPAN",{});var uxt=s(G9e);h8r=r(uxt,"TFAutoModelForQuestionAnswering"),uxt.forEach(t),yXe.forEach(t),FOe=i(f),cr=n(f,"DIV",{class:!0});var Xl=s(cr);T(sx.$$.fragment,Xl),p8r=i(Xl),Rc=n(Xl,"P",{});var cre=s(Rc);u8r=r(cre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),kY=n(cre,"A",{href:!0});var _xt=s(kY);_8r=r(_xt,"from_pretrained()"),_xt.forEach(t),b8r=r(cre," class method or the "),SY=n(cre,"A",{href:!0});var bxt=s(SY);v8r=r(bxt,"from_config()"),bxt.forEach(t),F8r=r(cre,` class
method.`),cre.forEach(t),T8r=i(Xl),lx=n(Xl,"P",{});var xXe=s(lx);M8r=r(xXe,"This class cannot be instantiated directly using "),O9e=n(xXe,"CODE",{});var vxt=s(O9e);E8r=r(vxt,"__init__()"),vxt.forEach(t),C8r=r(xXe," (throws an error)."),xXe.forEach(t),w8r=i(Xl),Gt=n(Xl,"DIV",{class:!0});var Nw=s(Gt);T(ix.$$.fragment,Nw),A8r=i(Nw),V9e=n(Nw,"P",{});var Fxt=s(V9e);L8r=r(Fxt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Fxt.forEach(t),y8r=i(Nw),Pc=n(Nw,"P",{});var fre=s(Pc);x8r=r(fre,`Note:
Loading a model from its configuration file does `),X9e=n(fre,"STRONG",{});var Txt=s(X9e);$8r=r(Txt,"not"),Txt.forEach(t),k8r=r(fre,` load the model weights. It only affects the
model\u2019s configuration. Use `),RY=n(fre,"A",{href:!0});var Mxt=s(RY);S8r=r(Mxt,"from_pretrained()"),Mxt.forEach(t),R8r=r(fre," to load the model weights."),fre.forEach(t),P8r=i(Nw),T(RE.$$.fragment,Nw),Nw.forEach(t),B8r=i(Xl),qr=n(Xl,"DIV",{class:!0});var zl=s(qr);T(dx.$$.fragment,zl),I8r=i(zl),z9e=n(zl,"P",{});var Ext=s(z9e);N8r=r(Ext,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Ext.forEach(t),q8r=i(zl),un=n(zl,"P",{});var qw=s(un);j8r=r(qw,"The model class to instantiate is selected based on the "),W9e=n(qw,"CODE",{});var Cxt=s(W9e);D8r=r(Cxt,"model_type"),Cxt.forEach(t),G8r=r(qw,` property of the config object (either
passed as an argument or loaded from `),Q9e=n(qw,"CODE",{});var wxt=s(Q9e);O8r=r(wxt,"pretrained_model_name_or_path"),wxt.forEach(t),V8r=r(qw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H9e=n(qw,"CODE",{});var Axt=s(H9e);X8r=r(Axt,"pretrained_model_name_or_path"),Axt.forEach(t),z8r=r(qw,":"),qw.forEach(t),W8r=i(zl),ce=n(zl,"UL",{});var ge=s(ce);PE=n(ge,"LI",{});var Fqe=s(PE);U9e=n(Fqe,"STRONG",{});var Lxt=s(U9e);Q8r=r(Lxt,"albert"),Lxt.forEach(t),H8r=r(Fqe," \u2014 "),PY=n(Fqe,"A",{href:!0});var yxt=s(PY);U8r=r(yxt,"TFAlbertForQuestionAnswering"),yxt.forEach(t),J8r=r(Fqe," (ALBERT model)"),Fqe.forEach(t),Y8r=i(ge),BE=n(ge,"LI",{});var Tqe=s(BE);J9e=n(Tqe,"STRONG",{});var xxt=s(J9e);K8r=r(xxt,"bert"),xxt.forEach(t),Z8r=r(Tqe," \u2014 "),BY=n(Tqe,"A",{href:!0});var $xt=s(BY);exr=r($xt,"TFBertForQuestionAnswering"),$xt.forEach(t),oxr=r(Tqe," (BERT model)"),Tqe.forEach(t),rxr=i(ge),IE=n(ge,"LI",{});var Mqe=s(IE);Y9e=n(Mqe,"STRONG",{});var kxt=s(Y9e);txr=r(kxt,"camembert"),kxt.forEach(t),axr=r(Mqe," \u2014 "),IY=n(Mqe,"A",{href:!0});var Sxt=s(IY);nxr=r(Sxt,"TFCamembertForQuestionAnswering"),Sxt.forEach(t),sxr=r(Mqe," (CamemBERT model)"),Mqe.forEach(t),lxr=i(ge),NE=n(ge,"LI",{});var Eqe=s(NE);K9e=n(Eqe,"STRONG",{});var Rxt=s(K9e);ixr=r(Rxt,"convbert"),Rxt.forEach(t),dxr=r(Eqe," \u2014 "),NY=n(Eqe,"A",{href:!0});var Pxt=s(NY);cxr=r(Pxt,"TFConvBertForQuestionAnswering"),Pxt.forEach(t),fxr=r(Eqe," (ConvBERT model)"),Eqe.forEach(t),mxr=i(ge),qE=n(ge,"LI",{});var Cqe=s(qE);Z9e=n(Cqe,"STRONG",{});var Bxt=s(Z9e);gxr=r(Bxt,"deberta"),Bxt.forEach(t),hxr=r(Cqe," \u2014 "),qY=n(Cqe,"A",{href:!0});var Ixt=s(qY);pxr=r(Ixt,"TFDebertaForQuestionAnswering"),Ixt.forEach(t),uxr=r(Cqe," (DeBERTa model)"),Cqe.forEach(t),_xr=i(ge),jE=n(ge,"LI",{});var wqe=s(jE);eMe=n(wqe,"STRONG",{});var Nxt=s(eMe);bxr=r(Nxt,"deberta-v2"),Nxt.forEach(t),vxr=r(wqe," \u2014 "),jY=n(wqe,"A",{href:!0});var qxt=s(jY);Fxr=r(qxt,"TFDebertaV2ForQuestionAnswering"),qxt.forEach(t),Txr=r(wqe," (DeBERTa-v2 model)"),wqe.forEach(t),Mxr=i(ge),DE=n(ge,"LI",{});var Aqe=s(DE);oMe=n(Aqe,"STRONG",{});var jxt=s(oMe);Exr=r(jxt,"distilbert"),jxt.forEach(t),Cxr=r(Aqe," \u2014 "),DY=n(Aqe,"A",{href:!0});var Dxt=s(DY);wxr=r(Dxt,"TFDistilBertForQuestionAnswering"),Dxt.forEach(t),Axr=r(Aqe," (DistilBERT model)"),Aqe.forEach(t),Lxr=i(ge),GE=n(ge,"LI",{});var Lqe=s(GE);rMe=n(Lqe,"STRONG",{});var Gxt=s(rMe);yxr=r(Gxt,"electra"),Gxt.forEach(t),xxr=r(Lqe," \u2014 "),GY=n(Lqe,"A",{href:!0});var Oxt=s(GY);$xr=r(Oxt,"TFElectraForQuestionAnswering"),Oxt.forEach(t),kxr=r(Lqe," (ELECTRA model)"),Lqe.forEach(t),Sxr=i(ge),OE=n(ge,"LI",{});var yqe=s(OE);tMe=n(yqe,"STRONG",{});var Vxt=s(tMe);Rxr=r(Vxt,"flaubert"),Vxt.forEach(t),Pxr=r(yqe," \u2014 "),OY=n(yqe,"A",{href:!0});var Xxt=s(OY);Bxr=r(Xxt,"TFFlaubertForQuestionAnsweringSimple"),Xxt.forEach(t),Ixr=r(yqe," (FlauBERT model)"),yqe.forEach(t),Nxr=i(ge),VE=n(ge,"LI",{});var xqe=s(VE);aMe=n(xqe,"STRONG",{});var zxt=s(aMe);qxr=r(zxt,"funnel"),zxt.forEach(t),jxr=r(xqe," \u2014 "),VY=n(xqe,"A",{href:!0});var Wxt=s(VY);Dxr=r(Wxt,"TFFunnelForQuestionAnswering"),Wxt.forEach(t),Gxr=r(xqe," (Funnel Transformer model)"),xqe.forEach(t),Oxr=i(ge),XE=n(ge,"LI",{});var $qe=s(XE);nMe=n($qe,"STRONG",{});var Qxt=s(nMe);Vxr=r(Qxt,"gptj"),Qxt.forEach(t),Xxr=r($qe," \u2014 "),XY=n($qe,"A",{href:!0});var Hxt=s(XY);zxr=r(Hxt,"TFGPTJForQuestionAnswering"),Hxt.forEach(t),Wxr=r($qe," (GPT-J model)"),$qe.forEach(t),Qxr=i(ge),zE=n(ge,"LI",{});var kqe=s(zE);sMe=n(kqe,"STRONG",{});var Uxt=s(sMe);Hxr=r(Uxt,"longformer"),Uxt.forEach(t),Uxr=r(kqe," \u2014 "),zY=n(kqe,"A",{href:!0});var Jxt=s(zY);Jxr=r(Jxt,"TFLongformerForQuestionAnswering"),Jxt.forEach(t),Yxr=r(kqe," (Longformer model)"),kqe.forEach(t),Kxr=i(ge),WE=n(ge,"LI",{});var Sqe=s(WE);lMe=n(Sqe,"STRONG",{});var Yxt=s(lMe);Zxr=r(Yxt,"mobilebert"),Yxt.forEach(t),e$r=r(Sqe," \u2014 "),WY=n(Sqe,"A",{href:!0});var Kxt=s(WY);o$r=r(Kxt,"TFMobileBertForQuestionAnswering"),Kxt.forEach(t),r$r=r(Sqe," (MobileBERT model)"),Sqe.forEach(t),t$r=i(ge),QE=n(ge,"LI",{});var Rqe=s(QE);iMe=n(Rqe,"STRONG",{});var Zxt=s(iMe);a$r=r(Zxt,"mpnet"),Zxt.forEach(t),n$r=r(Rqe," \u2014 "),QY=n(Rqe,"A",{href:!0});var e$t=s(QY);s$r=r(e$t,"TFMPNetForQuestionAnswering"),e$t.forEach(t),l$r=r(Rqe," (MPNet model)"),Rqe.forEach(t),i$r=i(ge),HE=n(ge,"LI",{});var Pqe=s(HE);dMe=n(Pqe,"STRONG",{});var o$t=s(dMe);d$r=r(o$t,"rembert"),o$t.forEach(t),c$r=r(Pqe," \u2014 "),HY=n(Pqe,"A",{href:!0});var r$t=s(HY);f$r=r(r$t,"TFRemBertForQuestionAnswering"),r$t.forEach(t),m$r=r(Pqe," (RemBERT model)"),Pqe.forEach(t),g$r=i(ge),UE=n(ge,"LI",{});var Bqe=s(UE);cMe=n(Bqe,"STRONG",{});var t$t=s(cMe);h$r=r(t$t,"roberta"),t$t.forEach(t),p$r=r(Bqe," \u2014 "),UY=n(Bqe,"A",{href:!0});var a$t=s(UY);u$r=r(a$t,"TFRobertaForQuestionAnswering"),a$t.forEach(t),_$r=r(Bqe," (RoBERTa model)"),Bqe.forEach(t),b$r=i(ge),JE=n(ge,"LI",{});var Iqe=s(JE);fMe=n(Iqe,"STRONG",{});var n$t=s(fMe);v$r=r(n$t,"roformer"),n$t.forEach(t),F$r=r(Iqe," \u2014 "),JY=n(Iqe,"A",{href:!0});var s$t=s(JY);T$r=r(s$t,"TFRoFormerForQuestionAnswering"),s$t.forEach(t),M$r=r(Iqe," (RoFormer model)"),Iqe.forEach(t),E$r=i(ge),YE=n(ge,"LI",{});var Nqe=s(YE);mMe=n(Nqe,"STRONG",{});var l$t=s(mMe);C$r=r(l$t,"xlm"),l$t.forEach(t),w$r=r(Nqe," \u2014 "),YY=n(Nqe,"A",{href:!0});var i$t=s(YY);A$r=r(i$t,"TFXLMForQuestionAnsweringSimple"),i$t.forEach(t),L$r=r(Nqe," (XLM model)"),Nqe.forEach(t),y$r=i(ge),KE=n(ge,"LI",{});var qqe=s(KE);gMe=n(qqe,"STRONG",{});var d$t=s(gMe);x$r=r(d$t,"xlm-roberta"),d$t.forEach(t),$$r=r(qqe," \u2014 "),KY=n(qqe,"A",{href:!0});var c$t=s(KY);k$r=r(c$t,"TFXLMRobertaForQuestionAnswering"),c$t.forEach(t),S$r=r(qqe," (XLM-RoBERTa model)"),qqe.forEach(t),R$r=i(ge),ZE=n(ge,"LI",{});var jqe=s(ZE);hMe=n(jqe,"STRONG",{});var f$t=s(hMe);P$r=r(f$t,"xlnet"),f$t.forEach(t),B$r=r(jqe," \u2014 "),ZY=n(jqe,"A",{href:!0});var m$t=s(ZY);I$r=r(m$t,"TFXLNetForQuestionAnsweringSimple"),m$t.forEach(t),N$r=r(jqe," (XLNet model)"),jqe.forEach(t),ge.forEach(t),q$r=i(zl),T(eC.$$.fragment,zl),zl.forEach(t),Xl.forEach(t),TOe=i(f),Bc=n(f,"H2",{class:!0});var $Xe=s(Bc);oC=n($Xe,"A",{id:!0,class:!0,href:!0});var g$t=s(oC);pMe=n(g$t,"SPAN",{});var h$t=s(pMe);T(cx.$$.fragment,h$t),h$t.forEach(t),g$t.forEach(t),j$r=i($Xe),uMe=n($Xe,"SPAN",{});var p$t=s(uMe);D$r=r(p$t,"TFAutoModelForVision2Seq"),p$t.forEach(t),$Xe.forEach(t),MOe=i(f),fr=n(f,"DIV",{class:!0});var Wl=s(fr);T(fx.$$.fragment,Wl),G$r=i(Wl),Ic=n(Wl,"P",{});var mre=s(Ic);O$r=r(mre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),eK=n(mre,"A",{href:!0});var u$t=s(eK);V$r=r(u$t,"from_pretrained()"),u$t.forEach(t),X$r=r(mre," class method or the "),oK=n(mre,"A",{href:!0});var _$t=s(oK);z$r=r(_$t,"from_config()"),_$t.forEach(t),W$r=r(mre,` class
method.`),mre.forEach(t),Q$r=i(Wl),mx=n(Wl,"P",{});var kXe=s(mx);H$r=r(kXe,"This class cannot be instantiated directly using "),_Me=n(kXe,"CODE",{});var b$t=s(_Me);U$r=r(b$t,"__init__()"),b$t.forEach(t),J$r=r(kXe," (throws an error)."),kXe.forEach(t),Y$r=i(Wl),Ot=n(Wl,"DIV",{class:!0});var jw=s(Ot);T(gx.$$.fragment,jw),K$r=i(jw),bMe=n(jw,"P",{});var v$t=s(bMe);Z$r=r(v$t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),v$t.forEach(t),ekr=i(jw),Nc=n(jw,"P",{});var gre=s(Nc);okr=r(gre,`Note:
Loading a model from its configuration file does `),vMe=n(gre,"STRONG",{});var F$t=s(vMe);rkr=r(F$t,"not"),F$t.forEach(t),tkr=r(gre,` load the model weights. It only affects the
model\u2019s configuration. Use `),rK=n(gre,"A",{href:!0});var T$t=s(rK);akr=r(T$t,"from_pretrained()"),T$t.forEach(t),nkr=r(gre," to load the model weights."),gre.forEach(t),skr=i(jw),T(rC.$$.fragment,jw),jw.forEach(t),lkr=i(Wl),jr=n(Wl,"DIV",{class:!0});var Ql=s(jr);T(hx.$$.fragment,Ql),ikr=i(Ql),FMe=n(Ql,"P",{});var M$t=s(FMe);dkr=r(M$t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),M$t.forEach(t),ckr=i(Ql),_n=n(Ql,"P",{});var Dw=s(_n);fkr=r(Dw,"The model class to instantiate is selected based on the "),TMe=n(Dw,"CODE",{});var E$t=s(TMe);mkr=r(E$t,"model_type"),E$t.forEach(t),gkr=r(Dw,` property of the config object (either
passed as an argument or loaded from `),MMe=n(Dw,"CODE",{});var C$t=s(MMe);hkr=r(C$t,"pretrained_model_name_or_path"),C$t.forEach(t),pkr=r(Dw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),EMe=n(Dw,"CODE",{});var w$t=s(EMe);ukr=r(w$t,"pretrained_model_name_or_path"),w$t.forEach(t),_kr=r(Dw,":"),Dw.forEach(t),bkr=i(Ql),CMe=n(Ql,"UL",{});var A$t=s(CMe);tC=n(A$t,"LI",{});var Dqe=s(tC);wMe=n(Dqe,"STRONG",{});var L$t=s(wMe);vkr=r(L$t,"vision-encoder-decoder"),L$t.forEach(t),Fkr=r(Dqe," \u2014 "),tK=n(Dqe,"A",{href:!0});var y$t=s(tK);Tkr=r(y$t,"TFVisionEncoderDecoderModel"),y$t.forEach(t),Mkr=r(Dqe," (Vision Encoder decoder model)"),Dqe.forEach(t),A$t.forEach(t),Ekr=i(Ql),T(aC.$$.fragment,Ql),Ql.forEach(t),Wl.forEach(t),EOe=i(f),qc=n(f,"H2",{class:!0});var SXe=s(qc);nC=n(SXe,"A",{id:!0,class:!0,href:!0});var x$t=s(nC);AMe=n(x$t,"SPAN",{});var $$t=s(AMe);T(px.$$.fragment,$$t),$$t.forEach(t),x$t.forEach(t),Ckr=i(SXe),LMe=n(SXe,"SPAN",{});var k$t=s(LMe);wkr=r(k$t,"TFAutoModelForSpeechSeq2Seq"),k$t.forEach(t),SXe.forEach(t),COe=i(f),mr=n(f,"DIV",{class:!0});var Hl=s(mr);T(ux.$$.fragment,Hl),Akr=i(Hl),jc=n(Hl,"P",{});var hre=s(jc);Lkr=r(hre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),aK=n(hre,"A",{href:!0});var S$t=s(aK);ykr=r(S$t,"from_pretrained()"),S$t.forEach(t),xkr=r(hre," class method or the "),nK=n(hre,"A",{href:!0});var R$t=s(nK);$kr=r(R$t,"from_config()"),R$t.forEach(t),kkr=r(hre,` class
method.`),hre.forEach(t),Skr=i(Hl),_x=n(Hl,"P",{});var RXe=s(_x);Rkr=r(RXe,"This class cannot be instantiated directly using "),yMe=n(RXe,"CODE",{});var P$t=s(yMe);Pkr=r(P$t,"__init__()"),P$t.forEach(t),Bkr=r(RXe," (throws an error)."),RXe.forEach(t),Ikr=i(Hl),Vt=n(Hl,"DIV",{class:!0});var Gw=s(Vt);T(bx.$$.fragment,Gw),Nkr=i(Gw),xMe=n(Gw,"P",{});var B$t=s(xMe);qkr=r(B$t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),B$t.forEach(t),jkr=i(Gw),Dc=n(Gw,"P",{});var pre=s(Dc);Dkr=r(pre,`Note:
Loading a model from its configuration file does `),$Me=n(pre,"STRONG",{});var I$t=s($Me);Gkr=r(I$t,"not"),I$t.forEach(t),Okr=r(pre,` load the model weights. It only affects the
model\u2019s configuration. Use `),sK=n(pre,"A",{href:!0});var N$t=s(sK);Vkr=r(N$t,"from_pretrained()"),N$t.forEach(t),Xkr=r(pre," to load the model weights."),pre.forEach(t),zkr=i(Gw),T(sC.$$.fragment,Gw),Gw.forEach(t),Wkr=i(Hl),Dr=n(Hl,"DIV",{class:!0});var Ul=s(Dr);T(vx.$$.fragment,Ul),Qkr=i(Ul),kMe=n(Ul,"P",{});var q$t=s(kMe);Hkr=r(q$t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),q$t.forEach(t),Ukr=i(Ul),bn=n(Ul,"P",{});var Ow=s(bn);Jkr=r(Ow,"The model class to instantiate is selected based on the "),SMe=n(Ow,"CODE",{});var j$t=s(SMe);Ykr=r(j$t,"model_type"),j$t.forEach(t),Kkr=r(Ow,` property of the config object (either
passed as an argument or loaded from `),RMe=n(Ow,"CODE",{});var D$t=s(RMe);Zkr=r(D$t,"pretrained_model_name_or_path"),D$t.forEach(t),eSr=r(Ow,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PMe=n(Ow,"CODE",{});var G$t=s(PMe);oSr=r(G$t,"pretrained_model_name_or_path"),G$t.forEach(t),rSr=r(Ow,":"),Ow.forEach(t),tSr=i(Ul),BMe=n(Ul,"UL",{});var O$t=s(BMe);lC=n(O$t,"LI",{});var Gqe=s(lC);IMe=n(Gqe,"STRONG",{});var V$t=s(IMe);aSr=r(V$t,"speech_to_text"),V$t.forEach(t),nSr=r(Gqe," \u2014 "),lK=n(Gqe,"A",{href:!0});var X$t=s(lK);sSr=r(X$t,"TFSpeech2TextForConditionalGeneration"),X$t.forEach(t),lSr=r(Gqe," (Speech2Text model)"),Gqe.forEach(t),O$t.forEach(t),iSr=i(Ul),T(iC.$$.fragment,Ul),Ul.forEach(t),Hl.forEach(t),wOe=i(f),Gc=n(f,"H2",{class:!0});var PXe=s(Gc);dC=n(PXe,"A",{id:!0,class:!0,href:!0});var z$t=s(dC);NMe=n(z$t,"SPAN",{});var W$t=s(NMe);T(Fx.$$.fragment,W$t),W$t.forEach(t),z$t.forEach(t),dSr=i(PXe),qMe=n(PXe,"SPAN",{});var Q$t=s(qMe);cSr=r(Q$t,"FlaxAutoModel"),Q$t.forEach(t),PXe.forEach(t),AOe=i(f),gr=n(f,"DIV",{class:!0});var Jl=s(gr);T(Tx.$$.fragment,Jl),fSr=i(Jl),Oc=n(Jl,"P",{});var ure=s(Oc);mSr=r(ure,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),iK=n(ure,"A",{href:!0});var H$t=s(iK);gSr=r(H$t,"from_pretrained()"),H$t.forEach(t),hSr=r(ure," class method or the "),dK=n(ure,"A",{href:!0});var U$t=s(dK);pSr=r(U$t,"from_config()"),U$t.forEach(t),uSr=r(ure,` class
method.`),ure.forEach(t),_Sr=i(Jl),Mx=n(Jl,"P",{});var BXe=s(Mx);bSr=r(BXe,"This class cannot be instantiated directly using "),jMe=n(BXe,"CODE",{});var J$t=s(jMe);vSr=r(J$t,"__init__()"),J$t.forEach(t),FSr=r(BXe," (throws an error)."),BXe.forEach(t),TSr=i(Jl),Xt=n(Jl,"DIV",{class:!0});var Vw=s(Xt);T(Ex.$$.fragment,Vw),MSr=i(Vw),DMe=n(Vw,"P",{});var Y$t=s(DMe);ESr=r(Y$t,"Instantiates one of the base model classes of the library from a configuration."),Y$t.forEach(t),CSr=i(Vw),Vc=n(Vw,"P",{});var _re=s(Vc);wSr=r(_re,`Note:
Loading a model from its configuration file does `),GMe=n(_re,"STRONG",{});var K$t=s(GMe);ASr=r(K$t,"not"),K$t.forEach(t),LSr=r(_re,` load the model weights. It only affects the
model\u2019s configuration. Use `),cK=n(_re,"A",{href:!0});var Z$t=s(cK);ySr=r(Z$t,"from_pretrained()"),Z$t.forEach(t),xSr=r(_re," to load the model weights."),_re.forEach(t),$Sr=i(Vw),T(cC.$$.fragment,Vw),Vw.forEach(t),kSr=i(Jl),Gr=n(Jl,"DIV",{class:!0});var Yl=s(Gr);T(Cx.$$.fragment,Yl),SSr=i(Yl),OMe=n(Yl,"P",{});var ekt=s(OMe);RSr=r(ekt,"Instantiate one of the base model classes of the library from a pretrained model."),ekt.forEach(t),PSr=i(Yl),vn=n(Yl,"P",{});var Xw=s(vn);BSr=r(Xw,"The model class to instantiate is selected based on the "),VMe=n(Xw,"CODE",{});var okt=s(VMe);ISr=r(okt,"model_type"),okt.forEach(t),NSr=r(Xw,` property of the config object (either
passed as an argument or loaded from `),XMe=n(Xw,"CODE",{});var rkt=s(XMe);qSr=r(rkt,"pretrained_model_name_or_path"),rkt.forEach(t),jSr=r(Xw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zMe=n(Xw,"CODE",{});var tkt=s(zMe);DSr=r(tkt,"pretrained_model_name_or_path"),tkt.forEach(t),GSr=r(Xw,":"),Xw.forEach(t),OSr=i(Yl),oe=n(Yl,"UL",{});var ae=s(oe);fC=n(ae,"LI",{});var Oqe=s(fC);WMe=n(Oqe,"STRONG",{});var akt=s(WMe);VSr=r(akt,"albert"),akt.forEach(t),XSr=r(Oqe," \u2014 "),fK=n(Oqe,"A",{href:!0});var nkt=s(fK);zSr=r(nkt,"FlaxAlbertModel"),nkt.forEach(t),WSr=r(Oqe," (ALBERT model)"),Oqe.forEach(t),QSr=i(ae),mC=n(ae,"LI",{});var Vqe=s(mC);QMe=n(Vqe,"STRONG",{});var skt=s(QMe);HSr=r(skt,"bart"),skt.forEach(t),USr=r(Vqe," \u2014 "),mK=n(Vqe,"A",{href:!0});var lkt=s(mK);JSr=r(lkt,"FlaxBartModel"),lkt.forEach(t),YSr=r(Vqe," (BART model)"),Vqe.forEach(t),KSr=i(ae),gC=n(ae,"LI",{});var Xqe=s(gC);HMe=n(Xqe,"STRONG",{});var ikt=s(HMe);ZSr=r(ikt,"beit"),ikt.forEach(t),eRr=r(Xqe," \u2014 "),gK=n(Xqe,"A",{href:!0});var dkt=s(gK);oRr=r(dkt,"FlaxBeitModel"),dkt.forEach(t),rRr=r(Xqe," (BEiT model)"),Xqe.forEach(t),tRr=i(ae),hC=n(ae,"LI",{});var zqe=s(hC);UMe=n(zqe,"STRONG",{});var ckt=s(UMe);aRr=r(ckt,"bert"),ckt.forEach(t),nRr=r(zqe," \u2014 "),hK=n(zqe,"A",{href:!0});var fkt=s(hK);sRr=r(fkt,"FlaxBertModel"),fkt.forEach(t),lRr=r(zqe," (BERT model)"),zqe.forEach(t),iRr=i(ae),pC=n(ae,"LI",{});var Wqe=s(pC);JMe=n(Wqe,"STRONG",{});var mkt=s(JMe);dRr=r(mkt,"big_bird"),mkt.forEach(t),cRr=r(Wqe," \u2014 "),pK=n(Wqe,"A",{href:!0});var gkt=s(pK);fRr=r(gkt,"FlaxBigBirdModel"),gkt.forEach(t),mRr=r(Wqe," (BigBird model)"),Wqe.forEach(t),gRr=i(ae),uC=n(ae,"LI",{});var Qqe=s(uC);YMe=n(Qqe,"STRONG",{});var hkt=s(YMe);hRr=r(hkt,"blenderbot"),hkt.forEach(t),pRr=r(Qqe," \u2014 "),uK=n(Qqe,"A",{href:!0});var pkt=s(uK);uRr=r(pkt,"FlaxBlenderbotModel"),pkt.forEach(t),_Rr=r(Qqe," (Blenderbot model)"),Qqe.forEach(t),bRr=i(ae),_C=n(ae,"LI",{});var Hqe=s(_C);KMe=n(Hqe,"STRONG",{});var ukt=s(KMe);vRr=r(ukt,"blenderbot-small"),ukt.forEach(t),FRr=r(Hqe," \u2014 "),_K=n(Hqe,"A",{href:!0});var _kt=s(_K);TRr=r(_kt,"FlaxBlenderbotSmallModel"),_kt.forEach(t),MRr=r(Hqe," (BlenderbotSmall model)"),Hqe.forEach(t),ERr=i(ae),bC=n(ae,"LI",{});var Uqe=s(bC);ZMe=n(Uqe,"STRONG",{});var bkt=s(ZMe);CRr=r(bkt,"clip"),bkt.forEach(t),wRr=r(Uqe," \u2014 "),bK=n(Uqe,"A",{href:!0});var vkt=s(bK);ARr=r(vkt,"FlaxCLIPModel"),vkt.forEach(t),LRr=r(Uqe," (CLIP model)"),Uqe.forEach(t),yRr=i(ae),vC=n(ae,"LI",{});var Jqe=s(vC);e4e=n(Jqe,"STRONG",{});var Fkt=s(e4e);xRr=r(Fkt,"distilbert"),Fkt.forEach(t),$Rr=r(Jqe," \u2014 "),vK=n(Jqe,"A",{href:!0});var Tkt=s(vK);kRr=r(Tkt,"FlaxDistilBertModel"),Tkt.forEach(t),SRr=r(Jqe," (DistilBERT model)"),Jqe.forEach(t),RRr=i(ae),FC=n(ae,"LI",{});var Yqe=s(FC);o4e=n(Yqe,"STRONG",{});var Mkt=s(o4e);PRr=r(Mkt,"electra"),Mkt.forEach(t),BRr=r(Yqe," \u2014 "),FK=n(Yqe,"A",{href:!0});var Ekt=s(FK);IRr=r(Ekt,"FlaxElectraModel"),Ekt.forEach(t),NRr=r(Yqe," (ELECTRA model)"),Yqe.forEach(t),qRr=i(ae),TC=n(ae,"LI",{});var Kqe=s(TC);r4e=n(Kqe,"STRONG",{});var Ckt=s(r4e);jRr=r(Ckt,"gpt2"),Ckt.forEach(t),DRr=r(Kqe," \u2014 "),TK=n(Kqe,"A",{href:!0});var wkt=s(TK);GRr=r(wkt,"FlaxGPT2Model"),wkt.forEach(t),ORr=r(Kqe," (OpenAI GPT-2 model)"),Kqe.forEach(t),VRr=i(ae),MC=n(ae,"LI",{});var Zqe=s(MC);t4e=n(Zqe,"STRONG",{});var Akt=s(t4e);XRr=r(Akt,"gpt_neo"),Akt.forEach(t),zRr=r(Zqe," \u2014 "),MK=n(Zqe,"A",{href:!0});var Lkt=s(MK);WRr=r(Lkt,"FlaxGPTNeoModel"),Lkt.forEach(t),QRr=r(Zqe," (GPT Neo model)"),Zqe.forEach(t),HRr=i(ae),EC=n(ae,"LI",{});var eje=s(EC);a4e=n(eje,"STRONG",{});var ykt=s(a4e);URr=r(ykt,"gptj"),ykt.forEach(t),JRr=r(eje," \u2014 "),EK=n(eje,"A",{href:!0});var xkt=s(EK);YRr=r(xkt,"FlaxGPTJModel"),xkt.forEach(t),KRr=r(eje," (GPT-J model)"),eje.forEach(t),ZRr=i(ae),CC=n(ae,"LI",{});var oje=s(CC);n4e=n(oje,"STRONG",{});var $kt=s(n4e);ePr=r($kt,"longt5"),$kt.forEach(t),oPr=r(oje," \u2014 "),CK=n(oje,"A",{href:!0});var kkt=s(CK);rPr=r(kkt,"FlaxLongT5Model"),kkt.forEach(t),tPr=r(oje," (LongT5 model)"),oje.forEach(t),aPr=i(ae),wC=n(ae,"LI",{});var rje=s(wC);s4e=n(rje,"STRONG",{});var Skt=s(s4e);nPr=r(Skt,"marian"),Skt.forEach(t),sPr=r(rje," \u2014 "),wK=n(rje,"A",{href:!0});var Rkt=s(wK);lPr=r(Rkt,"FlaxMarianModel"),Rkt.forEach(t),iPr=r(rje," (Marian model)"),rje.forEach(t),dPr=i(ae),AC=n(ae,"LI",{});var tje=s(AC);l4e=n(tje,"STRONG",{});var Pkt=s(l4e);cPr=r(Pkt,"mbart"),Pkt.forEach(t),fPr=r(tje," \u2014 "),AK=n(tje,"A",{href:!0});var Bkt=s(AK);mPr=r(Bkt,"FlaxMBartModel"),Bkt.forEach(t),gPr=r(tje," (mBART model)"),tje.forEach(t),hPr=i(ae),LC=n(ae,"LI",{});var aje=s(LC);i4e=n(aje,"STRONG",{});var Ikt=s(i4e);pPr=r(Ikt,"mt5"),Ikt.forEach(t),uPr=r(aje," \u2014 "),LK=n(aje,"A",{href:!0});var Nkt=s(LK);_Pr=r(Nkt,"FlaxMT5Model"),Nkt.forEach(t),bPr=r(aje," (MT5 model)"),aje.forEach(t),vPr=i(ae),yC=n(ae,"LI",{});var nje=s(yC);d4e=n(nje,"STRONG",{});var qkt=s(d4e);FPr=r(qkt,"opt"),qkt.forEach(t),TPr=r(nje," \u2014 "),yK=n(nje,"A",{href:!0});var jkt=s(yK);MPr=r(jkt,"FlaxOPTModel"),jkt.forEach(t),EPr=r(nje," (OPT model)"),nje.forEach(t),CPr=i(ae),xC=n(ae,"LI",{});var sje=s(xC);c4e=n(sje,"STRONG",{});var Dkt=s(c4e);wPr=r(Dkt,"pegasus"),Dkt.forEach(t),APr=r(sje," \u2014 "),xK=n(sje,"A",{href:!0});var Gkt=s(xK);LPr=r(Gkt,"FlaxPegasusModel"),Gkt.forEach(t),yPr=r(sje," (Pegasus model)"),sje.forEach(t),xPr=i(ae),$C=n(ae,"LI",{});var lje=s($C);f4e=n(lje,"STRONG",{});var Okt=s(f4e);$Pr=r(Okt,"roberta"),Okt.forEach(t),kPr=r(lje," \u2014 "),$K=n(lje,"A",{href:!0});var Vkt=s($K);SPr=r(Vkt,"FlaxRobertaModel"),Vkt.forEach(t),RPr=r(lje," (RoBERTa model)"),lje.forEach(t),PPr=i(ae),kC=n(ae,"LI",{});var ije=s(kC);m4e=n(ije,"STRONG",{});var Xkt=s(m4e);BPr=r(Xkt,"roformer"),Xkt.forEach(t),IPr=r(ije," \u2014 "),kK=n(ije,"A",{href:!0});var zkt=s(kK);NPr=r(zkt,"FlaxRoFormerModel"),zkt.forEach(t),qPr=r(ije," (RoFormer model)"),ije.forEach(t),jPr=i(ae),SC=n(ae,"LI",{});var dje=s(SC);g4e=n(dje,"STRONG",{});var Wkt=s(g4e);DPr=r(Wkt,"t5"),Wkt.forEach(t),GPr=r(dje," \u2014 "),SK=n(dje,"A",{href:!0});var Qkt=s(SK);OPr=r(Qkt,"FlaxT5Model"),Qkt.forEach(t),VPr=r(dje," (T5 model)"),dje.forEach(t),XPr=i(ae),RC=n(ae,"LI",{});var cje=s(RC);h4e=n(cje,"STRONG",{});var Hkt=s(h4e);zPr=r(Hkt,"vision-text-dual-encoder"),Hkt.forEach(t),WPr=r(cje," \u2014 "),RK=n(cje,"A",{href:!0});var Ukt=s(RK);QPr=r(Ukt,"FlaxVisionTextDualEncoderModel"),Ukt.forEach(t),HPr=r(cje," (VisionTextDualEncoder model)"),cje.forEach(t),UPr=i(ae),PC=n(ae,"LI",{});var fje=s(PC);p4e=n(fje,"STRONG",{});var Jkt=s(p4e);JPr=r(Jkt,"vit"),Jkt.forEach(t),YPr=r(fje," \u2014 "),PK=n(fje,"A",{href:!0});var Ykt=s(PK);KPr=r(Ykt,"FlaxViTModel"),Ykt.forEach(t),ZPr=r(fje," (ViT model)"),fje.forEach(t),eBr=i(ae),BC=n(ae,"LI",{});var mje=s(BC);u4e=n(mje,"STRONG",{});var Kkt=s(u4e);oBr=r(Kkt,"wav2vec2"),Kkt.forEach(t),rBr=r(mje," \u2014 "),BK=n(mje,"A",{href:!0});var Zkt=s(BK);tBr=r(Zkt,"FlaxWav2Vec2Model"),Zkt.forEach(t),aBr=r(mje," (Wav2Vec2 model)"),mje.forEach(t),nBr=i(ae),IC=n(ae,"LI",{});var gje=s(IC);_4e=n(gje,"STRONG",{});var eSt=s(_4e);sBr=r(eSt,"xglm"),eSt.forEach(t),lBr=r(gje," \u2014 "),IK=n(gje,"A",{href:!0});var oSt=s(IK);iBr=r(oSt,"FlaxXGLMModel"),oSt.forEach(t),dBr=r(gje," (XGLM model)"),gje.forEach(t),cBr=i(ae),NC=n(ae,"LI",{});var hje=s(NC);b4e=n(hje,"STRONG",{});var rSt=s(b4e);fBr=r(rSt,"xlm-roberta"),rSt.forEach(t),mBr=r(hje," \u2014 "),NK=n(hje,"A",{href:!0});var tSt=s(NK);gBr=r(tSt,"FlaxXLMRobertaModel"),tSt.forEach(t),hBr=r(hje," (XLM-RoBERTa model)"),hje.forEach(t),ae.forEach(t),pBr=i(Yl),T(qC.$$.fragment,Yl),Yl.forEach(t),Jl.forEach(t),LOe=i(f),Xc=n(f,"H2",{class:!0});var IXe=s(Xc);jC=n(IXe,"A",{id:!0,class:!0,href:!0});var aSt=s(jC);v4e=n(aSt,"SPAN",{});var nSt=s(v4e);T(wx.$$.fragment,nSt),nSt.forEach(t),aSt.forEach(t),uBr=i(IXe),F4e=n(IXe,"SPAN",{});var sSt=s(F4e);_Br=r(sSt,"FlaxAutoModelForCausalLM"),sSt.forEach(t),IXe.forEach(t),yOe=i(f),hr=n(f,"DIV",{class:!0});var Kl=s(hr);T(Ax.$$.fragment,Kl),bBr=i(Kl),zc=n(Kl,"P",{});var bre=s(zc);vBr=r(bre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),qK=n(bre,"A",{href:!0});var lSt=s(qK);FBr=r(lSt,"from_pretrained()"),lSt.forEach(t),TBr=r(bre," class method or the "),jK=n(bre,"A",{href:!0});var iSt=s(jK);MBr=r(iSt,"from_config()"),iSt.forEach(t),EBr=r(bre,` class
method.`),bre.forEach(t),CBr=i(Kl),Lx=n(Kl,"P",{});var NXe=s(Lx);wBr=r(NXe,"This class cannot be instantiated directly using "),T4e=n(NXe,"CODE",{});var dSt=s(T4e);ABr=r(dSt,"__init__()"),dSt.forEach(t),LBr=r(NXe," (throws an error)."),NXe.forEach(t),yBr=i(Kl),zt=n(Kl,"DIV",{class:!0});var zw=s(zt);T(yx.$$.fragment,zw),xBr=i(zw),M4e=n(zw,"P",{});var cSt=s(M4e);$Br=r(cSt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),cSt.forEach(t),kBr=i(zw),Wc=n(zw,"P",{});var vre=s(Wc);SBr=r(vre,`Note:
Loading a model from its configuration file does `),E4e=n(vre,"STRONG",{});var fSt=s(E4e);RBr=r(fSt,"not"),fSt.forEach(t),PBr=r(vre,` load the model weights. It only affects the
model\u2019s configuration. Use `),DK=n(vre,"A",{href:!0});var mSt=s(DK);BBr=r(mSt,"from_pretrained()"),mSt.forEach(t),IBr=r(vre," to load the model weights."),vre.forEach(t),NBr=i(zw),T(DC.$$.fragment,zw),zw.forEach(t),qBr=i(Kl),Or=n(Kl,"DIV",{class:!0});var Zl=s(Or);T(xx.$$.fragment,Zl),jBr=i(Zl),C4e=n(Zl,"P",{});var gSt=s(C4e);DBr=r(gSt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),gSt.forEach(t),GBr=i(Zl),Fn=n(Zl,"P",{});var Ww=s(Fn);OBr=r(Ww,"The model class to instantiate is selected based on the "),w4e=n(Ww,"CODE",{});var hSt=s(w4e);VBr=r(hSt,"model_type"),hSt.forEach(t),XBr=r(Ww,` property of the config object (either
passed as an argument or loaded from `),A4e=n(Ww,"CODE",{});var pSt=s(A4e);zBr=r(pSt,"pretrained_model_name_or_path"),pSt.forEach(t),WBr=r(Ww,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L4e=n(Ww,"CODE",{});var uSt=s(L4e);QBr=r(uSt,"pretrained_model_name_or_path"),uSt.forEach(t),HBr=r(Ww,":"),Ww.forEach(t),UBr=i(Zl),xe=n(Zl,"UL",{});var Ne=s(xe);GC=n(Ne,"LI",{});var pje=s(GC);y4e=n(pje,"STRONG",{});var _St=s(y4e);JBr=r(_St,"bart"),_St.forEach(t),YBr=r(pje," \u2014 "),GK=n(pje,"A",{href:!0});var bSt=s(GK);KBr=r(bSt,"FlaxBartForCausalLM"),bSt.forEach(t),ZBr=r(pje," (BART model)"),pje.forEach(t),eIr=i(Ne),OC=n(Ne,"LI",{});var uje=s(OC);x4e=n(uje,"STRONG",{});var vSt=s(x4e);oIr=r(vSt,"bert"),vSt.forEach(t),rIr=r(uje," \u2014 "),OK=n(uje,"A",{href:!0});var FSt=s(OK);tIr=r(FSt,"FlaxBertForCausalLM"),FSt.forEach(t),aIr=r(uje," (BERT model)"),uje.forEach(t),nIr=i(Ne),VC=n(Ne,"LI",{});var _je=s(VC);$4e=n(_je,"STRONG",{});var TSt=s($4e);sIr=r(TSt,"big_bird"),TSt.forEach(t),lIr=r(_je," \u2014 "),VK=n(_je,"A",{href:!0});var MSt=s(VK);iIr=r(MSt,"FlaxBigBirdForCausalLM"),MSt.forEach(t),dIr=r(_je," (BigBird model)"),_je.forEach(t),cIr=i(Ne),XC=n(Ne,"LI",{});var bje=s(XC);k4e=n(bje,"STRONG",{});var ESt=s(k4e);fIr=r(ESt,"electra"),ESt.forEach(t),mIr=r(bje," \u2014 "),XK=n(bje,"A",{href:!0});var CSt=s(XK);gIr=r(CSt,"FlaxElectraForCausalLM"),CSt.forEach(t),hIr=r(bje," (ELECTRA model)"),bje.forEach(t),pIr=i(Ne),zC=n(Ne,"LI",{});var vje=s(zC);S4e=n(vje,"STRONG",{});var wSt=s(S4e);uIr=r(wSt,"gpt2"),wSt.forEach(t),_Ir=r(vje," \u2014 "),zK=n(vje,"A",{href:!0});var ASt=s(zK);bIr=r(ASt,"FlaxGPT2LMHeadModel"),ASt.forEach(t),vIr=r(vje," (OpenAI GPT-2 model)"),vje.forEach(t),FIr=i(Ne),WC=n(Ne,"LI",{});var Fje=s(WC);R4e=n(Fje,"STRONG",{});var LSt=s(R4e);TIr=r(LSt,"gpt_neo"),LSt.forEach(t),MIr=r(Fje," \u2014 "),WK=n(Fje,"A",{href:!0});var ySt=s(WK);EIr=r(ySt,"FlaxGPTNeoForCausalLM"),ySt.forEach(t),CIr=r(Fje," (GPT Neo model)"),Fje.forEach(t),wIr=i(Ne),QC=n(Ne,"LI",{});var Tje=s(QC);P4e=n(Tje,"STRONG",{});var xSt=s(P4e);AIr=r(xSt,"gptj"),xSt.forEach(t),LIr=r(Tje," \u2014 "),QK=n(Tje,"A",{href:!0});var $St=s(QK);yIr=r($St,"FlaxGPTJForCausalLM"),$St.forEach(t),xIr=r(Tje," (GPT-J model)"),Tje.forEach(t),$Ir=i(Ne),HC=n(Ne,"LI",{});var Mje=s(HC);B4e=n(Mje,"STRONG",{});var kSt=s(B4e);kIr=r(kSt,"opt"),kSt.forEach(t),SIr=r(Mje," \u2014 "),HK=n(Mje,"A",{href:!0});var SSt=s(HK);RIr=r(SSt,"FlaxOPTForCausalLM"),SSt.forEach(t),PIr=r(Mje," (OPT model)"),Mje.forEach(t),BIr=i(Ne),UC=n(Ne,"LI",{});var Eje=s(UC);I4e=n(Eje,"STRONG",{});var RSt=s(I4e);IIr=r(RSt,"roberta"),RSt.forEach(t),NIr=r(Eje," \u2014 "),UK=n(Eje,"A",{href:!0});var PSt=s(UK);qIr=r(PSt,"FlaxRobertaForCausalLM"),PSt.forEach(t),jIr=r(Eje," (RoBERTa model)"),Eje.forEach(t),DIr=i(Ne),JC=n(Ne,"LI",{});var Cje=s(JC);N4e=n(Cje,"STRONG",{});var BSt=s(N4e);GIr=r(BSt,"xglm"),BSt.forEach(t),OIr=r(Cje," \u2014 "),JK=n(Cje,"A",{href:!0});var ISt=s(JK);VIr=r(ISt,"FlaxXGLMForCausalLM"),ISt.forEach(t),XIr=r(Cje," (XGLM model)"),Cje.forEach(t),Ne.forEach(t),zIr=i(Zl),T(YC.$$.fragment,Zl),Zl.forEach(t),Kl.forEach(t),xOe=i(f),Qc=n(f,"H2",{class:!0});var qXe=s(Qc);KC=n(qXe,"A",{id:!0,class:!0,href:!0});var NSt=s(KC);q4e=n(NSt,"SPAN",{});var qSt=s(q4e);T($x.$$.fragment,qSt),qSt.forEach(t),NSt.forEach(t),WIr=i(qXe),j4e=n(qXe,"SPAN",{});var jSt=s(j4e);QIr=r(jSt,"FlaxAutoModelForPreTraining"),jSt.forEach(t),qXe.forEach(t),$Oe=i(f),pr=n(f,"DIV",{class:!0});var ei=s(pr);T(kx.$$.fragment,ei),HIr=i(ei),Hc=n(ei,"P",{});var Fre=s(Hc);UIr=r(Fre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),YK=n(Fre,"A",{href:!0});var DSt=s(YK);JIr=r(DSt,"from_pretrained()"),DSt.forEach(t),YIr=r(Fre," class method or the "),KK=n(Fre,"A",{href:!0});var GSt=s(KK);KIr=r(GSt,"from_config()"),GSt.forEach(t),ZIr=r(Fre,` class
method.`),Fre.forEach(t),eNr=i(ei),Sx=n(ei,"P",{});var jXe=s(Sx);oNr=r(jXe,"This class cannot be instantiated directly using "),D4e=n(jXe,"CODE",{});var OSt=s(D4e);rNr=r(OSt,"__init__()"),OSt.forEach(t),tNr=r(jXe," (throws an error)."),jXe.forEach(t),aNr=i(ei),Wt=n(ei,"DIV",{class:!0});var Qw=s(Wt);T(Rx.$$.fragment,Qw),nNr=i(Qw),G4e=n(Qw,"P",{});var VSt=s(G4e);sNr=r(VSt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),VSt.forEach(t),lNr=i(Qw),Uc=n(Qw,"P",{});var Tre=s(Uc);iNr=r(Tre,`Note:
Loading a model from its configuration file does `),O4e=n(Tre,"STRONG",{});var XSt=s(O4e);dNr=r(XSt,"not"),XSt.forEach(t),cNr=r(Tre,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZK=n(Tre,"A",{href:!0});var zSt=s(ZK);fNr=r(zSt,"from_pretrained()"),zSt.forEach(t),mNr=r(Tre," to load the model weights."),Tre.forEach(t),gNr=i(Qw),T(ZC.$$.fragment,Qw),Qw.forEach(t),hNr=i(ei),Vr=n(ei,"DIV",{class:!0});var oi=s(Vr);T(Px.$$.fragment,oi),pNr=i(oi),V4e=n(oi,"P",{});var WSt=s(V4e);uNr=r(WSt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),WSt.forEach(t),_Nr=i(oi),Tn=n(oi,"P",{});var Hw=s(Tn);bNr=r(Hw,"The model class to instantiate is selected based on the "),X4e=n(Hw,"CODE",{});var QSt=s(X4e);vNr=r(QSt,"model_type"),QSt.forEach(t),FNr=r(Hw,` property of the config object (either
passed as an argument or loaded from `),z4e=n(Hw,"CODE",{});var HSt=s(z4e);TNr=r(HSt,"pretrained_model_name_or_path"),HSt.forEach(t),MNr=r(Hw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W4e=n(Hw,"CODE",{});var USt=s(W4e);ENr=r(USt,"pretrained_model_name_or_path"),USt.forEach(t),CNr=r(Hw,":"),Hw.forEach(t),wNr=i(oi),Ee=n(oi,"UL",{});var we=s(Ee);e5=n(we,"LI",{});var wje=s(e5);Q4e=n(wje,"STRONG",{});var JSt=s(Q4e);ANr=r(JSt,"albert"),JSt.forEach(t),LNr=r(wje," \u2014 "),eZ=n(wje,"A",{href:!0});var YSt=s(eZ);yNr=r(YSt,"FlaxAlbertForPreTraining"),YSt.forEach(t),xNr=r(wje," (ALBERT model)"),wje.forEach(t),$Nr=i(we),o5=n(we,"LI",{});var Aje=s(o5);H4e=n(Aje,"STRONG",{});var KSt=s(H4e);kNr=r(KSt,"bart"),KSt.forEach(t),SNr=r(Aje," \u2014 "),oZ=n(Aje,"A",{href:!0});var ZSt=s(oZ);RNr=r(ZSt,"FlaxBartForConditionalGeneration"),ZSt.forEach(t),PNr=r(Aje," (BART model)"),Aje.forEach(t),BNr=i(we),r5=n(we,"LI",{});var Lje=s(r5);U4e=n(Lje,"STRONG",{});var eRt=s(U4e);INr=r(eRt,"bert"),eRt.forEach(t),NNr=r(Lje," \u2014 "),rZ=n(Lje,"A",{href:!0});var oRt=s(rZ);qNr=r(oRt,"FlaxBertForPreTraining"),oRt.forEach(t),jNr=r(Lje," (BERT model)"),Lje.forEach(t),DNr=i(we),t5=n(we,"LI",{});var yje=s(t5);J4e=n(yje,"STRONG",{});var rRt=s(J4e);GNr=r(rRt,"big_bird"),rRt.forEach(t),ONr=r(yje," \u2014 "),tZ=n(yje,"A",{href:!0});var tRt=s(tZ);VNr=r(tRt,"FlaxBigBirdForPreTraining"),tRt.forEach(t),XNr=r(yje," (BigBird model)"),yje.forEach(t),zNr=i(we),a5=n(we,"LI",{});var xje=s(a5);Y4e=n(xje,"STRONG",{});var aRt=s(Y4e);WNr=r(aRt,"electra"),aRt.forEach(t),QNr=r(xje," \u2014 "),aZ=n(xje,"A",{href:!0});var nRt=s(aZ);HNr=r(nRt,"FlaxElectraForPreTraining"),nRt.forEach(t),UNr=r(xje," (ELECTRA model)"),xje.forEach(t),JNr=i(we),n5=n(we,"LI",{});var $je=s(n5);K4e=n($je,"STRONG",{});var sRt=s(K4e);YNr=r(sRt,"longt5"),sRt.forEach(t),KNr=r($je," \u2014 "),nZ=n($je,"A",{href:!0});var lRt=s(nZ);ZNr=r(lRt,"FlaxLongT5ForConditionalGeneration"),lRt.forEach(t),eqr=r($je," (LongT5 model)"),$je.forEach(t),oqr=i(we),s5=n(we,"LI",{});var kje=s(s5);Z4e=n(kje,"STRONG",{});var iRt=s(Z4e);rqr=r(iRt,"mbart"),iRt.forEach(t),tqr=r(kje," \u2014 "),sZ=n(kje,"A",{href:!0});var dRt=s(sZ);aqr=r(dRt,"FlaxMBartForConditionalGeneration"),dRt.forEach(t),nqr=r(kje," (mBART model)"),kje.forEach(t),sqr=i(we),l5=n(we,"LI",{});var Sje=s(l5);eEe=n(Sje,"STRONG",{});var cRt=s(eEe);lqr=r(cRt,"mt5"),cRt.forEach(t),iqr=r(Sje," \u2014 "),lZ=n(Sje,"A",{href:!0});var fRt=s(lZ);dqr=r(fRt,"FlaxMT5ForConditionalGeneration"),fRt.forEach(t),cqr=r(Sje," (MT5 model)"),Sje.forEach(t),fqr=i(we),i5=n(we,"LI",{});var Rje=s(i5);oEe=n(Rje,"STRONG",{});var mRt=s(oEe);mqr=r(mRt,"roberta"),mRt.forEach(t),gqr=r(Rje," \u2014 "),iZ=n(Rje,"A",{href:!0});var gRt=s(iZ);hqr=r(gRt,"FlaxRobertaForMaskedLM"),gRt.forEach(t),pqr=r(Rje," (RoBERTa model)"),Rje.forEach(t),uqr=i(we),d5=n(we,"LI",{});var Pje=s(d5);rEe=n(Pje,"STRONG",{});var hRt=s(rEe);_qr=r(hRt,"roformer"),hRt.forEach(t),bqr=r(Pje," \u2014 "),dZ=n(Pje,"A",{href:!0});var pRt=s(dZ);vqr=r(pRt,"FlaxRoFormerForMaskedLM"),pRt.forEach(t),Fqr=r(Pje," (RoFormer model)"),Pje.forEach(t),Tqr=i(we),c5=n(we,"LI",{});var Bje=s(c5);tEe=n(Bje,"STRONG",{});var uRt=s(tEe);Mqr=r(uRt,"t5"),uRt.forEach(t),Eqr=r(Bje," \u2014 "),cZ=n(Bje,"A",{href:!0});var _Rt=s(cZ);Cqr=r(_Rt,"FlaxT5ForConditionalGeneration"),_Rt.forEach(t),wqr=r(Bje," (T5 model)"),Bje.forEach(t),Aqr=i(we),f5=n(we,"LI",{});var Ije=s(f5);aEe=n(Ije,"STRONG",{});var bRt=s(aEe);Lqr=r(bRt,"wav2vec2"),bRt.forEach(t),yqr=r(Ije," \u2014 "),fZ=n(Ije,"A",{href:!0});var vRt=s(fZ);xqr=r(vRt,"FlaxWav2Vec2ForPreTraining"),vRt.forEach(t),$qr=r(Ije," (Wav2Vec2 model)"),Ije.forEach(t),kqr=i(we),m5=n(we,"LI",{});var Nje=s(m5);nEe=n(Nje,"STRONG",{});var FRt=s(nEe);Sqr=r(FRt,"xlm-roberta"),FRt.forEach(t),Rqr=r(Nje," \u2014 "),mZ=n(Nje,"A",{href:!0});var TRt=s(mZ);Pqr=r(TRt,"FlaxXLMRobertaForMaskedLM"),TRt.forEach(t),Bqr=r(Nje," (XLM-RoBERTa model)"),Nje.forEach(t),we.forEach(t),Iqr=i(oi),T(g5.$$.fragment,oi),oi.forEach(t),ei.forEach(t),kOe=i(f),Jc=n(f,"H2",{class:!0});var DXe=s(Jc);h5=n(DXe,"A",{id:!0,class:!0,href:!0});var MRt=s(h5);sEe=n(MRt,"SPAN",{});var ERt=s(sEe);T(Bx.$$.fragment,ERt),ERt.forEach(t),MRt.forEach(t),Nqr=i(DXe),lEe=n(DXe,"SPAN",{});var CRt=s(lEe);qqr=r(CRt,"FlaxAutoModelForMaskedLM"),CRt.forEach(t),DXe.forEach(t),SOe=i(f),ur=n(f,"DIV",{class:!0});var ri=s(ur);T(Ix.$$.fragment,ri),jqr=i(ri),Yc=n(ri,"P",{});var Mre=s(Yc);Dqr=r(Mre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),gZ=n(Mre,"A",{href:!0});var wRt=s(gZ);Gqr=r(wRt,"from_pretrained()"),wRt.forEach(t),Oqr=r(Mre," class method or the "),hZ=n(Mre,"A",{href:!0});var ARt=s(hZ);Vqr=r(ARt,"from_config()"),ARt.forEach(t),Xqr=r(Mre,` class
method.`),Mre.forEach(t),zqr=i(ri),Nx=n(ri,"P",{});var GXe=s(Nx);Wqr=r(GXe,"This class cannot be instantiated directly using "),iEe=n(GXe,"CODE",{});var LRt=s(iEe);Qqr=r(LRt,"__init__()"),LRt.forEach(t),Hqr=r(GXe," (throws an error)."),GXe.forEach(t),Uqr=i(ri),Qt=n(ri,"DIV",{class:!0});var Uw=s(Qt);T(qx.$$.fragment,Uw),Jqr=i(Uw),dEe=n(Uw,"P",{});var yRt=s(dEe);Yqr=r(yRt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),yRt.forEach(t),Kqr=i(Uw),Kc=n(Uw,"P",{});var Ere=s(Kc);Zqr=r(Ere,`Note:
Loading a model from its configuration file does `),cEe=n(Ere,"STRONG",{});var xRt=s(cEe);ejr=r(xRt,"not"),xRt.forEach(t),ojr=r(Ere,` load the model weights. It only affects the
model\u2019s configuration. Use `),pZ=n(Ere,"A",{href:!0});var $Rt=s(pZ);rjr=r($Rt,"from_pretrained()"),$Rt.forEach(t),tjr=r(Ere," to load the model weights."),Ere.forEach(t),ajr=i(Uw),T(p5.$$.fragment,Uw),Uw.forEach(t),njr=i(ri),Xr=n(ri,"DIV",{class:!0});var ti=s(Xr);T(jx.$$.fragment,ti),sjr=i(ti),fEe=n(ti,"P",{});var kRt=s(fEe);ljr=r(kRt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),kRt.forEach(t),ijr=i(ti),Mn=n(ti,"P",{});var Jw=s(Mn);djr=r(Jw,"The model class to instantiate is selected based on the "),mEe=n(Jw,"CODE",{});var SRt=s(mEe);cjr=r(SRt,"model_type"),SRt.forEach(t),fjr=r(Jw,` property of the config object (either
passed as an argument or loaded from `),gEe=n(Jw,"CODE",{});var RRt=s(gEe);mjr=r(RRt,"pretrained_model_name_or_path"),RRt.forEach(t),gjr=r(Jw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hEe=n(Jw,"CODE",{});var PRt=s(hEe);hjr=r(PRt,"pretrained_model_name_or_path"),PRt.forEach(t),pjr=r(Jw,":"),Jw.forEach(t),ujr=i(ti),$e=n(ti,"UL",{});var qe=s($e);u5=n(qe,"LI",{});var qje=s(u5);pEe=n(qje,"STRONG",{});var BRt=s(pEe);_jr=r(BRt,"albert"),BRt.forEach(t),bjr=r(qje," \u2014 "),uZ=n(qje,"A",{href:!0});var IRt=s(uZ);vjr=r(IRt,"FlaxAlbertForMaskedLM"),IRt.forEach(t),Fjr=r(qje," (ALBERT model)"),qje.forEach(t),Tjr=i(qe),_5=n(qe,"LI",{});var jje=s(_5);uEe=n(jje,"STRONG",{});var NRt=s(uEe);Mjr=r(NRt,"bart"),NRt.forEach(t),Ejr=r(jje," \u2014 "),_Z=n(jje,"A",{href:!0});var qRt=s(_Z);Cjr=r(qRt,"FlaxBartForConditionalGeneration"),qRt.forEach(t),wjr=r(jje," (BART model)"),jje.forEach(t),Ajr=i(qe),b5=n(qe,"LI",{});var Dje=s(b5);_Ee=n(Dje,"STRONG",{});var jRt=s(_Ee);Ljr=r(jRt,"bert"),jRt.forEach(t),yjr=r(Dje," \u2014 "),bZ=n(Dje,"A",{href:!0});var DRt=s(bZ);xjr=r(DRt,"FlaxBertForMaskedLM"),DRt.forEach(t),$jr=r(Dje," (BERT model)"),Dje.forEach(t),kjr=i(qe),v5=n(qe,"LI",{});var Gje=s(v5);bEe=n(Gje,"STRONG",{});var GRt=s(bEe);Sjr=r(GRt,"big_bird"),GRt.forEach(t),Rjr=r(Gje," \u2014 "),vZ=n(Gje,"A",{href:!0});var ORt=s(vZ);Pjr=r(ORt,"FlaxBigBirdForMaskedLM"),ORt.forEach(t),Bjr=r(Gje," (BigBird model)"),Gje.forEach(t),Ijr=i(qe),F5=n(qe,"LI",{});var Oje=s(F5);vEe=n(Oje,"STRONG",{});var VRt=s(vEe);Njr=r(VRt,"distilbert"),VRt.forEach(t),qjr=r(Oje," \u2014 "),FZ=n(Oje,"A",{href:!0});var XRt=s(FZ);jjr=r(XRt,"FlaxDistilBertForMaskedLM"),XRt.forEach(t),Djr=r(Oje," (DistilBERT model)"),Oje.forEach(t),Gjr=i(qe),T5=n(qe,"LI",{});var Vje=s(T5);FEe=n(Vje,"STRONG",{});var zRt=s(FEe);Ojr=r(zRt,"electra"),zRt.forEach(t),Vjr=r(Vje," \u2014 "),TZ=n(Vje,"A",{href:!0});var WRt=s(TZ);Xjr=r(WRt,"FlaxElectraForMaskedLM"),WRt.forEach(t),zjr=r(Vje," (ELECTRA model)"),Vje.forEach(t),Wjr=i(qe),M5=n(qe,"LI",{});var Xje=s(M5);TEe=n(Xje,"STRONG",{});var QRt=s(TEe);Qjr=r(QRt,"mbart"),QRt.forEach(t),Hjr=r(Xje," \u2014 "),MZ=n(Xje,"A",{href:!0});var HRt=s(MZ);Ujr=r(HRt,"FlaxMBartForConditionalGeneration"),HRt.forEach(t),Jjr=r(Xje," (mBART model)"),Xje.forEach(t),Yjr=i(qe),E5=n(qe,"LI",{});var zje=s(E5);MEe=n(zje,"STRONG",{});var URt=s(MEe);Kjr=r(URt,"roberta"),URt.forEach(t),Zjr=r(zje," \u2014 "),EZ=n(zje,"A",{href:!0});var JRt=s(EZ);eDr=r(JRt,"FlaxRobertaForMaskedLM"),JRt.forEach(t),oDr=r(zje," (RoBERTa model)"),zje.forEach(t),rDr=i(qe),C5=n(qe,"LI",{});var Wje=s(C5);EEe=n(Wje,"STRONG",{});var YRt=s(EEe);tDr=r(YRt,"roformer"),YRt.forEach(t),aDr=r(Wje," \u2014 "),CZ=n(Wje,"A",{href:!0});var KRt=s(CZ);nDr=r(KRt,"FlaxRoFormerForMaskedLM"),KRt.forEach(t),sDr=r(Wje," (RoFormer model)"),Wje.forEach(t),lDr=i(qe),w5=n(qe,"LI",{});var Qje=s(w5);CEe=n(Qje,"STRONG",{});var ZRt=s(CEe);iDr=r(ZRt,"xlm-roberta"),ZRt.forEach(t),dDr=r(Qje," \u2014 "),wZ=n(Qje,"A",{href:!0});var ePt=s(wZ);cDr=r(ePt,"FlaxXLMRobertaForMaskedLM"),ePt.forEach(t),fDr=r(Qje," (XLM-RoBERTa model)"),Qje.forEach(t),qe.forEach(t),mDr=i(ti),T(A5.$$.fragment,ti),ti.forEach(t),ri.forEach(t),ROe=i(f),Zc=n(f,"H2",{class:!0});var OXe=s(Zc);L5=n(OXe,"A",{id:!0,class:!0,href:!0});var oPt=s(L5);wEe=n(oPt,"SPAN",{});var rPt=s(wEe);T(Dx.$$.fragment,rPt),rPt.forEach(t),oPt.forEach(t),gDr=i(OXe),AEe=n(OXe,"SPAN",{});var tPt=s(AEe);hDr=r(tPt,"FlaxAutoModelForSeq2SeqLM"),tPt.forEach(t),OXe.forEach(t),POe=i(f),_r=n(f,"DIV",{class:!0});var ai=s(_r);T(Gx.$$.fragment,ai),pDr=i(ai),ef=n(ai,"P",{});var Cre=s(ef);uDr=r(Cre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),AZ=n(Cre,"A",{href:!0});var aPt=s(AZ);_Dr=r(aPt,"from_pretrained()"),aPt.forEach(t),bDr=r(Cre," class method or the "),LZ=n(Cre,"A",{href:!0});var nPt=s(LZ);vDr=r(nPt,"from_config()"),nPt.forEach(t),FDr=r(Cre,` class
method.`),Cre.forEach(t),TDr=i(ai),Ox=n(ai,"P",{});var VXe=s(Ox);MDr=r(VXe,"This class cannot be instantiated directly using "),LEe=n(VXe,"CODE",{});var sPt=s(LEe);EDr=r(sPt,"__init__()"),sPt.forEach(t),CDr=r(VXe," (throws an error)."),VXe.forEach(t),wDr=i(ai),Ht=n(ai,"DIV",{class:!0});var Yw=s(Ht);T(Vx.$$.fragment,Yw),ADr=i(Yw),yEe=n(Yw,"P",{});var lPt=s(yEe);LDr=r(lPt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),lPt.forEach(t),yDr=i(Yw),of=n(Yw,"P",{});var wre=s(of);xDr=r(wre,`Note:
Loading a model from its configuration file does `),xEe=n(wre,"STRONG",{});var iPt=s(xEe);$Dr=r(iPt,"not"),iPt.forEach(t),kDr=r(wre,` load the model weights. It only affects the
model\u2019s configuration. Use `),yZ=n(wre,"A",{href:!0});var dPt=s(yZ);SDr=r(dPt,"from_pretrained()"),dPt.forEach(t),RDr=r(wre," to load the model weights."),wre.forEach(t),PDr=i(Yw),T(y5.$$.fragment,Yw),Yw.forEach(t),BDr=i(ai),zr=n(ai,"DIV",{class:!0});var ni=s(zr);T(Xx.$$.fragment,ni),IDr=i(ni),$Ee=n(ni,"P",{});var cPt=s($Ee);NDr=r(cPt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),cPt.forEach(t),qDr=i(ni),En=n(ni,"P",{});var Kw=s(En);jDr=r(Kw,"The model class to instantiate is selected based on the "),kEe=n(Kw,"CODE",{});var fPt=s(kEe);DDr=r(fPt,"model_type"),fPt.forEach(t),GDr=r(Kw,` property of the config object (either
passed as an argument or loaded from `),SEe=n(Kw,"CODE",{});var mPt=s(SEe);ODr=r(mPt,"pretrained_model_name_or_path"),mPt.forEach(t),VDr=r(Kw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),REe=n(Kw,"CODE",{});var gPt=s(REe);XDr=r(gPt,"pretrained_model_name_or_path"),gPt.forEach(t),zDr=r(Kw,":"),Kw.forEach(t),WDr=i(ni),ke=n(ni,"UL",{});var je=s(ke);x5=n(je,"LI",{});var Hje=s(x5);PEe=n(Hje,"STRONG",{});var hPt=s(PEe);QDr=r(hPt,"bart"),hPt.forEach(t),HDr=r(Hje," \u2014 "),xZ=n(Hje,"A",{href:!0});var pPt=s(xZ);UDr=r(pPt,"FlaxBartForConditionalGeneration"),pPt.forEach(t),JDr=r(Hje," (BART model)"),Hje.forEach(t),YDr=i(je),$5=n(je,"LI",{});var Uje=s($5);BEe=n(Uje,"STRONG",{});var uPt=s(BEe);KDr=r(uPt,"blenderbot"),uPt.forEach(t),ZDr=r(Uje," \u2014 "),$Z=n(Uje,"A",{href:!0});var _Pt=s($Z);eGr=r(_Pt,"FlaxBlenderbotForConditionalGeneration"),_Pt.forEach(t),oGr=r(Uje," (Blenderbot model)"),Uje.forEach(t),rGr=i(je),k5=n(je,"LI",{});var Jje=s(k5);IEe=n(Jje,"STRONG",{});var bPt=s(IEe);tGr=r(bPt,"blenderbot-small"),bPt.forEach(t),aGr=r(Jje," \u2014 "),kZ=n(Jje,"A",{href:!0});var vPt=s(kZ);nGr=r(vPt,"FlaxBlenderbotSmallForConditionalGeneration"),vPt.forEach(t),sGr=r(Jje," (BlenderbotSmall model)"),Jje.forEach(t),lGr=i(je),S5=n(je,"LI",{});var Yje=s(S5);NEe=n(Yje,"STRONG",{});var FPt=s(NEe);iGr=r(FPt,"encoder-decoder"),FPt.forEach(t),dGr=r(Yje," \u2014 "),SZ=n(Yje,"A",{href:!0});var TPt=s(SZ);cGr=r(TPt,"FlaxEncoderDecoderModel"),TPt.forEach(t),fGr=r(Yje," (Encoder decoder model)"),Yje.forEach(t),mGr=i(je),R5=n(je,"LI",{});var Kje=s(R5);qEe=n(Kje,"STRONG",{});var MPt=s(qEe);gGr=r(MPt,"longt5"),MPt.forEach(t),hGr=r(Kje," \u2014 "),RZ=n(Kje,"A",{href:!0});var EPt=s(RZ);pGr=r(EPt,"FlaxLongT5ForConditionalGeneration"),EPt.forEach(t),uGr=r(Kje," (LongT5 model)"),Kje.forEach(t),_Gr=i(je),P5=n(je,"LI",{});var Zje=s(P5);jEe=n(Zje,"STRONG",{});var CPt=s(jEe);bGr=r(CPt,"marian"),CPt.forEach(t),vGr=r(Zje," \u2014 "),PZ=n(Zje,"A",{href:!0});var wPt=s(PZ);FGr=r(wPt,"FlaxMarianMTModel"),wPt.forEach(t),TGr=r(Zje," (Marian model)"),Zje.forEach(t),MGr=i(je),B5=n(je,"LI",{});var eDe=s(B5);DEe=n(eDe,"STRONG",{});var APt=s(DEe);EGr=r(APt,"mbart"),APt.forEach(t),CGr=r(eDe," \u2014 "),BZ=n(eDe,"A",{href:!0});var LPt=s(BZ);wGr=r(LPt,"FlaxMBartForConditionalGeneration"),LPt.forEach(t),AGr=r(eDe," (mBART model)"),eDe.forEach(t),LGr=i(je),I5=n(je,"LI",{});var oDe=s(I5);GEe=n(oDe,"STRONG",{});var yPt=s(GEe);yGr=r(yPt,"mt5"),yPt.forEach(t),xGr=r(oDe," \u2014 "),IZ=n(oDe,"A",{href:!0});var xPt=s(IZ);$Gr=r(xPt,"FlaxMT5ForConditionalGeneration"),xPt.forEach(t),kGr=r(oDe," (MT5 model)"),oDe.forEach(t),SGr=i(je),N5=n(je,"LI",{});var rDe=s(N5);OEe=n(rDe,"STRONG",{});var $Pt=s(OEe);RGr=r($Pt,"pegasus"),$Pt.forEach(t),PGr=r(rDe," \u2014 "),NZ=n(rDe,"A",{href:!0});var kPt=s(NZ);BGr=r(kPt,"FlaxPegasusForConditionalGeneration"),kPt.forEach(t),IGr=r(rDe," (Pegasus model)"),rDe.forEach(t),NGr=i(je),q5=n(je,"LI",{});var tDe=s(q5);VEe=n(tDe,"STRONG",{});var SPt=s(VEe);qGr=r(SPt,"t5"),SPt.forEach(t),jGr=r(tDe," \u2014 "),qZ=n(tDe,"A",{href:!0});var RPt=s(qZ);DGr=r(RPt,"FlaxT5ForConditionalGeneration"),RPt.forEach(t),GGr=r(tDe," (T5 model)"),tDe.forEach(t),je.forEach(t),OGr=i(ni),T(j5.$$.fragment,ni),ni.forEach(t),ai.forEach(t),BOe=i(f),rf=n(f,"H2",{class:!0});var XXe=s(rf);D5=n(XXe,"A",{id:!0,class:!0,href:!0});var PPt=s(D5);XEe=n(PPt,"SPAN",{});var BPt=s(XEe);T(zx.$$.fragment,BPt),BPt.forEach(t),PPt.forEach(t),VGr=i(XXe),zEe=n(XXe,"SPAN",{});var IPt=s(zEe);XGr=r(IPt,"FlaxAutoModelForSequenceClassification"),IPt.forEach(t),XXe.forEach(t),IOe=i(f),br=n(f,"DIV",{class:!0});var si=s(br);T(Wx.$$.fragment,si),zGr=i(si),tf=n(si,"P",{});var Are=s(tf);WGr=r(Are,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),jZ=n(Are,"A",{href:!0});var NPt=s(jZ);QGr=r(NPt,"from_pretrained()"),NPt.forEach(t),HGr=r(Are," class method or the "),DZ=n(Are,"A",{href:!0});var qPt=s(DZ);UGr=r(qPt,"from_config()"),qPt.forEach(t),JGr=r(Are,` class
method.`),Are.forEach(t),YGr=i(si),Qx=n(si,"P",{});var zXe=s(Qx);KGr=r(zXe,"This class cannot be instantiated directly using "),WEe=n(zXe,"CODE",{});var jPt=s(WEe);ZGr=r(jPt,"__init__()"),jPt.forEach(t),eOr=r(zXe," (throws an error)."),zXe.forEach(t),oOr=i(si),Ut=n(si,"DIV",{class:!0});var Zw=s(Ut);T(Hx.$$.fragment,Zw),rOr=i(Zw),QEe=n(Zw,"P",{});var DPt=s(QEe);tOr=r(DPt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),DPt.forEach(t),aOr=i(Zw),af=n(Zw,"P",{});var Lre=s(af);nOr=r(Lre,`Note:
Loading a model from its configuration file does `),HEe=n(Lre,"STRONG",{});var GPt=s(HEe);sOr=r(GPt,"not"),GPt.forEach(t),lOr=r(Lre,` load the model weights. It only affects the
model\u2019s configuration. Use `),GZ=n(Lre,"A",{href:!0});var OPt=s(GZ);iOr=r(OPt,"from_pretrained()"),OPt.forEach(t),dOr=r(Lre," to load the model weights."),Lre.forEach(t),cOr=i(Zw),T(G5.$$.fragment,Zw),Zw.forEach(t),fOr=i(si),Wr=n(si,"DIV",{class:!0});var li=s(Wr);T(Ux.$$.fragment,li),mOr=i(li),UEe=n(li,"P",{});var VPt=s(UEe);gOr=r(VPt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),VPt.forEach(t),hOr=i(li),Cn=n(li,"P",{});var eA=s(Cn);pOr=r(eA,"The model class to instantiate is selected based on the "),JEe=n(eA,"CODE",{});var XPt=s(JEe);uOr=r(XPt,"model_type"),XPt.forEach(t),_Or=r(eA,` property of the config object (either
passed as an argument or loaded from `),YEe=n(eA,"CODE",{});var zPt=s(YEe);bOr=r(zPt,"pretrained_model_name_or_path"),zPt.forEach(t),vOr=r(eA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),KEe=n(eA,"CODE",{});var WPt=s(KEe);FOr=r(WPt,"pretrained_model_name_or_path"),WPt.forEach(t),TOr=r(eA,":"),eA.forEach(t),MOr=i(li),Se=n(li,"UL",{});var De=s(Se);O5=n(De,"LI",{});var aDe=s(O5);ZEe=n(aDe,"STRONG",{});var QPt=s(ZEe);EOr=r(QPt,"albert"),QPt.forEach(t),COr=r(aDe," \u2014 "),OZ=n(aDe,"A",{href:!0});var HPt=s(OZ);wOr=r(HPt,"FlaxAlbertForSequenceClassification"),HPt.forEach(t),AOr=r(aDe," (ALBERT model)"),aDe.forEach(t),LOr=i(De),V5=n(De,"LI",{});var nDe=s(V5);eCe=n(nDe,"STRONG",{});var UPt=s(eCe);yOr=r(UPt,"bart"),UPt.forEach(t),xOr=r(nDe," \u2014 "),VZ=n(nDe,"A",{href:!0});var JPt=s(VZ);$Or=r(JPt,"FlaxBartForSequenceClassification"),JPt.forEach(t),kOr=r(nDe," (BART model)"),nDe.forEach(t),SOr=i(De),X5=n(De,"LI",{});var sDe=s(X5);oCe=n(sDe,"STRONG",{});var YPt=s(oCe);ROr=r(YPt,"bert"),YPt.forEach(t),POr=r(sDe," \u2014 "),XZ=n(sDe,"A",{href:!0});var KPt=s(XZ);BOr=r(KPt,"FlaxBertForSequenceClassification"),KPt.forEach(t),IOr=r(sDe," (BERT model)"),sDe.forEach(t),NOr=i(De),z5=n(De,"LI",{});var lDe=s(z5);rCe=n(lDe,"STRONG",{});var ZPt=s(rCe);qOr=r(ZPt,"big_bird"),ZPt.forEach(t),jOr=r(lDe," \u2014 "),zZ=n(lDe,"A",{href:!0});var eBt=s(zZ);DOr=r(eBt,"FlaxBigBirdForSequenceClassification"),eBt.forEach(t),GOr=r(lDe," (BigBird model)"),lDe.forEach(t),OOr=i(De),W5=n(De,"LI",{});var iDe=s(W5);tCe=n(iDe,"STRONG",{});var oBt=s(tCe);VOr=r(oBt,"distilbert"),oBt.forEach(t),XOr=r(iDe," \u2014 "),WZ=n(iDe,"A",{href:!0});var rBt=s(WZ);zOr=r(rBt,"FlaxDistilBertForSequenceClassification"),rBt.forEach(t),WOr=r(iDe," (DistilBERT model)"),iDe.forEach(t),QOr=i(De),Q5=n(De,"LI",{});var dDe=s(Q5);aCe=n(dDe,"STRONG",{});var tBt=s(aCe);HOr=r(tBt,"electra"),tBt.forEach(t),UOr=r(dDe," \u2014 "),QZ=n(dDe,"A",{href:!0});var aBt=s(QZ);JOr=r(aBt,"FlaxElectraForSequenceClassification"),aBt.forEach(t),YOr=r(dDe," (ELECTRA model)"),dDe.forEach(t),KOr=i(De),H5=n(De,"LI",{});var cDe=s(H5);nCe=n(cDe,"STRONG",{});var nBt=s(nCe);ZOr=r(nBt,"mbart"),nBt.forEach(t),eVr=r(cDe," \u2014 "),HZ=n(cDe,"A",{href:!0});var sBt=s(HZ);oVr=r(sBt,"FlaxMBartForSequenceClassification"),sBt.forEach(t),rVr=r(cDe," (mBART model)"),cDe.forEach(t),tVr=i(De),U5=n(De,"LI",{});var fDe=s(U5);sCe=n(fDe,"STRONG",{});var lBt=s(sCe);aVr=r(lBt,"roberta"),lBt.forEach(t),nVr=r(fDe," \u2014 "),UZ=n(fDe,"A",{href:!0});var iBt=s(UZ);sVr=r(iBt,"FlaxRobertaForSequenceClassification"),iBt.forEach(t),lVr=r(fDe," (RoBERTa model)"),fDe.forEach(t),iVr=i(De),J5=n(De,"LI",{});var mDe=s(J5);lCe=n(mDe,"STRONG",{});var dBt=s(lCe);dVr=r(dBt,"roformer"),dBt.forEach(t),cVr=r(mDe," \u2014 "),JZ=n(mDe,"A",{href:!0});var cBt=s(JZ);fVr=r(cBt,"FlaxRoFormerForSequenceClassification"),cBt.forEach(t),mVr=r(mDe," (RoFormer model)"),mDe.forEach(t),gVr=i(De),Y5=n(De,"LI",{});var gDe=s(Y5);iCe=n(gDe,"STRONG",{});var fBt=s(iCe);hVr=r(fBt,"xlm-roberta"),fBt.forEach(t),pVr=r(gDe," \u2014 "),YZ=n(gDe,"A",{href:!0});var mBt=s(YZ);uVr=r(mBt,"FlaxXLMRobertaForSequenceClassification"),mBt.forEach(t),_Vr=r(gDe," (XLM-RoBERTa model)"),gDe.forEach(t),De.forEach(t),bVr=i(li),T(K5.$$.fragment,li),li.forEach(t),si.forEach(t),NOe=i(f),nf=n(f,"H2",{class:!0});var WXe=s(nf);Z5=n(WXe,"A",{id:!0,class:!0,href:!0});var gBt=s(Z5);dCe=n(gBt,"SPAN",{});var hBt=s(dCe);T(Jx.$$.fragment,hBt),hBt.forEach(t),gBt.forEach(t),vVr=i(WXe),cCe=n(WXe,"SPAN",{});var pBt=s(cCe);FVr=r(pBt,"FlaxAutoModelForQuestionAnswering"),pBt.forEach(t),WXe.forEach(t),qOe=i(f),vr=n(f,"DIV",{class:!0});var ii=s(vr);T(Yx.$$.fragment,ii),TVr=i(ii),sf=n(ii,"P",{});var yre=s(sf);MVr=r(yre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),KZ=n(yre,"A",{href:!0});var uBt=s(KZ);EVr=r(uBt,"from_pretrained()"),uBt.forEach(t),CVr=r(yre," class method or the "),ZZ=n(yre,"A",{href:!0});var _Bt=s(ZZ);wVr=r(_Bt,"from_config()"),_Bt.forEach(t),AVr=r(yre,` class
method.`),yre.forEach(t),LVr=i(ii),Kx=n(ii,"P",{});var QXe=s(Kx);yVr=r(QXe,"This class cannot be instantiated directly using "),fCe=n(QXe,"CODE",{});var bBt=s(fCe);xVr=r(bBt,"__init__()"),bBt.forEach(t),$Vr=r(QXe," (throws an error)."),QXe.forEach(t),kVr=i(ii),Jt=n(ii,"DIV",{class:!0});var oA=s(Jt);T(Zx.$$.fragment,oA),SVr=i(oA),mCe=n(oA,"P",{});var vBt=s(mCe);RVr=r(vBt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),vBt.forEach(t),PVr=i(oA),lf=n(oA,"P",{});var xre=s(lf);BVr=r(xre,`Note:
Loading a model from its configuration file does `),gCe=n(xre,"STRONG",{});var FBt=s(gCe);IVr=r(FBt,"not"),FBt.forEach(t),NVr=r(xre,` load the model weights. It only affects the
model\u2019s configuration. Use `),eee=n(xre,"A",{href:!0});var TBt=s(eee);qVr=r(TBt,"from_pretrained()"),TBt.forEach(t),jVr=r(xre," to load the model weights."),xre.forEach(t),DVr=i(oA),T(e3.$$.fragment,oA),oA.forEach(t),GVr=i(ii),Qr=n(ii,"DIV",{class:!0});var di=s(Qr);T(e$.$$.fragment,di),OVr=i(di),hCe=n(di,"P",{});var MBt=s(hCe);VVr=r(MBt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),MBt.forEach(t),XVr=i(di),wn=n(di,"P",{});var rA=s(wn);zVr=r(rA,"The model class to instantiate is selected based on the "),pCe=n(rA,"CODE",{});var EBt=s(pCe);WVr=r(EBt,"model_type"),EBt.forEach(t),QVr=r(rA,` property of the config object (either
passed as an argument or loaded from `),uCe=n(rA,"CODE",{});var CBt=s(uCe);HVr=r(CBt,"pretrained_model_name_or_path"),CBt.forEach(t),UVr=r(rA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_Ce=n(rA,"CODE",{});var wBt=s(_Ce);JVr=r(wBt,"pretrained_model_name_or_path"),wBt.forEach(t),YVr=r(rA,":"),rA.forEach(t),KVr=i(di),Re=n(di,"UL",{});var Ge=s(Re);o3=n(Ge,"LI",{});var hDe=s(o3);bCe=n(hDe,"STRONG",{});var ABt=s(bCe);ZVr=r(ABt,"albert"),ABt.forEach(t),eXr=r(hDe," \u2014 "),oee=n(hDe,"A",{href:!0});var LBt=s(oee);oXr=r(LBt,"FlaxAlbertForQuestionAnswering"),LBt.forEach(t),rXr=r(hDe," (ALBERT model)"),hDe.forEach(t),tXr=i(Ge),r3=n(Ge,"LI",{});var pDe=s(r3);vCe=n(pDe,"STRONG",{});var yBt=s(vCe);aXr=r(yBt,"bart"),yBt.forEach(t),nXr=r(pDe," \u2014 "),ree=n(pDe,"A",{href:!0});var xBt=s(ree);sXr=r(xBt,"FlaxBartForQuestionAnswering"),xBt.forEach(t),lXr=r(pDe," (BART model)"),pDe.forEach(t),iXr=i(Ge),t3=n(Ge,"LI",{});var uDe=s(t3);FCe=n(uDe,"STRONG",{});var $Bt=s(FCe);dXr=r($Bt,"bert"),$Bt.forEach(t),cXr=r(uDe," \u2014 "),tee=n(uDe,"A",{href:!0});var kBt=s(tee);fXr=r(kBt,"FlaxBertForQuestionAnswering"),kBt.forEach(t),mXr=r(uDe," (BERT model)"),uDe.forEach(t),gXr=i(Ge),a3=n(Ge,"LI",{});var _De=s(a3);TCe=n(_De,"STRONG",{});var SBt=s(TCe);hXr=r(SBt,"big_bird"),SBt.forEach(t),pXr=r(_De," \u2014 "),aee=n(_De,"A",{href:!0});var RBt=s(aee);uXr=r(RBt,"FlaxBigBirdForQuestionAnswering"),RBt.forEach(t),_Xr=r(_De," (BigBird model)"),_De.forEach(t),bXr=i(Ge),n3=n(Ge,"LI",{});var bDe=s(n3);MCe=n(bDe,"STRONG",{});var PBt=s(MCe);vXr=r(PBt,"distilbert"),PBt.forEach(t),FXr=r(bDe," \u2014 "),nee=n(bDe,"A",{href:!0});var BBt=s(nee);TXr=r(BBt,"FlaxDistilBertForQuestionAnswering"),BBt.forEach(t),MXr=r(bDe," (DistilBERT model)"),bDe.forEach(t),EXr=i(Ge),s3=n(Ge,"LI",{});var vDe=s(s3);ECe=n(vDe,"STRONG",{});var IBt=s(ECe);CXr=r(IBt,"electra"),IBt.forEach(t),wXr=r(vDe," \u2014 "),see=n(vDe,"A",{href:!0});var NBt=s(see);AXr=r(NBt,"FlaxElectraForQuestionAnswering"),NBt.forEach(t),LXr=r(vDe," (ELECTRA model)"),vDe.forEach(t),yXr=i(Ge),l3=n(Ge,"LI",{});var FDe=s(l3);CCe=n(FDe,"STRONG",{});var qBt=s(CCe);xXr=r(qBt,"mbart"),qBt.forEach(t),$Xr=r(FDe," \u2014 "),lee=n(FDe,"A",{href:!0});var jBt=s(lee);kXr=r(jBt,"FlaxMBartForQuestionAnswering"),jBt.forEach(t),SXr=r(FDe," (mBART model)"),FDe.forEach(t),RXr=i(Ge),i3=n(Ge,"LI",{});var TDe=s(i3);wCe=n(TDe,"STRONG",{});var DBt=s(wCe);PXr=r(DBt,"roberta"),DBt.forEach(t),BXr=r(TDe," \u2014 "),iee=n(TDe,"A",{href:!0});var GBt=s(iee);IXr=r(GBt,"FlaxRobertaForQuestionAnswering"),GBt.forEach(t),NXr=r(TDe," (RoBERTa model)"),TDe.forEach(t),qXr=i(Ge),d3=n(Ge,"LI",{});var MDe=s(d3);ACe=n(MDe,"STRONG",{});var OBt=s(ACe);jXr=r(OBt,"roformer"),OBt.forEach(t),DXr=r(MDe," \u2014 "),dee=n(MDe,"A",{href:!0});var VBt=s(dee);GXr=r(VBt,"FlaxRoFormerForQuestionAnswering"),VBt.forEach(t),OXr=r(MDe," (RoFormer model)"),MDe.forEach(t),VXr=i(Ge),c3=n(Ge,"LI",{});var EDe=s(c3);LCe=n(EDe,"STRONG",{});var XBt=s(LCe);XXr=r(XBt,"xlm-roberta"),XBt.forEach(t),zXr=r(EDe," \u2014 "),cee=n(EDe,"A",{href:!0});var zBt=s(cee);WXr=r(zBt,"FlaxXLMRobertaForQuestionAnswering"),zBt.forEach(t),QXr=r(EDe," (XLM-RoBERTa model)"),EDe.forEach(t),Ge.forEach(t),HXr=i(di),T(f3.$$.fragment,di),di.forEach(t),ii.forEach(t),jOe=i(f),df=n(f,"H2",{class:!0});var HXe=s(df);m3=n(HXe,"A",{id:!0,class:!0,href:!0});var WBt=s(m3);yCe=n(WBt,"SPAN",{});var QBt=s(yCe);T(o$.$$.fragment,QBt),QBt.forEach(t),WBt.forEach(t),UXr=i(HXe),xCe=n(HXe,"SPAN",{});var HBt=s(xCe);JXr=r(HBt,"FlaxAutoModelForTokenClassification"),HBt.forEach(t),HXe.forEach(t),DOe=i(f),Fr=n(f,"DIV",{class:!0});var ci=s(Fr);T(r$.$$.fragment,ci),YXr=i(ci),cf=n(ci,"P",{});var $re=s(cf);KXr=r($re,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),fee=n($re,"A",{href:!0});var UBt=s(fee);ZXr=r(UBt,"from_pretrained()"),UBt.forEach(t),ezr=r($re," class method or the "),mee=n($re,"A",{href:!0});var JBt=s(mee);ozr=r(JBt,"from_config()"),JBt.forEach(t),rzr=r($re,` class
method.`),$re.forEach(t),tzr=i(ci),t$=n(ci,"P",{});var UXe=s(t$);azr=r(UXe,"This class cannot be instantiated directly using "),$Ce=n(UXe,"CODE",{});var YBt=s($Ce);nzr=r(YBt,"__init__()"),YBt.forEach(t),szr=r(UXe," (throws an error)."),UXe.forEach(t),lzr=i(ci),Yt=n(ci,"DIV",{class:!0});var tA=s(Yt);T(a$.$$.fragment,tA),izr=i(tA),kCe=n(tA,"P",{});var KBt=s(kCe);dzr=r(KBt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),KBt.forEach(t),czr=i(tA),ff=n(tA,"P",{});var kre=s(ff);fzr=r(kre,`Note:
Loading a model from its configuration file does `),SCe=n(kre,"STRONG",{});var ZBt=s(SCe);mzr=r(ZBt,"not"),ZBt.forEach(t),gzr=r(kre,` load the model weights. It only affects the
model\u2019s configuration. Use `),gee=n(kre,"A",{href:!0});var eIt=s(gee);hzr=r(eIt,"from_pretrained()"),eIt.forEach(t),pzr=r(kre," to load the model weights."),kre.forEach(t),uzr=i(tA),T(g3.$$.fragment,tA),tA.forEach(t),_zr=i(ci),Hr=n(ci,"DIV",{class:!0});var fi=s(Hr);T(n$.$$.fragment,fi),bzr=i(fi),RCe=n(fi,"P",{});var oIt=s(RCe);vzr=r(oIt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),oIt.forEach(t),Fzr=i(fi),An=n(fi,"P",{});var aA=s(An);Tzr=r(aA,"The model class to instantiate is selected based on the "),PCe=n(aA,"CODE",{});var rIt=s(PCe);Mzr=r(rIt,"model_type"),rIt.forEach(t),Ezr=r(aA,` property of the config object (either
passed as an argument or loaded from `),BCe=n(aA,"CODE",{});var tIt=s(BCe);Czr=r(tIt,"pretrained_model_name_or_path"),tIt.forEach(t),wzr=r(aA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ICe=n(aA,"CODE",{});var aIt=s(ICe);Azr=r(aIt,"pretrained_model_name_or_path"),aIt.forEach(t),Lzr=r(aA,":"),aA.forEach(t),yzr=i(fi),Ve=n(fi,"UL",{});var To=s(Ve);h3=n(To,"LI",{});var CDe=s(h3);NCe=n(CDe,"STRONG",{});var nIt=s(NCe);xzr=r(nIt,"albert"),nIt.forEach(t),$zr=r(CDe," \u2014 "),hee=n(CDe,"A",{href:!0});var sIt=s(hee);kzr=r(sIt,"FlaxAlbertForTokenClassification"),sIt.forEach(t),Szr=r(CDe," (ALBERT model)"),CDe.forEach(t),Rzr=i(To),p3=n(To,"LI",{});var wDe=s(p3);qCe=n(wDe,"STRONG",{});var lIt=s(qCe);Pzr=r(lIt,"bert"),lIt.forEach(t),Bzr=r(wDe," \u2014 "),pee=n(wDe,"A",{href:!0});var iIt=s(pee);Izr=r(iIt,"FlaxBertForTokenClassification"),iIt.forEach(t),Nzr=r(wDe," (BERT model)"),wDe.forEach(t),qzr=i(To),u3=n(To,"LI",{});var ADe=s(u3);jCe=n(ADe,"STRONG",{});var dIt=s(jCe);jzr=r(dIt,"big_bird"),dIt.forEach(t),Dzr=r(ADe," \u2014 "),uee=n(ADe,"A",{href:!0});var cIt=s(uee);Gzr=r(cIt,"FlaxBigBirdForTokenClassification"),cIt.forEach(t),Ozr=r(ADe," (BigBird model)"),ADe.forEach(t),Vzr=i(To),_3=n(To,"LI",{});var LDe=s(_3);DCe=n(LDe,"STRONG",{});var fIt=s(DCe);Xzr=r(fIt,"distilbert"),fIt.forEach(t),zzr=r(LDe," \u2014 "),_ee=n(LDe,"A",{href:!0});var mIt=s(_ee);Wzr=r(mIt,"FlaxDistilBertForTokenClassification"),mIt.forEach(t),Qzr=r(LDe," (DistilBERT model)"),LDe.forEach(t),Hzr=i(To),b3=n(To,"LI",{});var yDe=s(b3);GCe=n(yDe,"STRONG",{});var gIt=s(GCe);Uzr=r(gIt,"electra"),gIt.forEach(t),Jzr=r(yDe," \u2014 "),bee=n(yDe,"A",{href:!0});var hIt=s(bee);Yzr=r(hIt,"FlaxElectraForTokenClassification"),hIt.forEach(t),Kzr=r(yDe," (ELECTRA model)"),yDe.forEach(t),Zzr=i(To),v3=n(To,"LI",{});var xDe=s(v3);OCe=n(xDe,"STRONG",{});var pIt=s(OCe);eWr=r(pIt,"roberta"),pIt.forEach(t),oWr=r(xDe," \u2014 "),vee=n(xDe,"A",{href:!0});var uIt=s(vee);rWr=r(uIt,"FlaxRobertaForTokenClassification"),uIt.forEach(t),tWr=r(xDe," (RoBERTa model)"),xDe.forEach(t),aWr=i(To),F3=n(To,"LI",{});var $De=s(F3);VCe=n($De,"STRONG",{});var _It=s(VCe);nWr=r(_It,"roformer"),_It.forEach(t),sWr=r($De," \u2014 "),Fee=n($De,"A",{href:!0});var bIt=s(Fee);lWr=r(bIt,"FlaxRoFormerForTokenClassification"),bIt.forEach(t),iWr=r($De," (RoFormer model)"),$De.forEach(t),dWr=i(To),T3=n(To,"LI",{});var kDe=s(T3);XCe=n(kDe,"STRONG",{});var vIt=s(XCe);cWr=r(vIt,"xlm-roberta"),vIt.forEach(t),fWr=r(kDe," \u2014 "),Tee=n(kDe,"A",{href:!0});var FIt=s(Tee);mWr=r(FIt,"FlaxXLMRobertaForTokenClassification"),FIt.forEach(t),gWr=r(kDe," (XLM-RoBERTa model)"),kDe.forEach(t),To.forEach(t),hWr=i(fi),T(M3.$$.fragment,fi),fi.forEach(t),ci.forEach(t),GOe=i(f),mf=n(f,"H2",{class:!0});var JXe=s(mf);E3=n(JXe,"A",{id:!0,class:!0,href:!0});var TIt=s(E3);zCe=n(TIt,"SPAN",{});var MIt=s(zCe);T(s$.$$.fragment,MIt),MIt.forEach(t),TIt.forEach(t),pWr=i(JXe),WCe=n(JXe,"SPAN",{});var EIt=s(WCe);uWr=r(EIt,"FlaxAutoModelForMultipleChoice"),EIt.forEach(t),JXe.forEach(t),OOe=i(f),Tr=n(f,"DIV",{class:!0});var mi=s(Tr);T(l$.$$.fragment,mi),_Wr=i(mi),gf=n(mi,"P",{});var Sre=s(gf);bWr=r(Sre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Mee=n(Sre,"A",{href:!0});var CIt=s(Mee);vWr=r(CIt,"from_pretrained()"),CIt.forEach(t),FWr=r(Sre," class method or the "),Eee=n(Sre,"A",{href:!0});var wIt=s(Eee);TWr=r(wIt,"from_config()"),wIt.forEach(t),MWr=r(Sre,` class
method.`),Sre.forEach(t),EWr=i(mi),i$=n(mi,"P",{});var YXe=s(i$);CWr=r(YXe,"This class cannot be instantiated directly using "),QCe=n(YXe,"CODE",{});var AIt=s(QCe);wWr=r(AIt,"__init__()"),AIt.forEach(t),AWr=r(YXe," (throws an error)."),YXe.forEach(t),LWr=i(mi),Kt=n(mi,"DIV",{class:!0});var nA=s(Kt);T(d$.$$.fragment,nA),yWr=i(nA),HCe=n(nA,"P",{});var LIt=s(HCe);xWr=r(LIt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),LIt.forEach(t),$Wr=i(nA),hf=n(nA,"P",{});var Rre=s(hf);kWr=r(Rre,`Note:
Loading a model from its configuration file does `),UCe=n(Rre,"STRONG",{});var yIt=s(UCe);SWr=r(yIt,"not"),yIt.forEach(t),RWr=r(Rre,` load the model weights. It only affects the
model\u2019s configuration. Use `),Cee=n(Rre,"A",{href:!0});var xIt=s(Cee);PWr=r(xIt,"from_pretrained()"),xIt.forEach(t),BWr=r(Rre," to load the model weights."),Rre.forEach(t),IWr=i(nA),T(C3.$$.fragment,nA),nA.forEach(t),NWr=i(mi),Ur=n(mi,"DIV",{class:!0});var gi=s(Ur);T(c$.$$.fragment,gi),qWr=i(gi),JCe=n(gi,"P",{});var $It=s(JCe);jWr=r($It,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),$It.forEach(t),DWr=i(gi),Ln=n(gi,"P",{});var sA=s(Ln);GWr=r(sA,"The model class to instantiate is selected based on the "),YCe=n(sA,"CODE",{});var kIt=s(YCe);OWr=r(kIt,"model_type"),kIt.forEach(t),VWr=r(sA,` property of the config object (either
passed as an argument or loaded from `),KCe=n(sA,"CODE",{});var SIt=s(KCe);XWr=r(SIt,"pretrained_model_name_or_path"),SIt.forEach(t),zWr=r(sA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ZCe=n(sA,"CODE",{});var RIt=s(ZCe);WWr=r(RIt,"pretrained_model_name_or_path"),RIt.forEach(t),QWr=r(sA,":"),sA.forEach(t),HWr=i(gi),Xe=n(gi,"UL",{});var Mo=s(Xe);w3=n(Mo,"LI",{});var SDe=s(w3);e5e=n(SDe,"STRONG",{});var PIt=s(e5e);UWr=r(PIt,"albert"),PIt.forEach(t),JWr=r(SDe," \u2014 "),wee=n(SDe,"A",{href:!0});var BIt=s(wee);YWr=r(BIt,"FlaxAlbertForMultipleChoice"),BIt.forEach(t),KWr=r(SDe," (ALBERT model)"),SDe.forEach(t),ZWr=i(Mo),A3=n(Mo,"LI",{});var RDe=s(A3);o5e=n(RDe,"STRONG",{});var IIt=s(o5e);eQr=r(IIt,"bert"),IIt.forEach(t),oQr=r(RDe," \u2014 "),Aee=n(RDe,"A",{href:!0});var NIt=s(Aee);rQr=r(NIt,"FlaxBertForMultipleChoice"),NIt.forEach(t),tQr=r(RDe," (BERT model)"),RDe.forEach(t),aQr=i(Mo),L3=n(Mo,"LI",{});var PDe=s(L3);r5e=n(PDe,"STRONG",{});var qIt=s(r5e);nQr=r(qIt,"big_bird"),qIt.forEach(t),sQr=r(PDe," \u2014 "),Lee=n(PDe,"A",{href:!0});var jIt=s(Lee);lQr=r(jIt,"FlaxBigBirdForMultipleChoice"),jIt.forEach(t),iQr=r(PDe," (BigBird model)"),PDe.forEach(t),dQr=i(Mo),y3=n(Mo,"LI",{});var BDe=s(y3);t5e=n(BDe,"STRONG",{});var DIt=s(t5e);cQr=r(DIt,"distilbert"),DIt.forEach(t),fQr=r(BDe," \u2014 "),yee=n(BDe,"A",{href:!0});var GIt=s(yee);mQr=r(GIt,"FlaxDistilBertForMultipleChoice"),GIt.forEach(t),gQr=r(BDe," (DistilBERT model)"),BDe.forEach(t),hQr=i(Mo),x3=n(Mo,"LI",{});var IDe=s(x3);a5e=n(IDe,"STRONG",{});var OIt=s(a5e);pQr=r(OIt,"electra"),OIt.forEach(t),uQr=r(IDe," \u2014 "),xee=n(IDe,"A",{href:!0});var VIt=s(xee);_Qr=r(VIt,"FlaxElectraForMultipleChoice"),VIt.forEach(t),bQr=r(IDe," (ELECTRA model)"),IDe.forEach(t),vQr=i(Mo),$3=n(Mo,"LI",{});var NDe=s($3);n5e=n(NDe,"STRONG",{});var XIt=s(n5e);FQr=r(XIt,"roberta"),XIt.forEach(t),TQr=r(NDe," \u2014 "),$ee=n(NDe,"A",{href:!0});var zIt=s($ee);MQr=r(zIt,"FlaxRobertaForMultipleChoice"),zIt.forEach(t),EQr=r(NDe," (RoBERTa model)"),NDe.forEach(t),CQr=i(Mo),k3=n(Mo,"LI",{});var qDe=s(k3);s5e=n(qDe,"STRONG",{});var WIt=s(s5e);wQr=r(WIt,"roformer"),WIt.forEach(t),AQr=r(qDe," \u2014 "),kee=n(qDe,"A",{href:!0});var QIt=s(kee);LQr=r(QIt,"FlaxRoFormerForMultipleChoice"),QIt.forEach(t),yQr=r(qDe," (RoFormer model)"),qDe.forEach(t),xQr=i(Mo),S3=n(Mo,"LI",{});var jDe=s(S3);l5e=n(jDe,"STRONG",{});var HIt=s(l5e);$Qr=r(HIt,"xlm-roberta"),HIt.forEach(t),kQr=r(jDe," \u2014 "),See=n(jDe,"A",{href:!0});var UIt=s(See);SQr=r(UIt,"FlaxXLMRobertaForMultipleChoice"),UIt.forEach(t),RQr=r(jDe," (XLM-RoBERTa model)"),jDe.forEach(t),Mo.forEach(t),PQr=i(gi),T(R3.$$.fragment,gi),gi.forEach(t),mi.forEach(t),VOe=i(f),pf=n(f,"H2",{class:!0});var KXe=s(pf);P3=n(KXe,"A",{id:!0,class:!0,href:!0});var JIt=s(P3);i5e=n(JIt,"SPAN",{});var YIt=s(i5e);T(f$.$$.fragment,YIt),YIt.forEach(t),JIt.forEach(t),BQr=i(KXe),d5e=n(KXe,"SPAN",{});var KIt=s(d5e);IQr=r(KIt,"FlaxAutoModelForNextSentencePrediction"),KIt.forEach(t),KXe.forEach(t),XOe=i(f),Mr=n(f,"DIV",{class:!0});var hi=s(Mr);T(m$.$$.fragment,hi),NQr=i(hi),uf=n(hi,"P",{});var Pre=s(uf);qQr=r(Pre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Ree=n(Pre,"A",{href:!0});var ZIt=s(Ree);jQr=r(ZIt,"from_pretrained()"),ZIt.forEach(t),DQr=r(Pre," class method or the "),Pee=n(Pre,"A",{href:!0});var eNt=s(Pee);GQr=r(eNt,"from_config()"),eNt.forEach(t),OQr=r(Pre,` class
method.`),Pre.forEach(t),VQr=i(hi),g$=n(hi,"P",{});var ZXe=s(g$);XQr=r(ZXe,"This class cannot be instantiated directly using "),c5e=n(ZXe,"CODE",{});var oNt=s(c5e);zQr=r(oNt,"__init__()"),oNt.forEach(t),WQr=r(ZXe," (throws an error)."),ZXe.forEach(t),QQr=i(hi),Zt=n(hi,"DIV",{class:!0});var lA=s(Zt);T(h$.$$.fragment,lA),HQr=i(lA),f5e=n(lA,"P",{});var rNt=s(f5e);UQr=r(rNt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),rNt.forEach(t),JQr=i(lA),_f=n(lA,"P",{});var Bre=s(_f);YQr=r(Bre,`Note:
Loading a model from its configuration file does `),m5e=n(Bre,"STRONG",{});var tNt=s(m5e);KQr=r(tNt,"not"),tNt.forEach(t),ZQr=r(Bre,` load the model weights. It only affects the
model\u2019s configuration. Use `),Bee=n(Bre,"A",{href:!0});var aNt=s(Bee);eHr=r(aNt,"from_pretrained()"),aNt.forEach(t),oHr=r(Bre," to load the model weights."),Bre.forEach(t),rHr=i(lA),T(B3.$$.fragment,lA),lA.forEach(t),tHr=i(hi),Jr=n(hi,"DIV",{class:!0});var pi=s(Jr);T(p$.$$.fragment,pi),aHr=i(pi),g5e=n(pi,"P",{});var nNt=s(g5e);nHr=r(nNt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),nNt.forEach(t),sHr=i(pi),yn=n(pi,"P",{});var iA=s(yn);lHr=r(iA,"The model class to instantiate is selected based on the "),h5e=n(iA,"CODE",{});var sNt=s(h5e);iHr=r(sNt,"model_type"),sNt.forEach(t),dHr=r(iA,` property of the config object (either
passed as an argument or loaded from `),p5e=n(iA,"CODE",{});var lNt=s(p5e);cHr=r(lNt,"pretrained_model_name_or_path"),lNt.forEach(t),fHr=r(iA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u5e=n(iA,"CODE",{});var iNt=s(u5e);mHr=r(iNt,"pretrained_model_name_or_path"),iNt.forEach(t),gHr=r(iA,":"),iA.forEach(t),hHr=i(pi),_5e=n(pi,"UL",{});var dNt=s(_5e);I3=n(dNt,"LI",{});var DDe=s(I3);b5e=n(DDe,"STRONG",{});var cNt=s(b5e);pHr=r(cNt,"bert"),cNt.forEach(t),uHr=r(DDe," \u2014 "),Iee=n(DDe,"A",{href:!0});var fNt=s(Iee);_Hr=r(fNt,"FlaxBertForNextSentencePrediction"),fNt.forEach(t),bHr=r(DDe," (BERT model)"),DDe.forEach(t),dNt.forEach(t),vHr=i(pi),T(N3.$$.fragment,pi),pi.forEach(t),hi.forEach(t),zOe=i(f),bf=n(f,"H2",{class:!0});var eze=s(bf);q3=n(eze,"A",{id:!0,class:!0,href:!0});var mNt=s(q3);v5e=n(mNt,"SPAN",{});var gNt=s(v5e);T(u$.$$.fragment,gNt),gNt.forEach(t),mNt.forEach(t),FHr=i(eze),F5e=n(eze,"SPAN",{});var hNt=s(F5e);THr=r(hNt,"FlaxAutoModelForImageClassification"),hNt.forEach(t),eze.forEach(t),WOe=i(f),Er=n(f,"DIV",{class:!0});var ui=s(Er);T(_$.$$.fragment,ui),MHr=i(ui),vf=n(ui,"P",{});var Ire=s(vf);EHr=r(Ire,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Nee=n(Ire,"A",{href:!0});var pNt=s(Nee);CHr=r(pNt,"from_pretrained()"),pNt.forEach(t),wHr=r(Ire," class method or the "),qee=n(Ire,"A",{href:!0});var uNt=s(qee);AHr=r(uNt,"from_config()"),uNt.forEach(t),LHr=r(Ire,` class
method.`),Ire.forEach(t),yHr=i(ui),b$=n(ui,"P",{});var oze=s(b$);xHr=r(oze,"This class cannot be instantiated directly using "),T5e=n(oze,"CODE",{});var _Nt=s(T5e);$Hr=r(_Nt,"__init__()"),_Nt.forEach(t),kHr=r(oze," (throws an error)."),oze.forEach(t),SHr=i(ui),ea=n(ui,"DIV",{class:!0});var dA=s(ea);T(v$.$$.fragment,dA),RHr=i(dA),M5e=n(dA,"P",{});var bNt=s(M5e);PHr=r(bNt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),bNt.forEach(t),BHr=i(dA),Ff=n(dA,"P",{});var Nre=s(Ff);IHr=r(Nre,`Note:
Loading a model from its configuration file does `),E5e=n(Nre,"STRONG",{});var vNt=s(E5e);NHr=r(vNt,"not"),vNt.forEach(t),qHr=r(Nre,` load the model weights. It only affects the
model\u2019s configuration. Use `),jee=n(Nre,"A",{href:!0});var FNt=s(jee);jHr=r(FNt,"from_pretrained()"),FNt.forEach(t),DHr=r(Nre," to load the model weights."),Nre.forEach(t),GHr=i(dA),T(j3.$$.fragment,dA),dA.forEach(t),OHr=i(ui),Yr=n(ui,"DIV",{class:!0});var _i=s(Yr);T(F$.$$.fragment,_i),VHr=i(_i),C5e=n(_i,"P",{});var TNt=s(C5e);XHr=r(TNt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),TNt.forEach(t),zHr=i(_i),xn=n(_i,"P",{});var cA=s(xn);WHr=r(cA,"The model class to instantiate is selected based on the "),w5e=n(cA,"CODE",{});var MNt=s(w5e);QHr=r(MNt,"model_type"),MNt.forEach(t),HHr=r(cA,` property of the config object (either
passed as an argument or loaded from `),A5e=n(cA,"CODE",{});var ENt=s(A5e);UHr=r(ENt,"pretrained_model_name_or_path"),ENt.forEach(t),JHr=r(cA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L5e=n(cA,"CODE",{});var CNt=s(L5e);YHr=r(CNt,"pretrained_model_name_or_path"),CNt.forEach(t),KHr=r(cA,":"),cA.forEach(t),ZHr=i(_i),T$=n(_i,"UL",{});var rze=s(T$);D3=n(rze,"LI",{});var GDe=s(D3);y5e=n(GDe,"STRONG",{});var wNt=s(y5e);eUr=r(wNt,"beit"),wNt.forEach(t),oUr=r(GDe," \u2014 "),Dee=n(GDe,"A",{href:!0});var ANt=s(Dee);rUr=r(ANt,"FlaxBeitForImageClassification"),ANt.forEach(t),tUr=r(GDe," (BEiT model)"),GDe.forEach(t),aUr=i(rze),G3=n(rze,"LI",{});var ODe=s(G3);x5e=n(ODe,"STRONG",{});var LNt=s(x5e);nUr=r(LNt,"vit"),LNt.forEach(t),sUr=r(ODe," \u2014 "),Gee=n(ODe,"A",{href:!0});var yNt=s(Gee);lUr=r(yNt,"FlaxViTForImageClassification"),yNt.forEach(t),iUr=r(ODe," (ViT model)"),ODe.forEach(t),rze.forEach(t),dUr=i(_i),T(O3.$$.fragment,_i),_i.forEach(t),ui.forEach(t),QOe=i(f),Tf=n(f,"H2",{class:!0});var tze=s(Tf);V3=n(tze,"A",{id:!0,class:!0,href:!0});var xNt=s(V3);$5e=n(xNt,"SPAN",{});var $Nt=s($5e);T(M$.$$.fragment,$Nt),$Nt.forEach(t),xNt.forEach(t),cUr=i(tze),k5e=n(tze,"SPAN",{});var kNt=s(k5e);fUr=r(kNt,"FlaxAutoModelForVision2Seq"),kNt.forEach(t),tze.forEach(t),HOe=i(f),Cr=n(f,"DIV",{class:!0});var bi=s(Cr);T(E$.$$.fragment,bi),mUr=i(bi),Mf=n(bi,"P",{});var qre=s(Mf);gUr=r(qre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Oee=n(qre,"A",{href:!0});var SNt=s(Oee);hUr=r(SNt,"from_pretrained()"),SNt.forEach(t),pUr=r(qre," class method or the "),Vee=n(qre,"A",{href:!0});var RNt=s(Vee);uUr=r(RNt,"from_config()"),RNt.forEach(t),_Ur=r(qre,` class
method.`),qre.forEach(t),bUr=i(bi),C$=n(bi,"P",{});var aze=s(C$);vUr=r(aze,"This class cannot be instantiated directly using "),S5e=n(aze,"CODE",{});var PNt=s(S5e);FUr=r(PNt,"__init__()"),PNt.forEach(t),TUr=r(aze," (throws an error)."),aze.forEach(t),MUr=i(bi),oa=n(bi,"DIV",{class:!0});var fA=s(oa);T(w$.$$.fragment,fA),EUr=i(fA),R5e=n(fA,"P",{});var BNt=s(R5e);CUr=r(BNt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),BNt.forEach(t),wUr=i(fA),Ef=n(fA,"P",{});var jre=s(Ef);AUr=r(jre,`Note:
Loading a model from its configuration file does `),P5e=n(jre,"STRONG",{});var INt=s(P5e);LUr=r(INt,"not"),INt.forEach(t),yUr=r(jre,` load the model weights. It only affects the
model\u2019s configuration. Use `),Xee=n(jre,"A",{href:!0});var NNt=s(Xee);xUr=r(NNt,"from_pretrained()"),NNt.forEach(t),$Ur=r(jre," to load the model weights."),jre.forEach(t),kUr=i(fA),T(X3.$$.fragment,fA),fA.forEach(t),SUr=i(bi),Kr=n(bi,"DIV",{class:!0});var vi=s(Kr);T(A$.$$.fragment,vi),RUr=i(vi),B5e=n(vi,"P",{});var qNt=s(B5e);PUr=r(qNt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),qNt.forEach(t),BUr=i(vi),$n=n(vi,"P",{});var mA=s($n);IUr=r(mA,"The model class to instantiate is selected based on the "),I5e=n(mA,"CODE",{});var jNt=s(I5e);NUr=r(jNt,"model_type"),jNt.forEach(t),qUr=r(mA,` property of the config object (either
passed as an argument or loaded from `),N5e=n(mA,"CODE",{});var DNt=s(N5e);jUr=r(DNt,"pretrained_model_name_or_path"),DNt.forEach(t),DUr=r(mA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q5e=n(mA,"CODE",{});var GNt=s(q5e);GUr=r(GNt,"pretrained_model_name_or_path"),GNt.forEach(t),OUr=r(mA,":"),mA.forEach(t),VUr=i(vi),j5e=n(vi,"UL",{});var ONt=s(j5e);z3=n(ONt,"LI",{});var VDe=s(z3);D5e=n(VDe,"STRONG",{});var VNt=s(D5e);XUr=r(VNt,"vision-encoder-decoder"),VNt.forEach(t),zUr=r(VDe," \u2014 "),zee=n(VDe,"A",{href:!0});var XNt=s(zee);WUr=r(XNt,"FlaxVisionEncoderDecoderModel"),XNt.forEach(t),QUr=r(VDe," (Vision Encoder decoder model)"),VDe.forEach(t),ONt.forEach(t),HUr=i(vi),T(W3.$$.fragment,vi),vi.forEach(t),bi.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(Jjt)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(Sn,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.AutoConfig"),c(Pn,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.AutoModel"),c(Bn,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.AutoTokenizer"),c(Ai,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertModel"),c(kf,"id","extending-the-auto-classes"),c(kf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(kf,"href","#extending-the-auto-classes"),c(Li,"class","relative group"),c(Rf,"id","transformers.AutoConfig"),c(Rf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Rf,"href","#transformers.AutoConfig"),c(yi,"class","relative group"),c(Uk,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(Jk,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig"),c(Yk,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig"),c(Kk,"href","/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitConfig"),c(Zk,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig"),c(eS,"href","/docs/transformers/pr_16792/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(oS,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig"),c(rS,"href","/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(tS,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(aS,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(nS,"href","/docs/transformers/pr_16792/en/model_doc/bloom#transformers.BloomConfig"),c(sS,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig"),c(lS,"href","/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineConfig"),c(iS,"href","/docs/transformers/pr_16792/en/model_doc/clip#transformers.CLIPConfig"),c(dS,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertConfig"),c(cS,"href","/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextConfig"),c(fS,"href","/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLConfig"),c(mS,"href","/docs/transformers/pr_16792/en/model_doc/cvt#transformers.CvtConfig"),c(gS,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(hS,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(pS,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(uS,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaConfig"),c(_S,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(bS,"href","/docs/transformers/pr_16792/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(vS,"href","/docs/transformers/pr_16792/en/model_doc/deit#transformers.DeiTConfig"),c(FS,"href","/docs/transformers/pr_16792/en/model_doc/detr#transformers.DetrConfig"),c(TS,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig"),c(MS,"href","/docs/transformers/pr_16792/en/model_doc/dpr#transformers.DPRConfig"),c(ES,"href","/docs/transformers/pr_16792/en/model_doc/dpt#transformers.DPTConfig"),c(CS,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig"),c(wS,"href","/docs/transformers/pr_16792/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(AS,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig"),c(LS,"href","/docs/transformers/pr_16792/en/model_doc/flava#transformers.FlavaConfig"),c(yS,"href","/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetConfig"),c(xS,"href","/docs/transformers/pr_16792/en/model_doc/fsmt#transformers.FSMTConfig"),c($S,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig"),c(kS,"href","/docs/transformers/pr_16792/en/model_doc/glpn#transformers.GLPNConfig"),c(SS,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Config"),c(RS,"href","/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(PS,"href","/docs/transformers/pr_16792/en/model_doc/gpt_neox#transformers.GPTNeoXConfig"),c(BS,"href","/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJConfig"),c(IS,"href","/docs/transformers/pr_16792/en/model_doc/hubert#transformers.HubertConfig"),c(NS,"href","/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertConfig"),c(qS,"href","/docs/transformers/pr_16792/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(jS,"href","/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(DS,"href","/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(GS,"href","/docs/transformers/pr_16792/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),c(OS,"href","/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDConfig"),c(VS,"href","/docs/transformers/pr_16792/en/model_doc/levit#transformers.LevitConfig"),c(XS,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig"),c(zS,"href","/docs/transformers/pr_16792/en/model_doc/longt5#transformers.LongT5Config"),c(WS,"href","/docs/transformers/pr_16792/en/model_doc/luke#transformers.LukeConfig"),c(QS,"href","/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertConfig"),c(HS,"href","/docs/transformers/pr_16792/en/model_doc/m2m_100#transformers.M2M100Config"),c(US,"href","/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianConfig"),c(JS,"href","/docs/transformers/pr_16792/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(YS,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig"),c(KS,"href","/docs/transformers/pr_16792/en/model_doc/mctct#transformers.MCTCTConfig"),c(ZS,"href","/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(eR,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(oR,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig"),c(rR,"href","/docs/transformers/pr_16792/en/model_doc/mt5#transformers.MT5Config"),c(tR,"href","/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(aR,"href","/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(nR,"href","/docs/transformers/pr_16792/en/model_doc/opt#transformers.OPTConfig"),c(sR,"href","/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusConfig"),c(lR,"href","/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverConfig"),c(iR,"href","/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartConfig"),c(dR,"href","/docs/transformers/pr_16792/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(cR,"href","/docs/transformers/pr_16792/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(fR,"href","/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(mR,"href","/docs/transformers/pr_16792/en/model_doc/rag#transformers.RagConfig"),c(gR,"href","/docs/transformers/pr_16792/en/model_doc/realm#transformers.RealmConfig"),c(hR,"href","/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerConfig"),c(pR,"href","/docs/transformers/pr_16792/en/model_doc/regnet#transformers.RegNetConfig"),c(uR,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig"),c(_R,"href","/docs/transformers/pr_16792/en/model_doc/resnet#transformers.ResNetConfig"),c(bR,"href","/docs/transformers/pr_16792/en/model_doc/retribert#transformers.RetriBertConfig"),c(vR,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig"),c(FR,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig"),c(TR,"href","/docs/transformers/pr_16792/en/model_doc/segformer#transformers.SegformerConfig"),c(MR,"href","/docs/transformers/pr_16792/en/model_doc/sew#transformers.SEWConfig"),c(ER,"href","/docs/transformers/pr_16792/en/model_doc/sew-d#transformers.SEWDConfig"),c(CR,"href","/docs/transformers/pr_16792/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(wR,"href","/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(AR,"href","/docs/transformers/pr_16792/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(LR,"href","/docs/transformers/pr_16792/en/model_doc/splinter#transformers.SplinterConfig"),c(yR,"href","/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(xR,"href","/docs/transformers/pr_16792/en/model_doc/swin#transformers.SwinConfig"),c($R,"href","/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Config"),c(kR,"href","/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasConfig"),c(SR,"href","/docs/transformers/pr_16792/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(RR,"href","/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(PR,"href","/docs/transformers/pr_16792/en/model_doc/trocr#transformers.TrOCRConfig"),c(BR,"href","/docs/transformers/pr_16792/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(IR,"href","/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(NR,"href","/docs/transformers/pr_16792/en/model_doc/van#transformers.VanConfig"),c(qR,"href","/docs/transformers/pr_16792/en/model_doc/vilt#transformers.ViltConfig"),c(jR,"href","/docs/transformers/pr_16792/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(DR,"href","/docs/transformers/pr_16792/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(GR,"href","/docs/transformers/pr_16792/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(OR,"href","/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTConfig"),c(VR,"href","/docs/transformers/pr_16792/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(XR,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(zR,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(WR,"href","/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMConfig"),c(QR,"href","/docs/transformers/pr_16792/en/model_doc/xglm#transformers.XGLMConfig"),c(HR,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig"),c(UR,"href","/docs/transformers/pr_16792/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(JR,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(YR,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(KR,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig"),c(ZR,"href","/docs/transformers/pr_16792/en/model_doc/yolos#transformers.YolosConfig"),c(eP,"href","/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoConfig"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Dg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Gg,"id","transformers.AutoTokenizer"),c(Gg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Gg,"href","#transformers.AutoTokenizer"),c($i,"class","relative group"),c(oP,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(rP,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertTokenizer"),c(tP,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(aP,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartTokenizer"),c(nP,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartTokenizerFast"),c(sP,"href","/docs/transformers/pr_16792/en/model_doc/barthez#transformers.BarthezTokenizer"),c(lP,"href","/docs/transformers/pr_16792/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(iP,"href","/docs/transformers/pr_16792/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(dP,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertTokenizer"),c(cP,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertTokenizerFast"),c(fP,"href","/docs/transformers/pr_16792/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(mP,"href","/docs/transformers/pr_16792/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(gP,"href","/docs/transformers/pr_16792/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(hP,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(pP,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(uP,"href","/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(_P,"href","/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(bP,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(vP,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(FP,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(TP,"href","/docs/transformers/pr_16792/en/model_doc/bloom#transformers.BloomTokenizerFast"),c(MP,"href","/docs/transformers/pr_16792/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(EP,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertTokenizer"),c(CP,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(wP,"href","/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineTokenizer"),c(AP,"href","/docs/transformers/pr_16792/en/model_doc/clip#transformers.CLIPTokenizer"),c(LP,"href","/docs/transformers/pr_16792/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(yP,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(xP,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c($P,"href","/docs/transformers/pr_16792/en/model_doc/cpm#transformers.CpmTokenizer"),c(kP,"href","/docs/transformers/pr_16792/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(SP,"href","/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(RP,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaTokenizer"),c(PP,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(BP,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaTokenizer"),c(IP,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(NP,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(qP,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(jP,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(DP,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(GP,"href","/docs/transformers/pr_16792/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(OP,"href","/docs/transformers/pr_16792/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(VP,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraTokenizer"),c(XP,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(zP,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(WP,"href","/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetTokenizer"),c(QP,"href","/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(HP,"href","/docs/transformers/pr_16792/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(UP,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelTokenizer"),c(JP,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(YP,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(KP,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(ZP,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(eB,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(oB,"href","/docs/transformers/pr_16792/en/model_doc/gpt_neox#transformers.GPTNeoXTokenizerFast"),c(rB,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(tB,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(aB,"href","/docs/transformers/pr_16792/en/model_doc/herbert#transformers.HerbertTokenizer"),c(nB,"href","/docs/transformers/pr_16792/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(sB,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(lB,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaTokenizer"),c(iB,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(dB,"href","/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(cB,"href","/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(fB,"href","/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(mB,"href","/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(gB,"href","/docs/transformers/pr_16792/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),c(hB,"href","/docs/transformers/pr_16792/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),c(pB,"href","/docs/transformers/pr_16792/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(uB,"href","/docs/transformers/pr_16792/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(_B,"href","/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDTokenizer"),c(bB,"href","/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDTokenizerFast"),c(vB,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerTokenizer"),c(FB,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(TB,"href","/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Tokenizer"),c(MB,"href","/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5TokenizerFast"),c(EB,"href","/docs/transformers/pr_16792/en/model_doc/luke#transformers.LukeTokenizer"),c(CB,"href","/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(wB,"href","/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(AB,"href","/docs/transformers/pr_16792/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(LB,"href","/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianTokenizer"),c(yB,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartTokenizer"),c(xB,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartTokenizerFast"),c($B,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(kB,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(SB,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertTokenizer"),c(RB,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertTokenizerFast"),c(PB,"href","/docs/transformers/pr_16792/en/model_doc/mluke#transformers.MLukeTokenizer"),c(BB,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(IB,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(NB,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(qB,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(jB,"href","/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Tokenizer"),c(DB,"href","/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5TokenizerFast"),c(GB,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertTokenizer"),c(OB,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(VB,"href","/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(XB,"href","/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(zB,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(WB,"href","/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(QB,"href","/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(HB,"href","/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(UB,"href","/docs/transformers/pr_16792/en/model_doc/phobert#transformers.PhobertTokenizer"),c(JB,"href","/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartTokenizer"),c(YB,"href","/docs/transformers/pr_16792/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(KB,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertTokenizer"),c(ZB,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertTokenizerFast"),c(eI,"href","/docs/transformers/pr_16792/en/model_doc/rag#transformers.RagTokenizer"),c(oI,"href","/docs/transformers/pr_16792/en/model_doc/realm#transformers.RealmTokenizer"),c(rI,"href","/docs/transformers/pr_16792/en/model_doc/realm#transformers.RealmTokenizerFast"),c(tI,"href","/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerTokenizer"),c(aI,"href","/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(nI,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertTokenizer"),c(sI,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(lI,"href","/docs/transformers/pr_16792/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(iI,"href","/docs/transformers/pr_16792/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(dI,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaTokenizer"),c(cI,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(fI,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(mI,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(gI,"href","/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(hI,"href","/docs/transformers/pr_16792/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(pI,"href","/docs/transformers/pr_16792/en/model_doc/splinter#transformers.SplinterTokenizer"),c(uI,"href","/docs/transformers/pr_16792/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(_I,"href","/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(bI,"href","/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(vI,"href","/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Tokenizer"),c(FI,"href","/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5TokenizerFast"),c(TI,"href","/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasTokenizer"),c(MI,"href","/docs/transformers/pr_16792/en/model_doc/tapex#transformers.TapexTokenizer"),c(EI,"href","/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(CI,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertTokenizer"),c(wI,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertTokenizerFast"),c(AI,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertTokenizer"),c(LI,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertTokenizerFast"),c(yI,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(xI,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c($I,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(kI,"href","/docs/transformers/pr_16792/en/model_doc/xglm#transformers.XGLMTokenizer"),c(SI,"href","/docs/transformers/pr_16792/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(RI,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMTokenizer"),c(PI,"href","/docs/transformers/pr_16792/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(BI,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(II,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(NI,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaTokenizer"),c(qI,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(jI,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(DI,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(GI,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertTokenizer"),c(OI,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Eh,"id","transformers.AutoFeatureExtractor"),c(Eh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Eh,"href","#transformers.AutoFeatureExtractor"),c(ki,"class","relative group"),c(VI,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(XI,"href","/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(zI,"href","/docs/transformers/pr_16792/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(WI,"href","/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(QI,"href","/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(HI,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(UI,"href","/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(JI,"href","/docs/transformers/pr_16792/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(YI,"href","/docs/transformers/pr_16792/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(KI,"href","/docs/transformers/pr_16792/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(ZI,"href","/docs/transformers/pr_16792/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(eN,"href","/docs/transformers/pr_16792/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(oN,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(rN,"href","/docs/transformers/pr_16792/en/model_doc/imagegpt#transformers.ImageGPTFeatureExtractor"),c(tN,"href","/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(aN,"href","/docs/transformers/pr_16792/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),c(nN,"href","/docs/transformers/pr_16792/en/model_doc/levit#transformers.LevitFeatureExtractor"),c(sN,"href","/docs/transformers/pr_16792/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(lN,"href","/docs/transformers/pr_16792/en/model_doc/mctct#transformers.MCTCTFeatureExtractor"),c(iN,"href","/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(dN,"href","/docs/transformers/pr_16792/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(cN,"href","/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(fN,"href","/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(mN,"href","/docs/transformers/pr_16792/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(gN,"href","/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(hN,"href","/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(pN,"href","/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(uN,"href","/docs/transformers/pr_16792/en/model_doc/vilt#transformers.ViltFeatureExtractor"),c(_N,"href","/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(bN,"href","/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(vN,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(FN,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(TN,"href","/docs/transformers/pr_16792/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ap,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(np,"id","transformers.AutoProcessor"),c(np,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(np,"href","#transformers.AutoProcessor"),c(Si,"class","relative group"),c(MN,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(EN,"href","/docs/transformers/pr_16792/en/model_doc/clip#transformers.CLIPProcessor"),c(CN,"href","/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(wN,"href","/docs/transformers/pr_16792/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),c(AN,"href","/docs/transformers/pr_16792/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(LN,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(yN,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(xN,"href","/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c($N,"href","/docs/transformers/pr_16792/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(kN,"href","/docs/transformers/pr_16792/en/model_doc/trocr#transformers.TrOCRProcessor"),c(SN,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(RN,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(PN,"href","/docs/transformers/pr_16792/en/model_doc/vilt#transformers.ViltProcessor"),c(BN,"href","/docs/transformers/pr_16792/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(IN,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(NN,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(qN,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ap,"id","transformers.AutoModel"),c(Ap,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ap,"href","#transformers.AutoModel"),c(Pi,"class","relative group"),c(jN,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DN,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GN,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ON,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertModel"),c(VN,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartModel"),c(XN,"href","/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitModel"),c(zN,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertModel"),c(WN,"href","/docs/transformers/pr_16792/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(QN,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdModel"),c(HN,"href","/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(UN,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(JN,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(YN,"href","/docs/transformers/pr_16792/en/model_doc/bloom#transformers.BloomModel"),c(KN,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertModel"),c(ZN,"href","/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineModel"),c(eq,"href","/docs/transformers/pr_16792/en/model_doc/clip#transformers.CLIPModel"),c(oq,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertModel"),c(rq,"href","/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextModel"),c(tq,"href","/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLModel"),c(aq,"href","/docs/transformers/pr_16792/en/model_doc/cvt#transformers.CvtModel"),c(nq,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(sq,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(lq,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(iq,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaModel"),c(dq,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(cq,"href","/docs/transformers/pr_16792/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(fq,"href","/docs/transformers/pr_16792/en/model_doc/deit#transformers.DeiTModel"),c(mq,"href","/docs/transformers/pr_16792/en/model_doc/detr#transformers.DetrModel"),c(gq,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertModel"),c(hq,"href","/docs/transformers/pr_16792/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(pq,"href","/docs/transformers/pr_16792/en/model_doc/dpt#transformers.DPTModel"),c(uq,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraModel"),c(_q,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertModel"),c(bq,"href","/docs/transformers/pr_16792/en/model_doc/flava#transformers.FlavaModel"),c(vq,"href","/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetModel"),c(Fq,"href","/docs/transformers/pr_16792/en/model_doc/fsmt#transformers.FSMTModel"),c(Tq,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelModel"),c(Mq,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelBaseModel"),c(Eq,"href","/docs/transformers/pr_16792/en/model_doc/glpn#transformers.GLPNModel"),c(Cq,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Model"),c(wq,"href","/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(Aq,"href","/docs/transformers/pr_16792/en/model_doc/gpt_neox#transformers.GPTNeoXModel"),c(Lq,"href","/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJModel"),c(yq,"href","/docs/transformers/pr_16792/en/model_doc/hubert#transformers.HubertModel"),c(xq,"href","/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertModel"),c($q,"href","/docs/transformers/pr_16792/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(kq,"href","/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(Sq,"href","/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(Rq,"href","/docs/transformers/pr_16792/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),c(Pq,"href","/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDModel"),c(Bq,"href","/docs/transformers/pr_16792/en/model_doc/levit#transformers.LevitModel"),c(Iq,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerModel"),c(Nq,"href","/docs/transformers/pr_16792/en/model_doc/longt5#transformers.LongT5Model"),c(qq,"href","/docs/transformers/pr_16792/en/model_doc/luke#transformers.LukeModel"),c(jq,"href","/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertModel"),c(Dq,"href","/docs/transformers/pr_16792/en/model_doc/m2m_100#transformers.M2M100Model"),c(Gq,"href","/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianModel"),c(Oq,"href","/docs/transformers/pr_16792/en/model_doc/maskformer#transformers.MaskFormerModel"),c(Vq,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartModel"),c(Xq,"href","/docs/transformers/pr_16792/en/model_doc/mctct#transformers.MCTCTModel"),c(zq,"href","/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(Wq,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertModel"),c(Qq,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetModel"),c(Hq,"href","/docs/transformers/pr_16792/en/model_doc/mt5#transformers.MT5Model"),c(Uq,"href","/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerModel"),c(Jq,"href","/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(Yq,"href","/docs/transformers/pr_16792/en/model_doc/opt#transformers.OPTModel"),c(Kq,"href","/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusModel"),c(Zq,"href","/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverModel"),c(ej,"href","/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartModel"),c(oj,"href","/docs/transformers/pr_16792/en/model_doc/poolformer#transformers.PoolFormerModel"),c(rj,"href","/docs/transformers/pr_16792/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(tj,"href","/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertModel"),c(aj,"href","/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerModel"),c(nj,"href","/docs/transformers/pr_16792/en/model_doc/regnet#transformers.RegNetModel"),c(sj,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertModel"),c(lj,"href","/docs/transformers/pr_16792/en/model_doc/resnet#transformers.ResNetModel"),c(ij,"href","/docs/transformers/pr_16792/en/model_doc/retribert#transformers.RetriBertModel"),c(dj,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaModel"),c(cj,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerModel"),c(fj,"href","/docs/transformers/pr_16792/en/model_doc/segformer#transformers.SegformerModel"),c(mj,"href","/docs/transformers/pr_16792/en/model_doc/sew#transformers.SEWModel"),c(gj,"href","/docs/transformers/pr_16792/en/model_doc/sew-d#transformers.SEWDModel"),c(hj,"href","/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(pj,"href","/docs/transformers/pr_16792/en/model_doc/splinter#transformers.SplinterModel"),c(uj,"href","/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(_j,"href","/docs/transformers/pr_16792/en/model_doc/swin#transformers.SwinModel"),c(bj,"href","/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Model"),c(vj,"href","/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasModel"),c(Fj,"href","/docs/transformers/pr_16792/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(Tj,"href","/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(Mj,"href","/docs/transformers/pr_16792/en/model_doc/unispeech#transformers.UniSpeechModel"),c(Ej,"href","/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(Cj,"href","/docs/transformers/pr_16792/en/model_doc/van#transformers.VanModel"),c(wj,"href","/docs/transformers/pr_16792/en/model_doc/vilt#transformers.ViltModel"),c(Aj,"href","/docs/transformers/pr_16792/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(Lj,"href","/docs/transformers/pr_16792/en/model_doc/visual_bert#transformers.VisualBertModel"),c(yj,"href","/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTModel"),c(xj,"href","/docs/transformers/pr_16792/en/model_doc/vit_mae#transformers.ViTMAEModel"),c($j,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(kj,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(Sj,"href","/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMModel"),c(Rj,"href","/docs/transformers/pr_16792/en/model_doc/xglm#transformers.XGLMModel"),c(Pj,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMModel"),c(Bj,"href","/docs/transformers/pr_16792/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(Ij,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(Nj,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(qj,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetModel"),c(jj,"href","/docs/transformers/pr_16792/en/model_doc/yolos#transformers.YolosModel"),c(Dj,"href","/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(L_,"id","transformers.AutoModelForPreTraining"),c(L_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(L_,"href","#transformers.AutoModelForPreTraining"),c(Ni,"class","relative group"),c(Gj,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Oj,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Vj,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xj,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertForPreTraining"),c(zj,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(Wj,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForPreTraining"),c(Qj,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(Hj,"href","/docs/transformers/pr_16792/en/model_doc/bloom#transformers.BloomForCausalLM"),c(Uj,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(Jj,"href","/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(Yj,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(Kj,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(Zj,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(eD,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(oD,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForPreTraining"),c(rD,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(tD,"href","/docs/transformers/pr_16792/en/model_doc/flava#transformers.FlavaForPreTraining"),c(aD,"href","/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForPreTraining"),c(nD,"href","/docs/transformers/pr_16792/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(sD,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(lD,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(iD,"href","/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(dD,"href","/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(cD,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(fD,"href","/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(mD,"href","/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(gD,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(hD,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(pD,"href","/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(uD,"href","/docs/transformers/pr_16792/en/model_doc/retribert#transformers.RetriBertModel"),c(_D,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(bD,"href","/docs/transformers/pr_16792/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(vD,"href","/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(FD,"href","/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(TD,"href","/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(MD,"href","/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(ED,"href","/docs/transformers/pr_16792/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(CD,"href","/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(wD,"href","/docs/transformers/pr_16792/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(AD,"href","/docs/transformers/pr_16792/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(LD,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(yD,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(xD,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c($D,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(kD,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(SD,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(F2,"id","transformers.AutoModelForCausalLM"),c(F2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(F2,"href","#transformers.AutoModelForCausalLM"),c(Di,"class","relative group"),c(RD,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PD,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(BD,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ID,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartForCausalLM"),c(ND,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertLMHeadModel"),c(qD,"href","/docs/transformers/pr_16792/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(jD,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(DD,"href","/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(GD,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(OD,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(VD,"href","/docs/transformers/pr_16792/en/model_doc/bloom#transformers.BloomForCausalLM"),c(XD,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(zD,"href","/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(WD,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(QD,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForCausalLM"),c(HD,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(UD,"href","/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(JD,"href","/docs/transformers/pr_16792/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM"),c(YD,"href","/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(KD,"href","/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianForCausalLM"),c(ZD,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartForCausalLM"),c(eG,"href","/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(oG,"href","/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(rG,"href","/docs/transformers/pr_16792/en/model_doc/opt#transformers.OPTForCausalLM"),c(tG,"href","/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(aG,"href","/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(nG,"href","/docs/transformers/pr_16792/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(sG,"href","/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(lG,"href","/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(iG,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(dG,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(cG,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(fG,"href","/docs/transformers/pr_16792/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(mG,"href","/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(gG,"href","/docs/transformers/pr_16792/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(hG,"href","/docs/transformers/pr_16792/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(pG,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(uG,"href","/docs/transformers/pr_16792/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(_G,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(bG,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(vG,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(i1,"id","transformers.AutoModelForMaskedLM"),c(i1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(i1,"href","#transformers.AutoModelForMaskedLM"),c(Vi,"class","relative group"),c(FG,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TG,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MG,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EG,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(CG,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(wG,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForMaskedLM"),c(AG,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(LG,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(yG,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(xG,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c($G,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(kG,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(SG,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(RG,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(PG,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(BG,"href","/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(IG,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(NG,"href","/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(qG,"href","/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(jG,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(DG,"href","/docs/transformers/pr_16792/en/model_doc/luke#transformers.LukeForMaskedLM"),c(GG,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(OG,"href","/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(VG,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(XG,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(zG,"href","/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(WG,"href","/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(QG,"href","/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(HG,"href","/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(UG,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(JG,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(YG,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(KG,"href","/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(ZG,"href","/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(eO,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(oO,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(rO,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(tO,"href","/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(H1,"id","transformers.AutoModelForSeq2SeqLM"),c(H1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(H1,"href","#transformers.AutoModelForSeq2SeqLM"),c(Wi,"class","relative group"),c(aO,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nO,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sO,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lO,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(iO,"href","/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(dO,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(cO,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(fO,"href","/docs/transformers/pr_16792/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(mO,"href","/docs/transformers/pr_16792/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(gO,"href","/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(hO,"href","/docs/transformers/pr_16792/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration"),c(pO,"href","/docs/transformers/pr_16792/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(uO,"href","/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianMTModel"),c(_O,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(bO,"href","/docs/transformers/pr_16792/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(vO,"href","/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(FO,"href","/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(TO,"href","/docs/transformers/pr_16792/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(MO,"href","/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(EO,"href","/docs/transformers/pr_16792/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pb,"id","transformers.AutoModelForSequenceClassification"),c(pb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pb,"href","#transformers.AutoModelForSequenceClassification"),c(Ui,"class","relative group"),c(CO,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wO,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(AO,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LO,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(yO,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartForSequenceClassification"),c(xO,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForSequenceClassification"),c($O,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(kO,"href","/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(SO,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(RO,"href","/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(PO,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(BO,"href","/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(IO,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(NO,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(qO,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(jO,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(DO,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(GO,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(OO,"href","/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(VO,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(XO,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(zO,"href","/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(WO,"href","/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(QO,"href","/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(HO,"href","/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(UO,"href","/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(JO,"href","/docs/transformers/pr_16792/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),c(YO,"href","/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDForSequenceClassification"),c(KO,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(ZO,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(eV,"href","/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(oV,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(rV,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(tV,"href","/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(aV,"href","/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(nV,"href","/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(sV,"href","/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(lV,"href","/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(iV,"href","/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(dV,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(cV,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(fV,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(mV,"href","/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(gV,"href","/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(hV,"href","/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(pV,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(uV,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(_V,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(bV,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(vV,"href","/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mv,"id","transformers.AutoModelForMultipleChoice"),c(mv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(mv,"href","#transformers.AutoModelForMultipleChoice"),c(Ki,"class","relative group"),c(FV,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TV,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MV,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EV,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(CV,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForMultipleChoice"),c(wV,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(AV,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(LV,"href","/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(yV,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(xV,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c($V,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(kV,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(SV,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(RV,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(PV,"href","/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(BV,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(IV,"href","/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(NV,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(qV,"href","/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(jV,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(DV,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(GV,"href","/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(OV,"href","/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(VV,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(XV,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(zV,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(WV,"href","/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(QV,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(HV,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(UV,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(JV,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(YV,"href","/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zv,"id","transformers.AutoModelForNextSentencePrediction"),c(zv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zv,"href","#transformers.AutoModelForNextSentencePrediction"),c(od,"class","relative group"),c(KV,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZV,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eX,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oX,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(rX,"href","/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(tX,"href","/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(aX,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(nX,"href","/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eF,"id","transformers.AutoModelForTokenClassification"),c(eF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(eF,"href","#transformers.AutoModelForTokenClassification"),c(ad,"class","relative group"),c(sX,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lX,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iX,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dX,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(cX,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForTokenClassification"),c(fX,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(mX,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(gX,"href","/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineForTokenClassification"),c(hX,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(pX,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(uX,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(_X,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(bX,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(vX,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(FX,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(TX,"href","/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(MX,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(EX,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(CX,"href","/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(wX,"href","/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(AX,"href","/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(LX,"href","/docs/transformers/pr_16792/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),c(yX,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(xX,"href","/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c($X,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(kX,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(SX,"href","/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(RX,"href","/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(PX,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(BX,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(IX,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(NX,"href","/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(qX,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(jX,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(DX,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(GX,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(OX,"href","/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qF,"id","transformers.AutoModelForQuestionAnswering"),c(qF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qF,"href","#transformers.AutoModelForQuestionAnswering"),c(ld,"class","relative group"),c(VX,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XX,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zX,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WX,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(QX,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(HX,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(UX,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(JX,"href","/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(YX,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(KX,"href","/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(ZX,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(ez,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(oz,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(rz,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(tz,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(az,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(nz,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(sz,"href","/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(lz,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(iz,"href","/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(dz,"href","/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(cz,"href","/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(fz,"href","/docs/transformers/pr_16792/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(mz,"href","/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(gz,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(hz,"href","/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(pz,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(uz,"href","/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(_z,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(bz,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(vz,"href","/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(Fz,"href","/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(Tz,"href","/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(Mz,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(Ez,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(Cz,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(wz,"href","/docs/transformers/pr_16792/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(Az,"href","/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(Lz,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(yz,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(xz,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c($z,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(kz,"href","/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(y6,"id","transformers.AutoModelForTableQuestionAnswering"),c(y6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(y6,"href","#transformers.AutoModelForTableQuestionAnswering"),c(cd,"class","relative group"),c(Sz,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rz,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Pz,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bz,"href","/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(R6,"id","transformers.AutoModelForImageClassification"),c(R6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(R6,"href","#transformers.AutoModelForImageClassification"),c(gd,"class","relative group"),c(Iz,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nz,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qz,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jz,"href","/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitForImageClassification"),c(Dz,"href","/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(Gz,"href","/docs/transformers/pr_16792/en/model_doc/cvt#transformers.CvtForImageClassification"),c(Oz,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(Vz,"href","/docs/transformers/pr_16792/en/model_doc/deit#transformers.DeiTForImageClassification"),c(Xz,"href","/docs/transformers/pr_16792/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(zz,"href","/docs/transformers/pr_16792/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(Wz,"href","/docs/transformers/pr_16792/en/model_doc/levit#transformers.LevitForImageClassification"),c(Qz,"href","/docs/transformers/pr_16792/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher"),c(Hz,"href","/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(Uz,"href","/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(Jz,"href","/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(Yz,"href","/docs/transformers/pr_16792/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(Kz,"href","/docs/transformers/pr_16792/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(Zz,"href","/docs/transformers/pr_16792/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(eW,"href","/docs/transformers/pr_16792/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(oW,"href","/docs/transformers/pr_16792/en/model_doc/swin#transformers.SwinForImageClassification"),c(rW,"href","/docs/transformers/pr_16792/en/model_doc/van#transformers.VanForImageClassification"),c(tW,"href","/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTForImageClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(U6,"id","transformers.AutoModelForVision2Seq"),c(U6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(U6,"href","#transformers.AutoModelForVision2Seq"),c(ud,"class","relative group"),c(aW,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nW,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sW,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lW,"href","/docs/transformers/pr_16792/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eT,"id","transformers.AutoModelForVisualQuestionAnswering"),c(eT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(eT,"href","#transformers.AutoModelForVisualQuestionAnswering"),c(vd,"class","relative group"),c(iW,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dW,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cW,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fW,"href","/docs/transformers/pr_16792/en/model_doc/vilt#transformers.ViltForQuestionAnswering"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nT,"id","transformers.AutoModelForAudioClassification"),c(nT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(nT,"href","#transformers.AutoModelForAudioClassification"),c(Md,"class","relative group"),c(mW,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gW,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hW,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pW,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(uW,"href","/docs/transformers/pr_16792/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(_W,"href","/docs/transformers/pr_16792/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(bW,"href","/docs/transformers/pr_16792/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(vW,"href","/docs/transformers/pr_16792/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(FW,"href","/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(TW,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(MW,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(EW,"href","/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bT,"id","transformers.AutoModelForAudioFrameClassification"),c(bT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bT,"href","#transformers.AutoModelForAudioFrameClassification"),c(wd,"class","relative group"),c(CW,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wW,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(AW,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LW,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(yW,"href","/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(xW,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c($W,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(kW,"href","/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LT,"id","transformers.AutoModelForCTC"),c(LT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(LT,"href","#transformers.AutoModelForCTC"),c(yd,"class","relative group"),c(SW,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RW,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PW,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BW,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(IW,"href","/docs/transformers/pr_16792/en/model_doc/hubert#transformers.HubertForCTC"),c(NW,"href","/docs/transformers/pr_16792/en/model_doc/mctct#transformers.MCTCTForCTC"),c(qW,"href","/docs/transformers/pr_16792/en/model_doc/sew#transformers.SEWForCTC"),c(jW,"href","/docs/transformers/pr_16792/en/model_doc/sew-d#transformers.SEWDForCTC"),c(DW,"href","/docs/transformers/pr_16792/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(GW,"href","/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(OW,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(VW,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(XW,"href","/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMForCTC"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GT,"id","transformers.AutoModelForSpeechSeq2Seq"),c(GT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(GT,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(kd,"class","relative group"),c(zW,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WW,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QW,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HW,"href","/docs/transformers/pr_16792/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(UW,"href","/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QT,"id","transformers.AutoModelForAudioXVector"),c(QT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(QT,"href","#transformers.AutoModelForAudioXVector"),c(Pd,"class","relative group"),c(JW,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YW,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KW,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZW,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(eQ,"href","/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(oQ,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(rQ,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(tQ,"href","/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMForXVector"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(r7,"id","transformers.AutoModelForMaskedImageModeling"),c(r7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(r7,"href","#transformers.AutoModelForMaskedImageModeling"),c(Nd,"class","relative group"),c(aQ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nQ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sQ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lQ,"href","/docs/transformers/pr_16792/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(iQ,"href","/docs/transformers/pr_16792/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(dQ,"href","/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(d7,"id","transformers.AutoModelForObjectDetection"),c(d7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(d7,"href","#transformers.AutoModelForObjectDetection"),c(Gd,"class","relative group"),c(cQ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fQ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mQ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gQ,"href","/docs/transformers/pr_16792/en/model_doc/detr#transformers.DetrForObjectDetection"),c(hQ,"href","/docs/transformers/pr_16792/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(p7,"id","transformers.AutoModelForImageSegmentation"),c(p7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(p7,"href","#transformers.AutoModelForImageSegmentation"),c(Xd,"class","relative group"),c(pQ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uQ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_Q,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bQ,"href","/docs/transformers/pr_16792/en/model_doc/detr#transformers.DetrForSegmentation"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(F7,"id","transformers.AutoModelForSemanticSegmentation"),c(F7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(F7,"href","#transformers.AutoModelForSemanticSegmentation"),c(Qd,"class","relative group"),c(vQ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FQ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TQ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MQ,"href","/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(EQ,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(CQ,"href","/docs/transformers/pr_16792/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(wQ,"href","/docs/transformers/pr_16792/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(y7,"id","transformers.AutoModelForInstanceSegmentation"),c(y7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(y7,"href","#transformers.AutoModelForInstanceSegmentation"),c(Jd,"class","relative group"),c(AQ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LQ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yQ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xQ,"href","/docs/transformers/pr_16792/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(Fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(R7,"id","transformers.TFAutoModel"),c(R7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(R7,"href","#transformers.TFAutoModel"),c(Zd,"class","relative group"),c($Q,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kQ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(SQ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RQ,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertModel"),c(PQ,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.TFBartModel"),c(BQ,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertModel"),c(IQ,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(NQ,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(qQ,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertModel"),c(jQ,"href","/docs/transformers/pr_16792/en/model_doc/clip#transformers.TFCLIPModel"),c(DQ,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.TFConvBertModel"),c(GQ,"href","/docs/transformers/pr_16792/en/model_doc/convnext#transformers.TFConvNextModel"),c(OQ,"href","/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.TFCTRLModel"),c(VQ,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(XQ,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.TFDebertaModel"),c(zQ,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(WQ,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(QQ,"href","/docs/transformers/pr_16792/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(HQ,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraModel"),c(UQ,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(JQ,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelModel"),c(YQ,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(KQ,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.TFGPT2Model"),c(ZQ,"href","/docs/transformers/pr_16792/en/model_doc/gptj#transformers.TFGPTJModel"),c(eH,"href","/docs/transformers/pr_16792/en/model_doc/hubert#transformers.TFHubertModel"),c(oH,"href","/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(rH,"href","/docs/transformers/pr_16792/en/model_doc/led#transformers.TFLEDModel"),c(tH,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.TFLongformerModel"),c(aH,"href","/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.TFLxmertModel"),c(nH,"href","/docs/transformers/pr_16792/en/model_doc/marian#transformers.TFMarianModel"),c(sH,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.TFMBartModel"),c(lH,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(iH,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetModel"),c(dH,"href","/docs/transformers/pr_16792/en/model_doc/mt5#transformers.TFMT5Model"),c(cH,"href","/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(fH,"href","/docs/transformers/pr_16792/en/model_doc/opt#transformers.TFOPTModel"),c(mH,"href","/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.TFPegasusModel"),c(gH,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertModel"),c(hH,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaModel"),c(pH,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerModel"),c(uH,"href","/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(_H,"href","/docs/transformers/pr_16792/en/model_doc/swin#transformers.TFSwinModel"),c(bH,"href","/docs/transformers/pr_16792/en/model_doc/t5#transformers.TFT5Model"),c(vH,"href","/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TFTapasModel"),c(FH,"href","/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(TH,"href","/docs/transformers/pr_16792/en/model_doc/vit#transformers.TFViTModel"),c(MH,"href","/docs/transformers/pr_16792/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(EH,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(CH,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMModel"),c(wH,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(AH,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetModel"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(y9,"id","transformers.TFAutoModelForPreTraining"),c(y9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(y9,"href","#transformers.TFAutoModelForPreTraining"),c(rc,"class","relative group"),c(LH,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yH,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xH,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($H,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(kH,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(SH,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertForPreTraining"),c(RH,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(PH,"href","/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(BH,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(IH,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(NH,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(qH,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(jH,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(DH,"href","/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(GH,"href","/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(OH,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(VH,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(XH,"href","/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(zH,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(WH,"href","/docs/transformers/pr_16792/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(QH,"href","/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(HH,"href","/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(UH,"href","/docs/transformers/pr_16792/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(JH,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(YH,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(KH,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eM,"id","transformers.TFAutoModelForCausalLM"),c(eM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(eM,"href","#transformers.TFAutoModelForCausalLM"),c(nc,"class","relative group"),c(ZH,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eU,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oU,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rU,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(tU,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(aU,"href","/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(nU,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(sU,"href","/docs/transformers/pr_16792/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(lU,"href","/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(iU,"href","/docs/transformers/pr_16792/en/model_doc/opt#transformers.TFOPTForCausalLM"),c(dU,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(cU,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(fU,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(mU,"href","/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(gU,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(hU,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uM,"id","transformers.TFAutoModelForImageClassification"),c(uM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(uM,"href","#transformers.TFAutoModelForImageClassification"),c(ic,"class","relative group"),c(pU,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uU,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_U,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bU,"href","/docs/transformers/pr_16792/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(vU,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(FU,"href","/docs/transformers/pr_16792/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(TU,"href","/docs/transformers/pr_16792/en/model_doc/vit#transformers.TFViTForImageClassification"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EM,"id","transformers.TFAutoModelForMaskedLM"),c(EM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(EM,"href","#transformers.TFAutoModelForMaskedLM"),c(fc,"class","relative group"),c(MU,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(EU,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(CU,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wU,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(AU,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(LU,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(yU,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(xU,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c($U,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(kU,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(SU,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(RU,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(PU,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(BU,"href","/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(IU,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(NU,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(qU,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(jU,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(DU,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(GU,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(OU,"href","/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(VU,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(XU,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WM,"id","transformers.TFAutoModelForSeq2SeqLM"),c(WM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(WM,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(hc,"class","relative group"),c(zU,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WU,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QU,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HU,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(UU,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(JU,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(YU,"href","/docs/transformers/pr_16792/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(KU,"href","/docs/transformers/pr_16792/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(ZU,"href","/docs/transformers/pr_16792/en/model_doc/marian#transformers.TFMarianMTModel"),c(eJ,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(oJ,"href","/docs/transformers/pr_16792/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(rJ,"href","/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(tJ,"href","/docs/transformers/pr_16792/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(n4,"id","transformers.TFAutoModelForSequenceClassification"),c(n4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(n4,"href","#transformers.TFAutoModelForSequenceClassification"),c(_c,"class","relative group"),c(aJ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nJ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sJ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lJ,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(iJ,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(dJ,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(cJ,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(fJ,"href","/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(mJ,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(gJ,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(hJ,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(pJ,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(uJ,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(_J,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(bJ,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(vJ,"href","/docs/transformers/pr_16792/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(FJ,"href","/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(TJ,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(MJ,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(EJ,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(CJ,"href","/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(wJ,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(AJ,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(LJ,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(yJ,"href","/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(xJ,"href","/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c($J,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(kJ,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(SJ,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(P4,"id","transformers.TFAutoModelForMultipleChoice"),c(P4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(P4,"href","#transformers.TFAutoModelForMultipleChoice"),c(Fc,"class","relative group"),c(RJ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PJ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(BJ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IJ,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(NJ,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(qJ,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(jJ,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(DJ,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(GJ,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(OJ,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(VJ,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(XJ,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(zJ,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(WJ,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(QJ,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(HJ,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(UJ,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(JJ,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(YJ,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(KJ,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eE,"id","transformers.TFAutoModelForNextSentencePrediction"),c(eE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(eE,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(Ec,"class","relative group"),c(ZJ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eY,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oY,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rY,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(tY,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nE,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(nE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(nE,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(Ac,"class","relative group"),c(aY,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nY,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sY,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lY,"href","/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dE,"id","transformers.TFAutoModelForTokenClassification"),c(dE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(dE,"href","#transformers.TFAutoModelForTokenClassification"),c(xc,"class","relative group"),c(iY,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dY,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cY,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fY,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(mY,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(gY,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(hY,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(pY,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(uY,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(_Y,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(bY,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(vY,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(FY,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(TY,"href","/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(MY,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(EY,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(CY,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(wY,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(AY,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(LY,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(yY,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(xY,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c($Y,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SE,"id","transformers.TFAutoModelForQuestionAnswering"),c(SE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(SE,"href","#transformers.TFAutoModelForQuestionAnswering"),c(Sc,"class","relative group"),c(kY,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SY,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RY,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PY,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(BY,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(IY,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(NY,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(qY,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(jY,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(DY,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(GY,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(OY,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(VY,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(XY,"href","/docs/transformers/pr_16792/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(zY,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(WY,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(QY,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(HY,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(UY,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(JY,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(YY,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(KY,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(ZY,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oC,"id","transformers.TFAutoModelForVision2Seq"),c(oC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(oC,"href","#transformers.TFAutoModelForVision2Seq"),c(Bc,"class","relative group"),c(eK,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oK,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rK,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tK,"href","/docs/transformers/pr_16792/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nC,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(nC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(nC,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(qc,"class","relative group"),c(aK,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nK,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sK,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lK,"href","/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dC,"id","transformers.FlaxAutoModel"),c(dC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(dC,"href","#transformers.FlaxAutoModel"),c(Gc,"class","relative group"),c(iK,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dK,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cK,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fK,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertModel"),c(mK,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartModel"),c(gK,"href","/docs/transformers/pr_16792/en/model_doc/beit#transformers.FlaxBeitModel"),c(hK,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertModel"),c(pK,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(uK,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(_K,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(bK,"href","/docs/transformers/pr_16792/en/model_doc/clip#transformers.FlaxCLIPModel"),c(vK,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(FK,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraModel"),c(TK,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(MK,"href","/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(EK,"href","/docs/transformers/pr_16792/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(CK,"href","/docs/transformers/pr_16792/en/model_doc/longt5#transformers.FlaxLongT5Model"),c(wK,"href","/docs/transformers/pr_16792/en/model_doc/marian#transformers.FlaxMarianModel"),c(AK,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.FlaxMBartModel"),c(LK,"href","/docs/transformers/pr_16792/en/model_doc/mt5#transformers.FlaxMT5Model"),c(yK,"href","/docs/transformers/pr_16792/en/model_doc/opt#transformers.FlaxOPTModel"),c(xK,"href","/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c($K,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(kK,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(SK,"href","/docs/transformers/pr_16792/en/model_doc/t5#transformers.FlaxT5Model"),c(RK,"href","/docs/transformers/pr_16792/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(PK,"href","/docs/transformers/pr_16792/en/model_doc/vit#transformers.FlaxViTModel"),c(BK,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(IK,"href","/docs/transformers/pr_16792/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(NK,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jC,"id","transformers.FlaxAutoModelForCausalLM"),c(jC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jC,"href","#transformers.FlaxAutoModelForCausalLM"),c(Xc,"class","relative group"),c(qK,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jK,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DK,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GK,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(OK,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(VK,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(XK,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(zK,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(WK,"href","/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(QK,"href","/docs/transformers/pr_16792/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(HK,"href","/docs/transformers/pr_16792/en/model_doc/opt#transformers.FlaxOPTForCausalLM"),c(UK,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(JK,"href","/docs/transformers/pr_16792/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KC,"id","transformers.FlaxAutoModelForPreTraining"),c(KC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(KC,"href","#transformers.FlaxAutoModelForPreTraining"),c(Qc,"class","relative group"),c(YK,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KK,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZK,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eZ,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(oZ,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(rZ,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(tZ,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(aZ,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(nZ,"href","/docs/transformers/pr_16792/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(sZ,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(lZ,"href","/docs/transformers/pr_16792/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(iZ,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(dZ,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(cZ,"href","/docs/transformers/pr_16792/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(fZ,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(mZ,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(h5,"id","transformers.FlaxAutoModelForMaskedLM"),c(h5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(h5,"href","#transformers.FlaxAutoModelForMaskedLM"),c(Jc,"class","relative group"),c(gZ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hZ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pZ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uZ,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(_Z,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(bZ,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(vZ,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(FZ,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(TZ,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(MZ,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(EZ,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(CZ,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(wZ,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(L5,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(L5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(L5,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Zc,"class","relative group"),c(AZ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LZ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yZ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xZ,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c($Z,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(kZ,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(SZ,"href","/docs/transformers/pr_16792/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(RZ,"href","/docs/transformers/pr_16792/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(PZ,"href","/docs/transformers/pr_16792/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(BZ,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(IZ,"href","/docs/transformers/pr_16792/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(NZ,"href","/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(qZ,"href","/docs/transformers/pr_16792/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(D5,"id","transformers.FlaxAutoModelForSequenceClassification"),c(D5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(D5,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(rf,"class","relative group"),c(jZ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DZ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GZ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OZ,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(VZ,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(XZ,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(zZ,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(WZ,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(QZ,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(HZ,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(UZ,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(JZ,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(YZ,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Z5,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(Z5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Z5,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(nf,"class","relative group"),c(KZ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZZ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eee,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oee,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(ree,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(tee,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(aee,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(nee,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(see,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(lee,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(iee,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(dee,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(cee,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(m3,"id","transformers.FlaxAutoModelForTokenClassification"),c(m3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m3,"href","#transformers.FlaxAutoModelForTokenClassification"),c(df,"class","relative group"),c(fee,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mee,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gee,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hee,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(pee,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(uee,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(_ee,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(bee,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(vee,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(Fee,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(Tee,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(E3,"id","transformers.FlaxAutoModelForMultipleChoice"),c(E3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(E3,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(mf,"class","relative group"),c(Mee,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Eee,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Cee,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wee,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(Aee,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(Lee,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(yee,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(xee,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c($ee,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(kee,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(See,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(P3,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(P3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(P3,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(pf,"class","relative group"),c(Ree,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pee,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Bee,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Iee,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(q3,"id","transformers.FlaxAutoModelForImageClassification"),c(q3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(q3,"href","#transformers.FlaxAutoModelForImageClassification"),c(bf,"class","relative group"),c(Nee,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qee,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jee,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ea,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Dee,"href","/docs/transformers/pr_16792/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(Gee,"href","/docs/transformers/pr_16792/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(V3,"id","transformers.FlaxAutoModelForVision2Seq"),c(V3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(V3,"href","#transformers.FlaxAutoModelForVision2Seq"),c(Tf,"class","relative group"),c(Oee,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vee,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Xee,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zee,"href","/docs/transformers/pr_16792/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,_){e(document.head,g),b(f,v,_),b(f,p,_),e(p,m),e(m,u),M(d,u,null),e(p,h),e(p,Eo),e(Eo,Fi),b(f,Lf,_),b(f,at,_),e(at,Ti),e(at,Mi),e(Mi,gA),e(at,yf),b(f,Oe,_),b(f,We,_),e(We,Ei),e(We,Sn),e(Sn,hA),e(We,Rn),e(We,Pn),e(Pn,pA),e(We,Ci),e(We,Bn),e(Bn,uA),e(We,wi),b(f,xf,_),M(ya,f,_),b(f,Qe,_),b(f,Ae,_),e(Ae,Vk),e(Ae,Ai),e(Ai,Xk),e(Ae,zk),b(f,Co,_),b(f,xa,_),e(xa,Wk),e(xa,$f),e($f,Qk),e(xa,nze),b(f,XDe,_),b(f,Li,_),e(Li,kf),e(kf,Dre),M(_A,Dre,null),e(Li,sze),e(Li,Gre),e(Gre,lze),b(f,zDe,_),b(f,In,_),e(In,ize),e(In,Ore),e(Ore,dze),e(In,cze),e(In,Vre),e(Vre,fze),e(In,mze),b(f,WDe,_),M(bA,f,_),b(f,QDe,_),b(f,Hk,_),e(Hk,gze),b(f,HDe,_),M(Sf,f,_),b(f,UDe,_),b(f,yi,_),e(yi,Rf),e(Rf,Xre),M(vA,Xre,null),e(yi,hze),e(yi,zre),e(zre,pze),b(f,JDe,_),b(f,wo,_),M(FA,wo,null),e(wo,uze),e(wo,TA),e(TA,_ze),e(TA,Uk),e(Uk,bze),e(TA,vze),e(wo,Fze),e(wo,MA),e(MA,Tze),e(MA,Wre),e(Wre,Mze),e(MA,Eze),e(wo,Cze),e(wo,wr),M(EA,wr,null),e(wr,wze),e(wr,Qre),e(Qre,Aze),e(wr,Lze),e(wr,xi),e(xi,yze),e(xi,Hre),e(Hre,xze),e(xi,$ze),e(xi,Ure),e(Ure,kze),e(xi,Sze),e(wr,Rze),e(wr,A),e(A,Pf),e(Pf,Jre),e(Jre,Pze),e(Pf,Bze),e(Pf,Jk),e(Jk,Ize),e(Pf,Nze),e(A,qze),e(A,Bf),e(Bf,Yre),e(Yre,jze),e(Bf,Dze),e(Bf,Yk),e(Yk,Gze),e(Bf,Oze),e(A,Vze),e(A,If),e(If,Kre),e(Kre,Xze),e(If,zze),e(If,Kk),e(Kk,Wze),e(If,Qze),e(A,Hze),e(A,Nf),e(Nf,Zre),e(Zre,Uze),e(Nf,Jze),e(Nf,Zk),e(Zk,Yze),e(Nf,Kze),e(A,Zze),e(A,qf),e(qf,ete),e(ete,eWe),e(qf,oWe),e(qf,eS),e(eS,rWe),e(qf,tWe),e(A,aWe),e(A,jf),e(jf,ote),e(ote,nWe),e(jf,sWe),e(jf,oS),e(oS,lWe),e(jf,iWe),e(A,dWe),e(A,Df),e(Df,rte),e(rte,cWe),e(Df,fWe),e(Df,rS),e(rS,mWe),e(Df,gWe),e(A,hWe),e(A,Gf),e(Gf,tte),e(tte,pWe),e(Gf,uWe),e(Gf,tS),e(tS,_We),e(Gf,bWe),e(A,vWe),e(A,Of),e(Of,ate),e(ate,FWe),e(Of,TWe),e(Of,aS),e(aS,MWe),e(Of,EWe),e(A,CWe),e(A,Vf),e(Vf,nte),e(nte,wWe),e(Vf,AWe),e(Vf,nS),e(nS,LWe),e(Vf,yWe),e(A,xWe),e(A,Xf),e(Xf,ste),e(ste,$We),e(Xf,kWe),e(Xf,sS),e(sS,SWe),e(Xf,RWe),e(A,PWe),e(A,zf),e(zf,lte),e(lte,BWe),e(zf,IWe),e(zf,lS),e(lS,NWe),e(zf,qWe),e(A,jWe),e(A,Wf),e(Wf,ite),e(ite,DWe),e(Wf,GWe),e(Wf,iS),e(iS,OWe),e(Wf,VWe),e(A,XWe),e(A,Qf),e(Qf,dte),e(dte,zWe),e(Qf,WWe),e(Qf,dS),e(dS,QWe),e(Qf,HWe),e(A,UWe),e(A,Hf),e(Hf,cte),e(cte,JWe),e(Hf,YWe),e(Hf,cS),e(cS,KWe),e(Hf,ZWe),e(A,eQe),e(A,Uf),e(Uf,fte),e(fte,oQe),e(Uf,rQe),e(Uf,fS),e(fS,tQe),e(Uf,aQe),e(A,nQe),e(A,Jf),e(Jf,mte),e(mte,sQe),e(Jf,lQe),e(Jf,mS),e(mS,iQe),e(Jf,dQe),e(A,cQe),e(A,Yf),e(Yf,gte),e(gte,fQe),e(Yf,mQe),e(Yf,gS),e(gS,gQe),e(Yf,hQe),e(A,pQe),e(A,Kf),e(Kf,hte),e(hte,uQe),e(Kf,_Qe),e(Kf,hS),e(hS,bQe),e(Kf,vQe),e(A,FQe),e(A,Zf),e(Zf,pte),e(pte,TQe),e(Zf,MQe),e(Zf,pS),e(pS,EQe),e(Zf,CQe),e(A,wQe),e(A,em),e(em,ute),e(ute,AQe),e(em,LQe),e(em,uS),e(uS,yQe),e(em,xQe),e(A,$Qe),e(A,om),e(om,_te),e(_te,kQe),e(om,SQe),e(om,_S),e(_S,RQe),e(om,PQe),e(A,BQe),e(A,rm),e(rm,bte),e(bte,IQe),e(rm,NQe),e(rm,bS),e(bS,qQe),e(rm,jQe),e(A,DQe),e(A,tm),e(tm,vte),e(vte,GQe),e(tm,OQe),e(tm,vS),e(vS,VQe),e(tm,XQe),e(A,zQe),e(A,am),e(am,Fte),e(Fte,WQe),e(am,QQe),e(am,FS),e(FS,HQe),e(am,UQe),e(A,JQe),e(A,nm),e(nm,Tte),e(Tte,YQe),e(nm,KQe),e(nm,TS),e(TS,ZQe),e(nm,eHe),e(A,oHe),e(A,sm),e(sm,Mte),e(Mte,rHe),e(sm,tHe),e(sm,MS),e(MS,aHe),e(sm,nHe),e(A,sHe),e(A,lm),e(lm,Ete),e(Ete,lHe),e(lm,iHe),e(lm,ES),e(ES,dHe),e(lm,cHe),e(A,fHe),e(A,im),e(im,Cte),e(Cte,mHe),e(im,gHe),e(im,CS),e(CS,hHe),e(im,pHe),e(A,uHe),e(A,dm),e(dm,wte),e(wte,_He),e(dm,bHe),e(dm,wS),e(wS,vHe),e(dm,FHe),e(A,THe),e(A,cm),e(cm,Ate),e(Ate,MHe),e(cm,EHe),e(cm,AS),e(AS,CHe),e(cm,wHe),e(A,AHe),e(A,fm),e(fm,Lte),e(Lte,LHe),e(fm,yHe),e(fm,LS),e(LS,xHe),e(fm,$He),e(A,kHe),e(A,mm),e(mm,yte),e(yte,SHe),e(mm,RHe),e(mm,yS),e(yS,PHe),e(mm,BHe),e(A,IHe),e(A,gm),e(gm,xte),e(xte,NHe),e(gm,qHe),e(gm,xS),e(xS,jHe),e(gm,DHe),e(A,GHe),e(A,hm),e(hm,$te),e($te,OHe),e(hm,VHe),e(hm,$S),e($S,XHe),e(hm,zHe),e(A,WHe),e(A,pm),e(pm,kte),e(kte,QHe),e(pm,HHe),e(pm,kS),e(kS,UHe),e(pm,JHe),e(A,YHe),e(A,um),e(um,Ste),e(Ste,KHe),e(um,ZHe),e(um,SS),e(SS,eUe),e(um,oUe),e(A,rUe),e(A,_m),e(_m,Rte),e(Rte,tUe),e(_m,aUe),e(_m,RS),e(RS,nUe),e(_m,sUe),e(A,lUe),e(A,bm),e(bm,Pte),e(Pte,iUe),e(bm,dUe),e(bm,PS),e(PS,cUe),e(bm,fUe),e(A,mUe),e(A,vm),e(vm,Bte),e(Bte,gUe),e(vm,hUe),e(vm,BS),e(BS,pUe),e(vm,uUe),e(A,_Ue),e(A,Fm),e(Fm,Ite),e(Ite,bUe),e(Fm,vUe),e(Fm,IS),e(IS,FUe),e(Fm,TUe),e(A,MUe),e(A,Tm),e(Tm,Nte),e(Nte,EUe),e(Tm,CUe),e(Tm,NS),e(NS,wUe),e(Tm,AUe),e(A,LUe),e(A,Mm),e(Mm,qte),e(qte,yUe),e(Mm,xUe),e(Mm,qS),e(qS,$Ue),e(Mm,kUe),e(A,SUe),e(A,Em),e(Em,jte),e(jte,RUe),e(Em,PUe),e(Em,jS),e(jS,BUe),e(Em,IUe),e(A,NUe),e(A,Cm),e(Cm,Dte),e(Dte,qUe),e(Cm,jUe),e(Cm,DS),e(DS,DUe),e(Cm,GUe),e(A,OUe),e(A,wm),e(wm,Gte),e(Gte,VUe),e(wm,XUe),e(wm,GS),e(GS,zUe),e(wm,WUe),e(A,QUe),e(A,Am),e(Am,Ote),e(Ote,HUe),e(Am,UUe),e(Am,OS),e(OS,JUe),e(Am,YUe),e(A,KUe),e(A,Lm),e(Lm,Vte),e(Vte,ZUe),e(Lm,eJe),e(Lm,VS),e(VS,oJe),e(Lm,rJe),e(A,tJe),e(A,ym),e(ym,Xte),e(Xte,aJe),e(ym,nJe),e(ym,XS),e(XS,sJe),e(ym,lJe),e(A,iJe),e(A,xm),e(xm,zte),e(zte,dJe),e(xm,cJe),e(xm,zS),e(zS,fJe),e(xm,mJe),e(A,gJe),e(A,$m),e($m,Wte),e(Wte,hJe),e($m,pJe),e($m,WS),e(WS,uJe),e($m,_Je),e(A,bJe),e(A,km),e(km,Qte),e(Qte,vJe),e(km,FJe),e(km,QS),e(QS,TJe),e(km,MJe),e(A,EJe),e(A,Sm),e(Sm,Hte),e(Hte,CJe),e(Sm,wJe),e(Sm,HS),e(HS,AJe),e(Sm,LJe),e(A,yJe),e(A,Rm),e(Rm,Ute),e(Ute,xJe),e(Rm,$Je),e(Rm,US),e(US,kJe),e(Rm,SJe),e(A,RJe),e(A,Pm),e(Pm,Jte),e(Jte,PJe),e(Pm,BJe),e(Pm,JS),e(JS,IJe),e(Pm,NJe),e(A,qJe),e(A,Bm),e(Bm,Yte),e(Yte,jJe),e(Bm,DJe),e(Bm,YS),e(YS,GJe),e(Bm,OJe),e(A,VJe),e(A,Im),e(Im,Kte),e(Kte,XJe),e(Im,zJe),e(Im,KS),e(KS,WJe),e(Im,QJe),e(A,HJe),e(A,Nm),e(Nm,Zte),e(Zte,UJe),e(Nm,JJe),e(Nm,ZS),e(ZS,YJe),e(Nm,KJe),e(A,ZJe),e(A,qm),e(qm,eae),e(eae,eYe),e(qm,oYe),e(qm,eR),e(eR,rYe),e(qm,tYe),e(A,aYe),e(A,jm),e(jm,oae),e(oae,nYe),e(jm,sYe),e(jm,oR),e(oR,lYe),e(jm,iYe),e(A,dYe),e(A,Dm),e(Dm,rae),e(rae,cYe),e(Dm,fYe),e(Dm,rR),e(rR,mYe),e(Dm,gYe),e(A,hYe),e(A,Gm),e(Gm,tae),e(tae,pYe),e(Gm,uYe),e(Gm,tR),e(tR,_Ye),e(Gm,bYe),e(A,vYe),e(A,Om),e(Om,aae),e(aae,FYe),e(Om,TYe),e(Om,aR),e(aR,MYe),e(Om,EYe),e(A,CYe),e(A,Vm),e(Vm,nae),e(nae,wYe),e(Vm,AYe),e(Vm,nR),e(nR,LYe),e(Vm,yYe),e(A,xYe),e(A,Xm),e(Xm,sae),e(sae,$Ye),e(Xm,kYe),e(Xm,sR),e(sR,SYe),e(Xm,RYe),e(A,PYe),e(A,zm),e(zm,lae),e(lae,BYe),e(zm,IYe),e(zm,lR),e(lR,NYe),e(zm,qYe),e(A,jYe),e(A,Wm),e(Wm,iae),e(iae,DYe),e(Wm,GYe),e(Wm,iR),e(iR,OYe),e(Wm,VYe),e(A,XYe),e(A,Qm),e(Qm,dae),e(dae,zYe),e(Qm,WYe),e(Qm,dR),e(dR,QYe),e(Qm,HYe),e(A,UYe),e(A,Hm),e(Hm,cae),e(cae,JYe),e(Hm,YYe),e(Hm,cR),e(cR,KYe),e(Hm,ZYe),e(A,eKe),e(A,Um),e(Um,fae),e(fae,oKe),e(Um,rKe),e(Um,fR),e(fR,tKe),e(Um,aKe),e(A,nKe),e(A,Jm),e(Jm,mae),e(mae,sKe),e(Jm,lKe),e(Jm,mR),e(mR,iKe),e(Jm,dKe),e(A,cKe),e(A,Ym),e(Ym,gae),e(gae,fKe),e(Ym,mKe),e(Ym,gR),e(gR,gKe),e(Ym,hKe),e(A,pKe),e(A,Km),e(Km,hae),e(hae,uKe),e(Km,_Ke),e(Km,hR),e(hR,bKe),e(Km,vKe),e(A,FKe),e(A,Zm),e(Zm,pae),e(pae,TKe),e(Zm,MKe),e(Zm,pR),e(pR,EKe),e(Zm,CKe),e(A,wKe),e(A,eg),e(eg,uae),e(uae,AKe),e(eg,LKe),e(eg,uR),e(uR,yKe),e(eg,xKe),e(A,$Ke),e(A,og),e(og,_ae),e(_ae,kKe),e(og,SKe),e(og,_R),e(_R,RKe),e(og,PKe),e(A,BKe),e(A,rg),e(rg,bae),e(bae,IKe),e(rg,NKe),e(rg,bR),e(bR,qKe),e(rg,jKe),e(A,DKe),e(A,tg),e(tg,vae),e(vae,GKe),e(tg,OKe),e(tg,vR),e(vR,VKe),e(tg,XKe),e(A,zKe),e(A,ag),e(ag,Fae),e(Fae,WKe),e(ag,QKe),e(ag,FR),e(FR,HKe),e(ag,UKe),e(A,JKe),e(A,ng),e(ng,Tae),e(Tae,YKe),e(ng,KKe),e(ng,TR),e(TR,ZKe),e(ng,eZe),e(A,oZe),e(A,sg),e(sg,Mae),e(Mae,rZe),e(sg,tZe),e(sg,MR),e(MR,aZe),e(sg,nZe),e(A,sZe),e(A,lg),e(lg,Eae),e(Eae,lZe),e(lg,iZe),e(lg,ER),e(ER,dZe),e(lg,cZe),e(A,fZe),e(A,ig),e(ig,Cae),e(Cae,mZe),e(ig,gZe),e(ig,CR),e(CR,hZe),e(ig,pZe),e(A,uZe),e(A,dg),e(dg,wae),e(wae,_Ze),e(dg,bZe),e(dg,wR),e(wR,vZe),e(dg,FZe),e(A,TZe),e(A,cg),e(cg,Aae),e(Aae,MZe),e(cg,EZe),e(cg,AR),e(AR,CZe),e(cg,wZe),e(A,AZe),e(A,fg),e(fg,Lae),e(Lae,LZe),e(fg,yZe),e(fg,LR),e(LR,xZe),e(fg,$Ze),e(A,kZe),e(A,mg),e(mg,yae),e(yae,SZe),e(mg,RZe),e(mg,yR),e(yR,PZe),e(mg,BZe),e(A,IZe),e(A,gg),e(gg,xae),e(xae,NZe),e(gg,qZe),e(gg,xR),e(xR,jZe),e(gg,DZe),e(A,GZe),e(A,hg),e(hg,$ae),e($ae,OZe),e(hg,VZe),e(hg,$R),e($R,XZe),e(hg,zZe),e(A,WZe),e(A,pg),e(pg,kae),e(kae,QZe),e(pg,HZe),e(pg,kR),e(kR,UZe),e(pg,JZe),e(A,YZe),e(A,ug),e(ug,Sae),e(Sae,KZe),e(ug,ZZe),e(ug,SR),e(SR,eeo),e(ug,oeo),e(A,reo),e(A,_g),e(_g,Rae),e(Rae,teo),e(_g,aeo),e(_g,RR),e(RR,neo),e(_g,seo),e(A,leo),e(A,bg),e(bg,Pae),e(Pae,ieo),e(bg,deo),e(bg,PR),e(PR,ceo),e(bg,feo),e(A,meo),e(A,vg),e(vg,Bae),e(Bae,geo),e(vg,heo),e(vg,BR),e(BR,peo),e(vg,ueo),e(A,_eo),e(A,Fg),e(Fg,Iae),e(Iae,beo),e(Fg,veo),e(Fg,IR),e(IR,Feo),e(Fg,Teo),e(A,Meo),e(A,Tg),e(Tg,Nae),e(Nae,Eeo),e(Tg,Ceo),e(Tg,NR),e(NR,weo),e(Tg,Aeo),e(A,Leo),e(A,Mg),e(Mg,qae),e(qae,yeo),e(Mg,xeo),e(Mg,qR),e(qR,$eo),e(Mg,keo),e(A,Seo),e(A,Eg),e(Eg,jae),e(jae,Reo),e(Eg,Peo),e(Eg,jR),e(jR,Beo),e(Eg,Ieo),e(A,Neo),e(A,Cg),e(Cg,Dae),e(Dae,qeo),e(Cg,jeo),e(Cg,DR),e(DR,Deo),e(Cg,Geo),e(A,Oeo),e(A,wg),e(wg,Gae),e(Gae,Veo),e(wg,Xeo),e(wg,GR),e(GR,zeo),e(wg,Weo),e(A,Qeo),e(A,Ag),e(Ag,Oae),e(Oae,Heo),e(Ag,Ueo),e(Ag,OR),e(OR,Jeo),e(Ag,Yeo),e(A,Keo),e(A,Lg),e(Lg,Vae),e(Vae,Zeo),e(Lg,eoo),e(Lg,VR),e(VR,ooo),e(Lg,roo),e(A,too),e(A,yg),e(yg,Xae),e(Xae,aoo),e(yg,noo),e(yg,XR),e(XR,soo),e(yg,loo),e(A,ioo),e(A,xg),e(xg,zae),e(zae,doo),e(xg,coo),e(xg,zR),e(zR,foo),e(xg,moo),e(A,goo),e(A,$g),e($g,Wae),e(Wae,hoo),e($g,poo),e($g,WR),e(WR,uoo),e($g,_oo),e(A,boo),e(A,kg),e(kg,Qae),e(Qae,voo),e(kg,Foo),e(kg,QR),e(QR,Too),e(kg,Moo),e(A,Eoo),e(A,Sg),e(Sg,Hae),e(Hae,Coo),e(Sg,woo),e(Sg,HR),e(HR,Aoo),e(Sg,Loo),e(A,yoo),e(A,Rg),e(Rg,Uae),e(Uae,xoo),e(Rg,$oo),e(Rg,UR),e(UR,koo),e(Rg,Soo),e(A,Roo),e(A,Pg),e(Pg,Jae),e(Jae,Poo),e(Pg,Boo),e(Pg,JR),e(JR,Ioo),e(Pg,Noo),e(A,qoo),e(A,Bg),e(Bg,Yae),e(Yae,joo),e(Bg,Doo),e(Bg,YR),e(YR,Goo),e(Bg,Ooo),e(A,Voo),e(A,Ig),e(Ig,Kae),e(Kae,Xoo),e(Ig,zoo),e(Ig,KR),e(KR,Woo),e(Ig,Qoo),e(A,Hoo),e(A,Ng),e(Ng,Zae),e(Zae,Uoo),e(Ng,Joo),e(Ng,ZR),e(ZR,Yoo),e(Ng,Koo),e(A,Zoo),e(A,qg),e(qg,ene),e(ene,ero),e(qg,oro),e(qg,eP),e(eP,rro),e(qg,tro),e(wr,aro),M(jg,wr,null),e(wo,nro),e(wo,Dg),M(CA,Dg,null),e(Dg,sro),e(Dg,one),e(one,lro),b(f,YDe,_),b(f,$i,_),e($i,Gg),e(Gg,rne),M(wA,rne,null),e($i,iro),e($i,tne),e(tne,dro),b(f,KDe,_),b(f,Ao,_),M(AA,Ao,null),e(Ao,cro),e(Ao,LA),e(LA,fro),e(LA,oP),e(oP,mro),e(LA,gro),e(Ao,hro),e(Ao,yA),e(yA,pro),e(yA,ane),e(ane,uro),e(yA,_ro),e(Ao,bro),e(Ao,Ar),M(xA,Ar,null),e(Ar,vro),e(Ar,nne),e(nne,Fro),e(Ar,Tro),e(Ar,$a),e($a,Mro),e($a,sne),e(sne,Ero),e($a,Cro),e($a,lne),e(lne,wro),e($a,Aro),e($a,ine),e(ine,Lro),e($a,yro),e(Ar,xro),e(Ar,k),e(k,Nn),e(Nn,dne),e(dne,$ro),e(Nn,kro),e(Nn,rP),e(rP,Sro),e(Nn,Rro),e(Nn,tP),e(tP,Pro),e(Nn,Bro),e(k,Iro),e(k,qn),e(qn,cne),e(cne,Nro),e(qn,qro),e(qn,aP),e(aP,jro),e(qn,Dro),e(qn,nP),e(nP,Gro),e(qn,Oro),e(k,Vro),e(k,jn),e(jn,fne),e(fne,Xro),e(jn,zro),e(jn,sP),e(sP,Wro),e(jn,Qro),e(jn,lP),e(lP,Hro),e(jn,Uro),e(k,Jro),e(k,Og),e(Og,mne),e(mne,Yro),e(Og,Kro),e(Og,iP),e(iP,Zro),e(Og,eto),e(k,oto),e(k,Dn),e(Dn,gne),e(gne,rto),e(Dn,tto),e(Dn,dP),e(dP,ato),e(Dn,nto),e(Dn,cP),e(cP,sto),e(Dn,lto),e(k,ito),e(k,Vg),e(Vg,hne),e(hne,dto),e(Vg,cto),e(Vg,fP),e(fP,fto),e(Vg,mto),e(k,gto),e(k,Xg),e(Xg,pne),e(pne,hto),e(Xg,pto),e(Xg,mP),e(mP,uto),e(Xg,_to),e(k,bto),e(k,zg),e(zg,une),e(une,vto),e(zg,Fto),e(zg,gP),e(gP,Tto),e(zg,Mto),e(k,Eto),e(k,Gn),e(Gn,_ne),e(_ne,Cto),e(Gn,wto),e(Gn,hP),e(hP,Ato),e(Gn,Lto),e(Gn,pP),e(pP,yto),e(Gn,xto),e(k,$to),e(k,On),e(On,bne),e(bne,kto),e(On,Sto),e(On,uP),e(uP,Rto),e(On,Pto),e(On,_P),e(_P,Bto),e(On,Ito),e(k,Nto),e(k,Vn),e(Vn,vne),e(vne,qto),e(Vn,jto),e(Vn,bP),e(bP,Dto),e(Vn,Gto),e(Vn,vP),e(vP,Oto),e(Vn,Vto),e(k,Xto),e(k,Wg),e(Wg,Fne),e(Fne,zto),e(Wg,Wto),e(Wg,FP),e(FP,Qto),e(Wg,Hto),e(k,Uto),e(k,Qg),e(Qg,Tne),e(Tne,Jto),e(Qg,Yto),e(Qg,TP),e(TP,Kto),e(Qg,Zto),e(k,eao),e(k,Hg),e(Hg,Mne),e(Mne,oao),e(Hg,rao),e(Hg,MP),e(MP,tao),e(Hg,aao),e(k,nao),e(k,Xn),e(Xn,Ene),e(Ene,sao),e(Xn,lao),e(Xn,EP),e(EP,iao),e(Xn,dao),e(Xn,CP),e(CP,cao),e(Xn,fao),e(k,mao),e(k,Ug),e(Ug,Cne),e(Cne,gao),e(Ug,hao),e(Ug,wP),e(wP,pao),e(Ug,uao),e(k,_ao),e(k,zn),e(zn,wne),e(wne,bao),e(zn,vao),e(zn,AP),e(AP,Fao),e(zn,Tao),e(zn,LP),e(LP,Mao),e(zn,Eao),e(k,Cao),e(k,Wn),e(Wn,Ane),e(Ane,wao),e(Wn,Aao),e(Wn,yP),e(yP,Lao),e(Wn,yao),e(Wn,xP),e(xP,xao),e(Wn,$ao),e(k,kao),e(k,Qn),e(Qn,Lne),e(Lne,Sao),e(Qn,Rao),e(Qn,$P),e($P,Pao),e(Qn,Bao),e(Qn,kP),e(kP,Iao),e(Qn,Nao),e(k,qao),e(k,Jg),e(Jg,yne),e(yne,jao),e(Jg,Dao),e(Jg,SP),e(SP,Gao),e(Jg,Oao),e(k,Vao),e(k,Hn),e(Hn,xne),e(xne,Xao),e(Hn,zao),e(Hn,RP),e(RP,Wao),e(Hn,Qao),e(Hn,PP),e(PP,Hao),e(Hn,Uao),e(k,Jao),e(k,Un),e(Un,$ne),e($ne,Yao),e(Un,Kao),e(Un,BP),e(BP,Zao),e(Un,eno),e(Un,IP),e(IP,ono),e(Un,rno),e(k,tno),e(k,Jn),e(Jn,kne),e(kne,ano),e(Jn,nno),e(Jn,NP),e(NP,sno),e(Jn,lno),e(Jn,qP),e(qP,ino),e(Jn,dno),e(k,cno),e(k,Yn),e(Yn,Sne),e(Sne,fno),e(Yn,mno),e(Yn,jP),e(jP,gno),e(Yn,hno),e(Yn,DP),e(DP,pno),e(Yn,uno),e(k,_no),e(k,Kn),e(Kn,Rne),e(Rne,bno),e(Kn,vno),e(Kn,GP),e(GP,Fno),e(Kn,Tno),e(Kn,OP),e(OP,Mno),e(Kn,Eno),e(k,Cno),e(k,Zn),e(Zn,Pne),e(Pne,wno),e(Zn,Ano),e(Zn,VP),e(VP,Lno),e(Zn,yno),e(Zn,XP),e(XP,xno),e(Zn,$no),e(k,kno),e(k,Yg),e(Yg,Bne),e(Bne,Sno),e(Yg,Rno),e(Yg,zP),e(zP,Pno),e(Yg,Bno),e(k,Ino),e(k,es),e(es,Ine),e(Ine,Nno),e(es,qno),e(es,WP),e(WP,jno),e(es,Dno),e(es,QP),e(QP,Gno),e(es,Ono),e(k,Vno),e(k,Kg),e(Kg,Nne),e(Nne,Xno),e(Kg,zno),e(Kg,HP),e(HP,Wno),e(Kg,Qno),e(k,Hno),e(k,os),e(os,qne),e(qne,Uno),e(os,Jno),e(os,UP),e(UP,Yno),e(os,Kno),e(os,JP),e(JP,Zno),e(os,eso),e(k,oso),e(k,rs),e(rs,jne),e(jne,rso),e(rs,tso),e(rs,YP),e(YP,aso),e(rs,nso),e(rs,KP),e(KP,sso),e(rs,lso),e(k,iso),e(k,ts),e(ts,Dne),e(Dne,dso),e(ts,cso),e(ts,ZP),e(ZP,fso),e(ts,mso),e(ts,eB),e(eB,gso),e(ts,hso),e(k,pso),e(k,Zg),e(Zg,Gne),e(Gne,uso),e(Zg,_so),e(Zg,oB),e(oB,bso),e(Zg,vso),e(k,Fso),e(k,as),e(as,One),e(One,Tso),e(as,Mso),e(as,rB),e(rB,Eso),e(as,Cso),e(as,tB),e(tB,wso),e(as,Aso),e(k,Lso),e(k,ns),e(ns,Vne),e(Vne,yso),e(ns,xso),e(ns,aB),e(aB,$so),e(ns,kso),e(ns,nB),e(nB,Sso),e(ns,Rso),e(k,Pso),e(k,eh),e(eh,Xne),e(Xne,Bso),e(eh,Iso),e(eh,sB),e(sB,Nso),e(eh,qso),e(k,jso),e(k,ss),e(ss,zne),e(zne,Dso),e(ss,Gso),e(ss,lB),e(lB,Oso),e(ss,Vso),e(ss,iB),e(iB,Xso),e(ss,zso),e(k,Wso),e(k,ls),e(ls,Wne),e(Wne,Qso),e(ls,Hso),e(ls,dB),e(dB,Uso),e(ls,Jso),e(ls,cB),e(cB,Yso),e(ls,Kso),e(k,Zso),e(k,is),e(is,Qne),e(Qne,elo),e(is,olo),e(is,fB),e(fB,rlo),e(is,tlo),e(is,mB),e(mB,alo),e(is,nlo),e(k,slo),e(k,ds),e(ds,Hne),e(Hne,llo),e(ds,ilo),e(ds,gB),e(gB,dlo),e(ds,clo),e(ds,hB),e(hB,flo),e(ds,mlo),e(k,glo),e(k,cs),e(cs,Une),e(Une,hlo),e(cs,plo),e(cs,pB),e(pB,ulo),e(cs,_lo),e(cs,uB),e(uB,blo),e(cs,vlo),e(k,Flo),e(k,fs),e(fs,Jne),e(Jne,Tlo),e(fs,Mlo),e(fs,_B),e(_B,Elo),e(fs,Clo),e(fs,bB),e(bB,wlo),e(fs,Alo),e(k,Llo),e(k,ms),e(ms,Yne),e(Yne,ylo),e(ms,xlo),e(ms,vB),e(vB,$lo),e(ms,klo),e(ms,FB),e(FB,Slo),e(ms,Rlo),e(k,Plo),e(k,gs),e(gs,Kne),e(Kne,Blo),e(gs,Ilo),e(gs,TB),e(TB,Nlo),e(gs,qlo),e(gs,MB),e(MB,jlo),e(gs,Dlo),e(k,Glo),e(k,oh),e(oh,Zne),e(Zne,Olo),e(oh,Vlo),e(oh,EB),e(EB,Xlo),e(oh,zlo),e(k,Wlo),e(k,hs),e(hs,ese),e(ese,Qlo),e(hs,Hlo),e(hs,CB),e(CB,Ulo),e(hs,Jlo),e(hs,wB),e(wB,Ylo),e(hs,Klo),e(k,Zlo),e(k,rh),e(rh,ose),e(ose,eio),e(rh,oio),e(rh,AB),e(AB,rio),e(rh,tio),e(k,aio),e(k,th),e(th,rse),e(rse,nio),e(th,sio),e(th,LB),e(LB,lio),e(th,iio),e(k,dio),e(k,ps),e(ps,tse),e(tse,cio),e(ps,fio),e(ps,yB),e(yB,mio),e(ps,gio),e(ps,xB),e(xB,hio),e(ps,pio),e(k,uio),e(k,us),e(us,ase),e(ase,_io),e(us,bio),e(us,$B),e($B,vio),e(us,Fio),e(us,kB),e(kB,Tio),e(us,Mio),e(k,Eio),e(k,_s),e(_s,nse),e(nse,Cio),e(_s,wio),e(_s,SB),e(SB,Aio),e(_s,Lio),e(_s,RB),e(RB,yio),e(_s,xio),e(k,$io),e(k,ah),e(ah,sse),e(sse,kio),e(ah,Sio),e(ah,PB),e(PB,Rio),e(ah,Pio),e(k,Bio),e(k,bs),e(bs,lse),e(lse,Iio),e(bs,Nio),e(bs,BB),e(BB,qio),e(bs,jio),e(bs,IB),e(IB,Dio),e(bs,Gio),e(k,Oio),e(k,vs),e(vs,ise),e(ise,Vio),e(vs,Xio),e(vs,NB),e(NB,zio),e(vs,Wio),e(vs,qB),e(qB,Qio),e(vs,Hio),e(k,Uio),e(k,Fs),e(Fs,dse),e(dse,Jio),e(Fs,Yio),e(Fs,jB),e(jB,Kio),e(Fs,Zio),e(Fs,DB),e(DB,edo),e(Fs,odo),e(k,rdo),e(k,Ts),e(Ts,cse),e(cse,tdo),e(Ts,ado),e(Ts,GB),e(GB,ndo),e(Ts,sdo),e(Ts,OB),e(OB,ldo),e(Ts,ido),e(k,ddo),e(k,Ms),e(Ms,fse),e(fse,cdo),e(Ms,fdo),e(Ms,VB),e(VB,mdo),e(Ms,gdo),e(Ms,XB),e(XB,hdo),e(Ms,pdo),e(k,udo),e(k,nh),e(nh,mse),e(mse,_do),e(nh,bdo),e(nh,zB),e(zB,vdo),e(nh,Fdo),e(k,Tdo),e(k,Es),e(Es,gse),e(gse,Mdo),e(Es,Edo),e(Es,WB),e(WB,Cdo),e(Es,wdo),e(Es,QB),e(QB,Ado),e(Es,Ldo),e(k,ydo),e(k,sh),e(sh,hse),e(hse,xdo),e(sh,$do),e(sh,HB),e(HB,kdo),e(sh,Sdo),e(k,Rdo),e(k,lh),e(lh,pse),e(pse,Pdo),e(lh,Bdo),e(lh,UB),e(UB,Ido),e(lh,Ndo),e(k,qdo),e(k,ih),e(ih,use),e(use,jdo),e(ih,Ddo),e(ih,JB),e(JB,Gdo),e(ih,Odo),e(k,Vdo),e(k,dh),e(dh,_se),e(_se,Xdo),e(dh,zdo),e(dh,YB),e(YB,Wdo),e(dh,Qdo),e(k,Hdo),e(k,Cs),e(Cs,bse),e(bse,Udo),e(Cs,Jdo),e(Cs,KB),e(KB,Ydo),e(Cs,Kdo),e(Cs,ZB),e(ZB,Zdo),e(Cs,eco),e(k,oco),e(k,ch),e(ch,vse),e(vse,rco),e(ch,tco),e(ch,eI),e(eI,aco),e(ch,nco),e(k,sco),e(k,ws),e(ws,Fse),e(Fse,lco),e(ws,ico),e(ws,oI),e(oI,dco),e(ws,cco),e(ws,rI),e(rI,fco),e(ws,mco),e(k,gco),e(k,As),e(As,Tse),e(Tse,hco),e(As,pco),e(As,tI),e(tI,uco),e(As,_co),e(As,aI),e(aI,bco),e(As,vco),e(k,Fco),e(k,Ls),e(Ls,Mse),e(Mse,Tco),e(Ls,Mco),e(Ls,nI),e(nI,Eco),e(Ls,Cco),e(Ls,sI),e(sI,wco),e(Ls,Aco),e(k,Lco),e(k,ys),e(ys,Ese),e(Ese,yco),e(ys,xco),e(ys,lI),e(lI,$co),e(ys,kco),e(ys,iI),e(iI,Sco),e(ys,Rco),e(k,Pco),e(k,xs),e(xs,Cse),e(Cse,Bco),e(xs,Ico),e(xs,dI),e(dI,Nco),e(xs,qco),e(xs,cI),e(cI,jco),e(xs,Dco),e(k,Gco),e(k,$s),e($s,wse),e(wse,Oco),e($s,Vco),e($s,fI),e(fI,Xco),e($s,zco),e($s,mI),e(mI,Wco),e($s,Qco),e(k,Hco),e(k,fh),e(fh,Ase),e(Ase,Uco),e(fh,Jco),e(fh,gI),e(gI,Yco),e(fh,Kco),e(k,Zco),e(k,mh),e(mh,Lse),e(Lse,efo),e(mh,ofo),e(mh,hI),e(hI,rfo),e(mh,tfo),e(k,afo),e(k,ks),e(ks,yse),e(yse,nfo),e(ks,sfo),e(ks,pI),e(pI,lfo),e(ks,ifo),e(ks,uI),e(uI,dfo),e(ks,cfo),e(k,ffo),e(k,Ss),e(Ss,xse),e(xse,mfo),e(Ss,gfo),e(Ss,_I),e(_I,hfo),e(Ss,pfo),e(Ss,bI),e(bI,ufo),e(Ss,_fo),e(k,bfo),e(k,Rs),e(Rs,$se),e($se,vfo),e(Rs,Ffo),e(Rs,vI),e(vI,Tfo),e(Rs,Mfo),e(Rs,FI),e(FI,Efo),e(Rs,Cfo),e(k,wfo),e(k,gh),e(gh,kse),e(kse,Afo),e(gh,Lfo),e(gh,TI),e(TI,yfo),e(gh,xfo),e(k,$fo),e(k,hh),e(hh,Sse),e(Sse,kfo),e(hh,Sfo),e(hh,MI),e(MI,Rfo),e(hh,Pfo),e(k,Bfo),e(k,ph),e(ph,Rse),e(Rse,Ifo),e(ph,Nfo),e(ph,EI),e(EI,qfo),e(ph,jfo),e(k,Dfo),e(k,Ps),e(Ps,Pse),e(Pse,Gfo),e(Ps,Ofo),e(Ps,CI),e(CI,Vfo),e(Ps,Xfo),e(Ps,wI),e(wI,zfo),e(Ps,Wfo),e(k,Qfo),e(k,Bs),e(Bs,Bse),e(Bse,Hfo),e(Bs,Ufo),e(Bs,AI),e(AI,Jfo),e(Bs,Yfo),e(Bs,LI),e(LI,Kfo),e(Bs,Zfo),e(k,emo),e(k,uh),e(uh,Ise),e(Ise,omo),e(uh,rmo),e(uh,yI),e(yI,tmo),e(uh,amo),e(k,nmo),e(k,_h),e(_h,Nse),e(Nse,smo),e(_h,lmo),e(_h,xI),e(xI,imo),e(_h,dmo),e(k,cmo),e(k,bh),e(bh,qse),e(qse,fmo),e(bh,mmo),e(bh,$I),e($I,gmo),e(bh,hmo),e(k,pmo),e(k,Is),e(Is,jse),e(jse,umo),e(Is,_mo),e(Is,kI),e(kI,bmo),e(Is,vmo),e(Is,SI),e(SI,Fmo),e(Is,Tmo),e(k,Mmo),e(k,vh),e(vh,Dse),e(Dse,Emo),e(vh,Cmo),e(vh,RI),e(RI,wmo),e(vh,Amo),e(k,Lmo),e(k,Fh),e(Fh,Gse),e(Gse,ymo),e(Fh,xmo),e(Fh,PI),e(PI,$mo),e(Fh,kmo),e(k,Smo),e(k,Ns),e(Ns,Ose),e(Ose,Rmo),e(Ns,Pmo),e(Ns,BI),e(BI,Bmo),e(Ns,Imo),e(Ns,II),e(II,Nmo),e(Ns,qmo),e(k,jmo),e(k,qs),e(qs,Vse),e(Vse,Dmo),e(qs,Gmo),e(qs,NI),e(NI,Omo),e(qs,Vmo),e(qs,qI),e(qI,Xmo),e(qs,zmo),e(k,Wmo),e(k,js),e(js,Xse),e(Xse,Qmo),e(js,Hmo),e(js,jI),e(jI,Umo),e(js,Jmo),e(js,DI),e(DI,Ymo),e(js,Kmo),e(k,Zmo),e(k,Ds),e(Ds,zse),e(zse,ego),e(Ds,ogo),e(Ds,GI),e(GI,rgo),e(Ds,tgo),e(Ds,OI),e(OI,ago),e(Ds,ngo),e(Ar,sgo),M(Th,Ar,null),e(Ao,lgo),e(Ao,Mh),M($A,Mh,null),e(Mh,igo),e(Mh,Wse),e(Wse,dgo),b(f,ZDe,_),b(f,ki,_),e(ki,Eh),e(Eh,Qse),M(kA,Qse,null),e(ki,cgo),e(ki,Hse),e(Hse,fgo),b(f,eGe,_),b(f,Lo,_),M(SA,Lo,null),e(Lo,mgo),e(Lo,RA),e(RA,ggo),e(RA,VI),e(VI,hgo),e(RA,pgo),e(Lo,ugo),e(Lo,PA),e(PA,_go),e(PA,Use),e(Use,bgo),e(PA,vgo),e(Lo,Fgo),e(Lo,He),M(BA,He,null),e(He,Tgo),e(He,Jse),e(Jse,Mgo),e(He,Ego),e(He,ka),e(ka,Cgo),e(ka,Yse),e(Yse,wgo),e(ka,Ago),e(ka,Kse),e(Kse,Lgo),e(ka,ygo),e(ka,Zse),e(Zse,xgo),e(ka,$go),e(He,kgo),e(He,Y),e(Y,Ch),e(Ch,ele),e(ele,Sgo),e(Ch,Rgo),e(Ch,XI),e(XI,Pgo),e(Ch,Bgo),e(Y,Igo),e(Y,wh),e(wh,ole),e(ole,Ngo),e(wh,qgo),e(wh,zI),e(zI,jgo),e(wh,Dgo),e(Y,Ggo),e(Y,Ah),e(Ah,rle),e(rle,Ogo),e(Ah,Vgo),e(Ah,WI),e(WI,Xgo),e(Ah,zgo),e(Y,Wgo),e(Y,Lh),e(Lh,tle),e(tle,Qgo),e(Lh,Hgo),e(Lh,QI),e(QI,Ugo),e(Lh,Jgo),e(Y,Ygo),e(Y,yh),e(yh,ale),e(ale,Kgo),e(yh,Zgo),e(yh,HI),e(HI,eho),e(yh,oho),e(Y,rho),e(Y,xh),e(xh,nle),e(nle,tho),e(xh,aho),e(xh,UI),e(UI,nho),e(xh,sho),e(Y,lho),e(Y,$h),e($h,sle),e(sle,iho),e($h,dho),e($h,JI),e(JI,cho),e($h,fho),e(Y,mho),e(Y,kh),e(kh,lle),e(lle,gho),e(kh,hho),e(kh,YI),e(YI,pho),e(kh,uho),e(Y,_ho),e(Y,Sh),e(Sh,ile),e(ile,bho),e(Sh,vho),e(Sh,KI),e(KI,Fho),e(Sh,Tho),e(Y,Mho),e(Y,Rh),e(Rh,dle),e(dle,Eho),e(Rh,Cho),e(Rh,ZI),e(ZI,who),e(Rh,Aho),e(Y,Lho),e(Y,Ph),e(Ph,cle),e(cle,yho),e(Ph,xho),e(Ph,eN),e(eN,$ho),e(Ph,kho),e(Y,Sho),e(Y,Bh),e(Bh,fle),e(fle,Rho),e(Bh,Pho),e(Bh,oN),e(oN,Bho),e(Bh,Iho),e(Y,Nho),e(Y,Ih),e(Ih,mle),e(mle,qho),e(Ih,jho),e(Ih,rN),e(rN,Dho),e(Ih,Gho),e(Y,Oho),e(Y,Nh),e(Nh,gle),e(gle,Vho),e(Nh,Xho),e(Nh,tN),e(tN,zho),e(Nh,Who),e(Y,Qho),e(Y,qh),e(qh,hle),e(hle,Hho),e(qh,Uho),e(qh,aN),e(aN,Jho),e(qh,Yho),e(Y,Kho),e(Y,jh),e(jh,ple),e(ple,Zho),e(jh,epo),e(jh,nN),e(nN,opo),e(jh,rpo),e(Y,tpo),e(Y,Dh),e(Dh,ule),e(ule,apo),e(Dh,npo),e(Dh,sN),e(sN,spo),e(Dh,lpo),e(Y,ipo),e(Y,Gh),e(Gh,_le),e(_le,dpo),e(Gh,cpo),e(Gh,lN),e(lN,fpo),e(Gh,mpo),e(Y,gpo),e(Y,Oh),e(Oh,ble),e(ble,hpo),e(Oh,ppo),e(Oh,iN),e(iN,upo),e(Oh,_po),e(Y,bpo),e(Y,Vh),e(Vh,vle),e(vle,vpo),e(Vh,Fpo),e(Vh,dN),e(dN,Tpo),e(Vh,Mpo),e(Y,Epo),e(Y,Xh),e(Xh,Fle),e(Fle,Cpo),e(Xh,wpo),e(Xh,cN),e(cN,Apo),e(Xh,Lpo),e(Y,ypo),e(Y,zh),e(zh,Tle),e(Tle,xpo),e(zh,$po),e(zh,fN),e(fN,kpo),e(zh,Spo),e(Y,Rpo),e(Y,Wh),e(Wh,Mle),e(Mle,Ppo),e(Wh,Bpo),e(Wh,mN),e(mN,Ipo),e(Wh,Npo),e(Y,qpo),e(Y,Qh),e(Qh,Ele),e(Ele,jpo),e(Qh,Dpo),e(Qh,gN),e(gN,Gpo),e(Qh,Opo),e(Y,Vpo),e(Y,Hh),e(Hh,Cle),e(Cle,Xpo),e(Hh,zpo),e(Hh,hN),e(hN,Wpo),e(Hh,Qpo),e(Y,Hpo),e(Y,Uh),e(Uh,wle),e(wle,Upo),e(Uh,Jpo),e(Uh,pN),e(pN,Ypo),e(Uh,Kpo),e(Y,Zpo),e(Y,Jh),e(Jh,Ale),e(Ale,euo),e(Jh,ouo),e(Jh,uN),e(uN,ruo),e(Jh,tuo),e(Y,auo),e(Y,Yh),e(Yh,Lle),e(Lle,nuo),e(Yh,suo),e(Yh,_N),e(_N,luo),e(Yh,iuo),e(Y,duo),e(Y,Kh),e(Kh,yle),e(yle,cuo),e(Kh,fuo),e(Kh,bN),e(bN,muo),e(Kh,guo),e(Y,huo),e(Y,Zh),e(Zh,xle),e(xle,puo),e(Zh,uuo),e(Zh,vN),e(vN,_uo),e(Zh,buo),e(Y,vuo),e(Y,ep),e(ep,$le),e($le,Fuo),e(ep,Tuo),e(ep,FN),e(FN,Muo),e(ep,Euo),e(Y,Cuo),e(Y,op),e(op,kle),e(kle,wuo),e(op,Auo),e(op,TN),e(TN,Luo),e(op,yuo),e(He,xuo),M(rp,He,null),e(He,$uo),M(tp,He,null),e(Lo,kuo),e(Lo,ap),M(IA,ap,null),e(ap,Suo),e(ap,Sle),e(Sle,Ruo),b(f,oGe,_),b(f,Si,_),e(Si,np),e(np,Rle),M(NA,Rle,null),e(Si,Puo),e(Si,Ple),e(Ple,Buo),b(f,rGe,_),b(f,yo,_),M(qA,yo,null),e(yo,Iuo),e(yo,jA),e(jA,Nuo),e(jA,MN),e(MN,quo),e(jA,juo),e(yo,Duo),e(yo,DA),e(DA,Guo),e(DA,Ble),e(Ble,Ouo),e(DA,Vuo),e(yo,Xuo),e(yo,Ue),M(GA,Ue,null),e(Ue,zuo),e(Ue,Ile),e(Ile,Wuo),e(Ue,Quo),e(Ue,Ri),e(Ri,Huo),e(Ri,Nle),e(Nle,Uuo),e(Ri,Juo),e(Ri,qle),e(qle,Yuo),e(Ri,Kuo),e(Ue,Zuo),e(Ue,he),e(he,sp),e(sp,jle),e(jle,e_o),e(sp,o_o),e(sp,EN),e(EN,r_o),e(sp,t_o),e(he,a_o),e(he,lp),e(lp,Dle),e(Dle,n_o),e(lp,s_o),e(lp,Gle),e(Gle,l_o),e(lp,i_o),e(he,d_o),e(he,ip),e(ip,Ole),e(Ole,c_o),e(ip,f_o),e(ip,CN),e(CN,m_o),e(ip,g_o),e(he,h_o),e(he,dp),e(dp,Vle),e(Vle,p_o),e(dp,u_o),e(dp,wN),e(wN,__o),e(dp,b_o),e(he,v_o),e(he,cp),e(cp,Xle),e(Xle,F_o),e(cp,T_o),e(cp,AN),e(AN,M_o),e(cp,E_o),e(he,C_o),e(he,fp),e(fp,zle),e(zle,w_o),e(fp,A_o),e(fp,LN),e(LN,L_o),e(fp,y_o),e(he,x_o),e(he,mp),e(mp,Wle),e(Wle,$_o),e(mp,k_o),e(mp,yN),e(yN,S_o),e(mp,R_o),e(he,P_o),e(he,gp),e(gp,Qle),e(Qle,B_o),e(gp,I_o),e(gp,xN),e(xN,N_o),e(gp,q_o),e(he,j_o),e(he,hp),e(hp,Hle),e(Hle,D_o),e(hp,G_o),e(hp,$N),e($N,O_o),e(hp,V_o),e(he,X_o),e(he,pp),e(pp,Ule),e(Ule,z_o),e(pp,W_o),e(pp,kN),e(kN,Q_o),e(pp,H_o),e(he,U_o),e(he,up),e(up,Jle),e(Jle,J_o),e(up,Y_o),e(up,SN),e(SN,K_o),e(up,Z_o),e(he,e2o),e(he,_p),e(_p,Yle),e(Yle,o2o),e(_p,r2o),e(_p,RN),e(RN,t2o),e(_p,a2o),e(he,n2o),e(he,bp),e(bp,Kle),e(Kle,s2o),e(bp,l2o),e(bp,PN),e(PN,i2o),e(bp,d2o),e(he,c2o),e(he,vp),e(vp,Zle),e(Zle,f2o),e(vp,m2o),e(vp,BN),e(BN,g2o),e(vp,h2o),e(he,p2o),e(he,Fp),e(Fp,eie),e(eie,u2o),e(Fp,_2o),e(Fp,IN),e(IN,b2o),e(Fp,v2o),e(he,F2o),e(he,Tp),e(Tp,oie),e(oie,T2o),e(Tp,M2o),e(Tp,NN),e(NN,E2o),e(Tp,C2o),e(he,w2o),e(he,Mp),e(Mp,rie),e(rie,A2o),e(Mp,L2o),e(Mp,qN),e(qN,y2o),e(Mp,x2o),e(Ue,$2o),M(Ep,Ue,null),e(Ue,k2o),M(Cp,Ue,null),e(yo,S2o),e(yo,wp),M(OA,wp,null),e(wp,R2o),e(wp,tie),e(tie,P2o),b(f,tGe,_),b(f,Pi,_),e(Pi,Ap),e(Ap,aie),M(VA,aie,null),e(Pi,B2o),e(Pi,nie),e(nie,I2o),b(f,aGe,_),b(f,xo,_),M(XA,xo,null),e(xo,N2o),e(xo,Bi),e(Bi,q2o),e(Bi,jN),e(jN,j2o),e(Bi,D2o),e(Bi,DN),e(DN,G2o),e(Bi,O2o),e(xo,V2o),e(xo,zA),e(zA,X2o),e(zA,sie),e(sie,z2o),e(zA,W2o),e(xo,Q2o),e(xo,nt),M(WA,nt,null),e(nt,H2o),e(nt,lie),e(lie,U2o),e(nt,J2o),e(nt,Ii),e(Ii,Y2o),e(Ii,iie),e(iie,K2o),e(Ii,Z2o),e(Ii,GN),e(GN,e1o),e(Ii,o1o),e(nt,r1o),M(Lp,nt,null),e(xo,t1o),e(xo,Je),M(QA,Je,null),e(Je,a1o),e(Je,die),e(die,n1o),e(Je,s1o),e(Je,Sa),e(Sa,l1o),e(Sa,cie),e(cie,i1o),e(Sa,d1o),e(Sa,fie),e(fie,c1o),e(Sa,f1o),e(Sa,mie),e(mie,m1o),e(Sa,g1o),e(Je,h1o),e(Je,x),e(x,yp),e(yp,gie),e(gie,p1o),e(yp,u1o),e(yp,ON),e(ON,_1o),e(yp,b1o),e(x,v1o),e(x,xp),e(xp,hie),e(hie,F1o),e(xp,T1o),e(xp,VN),e(VN,M1o),e(xp,E1o),e(x,C1o),e(x,$p),e($p,pie),e(pie,w1o),e($p,A1o),e($p,XN),e(XN,L1o),e($p,y1o),e(x,x1o),e(x,kp),e(kp,uie),e(uie,$1o),e(kp,k1o),e(kp,zN),e(zN,S1o),e(kp,R1o),e(x,P1o),e(x,Sp),e(Sp,_ie),e(_ie,B1o),e(Sp,I1o),e(Sp,WN),e(WN,N1o),e(Sp,q1o),e(x,j1o),e(x,Rp),e(Rp,bie),e(bie,D1o),e(Rp,G1o),e(Rp,QN),e(QN,O1o),e(Rp,V1o),e(x,X1o),e(x,Pp),e(Pp,vie),e(vie,z1o),e(Pp,W1o),e(Pp,HN),e(HN,Q1o),e(Pp,H1o),e(x,U1o),e(x,Bp),e(Bp,Fie),e(Fie,J1o),e(Bp,Y1o),e(Bp,UN),e(UN,K1o),e(Bp,Z1o),e(x,ebo),e(x,Ip),e(Ip,Tie),e(Tie,obo),e(Ip,rbo),e(Ip,JN),e(JN,tbo),e(Ip,abo),e(x,nbo),e(x,Np),e(Np,Mie),e(Mie,sbo),e(Np,lbo),e(Np,YN),e(YN,ibo),e(Np,dbo),e(x,cbo),e(x,qp),e(qp,Eie),e(Eie,fbo),e(qp,mbo),e(qp,KN),e(KN,gbo),e(qp,hbo),e(x,pbo),e(x,jp),e(jp,Cie),e(Cie,ubo),e(jp,_bo),e(jp,ZN),e(ZN,bbo),e(jp,vbo),e(x,Fbo),e(x,Dp),e(Dp,wie),e(wie,Tbo),e(Dp,Mbo),e(Dp,eq),e(eq,Ebo),e(Dp,Cbo),e(x,wbo),e(x,Gp),e(Gp,Aie),e(Aie,Abo),e(Gp,Lbo),e(Gp,oq),e(oq,ybo),e(Gp,xbo),e(x,$bo),e(x,Op),e(Op,Lie),e(Lie,kbo),e(Op,Sbo),e(Op,rq),e(rq,Rbo),e(Op,Pbo),e(x,Bbo),e(x,Vp),e(Vp,yie),e(yie,Ibo),e(Vp,Nbo),e(Vp,tq),e(tq,qbo),e(Vp,jbo),e(x,Dbo),e(x,Xp),e(Xp,xie),e(xie,Gbo),e(Xp,Obo),e(Xp,aq),e(aq,Vbo),e(Xp,Xbo),e(x,zbo),e(x,zp),e(zp,$ie),e($ie,Wbo),e(zp,Qbo),e(zp,nq),e(nq,Hbo),e(zp,Ubo),e(x,Jbo),e(x,Wp),e(Wp,kie),e(kie,Ybo),e(Wp,Kbo),e(Wp,sq),e(sq,Zbo),e(Wp,evo),e(x,ovo),e(x,Qp),e(Qp,Sie),e(Sie,rvo),e(Qp,tvo),e(Qp,lq),e(lq,avo),e(Qp,nvo),e(x,svo),e(x,Hp),e(Hp,Rie),e(Rie,lvo),e(Hp,ivo),e(Hp,iq),e(iq,dvo),e(Hp,cvo),e(x,fvo),e(x,Up),e(Up,Pie),e(Pie,mvo),e(Up,gvo),e(Up,dq),e(dq,hvo),e(Up,pvo),e(x,uvo),e(x,Jp),e(Jp,Bie),e(Bie,_vo),e(Jp,bvo),e(Jp,cq),e(cq,vvo),e(Jp,Fvo),e(x,Tvo),e(x,Yp),e(Yp,Iie),e(Iie,Mvo),e(Yp,Evo),e(Yp,fq),e(fq,Cvo),e(Yp,wvo),e(x,Avo),e(x,Kp),e(Kp,Nie),e(Nie,Lvo),e(Kp,yvo),e(Kp,mq),e(mq,xvo),e(Kp,$vo),e(x,kvo),e(x,Zp),e(Zp,qie),e(qie,Svo),e(Zp,Rvo),e(Zp,gq),e(gq,Pvo),e(Zp,Bvo),e(x,Ivo),e(x,eu),e(eu,jie),e(jie,Nvo),e(eu,qvo),e(eu,hq),e(hq,jvo),e(eu,Dvo),e(x,Gvo),e(x,ou),e(ou,Die),e(Die,Ovo),e(ou,Vvo),e(ou,pq),e(pq,Xvo),e(ou,zvo),e(x,Wvo),e(x,ru),e(ru,Gie),e(Gie,Qvo),e(ru,Hvo),e(ru,uq),e(uq,Uvo),e(ru,Jvo),e(x,Yvo),e(x,tu),e(tu,Oie),e(Oie,Kvo),e(tu,Zvo),e(tu,_q),e(_q,eFo),e(tu,oFo),e(x,rFo),e(x,au),e(au,Vie),e(Vie,tFo),e(au,aFo),e(au,bq),e(bq,nFo),e(au,sFo),e(x,lFo),e(x,nu),e(nu,Xie),e(Xie,iFo),e(nu,dFo),e(nu,vq),e(vq,cFo),e(nu,fFo),e(x,mFo),e(x,su),e(su,zie),e(zie,gFo),e(su,hFo),e(su,Fq),e(Fq,pFo),e(su,uFo),e(x,_Fo),e(x,Gs),e(Gs,Wie),e(Wie,bFo),e(Gs,vFo),e(Gs,Tq),e(Tq,FFo),e(Gs,TFo),e(Gs,Mq),e(Mq,MFo),e(Gs,EFo),e(x,CFo),e(x,lu),e(lu,Qie),e(Qie,wFo),e(lu,AFo),e(lu,Eq),e(Eq,LFo),e(lu,yFo),e(x,xFo),e(x,iu),e(iu,Hie),e(Hie,$Fo),e(iu,kFo),e(iu,Cq),e(Cq,SFo),e(iu,RFo),e(x,PFo),e(x,du),e(du,Uie),e(Uie,BFo),e(du,IFo),e(du,wq),e(wq,NFo),e(du,qFo),e(x,jFo),e(x,cu),e(cu,Jie),e(Jie,DFo),e(cu,GFo),e(cu,Aq),e(Aq,OFo),e(cu,VFo),e(x,XFo),e(x,fu),e(fu,Yie),e(Yie,zFo),e(fu,WFo),e(fu,Lq),e(Lq,QFo),e(fu,HFo),e(x,UFo),e(x,mu),e(mu,Kie),e(Kie,JFo),e(mu,YFo),e(mu,yq),e(yq,KFo),e(mu,ZFo),e(x,e6o),e(x,gu),e(gu,Zie),e(Zie,o6o),e(gu,r6o),e(gu,xq),e(xq,t6o),e(gu,a6o),e(x,n6o),e(x,hu),e(hu,ede),e(ede,s6o),e(hu,l6o),e(hu,$q),e($q,i6o),e(hu,d6o),e(x,c6o),e(x,pu),e(pu,ode),e(ode,f6o),e(pu,m6o),e(pu,kq),e(kq,g6o),e(pu,h6o),e(x,p6o),e(x,uu),e(uu,rde),e(rde,u6o),e(uu,_6o),e(uu,Sq),e(Sq,b6o),e(uu,v6o),e(x,F6o),e(x,_u),e(_u,tde),e(tde,T6o),e(_u,M6o),e(_u,Rq),e(Rq,E6o),e(_u,C6o),e(x,w6o),e(x,bu),e(bu,ade),e(ade,A6o),e(bu,L6o),e(bu,Pq),e(Pq,y6o),e(bu,x6o),e(x,$6o),e(x,vu),e(vu,nde),e(nde,k6o),e(vu,S6o),e(vu,Bq),e(Bq,R6o),e(vu,P6o),e(x,B6o),e(x,Fu),e(Fu,sde),e(sde,I6o),e(Fu,N6o),e(Fu,Iq),e(Iq,q6o),e(Fu,j6o),e(x,D6o),e(x,Tu),e(Tu,lde),e(lde,G6o),e(Tu,O6o),e(Tu,Nq),e(Nq,V6o),e(Tu,X6o),e(x,z6o),e(x,Mu),e(Mu,ide),e(ide,W6o),e(Mu,Q6o),e(Mu,qq),e(qq,H6o),e(Mu,U6o),e(x,J6o),e(x,Eu),e(Eu,dde),e(dde,Y6o),e(Eu,K6o),e(Eu,jq),e(jq,Z6o),e(Eu,eTo),e(x,oTo),e(x,Cu),e(Cu,cde),e(cde,rTo),e(Cu,tTo),e(Cu,Dq),e(Dq,aTo),e(Cu,nTo),e(x,sTo),e(x,wu),e(wu,fde),e(fde,lTo),e(wu,iTo),e(wu,Gq),e(Gq,dTo),e(wu,cTo),e(x,fTo),e(x,Au),e(Au,mde),e(mde,mTo),e(Au,gTo),e(Au,Oq),e(Oq,hTo),e(Au,pTo),e(x,uTo),e(x,Lu),e(Lu,gde),e(gde,_To),e(Lu,bTo),e(Lu,Vq),e(Vq,vTo),e(Lu,FTo),e(x,TTo),e(x,yu),e(yu,hde),e(hde,MTo),e(yu,ETo),e(yu,Xq),e(Xq,CTo),e(yu,wTo),e(x,ATo),e(x,xu),e(xu,pde),e(pde,LTo),e(xu,yTo),e(xu,zq),e(zq,xTo),e(xu,$To),e(x,kTo),e(x,$u),e($u,ude),e(ude,STo),e($u,RTo),e($u,Wq),e(Wq,PTo),e($u,BTo),e(x,ITo),e(x,ku),e(ku,_de),e(_de,NTo),e(ku,qTo),e(ku,Qq),e(Qq,jTo),e(ku,DTo),e(x,GTo),e(x,Su),e(Su,bde),e(bde,OTo),e(Su,VTo),e(Su,Hq),e(Hq,XTo),e(Su,zTo),e(x,WTo),e(x,Ru),e(Ru,vde),e(vde,QTo),e(Ru,HTo),e(Ru,Uq),e(Uq,UTo),e(Ru,JTo),e(x,YTo),e(x,Pu),e(Pu,Fde),e(Fde,KTo),e(Pu,ZTo),e(Pu,Jq),e(Jq,e7o),e(Pu,o7o),e(x,r7o),e(x,Bu),e(Bu,Tde),e(Tde,t7o),e(Bu,a7o),e(Bu,Yq),e(Yq,n7o),e(Bu,s7o),e(x,l7o),e(x,Iu),e(Iu,Mde),e(Mde,i7o),e(Iu,d7o),e(Iu,Kq),e(Kq,c7o),e(Iu,f7o),e(x,m7o),e(x,Nu),e(Nu,Ede),e(Ede,g7o),e(Nu,h7o),e(Nu,Zq),e(Zq,p7o),e(Nu,u7o),e(x,_7o),e(x,qu),e(qu,Cde),e(Cde,b7o),e(qu,v7o),e(qu,ej),e(ej,F7o),e(qu,T7o),e(x,M7o),e(x,ju),e(ju,wde),e(wde,E7o),e(ju,C7o),e(ju,oj),e(oj,w7o),e(ju,A7o),e(x,L7o),e(x,Du),e(Du,Ade),e(Ade,y7o),e(Du,x7o),e(Du,rj),e(rj,$7o),e(Du,k7o),e(x,S7o),e(x,Gu),e(Gu,Lde),e(Lde,R7o),e(Gu,P7o),e(Gu,tj),e(tj,B7o),e(Gu,I7o),e(x,N7o),e(x,Ou),e(Ou,yde),e(yde,q7o),e(Ou,j7o),e(Ou,aj),e(aj,D7o),e(Ou,G7o),e(x,O7o),e(x,Vu),e(Vu,xde),e(xde,V7o),e(Vu,X7o),e(Vu,nj),e(nj,z7o),e(Vu,W7o),e(x,Q7o),e(x,Xu),e(Xu,$de),e($de,H7o),e(Xu,U7o),e(Xu,sj),e(sj,J7o),e(Xu,Y7o),e(x,K7o),e(x,zu),e(zu,kde),e(kde,Z7o),e(zu,e9o),e(zu,lj),e(lj,o9o),e(zu,r9o),e(x,t9o),e(x,Wu),e(Wu,Sde),e(Sde,a9o),e(Wu,n9o),e(Wu,ij),e(ij,s9o),e(Wu,l9o),e(x,i9o),e(x,Qu),e(Qu,Rde),e(Rde,d9o),e(Qu,c9o),e(Qu,dj),e(dj,f9o),e(Qu,m9o),e(x,g9o),e(x,Hu),e(Hu,Pde),e(Pde,h9o),e(Hu,p9o),e(Hu,cj),e(cj,u9o),e(Hu,_9o),e(x,b9o),e(x,Uu),e(Uu,Bde),e(Bde,v9o),e(Uu,F9o),e(Uu,fj),e(fj,T9o),e(Uu,M9o),e(x,E9o),e(x,Ju),e(Ju,Ide),e(Ide,C9o),e(Ju,w9o),e(Ju,mj),e(mj,A9o),e(Ju,L9o),e(x,y9o),e(x,Yu),e(Yu,Nde),e(Nde,x9o),e(Yu,$9o),e(Yu,gj),e(gj,k9o),e(Yu,S9o),e(x,R9o),e(x,Ku),e(Ku,qde),e(qde,P9o),e(Ku,B9o),e(Ku,hj),e(hj,I9o),e(Ku,N9o),e(x,q9o),e(x,Zu),e(Zu,jde),e(jde,j9o),e(Zu,D9o),e(Zu,pj),e(pj,G9o),e(Zu,O9o),e(x,V9o),e(x,e_),e(e_,Dde),e(Dde,X9o),e(e_,z9o),e(e_,uj),e(uj,W9o),e(e_,Q9o),e(x,H9o),e(x,o_),e(o_,Gde),e(Gde,U9o),e(o_,J9o),e(o_,_j),e(_j,Y9o),e(o_,K9o),e(x,Z9o),e(x,r_),e(r_,Ode),e(Ode,eMo),e(r_,oMo),e(r_,bj),e(bj,rMo),e(r_,tMo),e(x,aMo),e(x,t_),e(t_,Vde),e(Vde,nMo),e(t_,sMo),e(t_,vj),e(vj,lMo),e(t_,iMo),e(x,dMo),e(x,a_),e(a_,Xde),e(Xde,cMo),e(a_,fMo),e(a_,Fj),e(Fj,mMo),e(a_,gMo),e(x,hMo),e(x,n_),e(n_,zde),e(zde,pMo),e(n_,uMo),e(n_,Tj),e(Tj,_Mo),e(n_,bMo),e(x,vMo),e(x,s_),e(s_,Wde),e(Wde,FMo),e(s_,TMo),e(s_,Mj),e(Mj,MMo),e(s_,EMo),e(x,CMo),e(x,l_),e(l_,Qde),e(Qde,wMo),e(l_,AMo),e(l_,Ej),e(Ej,LMo),e(l_,yMo),e(x,xMo),e(x,i_),e(i_,Hde),e(Hde,$Mo),e(i_,kMo),e(i_,Cj),e(Cj,SMo),e(i_,RMo),e(x,PMo),e(x,d_),e(d_,Ude),e(Ude,BMo),e(d_,IMo),e(d_,wj),e(wj,NMo),e(d_,qMo),e(x,jMo),e(x,c_),e(c_,Jde),e(Jde,DMo),e(c_,GMo),e(c_,Aj),e(Aj,OMo),e(c_,VMo),e(x,XMo),e(x,f_),e(f_,Yde),e(Yde,zMo),e(f_,WMo),e(f_,Lj),e(Lj,QMo),e(f_,HMo),e(x,UMo),e(x,m_),e(m_,Kde),e(Kde,JMo),e(m_,YMo),e(m_,yj),e(yj,KMo),e(m_,ZMo),e(x,e4o),e(x,g_),e(g_,Zde),e(Zde,o4o),e(g_,r4o),e(g_,xj),e(xj,t4o),e(g_,a4o),e(x,n4o),e(x,h_),e(h_,ece),e(ece,s4o),e(h_,l4o),e(h_,$j),e($j,i4o),e(h_,d4o),e(x,c4o),e(x,p_),e(p_,oce),e(oce,f4o),e(p_,m4o),e(p_,kj),e(kj,g4o),e(p_,h4o),e(x,p4o),e(x,u_),e(u_,rce),e(rce,u4o),e(u_,_4o),e(u_,Sj),e(Sj,b4o),e(u_,v4o),e(x,F4o),e(x,__),e(__,tce),e(tce,T4o),e(__,M4o),e(__,Rj),e(Rj,E4o),e(__,C4o),e(x,w4o),e(x,b_),e(b_,ace),e(ace,A4o),e(b_,L4o),e(b_,Pj),e(Pj,y4o),e(b_,x4o),e(x,$4o),e(x,v_),e(v_,nce),e(nce,k4o),e(v_,S4o),e(v_,Bj),e(Bj,R4o),e(v_,P4o),e(x,B4o),e(x,F_),e(F_,sce),e(sce,I4o),e(F_,N4o),e(F_,Ij),e(Ij,q4o),e(F_,j4o),e(x,D4o),e(x,T_),e(T_,lce),e(lce,G4o),e(T_,O4o),e(T_,Nj),e(Nj,V4o),e(T_,X4o),e(x,z4o),e(x,M_),e(M_,ice),e(ice,W4o),e(M_,Q4o),e(M_,qj),e(qj,H4o),e(M_,U4o),e(x,J4o),e(x,E_),e(E_,dce),e(dce,Y4o),e(E_,K4o),e(E_,jj),e(jj,Z4o),e(E_,eEo),e(x,oEo),e(x,C_),e(C_,cce),e(cce,rEo),e(C_,tEo),e(C_,Dj),e(Dj,aEo),e(C_,nEo),e(Je,sEo),e(Je,w_),e(w_,lEo),e(w_,fce),e(fce,iEo),e(w_,dEo),e(w_,mce),e(mce,cEo),e(Je,fEo),M(A_,Je,null),b(f,nGe,_),b(f,Ni,_),e(Ni,L_),e(L_,gce),M(HA,gce,null),e(Ni,mEo),e(Ni,hce),e(hce,gEo),b(f,sGe,_),b(f,$o,_),M(UA,$o,null),e($o,hEo),e($o,qi),e(qi,pEo),e(qi,Gj),e(Gj,uEo),e(qi,_Eo),e(qi,Oj),e(Oj,bEo),e(qi,vEo),e($o,FEo),e($o,JA),e(JA,TEo),e(JA,pce),e(pce,MEo),e(JA,EEo),e($o,CEo),e($o,st),M(YA,st,null),e(st,wEo),e(st,uce),e(uce,AEo),e(st,LEo),e(st,ji),e(ji,yEo),e(ji,_ce),e(_ce,xEo),e(ji,$Eo),e(ji,Vj),e(Vj,kEo),e(ji,SEo),e(st,REo),M(y_,st,null),e($o,PEo),e($o,Ye),M(KA,Ye,null),e(Ye,BEo),e(Ye,bce),e(bce,IEo),e(Ye,NEo),e(Ye,Ra),e(Ra,qEo),e(Ra,vce),e(vce,jEo),e(Ra,DEo),e(Ra,Fce),e(Fce,GEo),e(Ra,OEo),e(Ra,Tce),e(Tce,VEo),e(Ra,XEo),e(Ye,zEo),e(Ye,G),e(G,x_),e(x_,Mce),e(Mce,WEo),e(x_,QEo),e(x_,Xj),e(Xj,HEo),e(x_,UEo),e(G,JEo),e(G,$_),e($_,Ece),e(Ece,YEo),e($_,KEo),e($_,zj),e(zj,ZEo),e($_,eCo),e(G,oCo),e(G,k_),e(k_,Cce),e(Cce,rCo),e(k_,tCo),e(k_,Wj),e(Wj,aCo),e(k_,nCo),e(G,sCo),e(G,S_),e(S_,wce),e(wce,lCo),e(S_,iCo),e(S_,Qj),e(Qj,dCo),e(S_,cCo),e(G,fCo),e(G,R_),e(R_,Ace),e(Ace,mCo),e(R_,gCo),e(R_,Hj),e(Hj,hCo),e(R_,pCo),e(G,uCo),e(G,P_),e(P_,Lce),e(Lce,_Co),e(P_,bCo),e(P_,Uj),e(Uj,vCo),e(P_,FCo),e(G,TCo),e(G,B_),e(B_,yce),e(yce,MCo),e(B_,ECo),e(B_,Jj),e(Jj,CCo),e(B_,wCo),e(G,ACo),e(G,I_),e(I_,xce),e(xce,LCo),e(I_,yCo),e(I_,Yj),e(Yj,xCo),e(I_,$Co),e(G,kCo),e(G,N_),e(N_,$ce),e($ce,SCo),e(N_,RCo),e(N_,Kj),e(Kj,PCo),e(N_,BCo),e(G,ICo),e(G,q_),e(q_,kce),e(kce,NCo),e(q_,qCo),e(q_,Zj),e(Zj,jCo),e(q_,DCo),e(G,GCo),e(G,j_),e(j_,Sce),e(Sce,OCo),e(j_,VCo),e(j_,eD),e(eD,XCo),e(j_,zCo),e(G,WCo),e(G,D_),e(D_,Rce),e(Rce,QCo),e(D_,HCo),e(D_,oD),e(oD,UCo),e(D_,JCo),e(G,YCo),e(G,G_),e(G_,Pce),e(Pce,KCo),e(G_,ZCo),e(G_,rD),e(rD,e5o),e(G_,o5o),e(G,r5o),e(G,O_),e(O_,Bce),e(Bce,t5o),e(O_,a5o),e(O_,tD),e(tD,n5o),e(O_,s5o),e(G,l5o),e(G,V_),e(V_,Ice),e(Ice,i5o),e(V_,d5o),e(V_,aD),e(aD,c5o),e(V_,f5o),e(G,m5o),e(G,X_),e(X_,Nce),e(Nce,g5o),e(X_,h5o),e(X_,nD),e(nD,p5o),e(X_,u5o),e(G,_5o),e(G,z_),e(z_,qce),e(qce,b5o),e(z_,v5o),e(z_,sD),e(sD,F5o),e(z_,T5o),e(G,M5o),e(G,W_),e(W_,jce),e(jce,E5o),e(W_,C5o),e(W_,lD),e(lD,w5o),e(W_,A5o),e(G,L5o),e(G,Q_),e(Q_,Dce),e(Dce,y5o),e(Q_,x5o),e(Q_,iD),e(iD,$5o),e(Q_,k5o),e(G,S5o),e(G,H_),e(H_,Gce),e(Gce,R5o),e(H_,P5o),e(H_,dD),e(dD,B5o),e(H_,I5o),e(G,N5o),e(G,U_),e(U_,Oce),e(Oce,q5o),e(U_,j5o),e(U_,cD),e(cD,D5o),e(U_,G5o),e(G,O5o),e(G,J_),e(J_,Vce),e(Vce,V5o),e(J_,X5o),e(J_,fD),e(fD,z5o),e(J_,W5o),e(G,Q5o),e(G,Y_),e(Y_,Xce),e(Xce,H5o),e(Y_,U5o),e(Y_,mD),e(mD,J5o),e(Y_,Y5o),e(G,K5o),e(G,K_),e(K_,zce),e(zce,Z5o),e(K_,e3o),e(K_,gD),e(gD,o3o),e(K_,r3o),e(G,t3o),e(G,Z_),e(Z_,Wce),e(Wce,a3o),e(Z_,n3o),e(Z_,hD),e(hD,s3o),e(Z_,l3o),e(G,i3o),e(G,e2),e(e2,Qce),e(Qce,d3o),e(e2,c3o),e(e2,pD),e(pD,f3o),e(e2,m3o),e(G,g3o),e(G,o2),e(o2,Hce),e(Hce,h3o),e(o2,p3o),e(o2,uD),e(uD,u3o),e(o2,_3o),e(G,b3o),e(G,r2),e(r2,Uce),e(Uce,v3o),e(r2,F3o),e(r2,_D),e(_D,T3o),e(r2,M3o),e(G,E3o),e(G,t2),e(t2,Jce),e(Jce,C3o),e(t2,w3o),e(t2,bD),e(bD,A3o),e(t2,L3o),e(G,y3o),e(G,a2),e(a2,Yce),e(Yce,x3o),e(a2,$3o),e(a2,vD),e(vD,k3o),e(a2,S3o),e(G,R3o),e(G,n2),e(n2,Kce),e(Kce,P3o),e(n2,B3o),e(n2,FD),e(FD,I3o),e(n2,N3o),e(G,q3o),e(G,s2),e(s2,Zce),e(Zce,j3o),e(s2,D3o),e(s2,TD),e(TD,G3o),e(s2,O3o),e(G,V3o),e(G,l2),e(l2,efe),e(efe,X3o),e(l2,z3o),e(l2,MD),e(MD,W3o),e(l2,Q3o),e(G,H3o),e(G,i2),e(i2,ofe),e(ofe,U3o),e(i2,J3o),e(i2,ED),e(ED,Y3o),e(i2,K3o),e(G,Z3o),e(G,d2),e(d2,rfe),e(rfe,e0o),e(d2,o0o),e(d2,CD),e(CD,r0o),e(d2,t0o),e(G,a0o),e(G,c2),e(c2,tfe),e(tfe,n0o),e(c2,s0o),e(c2,wD),e(wD,l0o),e(c2,i0o),e(G,d0o),e(G,f2),e(f2,afe),e(afe,c0o),e(f2,f0o),e(f2,AD),e(AD,m0o),e(f2,g0o),e(G,h0o),e(G,m2),e(m2,nfe),e(nfe,p0o),e(m2,u0o),e(m2,LD),e(LD,_0o),e(m2,b0o),e(G,v0o),e(G,g2),e(g2,sfe),e(sfe,F0o),e(g2,T0o),e(g2,yD),e(yD,M0o),e(g2,E0o),e(G,C0o),e(G,h2),e(h2,lfe),e(lfe,w0o),e(h2,A0o),e(h2,xD),e(xD,L0o),e(h2,y0o),e(G,x0o),e(G,p2),e(p2,ife),e(ife,$0o),e(p2,k0o),e(p2,$D),e($D,S0o),e(p2,R0o),e(G,P0o),e(G,u2),e(u2,dfe),e(dfe,B0o),e(u2,I0o),e(u2,kD),e(kD,N0o),e(u2,q0o),e(G,j0o),e(G,_2),e(_2,cfe),e(cfe,D0o),e(_2,G0o),e(_2,SD),e(SD,O0o),e(_2,V0o),e(Ye,X0o),e(Ye,b2),e(b2,z0o),e(b2,ffe),e(ffe,W0o),e(b2,Q0o),e(b2,mfe),e(mfe,H0o),e(Ye,U0o),M(v2,Ye,null),b(f,lGe,_),b(f,Di,_),e(Di,F2),e(F2,gfe),M(ZA,gfe,null),e(Di,J0o),e(Di,hfe),e(hfe,Y0o),b(f,iGe,_),b(f,ko,_),M(eL,ko,null),e(ko,K0o),e(ko,Gi),e(Gi,Z0o),e(Gi,RD),e(RD,ewo),e(Gi,owo),e(Gi,PD),e(PD,rwo),e(Gi,two),e(ko,awo),e(ko,oL),e(oL,nwo),e(oL,pfe),e(pfe,swo),e(oL,lwo),e(ko,iwo),e(ko,lt),M(rL,lt,null),e(lt,dwo),e(lt,ufe),e(ufe,cwo),e(lt,fwo),e(lt,Oi),e(Oi,mwo),e(Oi,_fe),e(_fe,gwo),e(Oi,hwo),e(Oi,BD),e(BD,pwo),e(Oi,uwo),e(lt,_wo),M(T2,lt,null),e(ko,bwo),e(ko,Ke),M(tL,Ke,null),e(Ke,vwo),e(Ke,bfe),e(bfe,Fwo),e(Ke,Two),e(Ke,Pa),e(Pa,Mwo),e(Pa,vfe),e(vfe,Ewo),e(Pa,Cwo),e(Pa,Ffe),e(Ffe,wwo),e(Pa,Awo),e(Pa,Tfe),e(Tfe,Lwo),e(Pa,ywo),e(Ke,xwo),e(Ke,z),e(z,M2),e(M2,Mfe),e(Mfe,$wo),e(M2,kwo),e(M2,ID),e(ID,Swo),e(M2,Rwo),e(z,Pwo),e(z,E2),e(E2,Efe),e(Efe,Bwo),e(E2,Iwo),e(E2,ND),e(ND,Nwo),e(E2,qwo),e(z,jwo),e(z,C2),e(C2,Cfe),e(Cfe,Dwo),e(C2,Gwo),e(C2,qD),e(qD,Owo),e(C2,Vwo),e(z,Xwo),e(z,w2),e(w2,wfe),e(wfe,zwo),e(w2,Wwo),e(w2,jD),e(jD,Qwo),e(w2,Hwo),e(z,Uwo),e(z,A2),e(A2,Afe),e(Afe,Jwo),e(A2,Ywo),e(A2,DD),e(DD,Kwo),e(A2,Zwo),e(z,eAo),e(z,L2),e(L2,Lfe),e(Lfe,oAo),e(L2,rAo),e(L2,GD),e(GD,tAo),e(L2,aAo),e(z,nAo),e(z,y2),e(y2,yfe),e(yfe,sAo),e(y2,lAo),e(y2,OD),e(OD,iAo),e(y2,dAo),e(z,cAo),e(z,x2),e(x2,xfe),e(xfe,fAo),e(x2,mAo),e(x2,VD),e(VD,gAo),e(x2,hAo),e(z,pAo),e(z,$2),e($2,$fe),e($fe,uAo),e($2,_Ao),e($2,XD),e(XD,bAo),e($2,vAo),e(z,FAo),e(z,k2),e(k2,kfe),e(kfe,TAo),e(k2,MAo),e(k2,zD),e(zD,EAo),e(k2,CAo),e(z,wAo),e(z,S2),e(S2,Sfe),e(Sfe,AAo),e(S2,LAo),e(S2,WD),e(WD,yAo),e(S2,xAo),e(z,$Ao),e(z,R2),e(R2,Rfe),e(Rfe,kAo),e(R2,SAo),e(R2,QD),e(QD,RAo),e(R2,PAo),e(z,BAo),e(z,P2),e(P2,Pfe),e(Pfe,IAo),e(P2,NAo),e(P2,HD),e(HD,qAo),e(P2,jAo),e(z,DAo),e(z,B2),e(B2,Bfe),e(Bfe,GAo),e(B2,OAo),e(B2,UD),e(UD,VAo),e(B2,XAo),e(z,zAo),e(z,I2),e(I2,Ife),e(Ife,WAo),e(I2,QAo),e(I2,JD),e(JD,HAo),e(I2,UAo),e(z,JAo),e(z,N2),e(N2,Nfe),e(Nfe,YAo),e(N2,KAo),e(N2,YD),e(YD,ZAo),e(N2,eLo),e(z,oLo),e(z,q2),e(q2,qfe),e(qfe,rLo),e(q2,tLo),e(q2,KD),e(KD,aLo),e(q2,nLo),e(z,sLo),e(z,j2),e(j2,jfe),e(jfe,lLo),e(j2,iLo),e(j2,ZD),e(ZD,dLo),e(j2,cLo),e(z,fLo),e(z,D2),e(D2,Dfe),e(Dfe,mLo),e(D2,gLo),e(D2,eG),e(eG,hLo),e(D2,pLo),e(z,uLo),e(z,G2),e(G2,Gfe),e(Gfe,_Lo),e(G2,bLo),e(G2,oG),e(oG,vLo),e(G2,FLo),e(z,TLo),e(z,O2),e(O2,Ofe),e(Ofe,MLo),e(O2,ELo),e(O2,rG),e(rG,CLo),e(O2,wLo),e(z,ALo),e(z,V2),e(V2,Vfe),e(Vfe,LLo),e(V2,yLo),e(V2,tG),e(tG,xLo),e(V2,$Lo),e(z,kLo),e(z,X2),e(X2,Xfe),e(Xfe,SLo),e(X2,RLo),e(X2,aG),e(aG,PLo),e(X2,BLo),e(z,ILo),e(z,z2),e(z2,zfe),e(zfe,NLo),e(z2,qLo),e(z2,nG),e(nG,jLo),e(z2,DLo),e(z,GLo),e(z,W2),e(W2,Wfe),e(Wfe,OLo),e(W2,VLo),e(W2,sG),e(sG,XLo),e(W2,zLo),e(z,WLo),e(z,Q2),e(Q2,Qfe),e(Qfe,QLo),e(Q2,HLo),e(Q2,lG),e(lG,ULo),e(Q2,JLo),e(z,YLo),e(z,H2),e(H2,Hfe),e(Hfe,KLo),e(H2,ZLo),e(H2,iG),e(iG,eyo),e(H2,oyo),e(z,ryo),e(z,U2),e(U2,Ufe),e(Ufe,tyo),e(U2,ayo),e(U2,dG),e(dG,nyo),e(U2,syo),e(z,lyo),e(z,J2),e(J2,Jfe),e(Jfe,iyo),e(J2,dyo),e(J2,cG),e(cG,cyo),e(J2,fyo),e(z,myo),e(z,Y2),e(Y2,Yfe),e(Yfe,gyo),e(Y2,hyo),e(Y2,fG),e(fG,pyo),e(Y2,uyo),e(z,_yo),e(z,K2),e(K2,Kfe),e(Kfe,byo),e(K2,vyo),e(K2,mG),e(mG,Fyo),e(K2,Tyo),e(z,Myo),e(z,Z2),e(Z2,Zfe),e(Zfe,Eyo),e(Z2,Cyo),e(Z2,gG),e(gG,wyo),e(Z2,Ayo),e(z,Lyo),e(z,e1),e(e1,eme),e(eme,yyo),e(e1,xyo),e(e1,hG),e(hG,$yo),e(e1,kyo),e(z,Syo),e(z,o1),e(o1,ome),e(ome,Ryo),e(o1,Pyo),e(o1,pG),e(pG,Byo),e(o1,Iyo),e(z,Nyo),e(z,r1),e(r1,rme),e(rme,qyo),e(r1,jyo),e(r1,uG),e(uG,Dyo),e(r1,Gyo),e(z,Oyo),e(z,t1),e(t1,tme),e(tme,Vyo),e(t1,Xyo),e(t1,_G),e(_G,zyo),e(t1,Wyo),e(z,Qyo),e(z,a1),e(a1,ame),e(ame,Hyo),e(a1,Uyo),e(a1,bG),e(bG,Jyo),e(a1,Yyo),e(z,Kyo),e(z,n1),e(n1,nme),e(nme,Zyo),e(n1,e8o),e(n1,vG),e(vG,o8o),e(n1,r8o),e(Ke,t8o),e(Ke,s1),e(s1,a8o),e(s1,sme),e(sme,n8o),e(s1,s8o),e(s1,lme),e(lme,l8o),e(Ke,i8o),M(l1,Ke,null),b(f,dGe,_),b(f,Vi,_),e(Vi,i1),e(i1,ime),M(aL,ime,null),e(Vi,d8o),e(Vi,dme),e(dme,c8o),b(f,cGe,_),b(f,So,_),M(nL,So,null),e(So,f8o),e(So,Xi),e(Xi,m8o),e(Xi,FG),e(FG,g8o),e(Xi,h8o),e(Xi,TG),e(TG,p8o),e(Xi,u8o),e(So,_8o),e(So,sL),e(sL,b8o),e(sL,cme),e(cme,v8o),e(sL,F8o),e(So,T8o),e(So,it),M(lL,it,null),e(it,M8o),e(it,fme),e(fme,E8o),e(it,C8o),e(it,zi),e(zi,w8o),e(zi,mme),e(mme,A8o),e(zi,L8o),e(zi,MG),e(MG,y8o),e(zi,x8o),e(it,$8o),M(d1,it,null),e(So,k8o),e(So,Ze),M(iL,Ze,null),e(Ze,S8o),e(Ze,gme),e(gme,R8o),e(Ze,P8o),e(Ze,Ba),e(Ba,B8o),e(Ba,hme),e(hme,I8o),e(Ba,N8o),e(Ba,pme),e(pme,q8o),e(Ba,j8o),e(Ba,ume),e(ume,D8o),e(Ba,G8o),e(Ze,O8o),e(Ze,Q),e(Q,c1),e(c1,_me),e(_me,V8o),e(c1,X8o),e(c1,EG),e(EG,z8o),e(c1,W8o),e(Q,Q8o),e(Q,f1),e(f1,bme),e(bme,H8o),e(f1,U8o),e(f1,CG),e(CG,J8o),e(f1,Y8o),e(Q,K8o),e(Q,m1),e(m1,vme),e(vme,Z8o),e(m1,exo),e(m1,wG),e(wG,oxo),e(m1,rxo),e(Q,txo),e(Q,g1),e(g1,Fme),e(Fme,axo),e(g1,nxo),e(g1,AG),e(AG,sxo),e(g1,lxo),e(Q,ixo),e(Q,h1),e(h1,Tme),e(Tme,dxo),e(h1,cxo),e(h1,LG),e(LG,fxo),e(h1,mxo),e(Q,gxo),e(Q,p1),e(p1,Mme),e(Mme,hxo),e(p1,pxo),e(p1,yG),e(yG,uxo),e(p1,_xo),e(Q,bxo),e(Q,u1),e(u1,Eme),e(Eme,vxo),e(u1,Fxo),e(u1,xG),e(xG,Txo),e(u1,Mxo),e(Q,Exo),e(Q,_1),e(_1,Cme),e(Cme,Cxo),e(_1,wxo),e(_1,$G),e($G,Axo),e(_1,Lxo),e(Q,yxo),e(Q,b1),e(b1,wme),e(wme,xxo),e(b1,$xo),e(b1,kG),e(kG,kxo),e(b1,Sxo),e(Q,Rxo),e(Q,v1),e(v1,Ame),e(Ame,Pxo),e(v1,Bxo),e(v1,SG),e(SG,Ixo),e(v1,Nxo),e(Q,qxo),e(Q,F1),e(F1,Lme),e(Lme,jxo),e(F1,Dxo),e(F1,RG),e(RG,Gxo),e(F1,Oxo),e(Q,Vxo),e(Q,T1),e(T1,yme),e(yme,Xxo),e(T1,zxo),e(T1,PG),e(PG,Wxo),e(T1,Qxo),e(Q,Hxo),e(Q,M1),e(M1,xme),e(xme,Uxo),e(M1,Jxo),e(M1,BG),e(BG,Yxo),e(M1,Kxo),e(Q,Zxo),e(Q,E1),e(E1,$me),e($me,e$o),e(E1,o$o),e(E1,IG),e(IG,r$o),e(E1,t$o),e(Q,a$o),e(Q,C1),e(C1,kme),e(kme,n$o),e(C1,s$o),e(C1,NG),e(NG,l$o),e(C1,i$o),e(Q,d$o),e(Q,w1),e(w1,Sme),e(Sme,c$o),e(w1,f$o),e(w1,qG),e(qG,m$o),e(w1,g$o),e(Q,h$o),e(Q,A1),e(A1,Rme),e(Rme,p$o),e(A1,u$o),e(A1,jG),e(jG,_$o),e(A1,b$o),e(Q,v$o),e(Q,L1),e(L1,Pme),e(Pme,F$o),e(L1,T$o),e(L1,DG),e(DG,M$o),e(L1,E$o),e(Q,C$o),e(Q,y1),e(y1,Bme),e(Bme,w$o),e(y1,A$o),e(y1,GG),e(GG,L$o),e(y1,y$o),e(Q,x$o),e(Q,x1),e(x1,Ime),e(Ime,$$o),e(x1,k$o),e(x1,OG),e(OG,S$o),e(x1,R$o),e(Q,P$o),e(Q,$1),e($1,Nme),e(Nme,B$o),e($1,I$o),e($1,VG),e(VG,N$o),e($1,q$o),e(Q,j$o),e(Q,k1),e(k1,qme),e(qme,D$o),e(k1,G$o),e(k1,XG),e(XG,O$o),e(k1,V$o),e(Q,X$o),e(Q,S1),e(S1,jme),e(jme,z$o),e(S1,W$o),e(S1,zG),e(zG,Q$o),e(S1,H$o),e(Q,U$o),e(Q,R1),e(R1,Dme),e(Dme,J$o),e(R1,Y$o),e(R1,WG),e(WG,K$o),e(R1,Z$o),e(Q,eko),e(Q,P1),e(P1,Gme),e(Gme,oko),e(P1,rko),e(P1,QG),e(QG,tko),e(P1,ako),e(Q,nko),e(Q,B1),e(B1,Ome),e(Ome,sko),e(B1,lko),e(B1,HG),e(HG,iko),e(B1,dko),e(Q,cko),e(Q,I1),e(I1,Vme),e(Vme,fko),e(I1,mko),e(I1,UG),e(UG,gko),e(I1,hko),e(Q,pko),e(Q,N1),e(N1,Xme),e(Xme,uko),e(N1,_ko),e(N1,JG),e(JG,bko),e(N1,vko),e(Q,Fko),e(Q,q1),e(q1,zme),e(zme,Tko),e(q1,Mko),e(q1,YG),e(YG,Eko),e(q1,Cko),e(Q,wko),e(Q,j1),e(j1,Wme),e(Wme,Ako),e(j1,Lko),e(j1,KG),e(KG,yko),e(j1,xko),e(Q,$ko),e(Q,D1),e(D1,Qme),e(Qme,kko),e(D1,Sko),e(D1,ZG),e(ZG,Rko),e(D1,Pko),e(Q,Bko),e(Q,G1),e(G1,Hme),e(Hme,Iko),e(G1,Nko),e(G1,Ume),e(Ume,qko),e(G1,jko),e(Q,Dko),e(Q,O1),e(O1,Jme),e(Jme,Gko),e(O1,Oko),e(O1,eO),e(eO,Vko),e(O1,Xko),e(Q,zko),e(Q,V1),e(V1,Yme),e(Yme,Wko),e(V1,Qko),e(V1,oO),e(oO,Hko),e(V1,Uko),e(Q,Jko),e(Q,X1),e(X1,Kme),e(Kme,Yko),e(X1,Kko),e(X1,rO),e(rO,Zko),e(X1,eSo),e(Q,oSo),e(Q,z1),e(z1,Zme),e(Zme,rSo),e(z1,tSo),e(z1,tO),e(tO,aSo),e(z1,nSo),e(Ze,sSo),e(Ze,W1),e(W1,lSo),e(W1,ege),e(ege,iSo),e(W1,dSo),e(W1,oge),e(oge,cSo),e(Ze,fSo),M(Q1,Ze,null),b(f,fGe,_),b(f,Wi,_),e(Wi,H1),e(H1,rge),M(dL,rge,null),e(Wi,mSo),e(Wi,tge),e(tge,gSo),b(f,mGe,_),b(f,Ro,_),M(cL,Ro,null),e(Ro,hSo),e(Ro,Qi),e(Qi,pSo),e(Qi,aO),e(aO,uSo),e(Qi,_So),e(Qi,nO),e(nO,bSo),e(Qi,vSo),e(Ro,FSo),e(Ro,fL),e(fL,TSo),e(fL,age),e(age,MSo),e(fL,ESo),e(Ro,CSo),e(Ro,dt),M(mL,dt,null),e(dt,wSo),e(dt,nge),e(nge,ASo),e(dt,LSo),e(dt,Hi),e(Hi,ySo),e(Hi,sge),e(sge,xSo),e(Hi,$So),e(Hi,sO),e(sO,kSo),e(Hi,SSo),e(dt,RSo),M(U1,dt,null),e(Ro,PSo),e(Ro,eo),M(gL,eo,null),e(eo,BSo),e(eo,lge),e(lge,ISo),e(eo,NSo),e(eo,Ia),e(Ia,qSo),e(Ia,ige),e(ige,jSo),e(Ia,DSo),e(Ia,dge),e(dge,GSo),e(Ia,OSo),e(Ia,cge),e(cge,VSo),e(Ia,XSo),e(eo,zSo),e(eo,pe),e(pe,J1),e(J1,fge),e(fge,WSo),e(J1,QSo),e(J1,lO),e(lO,HSo),e(J1,USo),e(pe,JSo),e(pe,Y1),e(Y1,mge),e(mge,YSo),e(Y1,KSo),e(Y1,iO),e(iO,ZSo),e(Y1,eRo),e(pe,oRo),e(pe,K1),e(K1,gge),e(gge,rRo),e(K1,tRo),e(K1,dO),e(dO,aRo),e(K1,nRo),e(pe,sRo),e(pe,Z1),e(Z1,hge),e(hge,lRo),e(Z1,iRo),e(Z1,cO),e(cO,dRo),e(Z1,cRo),e(pe,fRo),e(pe,eb),e(eb,pge),e(pge,mRo),e(eb,gRo),e(eb,fO),e(fO,hRo),e(eb,pRo),e(pe,uRo),e(pe,ob),e(ob,uge),e(uge,_Ro),e(ob,bRo),e(ob,mO),e(mO,vRo),e(ob,FRo),e(pe,TRo),e(pe,rb),e(rb,_ge),e(_ge,MRo),e(rb,ERo),e(rb,gO),e(gO,CRo),e(rb,wRo),e(pe,ARo),e(pe,tb),e(tb,bge),e(bge,LRo),e(tb,yRo),e(tb,hO),e(hO,xRo),e(tb,$Ro),e(pe,kRo),e(pe,ab),e(ab,vge),e(vge,SRo),e(ab,RRo),e(ab,pO),e(pO,PRo),e(ab,BRo),e(pe,IRo),e(pe,nb),e(nb,Fge),e(Fge,NRo),e(nb,qRo),e(nb,uO),e(uO,jRo),e(nb,DRo),e(pe,GRo),e(pe,sb),e(sb,Tge),e(Tge,ORo),e(sb,VRo),e(sb,_O),e(_O,XRo),e(sb,zRo),e(pe,WRo),e(pe,lb),e(lb,Mge),e(Mge,QRo),e(lb,HRo),e(lb,bO),e(bO,URo),e(lb,JRo),e(pe,YRo),e(pe,ib),e(ib,Ege),e(Ege,KRo),e(ib,ZRo),e(ib,vO),e(vO,ePo),e(ib,oPo),e(pe,rPo),e(pe,db),e(db,Cge),e(Cge,tPo),e(db,aPo),e(db,FO),e(FO,nPo),e(db,sPo),e(pe,lPo),e(pe,cb),e(cb,wge),e(wge,iPo),e(cb,dPo),e(cb,TO),e(TO,cPo),e(cb,fPo),e(pe,mPo),e(pe,fb),e(fb,Age),e(Age,gPo),e(fb,hPo),e(fb,MO),e(MO,pPo),e(fb,uPo),e(pe,_Po),e(pe,mb),e(mb,Lge),e(Lge,bPo),e(mb,vPo),e(mb,EO),e(EO,FPo),e(mb,TPo),e(eo,MPo),e(eo,gb),e(gb,EPo),e(gb,yge),e(yge,CPo),e(gb,wPo),e(gb,xge),e(xge,APo),e(eo,LPo),M(hb,eo,null),b(f,gGe,_),b(f,Ui,_),e(Ui,pb),e(pb,$ge),M(hL,$ge,null),e(Ui,yPo),e(Ui,kge),e(kge,xPo),b(f,hGe,_),b(f,Po,_),M(pL,Po,null),e(Po,$Po),e(Po,Ji),e(Ji,kPo),e(Ji,CO),e(CO,SPo),e(Ji,RPo),e(Ji,wO),e(wO,PPo),e(Ji,BPo),e(Po,IPo),e(Po,uL),e(uL,NPo),e(uL,Sge),e(Sge,qPo),e(uL,jPo),e(Po,DPo),e(Po,ct),M(_L,ct,null),e(ct,GPo),e(ct,Rge),e(Rge,OPo),e(ct,VPo),e(ct,Yi),e(Yi,XPo),e(Yi,Pge),e(Pge,zPo),e(Yi,WPo),e(Yi,AO),e(AO,QPo),e(Yi,HPo),e(ct,UPo),M(ub,ct,null),e(Po,JPo),e(Po,oo),M(bL,oo,null),e(oo,YPo),e(oo,Bge),e(Bge,KPo),e(oo,ZPo),e(oo,Na),e(Na,eBo),e(Na,Ige),e(Ige,oBo),e(Na,rBo),e(Na,Nge),e(Nge,tBo),e(Na,aBo),e(Na,qge),e(qge,nBo),e(Na,sBo),e(oo,lBo),e(oo,N),e(N,_b),e(_b,jge),e(jge,iBo),e(_b,dBo),e(_b,LO),e(LO,cBo),e(_b,fBo),e(N,mBo),e(N,bb),e(bb,Dge),e(Dge,gBo),e(bb,hBo),e(bb,yO),e(yO,pBo),e(bb,uBo),e(N,_Bo),e(N,vb),e(vb,Gge),e(Gge,bBo),e(vb,vBo),e(vb,xO),e(xO,FBo),e(vb,TBo),e(N,MBo),e(N,Fb),e(Fb,Oge),e(Oge,EBo),e(Fb,CBo),e(Fb,$O),e($O,wBo),e(Fb,ABo),e(N,LBo),e(N,Tb),e(Tb,Vge),e(Vge,yBo),e(Tb,xBo),e(Tb,kO),e(kO,$Bo),e(Tb,kBo),e(N,SBo),e(N,Mb),e(Mb,Xge),e(Xge,RBo),e(Mb,PBo),e(Mb,SO),e(SO,BBo),e(Mb,IBo),e(N,NBo),e(N,Eb),e(Eb,zge),e(zge,qBo),e(Eb,jBo),e(Eb,RO),e(RO,DBo),e(Eb,GBo),e(N,OBo),e(N,Cb),e(Cb,Wge),e(Wge,VBo),e(Cb,XBo),e(Cb,PO),e(PO,zBo),e(Cb,WBo),e(N,QBo),e(N,wb),e(wb,Qge),e(Qge,HBo),e(wb,UBo),e(wb,BO),e(BO,JBo),e(wb,YBo),e(N,KBo),e(N,Ab),e(Ab,Hge),e(Hge,ZBo),e(Ab,eIo),e(Ab,IO),e(IO,oIo),e(Ab,rIo),e(N,tIo),e(N,Lb),e(Lb,Uge),e(Uge,aIo),e(Lb,nIo),e(Lb,NO),e(NO,sIo),e(Lb,lIo),e(N,iIo),e(N,yb),e(yb,Jge),e(Jge,dIo),e(yb,cIo),e(yb,qO),e(qO,fIo),e(yb,mIo),e(N,gIo),e(N,xb),e(xb,Yge),e(Yge,hIo),e(xb,pIo),e(xb,jO),e(jO,uIo),e(xb,_Io),e(N,bIo),e(N,$b),e($b,Kge),e(Kge,vIo),e($b,FIo),e($b,DO),e(DO,TIo),e($b,MIo),e(N,EIo),e(N,kb),e(kb,Zge),e(Zge,CIo),e(kb,wIo),e(kb,GO),e(GO,AIo),e(kb,LIo),e(N,yIo),e(N,Sb),e(Sb,ehe),e(ehe,xIo),e(Sb,$Io),e(Sb,OO),e(OO,kIo),e(Sb,SIo),e(N,RIo),e(N,Rb),e(Rb,ohe),e(ohe,PIo),e(Rb,BIo),e(Rb,VO),e(VO,IIo),e(Rb,NIo),e(N,qIo),e(N,Pb),e(Pb,rhe),e(rhe,jIo),e(Pb,DIo),e(Pb,XO),e(XO,GIo),e(Pb,OIo),e(N,VIo),e(N,Bb),e(Bb,the),e(the,XIo),e(Bb,zIo),e(Bb,zO),e(zO,WIo),e(Bb,QIo),e(N,HIo),e(N,Ib),e(Ib,ahe),e(ahe,UIo),e(Ib,JIo),e(Ib,WO),e(WO,YIo),e(Ib,KIo),e(N,ZIo),e(N,Nb),e(Nb,nhe),e(nhe,eNo),e(Nb,oNo),e(Nb,QO),e(QO,rNo),e(Nb,tNo),e(N,aNo),e(N,qb),e(qb,she),e(she,nNo),e(qb,sNo),e(qb,HO),e(HO,lNo),e(qb,iNo),e(N,dNo),e(N,jb),e(jb,lhe),e(lhe,cNo),e(jb,fNo),e(jb,UO),e(UO,mNo),e(jb,gNo),e(N,hNo),e(N,Db),e(Db,ihe),e(ihe,pNo),e(Db,uNo),e(Db,JO),e(JO,_No),e(Db,bNo),e(N,vNo),e(N,Gb),e(Gb,dhe),e(dhe,FNo),e(Gb,TNo),e(Gb,YO),e(YO,MNo),e(Gb,ENo),e(N,CNo),e(N,Ob),e(Ob,che),e(che,wNo),e(Ob,ANo),e(Ob,KO),e(KO,LNo),e(Ob,yNo),e(N,xNo),e(N,Vb),e(Vb,fhe),e(fhe,$No),e(Vb,kNo),e(Vb,ZO),e(ZO,SNo),e(Vb,RNo),e(N,PNo),e(N,Xb),e(Xb,mhe),e(mhe,BNo),e(Xb,INo),e(Xb,eV),e(eV,NNo),e(Xb,qNo),e(N,jNo),e(N,zb),e(zb,ghe),e(ghe,DNo),e(zb,GNo),e(zb,oV),e(oV,ONo),e(zb,VNo),e(N,XNo),e(N,Wb),e(Wb,hhe),e(hhe,zNo),e(Wb,WNo),e(Wb,rV),e(rV,QNo),e(Wb,HNo),e(N,UNo),e(N,Qb),e(Qb,phe),e(phe,JNo),e(Qb,YNo),e(Qb,tV),e(tV,KNo),e(Qb,ZNo),e(N,eqo),e(N,Hb),e(Hb,uhe),e(uhe,oqo),e(Hb,rqo),e(Hb,aV),e(aV,tqo),e(Hb,aqo),e(N,nqo),e(N,Ub),e(Ub,_he),e(_he,sqo),e(Ub,lqo),e(Ub,nV),e(nV,iqo),e(Ub,dqo),e(N,cqo),e(N,Jb),e(Jb,bhe),e(bhe,fqo),e(Jb,mqo),e(Jb,sV),e(sV,gqo),e(Jb,hqo),e(N,pqo),e(N,Yb),e(Yb,vhe),e(vhe,uqo),e(Yb,_qo),e(Yb,lV),e(lV,bqo),e(Yb,vqo),e(N,Fqo),e(N,Kb),e(Kb,Fhe),e(Fhe,Tqo),e(Kb,Mqo),e(Kb,iV),e(iV,Eqo),e(Kb,Cqo),e(N,wqo),e(N,Zb),e(Zb,The),e(The,Aqo),e(Zb,Lqo),e(Zb,dV),e(dV,yqo),e(Zb,xqo),e(N,$qo),e(N,ev),e(ev,Mhe),e(Mhe,kqo),e(ev,Sqo),e(ev,cV),e(cV,Rqo),e(ev,Pqo),e(N,Bqo),e(N,ov),e(ov,Ehe),e(Ehe,Iqo),e(ov,Nqo),e(ov,fV),e(fV,qqo),e(ov,jqo),e(N,Dqo),e(N,rv),e(rv,Che),e(Che,Gqo),e(rv,Oqo),e(rv,mV),e(mV,Vqo),e(rv,Xqo),e(N,zqo),e(N,tv),e(tv,whe),e(whe,Wqo),e(tv,Qqo),e(tv,gV),e(gV,Hqo),e(tv,Uqo),e(N,Jqo),e(N,av),e(av,Ahe),e(Ahe,Yqo),e(av,Kqo),e(av,hV),e(hV,Zqo),e(av,ejo),e(N,ojo),e(N,nv),e(nv,Lhe),e(Lhe,rjo),e(nv,tjo),e(nv,pV),e(pV,ajo),e(nv,njo),e(N,sjo),e(N,sv),e(sv,yhe),e(yhe,ljo),e(sv,ijo),e(sv,uV),e(uV,djo),e(sv,cjo),e(N,fjo),e(N,lv),e(lv,xhe),e(xhe,mjo),e(lv,gjo),e(lv,_V),e(_V,hjo),e(lv,pjo),e(N,ujo),e(N,iv),e(iv,$he),e($he,_jo),e(iv,bjo),e(iv,bV),e(bV,vjo),e(iv,Fjo),e(N,Tjo),e(N,dv),e(dv,khe),e(khe,Mjo),e(dv,Ejo),e(dv,vV),e(vV,Cjo),e(dv,wjo),e(oo,Ajo),e(oo,cv),e(cv,Ljo),e(cv,She),e(She,yjo),e(cv,xjo),e(cv,Rhe),e(Rhe,$jo),e(oo,kjo),M(fv,oo,null),b(f,pGe,_),b(f,Ki,_),e(Ki,mv),e(mv,Phe),M(vL,Phe,null),e(Ki,Sjo),e(Ki,Bhe),e(Bhe,Rjo),b(f,uGe,_),b(f,Bo,_),M(FL,Bo,null),e(Bo,Pjo),e(Bo,Zi),e(Zi,Bjo),e(Zi,FV),e(FV,Ijo),e(Zi,Njo),e(Zi,TV),e(TV,qjo),e(Zi,jjo),e(Bo,Djo),e(Bo,TL),e(TL,Gjo),e(TL,Ihe),e(Ihe,Ojo),e(TL,Vjo),e(Bo,Xjo),e(Bo,ft),M(ML,ft,null),e(ft,zjo),e(ft,Nhe),e(Nhe,Wjo),e(ft,Qjo),e(ft,ed),e(ed,Hjo),e(ed,qhe),e(qhe,Ujo),e(ed,Jjo),e(ed,MV),e(MV,Yjo),e(ed,Kjo),e(ft,Zjo),M(gv,ft,null),e(Bo,eDo),e(Bo,ro),M(EL,ro,null),e(ro,oDo),e(ro,jhe),e(jhe,rDo),e(ro,tDo),e(ro,qa),e(qa,aDo),e(qa,Dhe),e(Dhe,nDo),e(qa,sDo),e(qa,Ghe),e(Ghe,lDo),e(qa,iDo),e(qa,Ohe),e(Ohe,dDo),e(qa,cDo),e(ro,fDo),e(ro,Z),e(Z,hv),e(hv,Vhe),e(Vhe,mDo),e(hv,gDo),e(hv,EV),e(EV,hDo),e(hv,pDo),e(Z,uDo),e(Z,pv),e(pv,Xhe),e(Xhe,_Do),e(pv,bDo),e(pv,CV),e(CV,vDo),e(pv,FDo),e(Z,TDo),e(Z,uv),e(uv,zhe),e(zhe,MDo),e(uv,EDo),e(uv,wV),e(wV,CDo),e(uv,wDo),e(Z,ADo),e(Z,_v),e(_v,Whe),e(Whe,LDo),e(_v,yDo),e(_v,AV),e(AV,xDo),e(_v,$Do),e(Z,kDo),e(Z,bv),e(bv,Qhe),e(Qhe,SDo),e(bv,RDo),e(bv,LV),e(LV,PDo),e(bv,BDo),e(Z,IDo),e(Z,vv),e(vv,Hhe),e(Hhe,NDo),e(vv,qDo),e(vv,yV),e(yV,jDo),e(vv,DDo),e(Z,GDo),e(Z,Fv),e(Fv,Uhe),e(Uhe,ODo),e(Fv,VDo),e(Fv,xV),e(xV,XDo),e(Fv,zDo),e(Z,WDo),e(Z,Tv),e(Tv,Jhe),e(Jhe,QDo),e(Tv,HDo),e(Tv,$V),e($V,UDo),e(Tv,JDo),e(Z,YDo),e(Z,Mv),e(Mv,Yhe),e(Yhe,KDo),e(Mv,ZDo),e(Mv,kV),e(kV,eGo),e(Mv,oGo),e(Z,rGo),e(Z,Ev),e(Ev,Khe),e(Khe,tGo),e(Ev,aGo),e(Ev,SV),e(SV,nGo),e(Ev,sGo),e(Z,lGo),e(Z,Cv),e(Cv,Zhe),e(Zhe,iGo),e(Cv,dGo),e(Cv,RV),e(RV,cGo),e(Cv,fGo),e(Z,mGo),e(Z,wv),e(wv,epe),e(epe,gGo),e(wv,hGo),e(wv,PV),e(PV,pGo),e(wv,uGo),e(Z,_Go),e(Z,Av),e(Av,ope),e(ope,bGo),e(Av,vGo),e(Av,BV),e(BV,FGo),e(Av,TGo),e(Z,MGo),e(Z,Lv),e(Lv,rpe),e(rpe,EGo),e(Lv,CGo),e(Lv,IV),e(IV,wGo),e(Lv,AGo),e(Z,LGo),e(Z,yv),e(yv,tpe),e(tpe,yGo),e(yv,xGo),e(yv,NV),e(NV,$Go),e(yv,kGo),e(Z,SGo),e(Z,xv),e(xv,ape),e(ape,RGo),e(xv,PGo),e(xv,qV),e(qV,BGo),e(xv,IGo),e(Z,NGo),e(Z,$v),e($v,npe),e(npe,qGo),e($v,jGo),e($v,jV),e(jV,DGo),e($v,GGo),e(Z,OGo),e(Z,kv),e(kv,spe),e(spe,VGo),e(kv,XGo),e(kv,DV),e(DV,zGo),e(kv,WGo),e(Z,QGo),e(Z,Sv),e(Sv,lpe),e(lpe,HGo),e(Sv,UGo),e(Sv,GV),e(GV,JGo),e(Sv,YGo),e(Z,KGo),e(Z,Rv),e(Rv,ipe),e(ipe,ZGo),e(Rv,eOo),e(Rv,OV),e(OV,oOo),e(Rv,rOo),e(Z,tOo),e(Z,Pv),e(Pv,dpe),e(dpe,aOo),e(Pv,nOo),e(Pv,VV),e(VV,sOo),e(Pv,lOo),e(Z,iOo),e(Z,Bv),e(Bv,cpe),e(cpe,dOo),e(Bv,cOo),e(Bv,XV),e(XV,fOo),e(Bv,mOo),e(Z,gOo),e(Z,Iv),e(Iv,fpe),e(fpe,hOo),e(Iv,pOo),e(Iv,zV),e(zV,uOo),e(Iv,_Oo),e(Z,bOo),e(Z,Nv),e(Nv,mpe),e(mpe,vOo),e(Nv,FOo),e(Nv,WV),e(WV,TOo),e(Nv,MOo),e(Z,EOo),e(Z,qv),e(qv,gpe),e(gpe,COo),e(qv,wOo),e(qv,QV),e(QV,AOo),e(qv,LOo),e(Z,yOo),e(Z,jv),e(jv,hpe),e(hpe,xOo),e(jv,$Oo),e(jv,HV),e(HV,kOo),e(jv,SOo),e(Z,ROo),e(Z,Dv),e(Dv,ppe),e(ppe,POo),e(Dv,BOo),e(Dv,UV),e(UV,IOo),e(Dv,NOo),e(Z,qOo),e(Z,Gv),e(Gv,upe),e(upe,jOo),e(Gv,DOo),e(Gv,JV),e(JV,GOo),e(Gv,OOo),e(Z,VOo),e(Z,Ov),e(Ov,_pe),e(_pe,XOo),e(Ov,zOo),e(Ov,YV),e(YV,WOo),e(Ov,QOo),e(ro,HOo),e(ro,Vv),e(Vv,UOo),e(Vv,bpe),e(bpe,JOo),e(Vv,YOo),e(Vv,vpe),e(vpe,KOo),e(ro,ZOo),M(Xv,ro,null),b(f,_Ge,_),b(f,od,_),e(od,zv),e(zv,Fpe),M(CL,Fpe,null),e(od,eVo),e(od,Tpe),e(Tpe,oVo),b(f,bGe,_),b(f,Io,_),M(wL,Io,null),e(Io,rVo),e(Io,rd),e(rd,tVo),e(rd,KV),e(KV,aVo),e(rd,nVo),e(rd,ZV),e(ZV,sVo),e(rd,lVo),e(Io,iVo),e(Io,AL),e(AL,dVo),e(AL,Mpe),e(Mpe,cVo),e(AL,fVo),e(Io,mVo),e(Io,mt),M(LL,mt,null),e(mt,gVo),e(mt,Epe),e(Epe,hVo),e(mt,pVo),e(mt,td),e(td,uVo),e(td,Cpe),e(Cpe,_Vo),e(td,bVo),e(td,eX),e(eX,vVo),e(td,FVo),e(mt,TVo),M(Wv,mt,null),e(Io,MVo),e(Io,to),M(yL,to,null),e(to,EVo),e(to,wpe),e(wpe,CVo),e(to,wVo),e(to,ja),e(ja,AVo),e(ja,Ape),e(Ape,LVo),e(ja,yVo),e(ja,Lpe),e(Lpe,xVo),e(ja,$Vo),e(ja,ype),e(ype,kVo),e(ja,SVo),e(to,RVo),e(to,Zr),e(Zr,Qv),e(Qv,xpe),e(xpe,PVo),e(Qv,BVo),e(Qv,oX),e(oX,IVo),e(Qv,NVo),e(Zr,qVo),e(Zr,Hv),e(Hv,$pe),e($pe,jVo),e(Hv,DVo),e(Hv,rX),e(rX,GVo),e(Hv,OVo),e(Zr,VVo),e(Zr,Uv),e(Uv,kpe),e(kpe,XVo),e(Uv,zVo),e(Uv,tX),e(tX,WVo),e(Uv,QVo),e(Zr,HVo),e(Zr,Jv),e(Jv,Spe),e(Spe,UVo),e(Jv,JVo),e(Jv,aX),e(aX,YVo),e(Jv,KVo),e(Zr,ZVo),e(Zr,Yv),e(Yv,Rpe),e(Rpe,eXo),e(Yv,oXo),e(Yv,nX),e(nX,rXo),e(Yv,tXo),e(to,aXo),e(to,Kv),e(Kv,nXo),e(Kv,Ppe),e(Ppe,sXo),e(Kv,lXo),e(Kv,Bpe),e(Bpe,iXo),e(to,dXo),M(Zv,to,null),b(f,vGe,_),b(f,ad,_),e(ad,eF),e(eF,Ipe),M(xL,Ipe,null),e(ad,cXo),e(ad,Npe),e(Npe,fXo),b(f,FGe,_),b(f,No,_),M($L,No,null),e(No,mXo),e(No,nd),e(nd,gXo),e(nd,sX),e(sX,hXo),e(nd,pXo),e(nd,lX),e(lX,uXo),e(nd,_Xo),e(No,bXo),e(No,kL),e(kL,vXo),e(kL,qpe),e(qpe,FXo),e(kL,TXo),e(No,MXo),e(No,gt),M(SL,gt,null),e(gt,EXo),e(gt,jpe),e(jpe,CXo),e(gt,wXo),e(gt,sd),e(sd,AXo),e(sd,Dpe),e(Dpe,LXo),e(sd,yXo),e(sd,iX),e(iX,xXo),e(sd,$Xo),e(gt,kXo),M(oF,gt,null),e(No,SXo),e(No,ao),M(RL,ao,null),e(ao,RXo),e(ao,Gpe),e(Gpe,PXo),e(ao,BXo),e(ao,Da),e(Da,IXo),e(Da,Ope),e(Ope,NXo),e(Da,qXo),e(Da,Vpe),e(Vpe,jXo),e(Da,DXo),e(Da,Xpe),e(Xpe,GXo),e(Da,OXo),e(ao,VXo),e(ao,U),e(U,rF),e(rF,zpe),e(zpe,XXo),e(rF,zXo),e(rF,dX),e(dX,WXo),e(rF,QXo),e(U,HXo),e(U,tF),e(tF,Wpe),e(Wpe,UXo),e(tF,JXo),e(tF,cX),e(cX,YXo),e(tF,KXo),e(U,ZXo),e(U,aF),e(aF,Qpe),e(Qpe,ezo),e(aF,ozo),e(aF,fX),e(fX,rzo),e(aF,tzo),e(U,azo),e(U,nF),e(nF,Hpe),e(Hpe,nzo),e(nF,szo),e(nF,mX),e(mX,lzo),e(nF,izo),e(U,dzo),e(U,sF),e(sF,Upe),e(Upe,czo),e(sF,fzo),e(sF,gX),e(gX,mzo),e(sF,gzo),e(U,hzo),e(U,lF),e(lF,Jpe),e(Jpe,pzo),e(lF,uzo),e(lF,hX),e(hX,_zo),e(lF,bzo),e(U,vzo),e(U,iF),e(iF,Ype),e(Ype,Fzo),e(iF,Tzo),e(iF,pX),e(pX,Mzo),e(iF,Ezo),e(U,Czo),e(U,dF),e(dF,Kpe),e(Kpe,wzo),e(dF,Azo),e(dF,uX),e(uX,Lzo),e(dF,yzo),e(U,xzo),e(U,cF),e(cF,Zpe),e(Zpe,$zo),e(cF,kzo),e(cF,_X),e(_X,Szo),e(cF,Rzo),e(U,Pzo),e(U,fF),e(fF,eue),e(eue,Bzo),e(fF,Izo),e(fF,bX),e(bX,Nzo),e(fF,qzo),e(U,jzo),e(U,mF),e(mF,oue),e(oue,Dzo),e(mF,Gzo),e(mF,vX),e(vX,Ozo),e(mF,Vzo),e(U,Xzo),e(U,gF),e(gF,rue),e(rue,zzo),e(gF,Wzo),e(gF,FX),e(FX,Qzo),e(gF,Hzo),e(U,Uzo),e(U,hF),e(hF,tue),e(tue,Jzo),e(hF,Yzo),e(hF,TX),e(TX,Kzo),e(hF,Zzo),e(U,eWo),e(U,pF),e(pF,aue),e(aue,oWo),e(pF,rWo),e(pF,MX),e(MX,tWo),e(pF,aWo),e(U,nWo),e(U,uF),e(uF,nue),e(nue,sWo),e(uF,lWo),e(uF,EX),e(EX,iWo),e(uF,dWo),e(U,cWo),e(U,_F),e(_F,sue),e(sue,fWo),e(_F,mWo),e(_F,CX),e(CX,gWo),e(_F,hWo),e(U,pWo),e(U,bF),e(bF,lue),e(lue,uWo),e(bF,_Wo),e(bF,wX),e(wX,bWo),e(bF,vWo),e(U,FWo),e(U,vF),e(vF,iue),e(iue,TWo),e(vF,MWo),e(vF,AX),e(AX,EWo),e(vF,CWo),e(U,wWo),e(U,FF),e(FF,due),e(due,AWo),e(FF,LWo),e(FF,LX),e(LX,yWo),e(FF,xWo),e(U,$Wo),e(U,TF),e(TF,cue),e(cue,kWo),e(TF,SWo),e(TF,yX),e(yX,RWo),e(TF,PWo),e(U,BWo),e(U,MF),e(MF,fue),e(fue,IWo),e(MF,NWo),e(MF,xX),e(xX,qWo),e(MF,jWo),e(U,DWo),e(U,EF),e(EF,mue),e(mue,GWo),e(EF,OWo),e(EF,$X),e($X,VWo),e(EF,XWo),e(U,zWo),e(U,CF),e(CF,gue),e(gue,WWo),e(CF,QWo),e(CF,kX),e(kX,HWo),e(CF,UWo),e(U,JWo),e(U,wF),e(wF,hue),e(hue,YWo),e(wF,KWo),e(wF,SX),e(SX,ZWo),e(wF,eQo),e(U,oQo),e(U,AF),e(AF,pue),e(pue,rQo),e(AF,tQo),e(AF,RX),e(RX,aQo),e(AF,nQo),e(U,sQo),e(U,LF),e(LF,uue),e(uue,lQo),e(LF,iQo),e(LF,PX),e(PX,dQo),e(LF,cQo),e(U,fQo),e(U,yF),e(yF,_ue),e(_ue,mQo),e(yF,gQo),e(yF,BX),e(BX,hQo),e(yF,pQo),e(U,uQo),e(U,xF),e(xF,bue),e(bue,_Qo),e(xF,bQo),e(xF,IX),e(IX,vQo),e(xF,FQo),e(U,TQo),e(U,$F),e($F,vue),e(vue,MQo),e($F,EQo),e($F,NX),e(NX,CQo),e($F,wQo),e(U,AQo),e(U,kF),e(kF,Fue),e(Fue,LQo),e(kF,yQo),e(kF,qX),e(qX,xQo),e(kF,$Qo),e(U,kQo),e(U,SF),e(SF,Tue),e(Tue,SQo),e(SF,RQo),e(SF,jX),e(jX,PQo),e(SF,BQo),e(U,IQo),e(U,RF),e(RF,Mue),e(Mue,NQo),e(RF,qQo),e(RF,DX),e(DX,jQo),e(RF,DQo),e(U,GQo),e(U,PF),e(PF,Eue),e(Eue,OQo),e(PF,VQo),e(PF,GX),e(GX,XQo),e(PF,zQo),e(U,WQo),e(U,BF),e(BF,Cue),e(Cue,QQo),e(BF,HQo),e(BF,OX),e(OX,UQo),e(BF,JQo),e(ao,YQo),e(ao,IF),e(IF,KQo),e(IF,wue),e(wue,ZQo),e(IF,eHo),e(IF,Aue),e(Aue,oHo),e(ao,rHo),M(NF,ao,null),b(f,TGe,_),b(f,ld,_),e(ld,qF),e(qF,Lue),M(PL,Lue,null),e(ld,tHo),e(ld,yue),e(yue,aHo),b(f,MGe,_),b(f,qo,_),M(BL,qo,null),e(qo,nHo),e(qo,id),e(id,sHo),e(id,VX),e(VX,lHo),e(id,iHo),e(id,XX),e(XX,dHo),e(id,cHo),e(qo,fHo),e(qo,IL),e(IL,mHo),e(IL,xue),e(xue,gHo),e(IL,hHo),e(qo,pHo),e(qo,ht),M(NL,ht,null),e(ht,uHo),e(ht,$ue),e($ue,_Ho),e(ht,bHo),e(ht,dd),e(dd,vHo),e(dd,kue),e(kue,FHo),e(dd,THo),e(dd,zX),e(zX,MHo),e(dd,EHo),e(ht,CHo),M(jF,ht,null),e(qo,wHo),e(qo,no),M(qL,no,null),e(no,AHo),e(no,Sue),e(Sue,LHo),e(no,yHo),e(no,Ga),e(Ga,xHo),e(Ga,Rue),e(Rue,$Ho),e(Ga,kHo),e(Ga,Pue),e(Pue,SHo),e(Ga,RHo),e(Ga,Bue),e(Bue,PHo),e(Ga,BHo),e(no,IHo),e(no,V),e(V,DF),e(DF,Iue),e(Iue,NHo),e(DF,qHo),e(DF,WX),e(WX,jHo),e(DF,DHo),e(V,GHo),e(V,GF),e(GF,Nue),e(Nue,OHo),e(GF,VHo),e(GF,QX),e(QX,XHo),e(GF,zHo),e(V,WHo),e(V,OF),e(OF,que),e(que,QHo),e(OF,HHo),e(OF,HX),e(HX,UHo),e(OF,JHo),e(V,YHo),e(V,VF),e(VF,jue),e(jue,KHo),e(VF,ZHo),e(VF,UX),e(UX,eUo),e(VF,oUo),e(V,rUo),e(V,XF),e(XF,Due),e(Due,tUo),e(XF,aUo),e(XF,JX),e(JX,nUo),e(XF,sUo),e(V,lUo),e(V,zF),e(zF,Gue),e(Gue,iUo),e(zF,dUo),e(zF,YX),e(YX,cUo),e(zF,fUo),e(V,mUo),e(V,WF),e(WF,Oue),e(Oue,gUo),e(WF,hUo),e(WF,KX),e(KX,pUo),e(WF,uUo),e(V,_Uo),e(V,QF),e(QF,Vue),e(Vue,bUo),e(QF,vUo),e(QF,ZX),e(ZX,FUo),e(QF,TUo),e(V,MUo),e(V,HF),e(HF,Xue),e(Xue,EUo),e(HF,CUo),e(HF,ez),e(ez,wUo),e(HF,AUo),e(V,LUo),e(V,UF),e(UF,zue),e(zue,yUo),e(UF,xUo),e(UF,oz),e(oz,$Uo),e(UF,kUo),e(V,SUo),e(V,JF),e(JF,Wue),e(Wue,RUo),e(JF,PUo),e(JF,rz),e(rz,BUo),e(JF,IUo),e(V,NUo),e(V,YF),e(YF,Que),e(Que,qUo),e(YF,jUo),e(YF,tz),e(tz,DUo),e(YF,GUo),e(V,OUo),e(V,KF),e(KF,Hue),e(Hue,VUo),e(KF,XUo),e(KF,az),e(az,zUo),e(KF,WUo),e(V,QUo),e(V,ZF),e(ZF,Uue),e(Uue,HUo),e(ZF,UUo),e(ZF,nz),e(nz,JUo),e(ZF,YUo),e(V,KUo),e(V,e6),e(e6,Jue),e(Jue,ZUo),e(e6,eJo),e(e6,sz),e(sz,oJo),e(e6,rJo),e(V,tJo),e(V,o6),e(o6,Yue),e(Yue,aJo),e(o6,nJo),e(o6,lz),e(lz,sJo),e(o6,lJo),e(V,iJo),e(V,r6),e(r6,Kue),e(Kue,dJo),e(r6,cJo),e(r6,iz),e(iz,fJo),e(r6,mJo),e(V,gJo),e(V,t6),e(t6,Zue),e(Zue,hJo),e(t6,pJo),e(t6,dz),e(dz,uJo),e(t6,_Jo),e(V,bJo),e(V,a6),e(a6,e_e),e(e_e,vJo),e(a6,FJo),e(a6,cz),e(cz,TJo),e(a6,MJo),e(V,EJo),e(V,n6),e(n6,o_e),e(o_e,CJo),e(n6,wJo),e(n6,fz),e(fz,AJo),e(n6,LJo),e(V,yJo),e(V,s6),e(s6,r_e),e(r_e,xJo),e(s6,$Jo),e(s6,mz),e(mz,kJo),e(s6,SJo),e(V,RJo),e(V,l6),e(l6,t_e),e(t_e,PJo),e(l6,BJo),e(l6,gz),e(gz,IJo),e(l6,NJo),e(V,qJo),e(V,i6),e(i6,a_e),e(a_e,jJo),e(i6,DJo),e(i6,hz),e(hz,GJo),e(i6,OJo),e(V,VJo),e(V,d6),e(d6,n_e),e(n_e,XJo),e(d6,zJo),e(d6,pz),e(pz,WJo),e(d6,QJo),e(V,HJo),e(V,c6),e(c6,s_e),e(s_e,UJo),e(c6,JJo),e(c6,uz),e(uz,YJo),e(c6,KJo),e(V,ZJo),e(V,f6),e(f6,l_e),e(l_e,eYo),e(f6,oYo),e(f6,_z),e(_z,rYo),e(f6,tYo),e(V,aYo),e(V,m6),e(m6,i_e),e(i_e,nYo),e(m6,sYo),e(m6,bz),e(bz,lYo),e(m6,iYo),e(V,dYo),e(V,g6),e(g6,d_e),e(d_e,cYo),e(g6,fYo),e(g6,vz),e(vz,mYo),e(g6,gYo),e(V,hYo),e(V,h6),e(h6,c_e),e(c_e,pYo),e(h6,uYo),e(h6,Fz),e(Fz,_Yo),e(h6,bYo),e(V,vYo),e(V,p6),e(p6,f_e),e(f_e,FYo),e(p6,TYo),e(p6,Tz),e(Tz,MYo),e(p6,EYo),e(V,CYo),e(V,u6),e(u6,m_e),e(m_e,wYo),e(u6,AYo),e(u6,Mz),e(Mz,LYo),e(u6,yYo),e(V,xYo),e(V,_6),e(_6,g_e),e(g_e,$Yo),e(_6,kYo),e(_6,Ez),e(Ez,SYo),e(_6,RYo),e(V,PYo),e(V,b6),e(b6,h_e),e(h_e,BYo),e(b6,IYo),e(b6,Cz),e(Cz,NYo),e(b6,qYo),e(V,jYo),e(V,v6),e(v6,p_e),e(p_e,DYo),e(v6,GYo),e(v6,wz),e(wz,OYo),e(v6,VYo),e(V,XYo),e(V,F6),e(F6,u_e),e(u_e,zYo),e(F6,WYo),e(F6,Az),e(Az,QYo),e(F6,HYo),e(V,UYo),e(V,T6),e(T6,__e),e(__e,JYo),e(T6,YYo),e(T6,Lz),e(Lz,KYo),e(T6,ZYo),e(V,eKo),e(V,M6),e(M6,b_e),e(b_e,oKo),e(M6,rKo),e(M6,yz),e(yz,tKo),e(M6,aKo),e(V,nKo),e(V,E6),e(E6,v_e),e(v_e,sKo),e(E6,lKo),e(E6,xz),e(xz,iKo),e(E6,dKo),e(V,cKo),e(V,C6),e(C6,F_e),e(F_e,fKo),e(C6,mKo),e(C6,$z),e($z,gKo),e(C6,hKo),e(V,pKo),e(V,w6),e(w6,T_e),e(T_e,uKo),e(w6,_Ko),e(w6,kz),e(kz,bKo),e(w6,vKo),e(no,FKo),e(no,A6),e(A6,TKo),e(A6,M_e),e(M_e,MKo),e(A6,EKo),e(A6,E_e),e(E_e,CKo),e(no,wKo),M(L6,no,null),b(f,EGe,_),b(f,cd,_),e(cd,y6),e(y6,C_e),M(jL,C_e,null),e(cd,AKo),e(cd,w_e),e(w_e,LKo),b(f,CGe,_),b(f,jo,_),M(DL,jo,null),e(jo,yKo),e(jo,fd),e(fd,xKo),e(fd,Sz),e(Sz,$Ko),e(fd,kKo),e(fd,Rz),e(Rz,SKo),e(fd,RKo),e(jo,PKo),e(jo,GL),e(GL,BKo),e(GL,A_e),e(A_e,IKo),e(GL,NKo),e(jo,qKo),e(jo,pt),M(OL,pt,null),e(pt,jKo),e(pt,L_e),e(L_e,DKo),e(pt,GKo),e(pt,md),e(md,OKo),e(md,y_e),e(y_e,VKo),e(md,XKo),e(md,Pz),e(Pz,zKo),e(md,WKo),e(pt,QKo),M(x6,pt,null),e(jo,HKo),e(jo,so),M(VL,so,null),e(so,UKo),e(so,x_e),e(x_e,JKo),e(so,YKo),e(so,Oa),e(Oa,KKo),e(Oa,$_e),e($_e,ZKo),e(Oa,eZo),e(Oa,k_e),e(k_e,oZo),e(Oa,rZo),e(Oa,S_e),e(S_e,tZo),e(Oa,aZo),e(so,nZo),e(so,R_e),e(R_e,$6),e($6,P_e),e(P_e,sZo),e($6,lZo),e($6,Bz),e(Bz,iZo),e($6,dZo),e(so,cZo),e(so,k6),e(k6,fZo),e(k6,B_e),e(B_e,mZo),e(k6,gZo),e(k6,I_e),e(I_e,hZo),e(so,pZo),M(S6,so,null),b(f,wGe,_),b(f,gd,_),e(gd,R6),e(R6,N_e),M(XL,N_e,null),e(gd,uZo),e(gd,q_e),e(q_e,_Zo),b(f,AGe,_),b(f,Do,_),M(zL,Do,null),e(Do,bZo),e(Do,hd),e(hd,vZo),e(hd,Iz),e(Iz,FZo),e(hd,TZo),e(hd,Nz),e(Nz,MZo),e(hd,EZo),e(Do,CZo),e(Do,WL),e(WL,wZo),e(WL,j_e),e(j_e,AZo),e(WL,LZo),e(Do,yZo),e(Do,ut),M(QL,ut,null),e(ut,xZo),e(ut,D_e),e(D_e,$Zo),e(ut,kZo),e(ut,pd),e(pd,SZo),e(pd,G_e),e(G_e,RZo),e(pd,PZo),e(pd,qz),e(qz,BZo),e(pd,IZo),e(ut,NZo),M(P6,ut,null),e(Do,qZo),e(Do,lo),M(HL,lo,null),e(lo,jZo),e(lo,O_e),e(O_e,DZo),e(lo,GZo),e(lo,Va),e(Va,OZo),e(Va,V_e),e(V_e,VZo),e(Va,XZo),e(Va,X_e),e(X_e,zZo),e(Va,WZo),e(Va,z_e),e(z_e,QZo),e(Va,HZo),e(lo,UZo),e(lo,Fe),e(Fe,B6),e(B6,W_e),e(W_e,JZo),e(B6,YZo),e(B6,jz),e(jz,KZo),e(B6,ZZo),e(Fe,eer),e(Fe,I6),e(I6,Q_e),e(Q_e,oer),e(I6,rer),e(I6,Dz),e(Dz,ter),e(I6,aer),e(Fe,ner),e(Fe,N6),e(N6,H_e),e(H_e,ser),e(N6,ler),e(N6,Gz),e(Gz,ier),e(N6,der),e(Fe,cer),e(Fe,q6),e(q6,U_e),e(U_e,fer),e(q6,mer),e(q6,Oz),e(Oz,ger),e(q6,her),e(Fe,per),e(Fe,Os),e(Os,J_e),e(J_e,uer),e(Os,_er),e(Os,Vz),e(Vz,ber),e(Os,ver),e(Os,Xz),e(Xz,Fer),e(Os,Ter),e(Fe,Mer),e(Fe,j6),e(j6,Y_e),e(Y_e,Eer),e(j6,Cer),e(j6,zz),e(zz,wer),e(j6,Aer),e(Fe,Ler),e(Fe,Vs),e(Vs,K_e),e(K_e,yer),e(Vs,xer),e(Vs,Wz),e(Wz,$er),e(Vs,ker),e(Vs,Qz),e(Qz,Ser),e(Vs,Rer),e(Fe,Per),e(Fe,_t),e(_t,Z_e),e(Z_e,Ber),e(_t,Ier),e(_t,Hz),e(Hz,Ner),e(_t,qer),e(_t,Uz),e(Uz,jer),e(_t,Der),e(_t,Jz),e(Jz,Ger),e(_t,Oer),e(Fe,Ver),e(Fe,D6),e(D6,e2e),e(e2e,Xer),e(D6,zer),e(D6,Yz),e(Yz,Wer),e(D6,Qer),e(Fe,Her),e(Fe,G6),e(G6,o2e),e(o2e,Uer),e(G6,Jer),e(G6,Kz),e(Kz,Yer),e(G6,Ker),e(Fe,Zer),e(Fe,O6),e(O6,r2e),e(r2e,eor),e(O6,oor),e(O6,Zz),e(Zz,ror),e(O6,tor),e(Fe,aor),e(Fe,V6),e(V6,t2e),e(t2e,nor),e(V6,sor),e(V6,eW),e(eW,lor),e(V6,ior),e(Fe,dor),e(Fe,X6),e(X6,a2e),e(a2e,cor),e(X6,mor),e(X6,oW),e(oW,gor),e(X6,hor),e(Fe,por),e(Fe,z6),e(z6,n2e),e(n2e,uor),e(z6,_or),e(z6,rW),e(rW,bor),e(z6,vor),e(Fe,For),e(Fe,W6),e(W6,s2e),e(s2e,Tor),e(W6,Mor),e(W6,tW),e(tW,Eor),e(W6,Cor),e(lo,wor),e(lo,Q6),e(Q6,Aor),e(Q6,l2e),e(l2e,Lor),e(Q6,yor),e(Q6,i2e),e(i2e,xor),e(lo,$or),M(H6,lo,null),b(f,LGe,_),b(f,ud,_),e(ud,U6),e(U6,d2e),M(UL,d2e,null),e(ud,kor),e(ud,c2e),e(c2e,Sor),b(f,yGe,_),b(f,Go,_),M(JL,Go,null),e(Go,Ror),e(Go,_d),e(_d,Por),e(_d,aW),e(aW,Bor),e(_d,Ior),e(_d,nW),e(nW,Nor),e(_d,qor),e(Go,jor),e(Go,YL),e(YL,Dor),e(YL,f2e),e(f2e,Gor),e(YL,Oor),e(Go,Vor),e(Go,bt),M(KL,bt,null),e(bt,Xor),e(bt,m2e),e(m2e,zor),e(bt,Wor),e(bt,bd),e(bd,Qor),e(bd,g2e),e(g2e,Hor),e(bd,Uor),e(bd,sW),e(sW,Jor),e(bd,Yor),e(bt,Kor),M(J6,bt,null),e(Go,Zor),e(Go,io),M(ZL,io,null),e(io,err),e(io,h2e),e(h2e,orr),e(io,rrr),e(io,Xa),e(Xa,trr),e(Xa,p2e),e(p2e,arr),e(Xa,nrr),e(Xa,u2e),e(u2e,srr),e(Xa,lrr),e(Xa,_2e),e(_2e,irr),e(Xa,drr),e(io,crr),e(io,b2e),e(b2e,Y6),e(Y6,v2e),e(v2e,frr),e(Y6,mrr),e(Y6,lW),e(lW,grr),e(Y6,hrr),e(io,prr),e(io,K6),e(K6,urr),e(K6,F2e),e(F2e,_rr),e(K6,brr),e(K6,T2e),e(T2e,vrr),e(io,Frr),M(Z6,io,null),b(f,xGe,_),b(f,vd,_),e(vd,eT),e(eT,M2e),M(ey,M2e,null),e(vd,Trr),e(vd,E2e),e(E2e,Mrr),b(f,$Ge,_),b(f,Oo,_),M(oy,Oo,null),e(Oo,Err),e(Oo,Fd),e(Fd,Crr),e(Fd,iW),e(iW,wrr),e(Fd,Arr),e(Fd,dW),e(dW,Lrr),e(Fd,yrr),e(Oo,xrr),e(Oo,ry),e(ry,$rr),e(ry,C2e),e(C2e,krr),e(ry,Srr),e(Oo,Rrr),e(Oo,vt),M(ty,vt,null),e(vt,Prr),e(vt,w2e),e(w2e,Brr),e(vt,Irr),e(vt,Td),e(Td,Nrr),e(Td,A2e),e(A2e,qrr),e(Td,jrr),e(Td,cW),e(cW,Drr),e(Td,Grr),e(vt,Orr),M(oT,vt,null),e(Oo,Vrr),e(Oo,co),M(ay,co,null),e(co,Xrr),e(co,L2e),e(L2e,zrr),e(co,Wrr),e(co,za),e(za,Qrr),e(za,y2e),e(y2e,Hrr),e(za,Urr),e(za,x2e),e(x2e,Jrr),e(za,Yrr),e(za,$2e),e($2e,Krr),e(za,Zrr),e(co,etr),e(co,k2e),e(k2e,rT),e(rT,S2e),e(S2e,otr),e(rT,rtr),e(rT,fW),e(fW,ttr),e(rT,atr),e(co,ntr),e(co,tT),e(tT,str),e(tT,R2e),e(R2e,ltr),e(tT,itr),e(tT,P2e),e(P2e,dtr),e(co,ctr),M(aT,co,null),b(f,kGe,_),b(f,Md,_),e(Md,nT),e(nT,B2e),M(ny,B2e,null),e(Md,ftr),e(Md,I2e),e(I2e,mtr),b(f,SGe,_),b(f,Vo,_),M(sy,Vo,null),e(Vo,gtr),e(Vo,Ed),e(Ed,htr),e(Ed,mW),e(mW,ptr),e(Ed,utr),e(Ed,gW),e(gW,_tr),e(Ed,btr),e(Vo,vtr),e(Vo,ly),e(ly,Ftr),e(ly,N2e),e(N2e,Ttr),e(ly,Mtr),e(Vo,Etr),e(Vo,Ft),M(iy,Ft,null),e(Ft,Ctr),e(Ft,q2e),e(q2e,wtr),e(Ft,Atr),e(Ft,Cd),e(Cd,Ltr),e(Cd,j2e),e(j2e,ytr),e(Cd,xtr),e(Cd,hW),e(hW,$tr),e(Cd,ktr),e(Ft,Str),M(sT,Ft,null),e(Vo,Rtr),e(Vo,fo),M(dy,fo,null),e(fo,Ptr),e(fo,D2e),e(D2e,Btr),e(fo,Itr),e(fo,Wa),e(Wa,Ntr),e(Wa,G2e),e(G2e,qtr),e(Wa,jtr),e(Wa,O2e),e(O2e,Dtr),e(Wa,Gtr),e(Wa,V2e),e(V2e,Otr),e(Wa,Vtr),e(fo,Xtr),e(fo,Pe),e(Pe,lT),e(lT,X2e),e(X2e,ztr),e(lT,Wtr),e(lT,pW),e(pW,Qtr),e(lT,Htr),e(Pe,Utr),e(Pe,iT),e(iT,z2e),e(z2e,Jtr),e(iT,Ytr),e(iT,uW),e(uW,Ktr),e(iT,Ztr),e(Pe,ear),e(Pe,dT),e(dT,W2e),e(W2e,oar),e(dT,rar),e(dT,_W),e(_W,tar),e(dT,aar),e(Pe,nar),e(Pe,cT),e(cT,Q2e),e(Q2e,sar),e(cT,lar),e(cT,bW),e(bW,iar),e(cT,dar),e(Pe,car),e(Pe,fT),e(fT,H2e),e(H2e,far),e(fT,mar),e(fT,vW),e(vW,gar),e(fT,har),e(Pe,par),e(Pe,mT),e(mT,U2e),e(U2e,uar),e(mT,_ar),e(mT,FW),e(FW,bar),e(mT,Far),e(Pe,Tar),e(Pe,gT),e(gT,J2e),e(J2e,Mar),e(gT,Ear),e(gT,TW),e(TW,Car),e(gT,war),e(Pe,Aar),e(Pe,hT),e(hT,Y2e),e(Y2e,Lar),e(hT,yar),e(hT,MW),e(MW,xar),e(hT,$ar),e(Pe,kar),e(Pe,pT),e(pT,K2e),e(K2e,Sar),e(pT,Rar),e(pT,EW),e(EW,Par),e(pT,Bar),e(fo,Iar),e(fo,uT),e(uT,Nar),e(uT,Z2e),e(Z2e,qar),e(uT,jar),e(uT,e1e),e(e1e,Dar),e(fo,Gar),M(_T,fo,null),b(f,RGe,_),b(f,wd,_),e(wd,bT),e(bT,o1e),M(cy,o1e,null),e(wd,Oar),e(wd,r1e),e(r1e,Var),b(f,PGe,_),b(f,Xo,_),M(fy,Xo,null),e(Xo,Xar),e(Xo,Ad),e(Ad,zar),e(Ad,CW),e(CW,War),e(Ad,Qar),e(Ad,wW),e(wW,Har),e(Ad,Uar),e(Xo,Jar),e(Xo,my),e(my,Yar),e(my,t1e),e(t1e,Kar),e(my,Zar),e(Xo,enr),e(Xo,Tt),M(gy,Tt,null),e(Tt,onr),e(Tt,a1e),e(a1e,rnr),e(Tt,tnr),e(Tt,Ld),e(Ld,anr),e(Ld,n1e),e(n1e,nnr),e(Ld,snr),e(Ld,AW),e(AW,lnr),e(Ld,inr),e(Tt,dnr),M(vT,Tt,null),e(Xo,cnr),e(Xo,mo),M(hy,mo,null),e(mo,fnr),e(mo,s1e),e(s1e,mnr),e(mo,gnr),e(mo,Qa),e(Qa,hnr),e(Qa,l1e),e(l1e,pnr),e(Qa,unr),e(Qa,i1e),e(i1e,_nr),e(Qa,bnr),e(Qa,d1e),e(d1e,vnr),e(Qa,Fnr),e(mo,Tnr),e(mo,et),e(et,FT),e(FT,c1e),e(c1e,Mnr),e(FT,Enr),e(FT,LW),e(LW,Cnr),e(FT,wnr),e(et,Anr),e(et,TT),e(TT,f1e),e(f1e,Lnr),e(TT,ynr),e(TT,yW),e(yW,xnr),e(TT,$nr),e(et,knr),e(et,MT),e(MT,m1e),e(m1e,Snr),e(MT,Rnr),e(MT,xW),e(xW,Pnr),e(MT,Bnr),e(et,Inr),e(et,ET),e(ET,g1e),e(g1e,Nnr),e(ET,qnr),e(ET,$W),e($W,jnr),e(ET,Dnr),e(et,Gnr),e(et,CT),e(CT,h1e),e(h1e,Onr),e(CT,Vnr),e(CT,kW),e(kW,Xnr),e(CT,znr),e(mo,Wnr),e(mo,wT),e(wT,Qnr),e(wT,p1e),e(p1e,Hnr),e(wT,Unr),e(wT,u1e),e(u1e,Jnr),e(mo,Ynr),M(AT,mo,null),b(f,BGe,_),b(f,yd,_),e(yd,LT),e(LT,_1e),M(py,_1e,null),e(yd,Knr),e(yd,b1e),e(b1e,Znr),b(f,IGe,_),b(f,zo,_),M(uy,zo,null),e(zo,esr),e(zo,xd),e(xd,osr),e(xd,SW),e(SW,rsr),e(xd,tsr),e(xd,RW),e(RW,asr),e(xd,nsr),e(zo,ssr),e(zo,_y),e(_y,lsr),e(_y,v1e),e(v1e,isr),e(_y,dsr),e(zo,csr),e(zo,Mt),M(by,Mt,null),e(Mt,fsr),e(Mt,F1e),e(F1e,msr),e(Mt,gsr),e(Mt,$d),e($d,hsr),e($d,T1e),e(T1e,psr),e($d,usr),e($d,PW),e(PW,_sr),e($d,bsr),e(Mt,vsr),M(yT,Mt,null),e(zo,Fsr),e(zo,go),M(vy,go,null),e(go,Tsr),e(go,M1e),e(M1e,Msr),e(go,Esr),e(go,Ha),e(Ha,Csr),e(Ha,E1e),e(E1e,wsr),e(Ha,Asr),e(Ha,C1e),e(C1e,Lsr),e(Ha,ysr),e(Ha,w1e),e(w1e,xsr),e(Ha,$sr),e(go,ksr),e(go,Le),e(Le,xT),e(xT,A1e),e(A1e,Ssr),e(xT,Rsr),e(xT,BW),e(BW,Psr),e(xT,Bsr),e(Le,Isr),e(Le,$T),e($T,L1e),e(L1e,Nsr),e($T,qsr),e($T,IW),e(IW,jsr),e($T,Dsr),e(Le,Gsr),e(Le,kT),e(kT,y1e),e(y1e,Osr),e(kT,Vsr),e(kT,NW),e(NW,Xsr),e(kT,zsr),e(Le,Wsr),e(Le,ST),e(ST,x1e),e(x1e,Qsr),e(ST,Hsr),e(ST,qW),e(qW,Usr),e(ST,Jsr),e(Le,Ysr),e(Le,RT),e(RT,$1e),e($1e,Ksr),e(RT,Zsr),e(RT,jW),e(jW,elr),e(RT,olr),e(Le,rlr),e(Le,PT),e(PT,k1e),e(k1e,tlr),e(PT,alr),e(PT,DW),e(DW,nlr),e(PT,slr),e(Le,llr),e(Le,BT),e(BT,S1e),e(S1e,ilr),e(BT,dlr),e(BT,GW),e(GW,clr),e(BT,flr),e(Le,mlr),e(Le,IT),e(IT,R1e),e(R1e,glr),e(IT,hlr),e(IT,OW),e(OW,plr),e(IT,ulr),e(Le,_lr),e(Le,NT),e(NT,P1e),e(P1e,blr),e(NT,vlr),e(NT,VW),e(VW,Flr),e(NT,Tlr),e(Le,Mlr),e(Le,qT),e(qT,B1e),e(B1e,Elr),e(qT,Clr),e(qT,XW),e(XW,wlr),e(qT,Alr),e(go,Llr),e(go,jT),e(jT,ylr),e(jT,I1e),e(I1e,xlr),e(jT,$lr),e(jT,N1e),e(N1e,klr),e(go,Slr),M(DT,go,null),b(f,NGe,_),b(f,kd,_),e(kd,GT),e(GT,q1e),M(Fy,q1e,null),e(kd,Rlr),e(kd,j1e),e(j1e,Plr),b(f,qGe,_),b(f,Wo,_),M(Ty,Wo,null),e(Wo,Blr),e(Wo,Sd),e(Sd,Ilr),e(Sd,zW),e(zW,Nlr),e(Sd,qlr),e(Sd,WW),e(WW,jlr),e(Sd,Dlr),e(Wo,Glr),e(Wo,My),e(My,Olr),e(My,D1e),e(D1e,Vlr),e(My,Xlr),e(Wo,zlr),e(Wo,Et),M(Ey,Et,null),e(Et,Wlr),e(Et,G1e),e(G1e,Qlr),e(Et,Hlr),e(Et,Rd),e(Rd,Ulr),e(Rd,O1e),e(O1e,Jlr),e(Rd,Ylr),e(Rd,QW),e(QW,Klr),e(Rd,Zlr),e(Et,eir),M(OT,Et,null),e(Wo,oir),e(Wo,ho),M(Cy,ho,null),e(ho,rir),e(ho,V1e),e(V1e,tir),e(ho,air),e(ho,Ua),e(Ua,nir),e(Ua,X1e),e(X1e,sir),e(Ua,lir),e(Ua,z1e),e(z1e,iir),e(Ua,dir),e(Ua,W1e),e(W1e,cir),e(Ua,fir),e(ho,mir),e(ho,wy),e(wy,VT),e(VT,Q1e),e(Q1e,gir),e(VT,hir),e(VT,HW),e(HW,pir),e(VT,uir),e(wy,_ir),e(wy,XT),e(XT,H1e),e(H1e,bir),e(XT,vir),e(XT,UW),e(UW,Fir),e(XT,Tir),e(ho,Mir),e(ho,zT),e(zT,Eir),e(zT,U1e),e(U1e,Cir),e(zT,wir),e(zT,J1e),e(J1e,Air),e(ho,Lir),M(WT,ho,null),b(f,jGe,_),b(f,Pd,_),e(Pd,QT),e(QT,Y1e),M(Ay,Y1e,null),e(Pd,yir),e(Pd,K1e),e(K1e,xir),b(f,DGe,_),b(f,Qo,_),M(Ly,Qo,null),e(Qo,$ir),e(Qo,Bd),e(Bd,kir),e(Bd,JW),e(JW,Sir),e(Bd,Rir),e(Bd,YW),e(YW,Pir),e(Bd,Bir),e(Qo,Iir),e(Qo,yy),e(yy,Nir),e(yy,Z1e),e(Z1e,qir),e(yy,jir),e(Qo,Dir),e(Qo,Ct),M(xy,Ct,null),e(Ct,Gir),e(Ct,ebe),e(ebe,Oir),e(Ct,Vir),e(Ct,Id),e(Id,Xir),e(Id,obe),e(obe,zir),e(Id,Wir),e(Id,KW),e(KW,Qir),e(Id,Hir),e(Ct,Uir),M(HT,Ct,null),e(Qo,Jir),e(Qo,po),M($y,po,null),e(po,Yir),e(po,rbe),e(rbe,Kir),e(po,Zir),e(po,Ja),e(Ja,edr),e(Ja,tbe),e(tbe,odr),e(Ja,rdr),e(Ja,abe),e(abe,tdr),e(Ja,adr),e(Ja,nbe),e(nbe,ndr),e(Ja,sdr),e(po,ldr),e(po,ot),e(ot,UT),e(UT,sbe),e(sbe,idr),e(UT,ddr),e(UT,ZW),e(ZW,cdr),e(UT,fdr),e(ot,mdr),e(ot,JT),e(JT,lbe),e(lbe,gdr),e(JT,hdr),e(JT,eQ),e(eQ,pdr),e(JT,udr),e(ot,_dr),e(ot,YT),e(YT,ibe),e(ibe,bdr),e(YT,vdr),e(YT,oQ),e(oQ,Fdr),e(YT,Tdr),e(ot,Mdr),e(ot,KT),e(KT,dbe),e(dbe,Edr),e(KT,Cdr),e(KT,rQ),e(rQ,wdr),e(KT,Adr),e(ot,Ldr),e(ot,ZT),e(ZT,cbe),e(cbe,ydr),e(ZT,xdr),e(ZT,tQ),e(tQ,$dr),e(ZT,kdr),e(po,Sdr),e(po,e7),e(e7,Rdr),e(e7,fbe),e(fbe,Pdr),e(e7,Bdr),e(e7,mbe),e(mbe,Idr),e(po,Ndr),M(o7,po,null),b(f,GGe,_),b(f,Nd,_),e(Nd,r7),e(r7,gbe),M(ky,gbe,null),e(Nd,qdr),e(Nd,hbe),e(hbe,jdr),b(f,OGe,_),b(f,Ho,_),M(Sy,Ho,null),e(Ho,Ddr),e(Ho,qd),e(qd,Gdr),e(qd,aQ),e(aQ,Odr),e(qd,Vdr),e(qd,nQ),e(nQ,Xdr),e(qd,zdr),e(Ho,Wdr),e(Ho,Ry),e(Ry,Qdr),e(Ry,pbe),e(pbe,Hdr),e(Ry,Udr),e(Ho,Jdr),e(Ho,wt),M(Py,wt,null),e(wt,Ydr),e(wt,ube),e(ube,Kdr),e(wt,Zdr),e(wt,jd),e(jd,ecr),e(jd,_be),e(_be,ocr),e(jd,rcr),e(jd,sQ),e(sQ,tcr),e(jd,acr),e(wt,ncr),M(t7,wt,null),e(Ho,scr),e(Ho,uo),M(By,uo,null),e(uo,lcr),e(uo,bbe),e(bbe,icr),e(uo,dcr),e(uo,Ya),e(Ya,ccr),e(Ya,vbe),e(vbe,fcr),e(Ya,mcr),e(Ya,Fbe),e(Fbe,gcr),e(Ya,hcr),e(Ya,Tbe),e(Tbe,pcr),e(Ya,ucr),e(uo,_cr),e(uo,Dd),e(Dd,a7),e(a7,Mbe),e(Mbe,bcr),e(a7,vcr),e(a7,lQ),e(lQ,Fcr),e(a7,Tcr),e(Dd,Mcr),e(Dd,n7),e(n7,Ebe),e(Ebe,Ecr),e(n7,Ccr),e(n7,iQ),e(iQ,wcr),e(n7,Acr),e(Dd,Lcr),e(Dd,s7),e(s7,Cbe),e(Cbe,ycr),e(s7,xcr),e(s7,dQ),e(dQ,$cr),e(s7,kcr),e(uo,Scr),e(uo,l7),e(l7,Rcr),e(l7,wbe),e(wbe,Pcr),e(l7,Bcr),e(l7,Abe),e(Abe,Icr),e(uo,Ncr),M(i7,uo,null),b(f,VGe,_),b(f,Gd,_),e(Gd,d7),e(d7,Lbe),M(Iy,Lbe,null),e(Gd,qcr),e(Gd,ybe),e(ybe,jcr),b(f,XGe,_),b(f,Uo,_),M(Ny,Uo,null),e(Uo,Dcr),e(Uo,Od),e(Od,Gcr),e(Od,cQ),e(cQ,Ocr),e(Od,Vcr),e(Od,fQ),e(fQ,Xcr),e(Od,zcr),e(Uo,Wcr),e(Uo,qy),e(qy,Qcr),e(qy,xbe),e(xbe,Hcr),e(qy,Ucr),e(Uo,Jcr),e(Uo,At),M(jy,At,null),e(At,Ycr),e(At,$be),e($be,Kcr),e(At,Zcr),e(At,Vd),e(Vd,efr),e(Vd,kbe),e(kbe,ofr),e(Vd,rfr),e(Vd,mQ),e(mQ,tfr),e(Vd,afr),e(At,nfr),M(c7,At,null),e(Uo,sfr),e(Uo,_o),M(Dy,_o,null),e(_o,lfr),e(_o,Sbe),e(Sbe,ifr),e(_o,dfr),e(_o,Ka),e(Ka,cfr),e(Ka,Rbe),e(Rbe,ffr),e(Ka,mfr),e(Ka,Pbe),e(Pbe,gfr),e(Ka,hfr),e(Ka,Bbe),e(Bbe,pfr),e(Ka,ufr),e(_o,_fr),e(_o,Gy),e(Gy,f7),e(f7,Ibe),e(Ibe,bfr),e(f7,vfr),e(f7,gQ),e(gQ,Ffr),e(f7,Tfr),e(Gy,Mfr),e(Gy,m7),e(m7,Nbe),e(Nbe,Efr),e(m7,Cfr),e(m7,hQ),e(hQ,wfr),e(m7,Afr),e(_o,Lfr),e(_o,g7),e(g7,yfr),e(g7,qbe),e(qbe,xfr),e(g7,$fr),e(g7,jbe),e(jbe,kfr),e(_o,Sfr),M(h7,_o,null),b(f,zGe,_),b(f,Xd,_),e(Xd,p7),e(p7,Dbe),M(Oy,Dbe,null),e(Xd,Rfr),e(Xd,Gbe),e(Gbe,Pfr),b(f,WGe,_),b(f,Jo,_),M(Vy,Jo,null),e(Jo,Bfr),e(Jo,zd),e(zd,Ifr),e(zd,pQ),e(pQ,Nfr),e(zd,qfr),e(zd,uQ),e(uQ,jfr),e(zd,Dfr),e(Jo,Gfr),e(Jo,Xy),e(Xy,Ofr),e(Xy,Obe),e(Obe,Vfr),e(Xy,Xfr),e(Jo,zfr),e(Jo,Lt),M(zy,Lt,null),e(Lt,Wfr),e(Lt,Vbe),e(Vbe,Qfr),e(Lt,Hfr),e(Lt,Wd),e(Wd,Ufr),e(Wd,Xbe),e(Xbe,Jfr),e(Wd,Yfr),e(Wd,_Q),e(_Q,Kfr),e(Wd,Zfr),e(Lt,emr),M(u7,Lt,null),e(Jo,omr),e(Jo,bo),M(Wy,bo,null),e(bo,rmr),e(bo,zbe),e(zbe,tmr),e(bo,amr),e(bo,Za),e(Za,nmr),e(Za,Wbe),e(Wbe,smr),e(Za,lmr),e(Za,Qbe),e(Qbe,imr),e(Za,dmr),e(Za,Hbe),e(Hbe,cmr),e(Za,fmr),e(bo,mmr),e(bo,Ube),e(Ube,_7),e(_7,Jbe),e(Jbe,gmr),e(_7,hmr),e(_7,bQ),e(bQ,pmr),e(_7,umr),e(bo,_mr),e(bo,b7),e(b7,bmr),e(b7,Ybe),e(Ybe,vmr),e(b7,Fmr),e(b7,Kbe),e(Kbe,Tmr),e(bo,Mmr),M(v7,bo,null),b(f,QGe,_),b(f,Qd,_),e(Qd,F7),e(F7,Zbe),M(Qy,Zbe,null),e(Qd,Emr),e(Qd,eve),e(eve,Cmr),b(f,HGe,_),b(f,Yo,_),M(Hy,Yo,null),e(Yo,wmr),e(Yo,Hd),e(Hd,Amr),e(Hd,vQ),e(vQ,Lmr),e(Hd,ymr),e(Hd,FQ),e(FQ,xmr),e(Hd,$mr),e(Yo,kmr),e(Yo,Uy),e(Uy,Smr),e(Uy,ove),e(ove,Rmr),e(Uy,Pmr),e(Yo,Bmr),e(Yo,yt),M(Jy,yt,null),e(yt,Imr),e(yt,rve),e(rve,Nmr),e(yt,qmr),e(yt,Ud),e(Ud,jmr),e(Ud,tve),e(tve,Dmr),e(Ud,Gmr),e(Ud,TQ),e(TQ,Omr),e(Ud,Vmr),e(yt,Xmr),M(T7,yt,null),e(Yo,zmr),e(Yo,vo),M(Yy,vo,null),e(vo,Wmr),e(vo,ave),e(ave,Qmr),e(vo,Hmr),e(vo,en),e(en,Umr),e(en,nve),e(nve,Jmr),e(en,Ymr),e(en,sve),e(sve,Kmr),e(en,Zmr),e(en,lve),e(lve,egr),e(en,ogr),e(vo,rgr),e(vo,on),e(on,M7),e(M7,ive),e(ive,tgr),e(M7,agr),e(M7,MQ),e(MQ,ngr),e(M7,sgr),e(on,lgr),e(on,E7),e(E7,dve),e(dve,igr),e(E7,dgr),e(E7,EQ),e(EQ,cgr),e(E7,fgr),e(on,mgr),e(on,C7),e(C7,cve),e(cve,ggr),e(C7,hgr),e(C7,CQ),e(CQ,pgr),e(C7,ugr),e(on,_gr),e(on,w7),e(w7,fve),e(fve,bgr),e(w7,vgr),e(w7,wQ),e(wQ,Fgr),e(w7,Tgr),e(vo,Mgr),e(vo,A7),e(A7,Egr),e(A7,mve),e(mve,Cgr),e(A7,wgr),e(A7,gve),e(gve,Agr),e(vo,Lgr),M(L7,vo,null),b(f,UGe,_),b(f,Jd,_),e(Jd,y7),e(y7,hve),M(Ky,hve,null),e(Jd,ygr),e(Jd,pve),e(pve,xgr),b(f,JGe,_),b(f,Ko,_),M(Zy,Ko,null),e(Ko,$gr),e(Ko,Yd),e(Yd,kgr),e(Yd,AQ),e(AQ,Sgr),e(Yd,Rgr),e(Yd,LQ),e(LQ,Pgr),e(Yd,Bgr),e(Ko,Igr),e(Ko,e8),e(e8,Ngr),e(e8,uve),e(uve,qgr),e(e8,jgr),e(Ko,Dgr),e(Ko,xt),M(o8,xt,null),e(xt,Ggr),e(xt,_ve),e(_ve,Ogr),e(xt,Vgr),e(xt,Kd),e(Kd,Xgr),e(Kd,bve),e(bve,zgr),e(Kd,Wgr),e(Kd,yQ),e(yQ,Qgr),e(Kd,Hgr),e(xt,Ugr),M(x7,xt,null),e(Ko,Jgr),e(Ko,Fo),M(r8,Fo,null),e(Fo,Ygr),e(Fo,vve),e(vve,Kgr),e(Fo,Zgr),e(Fo,rn),e(rn,ehr),e(rn,Fve),e(Fve,ohr),e(rn,rhr),e(rn,Tve),e(Tve,thr),e(rn,ahr),e(rn,Mve),e(Mve,nhr),e(rn,shr),e(Fo,lhr),e(Fo,Eve),e(Eve,$7),e($7,Cve),e(Cve,ihr),e($7,dhr),e($7,xQ),e(xQ,chr),e($7,fhr),e(Fo,mhr),e(Fo,k7),e(k7,ghr),e(k7,wve),e(wve,hhr),e(k7,phr),e(k7,Ave),e(Ave,uhr),e(Fo,_hr),M(S7,Fo,null),b(f,YGe,_),b(f,Zd,_),e(Zd,R7),e(R7,Lve),M(t8,Lve,null),e(Zd,bhr),e(Zd,yve),e(yve,vhr),b(f,KGe,_),b(f,Zo,_),M(a8,Zo,null),e(Zo,Fhr),e(Zo,ec),e(ec,Thr),e(ec,$Q),e($Q,Mhr),e(ec,Ehr),e(ec,kQ),e(kQ,Chr),e(ec,whr),e(Zo,Ahr),e(Zo,n8),e(n8,Lhr),e(n8,xve),e(xve,yhr),e(n8,xhr),e(Zo,$hr),e(Zo,$t),M(s8,$t,null),e($t,khr),e($t,$ve),e($ve,Shr),e($t,Rhr),e($t,oc),e(oc,Phr),e(oc,kve),e(kve,Bhr),e(oc,Ihr),e(oc,SQ),e(SQ,Nhr),e(oc,qhr),e($t,jhr),M(P7,$t,null),e(Zo,Dhr),e(Zo,Lr),M(l8,Lr,null),e(Lr,Ghr),e(Lr,Sve),e(Sve,Ohr),e(Lr,Vhr),e(Lr,tn),e(tn,Xhr),e(tn,Rve),e(Rve,zhr),e(tn,Whr),e(tn,Pve),e(Pve,Qhr),e(tn,Hhr),e(tn,Bve),e(Bve,Uhr),e(tn,Jhr),e(Lr,Yhr),e(Lr,q),e(q,B7),e(B7,Ive),e(Ive,Khr),e(B7,Zhr),e(B7,RQ),e(RQ,epr),e(B7,opr),e(q,rpr),e(q,I7),e(I7,Nve),e(Nve,tpr),e(I7,apr),e(I7,PQ),e(PQ,npr),e(I7,spr),e(q,lpr),e(q,N7),e(N7,qve),e(qve,ipr),e(N7,dpr),e(N7,BQ),e(BQ,cpr),e(N7,fpr),e(q,mpr),e(q,q7),e(q7,jve),e(jve,gpr),e(q7,hpr),e(q7,IQ),e(IQ,ppr),e(q7,upr),e(q,_pr),e(q,j7),e(j7,Dve),e(Dve,bpr),e(j7,vpr),e(j7,NQ),e(NQ,Fpr),e(j7,Tpr),e(q,Mpr),e(q,D7),e(D7,Gve),e(Gve,Epr),e(D7,Cpr),e(D7,qQ),e(qQ,wpr),e(D7,Apr),e(q,Lpr),e(q,G7),e(G7,Ove),e(Ove,ypr),e(G7,xpr),e(G7,jQ),e(jQ,$pr),e(G7,kpr),e(q,Spr),e(q,O7),e(O7,Vve),e(Vve,Rpr),e(O7,Ppr),e(O7,DQ),e(DQ,Bpr),e(O7,Ipr),e(q,Npr),e(q,V7),e(V7,Xve),e(Xve,qpr),e(V7,jpr),e(V7,GQ),e(GQ,Dpr),e(V7,Gpr),e(q,Opr),e(q,X7),e(X7,zve),e(zve,Vpr),e(X7,Xpr),e(X7,OQ),e(OQ,zpr),e(X7,Wpr),e(q,Qpr),e(q,z7),e(z7,Wve),e(Wve,Hpr),e(z7,Upr),e(z7,VQ),e(VQ,Jpr),e(z7,Ypr),e(q,Kpr),e(q,W7),e(W7,Qve),e(Qve,Zpr),e(W7,eur),e(W7,XQ),e(XQ,our),e(W7,rur),e(q,tur),e(q,Q7),e(Q7,Hve),e(Hve,aur),e(Q7,nur),e(Q7,zQ),e(zQ,sur),e(Q7,lur),e(q,iur),e(q,H7),e(H7,Uve),e(Uve,dur),e(H7,cur),e(H7,WQ),e(WQ,fur),e(H7,mur),e(q,gur),e(q,U7),e(U7,Jve),e(Jve,hur),e(U7,pur),e(U7,QQ),e(QQ,uur),e(U7,_ur),e(q,bur),e(q,J7),e(J7,Yve),e(Yve,vur),e(J7,Fur),e(J7,HQ),e(HQ,Tur),e(J7,Mur),e(q,Eur),e(q,Y7),e(Y7,Kve),e(Kve,Cur),e(Y7,wur),e(Y7,UQ),e(UQ,Aur),e(Y7,Lur),e(q,yur),e(q,Xs),e(Xs,Zve),e(Zve,xur),e(Xs,$ur),e(Xs,JQ),e(JQ,kur),e(Xs,Sur),e(Xs,YQ),e(YQ,Rur),e(Xs,Pur),e(q,Bur),e(q,K7),e(K7,eFe),e(eFe,Iur),e(K7,Nur),e(K7,KQ),e(KQ,qur),e(K7,jur),e(q,Dur),e(q,Z7),e(Z7,oFe),e(oFe,Gur),e(Z7,Our),e(Z7,ZQ),e(ZQ,Vur),e(Z7,Xur),e(q,zur),e(q,e9),e(e9,rFe),e(rFe,Wur),e(e9,Qur),e(e9,eH),e(eH,Hur),e(e9,Uur),e(q,Jur),e(q,o9),e(o9,tFe),e(tFe,Yur),e(o9,Kur),e(o9,oH),e(oH,Zur),e(o9,e_r),e(q,o_r),e(q,r9),e(r9,aFe),e(aFe,r_r),e(r9,t_r),e(r9,rH),e(rH,a_r),e(r9,n_r),e(q,s_r),e(q,t9),e(t9,nFe),e(nFe,l_r),e(t9,i_r),e(t9,tH),e(tH,d_r),e(t9,c_r),e(q,f_r),e(q,a9),e(a9,sFe),e(sFe,m_r),e(a9,g_r),e(a9,aH),e(aH,h_r),e(a9,p_r),e(q,u_r),e(q,n9),e(n9,lFe),e(lFe,__r),e(n9,b_r),e(n9,nH),e(nH,v_r),e(n9,F_r),e(q,T_r),e(q,s9),e(s9,iFe),e(iFe,M_r),e(s9,E_r),e(s9,sH),e(sH,C_r),e(s9,w_r),e(q,A_r),e(q,l9),e(l9,dFe),e(dFe,L_r),e(l9,y_r),e(l9,lH),e(lH,x_r),e(l9,$_r),e(q,k_r),e(q,i9),e(i9,cFe),e(cFe,S_r),e(i9,R_r),e(i9,iH),e(iH,P_r),e(i9,B_r),e(q,I_r),e(q,d9),e(d9,fFe),e(fFe,N_r),e(d9,q_r),e(d9,dH),e(dH,j_r),e(d9,D_r),e(q,G_r),e(q,c9),e(c9,mFe),e(mFe,O_r),e(c9,V_r),e(c9,cH),e(cH,X_r),e(c9,z_r),e(q,W_r),e(q,f9),e(f9,gFe),e(gFe,Q_r),e(f9,H_r),e(f9,fH),e(fH,U_r),e(f9,J_r),e(q,Y_r),e(q,m9),e(m9,hFe),e(hFe,K_r),e(m9,Z_r),e(m9,mH),e(mH,e2r),e(m9,o2r),e(q,r2r),e(q,g9),e(g9,pFe),e(pFe,t2r),e(g9,a2r),e(g9,gH),e(gH,n2r),e(g9,s2r),e(q,l2r),e(q,h9),e(h9,uFe),e(uFe,i2r),e(h9,d2r),e(h9,hH),e(hH,c2r),e(h9,f2r),e(q,m2r),e(q,p9),e(p9,_Fe),e(_Fe,g2r),e(p9,h2r),e(p9,pH),e(pH,p2r),e(p9,u2r),e(q,_2r),e(q,u9),e(u9,bFe),e(bFe,b2r),e(u9,v2r),e(u9,uH),e(uH,F2r),e(u9,T2r),e(q,M2r),e(q,_9),e(_9,vFe),e(vFe,E2r),e(_9,C2r),e(_9,_H),e(_H,w2r),e(_9,A2r),e(q,L2r),e(q,b9),e(b9,FFe),e(FFe,y2r),e(b9,x2r),e(b9,bH),e(bH,$2r),e(b9,k2r),e(q,S2r),e(q,v9),e(v9,TFe),e(TFe,R2r),e(v9,P2r),e(v9,vH),e(vH,B2r),e(v9,I2r),e(q,N2r),e(q,F9),e(F9,MFe),e(MFe,q2r),e(F9,j2r),e(F9,FH),e(FH,D2r),e(F9,G2r),e(q,O2r),e(q,T9),e(T9,EFe),e(EFe,V2r),e(T9,X2r),e(T9,TH),e(TH,z2r),e(T9,W2r),e(q,Q2r),e(q,M9),e(M9,CFe),e(CFe,H2r),e(M9,U2r),e(M9,MH),e(MH,J2r),e(M9,Y2r),e(q,K2r),e(q,E9),e(E9,wFe),e(wFe,Z2r),e(E9,e1r),e(E9,EH),e(EH,o1r),e(E9,r1r),e(q,t1r),e(q,C9),e(C9,AFe),e(AFe,a1r),e(C9,n1r),e(C9,CH),e(CH,s1r),e(C9,l1r),e(q,i1r),e(q,w9),e(w9,LFe),e(LFe,d1r),e(w9,c1r),e(w9,wH),e(wH,f1r),e(w9,m1r),e(q,g1r),e(q,A9),e(A9,yFe),e(yFe,h1r),e(A9,p1r),e(A9,AH),e(AH,u1r),e(A9,_1r),e(Lr,b1r),M(L9,Lr,null),b(f,ZGe,_),b(f,rc,_),e(rc,y9),e(y9,xFe),M(i8,xFe,null),e(rc,v1r),e(rc,$Fe),e($Fe,F1r),b(f,eOe,_),b(f,er,_),M(d8,er,null),e(er,T1r),e(er,tc),e(tc,M1r),e(tc,LH),e(LH,E1r),e(tc,C1r),e(tc,yH),e(yH,w1r),e(tc,A1r),e(er,L1r),e(er,c8),e(c8,y1r),e(c8,kFe),e(kFe,x1r),e(c8,$1r),e(er,k1r),e(er,kt),M(f8,kt,null),e(kt,S1r),e(kt,SFe),e(SFe,R1r),e(kt,P1r),e(kt,ac),e(ac,B1r),e(ac,RFe),e(RFe,I1r),e(ac,N1r),e(ac,xH),e(xH,q1r),e(ac,j1r),e(kt,D1r),M(x9,kt,null),e(er,G1r),e(er,yr),M(m8,yr,null),e(yr,O1r),e(yr,PFe),e(PFe,V1r),e(yr,X1r),e(yr,an),e(an,z1r),e(an,BFe),e(BFe,W1r),e(an,Q1r),e(an,IFe),e(IFe,H1r),e(an,U1r),e(an,NFe),e(NFe,J1r),e(an,Y1r),e(yr,K1r),e(yr,se),e(se,$9),e($9,qFe),e(qFe,Z1r),e($9,ebr),e($9,$H),e($H,obr),e($9,rbr),e(se,tbr),e(se,k9),e(k9,jFe),e(jFe,abr),e(k9,nbr),e(k9,kH),e(kH,sbr),e(k9,lbr),e(se,ibr),e(se,S9),e(S9,DFe),e(DFe,dbr),e(S9,cbr),e(S9,SH),e(SH,fbr),e(S9,mbr),e(se,gbr),e(se,R9),e(R9,GFe),e(GFe,hbr),e(R9,pbr),e(R9,RH),e(RH,ubr),e(R9,_br),e(se,bbr),e(se,P9),e(P9,OFe),e(OFe,vbr),e(P9,Fbr),e(P9,PH),e(PH,Tbr),e(P9,Mbr),e(se,Ebr),e(se,B9),e(B9,VFe),e(VFe,Cbr),e(B9,wbr),e(B9,BH),e(BH,Abr),e(B9,Lbr),e(se,ybr),e(se,I9),e(I9,XFe),e(XFe,xbr),e(I9,$br),e(I9,IH),e(IH,kbr),e(I9,Sbr),e(se,Rbr),e(se,N9),e(N9,zFe),e(zFe,Pbr),e(N9,Bbr),e(N9,NH),e(NH,Ibr),e(N9,Nbr),e(se,qbr),e(se,q9),e(q9,WFe),e(WFe,jbr),e(q9,Dbr),e(q9,qH),e(qH,Gbr),e(q9,Obr),e(se,Vbr),e(se,j9),e(j9,QFe),e(QFe,Xbr),e(j9,zbr),e(j9,jH),e(jH,Wbr),e(j9,Qbr),e(se,Hbr),e(se,D9),e(D9,HFe),e(HFe,Ubr),e(D9,Jbr),e(D9,DH),e(DH,Ybr),e(D9,Kbr),e(se,Zbr),e(se,G9),e(G9,UFe),e(UFe,evr),e(G9,ovr),e(G9,GH),e(GH,rvr),e(G9,tvr),e(se,avr),e(se,O9),e(O9,JFe),e(JFe,nvr),e(O9,svr),e(O9,OH),e(OH,lvr),e(O9,ivr),e(se,dvr),e(se,V9),e(V9,YFe),e(YFe,cvr),e(V9,fvr),e(V9,VH),e(VH,mvr),e(V9,gvr),e(se,hvr),e(se,X9),e(X9,KFe),e(KFe,pvr),e(X9,uvr),e(X9,XH),e(XH,_vr),e(X9,bvr),e(se,vvr),e(se,z9),e(z9,ZFe),e(ZFe,Fvr),e(z9,Tvr),e(z9,zH),e(zH,Mvr),e(z9,Evr),e(se,Cvr),e(se,W9),e(W9,e6e),e(e6e,wvr),e(W9,Avr),e(W9,WH),e(WH,Lvr),e(W9,yvr),e(se,xvr),e(se,Q9),e(Q9,o6e),e(o6e,$vr),e(Q9,kvr),e(Q9,QH),e(QH,Svr),e(Q9,Rvr),e(se,Pvr),e(se,H9),e(H9,r6e),e(r6e,Bvr),e(H9,Ivr),e(H9,HH),e(HH,Nvr),e(H9,qvr),e(se,jvr),e(se,U9),e(U9,t6e),e(t6e,Dvr),e(U9,Gvr),e(U9,UH),e(UH,Ovr),e(U9,Vvr),e(se,Xvr),e(se,J9),e(J9,a6e),e(a6e,zvr),e(J9,Wvr),e(J9,JH),e(JH,Qvr),e(J9,Hvr),e(se,Uvr),e(se,Y9),e(Y9,n6e),e(n6e,Jvr),e(Y9,Yvr),e(Y9,YH),e(YH,Kvr),e(Y9,Zvr),e(se,eFr),e(se,K9),e(K9,s6e),e(s6e,oFr),e(K9,rFr),e(K9,KH),e(KH,tFr),e(K9,aFr),e(yr,nFr),M(Z9,yr,null),b(f,oOe,_),b(f,nc,_),e(nc,eM),e(eM,l6e),M(g8,l6e,null),e(nc,sFr),e(nc,i6e),e(i6e,lFr),b(f,rOe,_),b(f,or,_),M(h8,or,null),e(or,iFr),e(or,sc),e(sc,dFr),e(sc,ZH),e(ZH,cFr),e(sc,fFr),e(sc,eU),e(eU,mFr),e(sc,gFr),e(or,hFr),e(or,p8),e(p8,pFr),e(p8,d6e),e(d6e,uFr),e(p8,_Fr),e(or,bFr),e(or,St),M(u8,St,null),e(St,vFr),e(St,c6e),e(c6e,FFr),e(St,TFr),e(St,lc),e(lc,MFr),e(lc,f6e),e(f6e,EFr),e(lc,CFr),e(lc,oU),e(oU,wFr),e(lc,AFr),e(St,LFr),M(oM,St,null),e(or,yFr),e(or,xr),M(_8,xr,null),e(xr,xFr),e(xr,m6e),e(m6e,$Fr),e(xr,kFr),e(xr,nn),e(nn,SFr),e(nn,g6e),e(g6e,RFr),e(nn,PFr),e(nn,h6e),e(h6e,BFr),e(nn,IFr),e(nn,p6e),e(p6e,NFr),e(nn,qFr),e(xr,jFr),e(xr,Me),e(Me,rM),e(rM,u6e),e(u6e,DFr),e(rM,GFr),e(rM,rU),e(rU,OFr),e(rM,VFr),e(Me,XFr),e(Me,tM),e(tM,_6e),e(_6e,zFr),e(tM,WFr),e(tM,tU),e(tU,QFr),e(tM,HFr),e(Me,UFr),e(Me,aM),e(aM,b6e),e(b6e,JFr),e(aM,YFr),e(aM,aU),e(aU,KFr),e(aM,ZFr),e(Me,e6r),e(Me,nM),e(nM,v6e),e(v6e,o6r),e(nM,r6r),e(nM,nU),e(nU,t6r),e(nM,a6r),e(Me,n6r),e(Me,sM),e(sM,F6e),e(F6e,s6r),e(sM,l6r),e(sM,sU),e(sU,i6r),e(sM,d6r),e(Me,c6r),e(Me,lM),e(lM,T6e),e(T6e,f6r),e(lM,m6r),e(lM,lU),e(lU,g6r),e(lM,h6r),e(Me,p6r),e(Me,iM),e(iM,M6e),e(M6e,u6r),e(iM,_6r),e(iM,iU),e(iU,b6r),e(iM,v6r),e(Me,F6r),e(Me,dM),e(dM,E6e),e(E6e,T6r),e(dM,M6r),e(dM,dU),e(dU,E6r),e(dM,C6r),e(Me,w6r),e(Me,cM),e(cM,C6e),e(C6e,A6r),e(cM,L6r),e(cM,cU),e(cU,y6r),e(cM,x6r),e(Me,$6r),e(Me,fM),e(fM,w6e),e(w6e,k6r),e(fM,S6r),e(fM,fU),e(fU,R6r),e(fM,P6r),e(Me,B6r),e(Me,mM),e(mM,A6e),e(A6e,I6r),e(mM,N6r),e(mM,mU),e(mU,q6r),e(mM,j6r),e(Me,D6r),e(Me,gM),e(gM,L6e),e(L6e,G6r),e(gM,O6r),e(gM,gU),e(gU,V6r),e(gM,X6r),e(Me,z6r),e(Me,hM),e(hM,y6e),e(y6e,W6r),e(hM,Q6r),e(hM,hU),e(hU,H6r),e(hM,U6r),e(xr,J6r),M(pM,xr,null),b(f,tOe,_),b(f,ic,_),e(ic,uM),e(uM,x6e),M(b8,x6e,null),e(ic,Y6r),e(ic,$6e),e($6e,K6r),b(f,aOe,_),b(f,rr,_),M(v8,rr,null),e(rr,Z6r),e(rr,dc),e(dc,eTr),e(dc,pU),e(pU,oTr),e(dc,rTr),e(dc,uU),e(uU,tTr),e(dc,aTr),e(rr,nTr),e(rr,F8),e(F8,sTr),e(F8,k6e),e(k6e,lTr),e(F8,iTr),e(rr,dTr),e(rr,Rt),M(T8,Rt,null),e(Rt,cTr),e(Rt,S6e),e(S6e,fTr),e(Rt,mTr),e(Rt,cc),e(cc,gTr),e(cc,R6e),e(R6e,hTr),e(cc,pTr),e(cc,_U),e(_U,uTr),e(cc,_Tr),e(Rt,bTr),M(_M,Rt,null),e(rr,vTr),e(rr,$r),M(M8,$r,null),e($r,FTr),e($r,P6e),e(P6e,TTr),e($r,MTr),e($r,sn),e(sn,ETr),e(sn,B6e),e(B6e,CTr),e(sn,wTr),e(sn,I6e),e(I6e,ATr),e(sn,LTr),e(sn,N6e),e(N6e,yTr),e(sn,xTr),e($r,$Tr),e($r,ln),e(ln,bM),e(bM,q6e),e(q6e,kTr),e(bM,STr),e(bM,bU),e(bU,RTr),e(bM,PTr),e(ln,BTr),e(ln,vM),e(vM,j6e),e(j6e,ITr),e(vM,NTr),e(vM,vU),e(vU,qTr),e(vM,jTr),e(ln,DTr),e(ln,FM),e(FM,D6e),e(D6e,GTr),e(FM,OTr),e(FM,FU),e(FU,VTr),e(FM,XTr),e(ln,zTr),e(ln,TM),e(TM,G6e),e(G6e,WTr),e(TM,QTr),e(TM,TU),e(TU,HTr),e(TM,UTr),e($r,JTr),M(MM,$r,null),b(f,nOe,_),b(f,fc,_),e(fc,EM),e(EM,O6e),M(E8,O6e,null),e(fc,YTr),e(fc,V6e),e(V6e,KTr),b(f,sOe,_),b(f,tr,_),M(C8,tr,null),e(tr,ZTr),e(tr,mc),e(mc,e7r),e(mc,MU),e(MU,o7r),e(mc,r7r),e(mc,EU),e(EU,t7r),e(mc,a7r),e(tr,n7r),e(tr,w8),e(w8,s7r),e(w8,X6e),e(X6e,l7r),e(w8,i7r),e(tr,d7r),e(tr,Pt),M(A8,Pt,null),e(Pt,c7r),e(Pt,z6e),e(z6e,f7r),e(Pt,m7r),e(Pt,gc),e(gc,g7r),e(gc,W6e),e(W6e,h7r),e(gc,p7r),e(gc,CU),e(CU,u7r),e(gc,_7r),e(Pt,b7r),M(CM,Pt,null),e(tr,v7r),e(tr,kr),M(L8,kr,null),e(kr,F7r),e(kr,Q6e),e(Q6e,T7r),e(kr,M7r),e(kr,dn),e(dn,E7r),e(dn,H6e),e(H6e,C7r),e(dn,w7r),e(dn,U6e),e(U6e,A7r),e(dn,L7r),e(dn,J6e),e(J6e,y7r),e(dn,x7r),e(kr,$7r),e(kr,ie),e(ie,wM),e(wM,Y6e),e(Y6e,k7r),e(wM,S7r),e(wM,wU),e(wU,R7r),e(wM,P7r),e(ie,B7r),e(ie,AM),e(AM,K6e),e(K6e,I7r),e(AM,N7r),e(AM,AU),e(AU,q7r),e(AM,j7r),e(ie,D7r),e(ie,LM),e(LM,Z6e),e(Z6e,G7r),e(LM,O7r),e(LM,LU),e(LU,V7r),e(LM,X7r),e(ie,z7r),e(ie,yM),e(yM,eTe),e(eTe,W7r),e(yM,Q7r),e(yM,yU),e(yU,H7r),e(yM,U7r),e(ie,J7r),e(ie,xM),e(xM,oTe),e(oTe,Y7r),e(xM,K7r),e(xM,xU),e(xU,Z7r),e(xM,e9r),e(ie,o9r),e(ie,$M),e($M,rTe),e(rTe,r9r),e($M,t9r),e($M,$U),e($U,a9r),e($M,n9r),e(ie,s9r),e(ie,kM),e(kM,tTe),e(tTe,l9r),e(kM,i9r),e(kM,kU),e(kU,d9r),e(kM,c9r),e(ie,f9r),e(ie,SM),e(SM,aTe),e(aTe,m9r),e(SM,g9r),e(SM,SU),e(SU,h9r),e(SM,p9r),e(ie,u9r),e(ie,RM),e(RM,nTe),e(nTe,_9r),e(RM,b9r),e(RM,RU),e(RU,v9r),e(RM,F9r),e(ie,T9r),e(ie,PM),e(PM,sTe),e(sTe,M9r),e(PM,E9r),e(PM,PU),e(PU,C9r),e(PM,w9r),e(ie,A9r),e(ie,BM),e(BM,lTe),e(lTe,L9r),e(BM,y9r),e(BM,BU),e(BU,x9r),e(BM,$9r),e(ie,k9r),e(ie,IM),e(IM,iTe),e(iTe,S9r),e(IM,R9r),e(IM,IU),e(IU,P9r),e(IM,B9r),e(ie,I9r),e(ie,NM),e(NM,dTe),e(dTe,N9r),e(NM,q9r),e(NM,NU),e(NU,j9r),e(NM,D9r),e(ie,G9r),e(ie,qM),e(qM,cTe),e(cTe,O9r),e(qM,V9r),e(qM,qU),e(qU,X9r),e(qM,z9r),e(ie,W9r),e(ie,jM),e(jM,fTe),e(fTe,Q9r),e(jM,H9r),e(jM,jU),e(jU,U9r),e(jM,J9r),e(ie,Y9r),e(ie,DM),e(DM,mTe),e(mTe,K9r),e(DM,Z9r),e(DM,DU),e(DU,eMr),e(DM,oMr),e(ie,rMr),e(ie,GM),e(GM,gTe),e(gTe,tMr),e(GM,aMr),e(GM,GU),e(GU,nMr),e(GM,sMr),e(ie,lMr),e(ie,OM),e(OM,hTe),e(hTe,iMr),e(OM,dMr),e(OM,OU),e(OU,cMr),e(OM,fMr),e(ie,mMr),e(ie,VM),e(VM,pTe),e(pTe,gMr),e(VM,hMr),e(VM,VU),e(VU,pMr),e(VM,uMr),e(ie,_Mr),e(ie,XM),e(XM,uTe),e(uTe,bMr),e(XM,vMr),e(XM,XU),e(XU,FMr),e(XM,TMr),e(kr,MMr),M(zM,kr,null),b(f,lOe,_),b(f,hc,_),e(hc,WM),e(WM,_Te),M(y8,_Te,null),e(hc,EMr),e(hc,bTe),e(bTe,CMr),b(f,iOe,_),b(f,ar,_),M(x8,ar,null),e(ar,wMr),e(ar,pc),e(pc,AMr),e(pc,zU),e(zU,LMr),e(pc,yMr),e(pc,WU),e(WU,xMr),e(pc,$Mr),e(ar,kMr),e(ar,$8),e($8,SMr),e($8,vTe),e(vTe,RMr),e($8,PMr),e(ar,BMr),e(ar,Bt),M(k8,Bt,null),e(Bt,IMr),e(Bt,FTe),e(FTe,NMr),e(Bt,qMr),e(Bt,uc),e(uc,jMr),e(uc,TTe),e(TTe,DMr),e(uc,GMr),e(uc,QU),e(QU,OMr),e(uc,VMr),e(Bt,XMr),M(QM,Bt,null),e(ar,zMr),e(ar,Sr),M(S8,Sr,null),e(Sr,WMr),e(Sr,MTe),e(MTe,QMr),e(Sr,HMr),e(Sr,cn),e(cn,UMr),e(cn,ETe),e(ETe,JMr),e(cn,YMr),e(cn,CTe),e(CTe,KMr),e(cn,ZMr),e(cn,wTe),e(wTe,e4r),e(cn,o4r),e(Sr,r4r),e(Sr,ye),e(ye,HM),e(HM,ATe),e(ATe,t4r),e(HM,a4r),e(HM,HU),e(HU,n4r),e(HM,s4r),e(ye,l4r),e(ye,UM),e(UM,LTe),e(LTe,i4r),e(UM,d4r),e(UM,UU),e(UU,c4r),e(UM,f4r),e(ye,m4r),e(ye,JM),e(JM,yTe),e(yTe,g4r),e(JM,h4r),e(JM,JU),e(JU,p4r),e(JM,u4r),e(ye,_4r),e(ye,YM),e(YM,xTe),e(xTe,b4r),e(YM,v4r),e(YM,YU),e(YU,F4r),e(YM,T4r),e(ye,M4r),e(ye,KM),e(KM,$Te),e($Te,E4r),e(KM,C4r),e(KM,KU),e(KU,w4r),e(KM,A4r),e(ye,L4r),e(ye,ZM),e(ZM,kTe),e(kTe,y4r),e(ZM,x4r),e(ZM,ZU),e(ZU,$4r),e(ZM,k4r),e(ye,S4r),e(ye,e4),e(e4,STe),e(STe,R4r),e(e4,P4r),e(e4,eJ),e(eJ,B4r),e(e4,I4r),e(ye,N4r),e(ye,o4),e(o4,RTe),e(RTe,q4r),e(o4,j4r),e(o4,oJ),e(oJ,D4r),e(o4,G4r),e(ye,O4r),e(ye,r4),e(r4,PTe),e(PTe,V4r),e(r4,X4r),e(r4,rJ),e(rJ,z4r),e(r4,W4r),e(ye,Q4r),e(ye,t4),e(t4,BTe),e(BTe,H4r),e(t4,U4r),e(t4,tJ),e(tJ,J4r),e(t4,Y4r),e(Sr,K4r),M(a4,Sr,null),b(f,dOe,_),b(f,_c,_),e(_c,n4),e(n4,ITe),M(R8,ITe,null),e(_c,Z4r),e(_c,NTe),e(NTe,eEr),b(f,cOe,_),b(f,nr,_),M(P8,nr,null),e(nr,oEr),e(nr,bc),e(bc,rEr),e(bc,aJ),e(aJ,tEr),e(bc,aEr),e(bc,nJ),e(nJ,nEr),e(bc,sEr),e(nr,lEr),e(nr,B8),e(B8,iEr),e(B8,qTe),e(qTe,dEr),e(B8,cEr),e(nr,fEr),e(nr,It),M(I8,It,null),e(It,mEr),e(It,jTe),e(jTe,gEr),e(It,hEr),e(It,vc),e(vc,pEr),e(vc,DTe),e(DTe,uEr),e(vc,_Er),e(vc,sJ),e(sJ,bEr),e(vc,vEr),e(It,FEr),M(s4,It,null),e(nr,TEr),e(nr,Rr),M(N8,Rr,null),e(Rr,MEr),e(Rr,GTe),e(GTe,EEr),e(Rr,CEr),e(Rr,fn),e(fn,wEr),e(fn,OTe),e(OTe,AEr),e(fn,LEr),e(fn,VTe),e(VTe,yEr),e(fn,xEr),e(fn,XTe),e(XTe,$Er),e(fn,kEr),e(Rr,SEr),e(Rr,te),e(te,l4),e(l4,zTe),e(zTe,REr),e(l4,PEr),e(l4,lJ),e(lJ,BEr),e(l4,IEr),e(te,NEr),e(te,i4),e(i4,WTe),e(WTe,qEr),e(i4,jEr),e(i4,iJ),e(iJ,DEr),e(i4,GEr),e(te,OEr),e(te,d4),e(d4,QTe),e(QTe,VEr),e(d4,XEr),e(d4,dJ),e(dJ,zEr),e(d4,WEr),e(te,QEr),e(te,c4),e(c4,HTe),e(HTe,HEr),e(c4,UEr),e(c4,cJ),e(cJ,JEr),e(c4,YEr),e(te,KEr),e(te,f4),e(f4,UTe),e(UTe,ZEr),e(f4,eCr),e(f4,fJ),e(fJ,oCr),e(f4,rCr),e(te,tCr),e(te,m4),e(m4,JTe),e(JTe,aCr),e(m4,nCr),e(m4,mJ),e(mJ,sCr),e(m4,lCr),e(te,iCr),e(te,g4),e(g4,YTe),e(YTe,dCr),e(g4,cCr),e(g4,gJ),e(gJ,fCr),e(g4,mCr),e(te,gCr),e(te,h4),e(h4,KTe),e(KTe,hCr),e(h4,pCr),e(h4,hJ),e(hJ,uCr),e(h4,_Cr),e(te,bCr),e(te,p4),e(p4,ZTe),e(ZTe,vCr),e(p4,FCr),e(p4,pJ),e(pJ,TCr),e(p4,MCr),e(te,ECr),e(te,u4),e(u4,e7e),e(e7e,CCr),e(u4,wCr),e(u4,uJ),e(uJ,ACr),e(u4,LCr),e(te,yCr),e(te,_4),e(_4,o7e),e(o7e,xCr),e(_4,$Cr),e(_4,_J),e(_J,kCr),e(_4,SCr),e(te,RCr),e(te,b4),e(b4,r7e),e(r7e,PCr),e(b4,BCr),e(b4,bJ),e(bJ,ICr),e(b4,NCr),e(te,qCr),e(te,v4),e(v4,t7e),e(t7e,jCr),e(v4,DCr),e(v4,vJ),e(vJ,GCr),e(v4,OCr),e(te,VCr),e(te,F4),e(F4,a7e),e(a7e,XCr),e(F4,zCr),e(F4,FJ),e(FJ,WCr),e(F4,QCr),e(te,HCr),e(te,T4),e(T4,n7e),e(n7e,UCr),e(T4,JCr),e(T4,TJ),e(TJ,YCr),e(T4,KCr),e(te,ZCr),e(te,M4),e(M4,s7e),e(s7e,e5r),e(M4,o5r),e(M4,MJ),e(MJ,r5r),e(M4,t5r),e(te,a5r),e(te,E4),e(E4,l7e),e(l7e,n5r),e(E4,s5r),e(E4,EJ),e(EJ,l5r),e(E4,i5r),e(te,d5r),e(te,C4),e(C4,i7e),e(i7e,c5r),e(C4,f5r),e(C4,CJ),e(CJ,m5r),e(C4,g5r),e(te,h5r),e(te,w4),e(w4,d7e),e(d7e,p5r),e(w4,u5r),e(w4,wJ),e(wJ,_5r),e(w4,b5r),e(te,v5r),e(te,A4),e(A4,c7e),e(c7e,F5r),e(A4,T5r),e(A4,AJ),e(AJ,M5r),e(A4,E5r),e(te,C5r),e(te,L4),e(L4,f7e),e(f7e,w5r),e(L4,A5r),e(L4,LJ),e(LJ,L5r),e(L4,y5r),e(te,x5r),e(te,y4),e(y4,m7e),e(m7e,$5r),e(y4,k5r),e(y4,yJ),e(yJ,S5r),e(y4,R5r),e(te,P5r),e(te,x4),e(x4,g7e),e(g7e,B5r),e(x4,I5r),e(x4,xJ),e(xJ,N5r),e(x4,q5r),e(te,j5r),e(te,$4),e($4,h7e),e(h7e,D5r),e($4,G5r),e($4,$J),e($J,O5r),e($4,V5r),e(te,X5r),e(te,k4),e(k4,p7e),e(p7e,z5r),e(k4,W5r),e(k4,kJ),e(kJ,Q5r),e(k4,H5r),e(te,U5r),e(te,S4),e(S4,u7e),e(u7e,J5r),e(S4,Y5r),e(S4,SJ),e(SJ,K5r),e(S4,Z5r),e(Rr,e3r),M(R4,Rr,null),b(f,fOe,_),b(f,Fc,_),e(Fc,P4),e(P4,_7e),M(q8,_7e,null),e(Fc,o3r),e(Fc,b7e),e(b7e,r3r),b(f,mOe,_),b(f,sr,_),M(j8,sr,null),e(sr,t3r),e(sr,Tc),e(Tc,a3r),e(Tc,RJ),e(RJ,n3r),e(Tc,s3r),e(Tc,PJ),e(PJ,l3r),e(Tc,i3r),e(sr,d3r),e(sr,D8),e(D8,c3r),e(D8,v7e),e(v7e,f3r),e(D8,m3r),e(sr,g3r),e(sr,Nt),M(G8,Nt,null),e(Nt,h3r),e(Nt,F7e),e(F7e,p3r),e(Nt,u3r),e(Nt,Mc),e(Mc,_3r),e(Mc,T7e),e(T7e,b3r),e(Mc,v3r),e(Mc,BJ),e(BJ,F3r),e(Mc,T3r),e(Nt,M3r),M(B4,Nt,null),e(sr,E3r),e(sr,Pr),M(O8,Pr,null),e(Pr,C3r),e(Pr,M7e),e(M7e,w3r),e(Pr,A3r),e(Pr,mn),e(mn,L3r),e(mn,E7e),e(E7e,y3r),e(mn,x3r),e(mn,C7e),e(C7e,$3r),e(mn,k3r),e(mn,w7e),e(w7e,S3r),e(mn,R3r),e(Pr,P3r),e(Pr,ue),e(ue,I4),e(I4,A7e),e(A7e,B3r),e(I4,I3r),e(I4,IJ),e(IJ,N3r),e(I4,q3r),e(ue,j3r),e(ue,N4),e(N4,L7e),e(L7e,D3r),e(N4,G3r),e(N4,NJ),e(NJ,O3r),e(N4,V3r),e(ue,X3r),e(ue,q4),e(q4,y7e),e(y7e,z3r),e(q4,W3r),e(q4,qJ),e(qJ,Q3r),e(q4,H3r),e(ue,U3r),e(ue,j4),e(j4,x7e),e(x7e,J3r),e(j4,Y3r),e(j4,jJ),e(jJ,K3r),e(j4,Z3r),e(ue,e0r),e(ue,D4),e(D4,$7e),e($7e,o0r),e(D4,r0r),e(D4,DJ),e(DJ,t0r),e(D4,a0r),e(ue,n0r),e(ue,G4),e(G4,k7e),e(k7e,s0r),e(G4,l0r),e(G4,GJ),e(GJ,i0r),e(G4,d0r),e(ue,c0r),e(ue,O4),e(O4,S7e),e(S7e,f0r),e(O4,m0r),e(O4,OJ),e(OJ,g0r),e(O4,h0r),e(ue,p0r),e(ue,V4),e(V4,R7e),e(R7e,u0r),e(V4,_0r),e(V4,VJ),e(VJ,b0r),e(V4,v0r),e(ue,F0r),e(ue,X4),e(X4,P7e),e(P7e,T0r),e(X4,M0r),e(X4,XJ),e(XJ,E0r),e(X4,C0r),e(ue,w0r),e(ue,z4),e(z4,B7e),e(B7e,A0r),e(z4,L0r),e(z4,zJ),e(zJ,y0r),e(z4,x0r),e(ue,$0r),e(ue,W4),e(W4,I7e),e(I7e,k0r),e(W4,S0r),e(W4,WJ),e(WJ,R0r),e(W4,P0r),e(ue,B0r),e(ue,Q4),e(Q4,N7e),e(N7e,I0r),e(Q4,N0r),e(Q4,QJ),e(QJ,q0r),e(Q4,j0r),e(ue,D0r),e(ue,H4),e(H4,q7e),e(q7e,G0r),e(H4,O0r),e(H4,HJ),e(HJ,V0r),e(H4,X0r),e(ue,z0r),e(ue,U4),e(U4,j7e),e(j7e,W0r),e(U4,Q0r),e(U4,UJ),e(UJ,H0r),e(U4,U0r),e(ue,J0r),e(ue,J4),e(J4,D7e),e(D7e,Y0r),e(J4,K0r),e(J4,JJ),e(JJ,Z0r),e(J4,ewr),e(ue,owr),e(ue,Y4),e(Y4,G7e),e(G7e,rwr),e(Y4,twr),e(Y4,YJ),e(YJ,awr),e(Y4,nwr),e(ue,swr),e(ue,K4),e(K4,O7e),e(O7e,lwr),e(K4,iwr),e(K4,KJ),e(KJ,dwr),e(K4,cwr),e(Pr,fwr),M(Z4,Pr,null),b(f,gOe,_),b(f,Ec,_),e(Ec,eE),e(eE,V7e),M(V8,V7e,null),e(Ec,mwr),e(Ec,X7e),e(X7e,gwr),b(f,hOe,_),b(f,lr,_),M(X8,lr,null),e(lr,hwr),e(lr,Cc),e(Cc,pwr),e(Cc,ZJ),e(ZJ,uwr),e(Cc,_wr),e(Cc,eY),e(eY,bwr),e(Cc,vwr),e(lr,Fwr),e(lr,z8),e(z8,Twr),e(z8,z7e),e(z7e,Mwr),e(z8,Ewr),e(lr,Cwr),e(lr,qt),M(W8,qt,null),e(qt,wwr),e(qt,W7e),e(W7e,Awr),e(qt,Lwr),e(qt,wc),e(wc,ywr),e(wc,Q7e),e(Q7e,xwr),e(wc,$wr),e(wc,oY),e(oY,kwr),e(wc,Swr),e(qt,Rwr),M(oE,qt,null),e(lr,Pwr),e(lr,Br),M(Q8,Br,null),e(Br,Bwr),e(Br,H7e),e(H7e,Iwr),e(Br,Nwr),e(Br,gn),e(gn,qwr),e(gn,U7e),e(U7e,jwr),e(gn,Dwr),e(gn,J7e),e(J7e,Gwr),e(gn,Owr),e(gn,Y7e),e(Y7e,Vwr),e(gn,Xwr),e(Br,zwr),e(Br,H8),e(H8,rE),e(rE,K7e),e(K7e,Wwr),e(rE,Qwr),e(rE,rY),e(rY,Hwr),e(rE,Uwr),e(H8,Jwr),e(H8,tE),e(tE,Z7e),e(Z7e,Ywr),e(tE,Kwr),e(tE,tY),e(tY,Zwr),e(tE,eAr),e(Br,oAr),M(aE,Br,null),b(f,pOe,_),b(f,Ac,_),e(Ac,nE),e(nE,e9e),M(U8,e9e,null),e(Ac,rAr),e(Ac,o9e),e(o9e,tAr),b(f,uOe,_),b(f,ir,_),M(J8,ir,null),e(ir,aAr),e(ir,Lc),e(Lc,nAr),e(Lc,aY),e(aY,sAr),e(Lc,lAr),e(Lc,nY),e(nY,iAr),e(Lc,dAr),e(ir,cAr),e(ir,Y8),e(Y8,fAr),e(Y8,r9e),e(r9e,mAr),e(Y8,gAr),e(ir,hAr),e(ir,jt),M(K8,jt,null),e(jt,pAr),e(jt,t9e),e(t9e,uAr),e(jt,_Ar),e(jt,yc),e(yc,bAr),e(yc,a9e),e(a9e,vAr),e(yc,FAr),e(yc,sY),e(sY,TAr),e(yc,MAr),e(jt,EAr),M(sE,jt,null),e(ir,CAr),e(ir,Ir),M(Z8,Ir,null),e(Ir,wAr),e(Ir,n9e),e(n9e,AAr),e(Ir,LAr),e(Ir,hn),e(hn,yAr),e(hn,s9e),e(s9e,xAr),e(hn,$Ar),e(hn,l9e),e(l9e,kAr),e(hn,SAr),e(hn,i9e),e(i9e,RAr),e(hn,PAr),e(Ir,BAr),e(Ir,d9e),e(d9e,lE),e(lE,c9e),e(c9e,IAr),e(lE,NAr),e(lE,lY),e(lY,qAr),e(lE,jAr),e(Ir,DAr),M(iE,Ir,null),b(f,_Oe,_),b(f,xc,_),e(xc,dE),e(dE,f9e),M(ex,f9e,null),e(xc,GAr),e(xc,m9e),e(m9e,OAr),b(f,bOe,_),b(f,dr,_),M(ox,dr,null),e(dr,VAr),e(dr,$c),e($c,XAr),e($c,iY),e(iY,zAr),e($c,WAr),e($c,dY),e(dY,QAr),e($c,HAr),e(dr,UAr),e(dr,rx),e(rx,JAr),e(rx,g9e),e(g9e,YAr),e(rx,KAr),e(dr,ZAr),e(dr,Dt),M(tx,Dt,null),e(Dt,eLr),e(Dt,h9e),e(h9e,oLr),e(Dt,rLr),e(Dt,kc),e(kc,tLr),e(kc,p9e),e(p9e,aLr),e(kc,nLr),e(kc,cY),e(cY,sLr),e(kc,lLr),e(Dt,iLr),M(cE,Dt,null),e(dr,dLr),e(dr,Nr),M(ax,Nr,null),e(Nr,cLr),e(Nr,u9e),e(u9e,fLr),e(Nr,mLr),e(Nr,pn),e(pn,gLr),e(pn,_9e),e(_9e,hLr),e(pn,pLr),e(pn,b9e),e(b9e,uLr),e(pn,_Lr),e(pn,v9e),e(v9e,bLr),e(pn,vLr),e(Nr,FLr),e(Nr,de),e(de,fE),e(fE,F9e),e(F9e,TLr),e(fE,MLr),e(fE,fY),e(fY,ELr),e(fE,CLr),e(de,wLr),e(de,mE),e(mE,T9e),e(T9e,ALr),e(mE,LLr),e(mE,mY),e(mY,yLr),e(mE,xLr),e(de,$Lr),e(de,gE),e(gE,M9e),e(M9e,kLr),e(gE,SLr),e(gE,gY),e(gY,RLr),e(gE,PLr),e(de,BLr),e(de,hE),e(hE,E9e),e(E9e,ILr),e(hE,NLr),e(hE,hY),e(hY,qLr),e(hE,jLr),e(de,DLr),e(de,pE),e(pE,C9e),e(C9e,GLr),e(pE,OLr),e(pE,pY),e(pY,VLr),e(pE,XLr),e(de,zLr),e(de,uE),e(uE,w9e),e(w9e,WLr),e(uE,QLr),e(uE,uY),e(uY,HLr),e(uE,ULr),e(de,JLr),e(de,_E),e(_E,A9e),e(A9e,YLr),e(_E,KLr),e(_E,_Y),e(_Y,ZLr),e(_E,eyr),e(de,oyr),e(de,bE),e(bE,L9e),e(L9e,ryr),e(bE,tyr),e(bE,bY),e(bY,ayr),e(bE,nyr),e(de,syr),e(de,vE),e(vE,y9e),e(y9e,lyr),e(vE,iyr),e(vE,vY),e(vY,dyr),e(vE,cyr),e(de,fyr),e(de,FE),e(FE,x9e),e(x9e,myr),e(FE,gyr),e(FE,FY),e(FY,hyr),e(FE,pyr),e(de,uyr),e(de,TE),e(TE,$9e),e($9e,_yr),e(TE,byr),e(TE,TY),e(TY,vyr),e(TE,Fyr),e(de,Tyr),e(de,ME),e(ME,k9e),e(k9e,Myr),e(ME,Eyr),e(ME,MY),e(MY,Cyr),e(ME,wyr),e(de,Ayr),e(de,EE),e(EE,S9e),e(S9e,Lyr),e(EE,yyr),e(EE,EY),e(EY,xyr),e(EE,$yr),e(de,kyr),e(de,CE),e(CE,R9e),e(R9e,Syr),e(CE,Ryr),e(CE,CY),e(CY,Pyr),e(CE,Byr),e(de,Iyr),e(de,wE),e(wE,P9e),e(P9e,Nyr),e(wE,qyr),e(wE,wY),e(wY,jyr),e(wE,Dyr),e(de,Gyr),e(de,AE),e(AE,B9e),e(B9e,Oyr),e(AE,Vyr),e(AE,AY),e(AY,Xyr),e(AE,zyr),e(de,Wyr),e(de,LE),e(LE,I9e),e(I9e,Qyr),e(LE,Hyr),e(LE,LY),e(LY,Uyr),e(LE,Jyr),e(de,Yyr),e(de,yE),e(yE,N9e),e(N9e,Kyr),e(yE,Zyr),e(yE,yY),e(yY,e8r),e(yE,o8r),e(de,r8r),e(de,xE),e(xE,q9e),e(q9e,t8r),e(xE,a8r),e(xE,xY),e(xY,n8r),e(xE,s8r),e(de,l8r),e(de,$E),e($E,j9e),e(j9e,i8r),e($E,d8r),e($E,$Y),e($Y,c8r),e($E,f8r),e(Nr,m8r),M(kE,Nr,null),b(f,vOe,_),b(f,Sc,_),e(Sc,SE),e(SE,D9e),M(nx,D9e,null),e(Sc,g8r),e(Sc,G9e),e(G9e,h8r),b(f,FOe,_),b(f,cr,_),M(sx,cr,null),e(cr,p8r),e(cr,Rc),e(Rc,u8r),e(Rc,kY),e(kY,_8r),e(Rc,b8r),e(Rc,SY),e(SY,v8r),e(Rc,F8r),e(cr,T8r),e(cr,lx),e(lx,M8r),e(lx,O9e),e(O9e,E8r),e(lx,C8r),e(cr,w8r),e(cr,Gt),M(ix,Gt,null),e(Gt,A8r),e(Gt,V9e),e(V9e,L8r),e(Gt,y8r),e(Gt,Pc),e(Pc,x8r),e(Pc,X9e),e(X9e,$8r),e(Pc,k8r),e(Pc,RY),e(RY,S8r),e(Pc,R8r),e(Gt,P8r),M(RE,Gt,null),e(cr,B8r),e(cr,qr),M(dx,qr,null),e(qr,I8r),e(qr,z9e),e(z9e,N8r),e(qr,q8r),e(qr,un),e(un,j8r),e(un,W9e),e(W9e,D8r),e(un,G8r),e(un,Q9e),e(Q9e,O8r),e(un,V8r),e(un,H9e),e(H9e,X8r),e(un,z8r),e(qr,W8r),e(qr,ce),e(ce,PE),e(PE,U9e),e(U9e,Q8r),e(PE,H8r),e(PE,PY),e(PY,U8r),e(PE,J8r),e(ce,Y8r),e(ce,BE),e(BE,J9e),e(J9e,K8r),e(BE,Z8r),e(BE,BY),e(BY,exr),e(BE,oxr),e(ce,rxr),e(ce,IE),e(IE,Y9e),e(Y9e,txr),e(IE,axr),e(IE,IY),e(IY,nxr),e(IE,sxr),e(ce,lxr),e(ce,NE),e(NE,K9e),e(K9e,ixr),e(NE,dxr),e(NE,NY),e(NY,cxr),e(NE,fxr),e(ce,mxr),e(ce,qE),e(qE,Z9e),e(Z9e,gxr),e(qE,hxr),e(qE,qY),e(qY,pxr),e(qE,uxr),e(ce,_xr),e(ce,jE),e(jE,eMe),e(eMe,bxr),e(jE,vxr),e(jE,jY),e(jY,Fxr),e(jE,Txr),e(ce,Mxr),e(ce,DE),e(DE,oMe),e(oMe,Exr),e(DE,Cxr),e(DE,DY),e(DY,wxr),e(DE,Axr),e(ce,Lxr),e(ce,GE),e(GE,rMe),e(rMe,yxr),e(GE,xxr),e(GE,GY),e(GY,$xr),e(GE,kxr),e(ce,Sxr),e(ce,OE),e(OE,tMe),e(tMe,Rxr),e(OE,Pxr),e(OE,OY),e(OY,Bxr),e(OE,Ixr),e(ce,Nxr),e(ce,VE),e(VE,aMe),e(aMe,qxr),e(VE,jxr),e(VE,VY),e(VY,Dxr),e(VE,Gxr),e(ce,Oxr),e(ce,XE),e(XE,nMe),e(nMe,Vxr),e(XE,Xxr),e(XE,XY),e(XY,zxr),e(XE,Wxr),e(ce,Qxr),e(ce,zE),e(zE,sMe),e(sMe,Hxr),e(zE,Uxr),e(zE,zY),e(zY,Jxr),e(zE,Yxr),e(ce,Kxr),e(ce,WE),e(WE,lMe),e(lMe,Zxr),e(WE,e$r),e(WE,WY),e(WY,o$r),e(WE,r$r),e(ce,t$r),e(ce,QE),e(QE,iMe),e(iMe,a$r),e(QE,n$r),e(QE,QY),e(QY,s$r),e(QE,l$r),e(ce,i$r),e(ce,HE),e(HE,dMe),e(dMe,d$r),e(HE,c$r),e(HE,HY),e(HY,f$r),e(HE,m$r),e(ce,g$r),e(ce,UE),e(UE,cMe),e(cMe,h$r),e(UE,p$r),e(UE,UY),e(UY,u$r),e(UE,_$r),e(ce,b$r),e(ce,JE),e(JE,fMe),e(fMe,v$r),e(JE,F$r),e(JE,JY),e(JY,T$r),e(JE,M$r),e(ce,E$r),e(ce,YE),e(YE,mMe),e(mMe,C$r),e(YE,w$r),e(YE,YY),e(YY,A$r),e(YE,L$r),e(ce,y$r),e(ce,KE),e(KE,gMe),e(gMe,x$r),e(KE,$$r),e(KE,KY),e(KY,k$r),e(KE,S$r),e(ce,R$r),e(ce,ZE),e(ZE,hMe),e(hMe,P$r),e(ZE,B$r),e(ZE,ZY),e(ZY,I$r),e(ZE,N$r),e(qr,q$r),M(eC,qr,null),b(f,TOe,_),b(f,Bc,_),e(Bc,oC),e(oC,pMe),M(cx,pMe,null),e(Bc,j$r),e(Bc,uMe),e(uMe,D$r),b(f,MOe,_),b(f,fr,_),M(fx,fr,null),e(fr,G$r),e(fr,Ic),e(Ic,O$r),e(Ic,eK),e(eK,V$r),e(Ic,X$r),e(Ic,oK),e(oK,z$r),e(Ic,W$r),e(fr,Q$r),e(fr,mx),e(mx,H$r),e(mx,_Me),e(_Me,U$r),e(mx,J$r),e(fr,Y$r),e(fr,Ot),M(gx,Ot,null),e(Ot,K$r),e(Ot,bMe),e(bMe,Z$r),e(Ot,ekr),e(Ot,Nc),e(Nc,okr),e(Nc,vMe),e(vMe,rkr),e(Nc,tkr),e(Nc,rK),e(rK,akr),e(Nc,nkr),e(Ot,skr),M(rC,Ot,null),e(fr,lkr),e(fr,jr),M(hx,jr,null),e(jr,ikr),e(jr,FMe),e(FMe,dkr),e(jr,ckr),e(jr,_n),e(_n,fkr),e(_n,TMe),e(TMe,mkr),e(_n,gkr),e(_n,MMe),e(MMe,hkr),e(_n,pkr),e(_n,EMe),e(EMe,ukr),e(_n,_kr),e(jr,bkr),e(jr,CMe),e(CMe,tC),e(tC,wMe),e(wMe,vkr),e(tC,Fkr),e(tC,tK),e(tK,Tkr),e(tC,Mkr),e(jr,Ekr),M(aC,jr,null),b(f,EOe,_),b(f,qc,_),e(qc,nC),e(nC,AMe),M(px,AMe,null),e(qc,Ckr),e(qc,LMe),e(LMe,wkr),b(f,COe,_),b(f,mr,_),M(ux,mr,null),e(mr,Akr),e(mr,jc),e(jc,Lkr),e(jc,aK),e(aK,ykr),e(jc,xkr),e(jc,nK),e(nK,$kr),e(jc,kkr),e(mr,Skr),e(mr,_x),e(_x,Rkr),e(_x,yMe),e(yMe,Pkr),e(_x,Bkr),e(mr,Ikr),e(mr,Vt),M(bx,Vt,null),e(Vt,Nkr),e(Vt,xMe),e(xMe,qkr),e(Vt,jkr),e(Vt,Dc),e(Dc,Dkr),e(Dc,$Me),e($Me,Gkr),e(Dc,Okr),e(Dc,sK),e(sK,Vkr),e(Dc,Xkr),e(Vt,zkr),M(sC,Vt,null),e(mr,Wkr),e(mr,Dr),M(vx,Dr,null),e(Dr,Qkr),e(Dr,kMe),e(kMe,Hkr),e(Dr,Ukr),e(Dr,bn),e(bn,Jkr),e(bn,SMe),e(SMe,Ykr),e(bn,Kkr),e(bn,RMe),e(RMe,Zkr),e(bn,eSr),e(bn,PMe),e(PMe,oSr),e(bn,rSr),e(Dr,tSr),e(Dr,BMe),e(BMe,lC),e(lC,IMe),e(IMe,aSr),e(lC,nSr),e(lC,lK),e(lK,sSr),e(lC,lSr),e(Dr,iSr),M(iC,Dr,null),b(f,wOe,_),b(f,Gc,_),e(Gc,dC),e(dC,NMe),M(Fx,NMe,null),e(Gc,dSr),e(Gc,qMe),e(qMe,cSr),b(f,AOe,_),b(f,gr,_),M(Tx,gr,null),e(gr,fSr),e(gr,Oc),e(Oc,mSr),e(Oc,iK),e(iK,gSr),e(Oc,hSr),e(Oc,dK),e(dK,pSr),e(Oc,uSr),e(gr,_Sr),e(gr,Mx),e(Mx,bSr),e(Mx,jMe),e(jMe,vSr),e(Mx,FSr),e(gr,TSr),e(gr,Xt),M(Ex,Xt,null),e(Xt,MSr),e(Xt,DMe),e(DMe,ESr),e(Xt,CSr),e(Xt,Vc),e(Vc,wSr),e(Vc,GMe),e(GMe,ASr),e(Vc,LSr),e(Vc,cK),e(cK,ySr),e(Vc,xSr),e(Xt,$Sr),M(cC,Xt,null),e(gr,kSr),e(gr,Gr),M(Cx,Gr,null),e(Gr,SSr),e(Gr,OMe),e(OMe,RSr),e(Gr,PSr),e(Gr,vn),e(vn,BSr),e(vn,VMe),e(VMe,ISr),e(vn,NSr),e(vn,XMe),e(XMe,qSr),e(vn,jSr),e(vn,zMe),e(zMe,DSr),e(vn,GSr),e(Gr,OSr),e(Gr,oe),e(oe,fC),e(fC,WMe),e(WMe,VSr),e(fC,XSr),e(fC,fK),e(fK,zSr),e(fC,WSr),e(oe,QSr),e(oe,mC),e(mC,QMe),e(QMe,HSr),e(mC,USr),e(mC,mK),e(mK,JSr),e(mC,YSr),e(oe,KSr),e(oe,gC),e(gC,HMe),e(HMe,ZSr),e(gC,eRr),e(gC,gK),e(gK,oRr),e(gC,rRr),e(oe,tRr),e(oe,hC),e(hC,UMe),e(UMe,aRr),e(hC,nRr),e(hC,hK),e(hK,sRr),e(hC,lRr),e(oe,iRr),e(oe,pC),e(pC,JMe),e(JMe,dRr),e(pC,cRr),e(pC,pK),e(pK,fRr),e(pC,mRr),e(oe,gRr),e(oe,uC),e(uC,YMe),e(YMe,hRr),e(uC,pRr),e(uC,uK),e(uK,uRr),e(uC,_Rr),e(oe,bRr),e(oe,_C),e(_C,KMe),e(KMe,vRr),e(_C,FRr),e(_C,_K),e(_K,TRr),e(_C,MRr),e(oe,ERr),e(oe,bC),e(bC,ZMe),e(ZMe,CRr),e(bC,wRr),e(bC,bK),e(bK,ARr),e(bC,LRr),e(oe,yRr),e(oe,vC),e(vC,e4e),e(e4e,xRr),e(vC,$Rr),e(vC,vK),e(vK,kRr),e(vC,SRr),e(oe,RRr),e(oe,FC),e(FC,o4e),e(o4e,PRr),e(FC,BRr),e(FC,FK),e(FK,IRr),e(FC,NRr),e(oe,qRr),e(oe,TC),e(TC,r4e),e(r4e,jRr),e(TC,DRr),e(TC,TK),e(TK,GRr),e(TC,ORr),e(oe,VRr),e(oe,MC),e(MC,t4e),e(t4e,XRr),e(MC,zRr),e(MC,MK),e(MK,WRr),e(MC,QRr),e(oe,HRr),e(oe,EC),e(EC,a4e),e(a4e,URr),e(EC,JRr),e(EC,EK),e(EK,YRr),e(EC,KRr),e(oe,ZRr),e(oe,CC),e(CC,n4e),e(n4e,ePr),e(CC,oPr),e(CC,CK),e(CK,rPr),e(CC,tPr),e(oe,aPr),e(oe,wC),e(wC,s4e),e(s4e,nPr),e(wC,sPr),e(wC,wK),e(wK,lPr),e(wC,iPr),e(oe,dPr),e(oe,AC),e(AC,l4e),e(l4e,cPr),e(AC,fPr),e(AC,AK),e(AK,mPr),e(AC,gPr),e(oe,hPr),e(oe,LC),e(LC,i4e),e(i4e,pPr),e(LC,uPr),e(LC,LK),e(LK,_Pr),e(LC,bPr),e(oe,vPr),e(oe,yC),e(yC,d4e),e(d4e,FPr),e(yC,TPr),e(yC,yK),e(yK,MPr),e(yC,EPr),e(oe,CPr),e(oe,xC),e(xC,c4e),e(c4e,wPr),e(xC,APr),e(xC,xK),e(xK,LPr),e(xC,yPr),e(oe,xPr),e(oe,$C),e($C,f4e),e(f4e,$Pr),e($C,kPr),e($C,$K),e($K,SPr),e($C,RPr),e(oe,PPr),e(oe,kC),e(kC,m4e),e(m4e,BPr),e(kC,IPr),e(kC,kK),e(kK,NPr),e(kC,qPr),e(oe,jPr),e(oe,SC),e(SC,g4e),e(g4e,DPr),e(SC,GPr),e(SC,SK),e(SK,OPr),e(SC,VPr),e(oe,XPr),e(oe,RC),e(RC,h4e),e(h4e,zPr),e(RC,WPr),e(RC,RK),e(RK,QPr),e(RC,HPr),e(oe,UPr),e(oe,PC),e(PC,p4e),e(p4e,JPr),e(PC,YPr),e(PC,PK),e(PK,KPr),e(PC,ZPr),e(oe,eBr),e(oe,BC),e(BC,u4e),e(u4e,oBr),e(BC,rBr),e(BC,BK),e(BK,tBr),e(BC,aBr),e(oe,nBr),e(oe,IC),e(IC,_4e),e(_4e,sBr),e(IC,lBr),e(IC,IK),e(IK,iBr),e(IC,dBr),e(oe,cBr),e(oe,NC),e(NC,b4e),e(b4e,fBr),e(NC,mBr),e(NC,NK),e(NK,gBr),e(NC,hBr),e(Gr,pBr),M(qC,Gr,null),b(f,LOe,_),b(f,Xc,_),e(Xc,jC),e(jC,v4e),M(wx,v4e,null),e(Xc,uBr),e(Xc,F4e),e(F4e,_Br),b(f,yOe,_),b(f,hr,_),M(Ax,hr,null),e(hr,bBr),e(hr,zc),e(zc,vBr),e(zc,qK),e(qK,FBr),e(zc,TBr),e(zc,jK),e(jK,MBr),e(zc,EBr),e(hr,CBr),e(hr,Lx),e(Lx,wBr),e(Lx,T4e),e(T4e,ABr),e(Lx,LBr),e(hr,yBr),e(hr,zt),M(yx,zt,null),e(zt,xBr),e(zt,M4e),e(M4e,$Br),e(zt,kBr),e(zt,Wc),e(Wc,SBr),e(Wc,E4e),e(E4e,RBr),e(Wc,PBr),e(Wc,DK),e(DK,BBr),e(Wc,IBr),e(zt,NBr),M(DC,zt,null),e(hr,qBr),e(hr,Or),M(xx,Or,null),e(Or,jBr),e(Or,C4e),e(C4e,DBr),e(Or,GBr),e(Or,Fn),e(Fn,OBr),e(Fn,w4e),e(w4e,VBr),e(Fn,XBr),e(Fn,A4e),e(A4e,zBr),e(Fn,WBr),e(Fn,L4e),e(L4e,QBr),e(Fn,HBr),e(Or,UBr),e(Or,xe),e(xe,GC),e(GC,y4e),e(y4e,JBr),e(GC,YBr),e(GC,GK),e(GK,KBr),e(GC,ZBr),e(xe,eIr),e(xe,OC),e(OC,x4e),e(x4e,oIr),e(OC,rIr),e(OC,OK),e(OK,tIr),e(OC,aIr),e(xe,nIr),e(xe,VC),e(VC,$4e),e($4e,sIr),e(VC,lIr),e(VC,VK),e(VK,iIr),e(VC,dIr),e(xe,cIr),e(xe,XC),e(XC,k4e),e(k4e,fIr),e(XC,mIr),e(XC,XK),e(XK,gIr),e(XC,hIr),e(xe,pIr),e(xe,zC),e(zC,S4e),e(S4e,uIr),e(zC,_Ir),e(zC,zK),e(zK,bIr),e(zC,vIr),e(xe,FIr),e(xe,WC),e(WC,R4e),e(R4e,TIr),e(WC,MIr),e(WC,WK),e(WK,EIr),e(WC,CIr),e(xe,wIr),e(xe,QC),e(QC,P4e),e(P4e,AIr),e(QC,LIr),e(QC,QK),e(QK,yIr),e(QC,xIr),e(xe,$Ir),e(xe,HC),e(HC,B4e),e(B4e,kIr),e(HC,SIr),e(HC,HK),e(HK,RIr),e(HC,PIr),e(xe,BIr),e(xe,UC),e(UC,I4e),e(I4e,IIr),e(UC,NIr),e(UC,UK),e(UK,qIr),e(UC,jIr),e(xe,DIr),e(xe,JC),e(JC,N4e),e(N4e,GIr),e(JC,OIr),e(JC,JK),e(JK,VIr),e(JC,XIr),e(Or,zIr),M(YC,Or,null),b(f,xOe,_),b(f,Qc,_),e(Qc,KC),e(KC,q4e),M($x,q4e,null),e(Qc,WIr),e(Qc,j4e),e(j4e,QIr),b(f,$Oe,_),b(f,pr,_),M(kx,pr,null),e(pr,HIr),e(pr,Hc),e(Hc,UIr),e(Hc,YK),e(YK,JIr),e(Hc,YIr),e(Hc,KK),e(KK,KIr),e(Hc,ZIr),e(pr,eNr),e(pr,Sx),e(Sx,oNr),e(Sx,D4e),e(D4e,rNr),e(Sx,tNr),e(pr,aNr),e(pr,Wt),M(Rx,Wt,null),e(Wt,nNr),e(Wt,G4e),e(G4e,sNr),e(Wt,lNr),e(Wt,Uc),e(Uc,iNr),e(Uc,O4e),e(O4e,dNr),e(Uc,cNr),e(Uc,ZK),e(ZK,fNr),e(Uc,mNr),e(Wt,gNr),M(ZC,Wt,null),e(pr,hNr),e(pr,Vr),M(Px,Vr,null),e(Vr,pNr),e(Vr,V4e),e(V4e,uNr),e(Vr,_Nr),e(Vr,Tn),e(Tn,bNr),e(Tn,X4e),e(X4e,vNr),e(Tn,FNr),e(Tn,z4e),e(z4e,TNr),e(Tn,MNr),e(Tn,W4e),e(W4e,ENr),e(Tn,CNr),e(Vr,wNr),e(Vr,Ee),e(Ee,e5),e(e5,Q4e),e(Q4e,ANr),e(e5,LNr),e(e5,eZ),e(eZ,yNr),e(e5,xNr),e(Ee,$Nr),e(Ee,o5),e(o5,H4e),e(H4e,kNr),e(o5,SNr),e(o5,oZ),e(oZ,RNr),e(o5,PNr),e(Ee,BNr),e(Ee,r5),e(r5,U4e),e(U4e,INr),e(r5,NNr),e(r5,rZ),e(rZ,qNr),e(r5,jNr),e(Ee,DNr),e(Ee,t5),e(t5,J4e),e(J4e,GNr),e(t5,ONr),e(t5,tZ),e(tZ,VNr),e(t5,XNr),e(Ee,zNr),e(Ee,a5),e(a5,Y4e),e(Y4e,WNr),e(a5,QNr),e(a5,aZ),e(aZ,HNr),e(a5,UNr),e(Ee,JNr),e(Ee,n5),e(n5,K4e),e(K4e,YNr),e(n5,KNr),e(n5,nZ),e(nZ,ZNr),e(n5,eqr),e(Ee,oqr),e(Ee,s5),e(s5,Z4e),e(Z4e,rqr),e(s5,tqr),e(s5,sZ),e(sZ,aqr),e(s5,nqr),e(Ee,sqr),e(Ee,l5),e(l5,eEe),e(eEe,lqr),e(l5,iqr),e(l5,lZ),e(lZ,dqr),e(l5,cqr),e(Ee,fqr),e(Ee,i5),e(i5,oEe),e(oEe,mqr),e(i5,gqr),e(i5,iZ),e(iZ,hqr),e(i5,pqr),e(Ee,uqr),e(Ee,d5),e(d5,rEe),e(rEe,_qr),e(d5,bqr),e(d5,dZ),e(dZ,vqr),e(d5,Fqr),e(Ee,Tqr),e(Ee,c5),e(c5,tEe),e(tEe,Mqr),e(c5,Eqr),e(c5,cZ),e(cZ,Cqr),e(c5,wqr),e(Ee,Aqr),e(Ee,f5),e(f5,aEe),e(aEe,Lqr),e(f5,yqr),e(f5,fZ),e(fZ,xqr),e(f5,$qr),e(Ee,kqr),e(Ee,m5),e(m5,nEe),e(nEe,Sqr),e(m5,Rqr),e(m5,mZ),e(mZ,Pqr),e(m5,Bqr),e(Vr,Iqr),M(g5,Vr,null),b(f,kOe,_),b(f,Jc,_),e(Jc,h5),e(h5,sEe),M(Bx,sEe,null),e(Jc,Nqr),e(Jc,lEe),e(lEe,qqr),b(f,SOe,_),b(f,ur,_),M(Ix,ur,null),e(ur,jqr),e(ur,Yc),e(Yc,Dqr),e(Yc,gZ),e(gZ,Gqr),e(Yc,Oqr),e(Yc,hZ),e(hZ,Vqr),e(Yc,Xqr),e(ur,zqr),e(ur,Nx),e(Nx,Wqr),e(Nx,iEe),e(iEe,Qqr),e(Nx,Hqr),e(ur,Uqr),e(ur,Qt),M(qx,Qt,null),e(Qt,Jqr),e(Qt,dEe),e(dEe,Yqr),e(Qt,Kqr),e(Qt,Kc),e(Kc,Zqr),e(Kc,cEe),e(cEe,ejr),e(Kc,ojr),e(Kc,pZ),e(pZ,rjr),e(Kc,tjr),e(Qt,ajr),M(p5,Qt,null),e(ur,njr),e(ur,Xr),M(jx,Xr,null),e(Xr,sjr),e(Xr,fEe),e(fEe,ljr),e(Xr,ijr),e(Xr,Mn),e(Mn,djr),e(Mn,mEe),e(mEe,cjr),e(Mn,fjr),e(Mn,gEe),e(gEe,mjr),e(Mn,gjr),e(Mn,hEe),e(hEe,hjr),e(Mn,pjr),e(Xr,ujr),e(Xr,$e),e($e,u5),e(u5,pEe),e(pEe,_jr),e(u5,bjr),e(u5,uZ),e(uZ,vjr),e(u5,Fjr),e($e,Tjr),e($e,_5),e(_5,uEe),e(uEe,Mjr),e(_5,Ejr),e(_5,_Z),e(_Z,Cjr),e(_5,wjr),e($e,Ajr),e($e,b5),e(b5,_Ee),e(_Ee,Ljr),e(b5,yjr),e(b5,bZ),e(bZ,xjr),e(b5,$jr),e($e,kjr),e($e,v5),e(v5,bEe),e(bEe,Sjr),e(v5,Rjr),e(v5,vZ),e(vZ,Pjr),e(v5,Bjr),e($e,Ijr),e($e,F5),e(F5,vEe),e(vEe,Njr),e(F5,qjr),e(F5,FZ),e(FZ,jjr),e(F5,Djr),e($e,Gjr),e($e,T5),e(T5,FEe),e(FEe,Ojr),e(T5,Vjr),e(T5,TZ),e(TZ,Xjr),e(T5,zjr),e($e,Wjr),e($e,M5),e(M5,TEe),e(TEe,Qjr),e(M5,Hjr),e(M5,MZ),e(MZ,Ujr),e(M5,Jjr),e($e,Yjr),e($e,E5),e(E5,MEe),e(MEe,Kjr),e(E5,Zjr),e(E5,EZ),e(EZ,eDr),e(E5,oDr),e($e,rDr),e($e,C5),e(C5,EEe),e(EEe,tDr),e(C5,aDr),e(C5,CZ),e(CZ,nDr),e(C5,sDr),e($e,lDr),e($e,w5),e(w5,CEe),e(CEe,iDr),e(w5,dDr),e(w5,wZ),e(wZ,cDr),e(w5,fDr),e(Xr,mDr),M(A5,Xr,null),b(f,ROe,_),b(f,Zc,_),e(Zc,L5),e(L5,wEe),M(Dx,wEe,null),e(Zc,gDr),e(Zc,AEe),e(AEe,hDr),b(f,POe,_),b(f,_r,_),M(Gx,_r,null),e(_r,pDr),e(_r,ef),e(ef,uDr),e(ef,AZ),e(AZ,_Dr),e(ef,bDr),e(ef,LZ),e(LZ,vDr),e(ef,FDr),e(_r,TDr),e(_r,Ox),e(Ox,MDr),e(Ox,LEe),e(LEe,EDr),e(Ox,CDr),e(_r,wDr),e(_r,Ht),M(Vx,Ht,null),e(Ht,ADr),e(Ht,yEe),e(yEe,LDr),e(Ht,yDr),e(Ht,of),e(of,xDr),e(of,xEe),e(xEe,$Dr),e(of,kDr),e(of,yZ),e(yZ,SDr),e(of,RDr),e(Ht,PDr),M(y5,Ht,null),e(_r,BDr),e(_r,zr),M(Xx,zr,null),e(zr,IDr),e(zr,$Ee),e($Ee,NDr),e(zr,qDr),e(zr,En),e(En,jDr),e(En,kEe),e(kEe,DDr),e(En,GDr),e(En,SEe),e(SEe,ODr),e(En,VDr),e(En,REe),e(REe,XDr),e(En,zDr),e(zr,WDr),e(zr,ke),e(ke,x5),e(x5,PEe),e(PEe,QDr),e(x5,HDr),e(x5,xZ),e(xZ,UDr),e(x5,JDr),e(ke,YDr),e(ke,$5),e($5,BEe),e(BEe,KDr),e($5,ZDr),e($5,$Z),e($Z,eGr),e($5,oGr),e(ke,rGr),e(ke,k5),e(k5,IEe),e(IEe,tGr),e(k5,aGr),e(k5,kZ),e(kZ,nGr),e(k5,sGr),e(ke,lGr),e(ke,S5),e(S5,NEe),e(NEe,iGr),e(S5,dGr),e(S5,SZ),e(SZ,cGr),e(S5,fGr),e(ke,mGr),e(ke,R5),e(R5,qEe),e(qEe,gGr),e(R5,hGr),e(R5,RZ),e(RZ,pGr),e(R5,uGr),e(ke,_Gr),e(ke,P5),e(P5,jEe),e(jEe,bGr),e(P5,vGr),e(P5,PZ),e(PZ,FGr),e(P5,TGr),e(ke,MGr),e(ke,B5),e(B5,DEe),e(DEe,EGr),e(B5,CGr),e(B5,BZ),e(BZ,wGr),e(B5,AGr),e(ke,LGr),e(ke,I5),e(I5,GEe),e(GEe,yGr),e(I5,xGr),e(I5,IZ),e(IZ,$Gr),e(I5,kGr),e(ke,SGr),e(ke,N5),e(N5,OEe),e(OEe,RGr),e(N5,PGr),e(N5,NZ),e(NZ,BGr),e(N5,IGr),e(ke,NGr),e(ke,q5),e(q5,VEe),e(VEe,qGr),e(q5,jGr),e(q5,qZ),e(qZ,DGr),e(q5,GGr),e(zr,OGr),M(j5,zr,null),b(f,BOe,_),b(f,rf,_),e(rf,D5),e(D5,XEe),M(zx,XEe,null),e(rf,VGr),e(rf,zEe),e(zEe,XGr),b(f,IOe,_),b(f,br,_),M(Wx,br,null),e(br,zGr),e(br,tf),e(tf,WGr),e(tf,jZ),e(jZ,QGr),e(tf,HGr),e(tf,DZ),e(DZ,UGr),e(tf,JGr),e(br,YGr),e(br,Qx),e(Qx,KGr),e(Qx,WEe),e(WEe,ZGr),e(Qx,eOr),e(br,oOr),e(br,Ut),M(Hx,Ut,null),e(Ut,rOr),e(Ut,QEe),e(QEe,tOr),e(Ut,aOr),e(Ut,af),e(af,nOr),e(af,HEe),e(HEe,sOr),e(af,lOr),e(af,GZ),e(GZ,iOr),e(af,dOr),e(Ut,cOr),M(G5,Ut,null),e(br,fOr),e(br,Wr),M(Ux,Wr,null),e(Wr,mOr),e(Wr,UEe),e(UEe,gOr),e(Wr,hOr),e(Wr,Cn),e(Cn,pOr),e(Cn,JEe),e(JEe,uOr),e(Cn,_Or),e(Cn,YEe),e(YEe,bOr),e(Cn,vOr),e(Cn,KEe),e(KEe,FOr),e(Cn,TOr),e(Wr,MOr),e(Wr,Se),e(Se,O5),e(O5,ZEe),e(ZEe,EOr),e(O5,COr),e(O5,OZ),e(OZ,wOr),e(O5,AOr),e(Se,LOr),e(Se,V5),e(V5,eCe),e(eCe,yOr),e(V5,xOr),e(V5,VZ),e(VZ,$Or),e(V5,kOr),e(Se,SOr),e(Se,X5),e(X5,oCe),e(oCe,ROr),e(X5,POr),e(X5,XZ),e(XZ,BOr),e(X5,IOr),e(Se,NOr),e(Se,z5),e(z5,rCe),e(rCe,qOr),e(z5,jOr),e(z5,zZ),e(zZ,DOr),e(z5,GOr),e(Se,OOr),e(Se,W5),e(W5,tCe),e(tCe,VOr),e(W5,XOr),e(W5,WZ),e(WZ,zOr),e(W5,WOr),e(Se,QOr),e(Se,Q5),e(Q5,aCe),e(aCe,HOr),e(Q5,UOr),e(Q5,QZ),e(QZ,JOr),e(Q5,YOr),e(Se,KOr),e(Se,H5),e(H5,nCe),e(nCe,ZOr),e(H5,eVr),e(H5,HZ),e(HZ,oVr),e(H5,rVr),e(Se,tVr),e(Se,U5),e(U5,sCe),e(sCe,aVr),e(U5,nVr),e(U5,UZ),e(UZ,sVr),e(U5,lVr),e(Se,iVr),e(Se,J5),e(J5,lCe),e(lCe,dVr),e(J5,cVr),e(J5,JZ),e(JZ,fVr),e(J5,mVr),e(Se,gVr),e(Se,Y5),e(Y5,iCe),e(iCe,hVr),e(Y5,pVr),e(Y5,YZ),e(YZ,uVr),e(Y5,_Vr),e(Wr,bVr),M(K5,Wr,null),b(f,NOe,_),b(f,nf,_),e(nf,Z5),e(Z5,dCe),M(Jx,dCe,null),e(nf,vVr),e(nf,cCe),e(cCe,FVr),b(f,qOe,_),b(f,vr,_),M(Yx,vr,null),e(vr,TVr),e(vr,sf),e(sf,MVr),e(sf,KZ),e(KZ,EVr),e(sf,CVr),e(sf,ZZ),e(ZZ,wVr),e(sf,AVr),e(vr,LVr),e(vr,Kx),e(Kx,yVr),e(Kx,fCe),e(fCe,xVr),e(Kx,$Vr),e(vr,kVr),e(vr,Jt),M(Zx,Jt,null),e(Jt,SVr),e(Jt,mCe),e(mCe,RVr),e(Jt,PVr),e(Jt,lf),e(lf,BVr),e(lf,gCe),e(gCe,IVr),e(lf,NVr),e(lf,eee),e(eee,qVr),e(lf,jVr),e(Jt,DVr),M(e3,Jt,null),e(vr,GVr),e(vr,Qr),M(e$,Qr,null),e(Qr,OVr),e(Qr,hCe),e(hCe,VVr),e(Qr,XVr),e(Qr,wn),e(wn,zVr),e(wn,pCe),e(pCe,WVr),e(wn,QVr),e(wn,uCe),e(uCe,HVr),e(wn,UVr),e(wn,_Ce),e(_Ce,JVr),e(wn,YVr),e(Qr,KVr),e(Qr,Re),e(Re,o3),e(o3,bCe),e(bCe,ZVr),e(o3,eXr),e(o3,oee),e(oee,oXr),e(o3,rXr),e(Re,tXr),e(Re,r3),e(r3,vCe),e(vCe,aXr),e(r3,nXr),e(r3,ree),e(ree,sXr),e(r3,lXr),e(Re,iXr),e(Re,t3),e(t3,FCe),e(FCe,dXr),e(t3,cXr),e(t3,tee),e(tee,fXr),e(t3,mXr),e(Re,gXr),e(Re,a3),e(a3,TCe),e(TCe,hXr),e(a3,pXr),e(a3,aee),e(aee,uXr),e(a3,_Xr),e(Re,bXr),e(Re,n3),e(n3,MCe),e(MCe,vXr),e(n3,FXr),e(n3,nee),e(nee,TXr),e(n3,MXr),e(Re,EXr),e(Re,s3),e(s3,ECe),e(ECe,CXr),e(s3,wXr),e(s3,see),e(see,AXr),e(s3,LXr),e(Re,yXr),e(Re,l3),e(l3,CCe),e(CCe,xXr),e(l3,$Xr),e(l3,lee),e(lee,kXr),e(l3,SXr),e(Re,RXr),e(Re,i3),e(i3,wCe),e(wCe,PXr),e(i3,BXr),e(i3,iee),e(iee,IXr),e(i3,NXr),e(Re,qXr),e(Re,d3),e(d3,ACe),e(ACe,jXr),e(d3,DXr),e(d3,dee),e(dee,GXr),e(d3,OXr),e(Re,VXr),e(Re,c3),e(c3,LCe),e(LCe,XXr),e(c3,zXr),e(c3,cee),e(cee,WXr),e(c3,QXr),e(Qr,HXr),M(f3,Qr,null),b(f,jOe,_),b(f,df,_),e(df,m3),e(m3,yCe),M(o$,yCe,null),e(df,UXr),e(df,xCe),e(xCe,JXr),b(f,DOe,_),b(f,Fr,_),M(r$,Fr,null),e(Fr,YXr),e(Fr,cf),e(cf,KXr),e(cf,fee),e(fee,ZXr),e(cf,ezr),e(cf,mee),e(mee,ozr),e(cf,rzr),e(Fr,tzr),e(Fr,t$),e(t$,azr),e(t$,$Ce),e($Ce,nzr),e(t$,szr),e(Fr,lzr),e(Fr,Yt),M(a$,Yt,null),e(Yt,izr),e(Yt,kCe),e(kCe,dzr),e(Yt,czr),e(Yt,ff),e(ff,fzr),e(ff,SCe),e(SCe,mzr),e(ff,gzr),e(ff,gee),e(gee,hzr),e(ff,pzr),e(Yt,uzr),M(g3,Yt,null),e(Fr,_zr),e(Fr,Hr),M(n$,Hr,null),e(Hr,bzr),e(Hr,RCe),e(RCe,vzr),e(Hr,Fzr),e(Hr,An),e(An,Tzr),e(An,PCe),e(PCe,Mzr),e(An,Ezr),e(An,BCe),e(BCe,Czr),e(An,wzr),e(An,ICe),e(ICe,Azr),e(An,Lzr),e(Hr,yzr),e(Hr,Ve),e(Ve,h3),e(h3,NCe),e(NCe,xzr),e(h3,$zr),e(h3,hee),e(hee,kzr),e(h3,Szr),e(Ve,Rzr),e(Ve,p3),e(p3,qCe),e(qCe,Pzr),e(p3,Bzr),e(p3,pee),e(pee,Izr),e(p3,Nzr),e(Ve,qzr),e(Ve,u3),e(u3,jCe),e(jCe,jzr),e(u3,Dzr),e(u3,uee),e(uee,Gzr),e(u3,Ozr),e(Ve,Vzr),e(Ve,_3),e(_3,DCe),e(DCe,Xzr),e(_3,zzr),e(_3,_ee),e(_ee,Wzr),e(_3,Qzr),e(Ve,Hzr),e(Ve,b3),e(b3,GCe),e(GCe,Uzr),e(b3,Jzr),e(b3,bee),e(bee,Yzr),e(b3,Kzr),e(Ve,Zzr),e(Ve,v3),e(v3,OCe),e(OCe,eWr),e(v3,oWr),e(v3,vee),e(vee,rWr),e(v3,tWr),e(Ve,aWr),e(Ve,F3),e(F3,VCe),e(VCe,nWr),e(F3,sWr),e(F3,Fee),e(Fee,lWr),e(F3,iWr),e(Ve,dWr),e(Ve,T3),e(T3,XCe),e(XCe,cWr),e(T3,fWr),e(T3,Tee),e(Tee,mWr),e(T3,gWr),e(Hr,hWr),M(M3,Hr,null),b(f,GOe,_),b(f,mf,_),e(mf,E3),e(E3,zCe),M(s$,zCe,null),e(mf,pWr),e(mf,WCe),e(WCe,uWr),b(f,OOe,_),b(f,Tr,_),M(l$,Tr,null),e(Tr,_Wr),e(Tr,gf),e(gf,bWr),e(gf,Mee),e(Mee,vWr),e(gf,FWr),e(gf,Eee),e(Eee,TWr),e(gf,MWr),e(Tr,EWr),e(Tr,i$),e(i$,CWr),e(i$,QCe),e(QCe,wWr),e(i$,AWr),e(Tr,LWr),e(Tr,Kt),M(d$,Kt,null),e(Kt,yWr),e(Kt,HCe),e(HCe,xWr),e(Kt,$Wr),e(Kt,hf),e(hf,kWr),e(hf,UCe),e(UCe,SWr),e(hf,RWr),e(hf,Cee),e(Cee,PWr),e(hf,BWr),e(Kt,IWr),M(C3,Kt,null),e(Tr,NWr),e(Tr,Ur),M(c$,Ur,null),e(Ur,qWr),e(Ur,JCe),e(JCe,jWr),e(Ur,DWr),e(Ur,Ln),e(Ln,GWr),e(Ln,YCe),e(YCe,OWr),e(Ln,VWr),e(Ln,KCe),e(KCe,XWr),e(Ln,zWr),e(Ln,ZCe),e(ZCe,WWr),e(Ln,QWr),e(Ur,HWr),e(Ur,Xe),e(Xe,w3),e(w3,e5e),e(e5e,UWr),e(w3,JWr),e(w3,wee),e(wee,YWr),e(w3,KWr),e(Xe,ZWr),e(Xe,A3),e(A3,o5e),e(o5e,eQr),e(A3,oQr),e(A3,Aee),e(Aee,rQr),e(A3,tQr),e(Xe,aQr),e(Xe,L3),e(L3,r5e),e(r5e,nQr),e(L3,sQr),e(L3,Lee),e(Lee,lQr),e(L3,iQr),e(Xe,dQr),e(Xe,y3),e(y3,t5e),e(t5e,cQr),e(y3,fQr),e(y3,yee),e(yee,mQr),e(y3,gQr),e(Xe,hQr),e(Xe,x3),e(x3,a5e),e(a5e,pQr),e(x3,uQr),e(x3,xee),e(xee,_Qr),e(x3,bQr),e(Xe,vQr),e(Xe,$3),e($3,n5e),e(n5e,FQr),e($3,TQr),e($3,$ee),e($ee,MQr),e($3,EQr),e(Xe,CQr),e(Xe,k3),e(k3,s5e),e(s5e,wQr),e(k3,AQr),e(k3,kee),e(kee,LQr),e(k3,yQr),e(Xe,xQr),e(Xe,S3),e(S3,l5e),e(l5e,$Qr),e(S3,kQr),e(S3,See),e(See,SQr),e(S3,RQr),e(Ur,PQr),M(R3,Ur,null),b(f,VOe,_),b(f,pf,_),e(pf,P3),e(P3,i5e),M(f$,i5e,null),e(pf,BQr),e(pf,d5e),e(d5e,IQr),b(f,XOe,_),b(f,Mr,_),M(m$,Mr,null),e(Mr,NQr),e(Mr,uf),e(uf,qQr),e(uf,Ree),e(Ree,jQr),e(uf,DQr),e(uf,Pee),e(Pee,GQr),e(uf,OQr),e(Mr,VQr),e(Mr,g$),e(g$,XQr),e(g$,c5e),e(c5e,zQr),e(g$,WQr),e(Mr,QQr),e(Mr,Zt),M(h$,Zt,null),e(Zt,HQr),e(Zt,f5e),e(f5e,UQr),e(Zt,JQr),e(Zt,_f),e(_f,YQr),e(_f,m5e),e(m5e,KQr),e(_f,ZQr),e(_f,Bee),e(Bee,eHr),e(_f,oHr),e(Zt,rHr),M(B3,Zt,null),e(Mr,tHr),e(Mr,Jr),M(p$,Jr,null),e(Jr,aHr),e(Jr,g5e),e(g5e,nHr),e(Jr,sHr),e(Jr,yn),e(yn,lHr),e(yn,h5e),e(h5e,iHr),e(yn,dHr),e(yn,p5e),e(p5e,cHr),e(yn,fHr),e(yn,u5e),e(u5e,mHr),e(yn,gHr),e(Jr,hHr),e(Jr,_5e),e(_5e,I3),e(I3,b5e),e(b5e,pHr),e(I3,uHr),e(I3,Iee),e(Iee,_Hr),e(I3,bHr),e(Jr,vHr),M(N3,Jr,null),b(f,zOe,_),b(f,bf,_),e(bf,q3),e(q3,v5e),M(u$,v5e,null),e(bf,FHr),e(bf,F5e),e(F5e,THr),b(f,WOe,_),b(f,Er,_),M(_$,Er,null),e(Er,MHr),e(Er,vf),e(vf,EHr),e(vf,Nee),e(Nee,CHr),e(vf,wHr),e(vf,qee),e(qee,AHr),e(vf,LHr),e(Er,yHr),e(Er,b$),e(b$,xHr),e(b$,T5e),e(T5e,$Hr),e(b$,kHr),e(Er,SHr),e(Er,ea),M(v$,ea,null),e(ea,RHr),e(ea,M5e),e(M5e,PHr),e(ea,BHr),e(ea,Ff),e(Ff,IHr),e(Ff,E5e),e(E5e,NHr),e(Ff,qHr),e(Ff,jee),e(jee,jHr),e(Ff,DHr),e(ea,GHr),M(j3,ea,null),e(Er,OHr),e(Er,Yr),M(F$,Yr,null),e(Yr,VHr),e(Yr,C5e),e(C5e,XHr),e(Yr,zHr),e(Yr,xn),e(xn,WHr),e(xn,w5e),e(w5e,QHr),e(xn,HHr),e(xn,A5e),e(A5e,UHr),e(xn,JHr),e(xn,L5e),e(L5e,YHr),e(xn,KHr),e(Yr,ZHr),e(Yr,T$),e(T$,D3),e(D3,y5e),e(y5e,eUr),e(D3,oUr),e(D3,Dee),e(Dee,rUr),e(D3,tUr),e(T$,aUr),e(T$,G3),e(G3,x5e),e(x5e,nUr),e(G3,sUr),e(G3,Gee),e(Gee,lUr),e(G3,iUr),e(Yr,dUr),M(O3,Yr,null),b(f,QOe,_),b(f,Tf,_),e(Tf,V3),e(V3,$5e),M(M$,$5e,null),e(Tf,cUr),e(Tf,k5e),e(k5e,fUr),b(f,HOe,_),b(f,Cr,_),M(E$,Cr,null),e(Cr,mUr),e(Cr,Mf),e(Mf,gUr),e(Mf,Oee),e(Oee,hUr),e(Mf,pUr),e(Mf,Vee),e(Vee,uUr),e(Mf,_Ur),e(Cr,bUr),e(Cr,C$),e(C$,vUr),e(C$,S5e),e(S5e,FUr),e(C$,TUr),e(Cr,MUr),e(Cr,oa),M(w$,oa,null),e(oa,EUr),e(oa,R5e),e(R5e,CUr),e(oa,wUr),e(oa,Ef),e(Ef,AUr),e(Ef,P5e),e(P5e,LUr),e(Ef,yUr),e(Ef,Xee),e(Xee,xUr),e(Ef,$Ur),e(oa,kUr),M(X3,oa,null),e(Cr,SUr),e(Cr,Kr),M(A$,Kr,null),e(Kr,RUr),e(Kr,B5e),e(B5e,PUr),e(Kr,BUr),e(Kr,$n),e($n,IUr),e($n,I5e),e(I5e,NUr),e($n,qUr),e($n,N5e),e(N5e,jUr),e($n,DUr),e($n,q5e),e(q5e,GUr),e($n,OUr),e(Kr,VUr),e(Kr,j5e),e(j5e,z3),e(z3,D5e),e(D5e,XUr),e(z3,zUr),e(z3,zee),e(zee,WUr),e(z3,QUr),e(Kr,HUr),M(W3,Kr,null),UOe=!0},p(f,[_]){const L$={};_&2&&(L$.$$scope={dirty:_,ctx:f}),Sf.$set(L$);const G5e={};_&2&&(G5e.$$scope={dirty:_,ctx:f}),jg.$set(G5e);const O5e={};_&2&&(O5e.$$scope={dirty:_,ctx:f}),Th.$set(O5e);const V5e={};_&2&&(V5e.$$scope={dirty:_,ctx:f}),rp.$set(V5e);const y$={};_&2&&(y$.$$scope={dirty:_,ctx:f}),tp.$set(y$);const X5e={};_&2&&(X5e.$$scope={dirty:_,ctx:f}),Ep.$set(X5e);const kn={};_&2&&(kn.$$scope={dirty:_,ctx:f}),Cp.$set(kn);const z5e={};_&2&&(z5e.$$scope={dirty:_,ctx:f}),Lp.$set(z5e);const W5e={};_&2&&(W5e.$$scope={dirty:_,ctx:f}),A_.$set(W5e);const Q5e={};_&2&&(Q5e.$$scope={dirty:_,ctx:f}),y_.$set(Q5e);const x$={};_&2&&(x$.$$scope={dirty:_,ctx:f}),v2.$set(x$);const H5e={};_&2&&(H5e.$$scope={dirty:_,ctx:f}),T2.$set(H5e);const $$={};_&2&&($$.$$scope={dirty:_,ctx:f}),l1.$set($$);const U5e={};_&2&&(U5e.$$scope={dirty:_,ctx:f}),d1.$set(U5e);const k$={};_&2&&(k$.$$scope={dirty:_,ctx:f}),Q1.$set(k$);const J5e={};_&2&&(J5e.$$scope={dirty:_,ctx:f}),U1.$set(J5e);const Y5e={};_&2&&(Y5e.$$scope={dirty:_,ctx:f}),hb.$set(Y5e);const K5e={};_&2&&(K5e.$$scope={dirty:_,ctx:f}),ub.$set(K5e);const Cf={};_&2&&(Cf.$$scope={dirty:_,ctx:f}),fv.$set(Cf);const Z5e={};_&2&&(Z5e.$$scope={dirty:_,ctx:f}),gv.$set(Z5e);const e3e={};_&2&&(e3e.$$scope={dirty:_,ctx:f}),Xv.$set(e3e);const o3e={};_&2&&(o3e.$$scope={dirty:_,ctx:f}),Wv.$set(o3e);const S$={};_&2&&(S$.$$scope={dirty:_,ctx:f}),Zv.$set(S$);const r3e={};_&2&&(r3e.$$scope={dirty:_,ctx:f}),oF.$set(r3e);const t3e={};_&2&&(t3e.$$scope={dirty:_,ctx:f}),NF.$set(t3e);const a3e={};_&2&&(a3e.$$scope={dirty:_,ctx:f}),jF.$set(a3e);const rt={};_&2&&(rt.$$scope={dirty:_,ctx:f}),L6.$set(rt);const R$={};_&2&&(R$.$$scope={dirty:_,ctx:f}),x6.$set(R$);const n3e={};_&2&&(n3e.$$scope={dirty:_,ctx:f}),S6.$set(n3e);const P$={};_&2&&(P$.$$scope={dirty:_,ctx:f}),P6.$set(P$);const s3e={};_&2&&(s3e.$$scope={dirty:_,ctx:f}),H6.$set(s3e);const tt={};_&2&&(tt.$$scope={dirty:_,ctx:f}),J6.$set(tt);const l3e={};_&2&&(l3e.$$scope={dirty:_,ctx:f}),Z6.$set(l3e);const wf={};_&2&&(wf.$$scope={dirty:_,ctx:f}),oT.$set(wf);const i3e={};_&2&&(i3e.$$scope={dirty:_,ctx:f}),aT.$set(i3e);const d3e={};_&2&&(d3e.$$scope={dirty:_,ctx:f}),sT.$set(d3e);const L={};_&2&&(L.$$scope={dirty:_,ctx:f}),_T.$set(L);const Q3={};_&2&&(Q3.$$scope={dirty:_,ctx:f}),vT.$set(Q3);const c3e={};_&2&&(c3e.$$scope={dirty:_,ctx:f}),AT.$set(c3e);const f3e={};_&2&&(f3e.$$scope={dirty:_,ctx:f}),yT.$set(f3e);const H3={};_&2&&(H3.$$scope={dirty:_,ctx:f}),DT.$set(H3);const m3e={};_&2&&(m3e.$$scope={dirty:_,ctx:f}),OT.$set(m3e);const g3e={};_&2&&(g3e.$$scope={dirty:_,ctx:f}),WT.$set(g3e);const U3={};_&2&&(U3.$$scope={dirty:_,ctx:f}),HT.$set(U3);const h3e={};_&2&&(h3e.$$scope={dirty:_,ctx:f}),o7.$set(h3e);const p3e={};_&2&&(p3e.$$scope={dirty:_,ctx:f}),t7.$set(p3e);const J3={};_&2&&(J3.$$scope={dirty:_,ctx:f}),i7.$set(J3);const u3e={};_&2&&(u3e.$$scope={dirty:_,ctx:f}),c7.$set(u3e);const _3e={};_&2&&(_3e.$$scope={dirty:_,ctx:f}),h7.$set(_3e);const Y3={};_&2&&(Y3.$$scope={dirty:_,ctx:f}),u7.$set(Y3);const b3e={};_&2&&(b3e.$$scope={dirty:_,ctx:f}),v7.$set(b3e);const v3e={};_&2&&(v3e.$$scope={dirty:_,ctx:f}),T7.$set(v3e);const K3={};_&2&&(K3.$$scope={dirty:_,ctx:f}),L7.$set(K3);const F3e={};_&2&&(F3e.$$scope={dirty:_,ctx:f}),x7.$set(F3e);const T3e={};_&2&&(T3e.$$scope={dirty:_,ctx:f}),S7.$set(T3e);const Z3={};_&2&&(Z3.$$scope={dirty:_,ctx:f}),P7.$set(Z3);const M3e={};_&2&&(M3e.$$scope={dirty:_,ctx:f}),L9.$set(M3e);const E3e={};_&2&&(E3e.$$scope={dirty:_,ctx:f}),x9.$set(E3e);const e0={};_&2&&(e0.$$scope={dirty:_,ctx:f}),Z9.$set(e0);const C3e={};_&2&&(C3e.$$scope={dirty:_,ctx:f}),oM.$set(C3e);const w3e={};_&2&&(w3e.$$scope={dirty:_,ctx:f}),pM.$set(w3e);const o0={};_&2&&(o0.$$scope={dirty:_,ctx:f}),_M.$set(o0);const A3e={};_&2&&(A3e.$$scope={dirty:_,ctx:f}),MM.$set(A3e);const L3e={};_&2&&(L3e.$$scope={dirty:_,ctx:f}),CM.$set(L3e);const r0={};_&2&&(r0.$$scope={dirty:_,ctx:f}),zM.$set(r0);const y3e={};_&2&&(y3e.$$scope={dirty:_,ctx:f}),QM.$set(y3e);const x3e={};_&2&&(x3e.$$scope={dirty:_,ctx:f}),a4.$set(x3e);const t0={};_&2&&(t0.$$scope={dirty:_,ctx:f}),s4.$set(t0);const $3e={};_&2&&($3e.$$scope={dirty:_,ctx:f}),R4.$set($3e);const k3e={};_&2&&(k3e.$$scope={dirty:_,ctx:f}),B4.$set(k3e);const a0={};_&2&&(a0.$$scope={dirty:_,ctx:f}),Z4.$set(a0);const S3e={};_&2&&(S3e.$$scope={dirty:_,ctx:f}),oE.$set(S3e);const R3e={};_&2&&(R3e.$$scope={dirty:_,ctx:f}),aE.$set(R3e);const n0={};_&2&&(n0.$$scope={dirty:_,ctx:f}),sE.$set(n0);const P3e={};_&2&&(P3e.$$scope={dirty:_,ctx:f}),iE.$set(P3e);const B3e={};_&2&&(B3e.$$scope={dirty:_,ctx:f}),cE.$set(B3e);const s0={};_&2&&(s0.$$scope={dirty:_,ctx:f}),kE.$set(s0);const I3e={};_&2&&(I3e.$$scope={dirty:_,ctx:f}),RE.$set(I3e);const N3e={};_&2&&(N3e.$$scope={dirty:_,ctx:f}),eC.$set(N3e);const l0={};_&2&&(l0.$$scope={dirty:_,ctx:f}),rC.$set(l0);const q3e={};_&2&&(q3e.$$scope={dirty:_,ctx:f}),aC.$set(q3e);const j3e={};_&2&&(j3e.$$scope={dirty:_,ctx:f}),sC.$set(j3e);const i0={};_&2&&(i0.$$scope={dirty:_,ctx:f}),iC.$set(i0);const D3e={};_&2&&(D3e.$$scope={dirty:_,ctx:f}),cC.$set(D3e);const G3e={};_&2&&(G3e.$$scope={dirty:_,ctx:f}),qC.$set(G3e);const d0={};_&2&&(d0.$$scope={dirty:_,ctx:f}),DC.$set(d0);const O3e={};_&2&&(O3e.$$scope={dirty:_,ctx:f}),YC.$set(O3e);const V3e={};_&2&&(V3e.$$scope={dirty:_,ctx:f}),ZC.$set(V3e);const c0={};_&2&&(c0.$$scope={dirty:_,ctx:f}),g5.$set(c0);const X3e={};_&2&&(X3e.$$scope={dirty:_,ctx:f}),p5.$set(X3e);const z3e={};_&2&&(z3e.$$scope={dirty:_,ctx:f}),A5.$set(z3e);const f0={};_&2&&(f0.$$scope={dirty:_,ctx:f}),y5.$set(f0);const W3e={};_&2&&(W3e.$$scope={dirty:_,ctx:f}),j5.$set(W3e);const Q3e={};_&2&&(Q3e.$$scope={dirty:_,ctx:f}),G5.$set(Q3e);const m0={};_&2&&(m0.$$scope={dirty:_,ctx:f}),K5.$set(m0);const H3e={};_&2&&(H3e.$$scope={dirty:_,ctx:f}),e3.$set(H3e);const U3e={};_&2&&(U3e.$$scope={dirty:_,ctx:f}),f3.$set(U3e);const g0={};_&2&&(g0.$$scope={dirty:_,ctx:f}),g3.$set(g0);const J3e={};_&2&&(J3e.$$scope={dirty:_,ctx:f}),M3.$set(J3e);const Y3e={};_&2&&(Y3e.$$scope={dirty:_,ctx:f}),C3.$set(Y3e);const h0={};_&2&&(h0.$$scope={dirty:_,ctx:f}),R3.$set(h0);const K3e={};_&2&&(K3e.$$scope={dirty:_,ctx:f}),B3.$set(K3e);const Z3e={};_&2&&(Z3e.$$scope={dirty:_,ctx:f}),N3.$set(Z3e);const p0={};_&2&&(p0.$$scope={dirty:_,ctx:f}),j3.$set(p0);const e0e={};_&2&&(e0e.$$scope={dirty:_,ctx:f}),O3.$set(e0e);const o0e={};_&2&&(o0e.$$scope={dirty:_,ctx:f}),X3.$set(o0e);const u0={};_&2&&(u0.$$scope={dirty:_,ctx:f}),W3.$set(u0)},i(f){UOe||(E(d.$$.fragment,f),E(ya.$$.fragment,f),E(_A.$$.fragment,f),E(bA.$$.fragment,f),E(Sf.$$.fragment,f),E(vA.$$.fragment,f),E(FA.$$.fragment,f),E(EA.$$.fragment,f),E(jg.$$.fragment,f),E(CA.$$.fragment,f),E(wA.$$.fragment,f),E(AA.$$.fragment,f),E(xA.$$.fragment,f),E(Th.$$.fragment,f),E($A.$$.fragment,f),E(kA.$$.fragment,f),E(SA.$$.fragment,f),E(BA.$$.fragment,f),E(rp.$$.fragment,f),E(tp.$$.fragment,f),E(IA.$$.fragment,f),E(NA.$$.fragment,f),E(qA.$$.fragment,f),E(GA.$$.fragment,f),E(Ep.$$.fragment,f),E(Cp.$$.fragment,f),E(OA.$$.fragment,f),E(VA.$$.fragment,f),E(XA.$$.fragment,f),E(WA.$$.fragment,f),E(Lp.$$.fragment,f),E(QA.$$.fragment,f),E(A_.$$.fragment,f),E(HA.$$.fragment,f),E(UA.$$.fragment,f),E(YA.$$.fragment,f),E(y_.$$.fragment,f),E(KA.$$.fragment,f),E(v2.$$.fragment,f),E(ZA.$$.fragment,f),E(eL.$$.fragment,f),E(rL.$$.fragment,f),E(T2.$$.fragment,f),E(tL.$$.fragment,f),E(l1.$$.fragment,f),E(aL.$$.fragment,f),E(nL.$$.fragment,f),E(lL.$$.fragment,f),E(d1.$$.fragment,f),E(iL.$$.fragment,f),E(Q1.$$.fragment,f),E(dL.$$.fragment,f),E(cL.$$.fragment,f),E(mL.$$.fragment,f),E(U1.$$.fragment,f),E(gL.$$.fragment,f),E(hb.$$.fragment,f),E(hL.$$.fragment,f),E(pL.$$.fragment,f),E(_L.$$.fragment,f),E(ub.$$.fragment,f),E(bL.$$.fragment,f),E(fv.$$.fragment,f),E(vL.$$.fragment,f),E(FL.$$.fragment,f),E(ML.$$.fragment,f),E(gv.$$.fragment,f),E(EL.$$.fragment,f),E(Xv.$$.fragment,f),E(CL.$$.fragment,f),E(wL.$$.fragment,f),E(LL.$$.fragment,f),E(Wv.$$.fragment,f),E(yL.$$.fragment,f),E(Zv.$$.fragment,f),E(xL.$$.fragment,f),E($L.$$.fragment,f),E(SL.$$.fragment,f),E(oF.$$.fragment,f),E(RL.$$.fragment,f),E(NF.$$.fragment,f),E(PL.$$.fragment,f),E(BL.$$.fragment,f),E(NL.$$.fragment,f),E(jF.$$.fragment,f),E(qL.$$.fragment,f),E(L6.$$.fragment,f),E(jL.$$.fragment,f),E(DL.$$.fragment,f),E(OL.$$.fragment,f),E(x6.$$.fragment,f),E(VL.$$.fragment,f),E(S6.$$.fragment,f),E(XL.$$.fragment,f),E(zL.$$.fragment,f),E(QL.$$.fragment,f),E(P6.$$.fragment,f),E(HL.$$.fragment,f),E(H6.$$.fragment,f),E(UL.$$.fragment,f),E(JL.$$.fragment,f),E(KL.$$.fragment,f),E(J6.$$.fragment,f),E(ZL.$$.fragment,f),E(Z6.$$.fragment,f),E(ey.$$.fragment,f),E(oy.$$.fragment,f),E(ty.$$.fragment,f),E(oT.$$.fragment,f),E(ay.$$.fragment,f),E(aT.$$.fragment,f),E(ny.$$.fragment,f),E(sy.$$.fragment,f),E(iy.$$.fragment,f),E(sT.$$.fragment,f),E(dy.$$.fragment,f),E(_T.$$.fragment,f),E(cy.$$.fragment,f),E(fy.$$.fragment,f),E(gy.$$.fragment,f),E(vT.$$.fragment,f),E(hy.$$.fragment,f),E(AT.$$.fragment,f),E(py.$$.fragment,f),E(uy.$$.fragment,f),E(by.$$.fragment,f),E(yT.$$.fragment,f),E(vy.$$.fragment,f),E(DT.$$.fragment,f),E(Fy.$$.fragment,f),E(Ty.$$.fragment,f),E(Ey.$$.fragment,f),E(OT.$$.fragment,f),E(Cy.$$.fragment,f),E(WT.$$.fragment,f),E(Ay.$$.fragment,f),E(Ly.$$.fragment,f),E(xy.$$.fragment,f),E(HT.$$.fragment,f),E($y.$$.fragment,f),E(o7.$$.fragment,f),E(ky.$$.fragment,f),E(Sy.$$.fragment,f),E(Py.$$.fragment,f),E(t7.$$.fragment,f),E(By.$$.fragment,f),E(i7.$$.fragment,f),E(Iy.$$.fragment,f),E(Ny.$$.fragment,f),E(jy.$$.fragment,f),E(c7.$$.fragment,f),E(Dy.$$.fragment,f),E(h7.$$.fragment,f),E(Oy.$$.fragment,f),E(Vy.$$.fragment,f),E(zy.$$.fragment,f),E(u7.$$.fragment,f),E(Wy.$$.fragment,f),E(v7.$$.fragment,f),E(Qy.$$.fragment,f),E(Hy.$$.fragment,f),E(Jy.$$.fragment,f),E(T7.$$.fragment,f),E(Yy.$$.fragment,f),E(L7.$$.fragment,f),E(Ky.$$.fragment,f),E(Zy.$$.fragment,f),E(o8.$$.fragment,f),E(x7.$$.fragment,f),E(r8.$$.fragment,f),E(S7.$$.fragment,f),E(t8.$$.fragment,f),E(a8.$$.fragment,f),E(s8.$$.fragment,f),E(P7.$$.fragment,f),E(l8.$$.fragment,f),E(L9.$$.fragment,f),E(i8.$$.fragment,f),E(d8.$$.fragment,f),E(f8.$$.fragment,f),E(x9.$$.fragment,f),E(m8.$$.fragment,f),E(Z9.$$.fragment,f),E(g8.$$.fragment,f),E(h8.$$.fragment,f),E(u8.$$.fragment,f),E(oM.$$.fragment,f),E(_8.$$.fragment,f),E(pM.$$.fragment,f),E(b8.$$.fragment,f),E(v8.$$.fragment,f),E(T8.$$.fragment,f),E(_M.$$.fragment,f),E(M8.$$.fragment,f),E(MM.$$.fragment,f),E(E8.$$.fragment,f),E(C8.$$.fragment,f),E(A8.$$.fragment,f),E(CM.$$.fragment,f),E(L8.$$.fragment,f),E(zM.$$.fragment,f),E(y8.$$.fragment,f),E(x8.$$.fragment,f),E(k8.$$.fragment,f),E(QM.$$.fragment,f),E(S8.$$.fragment,f),E(a4.$$.fragment,f),E(R8.$$.fragment,f),E(P8.$$.fragment,f),E(I8.$$.fragment,f),E(s4.$$.fragment,f),E(N8.$$.fragment,f),E(R4.$$.fragment,f),E(q8.$$.fragment,f),E(j8.$$.fragment,f),E(G8.$$.fragment,f),E(B4.$$.fragment,f),E(O8.$$.fragment,f),E(Z4.$$.fragment,f),E(V8.$$.fragment,f),E(X8.$$.fragment,f),E(W8.$$.fragment,f),E(oE.$$.fragment,f),E(Q8.$$.fragment,f),E(aE.$$.fragment,f),E(U8.$$.fragment,f),E(J8.$$.fragment,f),E(K8.$$.fragment,f),E(sE.$$.fragment,f),E(Z8.$$.fragment,f),E(iE.$$.fragment,f),E(ex.$$.fragment,f),E(ox.$$.fragment,f),E(tx.$$.fragment,f),E(cE.$$.fragment,f),E(ax.$$.fragment,f),E(kE.$$.fragment,f),E(nx.$$.fragment,f),E(sx.$$.fragment,f),E(ix.$$.fragment,f),E(RE.$$.fragment,f),E(dx.$$.fragment,f),E(eC.$$.fragment,f),E(cx.$$.fragment,f),E(fx.$$.fragment,f),E(gx.$$.fragment,f),E(rC.$$.fragment,f),E(hx.$$.fragment,f),E(aC.$$.fragment,f),E(px.$$.fragment,f),E(ux.$$.fragment,f),E(bx.$$.fragment,f),E(sC.$$.fragment,f),E(vx.$$.fragment,f),E(iC.$$.fragment,f),E(Fx.$$.fragment,f),E(Tx.$$.fragment,f),E(Ex.$$.fragment,f),E(cC.$$.fragment,f),E(Cx.$$.fragment,f),E(qC.$$.fragment,f),E(wx.$$.fragment,f),E(Ax.$$.fragment,f),E(yx.$$.fragment,f),E(DC.$$.fragment,f),E(xx.$$.fragment,f),E(YC.$$.fragment,f),E($x.$$.fragment,f),E(kx.$$.fragment,f),E(Rx.$$.fragment,f),E(ZC.$$.fragment,f),E(Px.$$.fragment,f),E(g5.$$.fragment,f),E(Bx.$$.fragment,f),E(Ix.$$.fragment,f),E(qx.$$.fragment,f),E(p5.$$.fragment,f),E(jx.$$.fragment,f),E(A5.$$.fragment,f),E(Dx.$$.fragment,f),E(Gx.$$.fragment,f),E(Vx.$$.fragment,f),E(y5.$$.fragment,f),E(Xx.$$.fragment,f),E(j5.$$.fragment,f),E(zx.$$.fragment,f),E(Wx.$$.fragment,f),E(Hx.$$.fragment,f),E(G5.$$.fragment,f),E(Ux.$$.fragment,f),E(K5.$$.fragment,f),E(Jx.$$.fragment,f),E(Yx.$$.fragment,f),E(Zx.$$.fragment,f),E(e3.$$.fragment,f),E(e$.$$.fragment,f),E(f3.$$.fragment,f),E(o$.$$.fragment,f),E(r$.$$.fragment,f),E(a$.$$.fragment,f),E(g3.$$.fragment,f),E(n$.$$.fragment,f),E(M3.$$.fragment,f),E(s$.$$.fragment,f),E(l$.$$.fragment,f),E(d$.$$.fragment,f),E(C3.$$.fragment,f),E(c$.$$.fragment,f),E(R3.$$.fragment,f),E(f$.$$.fragment,f),E(m$.$$.fragment,f),E(h$.$$.fragment,f),E(B3.$$.fragment,f),E(p$.$$.fragment,f),E(N3.$$.fragment,f),E(u$.$$.fragment,f),E(_$.$$.fragment,f),E(v$.$$.fragment,f),E(j3.$$.fragment,f),E(F$.$$.fragment,f),E(O3.$$.fragment,f),E(M$.$$.fragment,f),E(E$.$$.fragment,f),E(w$.$$.fragment,f),E(X3.$$.fragment,f),E(A$.$$.fragment,f),E(W3.$$.fragment,f),UOe=!0)},o(f){C(d.$$.fragment,f),C(ya.$$.fragment,f),C(_A.$$.fragment,f),C(bA.$$.fragment,f),C(Sf.$$.fragment,f),C(vA.$$.fragment,f),C(FA.$$.fragment,f),C(EA.$$.fragment,f),C(jg.$$.fragment,f),C(CA.$$.fragment,f),C(wA.$$.fragment,f),C(AA.$$.fragment,f),C(xA.$$.fragment,f),C(Th.$$.fragment,f),C($A.$$.fragment,f),C(kA.$$.fragment,f),C(SA.$$.fragment,f),C(BA.$$.fragment,f),C(rp.$$.fragment,f),C(tp.$$.fragment,f),C(IA.$$.fragment,f),C(NA.$$.fragment,f),C(qA.$$.fragment,f),C(GA.$$.fragment,f),C(Ep.$$.fragment,f),C(Cp.$$.fragment,f),C(OA.$$.fragment,f),C(VA.$$.fragment,f),C(XA.$$.fragment,f),C(WA.$$.fragment,f),C(Lp.$$.fragment,f),C(QA.$$.fragment,f),C(A_.$$.fragment,f),C(HA.$$.fragment,f),C(UA.$$.fragment,f),C(YA.$$.fragment,f),C(y_.$$.fragment,f),C(KA.$$.fragment,f),C(v2.$$.fragment,f),C(ZA.$$.fragment,f),C(eL.$$.fragment,f),C(rL.$$.fragment,f),C(T2.$$.fragment,f),C(tL.$$.fragment,f),C(l1.$$.fragment,f),C(aL.$$.fragment,f),C(nL.$$.fragment,f),C(lL.$$.fragment,f),C(d1.$$.fragment,f),C(iL.$$.fragment,f),C(Q1.$$.fragment,f),C(dL.$$.fragment,f),C(cL.$$.fragment,f),C(mL.$$.fragment,f),C(U1.$$.fragment,f),C(gL.$$.fragment,f),C(hb.$$.fragment,f),C(hL.$$.fragment,f),C(pL.$$.fragment,f),C(_L.$$.fragment,f),C(ub.$$.fragment,f),C(bL.$$.fragment,f),C(fv.$$.fragment,f),C(vL.$$.fragment,f),C(FL.$$.fragment,f),C(ML.$$.fragment,f),C(gv.$$.fragment,f),C(EL.$$.fragment,f),C(Xv.$$.fragment,f),C(CL.$$.fragment,f),C(wL.$$.fragment,f),C(LL.$$.fragment,f),C(Wv.$$.fragment,f),C(yL.$$.fragment,f),C(Zv.$$.fragment,f),C(xL.$$.fragment,f),C($L.$$.fragment,f),C(SL.$$.fragment,f),C(oF.$$.fragment,f),C(RL.$$.fragment,f),C(NF.$$.fragment,f),C(PL.$$.fragment,f),C(BL.$$.fragment,f),C(NL.$$.fragment,f),C(jF.$$.fragment,f),C(qL.$$.fragment,f),C(L6.$$.fragment,f),C(jL.$$.fragment,f),C(DL.$$.fragment,f),C(OL.$$.fragment,f),C(x6.$$.fragment,f),C(VL.$$.fragment,f),C(S6.$$.fragment,f),C(XL.$$.fragment,f),C(zL.$$.fragment,f),C(QL.$$.fragment,f),C(P6.$$.fragment,f),C(HL.$$.fragment,f),C(H6.$$.fragment,f),C(UL.$$.fragment,f),C(JL.$$.fragment,f),C(KL.$$.fragment,f),C(J6.$$.fragment,f),C(ZL.$$.fragment,f),C(Z6.$$.fragment,f),C(ey.$$.fragment,f),C(oy.$$.fragment,f),C(ty.$$.fragment,f),C(oT.$$.fragment,f),C(ay.$$.fragment,f),C(aT.$$.fragment,f),C(ny.$$.fragment,f),C(sy.$$.fragment,f),C(iy.$$.fragment,f),C(sT.$$.fragment,f),C(dy.$$.fragment,f),C(_T.$$.fragment,f),C(cy.$$.fragment,f),C(fy.$$.fragment,f),C(gy.$$.fragment,f),C(vT.$$.fragment,f),C(hy.$$.fragment,f),C(AT.$$.fragment,f),C(py.$$.fragment,f),C(uy.$$.fragment,f),C(by.$$.fragment,f),C(yT.$$.fragment,f),C(vy.$$.fragment,f),C(DT.$$.fragment,f),C(Fy.$$.fragment,f),C(Ty.$$.fragment,f),C(Ey.$$.fragment,f),C(OT.$$.fragment,f),C(Cy.$$.fragment,f),C(WT.$$.fragment,f),C(Ay.$$.fragment,f),C(Ly.$$.fragment,f),C(xy.$$.fragment,f),C(HT.$$.fragment,f),C($y.$$.fragment,f),C(o7.$$.fragment,f),C(ky.$$.fragment,f),C(Sy.$$.fragment,f),C(Py.$$.fragment,f),C(t7.$$.fragment,f),C(By.$$.fragment,f),C(i7.$$.fragment,f),C(Iy.$$.fragment,f),C(Ny.$$.fragment,f),C(jy.$$.fragment,f),C(c7.$$.fragment,f),C(Dy.$$.fragment,f),C(h7.$$.fragment,f),C(Oy.$$.fragment,f),C(Vy.$$.fragment,f),C(zy.$$.fragment,f),C(u7.$$.fragment,f),C(Wy.$$.fragment,f),C(v7.$$.fragment,f),C(Qy.$$.fragment,f),C(Hy.$$.fragment,f),C(Jy.$$.fragment,f),C(T7.$$.fragment,f),C(Yy.$$.fragment,f),C(L7.$$.fragment,f),C(Ky.$$.fragment,f),C(Zy.$$.fragment,f),C(o8.$$.fragment,f),C(x7.$$.fragment,f),C(r8.$$.fragment,f),C(S7.$$.fragment,f),C(t8.$$.fragment,f),C(a8.$$.fragment,f),C(s8.$$.fragment,f),C(P7.$$.fragment,f),C(l8.$$.fragment,f),C(L9.$$.fragment,f),C(i8.$$.fragment,f),C(d8.$$.fragment,f),C(f8.$$.fragment,f),C(x9.$$.fragment,f),C(m8.$$.fragment,f),C(Z9.$$.fragment,f),C(g8.$$.fragment,f),C(h8.$$.fragment,f),C(u8.$$.fragment,f),C(oM.$$.fragment,f),C(_8.$$.fragment,f),C(pM.$$.fragment,f),C(b8.$$.fragment,f),C(v8.$$.fragment,f),C(T8.$$.fragment,f),C(_M.$$.fragment,f),C(M8.$$.fragment,f),C(MM.$$.fragment,f),C(E8.$$.fragment,f),C(C8.$$.fragment,f),C(A8.$$.fragment,f),C(CM.$$.fragment,f),C(L8.$$.fragment,f),C(zM.$$.fragment,f),C(y8.$$.fragment,f),C(x8.$$.fragment,f),C(k8.$$.fragment,f),C(QM.$$.fragment,f),C(S8.$$.fragment,f),C(a4.$$.fragment,f),C(R8.$$.fragment,f),C(P8.$$.fragment,f),C(I8.$$.fragment,f),C(s4.$$.fragment,f),C(N8.$$.fragment,f),C(R4.$$.fragment,f),C(q8.$$.fragment,f),C(j8.$$.fragment,f),C(G8.$$.fragment,f),C(B4.$$.fragment,f),C(O8.$$.fragment,f),C(Z4.$$.fragment,f),C(V8.$$.fragment,f),C(X8.$$.fragment,f),C(W8.$$.fragment,f),C(oE.$$.fragment,f),C(Q8.$$.fragment,f),C(aE.$$.fragment,f),C(U8.$$.fragment,f),C(J8.$$.fragment,f),C(K8.$$.fragment,f),C(sE.$$.fragment,f),C(Z8.$$.fragment,f),C(iE.$$.fragment,f),C(ex.$$.fragment,f),C(ox.$$.fragment,f),C(tx.$$.fragment,f),C(cE.$$.fragment,f),C(ax.$$.fragment,f),C(kE.$$.fragment,f),C(nx.$$.fragment,f),C(sx.$$.fragment,f),C(ix.$$.fragment,f),C(RE.$$.fragment,f),C(dx.$$.fragment,f),C(eC.$$.fragment,f),C(cx.$$.fragment,f),C(fx.$$.fragment,f),C(gx.$$.fragment,f),C(rC.$$.fragment,f),C(hx.$$.fragment,f),C(aC.$$.fragment,f),C(px.$$.fragment,f),C(ux.$$.fragment,f),C(bx.$$.fragment,f),C(sC.$$.fragment,f),C(vx.$$.fragment,f),C(iC.$$.fragment,f),C(Fx.$$.fragment,f),C(Tx.$$.fragment,f),C(Ex.$$.fragment,f),C(cC.$$.fragment,f),C(Cx.$$.fragment,f),C(qC.$$.fragment,f),C(wx.$$.fragment,f),C(Ax.$$.fragment,f),C(yx.$$.fragment,f),C(DC.$$.fragment,f),C(xx.$$.fragment,f),C(YC.$$.fragment,f),C($x.$$.fragment,f),C(kx.$$.fragment,f),C(Rx.$$.fragment,f),C(ZC.$$.fragment,f),C(Px.$$.fragment,f),C(g5.$$.fragment,f),C(Bx.$$.fragment,f),C(Ix.$$.fragment,f),C(qx.$$.fragment,f),C(p5.$$.fragment,f),C(jx.$$.fragment,f),C(A5.$$.fragment,f),C(Dx.$$.fragment,f),C(Gx.$$.fragment,f),C(Vx.$$.fragment,f),C(y5.$$.fragment,f),C(Xx.$$.fragment,f),C(j5.$$.fragment,f),C(zx.$$.fragment,f),C(Wx.$$.fragment,f),C(Hx.$$.fragment,f),C(G5.$$.fragment,f),C(Ux.$$.fragment,f),C(K5.$$.fragment,f),C(Jx.$$.fragment,f),C(Yx.$$.fragment,f),C(Zx.$$.fragment,f),C(e3.$$.fragment,f),C(e$.$$.fragment,f),C(f3.$$.fragment,f),C(o$.$$.fragment,f),C(r$.$$.fragment,f),C(a$.$$.fragment,f),C(g3.$$.fragment,f),C(n$.$$.fragment,f),C(M3.$$.fragment,f),C(s$.$$.fragment,f),C(l$.$$.fragment,f),C(d$.$$.fragment,f),C(C3.$$.fragment,f),C(c$.$$.fragment,f),C(R3.$$.fragment,f),C(f$.$$.fragment,f),C(m$.$$.fragment,f),C(h$.$$.fragment,f),C(B3.$$.fragment,f),C(p$.$$.fragment,f),C(N3.$$.fragment,f),C(u$.$$.fragment,f),C(_$.$$.fragment,f),C(v$.$$.fragment,f),C(j3.$$.fragment,f),C(F$.$$.fragment,f),C(O3.$$.fragment,f),C(M$.$$.fragment,f),C(E$.$$.fragment,f),C(w$.$$.fragment,f),C(X3.$$.fragment,f),C(A$.$$.fragment,f),C(W3.$$.fragment,f),UOe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(Lf),f&&t(at),f&&t(Oe),f&&t(We),f&&t(xf),w(ya,f),f&&t(Qe),f&&t(Ae),f&&t(Co),f&&t(xa),f&&t(XDe),f&&t(Li),w(_A),f&&t(zDe),f&&t(In),f&&t(WDe),w(bA,f),f&&t(QDe),f&&t(Hk),f&&t(HDe),w(Sf,f),f&&t(UDe),f&&t(yi),w(vA),f&&t(JDe),f&&t(wo),w(FA),w(EA),w(jg),w(CA),f&&t(YDe),f&&t($i),w(wA),f&&t(KDe),f&&t(Ao),w(AA),w(xA),w(Th),w($A),f&&t(ZDe),f&&t(ki),w(kA),f&&t(eGe),f&&t(Lo),w(SA),w(BA),w(rp),w(tp),w(IA),f&&t(oGe),f&&t(Si),w(NA),f&&t(rGe),f&&t(yo),w(qA),w(GA),w(Ep),w(Cp),w(OA),f&&t(tGe),f&&t(Pi),w(VA),f&&t(aGe),f&&t(xo),w(XA),w(WA),w(Lp),w(QA),w(A_),f&&t(nGe),f&&t(Ni),w(HA),f&&t(sGe),f&&t($o),w(UA),w(YA),w(y_),w(KA),w(v2),f&&t(lGe),f&&t(Di),w(ZA),f&&t(iGe),f&&t(ko),w(eL),w(rL),w(T2),w(tL),w(l1),f&&t(dGe),f&&t(Vi),w(aL),f&&t(cGe),f&&t(So),w(nL),w(lL),w(d1),w(iL),w(Q1),f&&t(fGe),f&&t(Wi),w(dL),f&&t(mGe),f&&t(Ro),w(cL),w(mL),w(U1),w(gL),w(hb),f&&t(gGe),f&&t(Ui),w(hL),f&&t(hGe),f&&t(Po),w(pL),w(_L),w(ub),w(bL),w(fv),f&&t(pGe),f&&t(Ki),w(vL),f&&t(uGe),f&&t(Bo),w(FL),w(ML),w(gv),w(EL),w(Xv),f&&t(_Ge),f&&t(od),w(CL),f&&t(bGe),f&&t(Io),w(wL),w(LL),w(Wv),w(yL),w(Zv),f&&t(vGe),f&&t(ad),w(xL),f&&t(FGe),f&&t(No),w($L),w(SL),w(oF),w(RL),w(NF),f&&t(TGe),f&&t(ld),w(PL),f&&t(MGe),f&&t(qo),w(BL),w(NL),w(jF),w(qL),w(L6),f&&t(EGe),f&&t(cd),w(jL),f&&t(CGe),f&&t(jo),w(DL),w(OL),w(x6),w(VL),w(S6),f&&t(wGe),f&&t(gd),w(XL),f&&t(AGe),f&&t(Do),w(zL),w(QL),w(P6),w(HL),w(H6),f&&t(LGe),f&&t(ud),w(UL),f&&t(yGe),f&&t(Go),w(JL),w(KL),w(J6),w(ZL),w(Z6),f&&t(xGe),f&&t(vd),w(ey),f&&t($Ge),f&&t(Oo),w(oy),w(ty),w(oT),w(ay),w(aT),f&&t(kGe),f&&t(Md),w(ny),f&&t(SGe),f&&t(Vo),w(sy),w(iy),w(sT),w(dy),w(_T),f&&t(RGe),f&&t(wd),w(cy),f&&t(PGe),f&&t(Xo),w(fy),w(gy),w(vT),w(hy),w(AT),f&&t(BGe),f&&t(yd),w(py),f&&t(IGe),f&&t(zo),w(uy),w(by),w(yT),w(vy),w(DT),f&&t(NGe),f&&t(kd),w(Fy),f&&t(qGe),f&&t(Wo),w(Ty),w(Ey),w(OT),w(Cy),w(WT),f&&t(jGe),f&&t(Pd),w(Ay),f&&t(DGe),f&&t(Qo),w(Ly),w(xy),w(HT),w($y),w(o7),f&&t(GGe),f&&t(Nd),w(ky),f&&t(OGe),f&&t(Ho),w(Sy),w(Py),w(t7),w(By),w(i7),f&&t(VGe),f&&t(Gd),w(Iy),f&&t(XGe),f&&t(Uo),w(Ny),w(jy),w(c7),w(Dy),w(h7),f&&t(zGe),f&&t(Xd),w(Oy),f&&t(WGe),f&&t(Jo),w(Vy),w(zy),w(u7),w(Wy),w(v7),f&&t(QGe),f&&t(Qd),w(Qy),f&&t(HGe),f&&t(Yo),w(Hy),w(Jy),w(T7),w(Yy),w(L7),f&&t(UGe),f&&t(Jd),w(Ky),f&&t(JGe),f&&t(Ko),w(Zy),w(o8),w(x7),w(r8),w(S7),f&&t(YGe),f&&t(Zd),w(t8),f&&t(KGe),f&&t(Zo),w(a8),w(s8),w(P7),w(l8),w(L9),f&&t(ZGe),f&&t(rc),w(i8),f&&t(eOe),f&&t(er),w(d8),w(f8),w(x9),w(m8),w(Z9),f&&t(oOe),f&&t(nc),w(g8),f&&t(rOe),f&&t(or),w(h8),w(u8),w(oM),w(_8),w(pM),f&&t(tOe),f&&t(ic),w(b8),f&&t(aOe),f&&t(rr),w(v8),w(T8),w(_M),w(M8),w(MM),f&&t(nOe),f&&t(fc),w(E8),f&&t(sOe),f&&t(tr),w(C8),w(A8),w(CM),w(L8),w(zM),f&&t(lOe),f&&t(hc),w(y8),f&&t(iOe),f&&t(ar),w(x8),w(k8),w(QM),w(S8),w(a4),f&&t(dOe),f&&t(_c),w(R8),f&&t(cOe),f&&t(nr),w(P8),w(I8),w(s4),w(N8),w(R4),f&&t(fOe),f&&t(Fc),w(q8),f&&t(mOe),f&&t(sr),w(j8),w(G8),w(B4),w(O8),w(Z4),f&&t(gOe),f&&t(Ec),w(V8),f&&t(hOe),f&&t(lr),w(X8),w(W8),w(oE),w(Q8),w(aE),f&&t(pOe),f&&t(Ac),w(U8),f&&t(uOe),f&&t(ir),w(J8),w(K8),w(sE),w(Z8),w(iE),f&&t(_Oe),f&&t(xc),w(ex),f&&t(bOe),f&&t(dr),w(ox),w(tx),w(cE),w(ax),w(kE),f&&t(vOe),f&&t(Sc),w(nx),f&&t(FOe),f&&t(cr),w(sx),w(ix),w(RE),w(dx),w(eC),f&&t(TOe),f&&t(Bc),w(cx),f&&t(MOe),f&&t(fr),w(fx),w(gx),w(rC),w(hx),w(aC),f&&t(EOe),f&&t(qc),w(px),f&&t(COe),f&&t(mr),w(ux),w(bx),w(sC),w(vx),w(iC),f&&t(wOe),f&&t(Gc),w(Fx),f&&t(AOe),f&&t(gr),w(Tx),w(Ex),w(cC),w(Cx),w(qC),f&&t(LOe),f&&t(Xc),w(wx),f&&t(yOe),f&&t(hr),w(Ax),w(yx),w(DC),w(xx),w(YC),f&&t(xOe),f&&t(Qc),w($x),f&&t($Oe),f&&t(pr),w(kx),w(Rx),w(ZC),w(Px),w(g5),f&&t(kOe),f&&t(Jc),w(Bx),f&&t(SOe),f&&t(ur),w(Ix),w(qx),w(p5),w(jx),w(A5),f&&t(ROe),f&&t(Zc),w(Dx),f&&t(POe),f&&t(_r),w(Gx),w(Vx),w(y5),w(Xx),w(j5),f&&t(BOe),f&&t(rf),w(zx),f&&t(IOe),f&&t(br),w(Wx),w(Hx),w(G5),w(Ux),w(K5),f&&t(NOe),f&&t(nf),w(Jx),f&&t(qOe),f&&t(vr),w(Yx),w(Zx),w(e3),w(e$),w(f3),f&&t(jOe),f&&t(df),w(o$),f&&t(DOe),f&&t(Fr),w(r$),w(a$),w(g3),w(n$),w(M3),f&&t(GOe),f&&t(mf),w(s$),f&&t(OOe),f&&t(Tr),w(l$),w(d$),w(C3),w(c$),w(R3),f&&t(VOe),f&&t(pf),w(f$),f&&t(XOe),f&&t(Mr),w(m$),w(h$),w(B3),w(p$),w(N3),f&&t(zOe),f&&t(bf),w(u$),f&&t(WOe),f&&t(Er),w(_$),w(v$),w(j3),w(F$),w(O3),f&&t(QOe),f&&t(Tf),w(M$),f&&t(HOe),f&&t(Cr),w(E$),w(w$),w(X3),w(A$),w(W3)}}}const Jjt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForVisualQuestionAnswering",title:"AutoModelForVisualQuestionAnswering"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function Yjt(y){return UNt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class aDt extends zNt{constructor(g){super();WNt(this,g,Yjt,Ujt,QNt,{})}}export{aDt as default,Jjt as metadata};
