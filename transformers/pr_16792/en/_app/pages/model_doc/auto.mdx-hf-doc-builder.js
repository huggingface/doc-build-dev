import{S as yRt,i as xRt,s as $Rt,e as a,k as l,w as F,t as o,M as kRt,c as n,d as t,m as i,a as s,x as T,h as r,b as c,G as e,g as b,y as M,q as E,o as C,B as w,v as SRt,L as I}from"../../chunks/vendor-hf-doc-builder.js";import{T as bWr}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as P}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as te}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as B}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function RRt(y){let g,v,p,m,_,d,h,Mo,gi,uf,rt,hi,pi,jw,bf,Ge,We,_i,Ln,Dw,yn,xn,Gw,ui,$n,Ow,bi,vf,Ca;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),_=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Mo=o(`, make sure its
`),gi=a("code"),uf=o("model_type"),rt=o(" attribute is set to the same key you use when registering the config (here "),hi=a("code"),pi=o('"new-model"'),jw=o(")."),bf=l(),Ge=a("p"),We=o("Likewise, if your "),_i=a("code"),Ln=o("NewModel"),Dw=o(" is a subclass of "),yn=a("a"),xn=o("PreTrainedModel"),Gw=o(`, make sure its
`),ui=a("code"),$n=o("config_class"),Ow=o(` attribute is set to the same class you use when registering the model (here
`),bi=a("code"),vf=o("NewModelConfig"),Ca=o(")."),this.h()},l(Qe){g=n(Qe,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var dk=s(p);m=r(dk,"NewModelConfig"),dk.forEach(t),_=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var vi=s(d);h=r(vi,"PretrainedConfig"),vi.forEach(t),Mo=r(Ae,`, make sure its
`),gi=n(Ae,"CODE",{});var ck=s(gi);uf=r(ck,"model_type"),ck.forEach(t),rt=r(Ae," attribute is set to the same key you use when registering the config (here "),hi=n(Ae,"CODE",{});var fk=s(hi);pi=r(fk,'"new-model"'),fk.forEach(t),jw=r(Ae,")."),Ae.forEach(t),bf=i(Qe),Ge=n(Qe,"P",{});var Eo=s(Ge);We=r(Eo,"Likewise, if your "),_i=n(Eo,"CODE",{});var wa=s(_i);Ln=r(wa,"NewModel"),wa.forEach(t),Dw=r(Eo," is a subclass of "),yn=n(Eo,"A",{href:!0});var mk=s(yn);xn=r(mk,"PreTrainedModel"),mk.forEach(t),Gw=r(Eo,`, make sure its
`),ui=n(Eo,"CODE",{});var Ff=s(ui);$n=r(Ff,"config_class"),Ff.forEach(t),Ow=r(Eo,` attribute is set to the same class you use when registering the model (here
`),bi=n(Eo,"CODE",{});var gk=s(bi);vf=r(gk,"NewModelConfig"),gk.forEach(t),Ca=r(Eo,")."),Eo.forEach(t),this.h()},h(){c(yn,"href","/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel")},m(Qe,Ae){b(Qe,g,Ae),e(g,v),e(g,p),e(p,m),e(g,_),e(g,d),e(d,h),e(g,Mo),e(g,gi),e(gi,uf),e(g,rt),e(g,hi),e(hi,pi),e(g,jw),b(Qe,bf,Ae),b(Qe,Ge,Ae),e(Ge,We),e(Ge,_i),e(_i,Ln),e(Ge,Dw),e(Ge,yn),e(yn,xn),e(Ge,Gw),e(Ge,ui),e(ui,$n),e(Ge,Ow),e(Ge,bi),e(bi,vf),e(Ge,Ca)},d(Qe){Qe&&t(g),Qe&&t(bf),Qe&&t(Ge)}}}function PRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")

# Download vocabulary from huggingface.co and define model-specific arguments
tokenizer = AutoTokenizer.from_pretrained("roberta-base", add_prefix_space=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and define model-specific arguments</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;roberta-base&quot;</span>, add_prefix_space=<span class="hljs-literal">True</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function IRt(y){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function NRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qRt(y){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function jRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ORt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function URt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ePt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Pt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function EPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function APt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $Pt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function IPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function UPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eBt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oBt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rBt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tBt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aBt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nBt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sBt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lBt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iBt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dBt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cBt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fBt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mBt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gBt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hBt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pBt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Bt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uBt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bBt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vBt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FBt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TBt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MBt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function EBt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CBt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wBt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ABt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LBt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yBt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xBt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $Bt(y){let g,v,p,m,_,d,h,Mo,gi,uf,rt,hi,pi,jw,bf,Ge,We,_i,Ln,Dw,yn,xn,Gw,ui,$n,Ow,bi,vf,Ca,Qe,Ae,dk,vi,ck,fk,Eo,wa,mk,Ff,gk,TVe,cje,Fi,Tf,Ooe,Vw,MVe,Voe,EVe,fje,kn,CVe,Xoe,wVe,AVe,zoe,LVe,yVe,mje,Xw,gje,hk,xVe,hje,Mf,pje,Ti,Ef,Woe,zw,$Ve,Qoe,kVe,_je,Co,Ww,SVe,Qw,RVe,pk,PVe,BVe,IVe,Hw,NVe,Hoe,qVe,jVe,DVe,Er,Uw,GVe,Uoe,OVe,VVe,Mi,XVe,Joe,zVe,WVe,Yoe,QVe,HVe,UVe,A,Cf,Koe,JVe,YVe,_k,KVe,ZVe,eXe,wf,Zoe,oXe,rXe,uk,tXe,aXe,nXe,Af,ere,sXe,lXe,bk,iXe,dXe,cXe,Lf,ore,fXe,mXe,vk,gXe,hXe,pXe,yf,rre,_Xe,uXe,Fk,bXe,vXe,FXe,xf,tre,TXe,MXe,Tk,EXe,CXe,wXe,$f,are,AXe,LXe,Mk,yXe,xXe,$Xe,kf,nre,kXe,SXe,Ek,RXe,PXe,BXe,Sf,sre,IXe,NXe,Ck,qXe,jXe,DXe,Rf,lre,GXe,OXe,wk,VXe,XXe,zXe,Pf,ire,WXe,QXe,Ak,HXe,UXe,JXe,Bf,dre,YXe,KXe,Lk,ZXe,eze,oze,If,cre,rze,tze,yk,aze,nze,sze,Nf,fre,lze,ize,xk,dze,cze,fze,qf,mre,mze,gze,$k,hze,pze,_ze,jf,gre,uze,bze,kk,vze,Fze,Tze,Df,hre,Mze,Eze,Sk,Cze,wze,Aze,Gf,pre,Lze,yze,Rk,xze,$ze,kze,Of,_re,Sze,Rze,Pk,Pze,Bze,Ize,Vf,ure,Nze,qze,Bk,jze,Dze,Gze,Xf,bre,Oze,Vze,Ik,Xze,zze,Wze,zf,vre,Qze,Hze,Nk,Uze,Jze,Yze,Wf,Fre,Kze,Zze,qk,eWe,oWe,rWe,Qf,Tre,tWe,aWe,jk,nWe,sWe,lWe,Hf,Mre,iWe,dWe,Dk,cWe,fWe,mWe,Uf,Ere,gWe,hWe,Gk,pWe,_We,uWe,Jf,Cre,bWe,vWe,Ok,FWe,TWe,MWe,Yf,wre,EWe,CWe,Vk,wWe,AWe,LWe,Kf,Are,yWe,xWe,Xk,$We,kWe,SWe,Zf,Lre,RWe,PWe,zk,BWe,IWe,NWe,em,yre,qWe,jWe,Wk,DWe,GWe,OWe,om,xre,VWe,XWe,Qk,zWe,WWe,QWe,rm,$re,HWe,UWe,Hk,JWe,YWe,KWe,tm,kre,ZWe,eQe,Uk,oQe,rQe,tQe,am,Sre,aQe,nQe,Jk,sQe,lQe,iQe,nm,Rre,dQe,cQe,Yk,fQe,mQe,gQe,sm,Pre,hQe,pQe,Kk,_Qe,uQe,bQe,lm,Bre,vQe,FQe,Zk,TQe,MQe,EQe,im,Ire,CQe,wQe,eS,AQe,LQe,yQe,dm,Nre,xQe,$Qe,oS,kQe,SQe,RQe,cm,qre,PQe,BQe,rS,IQe,NQe,qQe,fm,jre,jQe,DQe,tS,GQe,OQe,VQe,mm,Dre,XQe,zQe,aS,WQe,QQe,HQe,gm,Gre,UQe,JQe,nS,YQe,KQe,ZQe,hm,Ore,eHe,oHe,sS,rHe,tHe,aHe,pm,Vre,nHe,sHe,lS,lHe,iHe,dHe,_m,Xre,cHe,fHe,iS,mHe,gHe,hHe,um,zre,pHe,_He,dS,uHe,bHe,vHe,bm,Wre,FHe,THe,cS,MHe,EHe,CHe,vm,Qre,wHe,AHe,fS,LHe,yHe,xHe,Fm,Hre,$He,kHe,mS,SHe,RHe,PHe,Tm,Ure,BHe,IHe,gS,NHe,qHe,jHe,Mm,Jre,DHe,GHe,hS,OHe,VHe,XHe,Em,Yre,zHe,WHe,pS,QHe,HHe,UHe,Cm,Kre,JHe,YHe,_S,KHe,ZHe,eUe,wm,Zre,oUe,rUe,uS,tUe,aUe,nUe,Am,ete,sUe,lUe,bS,iUe,dUe,cUe,Lm,ote,fUe,mUe,vS,gUe,hUe,pUe,ym,rte,_Ue,uUe,FS,bUe,vUe,FUe,xm,tte,TUe,MUe,TS,EUe,CUe,wUe,$m,ate,AUe,LUe,MS,yUe,xUe,$Ue,km,nte,kUe,SUe,ES,RUe,PUe,BUe,Sm,ste,IUe,NUe,CS,qUe,jUe,DUe,Rm,lte,GUe,OUe,wS,VUe,XUe,zUe,Pm,ite,WUe,QUe,AS,HUe,UUe,JUe,Bm,dte,YUe,KUe,LS,ZUe,eJe,oJe,Im,cte,rJe,tJe,yS,aJe,nJe,sJe,Nm,fte,lJe,iJe,xS,dJe,cJe,fJe,qm,mte,mJe,gJe,$S,hJe,pJe,_Je,jm,gte,uJe,bJe,kS,vJe,FJe,TJe,Dm,hte,MJe,EJe,SS,CJe,wJe,AJe,Gm,pte,LJe,yJe,RS,xJe,$Je,kJe,Om,_te,SJe,RJe,PS,PJe,BJe,IJe,Vm,ute,NJe,qJe,BS,jJe,DJe,GJe,Xm,bte,OJe,VJe,IS,XJe,zJe,WJe,zm,vte,QJe,HJe,NS,UJe,JJe,YJe,Wm,Fte,KJe,ZJe,qS,eYe,oYe,rYe,Qm,Tte,tYe,aYe,jS,nYe,sYe,lYe,Hm,Mte,iYe,dYe,DS,cYe,fYe,mYe,Um,Ete,gYe,hYe,GS,pYe,_Ye,uYe,Jm,Cte,bYe,vYe,OS,FYe,TYe,MYe,Ym,wte,EYe,CYe,VS,wYe,AYe,LYe,Km,Ate,yYe,xYe,XS,$Ye,kYe,SYe,Zm,Lte,RYe,PYe,zS,BYe,IYe,NYe,eg,yte,qYe,jYe,WS,DYe,GYe,OYe,og,xte,VYe,XYe,QS,zYe,WYe,QYe,rg,$te,HYe,UYe,HS,JYe,YYe,KYe,tg,kte,ZYe,eKe,US,oKe,rKe,tKe,ag,Ste,aKe,nKe,JS,sKe,lKe,iKe,ng,Rte,dKe,cKe,YS,fKe,mKe,gKe,sg,Pte,hKe,pKe,KS,_Ke,uKe,bKe,lg,Bte,vKe,FKe,ZS,TKe,MKe,EKe,ig,Ite,CKe,wKe,eR,AKe,LKe,yKe,dg,Nte,xKe,$Ke,oR,kKe,SKe,RKe,cg,qte,PKe,BKe,rR,IKe,NKe,qKe,fg,jte,jKe,DKe,tR,GKe,OKe,VKe,mg,Dte,XKe,zKe,aR,WKe,QKe,HKe,gg,Gte,UKe,JKe,nR,YKe,KKe,ZKe,hg,Ote,eZe,oZe,sR,rZe,tZe,aZe,pg,Vte,nZe,sZe,lR,lZe,iZe,dZe,_g,Xte,cZe,fZe,iR,mZe,gZe,hZe,ug,zte,pZe,_Ze,dR,uZe,bZe,vZe,bg,Wte,FZe,TZe,cR,MZe,EZe,CZe,vg,Qte,wZe,AZe,fR,LZe,yZe,xZe,Fg,Hte,$Ze,kZe,mR,SZe,RZe,PZe,Tg,Ute,BZe,IZe,gR,NZe,qZe,jZe,Mg,Jte,DZe,GZe,hR,OZe,VZe,XZe,Eg,Yte,zZe,WZe,pR,QZe,HZe,UZe,Cg,Kte,JZe,YZe,_R,KZe,ZZe,eeo,wg,Zte,oeo,reo,uR,teo,aeo,neo,Ag,eae,seo,leo,bR,ieo,deo,ceo,Lg,feo,yg,Jw,meo,oae,geo,uje,Ei,xg,rae,Yw,heo,tae,peo,bje,wo,Kw,_eo,Zw,ueo,vR,beo,veo,Feo,eA,Teo,aae,Meo,Eeo,Ceo,Cr,oA,weo,nae,Aeo,Leo,Aa,yeo,sae,xeo,$eo,lae,keo,Seo,iae,Reo,Peo,Beo,k,Sn,dae,Ieo,Neo,FR,qeo,jeo,TR,Deo,Geo,Oeo,Rn,cae,Veo,Xeo,MR,zeo,Weo,ER,Qeo,Heo,Ueo,Pn,fae,Jeo,Yeo,CR,Keo,Zeo,wR,eoo,ooo,roo,$g,mae,too,aoo,AR,noo,soo,loo,Bn,gae,ioo,doo,LR,coo,foo,yR,moo,goo,hoo,kg,hae,poo,_oo,xR,uoo,boo,voo,Sg,pae,Foo,Too,$R,Moo,Eoo,Coo,Rg,_ae,woo,Aoo,kR,Loo,yoo,xoo,In,uae,$oo,koo,SR,Soo,Roo,RR,Poo,Boo,Ioo,Nn,bae,Noo,qoo,PR,joo,Doo,BR,Goo,Ooo,Voo,qn,vae,Xoo,zoo,IR,Woo,Qoo,NR,Hoo,Uoo,Joo,Pg,Fae,Yoo,Koo,qR,Zoo,ero,oro,Bg,Tae,rro,tro,jR,aro,nro,sro,jn,Mae,lro,iro,DR,dro,cro,GR,fro,mro,gro,Ig,Eae,hro,pro,OR,_ro,uro,bro,Dn,Cae,vro,Fro,VR,Tro,Mro,XR,Ero,Cro,wro,Gn,wae,Aro,Lro,zR,yro,xro,WR,$ro,kro,Sro,On,Aae,Rro,Pro,QR,Bro,Iro,HR,Nro,qro,jro,Ng,Lae,Dro,Gro,UR,Oro,Vro,Xro,Vn,yae,zro,Wro,JR,Qro,Hro,YR,Uro,Jro,Yro,Xn,xae,Kro,Zro,KR,eto,oto,ZR,rto,tto,ato,zn,$ae,nto,sto,eP,lto,ito,oP,dto,cto,fto,Wn,kae,mto,gto,rP,hto,pto,tP,_to,uto,bto,Qn,Sae,vto,Fto,aP,Tto,Mto,nP,Eto,Cto,wto,Hn,Rae,Ato,Lto,sP,yto,xto,lP,$to,kto,Sto,qg,Pae,Rto,Pto,iP,Bto,Ito,Nto,Un,Bae,qto,jto,dP,Dto,Gto,cP,Oto,Vto,Xto,jg,Iae,zto,Wto,fP,Qto,Hto,Uto,Jn,Nae,Jto,Yto,mP,Kto,Zto,gP,eao,oao,rao,Yn,qae,tao,aao,hP,nao,sao,pP,lao,iao,dao,Kn,jae,cao,fao,_P,mao,gao,uP,hao,pao,_ao,Dg,Dae,uao,bao,bP,vao,Fao,Tao,Zn,Gae,Mao,Eao,vP,Cao,wao,FP,Aao,Lao,yao,es,Oae,xao,$ao,TP,kao,Sao,MP,Rao,Pao,Bao,Gg,Vae,Iao,Nao,EP,qao,jao,Dao,os,Xae,Gao,Oao,CP,Vao,Xao,wP,zao,Wao,Qao,rs,zae,Hao,Uao,AP,Jao,Yao,LP,Kao,Zao,eno,ts,Wae,ono,rno,yP,tno,ano,xP,nno,sno,lno,as,Qae,ino,dno,$P,cno,fno,kP,mno,gno,hno,ns,Hae,pno,_no,SP,uno,bno,RP,vno,Fno,Tno,ss,Uae,Mno,Eno,PP,Cno,wno,BP,Ano,Lno,yno,ls,Jae,xno,$no,IP,kno,Sno,NP,Rno,Pno,Bno,is,Yae,Ino,Nno,qP,qno,jno,jP,Dno,Gno,Ono,Og,Kae,Vno,Xno,DP,zno,Wno,Qno,ds,Zae,Hno,Uno,GP,Jno,Yno,OP,Kno,Zno,eso,Vg,ene,oso,rso,VP,tso,aso,nso,Xg,one,sso,lso,XP,iso,dso,cso,cs,rne,fso,mso,zP,gso,hso,WP,pso,_so,uso,fs,tne,bso,vso,QP,Fso,Tso,HP,Mso,Eso,Cso,ms,ane,wso,Aso,UP,Lso,yso,JP,xso,$so,kso,zg,nne,Sso,Rso,YP,Pso,Bso,Iso,gs,sne,Nso,qso,KP,jso,Dso,ZP,Gso,Oso,Vso,hs,lne,Xso,zso,eB,Wso,Qso,oB,Hso,Uso,Jso,ps,ine,Yso,Kso,rB,Zso,elo,tB,olo,rlo,tlo,_s,dne,alo,nlo,aB,slo,llo,nB,ilo,dlo,clo,us,cne,flo,mlo,sB,glo,hlo,lB,plo,_lo,ulo,Wg,fne,blo,vlo,iB,Flo,Tlo,Mlo,bs,mne,Elo,Clo,dB,wlo,Alo,cB,Llo,ylo,xlo,Qg,gne,$lo,klo,fB,Slo,Rlo,Plo,Hg,hne,Blo,Ilo,mB,Nlo,qlo,jlo,Ug,pne,Dlo,Glo,gB,Olo,Vlo,Xlo,Jg,_ne,zlo,Wlo,hB,Qlo,Hlo,Ulo,vs,une,Jlo,Ylo,pB,Klo,Zlo,_B,eio,oio,rio,Yg,bne,tio,aio,uB,nio,sio,lio,Fs,vne,iio,dio,bB,cio,fio,vB,mio,gio,hio,Ts,Fne,pio,_io,FB,uio,bio,TB,vio,Fio,Tio,Ms,Tne,Mio,Eio,MB,Cio,wio,EB,Aio,Lio,yio,Es,Mne,xio,$io,CB,kio,Sio,wB,Rio,Pio,Bio,Cs,Ene,Iio,Nio,AB,qio,jio,LB,Dio,Gio,Oio,ws,Cne,Vio,Xio,yB,zio,Wio,xB,Qio,Hio,Uio,Kg,wne,Jio,Yio,$B,Kio,Zio,edo,Zg,Ane,odo,rdo,kB,tdo,ado,ndo,As,Lne,sdo,ldo,SB,ido,ddo,RB,cdo,fdo,mdo,Ls,yne,gdo,hdo,PB,pdo,_do,BB,udo,bdo,vdo,ys,xne,Fdo,Tdo,IB,Mdo,Edo,NB,Cdo,wdo,Ado,eh,$ne,Ldo,ydo,qB,xdo,$do,kdo,oh,kne,Sdo,Rdo,jB,Pdo,Bdo,Ido,rh,Sne,Ndo,qdo,DB,jdo,Ddo,Gdo,xs,Rne,Odo,Vdo,GB,Xdo,zdo,OB,Wdo,Qdo,Hdo,th,Pne,Udo,Jdo,VB,Ydo,Kdo,Zdo,ah,Bne,eco,oco,XB,rco,tco,aco,nh,Ine,nco,sco,zB,lco,ico,dco,$s,Nne,cco,fco,WB,mco,gco,QB,hco,pco,_co,sh,qne,uco,bco,HB,vco,Fco,Tco,lh,jne,Mco,Eco,UB,Cco,wco,Aco,ks,Dne,Lco,yco,JB,xco,$co,YB,kco,Sco,Rco,Ss,Gne,Pco,Bco,KB,Ico,Nco,ZB,qco,jco,Dco,Rs,One,Gco,Oco,eI,Vco,Xco,oI,zco,Wco,Qco,Ps,Vne,Hco,Uco,rI,Jco,Yco,tI,Kco,Zco,efo,ih,ofo,dh,rA,rfo,Xne,tfo,vje,Ci,ch,zne,tA,afo,Wne,nfo,Fje,Ao,aA,sfo,nA,lfo,aI,ifo,dfo,cfo,sA,ffo,Qne,mfo,gfo,hfo,He,lA,pfo,Hne,_fo,ufo,La,bfo,Une,vfo,Ffo,Jne,Tfo,Mfo,Yne,Efo,Cfo,wfo,Y,fh,Kne,Afo,Lfo,nI,yfo,xfo,$fo,mh,Zne,kfo,Sfo,sI,Rfo,Pfo,Bfo,gh,ese,Ifo,Nfo,lI,qfo,jfo,Dfo,hh,ose,Gfo,Ofo,iI,Vfo,Xfo,zfo,ph,rse,Wfo,Qfo,dI,Hfo,Ufo,Jfo,_h,tse,Yfo,Kfo,cI,Zfo,emo,omo,uh,ase,rmo,tmo,fI,amo,nmo,smo,bh,nse,lmo,imo,mI,dmo,cmo,fmo,vh,sse,mmo,gmo,gI,hmo,pmo,_mo,Fh,lse,umo,bmo,hI,vmo,Fmo,Tmo,Th,ise,Mmo,Emo,pI,Cmo,wmo,Amo,Mh,dse,Lmo,ymo,_I,xmo,$mo,kmo,Eh,cse,Smo,Rmo,uI,Pmo,Bmo,Imo,Ch,fse,Nmo,qmo,bI,jmo,Dmo,Gmo,wh,mse,Omo,Vmo,vI,Xmo,zmo,Wmo,Ah,gse,Qmo,Hmo,FI,Umo,Jmo,Ymo,Lh,hse,Kmo,Zmo,TI,ego,ogo,rgo,yh,pse,tgo,ago,MI,ngo,sgo,lgo,xh,_se,igo,dgo,EI,cgo,fgo,mgo,$h,use,ggo,hgo,CI,pgo,_go,ugo,kh,bse,bgo,vgo,wI,Fgo,Tgo,Mgo,Sh,vse,Ego,Cgo,AI,wgo,Ago,Lgo,Rh,Fse,ygo,xgo,LI,$go,kgo,Sgo,Ph,Tse,Rgo,Pgo,yI,Bgo,Igo,Ngo,Bh,Mse,qgo,jgo,xI,Dgo,Ggo,Ogo,Ih,Ese,Vgo,Xgo,$I,zgo,Wgo,Qgo,Nh,Cse,Hgo,Ugo,kI,Jgo,Ygo,Kgo,qh,wse,Zgo,eho,SI,oho,rho,tho,jh,Ase,aho,nho,RI,sho,lho,iho,Dh,Lse,dho,cho,PI,fho,mho,gho,Gh,hho,Oh,pho,Vh,iA,_ho,yse,uho,Tje,wi,Xh,xse,dA,bho,$se,vho,Mje,Lo,cA,Fho,fA,Tho,BI,Mho,Eho,Cho,mA,who,kse,Aho,Lho,yho,Ue,gA,xho,Sse,$ho,kho,Ai,Sho,Rse,Rho,Pho,Pse,Bho,Iho,Nho,he,zh,Bse,qho,jho,II,Dho,Gho,Oho,Wh,Ise,Vho,Xho,Nse,zho,Who,Qho,Qh,qse,Hho,Uho,NI,Jho,Yho,Kho,Hh,jse,Zho,epo,qI,opo,rpo,tpo,Uh,Dse,apo,npo,jI,spo,lpo,ipo,Jh,Gse,dpo,cpo,DI,fpo,mpo,gpo,Yh,Ose,hpo,ppo,GI,_po,upo,bpo,Kh,Vse,vpo,Fpo,OI,Tpo,Mpo,Epo,Zh,Xse,Cpo,wpo,VI,Apo,Lpo,ypo,ep,zse,xpo,$po,XI,kpo,Spo,Rpo,op,Wse,Ppo,Bpo,zI,Ipo,Npo,qpo,rp,Qse,jpo,Dpo,WI,Gpo,Opo,Vpo,tp,Hse,Xpo,zpo,QI,Wpo,Qpo,Hpo,ap,Use,Upo,Jpo,HI,Ypo,Kpo,Zpo,np,Jse,e_o,o_o,UI,r_o,t_o,a_o,sp,Yse,n_o,s_o,JI,l_o,i_o,d_o,lp,Kse,c_o,f_o,YI,m_o,g_o,h_o,ip,p_o,dp,__o,cp,hA,u_o,Zse,b_o,Eje,Li,fp,ele,pA,v_o,ole,F_o,Cje,yo,_A,T_o,yi,M_o,KI,E_o,C_o,ZI,w_o,A_o,L_o,uA,y_o,rle,x_o,$_o,k_o,tt,bA,S_o,tle,R_o,P_o,xi,B_o,ale,I_o,N_o,eN,q_o,j_o,D_o,mp,G_o,Je,vA,O_o,nle,V_o,X_o,ya,z_o,sle,W_o,Q_o,lle,H_o,U_o,ile,J_o,Y_o,K_o,x,gp,dle,Z_o,euo,oN,ouo,ruo,tuo,hp,cle,auo,nuo,rN,suo,luo,iuo,pp,fle,duo,cuo,tN,fuo,muo,guo,_p,mle,huo,puo,aN,_uo,uuo,buo,up,gle,vuo,Fuo,nN,Tuo,Muo,Euo,bp,hle,Cuo,wuo,sN,Auo,Luo,yuo,vp,ple,xuo,$uo,lN,kuo,Suo,Ruo,Fp,_le,Puo,Buo,iN,Iuo,Nuo,quo,Tp,ule,juo,Duo,dN,Guo,Ouo,Vuo,Mp,ble,Xuo,zuo,cN,Wuo,Quo,Huo,Ep,vle,Uuo,Juo,fN,Yuo,Kuo,Zuo,Cp,Fle,e2o,o2o,mN,r2o,t2o,a2o,wp,Tle,n2o,s2o,gN,l2o,i2o,d2o,Ap,Mle,c2o,f2o,hN,m2o,g2o,h2o,Lp,Ele,p2o,_2o,pN,u2o,b2o,v2o,yp,Cle,F2o,T2o,_N,M2o,E2o,C2o,xp,wle,w2o,A2o,uN,L2o,y2o,x2o,$p,Ale,$2o,k2o,bN,S2o,R2o,P2o,kp,Lle,B2o,I2o,vN,N2o,q2o,j2o,Sp,yle,D2o,G2o,FN,O2o,V2o,X2o,Rp,xle,z2o,W2o,TN,Q2o,H2o,U2o,Pp,$le,J2o,Y2o,MN,K2o,Z2o,e1o,Bp,kle,o1o,r1o,EN,t1o,a1o,n1o,Ip,Sle,s1o,l1o,CN,i1o,d1o,c1o,Np,Rle,f1o,m1o,wN,g1o,h1o,p1o,qp,Ple,_1o,u1o,AN,b1o,v1o,F1o,jp,Ble,T1o,M1o,LN,E1o,C1o,w1o,Dp,Ile,A1o,L1o,yN,y1o,x1o,$1o,Gp,Nle,k1o,S1o,xN,R1o,P1o,B1o,Op,qle,I1o,N1o,$N,q1o,j1o,D1o,Vp,jle,G1o,O1o,kN,V1o,X1o,z1o,Xp,Dle,W1o,Q1o,SN,H1o,U1o,J1o,Bs,Gle,Y1o,K1o,RN,Z1o,ebo,PN,obo,rbo,tbo,zp,Ole,abo,nbo,BN,sbo,lbo,ibo,Wp,Vle,dbo,cbo,IN,fbo,mbo,gbo,Qp,Xle,hbo,pbo,NN,_bo,ubo,bbo,Hp,zle,vbo,Fbo,qN,Tbo,Mbo,Ebo,Up,Wle,Cbo,wbo,jN,Abo,Lbo,ybo,Jp,Qle,xbo,$bo,DN,kbo,Sbo,Rbo,Yp,Hle,Pbo,Bbo,GN,Ibo,Nbo,qbo,Kp,Ule,jbo,Dbo,ON,Gbo,Obo,Vbo,Zp,Jle,Xbo,zbo,VN,Wbo,Qbo,Hbo,e_,Yle,Ubo,Jbo,XN,Ybo,Kbo,Zbo,o_,Kle,evo,ovo,zN,rvo,tvo,avo,r_,Zle,nvo,svo,WN,lvo,ivo,dvo,t_,eie,cvo,fvo,QN,mvo,gvo,hvo,a_,oie,pvo,_vo,HN,uvo,bvo,vvo,n_,rie,Fvo,Tvo,UN,Mvo,Evo,Cvo,s_,tie,wvo,Avo,JN,Lvo,yvo,xvo,l_,aie,$vo,kvo,YN,Svo,Rvo,Pvo,i_,nie,Bvo,Ivo,KN,Nvo,qvo,jvo,d_,sie,Dvo,Gvo,ZN,Ovo,Vvo,Xvo,c_,lie,zvo,Wvo,eq,Qvo,Hvo,Uvo,f_,iie,Jvo,Yvo,oq,Kvo,Zvo,eFo,m_,die,oFo,rFo,rq,tFo,aFo,nFo,g_,cie,sFo,lFo,tq,iFo,dFo,cFo,h_,fie,fFo,mFo,aq,gFo,hFo,pFo,p_,mie,_Fo,uFo,nq,bFo,vFo,FFo,__,gie,TFo,MFo,sq,EFo,CFo,wFo,u_,hie,AFo,LFo,lq,yFo,xFo,$Fo,b_,pie,kFo,SFo,iq,RFo,PFo,BFo,v_,_ie,IFo,NFo,dq,qFo,jFo,DFo,F_,uie,GFo,OFo,cq,VFo,XFo,zFo,T_,bie,WFo,QFo,fq,HFo,UFo,JFo,M_,vie,YFo,KFo,mq,ZFo,e6o,o6o,E_,Fie,r6o,t6o,gq,a6o,n6o,s6o,C_,Tie,l6o,i6o,hq,d6o,c6o,f6o,w_,Mie,m6o,g6o,pq,h6o,p6o,_6o,A_,Eie,u6o,b6o,_q,v6o,F6o,T6o,L_,Cie,M6o,E6o,uq,C6o,w6o,A6o,y_,wie,L6o,y6o,bq,x6o,$6o,k6o,x_,Aie,S6o,R6o,vq,P6o,B6o,I6o,$_,Lie,N6o,q6o,Fq,j6o,D6o,G6o,k_,yie,O6o,V6o,Tq,X6o,z6o,W6o,S_,xie,Q6o,H6o,Mq,U6o,J6o,Y6o,R_,$ie,K6o,Z6o,Eq,eTo,oTo,rTo,P_,kie,tTo,aTo,Cq,nTo,sTo,lTo,B_,Sie,iTo,dTo,wq,cTo,fTo,mTo,I_,Rie,gTo,hTo,Aq,pTo,_To,uTo,N_,Pie,bTo,vTo,Lq,FTo,TTo,MTo,q_,Bie,ETo,CTo,yq,wTo,ATo,LTo,j_,Iie,yTo,xTo,xq,$To,kTo,STo,D_,Nie,RTo,PTo,$q,BTo,ITo,NTo,G_,qie,qTo,jTo,kq,DTo,GTo,OTo,O_,jie,VTo,XTo,Sq,zTo,WTo,QTo,V_,Die,HTo,UTo,Rq,JTo,YTo,KTo,X_,Gie,ZTo,e7o,Pq,o7o,r7o,t7o,z_,Oie,a7o,n7o,Bq,s7o,l7o,i7o,W_,Vie,d7o,c7o,Iq,f7o,m7o,g7o,Q_,Xie,h7o,p7o,Nq,_7o,u7o,b7o,H_,zie,v7o,F7o,qq,T7o,M7o,E7o,U_,Wie,C7o,w7o,jq,A7o,L7o,y7o,J_,Qie,x7o,$7o,Dq,k7o,S7o,R7o,Y_,Hie,P7o,B7o,Gq,I7o,N7o,q7o,K_,Uie,j7o,D7o,Oq,G7o,O7o,V7o,Z_,Jie,X7o,z7o,Vq,W7o,Q7o,H7o,eu,Yie,U7o,J7o,Xq,Y7o,K7o,Z7o,ou,Kie,e9o,o9o,zq,r9o,t9o,a9o,ru,Zie,n9o,s9o,Wq,l9o,i9o,d9o,tu,ede,c9o,f9o,Qq,m9o,g9o,h9o,au,ode,p9o,_9o,Hq,u9o,b9o,v9o,nu,rde,F9o,T9o,Uq,M9o,E9o,C9o,su,tde,w9o,A9o,Jq,L9o,y9o,x9o,lu,ade,$9o,k9o,Yq,S9o,R9o,P9o,iu,B9o,nde,I9o,N9o,sde,q9o,j9o,du,wje,$i,cu,lde,FA,D9o,ide,G9o,Aje,xo,TA,O9o,ki,V9o,Kq,X9o,z9o,Zq,W9o,Q9o,H9o,MA,U9o,dde,J9o,Y9o,K9o,at,EA,Z9o,cde,eMo,oMo,Si,rMo,fde,tMo,aMo,ej,nMo,sMo,lMo,fu,iMo,Ye,CA,dMo,mde,cMo,fMo,xa,mMo,gde,gMo,hMo,hde,pMo,_Mo,pde,uMo,bMo,vMo,G,mu,_de,FMo,TMo,oj,MMo,EMo,CMo,gu,ude,wMo,AMo,rj,LMo,yMo,xMo,hu,bde,$Mo,kMo,tj,SMo,RMo,PMo,pu,vde,BMo,IMo,aj,NMo,qMo,jMo,_u,Fde,DMo,GMo,nj,OMo,VMo,XMo,uu,Tde,zMo,WMo,sj,QMo,HMo,UMo,bu,Mde,JMo,YMo,lj,KMo,ZMo,e4o,vu,Ede,o4o,r4o,ij,t4o,a4o,n4o,Fu,Cde,s4o,l4o,dj,i4o,d4o,c4o,Tu,wde,f4o,m4o,cj,g4o,h4o,p4o,Mu,Ade,_4o,u4o,fj,b4o,v4o,F4o,Eu,Lde,T4o,M4o,mj,E4o,C4o,w4o,Cu,yde,A4o,L4o,gj,y4o,x4o,$4o,wu,xde,k4o,S4o,hj,R4o,P4o,B4o,Au,$de,I4o,N4o,pj,q4o,j4o,D4o,Lu,kde,G4o,O4o,_j,V4o,X4o,z4o,yu,Sde,W4o,Q4o,uj,H4o,U4o,J4o,xu,Rde,Y4o,K4o,bj,Z4o,eEo,oEo,$u,Pde,rEo,tEo,vj,aEo,nEo,sEo,ku,Bde,lEo,iEo,Fj,dEo,cEo,fEo,Su,Ide,mEo,gEo,Tj,hEo,pEo,_Eo,Ru,Nde,uEo,bEo,Mj,vEo,FEo,TEo,Pu,qde,MEo,EEo,Ej,CEo,wEo,AEo,Bu,jde,LEo,yEo,Cj,xEo,$Eo,kEo,Iu,Dde,SEo,REo,wj,PEo,BEo,IEo,Nu,Gde,NEo,qEo,Aj,jEo,DEo,GEo,qu,Ode,OEo,VEo,Lj,XEo,zEo,WEo,ju,Vde,QEo,HEo,yj,UEo,JEo,YEo,Du,Xde,KEo,ZEo,xj,eCo,oCo,rCo,Gu,zde,tCo,aCo,$j,nCo,sCo,lCo,Ou,Wde,iCo,dCo,kj,cCo,fCo,mCo,Vu,Qde,gCo,hCo,Sj,pCo,_Co,uCo,Xu,Hde,bCo,vCo,Rj,FCo,TCo,MCo,zu,Ude,ECo,CCo,Pj,wCo,ACo,LCo,Wu,Jde,yCo,xCo,Bj,$Co,kCo,SCo,Qu,Yde,RCo,PCo,Ij,BCo,ICo,NCo,Hu,Kde,qCo,jCo,Nj,DCo,GCo,OCo,Uu,Zde,VCo,XCo,qj,zCo,WCo,QCo,Ju,ece,HCo,UCo,jj,JCo,YCo,KCo,Yu,oce,ZCo,e5o,Dj,o5o,r5o,t5o,Ku,rce,a5o,n5o,Gj,s5o,l5o,i5o,Zu,tce,d5o,c5o,Oj,f5o,m5o,g5o,e2,h5o,ace,p5o,_5o,nce,u5o,b5o,o2,Lje,Ri,r2,sce,wA,v5o,lce,F5o,yje,$o,AA,T5o,Pi,M5o,Vj,E5o,C5o,Xj,w5o,A5o,L5o,LA,y5o,ice,x5o,$5o,k5o,nt,yA,S5o,dce,R5o,P5o,Bi,B5o,cce,I5o,N5o,zj,q5o,j5o,D5o,t2,G5o,Ke,xA,O5o,fce,V5o,X5o,$a,z5o,mce,W5o,Q5o,gce,H5o,U5o,hce,J5o,Y5o,K5o,z,a2,pce,Z5o,e3o,Wj,o3o,r3o,t3o,n2,_ce,a3o,n3o,Qj,s3o,l3o,i3o,s2,uce,d3o,c3o,Hj,f3o,m3o,g3o,l2,bce,h3o,p3o,Uj,_3o,u3o,b3o,i2,vce,v3o,F3o,Jj,T3o,M3o,E3o,d2,Fce,C3o,w3o,Yj,A3o,L3o,y3o,c2,Tce,x3o,$3o,Kj,k3o,S3o,R3o,f2,Mce,P3o,B3o,Zj,I3o,N3o,q3o,m2,Ece,j3o,D3o,eD,G3o,O3o,V3o,g2,Cce,X3o,z3o,oD,W3o,Q3o,H3o,h2,wce,U3o,J3o,rD,Y3o,K3o,Z3o,p2,Ace,e0o,o0o,tD,r0o,t0o,a0o,_2,Lce,n0o,s0o,aD,l0o,i0o,d0o,u2,yce,c0o,f0o,nD,m0o,g0o,h0o,b2,xce,p0o,_0o,sD,u0o,b0o,v0o,v2,$ce,F0o,T0o,lD,M0o,E0o,C0o,F2,kce,w0o,A0o,iD,L0o,y0o,x0o,T2,Sce,$0o,k0o,dD,S0o,R0o,P0o,M2,Rce,B0o,I0o,cD,N0o,q0o,j0o,E2,Pce,D0o,G0o,fD,O0o,V0o,X0o,C2,Bce,z0o,W0o,mD,Q0o,H0o,U0o,w2,Ice,J0o,Y0o,gD,K0o,Z0o,ewo,A2,Nce,owo,rwo,hD,two,awo,nwo,L2,qce,swo,lwo,pD,iwo,dwo,cwo,y2,jce,fwo,mwo,_D,gwo,hwo,pwo,x2,Dce,_wo,uwo,uD,bwo,vwo,Fwo,$2,Gce,Two,Mwo,bD,Ewo,Cwo,wwo,k2,Oce,Awo,Lwo,vD,ywo,xwo,$wo,S2,Vce,kwo,Swo,FD,Rwo,Pwo,Bwo,R2,Xce,Iwo,Nwo,TD,qwo,jwo,Dwo,P2,zce,Gwo,Owo,MD,Vwo,Xwo,zwo,B2,Wce,Wwo,Qwo,ED,Hwo,Uwo,Jwo,I2,Qce,Ywo,Kwo,CD,Zwo,eAo,oAo,N2,Hce,rAo,tAo,wD,aAo,nAo,sAo,q2,Uce,lAo,iAo,AD,dAo,cAo,fAo,j2,Jce,mAo,gAo,LD,hAo,pAo,_Ao,D2,Yce,uAo,bAo,yD,vAo,FAo,TAo,G2,MAo,Kce,EAo,CAo,Zce,wAo,AAo,O2,xje,Ii,V2,efe,$A,LAo,ofe,yAo,$je,ko,kA,xAo,Ni,$Ao,xD,kAo,SAo,$D,RAo,PAo,BAo,SA,IAo,rfe,NAo,qAo,jAo,st,RA,DAo,tfe,GAo,OAo,qi,VAo,afe,XAo,zAo,kD,WAo,QAo,HAo,X2,UAo,Ze,PA,JAo,nfe,YAo,KAo,ka,ZAo,sfe,eLo,oLo,lfe,rLo,tLo,ife,aLo,nLo,sLo,W,z2,dfe,lLo,iLo,SD,dLo,cLo,fLo,W2,cfe,mLo,gLo,RD,hLo,pLo,_Lo,Q2,ffe,uLo,bLo,PD,vLo,FLo,TLo,H2,mfe,MLo,ELo,BD,CLo,wLo,ALo,U2,gfe,LLo,yLo,ID,xLo,$Lo,kLo,J2,hfe,SLo,RLo,ND,PLo,BLo,ILo,Y2,pfe,NLo,qLo,qD,jLo,DLo,GLo,K2,_fe,OLo,VLo,jD,XLo,zLo,WLo,Z2,ufe,QLo,HLo,DD,ULo,JLo,YLo,e1,bfe,KLo,ZLo,GD,eyo,oyo,ryo,o1,vfe,tyo,ayo,OD,nyo,syo,lyo,r1,Ffe,iyo,dyo,VD,cyo,fyo,myo,t1,Tfe,gyo,hyo,XD,pyo,_yo,uyo,a1,Mfe,byo,vyo,zD,Fyo,Tyo,Myo,n1,Efe,Eyo,Cyo,WD,wyo,Ayo,Lyo,s1,Cfe,yyo,xyo,QD,$yo,kyo,Syo,l1,wfe,Ryo,Pyo,HD,Byo,Iyo,Nyo,i1,Afe,qyo,jyo,UD,Dyo,Gyo,Oyo,d1,Lfe,Vyo,Xyo,JD,zyo,Wyo,Qyo,c1,yfe,Hyo,Uyo,YD,Jyo,Yyo,Kyo,f1,xfe,Zyo,e8o,KD,o8o,r8o,t8o,m1,$fe,a8o,n8o,ZD,s8o,l8o,i8o,g1,kfe,d8o,c8o,eG,f8o,m8o,g8o,h1,Sfe,h8o,p8o,oG,_8o,u8o,b8o,p1,Rfe,v8o,F8o,rG,T8o,M8o,E8o,_1,Pfe,C8o,w8o,tG,A8o,L8o,y8o,u1,Bfe,x8o,$8o,aG,k8o,S8o,R8o,b1,Ife,P8o,B8o,nG,I8o,N8o,q8o,v1,Nfe,j8o,D8o,sG,G8o,O8o,V8o,F1,qfe,X8o,z8o,lG,W8o,Q8o,H8o,T1,jfe,U8o,J8o,iG,Y8o,K8o,Z8o,M1,Dfe,exo,oxo,Gfe,rxo,txo,axo,E1,Ofe,nxo,sxo,dG,lxo,ixo,dxo,C1,Vfe,cxo,fxo,cG,mxo,gxo,hxo,w1,Xfe,pxo,_xo,fG,uxo,bxo,vxo,A1,zfe,Fxo,Txo,mG,Mxo,Exo,Cxo,L1,wxo,Wfe,Axo,Lxo,Qfe,yxo,xxo,y1,kje,ji,x1,Hfe,BA,$xo,Ufe,kxo,Sje,So,IA,Sxo,Di,Rxo,gG,Pxo,Bxo,hG,Ixo,Nxo,qxo,NA,jxo,Jfe,Dxo,Gxo,Oxo,lt,qA,Vxo,Yfe,Xxo,zxo,Gi,Wxo,Kfe,Qxo,Hxo,pG,Uxo,Jxo,Yxo,$1,Kxo,eo,jA,Zxo,Zfe,e$o,o$o,Sa,r$o,eme,t$o,a$o,ome,n$o,s$o,rme,l$o,i$o,d$o,pe,k1,tme,c$o,f$o,_G,m$o,g$o,h$o,S1,ame,p$o,_$o,uG,u$o,b$o,v$o,R1,nme,F$o,T$o,bG,M$o,E$o,C$o,P1,sme,w$o,A$o,vG,L$o,y$o,x$o,B1,lme,$$o,k$o,FG,S$o,R$o,P$o,I1,ime,B$o,I$o,TG,N$o,q$o,j$o,N1,dme,D$o,G$o,MG,O$o,V$o,X$o,q1,cme,z$o,W$o,EG,Q$o,H$o,U$o,j1,fme,J$o,Y$o,CG,K$o,Z$o,eko,D1,mme,oko,rko,wG,tko,ako,nko,G1,gme,sko,lko,AG,iko,dko,cko,O1,hme,fko,mko,LG,gko,hko,pko,V1,pme,_ko,uko,yG,bko,vko,Fko,X1,_me,Tko,Mko,xG,Eko,Cko,wko,z1,ume,Ako,Lko,$G,yko,xko,$ko,W1,bme,kko,Sko,kG,Rko,Pko,Bko,Q1,vme,Iko,Nko,SG,qko,jko,Dko,H1,Gko,Fme,Oko,Vko,Tme,Xko,zko,U1,Rje,Oi,J1,Mme,DA,Wko,Eme,Qko,Pje,Ro,GA,Hko,Vi,Uko,RG,Jko,Yko,PG,Kko,Zko,eSo,OA,oSo,Cme,rSo,tSo,aSo,it,VA,nSo,wme,sSo,lSo,Xi,iSo,Ame,dSo,cSo,BG,fSo,mSo,gSo,Y1,hSo,oo,XA,pSo,Lme,_So,uSo,Ra,bSo,yme,vSo,FSo,xme,TSo,MSo,$me,ESo,CSo,wSo,N,K1,kme,ASo,LSo,IG,ySo,xSo,$So,Z1,Sme,kSo,SSo,NG,RSo,PSo,BSo,eb,Rme,ISo,NSo,qG,qSo,jSo,DSo,ob,Pme,GSo,OSo,jG,VSo,XSo,zSo,rb,Bme,WSo,QSo,DG,HSo,USo,JSo,tb,Ime,YSo,KSo,GG,ZSo,eRo,oRo,ab,Nme,rRo,tRo,OG,aRo,nRo,sRo,nb,qme,lRo,iRo,VG,dRo,cRo,fRo,sb,jme,mRo,gRo,XG,hRo,pRo,_Ro,lb,Dme,uRo,bRo,zG,vRo,FRo,TRo,ib,Gme,MRo,ERo,WG,CRo,wRo,ARo,db,Ome,LRo,yRo,QG,xRo,$Ro,kRo,cb,Vme,SRo,RRo,HG,PRo,BRo,IRo,fb,Xme,NRo,qRo,UG,jRo,DRo,GRo,mb,zme,ORo,VRo,JG,XRo,zRo,WRo,gb,Wme,QRo,HRo,YG,URo,JRo,YRo,hb,Qme,KRo,ZRo,KG,ePo,oPo,rPo,pb,Hme,tPo,aPo,ZG,nPo,sPo,lPo,_b,Ume,iPo,dPo,eO,cPo,fPo,mPo,ub,Jme,gPo,hPo,oO,pPo,_Po,uPo,bb,Yme,bPo,vPo,rO,FPo,TPo,MPo,vb,Kme,EPo,CPo,tO,wPo,APo,LPo,Fb,Zme,yPo,xPo,aO,$Po,kPo,SPo,Tb,ege,RPo,PPo,nO,BPo,IPo,NPo,Mb,oge,qPo,jPo,sO,DPo,GPo,OPo,Eb,rge,VPo,XPo,lO,zPo,WPo,QPo,Cb,tge,HPo,UPo,iO,JPo,YPo,KPo,wb,age,ZPo,eBo,dO,oBo,rBo,tBo,Ab,nge,aBo,nBo,cO,sBo,lBo,iBo,Lb,sge,dBo,cBo,fO,fBo,mBo,gBo,yb,lge,hBo,pBo,mO,_Bo,uBo,bBo,xb,ige,vBo,FBo,gO,TBo,MBo,EBo,$b,dge,CBo,wBo,hO,ABo,LBo,yBo,kb,cge,xBo,$Bo,pO,kBo,SBo,RBo,Sb,fge,PBo,BBo,_O,IBo,NBo,qBo,Rb,mge,jBo,DBo,uO,GBo,OBo,VBo,Pb,gge,XBo,zBo,bO,WBo,QBo,HBo,Bb,hge,UBo,JBo,vO,YBo,KBo,ZBo,Ib,pge,eIo,oIo,FO,rIo,tIo,aIo,Nb,_ge,nIo,sIo,TO,lIo,iIo,dIo,qb,uge,cIo,fIo,MO,mIo,gIo,hIo,jb,bge,pIo,_Io,EO,uIo,bIo,vIo,Db,vge,FIo,TIo,CO,MIo,EIo,CIo,Gb,Fge,wIo,AIo,wO,LIo,yIo,xIo,Ob,Tge,$Io,kIo,AO,SIo,RIo,PIo,Vb,Mge,BIo,IIo,LO,NIo,qIo,jIo,Xb,Ege,DIo,GIo,yO,OIo,VIo,XIo,zb,zIo,Cge,WIo,QIo,wge,HIo,UIo,Wb,Bje,zi,Qb,Age,zA,JIo,Lge,YIo,Ije,Po,WA,KIo,Wi,ZIo,xO,eNo,oNo,$O,rNo,tNo,aNo,QA,nNo,yge,sNo,lNo,iNo,dt,HA,dNo,xge,cNo,fNo,Qi,mNo,$ge,gNo,hNo,kO,pNo,_No,uNo,Hb,bNo,ro,UA,vNo,kge,FNo,TNo,Pa,MNo,Sge,ENo,CNo,Rge,wNo,ANo,Pge,LNo,yNo,xNo,K,Ub,Bge,$No,kNo,SO,SNo,RNo,PNo,Jb,Ige,BNo,INo,RO,NNo,qNo,jNo,Yb,Nge,DNo,GNo,PO,ONo,VNo,XNo,Kb,qge,zNo,WNo,BO,QNo,HNo,UNo,Zb,jge,JNo,YNo,IO,KNo,ZNo,eqo,ev,Dge,oqo,rqo,NO,tqo,aqo,nqo,ov,Gge,sqo,lqo,qO,iqo,dqo,cqo,rv,Oge,fqo,mqo,jO,gqo,hqo,pqo,tv,Vge,_qo,uqo,DO,bqo,vqo,Fqo,av,Xge,Tqo,Mqo,GO,Eqo,Cqo,wqo,nv,zge,Aqo,Lqo,OO,yqo,xqo,$qo,sv,Wge,kqo,Sqo,VO,Rqo,Pqo,Bqo,lv,Qge,Iqo,Nqo,XO,qqo,jqo,Dqo,iv,Hge,Gqo,Oqo,zO,Vqo,Xqo,zqo,dv,Uge,Wqo,Qqo,WO,Hqo,Uqo,Jqo,cv,Jge,Yqo,Kqo,QO,Zqo,ejo,ojo,fv,Yge,rjo,tjo,HO,ajo,njo,sjo,mv,Kge,ljo,ijo,UO,djo,cjo,fjo,gv,Zge,mjo,gjo,JO,hjo,pjo,_jo,hv,ehe,ujo,bjo,YO,vjo,Fjo,Tjo,pv,ohe,Mjo,Ejo,KO,Cjo,wjo,Ajo,_v,rhe,Ljo,yjo,ZO,xjo,$jo,kjo,uv,the,Sjo,Rjo,eV,Pjo,Bjo,Ijo,bv,ahe,Njo,qjo,oV,jjo,Djo,Gjo,vv,nhe,Ojo,Vjo,rV,Xjo,zjo,Wjo,Fv,she,Qjo,Hjo,tV,Ujo,Jjo,Yjo,Tv,lhe,Kjo,Zjo,aV,eDo,oDo,rDo,Mv,ihe,tDo,aDo,nV,nDo,sDo,lDo,Ev,dhe,iDo,dDo,sV,cDo,fDo,mDo,Cv,gDo,che,hDo,pDo,fhe,_Do,uDo,wv,Nje,Hi,Av,mhe,JA,bDo,ghe,vDo,qje,Bo,YA,FDo,Ui,TDo,lV,MDo,EDo,iV,CDo,wDo,ADo,KA,LDo,hhe,yDo,xDo,$Do,ct,ZA,kDo,phe,SDo,RDo,Ji,PDo,_he,BDo,IDo,dV,NDo,qDo,jDo,Lv,DDo,to,eL,GDo,uhe,ODo,VDo,Ba,XDo,bhe,zDo,WDo,vhe,QDo,HDo,Fhe,UDo,JDo,YDo,Yr,yv,The,KDo,ZDo,cV,eGo,oGo,rGo,xv,Mhe,tGo,aGo,fV,nGo,sGo,lGo,$v,Ehe,iGo,dGo,mV,cGo,fGo,mGo,kv,Che,gGo,hGo,gV,pGo,_Go,uGo,Sv,whe,bGo,vGo,hV,FGo,TGo,MGo,Rv,EGo,Ahe,CGo,wGo,Lhe,AGo,LGo,Pv,jje,Yi,Bv,yhe,oL,yGo,xhe,xGo,Dje,Io,rL,$Go,Ki,kGo,pV,SGo,RGo,_V,PGo,BGo,IGo,tL,NGo,$he,qGo,jGo,DGo,ft,aL,GGo,khe,OGo,VGo,Zi,XGo,She,zGo,WGo,uV,QGo,HGo,UGo,Iv,JGo,ao,nL,YGo,Rhe,KGo,ZGo,Ia,eOo,Phe,oOo,rOo,Bhe,tOo,aOo,Ihe,nOo,sOo,lOo,U,Nv,Nhe,iOo,dOo,bV,cOo,fOo,mOo,qv,qhe,gOo,hOo,vV,pOo,_Oo,uOo,jv,jhe,bOo,vOo,FV,FOo,TOo,MOo,Dv,Dhe,EOo,COo,TV,wOo,AOo,LOo,Gv,Ghe,yOo,xOo,MV,$Oo,kOo,SOo,Ov,Ohe,ROo,POo,EV,BOo,IOo,NOo,Vv,Vhe,qOo,jOo,CV,DOo,GOo,OOo,Xv,Xhe,VOo,XOo,wV,zOo,WOo,QOo,zv,zhe,HOo,UOo,AV,JOo,YOo,KOo,Wv,Whe,ZOo,eVo,LV,oVo,rVo,tVo,Qv,Qhe,aVo,nVo,yV,sVo,lVo,iVo,Hv,Hhe,dVo,cVo,xV,fVo,mVo,gVo,Uv,Uhe,hVo,pVo,$V,_Vo,uVo,bVo,Jv,Jhe,vVo,FVo,kV,TVo,MVo,EVo,Yv,Yhe,CVo,wVo,SV,AVo,LVo,yVo,Kv,Khe,xVo,$Vo,RV,kVo,SVo,RVo,Zv,Zhe,PVo,BVo,PV,IVo,NVo,qVo,eF,epe,jVo,DVo,BV,GVo,OVo,VVo,oF,ope,XVo,zVo,IV,WVo,QVo,HVo,rF,rpe,UVo,JVo,NV,YVo,KVo,ZVo,tF,tpe,eXo,oXo,qV,rXo,tXo,aXo,aF,ape,nXo,sXo,jV,lXo,iXo,dXo,nF,npe,cXo,fXo,DV,mXo,gXo,hXo,sF,spe,pXo,_Xo,GV,uXo,bXo,vXo,lF,lpe,FXo,TXo,OV,MXo,EXo,CXo,iF,ipe,wXo,AXo,VV,LXo,yXo,xXo,dF,dpe,$Xo,kXo,XV,SXo,RXo,PXo,cF,cpe,BXo,IXo,zV,NXo,qXo,jXo,fF,fpe,DXo,GXo,WV,OXo,VXo,XXo,mF,mpe,zXo,WXo,QV,QXo,HXo,UXo,gF,gpe,JXo,YXo,HV,KXo,ZXo,ezo,hF,hpe,ozo,rzo,UV,tzo,azo,nzo,pF,ppe,szo,lzo,JV,izo,dzo,czo,_F,_pe,fzo,mzo,YV,gzo,hzo,pzo,uF,_zo,upe,uzo,bzo,bpe,vzo,Fzo,bF,Gje,ed,vF,vpe,sL,Tzo,Fpe,Mzo,Oje,No,lL,Ezo,od,Czo,KV,wzo,Azo,ZV,Lzo,yzo,xzo,iL,$zo,Tpe,kzo,Szo,Rzo,mt,dL,Pzo,Mpe,Bzo,Izo,rd,Nzo,Epe,qzo,jzo,eX,Dzo,Gzo,Ozo,FF,Vzo,no,cL,Xzo,Cpe,zzo,Wzo,Na,Qzo,wpe,Hzo,Uzo,Ape,Jzo,Yzo,Lpe,Kzo,Zzo,eWo,V,TF,ype,oWo,rWo,oX,tWo,aWo,nWo,MF,xpe,sWo,lWo,rX,iWo,dWo,cWo,EF,$pe,fWo,mWo,tX,gWo,hWo,pWo,CF,kpe,_Wo,uWo,aX,bWo,vWo,FWo,wF,Spe,TWo,MWo,nX,EWo,CWo,wWo,AF,Rpe,AWo,LWo,sX,yWo,xWo,$Wo,LF,Ppe,kWo,SWo,lX,RWo,PWo,BWo,yF,Bpe,IWo,NWo,iX,qWo,jWo,DWo,xF,Ipe,GWo,OWo,dX,VWo,XWo,zWo,$F,Npe,WWo,QWo,cX,HWo,UWo,JWo,kF,qpe,YWo,KWo,fX,ZWo,eQo,oQo,SF,jpe,rQo,tQo,mX,aQo,nQo,sQo,RF,Dpe,lQo,iQo,gX,dQo,cQo,fQo,PF,Gpe,mQo,gQo,hX,hQo,pQo,_Qo,BF,Ope,uQo,bQo,pX,vQo,FQo,TQo,IF,Vpe,MQo,EQo,_X,CQo,wQo,AQo,NF,Xpe,LQo,yQo,uX,xQo,$Qo,kQo,qF,zpe,SQo,RQo,bX,PQo,BQo,IQo,jF,Wpe,NQo,qQo,vX,jQo,DQo,GQo,DF,Qpe,OQo,VQo,FX,XQo,zQo,WQo,GF,Hpe,QQo,HQo,TX,UQo,JQo,YQo,OF,Upe,KQo,ZQo,MX,eHo,oHo,rHo,VF,Jpe,tHo,aHo,EX,nHo,sHo,lHo,XF,Ype,iHo,dHo,CX,cHo,fHo,mHo,zF,Kpe,gHo,hHo,wX,pHo,_Ho,uHo,WF,Zpe,bHo,vHo,AX,FHo,THo,MHo,QF,e_e,EHo,CHo,LX,wHo,AHo,LHo,HF,o_e,yHo,xHo,yX,$Ho,kHo,SHo,UF,r_e,RHo,PHo,xX,BHo,IHo,NHo,JF,t_e,qHo,jHo,$X,DHo,GHo,OHo,YF,a_e,VHo,XHo,kX,zHo,WHo,QHo,KF,n_e,HHo,UHo,SX,JHo,YHo,KHo,ZF,s_e,ZHo,eUo,RX,oUo,rUo,tUo,e6,l_e,aUo,nUo,PX,sUo,lUo,iUo,o6,i_e,dUo,cUo,BX,fUo,mUo,gUo,r6,d_e,hUo,pUo,IX,_Uo,uUo,bUo,t6,c_e,vUo,FUo,NX,TUo,MUo,EUo,a6,f_e,CUo,wUo,qX,AUo,LUo,yUo,n6,m_e,xUo,$Uo,jX,kUo,SUo,RUo,s6,g_e,PUo,BUo,DX,IUo,NUo,qUo,l6,jUo,h_e,DUo,GUo,p_e,OUo,VUo,i6,Vje,td,d6,__e,fL,XUo,u_e,zUo,Xje,qo,mL,WUo,ad,QUo,GX,HUo,UUo,OX,JUo,YUo,KUo,gL,ZUo,b_e,eJo,oJo,rJo,gt,hL,tJo,v_e,aJo,nJo,nd,sJo,F_e,lJo,iJo,VX,dJo,cJo,fJo,c6,mJo,so,pL,gJo,T_e,hJo,pJo,qa,_Jo,M_e,uJo,bJo,E_e,vJo,FJo,C_e,TJo,MJo,EJo,w_e,f6,A_e,CJo,wJo,XX,AJo,LJo,yJo,m6,xJo,L_e,$Jo,kJo,y_e,SJo,RJo,g6,zje,sd,h6,x_e,_L,PJo,$_e,BJo,Wje,jo,uL,IJo,ld,NJo,zX,qJo,jJo,WX,DJo,GJo,OJo,bL,VJo,k_e,XJo,zJo,WJo,ht,vL,QJo,S_e,HJo,UJo,id,JJo,R_e,YJo,KJo,QX,ZJo,eYo,oYo,p6,rYo,lo,FL,tYo,P_e,aYo,nYo,ja,sYo,B_e,lYo,iYo,I_e,dYo,cYo,N_e,fYo,mYo,gYo,Fe,_6,q_e,hYo,pYo,HX,_Yo,uYo,bYo,u6,j_e,vYo,FYo,UX,TYo,MYo,EYo,b6,D_e,CYo,wYo,JX,AYo,LYo,yYo,v6,G_e,xYo,$Yo,YX,kYo,SYo,RYo,Is,O_e,PYo,BYo,KX,IYo,NYo,ZX,qYo,jYo,DYo,F6,V_e,GYo,OYo,ez,VYo,XYo,zYo,Ns,X_e,WYo,QYo,oz,HYo,UYo,rz,JYo,YYo,KYo,pt,z_e,ZYo,eKo,tz,oKo,rKo,az,tKo,aKo,nz,nKo,sKo,lKo,T6,W_e,iKo,dKo,sz,cKo,fKo,mKo,M6,Q_e,gKo,hKo,lz,pKo,_Ko,uKo,E6,H_e,bKo,vKo,iz,FKo,TKo,MKo,C6,U_e,EKo,CKo,dz,wKo,AKo,LKo,w6,J_e,yKo,xKo,cz,$Ko,kKo,SKo,A6,Y_e,RKo,PKo,fz,BKo,IKo,NKo,L6,K_e,qKo,jKo,mz,DKo,GKo,OKo,y6,VKo,Z_e,XKo,zKo,eue,WKo,QKo,x6,Qje,dd,$6,oue,TL,HKo,rue,UKo,Hje,Do,ML,JKo,cd,YKo,gz,KKo,ZKo,hz,eZo,oZo,rZo,EL,tZo,tue,aZo,nZo,sZo,_t,CL,lZo,aue,iZo,dZo,fd,cZo,nue,fZo,mZo,pz,gZo,hZo,pZo,k6,_Zo,io,wL,uZo,sue,bZo,vZo,Da,FZo,lue,TZo,MZo,iue,EZo,CZo,due,wZo,AZo,LZo,cue,S6,fue,yZo,xZo,_z,$Zo,kZo,SZo,R6,RZo,mue,PZo,BZo,gue,IZo,NZo,P6,Uje,md,B6,hue,AL,qZo,pue,jZo,Jje,Go,LL,DZo,gd,GZo,uz,OZo,VZo,bz,XZo,zZo,WZo,yL,QZo,_ue,HZo,UZo,JZo,ut,xL,YZo,uue,KZo,ZZo,hd,eer,bue,oer,rer,vz,ter,aer,ner,I6,ser,co,$L,ler,vue,ier,der,Ga,cer,Fue,fer,mer,Tue,ger,her,Mue,per,_er,uer,Re,N6,Eue,ber,ver,Fz,Fer,Ter,Mer,q6,Cue,Eer,Cer,Tz,wer,Aer,Ler,j6,wue,yer,xer,Mz,$er,ker,Ser,D6,Aue,Rer,Per,Ez,Ber,Ier,Ner,G6,Lue,qer,jer,Cz,Der,Ger,Oer,O6,yue,Ver,Xer,wz,zer,Wer,Qer,V6,xue,Her,Uer,Az,Jer,Yer,Ker,X6,$ue,Zer,eor,Lz,oor,ror,tor,z6,kue,aor,nor,yz,sor,lor,ior,W6,dor,Sue,cor,mor,Rue,gor,hor,Q6,Yje,pd,H6,Pue,kL,por,Bue,_or,Kje,Oo,SL,uor,_d,bor,xz,vor,For,$z,Tor,Mor,Eor,RL,Cor,Iue,wor,Aor,Lor,bt,PL,yor,Nue,xor,$or,ud,kor,que,Sor,Ror,kz,Por,Bor,Ior,U6,Nor,fo,BL,qor,jue,jor,Dor,Oa,Gor,Due,Oor,Vor,Gue,Xor,zor,Oue,Wor,Qor,Hor,Kr,J6,Vue,Uor,Jor,Sz,Yor,Kor,Zor,Y6,Xue,err,orr,Rz,rrr,trr,arr,K6,zue,nrr,srr,Pz,lrr,irr,drr,Z6,Wue,crr,frr,Bz,mrr,grr,hrr,eT,Que,prr,_rr,Iz,urr,brr,vrr,oT,Frr,Hue,Trr,Mrr,Uue,Err,Crr,rT,Zje,bd,tT,Jue,IL,wrr,Yue,Arr,eDe,Vo,NL,Lrr,vd,yrr,Nz,xrr,$rr,qz,krr,Srr,Rrr,qL,Prr,Kue,Brr,Irr,Nrr,vt,jL,qrr,Zue,jrr,Drr,Fd,Grr,e2e,Orr,Vrr,jz,Xrr,zrr,Wrr,aT,Qrr,mo,DL,Hrr,o2e,Urr,Jrr,Va,Yrr,r2e,Krr,Zrr,t2e,etr,otr,a2e,rtr,ttr,atr,Pe,nT,n2e,ntr,str,Dz,ltr,itr,dtr,sT,s2e,ctr,ftr,Gz,mtr,gtr,htr,lT,l2e,ptr,_tr,Oz,utr,btr,vtr,iT,i2e,Ftr,Ttr,Vz,Mtr,Etr,Ctr,dT,d2e,wtr,Atr,Xz,Ltr,ytr,xtr,cT,c2e,$tr,ktr,zz,Str,Rtr,Ptr,fT,f2e,Btr,Itr,Wz,Ntr,qtr,jtr,mT,m2e,Dtr,Gtr,Qz,Otr,Vtr,Xtr,gT,g2e,ztr,Wtr,Hz,Qtr,Htr,Utr,hT,Jtr,h2e,Ytr,Ktr,p2e,Ztr,ear,pT,oDe,Td,_T,_2e,GL,oar,u2e,rar,rDe,Xo,OL,tar,Md,aar,Uz,nar,sar,Jz,lar,iar,dar,VL,car,b2e,far,mar,gar,Ft,XL,har,v2e,par,_ar,Ed,uar,F2e,bar,Far,Yz,Tar,Mar,Ear,uT,Car,go,zL,war,T2e,Aar,Lar,Xa,yar,M2e,xar,$ar,E2e,kar,Sar,C2e,Rar,Par,Bar,WL,bT,w2e,Iar,Nar,Kz,qar,jar,Dar,vT,A2e,Gar,Oar,Zz,Var,Xar,zar,FT,War,L2e,Qar,Har,y2e,Uar,Jar,TT,tDe,Cd,MT,x2e,QL,Yar,$2e,Kar,aDe,zo,HL,Zar,wd,enr,eW,onr,rnr,oW,tnr,anr,nnr,UL,snr,k2e,lnr,inr,dnr,Tt,JL,cnr,S2e,fnr,mnr,Ad,gnr,R2e,hnr,pnr,rW,_nr,unr,bnr,ET,vnr,ho,YL,Fnr,P2e,Tnr,Mnr,za,Enr,B2e,Cnr,wnr,I2e,Anr,Lnr,N2e,ynr,xnr,$nr,Zr,CT,q2e,knr,Snr,tW,Rnr,Pnr,Bnr,wT,j2e,Inr,Nnr,aW,qnr,jnr,Dnr,AT,D2e,Gnr,Onr,nW,Vnr,Xnr,znr,LT,G2e,Wnr,Qnr,sW,Hnr,Unr,Jnr,yT,O2e,Ynr,Knr,lW,Znr,esr,osr,xT,rsr,V2e,tsr,asr,X2e,nsr,ssr,$T,nDe,Ld,kT,z2e,KL,lsr,W2e,isr,sDe,Wo,ZL,dsr,yd,csr,iW,fsr,msr,dW,gsr,hsr,psr,ey,_sr,Q2e,usr,bsr,vsr,Mt,oy,Fsr,H2e,Tsr,Msr,xd,Esr,U2e,Csr,wsr,cW,Asr,Lsr,ysr,ST,xsr,po,ry,$sr,J2e,ksr,Ssr,Wa,Rsr,Y2e,Psr,Bsr,K2e,Isr,Nsr,Z2e,qsr,jsr,Dsr,$d,RT,e1e,Gsr,Osr,fW,Vsr,Xsr,zsr,PT,o1e,Wsr,Qsr,mW,Hsr,Usr,Jsr,BT,r1e,Ysr,Ksr,gW,Zsr,elr,olr,IT,rlr,t1e,tlr,alr,a1e,nlr,slr,NT,lDe,kd,qT,n1e,ty,llr,s1e,ilr,iDe,Qo,ay,dlr,Sd,clr,hW,flr,mlr,pW,glr,hlr,plr,ny,_lr,l1e,ulr,blr,vlr,Et,sy,Flr,i1e,Tlr,Mlr,Rd,Elr,d1e,Clr,wlr,_W,Alr,Llr,ylr,jT,xlr,_o,ly,$lr,c1e,klr,Slr,Qa,Rlr,f1e,Plr,Blr,m1e,Ilr,Nlr,g1e,qlr,jlr,Dlr,iy,DT,h1e,Glr,Olr,uW,Vlr,Xlr,zlr,GT,p1e,Wlr,Qlr,bW,Hlr,Ulr,Jlr,OT,Ylr,_1e,Klr,Zlr,u1e,eir,oir,VT,dDe,Pd,XT,b1e,dy,rir,v1e,tir,cDe,Ho,cy,air,Bd,nir,vW,sir,lir,FW,iir,dir,cir,fy,fir,F1e,mir,gir,hir,Ct,my,pir,T1e,_ir,uir,Id,bir,M1e,vir,Fir,TW,Tir,Mir,Eir,zT,Cir,uo,gy,wir,E1e,Air,Lir,Ha,yir,C1e,xir,$ir,w1e,kir,Sir,A1e,Rir,Pir,Bir,L1e,WT,y1e,Iir,Nir,MW,qir,jir,Dir,QT,Gir,x1e,Oir,Vir,$1e,Xir,zir,HT,fDe,Nd,UT,k1e,hy,Wir,S1e,Qir,mDe,Uo,py,Hir,qd,Uir,EW,Jir,Yir,CW,Kir,Zir,edr,_y,odr,R1e,rdr,tdr,adr,wt,uy,ndr,P1e,sdr,ldr,jd,idr,B1e,ddr,cdr,wW,fdr,mdr,gdr,JT,hdr,bo,by,pdr,I1e,_dr,udr,Ua,bdr,N1e,vdr,Fdr,q1e,Tdr,Mdr,j1e,Edr,Cdr,wdr,Ja,YT,D1e,Adr,Ldr,AW,ydr,xdr,$dr,KT,G1e,kdr,Sdr,LW,Rdr,Pdr,Bdr,ZT,O1e,Idr,Ndr,yW,qdr,jdr,Ddr,e7,V1e,Gdr,Odr,xW,Vdr,Xdr,zdr,o7,Wdr,X1e,Qdr,Hdr,z1e,Udr,Jdr,r7,gDe,Dd,t7,W1e,vy,Ydr,Q1e,Kdr,hDe,Jo,Fy,Zdr,Gd,ecr,$W,ocr,rcr,kW,tcr,acr,ncr,Ty,scr,H1e,lcr,icr,dcr,At,My,ccr,U1e,fcr,mcr,Od,gcr,J1e,hcr,pcr,SW,_cr,ucr,bcr,a7,vcr,vo,Ey,Fcr,Y1e,Tcr,Mcr,Ya,Ecr,K1e,Ccr,wcr,Z1e,Acr,Lcr,ebe,ycr,xcr,$cr,obe,n7,rbe,kcr,Scr,RW,Rcr,Pcr,Bcr,s7,Icr,tbe,Ncr,qcr,abe,jcr,Dcr,l7,pDe,Vd,i7,nbe,Cy,Gcr,sbe,Ocr,_De,Yo,wy,Vcr,Xd,Xcr,PW,zcr,Wcr,BW,Qcr,Hcr,Ucr,Ay,Jcr,lbe,Ycr,Kcr,Zcr,Lt,Ly,efr,ibe,ofr,rfr,zd,tfr,dbe,afr,nfr,IW,sfr,lfr,ifr,d7,dfr,wr,yy,cfr,cbe,ffr,mfr,Ka,gfr,fbe,hfr,pfr,mbe,_fr,ufr,gbe,bfr,vfr,Ffr,q,c7,hbe,Tfr,Mfr,NW,Efr,Cfr,wfr,f7,pbe,Afr,Lfr,qW,yfr,xfr,$fr,m7,_be,kfr,Sfr,jW,Rfr,Pfr,Bfr,g7,ube,Ifr,Nfr,DW,qfr,jfr,Dfr,h7,bbe,Gfr,Ofr,GW,Vfr,Xfr,zfr,p7,vbe,Wfr,Qfr,OW,Hfr,Ufr,Jfr,_7,Fbe,Yfr,Kfr,VW,Zfr,emr,omr,u7,Tbe,rmr,tmr,XW,amr,nmr,smr,b7,Mbe,lmr,imr,zW,dmr,cmr,fmr,v7,Ebe,mmr,gmr,WW,hmr,pmr,_mr,F7,Cbe,umr,bmr,QW,vmr,Fmr,Tmr,T7,wbe,Mmr,Emr,HW,Cmr,wmr,Amr,M7,Abe,Lmr,ymr,UW,xmr,$mr,kmr,E7,Lbe,Smr,Rmr,JW,Pmr,Bmr,Imr,C7,ybe,Nmr,qmr,YW,jmr,Dmr,Gmr,w7,xbe,Omr,Vmr,KW,Xmr,zmr,Wmr,A7,$be,Qmr,Hmr,ZW,Umr,Jmr,Ymr,qs,kbe,Kmr,Zmr,eQ,egr,ogr,oQ,rgr,tgr,agr,L7,Sbe,ngr,sgr,rQ,lgr,igr,dgr,y7,Rbe,cgr,fgr,tQ,mgr,ggr,hgr,x7,Pbe,pgr,_gr,aQ,ugr,bgr,vgr,$7,Bbe,Fgr,Tgr,nQ,Mgr,Egr,Cgr,k7,Ibe,wgr,Agr,sQ,Lgr,ygr,xgr,S7,Nbe,$gr,kgr,lQ,Sgr,Rgr,Pgr,R7,qbe,Bgr,Igr,iQ,Ngr,qgr,jgr,P7,jbe,Dgr,Ggr,dQ,Ogr,Vgr,Xgr,B7,Dbe,zgr,Wgr,cQ,Qgr,Hgr,Ugr,I7,Gbe,Jgr,Ygr,fQ,Kgr,Zgr,ehr,N7,Obe,ohr,rhr,mQ,thr,ahr,nhr,q7,Vbe,shr,lhr,gQ,ihr,dhr,chr,j7,Xbe,fhr,mhr,hQ,ghr,hhr,phr,D7,zbe,_hr,uhr,pQ,bhr,vhr,Fhr,G7,Wbe,Thr,Mhr,_Q,Ehr,Chr,whr,O7,Qbe,Ahr,Lhr,uQ,yhr,xhr,$hr,V7,Hbe,khr,Shr,bQ,Rhr,Phr,Bhr,X7,Ube,Ihr,Nhr,vQ,qhr,jhr,Dhr,z7,Jbe,Ghr,Ohr,FQ,Vhr,Xhr,zhr,W7,Ybe,Whr,Qhr,TQ,Hhr,Uhr,Jhr,Q7,Kbe,Yhr,Khr,MQ,Zhr,epr,opr,H7,Zbe,rpr,tpr,EQ,apr,npr,spr,U7,eve,lpr,ipr,CQ,dpr,cpr,fpr,J7,ove,mpr,gpr,wQ,hpr,ppr,_pr,Y7,rve,upr,bpr,AQ,vpr,Fpr,Tpr,K7,tve,Mpr,Epr,LQ,Cpr,wpr,Apr,Z7,ave,Lpr,ypr,yQ,xpr,$pr,kpr,e9,nve,Spr,Rpr,xQ,Ppr,Bpr,Ipr,o9,sve,Npr,qpr,$Q,jpr,Dpr,Gpr,r9,uDe,Wd,t9,lve,xy,Opr,ive,Vpr,bDe,Ko,$y,Xpr,Qd,zpr,kQ,Wpr,Qpr,SQ,Hpr,Upr,Jpr,ky,Ypr,dve,Kpr,Zpr,e_r,yt,Sy,o_r,cve,r_r,t_r,Hd,a_r,fve,n_r,s_r,RQ,l_r,i_r,d_r,a9,c_r,Ar,Ry,f_r,mve,m_r,g_r,Za,h_r,gve,p_r,__r,hve,u_r,b_r,pve,v_r,F_r,T_r,se,n9,_ve,M_r,E_r,PQ,C_r,w_r,A_r,s9,uve,L_r,y_r,BQ,x_r,$_r,k_r,l9,bve,S_r,R_r,IQ,P_r,B_r,I_r,i9,vve,N_r,q_r,NQ,j_r,D_r,G_r,d9,Fve,O_r,V_r,qQ,X_r,z_r,W_r,c9,Tve,Q_r,H_r,jQ,U_r,J_r,Y_r,f9,Mve,K_r,Z_r,DQ,eur,our,rur,m9,Eve,tur,aur,GQ,nur,sur,lur,g9,Cve,iur,dur,OQ,cur,fur,mur,h9,wve,gur,hur,VQ,pur,_ur,uur,p9,Ave,bur,vur,XQ,Fur,Tur,Mur,_9,Lve,Eur,Cur,zQ,wur,Aur,Lur,u9,yve,yur,xur,WQ,$ur,kur,Sur,b9,xve,Rur,Pur,QQ,Bur,Iur,Nur,v9,$ve,qur,jur,HQ,Dur,Gur,Our,F9,kve,Vur,Xur,UQ,zur,Wur,Qur,T9,Sve,Hur,Uur,JQ,Jur,Yur,Kur,M9,Rve,Zur,e2r,YQ,o2r,r2r,t2r,E9,Pve,a2r,n2r,KQ,s2r,l2r,i2r,C9,Bve,d2r,c2r,ZQ,f2r,m2r,g2r,w9,Ive,h2r,p2r,eH,_2r,u2r,b2r,A9,Nve,v2r,F2r,oH,T2r,M2r,E2r,L9,qve,C2r,w2r,rH,A2r,L2r,y2r,y9,vDe,Ud,x9,jve,Py,x2r,Dve,$2r,FDe,Zo,By,k2r,Jd,S2r,tH,R2r,P2r,aH,B2r,I2r,N2r,Iy,q2r,Gve,j2r,D2r,G2r,xt,Ny,O2r,Ove,V2r,X2r,Yd,z2r,Vve,W2r,Q2r,nH,H2r,U2r,J2r,$9,Y2r,Lr,qy,K2r,Xve,Z2r,e1r,en,o1r,zve,r1r,t1r,Wve,a1r,n1r,Qve,s1r,l1r,i1r,Me,k9,Hve,d1r,c1r,sH,f1r,m1r,g1r,S9,Uve,h1r,p1r,lH,_1r,u1r,b1r,R9,Jve,v1r,F1r,iH,T1r,M1r,E1r,P9,Yve,C1r,w1r,dH,A1r,L1r,y1r,B9,Kve,x1r,$1r,cH,k1r,S1r,R1r,I9,Zve,P1r,B1r,fH,I1r,N1r,q1r,N9,eFe,j1r,D1r,mH,G1r,O1r,V1r,q9,oFe,X1r,z1r,gH,W1r,Q1r,H1r,j9,rFe,U1r,J1r,hH,Y1r,K1r,Z1r,D9,tFe,ebr,obr,pH,rbr,tbr,abr,G9,aFe,nbr,sbr,_H,lbr,ibr,dbr,O9,nFe,cbr,fbr,uH,mbr,gbr,hbr,V9,sFe,pbr,_br,bH,ubr,bbr,vbr,X9,TDe,Kd,z9,lFe,jy,Fbr,iFe,Tbr,MDe,er,Dy,Mbr,Zd,Ebr,vH,Cbr,wbr,FH,Abr,Lbr,ybr,Gy,xbr,dFe,$br,kbr,Sbr,$t,Oy,Rbr,cFe,Pbr,Bbr,ec,Ibr,fFe,Nbr,qbr,TH,jbr,Dbr,Gbr,W9,Obr,yr,Vy,Vbr,mFe,Xbr,zbr,on,Wbr,gFe,Qbr,Hbr,hFe,Ubr,Jbr,pFe,Ybr,Kbr,Zbr,rn,Q9,_Fe,evr,ovr,MH,rvr,tvr,avr,H9,uFe,nvr,svr,EH,lvr,ivr,dvr,U9,bFe,cvr,fvr,CH,mvr,gvr,hvr,J9,vFe,pvr,_vr,wH,uvr,bvr,vvr,Y9,EDe,oc,K9,FFe,Xy,Fvr,TFe,Tvr,CDe,or,zy,Mvr,rc,Evr,AH,Cvr,wvr,LH,Avr,Lvr,yvr,Wy,xvr,MFe,$vr,kvr,Svr,kt,Qy,Rvr,EFe,Pvr,Bvr,tc,Ivr,CFe,Nvr,qvr,yH,jvr,Dvr,Gvr,Z9,Ovr,xr,Hy,Vvr,wFe,Xvr,zvr,tn,Wvr,AFe,Qvr,Hvr,LFe,Uvr,Jvr,yFe,Yvr,Kvr,Zvr,ie,eM,xFe,eFr,oFr,xH,rFr,tFr,aFr,oM,$Fe,nFr,sFr,$H,lFr,iFr,dFr,rM,kFe,cFr,fFr,kH,mFr,gFr,hFr,tM,SFe,pFr,_Fr,SH,uFr,bFr,vFr,aM,RFe,FFr,TFr,RH,MFr,EFr,CFr,nM,PFe,wFr,AFr,PH,LFr,yFr,xFr,sM,BFe,$Fr,kFr,BH,SFr,RFr,PFr,lM,IFe,BFr,IFr,IH,NFr,qFr,jFr,iM,NFe,DFr,GFr,NH,OFr,VFr,XFr,dM,qFe,zFr,WFr,qH,QFr,HFr,UFr,cM,jFe,JFr,YFr,jH,KFr,ZFr,e6r,fM,DFe,o6r,r6r,DH,t6r,a6r,n6r,mM,GFe,s6r,l6r,GH,i6r,d6r,c6r,gM,OFe,f6r,m6r,OH,g6r,h6r,p6r,hM,VFe,_6r,u6r,VH,b6r,v6r,F6r,pM,XFe,T6r,M6r,XH,E6r,C6r,w6r,_M,zFe,A6r,L6r,zH,y6r,x6r,$6r,uM,WFe,k6r,S6r,WH,R6r,P6r,B6r,bM,QFe,I6r,N6r,QH,q6r,j6r,D6r,vM,HFe,G6r,O6r,HH,V6r,X6r,z6r,FM,wDe,ac,TM,UFe,Uy,W6r,JFe,Q6r,ADe,rr,Jy,H6r,nc,U6r,UH,J6r,Y6r,JH,K6r,Z6r,eTr,Yy,oTr,YFe,rTr,tTr,aTr,St,Ky,nTr,KFe,sTr,lTr,sc,iTr,ZFe,dTr,cTr,YH,fTr,mTr,gTr,MM,hTr,$r,Zy,pTr,e6e,_Tr,uTr,an,bTr,o6e,vTr,FTr,r6e,TTr,MTr,t6e,ETr,CTr,wTr,Le,EM,a6e,ATr,LTr,KH,yTr,xTr,$Tr,CM,n6e,kTr,STr,ZH,RTr,PTr,BTr,wM,s6e,ITr,NTr,eU,qTr,jTr,DTr,AM,l6e,GTr,OTr,oU,VTr,XTr,zTr,LM,i6e,WTr,QTr,rU,HTr,UTr,JTr,yM,d6e,YTr,KTr,tU,ZTr,e7r,o7r,xM,c6e,r7r,t7r,aU,a7r,n7r,s7r,$M,f6e,l7r,i7r,nU,d7r,c7r,f7r,kM,m6e,m7r,g7r,sU,h7r,p7r,_7r,SM,g6e,u7r,b7r,lU,v7r,F7r,T7r,RM,LDe,lc,PM,h6e,e8,M7r,p6e,E7r,yDe,tr,o8,C7r,ic,w7r,iU,A7r,L7r,dU,y7r,x7r,$7r,r8,k7r,_6e,S7r,R7r,P7r,Rt,t8,B7r,u6e,I7r,N7r,dc,q7r,b6e,j7r,D7r,cU,G7r,O7r,V7r,BM,X7r,kr,a8,z7r,v6e,W7r,Q7r,nn,H7r,F6e,U7r,J7r,T6e,Y7r,K7r,M6e,Z7r,e9r,o9r,re,IM,E6e,r9r,t9r,fU,a9r,n9r,s9r,NM,C6e,l9r,i9r,mU,d9r,c9r,f9r,qM,w6e,m9r,g9r,gU,h9r,p9r,_9r,jM,A6e,u9r,b9r,hU,v9r,F9r,T9r,DM,L6e,M9r,E9r,pU,C9r,w9r,A9r,GM,y6e,L9r,y9r,_U,x9r,$9r,k9r,OM,x6e,S9r,R9r,uU,P9r,B9r,I9r,VM,$6e,N9r,q9r,bU,j9r,D9r,G9r,XM,k6e,O9r,V9r,vU,X9r,z9r,W9r,zM,S6e,Q9r,H9r,FU,U9r,J9r,Y9r,WM,R6e,K9r,Z9r,TU,eMr,oMr,rMr,QM,P6e,tMr,aMr,MU,nMr,sMr,lMr,HM,B6e,iMr,dMr,EU,cMr,fMr,mMr,UM,I6e,gMr,hMr,CU,pMr,_Mr,uMr,JM,N6e,bMr,vMr,wU,FMr,TMr,MMr,YM,q6e,EMr,CMr,AU,wMr,AMr,LMr,KM,j6e,yMr,xMr,LU,$Mr,kMr,SMr,ZM,D6e,RMr,PMr,yU,BMr,IMr,NMr,e4,G6e,qMr,jMr,xU,DMr,GMr,OMr,o4,O6e,VMr,XMr,$U,zMr,WMr,QMr,r4,V6e,HMr,UMr,kU,JMr,YMr,KMr,t4,X6e,ZMr,e4r,SU,o4r,r4r,t4r,a4,z6e,a4r,n4r,RU,s4r,l4r,i4r,n4,W6e,d4r,c4r,PU,f4r,m4r,g4r,s4,Q6e,h4r,p4r,BU,_4r,u4r,b4r,l4,H6e,v4r,F4r,IU,T4r,M4r,E4r,i4,xDe,cc,d4,U6e,n8,C4r,J6e,w4r,$De,ar,s8,A4r,fc,L4r,NU,y4r,x4r,qU,$4r,k4r,S4r,l8,R4r,Y6e,P4r,B4r,I4r,Pt,i8,N4r,K6e,q4r,j4r,mc,D4r,Z6e,G4r,O4r,jU,V4r,X4r,z4r,c4,W4r,Sr,d8,Q4r,eTe,H4r,U4r,sn,J4r,oTe,Y4r,K4r,rTe,Z4r,eEr,tTe,oEr,rEr,tEr,_e,f4,aTe,aEr,nEr,DU,sEr,lEr,iEr,m4,nTe,dEr,cEr,GU,fEr,mEr,gEr,g4,sTe,hEr,pEr,OU,_Er,uEr,bEr,h4,lTe,vEr,FEr,VU,TEr,MEr,EEr,p4,iTe,CEr,wEr,XU,AEr,LEr,yEr,_4,dTe,xEr,$Er,zU,kEr,SEr,REr,u4,cTe,PEr,BEr,WU,IEr,NEr,qEr,b4,fTe,jEr,DEr,QU,GEr,OEr,VEr,v4,mTe,XEr,zEr,HU,WEr,QEr,HEr,F4,gTe,UEr,JEr,UU,YEr,KEr,ZEr,T4,hTe,eCr,oCr,JU,rCr,tCr,aCr,M4,pTe,nCr,sCr,YU,lCr,iCr,dCr,E4,_Te,cCr,fCr,KU,mCr,gCr,hCr,C4,uTe,pCr,_Cr,ZU,uCr,bCr,vCr,w4,bTe,FCr,TCr,eJ,MCr,ECr,CCr,A4,vTe,wCr,ACr,oJ,LCr,yCr,xCr,L4,FTe,$Cr,kCr,rJ,SCr,RCr,PCr,y4,kDe,gc,x4,TTe,c8,BCr,MTe,ICr,SDe,nr,f8,NCr,hc,qCr,tJ,jCr,DCr,aJ,GCr,OCr,VCr,m8,XCr,ETe,zCr,WCr,QCr,Bt,g8,HCr,CTe,UCr,JCr,pc,YCr,wTe,KCr,ZCr,nJ,e5r,o5r,r5r,$4,t5r,Rr,h8,a5r,ATe,n5r,s5r,ln,l5r,LTe,i5r,d5r,yTe,c5r,f5r,xTe,m5r,g5r,h5r,p8,k4,$Te,p5r,_5r,sJ,u5r,b5r,v5r,S4,kTe,F5r,T5r,lJ,M5r,E5r,C5r,R4,RDe,_c,P4,STe,_8,w5r,RTe,A5r,PDe,sr,u8,L5r,uc,y5r,iJ,x5r,$5r,dJ,k5r,S5r,R5r,b8,P5r,PTe,B5r,I5r,N5r,It,v8,q5r,BTe,j5r,D5r,bc,G5r,ITe,O5r,V5r,cJ,X5r,z5r,W5r,B4,Q5r,Pr,F8,H5r,NTe,U5r,J5r,dn,Y5r,qTe,K5r,Z5r,jTe,e3r,o3r,DTe,r3r,t3r,a3r,GTe,I4,OTe,n3r,s3r,fJ,l3r,i3r,d3r,N4,BDe,vc,q4,VTe,T8,c3r,XTe,f3r,IDe,lr,M8,m3r,Fc,g3r,mJ,h3r,p3r,gJ,_3r,u3r,b3r,E8,v3r,zTe,F3r,T3r,M3r,Nt,C8,E3r,WTe,C3r,w3r,Tc,A3r,QTe,L3r,y3r,hJ,x3r,$3r,k3r,j4,S3r,Br,w8,R3r,HTe,P3r,B3r,cn,I3r,UTe,N3r,q3r,JTe,j3r,D3r,YTe,G3r,O3r,V3r,de,D4,KTe,X3r,z3r,pJ,W3r,Q3r,H3r,G4,ZTe,U3r,J3r,_J,Y3r,K3r,Z3r,O4,e7e,e0r,o0r,uJ,r0r,t0r,a0r,V4,o7e,n0r,s0r,bJ,l0r,i0r,d0r,X4,r7e,c0r,f0r,vJ,m0r,g0r,h0r,z4,t7e,p0r,_0r,FJ,u0r,b0r,v0r,W4,a7e,F0r,T0r,TJ,M0r,E0r,C0r,Q4,n7e,w0r,A0r,MJ,L0r,y0r,x0r,H4,s7e,$0r,k0r,EJ,S0r,R0r,P0r,U4,l7e,B0r,I0r,CJ,N0r,q0r,j0r,J4,i7e,D0r,G0r,wJ,O0r,V0r,X0r,Y4,d7e,z0r,W0r,AJ,Q0r,H0r,U0r,K4,c7e,J0r,Y0r,LJ,K0r,Z0r,ewr,Z4,f7e,owr,rwr,yJ,twr,awr,nwr,eE,m7e,swr,lwr,xJ,iwr,dwr,cwr,oE,g7e,fwr,mwr,$J,gwr,hwr,pwr,rE,h7e,_wr,uwr,kJ,bwr,vwr,Fwr,tE,p7e,Twr,Mwr,SJ,Ewr,Cwr,wwr,aE,_7e,Awr,Lwr,RJ,ywr,xwr,$wr,nE,u7e,kwr,Swr,PJ,Rwr,Pwr,Bwr,sE,NDe,Mc,lE,b7e,A8,Iwr,v7e,Nwr,qDe,ir,L8,qwr,Ec,jwr,BJ,Dwr,Gwr,IJ,Owr,Vwr,Xwr,y8,zwr,F7e,Wwr,Qwr,Hwr,qt,x8,Uwr,T7e,Jwr,Ywr,Cc,Kwr,M7e,Zwr,eAr,NJ,oAr,rAr,tAr,iE,aAr,Ir,$8,nAr,E7e,sAr,lAr,fn,iAr,C7e,dAr,cAr,w7e,fAr,mAr,A7e,gAr,hAr,pAr,ce,dE,L7e,_Ar,uAr,qJ,bAr,vAr,FAr,cE,y7e,TAr,MAr,jJ,EAr,CAr,wAr,fE,x7e,AAr,LAr,DJ,yAr,xAr,$Ar,mE,$7e,kAr,SAr,GJ,RAr,PAr,BAr,gE,k7e,IAr,NAr,OJ,qAr,jAr,DAr,hE,S7e,GAr,OAr,VJ,VAr,XAr,zAr,pE,R7e,WAr,QAr,XJ,HAr,UAr,JAr,_E,P7e,YAr,KAr,zJ,ZAr,eLr,oLr,uE,B7e,rLr,tLr,WJ,aLr,nLr,sLr,bE,I7e,lLr,iLr,QJ,dLr,cLr,fLr,vE,N7e,mLr,gLr,HJ,hLr,pLr,_Lr,FE,q7e,uLr,bLr,UJ,vLr,FLr,TLr,TE,j7e,MLr,ELr,JJ,CLr,wLr,ALr,ME,D7e,LLr,yLr,YJ,xLr,$Lr,kLr,EE,G7e,SLr,RLr,KJ,PLr,BLr,ILr,CE,O7e,NLr,qLr,ZJ,jLr,DLr,GLr,wE,V7e,OLr,VLr,eY,XLr,zLr,WLr,AE,X7e,QLr,HLr,oY,ULr,JLr,YLr,LE,z7e,KLr,ZLr,rY,eyr,oyr,ryr,yE,W7e,tyr,ayr,tY,nyr,syr,lyr,xE,jDe,wc,$E,Q7e,k8,iyr,H7e,dyr,DDe,dr,S8,cyr,Ac,fyr,aY,myr,gyr,nY,hyr,pyr,_yr,R8,uyr,U7e,byr,vyr,Fyr,jt,P8,Tyr,J7e,Myr,Eyr,Lc,Cyr,Y7e,wyr,Ayr,sY,Lyr,yyr,xyr,kE,$yr,Nr,B8,kyr,K7e,Syr,Ryr,mn,Pyr,Z7e,Byr,Iyr,e9e,Nyr,qyr,o9e,jyr,Dyr,Gyr,r9e,SE,t9e,Oyr,Vyr,lY,Xyr,zyr,Wyr,RE,GDe,yc,PE,a9e,I8,Qyr,n9e,Hyr,ODe,cr,N8,Uyr,xc,Jyr,iY,Yyr,Kyr,dY,Zyr,e8r,o8r,q8,r8r,s9e,t8r,a8r,n8r,Dt,j8,s8r,l9e,l8r,i8r,$c,d8r,i9e,c8r,f8r,cY,m8r,g8r,h8r,BE,p8r,qr,D8,_8r,d9e,u8r,b8r,gn,v8r,c9e,F8r,T8r,f9e,M8r,E8r,m9e,C8r,w8r,A8r,g9e,IE,h9e,L8r,y8r,fY,x8r,$8r,k8r,NE,VDe,kc,qE,p9e,G8,S8r,_9e,R8r,XDe,fr,O8,P8r,Sc,B8r,mY,I8r,N8r,gY,q8r,j8r,D8r,V8,G8r,u9e,O8r,V8r,X8r,Gt,X8,z8r,b9e,W8r,Q8r,Rc,H8r,v9e,U8r,J8r,hY,Y8r,K8r,Z8r,jE,exr,jr,z8,oxr,F9e,rxr,txr,hn,axr,T9e,nxr,sxr,M9e,lxr,ixr,E9e,dxr,cxr,fxr,oe,DE,C9e,mxr,gxr,pY,hxr,pxr,_xr,GE,w9e,uxr,bxr,_Y,vxr,Fxr,Txr,OE,A9e,Mxr,Exr,uY,Cxr,wxr,Axr,VE,L9e,Lxr,yxr,bY,xxr,$xr,kxr,XE,y9e,Sxr,Rxr,vY,Pxr,Bxr,Ixr,zE,x9e,Nxr,qxr,FY,jxr,Dxr,Gxr,WE,$9e,Oxr,Vxr,TY,Xxr,zxr,Wxr,QE,k9e,Qxr,Hxr,MY,Uxr,Jxr,Yxr,HE,S9e,Kxr,Zxr,EY,e$r,o$r,r$r,UE,R9e,t$r,a$r,CY,n$r,s$r,l$r,JE,P9e,i$r,d$r,wY,c$r,f$r,m$r,YE,B9e,g$r,h$r,AY,p$r,_$r,u$r,KE,I9e,b$r,v$r,LY,F$r,T$r,M$r,ZE,N9e,E$r,C$r,yY,w$r,A$r,L$r,eC,q9e,y$r,x$r,xY,$$r,k$r,S$r,oC,j9e,R$r,P$r,$Y,B$r,I$r,N$r,rC,D9e,q$r,j$r,kY,D$r,G$r,O$r,tC,G9e,V$r,X$r,SY,z$r,W$r,Q$r,aC,O9e,H$r,U$r,RY,J$r,Y$r,K$r,nC,V9e,Z$r,ekr,PY,okr,rkr,tkr,sC,X9e,akr,nkr,BY,skr,lkr,ikr,lC,z9e,dkr,ckr,IY,fkr,mkr,gkr,iC,W9e,hkr,pkr,NY,_kr,ukr,bkr,dC,Q9e,vkr,Fkr,qY,Tkr,Mkr,Ekr,cC,H9e,Ckr,wkr,jY,Akr,Lkr,ykr,fC,U9e,xkr,$kr,DY,kkr,Skr,Rkr,mC,J9e,Pkr,Bkr,GY,Ikr,Nkr,qkr,gC,zDe,Pc,hC,Y9e,W8,jkr,K9e,Dkr,WDe,mr,Q8,Gkr,Bc,Okr,OY,Vkr,Xkr,VY,zkr,Wkr,Qkr,H8,Hkr,Z9e,Ukr,Jkr,Ykr,Ot,U8,Kkr,eMe,Zkr,eSr,Ic,oSr,oMe,rSr,tSr,XY,aSr,nSr,sSr,pC,lSr,Dr,J8,iSr,rMe,dSr,cSr,pn,fSr,tMe,mSr,gSr,aMe,hSr,pSr,nMe,_Sr,uSr,bSr,ye,_C,sMe,vSr,FSr,zY,TSr,MSr,ESr,uC,lMe,CSr,wSr,WY,ASr,LSr,ySr,bC,iMe,xSr,$Sr,QY,kSr,SSr,RSr,vC,dMe,PSr,BSr,HY,ISr,NSr,qSr,FC,cMe,jSr,DSr,UY,GSr,OSr,VSr,TC,fMe,XSr,zSr,JY,WSr,QSr,HSr,MC,mMe,USr,JSr,YY,YSr,KSr,ZSr,EC,gMe,eRr,oRr,KY,rRr,tRr,aRr,CC,hMe,nRr,sRr,ZY,lRr,iRr,dRr,wC,pMe,cRr,fRr,eK,mRr,gRr,hRr,AC,QDe,Nc,LC,_Me,Y8,pRr,uMe,_Rr,HDe,gr,K8,uRr,qc,bRr,oK,vRr,FRr,rK,TRr,MRr,ERr,Z8,CRr,bMe,wRr,ARr,LRr,Vt,ex,yRr,vMe,xRr,$Rr,jc,kRr,FMe,SRr,RRr,tK,PRr,BRr,IRr,yC,NRr,Gr,ox,qRr,TMe,jRr,DRr,_n,GRr,MMe,ORr,VRr,EMe,XRr,zRr,CMe,WRr,QRr,HRr,Ee,xC,wMe,URr,JRr,aK,YRr,KRr,ZRr,$C,AMe,ePr,oPr,nK,rPr,tPr,aPr,kC,LMe,nPr,sPr,sK,lPr,iPr,dPr,SC,yMe,cPr,fPr,lK,mPr,gPr,hPr,RC,xMe,pPr,_Pr,iK,uPr,bPr,vPr,PC,$Me,FPr,TPr,dK,MPr,EPr,CPr,BC,kMe,wPr,APr,cK,LPr,yPr,xPr,IC,SMe,$Pr,kPr,fK,SPr,RPr,PPr,NC,RMe,BPr,IPr,mK,NPr,qPr,jPr,qC,PMe,DPr,GPr,gK,OPr,VPr,XPr,jC,BMe,zPr,WPr,hK,QPr,HPr,UPr,DC,IMe,JPr,YPr,pK,KPr,ZPr,eBr,GC,NMe,oBr,rBr,_K,tBr,aBr,nBr,OC,UDe,Dc,VC,qMe,rx,sBr,jMe,lBr,JDe,hr,tx,iBr,Gc,dBr,uK,cBr,fBr,bK,mBr,gBr,hBr,ax,pBr,DMe,_Br,uBr,bBr,Xt,nx,vBr,GMe,FBr,TBr,Oc,MBr,OMe,EBr,CBr,vK,wBr,ABr,LBr,XC,yBr,Or,sx,xBr,VMe,$Br,kBr,un,SBr,XMe,RBr,PBr,zMe,BBr,IBr,WMe,NBr,qBr,jBr,xe,zC,QMe,DBr,GBr,FK,OBr,VBr,XBr,WC,HMe,zBr,WBr,TK,QBr,HBr,UBr,QC,UMe,JBr,YBr,MK,KBr,ZBr,eIr,HC,JMe,oIr,rIr,EK,tIr,aIr,nIr,UC,YMe,sIr,lIr,CK,iIr,dIr,cIr,JC,KMe,fIr,mIr,wK,gIr,hIr,pIr,YC,ZMe,_Ir,uIr,AK,bIr,vIr,FIr,KC,e4e,TIr,MIr,LK,EIr,CIr,wIr,ZC,o4e,AIr,LIr,yK,yIr,xIr,$Ir,e5,r4e,kIr,SIr,xK,RIr,PIr,BIr,o5,YDe,Vc,r5,t4e,lx,IIr,a4e,NIr,KDe,pr,ix,qIr,Xc,jIr,$K,DIr,GIr,kK,OIr,VIr,XIr,dx,zIr,n4e,WIr,QIr,HIr,zt,cx,UIr,s4e,JIr,YIr,zc,KIr,l4e,ZIr,eNr,SK,oNr,rNr,tNr,t5,aNr,Vr,fx,nNr,i4e,sNr,lNr,bn,iNr,d4e,dNr,cNr,c4e,fNr,mNr,f4e,gNr,hNr,pNr,$e,a5,m4e,_Nr,uNr,RK,bNr,vNr,FNr,n5,g4e,TNr,MNr,PK,ENr,CNr,wNr,s5,h4e,ANr,LNr,BK,yNr,xNr,$Nr,l5,p4e,kNr,SNr,IK,RNr,PNr,BNr,i5,_4e,INr,NNr,NK,qNr,jNr,DNr,d5,u4e,GNr,ONr,qK,VNr,XNr,zNr,c5,b4e,WNr,QNr,jK,HNr,UNr,JNr,f5,v4e,YNr,KNr,DK,ZNr,eqr,oqr,m5,F4e,rqr,tqr,GK,aqr,nqr,sqr,g5,T4e,lqr,iqr,OK,dqr,cqr,fqr,h5,ZDe,Wc,p5,M4e,mx,mqr,E4e,gqr,eGe,_r,gx,hqr,Qc,pqr,VK,_qr,uqr,XK,bqr,vqr,Fqr,hx,Tqr,C4e,Mqr,Eqr,Cqr,Wt,px,wqr,w4e,Aqr,Lqr,Hc,yqr,A4e,xqr,$qr,zK,kqr,Sqr,Rqr,_5,Pqr,Xr,_x,Bqr,L4e,Iqr,Nqr,vn,qqr,y4e,jqr,Dqr,x4e,Gqr,Oqr,$4e,Vqr,Xqr,zqr,ke,u5,k4e,Wqr,Qqr,WK,Hqr,Uqr,Jqr,b5,S4e,Yqr,Kqr,QK,Zqr,ejr,ojr,v5,R4e,rjr,tjr,HK,ajr,njr,sjr,F5,P4e,ljr,ijr,UK,djr,cjr,fjr,T5,B4e,mjr,gjr,JK,hjr,pjr,_jr,M5,I4e,ujr,bjr,YK,vjr,Fjr,Tjr,E5,N4e,Mjr,Ejr,KK,Cjr,wjr,Ajr,C5,q4e,Ljr,yjr,ZK,xjr,$jr,kjr,w5,j4e,Sjr,Rjr,eZ,Pjr,Bjr,Ijr,A5,D4e,Njr,qjr,oZ,jjr,Djr,Gjr,L5,oGe,Uc,y5,G4e,ux,Ojr,O4e,Vjr,rGe,ur,bx,Xjr,Jc,zjr,rZ,Wjr,Qjr,tZ,Hjr,Ujr,Jjr,vx,Yjr,V4e,Kjr,Zjr,eDr,Qt,Fx,oDr,X4e,rDr,tDr,Yc,aDr,z4e,nDr,sDr,aZ,lDr,iDr,dDr,x5,cDr,zr,Tx,fDr,W4e,mDr,gDr,Fn,hDr,Q4e,pDr,_Dr,H4e,uDr,bDr,U4e,vDr,FDr,TDr,Se,$5,J4e,MDr,EDr,nZ,CDr,wDr,ADr,k5,Y4e,LDr,yDr,sZ,xDr,$Dr,kDr,S5,K4e,SDr,RDr,lZ,PDr,BDr,IDr,R5,Z4e,NDr,qDr,iZ,jDr,DDr,GDr,P5,eEe,ODr,VDr,dZ,XDr,zDr,WDr,B5,oEe,QDr,HDr,cZ,UDr,JDr,YDr,I5,rEe,KDr,ZDr,fZ,eGr,oGr,rGr,N5,tEe,tGr,aGr,mZ,nGr,sGr,lGr,q5,aEe,iGr,dGr,gZ,cGr,fGr,mGr,j5,nEe,gGr,hGr,hZ,pGr,_Gr,uGr,D5,tGe,Kc,G5,sEe,Mx,bGr,lEe,vGr,aGe,br,Ex,FGr,Zc,TGr,pZ,MGr,EGr,_Z,CGr,wGr,AGr,Cx,LGr,iEe,yGr,xGr,$Gr,Ht,wx,kGr,dEe,SGr,RGr,ef,PGr,cEe,BGr,IGr,uZ,NGr,qGr,jGr,O5,DGr,Wr,Ax,GGr,fEe,OGr,VGr,Tn,XGr,mEe,zGr,WGr,gEe,QGr,HGr,hEe,UGr,JGr,YGr,Oe,V5,pEe,KGr,ZGr,bZ,eOr,oOr,rOr,X5,_Ee,tOr,aOr,vZ,nOr,sOr,lOr,z5,uEe,iOr,dOr,FZ,cOr,fOr,mOr,W5,bEe,gOr,hOr,TZ,pOr,_Or,uOr,Q5,vEe,bOr,vOr,MZ,FOr,TOr,MOr,H5,FEe,EOr,COr,EZ,wOr,AOr,LOr,U5,TEe,yOr,xOr,CZ,$Or,kOr,SOr,J5,MEe,ROr,POr,wZ,BOr,IOr,NOr,Y5,nGe,of,K5,EEe,Lx,qOr,CEe,jOr,sGe,vr,yx,DOr,rf,GOr,AZ,OOr,VOr,LZ,XOr,zOr,WOr,xx,QOr,wEe,HOr,UOr,JOr,Ut,$x,YOr,AEe,KOr,ZOr,tf,eVr,LEe,oVr,rVr,yZ,tVr,aVr,nVr,Z5,sVr,Qr,kx,lVr,yEe,iVr,dVr,Mn,cVr,xEe,fVr,mVr,$Ee,gVr,hVr,kEe,pVr,_Vr,uVr,Ve,e3,SEe,bVr,vVr,xZ,FVr,TVr,MVr,o3,REe,EVr,CVr,$Z,wVr,AVr,LVr,r3,PEe,yVr,xVr,kZ,$Vr,kVr,SVr,t3,BEe,RVr,PVr,SZ,BVr,IVr,NVr,a3,IEe,qVr,jVr,RZ,DVr,GVr,OVr,n3,NEe,VVr,XVr,PZ,zVr,WVr,QVr,s3,qEe,HVr,UVr,BZ,JVr,YVr,KVr,l3,jEe,ZVr,eXr,IZ,oXr,rXr,tXr,i3,lGe,af,d3,DEe,Sx,aXr,GEe,nXr,iGe,Fr,Rx,sXr,nf,lXr,NZ,iXr,dXr,qZ,cXr,fXr,mXr,Px,gXr,OEe,hXr,pXr,_Xr,Jt,Bx,uXr,VEe,bXr,vXr,sf,FXr,XEe,TXr,MXr,jZ,EXr,CXr,wXr,c3,AXr,Hr,Ix,LXr,zEe,yXr,xXr,En,$Xr,WEe,kXr,SXr,QEe,RXr,PXr,HEe,BXr,IXr,NXr,UEe,f3,JEe,qXr,jXr,DZ,DXr,GXr,OXr,m3,dGe,lf,g3,YEe,Nx,VXr,KEe,XXr,cGe,Tr,qx,zXr,df,WXr,GZ,QXr,HXr,OZ,UXr,JXr,YXr,jx,KXr,ZEe,ZXr,ezr,ozr,Yt,Dx,rzr,eCe,tzr,azr,cf,nzr,oCe,szr,lzr,VZ,izr,dzr,czr,h3,fzr,Ur,Gx,mzr,rCe,gzr,hzr,Cn,pzr,tCe,_zr,uzr,aCe,bzr,vzr,nCe,Fzr,Tzr,Mzr,Ox,p3,sCe,Ezr,Czr,XZ,wzr,Azr,Lzr,_3,lCe,yzr,xzr,zZ,$zr,kzr,Szr,u3,fGe,ff,b3,iCe,Vx,Rzr,dCe,Pzr,mGe,Mr,Xx,Bzr,mf,Izr,WZ,Nzr,qzr,QZ,jzr,Dzr,Gzr,zx,Ozr,cCe,Vzr,Xzr,zzr,Kt,Wx,Wzr,fCe,Qzr,Hzr,gf,Uzr,mCe,Jzr,Yzr,HZ,Kzr,Zzr,eWr,v3,oWr,Jr,Qx,rWr,gCe,tWr,aWr,wn,nWr,hCe,sWr,lWr,pCe,iWr,dWr,_Ce,cWr,fWr,mWr,uCe,F3,bCe,gWr,hWr,UZ,pWr,_Wr,uWr,T3,gGe;return d=new te({}),Ca=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),Vw=new te({}),Xw=new P({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Mf=new bWr({props:{warning:!0,$$slots:{default:[RRt]},$$scope:{ctx:y}}}),zw=new te({}),Ww=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/configuration_auto.py#L590"}}),Uw=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/configuration_auto.py#L613"}}),Lg=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[PRt]},$$scope:{ctx:y}}}),Jw=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/configuration_auto.py#L736"}}),Yw=new te({}),Kw=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/tokenization_auto.py#L397"}}),oA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_16792/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/tokenization_auto.py#L411"}}),ih=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[BRt]},$$scope:{ctx:y}}}),rA=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/tokenization_auto.py#L610"}}),tA=new te({}),aA=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/feature_extraction_auto.py#L191"}}),lA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_16792/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/feature_extraction_auto.py#L205"}}),Gh=new bWr({props:{$$slots:{default:[IRt]},$$scope:{ctx:y}}}),Oh=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[NRt]},$$scope:{ctx:y}}}),iA=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/feature_extraction_auto.py#L332"}}),dA=new te({}),cA=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/processing_auto.py#L88"}}),gA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/processing_auto.py#L102"}}),ip=new bWr({props:{$$slots:{default:[qRt]},$$scope:{ctx:y}}}),dp=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[jRt]},$$scope:{ctx:y}}}),hA=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/processing_auto.py#L255"}}),pA=new te({}),_A=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L742"}}),bA=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt_neox#transformers.GPTNeoXModel">GPTNeoXModel</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/levit#transformers.LevitModel">LevitModel</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longt5#transformers.LongT5Model">LongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),mp=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[DRt]},$$scope:{ctx:y}}}),vA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),du=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[GRt]},$$scope:{ctx:y}}}),FA=new te({}),TA=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L749"}}),EA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),fu=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[ORt]},$$scope:{ctx:y}}}),CA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),o2=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[VRt]},$$scope:{ctx:y}}}),wA=new te({}),AA=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L764"}}),yA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM">GPTNeoXForCausalLM</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),t2=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[XRt]},$$scope:{ctx:y}}}),xA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),O2=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[zRt]},$$scope:{ctx:y}}}),$A=new te({}),kA=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L771"}}),RA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),X2=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[WRt]},$$scope:{ctx:y}}}),PA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),y1=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[QRt]},$$scope:{ctx:y}}}),BA=new te({}),IA=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L778"}}),qA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration">LongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLM-ProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),$1=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[HRt]},$$scope:{ctx:y}}}),jA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),U1=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[URt]},$$scope:{ctx:y}}}),DA=new te({}),GA=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L787"}}),VA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),Y1=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[JRt]},$$scope:{ctx:y}}}),XA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),Wb=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[YRt]},$$scope:{ctx:y}}}),zA=new te({}),WA=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L821"}}),HA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),Hb=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[KRt]},$$scope:{ctx:y}}}),UA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),wv=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[ZRt]},$$scope:{ctx:y}}}),JA=new te({}),YA=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L828"}}),ZA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),Lv=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[ePt]},$$scope:{ctx:y}}}),eL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),Pv=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[oPt]},$$scope:{ctx:y}}}),oL=new te({}),rL=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L814"}}),aL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),Iv=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[rPt]},$$scope:{ctx:y}}}),nL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),bF=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[tPt]},$$scope:{ctx:y}}}),sL=new te({}),lL=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L796"}}),dL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),FF=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[aPt]},$$scope:{ctx:y}}}),cL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),i6=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[nPt]},$$scope:{ctx:y}}}),fL=new te({}),mL=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L803"}}),hL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),c6=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[sPt]},$$scope:{ctx:y}}}),pL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),g6=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[lPt]},$$scope:{ctx:y}}}),_L=new te({}),uL=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L837"}}),vL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_16792/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/levit#transformers.LevitForImageClassification">LevitForImageClassification</a> or <a href="/docs/transformers/pr_16792/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher">LevitForImageClassificationWithTeacher</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),p6=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[iPt]},$$scope:{ctx:y}}}),FL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),x6=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[dPt]},$$scope:{ctx:y}}}),TL=new te({}),ML=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L876"}}),CL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),k6=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[cPt]},$$scope:{ctx:y}}}),wL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),P6=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[fPt]},$$scope:{ctx:y}}}),AL=new te({}),LL=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L883"}}),xL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),I6=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[mPt]},$$scope:{ctx:y}}}),$L=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),Q6=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[gPt]},$$scope:{ctx:y}}}),kL=new te({}),SL=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L906"}}),PL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),U6=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[hPt]},$$scope:{ctx:y}}}),BL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),rT=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[pPt]},$$scope:{ctx:y}}}),IL=new te({}),NL=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L890"}}),jL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),aT=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[_Pt]},$$scope:{ctx:y}}}),DL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),pT=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[uPt]},$$scope:{ctx:y}}}),GL=new te({}),OL=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L897"}}),XL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),uT=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[bPt]},$$scope:{ctx:y}}}),zL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),TT=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[vPt]},$$scope:{ctx:y}}}),QL=new te({}),HL=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L915"}}),JL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),ET=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[FPt]},$$scope:{ctx:y}}}),YL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),$T=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[TPt]},$$scope:{ctx:y}}}),KL=new te({}),ZL=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L922"}}),oy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),ST=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[MPt]},$$scope:{ctx:y}}}),ry=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),NT=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[EPt]},$$scope:{ctx:y}}}),ty=new te({}),ay=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L869"}}),sy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),jT=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[CPt]},$$scope:{ctx:y}}}),ly=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),VT=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[wPt]},$$scope:{ctx:y}}}),dy=new te({}),cy=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L844"}}),my=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),zT=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[APt]},$$scope:{ctx:y}}}),gy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),HT=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[LPt]},$$scope:{ctx:y}}}),hy=new te({}),py=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L851"}}),uy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),JT=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[yPt]},$$scope:{ctx:y}}}),by=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),r7=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[xPt]},$$scope:{ctx:y}}}),vy=new te({}),Fy=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L860"}}),My=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),a7=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[$Pt]},$$scope:{ctx:y}}}),Ey=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),l7=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[kPt]},$$scope:{ctx:y}}}),Cy=new te({}),wy=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_tf_auto.py#L396"}}),Ly=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/opt#transformers.TFOPTModel">TFOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),d7=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[SPt]},$$scope:{ctx:y}}}),yy=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),r9=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[RPt]},$$scope:{ctx:y}}}),xy=new te({}),$y=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_tf_auto.py#L403"}}),Sy=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),a9=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[PPt]},$$scope:{ctx:y}}}),Ry=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),y9=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[BPt]},$$scope:{ctx:y}}}),Py=new te({}),By=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_tf_auto.py#L418"}}),Ny=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/opt#transformers.TFOPTForCausalLM">TFOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),$9=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[IPt]},$$scope:{ctx:y}}}),qy=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),X9=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[NPt]},$$scope:{ctx:y}}}),jy=new te({}),Dy=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_tf_auto.py#L434"}}),Oy=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),W9=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[qPt]},$$scope:{ctx:y}}}),Vy=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),Y9=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[jPt]},$$scope:{ctx:y}}}),Xy=new te({}),zy=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_tf_auto.py#L450"}}),Qy=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),Z9=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[DPt]},$$scope:{ctx:y}}}),Hy=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),FM=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[GPt]},$$scope:{ctx:y}}}),Uy=new te({}),Jy=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_tf_auto.py#L457"}}),Ky=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),MM=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[OPt]},$$scope:{ctx:y}}}),Zy=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),RM=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[VPt]},$$scope:{ctx:y}}}),e8=new te({}),o8=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_tf_auto.py#L466"}}),t8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),BM=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[XPt]},$$scope:{ctx:y}}}),a8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),i4=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[zPt]},$$scope:{ctx:y}}}),n8=new te({}),s8=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_tf_auto.py#L502"}}),i8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),c4=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[WPt]},$$scope:{ctx:y}}}),d8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),y4=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[QPt]},$$scope:{ctx:y}}}),c8=new te({}),f8=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_tf_auto.py#L509"}}),g8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),$4=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[HPt]},$$scope:{ctx:y}}}),h8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),R4=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[UPt]},$$scope:{ctx:y}}}),_8=new te({}),u8=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_tf_auto.py#L482"}}),v8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),B4=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[JPt]},$$scope:{ctx:y}}}),F8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),N4=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[YPt]},$$scope:{ctx:y}}}),T8=new te({}),M8=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_tf_auto.py#L493"}}),C8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),j4=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[KPt]},$$scope:{ctx:y}}}),w8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),sE=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[ZPt]},$$scope:{ctx:y}}}),A8=new te({}),L8=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_tf_auto.py#L475"}}),x8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),iE=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[eBt]},$$scope:{ctx:y}}}),$8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),xE=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[oBt]},$$scope:{ctx:y}}}),k8=new te({}),S8=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_tf_auto.py#L443"}}),P8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),kE=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[rBt]},$$scope:{ctx:y}}}),B8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),RE=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[tBt]},$$scope:{ctx:y}}}),I8=new te({}),N8=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_tf_auto.py#L518"}}),j8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),BE=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[aBt]},$$scope:{ctx:y}}}),D8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),NE=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[nBt]},$$scope:{ctx:y}}}),G8=new te({}),O8=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_flax_auto.py#L246"}}),X8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longt5#transformers.FlaxLongT5Model">FlaxLongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/opt#transformers.FlaxOPTModel">FlaxOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),jE=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[sBt]},$$scope:{ctx:y}}}),z8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),gC=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[lBt]},$$scope:{ctx:y}}}),W8=new te({}),Q8=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_flax_auto.py#L260"}}),U8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/opt#transformers.FlaxOPTForCausalLM">FlaxOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),pC=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[iBt]},$$scope:{ctx:y}}}),J8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),AC=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[dBt]},$$scope:{ctx:y}}}),Y8=new te({}),K8=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_flax_auto.py#L253"}}),ex=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),yC=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[cBt]},$$scope:{ctx:y}}}),ox=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),OC=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[fBt]},$$scope:{ctx:y}}}),rx=new te({}),tx=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_flax_auto.py#L267"}}),nx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),XC=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[mBt]},$$scope:{ctx:y}}}),sx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),o5=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[gBt]},$$scope:{ctx:y}}}),lx=new te({}),ix=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),cx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),t5=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[hBt]},$$scope:{ctx:y}}}),fx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),h5=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[pBt]},$$scope:{ctx:y}}}),mx=new te({}),gx=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),px=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),_5=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[_Bt]},$$scope:{ctx:y}}}),_x=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),L5=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[uBt]},$$scope:{ctx:y}}}),ux=new te({}),bx=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_flax_auto.py#L292"}}),Fx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),x5=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[bBt]},$$scope:{ctx:y}}}),Tx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),D5=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[vBt]},$$scope:{ctx:y}}}),Mx=new te({}),Ex=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),wx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),O5=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[FBt]},$$scope:{ctx:y}}}),Ax=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),Y5=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[TBt]},$$scope:{ctx:y}}}),Lx=new te({}),yx=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_flax_auto.py#L308"}}),$x=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),Z5=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[MBt]},$$scope:{ctx:y}}}),kx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),i3=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[EBt]},$$scope:{ctx:y}}}),Sx=new te({}),Rx=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),Bx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),c3=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[CBt]},$$scope:{ctx:y}}}),Ix=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),m3=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[wBt]},$$scope:{ctx:y}}}),Nx=new te({}),qx=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),Dx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),h3=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[ABt]},$$scope:{ctx:y}}}),Gx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),u3=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[LBt]},$$scope:{ctx:y}}}),Vx=new te({}),Xx=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_flax_auto.py#L333"}}),Wx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),v3=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[yBt]},$$scope:{ctx:y}}}),Qx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),T3=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[xBt]},$$scope:{ctx:y}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),_=a("span"),F(d.$$.fragment),h=l(),Mo=a("span"),gi=o("Auto Classes"),uf=l(),rt=a("p"),hi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),pi=a("code"),jw=o("from_pretrained()"),bf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Ge=l(),We=a("p"),_i=o("Instantiating one of "),Ln=a("a"),Dw=o("AutoConfig"),yn=o(", "),xn=a("a"),Gw=o("AutoModel"),ui=o(`, and
`),$n=a("a"),Ow=o("AutoTokenizer"),bi=o(" will directly create a class of the relevant architecture. For instance"),vf=l(),F(Ca.$$.fragment),Qe=l(),Ae=a("p"),dk=o("will create a model that is an instance of "),vi=a("a"),ck=o("BertModel"),fk=o("."),Eo=l(),wa=a("p"),mk=o("There is one class of "),Ff=a("code"),gk=o("AutoModel"),TVe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),cje=l(),Fi=a("h2"),Tf=a("a"),Ooe=a("span"),F(Vw.$$.fragment),MVe=l(),Voe=a("span"),EVe=o("Extending the Auto Classes"),fje=l(),kn=a("p"),CVe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Xoe=a("code"),wVe=o("NewModel"),AVe=o(", make sure you have a "),zoe=a("code"),LVe=o("NewModelConfig"),yVe=o(` then you can add those to the auto
classes like this:`),mje=l(),F(Xw.$$.fragment),gje=l(),hk=a("p"),xVe=o("You will then be able to use the auto classes like you would usually do!"),hje=l(),F(Mf.$$.fragment),pje=l(),Ti=a("h2"),Ef=a("a"),Woe=a("span"),F(zw.$$.fragment),$Ve=l(),Qoe=a("span"),kVe=o("AutoConfig"),_je=l(),Co=a("div"),F(Ww.$$.fragment),SVe=l(),Qw=a("p"),RVe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),pk=a("a"),PVe=o("from_pretrained()"),BVe=o(" class method."),IVe=l(),Hw=a("p"),NVe=o("This class cannot be instantiated directly using "),Hoe=a("code"),qVe=o("__init__()"),jVe=o(" (throws an error)."),DVe=l(),Er=a("div"),F(Uw.$$.fragment),GVe=l(),Uoe=a("p"),OVe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),VVe=l(),Mi=a("p"),XVe=o("The configuration class to instantiate is selected based on the "),Joe=a("code"),zVe=o("model_type"),WVe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Yoe=a("code"),QVe=o("pretrained_model_name_or_path"),HVe=o(":"),UVe=l(),A=a("ul"),Cf=a("li"),Koe=a("strong"),JVe=o("albert"),YVe=o(" \u2014 "),_k=a("a"),KVe=o("AlbertConfig"),ZVe=o(" (ALBERT model)"),eXe=l(),wf=a("li"),Zoe=a("strong"),oXe=o("bart"),rXe=o(" \u2014 "),uk=a("a"),tXe=o("BartConfig"),aXe=o(" (BART model)"),nXe=l(),Af=a("li"),ere=a("strong"),sXe=o("beit"),lXe=o(" \u2014 "),bk=a("a"),iXe=o("BeitConfig"),dXe=o(" (BEiT model)"),cXe=l(),Lf=a("li"),ore=a("strong"),fXe=o("bert"),mXe=o(" \u2014 "),vk=a("a"),gXe=o("BertConfig"),hXe=o(" (BERT model)"),pXe=l(),yf=a("li"),rre=a("strong"),_Xe=o("bert-generation"),uXe=o(" \u2014 "),Fk=a("a"),bXe=o("BertGenerationConfig"),vXe=o(" (Bert Generation model)"),FXe=l(),xf=a("li"),tre=a("strong"),TXe=o("big_bird"),MXe=o(" \u2014 "),Tk=a("a"),EXe=o("BigBirdConfig"),CXe=o(" (BigBird model)"),wXe=l(),$f=a("li"),are=a("strong"),AXe=o("bigbird_pegasus"),LXe=o(" \u2014 "),Mk=a("a"),yXe=o("BigBirdPegasusConfig"),xXe=o(" (BigBird-Pegasus model)"),$Xe=l(),kf=a("li"),nre=a("strong"),kXe=o("blenderbot"),SXe=o(" \u2014 "),Ek=a("a"),RXe=o("BlenderbotConfig"),PXe=o(" (Blenderbot model)"),BXe=l(),Sf=a("li"),sre=a("strong"),IXe=o("blenderbot-small"),NXe=o(" \u2014 "),Ck=a("a"),qXe=o("BlenderbotSmallConfig"),jXe=o(" (BlenderbotSmall model)"),DXe=l(),Rf=a("li"),lre=a("strong"),GXe=o("camembert"),OXe=o(" \u2014 "),wk=a("a"),VXe=o("CamembertConfig"),XXe=o(" (CamemBERT model)"),zXe=l(),Pf=a("li"),ire=a("strong"),WXe=o("canine"),QXe=o(" \u2014 "),Ak=a("a"),HXe=o("CanineConfig"),UXe=o(" (CANINE model)"),JXe=l(),Bf=a("li"),dre=a("strong"),YXe=o("clip"),KXe=o(" \u2014 "),Lk=a("a"),ZXe=o("CLIPConfig"),eze=o(" (CLIP model)"),oze=l(),If=a("li"),cre=a("strong"),rze=o("convbert"),tze=o(" \u2014 "),yk=a("a"),aze=o("ConvBertConfig"),nze=o(" (ConvBERT model)"),sze=l(),Nf=a("li"),fre=a("strong"),lze=o("convnext"),ize=o(" \u2014 "),xk=a("a"),dze=o("ConvNextConfig"),cze=o(" (ConvNeXT model)"),fze=l(),qf=a("li"),mre=a("strong"),mze=o("ctrl"),gze=o(" \u2014 "),$k=a("a"),hze=o("CTRLConfig"),pze=o(" (CTRL model)"),_ze=l(),jf=a("li"),gre=a("strong"),uze=o("cvt"),bze=o(" \u2014 "),kk=a("a"),vze=o("CvtConfig"),Fze=o(" (CvT model)"),Tze=l(),Df=a("li"),hre=a("strong"),Mze=o("data2vec-audio"),Eze=o(" \u2014 "),Sk=a("a"),Cze=o("Data2VecAudioConfig"),wze=o(" (Data2VecAudio model)"),Aze=l(),Gf=a("li"),pre=a("strong"),Lze=o("data2vec-text"),yze=o(" \u2014 "),Rk=a("a"),xze=o("Data2VecTextConfig"),$ze=o(" (Data2VecText model)"),kze=l(),Of=a("li"),_re=a("strong"),Sze=o("data2vec-vision"),Rze=o(" \u2014 "),Pk=a("a"),Pze=o("Data2VecVisionConfig"),Bze=o(" (Data2VecVision model)"),Ize=l(),Vf=a("li"),ure=a("strong"),Nze=o("deberta"),qze=o(" \u2014 "),Bk=a("a"),jze=o("DebertaConfig"),Dze=o(" (DeBERTa model)"),Gze=l(),Xf=a("li"),bre=a("strong"),Oze=o("deberta-v2"),Vze=o(" \u2014 "),Ik=a("a"),Xze=o("DebertaV2Config"),zze=o(" (DeBERTa-v2 model)"),Wze=l(),zf=a("li"),vre=a("strong"),Qze=o("decision_transformer"),Hze=o(" \u2014 "),Nk=a("a"),Uze=o("DecisionTransformerConfig"),Jze=o(" (Decision Transformer model)"),Yze=l(),Wf=a("li"),Fre=a("strong"),Kze=o("deit"),Zze=o(" \u2014 "),qk=a("a"),eWe=o("DeiTConfig"),oWe=o(" (DeiT model)"),rWe=l(),Qf=a("li"),Tre=a("strong"),tWe=o("detr"),aWe=o(" \u2014 "),jk=a("a"),nWe=o("DetrConfig"),sWe=o(" (DETR model)"),lWe=l(),Hf=a("li"),Mre=a("strong"),iWe=o("distilbert"),dWe=o(" \u2014 "),Dk=a("a"),cWe=o("DistilBertConfig"),fWe=o(" (DistilBERT model)"),mWe=l(),Uf=a("li"),Ere=a("strong"),gWe=o("dpr"),hWe=o(" \u2014 "),Gk=a("a"),pWe=o("DPRConfig"),_We=o(" (DPR model)"),uWe=l(),Jf=a("li"),Cre=a("strong"),bWe=o("dpt"),vWe=o(" \u2014 "),Ok=a("a"),FWe=o("DPTConfig"),TWe=o(" (DPT model)"),MWe=l(),Yf=a("li"),wre=a("strong"),EWe=o("electra"),CWe=o(" \u2014 "),Vk=a("a"),wWe=o("ElectraConfig"),AWe=o(" (ELECTRA model)"),LWe=l(),Kf=a("li"),Are=a("strong"),yWe=o("encoder-decoder"),xWe=o(" \u2014 "),Xk=a("a"),$We=o("EncoderDecoderConfig"),kWe=o(" (Encoder decoder model)"),SWe=l(),Zf=a("li"),Lre=a("strong"),RWe=o("flaubert"),PWe=o(" \u2014 "),zk=a("a"),BWe=o("FlaubertConfig"),IWe=o(" (FlauBERT model)"),NWe=l(),em=a("li"),yre=a("strong"),qWe=o("flava"),jWe=o(" \u2014 "),Wk=a("a"),DWe=o("FlavaConfig"),GWe=o(" (FLAVA model)"),OWe=l(),om=a("li"),xre=a("strong"),VWe=o("fnet"),XWe=o(" \u2014 "),Qk=a("a"),zWe=o("FNetConfig"),WWe=o(" (FNet model)"),QWe=l(),rm=a("li"),$re=a("strong"),HWe=o("fsmt"),UWe=o(" \u2014 "),Hk=a("a"),JWe=o("FSMTConfig"),YWe=o(" (FairSeq Machine-Translation model)"),KWe=l(),tm=a("li"),kre=a("strong"),ZWe=o("funnel"),eQe=o(" \u2014 "),Uk=a("a"),oQe=o("FunnelConfig"),rQe=o(" (Funnel Transformer model)"),tQe=l(),am=a("li"),Sre=a("strong"),aQe=o("glpn"),nQe=o(" \u2014 "),Jk=a("a"),sQe=o("GLPNConfig"),lQe=o(" (GLPN model)"),iQe=l(),nm=a("li"),Rre=a("strong"),dQe=o("gpt2"),cQe=o(" \u2014 "),Yk=a("a"),fQe=o("GPT2Config"),mQe=o(" (OpenAI GPT-2 model)"),gQe=l(),sm=a("li"),Pre=a("strong"),hQe=o("gpt_neo"),pQe=o(" \u2014 "),Kk=a("a"),_Qe=o("GPTNeoConfig"),uQe=o(" (GPT Neo model)"),bQe=l(),lm=a("li"),Bre=a("strong"),vQe=o("gpt_neox"),FQe=o(" \u2014 "),Zk=a("a"),TQe=o("GPTNeoXConfig"),MQe=o(" (GPT NeoX model)"),EQe=l(),im=a("li"),Ire=a("strong"),CQe=o("gptj"),wQe=o(" \u2014 "),eS=a("a"),AQe=o("GPTJConfig"),LQe=o(" (GPT-J model)"),yQe=l(),dm=a("li"),Nre=a("strong"),xQe=o("hubert"),$Qe=o(" \u2014 "),oS=a("a"),kQe=o("HubertConfig"),SQe=o(" (Hubert model)"),RQe=l(),cm=a("li"),qre=a("strong"),PQe=o("ibert"),BQe=o(" \u2014 "),rS=a("a"),IQe=o("IBertConfig"),NQe=o(" (I-BERT model)"),qQe=l(),fm=a("li"),jre=a("strong"),jQe=o("imagegpt"),DQe=o(" \u2014 "),tS=a("a"),GQe=o("ImageGPTConfig"),OQe=o(" (ImageGPT model)"),VQe=l(),mm=a("li"),Dre=a("strong"),XQe=o("layoutlm"),zQe=o(" \u2014 "),aS=a("a"),WQe=o("LayoutLMConfig"),QQe=o(" (LayoutLM model)"),HQe=l(),gm=a("li"),Gre=a("strong"),UQe=o("layoutlmv2"),JQe=o(" \u2014 "),nS=a("a"),YQe=o("LayoutLMv2Config"),KQe=o(" (LayoutLMv2 model)"),ZQe=l(),hm=a("li"),Ore=a("strong"),eHe=o("layoutlmv3"),oHe=o(" \u2014 "),sS=a("a"),rHe=o("LayoutLMv3Config"),tHe=o(" (LayoutLMv3 model)"),aHe=l(),pm=a("li"),Vre=a("strong"),nHe=o("led"),sHe=o(" \u2014 "),lS=a("a"),lHe=o("LEDConfig"),iHe=o(" (LED model)"),dHe=l(),_m=a("li"),Xre=a("strong"),cHe=o("levit"),fHe=o(" \u2014 "),iS=a("a"),mHe=o("LevitConfig"),gHe=o(" (LeViT model)"),hHe=l(),um=a("li"),zre=a("strong"),pHe=o("longformer"),_He=o(" \u2014 "),dS=a("a"),uHe=o("LongformerConfig"),bHe=o(" (Longformer model)"),vHe=l(),bm=a("li"),Wre=a("strong"),FHe=o("longt5"),THe=o(" \u2014 "),cS=a("a"),MHe=o("LongT5Config"),EHe=o(" (LongT5 model)"),CHe=l(),vm=a("li"),Qre=a("strong"),wHe=o("luke"),AHe=o(" \u2014 "),fS=a("a"),LHe=o("LukeConfig"),yHe=o(" (LUKE model)"),xHe=l(),Fm=a("li"),Hre=a("strong"),$He=o("lxmert"),kHe=o(" \u2014 "),mS=a("a"),SHe=o("LxmertConfig"),RHe=o(" (LXMERT model)"),PHe=l(),Tm=a("li"),Ure=a("strong"),BHe=o("m2m_100"),IHe=o(" \u2014 "),gS=a("a"),NHe=o("M2M100Config"),qHe=o(" (M2M100 model)"),jHe=l(),Mm=a("li"),Jre=a("strong"),DHe=o("marian"),GHe=o(" \u2014 "),hS=a("a"),OHe=o("MarianConfig"),VHe=o(" (Marian model)"),XHe=l(),Em=a("li"),Yre=a("strong"),zHe=o("maskformer"),WHe=o(" \u2014 "),pS=a("a"),QHe=o("MaskFormerConfig"),HHe=o(" (MaskFormer model)"),UHe=l(),Cm=a("li"),Kre=a("strong"),JHe=o("mbart"),YHe=o(" \u2014 "),_S=a("a"),KHe=o("MBartConfig"),ZHe=o(" (mBART model)"),eUe=l(),wm=a("li"),Zre=a("strong"),oUe=o("megatron-bert"),rUe=o(" \u2014 "),uS=a("a"),tUe=o("MegatronBertConfig"),aUe=o(" (Megatron-BERT model)"),nUe=l(),Am=a("li"),ete=a("strong"),sUe=o("mobilebert"),lUe=o(" \u2014 "),bS=a("a"),iUe=o("MobileBertConfig"),dUe=o(" (MobileBERT model)"),cUe=l(),Lm=a("li"),ote=a("strong"),fUe=o("mpnet"),mUe=o(" \u2014 "),vS=a("a"),gUe=o("MPNetConfig"),hUe=o(" (MPNet model)"),pUe=l(),ym=a("li"),rte=a("strong"),_Ue=o("mt5"),uUe=o(" \u2014 "),FS=a("a"),bUe=o("MT5Config"),vUe=o(" (MT5 model)"),FUe=l(),xm=a("li"),tte=a("strong"),TUe=o("nystromformer"),MUe=o(" \u2014 "),TS=a("a"),EUe=o("NystromformerConfig"),CUe=o(" (Nystr\xF6mformer model)"),wUe=l(),$m=a("li"),ate=a("strong"),AUe=o("openai-gpt"),LUe=o(" \u2014 "),MS=a("a"),yUe=o("OpenAIGPTConfig"),xUe=o(" (OpenAI GPT model)"),$Ue=l(),km=a("li"),nte=a("strong"),kUe=o("opt"),SUe=o(" \u2014 "),ES=a("a"),RUe=o("OPTConfig"),PUe=o(" (OPT model)"),BUe=l(),Sm=a("li"),ste=a("strong"),IUe=o("pegasus"),NUe=o(" \u2014 "),CS=a("a"),qUe=o("PegasusConfig"),jUe=o(" (Pegasus model)"),DUe=l(),Rm=a("li"),lte=a("strong"),GUe=o("perceiver"),OUe=o(" \u2014 "),wS=a("a"),VUe=o("PerceiverConfig"),XUe=o(" (Perceiver model)"),zUe=l(),Pm=a("li"),ite=a("strong"),WUe=o("plbart"),QUe=o(" \u2014 "),AS=a("a"),HUe=o("PLBartConfig"),UUe=o(" (PLBart model)"),JUe=l(),Bm=a("li"),dte=a("strong"),YUe=o("poolformer"),KUe=o(" \u2014 "),LS=a("a"),ZUe=o("PoolFormerConfig"),eJe=o(" (PoolFormer model)"),oJe=l(),Im=a("li"),cte=a("strong"),rJe=o("prophetnet"),tJe=o(" \u2014 "),yS=a("a"),aJe=o("ProphetNetConfig"),nJe=o(" (ProphetNet model)"),sJe=l(),Nm=a("li"),fte=a("strong"),lJe=o("qdqbert"),iJe=o(" \u2014 "),xS=a("a"),dJe=o("QDQBertConfig"),cJe=o(" (QDQBert model)"),fJe=l(),qm=a("li"),mte=a("strong"),mJe=o("rag"),gJe=o(" \u2014 "),$S=a("a"),hJe=o("RagConfig"),pJe=o(" (RAG model)"),_Je=l(),jm=a("li"),gte=a("strong"),uJe=o("realm"),bJe=o(" \u2014 "),kS=a("a"),vJe=o("RealmConfig"),FJe=o(" (REALM model)"),TJe=l(),Dm=a("li"),hte=a("strong"),MJe=o("reformer"),EJe=o(" \u2014 "),SS=a("a"),CJe=o("ReformerConfig"),wJe=o(" (Reformer model)"),AJe=l(),Gm=a("li"),pte=a("strong"),LJe=o("regnet"),yJe=o(" \u2014 "),RS=a("a"),xJe=o("RegNetConfig"),$Je=o(" (RegNet model)"),kJe=l(),Om=a("li"),_te=a("strong"),SJe=o("rembert"),RJe=o(" \u2014 "),PS=a("a"),PJe=o("RemBertConfig"),BJe=o(" (RemBERT model)"),IJe=l(),Vm=a("li"),ute=a("strong"),NJe=o("resnet"),qJe=o(" \u2014 "),BS=a("a"),jJe=o("ResNetConfig"),DJe=o(" (ResNet model)"),GJe=l(),Xm=a("li"),bte=a("strong"),OJe=o("retribert"),VJe=o(" \u2014 "),IS=a("a"),XJe=o("RetriBertConfig"),zJe=o(" (RetriBERT model)"),WJe=l(),zm=a("li"),vte=a("strong"),QJe=o("roberta"),HJe=o(" \u2014 "),NS=a("a"),UJe=o("RobertaConfig"),JJe=o(" (RoBERTa model)"),YJe=l(),Wm=a("li"),Fte=a("strong"),KJe=o("roformer"),ZJe=o(" \u2014 "),qS=a("a"),eYe=o("RoFormerConfig"),oYe=o(" (RoFormer model)"),rYe=l(),Qm=a("li"),Tte=a("strong"),tYe=o("segformer"),aYe=o(" \u2014 "),jS=a("a"),nYe=o("SegformerConfig"),sYe=o(" (SegFormer model)"),lYe=l(),Hm=a("li"),Mte=a("strong"),iYe=o("sew"),dYe=o(" \u2014 "),DS=a("a"),cYe=o("SEWConfig"),fYe=o(" (SEW model)"),mYe=l(),Um=a("li"),Ete=a("strong"),gYe=o("sew-d"),hYe=o(" \u2014 "),GS=a("a"),pYe=o("SEWDConfig"),_Ye=o(" (SEW-D model)"),uYe=l(),Jm=a("li"),Cte=a("strong"),bYe=o("speech-encoder-decoder"),vYe=o(" \u2014 "),OS=a("a"),FYe=o("SpeechEncoderDecoderConfig"),TYe=o(" (Speech Encoder decoder model)"),MYe=l(),Ym=a("li"),wte=a("strong"),EYe=o("speech_to_text"),CYe=o(" \u2014 "),VS=a("a"),wYe=o("Speech2TextConfig"),AYe=o(" (Speech2Text model)"),LYe=l(),Km=a("li"),Ate=a("strong"),yYe=o("speech_to_text_2"),xYe=o(" \u2014 "),XS=a("a"),$Ye=o("Speech2Text2Config"),kYe=o(" (Speech2Text2 model)"),SYe=l(),Zm=a("li"),Lte=a("strong"),RYe=o("splinter"),PYe=o(" \u2014 "),zS=a("a"),BYe=o("SplinterConfig"),IYe=o(" (Splinter model)"),NYe=l(),eg=a("li"),yte=a("strong"),qYe=o("squeezebert"),jYe=o(" \u2014 "),WS=a("a"),DYe=o("SqueezeBertConfig"),GYe=o(" (SqueezeBERT model)"),OYe=l(),og=a("li"),xte=a("strong"),VYe=o("swin"),XYe=o(" \u2014 "),QS=a("a"),zYe=o("SwinConfig"),WYe=o(" (Swin Transformer model)"),QYe=l(),rg=a("li"),$te=a("strong"),HYe=o("t5"),UYe=o(" \u2014 "),HS=a("a"),JYe=o("T5Config"),YYe=o(" (T5 model)"),KYe=l(),tg=a("li"),kte=a("strong"),ZYe=o("tapas"),eKe=o(" \u2014 "),US=a("a"),oKe=o("TapasConfig"),rKe=o(" (TAPAS model)"),tKe=l(),ag=a("li"),Ste=a("strong"),aKe=o("trajectory_transformer"),nKe=o(" \u2014 "),JS=a("a"),sKe=o("TrajectoryTransformerConfig"),lKe=o(" (Trajectory Transformer model)"),iKe=l(),ng=a("li"),Rte=a("strong"),dKe=o("transfo-xl"),cKe=o(" \u2014 "),YS=a("a"),fKe=o("TransfoXLConfig"),mKe=o(" (Transformer-XL model)"),gKe=l(),sg=a("li"),Pte=a("strong"),hKe=o("trocr"),pKe=o(" \u2014 "),KS=a("a"),_Ke=o("TrOCRConfig"),uKe=o(" (TrOCR model)"),bKe=l(),lg=a("li"),Bte=a("strong"),vKe=o("unispeech"),FKe=o(" \u2014 "),ZS=a("a"),TKe=o("UniSpeechConfig"),MKe=o(" (UniSpeech model)"),EKe=l(),ig=a("li"),Ite=a("strong"),CKe=o("unispeech-sat"),wKe=o(" \u2014 "),eR=a("a"),AKe=o("UniSpeechSatConfig"),LKe=o(" (UniSpeechSat model)"),yKe=l(),dg=a("li"),Nte=a("strong"),xKe=o("van"),$Ke=o(" \u2014 "),oR=a("a"),kKe=o("VanConfig"),SKe=o(" (VAN model)"),RKe=l(),cg=a("li"),qte=a("strong"),PKe=o("vilt"),BKe=o(" \u2014 "),rR=a("a"),IKe=o("ViltConfig"),NKe=o(" (ViLT model)"),qKe=l(),fg=a("li"),jte=a("strong"),jKe=o("vision-encoder-decoder"),DKe=o(" \u2014 "),tR=a("a"),GKe=o("VisionEncoderDecoderConfig"),OKe=o(" (Vision Encoder decoder model)"),VKe=l(),mg=a("li"),Dte=a("strong"),XKe=o("vision-text-dual-encoder"),zKe=o(" \u2014 "),aR=a("a"),WKe=o("VisionTextDualEncoderConfig"),QKe=o(" (VisionTextDualEncoder model)"),HKe=l(),gg=a("li"),Gte=a("strong"),UKe=o("visual_bert"),JKe=o(" \u2014 "),nR=a("a"),YKe=o("VisualBertConfig"),KKe=o(" (VisualBERT model)"),ZKe=l(),hg=a("li"),Ote=a("strong"),eZe=o("vit"),oZe=o(" \u2014 "),sR=a("a"),rZe=o("ViTConfig"),tZe=o(" (ViT model)"),aZe=l(),pg=a("li"),Vte=a("strong"),nZe=o("vit_mae"),sZe=o(" \u2014 "),lR=a("a"),lZe=o("ViTMAEConfig"),iZe=o(" (ViTMAE model)"),dZe=l(),_g=a("li"),Xte=a("strong"),cZe=o("wav2vec2"),fZe=o(" \u2014 "),iR=a("a"),mZe=o("Wav2Vec2Config"),gZe=o(" (Wav2Vec2 model)"),hZe=l(),ug=a("li"),zte=a("strong"),pZe=o("wav2vec2-conformer"),_Ze=o(" \u2014 "),dR=a("a"),uZe=o("Wav2Vec2ConformerConfig"),bZe=o(" (Wav2Vec2-Conformer model)"),vZe=l(),bg=a("li"),Wte=a("strong"),FZe=o("wavlm"),TZe=o(" \u2014 "),cR=a("a"),MZe=o("WavLMConfig"),EZe=o(" (WavLM model)"),CZe=l(),vg=a("li"),Qte=a("strong"),wZe=o("xglm"),AZe=o(" \u2014 "),fR=a("a"),LZe=o("XGLMConfig"),yZe=o(" (XGLM model)"),xZe=l(),Fg=a("li"),Hte=a("strong"),$Ze=o("xlm"),kZe=o(" \u2014 "),mR=a("a"),SZe=o("XLMConfig"),RZe=o(" (XLM model)"),PZe=l(),Tg=a("li"),Ute=a("strong"),BZe=o("xlm-prophetnet"),IZe=o(" \u2014 "),gR=a("a"),NZe=o("XLMProphetNetConfig"),qZe=o(" (XLM-ProphetNet model)"),jZe=l(),Mg=a("li"),Jte=a("strong"),DZe=o("xlm-roberta"),GZe=o(" \u2014 "),hR=a("a"),OZe=o("XLMRobertaConfig"),VZe=o(" (XLM-RoBERTa model)"),XZe=l(),Eg=a("li"),Yte=a("strong"),zZe=o("xlm-roberta-xl"),WZe=o(" \u2014 "),pR=a("a"),QZe=o("XLMRobertaXLConfig"),HZe=o(" (XLM-RoBERTa-XL model)"),UZe=l(),Cg=a("li"),Kte=a("strong"),JZe=o("xlnet"),YZe=o(" \u2014 "),_R=a("a"),KZe=o("XLNetConfig"),ZZe=o(" (XLNet model)"),eeo=l(),wg=a("li"),Zte=a("strong"),oeo=o("yolos"),reo=o(" \u2014 "),uR=a("a"),teo=o("YolosConfig"),aeo=o(" (YOLOS model)"),neo=l(),Ag=a("li"),eae=a("strong"),seo=o("yoso"),leo=o(" \u2014 "),bR=a("a"),ieo=o("YosoConfig"),deo=o(" (YOSO model)"),ceo=l(),F(Lg.$$.fragment),feo=l(),yg=a("div"),F(Jw.$$.fragment),meo=l(),oae=a("p"),geo=o("Register a new configuration for this class."),uje=l(),Ei=a("h2"),xg=a("a"),rae=a("span"),F(Yw.$$.fragment),heo=l(),tae=a("span"),peo=o("AutoTokenizer"),bje=l(),wo=a("div"),F(Kw.$$.fragment),_eo=l(),Zw=a("p"),ueo=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),vR=a("a"),beo=o("AutoTokenizer.from_pretrained()"),veo=o(" class method."),Feo=l(),eA=a("p"),Teo=o("This class cannot be instantiated directly using "),aae=a("code"),Meo=o("__init__()"),Eeo=o(" (throws an error)."),Ceo=l(),Cr=a("div"),F(oA.$$.fragment),weo=l(),nae=a("p"),Aeo=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),Leo=l(),Aa=a("p"),yeo=o("The tokenizer class to instantiate is selected based on the "),sae=a("code"),xeo=o("model_type"),$eo=o(` property of the config object (either
passed as an argument or loaded from `),lae=a("code"),keo=o("pretrained_model_name_or_path"),Seo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iae=a("code"),Reo=o("pretrained_model_name_or_path"),Peo=o(":"),Beo=l(),k=a("ul"),Sn=a("li"),dae=a("strong"),Ieo=o("albert"),Neo=o(" \u2014 "),FR=a("a"),qeo=o("AlbertTokenizer"),jeo=o(" or "),TR=a("a"),Deo=o("AlbertTokenizerFast"),Geo=o(" (ALBERT model)"),Oeo=l(),Rn=a("li"),cae=a("strong"),Veo=o("bart"),Xeo=o(" \u2014 "),MR=a("a"),zeo=o("BartTokenizer"),Weo=o(" or "),ER=a("a"),Qeo=o("BartTokenizerFast"),Heo=o(" (BART model)"),Ueo=l(),Pn=a("li"),fae=a("strong"),Jeo=o("barthez"),Yeo=o(" \u2014 "),CR=a("a"),Keo=o("BarthezTokenizer"),Zeo=o(" or "),wR=a("a"),eoo=o("BarthezTokenizerFast"),ooo=o(" (BARThez model)"),roo=l(),$g=a("li"),mae=a("strong"),too=o("bartpho"),aoo=o(" \u2014 "),AR=a("a"),noo=o("BartphoTokenizer"),soo=o(" (BARTpho model)"),loo=l(),Bn=a("li"),gae=a("strong"),ioo=o("bert"),doo=o(" \u2014 "),LR=a("a"),coo=o("BertTokenizer"),foo=o(" or "),yR=a("a"),moo=o("BertTokenizerFast"),goo=o(" (BERT model)"),hoo=l(),kg=a("li"),hae=a("strong"),poo=o("bert-generation"),_oo=o(" \u2014 "),xR=a("a"),uoo=o("BertGenerationTokenizer"),boo=o(" (Bert Generation model)"),voo=l(),Sg=a("li"),pae=a("strong"),Foo=o("bert-japanese"),Too=o(" \u2014 "),$R=a("a"),Moo=o("BertJapaneseTokenizer"),Eoo=o(" (BertJapanese model)"),Coo=l(),Rg=a("li"),_ae=a("strong"),woo=o("bertweet"),Aoo=o(" \u2014 "),kR=a("a"),Loo=o("BertweetTokenizer"),yoo=o(" (BERTweet model)"),xoo=l(),In=a("li"),uae=a("strong"),$oo=o("big_bird"),koo=o(" \u2014 "),SR=a("a"),Soo=o("BigBirdTokenizer"),Roo=o(" or "),RR=a("a"),Poo=o("BigBirdTokenizerFast"),Boo=o(" (BigBird model)"),Ioo=l(),Nn=a("li"),bae=a("strong"),Noo=o("bigbird_pegasus"),qoo=o(" \u2014 "),PR=a("a"),joo=o("PegasusTokenizer"),Doo=o(" or "),BR=a("a"),Goo=o("PegasusTokenizerFast"),Ooo=o(" (BigBird-Pegasus model)"),Voo=l(),qn=a("li"),vae=a("strong"),Xoo=o("blenderbot"),zoo=o(" \u2014 "),IR=a("a"),Woo=o("BlenderbotTokenizer"),Qoo=o(" or "),NR=a("a"),Hoo=o("BlenderbotTokenizerFast"),Uoo=o(" (Blenderbot model)"),Joo=l(),Pg=a("li"),Fae=a("strong"),Yoo=o("blenderbot-small"),Koo=o(" \u2014 "),qR=a("a"),Zoo=o("BlenderbotSmallTokenizer"),ero=o(" (BlenderbotSmall model)"),oro=l(),Bg=a("li"),Tae=a("strong"),rro=o("byt5"),tro=o(" \u2014 "),jR=a("a"),aro=o("ByT5Tokenizer"),nro=o(" (ByT5 model)"),sro=l(),jn=a("li"),Mae=a("strong"),lro=o("camembert"),iro=o(" \u2014 "),DR=a("a"),dro=o("CamembertTokenizer"),cro=o(" or "),GR=a("a"),fro=o("CamembertTokenizerFast"),mro=o(" (CamemBERT model)"),gro=l(),Ig=a("li"),Eae=a("strong"),hro=o("canine"),pro=o(" \u2014 "),OR=a("a"),_ro=o("CanineTokenizer"),uro=o(" (CANINE model)"),bro=l(),Dn=a("li"),Cae=a("strong"),vro=o("clip"),Fro=o(" \u2014 "),VR=a("a"),Tro=o("CLIPTokenizer"),Mro=o(" or "),XR=a("a"),Ero=o("CLIPTokenizerFast"),Cro=o(" (CLIP model)"),wro=l(),Gn=a("li"),wae=a("strong"),Aro=o("convbert"),Lro=o(" \u2014 "),zR=a("a"),yro=o("ConvBertTokenizer"),xro=o(" or "),WR=a("a"),$ro=o("ConvBertTokenizerFast"),kro=o(" (ConvBERT model)"),Sro=l(),On=a("li"),Aae=a("strong"),Rro=o("cpm"),Pro=o(" \u2014 "),QR=a("a"),Bro=o("CpmTokenizer"),Iro=o(" or "),HR=a("a"),Nro=o("CpmTokenizerFast"),qro=o(" (CPM model)"),jro=l(),Ng=a("li"),Lae=a("strong"),Dro=o("ctrl"),Gro=o(" \u2014 "),UR=a("a"),Oro=o("CTRLTokenizer"),Vro=o(" (CTRL model)"),Xro=l(),Vn=a("li"),yae=a("strong"),zro=o("data2vec-text"),Wro=o(" \u2014 "),JR=a("a"),Qro=o("RobertaTokenizer"),Hro=o(" or "),YR=a("a"),Uro=o("RobertaTokenizerFast"),Jro=o(" (Data2VecText model)"),Yro=l(),Xn=a("li"),xae=a("strong"),Kro=o("deberta"),Zro=o(" \u2014 "),KR=a("a"),eto=o("DebertaTokenizer"),oto=o(" or "),ZR=a("a"),rto=o("DebertaTokenizerFast"),tto=o(" (DeBERTa model)"),ato=l(),zn=a("li"),$ae=a("strong"),nto=o("deberta-v2"),sto=o(" \u2014 "),eP=a("a"),lto=o("DebertaV2Tokenizer"),ito=o(" or "),oP=a("a"),dto=o("DebertaV2TokenizerFast"),cto=o(" (DeBERTa-v2 model)"),fto=l(),Wn=a("li"),kae=a("strong"),mto=o("distilbert"),gto=o(" \u2014 "),rP=a("a"),hto=o("DistilBertTokenizer"),pto=o(" or "),tP=a("a"),_to=o("DistilBertTokenizerFast"),uto=o(" (DistilBERT model)"),bto=l(),Qn=a("li"),Sae=a("strong"),vto=o("dpr"),Fto=o(" \u2014 "),aP=a("a"),Tto=o("DPRQuestionEncoderTokenizer"),Mto=o(" or "),nP=a("a"),Eto=o("DPRQuestionEncoderTokenizerFast"),Cto=o(" (DPR model)"),wto=l(),Hn=a("li"),Rae=a("strong"),Ato=o("electra"),Lto=o(" \u2014 "),sP=a("a"),yto=o("ElectraTokenizer"),xto=o(" or "),lP=a("a"),$to=o("ElectraTokenizerFast"),kto=o(" (ELECTRA model)"),Sto=l(),qg=a("li"),Pae=a("strong"),Rto=o("flaubert"),Pto=o(" \u2014 "),iP=a("a"),Bto=o("FlaubertTokenizer"),Ito=o(" (FlauBERT model)"),Nto=l(),Un=a("li"),Bae=a("strong"),qto=o("fnet"),jto=o(" \u2014 "),dP=a("a"),Dto=o("FNetTokenizer"),Gto=o(" or "),cP=a("a"),Oto=o("FNetTokenizerFast"),Vto=o(" (FNet model)"),Xto=l(),jg=a("li"),Iae=a("strong"),zto=o("fsmt"),Wto=o(" \u2014 "),fP=a("a"),Qto=o("FSMTTokenizer"),Hto=o(" (FairSeq Machine-Translation model)"),Uto=l(),Jn=a("li"),Nae=a("strong"),Jto=o("funnel"),Yto=o(" \u2014 "),mP=a("a"),Kto=o("FunnelTokenizer"),Zto=o(" or "),gP=a("a"),eao=o("FunnelTokenizerFast"),oao=o(" (Funnel Transformer model)"),rao=l(),Yn=a("li"),qae=a("strong"),tao=o("gpt2"),aao=o(" \u2014 "),hP=a("a"),nao=o("GPT2Tokenizer"),sao=o(" or "),pP=a("a"),lao=o("GPT2TokenizerFast"),iao=o(" (OpenAI GPT-2 model)"),dao=l(),Kn=a("li"),jae=a("strong"),cao=o("gpt_neo"),fao=o(" \u2014 "),_P=a("a"),mao=o("GPT2Tokenizer"),gao=o(" or "),uP=a("a"),hao=o("GPT2TokenizerFast"),pao=o(" (GPT Neo model)"),_ao=l(),Dg=a("li"),Dae=a("strong"),uao=o("gpt_neox"),bao=o(" \u2014 "),bP=a("a"),vao=o("GPTNeoXTokenizerFast"),Fao=o(" (GPT NeoX model)"),Tao=l(),Zn=a("li"),Gae=a("strong"),Mao=o("gptj"),Eao=o(" \u2014 "),vP=a("a"),Cao=o("GPT2Tokenizer"),wao=o(" or "),FP=a("a"),Aao=o("GPT2TokenizerFast"),Lao=o(" (GPT-J model)"),yao=l(),es=a("li"),Oae=a("strong"),xao=o("herbert"),$ao=o(" \u2014 "),TP=a("a"),kao=o("HerbertTokenizer"),Sao=o(" or "),MP=a("a"),Rao=o("HerbertTokenizerFast"),Pao=o(" (HerBERT model)"),Bao=l(),Gg=a("li"),Vae=a("strong"),Iao=o("hubert"),Nao=o(" \u2014 "),EP=a("a"),qao=o("Wav2Vec2CTCTokenizer"),jao=o(" (Hubert model)"),Dao=l(),os=a("li"),Xae=a("strong"),Gao=o("ibert"),Oao=o(" \u2014 "),CP=a("a"),Vao=o("RobertaTokenizer"),Xao=o(" or "),wP=a("a"),zao=o("RobertaTokenizerFast"),Wao=o(" (I-BERT model)"),Qao=l(),rs=a("li"),zae=a("strong"),Hao=o("layoutlm"),Uao=o(" \u2014 "),AP=a("a"),Jao=o("LayoutLMTokenizer"),Yao=o(" or "),LP=a("a"),Kao=o("LayoutLMTokenizerFast"),Zao=o(" (LayoutLM model)"),eno=l(),ts=a("li"),Wae=a("strong"),ono=o("layoutlmv2"),rno=o(" \u2014 "),yP=a("a"),tno=o("LayoutLMv2Tokenizer"),ano=o(" or "),xP=a("a"),nno=o("LayoutLMv2TokenizerFast"),sno=o(" (LayoutLMv2 model)"),lno=l(),as=a("li"),Qae=a("strong"),ino=o("layoutlmv3"),dno=o(" \u2014 "),$P=a("a"),cno=o("LayoutLMv3Tokenizer"),fno=o(" or "),kP=a("a"),mno=o("LayoutLMv3TokenizerFast"),gno=o(" (LayoutLMv3 model)"),hno=l(),ns=a("li"),Hae=a("strong"),pno=o("layoutxlm"),_no=o(" \u2014 "),SP=a("a"),uno=o("LayoutXLMTokenizer"),bno=o(" or "),RP=a("a"),vno=o("LayoutXLMTokenizerFast"),Fno=o(" (LayoutXLM model)"),Tno=l(),ss=a("li"),Uae=a("strong"),Mno=o("led"),Eno=o(" \u2014 "),PP=a("a"),Cno=o("LEDTokenizer"),wno=o(" or "),BP=a("a"),Ano=o("LEDTokenizerFast"),Lno=o(" (LED model)"),yno=l(),ls=a("li"),Jae=a("strong"),xno=o("longformer"),$no=o(" \u2014 "),IP=a("a"),kno=o("LongformerTokenizer"),Sno=o(" or "),NP=a("a"),Rno=o("LongformerTokenizerFast"),Pno=o(" (Longformer model)"),Bno=l(),is=a("li"),Yae=a("strong"),Ino=o("longt5"),Nno=o(" \u2014 "),qP=a("a"),qno=o("T5Tokenizer"),jno=o(" or "),jP=a("a"),Dno=o("T5TokenizerFast"),Gno=o(" (LongT5 model)"),Ono=l(),Og=a("li"),Kae=a("strong"),Vno=o("luke"),Xno=o(" \u2014 "),DP=a("a"),zno=o("LukeTokenizer"),Wno=o(" (LUKE model)"),Qno=l(),ds=a("li"),Zae=a("strong"),Hno=o("lxmert"),Uno=o(" \u2014 "),GP=a("a"),Jno=o("LxmertTokenizer"),Yno=o(" or "),OP=a("a"),Kno=o("LxmertTokenizerFast"),Zno=o(" (LXMERT model)"),eso=l(),Vg=a("li"),ene=a("strong"),oso=o("m2m_100"),rso=o(" \u2014 "),VP=a("a"),tso=o("M2M100Tokenizer"),aso=o(" (M2M100 model)"),nso=l(),Xg=a("li"),one=a("strong"),sso=o("marian"),lso=o(" \u2014 "),XP=a("a"),iso=o("MarianTokenizer"),dso=o(" (Marian model)"),cso=l(),cs=a("li"),rne=a("strong"),fso=o("mbart"),mso=o(" \u2014 "),zP=a("a"),gso=o("MBartTokenizer"),hso=o(" or "),WP=a("a"),pso=o("MBartTokenizerFast"),_so=o(" (mBART model)"),uso=l(),fs=a("li"),tne=a("strong"),bso=o("mbart50"),vso=o(" \u2014 "),QP=a("a"),Fso=o("MBart50Tokenizer"),Tso=o(" or "),HP=a("a"),Mso=o("MBart50TokenizerFast"),Eso=o(" (mBART-50 model)"),Cso=l(),ms=a("li"),ane=a("strong"),wso=o("megatron-bert"),Aso=o(" \u2014 "),UP=a("a"),Lso=o("BertTokenizer"),yso=o(" or "),JP=a("a"),xso=o("BertTokenizerFast"),$so=o(" (Megatron-BERT model)"),kso=l(),zg=a("li"),nne=a("strong"),Sso=o("mluke"),Rso=o(" \u2014 "),YP=a("a"),Pso=o("MLukeTokenizer"),Bso=o(" (mLUKE model)"),Iso=l(),gs=a("li"),sne=a("strong"),Nso=o("mobilebert"),qso=o(" \u2014 "),KP=a("a"),jso=o("MobileBertTokenizer"),Dso=o(" or "),ZP=a("a"),Gso=o("MobileBertTokenizerFast"),Oso=o(" (MobileBERT model)"),Vso=l(),hs=a("li"),lne=a("strong"),Xso=o("mpnet"),zso=o(" \u2014 "),eB=a("a"),Wso=o("MPNetTokenizer"),Qso=o(" or "),oB=a("a"),Hso=o("MPNetTokenizerFast"),Uso=o(" (MPNet model)"),Jso=l(),ps=a("li"),ine=a("strong"),Yso=o("mt5"),Kso=o(" \u2014 "),rB=a("a"),Zso=o("MT5Tokenizer"),elo=o(" or "),tB=a("a"),olo=o("MT5TokenizerFast"),rlo=o(" (MT5 model)"),tlo=l(),_s=a("li"),dne=a("strong"),alo=o("nystromformer"),nlo=o(" \u2014 "),aB=a("a"),slo=o("AlbertTokenizer"),llo=o(" or "),nB=a("a"),ilo=o("AlbertTokenizerFast"),dlo=o(" (Nystr\xF6mformer model)"),clo=l(),us=a("li"),cne=a("strong"),flo=o("openai-gpt"),mlo=o(" \u2014 "),sB=a("a"),glo=o("OpenAIGPTTokenizer"),hlo=o(" or "),lB=a("a"),plo=o("OpenAIGPTTokenizerFast"),_lo=o(" (OpenAI GPT model)"),ulo=l(),Wg=a("li"),fne=a("strong"),blo=o("opt"),vlo=o(" \u2014 "),iB=a("a"),Flo=o("GPT2Tokenizer"),Tlo=o(" (OPT model)"),Mlo=l(),bs=a("li"),mne=a("strong"),Elo=o("pegasus"),Clo=o(" \u2014 "),dB=a("a"),wlo=o("PegasusTokenizer"),Alo=o(" or "),cB=a("a"),Llo=o("PegasusTokenizerFast"),ylo=o(" (Pegasus model)"),xlo=l(),Qg=a("li"),gne=a("strong"),$lo=o("perceiver"),klo=o(" \u2014 "),fB=a("a"),Slo=o("PerceiverTokenizer"),Rlo=o(" (Perceiver model)"),Plo=l(),Hg=a("li"),hne=a("strong"),Blo=o("phobert"),Ilo=o(" \u2014 "),mB=a("a"),Nlo=o("PhobertTokenizer"),qlo=o(" (PhoBERT model)"),jlo=l(),Ug=a("li"),pne=a("strong"),Dlo=o("plbart"),Glo=o(" \u2014 "),gB=a("a"),Olo=o("PLBartTokenizer"),Vlo=o(" (PLBart model)"),Xlo=l(),Jg=a("li"),_ne=a("strong"),zlo=o("prophetnet"),Wlo=o(" \u2014 "),hB=a("a"),Qlo=o("ProphetNetTokenizer"),Hlo=o(" (ProphetNet model)"),Ulo=l(),vs=a("li"),une=a("strong"),Jlo=o("qdqbert"),Ylo=o(" \u2014 "),pB=a("a"),Klo=o("BertTokenizer"),Zlo=o(" or "),_B=a("a"),eio=o("BertTokenizerFast"),oio=o(" (QDQBert model)"),rio=l(),Yg=a("li"),bne=a("strong"),tio=o("rag"),aio=o(" \u2014 "),uB=a("a"),nio=o("RagTokenizer"),sio=o(" (RAG model)"),lio=l(),Fs=a("li"),vne=a("strong"),iio=o("realm"),dio=o(" \u2014 "),bB=a("a"),cio=o("RealmTokenizer"),fio=o(" or "),vB=a("a"),mio=o("RealmTokenizerFast"),gio=o(" (REALM model)"),hio=l(),Ts=a("li"),Fne=a("strong"),pio=o("reformer"),_io=o(" \u2014 "),FB=a("a"),uio=o("ReformerTokenizer"),bio=o(" or "),TB=a("a"),vio=o("ReformerTokenizerFast"),Fio=o(" (Reformer model)"),Tio=l(),Ms=a("li"),Tne=a("strong"),Mio=o("rembert"),Eio=o(" \u2014 "),MB=a("a"),Cio=o("RemBertTokenizer"),wio=o(" or "),EB=a("a"),Aio=o("RemBertTokenizerFast"),Lio=o(" (RemBERT model)"),yio=l(),Es=a("li"),Mne=a("strong"),xio=o("retribert"),$io=o(" \u2014 "),CB=a("a"),kio=o("RetriBertTokenizer"),Sio=o(" or "),wB=a("a"),Rio=o("RetriBertTokenizerFast"),Pio=o(" (RetriBERT model)"),Bio=l(),Cs=a("li"),Ene=a("strong"),Iio=o("roberta"),Nio=o(" \u2014 "),AB=a("a"),qio=o("RobertaTokenizer"),jio=o(" or "),LB=a("a"),Dio=o("RobertaTokenizerFast"),Gio=o(" (RoBERTa model)"),Oio=l(),ws=a("li"),Cne=a("strong"),Vio=o("roformer"),Xio=o(" \u2014 "),yB=a("a"),zio=o("RoFormerTokenizer"),Wio=o(" or "),xB=a("a"),Qio=o("RoFormerTokenizerFast"),Hio=o(" (RoFormer model)"),Uio=l(),Kg=a("li"),wne=a("strong"),Jio=o("speech_to_text"),Yio=o(" \u2014 "),$B=a("a"),Kio=o("Speech2TextTokenizer"),Zio=o(" (Speech2Text model)"),edo=l(),Zg=a("li"),Ane=a("strong"),odo=o("speech_to_text_2"),rdo=o(" \u2014 "),kB=a("a"),tdo=o("Speech2Text2Tokenizer"),ado=o(" (Speech2Text2 model)"),ndo=l(),As=a("li"),Lne=a("strong"),sdo=o("splinter"),ldo=o(" \u2014 "),SB=a("a"),ido=o("SplinterTokenizer"),ddo=o(" or "),RB=a("a"),cdo=o("SplinterTokenizerFast"),fdo=o(" (Splinter model)"),mdo=l(),Ls=a("li"),yne=a("strong"),gdo=o("squeezebert"),hdo=o(" \u2014 "),PB=a("a"),pdo=o("SqueezeBertTokenizer"),_do=o(" or "),BB=a("a"),udo=o("SqueezeBertTokenizerFast"),bdo=o(" (SqueezeBERT model)"),vdo=l(),ys=a("li"),xne=a("strong"),Fdo=o("t5"),Tdo=o(" \u2014 "),IB=a("a"),Mdo=o("T5Tokenizer"),Edo=o(" or "),NB=a("a"),Cdo=o("T5TokenizerFast"),wdo=o(" (T5 model)"),Ado=l(),eh=a("li"),$ne=a("strong"),Ldo=o("tapas"),ydo=o(" \u2014 "),qB=a("a"),xdo=o("TapasTokenizer"),$do=o(" (TAPAS model)"),kdo=l(),oh=a("li"),kne=a("strong"),Sdo=o("tapex"),Rdo=o(" \u2014 "),jB=a("a"),Pdo=o("TapexTokenizer"),Bdo=o(" (TAPEX model)"),Ido=l(),rh=a("li"),Sne=a("strong"),Ndo=o("transfo-xl"),qdo=o(" \u2014 "),DB=a("a"),jdo=o("TransfoXLTokenizer"),Ddo=o(" (Transformer-XL model)"),Gdo=l(),xs=a("li"),Rne=a("strong"),Odo=o("visual_bert"),Vdo=o(" \u2014 "),GB=a("a"),Xdo=o("BertTokenizer"),zdo=o(" or "),OB=a("a"),Wdo=o("BertTokenizerFast"),Qdo=o(" (VisualBERT model)"),Hdo=l(),th=a("li"),Pne=a("strong"),Udo=o("wav2vec2"),Jdo=o(" \u2014 "),VB=a("a"),Ydo=o("Wav2Vec2CTCTokenizer"),Kdo=o(" (Wav2Vec2 model)"),Zdo=l(),ah=a("li"),Bne=a("strong"),eco=o("wav2vec2-conformer"),oco=o(" \u2014 "),XB=a("a"),rco=o("Wav2Vec2CTCTokenizer"),tco=o(" (Wav2Vec2-Conformer model)"),aco=l(),nh=a("li"),Ine=a("strong"),nco=o("wav2vec2_phoneme"),sco=o(" \u2014 "),zB=a("a"),lco=o("Wav2Vec2PhonemeCTCTokenizer"),ico=o(" (Wav2Vec2Phoneme model)"),dco=l(),$s=a("li"),Nne=a("strong"),cco=o("xglm"),fco=o(" \u2014 "),WB=a("a"),mco=o("XGLMTokenizer"),gco=o(" or "),QB=a("a"),hco=o("XGLMTokenizerFast"),pco=o(" (XGLM model)"),_co=l(),sh=a("li"),qne=a("strong"),uco=o("xlm"),bco=o(" \u2014 "),HB=a("a"),vco=o("XLMTokenizer"),Fco=o(" (XLM model)"),Tco=l(),lh=a("li"),jne=a("strong"),Mco=o("xlm-prophetnet"),Eco=o(" \u2014 "),UB=a("a"),Cco=o("XLMProphetNetTokenizer"),wco=o(" (XLM-ProphetNet model)"),Aco=l(),ks=a("li"),Dne=a("strong"),Lco=o("xlm-roberta"),yco=o(" \u2014 "),JB=a("a"),xco=o("XLMRobertaTokenizer"),$co=o(" or "),YB=a("a"),kco=o("XLMRobertaTokenizerFast"),Sco=o(" (XLM-RoBERTa model)"),Rco=l(),Ss=a("li"),Gne=a("strong"),Pco=o("xlm-roberta-xl"),Bco=o(" \u2014 "),KB=a("a"),Ico=o("RobertaTokenizer"),Nco=o(" or "),ZB=a("a"),qco=o("RobertaTokenizerFast"),jco=o(" (XLM-RoBERTa-XL model)"),Dco=l(),Rs=a("li"),One=a("strong"),Gco=o("xlnet"),Oco=o(" \u2014 "),eI=a("a"),Vco=o("XLNetTokenizer"),Xco=o(" or "),oI=a("a"),zco=o("XLNetTokenizerFast"),Wco=o(" (XLNet model)"),Qco=l(),Ps=a("li"),Vne=a("strong"),Hco=o("yoso"),Uco=o(" \u2014 "),rI=a("a"),Jco=o("AlbertTokenizer"),Yco=o(" or "),tI=a("a"),Kco=o("AlbertTokenizerFast"),Zco=o(" (YOSO model)"),efo=l(),F(ih.$$.fragment),ofo=l(),dh=a("div"),F(rA.$$.fragment),rfo=l(),Xne=a("p"),tfo=o("Register a new tokenizer in this mapping."),vje=l(),Ci=a("h2"),ch=a("a"),zne=a("span"),F(tA.$$.fragment),afo=l(),Wne=a("span"),nfo=o("AutoFeatureExtractor"),Fje=l(),Ao=a("div"),F(aA.$$.fragment),sfo=l(),nA=a("p"),lfo=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),aI=a("a"),ifo=o("AutoFeatureExtractor.from_pretrained()"),dfo=o(" class method."),cfo=l(),sA=a("p"),ffo=o("This class cannot be instantiated directly using "),Qne=a("code"),mfo=o("__init__()"),gfo=o(" (throws an error)."),hfo=l(),He=a("div"),F(lA.$$.fragment),pfo=l(),Hne=a("p"),_fo=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),ufo=l(),La=a("p"),bfo=o("The feature extractor class to instantiate is selected based on the "),Une=a("code"),vfo=o("model_type"),Ffo=o(` property of the config object
(either passed as an argument or loaded from `),Jne=a("code"),Tfo=o("pretrained_model_name_or_path"),Mfo=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Yne=a("code"),Efo=o("pretrained_model_name_or_path"),Cfo=o(":"),wfo=l(),Y=a("ul"),fh=a("li"),Kne=a("strong"),Afo=o("beit"),Lfo=o(" \u2014 "),nI=a("a"),yfo=o("BeitFeatureExtractor"),xfo=o(" (BEiT model)"),$fo=l(),mh=a("li"),Zne=a("strong"),kfo=o("clip"),Sfo=o(" \u2014 "),sI=a("a"),Rfo=o("CLIPFeatureExtractor"),Pfo=o(" (CLIP model)"),Bfo=l(),gh=a("li"),ese=a("strong"),Ifo=o("convnext"),Nfo=o(" \u2014 "),lI=a("a"),qfo=o("ConvNextFeatureExtractor"),jfo=o(" (ConvNeXT model)"),Dfo=l(),hh=a("li"),ose=a("strong"),Gfo=o("cvt"),Ofo=o(" \u2014 "),iI=a("a"),Vfo=o("ConvNextFeatureExtractor"),Xfo=o(" (CvT model)"),zfo=l(),ph=a("li"),rse=a("strong"),Wfo=o("data2vec-audio"),Qfo=o(" \u2014 "),dI=a("a"),Hfo=o("Wav2Vec2FeatureExtractor"),Ufo=o(" (Data2VecAudio model)"),Jfo=l(),_h=a("li"),tse=a("strong"),Yfo=o("data2vec-vision"),Kfo=o(" \u2014 "),cI=a("a"),Zfo=o("BeitFeatureExtractor"),emo=o(" (Data2VecVision model)"),omo=l(),uh=a("li"),ase=a("strong"),rmo=o("deit"),tmo=o(" \u2014 "),fI=a("a"),amo=o("DeiTFeatureExtractor"),nmo=o(" (DeiT model)"),smo=l(),bh=a("li"),nse=a("strong"),lmo=o("detr"),imo=o(" \u2014 "),mI=a("a"),dmo=o("DetrFeatureExtractor"),cmo=o(" (DETR model)"),fmo=l(),vh=a("li"),sse=a("strong"),mmo=o("dpt"),gmo=o(" \u2014 "),gI=a("a"),hmo=o("DPTFeatureExtractor"),pmo=o(" (DPT model)"),_mo=l(),Fh=a("li"),lse=a("strong"),umo=o("flava"),bmo=o(" \u2014 "),hI=a("a"),vmo=o("FlavaFeatureExtractor"),Fmo=o(" (FLAVA model)"),Tmo=l(),Th=a("li"),ise=a("strong"),Mmo=o("glpn"),Emo=o(" \u2014 "),pI=a("a"),Cmo=o("GLPNFeatureExtractor"),wmo=o(" (GLPN model)"),Amo=l(),Mh=a("li"),dse=a("strong"),Lmo=o("hubert"),ymo=o(" \u2014 "),_I=a("a"),xmo=o("Wav2Vec2FeatureExtractor"),$mo=o(" (Hubert model)"),kmo=l(),Eh=a("li"),cse=a("strong"),Smo=o("imagegpt"),Rmo=o(" \u2014 "),uI=a("a"),Pmo=o("ImageGPTFeatureExtractor"),Bmo=o(" (ImageGPT model)"),Imo=l(),Ch=a("li"),fse=a("strong"),Nmo=o("layoutlmv2"),qmo=o(" \u2014 "),bI=a("a"),jmo=o("LayoutLMv2FeatureExtractor"),Dmo=o(" (LayoutLMv2 model)"),Gmo=l(),wh=a("li"),mse=a("strong"),Omo=o("layoutlmv3"),Vmo=o(" \u2014 "),vI=a("a"),Xmo=o("LayoutLMv3FeatureExtractor"),zmo=o(" (LayoutLMv3 model)"),Wmo=l(),Ah=a("li"),gse=a("strong"),Qmo=o("levit"),Hmo=o(" \u2014 "),FI=a("a"),Umo=o("LevitFeatureExtractor"),Jmo=o(" (LeViT model)"),Ymo=l(),Lh=a("li"),hse=a("strong"),Kmo=o("maskformer"),Zmo=o(" \u2014 "),TI=a("a"),ego=o("MaskFormerFeatureExtractor"),ogo=o(" (MaskFormer model)"),rgo=l(),yh=a("li"),pse=a("strong"),tgo=o("perceiver"),ago=o(" \u2014 "),MI=a("a"),ngo=o("PerceiverFeatureExtractor"),sgo=o(" (Perceiver model)"),lgo=l(),xh=a("li"),_se=a("strong"),igo=o("poolformer"),dgo=o(" \u2014 "),EI=a("a"),cgo=o("PoolFormerFeatureExtractor"),fgo=o(" (PoolFormer model)"),mgo=l(),$h=a("li"),use=a("strong"),ggo=o("regnet"),hgo=o(" \u2014 "),CI=a("a"),pgo=o("ConvNextFeatureExtractor"),_go=o(" (RegNet model)"),ugo=l(),kh=a("li"),bse=a("strong"),bgo=o("resnet"),vgo=o(" \u2014 "),wI=a("a"),Fgo=o("ConvNextFeatureExtractor"),Tgo=o(" (ResNet model)"),Mgo=l(),Sh=a("li"),vse=a("strong"),Ego=o("segformer"),Cgo=o(" \u2014 "),AI=a("a"),wgo=o("SegformerFeatureExtractor"),Ago=o(" (SegFormer model)"),Lgo=l(),Rh=a("li"),Fse=a("strong"),ygo=o("speech_to_text"),xgo=o(" \u2014 "),LI=a("a"),$go=o("Speech2TextFeatureExtractor"),kgo=o(" (Speech2Text model)"),Sgo=l(),Ph=a("li"),Tse=a("strong"),Rgo=o("swin"),Pgo=o(" \u2014 "),yI=a("a"),Bgo=o("ViTFeatureExtractor"),Igo=o(" (Swin Transformer model)"),Ngo=l(),Bh=a("li"),Mse=a("strong"),qgo=o("van"),jgo=o(" \u2014 "),xI=a("a"),Dgo=o("ConvNextFeatureExtractor"),Ggo=o(" (VAN model)"),Ogo=l(),Ih=a("li"),Ese=a("strong"),Vgo=o("vit"),Xgo=o(" \u2014 "),$I=a("a"),zgo=o("ViTFeatureExtractor"),Wgo=o(" (ViT model)"),Qgo=l(),Nh=a("li"),Cse=a("strong"),Hgo=o("vit_mae"),Ugo=o(" \u2014 "),kI=a("a"),Jgo=o("ViTFeatureExtractor"),Ygo=o(" (ViTMAE model)"),Kgo=l(),qh=a("li"),wse=a("strong"),Zgo=o("wav2vec2"),eho=o(" \u2014 "),SI=a("a"),oho=o("Wav2Vec2FeatureExtractor"),rho=o(" (Wav2Vec2 model)"),tho=l(),jh=a("li"),Ase=a("strong"),aho=o("wav2vec2-conformer"),nho=o(" \u2014 "),RI=a("a"),sho=o("Wav2Vec2FeatureExtractor"),lho=o(" (Wav2Vec2-Conformer model)"),iho=l(),Dh=a("li"),Lse=a("strong"),dho=o("yolos"),cho=o(" \u2014 "),PI=a("a"),fho=o("YolosFeatureExtractor"),mho=o(" (YOLOS model)"),gho=l(),F(Gh.$$.fragment),hho=l(),F(Oh.$$.fragment),pho=l(),Vh=a("div"),F(iA.$$.fragment),_ho=l(),yse=a("p"),uho=o("Register a new feature extractor for this class."),Tje=l(),wi=a("h2"),Xh=a("a"),xse=a("span"),F(dA.$$.fragment),bho=l(),$se=a("span"),vho=o("AutoProcessor"),Mje=l(),Lo=a("div"),F(cA.$$.fragment),Fho=l(),fA=a("p"),Tho=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),BI=a("a"),Mho=o("AutoProcessor.from_pretrained()"),Eho=o(" class method."),Cho=l(),mA=a("p"),who=o("This class cannot be instantiated directly using "),kse=a("code"),Aho=o("__init__()"),Lho=o(" (throws an error)."),yho=l(),Ue=a("div"),F(gA.$$.fragment),xho=l(),Sse=a("p"),$ho=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),kho=l(),Ai=a("p"),Sho=o("The processor class to instantiate is selected based on the "),Rse=a("code"),Rho=o("model_type"),Pho=o(` property of the config object (either
passed as an argument or loaded from `),Pse=a("code"),Bho=o("pretrained_model_name_or_path"),Iho=o(" if possible):"),Nho=l(),he=a("ul"),zh=a("li"),Bse=a("strong"),qho=o("clip"),jho=o(" \u2014 "),II=a("a"),Dho=o("CLIPProcessor"),Gho=o(" (CLIP model)"),Oho=l(),Wh=a("li"),Ise=a("strong"),Vho=o("flava"),Xho=o(" \u2014 "),Nse=a("code"),zho=o("FLAVAProcessor"),Who=o(" (FLAVA model)"),Qho=l(),Qh=a("li"),qse=a("strong"),Hho=o("layoutlmv2"),Uho=o(" \u2014 "),NI=a("a"),Jho=o("LayoutLMv2Processor"),Yho=o(" (LayoutLMv2 model)"),Kho=l(),Hh=a("li"),jse=a("strong"),Zho=o("layoutlmv3"),epo=o(" \u2014 "),qI=a("a"),opo=o("LayoutLMv3Processor"),rpo=o(" (LayoutLMv3 model)"),tpo=l(),Uh=a("li"),Dse=a("strong"),apo=o("layoutxlm"),npo=o(" \u2014 "),jI=a("a"),spo=o("LayoutXLMProcessor"),lpo=o(" (LayoutXLM model)"),ipo=l(),Jh=a("li"),Gse=a("strong"),dpo=o("sew"),cpo=o(" \u2014 "),DI=a("a"),fpo=o("Wav2Vec2Processor"),mpo=o(" (SEW model)"),gpo=l(),Yh=a("li"),Ose=a("strong"),hpo=o("sew-d"),ppo=o(" \u2014 "),GI=a("a"),_po=o("Wav2Vec2Processor"),upo=o(" (SEW-D model)"),bpo=l(),Kh=a("li"),Vse=a("strong"),vpo=o("speech_to_text"),Fpo=o(" \u2014 "),OI=a("a"),Tpo=o("Speech2TextProcessor"),Mpo=o(" (Speech2Text model)"),Epo=l(),Zh=a("li"),Xse=a("strong"),Cpo=o("speech_to_text_2"),wpo=o(" \u2014 "),VI=a("a"),Apo=o("Speech2Text2Processor"),Lpo=o(" (Speech2Text2 model)"),ypo=l(),ep=a("li"),zse=a("strong"),xpo=o("trocr"),$po=o(" \u2014 "),XI=a("a"),kpo=o("TrOCRProcessor"),Spo=o(" (TrOCR model)"),Rpo=l(),op=a("li"),Wse=a("strong"),Ppo=o("unispeech"),Bpo=o(" \u2014 "),zI=a("a"),Ipo=o("Wav2Vec2Processor"),Npo=o(" (UniSpeech model)"),qpo=l(),rp=a("li"),Qse=a("strong"),jpo=o("unispeech-sat"),Dpo=o(" \u2014 "),WI=a("a"),Gpo=o("Wav2Vec2Processor"),Opo=o(" (UniSpeechSat model)"),Vpo=l(),tp=a("li"),Hse=a("strong"),Xpo=o("vilt"),zpo=o(" \u2014 "),QI=a("a"),Wpo=o("ViltProcessor"),Qpo=o(" (ViLT model)"),Hpo=l(),ap=a("li"),Use=a("strong"),Upo=o("vision-text-dual-encoder"),Jpo=o(" \u2014 "),HI=a("a"),Ypo=o("VisionTextDualEncoderProcessor"),Kpo=o(" (VisionTextDualEncoder model)"),Zpo=l(),np=a("li"),Jse=a("strong"),e_o=o("wav2vec2"),o_o=o(" \u2014 "),UI=a("a"),r_o=o("Wav2Vec2Processor"),t_o=o(" (Wav2Vec2 model)"),a_o=l(),sp=a("li"),Yse=a("strong"),n_o=o("wav2vec2-conformer"),s_o=o(" \u2014 "),JI=a("a"),l_o=o("Wav2Vec2Processor"),i_o=o(" (Wav2Vec2-Conformer model)"),d_o=l(),lp=a("li"),Kse=a("strong"),c_o=o("wavlm"),f_o=o(" \u2014 "),YI=a("a"),m_o=o("Wav2Vec2Processor"),g_o=o(" (WavLM model)"),h_o=l(),F(ip.$$.fragment),p_o=l(),F(dp.$$.fragment),__o=l(),cp=a("div"),F(hA.$$.fragment),u_o=l(),Zse=a("p"),b_o=o("Register a new processor for this class."),Eje=l(),Li=a("h2"),fp=a("a"),ele=a("span"),F(pA.$$.fragment),v_o=l(),ole=a("span"),F_o=o("AutoModel"),Cje=l(),yo=a("div"),F(_A.$$.fragment),T_o=l(),yi=a("p"),M_o=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),KI=a("a"),E_o=o("from_pretrained()"),C_o=o(" class method or the "),ZI=a("a"),w_o=o("from_config()"),A_o=o(` class
method.`),L_o=l(),uA=a("p"),y_o=o("This class cannot be instantiated directly using "),rle=a("code"),x_o=o("__init__()"),$_o=o(" (throws an error)."),k_o=l(),tt=a("div"),F(bA.$$.fragment),S_o=l(),tle=a("p"),R_o=o("Instantiates one of the base model classes of the library from a configuration."),P_o=l(),xi=a("p"),B_o=o(`Note:
Loading a model from its configuration file does `),ale=a("strong"),I_o=o("not"),N_o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eN=a("a"),q_o=o("from_pretrained()"),j_o=o(" to load the model weights."),D_o=l(),F(mp.$$.fragment),G_o=l(),Je=a("div"),F(vA.$$.fragment),O_o=l(),nle=a("p"),V_o=o("Instantiate one of the base model classes of the library from a pretrained model."),X_o=l(),ya=a("p"),z_o=o("The model class to instantiate is selected based on the "),sle=a("code"),W_o=o("model_type"),Q_o=o(` property of the config object (either
passed as an argument or loaded from `),lle=a("code"),H_o=o("pretrained_model_name_or_path"),U_o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ile=a("code"),J_o=o("pretrained_model_name_or_path"),Y_o=o(":"),K_o=l(),x=a("ul"),gp=a("li"),dle=a("strong"),Z_o=o("albert"),euo=o(" \u2014 "),oN=a("a"),ouo=o("AlbertModel"),ruo=o(" (ALBERT model)"),tuo=l(),hp=a("li"),cle=a("strong"),auo=o("bart"),nuo=o(" \u2014 "),rN=a("a"),suo=o("BartModel"),luo=o(" (BART model)"),iuo=l(),pp=a("li"),fle=a("strong"),duo=o("beit"),cuo=o(" \u2014 "),tN=a("a"),fuo=o("BeitModel"),muo=o(" (BEiT model)"),guo=l(),_p=a("li"),mle=a("strong"),huo=o("bert"),puo=o(" \u2014 "),aN=a("a"),_uo=o("BertModel"),uuo=o(" (BERT model)"),buo=l(),up=a("li"),gle=a("strong"),vuo=o("bert-generation"),Fuo=o(" \u2014 "),nN=a("a"),Tuo=o("BertGenerationEncoder"),Muo=o(" (Bert Generation model)"),Euo=l(),bp=a("li"),hle=a("strong"),Cuo=o("big_bird"),wuo=o(" \u2014 "),sN=a("a"),Auo=o("BigBirdModel"),Luo=o(" (BigBird model)"),yuo=l(),vp=a("li"),ple=a("strong"),xuo=o("bigbird_pegasus"),$uo=o(" \u2014 "),lN=a("a"),kuo=o("BigBirdPegasusModel"),Suo=o(" (BigBird-Pegasus model)"),Ruo=l(),Fp=a("li"),_le=a("strong"),Puo=o("blenderbot"),Buo=o(" \u2014 "),iN=a("a"),Iuo=o("BlenderbotModel"),Nuo=o(" (Blenderbot model)"),quo=l(),Tp=a("li"),ule=a("strong"),juo=o("blenderbot-small"),Duo=o(" \u2014 "),dN=a("a"),Guo=o("BlenderbotSmallModel"),Ouo=o(" (BlenderbotSmall model)"),Vuo=l(),Mp=a("li"),ble=a("strong"),Xuo=o("camembert"),zuo=o(" \u2014 "),cN=a("a"),Wuo=o("CamembertModel"),Quo=o(" (CamemBERT model)"),Huo=l(),Ep=a("li"),vle=a("strong"),Uuo=o("canine"),Juo=o(" \u2014 "),fN=a("a"),Yuo=o("CanineModel"),Kuo=o(" (CANINE model)"),Zuo=l(),Cp=a("li"),Fle=a("strong"),e2o=o("clip"),o2o=o(" \u2014 "),mN=a("a"),r2o=o("CLIPModel"),t2o=o(" (CLIP model)"),a2o=l(),wp=a("li"),Tle=a("strong"),n2o=o("convbert"),s2o=o(" \u2014 "),gN=a("a"),l2o=o("ConvBertModel"),i2o=o(" (ConvBERT model)"),d2o=l(),Ap=a("li"),Mle=a("strong"),c2o=o("convnext"),f2o=o(" \u2014 "),hN=a("a"),m2o=o("ConvNextModel"),g2o=o(" (ConvNeXT model)"),h2o=l(),Lp=a("li"),Ele=a("strong"),p2o=o("ctrl"),_2o=o(" \u2014 "),pN=a("a"),u2o=o("CTRLModel"),b2o=o(" (CTRL model)"),v2o=l(),yp=a("li"),Cle=a("strong"),F2o=o("cvt"),T2o=o(" \u2014 "),_N=a("a"),M2o=o("CvtModel"),E2o=o(" (CvT model)"),C2o=l(),xp=a("li"),wle=a("strong"),w2o=o("data2vec-audio"),A2o=o(" \u2014 "),uN=a("a"),L2o=o("Data2VecAudioModel"),y2o=o(" (Data2VecAudio model)"),x2o=l(),$p=a("li"),Ale=a("strong"),$2o=o("data2vec-text"),k2o=o(" \u2014 "),bN=a("a"),S2o=o("Data2VecTextModel"),R2o=o(" (Data2VecText model)"),P2o=l(),kp=a("li"),Lle=a("strong"),B2o=o("data2vec-vision"),I2o=o(" \u2014 "),vN=a("a"),N2o=o("Data2VecVisionModel"),q2o=o(" (Data2VecVision model)"),j2o=l(),Sp=a("li"),yle=a("strong"),D2o=o("deberta"),G2o=o(" \u2014 "),FN=a("a"),O2o=o("DebertaModel"),V2o=o(" (DeBERTa model)"),X2o=l(),Rp=a("li"),xle=a("strong"),z2o=o("deberta-v2"),W2o=o(" \u2014 "),TN=a("a"),Q2o=o("DebertaV2Model"),H2o=o(" (DeBERTa-v2 model)"),U2o=l(),Pp=a("li"),$le=a("strong"),J2o=o("decision_transformer"),Y2o=o(" \u2014 "),MN=a("a"),K2o=o("DecisionTransformerModel"),Z2o=o(" (Decision Transformer model)"),e1o=l(),Bp=a("li"),kle=a("strong"),o1o=o("deit"),r1o=o(" \u2014 "),EN=a("a"),t1o=o("DeiTModel"),a1o=o(" (DeiT model)"),n1o=l(),Ip=a("li"),Sle=a("strong"),s1o=o("detr"),l1o=o(" \u2014 "),CN=a("a"),i1o=o("DetrModel"),d1o=o(" (DETR model)"),c1o=l(),Np=a("li"),Rle=a("strong"),f1o=o("distilbert"),m1o=o(" \u2014 "),wN=a("a"),g1o=o("DistilBertModel"),h1o=o(" (DistilBERT model)"),p1o=l(),qp=a("li"),Ple=a("strong"),_1o=o("dpr"),u1o=o(" \u2014 "),AN=a("a"),b1o=o("DPRQuestionEncoder"),v1o=o(" (DPR model)"),F1o=l(),jp=a("li"),Ble=a("strong"),T1o=o("dpt"),M1o=o(" \u2014 "),LN=a("a"),E1o=o("DPTModel"),C1o=o(" (DPT model)"),w1o=l(),Dp=a("li"),Ile=a("strong"),A1o=o("electra"),L1o=o(" \u2014 "),yN=a("a"),y1o=o("ElectraModel"),x1o=o(" (ELECTRA model)"),$1o=l(),Gp=a("li"),Nle=a("strong"),k1o=o("flaubert"),S1o=o(" \u2014 "),xN=a("a"),R1o=o("FlaubertModel"),P1o=o(" (FlauBERT model)"),B1o=l(),Op=a("li"),qle=a("strong"),I1o=o("flava"),N1o=o(" \u2014 "),$N=a("a"),q1o=o("FlavaModel"),j1o=o(" (FLAVA model)"),D1o=l(),Vp=a("li"),jle=a("strong"),G1o=o("fnet"),O1o=o(" \u2014 "),kN=a("a"),V1o=o("FNetModel"),X1o=o(" (FNet model)"),z1o=l(),Xp=a("li"),Dle=a("strong"),W1o=o("fsmt"),Q1o=o(" \u2014 "),SN=a("a"),H1o=o("FSMTModel"),U1o=o(" (FairSeq Machine-Translation model)"),J1o=l(),Bs=a("li"),Gle=a("strong"),Y1o=o("funnel"),K1o=o(" \u2014 "),RN=a("a"),Z1o=o("FunnelModel"),ebo=o(" or "),PN=a("a"),obo=o("FunnelBaseModel"),rbo=o(" (Funnel Transformer model)"),tbo=l(),zp=a("li"),Ole=a("strong"),abo=o("glpn"),nbo=o(" \u2014 "),BN=a("a"),sbo=o("GLPNModel"),lbo=o(" (GLPN model)"),ibo=l(),Wp=a("li"),Vle=a("strong"),dbo=o("gpt2"),cbo=o(" \u2014 "),IN=a("a"),fbo=o("GPT2Model"),mbo=o(" (OpenAI GPT-2 model)"),gbo=l(),Qp=a("li"),Xle=a("strong"),hbo=o("gpt_neo"),pbo=o(" \u2014 "),NN=a("a"),_bo=o("GPTNeoModel"),ubo=o(" (GPT Neo model)"),bbo=l(),Hp=a("li"),zle=a("strong"),vbo=o("gpt_neox"),Fbo=o(" \u2014 "),qN=a("a"),Tbo=o("GPTNeoXModel"),Mbo=o(" (GPT NeoX model)"),Ebo=l(),Up=a("li"),Wle=a("strong"),Cbo=o("gptj"),wbo=o(" \u2014 "),jN=a("a"),Abo=o("GPTJModel"),Lbo=o(" (GPT-J model)"),ybo=l(),Jp=a("li"),Qle=a("strong"),xbo=o("hubert"),$bo=o(" \u2014 "),DN=a("a"),kbo=o("HubertModel"),Sbo=o(" (Hubert model)"),Rbo=l(),Yp=a("li"),Hle=a("strong"),Pbo=o("ibert"),Bbo=o(" \u2014 "),GN=a("a"),Ibo=o("IBertModel"),Nbo=o(" (I-BERT model)"),qbo=l(),Kp=a("li"),Ule=a("strong"),jbo=o("imagegpt"),Dbo=o(" \u2014 "),ON=a("a"),Gbo=o("ImageGPTModel"),Obo=o(" (ImageGPT model)"),Vbo=l(),Zp=a("li"),Jle=a("strong"),Xbo=o("layoutlm"),zbo=o(" \u2014 "),VN=a("a"),Wbo=o("LayoutLMModel"),Qbo=o(" (LayoutLM model)"),Hbo=l(),e_=a("li"),Yle=a("strong"),Ubo=o("layoutlmv2"),Jbo=o(" \u2014 "),XN=a("a"),Ybo=o("LayoutLMv2Model"),Kbo=o(" (LayoutLMv2 model)"),Zbo=l(),o_=a("li"),Kle=a("strong"),evo=o("layoutlmv3"),ovo=o(" \u2014 "),zN=a("a"),rvo=o("LayoutLMv3Model"),tvo=o(" (LayoutLMv3 model)"),avo=l(),r_=a("li"),Zle=a("strong"),nvo=o("led"),svo=o(" \u2014 "),WN=a("a"),lvo=o("LEDModel"),ivo=o(" (LED model)"),dvo=l(),t_=a("li"),eie=a("strong"),cvo=o("levit"),fvo=o(" \u2014 "),QN=a("a"),mvo=o("LevitModel"),gvo=o(" (LeViT model)"),hvo=l(),a_=a("li"),oie=a("strong"),pvo=o("longformer"),_vo=o(" \u2014 "),HN=a("a"),uvo=o("LongformerModel"),bvo=o(" (Longformer model)"),vvo=l(),n_=a("li"),rie=a("strong"),Fvo=o("longt5"),Tvo=o(" \u2014 "),UN=a("a"),Mvo=o("LongT5Model"),Evo=o(" (LongT5 model)"),Cvo=l(),s_=a("li"),tie=a("strong"),wvo=o("luke"),Avo=o(" \u2014 "),JN=a("a"),Lvo=o("LukeModel"),yvo=o(" (LUKE model)"),xvo=l(),l_=a("li"),aie=a("strong"),$vo=o("lxmert"),kvo=o(" \u2014 "),YN=a("a"),Svo=o("LxmertModel"),Rvo=o(" (LXMERT model)"),Pvo=l(),i_=a("li"),nie=a("strong"),Bvo=o("m2m_100"),Ivo=o(" \u2014 "),KN=a("a"),Nvo=o("M2M100Model"),qvo=o(" (M2M100 model)"),jvo=l(),d_=a("li"),sie=a("strong"),Dvo=o("marian"),Gvo=o(" \u2014 "),ZN=a("a"),Ovo=o("MarianModel"),Vvo=o(" (Marian model)"),Xvo=l(),c_=a("li"),lie=a("strong"),zvo=o("maskformer"),Wvo=o(" \u2014 "),eq=a("a"),Qvo=o("MaskFormerModel"),Hvo=o(" (MaskFormer model)"),Uvo=l(),f_=a("li"),iie=a("strong"),Jvo=o("mbart"),Yvo=o(" \u2014 "),oq=a("a"),Kvo=o("MBartModel"),Zvo=o(" (mBART model)"),eFo=l(),m_=a("li"),die=a("strong"),oFo=o("megatron-bert"),rFo=o(" \u2014 "),rq=a("a"),tFo=o("MegatronBertModel"),aFo=o(" (Megatron-BERT model)"),nFo=l(),g_=a("li"),cie=a("strong"),sFo=o("mobilebert"),lFo=o(" \u2014 "),tq=a("a"),iFo=o("MobileBertModel"),dFo=o(" (MobileBERT model)"),cFo=l(),h_=a("li"),fie=a("strong"),fFo=o("mpnet"),mFo=o(" \u2014 "),aq=a("a"),gFo=o("MPNetModel"),hFo=o(" (MPNet model)"),pFo=l(),p_=a("li"),mie=a("strong"),_Fo=o("mt5"),uFo=o(" \u2014 "),nq=a("a"),bFo=o("MT5Model"),vFo=o(" (MT5 model)"),FFo=l(),__=a("li"),gie=a("strong"),TFo=o("nystromformer"),MFo=o(" \u2014 "),sq=a("a"),EFo=o("NystromformerModel"),CFo=o(" (Nystr\xF6mformer model)"),wFo=l(),u_=a("li"),hie=a("strong"),AFo=o("openai-gpt"),LFo=o(" \u2014 "),lq=a("a"),yFo=o("OpenAIGPTModel"),xFo=o(" (OpenAI GPT model)"),$Fo=l(),b_=a("li"),pie=a("strong"),kFo=o("opt"),SFo=o(" \u2014 "),iq=a("a"),RFo=o("OPTModel"),PFo=o(" (OPT model)"),BFo=l(),v_=a("li"),_ie=a("strong"),IFo=o("pegasus"),NFo=o(" \u2014 "),dq=a("a"),qFo=o("PegasusModel"),jFo=o(" (Pegasus model)"),DFo=l(),F_=a("li"),uie=a("strong"),GFo=o("perceiver"),OFo=o(" \u2014 "),cq=a("a"),VFo=o("PerceiverModel"),XFo=o(" (Perceiver model)"),zFo=l(),T_=a("li"),bie=a("strong"),WFo=o("plbart"),QFo=o(" \u2014 "),fq=a("a"),HFo=o("PLBartModel"),UFo=o(" (PLBart model)"),JFo=l(),M_=a("li"),vie=a("strong"),YFo=o("poolformer"),KFo=o(" \u2014 "),mq=a("a"),ZFo=o("PoolFormerModel"),e6o=o(" (PoolFormer model)"),o6o=l(),E_=a("li"),Fie=a("strong"),r6o=o("prophetnet"),t6o=o(" \u2014 "),gq=a("a"),a6o=o("ProphetNetModel"),n6o=o(" (ProphetNet model)"),s6o=l(),C_=a("li"),Tie=a("strong"),l6o=o("qdqbert"),i6o=o(" \u2014 "),hq=a("a"),d6o=o("QDQBertModel"),c6o=o(" (QDQBert model)"),f6o=l(),w_=a("li"),Mie=a("strong"),m6o=o("reformer"),g6o=o(" \u2014 "),pq=a("a"),h6o=o("ReformerModel"),p6o=o(" (Reformer model)"),_6o=l(),A_=a("li"),Eie=a("strong"),u6o=o("regnet"),b6o=o(" \u2014 "),_q=a("a"),v6o=o("RegNetModel"),F6o=o(" (RegNet model)"),T6o=l(),L_=a("li"),Cie=a("strong"),M6o=o("rembert"),E6o=o(" \u2014 "),uq=a("a"),C6o=o("RemBertModel"),w6o=o(" (RemBERT model)"),A6o=l(),y_=a("li"),wie=a("strong"),L6o=o("resnet"),y6o=o(" \u2014 "),bq=a("a"),x6o=o("ResNetModel"),$6o=o(" (ResNet model)"),k6o=l(),x_=a("li"),Aie=a("strong"),S6o=o("retribert"),R6o=o(" \u2014 "),vq=a("a"),P6o=o("RetriBertModel"),B6o=o(" (RetriBERT model)"),I6o=l(),$_=a("li"),Lie=a("strong"),N6o=o("roberta"),q6o=o(" \u2014 "),Fq=a("a"),j6o=o("RobertaModel"),D6o=o(" (RoBERTa model)"),G6o=l(),k_=a("li"),yie=a("strong"),O6o=o("roformer"),V6o=o(" \u2014 "),Tq=a("a"),X6o=o("RoFormerModel"),z6o=o(" (RoFormer model)"),W6o=l(),S_=a("li"),xie=a("strong"),Q6o=o("segformer"),H6o=o(" \u2014 "),Mq=a("a"),U6o=o("SegformerModel"),J6o=o(" (SegFormer model)"),Y6o=l(),R_=a("li"),$ie=a("strong"),K6o=o("sew"),Z6o=o(" \u2014 "),Eq=a("a"),eTo=o("SEWModel"),oTo=o(" (SEW model)"),rTo=l(),P_=a("li"),kie=a("strong"),tTo=o("sew-d"),aTo=o(" \u2014 "),Cq=a("a"),nTo=o("SEWDModel"),sTo=o(" (SEW-D model)"),lTo=l(),B_=a("li"),Sie=a("strong"),iTo=o("speech_to_text"),dTo=o(" \u2014 "),wq=a("a"),cTo=o("Speech2TextModel"),fTo=o(" (Speech2Text model)"),mTo=l(),I_=a("li"),Rie=a("strong"),gTo=o("splinter"),hTo=o(" \u2014 "),Aq=a("a"),pTo=o("SplinterModel"),_To=o(" (Splinter model)"),uTo=l(),N_=a("li"),Pie=a("strong"),bTo=o("squeezebert"),vTo=o(" \u2014 "),Lq=a("a"),FTo=o("SqueezeBertModel"),TTo=o(" (SqueezeBERT model)"),MTo=l(),q_=a("li"),Bie=a("strong"),ETo=o("swin"),CTo=o(" \u2014 "),yq=a("a"),wTo=o("SwinModel"),ATo=o(" (Swin Transformer model)"),LTo=l(),j_=a("li"),Iie=a("strong"),yTo=o("t5"),xTo=o(" \u2014 "),xq=a("a"),$To=o("T5Model"),kTo=o(" (T5 model)"),STo=l(),D_=a("li"),Nie=a("strong"),RTo=o("tapas"),PTo=o(" \u2014 "),$q=a("a"),BTo=o("TapasModel"),ITo=o(" (TAPAS model)"),NTo=l(),G_=a("li"),qie=a("strong"),qTo=o("trajectory_transformer"),jTo=o(" \u2014 "),kq=a("a"),DTo=o("TrajectoryTransformerModel"),GTo=o(" (Trajectory Transformer model)"),OTo=l(),O_=a("li"),jie=a("strong"),VTo=o("transfo-xl"),XTo=o(" \u2014 "),Sq=a("a"),zTo=o("TransfoXLModel"),WTo=o(" (Transformer-XL model)"),QTo=l(),V_=a("li"),Die=a("strong"),HTo=o("unispeech"),UTo=o(" \u2014 "),Rq=a("a"),JTo=o("UniSpeechModel"),YTo=o(" (UniSpeech model)"),KTo=l(),X_=a("li"),Gie=a("strong"),ZTo=o("unispeech-sat"),e7o=o(" \u2014 "),Pq=a("a"),o7o=o("UniSpeechSatModel"),r7o=o(" (UniSpeechSat model)"),t7o=l(),z_=a("li"),Oie=a("strong"),a7o=o("van"),n7o=o(" \u2014 "),Bq=a("a"),s7o=o("VanModel"),l7o=o(" (VAN model)"),i7o=l(),W_=a("li"),Vie=a("strong"),d7o=o("vilt"),c7o=o(" \u2014 "),Iq=a("a"),f7o=o("ViltModel"),m7o=o(" (ViLT model)"),g7o=l(),Q_=a("li"),Xie=a("strong"),h7o=o("vision-text-dual-encoder"),p7o=o(" \u2014 "),Nq=a("a"),_7o=o("VisionTextDualEncoderModel"),u7o=o(" (VisionTextDualEncoder model)"),b7o=l(),H_=a("li"),zie=a("strong"),v7o=o("visual_bert"),F7o=o(" \u2014 "),qq=a("a"),T7o=o("VisualBertModel"),M7o=o(" (VisualBERT model)"),E7o=l(),U_=a("li"),Wie=a("strong"),C7o=o("vit"),w7o=o(" \u2014 "),jq=a("a"),A7o=o("ViTModel"),L7o=o(" (ViT model)"),y7o=l(),J_=a("li"),Qie=a("strong"),x7o=o("vit_mae"),$7o=o(" \u2014 "),Dq=a("a"),k7o=o("ViTMAEModel"),S7o=o(" (ViTMAE model)"),R7o=l(),Y_=a("li"),Hie=a("strong"),P7o=o("wav2vec2"),B7o=o(" \u2014 "),Gq=a("a"),I7o=o("Wav2Vec2Model"),N7o=o(" (Wav2Vec2 model)"),q7o=l(),K_=a("li"),Uie=a("strong"),j7o=o("wav2vec2-conformer"),D7o=o(" \u2014 "),Oq=a("a"),G7o=o("Wav2Vec2ConformerModel"),O7o=o(" (Wav2Vec2-Conformer model)"),V7o=l(),Z_=a("li"),Jie=a("strong"),X7o=o("wavlm"),z7o=o(" \u2014 "),Vq=a("a"),W7o=o("WavLMModel"),Q7o=o(" (WavLM model)"),H7o=l(),eu=a("li"),Yie=a("strong"),U7o=o("xglm"),J7o=o(" \u2014 "),Xq=a("a"),Y7o=o("XGLMModel"),K7o=o(" (XGLM model)"),Z7o=l(),ou=a("li"),Kie=a("strong"),e9o=o("xlm"),o9o=o(" \u2014 "),zq=a("a"),r9o=o("XLMModel"),t9o=o(" (XLM model)"),a9o=l(),ru=a("li"),Zie=a("strong"),n9o=o("xlm-prophetnet"),s9o=o(" \u2014 "),Wq=a("a"),l9o=o("XLMProphetNetModel"),i9o=o(" (XLM-ProphetNet model)"),d9o=l(),tu=a("li"),ede=a("strong"),c9o=o("xlm-roberta"),f9o=o(" \u2014 "),Qq=a("a"),m9o=o("XLMRobertaModel"),g9o=o(" (XLM-RoBERTa model)"),h9o=l(),au=a("li"),ode=a("strong"),p9o=o("xlm-roberta-xl"),_9o=o(" \u2014 "),Hq=a("a"),u9o=o("XLMRobertaXLModel"),b9o=o(" (XLM-RoBERTa-XL model)"),v9o=l(),nu=a("li"),rde=a("strong"),F9o=o("xlnet"),T9o=o(" \u2014 "),Uq=a("a"),M9o=o("XLNetModel"),E9o=o(" (XLNet model)"),C9o=l(),su=a("li"),tde=a("strong"),w9o=o("yolos"),A9o=o(" \u2014 "),Jq=a("a"),L9o=o("YolosModel"),y9o=o(" (YOLOS model)"),x9o=l(),lu=a("li"),ade=a("strong"),$9o=o("yoso"),k9o=o(" \u2014 "),Yq=a("a"),S9o=o("YosoModel"),R9o=o(" (YOSO model)"),P9o=l(),iu=a("p"),B9o=o("The model is set in evaluation mode by default using "),nde=a("code"),I9o=o("model.eval()"),N9o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sde=a("code"),q9o=o("model.train()"),j9o=l(),F(du.$$.fragment),wje=l(),$i=a("h2"),cu=a("a"),lde=a("span"),F(FA.$$.fragment),D9o=l(),ide=a("span"),G9o=o("AutoModelForPreTraining"),Aje=l(),xo=a("div"),F(TA.$$.fragment),O9o=l(),ki=a("p"),V9o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Kq=a("a"),X9o=o("from_pretrained()"),z9o=o(" class method or the "),Zq=a("a"),W9o=o("from_config()"),Q9o=o(` class
method.`),H9o=l(),MA=a("p"),U9o=o("This class cannot be instantiated directly using "),dde=a("code"),J9o=o("__init__()"),Y9o=o(" (throws an error)."),K9o=l(),at=a("div"),F(EA.$$.fragment),Z9o=l(),cde=a("p"),eMo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),oMo=l(),Si=a("p"),rMo=o(`Note:
Loading a model from its configuration file does `),fde=a("strong"),tMo=o("not"),aMo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ej=a("a"),nMo=o("from_pretrained()"),sMo=o(" to load the model weights."),lMo=l(),F(fu.$$.fragment),iMo=l(),Ye=a("div"),F(CA.$$.fragment),dMo=l(),mde=a("p"),cMo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),fMo=l(),xa=a("p"),mMo=o("The model class to instantiate is selected based on the "),gde=a("code"),gMo=o("model_type"),hMo=o(` property of the config object (either
passed as an argument or loaded from `),hde=a("code"),pMo=o("pretrained_model_name_or_path"),_Mo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pde=a("code"),uMo=o("pretrained_model_name_or_path"),bMo=o(":"),vMo=l(),G=a("ul"),mu=a("li"),_de=a("strong"),FMo=o("albert"),TMo=o(" \u2014 "),oj=a("a"),MMo=o("AlbertForPreTraining"),EMo=o(" (ALBERT model)"),CMo=l(),gu=a("li"),ude=a("strong"),wMo=o("bart"),AMo=o(" \u2014 "),rj=a("a"),LMo=o("BartForConditionalGeneration"),yMo=o(" (BART model)"),xMo=l(),hu=a("li"),bde=a("strong"),$Mo=o("bert"),kMo=o(" \u2014 "),tj=a("a"),SMo=o("BertForPreTraining"),RMo=o(" (BERT model)"),PMo=l(),pu=a("li"),vde=a("strong"),BMo=o("big_bird"),IMo=o(" \u2014 "),aj=a("a"),NMo=o("BigBirdForPreTraining"),qMo=o(" (BigBird model)"),jMo=l(),_u=a("li"),Fde=a("strong"),DMo=o("camembert"),GMo=o(" \u2014 "),nj=a("a"),OMo=o("CamembertForMaskedLM"),VMo=o(" (CamemBERT model)"),XMo=l(),uu=a("li"),Tde=a("strong"),zMo=o("ctrl"),WMo=o(" \u2014 "),sj=a("a"),QMo=o("CTRLLMHeadModel"),HMo=o(" (CTRL model)"),UMo=l(),bu=a("li"),Mde=a("strong"),JMo=o("data2vec-text"),YMo=o(" \u2014 "),lj=a("a"),KMo=o("Data2VecTextForMaskedLM"),ZMo=o(" (Data2VecText model)"),e4o=l(),vu=a("li"),Ede=a("strong"),o4o=o("deberta"),r4o=o(" \u2014 "),ij=a("a"),t4o=o("DebertaForMaskedLM"),a4o=o(" (DeBERTa model)"),n4o=l(),Fu=a("li"),Cde=a("strong"),s4o=o("deberta-v2"),l4o=o(" \u2014 "),dj=a("a"),i4o=o("DebertaV2ForMaskedLM"),d4o=o(" (DeBERTa-v2 model)"),c4o=l(),Tu=a("li"),wde=a("strong"),f4o=o("distilbert"),m4o=o(" \u2014 "),cj=a("a"),g4o=o("DistilBertForMaskedLM"),h4o=o(" (DistilBERT model)"),p4o=l(),Mu=a("li"),Ade=a("strong"),_4o=o("electra"),u4o=o(" \u2014 "),fj=a("a"),b4o=o("ElectraForPreTraining"),v4o=o(" (ELECTRA model)"),F4o=l(),Eu=a("li"),Lde=a("strong"),T4o=o("flaubert"),M4o=o(" \u2014 "),mj=a("a"),E4o=o("FlaubertWithLMHeadModel"),C4o=o(" (FlauBERT model)"),w4o=l(),Cu=a("li"),yde=a("strong"),A4o=o("flava"),L4o=o(" \u2014 "),gj=a("a"),y4o=o("FlavaForPreTraining"),x4o=o(" (FLAVA model)"),$4o=l(),wu=a("li"),xde=a("strong"),k4o=o("fnet"),S4o=o(" \u2014 "),hj=a("a"),R4o=o("FNetForPreTraining"),P4o=o(" (FNet model)"),B4o=l(),Au=a("li"),$de=a("strong"),I4o=o("fsmt"),N4o=o(" \u2014 "),pj=a("a"),q4o=o("FSMTForConditionalGeneration"),j4o=o(" (FairSeq Machine-Translation model)"),D4o=l(),Lu=a("li"),kde=a("strong"),G4o=o("funnel"),O4o=o(" \u2014 "),_j=a("a"),V4o=o("FunnelForPreTraining"),X4o=o(" (Funnel Transformer model)"),z4o=l(),yu=a("li"),Sde=a("strong"),W4o=o("gpt2"),Q4o=o(" \u2014 "),uj=a("a"),H4o=o("GPT2LMHeadModel"),U4o=o(" (OpenAI GPT-2 model)"),J4o=l(),xu=a("li"),Rde=a("strong"),Y4o=o("ibert"),K4o=o(" \u2014 "),bj=a("a"),Z4o=o("IBertForMaskedLM"),eEo=o(" (I-BERT model)"),oEo=l(),$u=a("li"),Pde=a("strong"),rEo=o("layoutlm"),tEo=o(" \u2014 "),vj=a("a"),aEo=o("LayoutLMForMaskedLM"),nEo=o(" (LayoutLM model)"),sEo=l(),ku=a("li"),Bde=a("strong"),lEo=o("longformer"),iEo=o(" \u2014 "),Fj=a("a"),dEo=o("LongformerForMaskedLM"),cEo=o(" (Longformer model)"),fEo=l(),Su=a("li"),Ide=a("strong"),mEo=o("lxmert"),gEo=o(" \u2014 "),Tj=a("a"),hEo=o("LxmertForPreTraining"),pEo=o(" (LXMERT model)"),_Eo=l(),Ru=a("li"),Nde=a("strong"),uEo=o("megatron-bert"),bEo=o(" \u2014 "),Mj=a("a"),vEo=o("MegatronBertForPreTraining"),FEo=o(" (Megatron-BERT model)"),TEo=l(),Pu=a("li"),qde=a("strong"),MEo=o("mobilebert"),EEo=o(" \u2014 "),Ej=a("a"),CEo=o("MobileBertForPreTraining"),wEo=o(" (MobileBERT model)"),AEo=l(),Bu=a("li"),jde=a("strong"),LEo=o("mpnet"),yEo=o(" \u2014 "),Cj=a("a"),xEo=o("MPNetForMaskedLM"),$Eo=o(" (MPNet model)"),kEo=l(),Iu=a("li"),Dde=a("strong"),SEo=o("openai-gpt"),REo=o(" \u2014 "),wj=a("a"),PEo=o("OpenAIGPTLMHeadModel"),BEo=o(" (OpenAI GPT model)"),IEo=l(),Nu=a("li"),Gde=a("strong"),NEo=o("retribert"),qEo=o(" \u2014 "),Aj=a("a"),jEo=o("RetriBertModel"),DEo=o(" (RetriBERT model)"),GEo=l(),qu=a("li"),Ode=a("strong"),OEo=o("roberta"),VEo=o(" \u2014 "),Lj=a("a"),XEo=o("RobertaForMaskedLM"),zEo=o(" (RoBERTa model)"),WEo=l(),ju=a("li"),Vde=a("strong"),QEo=o("splinter"),HEo=o(" \u2014 "),yj=a("a"),UEo=o("SplinterForPreTraining"),JEo=o(" (Splinter model)"),YEo=l(),Du=a("li"),Xde=a("strong"),KEo=o("squeezebert"),ZEo=o(" \u2014 "),xj=a("a"),eCo=o("SqueezeBertForMaskedLM"),oCo=o(" (SqueezeBERT model)"),rCo=l(),Gu=a("li"),zde=a("strong"),tCo=o("t5"),aCo=o(" \u2014 "),$j=a("a"),nCo=o("T5ForConditionalGeneration"),sCo=o(" (T5 model)"),lCo=l(),Ou=a("li"),Wde=a("strong"),iCo=o("tapas"),dCo=o(" \u2014 "),kj=a("a"),cCo=o("TapasForMaskedLM"),fCo=o(" (TAPAS model)"),mCo=l(),Vu=a("li"),Qde=a("strong"),gCo=o("transfo-xl"),hCo=o(" \u2014 "),Sj=a("a"),pCo=o("TransfoXLLMHeadModel"),_Co=o(" (Transformer-XL model)"),uCo=l(),Xu=a("li"),Hde=a("strong"),bCo=o("unispeech"),vCo=o(" \u2014 "),Rj=a("a"),FCo=o("UniSpeechForPreTraining"),TCo=o(" (UniSpeech model)"),MCo=l(),zu=a("li"),Ude=a("strong"),ECo=o("unispeech-sat"),CCo=o(" \u2014 "),Pj=a("a"),wCo=o("UniSpeechSatForPreTraining"),ACo=o(" (UniSpeechSat model)"),LCo=l(),Wu=a("li"),Jde=a("strong"),yCo=o("visual_bert"),xCo=o(" \u2014 "),Bj=a("a"),$Co=o("VisualBertForPreTraining"),kCo=o(" (VisualBERT model)"),SCo=l(),Qu=a("li"),Yde=a("strong"),RCo=o("vit_mae"),PCo=o(" \u2014 "),Ij=a("a"),BCo=o("ViTMAEForPreTraining"),ICo=o(" (ViTMAE model)"),NCo=l(),Hu=a("li"),Kde=a("strong"),qCo=o("wav2vec2"),jCo=o(" \u2014 "),Nj=a("a"),DCo=o("Wav2Vec2ForPreTraining"),GCo=o(" (Wav2Vec2 model)"),OCo=l(),Uu=a("li"),Zde=a("strong"),VCo=o("wav2vec2-conformer"),XCo=o(" \u2014 "),qj=a("a"),zCo=o("Wav2Vec2ConformerForPreTraining"),WCo=o(" (Wav2Vec2-Conformer model)"),QCo=l(),Ju=a("li"),ece=a("strong"),HCo=o("xlm"),UCo=o(" \u2014 "),jj=a("a"),JCo=o("XLMWithLMHeadModel"),YCo=o(" (XLM model)"),KCo=l(),Yu=a("li"),oce=a("strong"),ZCo=o("xlm-roberta"),e5o=o(" \u2014 "),Dj=a("a"),o5o=o("XLMRobertaForMaskedLM"),r5o=o(" (XLM-RoBERTa model)"),t5o=l(),Ku=a("li"),rce=a("strong"),a5o=o("xlm-roberta-xl"),n5o=o(" \u2014 "),Gj=a("a"),s5o=o("XLMRobertaXLForMaskedLM"),l5o=o(" (XLM-RoBERTa-XL model)"),i5o=l(),Zu=a("li"),tce=a("strong"),d5o=o("xlnet"),c5o=o(" \u2014 "),Oj=a("a"),f5o=o("XLNetLMHeadModel"),m5o=o(" (XLNet model)"),g5o=l(),e2=a("p"),h5o=o("The model is set in evaluation mode by default using "),ace=a("code"),p5o=o("model.eval()"),_5o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nce=a("code"),u5o=o("model.train()"),b5o=l(),F(o2.$$.fragment),Lje=l(),Ri=a("h2"),r2=a("a"),sce=a("span"),F(wA.$$.fragment),v5o=l(),lce=a("span"),F5o=o("AutoModelForCausalLM"),yje=l(),$o=a("div"),F(AA.$$.fragment),T5o=l(),Pi=a("p"),M5o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Vj=a("a"),E5o=o("from_pretrained()"),C5o=o(" class method or the "),Xj=a("a"),w5o=o("from_config()"),A5o=o(` class
method.`),L5o=l(),LA=a("p"),y5o=o("This class cannot be instantiated directly using "),ice=a("code"),x5o=o("__init__()"),$5o=o(" (throws an error)."),k5o=l(),nt=a("div"),F(yA.$$.fragment),S5o=l(),dce=a("p"),R5o=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),P5o=l(),Bi=a("p"),B5o=o(`Note:
Loading a model from its configuration file does `),cce=a("strong"),I5o=o("not"),N5o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zj=a("a"),q5o=o("from_pretrained()"),j5o=o(" to load the model weights."),D5o=l(),F(t2.$$.fragment),G5o=l(),Ke=a("div"),F(xA.$$.fragment),O5o=l(),fce=a("p"),V5o=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),X5o=l(),$a=a("p"),z5o=o("The model class to instantiate is selected based on the "),mce=a("code"),W5o=o("model_type"),Q5o=o(` property of the config object (either
passed as an argument or loaded from `),gce=a("code"),H5o=o("pretrained_model_name_or_path"),U5o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hce=a("code"),J5o=o("pretrained_model_name_or_path"),Y5o=o(":"),K5o=l(),z=a("ul"),a2=a("li"),pce=a("strong"),Z5o=o("bart"),e3o=o(" \u2014 "),Wj=a("a"),o3o=o("BartForCausalLM"),r3o=o(" (BART model)"),t3o=l(),n2=a("li"),_ce=a("strong"),a3o=o("bert"),n3o=o(" \u2014 "),Qj=a("a"),s3o=o("BertLMHeadModel"),l3o=o(" (BERT model)"),i3o=l(),s2=a("li"),uce=a("strong"),d3o=o("bert-generation"),c3o=o(" \u2014 "),Hj=a("a"),f3o=o("BertGenerationDecoder"),m3o=o(" (Bert Generation model)"),g3o=l(),l2=a("li"),bce=a("strong"),h3o=o("big_bird"),p3o=o(" \u2014 "),Uj=a("a"),_3o=o("BigBirdForCausalLM"),u3o=o(" (BigBird model)"),b3o=l(),i2=a("li"),vce=a("strong"),v3o=o("bigbird_pegasus"),F3o=o(" \u2014 "),Jj=a("a"),T3o=o("BigBirdPegasusForCausalLM"),M3o=o(" (BigBird-Pegasus model)"),E3o=l(),d2=a("li"),Fce=a("strong"),C3o=o("blenderbot"),w3o=o(" \u2014 "),Yj=a("a"),A3o=o("BlenderbotForCausalLM"),L3o=o(" (Blenderbot model)"),y3o=l(),c2=a("li"),Tce=a("strong"),x3o=o("blenderbot-small"),$3o=o(" \u2014 "),Kj=a("a"),k3o=o("BlenderbotSmallForCausalLM"),S3o=o(" (BlenderbotSmall model)"),R3o=l(),f2=a("li"),Mce=a("strong"),P3o=o("camembert"),B3o=o(" \u2014 "),Zj=a("a"),I3o=o("CamembertForCausalLM"),N3o=o(" (CamemBERT model)"),q3o=l(),m2=a("li"),Ece=a("strong"),j3o=o("ctrl"),D3o=o(" \u2014 "),eD=a("a"),G3o=o("CTRLLMHeadModel"),O3o=o(" (CTRL model)"),V3o=l(),g2=a("li"),Cce=a("strong"),X3o=o("data2vec-text"),z3o=o(" \u2014 "),oD=a("a"),W3o=o("Data2VecTextForCausalLM"),Q3o=o(" (Data2VecText model)"),H3o=l(),h2=a("li"),wce=a("strong"),U3o=o("electra"),J3o=o(" \u2014 "),rD=a("a"),Y3o=o("ElectraForCausalLM"),K3o=o(" (ELECTRA model)"),Z3o=l(),p2=a("li"),Ace=a("strong"),e0o=o("gpt2"),o0o=o(" \u2014 "),tD=a("a"),r0o=o("GPT2LMHeadModel"),t0o=o(" (OpenAI GPT-2 model)"),a0o=l(),_2=a("li"),Lce=a("strong"),n0o=o("gpt_neo"),s0o=o(" \u2014 "),aD=a("a"),l0o=o("GPTNeoForCausalLM"),i0o=o(" (GPT Neo model)"),d0o=l(),u2=a("li"),yce=a("strong"),c0o=o("gpt_neox"),f0o=o(" \u2014 "),nD=a("a"),m0o=o("GPTNeoXForCausalLM"),g0o=o(" (GPT NeoX model)"),h0o=l(),b2=a("li"),xce=a("strong"),p0o=o("gptj"),_0o=o(" \u2014 "),sD=a("a"),u0o=o("GPTJForCausalLM"),b0o=o(" (GPT-J model)"),v0o=l(),v2=a("li"),$ce=a("strong"),F0o=o("marian"),T0o=o(" \u2014 "),lD=a("a"),M0o=o("MarianForCausalLM"),E0o=o(" (Marian model)"),C0o=l(),F2=a("li"),kce=a("strong"),w0o=o("mbart"),A0o=o(" \u2014 "),iD=a("a"),L0o=o("MBartForCausalLM"),y0o=o(" (mBART model)"),x0o=l(),T2=a("li"),Sce=a("strong"),$0o=o("megatron-bert"),k0o=o(" \u2014 "),dD=a("a"),S0o=o("MegatronBertForCausalLM"),R0o=o(" (Megatron-BERT model)"),P0o=l(),M2=a("li"),Rce=a("strong"),B0o=o("openai-gpt"),I0o=o(" \u2014 "),cD=a("a"),N0o=o("OpenAIGPTLMHeadModel"),q0o=o(" (OpenAI GPT model)"),j0o=l(),E2=a("li"),Pce=a("strong"),D0o=o("opt"),G0o=o(" \u2014 "),fD=a("a"),O0o=o("OPTForCausalLM"),V0o=o(" (OPT model)"),X0o=l(),C2=a("li"),Bce=a("strong"),z0o=o("pegasus"),W0o=o(" \u2014 "),mD=a("a"),Q0o=o("PegasusForCausalLM"),H0o=o(" (Pegasus model)"),U0o=l(),w2=a("li"),Ice=a("strong"),J0o=o("plbart"),Y0o=o(" \u2014 "),gD=a("a"),K0o=o("PLBartForCausalLM"),Z0o=o(" (PLBart model)"),ewo=l(),A2=a("li"),Nce=a("strong"),owo=o("prophetnet"),rwo=o(" \u2014 "),hD=a("a"),two=o("ProphetNetForCausalLM"),awo=o(" (ProphetNet model)"),nwo=l(),L2=a("li"),qce=a("strong"),swo=o("qdqbert"),lwo=o(" \u2014 "),pD=a("a"),iwo=o("QDQBertLMHeadModel"),dwo=o(" (QDQBert model)"),cwo=l(),y2=a("li"),jce=a("strong"),fwo=o("reformer"),mwo=o(" \u2014 "),_D=a("a"),gwo=o("ReformerModelWithLMHead"),hwo=o(" (Reformer model)"),pwo=l(),x2=a("li"),Dce=a("strong"),_wo=o("rembert"),uwo=o(" \u2014 "),uD=a("a"),bwo=o("RemBertForCausalLM"),vwo=o(" (RemBERT model)"),Fwo=l(),$2=a("li"),Gce=a("strong"),Two=o("roberta"),Mwo=o(" \u2014 "),bD=a("a"),Ewo=o("RobertaForCausalLM"),Cwo=o(" (RoBERTa model)"),wwo=l(),k2=a("li"),Oce=a("strong"),Awo=o("roformer"),Lwo=o(" \u2014 "),vD=a("a"),ywo=o("RoFormerForCausalLM"),xwo=o(" (RoFormer model)"),$wo=l(),S2=a("li"),Vce=a("strong"),kwo=o("speech_to_text_2"),Swo=o(" \u2014 "),FD=a("a"),Rwo=o("Speech2Text2ForCausalLM"),Pwo=o(" (Speech2Text2 model)"),Bwo=l(),R2=a("li"),Xce=a("strong"),Iwo=o("transfo-xl"),Nwo=o(" \u2014 "),TD=a("a"),qwo=o("TransfoXLLMHeadModel"),jwo=o(" (Transformer-XL model)"),Dwo=l(),P2=a("li"),zce=a("strong"),Gwo=o("trocr"),Owo=o(" \u2014 "),MD=a("a"),Vwo=o("TrOCRForCausalLM"),Xwo=o(" (TrOCR model)"),zwo=l(),B2=a("li"),Wce=a("strong"),Wwo=o("xglm"),Qwo=o(" \u2014 "),ED=a("a"),Hwo=o("XGLMForCausalLM"),Uwo=o(" (XGLM model)"),Jwo=l(),I2=a("li"),Qce=a("strong"),Ywo=o("xlm"),Kwo=o(" \u2014 "),CD=a("a"),Zwo=o("XLMWithLMHeadModel"),eAo=o(" (XLM model)"),oAo=l(),N2=a("li"),Hce=a("strong"),rAo=o("xlm-prophetnet"),tAo=o(" \u2014 "),wD=a("a"),aAo=o("XLMProphetNetForCausalLM"),nAo=o(" (XLM-ProphetNet model)"),sAo=l(),q2=a("li"),Uce=a("strong"),lAo=o("xlm-roberta"),iAo=o(" \u2014 "),AD=a("a"),dAo=o("XLMRobertaForCausalLM"),cAo=o(" (XLM-RoBERTa model)"),fAo=l(),j2=a("li"),Jce=a("strong"),mAo=o("xlm-roberta-xl"),gAo=o(" \u2014 "),LD=a("a"),hAo=o("XLMRobertaXLForCausalLM"),pAo=o(" (XLM-RoBERTa-XL model)"),_Ao=l(),D2=a("li"),Yce=a("strong"),uAo=o("xlnet"),bAo=o(" \u2014 "),yD=a("a"),vAo=o("XLNetLMHeadModel"),FAo=o(" (XLNet model)"),TAo=l(),G2=a("p"),MAo=o("The model is set in evaluation mode by default using "),Kce=a("code"),EAo=o("model.eval()"),CAo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zce=a("code"),wAo=o("model.train()"),AAo=l(),F(O2.$$.fragment),xje=l(),Ii=a("h2"),V2=a("a"),efe=a("span"),F($A.$$.fragment),LAo=l(),ofe=a("span"),yAo=o("AutoModelForMaskedLM"),$je=l(),ko=a("div"),F(kA.$$.fragment),xAo=l(),Ni=a("p"),$Ao=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),xD=a("a"),kAo=o("from_pretrained()"),SAo=o(" class method or the "),$D=a("a"),RAo=o("from_config()"),PAo=o(` class
method.`),BAo=l(),SA=a("p"),IAo=o("This class cannot be instantiated directly using "),rfe=a("code"),NAo=o("__init__()"),qAo=o(" (throws an error)."),jAo=l(),st=a("div"),F(RA.$$.fragment),DAo=l(),tfe=a("p"),GAo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),OAo=l(),qi=a("p"),VAo=o(`Note:
Loading a model from its configuration file does `),afe=a("strong"),XAo=o("not"),zAo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kD=a("a"),WAo=o("from_pretrained()"),QAo=o(" to load the model weights."),HAo=l(),F(X2.$$.fragment),UAo=l(),Ze=a("div"),F(PA.$$.fragment),JAo=l(),nfe=a("p"),YAo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),KAo=l(),ka=a("p"),ZAo=o("The model class to instantiate is selected based on the "),sfe=a("code"),eLo=o("model_type"),oLo=o(` property of the config object (either
passed as an argument or loaded from `),lfe=a("code"),rLo=o("pretrained_model_name_or_path"),tLo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ife=a("code"),aLo=o("pretrained_model_name_or_path"),nLo=o(":"),sLo=l(),W=a("ul"),z2=a("li"),dfe=a("strong"),lLo=o("albert"),iLo=o(" \u2014 "),SD=a("a"),dLo=o("AlbertForMaskedLM"),cLo=o(" (ALBERT model)"),fLo=l(),W2=a("li"),cfe=a("strong"),mLo=o("bart"),gLo=o(" \u2014 "),RD=a("a"),hLo=o("BartForConditionalGeneration"),pLo=o(" (BART model)"),_Lo=l(),Q2=a("li"),ffe=a("strong"),uLo=o("bert"),bLo=o(" \u2014 "),PD=a("a"),vLo=o("BertForMaskedLM"),FLo=o(" (BERT model)"),TLo=l(),H2=a("li"),mfe=a("strong"),MLo=o("big_bird"),ELo=o(" \u2014 "),BD=a("a"),CLo=o("BigBirdForMaskedLM"),wLo=o(" (BigBird model)"),ALo=l(),U2=a("li"),gfe=a("strong"),LLo=o("camembert"),yLo=o(" \u2014 "),ID=a("a"),xLo=o("CamembertForMaskedLM"),$Lo=o(" (CamemBERT model)"),kLo=l(),J2=a("li"),hfe=a("strong"),SLo=o("convbert"),RLo=o(" \u2014 "),ND=a("a"),PLo=o("ConvBertForMaskedLM"),BLo=o(" (ConvBERT model)"),ILo=l(),Y2=a("li"),pfe=a("strong"),NLo=o("data2vec-text"),qLo=o(" \u2014 "),qD=a("a"),jLo=o("Data2VecTextForMaskedLM"),DLo=o(" (Data2VecText model)"),GLo=l(),K2=a("li"),_fe=a("strong"),OLo=o("deberta"),VLo=o(" \u2014 "),jD=a("a"),XLo=o("DebertaForMaskedLM"),zLo=o(" (DeBERTa model)"),WLo=l(),Z2=a("li"),ufe=a("strong"),QLo=o("deberta-v2"),HLo=o(" \u2014 "),DD=a("a"),ULo=o("DebertaV2ForMaskedLM"),JLo=o(" (DeBERTa-v2 model)"),YLo=l(),e1=a("li"),bfe=a("strong"),KLo=o("distilbert"),ZLo=o(" \u2014 "),GD=a("a"),eyo=o("DistilBertForMaskedLM"),oyo=o(" (DistilBERT model)"),ryo=l(),o1=a("li"),vfe=a("strong"),tyo=o("electra"),ayo=o(" \u2014 "),OD=a("a"),nyo=o("ElectraForMaskedLM"),syo=o(" (ELECTRA model)"),lyo=l(),r1=a("li"),Ffe=a("strong"),iyo=o("flaubert"),dyo=o(" \u2014 "),VD=a("a"),cyo=o("FlaubertWithLMHeadModel"),fyo=o(" (FlauBERT model)"),myo=l(),t1=a("li"),Tfe=a("strong"),gyo=o("fnet"),hyo=o(" \u2014 "),XD=a("a"),pyo=o("FNetForMaskedLM"),_yo=o(" (FNet model)"),uyo=l(),a1=a("li"),Mfe=a("strong"),byo=o("funnel"),vyo=o(" \u2014 "),zD=a("a"),Fyo=o("FunnelForMaskedLM"),Tyo=o(" (Funnel Transformer model)"),Myo=l(),n1=a("li"),Efe=a("strong"),Eyo=o("ibert"),Cyo=o(" \u2014 "),WD=a("a"),wyo=o("IBertForMaskedLM"),Ayo=o(" (I-BERT model)"),Lyo=l(),s1=a("li"),Cfe=a("strong"),yyo=o("layoutlm"),xyo=o(" \u2014 "),QD=a("a"),$yo=o("LayoutLMForMaskedLM"),kyo=o(" (LayoutLM model)"),Syo=l(),l1=a("li"),wfe=a("strong"),Ryo=o("longformer"),Pyo=o(" \u2014 "),HD=a("a"),Byo=o("LongformerForMaskedLM"),Iyo=o(" (Longformer model)"),Nyo=l(),i1=a("li"),Afe=a("strong"),qyo=o("luke"),jyo=o(" \u2014 "),UD=a("a"),Dyo=o("LukeForMaskedLM"),Gyo=o(" (LUKE model)"),Oyo=l(),d1=a("li"),Lfe=a("strong"),Vyo=o("mbart"),Xyo=o(" \u2014 "),JD=a("a"),zyo=o("MBartForConditionalGeneration"),Wyo=o(" (mBART model)"),Qyo=l(),c1=a("li"),yfe=a("strong"),Hyo=o("megatron-bert"),Uyo=o(" \u2014 "),YD=a("a"),Jyo=o("MegatronBertForMaskedLM"),Yyo=o(" (Megatron-BERT model)"),Kyo=l(),f1=a("li"),xfe=a("strong"),Zyo=o("mobilebert"),e8o=o(" \u2014 "),KD=a("a"),o8o=o("MobileBertForMaskedLM"),r8o=o(" (MobileBERT model)"),t8o=l(),m1=a("li"),$fe=a("strong"),a8o=o("mpnet"),n8o=o(" \u2014 "),ZD=a("a"),s8o=o("MPNetForMaskedLM"),l8o=o(" (MPNet model)"),i8o=l(),g1=a("li"),kfe=a("strong"),d8o=o("nystromformer"),c8o=o(" \u2014 "),eG=a("a"),f8o=o("NystromformerForMaskedLM"),m8o=o(" (Nystr\xF6mformer model)"),g8o=l(),h1=a("li"),Sfe=a("strong"),h8o=o("perceiver"),p8o=o(" \u2014 "),oG=a("a"),_8o=o("PerceiverForMaskedLM"),u8o=o(" (Perceiver model)"),b8o=l(),p1=a("li"),Rfe=a("strong"),v8o=o("qdqbert"),F8o=o(" \u2014 "),rG=a("a"),T8o=o("QDQBertForMaskedLM"),M8o=o(" (QDQBert model)"),E8o=l(),_1=a("li"),Pfe=a("strong"),C8o=o("reformer"),w8o=o(" \u2014 "),tG=a("a"),A8o=o("ReformerForMaskedLM"),L8o=o(" (Reformer model)"),y8o=l(),u1=a("li"),Bfe=a("strong"),x8o=o("rembert"),$8o=o(" \u2014 "),aG=a("a"),k8o=o("RemBertForMaskedLM"),S8o=o(" (RemBERT model)"),R8o=l(),b1=a("li"),Ife=a("strong"),P8o=o("roberta"),B8o=o(" \u2014 "),nG=a("a"),I8o=o("RobertaForMaskedLM"),N8o=o(" (RoBERTa model)"),q8o=l(),v1=a("li"),Nfe=a("strong"),j8o=o("roformer"),D8o=o(" \u2014 "),sG=a("a"),G8o=o("RoFormerForMaskedLM"),O8o=o(" (RoFormer model)"),V8o=l(),F1=a("li"),qfe=a("strong"),X8o=o("squeezebert"),z8o=o(" \u2014 "),lG=a("a"),W8o=o("SqueezeBertForMaskedLM"),Q8o=o(" (SqueezeBERT model)"),H8o=l(),T1=a("li"),jfe=a("strong"),U8o=o("tapas"),J8o=o(" \u2014 "),iG=a("a"),Y8o=o("TapasForMaskedLM"),K8o=o(" (TAPAS model)"),Z8o=l(),M1=a("li"),Dfe=a("strong"),exo=o("wav2vec2"),oxo=o(" \u2014 "),Gfe=a("code"),rxo=o("Wav2Vec2ForMaskedLM"),txo=o(" (Wav2Vec2 model)"),axo=l(),E1=a("li"),Ofe=a("strong"),nxo=o("xlm"),sxo=o(" \u2014 "),dG=a("a"),lxo=o("XLMWithLMHeadModel"),ixo=o(" (XLM model)"),dxo=l(),C1=a("li"),Vfe=a("strong"),cxo=o("xlm-roberta"),fxo=o(" \u2014 "),cG=a("a"),mxo=o("XLMRobertaForMaskedLM"),gxo=o(" (XLM-RoBERTa model)"),hxo=l(),w1=a("li"),Xfe=a("strong"),pxo=o("xlm-roberta-xl"),_xo=o(" \u2014 "),fG=a("a"),uxo=o("XLMRobertaXLForMaskedLM"),bxo=o(" (XLM-RoBERTa-XL model)"),vxo=l(),A1=a("li"),zfe=a("strong"),Fxo=o("yoso"),Txo=o(" \u2014 "),mG=a("a"),Mxo=o("YosoForMaskedLM"),Exo=o(" (YOSO model)"),Cxo=l(),L1=a("p"),wxo=o("The model is set in evaluation mode by default using "),Wfe=a("code"),Axo=o("model.eval()"),Lxo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qfe=a("code"),yxo=o("model.train()"),xxo=l(),F(y1.$$.fragment),kje=l(),ji=a("h2"),x1=a("a"),Hfe=a("span"),F(BA.$$.fragment),$xo=l(),Ufe=a("span"),kxo=o("AutoModelForSeq2SeqLM"),Sje=l(),So=a("div"),F(IA.$$.fragment),Sxo=l(),Di=a("p"),Rxo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),gG=a("a"),Pxo=o("from_pretrained()"),Bxo=o(" class method or the "),hG=a("a"),Ixo=o("from_config()"),Nxo=o(` class
method.`),qxo=l(),NA=a("p"),jxo=o("This class cannot be instantiated directly using "),Jfe=a("code"),Dxo=o("__init__()"),Gxo=o(" (throws an error)."),Oxo=l(),lt=a("div"),F(qA.$$.fragment),Vxo=l(),Yfe=a("p"),Xxo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),zxo=l(),Gi=a("p"),Wxo=o(`Note:
Loading a model from its configuration file does `),Kfe=a("strong"),Qxo=o("not"),Hxo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pG=a("a"),Uxo=o("from_pretrained()"),Jxo=o(" to load the model weights."),Yxo=l(),F($1.$$.fragment),Kxo=l(),eo=a("div"),F(jA.$$.fragment),Zxo=l(),Zfe=a("p"),e$o=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),o$o=l(),Sa=a("p"),r$o=o("The model class to instantiate is selected based on the "),eme=a("code"),t$o=o("model_type"),a$o=o(` property of the config object (either
passed as an argument or loaded from `),ome=a("code"),n$o=o("pretrained_model_name_or_path"),s$o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rme=a("code"),l$o=o("pretrained_model_name_or_path"),i$o=o(":"),d$o=l(),pe=a("ul"),k1=a("li"),tme=a("strong"),c$o=o("bart"),f$o=o(" \u2014 "),_G=a("a"),m$o=o("BartForConditionalGeneration"),g$o=o(" (BART model)"),h$o=l(),S1=a("li"),ame=a("strong"),p$o=o("bigbird_pegasus"),_$o=o(" \u2014 "),uG=a("a"),u$o=o("BigBirdPegasusForConditionalGeneration"),b$o=o(" (BigBird-Pegasus model)"),v$o=l(),R1=a("li"),nme=a("strong"),F$o=o("blenderbot"),T$o=o(" \u2014 "),bG=a("a"),M$o=o("BlenderbotForConditionalGeneration"),E$o=o(" (Blenderbot model)"),C$o=l(),P1=a("li"),sme=a("strong"),w$o=o("blenderbot-small"),A$o=o(" \u2014 "),vG=a("a"),L$o=o("BlenderbotSmallForConditionalGeneration"),y$o=o(" (BlenderbotSmall model)"),x$o=l(),B1=a("li"),lme=a("strong"),$$o=o("encoder-decoder"),k$o=o(" \u2014 "),FG=a("a"),S$o=o("EncoderDecoderModel"),R$o=o(" (Encoder decoder model)"),P$o=l(),I1=a("li"),ime=a("strong"),B$o=o("fsmt"),I$o=o(" \u2014 "),TG=a("a"),N$o=o("FSMTForConditionalGeneration"),q$o=o(" (FairSeq Machine-Translation model)"),j$o=l(),N1=a("li"),dme=a("strong"),D$o=o("led"),G$o=o(" \u2014 "),MG=a("a"),O$o=o("LEDForConditionalGeneration"),V$o=o(" (LED model)"),X$o=l(),q1=a("li"),cme=a("strong"),z$o=o("longt5"),W$o=o(" \u2014 "),EG=a("a"),Q$o=o("LongT5ForConditionalGeneration"),H$o=o(" (LongT5 model)"),U$o=l(),j1=a("li"),fme=a("strong"),J$o=o("m2m_100"),Y$o=o(" \u2014 "),CG=a("a"),K$o=o("M2M100ForConditionalGeneration"),Z$o=o(" (M2M100 model)"),eko=l(),D1=a("li"),mme=a("strong"),oko=o("marian"),rko=o(" \u2014 "),wG=a("a"),tko=o("MarianMTModel"),ako=o(" (Marian model)"),nko=l(),G1=a("li"),gme=a("strong"),sko=o("mbart"),lko=o(" \u2014 "),AG=a("a"),iko=o("MBartForConditionalGeneration"),dko=o(" (mBART model)"),cko=l(),O1=a("li"),hme=a("strong"),fko=o("mt5"),mko=o(" \u2014 "),LG=a("a"),gko=o("MT5ForConditionalGeneration"),hko=o(" (MT5 model)"),pko=l(),V1=a("li"),pme=a("strong"),_ko=o("pegasus"),uko=o(" \u2014 "),yG=a("a"),bko=o("PegasusForConditionalGeneration"),vko=o(" (Pegasus model)"),Fko=l(),X1=a("li"),_me=a("strong"),Tko=o("plbart"),Mko=o(" \u2014 "),xG=a("a"),Eko=o("PLBartForConditionalGeneration"),Cko=o(" (PLBart model)"),wko=l(),z1=a("li"),ume=a("strong"),Ako=o("prophetnet"),Lko=o(" \u2014 "),$G=a("a"),yko=o("ProphetNetForConditionalGeneration"),xko=o(" (ProphetNet model)"),$ko=l(),W1=a("li"),bme=a("strong"),kko=o("t5"),Sko=o(" \u2014 "),kG=a("a"),Rko=o("T5ForConditionalGeneration"),Pko=o(" (T5 model)"),Bko=l(),Q1=a("li"),vme=a("strong"),Iko=o("xlm-prophetnet"),Nko=o(" \u2014 "),SG=a("a"),qko=o("XLMProphetNetForConditionalGeneration"),jko=o(" (XLM-ProphetNet model)"),Dko=l(),H1=a("p"),Gko=o("The model is set in evaluation mode by default using "),Fme=a("code"),Oko=o("model.eval()"),Vko=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tme=a("code"),Xko=o("model.train()"),zko=l(),F(U1.$$.fragment),Rje=l(),Oi=a("h2"),J1=a("a"),Mme=a("span"),F(DA.$$.fragment),Wko=l(),Eme=a("span"),Qko=o("AutoModelForSequenceClassification"),Pje=l(),Ro=a("div"),F(GA.$$.fragment),Hko=l(),Vi=a("p"),Uko=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),RG=a("a"),Jko=o("from_pretrained()"),Yko=o(" class method or the "),PG=a("a"),Kko=o("from_config()"),Zko=o(` class
method.`),eSo=l(),OA=a("p"),oSo=o("This class cannot be instantiated directly using "),Cme=a("code"),rSo=o("__init__()"),tSo=o(" (throws an error)."),aSo=l(),it=a("div"),F(VA.$$.fragment),nSo=l(),wme=a("p"),sSo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),lSo=l(),Xi=a("p"),iSo=o(`Note:
Loading a model from its configuration file does `),Ame=a("strong"),dSo=o("not"),cSo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BG=a("a"),fSo=o("from_pretrained()"),mSo=o(" to load the model weights."),gSo=l(),F(Y1.$$.fragment),hSo=l(),oo=a("div"),F(XA.$$.fragment),pSo=l(),Lme=a("p"),_So=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),uSo=l(),Ra=a("p"),bSo=o("The model class to instantiate is selected based on the "),yme=a("code"),vSo=o("model_type"),FSo=o(` property of the config object (either
passed as an argument or loaded from `),xme=a("code"),TSo=o("pretrained_model_name_or_path"),MSo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$me=a("code"),ESo=o("pretrained_model_name_or_path"),CSo=o(":"),wSo=l(),N=a("ul"),K1=a("li"),kme=a("strong"),ASo=o("albert"),LSo=o(" \u2014 "),IG=a("a"),ySo=o("AlbertForSequenceClassification"),xSo=o(" (ALBERT model)"),$So=l(),Z1=a("li"),Sme=a("strong"),kSo=o("bart"),SSo=o(" \u2014 "),NG=a("a"),RSo=o("BartForSequenceClassification"),PSo=o(" (BART model)"),BSo=l(),eb=a("li"),Rme=a("strong"),ISo=o("bert"),NSo=o(" \u2014 "),qG=a("a"),qSo=o("BertForSequenceClassification"),jSo=o(" (BERT model)"),DSo=l(),ob=a("li"),Pme=a("strong"),GSo=o("big_bird"),OSo=o(" \u2014 "),jG=a("a"),VSo=o("BigBirdForSequenceClassification"),XSo=o(" (BigBird model)"),zSo=l(),rb=a("li"),Bme=a("strong"),WSo=o("bigbird_pegasus"),QSo=o(" \u2014 "),DG=a("a"),HSo=o("BigBirdPegasusForSequenceClassification"),USo=o(" (BigBird-Pegasus model)"),JSo=l(),tb=a("li"),Ime=a("strong"),YSo=o("camembert"),KSo=o(" \u2014 "),GG=a("a"),ZSo=o("CamembertForSequenceClassification"),eRo=o(" (CamemBERT model)"),oRo=l(),ab=a("li"),Nme=a("strong"),rRo=o("canine"),tRo=o(" \u2014 "),OG=a("a"),aRo=o("CanineForSequenceClassification"),nRo=o(" (CANINE model)"),sRo=l(),nb=a("li"),qme=a("strong"),lRo=o("convbert"),iRo=o(" \u2014 "),VG=a("a"),dRo=o("ConvBertForSequenceClassification"),cRo=o(" (ConvBERT model)"),fRo=l(),sb=a("li"),jme=a("strong"),mRo=o("ctrl"),gRo=o(" \u2014 "),XG=a("a"),hRo=o("CTRLForSequenceClassification"),pRo=o(" (CTRL model)"),_Ro=l(),lb=a("li"),Dme=a("strong"),uRo=o("data2vec-text"),bRo=o(" \u2014 "),zG=a("a"),vRo=o("Data2VecTextForSequenceClassification"),FRo=o(" (Data2VecText model)"),TRo=l(),ib=a("li"),Gme=a("strong"),MRo=o("deberta"),ERo=o(" \u2014 "),WG=a("a"),CRo=o("DebertaForSequenceClassification"),wRo=o(" (DeBERTa model)"),ARo=l(),db=a("li"),Ome=a("strong"),LRo=o("deberta-v2"),yRo=o(" \u2014 "),QG=a("a"),xRo=o("DebertaV2ForSequenceClassification"),$Ro=o(" (DeBERTa-v2 model)"),kRo=l(),cb=a("li"),Vme=a("strong"),SRo=o("distilbert"),RRo=o(" \u2014 "),HG=a("a"),PRo=o("DistilBertForSequenceClassification"),BRo=o(" (DistilBERT model)"),IRo=l(),fb=a("li"),Xme=a("strong"),NRo=o("electra"),qRo=o(" \u2014 "),UG=a("a"),jRo=o("ElectraForSequenceClassification"),DRo=o(" (ELECTRA model)"),GRo=l(),mb=a("li"),zme=a("strong"),ORo=o("flaubert"),VRo=o(" \u2014 "),JG=a("a"),XRo=o("FlaubertForSequenceClassification"),zRo=o(" (FlauBERT model)"),WRo=l(),gb=a("li"),Wme=a("strong"),QRo=o("fnet"),HRo=o(" \u2014 "),YG=a("a"),URo=o("FNetForSequenceClassification"),JRo=o(" (FNet model)"),YRo=l(),hb=a("li"),Qme=a("strong"),KRo=o("funnel"),ZRo=o(" \u2014 "),KG=a("a"),ePo=o("FunnelForSequenceClassification"),oPo=o(" (Funnel Transformer model)"),rPo=l(),pb=a("li"),Hme=a("strong"),tPo=o("gpt2"),aPo=o(" \u2014 "),ZG=a("a"),nPo=o("GPT2ForSequenceClassification"),sPo=o(" (OpenAI GPT-2 model)"),lPo=l(),_b=a("li"),Ume=a("strong"),iPo=o("gpt_neo"),dPo=o(" \u2014 "),eO=a("a"),cPo=o("GPTNeoForSequenceClassification"),fPo=o(" (GPT Neo model)"),mPo=l(),ub=a("li"),Jme=a("strong"),gPo=o("gptj"),hPo=o(" \u2014 "),oO=a("a"),pPo=o("GPTJForSequenceClassification"),_Po=o(" (GPT-J model)"),uPo=l(),bb=a("li"),Yme=a("strong"),bPo=o("ibert"),vPo=o(" \u2014 "),rO=a("a"),FPo=o("IBertForSequenceClassification"),TPo=o(" (I-BERT model)"),MPo=l(),vb=a("li"),Kme=a("strong"),EPo=o("layoutlm"),CPo=o(" \u2014 "),tO=a("a"),wPo=o("LayoutLMForSequenceClassification"),APo=o(" (LayoutLM model)"),LPo=l(),Fb=a("li"),Zme=a("strong"),yPo=o("layoutlmv2"),xPo=o(" \u2014 "),aO=a("a"),$Po=o("LayoutLMv2ForSequenceClassification"),kPo=o(" (LayoutLMv2 model)"),SPo=l(),Tb=a("li"),ege=a("strong"),RPo=o("layoutlmv3"),PPo=o(" \u2014 "),nO=a("a"),BPo=o("LayoutLMv3ForSequenceClassification"),IPo=o(" (LayoutLMv3 model)"),NPo=l(),Mb=a("li"),oge=a("strong"),qPo=o("led"),jPo=o(" \u2014 "),sO=a("a"),DPo=o("LEDForSequenceClassification"),GPo=o(" (LED model)"),OPo=l(),Eb=a("li"),rge=a("strong"),VPo=o("longformer"),XPo=o(" \u2014 "),lO=a("a"),zPo=o("LongformerForSequenceClassification"),WPo=o(" (Longformer model)"),QPo=l(),Cb=a("li"),tge=a("strong"),HPo=o("mbart"),UPo=o(" \u2014 "),iO=a("a"),JPo=o("MBartForSequenceClassification"),YPo=o(" (mBART model)"),KPo=l(),wb=a("li"),age=a("strong"),ZPo=o("megatron-bert"),eBo=o(" \u2014 "),dO=a("a"),oBo=o("MegatronBertForSequenceClassification"),rBo=o(" (Megatron-BERT model)"),tBo=l(),Ab=a("li"),nge=a("strong"),aBo=o("mobilebert"),nBo=o(" \u2014 "),cO=a("a"),sBo=o("MobileBertForSequenceClassification"),lBo=o(" (MobileBERT model)"),iBo=l(),Lb=a("li"),sge=a("strong"),dBo=o("mpnet"),cBo=o(" \u2014 "),fO=a("a"),fBo=o("MPNetForSequenceClassification"),mBo=o(" (MPNet model)"),gBo=l(),yb=a("li"),lge=a("strong"),hBo=o("nystromformer"),pBo=o(" \u2014 "),mO=a("a"),_Bo=o("NystromformerForSequenceClassification"),uBo=o(" (Nystr\xF6mformer model)"),bBo=l(),xb=a("li"),ige=a("strong"),vBo=o("openai-gpt"),FBo=o(" \u2014 "),gO=a("a"),TBo=o("OpenAIGPTForSequenceClassification"),MBo=o(" (OpenAI GPT model)"),EBo=l(),$b=a("li"),dge=a("strong"),CBo=o("perceiver"),wBo=o(" \u2014 "),hO=a("a"),ABo=o("PerceiverForSequenceClassification"),LBo=o(" (Perceiver model)"),yBo=l(),kb=a("li"),cge=a("strong"),xBo=o("plbart"),$Bo=o(" \u2014 "),pO=a("a"),kBo=o("PLBartForSequenceClassification"),SBo=o(" (PLBart model)"),RBo=l(),Sb=a("li"),fge=a("strong"),PBo=o("qdqbert"),BBo=o(" \u2014 "),_O=a("a"),IBo=o("QDQBertForSequenceClassification"),NBo=o(" (QDQBert model)"),qBo=l(),Rb=a("li"),mge=a("strong"),jBo=o("reformer"),DBo=o(" \u2014 "),uO=a("a"),GBo=o("ReformerForSequenceClassification"),OBo=o(" (Reformer model)"),VBo=l(),Pb=a("li"),gge=a("strong"),XBo=o("rembert"),zBo=o(" \u2014 "),bO=a("a"),WBo=o("RemBertForSequenceClassification"),QBo=o(" (RemBERT model)"),HBo=l(),Bb=a("li"),hge=a("strong"),UBo=o("roberta"),JBo=o(" \u2014 "),vO=a("a"),YBo=o("RobertaForSequenceClassification"),KBo=o(" (RoBERTa model)"),ZBo=l(),Ib=a("li"),pge=a("strong"),eIo=o("roformer"),oIo=o(" \u2014 "),FO=a("a"),rIo=o("RoFormerForSequenceClassification"),tIo=o(" (RoFormer model)"),aIo=l(),Nb=a("li"),_ge=a("strong"),nIo=o("squeezebert"),sIo=o(" \u2014 "),TO=a("a"),lIo=o("SqueezeBertForSequenceClassification"),iIo=o(" (SqueezeBERT model)"),dIo=l(),qb=a("li"),uge=a("strong"),cIo=o("tapas"),fIo=o(" \u2014 "),MO=a("a"),mIo=o("TapasForSequenceClassification"),gIo=o(" (TAPAS model)"),hIo=l(),jb=a("li"),bge=a("strong"),pIo=o("transfo-xl"),_Io=o(" \u2014 "),EO=a("a"),uIo=o("TransfoXLForSequenceClassification"),bIo=o(" (Transformer-XL model)"),vIo=l(),Db=a("li"),vge=a("strong"),FIo=o("xlm"),TIo=o(" \u2014 "),CO=a("a"),MIo=o("XLMForSequenceClassification"),EIo=o(" (XLM model)"),CIo=l(),Gb=a("li"),Fge=a("strong"),wIo=o("xlm-roberta"),AIo=o(" \u2014 "),wO=a("a"),LIo=o("XLMRobertaForSequenceClassification"),yIo=o(" (XLM-RoBERTa model)"),xIo=l(),Ob=a("li"),Tge=a("strong"),$Io=o("xlm-roberta-xl"),kIo=o(" \u2014 "),AO=a("a"),SIo=o("XLMRobertaXLForSequenceClassification"),RIo=o(" (XLM-RoBERTa-XL model)"),PIo=l(),Vb=a("li"),Mge=a("strong"),BIo=o("xlnet"),IIo=o(" \u2014 "),LO=a("a"),NIo=o("XLNetForSequenceClassification"),qIo=o(" (XLNet model)"),jIo=l(),Xb=a("li"),Ege=a("strong"),DIo=o("yoso"),GIo=o(" \u2014 "),yO=a("a"),OIo=o("YosoForSequenceClassification"),VIo=o(" (YOSO model)"),XIo=l(),zb=a("p"),zIo=o("The model is set in evaluation mode by default using "),Cge=a("code"),WIo=o("model.eval()"),QIo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wge=a("code"),HIo=o("model.train()"),UIo=l(),F(Wb.$$.fragment),Bje=l(),zi=a("h2"),Qb=a("a"),Age=a("span"),F(zA.$$.fragment),JIo=l(),Lge=a("span"),YIo=o("AutoModelForMultipleChoice"),Ije=l(),Po=a("div"),F(WA.$$.fragment),KIo=l(),Wi=a("p"),ZIo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),xO=a("a"),eNo=o("from_pretrained()"),oNo=o(" class method or the "),$O=a("a"),rNo=o("from_config()"),tNo=o(` class
method.`),aNo=l(),QA=a("p"),nNo=o("This class cannot be instantiated directly using "),yge=a("code"),sNo=o("__init__()"),lNo=o(" (throws an error)."),iNo=l(),dt=a("div"),F(HA.$$.fragment),dNo=l(),xge=a("p"),cNo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),fNo=l(),Qi=a("p"),mNo=o(`Note:
Loading a model from its configuration file does `),$ge=a("strong"),gNo=o("not"),hNo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kO=a("a"),pNo=o("from_pretrained()"),_No=o(" to load the model weights."),uNo=l(),F(Hb.$$.fragment),bNo=l(),ro=a("div"),F(UA.$$.fragment),vNo=l(),kge=a("p"),FNo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),TNo=l(),Pa=a("p"),MNo=o("The model class to instantiate is selected based on the "),Sge=a("code"),ENo=o("model_type"),CNo=o(` property of the config object (either
passed as an argument or loaded from `),Rge=a("code"),wNo=o("pretrained_model_name_or_path"),ANo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pge=a("code"),LNo=o("pretrained_model_name_or_path"),yNo=o(":"),xNo=l(),K=a("ul"),Ub=a("li"),Bge=a("strong"),$No=o("albert"),kNo=o(" \u2014 "),SO=a("a"),SNo=o("AlbertForMultipleChoice"),RNo=o(" (ALBERT model)"),PNo=l(),Jb=a("li"),Ige=a("strong"),BNo=o("bert"),INo=o(" \u2014 "),RO=a("a"),NNo=o("BertForMultipleChoice"),qNo=o(" (BERT model)"),jNo=l(),Yb=a("li"),Nge=a("strong"),DNo=o("big_bird"),GNo=o(" \u2014 "),PO=a("a"),ONo=o("BigBirdForMultipleChoice"),VNo=o(" (BigBird model)"),XNo=l(),Kb=a("li"),qge=a("strong"),zNo=o("camembert"),WNo=o(" \u2014 "),BO=a("a"),QNo=o("CamembertForMultipleChoice"),HNo=o(" (CamemBERT model)"),UNo=l(),Zb=a("li"),jge=a("strong"),JNo=o("canine"),YNo=o(" \u2014 "),IO=a("a"),KNo=o("CanineForMultipleChoice"),ZNo=o(" (CANINE model)"),eqo=l(),ev=a("li"),Dge=a("strong"),oqo=o("convbert"),rqo=o(" \u2014 "),NO=a("a"),tqo=o("ConvBertForMultipleChoice"),aqo=o(" (ConvBERT model)"),nqo=l(),ov=a("li"),Gge=a("strong"),sqo=o("data2vec-text"),lqo=o(" \u2014 "),qO=a("a"),iqo=o("Data2VecTextForMultipleChoice"),dqo=o(" (Data2VecText model)"),cqo=l(),rv=a("li"),Oge=a("strong"),fqo=o("deberta-v2"),mqo=o(" \u2014 "),jO=a("a"),gqo=o("DebertaV2ForMultipleChoice"),hqo=o(" (DeBERTa-v2 model)"),pqo=l(),tv=a("li"),Vge=a("strong"),_qo=o("distilbert"),uqo=o(" \u2014 "),DO=a("a"),bqo=o("DistilBertForMultipleChoice"),vqo=o(" (DistilBERT model)"),Fqo=l(),av=a("li"),Xge=a("strong"),Tqo=o("electra"),Mqo=o(" \u2014 "),GO=a("a"),Eqo=o("ElectraForMultipleChoice"),Cqo=o(" (ELECTRA model)"),wqo=l(),nv=a("li"),zge=a("strong"),Aqo=o("flaubert"),Lqo=o(" \u2014 "),OO=a("a"),yqo=o("FlaubertForMultipleChoice"),xqo=o(" (FlauBERT model)"),$qo=l(),sv=a("li"),Wge=a("strong"),kqo=o("fnet"),Sqo=o(" \u2014 "),VO=a("a"),Rqo=o("FNetForMultipleChoice"),Pqo=o(" (FNet model)"),Bqo=l(),lv=a("li"),Qge=a("strong"),Iqo=o("funnel"),Nqo=o(" \u2014 "),XO=a("a"),qqo=o("FunnelForMultipleChoice"),jqo=o(" (Funnel Transformer model)"),Dqo=l(),iv=a("li"),Hge=a("strong"),Gqo=o("ibert"),Oqo=o(" \u2014 "),zO=a("a"),Vqo=o("IBertForMultipleChoice"),Xqo=o(" (I-BERT model)"),zqo=l(),dv=a("li"),Uge=a("strong"),Wqo=o("longformer"),Qqo=o(" \u2014 "),WO=a("a"),Hqo=o("LongformerForMultipleChoice"),Uqo=o(" (Longformer model)"),Jqo=l(),cv=a("li"),Jge=a("strong"),Yqo=o("megatron-bert"),Kqo=o(" \u2014 "),QO=a("a"),Zqo=o("MegatronBertForMultipleChoice"),ejo=o(" (Megatron-BERT model)"),ojo=l(),fv=a("li"),Yge=a("strong"),rjo=o("mobilebert"),tjo=o(" \u2014 "),HO=a("a"),ajo=o("MobileBertForMultipleChoice"),njo=o(" (MobileBERT model)"),sjo=l(),mv=a("li"),Kge=a("strong"),ljo=o("mpnet"),ijo=o(" \u2014 "),UO=a("a"),djo=o("MPNetForMultipleChoice"),cjo=o(" (MPNet model)"),fjo=l(),gv=a("li"),Zge=a("strong"),mjo=o("nystromformer"),gjo=o(" \u2014 "),JO=a("a"),hjo=o("NystromformerForMultipleChoice"),pjo=o(" (Nystr\xF6mformer model)"),_jo=l(),hv=a("li"),ehe=a("strong"),ujo=o("qdqbert"),bjo=o(" \u2014 "),YO=a("a"),vjo=o("QDQBertForMultipleChoice"),Fjo=o(" (QDQBert model)"),Tjo=l(),pv=a("li"),ohe=a("strong"),Mjo=o("rembert"),Ejo=o(" \u2014 "),KO=a("a"),Cjo=o("RemBertForMultipleChoice"),wjo=o(" (RemBERT model)"),Ajo=l(),_v=a("li"),rhe=a("strong"),Ljo=o("roberta"),yjo=o(" \u2014 "),ZO=a("a"),xjo=o("RobertaForMultipleChoice"),$jo=o(" (RoBERTa model)"),kjo=l(),uv=a("li"),the=a("strong"),Sjo=o("roformer"),Rjo=o(" \u2014 "),eV=a("a"),Pjo=o("RoFormerForMultipleChoice"),Bjo=o(" (RoFormer model)"),Ijo=l(),bv=a("li"),ahe=a("strong"),Njo=o("squeezebert"),qjo=o(" \u2014 "),oV=a("a"),jjo=o("SqueezeBertForMultipleChoice"),Djo=o(" (SqueezeBERT model)"),Gjo=l(),vv=a("li"),nhe=a("strong"),Ojo=o("xlm"),Vjo=o(" \u2014 "),rV=a("a"),Xjo=o("XLMForMultipleChoice"),zjo=o(" (XLM model)"),Wjo=l(),Fv=a("li"),she=a("strong"),Qjo=o("xlm-roberta"),Hjo=o(" \u2014 "),tV=a("a"),Ujo=o("XLMRobertaForMultipleChoice"),Jjo=o(" (XLM-RoBERTa model)"),Yjo=l(),Tv=a("li"),lhe=a("strong"),Kjo=o("xlm-roberta-xl"),Zjo=o(" \u2014 "),aV=a("a"),eDo=o("XLMRobertaXLForMultipleChoice"),oDo=o(" (XLM-RoBERTa-XL model)"),rDo=l(),Mv=a("li"),ihe=a("strong"),tDo=o("xlnet"),aDo=o(" \u2014 "),nV=a("a"),nDo=o("XLNetForMultipleChoice"),sDo=o(" (XLNet model)"),lDo=l(),Ev=a("li"),dhe=a("strong"),iDo=o("yoso"),dDo=o(" \u2014 "),sV=a("a"),cDo=o("YosoForMultipleChoice"),fDo=o(" (YOSO model)"),mDo=l(),Cv=a("p"),gDo=o("The model is set in evaluation mode by default using "),che=a("code"),hDo=o("model.eval()"),pDo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fhe=a("code"),_Do=o("model.train()"),uDo=l(),F(wv.$$.fragment),Nje=l(),Hi=a("h2"),Av=a("a"),mhe=a("span"),F(JA.$$.fragment),bDo=l(),ghe=a("span"),vDo=o("AutoModelForNextSentencePrediction"),qje=l(),Bo=a("div"),F(YA.$$.fragment),FDo=l(),Ui=a("p"),TDo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),lV=a("a"),MDo=o("from_pretrained()"),EDo=o(" class method or the "),iV=a("a"),CDo=o("from_config()"),wDo=o(` class
method.`),ADo=l(),KA=a("p"),LDo=o("This class cannot be instantiated directly using "),hhe=a("code"),yDo=o("__init__()"),xDo=o(" (throws an error)."),$Do=l(),ct=a("div"),F(ZA.$$.fragment),kDo=l(),phe=a("p"),SDo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),RDo=l(),Ji=a("p"),PDo=o(`Note:
Loading a model from its configuration file does `),_he=a("strong"),BDo=o("not"),IDo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dV=a("a"),NDo=o("from_pretrained()"),qDo=o(" to load the model weights."),jDo=l(),F(Lv.$$.fragment),DDo=l(),to=a("div"),F(eL.$$.fragment),GDo=l(),uhe=a("p"),ODo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),VDo=l(),Ba=a("p"),XDo=o("The model class to instantiate is selected based on the "),bhe=a("code"),zDo=o("model_type"),WDo=o(` property of the config object (either
passed as an argument or loaded from `),vhe=a("code"),QDo=o("pretrained_model_name_or_path"),HDo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fhe=a("code"),UDo=o("pretrained_model_name_or_path"),JDo=o(":"),YDo=l(),Yr=a("ul"),yv=a("li"),The=a("strong"),KDo=o("bert"),ZDo=o(" \u2014 "),cV=a("a"),eGo=o("BertForNextSentencePrediction"),oGo=o(" (BERT model)"),rGo=l(),xv=a("li"),Mhe=a("strong"),tGo=o("fnet"),aGo=o(" \u2014 "),fV=a("a"),nGo=o("FNetForNextSentencePrediction"),sGo=o(" (FNet model)"),lGo=l(),$v=a("li"),Ehe=a("strong"),iGo=o("megatron-bert"),dGo=o(" \u2014 "),mV=a("a"),cGo=o("MegatronBertForNextSentencePrediction"),fGo=o(" (Megatron-BERT model)"),mGo=l(),kv=a("li"),Che=a("strong"),gGo=o("mobilebert"),hGo=o(" \u2014 "),gV=a("a"),pGo=o("MobileBertForNextSentencePrediction"),_Go=o(" (MobileBERT model)"),uGo=l(),Sv=a("li"),whe=a("strong"),bGo=o("qdqbert"),vGo=o(" \u2014 "),hV=a("a"),FGo=o("QDQBertForNextSentencePrediction"),TGo=o(" (QDQBert model)"),MGo=l(),Rv=a("p"),EGo=o("The model is set in evaluation mode by default using "),Ahe=a("code"),CGo=o("model.eval()"),wGo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lhe=a("code"),AGo=o("model.train()"),LGo=l(),F(Pv.$$.fragment),jje=l(),Yi=a("h2"),Bv=a("a"),yhe=a("span"),F(oL.$$.fragment),yGo=l(),xhe=a("span"),xGo=o("AutoModelForTokenClassification"),Dje=l(),Io=a("div"),F(rL.$$.fragment),$Go=l(),Ki=a("p"),kGo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),pV=a("a"),SGo=o("from_pretrained()"),RGo=o(" class method or the "),_V=a("a"),PGo=o("from_config()"),BGo=o(` class
method.`),IGo=l(),tL=a("p"),NGo=o("This class cannot be instantiated directly using "),$he=a("code"),qGo=o("__init__()"),jGo=o(" (throws an error)."),DGo=l(),ft=a("div"),F(aL.$$.fragment),GGo=l(),khe=a("p"),OGo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),VGo=l(),Zi=a("p"),XGo=o(`Note:
Loading a model from its configuration file does `),She=a("strong"),zGo=o("not"),WGo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uV=a("a"),QGo=o("from_pretrained()"),HGo=o(" to load the model weights."),UGo=l(),F(Iv.$$.fragment),JGo=l(),ao=a("div"),F(nL.$$.fragment),YGo=l(),Rhe=a("p"),KGo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),ZGo=l(),Ia=a("p"),eOo=o("The model class to instantiate is selected based on the "),Phe=a("code"),oOo=o("model_type"),rOo=o(` property of the config object (either
passed as an argument or loaded from `),Bhe=a("code"),tOo=o("pretrained_model_name_or_path"),aOo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ihe=a("code"),nOo=o("pretrained_model_name_or_path"),sOo=o(":"),lOo=l(),U=a("ul"),Nv=a("li"),Nhe=a("strong"),iOo=o("albert"),dOo=o(" \u2014 "),bV=a("a"),cOo=o("AlbertForTokenClassification"),fOo=o(" (ALBERT model)"),mOo=l(),qv=a("li"),qhe=a("strong"),gOo=o("bert"),hOo=o(" \u2014 "),vV=a("a"),pOo=o("BertForTokenClassification"),_Oo=o(" (BERT model)"),uOo=l(),jv=a("li"),jhe=a("strong"),bOo=o("big_bird"),vOo=o(" \u2014 "),FV=a("a"),FOo=o("BigBirdForTokenClassification"),TOo=o(" (BigBird model)"),MOo=l(),Dv=a("li"),Dhe=a("strong"),EOo=o("camembert"),COo=o(" \u2014 "),TV=a("a"),wOo=o("CamembertForTokenClassification"),AOo=o(" (CamemBERT model)"),LOo=l(),Gv=a("li"),Ghe=a("strong"),yOo=o("canine"),xOo=o(" \u2014 "),MV=a("a"),$Oo=o("CanineForTokenClassification"),kOo=o(" (CANINE model)"),SOo=l(),Ov=a("li"),Ohe=a("strong"),ROo=o("convbert"),POo=o(" \u2014 "),EV=a("a"),BOo=o("ConvBertForTokenClassification"),IOo=o(" (ConvBERT model)"),NOo=l(),Vv=a("li"),Vhe=a("strong"),qOo=o("data2vec-text"),jOo=o(" \u2014 "),CV=a("a"),DOo=o("Data2VecTextForTokenClassification"),GOo=o(" (Data2VecText model)"),OOo=l(),Xv=a("li"),Xhe=a("strong"),VOo=o("deberta"),XOo=o(" \u2014 "),wV=a("a"),zOo=o("DebertaForTokenClassification"),WOo=o(" (DeBERTa model)"),QOo=l(),zv=a("li"),zhe=a("strong"),HOo=o("deberta-v2"),UOo=o(" \u2014 "),AV=a("a"),JOo=o("DebertaV2ForTokenClassification"),YOo=o(" (DeBERTa-v2 model)"),KOo=l(),Wv=a("li"),Whe=a("strong"),ZOo=o("distilbert"),eVo=o(" \u2014 "),LV=a("a"),oVo=o("DistilBertForTokenClassification"),rVo=o(" (DistilBERT model)"),tVo=l(),Qv=a("li"),Qhe=a("strong"),aVo=o("electra"),nVo=o(" \u2014 "),yV=a("a"),sVo=o("ElectraForTokenClassification"),lVo=o(" (ELECTRA model)"),iVo=l(),Hv=a("li"),Hhe=a("strong"),dVo=o("flaubert"),cVo=o(" \u2014 "),xV=a("a"),fVo=o("FlaubertForTokenClassification"),mVo=o(" (FlauBERT model)"),gVo=l(),Uv=a("li"),Uhe=a("strong"),hVo=o("fnet"),pVo=o(" \u2014 "),$V=a("a"),_Vo=o("FNetForTokenClassification"),uVo=o(" (FNet model)"),bVo=l(),Jv=a("li"),Jhe=a("strong"),vVo=o("funnel"),FVo=o(" \u2014 "),kV=a("a"),TVo=o("FunnelForTokenClassification"),MVo=o(" (Funnel Transformer model)"),EVo=l(),Yv=a("li"),Yhe=a("strong"),CVo=o("gpt2"),wVo=o(" \u2014 "),SV=a("a"),AVo=o("GPT2ForTokenClassification"),LVo=o(" (OpenAI GPT-2 model)"),yVo=l(),Kv=a("li"),Khe=a("strong"),xVo=o("ibert"),$Vo=o(" \u2014 "),RV=a("a"),kVo=o("IBertForTokenClassification"),SVo=o(" (I-BERT model)"),RVo=l(),Zv=a("li"),Zhe=a("strong"),PVo=o("layoutlm"),BVo=o(" \u2014 "),PV=a("a"),IVo=o("LayoutLMForTokenClassification"),NVo=o(" (LayoutLM model)"),qVo=l(),eF=a("li"),epe=a("strong"),jVo=o("layoutlmv2"),DVo=o(" \u2014 "),BV=a("a"),GVo=o("LayoutLMv2ForTokenClassification"),OVo=o(" (LayoutLMv2 model)"),VVo=l(),oF=a("li"),ope=a("strong"),XVo=o("layoutlmv3"),zVo=o(" \u2014 "),IV=a("a"),WVo=o("LayoutLMv3ForTokenClassification"),QVo=o(" (LayoutLMv3 model)"),HVo=l(),rF=a("li"),rpe=a("strong"),UVo=o("longformer"),JVo=o(" \u2014 "),NV=a("a"),YVo=o("LongformerForTokenClassification"),KVo=o(" (Longformer model)"),ZVo=l(),tF=a("li"),tpe=a("strong"),eXo=o("megatron-bert"),oXo=o(" \u2014 "),qV=a("a"),rXo=o("MegatronBertForTokenClassification"),tXo=o(" (Megatron-BERT model)"),aXo=l(),aF=a("li"),ape=a("strong"),nXo=o("mobilebert"),sXo=o(" \u2014 "),jV=a("a"),lXo=o("MobileBertForTokenClassification"),iXo=o(" (MobileBERT model)"),dXo=l(),nF=a("li"),npe=a("strong"),cXo=o("mpnet"),fXo=o(" \u2014 "),DV=a("a"),mXo=o("MPNetForTokenClassification"),gXo=o(" (MPNet model)"),hXo=l(),sF=a("li"),spe=a("strong"),pXo=o("nystromformer"),_Xo=o(" \u2014 "),GV=a("a"),uXo=o("NystromformerForTokenClassification"),bXo=o(" (Nystr\xF6mformer model)"),vXo=l(),lF=a("li"),lpe=a("strong"),FXo=o("qdqbert"),TXo=o(" \u2014 "),OV=a("a"),MXo=o("QDQBertForTokenClassification"),EXo=o(" (QDQBert model)"),CXo=l(),iF=a("li"),ipe=a("strong"),wXo=o("rembert"),AXo=o(" \u2014 "),VV=a("a"),LXo=o("RemBertForTokenClassification"),yXo=o(" (RemBERT model)"),xXo=l(),dF=a("li"),dpe=a("strong"),$Xo=o("roberta"),kXo=o(" \u2014 "),XV=a("a"),SXo=o("RobertaForTokenClassification"),RXo=o(" (RoBERTa model)"),PXo=l(),cF=a("li"),cpe=a("strong"),BXo=o("roformer"),IXo=o(" \u2014 "),zV=a("a"),NXo=o("RoFormerForTokenClassification"),qXo=o(" (RoFormer model)"),jXo=l(),fF=a("li"),fpe=a("strong"),DXo=o("squeezebert"),GXo=o(" \u2014 "),WV=a("a"),OXo=o("SqueezeBertForTokenClassification"),VXo=o(" (SqueezeBERT model)"),XXo=l(),mF=a("li"),mpe=a("strong"),zXo=o("xlm"),WXo=o(" \u2014 "),QV=a("a"),QXo=o("XLMForTokenClassification"),HXo=o(" (XLM model)"),UXo=l(),gF=a("li"),gpe=a("strong"),JXo=o("xlm-roberta"),YXo=o(" \u2014 "),HV=a("a"),KXo=o("XLMRobertaForTokenClassification"),ZXo=o(" (XLM-RoBERTa model)"),ezo=l(),hF=a("li"),hpe=a("strong"),ozo=o("xlm-roberta-xl"),rzo=o(" \u2014 "),UV=a("a"),tzo=o("XLMRobertaXLForTokenClassification"),azo=o(" (XLM-RoBERTa-XL model)"),nzo=l(),pF=a("li"),ppe=a("strong"),szo=o("xlnet"),lzo=o(" \u2014 "),JV=a("a"),izo=o("XLNetForTokenClassification"),dzo=o(" (XLNet model)"),czo=l(),_F=a("li"),_pe=a("strong"),fzo=o("yoso"),mzo=o(" \u2014 "),YV=a("a"),gzo=o("YosoForTokenClassification"),hzo=o(" (YOSO model)"),pzo=l(),uF=a("p"),_zo=o("The model is set in evaluation mode by default using "),upe=a("code"),uzo=o("model.eval()"),bzo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bpe=a("code"),vzo=o("model.train()"),Fzo=l(),F(bF.$$.fragment),Gje=l(),ed=a("h2"),vF=a("a"),vpe=a("span"),F(sL.$$.fragment),Tzo=l(),Fpe=a("span"),Mzo=o("AutoModelForQuestionAnswering"),Oje=l(),No=a("div"),F(lL.$$.fragment),Ezo=l(),od=a("p"),Czo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),KV=a("a"),wzo=o("from_pretrained()"),Azo=o(" class method or the "),ZV=a("a"),Lzo=o("from_config()"),yzo=o(` class
method.`),xzo=l(),iL=a("p"),$zo=o("This class cannot be instantiated directly using "),Tpe=a("code"),kzo=o("__init__()"),Szo=o(" (throws an error)."),Rzo=l(),mt=a("div"),F(dL.$$.fragment),Pzo=l(),Mpe=a("p"),Bzo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Izo=l(),rd=a("p"),Nzo=o(`Note:
Loading a model from its configuration file does `),Epe=a("strong"),qzo=o("not"),jzo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eX=a("a"),Dzo=o("from_pretrained()"),Gzo=o(" to load the model weights."),Ozo=l(),F(FF.$$.fragment),Vzo=l(),no=a("div"),F(cL.$$.fragment),Xzo=l(),Cpe=a("p"),zzo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Wzo=l(),Na=a("p"),Qzo=o("The model class to instantiate is selected based on the "),wpe=a("code"),Hzo=o("model_type"),Uzo=o(` property of the config object (either
passed as an argument or loaded from `),Ape=a("code"),Jzo=o("pretrained_model_name_or_path"),Yzo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lpe=a("code"),Kzo=o("pretrained_model_name_or_path"),Zzo=o(":"),eWo=l(),V=a("ul"),TF=a("li"),ype=a("strong"),oWo=o("albert"),rWo=o(" \u2014 "),oX=a("a"),tWo=o("AlbertForQuestionAnswering"),aWo=o(" (ALBERT model)"),nWo=l(),MF=a("li"),xpe=a("strong"),sWo=o("bart"),lWo=o(" \u2014 "),rX=a("a"),iWo=o("BartForQuestionAnswering"),dWo=o(" (BART model)"),cWo=l(),EF=a("li"),$pe=a("strong"),fWo=o("bert"),mWo=o(" \u2014 "),tX=a("a"),gWo=o("BertForQuestionAnswering"),hWo=o(" (BERT model)"),pWo=l(),CF=a("li"),kpe=a("strong"),_Wo=o("big_bird"),uWo=o(" \u2014 "),aX=a("a"),bWo=o("BigBirdForQuestionAnswering"),vWo=o(" (BigBird model)"),FWo=l(),wF=a("li"),Spe=a("strong"),TWo=o("bigbird_pegasus"),MWo=o(" \u2014 "),nX=a("a"),EWo=o("BigBirdPegasusForQuestionAnswering"),CWo=o(" (BigBird-Pegasus model)"),wWo=l(),AF=a("li"),Rpe=a("strong"),AWo=o("camembert"),LWo=o(" \u2014 "),sX=a("a"),yWo=o("CamembertForQuestionAnswering"),xWo=o(" (CamemBERT model)"),$Wo=l(),LF=a("li"),Ppe=a("strong"),kWo=o("canine"),SWo=o(" \u2014 "),lX=a("a"),RWo=o("CanineForQuestionAnswering"),PWo=o(" (CANINE model)"),BWo=l(),yF=a("li"),Bpe=a("strong"),IWo=o("convbert"),NWo=o(" \u2014 "),iX=a("a"),qWo=o("ConvBertForQuestionAnswering"),jWo=o(" (ConvBERT model)"),DWo=l(),xF=a("li"),Ipe=a("strong"),GWo=o("data2vec-text"),OWo=o(" \u2014 "),dX=a("a"),VWo=o("Data2VecTextForQuestionAnswering"),XWo=o(" (Data2VecText model)"),zWo=l(),$F=a("li"),Npe=a("strong"),WWo=o("deberta"),QWo=o(" \u2014 "),cX=a("a"),HWo=o("DebertaForQuestionAnswering"),UWo=o(" (DeBERTa model)"),JWo=l(),kF=a("li"),qpe=a("strong"),YWo=o("deberta-v2"),KWo=o(" \u2014 "),fX=a("a"),ZWo=o("DebertaV2ForQuestionAnswering"),eQo=o(" (DeBERTa-v2 model)"),oQo=l(),SF=a("li"),jpe=a("strong"),rQo=o("distilbert"),tQo=o(" \u2014 "),mX=a("a"),aQo=o("DistilBertForQuestionAnswering"),nQo=o(" (DistilBERT model)"),sQo=l(),RF=a("li"),Dpe=a("strong"),lQo=o("electra"),iQo=o(" \u2014 "),gX=a("a"),dQo=o("ElectraForQuestionAnswering"),cQo=o(" (ELECTRA model)"),fQo=l(),PF=a("li"),Gpe=a("strong"),mQo=o("flaubert"),gQo=o(" \u2014 "),hX=a("a"),hQo=o("FlaubertForQuestionAnsweringSimple"),pQo=o(" (FlauBERT model)"),_Qo=l(),BF=a("li"),Ope=a("strong"),uQo=o("fnet"),bQo=o(" \u2014 "),pX=a("a"),vQo=o("FNetForQuestionAnswering"),FQo=o(" (FNet model)"),TQo=l(),IF=a("li"),Vpe=a("strong"),MQo=o("funnel"),EQo=o(" \u2014 "),_X=a("a"),CQo=o("FunnelForQuestionAnswering"),wQo=o(" (Funnel Transformer model)"),AQo=l(),NF=a("li"),Xpe=a("strong"),LQo=o("gptj"),yQo=o(" \u2014 "),uX=a("a"),xQo=o("GPTJForQuestionAnswering"),$Qo=o(" (GPT-J model)"),kQo=l(),qF=a("li"),zpe=a("strong"),SQo=o("ibert"),RQo=o(" \u2014 "),bX=a("a"),PQo=o("IBertForQuestionAnswering"),BQo=o(" (I-BERT model)"),IQo=l(),jF=a("li"),Wpe=a("strong"),NQo=o("layoutlmv2"),qQo=o(" \u2014 "),vX=a("a"),jQo=o("LayoutLMv2ForQuestionAnswering"),DQo=o(" (LayoutLMv2 model)"),GQo=l(),DF=a("li"),Qpe=a("strong"),OQo=o("layoutlmv3"),VQo=o(" \u2014 "),FX=a("a"),XQo=o("LayoutLMv3ForQuestionAnswering"),zQo=o(" (LayoutLMv3 model)"),WQo=l(),GF=a("li"),Hpe=a("strong"),QQo=o("led"),HQo=o(" \u2014 "),TX=a("a"),UQo=o("LEDForQuestionAnswering"),JQo=o(" (LED model)"),YQo=l(),OF=a("li"),Upe=a("strong"),KQo=o("longformer"),ZQo=o(" \u2014 "),MX=a("a"),eHo=o("LongformerForQuestionAnswering"),oHo=o(" (Longformer model)"),rHo=l(),VF=a("li"),Jpe=a("strong"),tHo=o("lxmert"),aHo=o(" \u2014 "),EX=a("a"),nHo=o("LxmertForQuestionAnswering"),sHo=o(" (LXMERT model)"),lHo=l(),XF=a("li"),Ype=a("strong"),iHo=o("mbart"),dHo=o(" \u2014 "),CX=a("a"),cHo=o("MBartForQuestionAnswering"),fHo=o(" (mBART model)"),mHo=l(),zF=a("li"),Kpe=a("strong"),gHo=o("megatron-bert"),hHo=o(" \u2014 "),wX=a("a"),pHo=o("MegatronBertForQuestionAnswering"),_Ho=o(" (Megatron-BERT model)"),uHo=l(),WF=a("li"),Zpe=a("strong"),bHo=o("mobilebert"),vHo=o(" \u2014 "),AX=a("a"),FHo=o("MobileBertForQuestionAnswering"),THo=o(" (MobileBERT model)"),MHo=l(),QF=a("li"),e_e=a("strong"),EHo=o("mpnet"),CHo=o(" \u2014 "),LX=a("a"),wHo=o("MPNetForQuestionAnswering"),AHo=o(" (MPNet model)"),LHo=l(),HF=a("li"),o_e=a("strong"),yHo=o("nystromformer"),xHo=o(" \u2014 "),yX=a("a"),$Ho=o("NystromformerForQuestionAnswering"),kHo=o(" (Nystr\xF6mformer model)"),SHo=l(),UF=a("li"),r_e=a("strong"),RHo=o("qdqbert"),PHo=o(" \u2014 "),xX=a("a"),BHo=o("QDQBertForQuestionAnswering"),IHo=o(" (QDQBert model)"),NHo=l(),JF=a("li"),t_e=a("strong"),qHo=o("reformer"),jHo=o(" \u2014 "),$X=a("a"),DHo=o("ReformerForQuestionAnswering"),GHo=o(" (Reformer model)"),OHo=l(),YF=a("li"),a_e=a("strong"),VHo=o("rembert"),XHo=o(" \u2014 "),kX=a("a"),zHo=o("RemBertForQuestionAnswering"),WHo=o(" (RemBERT model)"),QHo=l(),KF=a("li"),n_e=a("strong"),HHo=o("roberta"),UHo=o(" \u2014 "),SX=a("a"),JHo=o("RobertaForQuestionAnswering"),YHo=o(" (RoBERTa model)"),KHo=l(),ZF=a("li"),s_e=a("strong"),ZHo=o("roformer"),eUo=o(" \u2014 "),RX=a("a"),oUo=o("RoFormerForQuestionAnswering"),rUo=o(" (RoFormer model)"),tUo=l(),e6=a("li"),l_e=a("strong"),aUo=o("splinter"),nUo=o(" \u2014 "),PX=a("a"),sUo=o("SplinterForQuestionAnswering"),lUo=o(" (Splinter model)"),iUo=l(),o6=a("li"),i_e=a("strong"),dUo=o("squeezebert"),cUo=o(" \u2014 "),BX=a("a"),fUo=o("SqueezeBertForQuestionAnswering"),mUo=o(" (SqueezeBERT model)"),gUo=l(),r6=a("li"),d_e=a("strong"),hUo=o("xlm"),pUo=o(" \u2014 "),IX=a("a"),_Uo=o("XLMForQuestionAnsweringSimple"),uUo=o(" (XLM model)"),bUo=l(),t6=a("li"),c_e=a("strong"),vUo=o("xlm-roberta"),FUo=o(" \u2014 "),NX=a("a"),TUo=o("XLMRobertaForQuestionAnswering"),MUo=o(" (XLM-RoBERTa model)"),EUo=l(),a6=a("li"),f_e=a("strong"),CUo=o("xlm-roberta-xl"),wUo=o(" \u2014 "),qX=a("a"),AUo=o("XLMRobertaXLForQuestionAnswering"),LUo=o(" (XLM-RoBERTa-XL model)"),yUo=l(),n6=a("li"),m_e=a("strong"),xUo=o("xlnet"),$Uo=o(" \u2014 "),jX=a("a"),kUo=o("XLNetForQuestionAnsweringSimple"),SUo=o(" (XLNet model)"),RUo=l(),s6=a("li"),g_e=a("strong"),PUo=o("yoso"),BUo=o(" \u2014 "),DX=a("a"),IUo=o("YosoForQuestionAnswering"),NUo=o(" (YOSO model)"),qUo=l(),l6=a("p"),jUo=o("The model is set in evaluation mode by default using "),h_e=a("code"),DUo=o("model.eval()"),GUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),p_e=a("code"),OUo=o("model.train()"),VUo=l(),F(i6.$$.fragment),Vje=l(),td=a("h2"),d6=a("a"),__e=a("span"),F(fL.$$.fragment),XUo=l(),u_e=a("span"),zUo=o("AutoModelForTableQuestionAnswering"),Xje=l(),qo=a("div"),F(mL.$$.fragment),WUo=l(),ad=a("p"),QUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),GX=a("a"),HUo=o("from_pretrained()"),UUo=o(" class method or the "),OX=a("a"),JUo=o("from_config()"),YUo=o(` class
method.`),KUo=l(),gL=a("p"),ZUo=o("This class cannot be instantiated directly using "),b_e=a("code"),eJo=o("__init__()"),oJo=o(" (throws an error)."),rJo=l(),gt=a("div"),F(hL.$$.fragment),tJo=l(),v_e=a("p"),aJo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),nJo=l(),nd=a("p"),sJo=o(`Note:
Loading a model from its configuration file does `),F_e=a("strong"),lJo=o("not"),iJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VX=a("a"),dJo=o("from_pretrained()"),cJo=o(" to load the model weights."),fJo=l(),F(c6.$$.fragment),mJo=l(),so=a("div"),F(pL.$$.fragment),gJo=l(),T_e=a("p"),hJo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),pJo=l(),qa=a("p"),_Jo=o("The model class to instantiate is selected based on the "),M_e=a("code"),uJo=o("model_type"),bJo=o(` property of the config object (either
passed as an argument or loaded from `),E_e=a("code"),vJo=o("pretrained_model_name_or_path"),FJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C_e=a("code"),TJo=o("pretrained_model_name_or_path"),MJo=o(":"),EJo=l(),w_e=a("ul"),f6=a("li"),A_e=a("strong"),CJo=o("tapas"),wJo=o(" \u2014 "),XX=a("a"),AJo=o("TapasForQuestionAnswering"),LJo=o(" (TAPAS model)"),yJo=l(),m6=a("p"),xJo=o("The model is set in evaluation mode by default using "),L_e=a("code"),$Jo=o("model.eval()"),kJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),y_e=a("code"),SJo=o("model.train()"),RJo=l(),F(g6.$$.fragment),zje=l(),sd=a("h2"),h6=a("a"),x_e=a("span"),F(_L.$$.fragment),PJo=l(),$_e=a("span"),BJo=o("AutoModelForImageClassification"),Wje=l(),jo=a("div"),F(uL.$$.fragment),IJo=l(),ld=a("p"),NJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),zX=a("a"),qJo=o("from_pretrained()"),jJo=o(" class method or the "),WX=a("a"),DJo=o("from_config()"),GJo=o(` class
method.`),OJo=l(),bL=a("p"),VJo=o("This class cannot be instantiated directly using "),k_e=a("code"),XJo=o("__init__()"),zJo=o(" (throws an error)."),WJo=l(),ht=a("div"),F(vL.$$.fragment),QJo=l(),S_e=a("p"),HJo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),UJo=l(),id=a("p"),JJo=o(`Note:
Loading a model from its configuration file does `),R_e=a("strong"),YJo=o("not"),KJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QX=a("a"),ZJo=o("from_pretrained()"),eYo=o(" to load the model weights."),oYo=l(),F(p6.$$.fragment),rYo=l(),lo=a("div"),F(FL.$$.fragment),tYo=l(),P_e=a("p"),aYo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),nYo=l(),ja=a("p"),sYo=o("The model class to instantiate is selected based on the "),B_e=a("code"),lYo=o("model_type"),iYo=o(` property of the config object (either
passed as an argument or loaded from `),I_e=a("code"),dYo=o("pretrained_model_name_or_path"),cYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N_e=a("code"),fYo=o("pretrained_model_name_or_path"),mYo=o(":"),gYo=l(),Fe=a("ul"),_6=a("li"),q_e=a("strong"),hYo=o("beit"),pYo=o(" \u2014 "),HX=a("a"),_Yo=o("BeitForImageClassification"),uYo=o(" (BEiT model)"),bYo=l(),u6=a("li"),j_e=a("strong"),vYo=o("convnext"),FYo=o(" \u2014 "),UX=a("a"),TYo=o("ConvNextForImageClassification"),MYo=o(" (ConvNeXT model)"),EYo=l(),b6=a("li"),D_e=a("strong"),CYo=o("cvt"),wYo=o(" \u2014 "),JX=a("a"),AYo=o("CvtForImageClassification"),LYo=o(" (CvT model)"),yYo=l(),v6=a("li"),G_e=a("strong"),xYo=o("data2vec-vision"),$Yo=o(" \u2014 "),YX=a("a"),kYo=o("Data2VecVisionForImageClassification"),SYo=o(" (Data2VecVision model)"),RYo=l(),Is=a("li"),O_e=a("strong"),PYo=o("deit"),BYo=o(" \u2014 "),KX=a("a"),IYo=o("DeiTForImageClassification"),NYo=o(" or "),ZX=a("a"),qYo=o("DeiTForImageClassificationWithTeacher"),jYo=o(" (DeiT model)"),DYo=l(),F6=a("li"),V_e=a("strong"),GYo=o("imagegpt"),OYo=o(" \u2014 "),ez=a("a"),VYo=o("ImageGPTForImageClassification"),XYo=o(" (ImageGPT model)"),zYo=l(),Ns=a("li"),X_e=a("strong"),WYo=o("levit"),QYo=o(" \u2014 "),oz=a("a"),HYo=o("LevitForImageClassification"),UYo=o(" or "),rz=a("a"),JYo=o("LevitForImageClassificationWithTeacher"),YYo=o(" (LeViT model)"),KYo=l(),pt=a("li"),z_e=a("strong"),ZYo=o("perceiver"),eKo=o(" \u2014 "),tz=a("a"),oKo=o("PerceiverForImageClassificationLearned"),rKo=o(" or "),az=a("a"),tKo=o("PerceiverForImageClassificationFourier"),aKo=o(" or "),nz=a("a"),nKo=o("PerceiverForImageClassificationConvProcessing"),sKo=o(" (Perceiver model)"),lKo=l(),T6=a("li"),W_e=a("strong"),iKo=o("poolformer"),dKo=o(" \u2014 "),sz=a("a"),cKo=o("PoolFormerForImageClassification"),fKo=o(" (PoolFormer model)"),mKo=l(),M6=a("li"),Q_e=a("strong"),gKo=o("regnet"),hKo=o(" \u2014 "),lz=a("a"),pKo=o("RegNetForImageClassification"),_Ko=o(" (RegNet model)"),uKo=l(),E6=a("li"),H_e=a("strong"),bKo=o("resnet"),vKo=o(" \u2014 "),iz=a("a"),FKo=o("ResNetForImageClassification"),TKo=o(" (ResNet model)"),MKo=l(),C6=a("li"),U_e=a("strong"),EKo=o("segformer"),CKo=o(" \u2014 "),dz=a("a"),wKo=o("SegformerForImageClassification"),AKo=o(" (SegFormer model)"),LKo=l(),w6=a("li"),J_e=a("strong"),yKo=o("swin"),xKo=o(" \u2014 "),cz=a("a"),$Ko=o("SwinForImageClassification"),kKo=o(" (Swin Transformer model)"),SKo=l(),A6=a("li"),Y_e=a("strong"),RKo=o("van"),PKo=o(" \u2014 "),fz=a("a"),BKo=o("VanForImageClassification"),IKo=o(" (VAN model)"),NKo=l(),L6=a("li"),K_e=a("strong"),qKo=o("vit"),jKo=o(" \u2014 "),mz=a("a"),DKo=o("ViTForImageClassification"),GKo=o(" (ViT model)"),OKo=l(),y6=a("p"),VKo=o("The model is set in evaluation mode by default using "),Z_e=a("code"),XKo=o("model.eval()"),zKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),eue=a("code"),WKo=o("model.train()"),QKo=l(),F(x6.$$.fragment),Qje=l(),dd=a("h2"),$6=a("a"),oue=a("span"),F(TL.$$.fragment),HKo=l(),rue=a("span"),UKo=o("AutoModelForVision2Seq"),Hje=l(),Do=a("div"),F(ML.$$.fragment),JKo=l(),cd=a("p"),YKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),gz=a("a"),KKo=o("from_pretrained()"),ZKo=o(" class method or the "),hz=a("a"),eZo=o("from_config()"),oZo=o(` class
method.`),rZo=l(),EL=a("p"),tZo=o("This class cannot be instantiated directly using "),tue=a("code"),aZo=o("__init__()"),nZo=o(" (throws an error)."),sZo=l(),_t=a("div"),F(CL.$$.fragment),lZo=l(),aue=a("p"),iZo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),dZo=l(),fd=a("p"),cZo=o(`Note:
Loading a model from its configuration file does `),nue=a("strong"),fZo=o("not"),mZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pz=a("a"),gZo=o("from_pretrained()"),hZo=o(" to load the model weights."),pZo=l(),F(k6.$$.fragment),_Zo=l(),io=a("div"),F(wL.$$.fragment),uZo=l(),sue=a("p"),bZo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),vZo=l(),Da=a("p"),FZo=o("The model class to instantiate is selected based on the "),lue=a("code"),TZo=o("model_type"),MZo=o(` property of the config object (either
passed as an argument or loaded from `),iue=a("code"),EZo=o("pretrained_model_name_or_path"),CZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),due=a("code"),wZo=o("pretrained_model_name_or_path"),AZo=o(":"),LZo=l(),cue=a("ul"),S6=a("li"),fue=a("strong"),yZo=o("vision-encoder-decoder"),xZo=o(" \u2014 "),_z=a("a"),$Zo=o("VisionEncoderDecoderModel"),kZo=o(" (Vision Encoder decoder model)"),SZo=l(),R6=a("p"),RZo=o("The model is set in evaluation mode by default using "),mue=a("code"),PZo=o("model.eval()"),BZo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gue=a("code"),IZo=o("model.train()"),NZo=l(),F(P6.$$.fragment),Uje=l(),md=a("h2"),B6=a("a"),hue=a("span"),F(AL.$$.fragment),qZo=l(),pue=a("span"),jZo=o("AutoModelForAudioClassification"),Jje=l(),Go=a("div"),F(LL.$$.fragment),DZo=l(),gd=a("p"),GZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),uz=a("a"),OZo=o("from_pretrained()"),VZo=o(" class method or the "),bz=a("a"),XZo=o("from_config()"),zZo=o(` class
method.`),WZo=l(),yL=a("p"),QZo=o("This class cannot be instantiated directly using "),_ue=a("code"),HZo=o("__init__()"),UZo=o(" (throws an error)."),JZo=l(),ut=a("div"),F(xL.$$.fragment),YZo=l(),uue=a("p"),KZo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),ZZo=l(),hd=a("p"),eer=o(`Note:
Loading a model from its configuration file does `),bue=a("strong"),oer=o("not"),rer=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vz=a("a"),ter=o("from_pretrained()"),aer=o(" to load the model weights."),ner=l(),F(I6.$$.fragment),ser=l(),co=a("div"),F($L.$$.fragment),ler=l(),vue=a("p"),ier=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),der=l(),Ga=a("p"),cer=o("The model class to instantiate is selected based on the "),Fue=a("code"),fer=o("model_type"),mer=o(` property of the config object (either
passed as an argument or loaded from `),Tue=a("code"),ger=o("pretrained_model_name_or_path"),her=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mue=a("code"),per=o("pretrained_model_name_or_path"),_er=o(":"),uer=l(),Re=a("ul"),N6=a("li"),Eue=a("strong"),ber=o("data2vec-audio"),ver=o(" \u2014 "),Fz=a("a"),Fer=o("Data2VecAudioForSequenceClassification"),Ter=o(" (Data2VecAudio model)"),Mer=l(),q6=a("li"),Cue=a("strong"),Eer=o("hubert"),Cer=o(" \u2014 "),Tz=a("a"),wer=o("HubertForSequenceClassification"),Aer=o(" (Hubert model)"),Ler=l(),j6=a("li"),wue=a("strong"),yer=o("sew"),xer=o(" \u2014 "),Mz=a("a"),$er=o("SEWForSequenceClassification"),ker=o(" (SEW model)"),Ser=l(),D6=a("li"),Aue=a("strong"),Rer=o("sew-d"),Per=o(" \u2014 "),Ez=a("a"),Ber=o("SEWDForSequenceClassification"),Ier=o(" (SEW-D model)"),Ner=l(),G6=a("li"),Lue=a("strong"),qer=o("unispeech"),jer=o(" \u2014 "),Cz=a("a"),Der=o("UniSpeechForSequenceClassification"),Ger=o(" (UniSpeech model)"),Oer=l(),O6=a("li"),yue=a("strong"),Ver=o("unispeech-sat"),Xer=o(" \u2014 "),wz=a("a"),zer=o("UniSpeechSatForSequenceClassification"),Wer=o(" (UniSpeechSat model)"),Qer=l(),V6=a("li"),xue=a("strong"),Her=o("wav2vec2"),Uer=o(" \u2014 "),Az=a("a"),Jer=o("Wav2Vec2ForSequenceClassification"),Yer=o(" (Wav2Vec2 model)"),Ker=l(),X6=a("li"),$ue=a("strong"),Zer=o("wav2vec2-conformer"),eor=o(" \u2014 "),Lz=a("a"),oor=o("Wav2Vec2ConformerForSequenceClassification"),ror=o(" (Wav2Vec2-Conformer model)"),tor=l(),z6=a("li"),kue=a("strong"),aor=o("wavlm"),nor=o(" \u2014 "),yz=a("a"),sor=o("WavLMForSequenceClassification"),lor=o(" (WavLM model)"),ior=l(),W6=a("p"),dor=o("The model is set in evaluation mode by default using "),Sue=a("code"),cor=o("model.eval()"),mor=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rue=a("code"),gor=o("model.train()"),hor=l(),F(Q6.$$.fragment),Yje=l(),pd=a("h2"),H6=a("a"),Pue=a("span"),F(kL.$$.fragment),por=l(),Bue=a("span"),_or=o("AutoModelForAudioFrameClassification"),Kje=l(),Oo=a("div"),F(SL.$$.fragment),uor=l(),_d=a("p"),bor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),xz=a("a"),vor=o("from_pretrained()"),For=o(" class method or the "),$z=a("a"),Tor=o("from_config()"),Mor=o(` class
method.`),Eor=l(),RL=a("p"),Cor=o("This class cannot be instantiated directly using "),Iue=a("code"),wor=o("__init__()"),Aor=o(" (throws an error)."),Lor=l(),bt=a("div"),F(PL.$$.fragment),yor=l(),Nue=a("p"),xor=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),$or=l(),ud=a("p"),kor=o(`Note:
Loading a model from its configuration file does `),que=a("strong"),Sor=o("not"),Ror=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kz=a("a"),Por=o("from_pretrained()"),Bor=o(" to load the model weights."),Ior=l(),F(U6.$$.fragment),Nor=l(),fo=a("div"),F(BL.$$.fragment),qor=l(),jue=a("p"),jor=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Dor=l(),Oa=a("p"),Gor=o("The model class to instantiate is selected based on the "),Due=a("code"),Oor=o("model_type"),Vor=o(` property of the config object (either
passed as an argument or loaded from `),Gue=a("code"),Xor=o("pretrained_model_name_or_path"),zor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Oue=a("code"),Wor=o("pretrained_model_name_or_path"),Qor=o(":"),Hor=l(),Kr=a("ul"),J6=a("li"),Vue=a("strong"),Uor=o("data2vec-audio"),Jor=o(" \u2014 "),Sz=a("a"),Yor=o("Data2VecAudioForAudioFrameClassification"),Kor=o(" (Data2VecAudio model)"),Zor=l(),Y6=a("li"),Xue=a("strong"),err=o("unispeech-sat"),orr=o(" \u2014 "),Rz=a("a"),rrr=o("UniSpeechSatForAudioFrameClassification"),trr=o(" (UniSpeechSat model)"),arr=l(),K6=a("li"),zue=a("strong"),nrr=o("wav2vec2"),srr=o(" \u2014 "),Pz=a("a"),lrr=o("Wav2Vec2ForAudioFrameClassification"),irr=o(" (Wav2Vec2 model)"),drr=l(),Z6=a("li"),Wue=a("strong"),crr=o("wav2vec2-conformer"),frr=o(" \u2014 "),Bz=a("a"),mrr=o("Wav2Vec2ConformerForAudioFrameClassification"),grr=o(" (Wav2Vec2-Conformer model)"),hrr=l(),eT=a("li"),Que=a("strong"),prr=o("wavlm"),_rr=o(" \u2014 "),Iz=a("a"),urr=o("WavLMForAudioFrameClassification"),brr=o(" (WavLM model)"),vrr=l(),oT=a("p"),Frr=o("The model is set in evaluation mode by default using "),Hue=a("code"),Trr=o("model.eval()"),Mrr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Uue=a("code"),Err=o("model.train()"),Crr=l(),F(rT.$$.fragment),Zje=l(),bd=a("h2"),tT=a("a"),Jue=a("span"),F(IL.$$.fragment),wrr=l(),Yue=a("span"),Arr=o("AutoModelForCTC"),eDe=l(),Vo=a("div"),F(NL.$$.fragment),Lrr=l(),vd=a("p"),yrr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),Nz=a("a"),xrr=o("from_pretrained()"),$rr=o(" class method or the "),qz=a("a"),krr=o("from_config()"),Srr=o(` class
method.`),Rrr=l(),qL=a("p"),Prr=o("This class cannot be instantiated directly using "),Kue=a("code"),Brr=o("__init__()"),Irr=o(" (throws an error)."),Nrr=l(),vt=a("div"),F(jL.$$.fragment),qrr=l(),Zue=a("p"),jrr=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Drr=l(),Fd=a("p"),Grr=o(`Note:
Loading a model from its configuration file does `),e2e=a("strong"),Orr=o("not"),Vrr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jz=a("a"),Xrr=o("from_pretrained()"),zrr=o(" to load the model weights."),Wrr=l(),F(aT.$$.fragment),Qrr=l(),mo=a("div"),F(DL.$$.fragment),Hrr=l(),o2e=a("p"),Urr=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Jrr=l(),Va=a("p"),Yrr=o("The model class to instantiate is selected based on the "),r2e=a("code"),Krr=o("model_type"),Zrr=o(` property of the config object (either
passed as an argument or loaded from `),t2e=a("code"),etr=o("pretrained_model_name_or_path"),otr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a2e=a("code"),rtr=o("pretrained_model_name_or_path"),ttr=o(":"),atr=l(),Pe=a("ul"),nT=a("li"),n2e=a("strong"),ntr=o("data2vec-audio"),str=o(" \u2014 "),Dz=a("a"),ltr=o("Data2VecAudioForCTC"),itr=o(" (Data2VecAudio model)"),dtr=l(),sT=a("li"),s2e=a("strong"),ctr=o("hubert"),ftr=o(" \u2014 "),Gz=a("a"),mtr=o("HubertForCTC"),gtr=o(" (Hubert model)"),htr=l(),lT=a("li"),l2e=a("strong"),ptr=o("sew"),_tr=o(" \u2014 "),Oz=a("a"),utr=o("SEWForCTC"),btr=o(" (SEW model)"),vtr=l(),iT=a("li"),i2e=a("strong"),Ftr=o("sew-d"),Ttr=o(" \u2014 "),Vz=a("a"),Mtr=o("SEWDForCTC"),Etr=o(" (SEW-D model)"),Ctr=l(),dT=a("li"),d2e=a("strong"),wtr=o("unispeech"),Atr=o(" \u2014 "),Xz=a("a"),Ltr=o("UniSpeechForCTC"),ytr=o(" (UniSpeech model)"),xtr=l(),cT=a("li"),c2e=a("strong"),$tr=o("unispeech-sat"),ktr=o(" \u2014 "),zz=a("a"),Str=o("UniSpeechSatForCTC"),Rtr=o(" (UniSpeechSat model)"),Ptr=l(),fT=a("li"),f2e=a("strong"),Btr=o("wav2vec2"),Itr=o(" \u2014 "),Wz=a("a"),Ntr=o("Wav2Vec2ForCTC"),qtr=o(" (Wav2Vec2 model)"),jtr=l(),mT=a("li"),m2e=a("strong"),Dtr=o("wav2vec2-conformer"),Gtr=o(" \u2014 "),Qz=a("a"),Otr=o("Wav2Vec2ConformerForCTC"),Vtr=o(" (Wav2Vec2-Conformer model)"),Xtr=l(),gT=a("li"),g2e=a("strong"),ztr=o("wavlm"),Wtr=o(" \u2014 "),Hz=a("a"),Qtr=o("WavLMForCTC"),Htr=o(" (WavLM model)"),Utr=l(),hT=a("p"),Jtr=o("The model is set in evaluation mode by default using "),h2e=a("code"),Ytr=o("model.eval()"),Ktr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),p2e=a("code"),Ztr=o("model.train()"),ear=l(),F(pT.$$.fragment),oDe=l(),Td=a("h2"),_T=a("a"),_2e=a("span"),F(GL.$$.fragment),oar=l(),u2e=a("span"),rar=o("AutoModelForSpeechSeq2Seq"),rDe=l(),Xo=a("div"),F(OL.$$.fragment),tar=l(),Md=a("p"),aar=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Uz=a("a"),nar=o("from_pretrained()"),sar=o(" class method or the "),Jz=a("a"),lar=o("from_config()"),iar=o(` class
method.`),dar=l(),VL=a("p"),car=o("This class cannot be instantiated directly using "),b2e=a("code"),far=o("__init__()"),mar=o(" (throws an error)."),gar=l(),Ft=a("div"),F(XL.$$.fragment),har=l(),v2e=a("p"),par=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),_ar=l(),Ed=a("p"),uar=o(`Note:
Loading a model from its configuration file does `),F2e=a("strong"),bar=o("not"),Far=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Yz=a("a"),Tar=o("from_pretrained()"),Mar=o(" to load the model weights."),Ear=l(),F(uT.$$.fragment),Car=l(),go=a("div"),F(zL.$$.fragment),war=l(),T2e=a("p"),Aar=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Lar=l(),Xa=a("p"),yar=o("The model class to instantiate is selected based on the "),M2e=a("code"),xar=o("model_type"),$ar=o(` property of the config object (either
passed as an argument or loaded from `),E2e=a("code"),kar=o("pretrained_model_name_or_path"),Sar=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C2e=a("code"),Rar=o("pretrained_model_name_or_path"),Par=o(":"),Bar=l(),WL=a("ul"),bT=a("li"),w2e=a("strong"),Iar=o("speech-encoder-decoder"),Nar=o(" \u2014 "),Kz=a("a"),qar=o("SpeechEncoderDecoderModel"),jar=o(" (Speech Encoder decoder model)"),Dar=l(),vT=a("li"),A2e=a("strong"),Gar=o("speech_to_text"),Oar=o(" \u2014 "),Zz=a("a"),Var=o("Speech2TextForConditionalGeneration"),Xar=o(" (Speech2Text model)"),zar=l(),FT=a("p"),War=o("The model is set in evaluation mode by default using "),L2e=a("code"),Qar=o("model.eval()"),Har=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),y2e=a("code"),Uar=o("model.train()"),Jar=l(),F(TT.$$.fragment),tDe=l(),Cd=a("h2"),MT=a("a"),x2e=a("span"),F(QL.$$.fragment),Yar=l(),$2e=a("span"),Kar=o("AutoModelForAudioXVector"),aDe=l(),zo=a("div"),F(HL.$$.fragment),Zar=l(),wd=a("p"),enr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),eW=a("a"),onr=o("from_pretrained()"),rnr=o(" class method or the "),oW=a("a"),tnr=o("from_config()"),anr=o(` class
method.`),nnr=l(),UL=a("p"),snr=o("This class cannot be instantiated directly using "),k2e=a("code"),lnr=o("__init__()"),inr=o(" (throws an error)."),dnr=l(),Tt=a("div"),F(JL.$$.fragment),cnr=l(),S2e=a("p"),fnr=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),mnr=l(),Ad=a("p"),gnr=o(`Note:
Loading a model from its configuration file does `),R2e=a("strong"),hnr=o("not"),pnr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rW=a("a"),_nr=o("from_pretrained()"),unr=o(" to load the model weights."),bnr=l(),F(ET.$$.fragment),vnr=l(),ho=a("div"),F(YL.$$.fragment),Fnr=l(),P2e=a("p"),Tnr=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Mnr=l(),za=a("p"),Enr=o("The model class to instantiate is selected based on the "),B2e=a("code"),Cnr=o("model_type"),wnr=o(` property of the config object (either
passed as an argument or loaded from `),I2e=a("code"),Anr=o("pretrained_model_name_or_path"),Lnr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N2e=a("code"),ynr=o("pretrained_model_name_or_path"),xnr=o(":"),$nr=l(),Zr=a("ul"),CT=a("li"),q2e=a("strong"),knr=o("data2vec-audio"),Snr=o(" \u2014 "),tW=a("a"),Rnr=o("Data2VecAudioForXVector"),Pnr=o(" (Data2VecAudio model)"),Bnr=l(),wT=a("li"),j2e=a("strong"),Inr=o("unispeech-sat"),Nnr=o(" \u2014 "),aW=a("a"),qnr=o("UniSpeechSatForXVector"),jnr=o(" (UniSpeechSat model)"),Dnr=l(),AT=a("li"),D2e=a("strong"),Gnr=o("wav2vec2"),Onr=o(" \u2014 "),nW=a("a"),Vnr=o("Wav2Vec2ForXVector"),Xnr=o(" (Wav2Vec2 model)"),znr=l(),LT=a("li"),G2e=a("strong"),Wnr=o("wav2vec2-conformer"),Qnr=o(" \u2014 "),sW=a("a"),Hnr=o("Wav2Vec2ConformerForXVector"),Unr=o(" (Wav2Vec2-Conformer model)"),Jnr=l(),yT=a("li"),O2e=a("strong"),Ynr=o("wavlm"),Knr=o(" \u2014 "),lW=a("a"),Znr=o("WavLMForXVector"),esr=o(" (WavLM model)"),osr=l(),xT=a("p"),rsr=o("The model is set in evaluation mode by default using "),V2e=a("code"),tsr=o("model.eval()"),asr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),X2e=a("code"),nsr=o("model.train()"),ssr=l(),F($T.$$.fragment),nDe=l(),Ld=a("h2"),kT=a("a"),z2e=a("span"),F(KL.$$.fragment),lsr=l(),W2e=a("span"),isr=o("AutoModelForMaskedImageModeling"),sDe=l(),Wo=a("div"),F(ZL.$$.fragment),dsr=l(),yd=a("p"),csr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),iW=a("a"),fsr=o("from_pretrained()"),msr=o(" class method or the "),dW=a("a"),gsr=o("from_config()"),hsr=o(` class
method.`),psr=l(),ey=a("p"),_sr=o("This class cannot be instantiated directly using "),Q2e=a("code"),usr=o("__init__()"),bsr=o(" (throws an error)."),vsr=l(),Mt=a("div"),F(oy.$$.fragment),Fsr=l(),H2e=a("p"),Tsr=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Msr=l(),xd=a("p"),Esr=o(`Note:
Loading a model from its configuration file does `),U2e=a("strong"),Csr=o("not"),wsr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cW=a("a"),Asr=o("from_pretrained()"),Lsr=o(" to load the model weights."),ysr=l(),F(ST.$$.fragment),xsr=l(),po=a("div"),F(ry.$$.fragment),$sr=l(),J2e=a("p"),ksr=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Ssr=l(),Wa=a("p"),Rsr=o("The model class to instantiate is selected based on the "),Y2e=a("code"),Psr=o("model_type"),Bsr=o(` property of the config object (either
passed as an argument or loaded from `),K2e=a("code"),Isr=o("pretrained_model_name_or_path"),Nsr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z2e=a("code"),qsr=o("pretrained_model_name_or_path"),jsr=o(":"),Dsr=l(),$d=a("ul"),RT=a("li"),e1e=a("strong"),Gsr=o("deit"),Osr=o(" \u2014 "),fW=a("a"),Vsr=o("DeiTForMaskedImageModeling"),Xsr=o(" (DeiT model)"),zsr=l(),PT=a("li"),o1e=a("strong"),Wsr=o("swin"),Qsr=o(" \u2014 "),mW=a("a"),Hsr=o("SwinForMaskedImageModeling"),Usr=o(" (Swin Transformer model)"),Jsr=l(),BT=a("li"),r1e=a("strong"),Ysr=o("vit"),Ksr=o(" \u2014 "),gW=a("a"),Zsr=o("ViTForMaskedImageModeling"),elr=o(" (ViT model)"),olr=l(),IT=a("p"),rlr=o("The model is set in evaluation mode by default using "),t1e=a("code"),tlr=o("model.eval()"),alr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),a1e=a("code"),nlr=o("model.train()"),slr=l(),F(NT.$$.fragment),lDe=l(),kd=a("h2"),qT=a("a"),n1e=a("span"),F(ty.$$.fragment),llr=l(),s1e=a("span"),ilr=o("AutoModelForObjectDetection"),iDe=l(),Qo=a("div"),F(ay.$$.fragment),dlr=l(),Sd=a("p"),clr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),hW=a("a"),flr=o("from_pretrained()"),mlr=o(" class method or the "),pW=a("a"),glr=o("from_config()"),hlr=o(` class
method.`),plr=l(),ny=a("p"),_lr=o("This class cannot be instantiated directly using "),l1e=a("code"),ulr=o("__init__()"),blr=o(" (throws an error)."),vlr=l(),Et=a("div"),F(sy.$$.fragment),Flr=l(),i1e=a("p"),Tlr=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Mlr=l(),Rd=a("p"),Elr=o(`Note:
Loading a model from its configuration file does `),d1e=a("strong"),Clr=o("not"),wlr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_W=a("a"),Alr=o("from_pretrained()"),Llr=o(" to load the model weights."),ylr=l(),F(jT.$$.fragment),xlr=l(),_o=a("div"),F(ly.$$.fragment),$lr=l(),c1e=a("p"),klr=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Slr=l(),Qa=a("p"),Rlr=o("The model class to instantiate is selected based on the "),f1e=a("code"),Plr=o("model_type"),Blr=o(` property of the config object (either
passed as an argument or loaded from `),m1e=a("code"),Ilr=o("pretrained_model_name_or_path"),Nlr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g1e=a("code"),qlr=o("pretrained_model_name_or_path"),jlr=o(":"),Dlr=l(),iy=a("ul"),DT=a("li"),h1e=a("strong"),Glr=o("detr"),Olr=o(" \u2014 "),uW=a("a"),Vlr=o("DetrForObjectDetection"),Xlr=o(" (DETR model)"),zlr=l(),GT=a("li"),p1e=a("strong"),Wlr=o("yolos"),Qlr=o(" \u2014 "),bW=a("a"),Hlr=o("YolosForObjectDetection"),Ulr=o(" (YOLOS model)"),Jlr=l(),OT=a("p"),Ylr=o("The model is set in evaluation mode by default using "),_1e=a("code"),Klr=o("model.eval()"),Zlr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),u1e=a("code"),eir=o("model.train()"),oir=l(),F(VT.$$.fragment),dDe=l(),Pd=a("h2"),XT=a("a"),b1e=a("span"),F(dy.$$.fragment),rir=l(),v1e=a("span"),tir=o("AutoModelForImageSegmentation"),cDe=l(),Ho=a("div"),F(cy.$$.fragment),air=l(),Bd=a("p"),nir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),vW=a("a"),sir=o("from_pretrained()"),lir=o(" class method or the "),FW=a("a"),iir=o("from_config()"),dir=o(` class
method.`),cir=l(),fy=a("p"),fir=o("This class cannot be instantiated directly using "),F1e=a("code"),mir=o("__init__()"),gir=o(" (throws an error)."),hir=l(),Ct=a("div"),F(my.$$.fragment),pir=l(),T1e=a("p"),_ir=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),uir=l(),Id=a("p"),bir=o(`Note:
Loading a model from its configuration file does `),M1e=a("strong"),vir=o("not"),Fir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TW=a("a"),Tir=o("from_pretrained()"),Mir=o(" to load the model weights."),Eir=l(),F(zT.$$.fragment),Cir=l(),uo=a("div"),F(gy.$$.fragment),wir=l(),E1e=a("p"),Air=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Lir=l(),Ha=a("p"),yir=o("The model class to instantiate is selected based on the "),C1e=a("code"),xir=o("model_type"),$ir=o(` property of the config object (either
passed as an argument or loaded from `),w1e=a("code"),kir=o("pretrained_model_name_or_path"),Sir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A1e=a("code"),Rir=o("pretrained_model_name_or_path"),Pir=o(":"),Bir=l(),L1e=a("ul"),WT=a("li"),y1e=a("strong"),Iir=o("detr"),Nir=o(" \u2014 "),MW=a("a"),qir=o("DetrForSegmentation"),jir=o(" (DETR model)"),Dir=l(),QT=a("p"),Gir=o("The model is set in evaluation mode by default using "),x1e=a("code"),Oir=o("model.eval()"),Vir=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$1e=a("code"),Xir=o("model.train()"),zir=l(),F(HT.$$.fragment),fDe=l(),Nd=a("h2"),UT=a("a"),k1e=a("span"),F(hy.$$.fragment),Wir=l(),S1e=a("span"),Qir=o("AutoModelForSemanticSegmentation"),mDe=l(),Uo=a("div"),F(py.$$.fragment),Hir=l(),qd=a("p"),Uir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),EW=a("a"),Jir=o("from_pretrained()"),Yir=o(" class method or the "),CW=a("a"),Kir=o("from_config()"),Zir=o(` class
method.`),edr=l(),_y=a("p"),odr=o("This class cannot be instantiated directly using "),R1e=a("code"),rdr=o("__init__()"),tdr=o(" (throws an error)."),adr=l(),wt=a("div"),F(uy.$$.fragment),ndr=l(),P1e=a("p"),sdr=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),ldr=l(),jd=a("p"),idr=o(`Note:
Loading a model from its configuration file does `),B1e=a("strong"),ddr=o("not"),cdr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wW=a("a"),fdr=o("from_pretrained()"),mdr=o(" to load the model weights."),gdr=l(),F(JT.$$.fragment),hdr=l(),bo=a("div"),F(by.$$.fragment),pdr=l(),I1e=a("p"),_dr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),udr=l(),Ua=a("p"),bdr=o("The model class to instantiate is selected based on the "),N1e=a("code"),vdr=o("model_type"),Fdr=o(` property of the config object (either
passed as an argument or loaded from `),q1e=a("code"),Tdr=o("pretrained_model_name_or_path"),Mdr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j1e=a("code"),Edr=o("pretrained_model_name_or_path"),Cdr=o(":"),wdr=l(),Ja=a("ul"),YT=a("li"),D1e=a("strong"),Adr=o("beit"),Ldr=o(" \u2014 "),AW=a("a"),ydr=o("BeitForSemanticSegmentation"),xdr=o(" (BEiT model)"),$dr=l(),KT=a("li"),G1e=a("strong"),kdr=o("data2vec-vision"),Sdr=o(" \u2014 "),LW=a("a"),Rdr=o("Data2VecVisionForSemanticSegmentation"),Pdr=o(" (Data2VecVision model)"),Bdr=l(),ZT=a("li"),O1e=a("strong"),Idr=o("dpt"),Ndr=o(" \u2014 "),yW=a("a"),qdr=o("DPTForSemanticSegmentation"),jdr=o(" (DPT model)"),Ddr=l(),e7=a("li"),V1e=a("strong"),Gdr=o("segformer"),Odr=o(" \u2014 "),xW=a("a"),Vdr=o("SegformerForSemanticSegmentation"),Xdr=o(" (SegFormer model)"),zdr=l(),o7=a("p"),Wdr=o("The model is set in evaluation mode by default using "),X1e=a("code"),Qdr=o("model.eval()"),Hdr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),z1e=a("code"),Udr=o("model.train()"),Jdr=l(),F(r7.$$.fragment),gDe=l(),Dd=a("h2"),t7=a("a"),W1e=a("span"),F(vy.$$.fragment),Ydr=l(),Q1e=a("span"),Kdr=o("AutoModelForInstanceSegmentation"),hDe=l(),Jo=a("div"),F(Fy.$$.fragment),Zdr=l(),Gd=a("p"),ecr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),$W=a("a"),ocr=o("from_pretrained()"),rcr=o(" class method or the "),kW=a("a"),tcr=o("from_config()"),acr=o(` class
method.`),ncr=l(),Ty=a("p"),scr=o("This class cannot be instantiated directly using "),H1e=a("code"),lcr=o("__init__()"),icr=o(" (throws an error)."),dcr=l(),At=a("div"),F(My.$$.fragment),ccr=l(),U1e=a("p"),fcr=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),mcr=l(),Od=a("p"),gcr=o(`Note:
Loading a model from its configuration file does `),J1e=a("strong"),hcr=o("not"),pcr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SW=a("a"),_cr=o("from_pretrained()"),ucr=o(" to load the model weights."),bcr=l(),F(a7.$$.fragment),vcr=l(),vo=a("div"),F(Ey.$$.fragment),Fcr=l(),Y1e=a("p"),Tcr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Mcr=l(),Ya=a("p"),Ecr=o("The model class to instantiate is selected based on the "),K1e=a("code"),Ccr=o("model_type"),wcr=o(` property of the config object (either
passed as an argument or loaded from `),Z1e=a("code"),Acr=o("pretrained_model_name_or_path"),Lcr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ebe=a("code"),ycr=o("pretrained_model_name_or_path"),xcr=o(":"),$cr=l(),obe=a("ul"),n7=a("li"),rbe=a("strong"),kcr=o("maskformer"),Scr=o(" \u2014 "),RW=a("a"),Rcr=o("MaskFormerForInstanceSegmentation"),Pcr=o(" (MaskFormer model)"),Bcr=l(),s7=a("p"),Icr=o("The model is set in evaluation mode by default using "),tbe=a("code"),Ncr=o("model.eval()"),qcr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),abe=a("code"),jcr=o("model.train()"),Dcr=l(),F(l7.$$.fragment),pDe=l(),Vd=a("h2"),i7=a("a"),nbe=a("span"),F(Cy.$$.fragment),Gcr=l(),sbe=a("span"),Ocr=o("TFAutoModel"),_De=l(),Yo=a("div"),F(wy.$$.fragment),Vcr=l(),Xd=a("p"),Xcr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),PW=a("a"),zcr=o("from_pretrained()"),Wcr=o(" class method or the "),BW=a("a"),Qcr=o("from_config()"),Hcr=o(` class
method.`),Ucr=l(),Ay=a("p"),Jcr=o("This class cannot be instantiated directly using "),lbe=a("code"),Ycr=o("__init__()"),Kcr=o(" (throws an error)."),Zcr=l(),Lt=a("div"),F(Ly.$$.fragment),efr=l(),ibe=a("p"),ofr=o("Instantiates one of the base model classes of the library from a configuration."),rfr=l(),zd=a("p"),tfr=o(`Note:
Loading a model from its configuration file does `),dbe=a("strong"),afr=o("not"),nfr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IW=a("a"),sfr=o("from_pretrained()"),lfr=o(" to load the model weights."),ifr=l(),F(d7.$$.fragment),dfr=l(),wr=a("div"),F(yy.$$.fragment),cfr=l(),cbe=a("p"),ffr=o("Instantiate one of the base model classes of the library from a pretrained model."),mfr=l(),Ka=a("p"),gfr=o("The model class to instantiate is selected based on the "),fbe=a("code"),hfr=o("model_type"),pfr=o(` property of the config object (either
passed as an argument or loaded from `),mbe=a("code"),_fr=o("pretrained_model_name_or_path"),ufr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gbe=a("code"),bfr=o("pretrained_model_name_or_path"),vfr=o(":"),Ffr=l(),q=a("ul"),c7=a("li"),hbe=a("strong"),Tfr=o("albert"),Mfr=o(" \u2014 "),NW=a("a"),Efr=o("TFAlbertModel"),Cfr=o(" (ALBERT model)"),wfr=l(),f7=a("li"),pbe=a("strong"),Afr=o("bart"),Lfr=o(" \u2014 "),qW=a("a"),yfr=o("TFBartModel"),xfr=o(" (BART model)"),$fr=l(),m7=a("li"),_be=a("strong"),kfr=o("bert"),Sfr=o(" \u2014 "),jW=a("a"),Rfr=o("TFBertModel"),Pfr=o(" (BERT model)"),Bfr=l(),g7=a("li"),ube=a("strong"),Ifr=o("blenderbot"),Nfr=o(" \u2014 "),DW=a("a"),qfr=o("TFBlenderbotModel"),jfr=o(" (Blenderbot model)"),Dfr=l(),h7=a("li"),bbe=a("strong"),Gfr=o("blenderbot-small"),Ofr=o(" \u2014 "),GW=a("a"),Vfr=o("TFBlenderbotSmallModel"),Xfr=o(" (BlenderbotSmall model)"),zfr=l(),p7=a("li"),vbe=a("strong"),Wfr=o("camembert"),Qfr=o(" \u2014 "),OW=a("a"),Hfr=o("TFCamembertModel"),Ufr=o(" (CamemBERT model)"),Jfr=l(),_7=a("li"),Fbe=a("strong"),Yfr=o("clip"),Kfr=o(" \u2014 "),VW=a("a"),Zfr=o("TFCLIPModel"),emr=o(" (CLIP model)"),omr=l(),u7=a("li"),Tbe=a("strong"),rmr=o("convbert"),tmr=o(" \u2014 "),XW=a("a"),amr=o("TFConvBertModel"),nmr=o(" (ConvBERT model)"),smr=l(),b7=a("li"),Mbe=a("strong"),lmr=o("convnext"),imr=o(" \u2014 "),zW=a("a"),dmr=o("TFConvNextModel"),cmr=o(" (ConvNeXT model)"),fmr=l(),v7=a("li"),Ebe=a("strong"),mmr=o("ctrl"),gmr=o(" \u2014 "),WW=a("a"),hmr=o("TFCTRLModel"),pmr=o(" (CTRL model)"),_mr=l(),F7=a("li"),Cbe=a("strong"),umr=o("data2vec-vision"),bmr=o(" \u2014 "),QW=a("a"),vmr=o("TFData2VecVisionModel"),Fmr=o(" (Data2VecVision model)"),Tmr=l(),T7=a("li"),wbe=a("strong"),Mmr=o("deberta"),Emr=o(" \u2014 "),HW=a("a"),Cmr=o("TFDebertaModel"),wmr=o(" (DeBERTa model)"),Amr=l(),M7=a("li"),Abe=a("strong"),Lmr=o("deberta-v2"),ymr=o(" \u2014 "),UW=a("a"),xmr=o("TFDebertaV2Model"),$mr=o(" (DeBERTa-v2 model)"),kmr=l(),E7=a("li"),Lbe=a("strong"),Smr=o("distilbert"),Rmr=o(" \u2014 "),JW=a("a"),Pmr=o("TFDistilBertModel"),Bmr=o(" (DistilBERT model)"),Imr=l(),C7=a("li"),ybe=a("strong"),Nmr=o("dpr"),qmr=o(" \u2014 "),YW=a("a"),jmr=o("TFDPRQuestionEncoder"),Dmr=o(" (DPR model)"),Gmr=l(),w7=a("li"),xbe=a("strong"),Omr=o("electra"),Vmr=o(" \u2014 "),KW=a("a"),Xmr=o("TFElectraModel"),zmr=o(" (ELECTRA model)"),Wmr=l(),A7=a("li"),$be=a("strong"),Qmr=o("flaubert"),Hmr=o(" \u2014 "),ZW=a("a"),Umr=o("TFFlaubertModel"),Jmr=o(" (FlauBERT model)"),Ymr=l(),qs=a("li"),kbe=a("strong"),Kmr=o("funnel"),Zmr=o(" \u2014 "),eQ=a("a"),egr=o("TFFunnelModel"),ogr=o(" or "),oQ=a("a"),rgr=o("TFFunnelBaseModel"),tgr=o(" (Funnel Transformer model)"),agr=l(),L7=a("li"),Sbe=a("strong"),ngr=o("gpt2"),sgr=o(" \u2014 "),rQ=a("a"),lgr=o("TFGPT2Model"),igr=o(" (OpenAI GPT-2 model)"),dgr=l(),y7=a("li"),Rbe=a("strong"),cgr=o("gptj"),fgr=o(" \u2014 "),tQ=a("a"),mgr=o("TFGPTJModel"),ggr=o(" (GPT-J model)"),hgr=l(),x7=a("li"),Pbe=a("strong"),pgr=o("hubert"),_gr=o(" \u2014 "),aQ=a("a"),ugr=o("TFHubertModel"),bgr=o(" (Hubert model)"),vgr=l(),$7=a("li"),Bbe=a("strong"),Fgr=o("layoutlm"),Tgr=o(" \u2014 "),nQ=a("a"),Mgr=o("TFLayoutLMModel"),Egr=o(" (LayoutLM model)"),Cgr=l(),k7=a("li"),Ibe=a("strong"),wgr=o("led"),Agr=o(" \u2014 "),sQ=a("a"),Lgr=o("TFLEDModel"),ygr=o(" (LED model)"),xgr=l(),S7=a("li"),Nbe=a("strong"),$gr=o("longformer"),kgr=o(" \u2014 "),lQ=a("a"),Sgr=o("TFLongformerModel"),Rgr=o(" (Longformer model)"),Pgr=l(),R7=a("li"),qbe=a("strong"),Bgr=o("lxmert"),Igr=o(" \u2014 "),iQ=a("a"),Ngr=o("TFLxmertModel"),qgr=o(" (LXMERT model)"),jgr=l(),P7=a("li"),jbe=a("strong"),Dgr=o("marian"),Ggr=o(" \u2014 "),dQ=a("a"),Ogr=o("TFMarianModel"),Vgr=o(" (Marian model)"),Xgr=l(),B7=a("li"),Dbe=a("strong"),zgr=o("mbart"),Wgr=o(" \u2014 "),cQ=a("a"),Qgr=o("TFMBartModel"),Hgr=o(" (mBART model)"),Ugr=l(),I7=a("li"),Gbe=a("strong"),Jgr=o("mobilebert"),Ygr=o(" \u2014 "),fQ=a("a"),Kgr=o("TFMobileBertModel"),Zgr=o(" (MobileBERT model)"),ehr=l(),N7=a("li"),Obe=a("strong"),ohr=o("mpnet"),rhr=o(" \u2014 "),mQ=a("a"),thr=o("TFMPNetModel"),ahr=o(" (MPNet model)"),nhr=l(),q7=a("li"),Vbe=a("strong"),shr=o("mt5"),lhr=o(" \u2014 "),gQ=a("a"),ihr=o("TFMT5Model"),dhr=o(" (MT5 model)"),chr=l(),j7=a("li"),Xbe=a("strong"),fhr=o("openai-gpt"),mhr=o(" \u2014 "),hQ=a("a"),ghr=o("TFOpenAIGPTModel"),hhr=o(" (OpenAI GPT model)"),phr=l(),D7=a("li"),zbe=a("strong"),_hr=o("opt"),uhr=o(" \u2014 "),pQ=a("a"),bhr=o("TFOPTModel"),vhr=o(" (OPT model)"),Fhr=l(),G7=a("li"),Wbe=a("strong"),Thr=o("pegasus"),Mhr=o(" \u2014 "),_Q=a("a"),Ehr=o("TFPegasusModel"),Chr=o(" (Pegasus model)"),whr=l(),O7=a("li"),Qbe=a("strong"),Ahr=o("rembert"),Lhr=o(" \u2014 "),uQ=a("a"),yhr=o("TFRemBertModel"),xhr=o(" (RemBERT model)"),$hr=l(),V7=a("li"),Hbe=a("strong"),khr=o("roberta"),Shr=o(" \u2014 "),bQ=a("a"),Rhr=o("TFRobertaModel"),Phr=o(" (RoBERTa model)"),Bhr=l(),X7=a("li"),Ube=a("strong"),Ihr=o("roformer"),Nhr=o(" \u2014 "),vQ=a("a"),qhr=o("TFRoFormerModel"),jhr=o(" (RoFormer model)"),Dhr=l(),z7=a("li"),Jbe=a("strong"),Ghr=o("speech_to_text"),Ohr=o(" \u2014 "),FQ=a("a"),Vhr=o("TFSpeech2TextModel"),Xhr=o(" (Speech2Text model)"),zhr=l(),W7=a("li"),Ybe=a("strong"),Whr=o("swin"),Qhr=o(" \u2014 "),TQ=a("a"),Hhr=o("TFSwinModel"),Uhr=o(" (Swin Transformer model)"),Jhr=l(),Q7=a("li"),Kbe=a("strong"),Yhr=o("t5"),Khr=o(" \u2014 "),MQ=a("a"),Zhr=o("TFT5Model"),epr=o(" (T5 model)"),opr=l(),H7=a("li"),Zbe=a("strong"),rpr=o("tapas"),tpr=o(" \u2014 "),EQ=a("a"),apr=o("TFTapasModel"),npr=o(" (TAPAS model)"),spr=l(),U7=a("li"),eve=a("strong"),lpr=o("transfo-xl"),ipr=o(" \u2014 "),CQ=a("a"),dpr=o("TFTransfoXLModel"),cpr=o(" (Transformer-XL model)"),fpr=l(),J7=a("li"),ove=a("strong"),mpr=o("vit"),gpr=o(" \u2014 "),wQ=a("a"),hpr=o("TFViTModel"),ppr=o(" (ViT model)"),_pr=l(),Y7=a("li"),rve=a("strong"),upr=o("vit_mae"),bpr=o(" \u2014 "),AQ=a("a"),vpr=o("TFViTMAEModel"),Fpr=o(" (ViTMAE model)"),Tpr=l(),K7=a("li"),tve=a("strong"),Mpr=o("wav2vec2"),Epr=o(" \u2014 "),LQ=a("a"),Cpr=o("TFWav2Vec2Model"),wpr=o(" (Wav2Vec2 model)"),Apr=l(),Z7=a("li"),ave=a("strong"),Lpr=o("xlm"),ypr=o(" \u2014 "),yQ=a("a"),xpr=o("TFXLMModel"),$pr=o(" (XLM model)"),kpr=l(),e9=a("li"),nve=a("strong"),Spr=o("xlm-roberta"),Rpr=o(" \u2014 "),xQ=a("a"),Ppr=o("TFXLMRobertaModel"),Bpr=o(" (XLM-RoBERTa model)"),Ipr=l(),o9=a("li"),sve=a("strong"),Npr=o("xlnet"),qpr=o(" \u2014 "),$Q=a("a"),jpr=o("TFXLNetModel"),Dpr=o(" (XLNet model)"),Gpr=l(),F(r9.$$.fragment),uDe=l(),Wd=a("h2"),t9=a("a"),lve=a("span"),F(xy.$$.fragment),Opr=l(),ive=a("span"),Vpr=o("TFAutoModelForPreTraining"),bDe=l(),Ko=a("div"),F($y.$$.fragment),Xpr=l(),Qd=a("p"),zpr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),kQ=a("a"),Wpr=o("from_pretrained()"),Qpr=o(" class method or the "),SQ=a("a"),Hpr=o("from_config()"),Upr=o(` class
method.`),Jpr=l(),ky=a("p"),Ypr=o("This class cannot be instantiated directly using "),dve=a("code"),Kpr=o("__init__()"),Zpr=o(" (throws an error)."),e_r=l(),yt=a("div"),F(Sy.$$.fragment),o_r=l(),cve=a("p"),r_r=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),t_r=l(),Hd=a("p"),a_r=o(`Note:
Loading a model from its configuration file does `),fve=a("strong"),n_r=o("not"),s_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RQ=a("a"),l_r=o("from_pretrained()"),i_r=o(" to load the model weights."),d_r=l(),F(a9.$$.fragment),c_r=l(),Ar=a("div"),F(Ry.$$.fragment),f_r=l(),mve=a("p"),m_r=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),g_r=l(),Za=a("p"),h_r=o("The model class to instantiate is selected based on the "),gve=a("code"),p_r=o("model_type"),__r=o(` property of the config object (either
passed as an argument or loaded from `),hve=a("code"),u_r=o("pretrained_model_name_or_path"),b_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pve=a("code"),v_r=o("pretrained_model_name_or_path"),F_r=o(":"),T_r=l(),se=a("ul"),n9=a("li"),_ve=a("strong"),M_r=o("albert"),E_r=o(" \u2014 "),PQ=a("a"),C_r=o("TFAlbertForPreTraining"),w_r=o(" (ALBERT model)"),A_r=l(),s9=a("li"),uve=a("strong"),L_r=o("bart"),y_r=o(" \u2014 "),BQ=a("a"),x_r=o("TFBartForConditionalGeneration"),$_r=o(" (BART model)"),k_r=l(),l9=a("li"),bve=a("strong"),S_r=o("bert"),R_r=o(" \u2014 "),IQ=a("a"),P_r=o("TFBertForPreTraining"),B_r=o(" (BERT model)"),I_r=l(),i9=a("li"),vve=a("strong"),N_r=o("camembert"),q_r=o(" \u2014 "),NQ=a("a"),j_r=o("TFCamembertForMaskedLM"),D_r=o(" (CamemBERT model)"),G_r=l(),d9=a("li"),Fve=a("strong"),O_r=o("ctrl"),V_r=o(" \u2014 "),qQ=a("a"),X_r=o("TFCTRLLMHeadModel"),z_r=o(" (CTRL model)"),W_r=l(),c9=a("li"),Tve=a("strong"),Q_r=o("distilbert"),H_r=o(" \u2014 "),jQ=a("a"),U_r=o("TFDistilBertForMaskedLM"),J_r=o(" (DistilBERT model)"),Y_r=l(),f9=a("li"),Mve=a("strong"),K_r=o("electra"),Z_r=o(" \u2014 "),DQ=a("a"),eur=o("TFElectraForPreTraining"),our=o(" (ELECTRA model)"),rur=l(),m9=a("li"),Eve=a("strong"),tur=o("flaubert"),aur=o(" \u2014 "),GQ=a("a"),nur=o("TFFlaubertWithLMHeadModel"),sur=o(" (FlauBERT model)"),lur=l(),g9=a("li"),Cve=a("strong"),iur=o("funnel"),dur=o(" \u2014 "),OQ=a("a"),cur=o("TFFunnelForPreTraining"),fur=o(" (Funnel Transformer model)"),mur=l(),h9=a("li"),wve=a("strong"),gur=o("gpt2"),hur=o(" \u2014 "),VQ=a("a"),pur=o("TFGPT2LMHeadModel"),_ur=o(" (OpenAI GPT-2 model)"),uur=l(),p9=a("li"),Ave=a("strong"),bur=o("layoutlm"),vur=o(" \u2014 "),XQ=a("a"),Fur=o("TFLayoutLMForMaskedLM"),Tur=o(" (LayoutLM model)"),Mur=l(),_9=a("li"),Lve=a("strong"),Eur=o("lxmert"),Cur=o(" \u2014 "),zQ=a("a"),wur=o("TFLxmertForPreTraining"),Aur=o(" (LXMERT model)"),Lur=l(),u9=a("li"),yve=a("strong"),yur=o("mobilebert"),xur=o(" \u2014 "),WQ=a("a"),$ur=o("TFMobileBertForPreTraining"),kur=o(" (MobileBERT model)"),Sur=l(),b9=a("li"),xve=a("strong"),Rur=o("mpnet"),Pur=o(" \u2014 "),QQ=a("a"),Bur=o("TFMPNetForMaskedLM"),Iur=o(" (MPNet model)"),Nur=l(),v9=a("li"),$ve=a("strong"),qur=o("openai-gpt"),jur=o(" \u2014 "),HQ=a("a"),Dur=o("TFOpenAIGPTLMHeadModel"),Gur=o(" (OpenAI GPT model)"),Our=l(),F9=a("li"),kve=a("strong"),Vur=o("roberta"),Xur=o(" \u2014 "),UQ=a("a"),zur=o("TFRobertaForMaskedLM"),Wur=o(" (RoBERTa model)"),Qur=l(),T9=a("li"),Sve=a("strong"),Hur=o("t5"),Uur=o(" \u2014 "),JQ=a("a"),Jur=o("TFT5ForConditionalGeneration"),Yur=o(" (T5 model)"),Kur=l(),M9=a("li"),Rve=a("strong"),Zur=o("tapas"),e2r=o(" \u2014 "),YQ=a("a"),o2r=o("TFTapasForMaskedLM"),r2r=o(" (TAPAS model)"),t2r=l(),E9=a("li"),Pve=a("strong"),a2r=o("transfo-xl"),n2r=o(" \u2014 "),KQ=a("a"),s2r=o("TFTransfoXLLMHeadModel"),l2r=o(" (Transformer-XL model)"),i2r=l(),C9=a("li"),Bve=a("strong"),d2r=o("vit_mae"),c2r=o(" \u2014 "),ZQ=a("a"),f2r=o("TFViTMAEForPreTraining"),m2r=o(" (ViTMAE model)"),g2r=l(),w9=a("li"),Ive=a("strong"),h2r=o("xlm"),p2r=o(" \u2014 "),eH=a("a"),_2r=o("TFXLMWithLMHeadModel"),u2r=o(" (XLM model)"),b2r=l(),A9=a("li"),Nve=a("strong"),v2r=o("xlm-roberta"),F2r=o(" \u2014 "),oH=a("a"),T2r=o("TFXLMRobertaForMaskedLM"),M2r=o(" (XLM-RoBERTa model)"),E2r=l(),L9=a("li"),qve=a("strong"),C2r=o("xlnet"),w2r=o(" \u2014 "),rH=a("a"),A2r=o("TFXLNetLMHeadModel"),L2r=o(" (XLNet model)"),y2r=l(),F(y9.$$.fragment),vDe=l(),Ud=a("h2"),x9=a("a"),jve=a("span"),F(Py.$$.fragment),x2r=l(),Dve=a("span"),$2r=o("TFAutoModelForCausalLM"),FDe=l(),Zo=a("div"),F(By.$$.fragment),k2r=l(),Jd=a("p"),S2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),tH=a("a"),R2r=o("from_pretrained()"),P2r=o(" class method or the "),aH=a("a"),B2r=o("from_config()"),I2r=o(` class
method.`),N2r=l(),Iy=a("p"),q2r=o("This class cannot be instantiated directly using "),Gve=a("code"),j2r=o("__init__()"),D2r=o(" (throws an error)."),G2r=l(),xt=a("div"),F(Ny.$$.fragment),O2r=l(),Ove=a("p"),V2r=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),X2r=l(),Yd=a("p"),z2r=o(`Note:
Loading a model from its configuration file does `),Vve=a("strong"),W2r=o("not"),Q2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nH=a("a"),H2r=o("from_pretrained()"),U2r=o(" to load the model weights."),J2r=l(),F($9.$$.fragment),Y2r=l(),Lr=a("div"),F(qy.$$.fragment),K2r=l(),Xve=a("p"),Z2r=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),e1r=l(),en=a("p"),o1r=o("The model class to instantiate is selected based on the "),zve=a("code"),r1r=o("model_type"),t1r=o(` property of the config object (either
passed as an argument or loaded from `),Wve=a("code"),a1r=o("pretrained_model_name_or_path"),n1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qve=a("code"),s1r=o("pretrained_model_name_or_path"),l1r=o(":"),i1r=l(),Me=a("ul"),k9=a("li"),Hve=a("strong"),d1r=o("bert"),c1r=o(" \u2014 "),sH=a("a"),f1r=o("TFBertLMHeadModel"),m1r=o(" (BERT model)"),g1r=l(),S9=a("li"),Uve=a("strong"),h1r=o("camembert"),p1r=o(" \u2014 "),lH=a("a"),_1r=o("TFCamembertForCausalLM"),u1r=o(" (CamemBERT model)"),b1r=l(),R9=a("li"),Jve=a("strong"),v1r=o("ctrl"),F1r=o(" \u2014 "),iH=a("a"),T1r=o("TFCTRLLMHeadModel"),M1r=o(" (CTRL model)"),E1r=l(),P9=a("li"),Yve=a("strong"),C1r=o("gpt2"),w1r=o(" \u2014 "),dH=a("a"),A1r=o("TFGPT2LMHeadModel"),L1r=o(" (OpenAI GPT-2 model)"),y1r=l(),B9=a("li"),Kve=a("strong"),x1r=o("gptj"),$1r=o(" \u2014 "),cH=a("a"),k1r=o("TFGPTJForCausalLM"),S1r=o(" (GPT-J model)"),R1r=l(),I9=a("li"),Zve=a("strong"),P1r=o("openai-gpt"),B1r=o(" \u2014 "),fH=a("a"),I1r=o("TFOpenAIGPTLMHeadModel"),N1r=o(" (OpenAI GPT model)"),q1r=l(),N9=a("li"),eFe=a("strong"),j1r=o("opt"),D1r=o(" \u2014 "),mH=a("a"),G1r=o("TFOPTForCausalLM"),O1r=o(" (OPT model)"),V1r=l(),q9=a("li"),oFe=a("strong"),X1r=o("rembert"),z1r=o(" \u2014 "),gH=a("a"),W1r=o("TFRemBertForCausalLM"),Q1r=o(" (RemBERT model)"),H1r=l(),j9=a("li"),rFe=a("strong"),U1r=o("roberta"),J1r=o(" \u2014 "),hH=a("a"),Y1r=o("TFRobertaForCausalLM"),K1r=o(" (RoBERTa model)"),Z1r=l(),D9=a("li"),tFe=a("strong"),ebr=o("roformer"),obr=o(" \u2014 "),pH=a("a"),rbr=o("TFRoFormerForCausalLM"),tbr=o(" (RoFormer model)"),abr=l(),G9=a("li"),aFe=a("strong"),nbr=o("transfo-xl"),sbr=o(" \u2014 "),_H=a("a"),lbr=o("TFTransfoXLLMHeadModel"),ibr=o(" (Transformer-XL model)"),dbr=l(),O9=a("li"),nFe=a("strong"),cbr=o("xlm"),fbr=o(" \u2014 "),uH=a("a"),mbr=o("TFXLMWithLMHeadModel"),gbr=o(" (XLM model)"),hbr=l(),V9=a("li"),sFe=a("strong"),pbr=o("xlnet"),_br=o(" \u2014 "),bH=a("a"),ubr=o("TFXLNetLMHeadModel"),bbr=o(" (XLNet model)"),vbr=l(),F(X9.$$.fragment),TDe=l(),Kd=a("h2"),z9=a("a"),lFe=a("span"),F(jy.$$.fragment),Fbr=l(),iFe=a("span"),Tbr=o("TFAutoModelForImageClassification"),MDe=l(),er=a("div"),F(Dy.$$.fragment),Mbr=l(),Zd=a("p"),Ebr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),vH=a("a"),Cbr=o("from_pretrained()"),wbr=o(" class method or the "),FH=a("a"),Abr=o("from_config()"),Lbr=o(` class
method.`),ybr=l(),Gy=a("p"),xbr=o("This class cannot be instantiated directly using "),dFe=a("code"),$br=o("__init__()"),kbr=o(" (throws an error)."),Sbr=l(),$t=a("div"),F(Oy.$$.fragment),Rbr=l(),cFe=a("p"),Pbr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Bbr=l(),ec=a("p"),Ibr=o(`Note:
Loading a model from its configuration file does `),fFe=a("strong"),Nbr=o("not"),qbr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TH=a("a"),jbr=o("from_pretrained()"),Dbr=o(" to load the model weights."),Gbr=l(),F(W9.$$.fragment),Obr=l(),yr=a("div"),F(Vy.$$.fragment),Vbr=l(),mFe=a("p"),Xbr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),zbr=l(),on=a("p"),Wbr=o("The model class to instantiate is selected based on the "),gFe=a("code"),Qbr=o("model_type"),Hbr=o(` property of the config object (either
passed as an argument or loaded from `),hFe=a("code"),Ubr=o("pretrained_model_name_or_path"),Jbr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pFe=a("code"),Ybr=o("pretrained_model_name_or_path"),Kbr=o(":"),Zbr=l(),rn=a("ul"),Q9=a("li"),_Fe=a("strong"),evr=o("convnext"),ovr=o(" \u2014 "),MH=a("a"),rvr=o("TFConvNextForImageClassification"),tvr=o(" (ConvNeXT model)"),avr=l(),H9=a("li"),uFe=a("strong"),nvr=o("data2vec-vision"),svr=o(" \u2014 "),EH=a("a"),lvr=o("TFData2VecVisionForImageClassification"),ivr=o(" (Data2VecVision model)"),dvr=l(),U9=a("li"),bFe=a("strong"),cvr=o("swin"),fvr=o(" \u2014 "),CH=a("a"),mvr=o("TFSwinForImageClassification"),gvr=o(" (Swin Transformer model)"),hvr=l(),J9=a("li"),vFe=a("strong"),pvr=o("vit"),_vr=o(" \u2014 "),wH=a("a"),uvr=o("TFViTForImageClassification"),bvr=o(" (ViT model)"),vvr=l(),F(Y9.$$.fragment),EDe=l(),oc=a("h2"),K9=a("a"),FFe=a("span"),F(Xy.$$.fragment),Fvr=l(),TFe=a("span"),Tvr=o("TFAutoModelForMaskedLM"),CDe=l(),or=a("div"),F(zy.$$.fragment),Mvr=l(),rc=a("p"),Evr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),AH=a("a"),Cvr=o("from_pretrained()"),wvr=o(" class method or the "),LH=a("a"),Avr=o("from_config()"),Lvr=o(` class
method.`),yvr=l(),Wy=a("p"),xvr=o("This class cannot be instantiated directly using "),MFe=a("code"),$vr=o("__init__()"),kvr=o(" (throws an error)."),Svr=l(),kt=a("div"),F(Qy.$$.fragment),Rvr=l(),EFe=a("p"),Pvr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Bvr=l(),tc=a("p"),Ivr=o(`Note:
Loading a model from its configuration file does `),CFe=a("strong"),Nvr=o("not"),qvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yH=a("a"),jvr=o("from_pretrained()"),Dvr=o(" to load the model weights."),Gvr=l(),F(Z9.$$.fragment),Ovr=l(),xr=a("div"),F(Hy.$$.fragment),Vvr=l(),wFe=a("p"),Xvr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),zvr=l(),tn=a("p"),Wvr=o("The model class to instantiate is selected based on the "),AFe=a("code"),Qvr=o("model_type"),Hvr=o(` property of the config object (either
passed as an argument or loaded from `),LFe=a("code"),Uvr=o("pretrained_model_name_or_path"),Jvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yFe=a("code"),Yvr=o("pretrained_model_name_or_path"),Kvr=o(":"),Zvr=l(),ie=a("ul"),eM=a("li"),xFe=a("strong"),eFr=o("albert"),oFr=o(" \u2014 "),xH=a("a"),rFr=o("TFAlbertForMaskedLM"),tFr=o(" (ALBERT model)"),aFr=l(),oM=a("li"),$Fe=a("strong"),nFr=o("bert"),sFr=o(" \u2014 "),$H=a("a"),lFr=o("TFBertForMaskedLM"),iFr=o(" (BERT model)"),dFr=l(),rM=a("li"),kFe=a("strong"),cFr=o("camembert"),fFr=o(" \u2014 "),kH=a("a"),mFr=o("TFCamembertForMaskedLM"),gFr=o(" (CamemBERT model)"),hFr=l(),tM=a("li"),SFe=a("strong"),pFr=o("convbert"),_Fr=o(" \u2014 "),SH=a("a"),uFr=o("TFConvBertForMaskedLM"),bFr=o(" (ConvBERT model)"),vFr=l(),aM=a("li"),RFe=a("strong"),FFr=o("deberta"),TFr=o(" \u2014 "),RH=a("a"),MFr=o("TFDebertaForMaskedLM"),EFr=o(" (DeBERTa model)"),CFr=l(),nM=a("li"),PFe=a("strong"),wFr=o("deberta-v2"),AFr=o(" \u2014 "),PH=a("a"),LFr=o("TFDebertaV2ForMaskedLM"),yFr=o(" (DeBERTa-v2 model)"),xFr=l(),sM=a("li"),BFe=a("strong"),$Fr=o("distilbert"),kFr=o(" \u2014 "),BH=a("a"),SFr=o("TFDistilBertForMaskedLM"),RFr=o(" (DistilBERT model)"),PFr=l(),lM=a("li"),IFe=a("strong"),BFr=o("electra"),IFr=o(" \u2014 "),IH=a("a"),NFr=o("TFElectraForMaskedLM"),qFr=o(" (ELECTRA model)"),jFr=l(),iM=a("li"),NFe=a("strong"),DFr=o("flaubert"),GFr=o(" \u2014 "),NH=a("a"),OFr=o("TFFlaubertWithLMHeadModel"),VFr=o(" (FlauBERT model)"),XFr=l(),dM=a("li"),qFe=a("strong"),zFr=o("funnel"),WFr=o(" \u2014 "),qH=a("a"),QFr=o("TFFunnelForMaskedLM"),HFr=o(" (Funnel Transformer model)"),UFr=l(),cM=a("li"),jFe=a("strong"),JFr=o("layoutlm"),YFr=o(" \u2014 "),jH=a("a"),KFr=o("TFLayoutLMForMaskedLM"),ZFr=o(" (LayoutLM model)"),e6r=l(),fM=a("li"),DFe=a("strong"),o6r=o("longformer"),r6r=o(" \u2014 "),DH=a("a"),t6r=o("TFLongformerForMaskedLM"),a6r=o(" (Longformer model)"),n6r=l(),mM=a("li"),GFe=a("strong"),s6r=o("mobilebert"),l6r=o(" \u2014 "),GH=a("a"),i6r=o("TFMobileBertForMaskedLM"),d6r=o(" (MobileBERT model)"),c6r=l(),gM=a("li"),OFe=a("strong"),f6r=o("mpnet"),m6r=o(" \u2014 "),OH=a("a"),g6r=o("TFMPNetForMaskedLM"),h6r=o(" (MPNet model)"),p6r=l(),hM=a("li"),VFe=a("strong"),_6r=o("rembert"),u6r=o(" \u2014 "),VH=a("a"),b6r=o("TFRemBertForMaskedLM"),v6r=o(" (RemBERT model)"),F6r=l(),pM=a("li"),XFe=a("strong"),T6r=o("roberta"),M6r=o(" \u2014 "),XH=a("a"),E6r=o("TFRobertaForMaskedLM"),C6r=o(" (RoBERTa model)"),w6r=l(),_M=a("li"),zFe=a("strong"),A6r=o("roformer"),L6r=o(" \u2014 "),zH=a("a"),y6r=o("TFRoFormerForMaskedLM"),x6r=o(" (RoFormer model)"),$6r=l(),uM=a("li"),WFe=a("strong"),k6r=o("tapas"),S6r=o(" \u2014 "),WH=a("a"),R6r=o("TFTapasForMaskedLM"),P6r=o(" (TAPAS model)"),B6r=l(),bM=a("li"),QFe=a("strong"),I6r=o("xlm"),N6r=o(" \u2014 "),QH=a("a"),q6r=o("TFXLMWithLMHeadModel"),j6r=o(" (XLM model)"),D6r=l(),vM=a("li"),HFe=a("strong"),G6r=o("xlm-roberta"),O6r=o(" \u2014 "),HH=a("a"),V6r=o("TFXLMRobertaForMaskedLM"),X6r=o(" (XLM-RoBERTa model)"),z6r=l(),F(FM.$$.fragment),wDe=l(),ac=a("h2"),TM=a("a"),UFe=a("span"),F(Uy.$$.fragment),W6r=l(),JFe=a("span"),Q6r=o("TFAutoModelForSeq2SeqLM"),ADe=l(),rr=a("div"),F(Jy.$$.fragment),H6r=l(),nc=a("p"),U6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),UH=a("a"),J6r=o("from_pretrained()"),Y6r=o(" class method or the "),JH=a("a"),K6r=o("from_config()"),Z6r=o(` class
method.`),eTr=l(),Yy=a("p"),oTr=o("This class cannot be instantiated directly using "),YFe=a("code"),rTr=o("__init__()"),tTr=o(" (throws an error)."),aTr=l(),St=a("div"),F(Ky.$$.fragment),nTr=l(),KFe=a("p"),sTr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),lTr=l(),sc=a("p"),iTr=o(`Note:
Loading a model from its configuration file does `),ZFe=a("strong"),dTr=o("not"),cTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YH=a("a"),fTr=o("from_pretrained()"),mTr=o(" to load the model weights."),gTr=l(),F(MM.$$.fragment),hTr=l(),$r=a("div"),F(Zy.$$.fragment),pTr=l(),e6e=a("p"),_Tr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),uTr=l(),an=a("p"),bTr=o("The model class to instantiate is selected based on the "),o6e=a("code"),vTr=o("model_type"),FTr=o(` property of the config object (either
passed as an argument or loaded from `),r6e=a("code"),TTr=o("pretrained_model_name_or_path"),MTr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t6e=a("code"),ETr=o("pretrained_model_name_or_path"),CTr=o(":"),wTr=l(),Le=a("ul"),EM=a("li"),a6e=a("strong"),ATr=o("bart"),LTr=o(" \u2014 "),KH=a("a"),yTr=o("TFBartForConditionalGeneration"),xTr=o(" (BART model)"),$Tr=l(),CM=a("li"),n6e=a("strong"),kTr=o("blenderbot"),STr=o(" \u2014 "),ZH=a("a"),RTr=o("TFBlenderbotForConditionalGeneration"),PTr=o(" (Blenderbot model)"),BTr=l(),wM=a("li"),s6e=a("strong"),ITr=o("blenderbot-small"),NTr=o(" \u2014 "),eU=a("a"),qTr=o("TFBlenderbotSmallForConditionalGeneration"),jTr=o(" (BlenderbotSmall model)"),DTr=l(),AM=a("li"),l6e=a("strong"),GTr=o("encoder-decoder"),OTr=o(" \u2014 "),oU=a("a"),VTr=o("TFEncoderDecoderModel"),XTr=o(" (Encoder decoder model)"),zTr=l(),LM=a("li"),i6e=a("strong"),WTr=o("led"),QTr=o(" \u2014 "),rU=a("a"),HTr=o("TFLEDForConditionalGeneration"),UTr=o(" (LED model)"),JTr=l(),yM=a("li"),d6e=a("strong"),YTr=o("marian"),KTr=o(" \u2014 "),tU=a("a"),ZTr=o("TFMarianMTModel"),e7r=o(" (Marian model)"),o7r=l(),xM=a("li"),c6e=a("strong"),r7r=o("mbart"),t7r=o(" \u2014 "),aU=a("a"),a7r=o("TFMBartForConditionalGeneration"),n7r=o(" (mBART model)"),s7r=l(),$M=a("li"),f6e=a("strong"),l7r=o("mt5"),i7r=o(" \u2014 "),nU=a("a"),d7r=o("TFMT5ForConditionalGeneration"),c7r=o(" (MT5 model)"),f7r=l(),kM=a("li"),m6e=a("strong"),m7r=o("pegasus"),g7r=o(" \u2014 "),sU=a("a"),h7r=o("TFPegasusForConditionalGeneration"),p7r=o(" (Pegasus model)"),_7r=l(),SM=a("li"),g6e=a("strong"),u7r=o("t5"),b7r=o(" \u2014 "),lU=a("a"),v7r=o("TFT5ForConditionalGeneration"),F7r=o(" (T5 model)"),T7r=l(),F(RM.$$.fragment),LDe=l(),lc=a("h2"),PM=a("a"),h6e=a("span"),F(e8.$$.fragment),M7r=l(),p6e=a("span"),E7r=o("TFAutoModelForSequenceClassification"),yDe=l(),tr=a("div"),F(o8.$$.fragment),C7r=l(),ic=a("p"),w7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),iU=a("a"),A7r=o("from_pretrained()"),L7r=o(" class method or the "),dU=a("a"),y7r=o("from_config()"),x7r=o(` class
method.`),$7r=l(),r8=a("p"),k7r=o("This class cannot be instantiated directly using "),_6e=a("code"),S7r=o("__init__()"),R7r=o(" (throws an error)."),P7r=l(),Rt=a("div"),F(t8.$$.fragment),B7r=l(),u6e=a("p"),I7r=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),N7r=l(),dc=a("p"),q7r=o(`Note:
Loading a model from its configuration file does `),b6e=a("strong"),j7r=o("not"),D7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cU=a("a"),G7r=o("from_pretrained()"),O7r=o(" to load the model weights."),V7r=l(),F(BM.$$.fragment),X7r=l(),kr=a("div"),F(a8.$$.fragment),z7r=l(),v6e=a("p"),W7r=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Q7r=l(),nn=a("p"),H7r=o("The model class to instantiate is selected based on the "),F6e=a("code"),U7r=o("model_type"),J7r=o(` property of the config object (either
passed as an argument or loaded from `),T6e=a("code"),Y7r=o("pretrained_model_name_or_path"),K7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M6e=a("code"),Z7r=o("pretrained_model_name_or_path"),e9r=o(":"),o9r=l(),re=a("ul"),IM=a("li"),E6e=a("strong"),r9r=o("albert"),t9r=o(" \u2014 "),fU=a("a"),a9r=o("TFAlbertForSequenceClassification"),n9r=o(" (ALBERT model)"),s9r=l(),NM=a("li"),C6e=a("strong"),l9r=o("bert"),i9r=o(" \u2014 "),mU=a("a"),d9r=o("TFBertForSequenceClassification"),c9r=o(" (BERT model)"),f9r=l(),qM=a("li"),w6e=a("strong"),m9r=o("camembert"),g9r=o(" \u2014 "),gU=a("a"),h9r=o("TFCamembertForSequenceClassification"),p9r=o(" (CamemBERT model)"),_9r=l(),jM=a("li"),A6e=a("strong"),u9r=o("convbert"),b9r=o(" \u2014 "),hU=a("a"),v9r=o("TFConvBertForSequenceClassification"),F9r=o(" (ConvBERT model)"),T9r=l(),DM=a("li"),L6e=a("strong"),M9r=o("ctrl"),E9r=o(" \u2014 "),pU=a("a"),C9r=o("TFCTRLForSequenceClassification"),w9r=o(" (CTRL model)"),A9r=l(),GM=a("li"),y6e=a("strong"),L9r=o("deberta"),y9r=o(" \u2014 "),_U=a("a"),x9r=o("TFDebertaForSequenceClassification"),$9r=o(" (DeBERTa model)"),k9r=l(),OM=a("li"),x6e=a("strong"),S9r=o("deberta-v2"),R9r=o(" \u2014 "),uU=a("a"),P9r=o("TFDebertaV2ForSequenceClassification"),B9r=o(" (DeBERTa-v2 model)"),I9r=l(),VM=a("li"),$6e=a("strong"),N9r=o("distilbert"),q9r=o(" \u2014 "),bU=a("a"),j9r=o("TFDistilBertForSequenceClassification"),D9r=o(" (DistilBERT model)"),G9r=l(),XM=a("li"),k6e=a("strong"),O9r=o("electra"),V9r=o(" \u2014 "),vU=a("a"),X9r=o("TFElectraForSequenceClassification"),z9r=o(" (ELECTRA model)"),W9r=l(),zM=a("li"),S6e=a("strong"),Q9r=o("flaubert"),H9r=o(" \u2014 "),FU=a("a"),U9r=o("TFFlaubertForSequenceClassification"),J9r=o(" (FlauBERT model)"),Y9r=l(),WM=a("li"),R6e=a("strong"),K9r=o("funnel"),Z9r=o(" \u2014 "),TU=a("a"),eMr=o("TFFunnelForSequenceClassification"),oMr=o(" (Funnel Transformer model)"),rMr=l(),QM=a("li"),P6e=a("strong"),tMr=o("gpt2"),aMr=o(" \u2014 "),MU=a("a"),nMr=o("TFGPT2ForSequenceClassification"),sMr=o(" (OpenAI GPT-2 model)"),lMr=l(),HM=a("li"),B6e=a("strong"),iMr=o("gptj"),dMr=o(" \u2014 "),EU=a("a"),cMr=o("TFGPTJForSequenceClassification"),fMr=o(" (GPT-J model)"),mMr=l(),UM=a("li"),I6e=a("strong"),gMr=o("layoutlm"),hMr=o(" \u2014 "),CU=a("a"),pMr=o("TFLayoutLMForSequenceClassification"),_Mr=o(" (LayoutLM model)"),uMr=l(),JM=a("li"),N6e=a("strong"),bMr=o("longformer"),vMr=o(" \u2014 "),wU=a("a"),FMr=o("TFLongformerForSequenceClassification"),TMr=o(" (Longformer model)"),MMr=l(),YM=a("li"),q6e=a("strong"),EMr=o("mobilebert"),CMr=o(" \u2014 "),AU=a("a"),wMr=o("TFMobileBertForSequenceClassification"),AMr=o(" (MobileBERT model)"),LMr=l(),KM=a("li"),j6e=a("strong"),yMr=o("mpnet"),xMr=o(" \u2014 "),LU=a("a"),$Mr=o("TFMPNetForSequenceClassification"),kMr=o(" (MPNet model)"),SMr=l(),ZM=a("li"),D6e=a("strong"),RMr=o("openai-gpt"),PMr=o(" \u2014 "),yU=a("a"),BMr=o("TFOpenAIGPTForSequenceClassification"),IMr=o(" (OpenAI GPT model)"),NMr=l(),e4=a("li"),G6e=a("strong"),qMr=o("rembert"),jMr=o(" \u2014 "),xU=a("a"),DMr=o("TFRemBertForSequenceClassification"),GMr=o(" (RemBERT model)"),OMr=l(),o4=a("li"),O6e=a("strong"),VMr=o("roberta"),XMr=o(" \u2014 "),$U=a("a"),zMr=o("TFRobertaForSequenceClassification"),WMr=o(" (RoBERTa model)"),QMr=l(),r4=a("li"),V6e=a("strong"),HMr=o("roformer"),UMr=o(" \u2014 "),kU=a("a"),JMr=o("TFRoFormerForSequenceClassification"),YMr=o(" (RoFormer model)"),KMr=l(),t4=a("li"),X6e=a("strong"),ZMr=o("tapas"),e4r=o(" \u2014 "),SU=a("a"),o4r=o("TFTapasForSequenceClassification"),r4r=o(" (TAPAS model)"),t4r=l(),a4=a("li"),z6e=a("strong"),a4r=o("transfo-xl"),n4r=o(" \u2014 "),RU=a("a"),s4r=o("TFTransfoXLForSequenceClassification"),l4r=o(" (Transformer-XL model)"),i4r=l(),n4=a("li"),W6e=a("strong"),d4r=o("xlm"),c4r=o(" \u2014 "),PU=a("a"),f4r=o("TFXLMForSequenceClassification"),m4r=o(" (XLM model)"),g4r=l(),s4=a("li"),Q6e=a("strong"),h4r=o("xlm-roberta"),p4r=o(" \u2014 "),BU=a("a"),_4r=o("TFXLMRobertaForSequenceClassification"),u4r=o(" (XLM-RoBERTa model)"),b4r=l(),l4=a("li"),H6e=a("strong"),v4r=o("xlnet"),F4r=o(" \u2014 "),IU=a("a"),T4r=o("TFXLNetForSequenceClassification"),M4r=o(" (XLNet model)"),E4r=l(),F(i4.$$.fragment),xDe=l(),cc=a("h2"),d4=a("a"),U6e=a("span"),F(n8.$$.fragment),C4r=l(),J6e=a("span"),w4r=o("TFAutoModelForMultipleChoice"),$De=l(),ar=a("div"),F(s8.$$.fragment),A4r=l(),fc=a("p"),L4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),NU=a("a"),y4r=o("from_pretrained()"),x4r=o(" class method or the "),qU=a("a"),$4r=o("from_config()"),k4r=o(` class
method.`),S4r=l(),l8=a("p"),R4r=o("This class cannot be instantiated directly using "),Y6e=a("code"),P4r=o("__init__()"),B4r=o(" (throws an error)."),I4r=l(),Pt=a("div"),F(i8.$$.fragment),N4r=l(),K6e=a("p"),q4r=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),j4r=l(),mc=a("p"),D4r=o(`Note:
Loading a model from its configuration file does `),Z6e=a("strong"),G4r=o("not"),O4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jU=a("a"),V4r=o("from_pretrained()"),X4r=o(" to load the model weights."),z4r=l(),F(c4.$$.fragment),W4r=l(),Sr=a("div"),F(d8.$$.fragment),Q4r=l(),eTe=a("p"),H4r=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),U4r=l(),sn=a("p"),J4r=o("The model class to instantiate is selected based on the "),oTe=a("code"),Y4r=o("model_type"),K4r=o(` property of the config object (either
passed as an argument or loaded from `),rTe=a("code"),Z4r=o("pretrained_model_name_or_path"),eEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tTe=a("code"),oEr=o("pretrained_model_name_or_path"),rEr=o(":"),tEr=l(),_e=a("ul"),f4=a("li"),aTe=a("strong"),aEr=o("albert"),nEr=o(" \u2014 "),DU=a("a"),sEr=o("TFAlbertForMultipleChoice"),lEr=o(" (ALBERT model)"),iEr=l(),m4=a("li"),nTe=a("strong"),dEr=o("bert"),cEr=o(" \u2014 "),GU=a("a"),fEr=o("TFBertForMultipleChoice"),mEr=o(" (BERT model)"),gEr=l(),g4=a("li"),sTe=a("strong"),hEr=o("camembert"),pEr=o(" \u2014 "),OU=a("a"),_Er=o("TFCamembertForMultipleChoice"),uEr=o(" (CamemBERT model)"),bEr=l(),h4=a("li"),lTe=a("strong"),vEr=o("convbert"),FEr=o(" \u2014 "),VU=a("a"),TEr=o("TFConvBertForMultipleChoice"),MEr=o(" (ConvBERT model)"),EEr=l(),p4=a("li"),iTe=a("strong"),CEr=o("distilbert"),wEr=o(" \u2014 "),XU=a("a"),AEr=o("TFDistilBertForMultipleChoice"),LEr=o(" (DistilBERT model)"),yEr=l(),_4=a("li"),dTe=a("strong"),xEr=o("electra"),$Er=o(" \u2014 "),zU=a("a"),kEr=o("TFElectraForMultipleChoice"),SEr=o(" (ELECTRA model)"),REr=l(),u4=a("li"),cTe=a("strong"),PEr=o("flaubert"),BEr=o(" \u2014 "),WU=a("a"),IEr=o("TFFlaubertForMultipleChoice"),NEr=o(" (FlauBERT model)"),qEr=l(),b4=a("li"),fTe=a("strong"),jEr=o("funnel"),DEr=o(" \u2014 "),QU=a("a"),GEr=o("TFFunnelForMultipleChoice"),OEr=o(" (Funnel Transformer model)"),VEr=l(),v4=a("li"),mTe=a("strong"),XEr=o("longformer"),zEr=o(" \u2014 "),HU=a("a"),WEr=o("TFLongformerForMultipleChoice"),QEr=o(" (Longformer model)"),HEr=l(),F4=a("li"),gTe=a("strong"),UEr=o("mobilebert"),JEr=o(" \u2014 "),UU=a("a"),YEr=o("TFMobileBertForMultipleChoice"),KEr=o(" (MobileBERT model)"),ZEr=l(),T4=a("li"),hTe=a("strong"),eCr=o("mpnet"),oCr=o(" \u2014 "),JU=a("a"),rCr=o("TFMPNetForMultipleChoice"),tCr=o(" (MPNet model)"),aCr=l(),M4=a("li"),pTe=a("strong"),nCr=o("rembert"),sCr=o(" \u2014 "),YU=a("a"),lCr=o("TFRemBertForMultipleChoice"),iCr=o(" (RemBERT model)"),dCr=l(),E4=a("li"),_Te=a("strong"),cCr=o("roberta"),fCr=o(" \u2014 "),KU=a("a"),mCr=o("TFRobertaForMultipleChoice"),gCr=o(" (RoBERTa model)"),hCr=l(),C4=a("li"),uTe=a("strong"),pCr=o("roformer"),_Cr=o(" \u2014 "),ZU=a("a"),uCr=o("TFRoFormerForMultipleChoice"),bCr=o(" (RoFormer model)"),vCr=l(),w4=a("li"),bTe=a("strong"),FCr=o("xlm"),TCr=o(" \u2014 "),eJ=a("a"),MCr=o("TFXLMForMultipleChoice"),ECr=o(" (XLM model)"),CCr=l(),A4=a("li"),vTe=a("strong"),wCr=o("xlm-roberta"),ACr=o(" \u2014 "),oJ=a("a"),LCr=o("TFXLMRobertaForMultipleChoice"),yCr=o(" (XLM-RoBERTa model)"),xCr=l(),L4=a("li"),FTe=a("strong"),$Cr=o("xlnet"),kCr=o(" \u2014 "),rJ=a("a"),SCr=o("TFXLNetForMultipleChoice"),RCr=o(" (XLNet model)"),PCr=l(),F(y4.$$.fragment),kDe=l(),gc=a("h2"),x4=a("a"),TTe=a("span"),F(c8.$$.fragment),BCr=l(),MTe=a("span"),ICr=o("TFAutoModelForNextSentencePrediction"),SDe=l(),nr=a("div"),F(f8.$$.fragment),NCr=l(),hc=a("p"),qCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),tJ=a("a"),jCr=o("from_pretrained()"),DCr=o(" class method or the "),aJ=a("a"),GCr=o("from_config()"),OCr=o(` class
method.`),VCr=l(),m8=a("p"),XCr=o("This class cannot be instantiated directly using "),ETe=a("code"),zCr=o("__init__()"),WCr=o(" (throws an error)."),QCr=l(),Bt=a("div"),F(g8.$$.fragment),HCr=l(),CTe=a("p"),UCr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),JCr=l(),pc=a("p"),YCr=o(`Note:
Loading a model from its configuration file does `),wTe=a("strong"),KCr=o("not"),ZCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nJ=a("a"),e5r=o("from_pretrained()"),o5r=o(" to load the model weights."),r5r=l(),F($4.$$.fragment),t5r=l(),Rr=a("div"),F(h8.$$.fragment),a5r=l(),ATe=a("p"),n5r=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),s5r=l(),ln=a("p"),l5r=o("The model class to instantiate is selected based on the "),LTe=a("code"),i5r=o("model_type"),d5r=o(` property of the config object (either
passed as an argument or loaded from `),yTe=a("code"),c5r=o("pretrained_model_name_or_path"),f5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xTe=a("code"),m5r=o("pretrained_model_name_or_path"),g5r=o(":"),h5r=l(),p8=a("ul"),k4=a("li"),$Te=a("strong"),p5r=o("bert"),_5r=o(" \u2014 "),sJ=a("a"),u5r=o("TFBertForNextSentencePrediction"),b5r=o(" (BERT model)"),v5r=l(),S4=a("li"),kTe=a("strong"),F5r=o("mobilebert"),T5r=o(" \u2014 "),lJ=a("a"),M5r=o("TFMobileBertForNextSentencePrediction"),E5r=o(" (MobileBERT model)"),C5r=l(),F(R4.$$.fragment),RDe=l(),_c=a("h2"),P4=a("a"),STe=a("span"),F(_8.$$.fragment),w5r=l(),RTe=a("span"),A5r=o("TFAutoModelForTableQuestionAnswering"),PDe=l(),sr=a("div"),F(u8.$$.fragment),L5r=l(),uc=a("p"),y5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),iJ=a("a"),x5r=o("from_pretrained()"),$5r=o(" class method or the "),dJ=a("a"),k5r=o("from_config()"),S5r=o(` class
method.`),R5r=l(),b8=a("p"),P5r=o("This class cannot be instantiated directly using "),PTe=a("code"),B5r=o("__init__()"),I5r=o(" (throws an error)."),N5r=l(),It=a("div"),F(v8.$$.fragment),q5r=l(),BTe=a("p"),j5r=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),D5r=l(),bc=a("p"),G5r=o(`Note:
Loading a model from its configuration file does `),ITe=a("strong"),O5r=o("not"),V5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cJ=a("a"),X5r=o("from_pretrained()"),z5r=o(" to load the model weights."),W5r=l(),F(B4.$$.fragment),Q5r=l(),Pr=a("div"),F(F8.$$.fragment),H5r=l(),NTe=a("p"),U5r=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),J5r=l(),dn=a("p"),Y5r=o("The model class to instantiate is selected based on the "),qTe=a("code"),K5r=o("model_type"),Z5r=o(` property of the config object (either
passed as an argument or loaded from `),jTe=a("code"),e3r=o("pretrained_model_name_or_path"),o3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),DTe=a("code"),r3r=o("pretrained_model_name_or_path"),t3r=o(":"),a3r=l(),GTe=a("ul"),I4=a("li"),OTe=a("strong"),n3r=o("tapas"),s3r=o(" \u2014 "),fJ=a("a"),l3r=o("TFTapasForQuestionAnswering"),i3r=o(" (TAPAS model)"),d3r=l(),F(N4.$$.fragment),BDe=l(),vc=a("h2"),q4=a("a"),VTe=a("span"),F(T8.$$.fragment),c3r=l(),XTe=a("span"),f3r=o("TFAutoModelForTokenClassification"),IDe=l(),lr=a("div"),F(M8.$$.fragment),m3r=l(),Fc=a("p"),g3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),mJ=a("a"),h3r=o("from_pretrained()"),p3r=o(" class method or the "),gJ=a("a"),_3r=o("from_config()"),u3r=o(` class
method.`),b3r=l(),E8=a("p"),v3r=o("This class cannot be instantiated directly using "),zTe=a("code"),F3r=o("__init__()"),T3r=o(" (throws an error)."),M3r=l(),Nt=a("div"),F(C8.$$.fragment),E3r=l(),WTe=a("p"),C3r=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),w3r=l(),Tc=a("p"),A3r=o(`Note:
Loading a model from its configuration file does `),QTe=a("strong"),L3r=o("not"),y3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hJ=a("a"),x3r=o("from_pretrained()"),$3r=o(" to load the model weights."),k3r=l(),F(j4.$$.fragment),S3r=l(),Br=a("div"),F(w8.$$.fragment),R3r=l(),HTe=a("p"),P3r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),B3r=l(),cn=a("p"),I3r=o("The model class to instantiate is selected based on the "),UTe=a("code"),N3r=o("model_type"),q3r=o(` property of the config object (either
passed as an argument or loaded from `),JTe=a("code"),j3r=o("pretrained_model_name_or_path"),D3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),YTe=a("code"),G3r=o("pretrained_model_name_or_path"),O3r=o(":"),V3r=l(),de=a("ul"),D4=a("li"),KTe=a("strong"),X3r=o("albert"),z3r=o(" \u2014 "),pJ=a("a"),W3r=o("TFAlbertForTokenClassification"),Q3r=o(" (ALBERT model)"),H3r=l(),G4=a("li"),ZTe=a("strong"),U3r=o("bert"),J3r=o(" \u2014 "),_J=a("a"),Y3r=o("TFBertForTokenClassification"),K3r=o(" (BERT model)"),Z3r=l(),O4=a("li"),e7e=a("strong"),e0r=o("camembert"),o0r=o(" \u2014 "),uJ=a("a"),r0r=o("TFCamembertForTokenClassification"),t0r=o(" (CamemBERT model)"),a0r=l(),V4=a("li"),o7e=a("strong"),n0r=o("convbert"),s0r=o(" \u2014 "),bJ=a("a"),l0r=o("TFConvBertForTokenClassification"),i0r=o(" (ConvBERT model)"),d0r=l(),X4=a("li"),r7e=a("strong"),c0r=o("deberta"),f0r=o(" \u2014 "),vJ=a("a"),m0r=o("TFDebertaForTokenClassification"),g0r=o(" (DeBERTa model)"),h0r=l(),z4=a("li"),t7e=a("strong"),p0r=o("deberta-v2"),_0r=o(" \u2014 "),FJ=a("a"),u0r=o("TFDebertaV2ForTokenClassification"),b0r=o(" (DeBERTa-v2 model)"),v0r=l(),W4=a("li"),a7e=a("strong"),F0r=o("distilbert"),T0r=o(" \u2014 "),TJ=a("a"),M0r=o("TFDistilBertForTokenClassification"),E0r=o(" (DistilBERT model)"),C0r=l(),Q4=a("li"),n7e=a("strong"),w0r=o("electra"),A0r=o(" \u2014 "),MJ=a("a"),L0r=o("TFElectraForTokenClassification"),y0r=o(" (ELECTRA model)"),x0r=l(),H4=a("li"),s7e=a("strong"),$0r=o("flaubert"),k0r=o(" \u2014 "),EJ=a("a"),S0r=o("TFFlaubertForTokenClassification"),R0r=o(" (FlauBERT model)"),P0r=l(),U4=a("li"),l7e=a("strong"),B0r=o("funnel"),I0r=o(" \u2014 "),CJ=a("a"),N0r=o("TFFunnelForTokenClassification"),q0r=o(" (Funnel Transformer model)"),j0r=l(),J4=a("li"),i7e=a("strong"),D0r=o("layoutlm"),G0r=o(" \u2014 "),wJ=a("a"),O0r=o("TFLayoutLMForTokenClassification"),V0r=o(" (LayoutLM model)"),X0r=l(),Y4=a("li"),d7e=a("strong"),z0r=o("longformer"),W0r=o(" \u2014 "),AJ=a("a"),Q0r=o("TFLongformerForTokenClassification"),H0r=o(" (Longformer model)"),U0r=l(),K4=a("li"),c7e=a("strong"),J0r=o("mobilebert"),Y0r=o(" \u2014 "),LJ=a("a"),K0r=o("TFMobileBertForTokenClassification"),Z0r=o(" (MobileBERT model)"),ewr=l(),Z4=a("li"),f7e=a("strong"),owr=o("mpnet"),rwr=o(" \u2014 "),yJ=a("a"),twr=o("TFMPNetForTokenClassification"),awr=o(" (MPNet model)"),nwr=l(),eE=a("li"),m7e=a("strong"),swr=o("rembert"),lwr=o(" \u2014 "),xJ=a("a"),iwr=o("TFRemBertForTokenClassification"),dwr=o(" (RemBERT model)"),cwr=l(),oE=a("li"),g7e=a("strong"),fwr=o("roberta"),mwr=o(" \u2014 "),$J=a("a"),gwr=o("TFRobertaForTokenClassification"),hwr=o(" (RoBERTa model)"),pwr=l(),rE=a("li"),h7e=a("strong"),_wr=o("roformer"),uwr=o(" \u2014 "),kJ=a("a"),bwr=o("TFRoFormerForTokenClassification"),vwr=o(" (RoFormer model)"),Fwr=l(),tE=a("li"),p7e=a("strong"),Twr=o("xlm"),Mwr=o(" \u2014 "),SJ=a("a"),Ewr=o("TFXLMForTokenClassification"),Cwr=o(" (XLM model)"),wwr=l(),aE=a("li"),_7e=a("strong"),Awr=o("xlm-roberta"),Lwr=o(" \u2014 "),RJ=a("a"),ywr=o("TFXLMRobertaForTokenClassification"),xwr=o(" (XLM-RoBERTa model)"),$wr=l(),nE=a("li"),u7e=a("strong"),kwr=o("xlnet"),Swr=o(" \u2014 "),PJ=a("a"),Rwr=o("TFXLNetForTokenClassification"),Pwr=o(" (XLNet model)"),Bwr=l(),F(sE.$$.fragment),NDe=l(),Mc=a("h2"),lE=a("a"),b7e=a("span"),F(A8.$$.fragment),Iwr=l(),v7e=a("span"),Nwr=o("TFAutoModelForQuestionAnswering"),qDe=l(),ir=a("div"),F(L8.$$.fragment),qwr=l(),Ec=a("p"),jwr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),BJ=a("a"),Dwr=o("from_pretrained()"),Gwr=o(" class method or the "),IJ=a("a"),Owr=o("from_config()"),Vwr=o(` class
method.`),Xwr=l(),y8=a("p"),zwr=o("This class cannot be instantiated directly using "),F7e=a("code"),Wwr=o("__init__()"),Qwr=o(" (throws an error)."),Hwr=l(),qt=a("div"),F(x8.$$.fragment),Uwr=l(),T7e=a("p"),Jwr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Ywr=l(),Cc=a("p"),Kwr=o(`Note:
Loading a model from its configuration file does `),M7e=a("strong"),Zwr=o("not"),eAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NJ=a("a"),oAr=o("from_pretrained()"),rAr=o(" to load the model weights."),tAr=l(),F(iE.$$.fragment),aAr=l(),Ir=a("div"),F($8.$$.fragment),nAr=l(),E7e=a("p"),sAr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),lAr=l(),fn=a("p"),iAr=o("The model class to instantiate is selected based on the "),C7e=a("code"),dAr=o("model_type"),cAr=o(` property of the config object (either
passed as an argument or loaded from `),w7e=a("code"),fAr=o("pretrained_model_name_or_path"),mAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A7e=a("code"),gAr=o("pretrained_model_name_or_path"),hAr=o(":"),pAr=l(),ce=a("ul"),dE=a("li"),L7e=a("strong"),_Ar=o("albert"),uAr=o(" \u2014 "),qJ=a("a"),bAr=o("TFAlbertForQuestionAnswering"),vAr=o(" (ALBERT model)"),FAr=l(),cE=a("li"),y7e=a("strong"),TAr=o("bert"),MAr=o(" \u2014 "),jJ=a("a"),EAr=o("TFBertForQuestionAnswering"),CAr=o(" (BERT model)"),wAr=l(),fE=a("li"),x7e=a("strong"),AAr=o("camembert"),LAr=o(" \u2014 "),DJ=a("a"),yAr=o("TFCamembertForQuestionAnswering"),xAr=o(" (CamemBERT model)"),$Ar=l(),mE=a("li"),$7e=a("strong"),kAr=o("convbert"),SAr=o(" \u2014 "),GJ=a("a"),RAr=o("TFConvBertForQuestionAnswering"),PAr=o(" (ConvBERT model)"),BAr=l(),gE=a("li"),k7e=a("strong"),IAr=o("deberta"),NAr=o(" \u2014 "),OJ=a("a"),qAr=o("TFDebertaForQuestionAnswering"),jAr=o(" (DeBERTa model)"),DAr=l(),hE=a("li"),S7e=a("strong"),GAr=o("deberta-v2"),OAr=o(" \u2014 "),VJ=a("a"),VAr=o("TFDebertaV2ForQuestionAnswering"),XAr=o(" (DeBERTa-v2 model)"),zAr=l(),pE=a("li"),R7e=a("strong"),WAr=o("distilbert"),QAr=o(" \u2014 "),XJ=a("a"),HAr=o("TFDistilBertForQuestionAnswering"),UAr=o(" (DistilBERT model)"),JAr=l(),_E=a("li"),P7e=a("strong"),YAr=o("electra"),KAr=o(" \u2014 "),zJ=a("a"),ZAr=o("TFElectraForQuestionAnswering"),eLr=o(" (ELECTRA model)"),oLr=l(),uE=a("li"),B7e=a("strong"),rLr=o("flaubert"),tLr=o(" \u2014 "),WJ=a("a"),aLr=o("TFFlaubertForQuestionAnsweringSimple"),nLr=o(" (FlauBERT model)"),sLr=l(),bE=a("li"),I7e=a("strong"),lLr=o("funnel"),iLr=o(" \u2014 "),QJ=a("a"),dLr=o("TFFunnelForQuestionAnswering"),cLr=o(" (Funnel Transformer model)"),fLr=l(),vE=a("li"),N7e=a("strong"),mLr=o("gptj"),gLr=o(" \u2014 "),HJ=a("a"),hLr=o("TFGPTJForQuestionAnswering"),pLr=o(" (GPT-J model)"),_Lr=l(),FE=a("li"),q7e=a("strong"),uLr=o("longformer"),bLr=o(" \u2014 "),UJ=a("a"),vLr=o("TFLongformerForQuestionAnswering"),FLr=o(" (Longformer model)"),TLr=l(),TE=a("li"),j7e=a("strong"),MLr=o("mobilebert"),ELr=o(" \u2014 "),JJ=a("a"),CLr=o("TFMobileBertForQuestionAnswering"),wLr=o(" (MobileBERT model)"),ALr=l(),ME=a("li"),D7e=a("strong"),LLr=o("mpnet"),yLr=o(" \u2014 "),YJ=a("a"),xLr=o("TFMPNetForQuestionAnswering"),$Lr=o(" (MPNet model)"),kLr=l(),EE=a("li"),G7e=a("strong"),SLr=o("rembert"),RLr=o(" \u2014 "),KJ=a("a"),PLr=o("TFRemBertForQuestionAnswering"),BLr=o(" (RemBERT model)"),ILr=l(),CE=a("li"),O7e=a("strong"),NLr=o("roberta"),qLr=o(" \u2014 "),ZJ=a("a"),jLr=o("TFRobertaForQuestionAnswering"),DLr=o(" (RoBERTa model)"),GLr=l(),wE=a("li"),V7e=a("strong"),OLr=o("roformer"),VLr=o(" \u2014 "),eY=a("a"),XLr=o("TFRoFormerForQuestionAnswering"),zLr=o(" (RoFormer model)"),WLr=l(),AE=a("li"),X7e=a("strong"),QLr=o("xlm"),HLr=o(" \u2014 "),oY=a("a"),ULr=o("TFXLMForQuestionAnsweringSimple"),JLr=o(" (XLM model)"),YLr=l(),LE=a("li"),z7e=a("strong"),KLr=o("xlm-roberta"),ZLr=o(" \u2014 "),rY=a("a"),eyr=o("TFXLMRobertaForQuestionAnswering"),oyr=o(" (XLM-RoBERTa model)"),ryr=l(),yE=a("li"),W7e=a("strong"),tyr=o("xlnet"),ayr=o(" \u2014 "),tY=a("a"),nyr=o("TFXLNetForQuestionAnsweringSimple"),syr=o(" (XLNet model)"),lyr=l(),F(xE.$$.fragment),jDe=l(),wc=a("h2"),$E=a("a"),Q7e=a("span"),F(k8.$$.fragment),iyr=l(),H7e=a("span"),dyr=o("TFAutoModelForVision2Seq"),DDe=l(),dr=a("div"),F(S8.$$.fragment),cyr=l(),Ac=a("p"),fyr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),aY=a("a"),myr=o("from_pretrained()"),gyr=o(" class method or the "),nY=a("a"),hyr=o("from_config()"),pyr=o(` class
method.`),_yr=l(),R8=a("p"),uyr=o("This class cannot be instantiated directly using "),U7e=a("code"),byr=o("__init__()"),vyr=o(" (throws an error)."),Fyr=l(),jt=a("div"),F(P8.$$.fragment),Tyr=l(),J7e=a("p"),Myr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Eyr=l(),Lc=a("p"),Cyr=o(`Note:
Loading a model from its configuration file does `),Y7e=a("strong"),wyr=o("not"),Ayr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sY=a("a"),Lyr=o("from_pretrained()"),yyr=o(" to load the model weights."),xyr=l(),F(kE.$$.fragment),$yr=l(),Nr=a("div"),F(B8.$$.fragment),kyr=l(),K7e=a("p"),Syr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Ryr=l(),mn=a("p"),Pyr=o("The model class to instantiate is selected based on the "),Z7e=a("code"),Byr=o("model_type"),Iyr=o(` property of the config object (either
passed as an argument or loaded from `),e9e=a("code"),Nyr=o("pretrained_model_name_or_path"),qyr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o9e=a("code"),jyr=o("pretrained_model_name_or_path"),Dyr=o(":"),Gyr=l(),r9e=a("ul"),SE=a("li"),t9e=a("strong"),Oyr=o("vision-encoder-decoder"),Vyr=o(" \u2014 "),lY=a("a"),Xyr=o("TFVisionEncoderDecoderModel"),zyr=o(" (Vision Encoder decoder model)"),Wyr=l(),F(RE.$$.fragment),GDe=l(),yc=a("h2"),PE=a("a"),a9e=a("span"),F(I8.$$.fragment),Qyr=l(),n9e=a("span"),Hyr=o("TFAutoModelForSpeechSeq2Seq"),ODe=l(),cr=a("div"),F(N8.$$.fragment),Uyr=l(),xc=a("p"),Jyr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),iY=a("a"),Yyr=o("from_pretrained()"),Kyr=o(" class method or the "),dY=a("a"),Zyr=o("from_config()"),e8r=o(` class
method.`),o8r=l(),q8=a("p"),r8r=o("This class cannot be instantiated directly using "),s9e=a("code"),t8r=o("__init__()"),a8r=o(" (throws an error)."),n8r=l(),Dt=a("div"),F(j8.$$.fragment),s8r=l(),l9e=a("p"),l8r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),i8r=l(),$c=a("p"),d8r=o(`Note:
Loading a model from its configuration file does `),i9e=a("strong"),c8r=o("not"),f8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cY=a("a"),m8r=o("from_pretrained()"),g8r=o(" to load the model weights."),h8r=l(),F(BE.$$.fragment),p8r=l(),qr=a("div"),F(D8.$$.fragment),_8r=l(),d9e=a("p"),u8r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),b8r=l(),gn=a("p"),v8r=o("The model class to instantiate is selected based on the "),c9e=a("code"),F8r=o("model_type"),T8r=o(` property of the config object (either
passed as an argument or loaded from `),f9e=a("code"),M8r=o("pretrained_model_name_or_path"),E8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m9e=a("code"),C8r=o("pretrained_model_name_or_path"),w8r=o(":"),A8r=l(),g9e=a("ul"),IE=a("li"),h9e=a("strong"),L8r=o("speech_to_text"),y8r=o(" \u2014 "),fY=a("a"),x8r=o("TFSpeech2TextForConditionalGeneration"),$8r=o(" (Speech2Text model)"),k8r=l(),F(NE.$$.fragment),VDe=l(),kc=a("h2"),qE=a("a"),p9e=a("span"),F(G8.$$.fragment),S8r=l(),_9e=a("span"),R8r=o("FlaxAutoModel"),XDe=l(),fr=a("div"),F(O8.$$.fragment),P8r=l(),Sc=a("p"),B8r=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),mY=a("a"),I8r=o("from_pretrained()"),N8r=o(" class method or the "),gY=a("a"),q8r=o("from_config()"),j8r=o(` class
method.`),D8r=l(),V8=a("p"),G8r=o("This class cannot be instantiated directly using "),u9e=a("code"),O8r=o("__init__()"),V8r=o(" (throws an error)."),X8r=l(),Gt=a("div"),F(X8.$$.fragment),z8r=l(),b9e=a("p"),W8r=o("Instantiates one of the base model classes of the library from a configuration."),Q8r=l(),Rc=a("p"),H8r=o(`Note:
Loading a model from its configuration file does `),v9e=a("strong"),U8r=o("not"),J8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hY=a("a"),Y8r=o("from_pretrained()"),K8r=o(" to load the model weights."),Z8r=l(),F(jE.$$.fragment),exr=l(),jr=a("div"),F(z8.$$.fragment),oxr=l(),F9e=a("p"),rxr=o("Instantiate one of the base model classes of the library from a pretrained model."),txr=l(),hn=a("p"),axr=o("The model class to instantiate is selected based on the "),T9e=a("code"),nxr=o("model_type"),sxr=o(` property of the config object (either
passed as an argument or loaded from `),M9e=a("code"),lxr=o("pretrained_model_name_or_path"),ixr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E9e=a("code"),dxr=o("pretrained_model_name_or_path"),cxr=o(":"),fxr=l(),oe=a("ul"),DE=a("li"),C9e=a("strong"),mxr=o("albert"),gxr=o(" \u2014 "),pY=a("a"),hxr=o("FlaxAlbertModel"),pxr=o(" (ALBERT model)"),_xr=l(),GE=a("li"),w9e=a("strong"),uxr=o("bart"),bxr=o(" \u2014 "),_Y=a("a"),vxr=o("FlaxBartModel"),Fxr=o(" (BART model)"),Txr=l(),OE=a("li"),A9e=a("strong"),Mxr=o("beit"),Exr=o(" \u2014 "),uY=a("a"),Cxr=o("FlaxBeitModel"),wxr=o(" (BEiT model)"),Axr=l(),VE=a("li"),L9e=a("strong"),Lxr=o("bert"),yxr=o(" \u2014 "),bY=a("a"),xxr=o("FlaxBertModel"),$xr=o(" (BERT model)"),kxr=l(),XE=a("li"),y9e=a("strong"),Sxr=o("big_bird"),Rxr=o(" \u2014 "),vY=a("a"),Pxr=o("FlaxBigBirdModel"),Bxr=o(" (BigBird model)"),Ixr=l(),zE=a("li"),x9e=a("strong"),Nxr=o("blenderbot"),qxr=o(" \u2014 "),FY=a("a"),jxr=o("FlaxBlenderbotModel"),Dxr=o(" (Blenderbot model)"),Gxr=l(),WE=a("li"),$9e=a("strong"),Oxr=o("blenderbot-small"),Vxr=o(" \u2014 "),TY=a("a"),Xxr=o("FlaxBlenderbotSmallModel"),zxr=o(" (BlenderbotSmall model)"),Wxr=l(),QE=a("li"),k9e=a("strong"),Qxr=o("clip"),Hxr=o(" \u2014 "),MY=a("a"),Uxr=o("FlaxCLIPModel"),Jxr=o(" (CLIP model)"),Yxr=l(),HE=a("li"),S9e=a("strong"),Kxr=o("distilbert"),Zxr=o(" \u2014 "),EY=a("a"),e$r=o("FlaxDistilBertModel"),o$r=o(" (DistilBERT model)"),r$r=l(),UE=a("li"),R9e=a("strong"),t$r=o("electra"),a$r=o(" \u2014 "),CY=a("a"),n$r=o("FlaxElectraModel"),s$r=o(" (ELECTRA model)"),l$r=l(),JE=a("li"),P9e=a("strong"),i$r=o("gpt2"),d$r=o(" \u2014 "),wY=a("a"),c$r=o("FlaxGPT2Model"),f$r=o(" (OpenAI GPT-2 model)"),m$r=l(),YE=a("li"),B9e=a("strong"),g$r=o("gpt_neo"),h$r=o(" \u2014 "),AY=a("a"),p$r=o("FlaxGPTNeoModel"),_$r=o(" (GPT Neo model)"),u$r=l(),KE=a("li"),I9e=a("strong"),b$r=o("gptj"),v$r=o(" \u2014 "),LY=a("a"),F$r=o("FlaxGPTJModel"),T$r=o(" (GPT-J model)"),M$r=l(),ZE=a("li"),N9e=a("strong"),E$r=o("longt5"),C$r=o(" \u2014 "),yY=a("a"),w$r=o("FlaxLongT5Model"),A$r=o(" (LongT5 model)"),L$r=l(),eC=a("li"),q9e=a("strong"),y$r=o("marian"),x$r=o(" \u2014 "),xY=a("a"),$$r=o("FlaxMarianModel"),k$r=o(" (Marian model)"),S$r=l(),oC=a("li"),j9e=a("strong"),R$r=o("mbart"),P$r=o(" \u2014 "),$Y=a("a"),B$r=o("FlaxMBartModel"),I$r=o(" (mBART model)"),N$r=l(),rC=a("li"),D9e=a("strong"),q$r=o("mt5"),j$r=o(" \u2014 "),kY=a("a"),D$r=o("FlaxMT5Model"),G$r=o(" (MT5 model)"),O$r=l(),tC=a("li"),G9e=a("strong"),V$r=o("opt"),X$r=o(" \u2014 "),SY=a("a"),z$r=o("FlaxOPTModel"),W$r=o(" (OPT model)"),Q$r=l(),aC=a("li"),O9e=a("strong"),H$r=o("pegasus"),U$r=o(" \u2014 "),RY=a("a"),J$r=o("FlaxPegasusModel"),Y$r=o(" (Pegasus model)"),K$r=l(),nC=a("li"),V9e=a("strong"),Z$r=o("roberta"),ekr=o(" \u2014 "),PY=a("a"),okr=o("FlaxRobertaModel"),rkr=o(" (RoBERTa model)"),tkr=l(),sC=a("li"),X9e=a("strong"),akr=o("roformer"),nkr=o(" \u2014 "),BY=a("a"),skr=o("FlaxRoFormerModel"),lkr=o(" (RoFormer model)"),ikr=l(),lC=a("li"),z9e=a("strong"),dkr=o("t5"),ckr=o(" \u2014 "),IY=a("a"),fkr=o("FlaxT5Model"),mkr=o(" (T5 model)"),gkr=l(),iC=a("li"),W9e=a("strong"),hkr=o("vision-text-dual-encoder"),pkr=o(" \u2014 "),NY=a("a"),_kr=o("FlaxVisionTextDualEncoderModel"),ukr=o(" (VisionTextDualEncoder model)"),bkr=l(),dC=a("li"),Q9e=a("strong"),vkr=o("vit"),Fkr=o(" \u2014 "),qY=a("a"),Tkr=o("FlaxViTModel"),Mkr=o(" (ViT model)"),Ekr=l(),cC=a("li"),H9e=a("strong"),Ckr=o("wav2vec2"),wkr=o(" \u2014 "),jY=a("a"),Akr=o("FlaxWav2Vec2Model"),Lkr=o(" (Wav2Vec2 model)"),ykr=l(),fC=a("li"),U9e=a("strong"),xkr=o("xglm"),$kr=o(" \u2014 "),DY=a("a"),kkr=o("FlaxXGLMModel"),Skr=o(" (XGLM model)"),Rkr=l(),mC=a("li"),J9e=a("strong"),Pkr=o("xlm-roberta"),Bkr=o(" \u2014 "),GY=a("a"),Ikr=o("FlaxXLMRobertaModel"),Nkr=o(" (XLM-RoBERTa model)"),qkr=l(),F(gC.$$.fragment),zDe=l(),Pc=a("h2"),hC=a("a"),Y9e=a("span"),F(W8.$$.fragment),jkr=l(),K9e=a("span"),Dkr=o("FlaxAutoModelForCausalLM"),WDe=l(),mr=a("div"),F(Q8.$$.fragment),Gkr=l(),Bc=a("p"),Okr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),OY=a("a"),Vkr=o("from_pretrained()"),Xkr=o(" class method or the "),VY=a("a"),zkr=o("from_config()"),Wkr=o(` class
method.`),Qkr=l(),H8=a("p"),Hkr=o("This class cannot be instantiated directly using "),Z9e=a("code"),Ukr=o("__init__()"),Jkr=o(" (throws an error)."),Ykr=l(),Ot=a("div"),F(U8.$$.fragment),Kkr=l(),eMe=a("p"),Zkr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),eSr=l(),Ic=a("p"),oSr=o(`Note:
Loading a model from its configuration file does `),oMe=a("strong"),rSr=o("not"),tSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XY=a("a"),aSr=o("from_pretrained()"),nSr=o(" to load the model weights."),sSr=l(),F(pC.$$.fragment),lSr=l(),Dr=a("div"),F(J8.$$.fragment),iSr=l(),rMe=a("p"),dSr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),cSr=l(),pn=a("p"),fSr=o("The model class to instantiate is selected based on the "),tMe=a("code"),mSr=o("model_type"),gSr=o(` property of the config object (either
passed as an argument or loaded from `),aMe=a("code"),hSr=o("pretrained_model_name_or_path"),pSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nMe=a("code"),_Sr=o("pretrained_model_name_or_path"),uSr=o(":"),bSr=l(),ye=a("ul"),_C=a("li"),sMe=a("strong"),vSr=o("bart"),FSr=o(" \u2014 "),zY=a("a"),TSr=o("FlaxBartForCausalLM"),MSr=o(" (BART model)"),ESr=l(),uC=a("li"),lMe=a("strong"),CSr=o("bert"),wSr=o(" \u2014 "),WY=a("a"),ASr=o("FlaxBertForCausalLM"),LSr=o(" (BERT model)"),ySr=l(),bC=a("li"),iMe=a("strong"),xSr=o("big_bird"),$Sr=o(" \u2014 "),QY=a("a"),kSr=o("FlaxBigBirdForCausalLM"),SSr=o(" (BigBird model)"),RSr=l(),vC=a("li"),dMe=a("strong"),PSr=o("electra"),BSr=o(" \u2014 "),HY=a("a"),ISr=o("FlaxElectraForCausalLM"),NSr=o(" (ELECTRA model)"),qSr=l(),FC=a("li"),cMe=a("strong"),jSr=o("gpt2"),DSr=o(" \u2014 "),UY=a("a"),GSr=o("FlaxGPT2LMHeadModel"),OSr=o(" (OpenAI GPT-2 model)"),VSr=l(),TC=a("li"),fMe=a("strong"),XSr=o("gpt_neo"),zSr=o(" \u2014 "),JY=a("a"),WSr=o("FlaxGPTNeoForCausalLM"),QSr=o(" (GPT Neo model)"),HSr=l(),MC=a("li"),mMe=a("strong"),USr=o("gptj"),JSr=o(" \u2014 "),YY=a("a"),YSr=o("FlaxGPTJForCausalLM"),KSr=o(" (GPT-J model)"),ZSr=l(),EC=a("li"),gMe=a("strong"),eRr=o("opt"),oRr=o(" \u2014 "),KY=a("a"),rRr=o("FlaxOPTForCausalLM"),tRr=o(" (OPT model)"),aRr=l(),CC=a("li"),hMe=a("strong"),nRr=o("roberta"),sRr=o(" \u2014 "),ZY=a("a"),lRr=o("FlaxRobertaForCausalLM"),iRr=o(" (RoBERTa model)"),dRr=l(),wC=a("li"),pMe=a("strong"),cRr=o("xglm"),fRr=o(" \u2014 "),eK=a("a"),mRr=o("FlaxXGLMForCausalLM"),gRr=o(" (XGLM model)"),hRr=l(),F(AC.$$.fragment),QDe=l(),Nc=a("h2"),LC=a("a"),_Me=a("span"),F(Y8.$$.fragment),pRr=l(),uMe=a("span"),_Rr=o("FlaxAutoModelForPreTraining"),HDe=l(),gr=a("div"),F(K8.$$.fragment),uRr=l(),qc=a("p"),bRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),oK=a("a"),vRr=o("from_pretrained()"),FRr=o(" class method or the "),rK=a("a"),TRr=o("from_config()"),MRr=o(` class
method.`),ERr=l(),Z8=a("p"),CRr=o("This class cannot be instantiated directly using "),bMe=a("code"),wRr=o("__init__()"),ARr=o(" (throws an error)."),LRr=l(),Vt=a("div"),F(ex.$$.fragment),yRr=l(),vMe=a("p"),xRr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),$Rr=l(),jc=a("p"),kRr=o(`Note:
Loading a model from its configuration file does `),FMe=a("strong"),SRr=o("not"),RRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tK=a("a"),PRr=o("from_pretrained()"),BRr=o(" to load the model weights."),IRr=l(),F(yC.$$.fragment),NRr=l(),Gr=a("div"),F(ox.$$.fragment),qRr=l(),TMe=a("p"),jRr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),DRr=l(),_n=a("p"),GRr=o("The model class to instantiate is selected based on the "),MMe=a("code"),ORr=o("model_type"),VRr=o(` property of the config object (either
passed as an argument or loaded from `),EMe=a("code"),XRr=o("pretrained_model_name_or_path"),zRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),CMe=a("code"),WRr=o("pretrained_model_name_or_path"),QRr=o(":"),HRr=l(),Ee=a("ul"),xC=a("li"),wMe=a("strong"),URr=o("albert"),JRr=o(" \u2014 "),aK=a("a"),YRr=o("FlaxAlbertForPreTraining"),KRr=o(" (ALBERT model)"),ZRr=l(),$C=a("li"),AMe=a("strong"),ePr=o("bart"),oPr=o(" \u2014 "),nK=a("a"),rPr=o("FlaxBartForConditionalGeneration"),tPr=o(" (BART model)"),aPr=l(),kC=a("li"),LMe=a("strong"),nPr=o("bert"),sPr=o(" \u2014 "),sK=a("a"),lPr=o("FlaxBertForPreTraining"),iPr=o(" (BERT model)"),dPr=l(),SC=a("li"),yMe=a("strong"),cPr=o("big_bird"),fPr=o(" \u2014 "),lK=a("a"),mPr=o("FlaxBigBirdForPreTraining"),gPr=o(" (BigBird model)"),hPr=l(),RC=a("li"),xMe=a("strong"),pPr=o("electra"),_Pr=o(" \u2014 "),iK=a("a"),uPr=o("FlaxElectraForPreTraining"),bPr=o(" (ELECTRA model)"),vPr=l(),PC=a("li"),$Me=a("strong"),FPr=o("longt5"),TPr=o(" \u2014 "),dK=a("a"),MPr=o("FlaxLongT5ForConditionalGeneration"),EPr=o(" (LongT5 model)"),CPr=l(),BC=a("li"),kMe=a("strong"),wPr=o("mbart"),APr=o(" \u2014 "),cK=a("a"),LPr=o("FlaxMBartForConditionalGeneration"),yPr=o(" (mBART model)"),xPr=l(),IC=a("li"),SMe=a("strong"),$Pr=o("mt5"),kPr=o(" \u2014 "),fK=a("a"),SPr=o("FlaxMT5ForConditionalGeneration"),RPr=o(" (MT5 model)"),PPr=l(),NC=a("li"),RMe=a("strong"),BPr=o("roberta"),IPr=o(" \u2014 "),mK=a("a"),NPr=o("FlaxRobertaForMaskedLM"),qPr=o(" (RoBERTa model)"),jPr=l(),qC=a("li"),PMe=a("strong"),DPr=o("roformer"),GPr=o(" \u2014 "),gK=a("a"),OPr=o("FlaxRoFormerForMaskedLM"),VPr=o(" (RoFormer model)"),XPr=l(),jC=a("li"),BMe=a("strong"),zPr=o("t5"),WPr=o(" \u2014 "),hK=a("a"),QPr=o("FlaxT5ForConditionalGeneration"),HPr=o(" (T5 model)"),UPr=l(),DC=a("li"),IMe=a("strong"),JPr=o("wav2vec2"),YPr=o(" \u2014 "),pK=a("a"),KPr=o("FlaxWav2Vec2ForPreTraining"),ZPr=o(" (Wav2Vec2 model)"),eBr=l(),GC=a("li"),NMe=a("strong"),oBr=o("xlm-roberta"),rBr=o(" \u2014 "),_K=a("a"),tBr=o("FlaxXLMRobertaForMaskedLM"),aBr=o(" (XLM-RoBERTa model)"),nBr=l(),F(OC.$$.fragment),UDe=l(),Dc=a("h2"),VC=a("a"),qMe=a("span"),F(rx.$$.fragment),sBr=l(),jMe=a("span"),lBr=o("FlaxAutoModelForMaskedLM"),JDe=l(),hr=a("div"),F(tx.$$.fragment),iBr=l(),Gc=a("p"),dBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),uK=a("a"),cBr=o("from_pretrained()"),fBr=o(" class method or the "),bK=a("a"),mBr=o("from_config()"),gBr=o(` class
method.`),hBr=l(),ax=a("p"),pBr=o("This class cannot be instantiated directly using "),DMe=a("code"),_Br=o("__init__()"),uBr=o(" (throws an error)."),bBr=l(),Xt=a("div"),F(nx.$$.fragment),vBr=l(),GMe=a("p"),FBr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),TBr=l(),Oc=a("p"),MBr=o(`Note:
Loading a model from its configuration file does `),OMe=a("strong"),EBr=o("not"),CBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vK=a("a"),wBr=o("from_pretrained()"),ABr=o(" to load the model weights."),LBr=l(),F(XC.$$.fragment),yBr=l(),Or=a("div"),F(sx.$$.fragment),xBr=l(),VMe=a("p"),$Br=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),kBr=l(),un=a("p"),SBr=o("The model class to instantiate is selected based on the "),XMe=a("code"),RBr=o("model_type"),PBr=o(` property of the config object (either
passed as an argument or loaded from `),zMe=a("code"),BBr=o("pretrained_model_name_or_path"),IBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),WMe=a("code"),NBr=o("pretrained_model_name_or_path"),qBr=o(":"),jBr=l(),xe=a("ul"),zC=a("li"),QMe=a("strong"),DBr=o("albert"),GBr=o(" \u2014 "),FK=a("a"),OBr=o("FlaxAlbertForMaskedLM"),VBr=o(" (ALBERT model)"),XBr=l(),WC=a("li"),HMe=a("strong"),zBr=o("bart"),WBr=o(" \u2014 "),TK=a("a"),QBr=o("FlaxBartForConditionalGeneration"),HBr=o(" (BART model)"),UBr=l(),QC=a("li"),UMe=a("strong"),JBr=o("bert"),YBr=o(" \u2014 "),MK=a("a"),KBr=o("FlaxBertForMaskedLM"),ZBr=o(" (BERT model)"),eIr=l(),HC=a("li"),JMe=a("strong"),oIr=o("big_bird"),rIr=o(" \u2014 "),EK=a("a"),tIr=o("FlaxBigBirdForMaskedLM"),aIr=o(" (BigBird model)"),nIr=l(),UC=a("li"),YMe=a("strong"),sIr=o("distilbert"),lIr=o(" \u2014 "),CK=a("a"),iIr=o("FlaxDistilBertForMaskedLM"),dIr=o(" (DistilBERT model)"),cIr=l(),JC=a("li"),KMe=a("strong"),fIr=o("electra"),mIr=o(" \u2014 "),wK=a("a"),gIr=o("FlaxElectraForMaskedLM"),hIr=o(" (ELECTRA model)"),pIr=l(),YC=a("li"),ZMe=a("strong"),_Ir=o("mbart"),uIr=o(" \u2014 "),AK=a("a"),bIr=o("FlaxMBartForConditionalGeneration"),vIr=o(" (mBART model)"),FIr=l(),KC=a("li"),e4e=a("strong"),TIr=o("roberta"),MIr=o(" \u2014 "),LK=a("a"),EIr=o("FlaxRobertaForMaskedLM"),CIr=o(" (RoBERTa model)"),wIr=l(),ZC=a("li"),o4e=a("strong"),AIr=o("roformer"),LIr=o(" \u2014 "),yK=a("a"),yIr=o("FlaxRoFormerForMaskedLM"),xIr=o(" (RoFormer model)"),$Ir=l(),e5=a("li"),r4e=a("strong"),kIr=o("xlm-roberta"),SIr=o(" \u2014 "),xK=a("a"),RIr=o("FlaxXLMRobertaForMaskedLM"),PIr=o(" (XLM-RoBERTa model)"),BIr=l(),F(o5.$$.fragment),YDe=l(),Vc=a("h2"),r5=a("a"),t4e=a("span"),F(lx.$$.fragment),IIr=l(),a4e=a("span"),NIr=o("FlaxAutoModelForSeq2SeqLM"),KDe=l(),pr=a("div"),F(ix.$$.fragment),qIr=l(),Xc=a("p"),jIr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),$K=a("a"),DIr=o("from_pretrained()"),GIr=o(" class method or the "),kK=a("a"),OIr=o("from_config()"),VIr=o(` class
method.`),XIr=l(),dx=a("p"),zIr=o("This class cannot be instantiated directly using "),n4e=a("code"),WIr=o("__init__()"),QIr=o(" (throws an error)."),HIr=l(),zt=a("div"),F(cx.$$.fragment),UIr=l(),s4e=a("p"),JIr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),YIr=l(),zc=a("p"),KIr=o(`Note:
Loading a model from its configuration file does `),l4e=a("strong"),ZIr=o("not"),eNr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SK=a("a"),oNr=o("from_pretrained()"),rNr=o(" to load the model weights."),tNr=l(),F(t5.$$.fragment),aNr=l(),Vr=a("div"),F(fx.$$.fragment),nNr=l(),i4e=a("p"),sNr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),lNr=l(),bn=a("p"),iNr=o("The model class to instantiate is selected based on the "),d4e=a("code"),dNr=o("model_type"),cNr=o(` property of the config object (either
passed as an argument or loaded from `),c4e=a("code"),fNr=o("pretrained_model_name_or_path"),mNr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f4e=a("code"),gNr=o("pretrained_model_name_or_path"),hNr=o(":"),pNr=l(),$e=a("ul"),a5=a("li"),m4e=a("strong"),_Nr=o("bart"),uNr=o(" \u2014 "),RK=a("a"),bNr=o("FlaxBartForConditionalGeneration"),vNr=o(" (BART model)"),FNr=l(),n5=a("li"),g4e=a("strong"),TNr=o("blenderbot"),MNr=o(" \u2014 "),PK=a("a"),ENr=o("FlaxBlenderbotForConditionalGeneration"),CNr=o(" (Blenderbot model)"),wNr=l(),s5=a("li"),h4e=a("strong"),ANr=o("blenderbot-small"),LNr=o(" \u2014 "),BK=a("a"),yNr=o("FlaxBlenderbotSmallForConditionalGeneration"),xNr=o(" (BlenderbotSmall model)"),$Nr=l(),l5=a("li"),p4e=a("strong"),kNr=o("encoder-decoder"),SNr=o(" \u2014 "),IK=a("a"),RNr=o("FlaxEncoderDecoderModel"),PNr=o(" (Encoder decoder model)"),BNr=l(),i5=a("li"),_4e=a("strong"),INr=o("longt5"),NNr=o(" \u2014 "),NK=a("a"),qNr=o("FlaxLongT5ForConditionalGeneration"),jNr=o(" (LongT5 model)"),DNr=l(),d5=a("li"),u4e=a("strong"),GNr=o("marian"),ONr=o(" \u2014 "),qK=a("a"),VNr=o("FlaxMarianMTModel"),XNr=o(" (Marian model)"),zNr=l(),c5=a("li"),b4e=a("strong"),WNr=o("mbart"),QNr=o(" \u2014 "),jK=a("a"),HNr=o("FlaxMBartForConditionalGeneration"),UNr=o(" (mBART model)"),JNr=l(),f5=a("li"),v4e=a("strong"),YNr=o("mt5"),KNr=o(" \u2014 "),DK=a("a"),ZNr=o("FlaxMT5ForConditionalGeneration"),eqr=o(" (MT5 model)"),oqr=l(),m5=a("li"),F4e=a("strong"),rqr=o("pegasus"),tqr=o(" \u2014 "),GK=a("a"),aqr=o("FlaxPegasusForConditionalGeneration"),nqr=o(" (Pegasus model)"),sqr=l(),g5=a("li"),T4e=a("strong"),lqr=o("t5"),iqr=o(" \u2014 "),OK=a("a"),dqr=o("FlaxT5ForConditionalGeneration"),cqr=o(" (T5 model)"),fqr=l(),F(h5.$$.fragment),ZDe=l(),Wc=a("h2"),p5=a("a"),M4e=a("span"),F(mx.$$.fragment),mqr=l(),E4e=a("span"),gqr=o("FlaxAutoModelForSequenceClassification"),eGe=l(),_r=a("div"),F(gx.$$.fragment),hqr=l(),Qc=a("p"),pqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),VK=a("a"),_qr=o("from_pretrained()"),uqr=o(" class method or the "),XK=a("a"),bqr=o("from_config()"),vqr=o(` class
method.`),Fqr=l(),hx=a("p"),Tqr=o("This class cannot be instantiated directly using "),C4e=a("code"),Mqr=o("__init__()"),Eqr=o(" (throws an error)."),Cqr=l(),Wt=a("div"),F(px.$$.fragment),wqr=l(),w4e=a("p"),Aqr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Lqr=l(),Hc=a("p"),yqr=o(`Note:
Loading a model from its configuration file does `),A4e=a("strong"),xqr=o("not"),$qr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zK=a("a"),kqr=o("from_pretrained()"),Sqr=o(" to load the model weights."),Rqr=l(),F(_5.$$.fragment),Pqr=l(),Xr=a("div"),F(_x.$$.fragment),Bqr=l(),L4e=a("p"),Iqr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Nqr=l(),vn=a("p"),qqr=o("The model class to instantiate is selected based on the "),y4e=a("code"),jqr=o("model_type"),Dqr=o(` property of the config object (either
passed as an argument or loaded from `),x4e=a("code"),Gqr=o("pretrained_model_name_or_path"),Oqr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$4e=a("code"),Vqr=o("pretrained_model_name_or_path"),Xqr=o(":"),zqr=l(),ke=a("ul"),u5=a("li"),k4e=a("strong"),Wqr=o("albert"),Qqr=o(" \u2014 "),WK=a("a"),Hqr=o("FlaxAlbertForSequenceClassification"),Uqr=o(" (ALBERT model)"),Jqr=l(),b5=a("li"),S4e=a("strong"),Yqr=o("bart"),Kqr=o(" \u2014 "),QK=a("a"),Zqr=o("FlaxBartForSequenceClassification"),ejr=o(" (BART model)"),ojr=l(),v5=a("li"),R4e=a("strong"),rjr=o("bert"),tjr=o(" \u2014 "),HK=a("a"),ajr=o("FlaxBertForSequenceClassification"),njr=o(" (BERT model)"),sjr=l(),F5=a("li"),P4e=a("strong"),ljr=o("big_bird"),ijr=o(" \u2014 "),UK=a("a"),djr=o("FlaxBigBirdForSequenceClassification"),cjr=o(" (BigBird model)"),fjr=l(),T5=a("li"),B4e=a("strong"),mjr=o("distilbert"),gjr=o(" \u2014 "),JK=a("a"),hjr=o("FlaxDistilBertForSequenceClassification"),pjr=o(" (DistilBERT model)"),_jr=l(),M5=a("li"),I4e=a("strong"),ujr=o("electra"),bjr=o(" \u2014 "),YK=a("a"),vjr=o("FlaxElectraForSequenceClassification"),Fjr=o(" (ELECTRA model)"),Tjr=l(),E5=a("li"),N4e=a("strong"),Mjr=o("mbart"),Ejr=o(" \u2014 "),KK=a("a"),Cjr=o("FlaxMBartForSequenceClassification"),wjr=o(" (mBART model)"),Ajr=l(),C5=a("li"),q4e=a("strong"),Ljr=o("roberta"),yjr=o(" \u2014 "),ZK=a("a"),xjr=o("FlaxRobertaForSequenceClassification"),$jr=o(" (RoBERTa model)"),kjr=l(),w5=a("li"),j4e=a("strong"),Sjr=o("roformer"),Rjr=o(" \u2014 "),eZ=a("a"),Pjr=o("FlaxRoFormerForSequenceClassification"),Bjr=o(" (RoFormer model)"),Ijr=l(),A5=a("li"),D4e=a("strong"),Njr=o("xlm-roberta"),qjr=o(" \u2014 "),oZ=a("a"),jjr=o("FlaxXLMRobertaForSequenceClassification"),Djr=o(" (XLM-RoBERTa model)"),Gjr=l(),F(L5.$$.fragment),oGe=l(),Uc=a("h2"),y5=a("a"),G4e=a("span"),F(ux.$$.fragment),Ojr=l(),O4e=a("span"),Vjr=o("FlaxAutoModelForQuestionAnswering"),rGe=l(),ur=a("div"),F(bx.$$.fragment),Xjr=l(),Jc=a("p"),zjr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),rZ=a("a"),Wjr=o("from_pretrained()"),Qjr=o(" class method or the "),tZ=a("a"),Hjr=o("from_config()"),Ujr=o(` class
method.`),Jjr=l(),vx=a("p"),Yjr=o("This class cannot be instantiated directly using "),V4e=a("code"),Kjr=o("__init__()"),Zjr=o(" (throws an error)."),eDr=l(),Qt=a("div"),F(Fx.$$.fragment),oDr=l(),X4e=a("p"),rDr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),tDr=l(),Yc=a("p"),aDr=o(`Note:
Loading a model from its configuration file does `),z4e=a("strong"),nDr=o("not"),sDr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aZ=a("a"),lDr=o("from_pretrained()"),iDr=o(" to load the model weights."),dDr=l(),F(x5.$$.fragment),cDr=l(),zr=a("div"),F(Tx.$$.fragment),fDr=l(),W4e=a("p"),mDr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),gDr=l(),Fn=a("p"),hDr=o("The model class to instantiate is selected based on the "),Q4e=a("code"),pDr=o("model_type"),_Dr=o(` property of the config object (either
passed as an argument or loaded from `),H4e=a("code"),uDr=o("pretrained_model_name_or_path"),bDr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U4e=a("code"),vDr=o("pretrained_model_name_or_path"),FDr=o(":"),TDr=l(),Se=a("ul"),$5=a("li"),J4e=a("strong"),MDr=o("albert"),EDr=o(" \u2014 "),nZ=a("a"),CDr=o("FlaxAlbertForQuestionAnswering"),wDr=o(" (ALBERT model)"),ADr=l(),k5=a("li"),Y4e=a("strong"),LDr=o("bart"),yDr=o(" \u2014 "),sZ=a("a"),xDr=o("FlaxBartForQuestionAnswering"),$Dr=o(" (BART model)"),kDr=l(),S5=a("li"),K4e=a("strong"),SDr=o("bert"),RDr=o(" \u2014 "),lZ=a("a"),PDr=o("FlaxBertForQuestionAnswering"),BDr=o(" (BERT model)"),IDr=l(),R5=a("li"),Z4e=a("strong"),NDr=o("big_bird"),qDr=o(" \u2014 "),iZ=a("a"),jDr=o("FlaxBigBirdForQuestionAnswering"),DDr=o(" (BigBird model)"),GDr=l(),P5=a("li"),eEe=a("strong"),ODr=o("distilbert"),VDr=o(" \u2014 "),dZ=a("a"),XDr=o("FlaxDistilBertForQuestionAnswering"),zDr=o(" (DistilBERT model)"),WDr=l(),B5=a("li"),oEe=a("strong"),QDr=o("electra"),HDr=o(" \u2014 "),cZ=a("a"),UDr=o("FlaxElectraForQuestionAnswering"),JDr=o(" (ELECTRA model)"),YDr=l(),I5=a("li"),rEe=a("strong"),KDr=o("mbart"),ZDr=o(" \u2014 "),fZ=a("a"),eGr=o("FlaxMBartForQuestionAnswering"),oGr=o(" (mBART model)"),rGr=l(),N5=a("li"),tEe=a("strong"),tGr=o("roberta"),aGr=o(" \u2014 "),mZ=a("a"),nGr=o("FlaxRobertaForQuestionAnswering"),sGr=o(" (RoBERTa model)"),lGr=l(),q5=a("li"),aEe=a("strong"),iGr=o("roformer"),dGr=o(" \u2014 "),gZ=a("a"),cGr=o("FlaxRoFormerForQuestionAnswering"),fGr=o(" (RoFormer model)"),mGr=l(),j5=a("li"),nEe=a("strong"),gGr=o("xlm-roberta"),hGr=o(" \u2014 "),hZ=a("a"),pGr=o("FlaxXLMRobertaForQuestionAnswering"),_Gr=o(" (XLM-RoBERTa model)"),uGr=l(),F(D5.$$.fragment),tGe=l(),Kc=a("h2"),G5=a("a"),sEe=a("span"),F(Mx.$$.fragment),bGr=l(),lEe=a("span"),vGr=o("FlaxAutoModelForTokenClassification"),aGe=l(),br=a("div"),F(Ex.$$.fragment),FGr=l(),Zc=a("p"),TGr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),pZ=a("a"),MGr=o("from_pretrained()"),EGr=o(" class method or the "),_Z=a("a"),CGr=o("from_config()"),wGr=o(` class
method.`),AGr=l(),Cx=a("p"),LGr=o("This class cannot be instantiated directly using "),iEe=a("code"),yGr=o("__init__()"),xGr=o(" (throws an error)."),$Gr=l(),Ht=a("div"),F(wx.$$.fragment),kGr=l(),dEe=a("p"),SGr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),RGr=l(),ef=a("p"),PGr=o(`Note:
Loading a model from its configuration file does `),cEe=a("strong"),BGr=o("not"),IGr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uZ=a("a"),NGr=o("from_pretrained()"),qGr=o(" to load the model weights."),jGr=l(),F(O5.$$.fragment),DGr=l(),Wr=a("div"),F(Ax.$$.fragment),GGr=l(),fEe=a("p"),OGr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),VGr=l(),Tn=a("p"),XGr=o("The model class to instantiate is selected based on the "),mEe=a("code"),zGr=o("model_type"),WGr=o(` property of the config object (either
passed as an argument or loaded from `),gEe=a("code"),QGr=o("pretrained_model_name_or_path"),HGr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hEe=a("code"),UGr=o("pretrained_model_name_or_path"),JGr=o(":"),YGr=l(),Oe=a("ul"),V5=a("li"),pEe=a("strong"),KGr=o("albert"),ZGr=o(" \u2014 "),bZ=a("a"),eOr=o("FlaxAlbertForTokenClassification"),oOr=o(" (ALBERT model)"),rOr=l(),X5=a("li"),_Ee=a("strong"),tOr=o("bert"),aOr=o(" \u2014 "),vZ=a("a"),nOr=o("FlaxBertForTokenClassification"),sOr=o(" (BERT model)"),lOr=l(),z5=a("li"),uEe=a("strong"),iOr=o("big_bird"),dOr=o(" \u2014 "),FZ=a("a"),cOr=o("FlaxBigBirdForTokenClassification"),fOr=o(" (BigBird model)"),mOr=l(),W5=a("li"),bEe=a("strong"),gOr=o("distilbert"),hOr=o(" \u2014 "),TZ=a("a"),pOr=o("FlaxDistilBertForTokenClassification"),_Or=o(" (DistilBERT model)"),uOr=l(),Q5=a("li"),vEe=a("strong"),bOr=o("electra"),vOr=o(" \u2014 "),MZ=a("a"),FOr=o("FlaxElectraForTokenClassification"),TOr=o(" (ELECTRA model)"),MOr=l(),H5=a("li"),FEe=a("strong"),EOr=o("roberta"),COr=o(" \u2014 "),EZ=a("a"),wOr=o("FlaxRobertaForTokenClassification"),AOr=o(" (RoBERTa model)"),LOr=l(),U5=a("li"),TEe=a("strong"),yOr=o("roformer"),xOr=o(" \u2014 "),CZ=a("a"),$Or=o("FlaxRoFormerForTokenClassification"),kOr=o(" (RoFormer model)"),SOr=l(),J5=a("li"),MEe=a("strong"),ROr=o("xlm-roberta"),POr=o(" \u2014 "),wZ=a("a"),BOr=o("FlaxXLMRobertaForTokenClassification"),IOr=o(" (XLM-RoBERTa model)"),NOr=l(),F(Y5.$$.fragment),nGe=l(),of=a("h2"),K5=a("a"),EEe=a("span"),F(Lx.$$.fragment),qOr=l(),CEe=a("span"),jOr=o("FlaxAutoModelForMultipleChoice"),sGe=l(),vr=a("div"),F(yx.$$.fragment),DOr=l(),rf=a("p"),GOr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),AZ=a("a"),OOr=o("from_pretrained()"),VOr=o(" class method or the "),LZ=a("a"),XOr=o("from_config()"),zOr=o(` class
method.`),WOr=l(),xx=a("p"),QOr=o("This class cannot be instantiated directly using "),wEe=a("code"),HOr=o("__init__()"),UOr=o(" (throws an error)."),JOr=l(),Ut=a("div"),F($x.$$.fragment),YOr=l(),AEe=a("p"),KOr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),ZOr=l(),tf=a("p"),eVr=o(`Note:
Loading a model from its configuration file does `),LEe=a("strong"),oVr=o("not"),rVr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yZ=a("a"),tVr=o("from_pretrained()"),aVr=o(" to load the model weights."),nVr=l(),F(Z5.$$.fragment),sVr=l(),Qr=a("div"),F(kx.$$.fragment),lVr=l(),yEe=a("p"),iVr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),dVr=l(),Mn=a("p"),cVr=o("The model class to instantiate is selected based on the "),xEe=a("code"),fVr=o("model_type"),mVr=o(` property of the config object (either
passed as an argument or loaded from `),$Ee=a("code"),gVr=o("pretrained_model_name_or_path"),hVr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kEe=a("code"),pVr=o("pretrained_model_name_or_path"),_Vr=o(":"),uVr=l(),Ve=a("ul"),e3=a("li"),SEe=a("strong"),bVr=o("albert"),vVr=o(" \u2014 "),xZ=a("a"),FVr=o("FlaxAlbertForMultipleChoice"),TVr=o(" (ALBERT model)"),MVr=l(),o3=a("li"),REe=a("strong"),EVr=o("bert"),CVr=o(" \u2014 "),$Z=a("a"),wVr=o("FlaxBertForMultipleChoice"),AVr=o(" (BERT model)"),LVr=l(),r3=a("li"),PEe=a("strong"),yVr=o("big_bird"),xVr=o(" \u2014 "),kZ=a("a"),$Vr=o("FlaxBigBirdForMultipleChoice"),kVr=o(" (BigBird model)"),SVr=l(),t3=a("li"),BEe=a("strong"),RVr=o("distilbert"),PVr=o(" \u2014 "),SZ=a("a"),BVr=o("FlaxDistilBertForMultipleChoice"),IVr=o(" (DistilBERT model)"),NVr=l(),a3=a("li"),IEe=a("strong"),qVr=o("electra"),jVr=o(" \u2014 "),RZ=a("a"),DVr=o("FlaxElectraForMultipleChoice"),GVr=o(" (ELECTRA model)"),OVr=l(),n3=a("li"),NEe=a("strong"),VVr=o("roberta"),XVr=o(" \u2014 "),PZ=a("a"),zVr=o("FlaxRobertaForMultipleChoice"),WVr=o(" (RoBERTa model)"),QVr=l(),s3=a("li"),qEe=a("strong"),HVr=o("roformer"),UVr=o(" \u2014 "),BZ=a("a"),JVr=o("FlaxRoFormerForMultipleChoice"),YVr=o(" (RoFormer model)"),KVr=l(),l3=a("li"),jEe=a("strong"),ZVr=o("xlm-roberta"),eXr=o(" \u2014 "),IZ=a("a"),oXr=o("FlaxXLMRobertaForMultipleChoice"),rXr=o(" (XLM-RoBERTa model)"),tXr=l(),F(i3.$$.fragment),lGe=l(),af=a("h2"),d3=a("a"),DEe=a("span"),F(Sx.$$.fragment),aXr=l(),GEe=a("span"),nXr=o("FlaxAutoModelForNextSentencePrediction"),iGe=l(),Fr=a("div"),F(Rx.$$.fragment),sXr=l(),nf=a("p"),lXr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),NZ=a("a"),iXr=o("from_pretrained()"),dXr=o(" class method or the "),qZ=a("a"),cXr=o("from_config()"),fXr=o(` class
method.`),mXr=l(),Px=a("p"),gXr=o("This class cannot be instantiated directly using "),OEe=a("code"),hXr=o("__init__()"),pXr=o(" (throws an error)."),_Xr=l(),Jt=a("div"),F(Bx.$$.fragment),uXr=l(),VEe=a("p"),bXr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),vXr=l(),sf=a("p"),FXr=o(`Note:
Loading a model from its configuration file does `),XEe=a("strong"),TXr=o("not"),MXr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jZ=a("a"),EXr=o("from_pretrained()"),CXr=o(" to load the model weights."),wXr=l(),F(c3.$$.fragment),AXr=l(),Hr=a("div"),F(Ix.$$.fragment),LXr=l(),zEe=a("p"),yXr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),xXr=l(),En=a("p"),$Xr=o("The model class to instantiate is selected based on the "),WEe=a("code"),kXr=o("model_type"),SXr=o(` property of the config object (either
passed as an argument or loaded from `),QEe=a("code"),RXr=o("pretrained_model_name_or_path"),PXr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),HEe=a("code"),BXr=o("pretrained_model_name_or_path"),IXr=o(":"),NXr=l(),UEe=a("ul"),f3=a("li"),JEe=a("strong"),qXr=o("bert"),jXr=o(" \u2014 "),DZ=a("a"),DXr=o("FlaxBertForNextSentencePrediction"),GXr=o(" (BERT model)"),OXr=l(),F(m3.$$.fragment),dGe=l(),lf=a("h2"),g3=a("a"),YEe=a("span"),F(Nx.$$.fragment),VXr=l(),KEe=a("span"),XXr=o("FlaxAutoModelForImageClassification"),cGe=l(),Tr=a("div"),F(qx.$$.fragment),zXr=l(),df=a("p"),WXr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),GZ=a("a"),QXr=o("from_pretrained()"),HXr=o(" class method or the "),OZ=a("a"),UXr=o("from_config()"),JXr=o(` class
method.`),YXr=l(),jx=a("p"),KXr=o("This class cannot be instantiated directly using "),ZEe=a("code"),ZXr=o("__init__()"),ezr=o(" (throws an error)."),ozr=l(),Yt=a("div"),F(Dx.$$.fragment),rzr=l(),eCe=a("p"),tzr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),azr=l(),cf=a("p"),nzr=o(`Note:
Loading a model from its configuration file does `),oCe=a("strong"),szr=o("not"),lzr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VZ=a("a"),izr=o("from_pretrained()"),dzr=o(" to load the model weights."),czr=l(),F(h3.$$.fragment),fzr=l(),Ur=a("div"),F(Gx.$$.fragment),mzr=l(),rCe=a("p"),gzr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),hzr=l(),Cn=a("p"),pzr=o("The model class to instantiate is selected based on the "),tCe=a("code"),_zr=o("model_type"),uzr=o(` property of the config object (either
passed as an argument or loaded from `),aCe=a("code"),bzr=o("pretrained_model_name_or_path"),vzr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nCe=a("code"),Fzr=o("pretrained_model_name_or_path"),Tzr=o(":"),Mzr=l(),Ox=a("ul"),p3=a("li"),sCe=a("strong"),Ezr=o("beit"),Czr=o(" \u2014 "),XZ=a("a"),wzr=o("FlaxBeitForImageClassification"),Azr=o(" (BEiT model)"),Lzr=l(),_3=a("li"),lCe=a("strong"),yzr=o("vit"),xzr=o(" \u2014 "),zZ=a("a"),$zr=o("FlaxViTForImageClassification"),kzr=o(" (ViT model)"),Szr=l(),F(u3.$$.fragment),fGe=l(),ff=a("h2"),b3=a("a"),iCe=a("span"),F(Vx.$$.fragment),Rzr=l(),dCe=a("span"),Pzr=o("FlaxAutoModelForVision2Seq"),mGe=l(),Mr=a("div"),F(Xx.$$.fragment),Bzr=l(),mf=a("p"),Izr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),WZ=a("a"),Nzr=o("from_pretrained()"),qzr=o(" class method or the "),QZ=a("a"),jzr=o("from_config()"),Dzr=o(` class
method.`),Gzr=l(),zx=a("p"),Ozr=o("This class cannot be instantiated directly using "),cCe=a("code"),Vzr=o("__init__()"),Xzr=o(" (throws an error)."),zzr=l(),Kt=a("div"),F(Wx.$$.fragment),Wzr=l(),fCe=a("p"),Qzr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Hzr=l(),gf=a("p"),Uzr=o(`Note:
Loading a model from its configuration file does `),mCe=a("strong"),Jzr=o("not"),Yzr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HZ=a("a"),Kzr=o("from_pretrained()"),Zzr=o(" to load the model weights."),eWr=l(),F(v3.$$.fragment),oWr=l(),Jr=a("div"),F(Qx.$$.fragment),rWr=l(),gCe=a("p"),tWr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),aWr=l(),wn=a("p"),nWr=o("The model class to instantiate is selected based on the "),hCe=a("code"),sWr=o("model_type"),lWr=o(` property of the config object (either
passed as an argument or loaded from `),pCe=a("code"),iWr=o("pretrained_model_name_or_path"),dWr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_Ce=a("code"),cWr=o("pretrained_model_name_or_path"),fWr=o(":"),mWr=l(),uCe=a("ul"),F3=a("li"),bCe=a("strong"),gWr=o("vision-encoder-decoder"),hWr=o(" \u2014 "),UZ=a("a"),pWr=o("FlaxVisionEncoderDecoderModel"),_Wr=o(" (Vision Encoder decoder model)"),uWr=l(),F(T3.$$.fragment),this.h()},l(f){const u=kRt('[data-svelte="svelte-1phssyn"]',document.head);g=n(u,"META",{name:!0,content:!0}),u.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var Hx=s(p);m=n(Hx,"A",{id:!0,class:!0,href:!0});var vCe=s(m);_=n(vCe,"SPAN",{});var FCe=s(_);T(d.$$.fragment,FCe),FCe.forEach(t),vCe.forEach(t),h=i(Hx),Mo=n(Hx,"SPAN",{});var TCe=s(Mo);gi=r(TCe,"Auto Classes"),TCe.forEach(t),Hx.forEach(t),uf=i(f),rt=n(f,"P",{});var Ux=s(rt);hi=r(Ux,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),pi=n(Ux,"CODE",{});var MCe=s(pi);jw=r(MCe,"from_pretrained()"),MCe.forEach(t),bf=r(Ux,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Ux.forEach(t),Ge=i(f),We=n(f,"P",{});var An=s(We);_i=r(An,"Instantiating one of "),Ln=n(An,"A",{href:!0});var ECe=s(Ln);Dw=r(ECe,"AutoConfig"),ECe.forEach(t),yn=r(An,", "),xn=n(An,"A",{href:!0});var CCe=s(xn);Gw=r(CCe,"AutoModel"),CCe.forEach(t),ui=r(An,`, and
`),$n=n(An,"A",{href:!0});var wCe=s($n);Ow=r(wCe,"AutoTokenizer"),wCe.forEach(t),bi=r(An," will directly create a class of the relevant architecture. For instance"),An.forEach(t),vf=i(f),T(Ca.$$.fragment,f),Qe=i(f),Ae=n(f,"P",{});var Jx=s(Ae);dk=r(Jx,"will create a model that is an instance of "),vi=n(Jx,"A",{href:!0});var ACe=s(vi);ck=r(ACe,"BertModel"),ACe.forEach(t),fk=r(Jx,"."),Jx.forEach(t),Eo=i(f),wa=n(f,"P",{});var Yx=s(wa);mk=r(Yx,"There is one class of "),Ff=n(Yx,"CODE",{});var LCe=s(Ff);gk=r(LCe,"AutoModel"),LCe.forEach(t),TVe=r(Yx," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),Yx.forEach(t),cje=i(f),Fi=n(f,"H2",{class:!0});var Kx=s(Fi);Tf=n(Kx,"A",{id:!0,class:!0,href:!0});var yCe=s(Tf);Ooe=n(yCe,"SPAN",{});var xCe=s(Ooe);T(Vw.$$.fragment,xCe),xCe.forEach(t),yCe.forEach(t),MVe=i(Kx),Voe=n(Kx,"SPAN",{});var $Ce=s(Voe);EVe=r($Ce,"Extending the Auto Classes"),$Ce.forEach(t),Kx.forEach(t),fje=i(f),kn=n(f,"P",{});var hf=s(kn);CVe=r(hf,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Xoe=n(hf,"CODE",{});var kCe=s(Xoe);wVe=r(kCe,"NewModel"),kCe.forEach(t),AVe=r(hf,", make sure you have a "),zoe=n(hf,"CODE",{});var SCe=s(zoe);LVe=r(SCe,"NewModelConfig"),SCe.forEach(t),yVe=r(hf,` then you can add those to the auto
classes like this:`),hf.forEach(t),mje=i(f),T(Xw.$$.fragment,f),gje=i(f),hk=n(f,"P",{});var RCe=s(hk);xVe=r(RCe,"You will then be able to use the auto classes like you would usually do!"),RCe.forEach(t),hje=i(f),T(Mf.$$.fragment,f),pje=i(f),Ti=n(f,"H2",{class:!0});var Zx=s(Ti);Ef=n(Zx,"A",{id:!0,class:!0,href:!0});var PCe=s(Ef);Woe=n(PCe,"SPAN",{});var BCe=s(Woe);T(zw.$$.fragment,BCe),BCe.forEach(t),PCe.forEach(t),$Ve=i(Zx),Qoe=n(Zx,"SPAN",{});var ICe=s(Qoe);kVe=r(ICe,"AutoConfig"),ICe.forEach(t),Zx.forEach(t),_je=i(f),Co=n(f,"DIV",{class:!0});var et=s(Co);T(Ww.$$.fragment,et),SVe=i(et),Qw=n(et,"P",{});var e$=s(Qw);RVe=r(e$,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),pk=n(e$,"A",{href:!0});var NCe=s(pk);PVe=r(NCe,"from_pretrained()"),NCe.forEach(t),BVe=r(e$," class method."),e$.forEach(t),IVe=i(et),Hw=n(et,"P",{});var o$=s(Hw);NVe=r(o$,"This class cannot be instantiated directly using "),Hoe=n(o$,"CODE",{});var qCe=s(Hoe);qVe=r(qCe,"__init__()"),qCe.forEach(t),jVe=r(o$," (throws an error)."),o$.forEach(t),DVe=i(et),Er=n(et,"DIV",{class:!0});var ot=s(Er);T(Uw.$$.fragment,ot),GVe=i(ot),Uoe=n(ot,"P",{});var jCe=s(Uoe);OVe=r(jCe,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),jCe.forEach(t),VVe=i(ot),Mi=n(ot,"P",{});var pf=s(Mi);XVe=r(pf,"The configuration class to instantiate is selected based on the "),Joe=n(pf,"CODE",{});var DCe=s(Joe);zVe=r(DCe,"model_type"),DCe.forEach(t),WVe=r(pf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Yoe=n(pf,"CODE",{});var GCe=s(Yoe);QVe=r(GCe,"pretrained_model_name_or_path"),GCe.forEach(t),HVe=r(pf,":"),pf.forEach(t),UVe=i(ot),A=n(ot,"UL",{});var L=s(A);Cf=n(L,"LI",{});var M3=s(Cf);Koe=n(M3,"STRONG",{});var OCe=s(Koe);JVe=r(OCe,"albert"),OCe.forEach(t),YVe=r(M3," \u2014 "),_k=n(M3,"A",{href:!0});var VCe=s(_k);KVe=r(VCe,"AlbertConfig"),VCe.forEach(t),ZVe=r(M3," (ALBERT model)"),M3.forEach(t),eXe=i(L),wf=n(L,"LI",{});var E3=s(wf);Zoe=n(E3,"STRONG",{});var XCe=s(Zoe);oXe=r(XCe,"bart"),XCe.forEach(t),rXe=r(E3," \u2014 "),uk=n(E3,"A",{href:!0});var zCe=s(uk);tXe=r(zCe,"BartConfig"),zCe.forEach(t),aXe=r(E3," (BART model)"),E3.forEach(t),nXe=i(L),Af=n(L,"LI",{});var C3=s(Af);ere=n(C3,"STRONG",{});var WCe=s(ere);sXe=r(WCe,"beit"),WCe.forEach(t),lXe=r(C3," \u2014 "),bk=n(C3,"A",{href:!0});var QCe=s(bk);iXe=r(QCe,"BeitConfig"),QCe.forEach(t),dXe=r(C3," (BEiT model)"),C3.forEach(t),cXe=i(L),Lf=n(L,"LI",{});var w3=s(Lf);ore=n(w3,"STRONG",{});var HCe=s(ore);fXe=r(HCe,"bert"),HCe.forEach(t),mXe=r(w3," \u2014 "),vk=n(w3,"A",{href:!0});var UCe=s(vk);gXe=r(UCe,"BertConfig"),UCe.forEach(t),hXe=r(w3," (BERT model)"),w3.forEach(t),pXe=i(L),yf=n(L,"LI",{});var A3=s(yf);rre=n(A3,"STRONG",{});var JCe=s(rre);_Xe=r(JCe,"bert-generation"),JCe.forEach(t),uXe=r(A3," \u2014 "),Fk=n(A3,"A",{href:!0});var YCe=s(Fk);bXe=r(YCe,"BertGenerationConfig"),YCe.forEach(t),vXe=r(A3," (Bert Generation model)"),A3.forEach(t),FXe=i(L),xf=n(L,"LI",{});var L3=s(xf);tre=n(L3,"STRONG",{});var KCe=s(tre);TXe=r(KCe,"big_bird"),KCe.forEach(t),MXe=r(L3," \u2014 "),Tk=n(L3,"A",{href:!0});var ZCe=s(Tk);EXe=r(ZCe,"BigBirdConfig"),ZCe.forEach(t),CXe=r(L3," (BigBird model)"),L3.forEach(t),wXe=i(L),$f=n(L,"LI",{});var y3=s($f);are=n(y3,"STRONG",{});var e5e=s(are);AXe=r(e5e,"bigbird_pegasus"),e5e.forEach(t),LXe=r(y3," \u2014 "),Mk=n(y3,"A",{href:!0});var o5e=s(Mk);yXe=r(o5e,"BigBirdPegasusConfig"),o5e.forEach(t),xXe=r(y3," (BigBird-Pegasus model)"),y3.forEach(t),$Xe=i(L),kf=n(L,"LI",{});var x3=s(kf);nre=n(x3,"STRONG",{});var r5e=s(nre);kXe=r(r5e,"blenderbot"),r5e.forEach(t),SXe=r(x3," \u2014 "),Ek=n(x3,"A",{href:!0});var t5e=s(Ek);RXe=r(t5e,"BlenderbotConfig"),t5e.forEach(t),PXe=r(x3," (Blenderbot model)"),x3.forEach(t),BXe=i(L),Sf=n(L,"LI",{});var $3=s(Sf);sre=n($3,"STRONG",{});var a5e=s(sre);IXe=r(a5e,"blenderbot-small"),a5e.forEach(t),NXe=r($3," \u2014 "),Ck=n($3,"A",{href:!0});var n5e=s(Ck);qXe=r(n5e,"BlenderbotSmallConfig"),n5e.forEach(t),jXe=r($3," (BlenderbotSmall model)"),$3.forEach(t),DXe=i(L),Rf=n(L,"LI",{});var k3=s(Rf);lre=n(k3,"STRONG",{});var s5e=s(lre);GXe=r(s5e,"camembert"),s5e.forEach(t),OXe=r(k3," \u2014 "),wk=n(k3,"A",{href:!0});var l5e=s(wk);VXe=r(l5e,"CamembertConfig"),l5e.forEach(t),XXe=r(k3," (CamemBERT model)"),k3.forEach(t),zXe=i(L),Pf=n(L,"LI",{});var S3=s(Pf);ire=n(S3,"STRONG",{});var i5e=s(ire);WXe=r(i5e,"canine"),i5e.forEach(t),QXe=r(S3," \u2014 "),Ak=n(S3,"A",{href:!0});var d5e=s(Ak);HXe=r(d5e,"CanineConfig"),d5e.forEach(t),UXe=r(S3," (CANINE model)"),S3.forEach(t),JXe=i(L),Bf=n(L,"LI",{});var R3=s(Bf);dre=n(R3,"STRONG",{});var c5e=s(dre);YXe=r(c5e,"clip"),c5e.forEach(t),KXe=r(R3," \u2014 "),Lk=n(R3,"A",{href:!0});var f5e=s(Lk);ZXe=r(f5e,"CLIPConfig"),f5e.forEach(t),eze=r(R3," (CLIP model)"),R3.forEach(t),oze=i(L),If=n(L,"LI",{});var P3=s(If);cre=n(P3,"STRONG",{});var m5e=s(cre);rze=r(m5e,"convbert"),m5e.forEach(t),tze=r(P3," \u2014 "),yk=n(P3,"A",{href:!0});var g5e=s(yk);aze=r(g5e,"ConvBertConfig"),g5e.forEach(t),nze=r(P3," (ConvBERT model)"),P3.forEach(t),sze=i(L),Nf=n(L,"LI",{});var B3=s(Nf);fre=n(B3,"STRONG",{});var h5e=s(fre);lze=r(h5e,"convnext"),h5e.forEach(t),ize=r(B3," \u2014 "),xk=n(B3,"A",{href:!0});var p5e=s(xk);dze=r(p5e,"ConvNextConfig"),p5e.forEach(t),cze=r(B3," (ConvNeXT model)"),B3.forEach(t),fze=i(L),qf=n(L,"LI",{});var I3=s(qf);mre=n(I3,"STRONG",{});var _5e=s(mre);mze=r(_5e,"ctrl"),_5e.forEach(t),gze=r(I3," \u2014 "),$k=n(I3,"A",{href:!0});var u5e=s($k);hze=r(u5e,"CTRLConfig"),u5e.forEach(t),pze=r(I3," (CTRL model)"),I3.forEach(t),_ze=i(L),jf=n(L,"LI",{});var N3=s(jf);gre=n(N3,"STRONG",{});var b5e=s(gre);uze=r(b5e,"cvt"),b5e.forEach(t),bze=r(N3," \u2014 "),kk=n(N3,"A",{href:!0});var v5e=s(kk);vze=r(v5e,"CvtConfig"),v5e.forEach(t),Fze=r(N3," (CvT model)"),N3.forEach(t),Tze=i(L),Df=n(L,"LI",{});var q3=s(Df);hre=n(q3,"STRONG",{});var F5e=s(hre);Mze=r(F5e,"data2vec-audio"),F5e.forEach(t),Eze=r(q3," \u2014 "),Sk=n(q3,"A",{href:!0});var T5e=s(Sk);Cze=r(T5e,"Data2VecAudioConfig"),T5e.forEach(t),wze=r(q3," (Data2VecAudio model)"),q3.forEach(t),Aze=i(L),Gf=n(L,"LI",{});var j3=s(Gf);pre=n(j3,"STRONG",{});var M5e=s(pre);Lze=r(M5e,"data2vec-text"),M5e.forEach(t),yze=r(j3," \u2014 "),Rk=n(j3,"A",{href:!0});var E5e=s(Rk);xze=r(E5e,"Data2VecTextConfig"),E5e.forEach(t),$ze=r(j3," (Data2VecText model)"),j3.forEach(t),kze=i(L),Of=n(L,"LI",{});var D3=s(Of);_re=n(D3,"STRONG",{});var C5e=s(_re);Sze=r(C5e,"data2vec-vision"),C5e.forEach(t),Rze=r(D3," \u2014 "),Pk=n(D3,"A",{href:!0});var w5e=s(Pk);Pze=r(w5e,"Data2VecVisionConfig"),w5e.forEach(t),Bze=r(D3," (Data2VecVision model)"),D3.forEach(t),Ize=i(L),Vf=n(L,"LI",{});var G3=s(Vf);ure=n(G3,"STRONG",{});var A5e=s(ure);Nze=r(A5e,"deberta"),A5e.forEach(t),qze=r(G3," \u2014 "),Bk=n(G3,"A",{href:!0});var L5e=s(Bk);jze=r(L5e,"DebertaConfig"),L5e.forEach(t),Dze=r(G3," (DeBERTa model)"),G3.forEach(t),Gze=i(L),Xf=n(L,"LI",{});var O3=s(Xf);bre=n(O3,"STRONG",{});var y5e=s(bre);Oze=r(y5e,"deberta-v2"),y5e.forEach(t),Vze=r(O3," \u2014 "),Ik=n(O3,"A",{href:!0});var x5e=s(Ik);Xze=r(x5e,"DebertaV2Config"),x5e.forEach(t),zze=r(O3," (DeBERTa-v2 model)"),O3.forEach(t),Wze=i(L),zf=n(L,"LI",{});var V3=s(zf);vre=n(V3,"STRONG",{});var $5e=s(vre);Qze=r($5e,"decision_transformer"),$5e.forEach(t),Hze=r(V3," \u2014 "),Nk=n(V3,"A",{href:!0});var k5e=s(Nk);Uze=r(k5e,"DecisionTransformerConfig"),k5e.forEach(t),Jze=r(V3," (Decision Transformer model)"),V3.forEach(t),Yze=i(L),Wf=n(L,"LI",{});var X3=s(Wf);Fre=n(X3,"STRONG",{});var S5e=s(Fre);Kze=r(S5e,"deit"),S5e.forEach(t),Zze=r(X3," \u2014 "),qk=n(X3,"A",{href:!0});var vWr=s(qk);eWe=r(vWr,"DeiTConfig"),vWr.forEach(t),oWe=r(X3," (DeiT model)"),X3.forEach(t),rWe=i(L),Qf=n(L,"LI",{});var R5e=s(Qf);Tre=n(R5e,"STRONG",{});var FWr=s(Tre);tWe=r(FWr,"detr"),FWr.forEach(t),aWe=r(R5e," \u2014 "),jk=n(R5e,"A",{href:!0});var TWr=s(jk);nWe=r(TWr,"DetrConfig"),TWr.forEach(t),sWe=r(R5e," (DETR model)"),R5e.forEach(t),lWe=i(L),Hf=n(L,"LI",{});var P5e=s(Hf);Mre=n(P5e,"STRONG",{});var MWr=s(Mre);iWe=r(MWr,"distilbert"),MWr.forEach(t),dWe=r(P5e," \u2014 "),Dk=n(P5e,"A",{href:!0});var EWr=s(Dk);cWe=r(EWr,"DistilBertConfig"),EWr.forEach(t),fWe=r(P5e," (DistilBERT model)"),P5e.forEach(t),mWe=i(L),Uf=n(L,"LI",{});var B5e=s(Uf);Ere=n(B5e,"STRONG",{});var CWr=s(Ere);gWe=r(CWr,"dpr"),CWr.forEach(t),hWe=r(B5e," \u2014 "),Gk=n(B5e,"A",{href:!0});var wWr=s(Gk);pWe=r(wWr,"DPRConfig"),wWr.forEach(t),_We=r(B5e," (DPR model)"),B5e.forEach(t),uWe=i(L),Jf=n(L,"LI",{});var I5e=s(Jf);Cre=n(I5e,"STRONG",{});var AWr=s(Cre);bWe=r(AWr,"dpt"),AWr.forEach(t),vWe=r(I5e," \u2014 "),Ok=n(I5e,"A",{href:!0});var LWr=s(Ok);FWe=r(LWr,"DPTConfig"),LWr.forEach(t),TWe=r(I5e," (DPT model)"),I5e.forEach(t),MWe=i(L),Yf=n(L,"LI",{});var N5e=s(Yf);wre=n(N5e,"STRONG",{});var yWr=s(wre);EWe=r(yWr,"electra"),yWr.forEach(t),CWe=r(N5e," \u2014 "),Vk=n(N5e,"A",{href:!0});var xWr=s(Vk);wWe=r(xWr,"ElectraConfig"),xWr.forEach(t),AWe=r(N5e," (ELECTRA model)"),N5e.forEach(t),LWe=i(L),Kf=n(L,"LI",{});var q5e=s(Kf);Are=n(q5e,"STRONG",{});var $Wr=s(Are);yWe=r($Wr,"encoder-decoder"),$Wr.forEach(t),xWe=r(q5e," \u2014 "),Xk=n(q5e,"A",{href:!0});var kWr=s(Xk);$We=r(kWr,"EncoderDecoderConfig"),kWr.forEach(t),kWe=r(q5e," (Encoder decoder model)"),q5e.forEach(t),SWe=i(L),Zf=n(L,"LI",{});var j5e=s(Zf);Lre=n(j5e,"STRONG",{});var SWr=s(Lre);RWe=r(SWr,"flaubert"),SWr.forEach(t),PWe=r(j5e," \u2014 "),zk=n(j5e,"A",{href:!0});var RWr=s(zk);BWe=r(RWr,"FlaubertConfig"),RWr.forEach(t),IWe=r(j5e," (FlauBERT model)"),j5e.forEach(t),NWe=i(L),em=n(L,"LI",{});var D5e=s(em);yre=n(D5e,"STRONG",{});var PWr=s(yre);qWe=r(PWr,"flava"),PWr.forEach(t),jWe=r(D5e," \u2014 "),Wk=n(D5e,"A",{href:!0});var BWr=s(Wk);DWe=r(BWr,"FlavaConfig"),BWr.forEach(t),GWe=r(D5e," (FLAVA model)"),D5e.forEach(t),OWe=i(L),om=n(L,"LI",{});var G5e=s(om);xre=n(G5e,"STRONG",{});var IWr=s(xre);VWe=r(IWr,"fnet"),IWr.forEach(t),XWe=r(G5e," \u2014 "),Qk=n(G5e,"A",{href:!0});var NWr=s(Qk);zWe=r(NWr,"FNetConfig"),NWr.forEach(t),WWe=r(G5e," (FNet model)"),G5e.forEach(t),QWe=i(L),rm=n(L,"LI",{});var O5e=s(rm);$re=n(O5e,"STRONG",{});var qWr=s($re);HWe=r(qWr,"fsmt"),qWr.forEach(t),UWe=r(O5e," \u2014 "),Hk=n(O5e,"A",{href:!0});var jWr=s(Hk);JWe=r(jWr,"FSMTConfig"),jWr.forEach(t),YWe=r(O5e," (FairSeq Machine-Translation model)"),O5e.forEach(t),KWe=i(L),tm=n(L,"LI",{});var V5e=s(tm);kre=n(V5e,"STRONG",{});var DWr=s(kre);ZWe=r(DWr,"funnel"),DWr.forEach(t),eQe=r(V5e," \u2014 "),Uk=n(V5e,"A",{href:!0});var GWr=s(Uk);oQe=r(GWr,"FunnelConfig"),GWr.forEach(t),rQe=r(V5e," (Funnel Transformer model)"),V5e.forEach(t),tQe=i(L),am=n(L,"LI",{});var X5e=s(am);Sre=n(X5e,"STRONG",{});var OWr=s(Sre);aQe=r(OWr,"glpn"),OWr.forEach(t),nQe=r(X5e," \u2014 "),Jk=n(X5e,"A",{href:!0});var VWr=s(Jk);sQe=r(VWr,"GLPNConfig"),VWr.forEach(t),lQe=r(X5e," (GLPN model)"),X5e.forEach(t),iQe=i(L),nm=n(L,"LI",{});var z5e=s(nm);Rre=n(z5e,"STRONG",{});var XWr=s(Rre);dQe=r(XWr,"gpt2"),XWr.forEach(t),cQe=r(z5e," \u2014 "),Yk=n(z5e,"A",{href:!0});var zWr=s(Yk);fQe=r(zWr,"GPT2Config"),zWr.forEach(t),mQe=r(z5e," (OpenAI GPT-2 model)"),z5e.forEach(t),gQe=i(L),sm=n(L,"LI",{});var W5e=s(sm);Pre=n(W5e,"STRONG",{});var WWr=s(Pre);hQe=r(WWr,"gpt_neo"),WWr.forEach(t),pQe=r(W5e," \u2014 "),Kk=n(W5e,"A",{href:!0});var QWr=s(Kk);_Qe=r(QWr,"GPTNeoConfig"),QWr.forEach(t),uQe=r(W5e," (GPT Neo model)"),W5e.forEach(t),bQe=i(L),lm=n(L,"LI",{});var Q5e=s(lm);Bre=n(Q5e,"STRONG",{});var HWr=s(Bre);vQe=r(HWr,"gpt_neox"),HWr.forEach(t),FQe=r(Q5e," \u2014 "),Zk=n(Q5e,"A",{href:!0});var UWr=s(Zk);TQe=r(UWr,"GPTNeoXConfig"),UWr.forEach(t),MQe=r(Q5e," (GPT NeoX model)"),Q5e.forEach(t),EQe=i(L),im=n(L,"LI",{});var H5e=s(im);Ire=n(H5e,"STRONG",{});var JWr=s(Ire);CQe=r(JWr,"gptj"),JWr.forEach(t),wQe=r(H5e," \u2014 "),eS=n(H5e,"A",{href:!0});var YWr=s(eS);AQe=r(YWr,"GPTJConfig"),YWr.forEach(t),LQe=r(H5e," (GPT-J model)"),H5e.forEach(t),yQe=i(L),dm=n(L,"LI",{});var U5e=s(dm);Nre=n(U5e,"STRONG",{});var KWr=s(Nre);xQe=r(KWr,"hubert"),KWr.forEach(t),$Qe=r(U5e," \u2014 "),oS=n(U5e,"A",{href:!0});var ZWr=s(oS);kQe=r(ZWr,"HubertConfig"),ZWr.forEach(t),SQe=r(U5e," (Hubert model)"),U5e.forEach(t),RQe=i(L),cm=n(L,"LI",{});var J5e=s(cm);qre=n(J5e,"STRONG",{});var eQr=s(qre);PQe=r(eQr,"ibert"),eQr.forEach(t),BQe=r(J5e," \u2014 "),rS=n(J5e,"A",{href:!0});var oQr=s(rS);IQe=r(oQr,"IBertConfig"),oQr.forEach(t),NQe=r(J5e," (I-BERT model)"),J5e.forEach(t),qQe=i(L),fm=n(L,"LI",{});var Y5e=s(fm);jre=n(Y5e,"STRONG",{});var rQr=s(jre);jQe=r(rQr,"imagegpt"),rQr.forEach(t),DQe=r(Y5e," \u2014 "),tS=n(Y5e,"A",{href:!0});var tQr=s(tS);GQe=r(tQr,"ImageGPTConfig"),tQr.forEach(t),OQe=r(Y5e," (ImageGPT model)"),Y5e.forEach(t),VQe=i(L),mm=n(L,"LI",{});var K5e=s(mm);Dre=n(K5e,"STRONG",{});var aQr=s(Dre);XQe=r(aQr,"layoutlm"),aQr.forEach(t),zQe=r(K5e," \u2014 "),aS=n(K5e,"A",{href:!0});var nQr=s(aS);WQe=r(nQr,"LayoutLMConfig"),nQr.forEach(t),QQe=r(K5e," (LayoutLM model)"),K5e.forEach(t),HQe=i(L),gm=n(L,"LI",{});var Z5e=s(gm);Gre=n(Z5e,"STRONG",{});var sQr=s(Gre);UQe=r(sQr,"layoutlmv2"),sQr.forEach(t),JQe=r(Z5e," \u2014 "),nS=n(Z5e,"A",{href:!0});var lQr=s(nS);YQe=r(lQr,"LayoutLMv2Config"),lQr.forEach(t),KQe=r(Z5e," (LayoutLMv2 model)"),Z5e.forEach(t),ZQe=i(L),hm=n(L,"LI",{});var e3e=s(hm);Ore=n(e3e,"STRONG",{});var iQr=s(Ore);eHe=r(iQr,"layoutlmv3"),iQr.forEach(t),oHe=r(e3e," \u2014 "),sS=n(e3e,"A",{href:!0});var dQr=s(sS);rHe=r(dQr,"LayoutLMv3Config"),dQr.forEach(t),tHe=r(e3e," (LayoutLMv3 model)"),e3e.forEach(t),aHe=i(L),pm=n(L,"LI",{});var o3e=s(pm);Vre=n(o3e,"STRONG",{});var cQr=s(Vre);nHe=r(cQr,"led"),cQr.forEach(t),sHe=r(o3e," \u2014 "),lS=n(o3e,"A",{href:!0});var fQr=s(lS);lHe=r(fQr,"LEDConfig"),fQr.forEach(t),iHe=r(o3e," (LED model)"),o3e.forEach(t),dHe=i(L),_m=n(L,"LI",{});var r3e=s(_m);Xre=n(r3e,"STRONG",{});var mQr=s(Xre);cHe=r(mQr,"levit"),mQr.forEach(t),fHe=r(r3e," \u2014 "),iS=n(r3e,"A",{href:!0});var gQr=s(iS);mHe=r(gQr,"LevitConfig"),gQr.forEach(t),gHe=r(r3e," (LeViT model)"),r3e.forEach(t),hHe=i(L),um=n(L,"LI",{});var t3e=s(um);zre=n(t3e,"STRONG",{});var hQr=s(zre);pHe=r(hQr,"longformer"),hQr.forEach(t),_He=r(t3e," \u2014 "),dS=n(t3e,"A",{href:!0});var pQr=s(dS);uHe=r(pQr,"LongformerConfig"),pQr.forEach(t),bHe=r(t3e," (Longformer model)"),t3e.forEach(t),vHe=i(L),bm=n(L,"LI",{});var a3e=s(bm);Wre=n(a3e,"STRONG",{});var _Qr=s(Wre);FHe=r(_Qr,"longt5"),_Qr.forEach(t),THe=r(a3e," \u2014 "),cS=n(a3e,"A",{href:!0});var uQr=s(cS);MHe=r(uQr,"LongT5Config"),uQr.forEach(t),EHe=r(a3e," (LongT5 model)"),a3e.forEach(t),CHe=i(L),vm=n(L,"LI",{});var n3e=s(vm);Qre=n(n3e,"STRONG",{});var bQr=s(Qre);wHe=r(bQr,"luke"),bQr.forEach(t),AHe=r(n3e," \u2014 "),fS=n(n3e,"A",{href:!0});var vQr=s(fS);LHe=r(vQr,"LukeConfig"),vQr.forEach(t),yHe=r(n3e," (LUKE model)"),n3e.forEach(t),xHe=i(L),Fm=n(L,"LI",{});var s3e=s(Fm);Hre=n(s3e,"STRONG",{});var FQr=s(Hre);$He=r(FQr,"lxmert"),FQr.forEach(t),kHe=r(s3e," \u2014 "),mS=n(s3e,"A",{href:!0});var TQr=s(mS);SHe=r(TQr,"LxmertConfig"),TQr.forEach(t),RHe=r(s3e," (LXMERT model)"),s3e.forEach(t),PHe=i(L),Tm=n(L,"LI",{});var l3e=s(Tm);Ure=n(l3e,"STRONG",{});var MQr=s(Ure);BHe=r(MQr,"m2m_100"),MQr.forEach(t),IHe=r(l3e," \u2014 "),gS=n(l3e,"A",{href:!0});var EQr=s(gS);NHe=r(EQr,"M2M100Config"),EQr.forEach(t),qHe=r(l3e," (M2M100 model)"),l3e.forEach(t),jHe=i(L),Mm=n(L,"LI",{});var i3e=s(Mm);Jre=n(i3e,"STRONG",{});var CQr=s(Jre);DHe=r(CQr,"marian"),CQr.forEach(t),GHe=r(i3e," \u2014 "),hS=n(i3e,"A",{href:!0});var wQr=s(hS);OHe=r(wQr,"MarianConfig"),wQr.forEach(t),VHe=r(i3e," (Marian model)"),i3e.forEach(t),XHe=i(L),Em=n(L,"LI",{});var d3e=s(Em);Yre=n(d3e,"STRONG",{});var AQr=s(Yre);zHe=r(AQr,"maskformer"),AQr.forEach(t),WHe=r(d3e," \u2014 "),pS=n(d3e,"A",{href:!0});var LQr=s(pS);QHe=r(LQr,"MaskFormerConfig"),LQr.forEach(t),HHe=r(d3e," (MaskFormer model)"),d3e.forEach(t),UHe=i(L),Cm=n(L,"LI",{});var c3e=s(Cm);Kre=n(c3e,"STRONG",{});var yQr=s(Kre);JHe=r(yQr,"mbart"),yQr.forEach(t),YHe=r(c3e," \u2014 "),_S=n(c3e,"A",{href:!0});var xQr=s(_S);KHe=r(xQr,"MBartConfig"),xQr.forEach(t),ZHe=r(c3e," (mBART model)"),c3e.forEach(t),eUe=i(L),wm=n(L,"LI",{});var f3e=s(wm);Zre=n(f3e,"STRONG",{});var $Qr=s(Zre);oUe=r($Qr,"megatron-bert"),$Qr.forEach(t),rUe=r(f3e," \u2014 "),uS=n(f3e,"A",{href:!0});var kQr=s(uS);tUe=r(kQr,"MegatronBertConfig"),kQr.forEach(t),aUe=r(f3e," (Megatron-BERT model)"),f3e.forEach(t),nUe=i(L),Am=n(L,"LI",{});var m3e=s(Am);ete=n(m3e,"STRONG",{});var SQr=s(ete);sUe=r(SQr,"mobilebert"),SQr.forEach(t),lUe=r(m3e," \u2014 "),bS=n(m3e,"A",{href:!0});var RQr=s(bS);iUe=r(RQr,"MobileBertConfig"),RQr.forEach(t),dUe=r(m3e," (MobileBERT model)"),m3e.forEach(t),cUe=i(L),Lm=n(L,"LI",{});var g3e=s(Lm);ote=n(g3e,"STRONG",{});var PQr=s(ote);fUe=r(PQr,"mpnet"),PQr.forEach(t),mUe=r(g3e," \u2014 "),vS=n(g3e,"A",{href:!0});var BQr=s(vS);gUe=r(BQr,"MPNetConfig"),BQr.forEach(t),hUe=r(g3e," (MPNet model)"),g3e.forEach(t),pUe=i(L),ym=n(L,"LI",{});var h3e=s(ym);rte=n(h3e,"STRONG",{});var IQr=s(rte);_Ue=r(IQr,"mt5"),IQr.forEach(t),uUe=r(h3e," \u2014 "),FS=n(h3e,"A",{href:!0});var NQr=s(FS);bUe=r(NQr,"MT5Config"),NQr.forEach(t),vUe=r(h3e," (MT5 model)"),h3e.forEach(t),FUe=i(L),xm=n(L,"LI",{});var p3e=s(xm);tte=n(p3e,"STRONG",{});var qQr=s(tte);TUe=r(qQr,"nystromformer"),qQr.forEach(t),MUe=r(p3e," \u2014 "),TS=n(p3e,"A",{href:!0});var jQr=s(TS);EUe=r(jQr,"NystromformerConfig"),jQr.forEach(t),CUe=r(p3e," (Nystr\xF6mformer model)"),p3e.forEach(t),wUe=i(L),$m=n(L,"LI",{});var _3e=s($m);ate=n(_3e,"STRONG",{});var DQr=s(ate);AUe=r(DQr,"openai-gpt"),DQr.forEach(t),LUe=r(_3e," \u2014 "),MS=n(_3e,"A",{href:!0});var GQr=s(MS);yUe=r(GQr,"OpenAIGPTConfig"),GQr.forEach(t),xUe=r(_3e," (OpenAI GPT model)"),_3e.forEach(t),$Ue=i(L),km=n(L,"LI",{});var u3e=s(km);nte=n(u3e,"STRONG",{});var OQr=s(nte);kUe=r(OQr,"opt"),OQr.forEach(t),SUe=r(u3e," \u2014 "),ES=n(u3e,"A",{href:!0});var VQr=s(ES);RUe=r(VQr,"OPTConfig"),VQr.forEach(t),PUe=r(u3e," (OPT model)"),u3e.forEach(t),BUe=i(L),Sm=n(L,"LI",{});var b3e=s(Sm);ste=n(b3e,"STRONG",{});var XQr=s(ste);IUe=r(XQr,"pegasus"),XQr.forEach(t),NUe=r(b3e," \u2014 "),CS=n(b3e,"A",{href:!0});var zQr=s(CS);qUe=r(zQr,"PegasusConfig"),zQr.forEach(t),jUe=r(b3e," (Pegasus model)"),b3e.forEach(t),DUe=i(L),Rm=n(L,"LI",{});var v3e=s(Rm);lte=n(v3e,"STRONG",{});var WQr=s(lte);GUe=r(WQr,"perceiver"),WQr.forEach(t),OUe=r(v3e," \u2014 "),wS=n(v3e,"A",{href:!0});var QQr=s(wS);VUe=r(QQr,"PerceiverConfig"),QQr.forEach(t),XUe=r(v3e," (Perceiver model)"),v3e.forEach(t),zUe=i(L),Pm=n(L,"LI",{});var F3e=s(Pm);ite=n(F3e,"STRONG",{});var HQr=s(ite);WUe=r(HQr,"plbart"),HQr.forEach(t),QUe=r(F3e," \u2014 "),AS=n(F3e,"A",{href:!0});var UQr=s(AS);HUe=r(UQr,"PLBartConfig"),UQr.forEach(t),UUe=r(F3e," (PLBart model)"),F3e.forEach(t),JUe=i(L),Bm=n(L,"LI",{});var T3e=s(Bm);dte=n(T3e,"STRONG",{});var JQr=s(dte);YUe=r(JQr,"poolformer"),JQr.forEach(t),KUe=r(T3e," \u2014 "),LS=n(T3e,"A",{href:!0});var YQr=s(LS);ZUe=r(YQr,"PoolFormerConfig"),YQr.forEach(t),eJe=r(T3e," (PoolFormer model)"),T3e.forEach(t),oJe=i(L),Im=n(L,"LI",{});var M3e=s(Im);cte=n(M3e,"STRONG",{});var KQr=s(cte);rJe=r(KQr,"prophetnet"),KQr.forEach(t),tJe=r(M3e," \u2014 "),yS=n(M3e,"A",{href:!0});var ZQr=s(yS);aJe=r(ZQr,"ProphetNetConfig"),ZQr.forEach(t),nJe=r(M3e," (ProphetNet model)"),M3e.forEach(t),sJe=i(L),Nm=n(L,"LI",{});var E3e=s(Nm);fte=n(E3e,"STRONG",{});var eHr=s(fte);lJe=r(eHr,"qdqbert"),eHr.forEach(t),iJe=r(E3e," \u2014 "),xS=n(E3e,"A",{href:!0});var oHr=s(xS);dJe=r(oHr,"QDQBertConfig"),oHr.forEach(t),cJe=r(E3e," (QDQBert model)"),E3e.forEach(t),fJe=i(L),qm=n(L,"LI",{});var C3e=s(qm);mte=n(C3e,"STRONG",{});var rHr=s(mte);mJe=r(rHr,"rag"),rHr.forEach(t),gJe=r(C3e," \u2014 "),$S=n(C3e,"A",{href:!0});var tHr=s($S);hJe=r(tHr,"RagConfig"),tHr.forEach(t),pJe=r(C3e," (RAG model)"),C3e.forEach(t),_Je=i(L),jm=n(L,"LI",{});var w3e=s(jm);gte=n(w3e,"STRONG",{});var aHr=s(gte);uJe=r(aHr,"realm"),aHr.forEach(t),bJe=r(w3e," \u2014 "),kS=n(w3e,"A",{href:!0});var nHr=s(kS);vJe=r(nHr,"RealmConfig"),nHr.forEach(t),FJe=r(w3e," (REALM model)"),w3e.forEach(t),TJe=i(L),Dm=n(L,"LI",{});var A3e=s(Dm);hte=n(A3e,"STRONG",{});var sHr=s(hte);MJe=r(sHr,"reformer"),sHr.forEach(t),EJe=r(A3e," \u2014 "),SS=n(A3e,"A",{href:!0});var lHr=s(SS);CJe=r(lHr,"ReformerConfig"),lHr.forEach(t),wJe=r(A3e," (Reformer model)"),A3e.forEach(t),AJe=i(L),Gm=n(L,"LI",{});var L3e=s(Gm);pte=n(L3e,"STRONG",{});var iHr=s(pte);LJe=r(iHr,"regnet"),iHr.forEach(t),yJe=r(L3e," \u2014 "),RS=n(L3e,"A",{href:!0});var dHr=s(RS);xJe=r(dHr,"RegNetConfig"),dHr.forEach(t),$Je=r(L3e," (RegNet model)"),L3e.forEach(t),kJe=i(L),Om=n(L,"LI",{});var y3e=s(Om);_te=n(y3e,"STRONG",{});var cHr=s(_te);SJe=r(cHr,"rembert"),cHr.forEach(t),RJe=r(y3e," \u2014 "),PS=n(y3e,"A",{href:!0});var fHr=s(PS);PJe=r(fHr,"RemBertConfig"),fHr.forEach(t),BJe=r(y3e," (RemBERT model)"),y3e.forEach(t),IJe=i(L),Vm=n(L,"LI",{});var x3e=s(Vm);ute=n(x3e,"STRONG",{});var mHr=s(ute);NJe=r(mHr,"resnet"),mHr.forEach(t),qJe=r(x3e," \u2014 "),BS=n(x3e,"A",{href:!0});var gHr=s(BS);jJe=r(gHr,"ResNetConfig"),gHr.forEach(t),DJe=r(x3e," (ResNet model)"),x3e.forEach(t),GJe=i(L),Xm=n(L,"LI",{});var $3e=s(Xm);bte=n($3e,"STRONG",{});var hHr=s(bte);OJe=r(hHr,"retribert"),hHr.forEach(t),VJe=r($3e," \u2014 "),IS=n($3e,"A",{href:!0});var pHr=s(IS);XJe=r(pHr,"RetriBertConfig"),pHr.forEach(t),zJe=r($3e," (RetriBERT model)"),$3e.forEach(t),WJe=i(L),zm=n(L,"LI",{});var k3e=s(zm);vte=n(k3e,"STRONG",{});var _Hr=s(vte);QJe=r(_Hr,"roberta"),_Hr.forEach(t),HJe=r(k3e," \u2014 "),NS=n(k3e,"A",{href:!0});var uHr=s(NS);UJe=r(uHr,"RobertaConfig"),uHr.forEach(t),JJe=r(k3e," (RoBERTa model)"),k3e.forEach(t),YJe=i(L),Wm=n(L,"LI",{});var S3e=s(Wm);Fte=n(S3e,"STRONG",{});var bHr=s(Fte);KJe=r(bHr,"roformer"),bHr.forEach(t),ZJe=r(S3e," \u2014 "),qS=n(S3e,"A",{href:!0});var vHr=s(qS);eYe=r(vHr,"RoFormerConfig"),vHr.forEach(t),oYe=r(S3e," (RoFormer model)"),S3e.forEach(t),rYe=i(L),Qm=n(L,"LI",{});var R3e=s(Qm);Tte=n(R3e,"STRONG",{});var FHr=s(Tte);tYe=r(FHr,"segformer"),FHr.forEach(t),aYe=r(R3e," \u2014 "),jS=n(R3e,"A",{href:!0});var THr=s(jS);nYe=r(THr,"SegformerConfig"),THr.forEach(t),sYe=r(R3e," (SegFormer model)"),R3e.forEach(t),lYe=i(L),Hm=n(L,"LI",{});var P3e=s(Hm);Mte=n(P3e,"STRONG",{});var MHr=s(Mte);iYe=r(MHr,"sew"),MHr.forEach(t),dYe=r(P3e," \u2014 "),DS=n(P3e,"A",{href:!0});var EHr=s(DS);cYe=r(EHr,"SEWConfig"),EHr.forEach(t),fYe=r(P3e," (SEW model)"),P3e.forEach(t),mYe=i(L),Um=n(L,"LI",{});var B3e=s(Um);Ete=n(B3e,"STRONG",{});var CHr=s(Ete);gYe=r(CHr,"sew-d"),CHr.forEach(t),hYe=r(B3e," \u2014 "),GS=n(B3e,"A",{href:!0});var wHr=s(GS);pYe=r(wHr,"SEWDConfig"),wHr.forEach(t),_Ye=r(B3e," (SEW-D model)"),B3e.forEach(t),uYe=i(L),Jm=n(L,"LI",{});var I3e=s(Jm);Cte=n(I3e,"STRONG",{});var AHr=s(Cte);bYe=r(AHr,"speech-encoder-decoder"),AHr.forEach(t),vYe=r(I3e," \u2014 "),OS=n(I3e,"A",{href:!0});var LHr=s(OS);FYe=r(LHr,"SpeechEncoderDecoderConfig"),LHr.forEach(t),TYe=r(I3e," (Speech Encoder decoder model)"),I3e.forEach(t),MYe=i(L),Ym=n(L,"LI",{});var N3e=s(Ym);wte=n(N3e,"STRONG",{});var yHr=s(wte);EYe=r(yHr,"speech_to_text"),yHr.forEach(t),CYe=r(N3e," \u2014 "),VS=n(N3e,"A",{href:!0});var xHr=s(VS);wYe=r(xHr,"Speech2TextConfig"),xHr.forEach(t),AYe=r(N3e," (Speech2Text model)"),N3e.forEach(t),LYe=i(L),Km=n(L,"LI",{});var q3e=s(Km);Ate=n(q3e,"STRONG",{});var $Hr=s(Ate);yYe=r($Hr,"speech_to_text_2"),$Hr.forEach(t),xYe=r(q3e," \u2014 "),XS=n(q3e,"A",{href:!0});var kHr=s(XS);$Ye=r(kHr,"Speech2Text2Config"),kHr.forEach(t),kYe=r(q3e," (Speech2Text2 model)"),q3e.forEach(t),SYe=i(L),Zm=n(L,"LI",{});var j3e=s(Zm);Lte=n(j3e,"STRONG",{});var SHr=s(Lte);RYe=r(SHr,"splinter"),SHr.forEach(t),PYe=r(j3e," \u2014 "),zS=n(j3e,"A",{href:!0});var RHr=s(zS);BYe=r(RHr,"SplinterConfig"),RHr.forEach(t),IYe=r(j3e," (Splinter model)"),j3e.forEach(t),NYe=i(L),eg=n(L,"LI",{});var D3e=s(eg);yte=n(D3e,"STRONG",{});var PHr=s(yte);qYe=r(PHr,"squeezebert"),PHr.forEach(t),jYe=r(D3e," \u2014 "),WS=n(D3e,"A",{href:!0});var BHr=s(WS);DYe=r(BHr,"SqueezeBertConfig"),BHr.forEach(t),GYe=r(D3e," (SqueezeBERT model)"),D3e.forEach(t),OYe=i(L),og=n(L,"LI",{});var G3e=s(og);xte=n(G3e,"STRONG",{});var IHr=s(xte);VYe=r(IHr,"swin"),IHr.forEach(t),XYe=r(G3e," \u2014 "),QS=n(G3e,"A",{href:!0});var NHr=s(QS);zYe=r(NHr,"SwinConfig"),NHr.forEach(t),WYe=r(G3e," (Swin Transformer model)"),G3e.forEach(t),QYe=i(L),rg=n(L,"LI",{});var O3e=s(rg);$te=n(O3e,"STRONG",{});var qHr=s($te);HYe=r(qHr,"t5"),qHr.forEach(t),UYe=r(O3e," \u2014 "),HS=n(O3e,"A",{href:!0});var jHr=s(HS);JYe=r(jHr,"T5Config"),jHr.forEach(t),YYe=r(O3e," (T5 model)"),O3e.forEach(t),KYe=i(L),tg=n(L,"LI",{});var V3e=s(tg);kte=n(V3e,"STRONG",{});var DHr=s(kte);ZYe=r(DHr,"tapas"),DHr.forEach(t),eKe=r(V3e," \u2014 "),US=n(V3e,"A",{href:!0});var GHr=s(US);oKe=r(GHr,"TapasConfig"),GHr.forEach(t),rKe=r(V3e," (TAPAS model)"),V3e.forEach(t),tKe=i(L),ag=n(L,"LI",{});var X3e=s(ag);Ste=n(X3e,"STRONG",{});var OHr=s(Ste);aKe=r(OHr,"trajectory_transformer"),OHr.forEach(t),nKe=r(X3e," \u2014 "),JS=n(X3e,"A",{href:!0});var VHr=s(JS);sKe=r(VHr,"TrajectoryTransformerConfig"),VHr.forEach(t),lKe=r(X3e," (Trajectory Transformer model)"),X3e.forEach(t),iKe=i(L),ng=n(L,"LI",{});var z3e=s(ng);Rte=n(z3e,"STRONG",{});var XHr=s(Rte);dKe=r(XHr,"transfo-xl"),XHr.forEach(t),cKe=r(z3e," \u2014 "),YS=n(z3e,"A",{href:!0});var zHr=s(YS);fKe=r(zHr,"TransfoXLConfig"),zHr.forEach(t),mKe=r(z3e," (Transformer-XL model)"),z3e.forEach(t),gKe=i(L),sg=n(L,"LI",{});var W3e=s(sg);Pte=n(W3e,"STRONG",{});var WHr=s(Pte);hKe=r(WHr,"trocr"),WHr.forEach(t),pKe=r(W3e," \u2014 "),KS=n(W3e,"A",{href:!0});var QHr=s(KS);_Ke=r(QHr,"TrOCRConfig"),QHr.forEach(t),uKe=r(W3e," (TrOCR model)"),W3e.forEach(t),bKe=i(L),lg=n(L,"LI",{});var Q3e=s(lg);Bte=n(Q3e,"STRONG",{});var HHr=s(Bte);vKe=r(HHr,"unispeech"),HHr.forEach(t),FKe=r(Q3e," \u2014 "),ZS=n(Q3e,"A",{href:!0});var UHr=s(ZS);TKe=r(UHr,"UniSpeechConfig"),UHr.forEach(t),MKe=r(Q3e," (UniSpeech model)"),Q3e.forEach(t),EKe=i(L),ig=n(L,"LI",{});var H3e=s(ig);Ite=n(H3e,"STRONG",{});var JHr=s(Ite);CKe=r(JHr,"unispeech-sat"),JHr.forEach(t),wKe=r(H3e," \u2014 "),eR=n(H3e,"A",{href:!0});var YHr=s(eR);AKe=r(YHr,"UniSpeechSatConfig"),YHr.forEach(t),LKe=r(H3e," (UniSpeechSat model)"),H3e.forEach(t),yKe=i(L),dg=n(L,"LI",{});var U3e=s(dg);Nte=n(U3e,"STRONG",{});var KHr=s(Nte);xKe=r(KHr,"van"),KHr.forEach(t),$Ke=r(U3e," \u2014 "),oR=n(U3e,"A",{href:!0});var ZHr=s(oR);kKe=r(ZHr,"VanConfig"),ZHr.forEach(t),SKe=r(U3e," (VAN model)"),U3e.forEach(t),RKe=i(L),cg=n(L,"LI",{});var J3e=s(cg);qte=n(J3e,"STRONG",{});var eUr=s(qte);PKe=r(eUr,"vilt"),eUr.forEach(t),BKe=r(J3e," \u2014 "),rR=n(J3e,"A",{href:!0});var oUr=s(rR);IKe=r(oUr,"ViltConfig"),oUr.forEach(t),NKe=r(J3e," (ViLT model)"),J3e.forEach(t),qKe=i(L),fg=n(L,"LI",{});var Y3e=s(fg);jte=n(Y3e,"STRONG",{});var rUr=s(jte);jKe=r(rUr,"vision-encoder-decoder"),rUr.forEach(t),DKe=r(Y3e," \u2014 "),tR=n(Y3e,"A",{href:!0});var tUr=s(tR);GKe=r(tUr,"VisionEncoderDecoderConfig"),tUr.forEach(t),OKe=r(Y3e," (Vision Encoder decoder model)"),Y3e.forEach(t),VKe=i(L),mg=n(L,"LI",{});var K3e=s(mg);Dte=n(K3e,"STRONG",{});var aUr=s(Dte);XKe=r(aUr,"vision-text-dual-encoder"),aUr.forEach(t),zKe=r(K3e," \u2014 "),aR=n(K3e,"A",{href:!0});var nUr=s(aR);WKe=r(nUr,"VisionTextDualEncoderConfig"),nUr.forEach(t),QKe=r(K3e," (VisionTextDualEncoder model)"),K3e.forEach(t),HKe=i(L),gg=n(L,"LI",{});var Z3e=s(gg);Gte=n(Z3e,"STRONG",{});var sUr=s(Gte);UKe=r(sUr,"visual_bert"),sUr.forEach(t),JKe=r(Z3e," \u2014 "),nR=n(Z3e,"A",{href:!0});var lUr=s(nR);YKe=r(lUr,"VisualBertConfig"),lUr.forEach(t),KKe=r(Z3e," (VisualBERT model)"),Z3e.forEach(t),ZKe=i(L),hg=n(L,"LI",{});var e0e=s(hg);Ote=n(e0e,"STRONG",{});var iUr=s(Ote);eZe=r(iUr,"vit"),iUr.forEach(t),oZe=r(e0e," \u2014 "),sR=n(e0e,"A",{href:!0});var dUr=s(sR);rZe=r(dUr,"ViTConfig"),dUr.forEach(t),tZe=r(e0e," (ViT model)"),e0e.forEach(t),aZe=i(L),pg=n(L,"LI",{});var o0e=s(pg);Vte=n(o0e,"STRONG",{});var cUr=s(Vte);nZe=r(cUr,"vit_mae"),cUr.forEach(t),sZe=r(o0e," \u2014 "),lR=n(o0e,"A",{href:!0});var fUr=s(lR);lZe=r(fUr,"ViTMAEConfig"),fUr.forEach(t),iZe=r(o0e," (ViTMAE model)"),o0e.forEach(t),dZe=i(L),_g=n(L,"LI",{});var r0e=s(_g);Xte=n(r0e,"STRONG",{});var mUr=s(Xte);cZe=r(mUr,"wav2vec2"),mUr.forEach(t),fZe=r(r0e," \u2014 "),iR=n(r0e,"A",{href:!0});var gUr=s(iR);mZe=r(gUr,"Wav2Vec2Config"),gUr.forEach(t),gZe=r(r0e," (Wav2Vec2 model)"),r0e.forEach(t),hZe=i(L),ug=n(L,"LI",{});var t0e=s(ug);zte=n(t0e,"STRONG",{});var hUr=s(zte);pZe=r(hUr,"wav2vec2-conformer"),hUr.forEach(t),_Ze=r(t0e," \u2014 "),dR=n(t0e,"A",{href:!0});var pUr=s(dR);uZe=r(pUr,"Wav2Vec2ConformerConfig"),pUr.forEach(t),bZe=r(t0e," (Wav2Vec2-Conformer model)"),t0e.forEach(t),vZe=i(L),bg=n(L,"LI",{});var a0e=s(bg);Wte=n(a0e,"STRONG",{});var _Ur=s(Wte);FZe=r(_Ur,"wavlm"),_Ur.forEach(t),TZe=r(a0e," \u2014 "),cR=n(a0e,"A",{href:!0});var uUr=s(cR);MZe=r(uUr,"WavLMConfig"),uUr.forEach(t),EZe=r(a0e," (WavLM model)"),a0e.forEach(t),CZe=i(L),vg=n(L,"LI",{});var n0e=s(vg);Qte=n(n0e,"STRONG",{});var bUr=s(Qte);wZe=r(bUr,"xglm"),bUr.forEach(t),AZe=r(n0e," \u2014 "),fR=n(n0e,"A",{href:!0});var vUr=s(fR);LZe=r(vUr,"XGLMConfig"),vUr.forEach(t),yZe=r(n0e," (XGLM model)"),n0e.forEach(t),xZe=i(L),Fg=n(L,"LI",{});var s0e=s(Fg);Hte=n(s0e,"STRONG",{});var FUr=s(Hte);$Ze=r(FUr,"xlm"),FUr.forEach(t),kZe=r(s0e," \u2014 "),mR=n(s0e,"A",{href:!0});var TUr=s(mR);SZe=r(TUr,"XLMConfig"),TUr.forEach(t),RZe=r(s0e," (XLM model)"),s0e.forEach(t),PZe=i(L),Tg=n(L,"LI",{});var l0e=s(Tg);Ute=n(l0e,"STRONG",{});var MUr=s(Ute);BZe=r(MUr,"xlm-prophetnet"),MUr.forEach(t),IZe=r(l0e," \u2014 "),gR=n(l0e,"A",{href:!0});var EUr=s(gR);NZe=r(EUr,"XLMProphetNetConfig"),EUr.forEach(t),qZe=r(l0e," (XLM-ProphetNet model)"),l0e.forEach(t),jZe=i(L),Mg=n(L,"LI",{});var i0e=s(Mg);Jte=n(i0e,"STRONG",{});var CUr=s(Jte);DZe=r(CUr,"xlm-roberta"),CUr.forEach(t),GZe=r(i0e," \u2014 "),hR=n(i0e,"A",{href:!0});var wUr=s(hR);OZe=r(wUr,"XLMRobertaConfig"),wUr.forEach(t),VZe=r(i0e," (XLM-RoBERTa model)"),i0e.forEach(t),XZe=i(L),Eg=n(L,"LI",{});var d0e=s(Eg);Yte=n(d0e,"STRONG",{});var AUr=s(Yte);zZe=r(AUr,"xlm-roberta-xl"),AUr.forEach(t),WZe=r(d0e," \u2014 "),pR=n(d0e,"A",{href:!0});var LUr=s(pR);QZe=r(LUr,"XLMRobertaXLConfig"),LUr.forEach(t),HZe=r(d0e," (XLM-RoBERTa-XL model)"),d0e.forEach(t),UZe=i(L),Cg=n(L,"LI",{});var c0e=s(Cg);Kte=n(c0e,"STRONG",{});var yUr=s(Kte);JZe=r(yUr,"xlnet"),yUr.forEach(t),YZe=r(c0e," \u2014 "),_R=n(c0e,"A",{href:!0});var xUr=s(_R);KZe=r(xUr,"XLNetConfig"),xUr.forEach(t),ZZe=r(c0e," (XLNet model)"),c0e.forEach(t),eeo=i(L),wg=n(L,"LI",{});var f0e=s(wg);Zte=n(f0e,"STRONG",{});var $Ur=s(Zte);oeo=r($Ur,"yolos"),$Ur.forEach(t),reo=r(f0e," \u2014 "),uR=n(f0e,"A",{href:!0});var kUr=s(uR);teo=r(kUr,"YolosConfig"),kUr.forEach(t),aeo=r(f0e," (YOLOS model)"),f0e.forEach(t),neo=i(L),Ag=n(L,"LI",{});var m0e=s(Ag);eae=n(m0e,"STRONG",{});var SUr=s(eae);seo=r(SUr,"yoso"),SUr.forEach(t),leo=r(m0e," \u2014 "),bR=n(m0e,"A",{href:!0});var RUr=s(bR);ieo=r(RUr,"YosoConfig"),RUr.forEach(t),deo=r(m0e," (YOSO model)"),m0e.forEach(t),L.forEach(t),ceo=i(ot),T(Lg.$$.fragment,ot),ot.forEach(t),feo=i(et),yg=n(et,"DIV",{class:!0});var hGe=s(yg);T(Jw.$$.fragment,hGe),meo=i(hGe),oae=n(hGe,"P",{});var PUr=s(oae);geo=r(PUr,"Register a new configuration for this class."),PUr.forEach(t),hGe.forEach(t),et.forEach(t),uje=i(f),Ei=n(f,"H2",{class:!0});var pGe=s(Ei);xg=n(pGe,"A",{id:!0,class:!0,href:!0});var BUr=s(xg);rae=n(BUr,"SPAN",{});var IUr=s(rae);T(Yw.$$.fragment,IUr),IUr.forEach(t),BUr.forEach(t),heo=i(pGe),tae=n(pGe,"SPAN",{});var NUr=s(tae);peo=r(NUr,"AutoTokenizer"),NUr.forEach(t),pGe.forEach(t),bje=i(f),wo=n(f,"DIV",{class:!0});var js=s(wo);T(Kw.$$.fragment,js),_eo=i(js),Zw=n(js,"P",{});var _Ge=s(Zw);ueo=r(_Ge,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),vR=n(_Ge,"A",{href:!0});var qUr=s(vR);beo=r(qUr,"AutoTokenizer.from_pretrained()"),qUr.forEach(t),veo=r(_Ge," class method."),_Ge.forEach(t),Feo=i(js),eA=n(js,"P",{});var uGe=s(eA);Teo=r(uGe,"This class cannot be instantiated directly using "),aae=n(uGe,"CODE",{});var jUr=s(aae);Meo=r(jUr,"__init__()"),jUr.forEach(t),Eeo=r(uGe," (throws an error)."),uGe.forEach(t),Ceo=i(js),Cr=n(js,"DIV",{class:!0});var Ds=s(Cr);T(oA.$$.fragment,Ds),weo=i(Ds),nae=n(Ds,"P",{});var DUr=s(nae);Aeo=r(DUr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),DUr.forEach(t),Leo=i(Ds),Aa=n(Ds,"P",{});var z3=s(Aa);yeo=r(z3,"The tokenizer class to instantiate is selected based on the "),sae=n(z3,"CODE",{});var GUr=s(sae);xeo=r(GUr,"model_type"),GUr.forEach(t),$eo=r(z3,` property of the config object (either
passed as an argument or loaded from `),lae=n(z3,"CODE",{});var OUr=s(lae);keo=r(OUr,"pretrained_model_name_or_path"),OUr.forEach(t),Seo=r(z3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iae=n(z3,"CODE",{});var VUr=s(iae);Reo=r(VUr,"pretrained_model_name_or_path"),VUr.forEach(t),Peo=r(z3,":"),z3.forEach(t),Beo=i(Ds),k=n(Ds,"UL",{});var S=s(k);Sn=n(S,"LI",{});var r$=s(Sn);dae=n(r$,"STRONG",{});var XUr=s(dae);Ieo=r(XUr,"albert"),XUr.forEach(t),Neo=r(r$," \u2014 "),FR=n(r$,"A",{href:!0});var zUr=s(FR);qeo=r(zUr,"AlbertTokenizer"),zUr.forEach(t),jeo=r(r$," or "),TR=n(r$,"A",{href:!0});var WUr=s(TR);Deo=r(WUr,"AlbertTokenizerFast"),WUr.forEach(t),Geo=r(r$," (ALBERT model)"),r$.forEach(t),Oeo=i(S),Rn=n(S,"LI",{});var t$=s(Rn);cae=n(t$,"STRONG",{});var QUr=s(cae);Veo=r(QUr,"bart"),QUr.forEach(t),Xeo=r(t$," \u2014 "),MR=n(t$,"A",{href:!0});var HUr=s(MR);zeo=r(HUr,"BartTokenizer"),HUr.forEach(t),Weo=r(t$," or "),ER=n(t$,"A",{href:!0});var UUr=s(ER);Qeo=r(UUr,"BartTokenizerFast"),UUr.forEach(t),Heo=r(t$," (BART model)"),t$.forEach(t),Ueo=i(S),Pn=n(S,"LI",{});var a$=s(Pn);fae=n(a$,"STRONG",{});var JUr=s(fae);Jeo=r(JUr,"barthez"),JUr.forEach(t),Yeo=r(a$," \u2014 "),CR=n(a$,"A",{href:!0});var YUr=s(CR);Keo=r(YUr,"BarthezTokenizer"),YUr.forEach(t),Zeo=r(a$," or "),wR=n(a$,"A",{href:!0});var KUr=s(wR);eoo=r(KUr,"BarthezTokenizerFast"),KUr.forEach(t),ooo=r(a$," (BARThez model)"),a$.forEach(t),roo=i(S),$g=n(S,"LI",{});var g0e=s($g);mae=n(g0e,"STRONG",{});var ZUr=s(mae);too=r(ZUr,"bartpho"),ZUr.forEach(t),aoo=r(g0e," \u2014 "),AR=n(g0e,"A",{href:!0});var eJr=s(AR);noo=r(eJr,"BartphoTokenizer"),eJr.forEach(t),soo=r(g0e," (BARTpho model)"),g0e.forEach(t),loo=i(S),Bn=n(S,"LI",{});var n$=s(Bn);gae=n(n$,"STRONG",{});var oJr=s(gae);ioo=r(oJr,"bert"),oJr.forEach(t),doo=r(n$," \u2014 "),LR=n(n$,"A",{href:!0});var rJr=s(LR);coo=r(rJr,"BertTokenizer"),rJr.forEach(t),foo=r(n$," or "),yR=n(n$,"A",{href:!0});var tJr=s(yR);moo=r(tJr,"BertTokenizerFast"),tJr.forEach(t),goo=r(n$," (BERT model)"),n$.forEach(t),hoo=i(S),kg=n(S,"LI",{});var h0e=s(kg);hae=n(h0e,"STRONG",{});var aJr=s(hae);poo=r(aJr,"bert-generation"),aJr.forEach(t),_oo=r(h0e," \u2014 "),xR=n(h0e,"A",{href:!0});var nJr=s(xR);uoo=r(nJr,"BertGenerationTokenizer"),nJr.forEach(t),boo=r(h0e," (Bert Generation model)"),h0e.forEach(t),voo=i(S),Sg=n(S,"LI",{});var p0e=s(Sg);pae=n(p0e,"STRONG",{});var sJr=s(pae);Foo=r(sJr,"bert-japanese"),sJr.forEach(t),Too=r(p0e," \u2014 "),$R=n(p0e,"A",{href:!0});var lJr=s($R);Moo=r(lJr,"BertJapaneseTokenizer"),lJr.forEach(t),Eoo=r(p0e," (BertJapanese model)"),p0e.forEach(t),Coo=i(S),Rg=n(S,"LI",{});var _0e=s(Rg);_ae=n(_0e,"STRONG",{});var iJr=s(_ae);woo=r(iJr,"bertweet"),iJr.forEach(t),Aoo=r(_0e," \u2014 "),kR=n(_0e,"A",{href:!0});var dJr=s(kR);Loo=r(dJr,"BertweetTokenizer"),dJr.forEach(t),yoo=r(_0e," (BERTweet model)"),_0e.forEach(t),xoo=i(S),In=n(S,"LI",{});var s$=s(In);uae=n(s$,"STRONG",{});var cJr=s(uae);$oo=r(cJr,"big_bird"),cJr.forEach(t),koo=r(s$," \u2014 "),SR=n(s$,"A",{href:!0});var fJr=s(SR);Soo=r(fJr,"BigBirdTokenizer"),fJr.forEach(t),Roo=r(s$," or "),RR=n(s$,"A",{href:!0});var mJr=s(RR);Poo=r(mJr,"BigBirdTokenizerFast"),mJr.forEach(t),Boo=r(s$," (BigBird model)"),s$.forEach(t),Ioo=i(S),Nn=n(S,"LI",{});var l$=s(Nn);bae=n(l$,"STRONG",{});var gJr=s(bae);Noo=r(gJr,"bigbird_pegasus"),gJr.forEach(t),qoo=r(l$," \u2014 "),PR=n(l$,"A",{href:!0});var hJr=s(PR);joo=r(hJr,"PegasusTokenizer"),hJr.forEach(t),Doo=r(l$," or "),BR=n(l$,"A",{href:!0});var pJr=s(BR);Goo=r(pJr,"PegasusTokenizerFast"),pJr.forEach(t),Ooo=r(l$," (BigBird-Pegasus model)"),l$.forEach(t),Voo=i(S),qn=n(S,"LI",{});var i$=s(qn);vae=n(i$,"STRONG",{});var _Jr=s(vae);Xoo=r(_Jr,"blenderbot"),_Jr.forEach(t),zoo=r(i$," \u2014 "),IR=n(i$,"A",{href:!0});var uJr=s(IR);Woo=r(uJr,"BlenderbotTokenizer"),uJr.forEach(t),Qoo=r(i$," or "),NR=n(i$,"A",{href:!0});var bJr=s(NR);Hoo=r(bJr,"BlenderbotTokenizerFast"),bJr.forEach(t),Uoo=r(i$," (Blenderbot model)"),i$.forEach(t),Joo=i(S),Pg=n(S,"LI",{});var u0e=s(Pg);Fae=n(u0e,"STRONG",{});var vJr=s(Fae);Yoo=r(vJr,"blenderbot-small"),vJr.forEach(t),Koo=r(u0e," \u2014 "),qR=n(u0e,"A",{href:!0});var FJr=s(qR);Zoo=r(FJr,"BlenderbotSmallTokenizer"),FJr.forEach(t),ero=r(u0e," (BlenderbotSmall model)"),u0e.forEach(t),oro=i(S),Bg=n(S,"LI",{});var b0e=s(Bg);Tae=n(b0e,"STRONG",{});var TJr=s(Tae);rro=r(TJr,"byt5"),TJr.forEach(t),tro=r(b0e," \u2014 "),jR=n(b0e,"A",{href:!0});var MJr=s(jR);aro=r(MJr,"ByT5Tokenizer"),MJr.forEach(t),nro=r(b0e," (ByT5 model)"),b0e.forEach(t),sro=i(S),jn=n(S,"LI",{});var d$=s(jn);Mae=n(d$,"STRONG",{});var EJr=s(Mae);lro=r(EJr,"camembert"),EJr.forEach(t),iro=r(d$," \u2014 "),DR=n(d$,"A",{href:!0});var CJr=s(DR);dro=r(CJr,"CamembertTokenizer"),CJr.forEach(t),cro=r(d$," or "),GR=n(d$,"A",{href:!0});var wJr=s(GR);fro=r(wJr,"CamembertTokenizerFast"),wJr.forEach(t),mro=r(d$," (CamemBERT model)"),d$.forEach(t),gro=i(S),Ig=n(S,"LI",{});var v0e=s(Ig);Eae=n(v0e,"STRONG",{});var AJr=s(Eae);hro=r(AJr,"canine"),AJr.forEach(t),pro=r(v0e," \u2014 "),OR=n(v0e,"A",{href:!0});var LJr=s(OR);_ro=r(LJr,"CanineTokenizer"),LJr.forEach(t),uro=r(v0e," (CANINE model)"),v0e.forEach(t),bro=i(S),Dn=n(S,"LI",{});var c$=s(Dn);Cae=n(c$,"STRONG",{});var yJr=s(Cae);vro=r(yJr,"clip"),yJr.forEach(t),Fro=r(c$," \u2014 "),VR=n(c$,"A",{href:!0});var xJr=s(VR);Tro=r(xJr,"CLIPTokenizer"),xJr.forEach(t),Mro=r(c$," or "),XR=n(c$,"A",{href:!0});var $Jr=s(XR);Ero=r($Jr,"CLIPTokenizerFast"),$Jr.forEach(t),Cro=r(c$," (CLIP model)"),c$.forEach(t),wro=i(S),Gn=n(S,"LI",{});var f$=s(Gn);wae=n(f$,"STRONG",{});var kJr=s(wae);Aro=r(kJr,"convbert"),kJr.forEach(t),Lro=r(f$," \u2014 "),zR=n(f$,"A",{href:!0});var SJr=s(zR);yro=r(SJr,"ConvBertTokenizer"),SJr.forEach(t),xro=r(f$," or "),WR=n(f$,"A",{href:!0});var RJr=s(WR);$ro=r(RJr,"ConvBertTokenizerFast"),RJr.forEach(t),kro=r(f$," (ConvBERT model)"),f$.forEach(t),Sro=i(S),On=n(S,"LI",{});var m$=s(On);Aae=n(m$,"STRONG",{});var PJr=s(Aae);Rro=r(PJr,"cpm"),PJr.forEach(t),Pro=r(m$," \u2014 "),QR=n(m$,"A",{href:!0});var BJr=s(QR);Bro=r(BJr,"CpmTokenizer"),BJr.forEach(t),Iro=r(m$," or "),HR=n(m$,"A",{href:!0});var IJr=s(HR);Nro=r(IJr,"CpmTokenizerFast"),IJr.forEach(t),qro=r(m$," (CPM model)"),m$.forEach(t),jro=i(S),Ng=n(S,"LI",{});var F0e=s(Ng);Lae=n(F0e,"STRONG",{});var NJr=s(Lae);Dro=r(NJr,"ctrl"),NJr.forEach(t),Gro=r(F0e," \u2014 "),UR=n(F0e,"A",{href:!0});var qJr=s(UR);Oro=r(qJr,"CTRLTokenizer"),qJr.forEach(t),Vro=r(F0e," (CTRL model)"),F0e.forEach(t),Xro=i(S),Vn=n(S,"LI",{});var g$=s(Vn);yae=n(g$,"STRONG",{});var jJr=s(yae);zro=r(jJr,"data2vec-text"),jJr.forEach(t),Wro=r(g$," \u2014 "),JR=n(g$,"A",{href:!0});var DJr=s(JR);Qro=r(DJr,"RobertaTokenizer"),DJr.forEach(t),Hro=r(g$," or "),YR=n(g$,"A",{href:!0});var GJr=s(YR);Uro=r(GJr,"RobertaTokenizerFast"),GJr.forEach(t),Jro=r(g$," (Data2VecText model)"),g$.forEach(t),Yro=i(S),Xn=n(S,"LI",{});var h$=s(Xn);xae=n(h$,"STRONG",{});var OJr=s(xae);Kro=r(OJr,"deberta"),OJr.forEach(t),Zro=r(h$," \u2014 "),KR=n(h$,"A",{href:!0});var VJr=s(KR);eto=r(VJr,"DebertaTokenizer"),VJr.forEach(t),oto=r(h$," or "),ZR=n(h$,"A",{href:!0});var XJr=s(ZR);rto=r(XJr,"DebertaTokenizerFast"),XJr.forEach(t),tto=r(h$," (DeBERTa model)"),h$.forEach(t),ato=i(S),zn=n(S,"LI",{});var p$=s(zn);$ae=n(p$,"STRONG",{});var zJr=s($ae);nto=r(zJr,"deberta-v2"),zJr.forEach(t),sto=r(p$," \u2014 "),eP=n(p$,"A",{href:!0});var WJr=s(eP);lto=r(WJr,"DebertaV2Tokenizer"),WJr.forEach(t),ito=r(p$," or "),oP=n(p$,"A",{href:!0});var QJr=s(oP);dto=r(QJr,"DebertaV2TokenizerFast"),QJr.forEach(t),cto=r(p$," (DeBERTa-v2 model)"),p$.forEach(t),fto=i(S),Wn=n(S,"LI",{});var _$=s(Wn);kae=n(_$,"STRONG",{});var HJr=s(kae);mto=r(HJr,"distilbert"),HJr.forEach(t),gto=r(_$," \u2014 "),rP=n(_$,"A",{href:!0});var UJr=s(rP);hto=r(UJr,"DistilBertTokenizer"),UJr.forEach(t),pto=r(_$," or "),tP=n(_$,"A",{href:!0});var JJr=s(tP);_to=r(JJr,"DistilBertTokenizerFast"),JJr.forEach(t),uto=r(_$," (DistilBERT model)"),_$.forEach(t),bto=i(S),Qn=n(S,"LI",{});var u$=s(Qn);Sae=n(u$,"STRONG",{});var YJr=s(Sae);vto=r(YJr,"dpr"),YJr.forEach(t),Fto=r(u$," \u2014 "),aP=n(u$,"A",{href:!0});var KJr=s(aP);Tto=r(KJr,"DPRQuestionEncoderTokenizer"),KJr.forEach(t),Mto=r(u$," or "),nP=n(u$,"A",{href:!0});var ZJr=s(nP);Eto=r(ZJr,"DPRQuestionEncoderTokenizerFast"),ZJr.forEach(t),Cto=r(u$," (DPR model)"),u$.forEach(t),wto=i(S),Hn=n(S,"LI",{});var b$=s(Hn);Rae=n(b$,"STRONG",{});var eYr=s(Rae);Ato=r(eYr,"electra"),eYr.forEach(t),Lto=r(b$," \u2014 "),sP=n(b$,"A",{href:!0});var oYr=s(sP);yto=r(oYr,"ElectraTokenizer"),oYr.forEach(t),xto=r(b$," or "),lP=n(b$,"A",{href:!0});var rYr=s(lP);$to=r(rYr,"ElectraTokenizerFast"),rYr.forEach(t),kto=r(b$," (ELECTRA model)"),b$.forEach(t),Sto=i(S),qg=n(S,"LI",{});var T0e=s(qg);Pae=n(T0e,"STRONG",{});var tYr=s(Pae);Rto=r(tYr,"flaubert"),tYr.forEach(t),Pto=r(T0e," \u2014 "),iP=n(T0e,"A",{href:!0});var aYr=s(iP);Bto=r(aYr,"FlaubertTokenizer"),aYr.forEach(t),Ito=r(T0e," (FlauBERT model)"),T0e.forEach(t),Nto=i(S),Un=n(S,"LI",{});var v$=s(Un);Bae=n(v$,"STRONG",{});var nYr=s(Bae);qto=r(nYr,"fnet"),nYr.forEach(t),jto=r(v$," \u2014 "),dP=n(v$,"A",{href:!0});var sYr=s(dP);Dto=r(sYr,"FNetTokenizer"),sYr.forEach(t),Gto=r(v$," or "),cP=n(v$,"A",{href:!0});var lYr=s(cP);Oto=r(lYr,"FNetTokenizerFast"),lYr.forEach(t),Vto=r(v$," (FNet model)"),v$.forEach(t),Xto=i(S),jg=n(S,"LI",{});var M0e=s(jg);Iae=n(M0e,"STRONG",{});var iYr=s(Iae);zto=r(iYr,"fsmt"),iYr.forEach(t),Wto=r(M0e," \u2014 "),fP=n(M0e,"A",{href:!0});var dYr=s(fP);Qto=r(dYr,"FSMTTokenizer"),dYr.forEach(t),Hto=r(M0e," (FairSeq Machine-Translation model)"),M0e.forEach(t),Uto=i(S),Jn=n(S,"LI",{});var F$=s(Jn);Nae=n(F$,"STRONG",{});var cYr=s(Nae);Jto=r(cYr,"funnel"),cYr.forEach(t),Yto=r(F$," \u2014 "),mP=n(F$,"A",{href:!0});var fYr=s(mP);Kto=r(fYr,"FunnelTokenizer"),fYr.forEach(t),Zto=r(F$," or "),gP=n(F$,"A",{href:!0});var mYr=s(gP);eao=r(mYr,"FunnelTokenizerFast"),mYr.forEach(t),oao=r(F$," (Funnel Transformer model)"),F$.forEach(t),rao=i(S),Yn=n(S,"LI",{});var T$=s(Yn);qae=n(T$,"STRONG",{});var gYr=s(qae);tao=r(gYr,"gpt2"),gYr.forEach(t),aao=r(T$," \u2014 "),hP=n(T$,"A",{href:!0});var hYr=s(hP);nao=r(hYr,"GPT2Tokenizer"),hYr.forEach(t),sao=r(T$," or "),pP=n(T$,"A",{href:!0});var pYr=s(pP);lao=r(pYr,"GPT2TokenizerFast"),pYr.forEach(t),iao=r(T$," (OpenAI GPT-2 model)"),T$.forEach(t),dao=i(S),Kn=n(S,"LI",{});var M$=s(Kn);jae=n(M$,"STRONG",{});var _Yr=s(jae);cao=r(_Yr,"gpt_neo"),_Yr.forEach(t),fao=r(M$," \u2014 "),_P=n(M$,"A",{href:!0});var uYr=s(_P);mao=r(uYr,"GPT2Tokenizer"),uYr.forEach(t),gao=r(M$," or "),uP=n(M$,"A",{href:!0});var bYr=s(uP);hao=r(bYr,"GPT2TokenizerFast"),bYr.forEach(t),pao=r(M$," (GPT Neo model)"),M$.forEach(t),_ao=i(S),Dg=n(S,"LI",{});var E0e=s(Dg);Dae=n(E0e,"STRONG",{});var vYr=s(Dae);uao=r(vYr,"gpt_neox"),vYr.forEach(t),bao=r(E0e," \u2014 "),bP=n(E0e,"A",{href:!0});var FYr=s(bP);vao=r(FYr,"GPTNeoXTokenizerFast"),FYr.forEach(t),Fao=r(E0e," (GPT NeoX model)"),E0e.forEach(t),Tao=i(S),Zn=n(S,"LI",{});var E$=s(Zn);Gae=n(E$,"STRONG",{});var TYr=s(Gae);Mao=r(TYr,"gptj"),TYr.forEach(t),Eao=r(E$," \u2014 "),vP=n(E$,"A",{href:!0});var MYr=s(vP);Cao=r(MYr,"GPT2Tokenizer"),MYr.forEach(t),wao=r(E$," or "),FP=n(E$,"A",{href:!0});var EYr=s(FP);Aao=r(EYr,"GPT2TokenizerFast"),EYr.forEach(t),Lao=r(E$," (GPT-J model)"),E$.forEach(t),yao=i(S),es=n(S,"LI",{});var C$=s(es);Oae=n(C$,"STRONG",{});var CYr=s(Oae);xao=r(CYr,"herbert"),CYr.forEach(t),$ao=r(C$," \u2014 "),TP=n(C$,"A",{href:!0});var wYr=s(TP);kao=r(wYr,"HerbertTokenizer"),wYr.forEach(t),Sao=r(C$," or "),MP=n(C$,"A",{href:!0});var AYr=s(MP);Rao=r(AYr,"HerbertTokenizerFast"),AYr.forEach(t),Pao=r(C$," (HerBERT model)"),C$.forEach(t),Bao=i(S),Gg=n(S,"LI",{});var C0e=s(Gg);Vae=n(C0e,"STRONG",{});var LYr=s(Vae);Iao=r(LYr,"hubert"),LYr.forEach(t),Nao=r(C0e," \u2014 "),EP=n(C0e,"A",{href:!0});var yYr=s(EP);qao=r(yYr,"Wav2Vec2CTCTokenizer"),yYr.forEach(t),jao=r(C0e," (Hubert model)"),C0e.forEach(t),Dao=i(S),os=n(S,"LI",{});var w$=s(os);Xae=n(w$,"STRONG",{});var xYr=s(Xae);Gao=r(xYr,"ibert"),xYr.forEach(t),Oao=r(w$," \u2014 "),CP=n(w$,"A",{href:!0});var $Yr=s(CP);Vao=r($Yr,"RobertaTokenizer"),$Yr.forEach(t),Xao=r(w$," or "),wP=n(w$,"A",{href:!0});var kYr=s(wP);zao=r(kYr,"RobertaTokenizerFast"),kYr.forEach(t),Wao=r(w$," (I-BERT model)"),w$.forEach(t),Qao=i(S),rs=n(S,"LI",{});var A$=s(rs);zae=n(A$,"STRONG",{});var SYr=s(zae);Hao=r(SYr,"layoutlm"),SYr.forEach(t),Uao=r(A$," \u2014 "),AP=n(A$,"A",{href:!0});var RYr=s(AP);Jao=r(RYr,"LayoutLMTokenizer"),RYr.forEach(t),Yao=r(A$," or "),LP=n(A$,"A",{href:!0});var PYr=s(LP);Kao=r(PYr,"LayoutLMTokenizerFast"),PYr.forEach(t),Zao=r(A$," (LayoutLM model)"),A$.forEach(t),eno=i(S),ts=n(S,"LI",{});var L$=s(ts);Wae=n(L$,"STRONG",{});var BYr=s(Wae);ono=r(BYr,"layoutlmv2"),BYr.forEach(t),rno=r(L$," \u2014 "),yP=n(L$,"A",{href:!0});var IYr=s(yP);tno=r(IYr,"LayoutLMv2Tokenizer"),IYr.forEach(t),ano=r(L$," or "),xP=n(L$,"A",{href:!0});var NYr=s(xP);nno=r(NYr,"LayoutLMv2TokenizerFast"),NYr.forEach(t),sno=r(L$," (LayoutLMv2 model)"),L$.forEach(t),lno=i(S),as=n(S,"LI",{});var y$=s(as);Qae=n(y$,"STRONG",{});var qYr=s(Qae);ino=r(qYr,"layoutlmv3"),qYr.forEach(t),dno=r(y$," \u2014 "),$P=n(y$,"A",{href:!0});var jYr=s($P);cno=r(jYr,"LayoutLMv3Tokenizer"),jYr.forEach(t),fno=r(y$," or "),kP=n(y$,"A",{href:!0});var DYr=s(kP);mno=r(DYr,"LayoutLMv3TokenizerFast"),DYr.forEach(t),gno=r(y$," (LayoutLMv3 model)"),y$.forEach(t),hno=i(S),ns=n(S,"LI",{});var x$=s(ns);Hae=n(x$,"STRONG",{});var GYr=s(Hae);pno=r(GYr,"layoutxlm"),GYr.forEach(t),_no=r(x$," \u2014 "),SP=n(x$,"A",{href:!0});var OYr=s(SP);uno=r(OYr,"LayoutXLMTokenizer"),OYr.forEach(t),bno=r(x$," or "),RP=n(x$,"A",{href:!0});var VYr=s(RP);vno=r(VYr,"LayoutXLMTokenizerFast"),VYr.forEach(t),Fno=r(x$," (LayoutXLM model)"),x$.forEach(t),Tno=i(S),ss=n(S,"LI",{});var $$=s(ss);Uae=n($$,"STRONG",{});var XYr=s(Uae);Mno=r(XYr,"led"),XYr.forEach(t),Eno=r($$," \u2014 "),PP=n($$,"A",{href:!0});var zYr=s(PP);Cno=r(zYr,"LEDTokenizer"),zYr.forEach(t),wno=r($$," or "),BP=n($$,"A",{href:!0});var WYr=s(BP);Ano=r(WYr,"LEDTokenizerFast"),WYr.forEach(t),Lno=r($$," (LED model)"),$$.forEach(t),yno=i(S),ls=n(S,"LI",{});var k$=s(ls);Jae=n(k$,"STRONG",{});var QYr=s(Jae);xno=r(QYr,"longformer"),QYr.forEach(t),$no=r(k$," \u2014 "),IP=n(k$,"A",{href:!0});var HYr=s(IP);kno=r(HYr,"LongformerTokenizer"),HYr.forEach(t),Sno=r(k$," or "),NP=n(k$,"A",{href:!0});var UYr=s(NP);Rno=r(UYr,"LongformerTokenizerFast"),UYr.forEach(t),Pno=r(k$," (Longformer model)"),k$.forEach(t),Bno=i(S),is=n(S,"LI",{});var S$=s(is);Yae=n(S$,"STRONG",{});var JYr=s(Yae);Ino=r(JYr,"longt5"),JYr.forEach(t),Nno=r(S$," \u2014 "),qP=n(S$,"A",{href:!0});var YYr=s(qP);qno=r(YYr,"T5Tokenizer"),YYr.forEach(t),jno=r(S$," or "),jP=n(S$,"A",{href:!0});var KYr=s(jP);Dno=r(KYr,"T5TokenizerFast"),KYr.forEach(t),Gno=r(S$," (LongT5 model)"),S$.forEach(t),Ono=i(S),Og=n(S,"LI",{});var w0e=s(Og);Kae=n(w0e,"STRONG",{});var ZYr=s(Kae);Vno=r(ZYr,"luke"),ZYr.forEach(t),Xno=r(w0e," \u2014 "),DP=n(w0e,"A",{href:!0});var eKr=s(DP);zno=r(eKr,"LukeTokenizer"),eKr.forEach(t),Wno=r(w0e," (LUKE model)"),w0e.forEach(t),Qno=i(S),ds=n(S,"LI",{});var R$=s(ds);Zae=n(R$,"STRONG",{});var oKr=s(Zae);Hno=r(oKr,"lxmert"),oKr.forEach(t),Uno=r(R$," \u2014 "),GP=n(R$,"A",{href:!0});var rKr=s(GP);Jno=r(rKr,"LxmertTokenizer"),rKr.forEach(t),Yno=r(R$," or "),OP=n(R$,"A",{href:!0});var tKr=s(OP);Kno=r(tKr,"LxmertTokenizerFast"),tKr.forEach(t),Zno=r(R$," (LXMERT model)"),R$.forEach(t),eso=i(S),Vg=n(S,"LI",{});var A0e=s(Vg);ene=n(A0e,"STRONG",{});var aKr=s(ene);oso=r(aKr,"m2m_100"),aKr.forEach(t),rso=r(A0e," \u2014 "),VP=n(A0e,"A",{href:!0});var nKr=s(VP);tso=r(nKr,"M2M100Tokenizer"),nKr.forEach(t),aso=r(A0e," (M2M100 model)"),A0e.forEach(t),nso=i(S),Xg=n(S,"LI",{});var L0e=s(Xg);one=n(L0e,"STRONG",{});var sKr=s(one);sso=r(sKr,"marian"),sKr.forEach(t),lso=r(L0e," \u2014 "),XP=n(L0e,"A",{href:!0});var lKr=s(XP);iso=r(lKr,"MarianTokenizer"),lKr.forEach(t),dso=r(L0e," (Marian model)"),L0e.forEach(t),cso=i(S),cs=n(S,"LI",{});var P$=s(cs);rne=n(P$,"STRONG",{});var iKr=s(rne);fso=r(iKr,"mbart"),iKr.forEach(t),mso=r(P$," \u2014 "),zP=n(P$,"A",{href:!0});var dKr=s(zP);gso=r(dKr,"MBartTokenizer"),dKr.forEach(t),hso=r(P$," or "),WP=n(P$,"A",{href:!0});var cKr=s(WP);pso=r(cKr,"MBartTokenizerFast"),cKr.forEach(t),_so=r(P$," (mBART model)"),P$.forEach(t),uso=i(S),fs=n(S,"LI",{});var B$=s(fs);tne=n(B$,"STRONG",{});var fKr=s(tne);bso=r(fKr,"mbart50"),fKr.forEach(t),vso=r(B$," \u2014 "),QP=n(B$,"A",{href:!0});var mKr=s(QP);Fso=r(mKr,"MBart50Tokenizer"),mKr.forEach(t),Tso=r(B$," or "),HP=n(B$,"A",{href:!0});var gKr=s(HP);Mso=r(gKr,"MBart50TokenizerFast"),gKr.forEach(t),Eso=r(B$," (mBART-50 model)"),B$.forEach(t),Cso=i(S),ms=n(S,"LI",{});var I$=s(ms);ane=n(I$,"STRONG",{});var hKr=s(ane);wso=r(hKr,"megatron-bert"),hKr.forEach(t),Aso=r(I$," \u2014 "),UP=n(I$,"A",{href:!0});var pKr=s(UP);Lso=r(pKr,"BertTokenizer"),pKr.forEach(t),yso=r(I$," or "),JP=n(I$,"A",{href:!0});var _Kr=s(JP);xso=r(_Kr,"BertTokenizerFast"),_Kr.forEach(t),$so=r(I$," (Megatron-BERT model)"),I$.forEach(t),kso=i(S),zg=n(S,"LI",{});var y0e=s(zg);nne=n(y0e,"STRONG",{});var uKr=s(nne);Sso=r(uKr,"mluke"),uKr.forEach(t),Rso=r(y0e," \u2014 "),YP=n(y0e,"A",{href:!0});var bKr=s(YP);Pso=r(bKr,"MLukeTokenizer"),bKr.forEach(t),Bso=r(y0e," (mLUKE model)"),y0e.forEach(t),Iso=i(S),gs=n(S,"LI",{});var N$=s(gs);sne=n(N$,"STRONG",{});var vKr=s(sne);Nso=r(vKr,"mobilebert"),vKr.forEach(t),qso=r(N$," \u2014 "),KP=n(N$,"A",{href:!0});var FKr=s(KP);jso=r(FKr,"MobileBertTokenizer"),FKr.forEach(t),Dso=r(N$," or "),ZP=n(N$,"A",{href:!0});var TKr=s(ZP);Gso=r(TKr,"MobileBertTokenizerFast"),TKr.forEach(t),Oso=r(N$," (MobileBERT model)"),N$.forEach(t),Vso=i(S),hs=n(S,"LI",{});var q$=s(hs);lne=n(q$,"STRONG",{});var MKr=s(lne);Xso=r(MKr,"mpnet"),MKr.forEach(t),zso=r(q$," \u2014 "),eB=n(q$,"A",{href:!0});var EKr=s(eB);Wso=r(EKr,"MPNetTokenizer"),EKr.forEach(t),Qso=r(q$," or "),oB=n(q$,"A",{href:!0});var CKr=s(oB);Hso=r(CKr,"MPNetTokenizerFast"),CKr.forEach(t),Uso=r(q$," (MPNet model)"),q$.forEach(t),Jso=i(S),ps=n(S,"LI",{});var j$=s(ps);ine=n(j$,"STRONG",{});var wKr=s(ine);Yso=r(wKr,"mt5"),wKr.forEach(t),Kso=r(j$," \u2014 "),rB=n(j$,"A",{href:!0});var AKr=s(rB);Zso=r(AKr,"MT5Tokenizer"),AKr.forEach(t),elo=r(j$," or "),tB=n(j$,"A",{href:!0});var LKr=s(tB);olo=r(LKr,"MT5TokenizerFast"),LKr.forEach(t),rlo=r(j$," (MT5 model)"),j$.forEach(t),tlo=i(S),_s=n(S,"LI",{});var D$=s(_s);dne=n(D$,"STRONG",{});var yKr=s(dne);alo=r(yKr,"nystromformer"),yKr.forEach(t),nlo=r(D$," \u2014 "),aB=n(D$,"A",{href:!0});var xKr=s(aB);slo=r(xKr,"AlbertTokenizer"),xKr.forEach(t),llo=r(D$," or "),nB=n(D$,"A",{href:!0});var $Kr=s(nB);ilo=r($Kr,"AlbertTokenizerFast"),$Kr.forEach(t),dlo=r(D$," (Nystr\xF6mformer model)"),D$.forEach(t),clo=i(S),us=n(S,"LI",{});var G$=s(us);cne=n(G$,"STRONG",{});var kKr=s(cne);flo=r(kKr,"openai-gpt"),kKr.forEach(t),mlo=r(G$," \u2014 "),sB=n(G$,"A",{href:!0});var SKr=s(sB);glo=r(SKr,"OpenAIGPTTokenizer"),SKr.forEach(t),hlo=r(G$," or "),lB=n(G$,"A",{href:!0});var RKr=s(lB);plo=r(RKr,"OpenAIGPTTokenizerFast"),RKr.forEach(t),_lo=r(G$," (OpenAI GPT model)"),G$.forEach(t),ulo=i(S),Wg=n(S,"LI",{});var x0e=s(Wg);fne=n(x0e,"STRONG",{});var PKr=s(fne);blo=r(PKr,"opt"),PKr.forEach(t),vlo=r(x0e," \u2014 "),iB=n(x0e,"A",{href:!0});var BKr=s(iB);Flo=r(BKr,"GPT2Tokenizer"),BKr.forEach(t),Tlo=r(x0e," (OPT model)"),x0e.forEach(t),Mlo=i(S),bs=n(S,"LI",{});var O$=s(bs);mne=n(O$,"STRONG",{});var IKr=s(mne);Elo=r(IKr,"pegasus"),IKr.forEach(t),Clo=r(O$," \u2014 "),dB=n(O$,"A",{href:!0});var NKr=s(dB);wlo=r(NKr,"PegasusTokenizer"),NKr.forEach(t),Alo=r(O$," or "),cB=n(O$,"A",{href:!0});var qKr=s(cB);Llo=r(qKr,"PegasusTokenizerFast"),qKr.forEach(t),ylo=r(O$," (Pegasus model)"),O$.forEach(t),xlo=i(S),Qg=n(S,"LI",{});var $0e=s(Qg);gne=n($0e,"STRONG",{});var jKr=s(gne);$lo=r(jKr,"perceiver"),jKr.forEach(t),klo=r($0e," \u2014 "),fB=n($0e,"A",{href:!0});var DKr=s(fB);Slo=r(DKr,"PerceiverTokenizer"),DKr.forEach(t),Rlo=r($0e," (Perceiver model)"),$0e.forEach(t),Plo=i(S),Hg=n(S,"LI",{});var k0e=s(Hg);hne=n(k0e,"STRONG",{});var GKr=s(hne);Blo=r(GKr,"phobert"),GKr.forEach(t),Ilo=r(k0e," \u2014 "),mB=n(k0e,"A",{href:!0});var OKr=s(mB);Nlo=r(OKr,"PhobertTokenizer"),OKr.forEach(t),qlo=r(k0e," (PhoBERT model)"),k0e.forEach(t),jlo=i(S),Ug=n(S,"LI",{});var S0e=s(Ug);pne=n(S0e,"STRONG",{});var VKr=s(pne);Dlo=r(VKr,"plbart"),VKr.forEach(t),Glo=r(S0e," \u2014 "),gB=n(S0e,"A",{href:!0});var XKr=s(gB);Olo=r(XKr,"PLBartTokenizer"),XKr.forEach(t),Vlo=r(S0e," (PLBart model)"),S0e.forEach(t),Xlo=i(S),Jg=n(S,"LI",{});var R0e=s(Jg);_ne=n(R0e,"STRONG",{});var zKr=s(_ne);zlo=r(zKr,"prophetnet"),zKr.forEach(t),Wlo=r(R0e," \u2014 "),hB=n(R0e,"A",{href:!0});var WKr=s(hB);Qlo=r(WKr,"ProphetNetTokenizer"),WKr.forEach(t),Hlo=r(R0e," (ProphetNet model)"),R0e.forEach(t),Ulo=i(S),vs=n(S,"LI",{});var V$=s(vs);une=n(V$,"STRONG",{});var QKr=s(une);Jlo=r(QKr,"qdqbert"),QKr.forEach(t),Ylo=r(V$," \u2014 "),pB=n(V$,"A",{href:!0});var HKr=s(pB);Klo=r(HKr,"BertTokenizer"),HKr.forEach(t),Zlo=r(V$," or "),_B=n(V$,"A",{href:!0});var UKr=s(_B);eio=r(UKr,"BertTokenizerFast"),UKr.forEach(t),oio=r(V$," (QDQBert model)"),V$.forEach(t),rio=i(S),Yg=n(S,"LI",{});var P0e=s(Yg);bne=n(P0e,"STRONG",{});var JKr=s(bne);tio=r(JKr,"rag"),JKr.forEach(t),aio=r(P0e," \u2014 "),uB=n(P0e,"A",{href:!0});var YKr=s(uB);nio=r(YKr,"RagTokenizer"),YKr.forEach(t),sio=r(P0e," (RAG model)"),P0e.forEach(t),lio=i(S),Fs=n(S,"LI",{});var X$=s(Fs);vne=n(X$,"STRONG",{});var KKr=s(vne);iio=r(KKr,"realm"),KKr.forEach(t),dio=r(X$," \u2014 "),bB=n(X$,"A",{href:!0});var ZKr=s(bB);cio=r(ZKr,"RealmTokenizer"),ZKr.forEach(t),fio=r(X$," or "),vB=n(X$,"A",{href:!0});var eZr=s(vB);mio=r(eZr,"RealmTokenizerFast"),eZr.forEach(t),gio=r(X$," (REALM model)"),X$.forEach(t),hio=i(S),Ts=n(S,"LI",{});var z$=s(Ts);Fne=n(z$,"STRONG",{});var oZr=s(Fne);pio=r(oZr,"reformer"),oZr.forEach(t),_io=r(z$," \u2014 "),FB=n(z$,"A",{href:!0});var rZr=s(FB);uio=r(rZr,"ReformerTokenizer"),rZr.forEach(t),bio=r(z$," or "),TB=n(z$,"A",{href:!0});var tZr=s(TB);vio=r(tZr,"ReformerTokenizerFast"),tZr.forEach(t),Fio=r(z$," (Reformer model)"),z$.forEach(t),Tio=i(S),Ms=n(S,"LI",{});var W$=s(Ms);Tne=n(W$,"STRONG",{});var aZr=s(Tne);Mio=r(aZr,"rembert"),aZr.forEach(t),Eio=r(W$," \u2014 "),MB=n(W$,"A",{href:!0});var nZr=s(MB);Cio=r(nZr,"RemBertTokenizer"),nZr.forEach(t),wio=r(W$," or "),EB=n(W$,"A",{href:!0});var sZr=s(EB);Aio=r(sZr,"RemBertTokenizerFast"),sZr.forEach(t),Lio=r(W$," (RemBERT model)"),W$.forEach(t),yio=i(S),Es=n(S,"LI",{});var Q$=s(Es);Mne=n(Q$,"STRONG",{});var lZr=s(Mne);xio=r(lZr,"retribert"),lZr.forEach(t),$io=r(Q$," \u2014 "),CB=n(Q$,"A",{href:!0});var iZr=s(CB);kio=r(iZr,"RetriBertTokenizer"),iZr.forEach(t),Sio=r(Q$," or "),wB=n(Q$,"A",{href:!0});var dZr=s(wB);Rio=r(dZr,"RetriBertTokenizerFast"),dZr.forEach(t),Pio=r(Q$," (RetriBERT model)"),Q$.forEach(t),Bio=i(S),Cs=n(S,"LI",{});var H$=s(Cs);Ene=n(H$,"STRONG",{});var cZr=s(Ene);Iio=r(cZr,"roberta"),cZr.forEach(t),Nio=r(H$," \u2014 "),AB=n(H$,"A",{href:!0});var fZr=s(AB);qio=r(fZr,"RobertaTokenizer"),fZr.forEach(t),jio=r(H$," or "),LB=n(H$,"A",{href:!0});var mZr=s(LB);Dio=r(mZr,"RobertaTokenizerFast"),mZr.forEach(t),Gio=r(H$," (RoBERTa model)"),H$.forEach(t),Oio=i(S),ws=n(S,"LI",{});var U$=s(ws);Cne=n(U$,"STRONG",{});var gZr=s(Cne);Vio=r(gZr,"roformer"),gZr.forEach(t),Xio=r(U$," \u2014 "),yB=n(U$,"A",{href:!0});var hZr=s(yB);zio=r(hZr,"RoFormerTokenizer"),hZr.forEach(t),Wio=r(U$," or "),xB=n(U$,"A",{href:!0});var pZr=s(xB);Qio=r(pZr,"RoFormerTokenizerFast"),pZr.forEach(t),Hio=r(U$," (RoFormer model)"),U$.forEach(t),Uio=i(S),Kg=n(S,"LI",{});var B0e=s(Kg);wne=n(B0e,"STRONG",{});var _Zr=s(wne);Jio=r(_Zr,"speech_to_text"),_Zr.forEach(t),Yio=r(B0e," \u2014 "),$B=n(B0e,"A",{href:!0});var uZr=s($B);Kio=r(uZr,"Speech2TextTokenizer"),uZr.forEach(t),Zio=r(B0e," (Speech2Text model)"),B0e.forEach(t),edo=i(S),Zg=n(S,"LI",{});var I0e=s(Zg);Ane=n(I0e,"STRONG",{});var bZr=s(Ane);odo=r(bZr,"speech_to_text_2"),bZr.forEach(t),rdo=r(I0e," \u2014 "),kB=n(I0e,"A",{href:!0});var vZr=s(kB);tdo=r(vZr,"Speech2Text2Tokenizer"),vZr.forEach(t),ado=r(I0e," (Speech2Text2 model)"),I0e.forEach(t),ndo=i(S),As=n(S,"LI",{});var J$=s(As);Lne=n(J$,"STRONG",{});var FZr=s(Lne);sdo=r(FZr,"splinter"),FZr.forEach(t),ldo=r(J$," \u2014 "),SB=n(J$,"A",{href:!0});var TZr=s(SB);ido=r(TZr,"SplinterTokenizer"),TZr.forEach(t),ddo=r(J$," or "),RB=n(J$,"A",{href:!0});var MZr=s(RB);cdo=r(MZr,"SplinterTokenizerFast"),MZr.forEach(t),fdo=r(J$," (Splinter model)"),J$.forEach(t),mdo=i(S),Ls=n(S,"LI",{});var Y$=s(Ls);yne=n(Y$,"STRONG",{});var EZr=s(yne);gdo=r(EZr,"squeezebert"),EZr.forEach(t),hdo=r(Y$," \u2014 "),PB=n(Y$,"A",{href:!0});var CZr=s(PB);pdo=r(CZr,"SqueezeBertTokenizer"),CZr.forEach(t),_do=r(Y$," or "),BB=n(Y$,"A",{href:!0});var wZr=s(BB);udo=r(wZr,"SqueezeBertTokenizerFast"),wZr.forEach(t),bdo=r(Y$," (SqueezeBERT model)"),Y$.forEach(t),vdo=i(S),ys=n(S,"LI",{});var K$=s(ys);xne=n(K$,"STRONG",{});var AZr=s(xne);Fdo=r(AZr,"t5"),AZr.forEach(t),Tdo=r(K$," \u2014 "),IB=n(K$,"A",{href:!0});var LZr=s(IB);Mdo=r(LZr,"T5Tokenizer"),LZr.forEach(t),Edo=r(K$," or "),NB=n(K$,"A",{href:!0});var yZr=s(NB);Cdo=r(yZr,"T5TokenizerFast"),yZr.forEach(t),wdo=r(K$," (T5 model)"),K$.forEach(t),Ado=i(S),eh=n(S,"LI",{});var N0e=s(eh);$ne=n(N0e,"STRONG",{});var xZr=s($ne);Ldo=r(xZr,"tapas"),xZr.forEach(t),ydo=r(N0e," \u2014 "),qB=n(N0e,"A",{href:!0});var $Zr=s(qB);xdo=r($Zr,"TapasTokenizer"),$Zr.forEach(t),$do=r(N0e," (TAPAS model)"),N0e.forEach(t),kdo=i(S),oh=n(S,"LI",{});var q0e=s(oh);kne=n(q0e,"STRONG",{});var kZr=s(kne);Sdo=r(kZr,"tapex"),kZr.forEach(t),Rdo=r(q0e," \u2014 "),jB=n(q0e,"A",{href:!0});var SZr=s(jB);Pdo=r(SZr,"TapexTokenizer"),SZr.forEach(t),Bdo=r(q0e," (TAPEX model)"),q0e.forEach(t),Ido=i(S),rh=n(S,"LI",{});var j0e=s(rh);Sne=n(j0e,"STRONG",{});var RZr=s(Sne);Ndo=r(RZr,"transfo-xl"),RZr.forEach(t),qdo=r(j0e," \u2014 "),DB=n(j0e,"A",{href:!0});var PZr=s(DB);jdo=r(PZr,"TransfoXLTokenizer"),PZr.forEach(t),Ddo=r(j0e," (Transformer-XL model)"),j0e.forEach(t),Gdo=i(S),xs=n(S,"LI",{});var Z$=s(xs);Rne=n(Z$,"STRONG",{});var BZr=s(Rne);Odo=r(BZr,"visual_bert"),BZr.forEach(t),Vdo=r(Z$," \u2014 "),GB=n(Z$,"A",{href:!0});var IZr=s(GB);Xdo=r(IZr,"BertTokenizer"),IZr.forEach(t),zdo=r(Z$," or "),OB=n(Z$,"A",{href:!0});var NZr=s(OB);Wdo=r(NZr,"BertTokenizerFast"),NZr.forEach(t),Qdo=r(Z$," (VisualBERT model)"),Z$.forEach(t),Hdo=i(S),th=n(S,"LI",{});var D0e=s(th);Pne=n(D0e,"STRONG",{});var qZr=s(Pne);Udo=r(qZr,"wav2vec2"),qZr.forEach(t),Jdo=r(D0e," \u2014 "),VB=n(D0e,"A",{href:!0});var jZr=s(VB);Ydo=r(jZr,"Wav2Vec2CTCTokenizer"),jZr.forEach(t),Kdo=r(D0e," (Wav2Vec2 model)"),D0e.forEach(t),Zdo=i(S),ah=n(S,"LI",{});var G0e=s(ah);Bne=n(G0e,"STRONG",{});var DZr=s(Bne);eco=r(DZr,"wav2vec2-conformer"),DZr.forEach(t),oco=r(G0e," \u2014 "),XB=n(G0e,"A",{href:!0});var GZr=s(XB);rco=r(GZr,"Wav2Vec2CTCTokenizer"),GZr.forEach(t),tco=r(G0e," (Wav2Vec2-Conformer model)"),G0e.forEach(t),aco=i(S),nh=n(S,"LI",{});var O0e=s(nh);Ine=n(O0e,"STRONG",{});var OZr=s(Ine);nco=r(OZr,"wav2vec2_phoneme"),OZr.forEach(t),sco=r(O0e," \u2014 "),zB=n(O0e,"A",{href:!0});var VZr=s(zB);lco=r(VZr,"Wav2Vec2PhonemeCTCTokenizer"),VZr.forEach(t),ico=r(O0e," (Wav2Vec2Phoneme model)"),O0e.forEach(t),dco=i(S),$s=n(S,"LI",{});var ek=s($s);Nne=n(ek,"STRONG",{});var XZr=s(Nne);cco=r(XZr,"xglm"),XZr.forEach(t),fco=r(ek," \u2014 "),WB=n(ek,"A",{href:!0});var zZr=s(WB);mco=r(zZr,"XGLMTokenizer"),zZr.forEach(t),gco=r(ek," or "),QB=n(ek,"A",{href:!0});var WZr=s(QB);hco=r(WZr,"XGLMTokenizerFast"),WZr.forEach(t),pco=r(ek," (XGLM model)"),ek.forEach(t),_co=i(S),sh=n(S,"LI",{});var V0e=s(sh);qne=n(V0e,"STRONG",{});var QZr=s(qne);uco=r(QZr,"xlm"),QZr.forEach(t),bco=r(V0e," \u2014 "),HB=n(V0e,"A",{href:!0});var HZr=s(HB);vco=r(HZr,"XLMTokenizer"),HZr.forEach(t),Fco=r(V0e," (XLM model)"),V0e.forEach(t),Tco=i(S),lh=n(S,"LI",{});var X0e=s(lh);jne=n(X0e,"STRONG",{});var UZr=s(jne);Mco=r(UZr,"xlm-prophetnet"),UZr.forEach(t),Eco=r(X0e," \u2014 "),UB=n(X0e,"A",{href:!0});var JZr=s(UB);Cco=r(JZr,"XLMProphetNetTokenizer"),JZr.forEach(t),wco=r(X0e," (XLM-ProphetNet model)"),X0e.forEach(t),Aco=i(S),ks=n(S,"LI",{});var ok=s(ks);Dne=n(ok,"STRONG",{});var YZr=s(Dne);Lco=r(YZr,"xlm-roberta"),YZr.forEach(t),yco=r(ok," \u2014 "),JB=n(ok,"A",{href:!0});var KZr=s(JB);xco=r(KZr,"XLMRobertaTokenizer"),KZr.forEach(t),$co=r(ok," or "),YB=n(ok,"A",{href:!0});var ZZr=s(YB);kco=r(ZZr,"XLMRobertaTokenizerFast"),ZZr.forEach(t),Sco=r(ok," (XLM-RoBERTa model)"),ok.forEach(t),Rco=i(S),Ss=n(S,"LI",{});var rk=s(Ss);Gne=n(rk,"STRONG",{});var eet=s(Gne);Pco=r(eet,"xlm-roberta-xl"),eet.forEach(t),Bco=r(rk," \u2014 "),KB=n(rk,"A",{href:!0});var oet=s(KB);Ico=r(oet,"RobertaTokenizer"),oet.forEach(t),Nco=r(rk," or "),ZB=n(rk,"A",{href:!0});var ret=s(ZB);qco=r(ret,"RobertaTokenizerFast"),ret.forEach(t),jco=r(rk," (XLM-RoBERTa-XL model)"),rk.forEach(t),Dco=i(S),Rs=n(S,"LI",{});var tk=s(Rs);One=n(tk,"STRONG",{});var tet=s(One);Gco=r(tet,"xlnet"),tet.forEach(t),Oco=r(tk," \u2014 "),eI=n(tk,"A",{href:!0});var aet=s(eI);Vco=r(aet,"XLNetTokenizer"),aet.forEach(t),Xco=r(tk," or "),oI=n(tk,"A",{href:!0});var net=s(oI);zco=r(net,"XLNetTokenizerFast"),net.forEach(t),Wco=r(tk," (XLNet model)"),tk.forEach(t),Qco=i(S),Ps=n(S,"LI",{});var ak=s(Ps);Vne=n(ak,"STRONG",{});var set=s(Vne);Hco=r(set,"yoso"),set.forEach(t),Uco=r(ak," \u2014 "),rI=n(ak,"A",{href:!0});var iet=s(rI);Jco=r(iet,"AlbertTokenizer"),iet.forEach(t),Yco=r(ak," or "),tI=n(ak,"A",{href:!0});var det=s(tI);Kco=r(det,"AlbertTokenizerFast"),det.forEach(t),Zco=r(ak," (YOSO model)"),ak.forEach(t),S.forEach(t),efo=i(Ds),T(ih.$$.fragment,Ds),Ds.forEach(t),ofo=i(js),dh=n(js,"DIV",{class:!0});var bGe=s(dh);T(rA.$$.fragment,bGe),rfo=i(bGe),Xne=n(bGe,"P",{});var cet=s(Xne);tfo=r(cet,"Register a new tokenizer in this mapping."),cet.forEach(t),bGe.forEach(t),js.forEach(t),vje=i(f),Ci=n(f,"H2",{class:!0});var vGe=s(Ci);ch=n(vGe,"A",{id:!0,class:!0,href:!0});var fet=s(ch);zne=n(fet,"SPAN",{});var met=s(zne);T(tA.$$.fragment,met),met.forEach(t),fet.forEach(t),afo=i(vGe),Wne=n(vGe,"SPAN",{});var get=s(Wne);nfo=r(get,"AutoFeatureExtractor"),get.forEach(t),vGe.forEach(t),Fje=i(f),Ao=n(f,"DIV",{class:!0});var Gs=s(Ao);T(aA.$$.fragment,Gs),sfo=i(Gs),nA=n(Gs,"P",{});var FGe=s(nA);lfo=r(FGe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),aI=n(FGe,"A",{href:!0});var het=s(aI);ifo=r(het,"AutoFeatureExtractor.from_pretrained()"),het.forEach(t),dfo=r(FGe," class method."),FGe.forEach(t),cfo=i(Gs),sA=n(Gs,"P",{});var TGe=s(sA);ffo=r(TGe,"This class cannot be instantiated directly using "),Qne=n(TGe,"CODE",{});var pet=s(Qne);mfo=r(pet,"__init__()"),pet.forEach(t),gfo=r(TGe," (throws an error)."),TGe.forEach(t),hfo=i(Gs),He=n(Gs,"DIV",{class:!0});var Zt=s(He);T(lA.$$.fragment,Zt),pfo=i(Zt),Hne=n(Zt,"P",{});var _et=s(Hne);_fo=r(_et,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),_et.forEach(t),ufo=i(Zt),La=n(Zt,"P",{});var W3=s(La);bfo=r(W3,"The feature extractor class to instantiate is selected based on the "),Une=n(W3,"CODE",{});var uet=s(Une);vfo=r(uet,"model_type"),uet.forEach(t),Ffo=r(W3,` property of the config object
(either passed as an argument or loaded from `),Jne=n(W3,"CODE",{});var bet=s(Jne);Tfo=r(bet,"pretrained_model_name_or_path"),bet.forEach(t),Mfo=r(W3,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Yne=n(W3,"CODE",{});var vet=s(Yne);Efo=r(vet,"pretrained_model_name_or_path"),vet.forEach(t),Cfo=r(W3,":"),W3.forEach(t),wfo=i(Zt),Y=n(Zt,"UL",{});var Z=s(Y);fh=n(Z,"LI",{});var z0e=s(fh);Kne=n(z0e,"STRONG",{});var Fet=s(Kne);Afo=r(Fet,"beit"),Fet.forEach(t),Lfo=r(z0e," \u2014 "),nI=n(z0e,"A",{href:!0});var Tet=s(nI);yfo=r(Tet,"BeitFeatureExtractor"),Tet.forEach(t),xfo=r(z0e," (BEiT model)"),z0e.forEach(t),$fo=i(Z),mh=n(Z,"LI",{});var W0e=s(mh);Zne=n(W0e,"STRONG",{});var Met=s(Zne);kfo=r(Met,"clip"),Met.forEach(t),Sfo=r(W0e," \u2014 "),sI=n(W0e,"A",{href:!0});var Eet=s(sI);Rfo=r(Eet,"CLIPFeatureExtractor"),Eet.forEach(t),Pfo=r(W0e," (CLIP model)"),W0e.forEach(t),Bfo=i(Z),gh=n(Z,"LI",{});var Q0e=s(gh);ese=n(Q0e,"STRONG",{});var Cet=s(ese);Ifo=r(Cet,"convnext"),Cet.forEach(t),Nfo=r(Q0e," \u2014 "),lI=n(Q0e,"A",{href:!0});var wet=s(lI);qfo=r(wet,"ConvNextFeatureExtractor"),wet.forEach(t),jfo=r(Q0e," (ConvNeXT model)"),Q0e.forEach(t),Dfo=i(Z),hh=n(Z,"LI",{});var H0e=s(hh);ose=n(H0e,"STRONG",{});var Aet=s(ose);Gfo=r(Aet,"cvt"),Aet.forEach(t),Ofo=r(H0e," \u2014 "),iI=n(H0e,"A",{href:!0});var Let=s(iI);Vfo=r(Let,"ConvNextFeatureExtractor"),Let.forEach(t),Xfo=r(H0e," (CvT model)"),H0e.forEach(t),zfo=i(Z),ph=n(Z,"LI",{});var U0e=s(ph);rse=n(U0e,"STRONG",{});var yet=s(rse);Wfo=r(yet,"data2vec-audio"),yet.forEach(t),Qfo=r(U0e," \u2014 "),dI=n(U0e,"A",{href:!0});var xet=s(dI);Hfo=r(xet,"Wav2Vec2FeatureExtractor"),xet.forEach(t),Ufo=r(U0e," (Data2VecAudio model)"),U0e.forEach(t),Jfo=i(Z),_h=n(Z,"LI",{});var J0e=s(_h);tse=n(J0e,"STRONG",{});var $et=s(tse);Yfo=r($et,"data2vec-vision"),$et.forEach(t),Kfo=r(J0e," \u2014 "),cI=n(J0e,"A",{href:!0});var ket=s(cI);Zfo=r(ket,"BeitFeatureExtractor"),ket.forEach(t),emo=r(J0e," (Data2VecVision model)"),J0e.forEach(t),omo=i(Z),uh=n(Z,"LI",{});var Y0e=s(uh);ase=n(Y0e,"STRONG",{});var Set=s(ase);rmo=r(Set,"deit"),Set.forEach(t),tmo=r(Y0e," \u2014 "),fI=n(Y0e,"A",{href:!0});var Ret=s(fI);amo=r(Ret,"DeiTFeatureExtractor"),Ret.forEach(t),nmo=r(Y0e," (DeiT model)"),Y0e.forEach(t),smo=i(Z),bh=n(Z,"LI",{});var K0e=s(bh);nse=n(K0e,"STRONG",{});var Pet=s(nse);lmo=r(Pet,"detr"),Pet.forEach(t),imo=r(K0e," \u2014 "),mI=n(K0e,"A",{href:!0});var Bet=s(mI);dmo=r(Bet,"DetrFeatureExtractor"),Bet.forEach(t),cmo=r(K0e," (DETR model)"),K0e.forEach(t),fmo=i(Z),vh=n(Z,"LI",{});var Z0e=s(vh);sse=n(Z0e,"STRONG",{});var Iet=s(sse);mmo=r(Iet,"dpt"),Iet.forEach(t),gmo=r(Z0e," \u2014 "),gI=n(Z0e,"A",{href:!0});var Net=s(gI);hmo=r(Net,"DPTFeatureExtractor"),Net.forEach(t),pmo=r(Z0e," (DPT model)"),Z0e.forEach(t),_mo=i(Z),Fh=n(Z,"LI",{});var ewe=s(Fh);lse=n(ewe,"STRONG",{});var qet=s(lse);umo=r(qet,"flava"),qet.forEach(t),bmo=r(ewe," \u2014 "),hI=n(ewe,"A",{href:!0});var jet=s(hI);vmo=r(jet,"FlavaFeatureExtractor"),jet.forEach(t),Fmo=r(ewe," (FLAVA model)"),ewe.forEach(t),Tmo=i(Z),Th=n(Z,"LI",{});var owe=s(Th);ise=n(owe,"STRONG",{});var Det=s(ise);Mmo=r(Det,"glpn"),Det.forEach(t),Emo=r(owe," \u2014 "),pI=n(owe,"A",{href:!0});var Get=s(pI);Cmo=r(Get,"GLPNFeatureExtractor"),Get.forEach(t),wmo=r(owe," (GLPN model)"),owe.forEach(t),Amo=i(Z),Mh=n(Z,"LI",{});var rwe=s(Mh);dse=n(rwe,"STRONG",{});var Oet=s(dse);Lmo=r(Oet,"hubert"),Oet.forEach(t),ymo=r(rwe," \u2014 "),_I=n(rwe,"A",{href:!0});var Vet=s(_I);xmo=r(Vet,"Wav2Vec2FeatureExtractor"),Vet.forEach(t),$mo=r(rwe," (Hubert model)"),rwe.forEach(t),kmo=i(Z),Eh=n(Z,"LI",{});var twe=s(Eh);cse=n(twe,"STRONG",{});var Xet=s(cse);Smo=r(Xet,"imagegpt"),Xet.forEach(t),Rmo=r(twe," \u2014 "),uI=n(twe,"A",{href:!0});var zet=s(uI);Pmo=r(zet,"ImageGPTFeatureExtractor"),zet.forEach(t),Bmo=r(twe," (ImageGPT model)"),twe.forEach(t),Imo=i(Z),Ch=n(Z,"LI",{});var awe=s(Ch);fse=n(awe,"STRONG",{});var Wet=s(fse);Nmo=r(Wet,"layoutlmv2"),Wet.forEach(t),qmo=r(awe," \u2014 "),bI=n(awe,"A",{href:!0});var Qet=s(bI);jmo=r(Qet,"LayoutLMv2FeatureExtractor"),Qet.forEach(t),Dmo=r(awe," (LayoutLMv2 model)"),awe.forEach(t),Gmo=i(Z),wh=n(Z,"LI",{});var nwe=s(wh);mse=n(nwe,"STRONG",{});var Het=s(mse);Omo=r(Het,"layoutlmv3"),Het.forEach(t),Vmo=r(nwe," \u2014 "),vI=n(nwe,"A",{href:!0});var Uet=s(vI);Xmo=r(Uet,"LayoutLMv3FeatureExtractor"),Uet.forEach(t),zmo=r(nwe," (LayoutLMv3 model)"),nwe.forEach(t),Wmo=i(Z),Ah=n(Z,"LI",{});var swe=s(Ah);gse=n(swe,"STRONG",{});var Jet=s(gse);Qmo=r(Jet,"levit"),Jet.forEach(t),Hmo=r(swe," \u2014 "),FI=n(swe,"A",{href:!0});var Yet=s(FI);Umo=r(Yet,"LevitFeatureExtractor"),Yet.forEach(t),Jmo=r(swe," (LeViT model)"),swe.forEach(t),Ymo=i(Z),Lh=n(Z,"LI",{});var lwe=s(Lh);hse=n(lwe,"STRONG",{});var Ket=s(hse);Kmo=r(Ket,"maskformer"),Ket.forEach(t),Zmo=r(lwe," \u2014 "),TI=n(lwe,"A",{href:!0});var Zet=s(TI);ego=r(Zet,"MaskFormerFeatureExtractor"),Zet.forEach(t),ogo=r(lwe," (MaskFormer model)"),lwe.forEach(t),rgo=i(Z),yh=n(Z,"LI",{});var iwe=s(yh);pse=n(iwe,"STRONG",{});var eot=s(pse);tgo=r(eot,"perceiver"),eot.forEach(t),ago=r(iwe," \u2014 "),MI=n(iwe,"A",{href:!0});var oot=s(MI);ngo=r(oot,"PerceiverFeatureExtractor"),oot.forEach(t),sgo=r(iwe," (Perceiver model)"),iwe.forEach(t),lgo=i(Z),xh=n(Z,"LI",{});var dwe=s(xh);_se=n(dwe,"STRONG",{});var rot=s(_se);igo=r(rot,"poolformer"),rot.forEach(t),dgo=r(dwe," \u2014 "),EI=n(dwe,"A",{href:!0});var tot=s(EI);cgo=r(tot,"PoolFormerFeatureExtractor"),tot.forEach(t),fgo=r(dwe," (PoolFormer model)"),dwe.forEach(t),mgo=i(Z),$h=n(Z,"LI",{});var cwe=s($h);use=n(cwe,"STRONG",{});var aot=s(use);ggo=r(aot,"regnet"),aot.forEach(t),hgo=r(cwe," \u2014 "),CI=n(cwe,"A",{href:!0});var not=s(CI);pgo=r(not,"ConvNextFeatureExtractor"),not.forEach(t),_go=r(cwe," (RegNet model)"),cwe.forEach(t),ugo=i(Z),kh=n(Z,"LI",{});var fwe=s(kh);bse=n(fwe,"STRONG",{});var sot=s(bse);bgo=r(sot,"resnet"),sot.forEach(t),vgo=r(fwe," \u2014 "),wI=n(fwe,"A",{href:!0});var lot=s(wI);Fgo=r(lot,"ConvNextFeatureExtractor"),lot.forEach(t),Tgo=r(fwe," (ResNet model)"),fwe.forEach(t),Mgo=i(Z),Sh=n(Z,"LI",{});var mwe=s(Sh);vse=n(mwe,"STRONG",{});var iot=s(vse);Ego=r(iot,"segformer"),iot.forEach(t),Cgo=r(mwe," \u2014 "),AI=n(mwe,"A",{href:!0});var dot=s(AI);wgo=r(dot,"SegformerFeatureExtractor"),dot.forEach(t),Ago=r(mwe," (SegFormer model)"),mwe.forEach(t),Lgo=i(Z),Rh=n(Z,"LI",{});var gwe=s(Rh);Fse=n(gwe,"STRONG",{});var cot=s(Fse);ygo=r(cot,"speech_to_text"),cot.forEach(t),xgo=r(gwe," \u2014 "),LI=n(gwe,"A",{href:!0});var fot=s(LI);$go=r(fot,"Speech2TextFeatureExtractor"),fot.forEach(t),kgo=r(gwe," (Speech2Text model)"),gwe.forEach(t),Sgo=i(Z),Ph=n(Z,"LI",{});var hwe=s(Ph);Tse=n(hwe,"STRONG",{});var mot=s(Tse);Rgo=r(mot,"swin"),mot.forEach(t),Pgo=r(hwe," \u2014 "),yI=n(hwe,"A",{href:!0});var got=s(yI);Bgo=r(got,"ViTFeatureExtractor"),got.forEach(t),Igo=r(hwe," (Swin Transformer model)"),hwe.forEach(t),Ngo=i(Z),Bh=n(Z,"LI",{});var pwe=s(Bh);Mse=n(pwe,"STRONG",{});var hot=s(Mse);qgo=r(hot,"van"),hot.forEach(t),jgo=r(pwe," \u2014 "),xI=n(pwe,"A",{href:!0});var pot=s(xI);Dgo=r(pot,"ConvNextFeatureExtractor"),pot.forEach(t),Ggo=r(pwe," (VAN model)"),pwe.forEach(t),Ogo=i(Z),Ih=n(Z,"LI",{});var _we=s(Ih);Ese=n(_we,"STRONG",{});var _ot=s(Ese);Vgo=r(_ot,"vit"),_ot.forEach(t),Xgo=r(_we," \u2014 "),$I=n(_we,"A",{href:!0});var uot=s($I);zgo=r(uot,"ViTFeatureExtractor"),uot.forEach(t),Wgo=r(_we," (ViT model)"),_we.forEach(t),Qgo=i(Z),Nh=n(Z,"LI",{});var uwe=s(Nh);Cse=n(uwe,"STRONG",{});var bot=s(Cse);Hgo=r(bot,"vit_mae"),bot.forEach(t),Ugo=r(uwe," \u2014 "),kI=n(uwe,"A",{href:!0});var vot=s(kI);Jgo=r(vot,"ViTFeatureExtractor"),vot.forEach(t),Ygo=r(uwe," (ViTMAE model)"),uwe.forEach(t),Kgo=i(Z),qh=n(Z,"LI",{});var bwe=s(qh);wse=n(bwe,"STRONG",{});var Fot=s(wse);Zgo=r(Fot,"wav2vec2"),Fot.forEach(t),eho=r(bwe," \u2014 "),SI=n(bwe,"A",{href:!0});var Tot=s(SI);oho=r(Tot,"Wav2Vec2FeatureExtractor"),Tot.forEach(t),rho=r(bwe," (Wav2Vec2 model)"),bwe.forEach(t),tho=i(Z),jh=n(Z,"LI",{});var vwe=s(jh);Ase=n(vwe,"STRONG",{});var Mot=s(Ase);aho=r(Mot,"wav2vec2-conformer"),Mot.forEach(t),nho=r(vwe," \u2014 "),RI=n(vwe,"A",{href:!0});var Eot=s(RI);sho=r(Eot,"Wav2Vec2FeatureExtractor"),Eot.forEach(t),lho=r(vwe," (Wav2Vec2-Conformer model)"),vwe.forEach(t),iho=i(Z),Dh=n(Z,"LI",{});var Fwe=s(Dh);Lse=n(Fwe,"STRONG",{});var Cot=s(Lse);dho=r(Cot,"yolos"),Cot.forEach(t),cho=r(Fwe," \u2014 "),PI=n(Fwe,"A",{href:!0});var wot=s(PI);fho=r(wot,"YolosFeatureExtractor"),wot.forEach(t),mho=r(Fwe," (YOLOS model)"),Fwe.forEach(t),Z.forEach(t),gho=i(Zt),T(Gh.$$.fragment,Zt),hho=i(Zt),T(Oh.$$.fragment,Zt),Zt.forEach(t),pho=i(Gs),Vh=n(Gs,"DIV",{class:!0});var MGe=s(Vh);T(iA.$$.fragment,MGe),_ho=i(MGe),yse=n(MGe,"P",{});var Aot=s(yse);uho=r(Aot,"Register a new feature extractor for this class."),Aot.forEach(t),MGe.forEach(t),Gs.forEach(t),Tje=i(f),wi=n(f,"H2",{class:!0});var EGe=s(wi);Xh=n(EGe,"A",{id:!0,class:!0,href:!0});var Lot=s(Xh);xse=n(Lot,"SPAN",{});var yot=s(xse);T(dA.$$.fragment,yot),yot.forEach(t),Lot.forEach(t),bho=i(EGe),$se=n(EGe,"SPAN",{});var xot=s($se);vho=r(xot,"AutoProcessor"),xot.forEach(t),EGe.forEach(t),Mje=i(f),Lo=n(f,"DIV",{class:!0});var Os=s(Lo);T(cA.$$.fragment,Os),Fho=i(Os),fA=n(Os,"P",{});var CGe=s(fA);Tho=r(CGe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),BI=n(CGe,"A",{href:!0});var $ot=s(BI);Mho=r($ot,"AutoProcessor.from_pretrained()"),$ot.forEach(t),Eho=r(CGe," class method."),CGe.forEach(t),Cho=i(Os),mA=n(Os,"P",{});var wGe=s(mA);who=r(wGe,"This class cannot be instantiated directly using "),kse=n(wGe,"CODE",{});var kot=s(kse);Aho=r(kot,"__init__()"),kot.forEach(t),Lho=r(wGe," (throws an error)."),wGe.forEach(t),yho=i(Os),Ue=n(Os,"DIV",{class:!0});var ea=s(Ue);T(gA.$$.fragment,ea),xho=i(ea),Sse=n(ea,"P",{});var Sot=s(Sse);$ho=r(Sot,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Sot.forEach(t),kho=i(ea),Ai=n(ea,"P",{});var JZ=s(Ai);Sho=r(JZ,"The processor class to instantiate is selected based on the "),Rse=n(JZ,"CODE",{});var Rot=s(Rse);Rho=r(Rot,"model_type"),Rot.forEach(t),Pho=r(JZ,` property of the config object (either
passed as an argument or loaded from `),Pse=n(JZ,"CODE",{});var Pot=s(Pse);Bho=r(Pot,"pretrained_model_name_or_path"),Pot.forEach(t),Iho=r(JZ," if possible):"),JZ.forEach(t),Nho=i(ea),he=n(ea,"UL",{});var ue=s(he);zh=n(ue,"LI",{});var Twe=s(zh);Bse=n(Twe,"STRONG",{});var Bot=s(Bse);qho=r(Bot,"clip"),Bot.forEach(t),jho=r(Twe," \u2014 "),II=n(Twe,"A",{href:!0});var Iot=s(II);Dho=r(Iot,"CLIPProcessor"),Iot.forEach(t),Gho=r(Twe," (CLIP model)"),Twe.forEach(t),Oho=i(ue),Wh=n(ue,"LI",{});var Mwe=s(Wh);Ise=n(Mwe,"STRONG",{});var Not=s(Ise);Vho=r(Not,"flava"),Not.forEach(t),Xho=r(Mwe," \u2014 "),Nse=n(Mwe,"CODE",{});var qot=s(Nse);zho=r(qot,"FLAVAProcessor"),qot.forEach(t),Who=r(Mwe," (FLAVA model)"),Mwe.forEach(t),Qho=i(ue),Qh=n(ue,"LI",{});var Ewe=s(Qh);qse=n(Ewe,"STRONG",{});var jot=s(qse);Hho=r(jot,"layoutlmv2"),jot.forEach(t),Uho=r(Ewe," \u2014 "),NI=n(Ewe,"A",{href:!0});var Dot=s(NI);Jho=r(Dot,"LayoutLMv2Processor"),Dot.forEach(t),Yho=r(Ewe," (LayoutLMv2 model)"),Ewe.forEach(t),Kho=i(ue),Hh=n(ue,"LI",{});var Cwe=s(Hh);jse=n(Cwe,"STRONG",{});var Got=s(jse);Zho=r(Got,"layoutlmv3"),Got.forEach(t),epo=r(Cwe," \u2014 "),qI=n(Cwe,"A",{href:!0});var Oot=s(qI);opo=r(Oot,"LayoutLMv3Processor"),Oot.forEach(t),rpo=r(Cwe," (LayoutLMv3 model)"),Cwe.forEach(t),tpo=i(ue),Uh=n(ue,"LI",{});var wwe=s(Uh);Dse=n(wwe,"STRONG",{});var Vot=s(Dse);apo=r(Vot,"layoutxlm"),Vot.forEach(t),npo=r(wwe," \u2014 "),jI=n(wwe,"A",{href:!0});var Xot=s(jI);spo=r(Xot,"LayoutXLMProcessor"),Xot.forEach(t),lpo=r(wwe," (LayoutXLM model)"),wwe.forEach(t),ipo=i(ue),Jh=n(ue,"LI",{});var Awe=s(Jh);Gse=n(Awe,"STRONG",{});var zot=s(Gse);dpo=r(zot,"sew"),zot.forEach(t),cpo=r(Awe," \u2014 "),DI=n(Awe,"A",{href:!0});var Wot=s(DI);fpo=r(Wot,"Wav2Vec2Processor"),Wot.forEach(t),mpo=r(Awe," (SEW model)"),Awe.forEach(t),gpo=i(ue),Yh=n(ue,"LI",{});var Lwe=s(Yh);Ose=n(Lwe,"STRONG",{});var Qot=s(Ose);hpo=r(Qot,"sew-d"),Qot.forEach(t),ppo=r(Lwe," \u2014 "),GI=n(Lwe,"A",{href:!0});var Hot=s(GI);_po=r(Hot,"Wav2Vec2Processor"),Hot.forEach(t),upo=r(Lwe," (SEW-D model)"),Lwe.forEach(t),bpo=i(ue),Kh=n(ue,"LI",{});var ywe=s(Kh);Vse=n(ywe,"STRONG",{});var Uot=s(Vse);vpo=r(Uot,"speech_to_text"),Uot.forEach(t),Fpo=r(ywe," \u2014 "),OI=n(ywe,"A",{href:!0});var Jot=s(OI);Tpo=r(Jot,"Speech2TextProcessor"),Jot.forEach(t),Mpo=r(ywe," (Speech2Text model)"),ywe.forEach(t),Epo=i(ue),Zh=n(ue,"LI",{});var xwe=s(Zh);Xse=n(xwe,"STRONG",{});var Yot=s(Xse);Cpo=r(Yot,"speech_to_text_2"),Yot.forEach(t),wpo=r(xwe," \u2014 "),VI=n(xwe,"A",{href:!0});var Kot=s(VI);Apo=r(Kot,"Speech2Text2Processor"),Kot.forEach(t),Lpo=r(xwe," (Speech2Text2 model)"),xwe.forEach(t),ypo=i(ue),ep=n(ue,"LI",{});var $we=s(ep);zse=n($we,"STRONG",{});var Zot=s(zse);xpo=r(Zot,"trocr"),Zot.forEach(t),$po=r($we," \u2014 "),XI=n($we,"A",{href:!0});var ert=s(XI);kpo=r(ert,"TrOCRProcessor"),ert.forEach(t),Spo=r($we," (TrOCR model)"),$we.forEach(t),Rpo=i(ue),op=n(ue,"LI",{});var kwe=s(op);Wse=n(kwe,"STRONG",{});var ort=s(Wse);Ppo=r(ort,"unispeech"),ort.forEach(t),Bpo=r(kwe," \u2014 "),zI=n(kwe,"A",{href:!0});var rrt=s(zI);Ipo=r(rrt,"Wav2Vec2Processor"),rrt.forEach(t),Npo=r(kwe," (UniSpeech model)"),kwe.forEach(t),qpo=i(ue),rp=n(ue,"LI",{});var Swe=s(rp);Qse=n(Swe,"STRONG",{});var trt=s(Qse);jpo=r(trt,"unispeech-sat"),trt.forEach(t),Dpo=r(Swe," \u2014 "),WI=n(Swe,"A",{href:!0});var art=s(WI);Gpo=r(art,"Wav2Vec2Processor"),art.forEach(t),Opo=r(Swe," (UniSpeechSat model)"),Swe.forEach(t),Vpo=i(ue),tp=n(ue,"LI",{});var Rwe=s(tp);Hse=n(Rwe,"STRONG",{});var nrt=s(Hse);Xpo=r(nrt,"vilt"),nrt.forEach(t),zpo=r(Rwe," \u2014 "),QI=n(Rwe,"A",{href:!0});var srt=s(QI);Wpo=r(srt,"ViltProcessor"),srt.forEach(t),Qpo=r(Rwe," (ViLT model)"),Rwe.forEach(t),Hpo=i(ue),ap=n(ue,"LI",{});var Pwe=s(ap);Use=n(Pwe,"STRONG",{});var lrt=s(Use);Upo=r(lrt,"vision-text-dual-encoder"),lrt.forEach(t),Jpo=r(Pwe," \u2014 "),HI=n(Pwe,"A",{href:!0});var irt=s(HI);Ypo=r(irt,"VisionTextDualEncoderProcessor"),irt.forEach(t),Kpo=r(Pwe," (VisionTextDualEncoder model)"),Pwe.forEach(t),Zpo=i(ue),np=n(ue,"LI",{});var Bwe=s(np);Jse=n(Bwe,"STRONG",{});var drt=s(Jse);e_o=r(drt,"wav2vec2"),drt.forEach(t),o_o=r(Bwe," \u2014 "),UI=n(Bwe,"A",{href:!0});var crt=s(UI);r_o=r(crt,"Wav2Vec2Processor"),crt.forEach(t),t_o=r(Bwe," (Wav2Vec2 model)"),Bwe.forEach(t),a_o=i(ue),sp=n(ue,"LI",{});var Iwe=s(sp);Yse=n(Iwe,"STRONG",{});var frt=s(Yse);n_o=r(frt,"wav2vec2-conformer"),frt.forEach(t),s_o=r(Iwe," \u2014 "),JI=n(Iwe,"A",{href:!0});var mrt=s(JI);l_o=r(mrt,"Wav2Vec2Processor"),mrt.forEach(t),i_o=r(Iwe," (Wav2Vec2-Conformer model)"),Iwe.forEach(t),d_o=i(ue),lp=n(ue,"LI",{});var Nwe=s(lp);Kse=n(Nwe,"STRONG",{});var grt=s(Kse);c_o=r(grt,"wavlm"),grt.forEach(t),f_o=r(Nwe," \u2014 "),YI=n(Nwe,"A",{href:!0});var hrt=s(YI);m_o=r(hrt,"Wav2Vec2Processor"),hrt.forEach(t),g_o=r(Nwe," (WavLM model)"),Nwe.forEach(t),ue.forEach(t),h_o=i(ea),T(ip.$$.fragment,ea),p_o=i(ea),T(dp.$$.fragment,ea),ea.forEach(t),__o=i(Os),cp=n(Os,"DIV",{class:!0});var AGe=s(cp);T(hA.$$.fragment,AGe),u_o=i(AGe),Zse=n(AGe,"P",{});var prt=s(Zse);b_o=r(prt,"Register a new processor for this class."),prt.forEach(t),AGe.forEach(t),Os.forEach(t),Eje=i(f),Li=n(f,"H2",{class:!0});var LGe=s(Li);fp=n(LGe,"A",{id:!0,class:!0,href:!0});var _rt=s(fp);ele=n(_rt,"SPAN",{});var urt=s(ele);T(pA.$$.fragment,urt),urt.forEach(t),_rt.forEach(t),v_o=i(LGe),ole=n(LGe,"SPAN",{});var brt=s(ole);F_o=r(brt,"AutoModel"),brt.forEach(t),LGe.forEach(t),Cje=i(f),yo=n(f,"DIV",{class:!0});var Vs=s(yo);T(_A.$$.fragment,Vs),T_o=i(Vs),yi=n(Vs,"P",{});var YZ=s(yi);M_o=r(YZ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),KI=n(YZ,"A",{href:!0});var vrt=s(KI);E_o=r(vrt,"from_pretrained()"),vrt.forEach(t),C_o=r(YZ," class method or the "),ZI=n(YZ,"A",{href:!0});var Frt=s(ZI);w_o=r(Frt,"from_config()"),Frt.forEach(t),A_o=r(YZ,` class
method.`),YZ.forEach(t),L_o=i(Vs),uA=n(Vs,"P",{});var yGe=s(uA);y_o=r(yGe,"This class cannot be instantiated directly using "),rle=n(yGe,"CODE",{});var Trt=s(rle);x_o=r(Trt,"__init__()"),Trt.forEach(t),$_o=r(yGe," (throws an error)."),yGe.forEach(t),k_o=i(Vs),tt=n(Vs,"DIV",{class:!0});var Q3=s(tt);T(bA.$$.fragment,Q3),S_o=i(Q3),tle=n(Q3,"P",{});var Mrt=s(tle);R_o=r(Mrt,"Instantiates one of the base model classes of the library from a configuration."),Mrt.forEach(t),P_o=i(Q3),xi=n(Q3,"P",{});var KZ=s(xi);B_o=r(KZ,`Note:
Loading a model from its configuration file does `),ale=n(KZ,"STRONG",{});var Ert=s(ale);I_o=r(Ert,"not"),Ert.forEach(t),N_o=r(KZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),eN=n(KZ,"A",{href:!0});var Crt=s(eN);q_o=r(Crt,"from_pretrained()"),Crt.forEach(t),j_o=r(KZ," to load the model weights."),KZ.forEach(t),D_o=i(Q3),T(mp.$$.fragment,Q3),Q3.forEach(t),G_o=i(Vs),Je=n(Vs,"DIV",{class:!0});var oa=s(Je);T(vA.$$.fragment,oa),O_o=i(oa),nle=n(oa,"P",{});var wrt=s(nle);V_o=r(wrt,"Instantiate one of the base model classes of the library from a pretrained model."),wrt.forEach(t),X_o=i(oa),ya=n(oa,"P",{});var H3=s(ya);z_o=r(H3,"The model class to instantiate is selected based on the "),sle=n(H3,"CODE",{});var Art=s(sle);W_o=r(Art,"model_type"),Art.forEach(t),Q_o=r(H3,` property of the config object (either
passed as an argument or loaded from `),lle=n(H3,"CODE",{});var Lrt=s(lle);H_o=r(Lrt,"pretrained_model_name_or_path"),Lrt.forEach(t),U_o=r(H3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ile=n(H3,"CODE",{});var yrt=s(ile);J_o=r(yrt,"pretrained_model_name_or_path"),yrt.forEach(t),Y_o=r(H3,":"),H3.forEach(t),K_o=i(oa),x=n(oa,"UL",{});var $=s(x);gp=n($,"LI",{});var qwe=s(gp);dle=n(qwe,"STRONG",{});var xrt=s(dle);Z_o=r(xrt,"albert"),xrt.forEach(t),euo=r(qwe," \u2014 "),oN=n(qwe,"A",{href:!0});var $rt=s(oN);ouo=r($rt,"AlbertModel"),$rt.forEach(t),ruo=r(qwe," (ALBERT model)"),qwe.forEach(t),tuo=i($),hp=n($,"LI",{});var jwe=s(hp);cle=n(jwe,"STRONG",{});var krt=s(cle);auo=r(krt,"bart"),krt.forEach(t),nuo=r(jwe," \u2014 "),rN=n(jwe,"A",{href:!0});var Srt=s(rN);suo=r(Srt,"BartModel"),Srt.forEach(t),luo=r(jwe," (BART model)"),jwe.forEach(t),iuo=i($),pp=n($,"LI",{});var Dwe=s(pp);fle=n(Dwe,"STRONG",{});var Rrt=s(fle);duo=r(Rrt,"beit"),Rrt.forEach(t),cuo=r(Dwe," \u2014 "),tN=n(Dwe,"A",{href:!0});var Prt=s(tN);fuo=r(Prt,"BeitModel"),Prt.forEach(t),muo=r(Dwe," (BEiT model)"),Dwe.forEach(t),guo=i($),_p=n($,"LI",{});var Gwe=s(_p);mle=n(Gwe,"STRONG",{});var Brt=s(mle);huo=r(Brt,"bert"),Brt.forEach(t),puo=r(Gwe," \u2014 "),aN=n(Gwe,"A",{href:!0});var Irt=s(aN);_uo=r(Irt,"BertModel"),Irt.forEach(t),uuo=r(Gwe," (BERT model)"),Gwe.forEach(t),buo=i($),up=n($,"LI",{});var Owe=s(up);gle=n(Owe,"STRONG",{});var Nrt=s(gle);vuo=r(Nrt,"bert-generation"),Nrt.forEach(t),Fuo=r(Owe," \u2014 "),nN=n(Owe,"A",{href:!0});var qrt=s(nN);Tuo=r(qrt,"BertGenerationEncoder"),qrt.forEach(t),Muo=r(Owe," (Bert Generation model)"),Owe.forEach(t),Euo=i($),bp=n($,"LI",{});var Vwe=s(bp);hle=n(Vwe,"STRONG",{});var jrt=s(hle);Cuo=r(jrt,"big_bird"),jrt.forEach(t),wuo=r(Vwe," \u2014 "),sN=n(Vwe,"A",{href:!0});var Drt=s(sN);Auo=r(Drt,"BigBirdModel"),Drt.forEach(t),Luo=r(Vwe," (BigBird model)"),Vwe.forEach(t),yuo=i($),vp=n($,"LI",{});var Xwe=s(vp);ple=n(Xwe,"STRONG",{});var Grt=s(ple);xuo=r(Grt,"bigbird_pegasus"),Grt.forEach(t),$uo=r(Xwe," \u2014 "),lN=n(Xwe,"A",{href:!0});var Ort=s(lN);kuo=r(Ort,"BigBirdPegasusModel"),Ort.forEach(t),Suo=r(Xwe," (BigBird-Pegasus model)"),Xwe.forEach(t),Ruo=i($),Fp=n($,"LI",{});var zwe=s(Fp);_le=n(zwe,"STRONG",{});var Vrt=s(_le);Puo=r(Vrt,"blenderbot"),Vrt.forEach(t),Buo=r(zwe," \u2014 "),iN=n(zwe,"A",{href:!0});var Xrt=s(iN);Iuo=r(Xrt,"BlenderbotModel"),Xrt.forEach(t),Nuo=r(zwe," (Blenderbot model)"),zwe.forEach(t),quo=i($),Tp=n($,"LI",{});var Wwe=s(Tp);ule=n(Wwe,"STRONG",{});var zrt=s(ule);juo=r(zrt,"blenderbot-small"),zrt.forEach(t),Duo=r(Wwe," \u2014 "),dN=n(Wwe,"A",{href:!0});var Wrt=s(dN);Guo=r(Wrt,"BlenderbotSmallModel"),Wrt.forEach(t),Ouo=r(Wwe," (BlenderbotSmall model)"),Wwe.forEach(t),Vuo=i($),Mp=n($,"LI",{});var Qwe=s(Mp);ble=n(Qwe,"STRONG",{});var Qrt=s(ble);Xuo=r(Qrt,"camembert"),Qrt.forEach(t),zuo=r(Qwe," \u2014 "),cN=n(Qwe,"A",{href:!0});var Hrt=s(cN);Wuo=r(Hrt,"CamembertModel"),Hrt.forEach(t),Quo=r(Qwe," (CamemBERT model)"),Qwe.forEach(t),Huo=i($),Ep=n($,"LI",{});var Hwe=s(Ep);vle=n(Hwe,"STRONG",{});var Urt=s(vle);Uuo=r(Urt,"canine"),Urt.forEach(t),Juo=r(Hwe," \u2014 "),fN=n(Hwe,"A",{href:!0});var Jrt=s(fN);Yuo=r(Jrt,"CanineModel"),Jrt.forEach(t),Kuo=r(Hwe," (CANINE model)"),Hwe.forEach(t),Zuo=i($),Cp=n($,"LI",{});var Uwe=s(Cp);Fle=n(Uwe,"STRONG",{});var Yrt=s(Fle);e2o=r(Yrt,"clip"),Yrt.forEach(t),o2o=r(Uwe," \u2014 "),mN=n(Uwe,"A",{href:!0});var Krt=s(mN);r2o=r(Krt,"CLIPModel"),Krt.forEach(t),t2o=r(Uwe," (CLIP model)"),Uwe.forEach(t),a2o=i($),wp=n($,"LI",{});var Jwe=s(wp);Tle=n(Jwe,"STRONG",{});var Zrt=s(Tle);n2o=r(Zrt,"convbert"),Zrt.forEach(t),s2o=r(Jwe," \u2014 "),gN=n(Jwe,"A",{href:!0});var ett=s(gN);l2o=r(ett,"ConvBertModel"),ett.forEach(t),i2o=r(Jwe," (ConvBERT model)"),Jwe.forEach(t),d2o=i($),Ap=n($,"LI",{});var Ywe=s(Ap);Mle=n(Ywe,"STRONG",{});var ott=s(Mle);c2o=r(ott,"convnext"),ott.forEach(t),f2o=r(Ywe," \u2014 "),hN=n(Ywe,"A",{href:!0});var rtt=s(hN);m2o=r(rtt,"ConvNextModel"),rtt.forEach(t),g2o=r(Ywe," (ConvNeXT model)"),Ywe.forEach(t),h2o=i($),Lp=n($,"LI",{});var Kwe=s(Lp);Ele=n(Kwe,"STRONG",{});var ttt=s(Ele);p2o=r(ttt,"ctrl"),ttt.forEach(t),_2o=r(Kwe," \u2014 "),pN=n(Kwe,"A",{href:!0});var att=s(pN);u2o=r(att,"CTRLModel"),att.forEach(t),b2o=r(Kwe," (CTRL model)"),Kwe.forEach(t),v2o=i($),yp=n($,"LI",{});var Zwe=s(yp);Cle=n(Zwe,"STRONG",{});var ntt=s(Cle);F2o=r(ntt,"cvt"),ntt.forEach(t),T2o=r(Zwe," \u2014 "),_N=n(Zwe,"A",{href:!0});var stt=s(_N);M2o=r(stt,"CvtModel"),stt.forEach(t),E2o=r(Zwe," (CvT model)"),Zwe.forEach(t),C2o=i($),xp=n($,"LI",{});var eAe=s(xp);wle=n(eAe,"STRONG",{});var ltt=s(wle);w2o=r(ltt,"data2vec-audio"),ltt.forEach(t),A2o=r(eAe," \u2014 "),uN=n(eAe,"A",{href:!0});var itt=s(uN);L2o=r(itt,"Data2VecAudioModel"),itt.forEach(t),y2o=r(eAe," (Data2VecAudio model)"),eAe.forEach(t),x2o=i($),$p=n($,"LI",{});var oAe=s($p);Ale=n(oAe,"STRONG",{});var dtt=s(Ale);$2o=r(dtt,"data2vec-text"),dtt.forEach(t),k2o=r(oAe," \u2014 "),bN=n(oAe,"A",{href:!0});var ctt=s(bN);S2o=r(ctt,"Data2VecTextModel"),ctt.forEach(t),R2o=r(oAe," (Data2VecText model)"),oAe.forEach(t),P2o=i($),kp=n($,"LI",{});var rAe=s(kp);Lle=n(rAe,"STRONG",{});var ftt=s(Lle);B2o=r(ftt,"data2vec-vision"),ftt.forEach(t),I2o=r(rAe," \u2014 "),vN=n(rAe,"A",{href:!0});var mtt=s(vN);N2o=r(mtt,"Data2VecVisionModel"),mtt.forEach(t),q2o=r(rAe," (Data2VecVision model)"),rAe.forEach(t),j2o=i($),Sp=n($,"LI",{});var tAe=s(Sp);yle=n(tAe,"STRONG",{});var gtt=s(yle);D2o=r(gtt,"deberta"),gtt.forEach(t),G2o=r(tAe," \u2014 "),FN=n(tAe,"A",{href:!0});var htt=s(FN);O2o=r(htt,"DebertaModel"),htt.forEach(t),V2o=r(tAe," (DeBERTa model)"),tAe.forEach(t),X2o=i($),Rp=n($,"LI",{});var aAe=s(Rp);xle=n(aAe,"STRONG",{});var ptt=s(xle);z2o=r(ptt,"deberta-v2"),ptt.forEach(t),W2o=r(aAe," \u2014 "),TN=n(aAe,"A",{href:!0});var _tt=s(TN);Q2o=r(_tt,"DebertaV2Model"),_tt.forEach(t),H2o=r(aAe," (DeBERTa-v2 model)"),aAe.forEach(t),U2o=i($),Pp=n($,"LI",{});var nAe=s(Pp);$le=n(nAe,"STRONG",{});var utt=s($le);J2o=r(utt,"decision_transformer"),utt.forEach(t),Y2o=r(nAe," \u2014 "),MN=n(nAe,"A",{href:!0});var btt=s(MN);K2o=r(btt,"DecisionTransformerModel"),btt.forEach(t),Z2o=r(nAe," (Decision Transformer model)"),nAe.forEach(t),e1o=i($),Bp=n($,"LI",{});var sAe=s(Bp);kle=n(sAe,"STRONG",{});var vtt=s(kle);o1o=r(vtt,"deit"),vtt.forEach(t),r1o=r(sAe," \u2014 "),EN=n(sAe,"A",{href:!0});var Ftt=s(EN);t1o=r(Ftt,"DeiTModel"),Ftt.forEach(t),a1o=r(sAe," (DeiT model)"),sAe.forEach(t),n1o=i($),Ip=n($,"LI",{});var lAe=s(Ip);Sle=n(lAe,"STRONG",{});var Ttt=s(Sle);s1o=r(Ttt,"detr"),Ttt.forEach(t),l1o=r(lAe," \u2014 "),CN=n(lAe,"A",{href:!0});var Mtt=s(CN);i1o=r(Mtt,"DetrModel"),Mtt.forEach(t),d1o=r(lAe," (DETR model)"),lAe.forEach(t),c1o=i($),Np=n($,"LI",{});var iAe=s(Np);Rle=n(iAe,"STRONG",{});var Ett=s(Rle);f1o=r(Ett,"distilbert"),Ett.forEach(t),m1o=r(iAe," \u2014 "),wN=n(iAe,"A",{href:!0});var Ctt=s(wN);g1o=r(Ctt,"DistilBertModel"),Ctt.forEach(t),h1o=r(iAe," (DistilBERT model)"),iAe.forEach(t),p1o=i($),qp=n($,"LI",{});var dAe=s(qp);Ple=n(dAe,"STRONG",{});var wtt=s(Ple);_1o=r(wtt,"dpr"),wtt.forEach(t),u1o=r(dAe," \u2014 "),AN=n(dAe,"A",{href:!0});var Att=s(AN);b1o=r(Att,"DPRQuestionEncoder"),Att.forEach(t),v1o=r(dAe," (DPR model)"),dAe.forEach(t),F1o=i($),jp=n($,"LI",{});var cAe=s(jp);Ble=n(cAe,"STRONG",{});var Ltt=s(Ble);T1o=r(Ltt,"dpt"),Ltt.forEach(t),M1o=r(cAe," \u2014 "),LN=n(cAe,"A",{href:!0});var ytt=s(LN);E1o=r(ytt,"DPTModel"),ytt.forEach(t),C1o=r(cAe," (DPT model)"),cAe.forEach(t),w1o=i($),Dp=n($,"LI",{});var fAe=s(Dp);Ile=n(fAe,"STRONG",{});var xtt=s(Ile);A1o=r(xtt,"electra"),xtt.forEach(t),L1o=r(fAe," \u2014 "),yN=n(fAe,"A",{href:!0});var $tt=s(yN);y1o=r($tt,"ElectraModel"),$tt.forEach(t),x1o=r(fAe," (ELECTRA model)"),fAe.forEach(t),$1o=i($),Gp=n($,"LI",{});var mAe=s(Gp);Nle=n(mAe,"STRONG",{});var ktt=s(Nle);k1o=r(ktt,"flaubert"),ktt.forEach(t),S1o=r(mAe," \u2014 "),xN=n(mAe,"A",{href:!0});var Stt=s(xN);R1o=r(Stt,"FlaubertModel"),Stt.forEach(t),P1o=r(mAe," (FlauBERT model)"),mAe.forEach(t),B1o=i($),Op=n($,"LI",{});var gAe=s(Op);qle=n(gAe,"STRONG",{});var Rtt=s(qle);I1o=r(Rtt,"flava"),Rtt.forEach(t),N1o=r(gAe," \u2014 "),$N=n(gAe,"A",{href:!0});var Ptt=s($N);q1o=r(Ptt,"FlavaModel"),Ptt.forEach(t),j1o=r(gAe," (FLAVA model)"),gAe.forEach(t),D1o=i($),Vp=n($,"LI",{});var hAe=s(Vp);jle=n(hAe,"STRONG",{});var Btt=s(jle);G1o=r(Btt,"fnet"),Btt.forEach(t),O1o=r(hAe," \u2014 "),kN=n(hAe,"A",{href:!0});var Itt=s(kN);V1o=r(Itt,"FNetModel"),Itt.forEach(t),X1o=r(hAe," (FNet model)"),hAe.forEach(t),z1o=i($),Xp=n($,"LI",{});var pAe=s(Xp);Dle=n(pAe,"STRONG",{});var Ntt=s(Dle);W1o=r(Ntt,"fsmt"),Ntt.forEach(t),Q1o=r(pAe," \u2014 "),SN=n(pAe,"A",{href:!0});var qtt=s(SN);H1o=r(qtt,"FSMTModel"),qtt.forEach(t),U1o=r(pAe," (FairSeq Machine-Translation model)"),pAe.forEach(t),J1o=i($),Bs=n($,"LI",{});var nk=s(Bs);Gle=n(nk,"STRONG",{});var jtt=s(Gle);Y1o=r(jtt,"funnel"),jtt.forEach(t),K1o=r(nk," \u2014 "),RN=n(nk,"A",{href:!0});var Dtt=s(RN);Z1o=r(Dtt,"FunnelModel"),Dtt.forEach(t),ebo=r(nk," or "),PN=n(nk,"A",{href:!0});var Gtt=s(PN);obo=r(Gtt,"FunnelBaseModel"),Gtt.forEach(t),rbo=r(nk," (Funnel Transformer model)"),nk.forEach(t),tbo=i($),zp=n($,"LI",{});var _Ae=s(zp);Ole=n(_Ae,"STRONG",{});var Ott=s(Ole);abo=r(Ott,"glpn"),Ott.forEach(t),nbo=r(_Ae," \u2014 "),BN=n(_Ae,"A",{href:!0});var Vtt=s(BN);sbo=r(Vtt,"GLPNModel"),Vtt.forEach(t),lbo=r(_Ae," (GLPN model)"),_Ae.forEach(t),ibo=i($),Wp=n($,"LI",{});var uAe=s(Wp);Vle=n(uAe,"STRONG",{});var Xtt=s(Vle);dbo=r(Xtt,"gpt2"),Xtt.forEach(t),cbo=r(uAe," \u2014 "),IN=n(uAe,"A",{href:!0});var ztt=s(IN);fbo=r(ztt,"GPT2Model"),ztt.forEach(t),mbo=r(uAe," (OpenAI GPT-2 model)"),uAe.forEach(t),gbo=i($),Qp=n($,"LI",{});var bAe=s(Qp);Xle=n(bAe,"STRONG",{});var Wtt=s(Xle);hbo=r(Wtt,"gpt_neo"),Wtt.forEach(t),pbo=r(bAe," \u2014 "),NN=n(bAe,"A",{href:!0});var Qtt=s(NN);_bo=r(Qtt,"GPTNeoModel"),Qtt.forEach(t),ubo=r(bAe," (GPT Neo model)"),bAe.forEach(t),bbo=i($),Hp=n($,"LI",{});var vAe=s(Hp);zle=n(vAe,"STRONG",{});var Htt=s(zle);vbo=r(Htt,"gpt_neox"),Htt.forEach(t),Fbo=r(vAe," \u2014 "),qN=n(vAe,"A",{href:!0});var Utt=s(qN);Tbo=r(Utt,"GPTNeoXModel"),Utt.forEach(t),Mbo=r(vAe," (GPT NeoX model)"),vAe.forEach(t),Ebo=i($),Up=n($,"LI",{});var FAe=s(Up);Wle=n(FAe,"STRONG",{});var Jtt=s(Wle);Cbo=r(Jtt,"gptj"),Jtt.forEach(t),wbo=r(FAe," \u2014 "),jN=n(FAe,"A",{href:!0});var Ytt=s(jN);Abo=r(Ytt,"GPTJModel"),Ytt.forEach(t),Lbo=r(FAe," (GPT-J model)"),FAe.forEach(t),ybo=i($),Jp=n($,"LI",{});var TAe=s(Jp);Qle=n(TAe,"STRONG",{});var Ktt=s(Qle);xbo=r(Ktt,"hubert"),Ktt.forEach(t),$bo=r(TAe," \u2014 "),DN=n(TAe,"A",{href:!0});var Ztt=s(DN);kbo=r(Ztt,"HubertModel"),Ztt.forEach(t),Sbo=r(TAe," (Hubert model)"),TAe.forEach(t),Rbo=i($),Yp=n($,"LI",{});var MAe=s(Yp);Hle=n(MAe,"STRONG",{});var eat=s(Hle);Pbo=r(eat,"ibert"),eat.forEach(t),Bbo=r(MAe," \u2014 "),GN=n(MAe,"A",{href:!0});var oat=s(GN);Ibo=r(oat,"IBertModel"),oat.forEach(t),Nbo=r(MAe," (I-BERT model)"),MAe.forEach(t),qbo=i($),Kp=n($,"LI",{});var EAe=s(Kp);Ule=n(EAe,"STRONG",{});var rat=s(Ule);jbo=r(rat,"imagegpt"),rat.forEach(t),Dbo=r(EAe," \u2014 "),ON=n(EAe,"A",{href:!0});var tat=s(ON);Gbo=r(tat,"ImageGPTModel"),tat.forEach(t),Obo=r(EAe," (ImageGPT model)"),EAe.forEach(t),Vbo=i($),Zp=n($,"LI",{});var CAe=s(Zp);Jle=n(CAe,"STRONG",{});var aat=s(Jle);Xbo=r(aat,"layoutlm"),aat.forEach(t),zbo=r(CAe," \u2014 "),VN=n(CAe,"A",{href:!0});var nat=s(VN);Wbo=r(nat,"LayoutLMModel"),nat.forEach(t),Qbo=r(CAe," (LayoutLM model)"),CAe.forEach(t),Hbo=i($),e_=n($,"LI",{});var wAe=s(e_);Yle=n(wAe,"STRONG",{});var sat=s(Yle);Ubo=r(sat,"layoutlmv2"),sat.forEach(t),Jbo=r(wAe," \u2014 "),XN=n(wAe,"A",{href:!0});var lat=s(XN);Ybo=r(lat,"LayoutLMv2Model"),lat.forEach(t),Kbo=r(wAe," (LayoutLMv2 model)"),wAe.forEach(t),Zbo=i($),o_=n($,"LI",{});var AAe=s(o_);Kle=n(AAe,"STRONG",{});var iat=s(Kle);evo=r(iat,"layoutlmv3"),iat.forEach(t),ovo=r(AAe," \u2014 "),zN=n(AAe,"A",{href:!0});var dat=s(zN);rvo=r(dat,"LayoutLMv3Model"),dat.forEach(t),tvo=r(AAe," (LayoutLMv3 model)"),AAe.forEach(t),avo=i($),r_=n($,"LI",{});var LAe=s(r_);Zle=n(LAe,"STRONG",{});var cat=s(Zle);nvo=r(cat,"led"),cat.forEach(t),svo=r(LAe," \u2014 "),WN=n(LAe,"A",{href:!0});var fat=s(WN);lvo=r(fat,"LEDModel"),fat.forEach(t),ivo=r(LAe," (LED model)"),LAe.forEach(t),dvo=i($),t_=n($,"LI",{});var yAe=s(t_);eie=n(yAe,"STRONG",{});var mat=s(eie);cvo=r(mat,"levit"),mat.forEach(t),fvo=r(yAe," \u2014 "),QN=n(yAe,"A",{href:!0});var gat=s(QN);mvo=r(gat,"LevitModel"),gat.forEach(t),gvo=r(yAe," (LeViT model)"),yAe.forEach(t),hvo=i($),a_=n($,"LI",{});var xAe=s(a_);oie=n(xAe,"STRONG",{});var hat=s(oie);pvo=r(hat,"longformer"),hat.forEach(t),_vo=r(xAe," \u2014 "),HN=n(xAe,"A",{href:!0});var pat=s(HN);uvo=r(pat,"LongformerModel"),pat.forEach(t),bvo=r(xAe," (Longformer model)"),xAe.forEach(t),vvo=i($),n_=n($,"LI",{});var $Ae=s(n_);rie=n($Ae,"STRONG",{});var _at=s(rie);Fvo=r(_at,"longt5"),_at.forEach(t),Tvo=r($Ae," \u2014 "),UN=n($Ae,"A",{href:!0});var uat=s(UN);Mvo=r(uat,"LongT5Model"),uat.forEach(t),Evo=r($Ae," (LongT5 model)"),$Ae.forEach(t),Cvo=i($),s_=n($,"LI",{});var kAe=s(s_);tie=n(kAe,"STRONG",{});var bat=s(tie);wvo=r(bat,"luke"),bat.forEach(t),Avo=r(kAe," \u2014 "),JN=n(kAe,"A",{href:!0});var vat=s(JN);Lvo=r(vat,"LukeModel"),vat.forEach(t),yvo=r(kAe," (LUKE model)"),kAe.forEach(t),xvo=i($),l_=n($,"LI",{});var SAe=s(l_);aie=n(SAe,"STRONG",{});var Fat=s(aie);$vo=r(Fat,"lxmert"),Fat.forEach(t),kvo=r(SAe," \u2014 "),YN=n(SAe,"A",{href:!0});var Tat=s(YN);Svo=r(Tat,"LxmertModel"),Tat.forEach(t),Rvo=r(SAe," (LXMERT model)"),SAe.forEach(t),Pvo=i($),i_=n($,"LI",{});var RAe=s(i_);nie=n(RAe,"STRONG",{});var Mat=s(nie);Bvo=r(Mat,"m2m_100"),Mat.forEach(t),Ivo=r(RAe," \u2014 "),KN=n(RAe,"A",{href:!0});var Eat=s(KN);Nvo=r(Eat,"M2M100Model"),Eat.forEach(t),qvo=r(RAe," (M2M100 model)"),RAe.forEach(t),jvo=i($),d_=n($,"LI",{});var PAe=s(d_);sie=n(PAe,"STRONG",{});var Cat=s(sie);Dvo=r(Cat,"marian"),Cat.forEach(t),Gvo=r(PAe," \u2014 "),ZN=n(PAe,"A",{href:!0});var wat=s(ZN);Ovo=r(wat,"MarianModel"),wat.forEach(t),Vvo=r(PAe," (Marian model)"),PAe.forEach(t),Xvo=i($),c_=n($,"LI",{});var BAe=s(c_);lie=n(BAe,"STRONG",{});var Aat=s(lie);zvo=r(Aat,"maskformer"),Aat.forEach(t),Wvo=r(BAe," \u2014 "),eq=n(BAe,"A",{href:!0});var Lat=s(eq);Qvo=r(Lat,"MaskFormerModel"),Lat.forEach(t),Hvo=r(BAe," (MaskFormer model)"),BAe.forEach(t),Uvo=i($),f_=n($,"LI",{});var IAe=s(f_);iie=n(IAe,"STRONG",{});var yat=s(iie);Jvo=r(yat,"mbart"),yat.forEach(t),Yvo=r(IAe," \u2014 "),oq=n(IAe,"A",{href:!0});var xat=s(oq);Kvo=r(xat,"MBartModel"),xat.forEach(t),Zvo=r(IAe," (mBART model)"),IAe.forEach(t),eFo=i($),m_=n($,"LI",{});var NAe=s(m_);die=n(NAe,"STRONG",{});var $at=s(die);oFo=r($at,"megatron-bert"),$at.forEach(t),rFo=r(NAe," \u2014 "),rq=n(NAe,"A",{href:!0});var kat=s(rq);tFo=r(kat,"MegatronBertModel"),kat.forEach(t),aFo=r(NAe," (Megatron-BERT model)"),NAe.forEach(t),nFo=i($),g_=n($,"LI",{});var qAe=s(g_);cie=n(qAe,"STRONG",{});var Sat=s(cie);sFo=r(Sat,"mobilebert"),Sat.forEach(t),lFo=r(qAe," \u2014 "),tq=n(qAe,"A",{href:!0});var Rat=s(tq);iFo=r(Rat,"MobileBertModel"),Rat.forEach(t),dFo=r(qAe," (MobileBERT model)"),qAe.forEach(t),cFo=i($),h_=n($,"LI",{});var jAe=s(h_);fie=n(jAe,"STRONG",{});var Pat=s(fie);fFo=r(Pat,"mpnet"),Pat.forEach(t),mFo=r(jAe," \u2014 "),aq=n(jAe,"A",{href:!0});var Bat=s(aq);gFo=r(Bat,"MPNetModel"),Bat.forEach(t),hFo=r(jAe," (MPNet model)"),jAe.forEach(t),pFo=i($),p_=n($,"LI",{});var DAe=s(p_);mie=n(DAe,"STRONG",{});var Iat=s(mie);_Fo=r(Iat,"mt5"),Iat.forEach(t),uFo=r(DAe," \u2014 "),nq=n(DAe,"A",{href:!0});var Nat=s(nq);bFo=r(Nat,"MT5Model"),Nat.forEach(t),vFo=r(DAe," (MT5 model)"),DAe.forEach(t),FFo=i($),__=n($,"LI",{});var GAe=s(__);gie=n(GAe,"STRONG",{});var qat=s(gie);TFo=r(qat,"nystromformer"),qat.forEach(t),MFo=r(GAe," \u2014 "),sq=n(GAe,"A",{href:!0});var jat=s(sq);EFo=r(jat,"NystromformerModel"),jat.forEach(t),CFo=r(GAe," (Nystr\xF6mformer model)"),GAe.forEach(t),wFo=i($),u_=n($,"LI",{});var OAe=s(u_);hie=n(OAe,"STRONG",{});var Dat=s(hie);AFo=r(Dat,"openai-gpt"),Dat.forEach(t),LFo=r(OAe," \u2014 "),lq=n(OAe,"A",{href:!0});var Gat=s(lq);yFo=r(Gat,"OpenAIGPTModel"),Gat.forEach(t),xFo=r(OAe," (OpenAI GPT model)"),OAe.forEach(t),$Fo=i($),b_=n($,"LI",{});var VAe=s(b_);pie=n(VAe,"STRONG",{});var Oat=s(pie);kFo=r(Oat,"opt"),Oat.forEach(t),SFo=r(VAe," \u2014 "),iq=n(VAe,"A",{href:!0});var Vat=s(iq);RFo=r(Vat,"OPTModel"),Vat.forEach(t),PFo=r(VAe," (OPT model)"),VAe.forEach(t),BFo=i($),v_=n($,"LI",{});var XAe=s(v_);_ie=n(XAe,"STRONG",{});var Xat=s(_ie);IFo=r(Xat,"pegasus"),Xat.forEach(t),NFo=r(XAe," \u2014 "),dq=n(XAe,"A",{href:!0});var zat=s(dq);qFo=r(zat,"PegasusModel"),zat.forEach(t),jFo=r(XAe," (Pegasus model)"),XAe.forEach(t),DFo=i($),F_=n($,"LI",{});var zAe=s(F_);uie=n(zAe,"STRONG",{});var Wat=s(uie);GFo=r(Wat,"perceiver"),Wat.forEach(t),OFo=r(zAe," \u2014 "),cq=n(zAe,"A",{href:!0});var Qat=s(cq);VFo=r(Qat,"PerceiverModel"),Qat.forEach(t),XFo=r(zAe," (Perceiver model)"),zAe.forEach(t),zFo=i($),T_=n($,"LI",{});var WAe=s(T_);bie=n(WAe,"STRONG",{});var Hat=s(bie);WFo=r(Hat,"plbart"),Hat.forEach(t),QFo=r(WAe," \u2014 "),fq=n(WAe,"A",{href:!0});var Uat=s(fq);HFo=r(Uat,"PLBartModel"),Uat.forEach(t),UFo=r(WAe," (PLBart model)"),WAe.forEach(t),JFo=i($),M_=n($,"LI",{});var QAe=s(M_);vie=n(QAe,"STRONG",{});var Jat=s(vie);YFo=r(Jat,"poolformer"),Jat.forEach(t),KFo=r(QAe," \u2014 "),mq=n(QAe,"A",{href:!0});var Yat=s(mq);ZFo=r(Yat,"PoolFormerModel"),Yat.forEach(t),e6o=r(QAe," (PoolFormer model)"),QAe.forEach(t),o6o=i($),E_=n($,"LI",{});var HAe=s(E_);Fie=n(HAe,"STRONG",{});var Kat=s(Fie);r6o=r(Kat,"prophetnet"),Kat.forEach(t),t6o=r(HAe," \u2014 "),gq=n(HAe,"A",{href:!0});var Zat=s(gq);a6o=r(Zat,"ProphetNetModel"),Zat.forEach(t),n6o=r(HAe," (ProphetNet model)"),HAe.forEach(t),s6o=i($),C_=n($,"LI",{});var UAe=s(C_);Tie=n(UAe,"STRONG",{});var ent=s(Tie);l6o=r(ent,"qdqbert"),ent.forEach(t),i6o=r(UAe," \u2014 "),hq=n(UAe,"A",{href:!0});var ont=s(hq);d6o=r(ont,"QDQBertModel"),ont.forEach(t),c6o=r(UAe," (QDQBert model)"),UAe.forEach(t),f6o=i($),w_=n($,"LI",{});var JAe=s(w_);Mie=n(JAe,"STRONG",{});var rnt=s(Mie);m6o=r(rnt,"reformer"),rnt.forEach(t),g6o=r(JAe," \u2014 "),pq=n(JAe,"A",{href:!0});var tnt=s(pq);h6o=r(tnt,"ReformerModel"),tnt.forEach(t),p6o=r(JAe," (Reformer model)"),JAe.forEach(t),_6o=i($),A_=n($,"LI",{});var YAe=s(A_);Eie=n(YAe,"STRONG",{});var ant=s(Eie);u6o=r(ant,"regnet"),ant.forEach(t),b6o=r(YAe," \u2014 "),_q=n(YAe,"A",{href:!0});var nnt=s(_q);v6o=r(nnt,"RegNetModel"),nnt.forEach(t),F6o=r(YAe," (RegNet model)"),YAe.forEach(t),T6o=i($),L_=n($,"LI",{});var KAe=s(L_);Cie=n(KAe,"STRONG",{});var snt=s(Cie);M6o=r(snt,"rembert"),snt.forEach(t),E6o=r(KAe," \u2014 "),uq=n(KAe,"A",{href:!0});var lnt=s(uq);C6o=r(lnt,"RemBertModel"),lnt.forEach(t),w6o=r(KAe," (RemBERT model)"),KAe.forEach(t),A6o=i($),y_=n($,"LI",{});var ZAe=s(y_);wie=n(ZAe,"STRONG",{});var int=s(wie);L6o=r(int,"resnet"),int.forEach(t),y6o=r(ZAe," \u2014 "),bq=n(ZAe,"A",{href:!0});var dnt=s(bq);x6o=r(dnt,"ResNetModel"),dnt.forEach(t),$6o=r(ZAe," (ResNet model)"),ZAe.forEach(t),k6o=i($),x_=n($,"LI",{});var eLe=s(x_);Aie=n(eLe,"STRONG",{});var cnt=s(Aie);S6o=r(cnt,"retribert"),cnt.forEach(t),R6o=r(eLe," \u2014 "),vq=n(eLe,"A",{href:!0});var fnt=s(vq);P6o=r(fnt,"RetriBertModel"),fnt.forEach(t),B6o=r(eLe," (RetriBERT model)"),eLe.forEach(t),I6o=i($),$_=n($,"LI",{});var oLe=s($_);Lie=n(oLe,"STRONG",{});var mnt=s(Lie);N6o=r(mnt,"roberta"),mnt.forEach(t),q6o=r(oLe," \u2014 "),Fq=n(oLe,"A",{href:!0});var gnt=s(Fq);j6o=r(gnt,"RobertaModel"),gnt.forEach(t),D6o=r(oLe," (RoBERTa model)"),oLe.forEach(t),G6o=i($),k_=n($,"LI",{});var rLe=s(k_);yie=n(rLe,"STRONG",{});var hnt=s(yie);O6o=r(hnt,"roformer"),hnt.forEach(t),V6o=r(rLe," \u2014 "),Tq=n(rLe,"A",{href:!0});var pnt=s(Tq);X6o=r(pnt,"RoFormerModel"),pnt.forEach(t),z6o=r(rLe," (RoFormer model)"),rLe.forEach(t),W6o=i($),S_=n($,"LI",{});var tLe=s(S_);xie=n(tLe,"STRONG",{});var _nt=s(xie);Q6o=r(_nt,"segformer"),_nt.forEach(t),H6o=r(tLe," \u2014 "),Mq=n(tLe,"A",{href:!0});var unt=s(Mq);U6o=r(unt,"SegformerModel"),unt.forEach(t),J6o=r(tLe," (SegFormer model)"),tLe.forEach(t),Y6o=i($),R_=n($,"LI",{});var aLe=s(R_);$ie=n(aLe,"STRONG",{});var bnt=s($ie);K6o=r(bnt,"sew"),bnt.forEach(t),Z6o=r(aLe," \u2014 "),Eq=n(aLe,"A",{href:!0});var vnt=s(Eq);eTo=r(vnt,"SEWModel"),vnt.forEach(t),oTo=r(aLe," (SEW model)"),aLe.forEach(t),rTo=i($),P_=n($,"LI",{});var nLe=s(P_);kie=n(nLe,"STRONG",{});var Fnt=s(kie);tTo=r(Fnt,"sew-d"),Fnt.forEach(t),aTo=r(nLe," \u2014 "),Cq=n(nLe,"A",{href:!0});var Tnt=s(Cq);nTo=r(Tnt,"SEWDModel"),Tnt.forEach(t),sTo=r(nLe," (SEW-D model)"),nLe.forEach(t),lTo=i($),B_=n($,"LI",{});var sLe=s(B_);Sie=n(sLe,"STRONG",{});var Mnt=s(Sie);iTo=r(Mnt,"speech_to_text"),Mnt.forEach(t),dTo=r(sLe," \u2014 "),wq=n(sLe,"A",{href:!0});var Ent=s(wq);cTo=r(Ent,"Speech2TextModel"),Ent.forEach(t),fTo=r(sLe," (Speech2Text model)"),sLe.forEach(t),mTo=i($),I_=n($,"LI",{});var lLe=s(I_);Rie=n(lLe,"STRONG",{});var Cnt=s(Rie);gTo=r(Cnt,"splinter"),Cnt.forEach(t),hTo=r(lLe," \u2014 "),Aq=n(lLe,"A",{href:!0});var wnt=s(Aq);pTo=r(wnt,"SplinterModel"),wnt.forEach(t),_To=r(lLe," (Splinter model)"),lLe.forEach(t),uTo=i($),N_=n($,"LI",{});var iLe=s(N_);Pie=n(iLe,"STRONG",{});var Ant=s(Pie);bTo=r(Ant,"squeezebert"),Ant.forEach(t),vTo=r(iLe," \u2014 "),Lq=n(iLe,"A",{href:!0});var Lnt=s(Lq);FTo=r(Lnt,"SqueezeBertModel"),Lnt.forEach(t),TTo=r(iLe," (SqueezeBERT model)"),iLe.forEach(t),MTo=i($),q_=n($,"LI",{});var dLe=s(q_);Bie=n(dLe,"STRONG",{});var ynt=s(Bie);ETo=r(ynt,"swin"),ynt.forEach(t),CTo=r(dLe," \u2014 "),yq=n(dLe,"A",{href:!0});var xnt=s(yq);wTo=r(xnt,"SwinModel"),xnt.forEach(t),ATo=r(dLe," (Swin Transformer model)"),dLe.forEach(t),LTo=i($),j_=n($,"LI",{});var cLe=s(j_);Iie=n(cLe,"STRONG",{});var $nt=s(Iie);yTo=r($nt,"t5"),$nt.forEach(t),xTo=r(cLe," \u2014 "),xq=n(cLe,"A",{href:!0});var knt=s(xq);$To=r(knt,"T5Model"),knt.forEach(t),kTo=r(cLe," (T5 model)"),cLe.forEach(t),STo=i($),D_=n($,"LI",{});var fLe=s(D_);Nie=n(fLe,"STRONG",{});var Snt=s(Nie);RTo=r(Snt,"tapas"),Snt.forEach(t),PTo=r(fLe," \u2014 "),$q=n(fLe,"A",{href:!0});var Rnt=s($q);BTo=r(Rnt,"TapasModel"),Rnt.forEach(t),ITo=r(fLe," (TAPAS model)"),fLe.forEach(t),NTo=i($),G_=n($,"LI",{});var mLe=s(G_);qie=n(mLe,"STRONG",{});var Pnt=s(qie);qTo=r(Pnt,"trajectory_transformer"),Pnt.forEach(t),jTo=r(mLe," \u2014 "),kq=n(mLe,"A",{href:!0});var Bnt=s(kq);DTo=r(Bnt,"TrajectoryTransformerModel"),Bnt.forEach(t),GTo=r(mLe," (Trajectory Transformer model)"),mLe.forEach(t),OTo=i($),O_=n($,"LI",{});var gLe=s(O_);jie=n(gLe,"STRONG",{});var Int=s(jie);VTo=r(Int,"transfo-xl"),Int.forEach(t),XTo=r(gLe," \u2014 "),Sq=n(gLe,"A",{href:!0});var Nnt=s(Sq);zTo=r(Nnt,"TransfoXLModel"),Nnt.forEach(t),WTo=r(gLe," (Transformer-XL model)"),gLe.forEach(t),QTo=i($),V_=n($,"LI",{});var hLe=s(V_);Die=n(hLe,"STRONG",{});var qnt=s(Die);HTo=r(qnt,"unispeech"),qnt.forEach(t),UTo=r(hLe," \u2014 "),Rq=n(hLe,"A",{href:!0});var jnt=s(Rq);JTo=r(jnt,"UniSpeechModel"),jnt.forEach(t),YTo=r(hLe," (UniSpeech model)"),hLe.forEach(t),KTo=i($),X_=n($,"LI",{});var pLe=s(X_);Gie=n(pLe,"STRONG",{});var Dnt=s(Gie);ZTo=r(Dnt,"unispeech-sat"),Dnt.forEach(t),e7o=r(pLe," \u2014 "),Pq=n(pLe,"A",{href:!0});var Gnt=s(Pq);o7o=r(Gnt,"UniSpeechSatModel"),Gnt.forEach(t),r7o=r(pLe," (UniSpeechSat model)"),pLe.forEach(t),t7o=i($),z_=n($,"LI",{});var _Le=s(z_);Oie=n(_Le,"STRONG",{});var Ont=s(Oie);a7o=r(Ont,"van"),Ont.forEach(t),n7o=r(_Le," \u2014 "),Bq=n(_Le,"A",{href:!0});var Vnt=s(Bq);s7o=r(Vnt,"VanModel"),Vnt.forEach(t),l7o=r(_Le," (VAN model)"),_Le.forEach(t),i7o=i($),W_=n($,"LI",{});var uLe=s(W_);Vie=n(uLe,"STRONG",{});var Xnt=s(Vie);d7o=r(Xnt,"vilt"),Xnt.forEach(t),c7o=r(uLe," \u2014 "),Iq=n(uLe,"A",{href:!0});var znt=s(Iq);f7o=r(znt,"ViltModel"),znt.forEach(t),m7o=r(uLe," (ViLT model)"),uLe.forEach(t),g7o=i($),Q_=n($,"LI",{});var bLe=s(Q_);Xie=n(bLe,"STRONG",{});var Wnt=s(Xie);h7o=r(Wnt,"vision-text-dual-encoder"),Wnt.forEach(t),p7o=r(bLe," \u2014 "),Nq=n(bLe,"A",{href:!0});var Qnt=s(Nq);_7o=r(Qnt,"VisionTextDualEncoderModel"),Qnt.forEach(t),u7o=r(bLe," (VisionTextDualEncoder model)"),bLe.forEach(t),b7o=i($),H_=n($,"LI",{});var vLe=s(H_);zie=n(vLe,"STRONG",{});var Hnt=s(zie);v7o=r(Hnt,"visual_bert"),Hnt.forEach(t),F7o=r(vLe," \u2014 "),qq=n(vLe,"A",{href:!0});var Unt=s(qq);T7o=r(Unt,"VisualBertModel"),Unt.forEach(t),M7o=r(vLe," (VisualBERT model)"),vLe.forEach(t),E7o=i($),U_=n($,"LI",{});var FLe=s(U_);Wie=n(FLe,"STRONG",{});var Jnt=s(Wie);C7o=r(Jnt,"vit"),Jnt.forEach(t),w7o=r(FLe," \u2014 "),jq=n(FLe,"A",{href:!0});var Ynt=s(jq);A7o=r(Ynt,"ViTModel"),Ynt.forEach(t),L7o=r(FLe," (ViT model)"),FLe.forEach(t),y7o=i($),J_=n($,"LI",{});var TLe=s(J_);Qie=n(TLe,"STRONG",{});var Knt=s(Qie);x7o=r(Knt,"vit_mae"),Knt.forEach(t),$7o=r(TLe," \u2014 "),Dq=n(TLe,"A",{href:!0});var Znt=s(Dq);k7o=r(Znt,"ViTMAEModel"),Znt.forEach(t),S7o=r(TLe," (ViTMAE model)"),TLe.forEach(t),R7o=i($),Y_=n($,"LI",{});var MLe=s(Y_);Hie=n(MLe,"STRONG",{});var est=s(Hie);P7o=r(est,"wav2vec2"),est.forEach(t),B7o=r(MLe," \u2014 "),Gq=n(MLe,"A",{href:!0});var ost=s(Gq);I7o=r(ost,"Wav2Vec2Model"),ost.forEach(t),N7o=r(MLe," (Wav2Vec2 model)"),MLe.forEach(t),q7o=i($),K_=n($,"LI",{});var ELe=s(K_);Uie=n(ELe,"STRONG",{});var rst=s(Uie);j7o=r(rst,"wav2vec2-conformer"),rst.forEach(t),D7o=r(ELe," \u2014 "),Oq=n(ELe,"A",{href:!0});var tst=s(Oq);G7o=r(tst,"Wav2Vec2ConformerModel"),tst.forEach(t),O7o=r(ELe," (Wav2Vec2-Conformer model)"),ELe.forEach(t),V7o=i($),Z_=n($,"LI",{});var CLe=s(Z_);Jie=n(CLe,"STRONG",{});var ast=s(Jie);X7o=r(ast,"wavlm"),ast.forEach(t),z7o=r(CLe," \u2014 "),Vq=n(CLe,"A",{href:!0});var nst=s(Vq);W7o=r(nst,"WavLMModel"),nst.forEach(t),Q7o=r(CLe," (WavLM model)"),CLe.forEach(t),H7o=i($),eu=n($,"LI",{});var wLe=s(eu);Yie=n(wLe,"STRONG",{});var sst=s(Yie);U7o=r(sst,"xglm"),sst.forEach(t),J7o=r(wLe," \u2014 "),Xq=n(wLe,"A",{href:!0});var lst=s(Xq);Y7o=r(lst,"XGLMModel"),lst.forEach(t),K7o=r(wLe," (XGLM model)"),wLe.forEach(t),Z7o=i($),ou=n($,"LI",{});var ALe=s(ou);Kie=n(ALe,"STRONG",{});var ist=s(Kie);e9o=r(ist,"xlm"),ist.forEach(t),o9o=r(ALe," \u2014 "),zq=n(ALe,"A",{href:!0});var dst=s(zq);r9o=r(dst,"XLMModel"),dst.forEach(t),t9o=r(ALe," (XLM model)"),ALe.forEach(t),a9o=i($),ru=n($,"LI",{});var LLe=s(ru);Zie=n(LLe,"STRONG",{});var cst=s(Zie);n9o=r(cst,"xlm-prophetnet"),cst.forEach(t),s9o=r(LLe," \u2014 "),Wq=n(LLe,"A",{href:!0});var fst=s(Wq);l9o=r(fst,"XLMProphetNetModel"),fst.forEach(t),i9o=r(LLe," (XLM-ProphetNet model)"),LLe.forEach(t),d9o=i($),tu=n($,"LI",{});var yLe=s(tu);ede=n(yLe,"STRONG",{});var mst=s(ede);c9o=r(mst,"xlm-roberta"),mst.forEach(t),f9o=r(yLe," \u2014 "),Qq=n(yLe,"A",{href:!0});var gst=s(Qq);m9o=r(gst,"XLMRobertaModel"),gst.forEach(t),g9o=r(yLe," (XLM-RoBERTa model)"),yLe.forEach(t),h9o=i($),au=n($,"LI",{});var xLe=s(au);ode=n(xLe,"STRONG",{});var hst=s(ode);p9o=r(hst,"xlm-roberta-xl"),hst.forEach(t),_9o=r(xLe," \u2014 "),Hq=n(xLe,"A",{href:!0});var pst=s(Hq);u9o=r(pst,"XLMRobertaXLModel"),pst.forEach(t),b9o=r(xLe," (XLM-RoBERTa-XL model)"),xLe.forEach(t),v9o=i($),nu=n($,"LI",{});var $Le=s(nu);rde=n($Le,"STRONG",{});var _st=s(rde);F9o=r(_st,"xlnet"),_st.forEach(t),T9o=r($Le," \u2014 "),Uq=n($Le,"A",{href:!0});var ust=s(Uq);M9o=r(ust,"XLNetModel"),ust.forEach(t),E9o=r($Le," (XLNet model)"),$Le.forEach(t),C9o=i($),su=n($,"LI",{});var kLe=s(su);tde=n(kLe,"STRONG",{});var bst=s(tde);w9o=r(bst,"yolos"),bst.forEach(t),A9o=r(kLe," \u2014 "),Jq=n(kLe,"A",{href:!0});var vst=s(Jq);L9o=r(vst,"YolosModel"),vst.forEach(t),y9o=r(kLe," (YOLOS model)"),kLe.forEach(t),x9o=i($),lu=n($,"LI",{});var SLe=s(lu);ade=n(SLe,"STRONG",{});var Fst=s(ade);$9o=r(Fst,"yoso"),Fst.forEach(t),k9o=r(SLe," \u2014 "),Yq=n(SLe,"A",{href:!0});var Tst=s(Yq);S9o=r(Tst,"YosoModel"),Tst.forEach(t),R9o=r(SLe," (YOSO model)"),SLe.forEach(t),$.forEach(t),P9o=i(oa),iu=n(oa,"P",{});var RLe=s(iu);B9o=r(RLe,"The model is set in evaluation mode by default using "),nde=n(RLe,"CODE",{});var Mst=s(nde);I9o=r(Mst,"model.eval()"),Mst.forEach(t),N9o=r(RLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sde=n(RLe,"CODE",{});var Est=s(sde);q9o=r(Est,"model.train()"),Est.forEach(t),RLe.forEach(t),j9o=i(oa),T(du.$$.fragment,oa),oa.forEach(t),Vs.forEach(t),wje=i(f),$i=n(f,"H2",{class:!0});var xGe=s($i);cu=n(xGe,"A",{id:!0,class:!0,href:!0});var Cst=s(cu);lde=n(Cst,"SPAN",{});var wst=s(lde);T(FA.$$.fragment,wst),wst.forEach(t),Cst.forEach(t),D9o=i(xGe),ide=n(xGe,"SPAN",{});var Ast=s(ide);G9o=r(Ast,"AutoModelForPreTraining"),Ast.forEach(t),xGe.forEach(t),Aje=i(f),xo=n(f,"DIV",{class:!0});var Xs=s(xo);T(TA.$$.fragment,Xs),O9o=i(Xs),ki=n(Xs,"P",{});var ZZ=s(ki);V9o=r(ZZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Kq=n(ZZ,"A",{href:!0});var Lst=s(Kq);X9o=r(Lst,"from_pretrained()"),Lst.forEach(t),z9o=r(ZZ," class method or the "),Zq=n(ZZ,"A",{href:!0});var yst=s(Zq);W9o=r(yst,"from_config()"),yst.forEach(t),Q9o=r(ZZ,` class
method.`),ZZ.forEach(t),H9o=i(Xs),MA=n(Xs,"P",{});var $Ge=s(MA);U9o=r($Ge,"This class cannot be instantiated directly using "),dde=n($Ge,"CODE",{});var xst=s(dde);J9o=r(xst,"__init__()"),xst.forEach(t),Y9o=r($Ge," (throws an error)."),$Ge.forEach(t),K9o=i(Xs),at=n(Xs,"DIV",{class:!0});var U3=s(at);T(EA.$$.fragment,U3),Z9o=i(U3),cde=n(U3,"P",{});var $st=s(cde);eMo=r($st,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),$st.forEach(t),oMo=i(U3),Si=n(U3,"P",{});var eee=s(Si);rMo=r(eee,`Note:
Loading a model from its configuration file does `),fde=n(eee,"STRONG",{});var kst=s(fde);tMo=r(kst,"not"),kst.forEach(t),aMo=r(eee,` load the model weights. It only affects the
model\u2019s configuration. Use `),ej=n(eee,"A",{href:!0});var Sst=s(ej);nMo=r(Sst,"from_pretrained()"),Sst.forEach(t),sMo=r(eee," to load the model weights."),eee.forEach(t),lMo=i(U3),T(fu.$$.fragment,U3),U3.forEach(t),iMo=i(Xs),Ye=n(Xs,"DIV",{class:!0});var ra=s(Ye);T(CA.$$.fragment,ra),dMo=i(ra),mde=n(ra,"P",{});var Rst=s(mde);cMo=r(Rst,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Rst.forEach(t),fMo=i(ra),xa=n(ra,"P",{});var J3=s(xa);mMo=r(J3,"The model class to instantiate is selected based on the "),gde=n(J3,"CODE",{});var Pst=s(gde);gMo=r(Pst,"model_type"),Pst.forEach(t),hMo=r(J3,` property of the config object (either
passed as an argument or loaded from `),hde=n(J3,"CODE",{});var Bst=s(hde);pMo=r(Bst,"pretrained_model_name_or_path"),Bst.forEach(t),_Mo=r(J3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pde=n(J3,"CODE",{});var Ist=s(pde);uMo=r(Ist,"pretrained_model_name_or_path"),Ist.forEach(t),bMo=r(J3,":"),J3.forEach(t),vMo=i(ra),G=n(ra,"UL",{});var O=s(G);mu=n(O,"LI",{});var PLe=s(mu);_de=n(PLe,"STRONG",{});var Nst=s(_de);FMo=r(Nst,"albert"),Nst.forEach(t),TMo=r(PLe," \u2014 "),oj=n(PLe,"A",{href:!0});var qst=s(oj);MMo=r(qst,"AlbertForPreTraining"),qst.forEach(t),EMo=r(PLe," (ALBERT model)"),PLe.forEach(t),CMo=i(O),gu=n(O,"LI",{});var BLe=s(gu);ude=n(BLe,"STRONG",{});var jst=s(ude);wMo=r(jst,"bart"),jst.forEach(t),AMo=r(BLe," \u2014 "),rj=n(BLe,"A",{href:!0});var Dst=s(rj);LMo=r(Dst,"BartForConditionalGeneration"),Dst.forEach(t),yMo=r(BLe," (BART model)"),BLe.forEach(t),xMo=i(O),hu=n(O,"LI",{});var ILe=s(hu);bde=n(ILe,"STRONG",{});var Gst=s(bde);$Mo=r(Gst,"bert"),Gst.forEach(t),kMo=r(ILe," \u2014 "),tj=n(ILe,"A",{href:!0});var Ost=s(tj);SMo=r(Ost,"BertForPreTraining"),Ost.forEach(t),RMo=r(ILe," (BERT model)"),ILe.forEach(t),PMo=i(O),pu=n(O,"LI",{});var NLe=s(pu);vde=n(NLe,"STRONG",{});var Vst=s(vde);BMo=r(Vst,"big_bird"),Vst.forEach(t),IMo=r(NLe," \u2014 "),aj=n(NLe,"A",{href:!0});var Xst=s(aj);NMo=r(Xst,"BigBirdForPreTraining"),Xst.forEach(t),qMo=r(NLe," (BigBird model)"),NLe.forEach(t),jMo=i(O),_u=n(O,"LI",{});var qLe=s(_u);Fde=n(qLe,"STRONG",{});var zst=s(Fde);DMo=r(zst,"camembert"),zst.forEach(t),GMo=r(qLe," \u2014 "),nj=n(qLe,"A",{href:!0});var Wst=s(nj);OMo=r(Wst,"CamembertForMaskedLM"),Wst.forEach(t),VMo=r(qLe," (CamemBERT model)"),qLe.forEach(t),XMo=i(O),uu=n(O,"LI",{});var jLe=s(uu);Tde=n(jLe,"STRONG",{});var Qst=s(Tde);zMo=r(Qst,"ctrl"),Qst.forEach(t),WMo=r(jLe," \u2014 "),sj=n(jLe,"A",{href:!0});var Hst=s(sj);QMo=r(Hst,"CTRLLMHeadModel"),Hst.forEach(t),HMo=r(jLe," (CTRL model)"),jLe.forEach(t),UMo=i(O),bu=n(O,"LI",{});var DLe=s(bu);Mde=n(DLe,"STRONG",{});var Ust=s(Mde);JMo=r(Ust,"data2vec-text"),Ust.forEach(t),YMo=r(DLe," \u2014 "),lj=n(DLe,"A",{href:!0});var Jst=s(lj);KMo=r(Jst,"Data2VecTextForMaskedLM"),Jst.forEach(t),ZMo=r(DLe," (Data2VecText model)"),DLe.forEach(t),e4o=i(O),vu=n(O,"LI",{});var GLe=s(vu);Ede=n(GLe,"STRONG",{});var Yst=s(Ede);o4o=r(Yst,"deberta"),Yst.forEach(t),r4o=r(GLe," \u2014 "),ij=n(GLe,"A",{href:!0});var Kst=s(ij);t4o=r(Kst,"DebertaForMaskedLM"),Kst.forEach(t),a4o=r(GLe," (DeBERTa model)"),GLe.forEach(t),n4o=i(O),Fu=n(O,"LI",{});var OLe=s(Fu);Cde=n(OLe,"STRONG",{});var Zst=s(Cde);s4o=r(Zst,"deberta-v2"),Zst.forEach(t),l4o=r(OLe," \u2014 "),dj=n(OLe,"A",{href:!0});var elt=s(dj);i4o=r(elt,"DebertaV2ForMaskedLM"),elt.forEach(t),d4o=r(OLe," (DeBERTa-v2 model)"),OLe.forEach(t),c4o=i(O),Tu=n(O,"LI",{});var VLe=s(Tu);wde=n(VLe,"STRONG",{});var olt=s(wde);f4o=r(olt,"distilbert"),olt.forEach(t),m4o=r(VLe," \u2014 "),cj=n(VLe,"A",{href:!0});var rlt=s(cj);g4o=r(rlt,"DistilBertForMaskedLM"),rlt.forEach(t),h4o=r(VLe," (DistilBERT model)"),VLe.forEach(t),p4o=i(O),Mu=n(O,"LI",{});var XLe=s(Mu);Ade=n(XLe,"STRONG",{});var tlt=s(Ade);_4o=r(tlt,"electra"),tlt.forEach(t),u4o=r(XLe," \u2014 "),fj=n(XLe,"A",{href:!0});var alt=s(fj);b4o=r(alt,"ElectraForPreTraining"),alt.forEach(t),v4o=r(XLe," (ELECTRA model)"),XLe.forEach(t),F4o=i(O),Eu=n(O,"LI",{});var zLe=s(Eu);Lde=n(zLe,"STRONG",{});var nlt=s(Lde);T4o=r(nlt,"flaubert"),nlt.forEach(t),M4o=r(zLe," \u2014 "),mj=n(zLe,"A",{href:!0});var slt=s(mj);E4o=r(slt,"FlaubertWithLMHeadModel"),slt.forEach(t),C4o=r(zLe," (FlauBERT model)"),zLe.forEach(t),w4o=i(O),Cu=n(O,"LI",{});var WLe=s(Cu);yde=n(WLe,"STRONG",{});var llt=s(yde);A4o=r(llt,"flava"),llt.forEach(t),L4o=r(WLe," \u2014 "),gj=n(WLe,"A",{href:!0});var ilt=s(gj);y4o=r(ilt,"FlavaForPreTraining"),ilt.forEach(t),x4o=r(WLe," (FLAVA model)"),WLe.forEach(t),$4o=i(O),wu=n(O,"LI",{});var QLe=s(wu);xde=n(QLe,"STRONG",{});var dlt=s(xde);k4o=r(dlt,"fnet"),dlt.forEach(t),S4o=r(QLe," \u2014 "),hj=n(QLe,"A",{href:!0});var clt=s(hj);R4o=r(clt,"FNetForPreTraining"),clt.forEach(t),P4o=r(QLe," (FNet model)"),QLe.forEach(t),B4o=i(O),Au=n(O,"LI",{});var HLe=s(Au);$de=n(HLe,"STRONG",{});var flt=s($de);I4o=r(flt,"fsmt"),flt.forEach(t),N4o=r(HLe," \u2014 "),pj=n(HLe,"A",{href:!0});var mlt=s(pj);q4o=r(mlt,"FSMTForConditionalGeneration"),mlt.forEach(t),j4o=r(HLe," (FairSeq Machine-Translation model)"),HLe.forEach(t),D4o=i(O),Lu=n(O,"LI",{});var ULe=s(Lu);kde=n(ULe,"STRONG",{});var glt=s(kde);G4o=r(glt,"funnel"),glt.forEach(t),O4o=r(ULe," \u2014 "),_j=n(ULe,"A",{href:!0});var hlt=s(_j);V4o=r(hlt,"FunnelForPreTraining"),hlt.forEach(t),X4o=r(ULe," (Funnel Transformer model)"),ULe.forEach(t),z4o=i(O),yu=n(O,"LI",{});var JLe=s(yu);Sde=n(JLe,"STRONG",{});var plt=s(Sde);W4o=r(plt,"gpt2"),plt.forEach(t),Q4o=r(JLe," \u2014 "),uj=n(JLe,"A",{href:!0});var _lt=s(uj);H4o=r(_lt,"GPT2LMHeadModel"),_lt.forEach(t),U4o=r(JLe," (OpenAI GPT-2 model)"),JLe.forEach(t),J4o=i(O),xu=n(O,"LI",{});var YLe=s(xu);Rde=n(YLe,"STRONG",{});var ult=s(Rde);Y4o=r(ult,"ibert"),ult.forEach(t),K4o=r(YLe," \u2014 "),bj=n(YLe,"A",{href:!0});var blt=s(bj);Z4o=r(blt,"IBertForMaskedLM"),blt.forEach(t),eEo=r(YLe," (I-BERT model)"),YLe.forEach(t),oEo=i(O),$u=n(O,"LI",{});var KLe=s($u);Pde=n(KLe,"STRONG",{});var vlt=s(Pde);rEo=r(vlt,"layoutlm"),vlt.forEach(t),tEo=r(KLe," \u2014 "),vj=n(KLe,"A",{href:!0});var Flt=s(vj);aEo=r(Flt,"LayoutLMForMaskedLM"),Flt.forEach(t),nEo=r(KLe," (LayoutLM model)"),KLe.forEach(t),sEo=i(O),ku=n(O,"LI",{});var ZLe=s(ku);Bde=n(ZLe,"STRONG",{});var Tlt=s(Bde);lEo=r(Tlt,"longformer"),Tlt.forEach(t),iEo=r(ZLe," \u2014 "),Fj=n(ZLe,"A",{href:!0});var Mlt=s(Fj);dEo=r(Mlt,"LongformerForMaskedLM"),Mlt.forEach(t),cEo=r(ZLe," (Longformer model)"),ZLe.forEach(t),fEo=i(O),Su=n(O,"LI",{});var eye=s(Su);Ide=n(eye,"STRONG",{});var Elt=s(Ide);mEo=r(Elt,"lxmert"),Elt.forEach(t),gEo=r(eye," \u2014 "),Tj=n(eye,"A",{href:!0});var Clt=s(Tj);hEo=r(Clt,"LxmertForPreTraining"),Clt.forEach(t),pEo=r(eye," (LXMERT model)"),eye.forEach(t),_Eo=i(O),Ru=n(O,"LI",{});var oye=s(Ru);Nde=n(oye,"STRONG",{});var wlt=s(Nde);uEo=r(wlt,"megatron-bert"),wlt.forEach(t),bEo=r(oye," \u2014 "),Mj=n(oye,"A",{href:!0});var Alt=s(Mj);vEo=r(Alt,"MegatronBertForPreTraining"),Alt.forEach(t),FEo=r(oye," (Megatron-BERT model)"),oye.forEach(t),TEo=i(O),Pu=n(O,"LI",{});var rye=s(Pu);qde=n(rye,"STRONG",{});var Llt=s(qde);MEo=r(Llt,"mobilebert"),Llt.forEach(t),EEo=r(rye," \u2014 "),Ej=n(rye,"A",{href:!0});var ylt=s(Ej);CEo=r(ylt,"MobileBertForPreTraining"),ylt.forEach(t),wEo=r(rye," (MobileBERT model)"),rye.forEach(t),AEo=i(O),Bu=n(O,"LI",{});var tye=s(Bu);jde=n(tye,"STRONG",{});var xlt=s(jde);LEo=r(xlt,"mpnet"),xlt.forEach(t),yEo=r(tye," \u2014 "),Cj=n(tye,"A",{href:!0});var $lt=s(Cj);xEo=r($lt,"MPNetForMaskedLM"),$lt.forEach(t),$Eo=r(tye," (MPNet model)"),tye.forEach(t),kEo=i(O),Iu=n(O,"LI",{});var aye=s(Iu);Dde=n(aye,"STRONG",{});var klt=s(Dde);SEo=r(klt,"openai-gpt"),klt.forEach(t),REo=r(aye," \u2014 "),wj=n(aye,"A",{href:!0});var Slt=s(wj);PEo=r(Slt,"OpenAIGPTLMHeadModel"),Slt.forEach(t),BEo=r(aye," (OpenAI GPT model)"),aye.forEach(t),IEo=i(O),Nu=n(O,"LI",{});var nye=s(Nu);Gde=n(nye,"STRONG",{});var Rlt=s(Gde);NEo=r(Rlt,"retribert"),Rlt.forEach(t),qEo=r(nye," \u2014 "),Aj=n(nye,"A",{href:!0});var Plt=s(Aj);jEo=r(Plt,"RetriBertModel"),Plt.forEach(t),DEo=r(nye," (RetriBERT model)"),nye.forEach(t),GEo=i(O),qu=n(O,"LI",{});var sye=s(qu);Ode=n(sye,"STRONG",{});var Blt=s(Ode);OEo=r(Blt,"roberta"),Blt.forEach(t),VEo=r(sye," \u2014 "),Lj=n(sye,"A",{href:!0});var Ilt=s(Lj);XEo=r(Ilt,"RobertaForMaskedLM"),Ilt.forEach(t),zEo=r(sye," (RoBERTa model)"),sye.forEach(t),WEo=i(O),ju=n(O,"LI",{});var lye=s(ju);Vde=n(lye,"STRONG",{});var Nlt=s(Vde);QEo=r(Nlt,"splinter"),Nlt.forEach(t),HEo=r(lye," \u2014 "),yj=n(lye,"A",{href:!0});var qlt=s(yj);UEo=r(qlt,"SplinterForPreTraining"),qlt.forEach(t),JEo=r(lye," (Splinter model)"),lye.forEach(t),YEo=i(O),Du=n(O,"LI",{});var iye=s(Du);Xde=n(iye,"STRONG",{});var jlt=s(Xde);KEo=r(jlt,"squeezebert"),jlt.forEach(t),ZEo=r(iye," \u2014 "),xj=n(iye,"A",{href:!0});var Dlt=s(xj);eCo=r(Dlt,"SqueezeBertForMaskedLM"),Dlt.forEach(t),oCo=r(iye," (SqueezeBERT model)"),iye.forEach(t),rCo=i(O),Gu=n(O,"LI",{});var dye=s(Gu);zde=n(dye,"STRONG",{});var Glt=s(zde);tCo=r(Glt,"t5"),Glt.forEach(t),aCo=r(dye," \u2014 "),$j=n(dye,"A",{href:!0});var Olt=s($j);nCo=r(Olt,"T5ForConditionalGeneration"),Olt.forEach(t),sCo=r(dye," (T5 model)"),dye.forEach(t),lCo=i(O),Ou=n(O,"LI",{});var cye=s(Ou);Wde=n(cye,"STRONG",{});var Vlt=s(Wde);iCo=r(Vlt,"tapas"),Vlt.forEach(t),dCo=r(cye," \u2014 "),kj=n(cye,"A",{href:!0});var Xlt=s(kj);cCo=r(Xlt,"TapasForMaskedLM"),Xlt.forEach(t),fCo=r(cye," (TAPAS model)"),cye.forEach(t),mCo=i(O),Vu=n(O,"LI",{});var fye=s(Vu);Qde=n(fye,"STRONG",{});var zlt=s(Qde);gCo=r(zlt,"transfo-xl"),zlt.forEach(t),hCo=r(fye," \u2014 "),Sj=n(fye,"A",{href:!0});var Wlt=s(Sj);pCo=r(Wlt,"TransfoXLLMHeadModel"),Wlt.forEach(t),_Co=r(fye," (Transformer-XL model)"),fye.forEach(t),uCo=i(O),Xu=n(O,"LI",{});var mye=s(Xu);Hde=n(mye,"STRONG",{});var Qlt=s(Hde);bCo=r(Qlt,"unispeech"),Qlt.forEach(t),vCo=r(mye," \u2014 "),Rj=n(mye,"A",{href:!0});var Hlt=s(Rj);FCo=r(Hlt,"UniSpeechForPreTraining"),Hlt.forEach(t),TCo=r(mye," (UniSpeech model)"),mye.forEach(t),MCo=i(O),zu=n(O,"LI",{});var gye=s(zu);Ude=n(gye,"STRONG",{});var Ult=s(Ude);ECo=r(Ult,"unispeech-sat"),Ult.forEach(t),CCo=r(gye," \u2014 "),Pj=n(gye,"A",{href:!0});var Jlt=s(Pj);wCo=r(Jlt,"UniSpeechSatForPreTraining"),Jlt.forEach(t),ACo=r(gye," (UniSpeechSat model)"),gye.forEach(t),LCo=i(O),Wu=n(O,"LI",{});var hye=s(Wu);Jde=n(hye,"STRONG",{});var Ylt=s(Jde);yCo=r(Ylt,"visual_bert"),Ylt.forEach(t),xCo=r(hye," \u2014 "),Bj=n(hye,"A",{href:!0});var Klt=s(Bj);$Co=r(Klt,"VisualBertForPreTraining"),Klt.forEach(t),kCo=r(hye," (VisualBERT model)"),hye.forEach(t),SCo=i(O),Qu=n(O,"LI",{});var pye=s(Qu);Yde=n(pye,"STRONG",{});var Zlt=s(Yde);RCo=r(Zlt,"vit_mae"),Zlt.forEach(t),PCo=r(pye," \u2014 "),Ij=n(pye,"A",{href:!0});var eit=s(Ij);BCo=r(eit,"ViTMAEForPreTraining"),eit.forEach(t),ICo=r(pye," (ViTMAE model)"),pye.forEach(t),NCo=i(O),Hu=n(O,"LI",{});var _ye=s(Hu);Kde=n(_ye,"STRONG",{});var oit=s(Kde);qCo=r(oit,"wav2vec2"),oit.forEach(t),jCo=r(_ye," \u2014 "),Nj=n(_ye,"A",{href:!0});var rit=s(Nj);DCo=r(rit,"Wav2Vec2ForPreTraining"),rit.forEach(t),GCo=r(_ye," (Wav2Vec2 model)"),_ye.forEach(t),OCo=i(O),Uu=n(O,"LI",{});var uye=s(Uu);Zde=n(uye,"STRONG",{});var tit=s(Zde);VCo=r(tit,"wav2vec2-conformer"),tit.forEach(t),XCo=r(uye," \u2014 "),qj=n(uye,"A",{href:!0});var ait=s(qj);zCo=r(ait,"Wav2Vec2ConformerForPreTraining"),ait.forEach(t),WCo=r(uye," (Wav2Vec2-Conformer model)"),uye.forEach(t),QCo=i(O),Ju=n(O,"LI",{});var bye=s(Ju);ece=n(bye,"STRONG",{});var nit=s(ece);HCo=r(nit,"xlm"),nit.forEach(t),UCo=r(bye," \u2014 "),jj=n(bye,"A",{href:!0});var sit=s(jj);JCo=r(sit,"XLMWithLMHeadModel"),sit.forEach(t),YCo=r(bye," (XLM model)"),bye.forEach(t),KCo=i(O),Yu=n(O,"LI",{});var vye=s(Yu);oce=n(vye,"STRONG",{});var lit=s(oce);ZCo=r(lit,"xlm-roberta"),lit.forEach(t),e5o=r(vye," \u2014 "),Dj=n(vye,"A",{href:!0});var iit=s(Dj);o5o=r(iit,"XLMRobertaForMaskedLM"),iit.forEach(t),r5o=r(vye," (XLM-RoBERTa model)"),vye.forEach(t),t5o=i(O),Ku=n(O,"LI",{});var Fye=s(Ku);rce=n(Fye,"STRONG",{});var dit=s(rce);a5o=r(dit,"xlm-roberta-xl"),dit.forEach(t),n5o=r(Fye," \u2014 "),Gj=n(Fye,"A",{href:!0});var cit=s(Gj);s5o=r(cit,"XLMRobertaXLForMaskedLM"),cit.forEach(t),l5o=r(Fye," (XLM-RoBERTa-XL model)"),Fye.forEach(t),i5o=i(O),Zu=n(O,"LI",{});var Tye=s(Zu);tce=n(Tye,"STRONG",{});var fit=s(tce);d5o=r(fit,"xlnet"),fit.forEach(t),c5o=r(Tye," \u2014 "),Oj=n(Tye,"A",{href:!0});var mit=s(Oj);f5o=r(mit,"XLNetLMHeadModel"),mit.forEach(t),m5o=r(Tye," (XLNet model)"),Tye.forEach(t),O.forEach(t),g5o=i(ra),e2=n(ra,"P",{});var Mye=s(e2);h5o=r(Mye,"The model is set in evaluation mode by default using "),ace=n(Mye,"CODE",{});var git=s(ace);p5o=r(git,"model.eval()"),git.forEach(t),_5o=r(Mye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nce=n(Mye,"CODE",{});var hit=s(nce);u5o=r(hit,"model.train()"),hit.forEach(t),Mye.forEach(t),b5o=i(ra),T(o2.$$.fragment,ra),ra.forEach(t),Xs.forEach(t),Lje=i(f),Ri=n(f,"H2",{class:!0});var kGe=s(Ri);r2=n(kGe,"A",{id:!0,class:!0,href:!0});var pit=s(r2);sce=n(pit,"SPAN",{});var _it=s(sce);T(wA.$$.fragment,_it),_it.forEach(t),pit.forEach(t),v5o=i(kGe),lce=n(kGe,"SPAN",{});var uit=s(lce);F5o=r(uit,"AutoModelForCausalLM"),uit.forEach(t),kGe.forEach(t),yje=i(f),$o=n(f,"DIV",{class:!0});var zs=s($o);T(AA.$$.fragment,zs),T5o=i(zs),Pi=n(zs,"P",{});var oee=s(Pi);M5o=r(oee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Vj=n(oee,"A",{href:!0});var bit=s(Vj);E5o=r(bit,"from_pretrained()"),bit.forEach(t),C5o=r(oee," class method or the "),Xj=n(oee,"A",{href:!0});var vit=s(Xj);w5o=r(vit,"from_config()"),vit.forEach(t),A5o=r(oee,` class
method.`),oee.forEach(t),L5o=i(zs),LA=n(zs,"P",{});var SGe=s(LA);y5o=r(SGe,"This class cannot be instantiated directly using "),ice=n(SGe,"CODE",{});var Fit=s(ice);x5o=r(Fit,"__init__()"),Fit.forEach(t),$5o=r(SGe," (throws an error)."),SGe.forEach(t),k5o=i(zs),nt=n(zs,"DIV",{class:!0});var Y3=s(nt);T(yA.$$.fragment,Y3),S5o=i(Y3),dce=n(Y3,"P",{});var Tit=s(dce);R5o=r(Tit,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Tit.forEach(t),P5o=i(Y3),Bi=n(Y3,"P",{});var ree=s(Bi);B5o=r(ree,`Note:
Loading a model from its configuration file does `),cce=n(ree,"STRONG",{});var Mit=s(cce);I5o=r(Mit,"not"),Mit.forEach(t),N5o=r(ree,` load the model weights. It only affects the
model\u2019s configuration. Use `),zj=n(ree,"A",{href:!0});var Eit=s(zj);q5o=r(Eit,"from_pretrained()"),Eit.forEach(t),j5o=r(ree," to load the model weights."),ree.forEach(t),D5o=i(Y3),T(t2.$$.fragment,Y3),Y3.forEach(t),G5o=i(zs),Ke=n(zs,"DIV",{class:!0});var ta=s(Ke);T(xA.$$.fragment,ta),O5o=i(ta),fce=n(ta,"P",{});var Cit=s(fce);V5o=r(Cit,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Cit.forEach(t),X5o=i(ta),$a=n(ta,"P",{});var K3=s($a);z5o=r(K3,"The model class to instantiate is selected based on the "),mce=n(K3,"CODE",{});var wit=s(mce);W5o=r(wit,"model_type"),wit.forEach(t),Q5o=r(K3,` property of the config object (either
passed as an argument or loaded from `),gce=n(K3,"CODE",{});var Ait=s(gce);H5o=r(Ait,"pretrained_model_name_or_path"),Ait.forEach(t),U5o=r(K3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hce=n(K3,"CODE",{});var Lit=s(hce);J5o=r(Lit,"pretrained_model_name_or_path"),Lit.forEach(t),Y5o=r(K3,":"),K3.forEach(t),K5o=i(ta),z=n(ta,"UL",{});var Q=s(z);a2=n(Q,"LI",{});var Eye=s(a2);pce=n(Eye,"STRONG",{});var yit=s(pce);Z5o=r(yit,"bart"),yit.forEach(t),e3o=r(Eye," \u2014 "),Wj=n(Eye,"A",{href:!0});var xit=s(Wj);o3o=r(xit,"BartForCausalLM"),xit.forEach(t),r3o=r(Eye," (BART model)"),Eye.forEach(t),t3o=i(Q),n2=n(Q,"LI",{});var Cye=s(n2);_ce=n(Cye,"STRONG",{});var $it=s(_ce);a3o=r($it,"bert"),$it.forEach(t),n3o=r(Cye," \u2014 "),Qj=n(Cye,"A",{href:!0});var kit=s(Qj);s3o=r(kit,"BertLMHeadModel"),kit.forEach(t),l3o=r(Cye," (BERT model)"),Cye.forEach(t),i3o=i(Q),s2=n(Q,"LI",{});var wye=s(s2);uce=n(wye,"STRONG",{});var Sit=s(uce);d3o=r(Sit,"bert-generation"),Sit.forEach(t),c3o=r(wye," \u2014 "),Hj=n(wye,"A",{href:!0});var Rit=s(Hj);f3o=r(Rit,"BertGenerationDecoder"),Rit.forEach(t),m3o=r(wye," (Bert Generation model)"),wye.forEach(t),g3o=i(Q),l2=n(Q,"LI",{});var Aye=s(l2);bce=n(Aye,"STRONG",{});var Pit=s(bce);h3o=r(Pit,"big_bird"),Pit.forEach(t),p3o=r(Aye," \u2014 "),Uj=n(Aye,"A",{href:!0});var Bit=s(Uj);_3o=r(Bit,"BigBirdForCausalLM"),Bit.forEach(t),u3o=r(Aye," (BigBird model)"),Aye.forEach(t),b3o=i(Q),i2=n(Q,"LI",{});var Lye=s(i2);vce=n(Lye,"STRONG",{});var Iit=s(vce);v3o=r(Iit,"bigbird_pegasus"),Iit.forEach(t),F3o=r(Lye," \u2014 "),Jj=n(Lye,"A",{href:!0});var Nit=s(Jj);T3o=r(Nit,"BigBirdPegasusForCausalLM"),Nit.forEach(t),M3o=r(Lye," (BigBird-Pegasus model)"),Lye.forEach(t),E3o=i(Q),d2=n(Q,"LI",{});var yye=s(d2);Fce=n(yye,"STRONG",{});var qit=s(Fce);C3o=r(qit,"blenderbot"),qit.forEach(t),w3o=r(yye," \u2014 "),Yj=n(yye,"A",{href:!0});var jit=s(Yj);A3o=r(jit,"BlenderbotForCausalLM"),jit.forEach(t),L3o=r(yye," (Blenderbot model)"),yye.forEach(t),y3o=i(Q),c2=n(Q,"LI",{});var xye=s(c2);Tce=n(xye,"STRONG",{});var Dit=s(Tce);x3o=r(Dit,"blenderbot-small"),Dit.forEach(t),$3o=r(xye," \u2014 "),Kj=n(xye,"A",{href:!0});var Git=s(Kj);k3o=r(Git,"BlenderbotSmallForCausalLM"),Git.forEach(t),S3o=r(xye," (BlenderbotSmall model)"),xye.forEach(t),R3o=i(Q),f2=n(Q,"LI",{});var $ye=s(f2);Mce=n($ye,"STRONG",{});var Oit=s(Mce);P3o=r(Oit,"camembert"),Oit.forEach(t),B3o=r($ye," \u2014 "),Zj=n($ye,"A",{href:!0});var Vit=s(Zj);I3o=r(Vit,"CamembertForCausalLM"),Vit.forEach(t),N3o=r($ye," (CamemBERT model)"),$ye.forEach(t),q3o=i(Q),m2=n(Q,"LI",{});var kye=s(m2);Ece=n(kye,"STRONG",{});var Xit=s(Ece);j3o=r(Xit,"ctrl"),Xit.forEach(t),D3o=r(kye," \u2014 "),eD=n(kye,"A",{href:!0});var zit=s(eD);G3o=r(zit,"CTRLLMHeadModel"),zit.forEach(t),O3o=r(kye," (CTRL model)"),kye.forEach(t),V3o=i(Q),g2=n(Q,"LI",{});var Sye=s(g2);Cce=n(Sye,"STRONG",{});var Wit=s(Cce);X3o=r(Wit,"data2vec-text"),Wit.forEach(t),z3o=r(Sye," \u2014 "),oD=n(Sye,"A",{href:!0});var Qit=s(oD);W3o=r(Qit,"Data2VecTextForCausalLM"),Qit.forEach(t),Q3o=r(Sye," (Data2VecText model)"),Sye.forEach(t),H3o=i(Q),h2=n(Q,"LI",{});var Rye=s(h2);wce=n(Rye,"STRONG",{});var Hit=s(wce);U3o=r(Hit,"electra"),Hit.forEach(t),J3o=r(Rye," \u2014 "),rD=n(Rye,"A",{href:!0});var Uit=s(rD);Y3o=r(Uit,"ElectraForCausalLM"),Uit.forEach(t),K3o=r(Rye," (ELECTRA model)"),Rye.forEach(t),Z3o=i(Q),p2=n(Q,"LI",{});var Pye=s(p2);Ace=n(Pye,"STRONG",{});var Jit=s(Ace);e0o=r(Jit,"gpt2"),Jit.forEach(t),o0o=r(Pye," \u2014 "),tD=n(Pye,"A",{href:!0});var Yit=s(tD);r0o=r(Yit,"GPT2LMHeadModel"),Yit.forEach(t),t0o=r(Pye," (OpenAI GPT-2 model)"),Pye.forEach(t),a0o=i(Q),_2=n(Q,"LI",{});var Bye=s(_2);Lce=n(Bye,"STRONG",{});var Kit=s(Lce);n0o=r(Kit,"gpt_neo"),Kit.forEach(t),s0o=r(Bye," \u2014 "),aD=n(Bye,"A",{href:!0});var Zit=s(aD);l0o=r(Zit,"GPTNeoForCausalLM"),Zit.forEach(t),i0o=r(Bye," (GPT Neo model)"),Bye.forEach(t),d0o=i(Q),u2=n(Q,"LI",{});var Iye=s(u2);yce=n(Iye,"STRONG",{});var edt=s(yce);c0o=r(edt,"gpt_neox"),edt.forEach(t),f0o=r(Iye," \u2014 "),nD=n(Iye,"A",{href:!0});var odt=s(nD);m0o=r(odt,"GPTNeoXForCausalLM"),odt.forEach(t),g0o=r(Iye," (GPT NeoX model)"),Iye.forEach(t),h0o=i(Q),b2=n(Q,"LI",{});var Nye=s(b2);xce=n(Nye,"STRONG",{});var rdt=s(xce);p0o=r(rdt,"gptj"),rdt.forEach(t),_0o=r(Nye," \u2014 "),sD=n(Nye,"A",{href:!0});var tdt=s(sD);u0o=r(tdt,"GPTJForCausalLM"),tdt.forEach(t),b0o=r(Nye," (GPT-J model)"),Nye.forEach(t),v0o=i(Q),v2=n(Q,"LI",{});var qye=s(v2);$ce=n(qye,"STRONG",{});var adt=s($ce);F0o=r(adt,"marian"),adt.forEach(t),T0o=r(qye," \u2014 "),lD=n(qye,"A",{href:!0});var ndt=s(lD);M0o=r(ndt,"MarianForCausalLM"),ndt.forEach(t),E0o=r(qye," (Marian model)"),qye.forEach(t),C0o=i(Q),F2=n(Q,"LI",{});var jye=s(F2);kce=n(jye,"STRONG",{});var sdt=s(kce);w0o=r(sdt,"mbart"),sdt.forEach(t),A0o=r(jye," \u2014 "),iD=n(jye,"A",{href:!0});var ldt=s(iD);L0o=r(ldt,"MBartForCausalLM"),ldt.forEach(t),y0o=r(jye," (mBART model)"),jye.forEach(t),x0o=i(Q),T2=n(Q,"LI",{});var Dye=s(T2);Sce=n(Dye,"STRONG",{});var idt=s(Sce);$0o=r(idt,"megatron-bert"),idt.forEach(t),k0o=r(Dye," \u2014 "),dD=n(Dye,"A",{href:!0});var ddt=s(dD);S0o=r(ddt,"MegatronBertForCausalLM"),ddt.forEach(t),R0o=r(Dye," (Megatron-BERT model)"),Dye.forEach(t),P0o=i(Q),M2=n(Q,"LI",{});var Gye=s(M2);Rce=n(Gye,"STRONG",{});var cdt=s(Rce);B0o=r(cdt,"openai-gpt"),cdt.forEach(t),I0o=r(Gye," \u2014 "),cD=n(Gye,"A",{href:!0});var fdt=s(cD);N0o=r(fdt,"OpenAIGPTLMHeadModel"),fdt.forEach(t),q0o=r(Gye," (OpenAI GPT model)"),Gye.forEach(t),j0o=i(Q),E2=n(Q,"LI",{});var Oye=s(E2);Pce=n(Oye,"STRONG",{});var mdt=s(Pce);D0o=r(mdt,"opt"),mdt.forEach(t),G0o=r(Oye," \u2014 "),fD=n(Oye,"A",{href:!0});var gdt=s(fD);O0o=r(gdt,"OPTForCausalLM"),gdt.forEach(t),V0o=r(Oye," (OPT model)"),Oye.forEach(t),X0o=i(Q),C2=n(Q,"LI",{});var Vye=s(C2);Bce=n(Vye,"STRONG",{});var hdt=s(Bce);z0o=r(hdt,"pegasus"),hdt.forEach(t),W0o=r(Vye," \u2014 "),mD=n(Vye,"A",{href:!0});var pdt=s(mD);Q0o=r(pdt,"PegasusForCausalLM"),pdt.forEach(t),H0o=r(Vye," (Pegasus model)"),Vye.forEach(t),U0o=i(Q),w2=n(Q,"LI",{});var Xye=s(w2);Ice=n(Xye,"STRONG",{});var _dt=s(Ice);J0o=r(_dt,"plbart"),_dt.forEach(t),Y0o=r(Xye," \u2014 "),gD=n(Xye,"A",{href:!0});var udt=s(gD);K0o=r(udt,"PLBartForCausalLM"),udt.forEach(t),Z0o=r(Xye," (PLBart model)"),Xye.forEach(t),ewo=i(Q),A2=n(Q,"LI",{});var zye=s(A2);Nce=n(zye,"STRONG",{});var bdt=s(Nce);owo=r(bdt,"prophetnet"),bdt.forEach(t),rwo=r(zye," \u2014 "),hD=n(zye,"A",{href:!0});var vdt=s(hD);two=r(vdt,"ProphetNetForCausalLM"),vdt.forEach(t),awo=r(zye," (ProphetNet model)"),zye.forEach(t),nwo=i(Q),L2=n(Q,"LI",{});var Wye=s(L2);qce=n(Wye,"STRONG",{});var Fdt=s(qce);swo=r(Fdt,"qdqbert"),Fdt.forEach(t),lwo=r(Wye," \u2014 "),pD=n(Wye,"A",{href:!0});var Tdt=s(pD);iwo=r(Tdt,"QDQBertLMHeadModel"),Tdt.forEach(t),dwo=r(Wye," (QDQBert model)"),Wye.forEach(t),cwo=i(Q),y2=n(Q,"LI",{});var Qye=s(y2);jce=n(Qye,"STRONG",{});var Mdt=s(jce);fwo=r(Mdt,"reformer"),Mdt.forEach(t),mwo=r(Qye," \u2014 "),_D=n(Qye,"A",{href:!0});var Edt=s(_D);gwo=r(Edt,"ReformerModelWithLMHead"),Edt.forEach(t),hwo=r(Qye," (Reformer model)"),Qye.forEach(t),pwo=i(Q),x2=n(Q,"LI",{});var Hye=s(x2);Dce=n(Hye,"STRONG",{});var Cdt=s(Dce);_wo=r(Cdt,"rembert"),Cdt.forEach(t),uwo=r(Hye," \u2014 "),uD=n(Hye,"A",{href:!0});var wdt=s(uD);bwo=r(wdt,"RemBertForCausalLM"),wdt.forEach(t),vwo=r(Hye," (RemBERT model)"),Hye.forEach(t),Fwo=i(Q),$2=n(Q,"LI",{});var Uye=s($2);Gce=n(Uye,"STRONG",{});var Adt=s(Gce);Two=r(Adt,"roberta"),Adt.forEach(t),Mwo=r(Uye," \u2014 "),bD=n(Uye,"A",{href:!0});var Ldt=s(bD);Ewo=r(Ldt,"RobertaForCausalLM"),Ldt.forEach(t),Cwo=r(Uye," (RoBERTa model)"),Uye.forEach(t),wwo=i(Q),k2=n(Q,"LI",{});var Jye=s(k2);Oce=n(Jye,"STRONG",{});var ydt=s(Oce);Awo=r(ydt,"roformer"),ydt.forEach(t),Lwo=r(Jye," \u2014 "),vD=n(Jye,"A",{href:!0});var xdt=s(vD);ywo=r(xdt,"RoFormerForCausalLM"),xdt.forEach(t),xwo=r(Jye," (RoFormer model)"),Jye.forEach(t),$wo=i(Q),S2=n(Q,"LI",{});var Yye=s(S2);Vce=n(Yye,"STRONG",{});var $dt=s(Vce);kwo=r($dt,"speech_to_text_2"),$dt.forEach(t),Swo=r(Yye," \u2014 "),FD=n(Yye,"A",{href:!0});var kdt=s(FD);Rwo=r(kdt,"Speech2Text2ForCausalLM"),kdt.forEach(t),Pwo=r(Yye," (Speech2Text2 model)"),Yye.forEach(t),Bwo=i(Q),R2=n(Q,"LI",{});var Kye=s(R2);Xce=n(Kye,"STRONG",{});var Sdt=s(Xce);Iwo=r(Sdt,"transfo-xl"),Sdt.forEach(t),Nwo=r(Kye," \u2014 "),TD=n(Kye,"A",{href:!0});var Rdt=s(TD);qwo=r(Rdt,"TransfoXLLMHeadModel"),Rdt.forEach(t),jwo=r(Kye," (Transformer-XL model)"),Kye.forEach(t),Dwo=i(Q),P2=n(Q,"LI",{});var Zye=s(P2);zce=n(Zye,"STRONG",{});var Pdt=s(zce);Gwo=r(Pdt,"trocr"),Pdt.forEach(t),Owo=r(Zye," \u2014 "),MD=n(Zye,"A",{href:!0});var Bdt=s(MD);Vwo=r(Bdt,"TrOCRForCausalLM"),Bdt.forEach(t),Xwo=r(Zye," (TrOCR model)"),Zye.forEach(t),zwo=i(Q),B2=n(Q,"LI",{});var e8e=s(B2);Wce=n(e8e,"STRONG",{});var Idt=s(Wce);Wwo=r(Idt,"xglm"),Idt.forEach(t),Qwo=r(e8e," \u2014 "),ED=n(e8e,"A",{href:!0});var Ndt=s(ED);Hwo=r(Ndt,"XGLMForCausalLM"),Ndt.forEach(t),Uwo=r(e8e," (XGLM model)"),e8e.forEach(t),Jwo=i(Q),I2=n(Q,"LI",{});var o8e=s(I2);Qce=n(o8e,"STRONG",{});var qdt=s(Qce);Ywo=r(qdt,"xlm"),qdt.forEach(t),Kwo=r(o8e," \u2014 "),CD=n(o8e,"A",{href:!0});var jdt=s(CD);Zwo=r(jdt,"XLMWithLMHeadModel"),jdt.forEach(t),eAo=r(o8e," (XLM model)"),o8e.forEach(t),oAo=i(Q),N2=n(Q,"LI",{});var r8e=s(N2);Hce=n(r8e,"STRONG",{});var Ddt=s(Hce);rAo=r(Ddt,"xlm-prophetnet"),Ddt.forEach(t),tAo=r(r8e," \u2014 "),wD=n(r8e,"A",{href:!0});var Gdt=s(wD);aAo=r(Gdt,"XLMProphetNetForCausalLM"),Gdt.forEach(t),nAo=r(r8e," (XLM-ProphetNet model)"),r8e.forEach(t),sAo=i(Q),q2=n(Q,"LI",{});var t8e=s(q2);Uce=n(t8e,"STRONG",{});var Odt=s(Uce);lAo=r(Odt,"xlm-roberta"),Odt.forEach(t),iAo=r(t8e," \u2014 "),AD=n(t8e,"A",{href:!0});var Vdt=s(AD);dAo=r(Vdt,"XLMRobertaForCausalLM"),Vdt.forEach(t),cAo=r(t8e," (XLM-RoBERTa model)"),t8e.forEach(t),fAo=i(Q),j2=n(Q,"LI",{});var a8e=s(j2);Jce=n(a8e,"STRONG",{});var Xdt=s(Jce);mAo=r(Xdt,"xlm-roberta-xl"),Xdt.forEach(t),gAo=r(a8e," \u2014 "),LD=n(a8e,"A",{href:!0});var zdt=s(LD);hAo=r(zdt,"XLMRobertaXLForCausalLM"),zdt.forEach(t),pAo=r(a8e," (XLM-RoBERTa-XL model)"),a8e.forEach(t),_Ao=i(Q),D2=n(Q,"LI",{});var n8e=s(D2);Yce=n(n8e,"STRONG",{});var Wdt=s(Yce);uAo=r(Wdt,"xlnet"),Wdt.forEach(t),bAo=r(n8e," \u2014 "),yD=n(n8e,"A",{href:!0});var Qdt=s(yD);vAo=r(Qdt,"XLNetLMHeadModel"),Qdt.forEach(t),FAo=r(n8e," (XLNet model)"),n8e.forEach(t),Q.forEach(t),TAo=i(ta),G2=n(ta,"P",{});var s8e=s(G2);MAo=r(s8e,"The model is set in evaluation mode by default using "),Kce=n(s8e,"CODE",{});var Hdt=s(Kce);EAo=r(Hdt,"model.eval()"),Hdt.forEach(t),CAo=r(s8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zce=n(s8e,"CODE",{});var Udt=s(Zce);wAo=r(Udt,"model.train()"),Udt.forEach(t),s8e.forEach(t),AAo=i(ta),T(O2.$$.fragment,ta),ta.forEach(t),zs.forEach(t),xje=i(f),Ii=n(f,"H2",{class:!0});var RGe=s(Ii);V2=n(RGe,"A",{id:!0,class:!0,href:!0});var Jdt=s(V2);efe=n(Jdt,"SPAN",{});var Ydt=s(efe);T($A.$$.fragment,Ydt),Ydt.forEach(t),Jdt.forEach(t),LAo=i(RGe),ofe=n(RGe,"SPAN",{});var Kdt=s(ofe);yAo=r(Kdt,"AutoModelForMaskedLM"),Kdt.forEach(t),RGe.forEach(t),$je=i(f),ko=n(f,"DIV",{class:!0});var Ws=s(ko);T(kA.$$.fragment,Ws),xAo=i(Ws),Ni=n(Ws,"P",{});var tee=s(Ni);$Ao=r(tee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),xD=n(tee,"A",{href:!0});var Zdt=s(xD);kAo=r(Zdt,"from_pretrained()"),Zdt.forEach(t),SAo=r(tee," class method or the "),$D=n(tee,"A",{href:!0});var ect=s($D);RAo=r(ect,"from_config()"),ect.forEach(t),PAo=r(tee,` class
method.`),tee.forEach(t),BAo=i(Ws),SA=n(Ws,"P",{});var PGe=s(SA);IAo=r(PGe,"This class cannot be instantiated directly using "),rfe=n(PGe,"CODE",{});var oct=s(rfe);NAo=r(oct,"__init__()"),oct.forEach(t),qAo=r(PGe," (throws an error)."),PGe.forEach(t),jAo=i(Ws),st=n(Ws,"DIV",{class:!0});var Z3=s(st);T(RA.$$.fragment,Z3),DAo=i(Z3),tfe=n(Z3,"P",{});var rct=s(tfe);GAo=r(rct,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),rct.forEach(t),OAo=i(Z3),qi=n(Z3,"P",{});var aee=s(qi);VAo=r(aee,`Note:
Loading a model from its configuration file does `),afe=n(aee,"STRONG",{});var tct=s(afe);XAo=r(tct,"not"),tct.forEach(t),zAo=r(aee,` load the model weights. It only affects the
model\u2019s configuration. Use `),kD=n(aee,"A",{href:!0});var act=s(kD);WAo=r(act,"from_pretrained()"),act.forEach(t),QAo=r(aee," to load the model weights."),aee.forEach(t),HAo=i(Z3),T(X2.$$.fragment,Z3),Z3.forEach(t),UAo=i(Ws),Ze=n(Ws,"DIV",{class:!0});var aa=s(Ze);T(PA.$$.fragment,aa),JAo=i(aa),nfe=n(aa,"P",{});var nct=s(nfe);YAo=r(nct,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),nct.forEach(t),KAo=i(aa),ka=n(aa,"P",{});var e0=s(ka);ZAo=r(e0,"The model class to instantiate is selected based on the "),sfe=n(e0,"CODE",{});var sct=s(sfe);eLo=r(sct,"model_type"),sct.forEach(t),oLo=r(e0,` property of the config object (either
passed as an argument or loaded from `),lfe=n(e0,"CODE",{});var lct=s(lfe);rLo=r(lct,"pretrained_model_name_or_path"),lct.forEach(t),tLo=r(e0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ife=n(e0,"CODE",{});var ict=s(ife);aLo=r(ict,"pretrained_model_name_or_path"),ict.forEach(t),nLo=r(e0,":"),e0.forEach(t),sLo=i(aa),W=n(aa,"UL",{});var H=s(W);z2=n(H,"LI",{});var l8e=s(z2);dfe=n(l8e,"STRONG",{});var dct=s(dfe);lLo=r(dct,"albert"),dct.forEach(t),iLo=r(l8e," \u2014 "),SD=n(l8e,"A",{href:!0});var cct=s(SD);dLo=r(cct,"AlbertForMaskedLM"),cct.forEach(t),cLo=r(l8e," (ALBERT model)"),l8e.forEach(t),fLo=i(H),W2=n(H,"LI",{});var i8e=s(W2);cfe=n(i8e,"STRONG",{});var fct=s(cfe);mLo=r(fct,"bart"),fct.forEach(t),gLo=r(i8e," \u2014 "),RD=n(i8e,"A",{href:!0});var mct=s(RD);hLo=r(mct,"BartForConditionalGeneration"),mct.forEach(t),pLo=r(i8e," (BART model)"),i8e.forEach(t),_Lo=i(H),Q2=n(H,"LI",{});var d8e=s(Q2);ffe=n(d8e,"STRONG",{});var gct=s(ffe);uLo=r(gct,"bert"),gct.forEach(t),bLo=r(d8e," \u2014 "),PD=n(d8e,"A",{href:!0});var hct=s(PD);vLo=r(hct,"BertForMaskedLM"),hct.forEach(t),FLo=r(d8e," (BERT model)"),d8e.forEach(t),TLo=i(H),H2=n(H,"LI",{});var c8e=s(H2);mfe=n(c8e,"STRONG",{});var pct=s(mfe);MLo=r(pct,"big_bird"),pct.forEach(t),ELo=r(c8e," \u2014 "),BD=n(c8e,"A",{href:!0});var _ct=s(BD);CLo=r(_ct,"BigBirdForMaskedLM"),_ct.forEach(t),wLo=r(c8e," (BigBird model)"),c8e.forEach(t),ALo=i(H),U2=n(H,"LI",{});var f8e=s(U2);gfe=n(f8e,"STRONG",{});var uct=s(gfe);LLo=r(uct,"camembert"),uct.forEach(t),yLo=r(f8e," \u2014 "),ID=n(f8e,"A",{href:!0});var bct=s(ID);xLo=r(bct,"CamembertForMaskedLM"),bct.forEach(t),$Lo=r(f8e," (CamemBERT model)"),f8e.forEach(t),kLo=i(H),J2=n(H,"LI",{});var m8e=s(J2);hfe=n(m8e,"STRONG",{});var vct=s(hfe);SLo=r(vct,"convbert"),vct.forEach(t),RLo=r(m8e," \u2014 "),ND=n(m8e,"A",{href:!0});var Fct=s(ND);PLo=r(Fct,"ConvBertForMaskedLM"),Fct.forEach(t),BLo=r(m8e," (ConvBERT model)"),m8e.forEach(t),ILo=i(H),Y2=n(H,"LI",{});var g8e=s(Y2);pfe=n(g8e,"STRONG",{});var Tct=s(pfe);NLo=r(Tct,"data2vec-text"),Tct.forEach(t),qLo=r(g8e," \u2014 "),qD=n(g8e,"A",{href:!0});var Mct=s(qD);jLo=r(Mct,"Data2VecTextForMaskedLM"),Mct.forEach(t),DLo=r(g8e," (Data2VecText model)"),g8e.forEach(t),GLo=i(H),K2=n(H,"LI",{});var h8e=s(K2);_fe=n(h8e,"STRONG",{});var Ect=s(_fe);OLo=r(Ect,"deberta"),Ect.forEach(t),VLo=r(h8e," \u2014 "),jD=n(h8e,"A",{href:!0});var Cct=s(jD);XLo=r(Cct,"DebertaForMaskedLM"),Cct.forEach(t),zLo=r(h8e," (DeBERTa model)"),h8e.forEach(t),WLo=i(H),Z2=n(H,"LI",{});var p8e=s(Z2);ufe=n(p8e,"STRONG",{});var wct=s(ufe);QLo=r(wct,"deberta-v2"),wct.forEach(t),HLo=r(p8e," \u2014 "),DD=n(p8e,"A",{href:!0});var Act=s(DD);ULo=r(Act,"DebertaV2ForMaskedLM"),Act.forEach(t),JLo=r(p8e," (DeBERTa-v2 model)"),p8e.forEach(t),YLo=i(H),e1=n(H,"LI",{});var _8e=s(e1);bfe=n(_8e,"STRONG",{});var Lct=s(bfe);KLo=r(Lct,"distilbert"),Lct.forEach(t),ZLo=r(_8e," \u2014 "),GD=n(_8e,"A",{href:!0});var yct=s(GD);eyo=r(yct,"DistilBertForMaskedLM"),yct.forEach(t),oyo=r(_8e," (DistilBERT model)"),_8e.forEach(t),ryo=i(H),o1=n(H,"LI",{});var u8e=s(o1);vfe=n(u8e,"STRONG",{});var xct=s(vfe);tyo=r(xct,"electra"),xct.forEach(t),ayo=r(u8e," \u2014 "),OD=n(u8e,"A",{href:!0});var $ct=s(OD);nyo=r($ct,"ElectraForMaskedLM"),$ct.forEach(t),syo=r(u8e," (ELECTRA model)"),u8e.forEach(t),lyo=i(H),r1=n(H,"LI",{});var b8e=s(r1);Ffe=n(b8e,"STRONG",{});var kct=s(Ffe);iyo=r(kct,"flaubert"),kct.forEach(t),dyo=r(b8e," \u2014 "),VD=n(b8e,"A",{href:!0});var Sct=s(VD);cyo=r(Sct,"FlaubertWithLMHeadModel"),Sct.forEach(t),fyo=r(b8e," (FlauBERT model)"),b8e.forEach(t),myo=i(H),t1=n(H,"LI",{});var v8e=s(t1);Tfe=n(v8e,"STRONG",{});var Rct=s(Tfe);gyo=r(Rct,"fnet"),Rct.forEach(t),hyo=r(v8e," \u2014 "),XD=n(v8e,"A",{href:!0});var Pct=s(XD);pyo=r(Pct,"FNetForMaskedLM"),Pct.forEach(t),_yo=r(v8e," (FNet model)"),v8e.forEach(t),uyo=i(H),a1=n(H,"LI",{});var F8e=s(a1);Mfe=n(F8e,"STRONG",{});var Bct=s(Mfe);byo=r(Bct,"funnel"),Bct.forEach(t),vyo=r(F8e," \u2014 "),zD=n(F8e,"A",{href:!0});var Ict=s(zD);Fyo=r(Ict,"FunnelForMaskedLM"),Ict.forEach(t),Tyo=r(F8e," (Funnel Transformer model)"),F8e.forEach(t),Myo=i(H),n1=n(H,"LI",{});var T8e=s(n1);Efe=n(T8e,"STRONG",{});var Nct=s(Efe);Eyo=r(Nct,"ibert"),Nct.forEach(t),Cyo=r(T8e," \u2014 "),WD=n(T8e,"A",{href:!0});var qct=s(WD);wyo=r(qct,"IBertForMaskedLM"),qct.forEach(t),Ayo=r(T8e," (I-BERT model)"),T8e.forEach(t),Lyo=i(H),s1=n(H,"LI",{});var M8e=s(s1);Cfe=n(M8e,"STRONG",{});var jct=s(Cfe);yyo=r(jct,"layoutlm"),jct.forEach(t),xyo=r(M8e," \u2014 "),QD=n(M8e,"A",{href:!0});var Dct=s(QD);$yo=r(Dct,"LayoutLMForMaskedLM"),Dct.forEach(t),kyo=r(M8e," (LayoutLM model)"),M8e.forEach(t),Syo=i(H),l1=n(H,"LI",{});var E8e=s(l1);wfe=n(E8e,"STRONG",{});var Gct=s(wfe);Ryo=r(Gct,"longformer"),Gct.forEach(t),Pyo=r(E8e," \u2014 "),HD=n(E8e,"A",{href:!0});var Oct=s(HD);Byo=r(Oct,"LongformerForMaskedLM"),Oct.forEach(t),Iyo=r(E8e," (Longformer model)"),E8e.forEach(t),Nyo=i(H),i1=n(H,"LI",{});var C8e=s(i1);Afe=n(C8e,"STRONG",{});var Vct=s(Afe);qyo=r(Vct,"luke"),Vct.forEach(t),jyo=r(C8e," \u2014 "),UD=n(C8e,"A",{href:!0});var Xct=s(UD);Dyo=r(Xct,"LukeForMaskedLM"),Xct.forEach(t),Gyo=r(C8e," (LUKE model)"),C8e.forEach(t),Oyo=i(H),d1=n(H,"LI",{});var w8e=s(d1);Lfe=n(w8e,"STRONG",{});var zct=s(Lfe);Vyo=r(zct,"mbart"),zct.forEach(t),Xyo=r(w8e," \u2014 "),JD=n(w8e,"A",{href:!0});var Wct=s(JD);zyo=r(Wct,"MBartForConditionalGeneration"),Wct.forEach(t),Wyo=r(w8e," (mBART model)"),w8e.forEach(t),Qyo=i(H),c1=n(H,"LI",{});var A8e=s(c1);yfe=n(A8e,"STRONG",{});var Qct=s(yfe);Hyo=r(Qct,"megatron-bert"),Qct.forEach(t),Uyo=r(A8e," \u2014 "),YD=n(A8e,"A",{href:!0});var Hct=s(YD);Jyo=r(Hct,"MegatronBertForMaskedLM"),Hct.forEach(t),Yyo=r(A8e," (Megatron-BERT model)"),A8e.forEach(t),Kyo=i(H),f1=n(H,"LI",{});var L8e=s(f1);xfe=n(L8e,"STRONG",{});var Uct=s(xfe);Zyo=r(Uct,"mobilebert"),Uct.forEach(t),e8o=r(L8e," \u2014 "),KD=n(L8e,"A",{href:!0});var Jct=s(KD);o8o=r(Jct,"MobileBertForMaskedLM"),Jct.forEach(t),r8o=r(L8e," (MobileBERT model)"),L8e.forEach(t),t8o=i(H),m1=n(H,"LI",{});var y8e=s(m1);$fe=n(y8e,"STRONG",{});var Yct=s($fe);a8o=r(Yct,"mpnet"),Yct.forEach(t),n8o=r(y8e," \u2014 "),ZD=n(y8e,"A",{href:!0});var Kct=s(ZD);s8o=r(Kct,"MPNetForMaskedLM"),Kct.forEach(t),l8o=r(y8e," (MPNet model)"),y8e.forEach(t),i8o=i(H),g1=n(H,"LI",{});var x8e=s(g1);kfe=n(x8e,"STRONG",{});var Zct=s(kfe);d8o=r(Zct,"nystromformer"),Zct.forEach(t),c8o=r(x8e," \u2014 "),eG=n(x8e,"A",{href:!0});var eft=s(eG);f8o=r(eft,"NystromformerForMaskedLM"),eft.forEach(t),m8o=r(x8e," (Nystr\xF6mformer model)"),x8e.forEach(t),g8o=i(H),h1=n(H,"LI",{});var $8e=s(h1);Sfe=n($8e,"STRONG",{});var oft=s(Sfe);h8o=r(oft,"perceiver"),oft.forEach(t),p8o=r($8e," \u2014 "),oG=n($8e,"A",{href:!0});var rft=s(oG);_8o=r(rft,"PerceiverForMaskedLM"),rft.forEach(t),u8o=r($8e," (Perceiver model)"),$8e.forEach(t),b8o=i(H),p1=n(H,"LI",{});var k8e=s(p1);Rfe=n(k8e,"STRONG",{});var tft=s(Rfe);v8o=r(tft,"qdqbert"),tft.forEach(t),F8o=r(k8e," \u2014 "),rG=n(k8e,"A",{href:!0});var aft=s(rG);T8o=r(aft,"QDQBertForMaskedLM"),aft.forEach(t),M8o=r(k8e," (QDQBert model)"),k8e.forEach(t),E8o=i(H),_1=n(H,"LI",{});var S8e=s(_1);Pfe=n(S8e,"STRONG",{});var nft=s(Pfe);C8o=r(nft,"reformer"),nft.forEach(t),w8o=r(S8e," \u2014 "),tG=n(S8e,"A",{href:!0});var sft=s(tG);A8o=r(sft,"ReformerForMaskedLM"),sft.forEach(t),L8o=r(S8e," (Reformer model)"),S8e.forEach(t),y8o=i(H),u1=n(H,"LI",{});var R8e=s(u1);Bfe=n(R8e,"STRONG",{});var lft=s(Bfe);x8o=r(lft,"rembert"),lft.forEach(t),$8o=r(R8e," \u2014 "),aG=n(R8e,"A",{href:!0});var ift=s(aG);k8o=r(ift,"RemBertForMaskedLM"),ift.forEach(t),S8o=r(R8e," (RemBERT model)"),R8e.forEach(t),R8o=i(H),b1=n(H,"LI",{});var P8e=s(b1);Ife=n(P8e,"STRONG",{});var dft=s(Ife);P8o=r(dft,"roberta"),dft.forEach(t),B8o=r(P8e," \u2014 "),nG=n(P8e,"A",{href:!0});var cft=s(nG);I8o=r(cft,"RobertaForMaskedLM"),cft.forEach(t),N8o=r(P8e," (RoBERTa model)"),P8e.forEach(t),q8o=i(H),v1=n(H,"LI",{});var B8e=s(v1);Nfe=n(B8e,"STRONG",{});var fft=s(Nfe);j8o=r(fft,"roformer"),fft.forEach(t),D8o=r(B8e," \u2014 "),sG=n(B8e,"A",{href:!0});var mft=s(sG);G8o=r(mft,"RoFormerForMaskedLM"),mft.forEach(t),O8o=r(B8e," (RoFormer model)"),B8e.forEach(t),V8o=i(H),F1=n(H,"LI",{});var I8e=s(F1);qfe=n(I8e,"STRONG",{});var gft=s(qfe);X8o=r(gft,"squeezebert"),gft.forEach(t),z8o=r(I8e," \u2014 "),lG=n(I8e,"A",{href:!0});var hft=s(lG);W8o=r(hft,"SqueezeBertForMaskedLM"),hft.forEach(t),Q8o=r(I8e," (SqueezeBERT model)"),I8e.forEach(t),H8o=i(H),T1=n(H,"LI",{});var N8e=s(T1);jfe=n(N8e,"STRONG",{});var pft=s(jfe);U8o=r(pft,"tapas"),pft.forEach(t),J8o=r(N8e," \u2014 "),iG=n(N8e,"A",{href:!0});var _ft=s(iG);Y8o=r(_ft,"TapasForMaskedLM"),_ft.forEach(t),K8o=r(N8e," (TAPAS model)"),N8e.forEach(t),Z8o=i(H),M1=n(H,"LI",{});var q8e=s(M1);Dfe=n(q8e,"STRONG",{});var uft=s(Dfe);exo=r(uft,"wav2vec2"),uft.forEach(t),oxo=r(q8e," \u2014 "),Gfe=n(q8e,"CODE",{});var bft=s(Gfe);rxo=r(bft,"Wav2Vec2ForMaskedLM"),bft.forEach(t),txo=r(q8e," (Wav2Vec2 model)"),q8e.forEach(t),axo=i(H),E1=n(H,"LI",{});var j8e=s(E1);Ofe=n(j8e,"STRONG",{});var vft=s(Ofe);nxo=r(vft,"xlm"),vft.forEach(t),sxo=r(j8e," \u2014 "),dG=n(j8e,"A",{href:!0});var Fft=s(dG);lxo=r(Fft,"XLMWithLMHeadModel"),Fft.forEach(t),ixo=r(j8e," (XLM model)"),j8e.forEach(t),dxo=i(H),C1=n(H,"LI",{});var D8e=s(C1);Vfe=n(D8e,"STRONG",{});var Tft=s(Vfe);cxo=r(Tft,"xlm-roberta"),Tft.forEach(t),fxo=r(D8e," \u2014 "),cG=n(D8e,"A",{href:!0});var Mft=s(cG);mxo=r(Mft,"XLMRobertaForMaskedLM"),Mft.forEach(t),gxo=r(D8e," (XLM-RoBERTa model)"),D8e.forEach(t),hxo=i(H),w1=n(H,"LI",{});var G8e=s(w1);Xfe=n(G8e,"STRONG",{});var Eft=s(Xfe);pxo=r(Eft,"xlm-roberta-xl"),Eft.forEach(t),_xo=r(G8e," \u2014 "),fG=n(G8e,"A",{href:!0});var Cft=s(fG);uxo=r(Cft,"XLMRobertaXLForMaskedLM"),Cft.forEach(t),bxo=r(G8e," (XLM-RoBERTa-XL model)"),G8e.forEach(t),vxo=i(H),A1=n(H,"LI",{});var O8e=s(A1);zfe=n(O8e,"STRONG",{});var wft=s(zfe);Fxo=r(wft,"yoso"),wft.forEach(t),Txo=r(O8e," \u2014 "),mG=n(O8e,"A",{href:!0});var Aft=s(mG);Mxo=r(Aft,"YosoForMaskedLM"),Aft.forEach(t),Exo=r(O8e," (YOSO model)"),O8e.forEach(t),H.forEach(t),Cxo=i(aa),L1=n(aa,"P",{});var V8e=s(L1);wxo=r(V8e,"The model is set in evaluation mode by default using "),Wfe=n(V8e,"CODE",{});var Lft=s(Wfe);Axo=r(Lft,"model.eval()"),Lft.forEach(t),Lxo=r(V8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qfe=n(V8e,"CODE",{});var yft=s(Qfe);yxo=r(yft,"model.train()"),yft.forEach(t),V8e.forEach(t),xxo=i(aa),T(y1.$$.fragment,aa),aa.forEach(t),Ws.forEach(t),kje=i(f),ji=n(f,"H2",{class:!0});var BGe=s(ji);x1=n(BGe,"A",{id:!0,class:!0,href:!0});var xft=s(x1);Hfe=n(xft,"SPAN",{});var $ft=s(Hfe);T(BA.$$.fragment,$ft),$ft.forEach(t),xft.forEach(t),$xo=i(BGe),Ufe=n(BGe,"SPAN",{});var kft=s(Ufe);kxo=r(kft,"AutoModelForSeq2SeqLM"),kft.forEach(t),BGe.forEach(t),Sje=i(f),So=n(f,"DIV",{class:!0});var Qs=s(So);T(IA.$$.fragment,Qs),Sxo=i(Qs),Di=n(Qs,"P",{});var nee=s(Di);Rxo=r(nee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),gG=n(nee,"A",{href:!0});var Sft=s(gG);Pxo=r(Sft,"from_pretrained()"),Sft.forEach(t),Bxo=r(nee," class method or the "),hG=n(nee,"A",{href:!0});var Rft=s(hG);Ixo=r(Rft,"from_config()"),Rft.forEach(t),Nxo=r(nee,` class
method.`),nee.forEach(t),qxo=i(Qs),NA=n(Qs,"P",{});var IGe=s(NA);jxo=r(IGe,"This class cannot be instantiated directly using "),Jfe=n(IGe,"CODE",{});var Pft=s(Jfe);Dxo=r(Pft,"__init__()"),Pft.forEach(t),Gxo=r(IGe," (throws an error)."),IGe.forEach(t),Oxo=i(Qs),lt=n(Qs,"DIV",{class:!0});var o0=s(lt);T(qA.$$.fragment,o0),Vxo=i(o0),Yfe=n(o0,"P",{});var Bft=s(Yfe);Xxo=r(Bft,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Bft.forEach(t),zxo=i(o0),Gi=n(o0,"P",{});var see=s(Gi);Wxo=r(see,`Note:
Loading a model from its configuration file does `),Kfe=n(see,"STRONG",{});var Ift=s(Kfe);Qxo=r(Ift,"not"),Ift.forEach(t),Hxo=r(see,` load the model weights. It only affects the
model\u2019s configuration. Use `),pG=n(see,"A",{href:!0});var Nft=s(pG);Uxo=r(Nft,"from_pretrained()"),Nft.forEach(t),Jxo=r(see," to load the model weights."),see.forEach(t),Yxo=i(o0),T($1.$$.fragment,o0),o0.forEach(t),Kxo=i(Qs),eo=n(Qs,"DIV",{class:!0});var na=s(eo);T(jA.$$.fragment,na),Zxo=i(na),Zfe=n(na,"P",{});var qft=s(Zfe);e$o=r(qft,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),qft.forEach(t),o$o=i(na),Sa=n(na,"P",{});var r0=s(Sa);r$o=r(r0,"The model class to instantiate is selected based on the "),eme=n(r0,"CODE",{});var jft=s(eme);t$o=r(jft,"model_type"),jft.forEach(t),a$o=r(r0,` property of the config object (either
passed as an argument or loaded from `),ome=n(r0,"CODE",{});var Dft=s(ome);n$o=r(Dft,"pretrained_model_name_or_path"),Dft.forEach(t),s$o=r(r0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rme=n(r0,"CODE",{});var Gft=s(rme);l$o=r(Gft,"pretrained_model_name_or_path"),Gft.forEach(t),i$o=r(r0,":"),r0.forEach(t),d$o=i(na),pe=n(na,"UL",{});var be=s(pe);k1=n(be,"LI",{});var X8e=s(k1);tme=n(X8e,"STRONG",{});var Oft=s(tme);c$o=r(Oft,"bart"),Oft.forEach(t),f$o=r(X8e," \u2014 "),_G=n(X8e,"A",{href:!0});var Vft=s(_G);m$o=r(Vft,"BartForConditionalGeneration"),Vft.forEach(t),g$o=r(X8e," (BART model)"),X8e.forEach(t),h$o=i(be),S1=n(be,"LI",{});var z8e=s(S1);ame=n(z8e,"STRONG",{});var Xft=s(ame);p$o=r(Xft,"bigbird_pegasus"),Xft.forEach(t),_$o=r(z8e," \u2014 "),uG=n(z8e,"A",{href:!0});var zft=s(uG);u$o=r(zft,"BigBirdPegasusForConditionalGeneration"),zft.forEach(t),b$o=r(z8e," (BigBird-Pegasus model)"),z8e.forEach(t),v$o=i(be),R1=n(be,"LI",{});var W8e=s(R1);nme=n(W8e,"STRONG",{});var Wft=s(nme);F$o=r(Wft,"blenderbot"),Wft.forEach(t),T$o=r(W8e," \u2014 "),bG=n(W8e,"A",{href:!0});var Qft=s(bG);M$o=r(Qft,"BlenderbotForConditionalGeneration"),Qft.forEach(t),E$o=r(W8e," (Blenderbot model)"),W8e.forEach(t),C$o=i(be),P1=n(be,"LI",{});var Q8e=s(P1);sme=n(Q8e,"STRONG",{});var Hft=s(sme);w$o=r(Hft,"blenderbot-small"),Hft.forEach(t),A$o=r(Q8e," \u2014 "),vG=n(Q8e,"A",{href:!0});var Uft=s(vG);L$o=r(Uft,"BlenderbotSmallForConditionalGeneration"),Uft.forEach(t),y$o=r(Q8e," (BlenderbotSmall model)"),Q8e.forEach(t),x$o=i(be),B1=n(be,"LI",{});var H8e=s(B1);lme=n(H8e,"STRONG",{});var Jft=s(lme);$$o=r(Jft,"encoder-decoder"),Jft.forEach(t),k$o=r(H8e," \u2014 "),FG=n(H8e,"A",{href:!0});var Yft=s(FG);S$o=r(Yft,"EncoderDecoderModel"),Yft.forEach(t),R$o=r(H8e," (Encoder decoder model)"),H8e.forEach(t),P$o=i(be),I1=n(be,"LI",{});var U8e=s(I1);ime=n(U8e,"STRONG",{});var Kft=s(ime);B$o=r(Kft,"fsmt"),Kft.forEach(t),I$o=r(U8e," \u2014 "),TG=n(U8e,"A",{href:!0});var Zft=s(TG);N$o=r(Zft,"FSMTForConditionalGeneration"),Zft.forEach(t),q$o=r(U8e," (FairSeq Machine-Translation model)"),U8e.forEach(t),j$o=i(be),N1=n(be,"LI",{});var J8e=s(N1);dme=n(J8e,"STRONG",{});var emt=s(dme);D$o=r(emt,"led"),emt.forEach(t),G$o=r(J8e," \u2014 "),MG=n(J8e,"A",{href:!0});var omt=s(MG);O$o=r(omt,"LEDForConditionalGeneration"),omt.forEach(t),V$o=r(J8e," (LED model)"),J8e.forEach(t),X$o=i(be),q1=n(be,"LI",{});var Y8e=s(q1);cme=n(Y8e,"STRONG",{});var rmt=s(cme);z$o=r(rmt,"longt5"),rmt.forEach(t),W$o=r(Y8e," \u2014 "),EG=n(Y8e,"A",{href:!0});var tmt=s(EG);Q$o=r(tmt,"LongT5ForConditionalGeneration"),tmt.forEach(t),H$o=r(Y8e," (LongT5 model)"),Y8e.forEach(t),U$o=i(be),j1=n(be,"LI",{});var K8e=s(j1);fme=n(K8e,"STRONG",{});var amt=s(fme);J$o=r(amt,"m2m_100"),amt.forEach(t),Y$o=r(K8e," \u2014 "),CG=n(K8e,"A",{href:!0});var nmt=s(CG);K$o=r(nmt,"M2M100ForConditionalGeneration"),nmt.forEach(t),Z$o=r(K8e," (M2M100 model)"),K8e.forEach(t),eko=i(be),D1=n(be,"LI",{});var Z8e=s(D1);mme=n(Z8e,"STRONG",{});var smt=s(mme);oko=r(smt,"marian"),smt.forEach(t),rko=r(Z8e," \u2014 "),wG=n(Z8e,"A",{href:!0});var lmt=s(wG);tko=r(lmt,"MarianMTModel"),lmt.forEach(t),ako=r(Z8e," (Marian model)"),Z8e.forEach(t),nko=i(be),G1=n(be,"LI",{});var exe=s(G1);gme=n(exe,"STRONG",{});var imt=s(gme);sko=r(imt,"mbart"),imt.forEach(t),lko=r(exe," \u2014 "),AG=n(exe,"A",{href:!0});var dmt=s(AG);iko=r(dmt,"MBartForConditionalGeneration"),dmt.forEach(t),dko=r(exe," (mBART model)"),exe.forEach(t),cko=i(be),O1=n(be,"LI",{});var oxe=s(O1);hme=n(oxe,"STRONG",{});var cmt=s(hme);fko=r(cmt,"mt5"),cmt.forEach(t),mko=r(oxe," \u2014 "),LG=n(oxe,"A",{href:!0});var fmt=s(LG);gko=r(fmt,"MT5ForConditionalGeneration"),fmt.forEach(t),hko=r(oxe," (MT5 model)"),oxe.forEach(t),pko=i(be),V1=n(be,"LI",{});var rxe=s(V1);pme=n(rxe,"STRONG",{});var mmt=s(pme);_ko=r(mmt,"pegasus"),mmt.forEach(t),uko=r(rxe," \u2014 "),yG=n(rxe,"A",{href:!0});var gmt=s(yG);bko=r(gmt,"PegasusForConditionalGeneration"),gmt.forEach(t),vko=r(rxe," (Pegasus model)"),rxe.forEach(t),Fko=i(be),X1=n(be,"LI",{});var txe=s(X1);_me=n(txe,"STRONG",{});var hmt=s(_me);Tko=r(hmt,"plbart"),hmt.forEach(t),Mko=r(txe," \u2014 "),xG=n(txe,"A",{href:!0});var pmt=s(xG);Eko=r(pmt,"PLBartForConditionalGeneration"),pmt.forEach(t),Cko=r(txe," (PLBart model)"),txe.forEach(t),wko=i(be),z1=n(be,"LI",{});var axe=s(z1);ume=n(axe,"STRONG",{});var _mt=s(ume);Ako=r(_mt,"prophetnet"),_mt.forEach(t),Lko=r(axe," \u2014 "),$G=n(axe,"A",{href:!0});var umt=s($G);yko=r(umt,"ProphetNetForConditionalGeneration"),umt.forEach(t),xko=r(axe," (ProphetNet model)"),axe.forEach(t),$ko=i(be),W1=n(be,"LI",{});var nxe=s(W1);bme=n(nxe,"STRONG",{});var bmt=s(bme);kko=r(bmt,"t5"),bmt.forEach(t),Sko=r(nxe," \u2014 "),kG=n(nxe,"A",{href:!0});var vmt=s(kG);Rko=r(vmt,"T5ForConditionalGeneration"),vmt.forEach(t),Pko=r(nxe," (T5 model)"),nxe.forEach(t),Bko=i(be),Q1=n(be,"LI",{});var sxe=s(Q1);vme=n(sxe,"STRONG",{});var Fmt=s(vme);Iko=r(Fmt,"xlm-prophetnet"),Fmt.forEach(t),Nko=r(sxe," \u2014 "),SG=n(sxe,"A",{href:!0});var Tmt=s(SG);qko=r(Tmt,"XLMProphetNetForConditionalGeneration"),Tmt.forEach(t),jko=r(sxe," (XLM-ProphetNet model)"),sxe.forEach(t),be.forEach(t),Dko=i(na),H1=n(na,"P",{});var lxe=s(H1);Gko=r(lxe,"The model is set in evaluation mode by default using "),Fme=n(lxe,"CODE",{});var Mmt=s(Fme);Oko=r(Mmt,"model.eval()"),Mmt.forEach(t),Vko=r(lxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tme=n(lxe,"CODE",{});var Emt=s(Tme);Xko=r(Emt,"model.train()"),Emt.forEach(t),lxe.forEach(t),zko=i(na),T(U1.$$.fragment,na),na.forEach(t),Qs.forEach(t),Rje=i(f),Oi=n(f,"H2",{class:!0});var NGe=s(Oi);J1=n(NGe,"A",{id:!0,class:!0,href:!0});var Cmt=s(J1);Mme=n(Cmt,"SPAN",{});var wmt=s(Mme);T(DA.$$.fragment,wmt),wmt.forEach(t),Cmt.forEach(t),Wko=i(NGe),Eme=n(NGe,"SPAN",{});var Amt=s(Eme);Qko=r(Amt,"AutoModelForSequenceClassification"),Amt.forEach(t),NGe.forEach(t),Pje=i(f),Ro=n(f,"DIV",{class:!0});var Hs=s(Ro);T(GA.$$.fragment,Hs),Hko=i(Hs),Vi=n(Hs,"P",{});var lee=s(Vi);Uko=r(lee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),RG=n(lee,"A",{href:!0});var Lmt=s(RG);Jko=r(Lmt,"from_pretrained()"),Lmt.forEach(t),Yko=r(lee," class method or the "),PG=n(lee,"A",{href:!0});var ymt=s(PG);Kko=r(ymt,"from_config()"),ymt.forEach(t),Zko=r(lee,` class
method.`),lee.forEach(t),eSo=i(Hs),OA=n(Hs,"P",{});var qGe=s(OA);oSo=r(qGe,"This class cannot be instantiated directly using "),Cme=n(qGe,"CODE",{});var xmt=s(Cme);rSo=r(xmt,"__init__()"),xmt.forEach(t),tSo=r(qGe," (throws an error)."),qGe.forEach(t),aSo=i(Hs),it=n(Hs,"DIV",{class:!0});var t0=s(it);T(VA.$$.fragment,t0),nSo=i(t0),wme=n(t0,"P",{});var $mt=s(wme);sSo=r($mt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),$mt.forEach(t),lSo=i(t0),Xi=n(t0,"P",{});var iee=s(Xi);iSo=r(iee,`Note:
Loading a model from its configuration file does `),Ame=n(iee,"STRONG",{});var kmt=s(Ame);dSo=r(kmt,"not"),kmt.forEach(t),cSo=r(iee,` load the model weights. It only affects the
model\u2019s configuration. Use `),BG=n(iee,"A",{href:!0});var Smt=s(BG);fSo=r(Smt,"from_pretrained()"),Smt.forEach(t),mSo=r(iee," to load the model weights."),iee.forEach(t),gSo=i(t0),T(Y1.$$.fragment,t0),t0.forEach(t),hSo=i(Hs),oo=n(Hs,"DIV",{class:!0});var sa=s(oo);T(XA.$$.fragment,sa),pSo=i(sa),Lme=n(sa,"P",{});var Rmt=s(Lme);_So=r(Rmt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Rmt.forEach(t),uSo=i(sa),Ra=n(sa,"P",{});var a0=s(Ra);bSo=r(a0,"The model class to instantiate is selected based on the "),yme=n(a0,"CODE",{});var Pmt=s(yme);vSo=r(Pmt,"model_type"),Pmt.forEach(t),FSo=r(a0,` property of the config object (either
passed as an argument or loaded from `),xme=n(a0,"CODE",{});var Bmt=s(xme);TSo=r(Bmt,"pretrained_model_name_or_path"),Bmt.forEach(t),MSo=r(a0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$me=n(a0,"CODE",{});var Imt=s($me);ESo=r(Imt,"pretrained_model_name_or_path"),Imt.forEach(t),CSo=r(a0,":"),a0.forEach(t),wSo=i(sa),N=n(sa,"UL",{});var j=s(N);K1=n(j,"LI",{});var ixe=s(K1);kme=n(ixe,"STRONG",{});var Nmt=s(kme);ASo=r(Nmt,"albert"),Nmt.forEach(t),LSo=r(ixe," \u2014 "),IG=n(ixe,"A",{href:!0});var qmt=s(IG);ySo=r(qmt,"AlbertForSequenceClassification"),qmt.forEach(t),xSo=r(ixe," (ALBERT model)"),ixe.forEach(t),$So=i(j),Z1=n(j,"LI",{});var dxe=s(Z1);Sme=n(dxe,"STRONG",{});var jmt=s(Sme);kSo=r(jmt,"bart"),jmt.forEach(t),SSo=r(dxe," \u2014 "),NG=n(dxe,"A",{href:!0});var Dmt=s(NG);RSo=r(Dmt,"BartForSequenceClassification"),Dmt.forEach(t),PSo=r(dxe," (BART model)"),dxe.forEach(t),BSo=i(j),eb=n(j,"LI",{});var cxe=s(eb);Rme=n(cxe,"STRONG",{});var Gmt=s(Rme);ISo=r(Gmt,"bert"),Gmt.forEach(t),NSo=r(cxe," \u2014 "),qG=n(cxe,"A",{href:!0});var Omt=s(qG);qSo=r(Omt,"BertForSequenceClassification"),Omt.forEach(t),jSo=r(cxe," (BERT model)"),cxe.forEach(t),DSo=i(j),ob=n(j,"LI",{});var fxe=s(ob);Pme=n(fxe,"STRONG",{});var Vmt=s(Pme);GSo=r(Vmt,"big_bird"),Vmt.forEach(t),OSo=r(fxe," \u2014 "),jG=n(fxe,"A",{href:!0});var Xmt=s(jG);VSo=r(Xmt,"BigBirdForSequenceClassification"),Xmt.forEach(t),XSo=r(fxe," (BigBird model)"),fxe.forEach(t),zSo=i(j),rb=n(j,"LI",{});var mxe=s(rb);Bme=n(mxe,"STRONG",{});var zmt=s(Bme);WSo=r(zmt,"bigbird_pegasus"),zmt.forEach(t),QSo=r(mxe," \u2014 "),DG=n(mxe,"A",{href:!0});var Wmt=s(DG);HSo=r(Wmt,"BigBirdPegasusForSequenceClassification"),Wmt.forEach(t),USo=r(mxe," (BigBird-Pegasus model)"),mxe.forEach(t),JSo=i(j),tb=n(j,"LI",{});var gxe=s(tb);Ime=n(gxe,"STRONG",{});var Qmt=s(Ime);YSo=r(Qmt,"camembert"),Qmt.forEach(t),KSo=r(gxe," \u2014 "),GG=n(gxe,"A",{href:!0});var Hmt=s(GG);ZSo=r(Hmt,"CamembertForSequenceClassification"),Hmt.forEach(t),eRo=r(gxe," (CamemBERT model)"),gxe.forEach(t),oRo=i(j),ab=n(j,"LI",{});var hxe=s(ab);Nme=n(hxe,"STRONG",{});var Umt=s(Nme);rRo=r(Umt,"canine"),Umt.forEach(t),tRo=r(hxe," \u2014 "),OG=n(hxe,"A",{href:!0});var Jmt=s(OG);aRo=r(Jmt,"CanineForSequenceClassification"),Jmt.forEach(t),nRo=r(hxe," (CANINE model)"),hxe.forEach(t),sRo=i(j),nb=n(j,"LI",{});var pxe=s(nb);qme=n(pxe,"STRONG",{});var Ymt=s(qme);lRo=r(Ymt,"convbert"),Ymt.forEach(t),iRo=r(pxe," \u2014 "),VG=n(pxe,"A",{href:!0});var Kmt=s(VG);dRo=r(Kmt,"ConvBertForSequenceClassification"),Kmt.forEach(t),cRo=r(pxe," (ConvBERT model)"),pxe.forEach(t),fRo=i(j),sb=n(j,"LI",{});var _xe=s(sb);jme=n(_xe,"STRONG",{});var Zmt=s(jme);mRo=r(Zmt,"ctrl"),Zmt.forEach(t),gRo=r(_xe," \u2014 "),XG=n(_xe,"A",{href:!0});var egt=s(XG);hRo=r(egt,"CTRLForSequenceClassification"),egt.forEach(t),pRo=r(_xe," (CTRL model)"),_xe.forEach(t),_Ro=i(j),lb=n(j,"LI",{});var uxe=s(lb);Dme=n(uxe,"STRONG",{});var ogt=s(Dme);uRo=r(ogt,"data2vec-text"),ogt.forEach(t),bRo=r(uxe," \u2014 "),zG=n(uxe,"A",{href:!0});var rgt=s(zG);vRo=r(rgt,"Data2VecTextForSequenceClassification"),rgt.forEach(t),FRo=r(uxe," (Data2VecText model)"),uxe.forEach(t),TRo=i(j),ib=n(j,"LI",{});var bxe=s(ib);Gme=n(bxe,"STRONG",{});var tgt=s(Gme);MRo=r(tgt,"deberta"),tgt.forEach(t),ERo=r(bxe," \u2014 "),WG=n(bxe,"A",{href:!0});var agt=s(WG);CRo=r(agt,"DebertaForSequenceClassification"),agt.forEach(t),wRo=r(bxe," (DeBERTa model)"),bxe.forEach(t),ARo=i(j),db=n(j,"LI",{});var vxe=s(db);Ome=n(vxe,"STRONG",{});var ngt=s(Ome);LRo=r(ngt,"deberta-v2"),ngt.forEach(t),yRo=r(vxe," \u2014 "),QG=n(vxe,"A",{href:!0});var sgt=s(QG);xRo=r(sgt,"DebertaV2ForSequenceClassification"),sgt.forEach(t),$Ro=r(vxe," (DeBERTa-v2 model)"),vxe.forEach(t),kRo=i(j),cb=n(j,"LI",{});var Fxe=s(cb);Vme=n(Fxe,"STRONG",{});var lgt=s(Vme);SRo=r(lgt,"distilbert"),lgt.forEach(t),RRo=r(Fxe," \u2014 "),HG=n(Fxe,"A",{href:!0});var igt=s(HG);PRo=r(igt,"DistilBertForSequenceClassification"),igt.forEach(t),BRo=r(Fxe," (DistilBERT model)"),Fxe.forEach(t),IRo=i(j),fb=n(j,"LI",{});var Txe=s(fb);Xme=n(Txe,"STRONG",{});var dgt=s(Xme);NRo=r(dgt,"electra"),dgt.forEach(t),qRo=r(Txe," \u2014 "),UG=n(Txe,"A",{href:!0});var cgt=s(UG);jRo=r(cgt,"ElectraForSequenceClassification"),cgt.forEach(t),DRo=r(Txe," (ELECTRA model)"),Txe.forEach(t),GRo=i(j),mb=n(j,"LI",{});var Mxe=s(mb);zme=n(Mxe,"STRONG",{});var fgt=s(zme);ORo=r(fgt,"flaubert"),fgt.forEach(t),VRo=r(Mxe," \u2014 "),JG=n(Mxe,"A",{href:!0});var mgt=s(JG);XRo=r(mgt,"FlaubertForSequenceClassification"),mgt.forEach(t),zRo=r(Mxe," (FlauBERT model)"),Mxe.forEach(t),WRo=i(j),gb=n(j,"LI",{});var Exe=s(gb);Wme=n(Exe,"STRONG",{});var ggt=s(Wme);QRo=r(ggt,"fnet"),ggt.forEach(t),HRo=r(Exe," \u2014 "),YG=n(Exe,"A",{href:!0});var hgt=s(YG);URo=r(hgt,"FNetForSequenceClassification"),hgt.forEach(t),JRo=r(Exe," (FNet model)"),Exe.forEach(t),YRo=i(j),hb=n(j,"LI",{});var Cxe=s(hb);Qme=n(Cxe,"STRONG",{});var pgt=s(Qme);KRo=r(pgt,"funnel"),pgt.forEach(t),ZRo=r(Cxe," \u2014 "),KG=n(Cxe,"A",{href:!0});var _gt=s(KG);ePo=r(_gt,"FunnelForSequenceClassification"),_gt.forEach(t),oPo=r(Cxe," (Funnel Transformer model)"),Cxe.forEach(t),rPo=i(j),pb=n(j,"LI",{});var wxe=s(pb);Hme=n(wxe,"STRONG",{});var ugt=s(Hme);tPo=r(ugt,"gpt2"),ugt.forEach(t),aPo=r(wxe," \u2014 "),ZG=n(wxe,"A",{href:!0});var bgt=s(ZG);nPo=r(bgt,"GPT2ForSequenceClassification"),bgt.forEach(t),sPo=r(wxe," (OpenAI GPT-2 model)"),wxe.forEach(t),lPo=i(j),_b=n(j,"LI",{});var Axe=s(_b);Ume=n(Axe,"STRONG",{});var vgt=s(Ume);iPo=r(vgt,"gpt_neo"),vgt.forEach(t),dPo=r(Axe," \u2014 "),eO=n(Axe,"A",{href:!0});var Fgt=s(eO);cPo=r(Fgt,"GPTNeoForSequenceClassification"),Fgt.forEach(t),fPo=r(Axe," (GPT Neo model)"),Axe.forEach(t),mPo=i(j),ub=n(j,"LI",{});var Lxe=s(ub);Jme=n(Lxe,"STRONG",{});var Tgt=s(Jme);gPo=r(Tgt,"gptj"),Tgt.forEach(t),hPo=r(Lxe," \u2014 "),oO=n(Lxe,"A",{href:!0});var Mgt=s(oO);pPo=r(Mgt,"GPTJForSequenceClassification"),Mgt.forEach(t),_Po=r(Lxe," (GPT-J model)"),Lxe.forEach(t),uPo=i(j),bb=n(j,"LI",{});var yxe=s(bb);Yme=n(yxe,"STRONG",{});var Egt=s(Yme);bPo=r(Egt,"ibert"),Egt.forEach(t),vPo=r(yxe," \u2014 "),rO=n(yxe,"A",{href:!0});var Cgt=s(rO);FPo=r(Cgt,"IBertForSequenceClassification"),Cgt.forEach(t),TPo=r(yxe," (I-BERT model)"),yxe.forEach(t),MPo=i(j),vb=n(j,"LI",{});var xxe=s(vb);Kme=n(xxe,"STRONG",{});var wgt=s(Kme);EPo=r(wgt,"layoutlm"),wgt.forEach(t),CPo=r(xxe," \u2014 "),tO=n(xxe,"A",{href:!0});var Agt=s(tO);wPo=r(Agt,"LayoutLMForSequenceClassification"),Agt.forEach(t),APo=r(xxe," (LayoutLM model)"),xxe.forEach(t),LPo=i(j),Fb=n(j,"LI",{});var $xe=s(Fb);Zme=n($xe,"STRONG",{});var Lgt=s(Zme);yPo=r(Lgt,"layoutlmv2"),Lgt.forEach(t),xPo=r($xe," \u2014 "),aO=n($xe,"A",{href:!0});var ygt=s(aO);$Po=r(ygt,"LayoutLMv2ForSequenceClassification"),ygt.forEach(t),kPo=r($xe," (LayoutLMv2 model)"),$xe.forEach(t),SPo=i(j),Tb=n(j,"LI",{});var kxe=s(Tb);ege=n(kxe,"STRONG",{});var xgt=s(ege);RPo=r(xgt,"layoutlmv3"),xgt.forEach(t),PPo=r(kxe," \u2014 "),nO=n(kxe,"A",{href:!0});var $gt=s(nO);BPo=r($gt,"LayoutLMv3ForSequenceClassification"),$gt.forEach(t),IPo=r(kxe," (LayoutLMv3 model)"),kxe.forEach(t),NPo=i(j),Mb=n(j,"LI",{});var Sxe=s(Mb);oge=n(Sxe,"STRONG",{});var kgt=s(oge);qPo=r(kgt,"led"),kgt.forEach(t),jPo=r(Sxe," \u2014 "),sO=n(Sxe,"A",{href:!0});var Sgt=s(sO);DPo=r(Sgt,"LEDForSequenceClassification"),Sgt.forEach(t),GPo=r(Sxe," (LED model)"),Sxe.forEach(t),OPo=i(j),Eb=n(j,"LI",{});var Rxe=s(Eb);rge=n(Rxe,"STRONG",{});var Rgt=s(rge);VPo=r(Rgt,"longformer"),Rgt.forEach(t),XPo=r(Rxe," \u2014 "),lO=n(Rxe,"A",{href:!0});var Pgt=s(lO);zPo=r(Pgt,"LongformerForSequenceClassification"),Pgt.forEach(t),WPo=r(Rxe," (Longformer model)"),Rxe.forEach(t),QPo=i(j),Cb=n(j,"LI",{});var Pxe=s(Cb);tge=n(Pxe,"STRONG",{});var Bgt=s(tge);HPo=r(Bgt,"mbart"),Bgt.forEach(t),UPo=r(Pxe," \u2014 "),iO=n(Pxe,"A",{href:!0});var Igt=s(iO);JPo=r(Igt,"MBartForSequenceClassification"),Igt.forEach(t),YPo=r(Pxe," (mBART model)"),Pxe.forEach(t),KPo=i(j),wb=n(j,"LI",{});var Bxe=s(wb);age=n(Bxe,"STRONG",{});var Ngt=s(age);ZPo=r(Ngt,"megatron-bert"),Ngt.forEach(t),eBo=r(Bxe," \u2014 "),dO=n(Bxe,"A",{href:!0});var qgt=s(dO);oBo=r(qgt,"MegatronBertForSequenceClassification"),qgt.forEach(t),rBo=r(Bxe," (Megatron-BERT model)"),Bxe.forEach(t),tBo=i(j),Ab=n(j,"LI",{});var Ixe=s(Ab);nge=n(Ixe,"STRONG",{});var jgt=s(nge);aBo=r(jgt,"mobilebert"),jgt.forEach(t),nBo=r(Ixe," \u2014 "),cO=n(Ixe,"A",{href:!0});var Dgt=s(cO);sBo=r(Dgt,"MobileBertForSequenceClassification"),Dgt.forEach(t),lBo=r(Ixe," (MobileBERT model)"),Ixe.forEach(t),iBo=i(j),Lb=n(j,"LI",{});var Nxe=s(Lb);sge=n(Nxe,"STRONG",{});var Ggt=s(sge);dBo=r(Ggt,"mpnet"),Ggt.forEach(t),cBo=r(Nxe," \u2014 "),fO=n(Nxe,"A",{href:!0});var Ogt=s(fO);fBo=r(Ogt,"MPNetForSequenceClassification"),Ogt.forEach(t),mBo=r(Nxe," (MPNet model)"),Nxe.forEach(t),gBo=i(j),yb=n(j,"LI",{});var qxe=s(yb);lge=n(qxe,"STRONG",{});var Vgt=s(lge);hBo=r(Vgt,"nystromformer"),Vgt.forEach(t),pBo=r(qxe," \u2014 "),mO=n(qxe,"A",{href:!0});var Xgt=s(mO);_Bo=r(Xgt,"NystromformerForSequenceClassification"),Xgt.forEach(t),uBo=r(qxe," (Nystr\xF6mformer model)"),qxe.forEach(t),bBo=i(j),xb=n(j,"LI",{});var jxe=s(xb);ige=n(jxe,"STRONG",{});var zgt=s(ige);vBo=r(zgt,"openai-gpt"),zgt.forEach(t),FBo=r(jxe," \u2014 "),gO=n(jxe,"A",{href:!0});var Wgt=s(gO);TBo=r(Wgt,"OpenAIGPTForSequenceClassification"),Wgt.forEach(t),MBo=r(jxe," (OpenAI GPT model)"),jxe.forEach(t),EBo=i(j),$b=n(j,"LI",{});var Dxe=s($b);dge=n(Dxe,"STRONG",{});var Qgt=s(dge);CBo=r(Qgt,"perceiver"),Qgt.forEach(t),wBo=r(Dxe," \u2014 "),hO=n(Dxe,"A",{href:!0});var Hgt=s(hO);ABo=r(Hgt,"PerceiverForSequenceClassification"),Hgt.forEach(t),LBo=r(Dxe," (Perceiver model)"),Dxe.forEach(t),yBo=i(j),kb=n(j,"LI",{});var Gxe=s(kb);cge=n(Gxe,"STRONG",{});var Ugt=s(cge);xBo=r(Ugt,"plbart"),Ugt.forEach(t),$Bo=r(Gxe," \u2014 "),pO=n(Gxe,"A",{href:!0});var Jgt=s(pO);kBo=r(Jgt,"PLBartForSequenceClassification"),Jgt.forEach(t),SBo=r(Gxe," (PLBart model)"),Gxe.forEach(t),RBo=i(j),Sb=n(j,"LI",{});var Oxe=s(Sb);fge=n(Oxe,"STRONG",{});var Ygt=s(fge);PBo=r(Ygt,"qdqbert"),Ygt.forEach(t),BBo=r(Oxe," \u2014 "),_O=n(Oxe,"A",{href:!0});var Kgt=s(_O);IBo=r(Kgt,"QDQBertForSequenceClassification"),Kgt.forEach(t),NBo=r(Oxe," (QDQBert model)"),Oxe.forEach(t),qBo=i(j),Rb=n(j,"LI",{});var Vxe=s(Rb);mge=n(Vxe,"STRONG",{});var Zgt=s(mge);jBo=r(Zgt,"reformer"),Zgt.forEach(t),DBo=r(Vxe," \u2014 "),uO=n(Vxe,"A",{href:!0});var eht=s(uO);GBo=r(eht,"ReformerForSequenceClassification"),eht.forEach(t),OBo=r(Vxe," (Reformer model)"),Vxe.forEach(t),VBo=i(j),Pb=n(j,"LI",{});var Xxe=s(Pb);gge=n(Xxe,"STRONG",{});var oht=s(gge);XBo=r(oht,"rembert"),oht.forEach(t),zBo=r(Xxe," \u2014 "),bO=n(Xxe,"A",{href:!0});var rht=s(bO);WBo=r(rht,"RemBertForSequenceClassification"),rht.forEach(t),QBo=r(Xxe," (RemBERT model)"),Xxe.forEach(t),HBo=i(j),Bb=n(j,"LI",{});var zxe=s(Bb);hge=n(zxe,"STRONG",{});var tht=s(hge);UBo=r(tht,"roberta"),tht.forEach(t),JBo=r(zxe," \u2014 "),vO=n(zxe,"A",{href:!0});var aht=s(vO);YBo=r(aht,"RobertaForSequenceClassification"),aht.forEach(t),KBo=r(zxe," (RoBERTa model)"),zxe.forEach(t),ZBo=i(j),Ib=n(j,"LI",{});var Wxe=s(Ib);pge=n(Wxe,"STRONG",{});var nht=s(pge);eIo=r(nht,"roformer"),nht.forEach(t),oIo=r(Wxe," \u2014 "),FO=n(Wxe,"A",{href:!0});var sht=s(FO);rIo=r(sht,"RoFormerForSequenceClassification"),sht.forEach(t),tIo=r(Wxe," (RoFormer model)"),Wxe.forEach(t),aIo=i(j),Nb=n(j,"LI",{});var Qxe=s(Nb);_ge=n(Qxe,"STRONG",{});var lht=s(_ge);nIo=r(lht,"squeezebert"),lht.forEach(t),sIo=r(Qxe," \u2014 "),TO=n(Qxe,"A",{href:!0});var iht=s(TO);lIo=r(iht,"SqueezeBertForSequenceClassification"),iht.forEach(t),iIo=r(Qxe," (SqueezeBERT model)"),Qxe.forEach(t),dIo=i(j),qb=n(j,"LI",{});var Hxe=s(qb);uge=n(Hxe,"STRONG",{});var dht=s(uge);cIo=r(dht,"tapas"),dht.forEach(t),fIo=r(Hxe," \u2014 "),MO=n(Hxe,"A",{href:!0});var cht=s(MO);mIo=r(cht,"TapasForSequenceClassification"),cht.forEach(t),gIo=r(Hxe," (TAPAS model)"),Hxe.forEach(t),hIo=i(j),jb=n(j,"LI",{});var Uxe=s(jb);bge=n(Uxe,"STRONG",{});var fht=s(bge);pIo=r(fht,"transfo-xl"),fht.forEach(t),_Io=r(Uxe," \u2014 "),EO=n(Uxe,"A",{href:!0});var mht=s(EO);uIo=r(mht,"TransfoXLForSequenceClassification"),mht.forEach(t),bIo=r(Uxe," (Transformer-XL model)"),Uxe.forEach(t),vIo=i(j),Db=n(j,"LI",{});var Jxe=s(Db);vge=n(Jxe,"STRONG",{});var ght=s(vge);FIo=r(ght,"xlm"),ght.forEach(t),TIo=r(Jxe," \u2014 "),CO=n(Jxe,"A",{href:!0});var hht=s(CO);MIo=r(hht,"XLMForSequenceClassification"),hht.forEach(t),EIo=r(Jxe," (XLM model)"),Jxe.forEach(t),CIo=i(j),Gb=n(j,"LI",{});var Yxe=s(Gb);Fge=n(Yxe,"STRONG",{});var pht=s(Fge);wIo=r(pht,"xlm-roberta"),pht.forEach(t),AIo=r(Yxe," \u2014 "),wO=n(Yxe,"A",{href:!0});var _ht=s(wO);LIo=r(_ht,"XLMRobertaForSequenceClassification"),_ht.forEach(t),yIo=r(Yxe," (XLM-RoBERTa model)"),Yxe.forEach(t),xIo=i(j),Ob=n(j,"LI",{});var Kxe=s(Ob);Tge=n(Kxe,"STRONG",{});var uht=s(Tge);$Io=r(uht,"xlm-roberta-xl"),uht.forEach(t),kIo=r(Kxe," \u2014 "),AO=n(Kxe,"A",{href:!0});var bht=s(AO);SIo=r(bht,"XLMRobertaXLForSequenceClassification"),bht.forEach(t),RIo=r(Kxe," (XLM-RoBERTa-XL model)"),Kxe.forEach(t),PIo=i(j),Vb=n(j,"LI",{});var Zxe=s(Vb);Mge=n(Zxe,"STRONG",{});var vht=s(Mge);BIo=r(vht,"xlnet"),vht.forEach(t),IIo=r(Zxe," \u2014 "),LO=n(Zxe,"A",{href:!0});var Fht=s(LO);NIo=r(Fht,"XLNetForSequenceClassification"),Fht.forEach(t),qIo=r(Zxe," (XLNet model)"),Zxe.forEach(t),jIo=i(j),Xb=n(j,"LI",{});var e$e=s(Xb);Ege=n(e$e,"STRONG",{});var Tht=s(Ege);DIo=r(Tht,"yoso"),Tht.forEach(t),GIo=r(e$e," \u2014 "),yO=n(e$e,"A",{href:!0});var Mht=s(yO);OIo=r(Mht,"YosoForSequenceClassification"),Mht.forEach(t),VIo=r(e$e," (YOSO model)"),e$e.forEach(t),j.forEach(t),XIo=i(sa),zb=n(sa,"P",{});var o$e=s(zb);zIo=r(o$e,"The model is set in evaluation mode by default using "),Cge=n(o$e,"CODE",{});var Eht=s(Cge);WIo=r(Eht,"model.eval()"),Eht.forEach(t),QIo=r(o$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wge=n(o$e,"CODE",{});var Cht=s(wge);HIo=r(Cht,"model.train()"),Cht.forEach(t),o$e.forEach(t),UIo=i(sa),T(Wb.$$.fragment,sa),sa.forEach(t),Hs.forEach(t),Bje=i(f),zi=n(f,"H2",{class:!0});var jGe=s(zi);Qb=n(jGe,"A",{id:!0,class:!0,href:!0});var wht=s(Qb);Age=n(wht,"SPAN",{});var Aht=s(Age);T(zA.$$.fragment,Aht),Aht.forEach(t),wht.forEach(t),JIo=i(jGe),Lge=n(jGe,"SPAN",{});var Lht=s(Lge);YIo=r(Lht,"AutoModelForMultipleChoice"),Lht.forEach(t),jGe.forEach(t),Ije=i(f),Po=n(f,"DIV",{class:!0});var Us=s(Po);T(WA.$$.fragment,Us),KIo=i(Us),Wi=n(Us,"P",{});var dee=s(Wi);ZIo=r(dee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),xO=n(dee,"A",{href:!0});var yht=s(xO);eNo=r(yht,"from_pretrained()"),yht.forEach(t),oNo=r(dee," class method or the "),$O=n(dee,"A",{href:!0});var xht=s($O);rNo=r(xht,"from_config()"),xht.forEach(t),tNo=r(dee,` class
method.`),dee.forEach(t),aNo=i(Us),QA=n(Us,"P",{});var DGe=s(QA);nNo=r(DGe,"This class cannot be instantiated directly using "),yge=n(DGe,"CODE",{});var $ht=s(yge);sNo=r($ht,"__init__()"),$ht.forEach(t),lNo=r(DGe," (throws an error)."),DGe.forEach(t),iNo=i(Us),dt=n(Us,"DIV",{class:!0});var n0=s(dt);T(HA.$$.fragment,n0),dNo=i(n0),xge=n(n0,"P",{});var kht=s(xge);cNo=r(kht,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),kht.forEach(t),fNo=i(n0),Qi=n(n0,"P",{});var cee=s(Qi);mNo=r(cee,`Note:
Loading a model from its configuration file does `),$ge=n(cee,"STRONG",{});var Sht=s($ge);gNo=r(Sht,"not"),Sht.forEach(t),hNo=r(cee,` load the model weights. It only affects the
model\u2019s configuration. Use `),kO=n(cee,"A",{href:!0});var Rht=s(kO);pNo=r(Rht,"from_pretrained()"),Rht.forEach(t),_No=r(cee," to load the model weights."),cee.forEach(t),uNo=i(n0),T(Hb.$$.fragment,n0),n0.forEach(t),bNo=i(Us),ro=n(Us,"DIV",{class:!0});var la=s(ro);T(UA.$$.fragment,la),vNo=i(la),kge=n(la,"P",{});var Pht=s(kge);FNo=r(Pht,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Pht.forEach(t),TNo=i(la),Pa=n(la,"P",{});var s0=s(Pa);MNo=r(s0,"The model class to instantiate is selected based on the "),Sge=n(s0,"CODE",{});var Bht=s(Sge);ENo=r(Bht,"model_type"),Bht.forEach(t),CNo=r(s0,` property of the config object (either
passed as an argument or loaded from `),Rge=n(s0,"CODE",{});var Iht=s(Rge);wNo=r(Iht,"pretrained_model_name_or_path"),Iht.forEach(t),ANo=r(s0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pge=n(s0,"CODE",{});var Nht=s(Pge);LNo=r(Nht,"pretrained_model_name_or_path"),Nht.forEach(t),yNo=r(s0,":"),s0.forEach(t),xNo=i(la),K=n(la,"UL",{});var ee=s(K);Ub=n(ee,"LI",{});var r$e=s(Ub);Bge=n(r$e,"STRONG",{});var qht=s(Bge);$No=r(qht,"albert"),qht.forEach(t),kNo=r(r$e," \u2014 "),SO=n(r$e,"A",{href:!0});var jht=s(SO);SNo=r(jht,"AlbertForMultipleChoice"),jht.forEach(t),RNo=r(r$e," (ALBERT model)"),r$e.forEach(t),PNo=i(ee),Jb=n(ee,"LI",{});var t$e=s(Jb);Ige=n(t$e,"STRONG",{});var Dht=s(Ige);BNo=r(Dht,"bert"),Dht.forEach(t),INo=r(t$e," \u2014 "),RO=n(t$e,"A",{href:!0});var Ght=s(RO);NNo=r(Ght,"BertForMultipleChoice"),Ght.forEach(t),qNo=r(t$e," (BERT model)"),t$e.forEach(t),jNo=i(ee),Yb=n(ee,"LI",{});var a$e=s(Yb);Nge=n(a$e,"STRONG",{});var Oht=s(Nge);DNo=r(Oht,"big_bird"),Oht.forEach(t),GNo=r(a$e," \u2014 "),PO=n(a$e,"A",{href:!0});var Vht=s(PO);ONo=r(Vht,"BigBirdForMultipleChoice"),Vht.forEach(t),VNo=r(a$e," (BigBird model)"),a$e.forEach(t),XNo=i(ee),Kb=n(ee,"LI",{});var n$e=s(Kb);qge=n(n$e,"STRONG",{});var Xht=s(qge);zNo=r(Xht,"camembert"),Xht.forEach(t),WNo=r(n$e," \u2014 "),BO=n(n$e,"A",{href:!0});var zht=s(BO);QNo=r(zht,"CamembertForMultipleChoice"),zht.forEach(t),HNo=r(n$e," (CamemBERT model)"),n$e.forEach(t),UNo=i(ee),Zb=n(ee,"LI",{});var s$e=s(Zb);jge=n(s$e,"STRONG",{});var Wht=s(jge);JNo=r(Wht,"canine"),Wht.forEach(t),YNo=r(s$e," \u2014 "),IO=n(s$e,"A",{href:!0});var Qht=s(IO);KNo=r(Qht,"CanineForMultipleChoice"),Qht.forEach(t),ZNo=r(s$e," (CANINE model)"),s$e.forEach(t),eqo=i(ee),ev=n(ee,"LI",{});var l$e=s(ev);Dge=n(l$e,"STRONG",{});var Hht=s(Dge);oqo=r(Hht,"convbert"),Hht.forEach(t),rqo=r(l$e," \u2014 "),NO=n(l$e,"A",{href:!0});var Uht=s(NO);tqo=r(Uht,"ConvBertForMultipleChoice"),Uht.forEach(t),aqo=r(l$e," (ConvBERT model)"),l$e.forEach(t),nqo=i(ee),ov=n(ee,"LI",{});var i$e=s(ov);Gge=n(i$e,"STRONG",{});var Jht=s(Gge);sqo=r(Jht,"data2vec-text"),Jht.forEach(t),lqo=r(i$e," \u2014 "),qO=n(i$e,"A",{href:!0});var Yht=s(qO);iqo=r(Yht,"Data2VecTextForMultipleChoice"),Yht.forEach(t),dqo=r(i$e," (Data2VecText model)"),i$e.forEach(t),cqo=i(ee),rv=n(ee,"LI",{});var d$e=s(rv);Oge=n(d$e,"STRONG",{});var Kht=s(Oge);fqo=r(Kht,"deberta-v2"),Kht.forEach(t),mqo=r(d$e," \u2014 "),jO=n(d$e,"A",{href:!0});var Zht=s(jO);gqo=r(Zht,"DebertaV2ForMultipleChoice"),Zht.forEach(t),hqo=r(d$e," (DeBERTa-v2 model)"),d$e.forEach(t),pqo=i(ee),tv=n(ee,"LI",{});var c$e=s(tv);Vge=n(c$e,"STRONG",{});var ept=s(Vge);_qo=r(ept,"distilbert"),ept.forEach(t),uqo=r(c$e," \u2014 "),DO=n(c$e,"A",{href:!0});var opt=s(DO);bqo=r(opt,"DistilBertForMultipleChoice"),opt.forEach(t),vqo=r(c$e," (DistilBERT model)"),c$e.forEach(t),Fqo=i(ee),av=n(ee,"LI",{});var f$e=s(av);Xge=n(f$e,"STRONG",{});var rpt=s(Xge);Tqo=r(rpt,"electra"),rpt.forEach(t),Mqo=r(f$e," \u2014 "),GO=n(f$e,"A",{href:!0});var tpt=s(GO);Eqo=r(tpt,"ElectraForMultipleChoice"),tpt.forEach(t),Cqo=r(f$e," (ELECTRA model)"),f$e.forEach(t),wqo=i(ee),nv=n(ee,"LI",{});var m$e=s(nv);zge=n(m$e,"STRONG",{});var apt=s(zge);Aqo=r(apt,"flaubert"),apt.forEach(t),Lqo=r(m$e," \u2014 "),OO=n(m$e,"A",{href:!0});var npt=s(OO);yqo=r(npt,"FlaubertForMultipleChoice"),npt.forEach(t),xqo=r(m$e," (FlauBERT model)"),m$e.forEach(t),$qo=i(ee),sv=n(ee,"LI",{});var g$e=s(sv);Wge=n(g$e,"STRONG",{});var spt=s(Wge);kqo=r(spt,"fnet"),spt.forEach(t),Sqo=r(g$e," \u2014 "),VO=n(g$e,"A",{href:!0});var lpt=s(VO);Rqo=r(lpt,"FNetForMultipleChoice"),lpt.forEach(t),Pqo=r(g$e," (FNet model)"),g$e.forEach(t),Bqo=i(ee),lv=n(ee,"LI",{});var h$e=s(lv);Qge=n(h$e,"STRONG",{});var ipt=s(Qge);Iqo=r(ipt,"funnel"),ipt.forEach(t),Nqo=r(h$e," \u2014 "),XO=n(h$e,"A",{href:!0});var dpt=s(XO);qqo=r(dpt,"FunnelForMultipleChoice"),dpt.forEach(t),jqo=r(h$e," (Funnel Transformer model)"),h$e.forEach(t),Dqo=i(ee),iv=n(ee,"LI",{});var p$e=s(iv);Hge=n(p$e,"STRONG",{});var cpt=s(Hge);Gqo=r(cpt,"ibert"),cpt.forEach(t),Oqo=r(p$e," \u2014 "),zO=n(p$e,"A",{href:!0});var fpt=s(zO);Vqo=r(fpt,"IBertForMultipleChoice"),fpt.forEach(t),Xqo=r(p$e," (I-BERT model)"),p$e.forEach(t),zqo=i(ee),dv=n(ee,"LI",{});var _$e=s(dv);Uge=n(_$e,"STRONG",{});var mpt=s(Uge);Wqo=r(mpt,"longformer"),mpt.forEach(t),Qqo=r(_$e," \u2014 "),WO=n(_$e,"A",{href:!0});var gpt=s(WO);Hqo=r(gpt,"LongformerForMultipleChoice"),gpt.forEach(t),Uqo=r(_$e," (Longformer model)"),_$e.forEach(t),Jqo=i(ee),cv=n(ee,"LI",{});var u$e=s(cv);Jge=n(u$e,"STRONG",{});var hpt=s(Jge);Yqo=r(hpt,"megatron-bert"),hpt.forEach(t),Kqo=r(u$e," \u2014 "),QO=n(u$e,"A",{href:!0});var ppt=s(QO);Zqo=r(ppt,"MegatronBertForMultipleChoice"),ppt.forEach(t),ejo=r(u$e," (Megatron-BERT model)"),u$e.forEach(t),ojo=i(ee),fv=n(ee,"LI",{});var b$e=s(fv);Yge=n(b$e,"STRONG",{});var _pt=s(Yge);rjo=r(_pt,"mobilebert"),_pt.forEach(t),tjo=r(b$e," \u2014 "),HO=n(b$e,"A",{href:!0});var upt=s(HO);ajo=r(upt,"MobileBertForMultipleChoice"),upt.forEach(t),njo=r(b$e," (MobileBERT model)"),b$e.forEach(t),sjo=i(ee),mv=n(ee,"LI",{});var v$e=s(mv);Kge=n(v$e,"STRONG",{});var bpt=s(Kge);ljo=r(bpt,"mpnet"),bpt.forEach(t),ijo=r(v$e," \u2014 "),UO=n(v$e,"A",{href:!0});var vpt=s(UO);djo=r(vpt,"MPNetForMultipleChoice"),vpt.forEach(t),cjo=r(v$e," (MPNet model)"),v$e.forEach(t),fjo=i(ee),gv=n(ee,"LI",{});var F$e=s(gv);Zge=n(F$e,"STRONG",{});var Fpt=s(Zge);mjo=r(Fpt,"nystromformer"),Fpt.forEach(t),gjo=r(F$e," \u2014 "),JO=n(F$e,"A",{href:!0});var Tpt=s(JO);hjo=r(Tpt,"NystromformerForMultipleChoice"),Tpt.forEach(t),pjo=r(F$e," (Nystr\xF6mformer model)"),F$e.forEach(t),_jo=i(ee),hv=n(ee,"LI",{});var T$e=s(hv);ehe=n(T$e,"STRONG",{});var Mpt=s(ehe);ujo=r(Mpt,"qdqbert"),Mpt.forEach(t),bjo=r(T$e," \u2014 "),YO=n(T$e,"A",{href:!0});var Ept=s(YO);vjo=r(Ept,"QDQBertForMultipleChoice"),Ept.forEach(t),Fjo=r(T$e," (QDQBert model)"),T$e.forEach(t),Tjo=i(ee),pv=n(ee,"LI",{});var M$e=s(pv);ohe=n(M$e,"STRONG",{});var Cpt=s(ohe);Mjo=r(Cpt,"rembert"),Cpt.forEach(t),Ejo=r(M$e," \u2014 "),KO=n(M$e,"A",{href:!0});var wpt=s(KO);Cjo=r(wpt,"RemBertForMultipleChoice"),wpt.forEach(t),wjo=r(M$e," (RemBERT model)"),M$e.forEach(t),Ajo=i(ee),_v=n(ee,"LI",{});var E$e=s(_v);rhe=n(E$e,"STRONG",{});var Apt=s(rhe);Ljo=r(Apt,"roberta"),Apt.forEach(t),yjo=r(E$e," \u2014 "),ZO=n(E$e,"A",{href:!0});var Lpt=s(ZO);xjo=r(Lpt,"RobertaForMultipleChoice"),Lpt.forEach(t),$jo=r(E$e," (RoBERTa model)"),E$e.forEach(t),kjo=i(ee),uv=n(ee,"LI",{});var C$e=s(uv);the=n(C$e,"STRONG",{});var ypt=s(the);Sjo=r(ypt,"roformer"),ypt.forEach(t),Rjo=r(C$e," \u2014 "),eV=n(C$e,"A",{href:!0});var xpt=s(eV);Pjo=r(xpt,"RoFormerForMultipleChoice"),xpt.forEach(t),Bjo=r(C$e," (RoFormer model)"),C$e.forEach(t),Ijo=i(ee),bv=n(ee,"LI",{});var w$e=s(bv);ahe=n(w$e,"STRONG",{});var $pt=s(ahe);Njo=r($pt,"squeezebert"),$pt.forEach(t),qjo=r(w$e," \u2014 "),oV=n(w$e,"A",{href:!0});var kpt=s(oV);jjo=r(kpt,"SqueezeBertForMultipleChoice"),kpt.forEach(t),Djo=r(w$e," (SqueezeBERT model)"),w$e.forEach(t),Gjo=i(ee),vv=n(ee,"LI",{});var A$e=s(vv);nhe=n(A$e,"STRONG",{});var Spt=s(nhe);Ojo=r(Spt,"xlm"),Spt.forEach(t),Vjo=r(A$e," \u2014 "),rV=n(A$e,"A",{href:!0});var Rpt=s(rV);Xjo=r(Rpt,"XLMForMultipleChoice"),Rpt.forEach(t),zjo=r(A$e," (XLM model)"),A$e.forEach(t),Wjo=i(ee),Fv=n(ee,"LI",{});var L$e=s(Fv);she=n(L$e,"STRONG",{});var Ppt=s(she);Qjo=r(Ppt,"xlm-roberta"),Ppt.forEach(t),Hjo=r(L$e," \u2014 "),tV=n(L$e,"A",{href:!0});var Bpt=s(tV);Ujo=r(Bpt,"XLMRobertaForMultipleChoice"),Bpt.forEach(t),Jjo=r(L$e," (XLM-RoBERTa model)"),L$e.forEach(t),Yjo=i(ee),Tv=n(ee,"LI",{});var y$e=s(Tv);lhe=n(y$e,"STRONG",{});var Ipt=s(lhe);Kjo=r(Ipt,"xlm-roberta-xl"),Ipt.forEach(t),Zjo=r(y$e," \u2014 "),aV=n(y$e,"A",{href:!0});var Npt=s(aV);eDo=r(Npt,"XLMRobertaXLForMultipleChoice"),Npt.forEach(t),oDo=r(y$e," (XLM-RoBERTa-XL model)"),y$e.forEach(t),rDo=i(ee),Mv=n(ee,"LI",{});var x$e=s(Mv);ihe=n(x$e,"STRONG",{});var qpt=s(ihe);tDo=r(qpt,"xlnet"),qpt.forEach(t),aDo=r(x$e," \u2014 "),nV=n(x$e,"A",{href:!0});var jpt=s(nV);nDo=r(jpt,"XLNetForMultipleChoice"),jpt.forEach(t),sDo=r(x$e," (XLNet model)"),x$e.forEach(t),lDo=i(ee),Ev=n(ee,"LI",{});var $$e=s(Ev);dhe=n($$e,"STRONG",{});var Dpt=s(dhe);iDo=r(Dpt,"yoso"),Dpt.forEach(t),dDo=r($$e," \u2014 "),sV=n($$e,"A",{href:!0});var Gpt=s(sV);cDo=r(Gpt,"YosoForMultipleChoice"),Gpt.forEach(t),fDo=r($$e," (YOSO model)"),$$e.forEach(t),ee.forEach(t),mDo=i(la),Cv=n(la,"P",{});var k$e=s(Cv);gDo=r(k$e,"The model is set in evaluation mode by default using "),che=n(k$e,"CODE",{});var Opt=s(che);hDo=r(Opt,"model.eval()"),Opt.forEach(t),pDo=r(k$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fhe=n(k$e,"CODE",{});var Vpt=s(fhe);_Do=r(Vpt,"model.train()"),Vpt.forEach(t),k$e.forEach(t),uDo=i(la),T(wv.$$.fragment,la),la.forEach(t),Us.forEach(t),Nje=i(f),Hi=n(f,"H2",{class:!0});var GGe=s(Hi);Av=n(GGe,"A",{id:!0,class:!0,href:!0});var Xpt=s(Av);mhe=n(Xpt,"SPAN",{});var zpt=s(mhe);T(JA.$$.fragment,zpt),zpt.forEach(t),Xpt.forEach(t),bDo=i(GGe),ghe=n(GGe,"SPAN",{});var Wpt=s(ghe);vDo=r(Wpt,"AutoModelForNextSentencePrediction"),Wpt.forEach(t),GGe.forEach(t),qje=i(f),Bo=n(f,"DIV",{class:!0});var Js=s(Bo);T(YA.$$.fragment,Js),FDo=i(Js),Ui=n(Js,"P",{});var fee=s(Ui);TDo=r(fee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),lV=n(fee,"A",{href:!0});var Qpt=s(lV);MDo=r(Qpt,"from_pretrained()"),Qpt.forEach(t),EDo=r(fee," class method or the "),iV=n(fee,"A",{href:!0});var Hpt=s(iV);CDo=r(Hpt,"from_config()"),Hpt.forEach(t),wDo=r(fee,` class
method.`),fee.forEach(t),ADo=i(Js),KA=n(Js,"P",{});var OGe=s(KA);LDo=r(OGe,"This class cannot be instantiated directly using "),hhe=n(OGe,"CODE",{});var Upt=s(hhe);yDo=r(Upt,"__init__()"),Upt.forEach(t),xDo=r(OGe," (throws an error)."),OGe.forEach(t),$Do=i(Js),ct=n(Js,"DIV",{class:!0});var l0=s(ct);T(ZA.$$.fragment,l0),kDo=i(l0),phe=n(l0,"P",{});var Jpt=s(phe);SDo=r(Jpt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Jpt.forEach(t),RDo=i(l0),Ji=n(l0,"P",{});var mee=s(Ji);PDo=r(mee,`Note:
Loading a model from its configuration file does `),_he=n(mee,"STRONG",{});var Ypt=s(_he);BDo=r(Ypt,"not"),Ypt.forEach(t),IDo=r(mee,` load the model weights. It only affects the
model\u2019s configuration. Use `),dV=n(mee,"A",{href:!0});var Kpt=s(dV);NDo=r(Kpt,"from_pretrained()"),Kpt.forEach(t),qDo=r(mee," to load the model weights."),mee.forEach(t),jDo=i(l0),T(Lv.$$.fragment,l0),l0.forEach(t),DDo=i(Js),to=n(Js,"DIV",{class:!0});var ia=s(to);T(eL.$$.fragment,ia),GDo=i(ia),uhe=n(ia,"P",{});var Zpt=s(uhe);ODo=r(Zpt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Zpt.forEach(t),VDo=i(ia),Ba=n(ia,"P",{});var i0=s(Ba);XDo=r(i0,"The model class to instantiate is selected based on the "),bhe=n(i0,"CODE",{});var e_t=s(bhe);zDo=r(e_t,"model_type"),e_t.forEach(t),WDo=r(i0,` property of the config object (either
passed as an argument or loaded from `),vhe=n(i0,"CODE",{});var o_t=s(vhe);QDo=r(o_t,"pretrained_model_name_or_path"),o_t.forEach(t),HDo=r(i0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fhe=n(i0,"CODE",{});var r_t=s(Fhe);UDo=r(r_t,"pretrained_model_name_or_path"),r_t.forEach(t),JDo=r(i0,":"),i0.forEach(t),YDo=i(ia),Yr=n(ia,"UL",{});var Ys=s(Yr);yv=n(Ys,"LI",{});var S$e=s(yv);The=n(S$e,"STRONG",{});var t_t=s(The);KDo=r(t_t,"bert"),t_t.forEach(t),ZDo=r(S$e," \u2014 "),cV=n(S$e,"A",{href:!0});var a_t=s(cV);eGo=r(a_t,"BertForNextSentencePrediction"),a_t.forEach(t),oGo=r(S$e," (BERT model)"),S$e.forEach(t),rGo=i(Ys),xv=n(Ys,"LI",{});var R$e=s(xv);Mhe=n(R$e,"STRONG",{});var n_t=s(Mhe);tGo=r(n_t,"fnet"),n_t.forEach(t),aGo=r(R$e," \u2014 "),fV=n(R$e,"A",{href:!0});var s_t=s(fV);nGo=r(s_t,"FNetForNextSentencePrediction"),s_t.forEach(t),sGo=r(R$e," (FNet model)"),R$e.forEach(t),lGo=i(Ys),$v=n(Ys,"LI",{});var P$e=s($v);Ehe=n(P$e,"STRONG",{});var l_t=s(Ehe);iGo=r(l_t,"megatron-bert"),l_t.forEach(t),dGo=r(P$e," \u2014 "),mV=n(P$e,"A",{href:!0});var i_t=s(mV);cGo=r(i_t,"MegatronBertForNextSentencePrediction"),i_t.forEach(t),fGo=r(P$e," (Megatron-BERT model)"),P$e.forEach(t),mGo=i(Ys),kv=n(Ys,"LI",{});var B$e=s(kv);Che=n(B$e,"STRONG",{});var d_t=s(Che);gGo=r(d_t,"mobilebert"),d_t.forEach(t),hGo=r(B$e," \u2014 "),gV=n(B$e,"A",{href:!0});var c_t=s(gV);pGo=r(c_t,"MobileBertForNextSentencePrediction"),c_t.forEach(t),_Go=r(B$e," (MobileBERT model)"),B$e.forEach(t),uGo=i(Ys),Sv=n(Ys,"LI",{});var I$e=s(Sv);whe=n(I$e,"STRONG",{});var f_t=s(whe);bGo=r(f_t,"qdqbert"),f_t.forEach(t),vGo=r(I$e," \u2014 "),hV=n(I$e,"A",{href:!0});var m_t=s(hV);FGo=r(m_t,"QDQBertForNextSentencePrediction"),m_t.forEach(t),TGo=r(I$e," (QDQBert model)"),I$e.forEach(t),Ys.forEach(t),MGo=i(ia),Rv=n(ia,"P",{});var N$e=s(Rv);EGo=r(N$e,"The model is set in evaluation mode by default using "),Ahe=n(N$e,"CODE",{});var g_t=s(Ahe);CGo=r(g_t,"model.eval()"),g_t.forEach(t),wGo=r(N$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lhe=n(N$e,"CODE",{});var h_t=s(Lhe);AGo=r(h_t,"model.train()"),h_t.forEach(t),N$e.forEach(t),LGo=i(ia),T(Pv.$$.fragment,ia),ia.forEach(t),Js.forEach(t),jje=i(f),Yi=n(f,"H2",{class:!0});var VGe=s(Yi);Bv=n(VGe,"A",{id:!0,class:!0,href:!0});var p_t=s(Bv);yhe=n(p_t,"SPAN",{});var __t=s(yhe);T(oL.$$.fragment,__t),__t.forEach(t),p_t.forEach(t),yGo=i(VGe),xhe=n(VGe,"SPAN",{});var u_t=s(xhe);xGo=r(u_t,"AutoModelForTokenClassification"),u_t.forEach(t),VGe.forEach(t),Dje=i(f),Io=n(f,"DIV",{class:!0});var Ks=s(Io);T(rL.$$.fragment,Ks),$Go=i(Ks),Ki=n(Ks,"P",{});var gee=s(Ki);kGo=r(gee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),pV=n(gee,"A",{href:!0});var b_t=s(pV);SGo=r(b_t,"from_pretrained()"),b_t.forEach(t),RGo=r(gee," class method or the "),_V=n(gee,"A",{href:!0});var v_t=s(_V);PGo=r(v_t,"from_config()"),v_t.forEach(t),BGo=r(gee,` class
method.`),gee.forEach(t),IGo=i(Ks),tL=n(Ks,"P",{});var XGe=s(tL);NGo=r(XGe,"This class cannot be instantiated directly using "),$he=n(XGe,"CODE",{});var F_t=s($he);qGo=r(F_t,"__init__()"),F_t.forEach(t),jGo=r(XGe," (throws an error)."),XGe.forEach(t),DGo=i(Ks),ft=n(Ks,"DIV",{class:!0});var d0=s(ft);T(aL.$$.fragment,d0),GGo=i(d0),khe=n(d0,"P",{});var T_t=s(khe);OGo=r(T_t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),T_t.forEach(t),VGo=i(d0),Zi=n(d0,"P",{});var hee=s(Zi);XGo=r(hee,`Note:
Loading a model from its configuration file does `),She=n(hee,"STRONG",{});var M_t=s(She);zGo=r(M_t,"not"),M_t.forEach(t),WGo=r(hee,` load the model weights. It only affects the
model\u2019s configuration. Use `),uV=n(hee,"A",{href:!0});var E_t=s(uV);QGo=r(E_t,"from_pretrained()"),E_t.forEach(t),HGo=r(hee," to load the model weights."),hee.forEach(t),UGo=i(d0),T(Iv.$$.fragment,d0),d0.forEach(t),JGo=i(Ks),ao=n(Ks,"DIV",{class:!0});var da=s(ao);T(nL.$$.fragment,da),YGo=i(da),Rhe=n(da,"P",{});var C_t=s(Rhe);KGo=r(C_t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),C_t.forEach(t),ZGo=i(da),Ia=n(da,"P",{});var c0=s(Ia);eOo=r(c0,"The model class to instantiate is selected based on the "),Phe=n(c0,"CODE",{});var w_t=s(Phe);oOo=r(w_t,"model_type"),w_t.forEach(t),rOo=r(c0,` property of the config object (either
passed as an argument or loaded from `),Bhe=n(c0,"CODE",{});var A_t=s(Bhe);tOo=r(A_t,"pretrained_model_name_or_path"),A_t.forEach(t),aOo=r(c0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ihe=n(c0,"CODE",{});var L_t=s(Ihe);nOo=r(L_t,"pretrained_model_name_or_path"),L_t.forEach(t),sOo=r(c0,":"),c0.forEach(t),lOo=i(da),U=n(da,"UL",{});var J=s(U);Nv=n(J,"LI",{});var q$e=s(Nv);Nhe=n(q$e,"STRONG",{});var y_t=s(Nhe);iOo=r(y_t,"albert"),y_t.forEach(t),dOo=r(q$e," \u2014 "),bV=n(q$e,"A",{href:!0});var x_t=s(bV);cOo=r(x_t,"AlbertForTokenClassification"),x_t.forEach(t),fOo=r(q$e," (ALBERT model)"),q$e.forEach(t),mOo=i(J),qv=n(J,"LI",{});var j$e=s(qv);qhe=n(j$e,"STRONG",{});var $_t=s(qhe);gOo=r($_t,"bert"),$_t.forEach(t),hOo=r(j$e," \u2014 "),vV=n(j$e,"A",{href:!0});var k_t=s(vV);pOo=r(k_t,"BertForTokenClassification"),k_t.forEach(t),_Oo=r(j$e," (BERT model)"),j$e.forEach(t),uOo=i(J),jv=n(J,"LI",{});var D$e=s(jv);jhe=n(D$e,"STRONG",{});var S_t=s(jhe);bOo=r(S_t,"big_bird"),S_t.forEach(t),vOo=r(D$e," \u2014 "),FV=n(D$e,"A",{href:!0});var R_t=s(FV);FOo=r(R_t,"BigBirdForTokenClassification"),R_t.forEach(t),TOo=r(D$e," (BigBird model)"),D$e.forEach(t),MOo=i(J),Dv=n(J,"LI",{});var G$e=s(Dv);Dhe=n(G$e,"STRONG",{});var P_t=s(Dhe);EOo=r(P_t,"camembert"),P_t.forEach(t),COo=r(G$e," \u2014 "),TV=n(G$e,"A",{href:!0});var B_t=s(TV);wOo=r(B_t,"CamembertForTokenClassification"),B_t.forEach(t),AOo=r(G$e," (CamemBERT model)"),G$e.forEach(t),LOo=i(J),Gv=n(J,"LI",{});var O$e=s(Gv);Ghe=n(O$e,"STRONG",{});var I_t=s(Ghe);yOo=r(I_t,"canine"),I_t.forEach(t),xOo=r(O$e," \u2014 "),MV=n(O$e,"A",{href:!0});var N_t=s(MV);$Oo=r(N_t,"CanineForTokenClassification"),N_t.forEach(t),kOo=r(O$e," (CANINE model)"),O$e.forEach(t),SOo=i(J),Ov=n(J,"LI",{});var V$e=s(Ov);Ohe=n(V$e,"STRONG",{});var q_t=s(Ohe);ROo=r(q_t,"convbert"),q_t.forEach(t),POo=r(V$e," \u2014 "),EV=n(V$e,"A",{href:!0});var j_t=s(EV);BOo=r(j_t,"ConvBertForTokenClassification"),j_t.forEach(t),IOo=r(V$e," (ConvBERT model)"),V$e.forEach(t),NOo=i(J),Vv=n(J,"LI",{});var X$e=s(Vv);Vhe=n(X$e,"STRONG",{});var D_t=s(Vhe);qOo=r(D_t,"data2vec-text"),D_t.forEach(t),jOo=r(X$e," \u2014 "),CV=n(X$e,"A",{href:!0});var G_t=s(CV);DOo=r(G_t,"Data2VecTextForTokenClassification"),G_t.forEach(t),GOo=r(X$e," (Data2VecText model)"),X$e.forEach(t),OOo=i(J),Xv=n(J,"LI",{});var z$e=s(Xv);Xhe=n(z$e,"STRONG",{});var O_t=s(Xhe);VOo=r(O_t,"deberta"),O_t.forEach(t),XOo=r(z$e," \u2014 "),wV=n(z$e,"A",{href:!0});var V_t=s(wV);zOo=r(V_t,"DebertaForTokenClassification"),V_t.forEach(t),WOo=r(z$e," (DeBERTa model)"),z$e.forEach(t),QOo=i(J),zv=n(J,"LI",{});var W$e=s(zv);zhe=n(W$e,"STRONG",{});var X_t=s(zhe);HOo=r(X_t,"deberta-v2"),X_t.forEach(t),UOo=r(W$e," \u2014 "),AV=n(W$e,"A",{href:!0});var z_t=s(AV);JOo=r(z_t,"DebertaV2ForTokenClassification"),z_t.forEach(t),YOo=r(W$e," (DeBERTa-v2 model)"),W$e.forEach(t),KOo=i(J),Wv=n(J,"LI",{});var Q$e=s(Wv);Whe=n(Q$e,"STRONG",{});var W_t=s(Whe);ZOo=r(W_t,"distilbert"),W_t.forEach(t),eVo=r(Q$e," \u2014 "),LV=n(Q$e,"A",{href:!0});var Q_t=s(LV);oVo=r(Q_t,"DistilBertForTokenClassification"),Q_t.forEach(t),rVo=r(Q$e," (DistilBERT model)"),Q$e.forEach(t),tVo=i(J),Qv=n(J,"LI",{});var H$e=s(Qv);Qhe=n(H$e,"STRONG",{});var H_t=s(Qhe);aVo=r(H_t,"electra"),H_t.forEach(t),nVo=r(H$e," \u2014 "),yV=n(H$e,"A",{href:!0});var U_t=s(yV);sVo=r(U_t,"ElectraForTokenClassification"),U_t.forEach(t),lVo=r(H$e," (ELECTRA model)"),H$e.forEach(t),iVo=i(J),Hv=n(J,"LI",{});var U$e=s(Hv);Hhe=n(U$e,"STRONG",{});var J_t=s(Hhe);dVo=r(J_t,"flaubert"),J_t.forEach(t),cVo=r(U$e," \u2014 "),xV=n(U$e,"A",{href:!0});var Y_t=s(xV);fVo=r(Y_t,"FlaubertForTokenClassification"),Y_t.forEach(t),mVo=r(U$e," (FlauBERT model)"),U$e.forEach(t),gVo=i(J),Uv=n(J,"LI",{});var J$e=s(Uv);Uhe=n(J$e,"STRONG",{});var K_t=s(Uhe);hVo=r(K_t,"fnet"),K_t.forEach(t),pVo=r(J$e," \u2014 "),$V=n(J$e,"A",{href:!0});var Z_t=s($V);_Vo=r(Z_t,"FNetForTokenClassification"),Z_t.forEach(t),uVo=r(J$e," (FNet model)"),J$e.forEach(t),bVo=i(J),Jv=n(J,"LI",{});var Y$e=s(Jv);Jhe=n(Y$e,"STRONG",{});var eut=s(Jhe);vVo=r(eut,"funnel"),eut.forEach(t),FVo=r(Y$e," \u2014 "),kV=n(Y$e,"A",{href:!0});var out=s(kV);TVo=r(out,"FunnelForTokenClassification"),out.forEach(t),MVo=r(Y$e," (Funnel Transformer model)"),Y$e.forEach(t),EVo=i(J),Yv=n(J,"LI",{});var K$e=s(Yv);Yhe=n(K$e,"STRONG",{});var rut=s(Yhe);CVo=r(rut,"gpt2"),rut.forEach(t),wVo=r(K$e," \u2014 "),SV=n(K$e,"A",{href:!0});var tut=s(SV);AVo=r(tut,"GPT2ForTokenClassification"),tut.forEach(t),LVo=r(K$e," (OpenAI GPT-2 model)"),K$e.forEach(t),yVo=i(J),Kv=n(J,"LI",{});var Z$e=s(Kv);Khe=n(Z$e,"STRONG",{});var aut=s(Khe);xVo=r(aut,"ibert"),aut.forEach(t),$Vo=r(Z$e," \u2014 "),RV=n(Z$e,"A",{href:!0});var nut=s(RV);kVo=r(nut,"IBertForTokenClassification"),nut.forEach(t),SVo=r(Z$e," (I-BERT model)"),Z$e.forEach(t),RVo=i(J),Zv=n(J,"LI",{});var eke=s(Zv);Zhe=n(eke,"STRONG",{});var sut=s(Zhe);PVo=r(sut,"layoutlm"),sut.forEach(t),BVo=r(eke," \u2014 "),PV=n(eke,"A",{href:!0});var lut=s(PV);IVo=r(lut,"LayoutLMForTokenClassification"),lut.forEach(t),NVo=r(eke," (LayoutLM model)"),eke.forEach(t),qVo=i(J),eF=n(J,"LI",{});var oke=s(eF);epe=n(oke,"STRONG",{});var iut=s(epe);jVo=r(iut,"layoutlmv2"),iut.forEach(t),DVo=r(oke," \u2014 "),BV=n(oke,"A",{href:!0});var dut=s(BV);GVo=r(dut,"LayoutLMv2ForTokenClassification"),dut.forEach(t),OVo=r(oke," (LayoutLMv2 model)"),oke.forEach(t),VVo=i(J),oF=n(J,"LI",{});var rke=s(oF);ope=n(rke,"STRONG",{});var cut=s(ope);XVo=r(cut,"layoutlmv3"),cut.forEach(t),zVo=r(rke," \u2014 "),IV=n(rke,"A",{href:!0});var fut=s(IV);WVo=r(fut,"LayoutLMv3ForTokenClassification"),fut.forEach(t),QVo=r(rke," (LayoutLMv3 model)"),rke.forEach(t),HVo=i(J),rF=n(J,"LI",{});var tke=s(rF);rpe=n(tke,"STRONG",{});var mut=s(rpe);UVo=r(mut,"longformer"),mut.forEach(t),JVo=r(tke," \u2014 "),NV=n(tke,"A",{href:!0});var gut=s(NV);YVo=r(gut,"LongformerForTokenClassification"),gut.forEach(t),KVo=r(tke," (Longformer model)"),tke.forEach(t),ZVo=i(J),tF=n(J,"LI",{});var ake=s(tF);tpe=n(ake,"STRONG",{});var hut=s(tpe);eXo=r(hut,"megatron-bert"),hut.forEach(t),oXo=r(ake," \u2014 "),qV=n(ake,"A",{href:!0});var put=s(qV);rXo=r(put,"MegatronBertForTokenClassification"),put.forEach(t),tXo=r(ake," (Megatron-BERT model)"),ake.forEach(t),aXo=i(J),aF=n(J,"LI",{});var nke=s(aF);ape=n(nke,"STRONG",{});var _ut=s(ape);nXo=r(_ut,"mobilebert"),_ut.forEach(t),sXo=r(nke," \u2014 "),jV=n(nke,"A",{href:!0});var uut=s(jV);lXo=r(uut,"MobileBertForTokenClassification"),uut.forEach(t),iXo=r(nke," (MobileBERT model)"),nke.forEach(t),dXo=i(J),nF=n(J,"LI",{});var ske=s(nF);npe=n(ske,"STRONG",{});var but=s(npe);cXo=r(but,"mpnet"),but.forEach(t),fXo=r(ske," \u2014 "),DV=n(ske,"A",{href:!0});var vut=s(DV);mXo=r(vut,"MPNetForTokenClassification"),vut.forEach(t),gXo=r(ske," (MPNet model)"),ske.forEach(t),hXo=i(J),sF=n(J,"LI",{});var lke=s(sF);spe=n(lke,"STRONG",{});var Fut=s(spe);pXo=r(Fut,"nystromformer"),Fut.forEach(t),_Xo=r(lke," \u2014 "),GV=n(lke,"A",{href:!0});var Tut=s(GV);uXo=r(Tut,"NystromformerForTokenClassification"),Tut.forEach(t),bXo=r(lke," (Nystr\xF6mformer model)"),lke.forEach(t),vXo=i(J),lF=n(J,"LI",{});var ike=s(lF);lpe=n(ike,"STRONG",{});var Mut=s(lpe);FXo=r(Mut,"qdqbert"),Mut.forEach(t),TXo=r(ike," \u2014 "),OV=n(ike,"A",{href:!0});var Eut=s(OV);MXo=r(Eut,"QDQBertForTokenClassification"),Eut.forEach(t),EXo=r(ike," (QDQBert model)"),ike.forEach(t),CXo=i(J),iF=n(J,"LI",{});var dke=s(iF);ipe=n(dke,"STRONG",{});var Cut=s(ipe);wXo=r(Cut,"rembert"),Cut.forEach(t),AXo=r(dke," \u2014 "),VV=n(dke,"A",{href:!0});var wut=s(VV);LXo=r(wut,"RemBertForTokenClassification"),wut.forEach(t),yXo=r(dke," (RemBERT model)"),dke.forEach(t),xXo=i(J),dF=n(J,"LI",{});var cke=s(dF);dpe=n(cke,"STRONG",{});var Aut=s(dpe);$Xo=r(Aut,"roberta"),Aut.forEach(t),kXo=r(cke," \u2014 "),XV=n(cke,"A",{href:!0});var Lut=s(XV);SXo=r(Lut,"RobertaForTokenClassification"),Lut.forEach(t),RXo=r(cke," (RoBERTa model)"),cke.forEach(t),PXo=i(J),cF=n(J,"LI",{});var fke=s(cF);cpe=n(fke,"STRONG",{});var yut=s(cpe);BXo=r(yut,"roformer"),yut.forEach(t),IXo=r(fke," \u2014 "),zV=n(fke,"A",{href:!0});var xut=s(zV);NXo=r(xut,"RoFormerForTokenClassification"),xut.forEach(t),qXo=r(fke," (RoFormer model)"),fke.forEach(t),jXo=i(J),fF=n(J,"LI",{});var mke=s(fF);fpe=n(mke,"STRONG",{});var $ut=s(fpe);DXo=r($ut,"squeezebert"),$ut.forEach(t),GXo=r(mke," \u2014 "),WV=n(mke,"A",{href:!0});var kut=s(WV);OXo=r(kut,"SqueezeBertForTokenClassification"),kut.forEach(t),VXo=r(mke," (SqueezeBERT model)"),mke.forEach(t),XXo=i(J),mF=n(J,"LI",{});var gke=s(mF);mpe=n(gke,"STRONG",{});var Sut=s(mpe);zXo=r(Sut,"xlm"),Sut.forEach(t),WXo=r(gke," \u2014 "),QV=n(gke,"A",{href:!0});var Rut=s(QV);QXo=r(Rut,"XLMForTokenClassification"),Rut.forEach(t),HXo=r(gke," (XLM model)"),gke.forEach(t),UXo=i(J),gF=n(J,"LI",{});var hke=s(gF);gpe=n(hke,"STRONG",{});var Put=s(gpe);JXo=r(Put,"xlm-roberta"),Put.forEach(t),YXo=r(hke," \u2014 "),HV=n(hke,"A",{href:!0});var But=s(HV);KXo=r(But,"XLMRobertaForTokenClassification"),But.forEach(t),ZXo=r(hke," (XLM-RoBERTa model)"),hke.forEach(t),ezo=i(J),hF=n(J,"LI",{});var pke=s(hF);hpe=n(pke,"STRONG",{});var Iut=s(hpe);ozo=r(Iut,"xlm-roberta-xl"),Iut.forEach(t),rzo=r(pke," \u2014 "),UV=n(pke,"A",{href:!0});var Nut=s(UV);tzo=r(Nut,"XLMRobertaXLForTokenClassification"),Nut.forEach(t),azo=r(pke," (XLM-RoBERTa-XL model)"),pke.forEach(t),nzo=i(J),pF=n(J,"LI",{});var _ke=s(pF);ppe=n(_ke,"STRONG",{});var qut=s(ppe);szo=r(qut,"xlnet"),qut.forEach(t),lzo=r(_ke," \u2014 "),JV=n(_ke,"A",{href:!0});var jut=s(JV);izo=r(jut,"XLNetForTokenClassification"),jut.forEach(t),dzo=r(_ke," (XLNet model)"),_ke.forEach(t),czo=i(J),_F=n(J,"LI",{});var uke=s(_F);_pe=n(uke,"STRONG",{});var Dut=s(_pe);fzo=r(Dut,"yoso"),Dut.forEach(t),mzo=r(uke," \u2014 "),YV=n(uke,"A",{href:!0});var Gut=s(YV);gzo=r(Gut,"YosoForTokenClassification"),Gut.forEach(t),hzo=r(uke," (YOSO model)"),uke.forEach(t),J.forEach(t),pzo=i(da),uF=n(da,"P",{});var bke=s(uF);_zo=r(bke,"The model is set in evaluation mode by default using "),upe=n(bke,"CODE",{});var Out=s(upe);uzo=r(Out,"model.eval()"),Out.forEach(t),bzo=r(bke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bpe=n(bke,"CODE",{});var Vut=s(bpe);vzo=r(Vut,"model.train()"),Vut.forEach(t),bke.forEach(t),Fzo=i(da),T(bF.$$.fragment,da),da.forEach(t),Ks.forEach(t),Gje=i(f),ed=n(f,"H2",{class:!0});var zGe=s(ed);vF=n(zGe,"A",{id:!0,class:!0,href:!0});var Xut=s(vF);vpe=n(Xut,"SPAN",{});var zut=s(vpe);T(sL.$$.fragment,zut),zut.forEach(t),Xut.forEach(t),Tzo=i(zGe),Fpe=n(zGe,"SPAN",{});var Wut=s(Fpe);Mzo=r(Wut,"AutoModelForQuestionAnswering"),Wut.forEach(t),zGe.forEach(t),Oje=i(f),No=n(f,"DIV",{class:!0});var Zs=s(No);T(lL.$$.fragment,Zs),Ezo=i(Zs),od=n(Zs,"P",{});var pee=s(od);Czo=r(pee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),KV=n(pee,"A",{href:!0});var Qut=s(KV);wzo=r(Qut,"from_pretrained()"),Qut.forEach(t),Azo=r(pee," class method or the "),ZV=n(pee,"A",{href:!0});var Hut=s(ZV);Lzo=r(Hut,"from_config()"),Hut.forEach(t),yzo=r(pee,` class
method.`),pee.forEach(t),xzo=i(Zs),iL=n(Zs,"P",{});var WGe=s(iL);$zo=r(WGe,"This class cannot be instantiated directly using "),Tpe=n(WGe,"CODE",{});var Uut=s(Tpe);kzo=r(Uut,"__init__()"),Uut.forEach(t),Szo=r(WGe," (throws an error)."),WGe.forEach(t),Rzo=i(Zs),mt=n(Zs,"DIV",{class:!0});var f0=s(mt);T(dL.$$.fragment,f0),Pzo=i(f0),Mpe=n(f0,"P",{});var Jut=s(Mpe);Bzo=r(Jut,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Jut.forEach(t),Izo=i(f0),rd=n(f0,"P",{});var _ee=s(rd);Nzo=r(_ee,`Note:
Loading a model from its configuration file does `),Epe=n(_ee,"STRONG",{});var Yut=s(Epe);qzo=r(Yut,"not"),Yut.forEach(t),jzo=r(_ee,` load the model weights. It only affects the
model\u2019s configuration. Use `),eX=n(_ee,"A",{href:!0});var Kut=s(eX);Dzo=r(Kut,"from_pretrained()"),Kut.forEach(t),Gzo=r(_ee," to load the model weights."),_ee.forEach(t),Ozo=i(f0),T(FF.$$.fragment,f0),f0.forEach(t),Vzo=i(Zs),no=n(Zs,"DIV",{class:!0});var ca=s(no);T(cL.$$.fragment,ca),Xzo=i(ca),Cpe=n(ca,"P",{});var Zut=s(Cpe);zzo=r(Zut,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Zut.forEach(t),Wzo=i(ca),Na=n(ca,"P",{});var m0=s(Na);Qzo=r(m0,"The model class to instantiate is selected based on the "),wpe=n(m0,"CODE",{});var e2t=s(wpe);Hzo=r(e2t,"model_type"),e2t.forEach(t),Uzo=r(m0,` property of the config object (either
passed as an argument or loaded from `),Ape=n(m0,"CODE",{});var o2t=s(Ape);Jzo=r(o2t,"pretrained_model_name_or_path"),o2t.forEach(t),Yzo=r(m0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lpe=n(m0,"CODE",{});var r2t=s(Lpe);Kzo=r(r2t,"pretrained_model_name_or_path"),r2t.forEach(t),Zzo=r(m0,":"),m0.forEach(t),eWo=i(ca),V=n(ca,"UL",{});var X=s(V);TF=n(X,"LI",{});var vke=s(TF);ype=n(vke,"STRONG",{});var t2t=s(ype);oWo=r(t2t,"albert"),t2t.forEach(t),rWo=r(vke," \u2014 "),oX=n(vke,"A",{href:!0});var a2t=s(oX);tWo=r(a2t,"AlbertForQuestionAnswering"),a2t.forEach(t),aWo=r(vke," (ALBERT model)"),vke.forEach(t),nWo=i(X),MF=n(X,"LI",{});var Fke=s(MF);xpe=n(Fke,"STRONG",{});var n2t=s(xpe);sWo=r(n2t,"bart"),n2t.forEach(t),lWo=r(Fke," \u2014 "),rX=n(Fke,"A",{href:!0});var s2t=s(rX);iWo=r(s2t,"BartForQuestionAnswering"),s2t.forEach(t),dWo=r(Fke," (BART model)"),Fke.forEach(t),cWo=i(X),EF=n(X,"LI",{});var Tke=s(EF);$pe=n(Tke,"STRONG",{});var l2t=s($pe);fWo=r(l2t,"bert"),l2t.forEach(t),mWo=r(Tke," \u2014 "),tX=n(Tke,"A",{href:!0});var i2t=s(tX);gWo=r(i2t,"BertForQuestionAnswering"),i2t.forEach(t),hWo=r(Tke," (BERT model)"),Tke.forEach(t),pWo=i(X),CF=n(X,"LI",{});var Mke=s(CF);kpe=n(Mke,"STRONG",{});var d2t=s(kpe);_Wo=r(d2t,"big_bird"),d2t.forEach(t),uWo=r(Mke," \u2014 "),aX=n(Mke,"A",{href:!0});var c2t=s(aX);bWo=r(c2t,"BigBirdForQuestionAnswering"),c2t.forEach(t),vWo=r(Mke," (BigBird model)"),Mke.forEach(t),FWo=i(X),wF=n(X,"LI",{});var Eke=s(wF);Spe=n(Eke,"STRONG",{});var f2t=s(Spe);TWo=r(f2t,"bigbird_pegasus"),f2t.forEach(t),MWo=r(Eke," \u2014 "),nX=n(Eke,"A",{href:!0});var m2t=s(nX);EWo=r(m2t,"BigBirdPegasusForQuestionAnswering"),m2t.forEach(t),CWo=r(Eke," (BigBird-Pegasus model)"),Eke.forEach(t),wWo=i(X),AF=n(X,"LI",{});var Cke=s(AF);Rpe=n(Cke,"STRONG",{});var g2t=s(Rpe);AWo=r(g2t,"camembert"),g2t.forEach(t),LWo=r(Cke," \u2014 "),sX=n(Cke,"A",{href:!0});var h2t=s(sX);yWo=r(h2t,"CamembertForQuestionAnswering"),h2t.forEach(t),xWo=r(Cke," (CamemBERT model)"),Cke.forEach(t),$Wo=i(X),LF=n(X,"LI",{});var wke=s(LF);Ppe=n(wke,"STRONG",{});var p2t=s(Ppe);kWo=r(p2t,"canine"),p2t.forEach(t),SWo=r(wke," \u2014 "),lX=n(wke,"A",{href:!0});var _2t=s(lX);RWo=r(_2t,"CanineForQuestionAnswering"),_2t.forEach(t),PWo=r(wke," (CANINE model)"),wke.forEach(t),BWo=i(X),yF=n(X,"LI",{});var Ake=s(yF);Bpe=n(Ake,"STRONG",{});var u2t=s(Bpe);IWo=r(u2t,"convbert"),u2t.forEach(t),NWo=r(Ake," \u2014 "),iX=n(Ake,"A",{href:!0});var b2t=s(iX);qWo=r(b2t,"ConvBertForQuestionAnswering"),b2t.forEach(t),jWo=r(Ake," (ConvBERT model)"),Ake.forEach(t),DWo=i(X),xF=n(X,"LI",{});var Lke=s(xF);Ipe=n(Lke,"STRONG",{});var v2t=s(Ipe);GWo=r(v2t,"data2vec-text"),v2t.forEach(t),OWo=r(Lke," \u2014 "),dX=n(Lke,"A",{href:!0});var F2t=s(dX);VWo=r(F2t,"Data2VecTextForQuestionAnswering"),F2t.forEach(t),XWo=r(Lke," (Data2VecText model)"),Lke.forEach(t),zWo=i(X),$F=n(X,"LI",{});var yke=s($F);Npe=n(yke,"STRONG",{});var T2t=s(Npe);WWo=r(T2t,"deberta"),T2t.forEach(t),QWo=r(yke," \u2014 "),cX=n(yke,"A",{href:!0});var M2t=s(cX);HWo=r(M2t,"DebertaForQuestionAnswering"),M2t.forEach(t),UWo=r(yke," (DeBERTa model)"),yke.forEach(t),JWo=i(X),kF=n(X,"LI",{});var xke=s(kF);qpe=n(xke,"STRONG",{});var E2t=s(qpe);YWo=r(E2t,"deberta-v2"),E2t.forEach(t),KWo=r(xke," \u2014 "),fX=n(xke,"A",{href:!0});var C2t=s(fX);ZWo=r(C2t,"DebertaV2ForQuestionAnswering"),C2t.forEach(t),eQo=r(xke," (DeBERTa-v2 model)"),xke.forEach(t),oQo=i(X),SF=n(X,"LI",{});var $ke=s(SF);jpe=n($ke,"STRONG",{});var w2t=s(jpe);rQo=r(w2t,"distilbert"),w2t.forEach(t),tQo=r($ke," \u2014 "),mX=n($ke,"A",{href:!0});var A2t=s(mX);aQo=r(A2t,"DistilBertForQuestionAnswering"),A2t.forEach(t),nQo=r($ke," (DistilBERT model)"),$ke.forEach(t),sQo=i(X),RF=n(X,"LI",{});var kke=s(RF);Dpe=n(kke,"STRONG",{});var L2t=s(Dpe);lQo=r(L2t,"electra"),L2t.forEach(t),iQo=r(kke," \u2014 "),gX=n(kke,"A",{href:!0});var y2t=s(gX);dQo=r(y2t,"ElectraForQuestionAnswering"),y2t.forEach(t),cQo=r(kke," (ELECTRA model)"),kke.forEach(t),fQo=i(X),PF=n(X,"LI",{});var Ske=s(PF);Gpe=n(Ske,"STRONG",{});var x2t=s(Gpe);mQo=r(x2t,"flaubert"),x2t.forEach(t),gQo=r(Ske," \u2014 "),hX=n(Ske,"A",{href:!0});var $2t=s(hX);hQo=r($2t,"FlaubertForQuestionAnsweringSimple"),$2t.forEach(t),pQo=r(Ske," (FlauBERT model)"),Ske.forEach(t),_Qo=i(X),BF=n(X,"LI",{});var Rke=s(BF);Ope=n(Rke,"STRONG",{});var k2t=s(Ope);uQo=r(k2t,"fnet"),k2t.forEach(t),bQo=r(Rke," \u2014 "),pX=n(Rke,"A",{href:!0});var S2t=s(pX);vQo=r(S2t,"FNetForQuestionAnswering"),S2t.forEach(t),FQo=r(Rke," (FNet model)"),Rke.forEach(t),TQo=i(X),IF=n(X,"LI",{});var Pke=s(IF);Vpe=n(Pke,"STRONG",{});var R2t=s(Vpe);MQo=r(R2t,"funnel"),R2t.forEach(t),EQo=r(Pke," \u2014 "),_X=n(Pke,"A",{href:!0});var P2t=s(_X);CQo=r(P2t,"FunnelForQuestionAnswering"),P2t.forEach(t),wQo=r(Pke," (Funnel Transformer model)"),Pke.forEach(t),AQo=i(X),NF=n(X,"LI",{});var Bke=s(NF);Xpe=n(Bke,"STRONG",{});var B2t=s(Xpe);LQo=r(B2t,"gptj"),B2t.forEach(t),yQo=r(Bke," \u2014 "),uX=n(Bke,"A",{href:!0});var I2t=s(uX);xQo=r(I2t,"GPTJForQuestionAnswering"),I2t.forEach(t),$Qo=r(Bke," (GPT-J model)"),Bke.forEach(t),kQo=i(X),qF=n(X,"LI",{});var Ike=s(qF);zpe=n(Ike,"STRONG",{});var N2t=s(zpe);SQo=r(N2t,"ibert"),N2t.forEach(t),RQo=r(Ike," \u2014 "),bX=n(Ike,"A",{href:!0});var q2t=s(bX);PQo=r(q2t,"IBertForQuestionAnswering"),q2t.forEach(t),BQo=r(Ike," (I-BERT model)"),Ike.forEach(t),IQo=i(X),jF=n(X,"LI",{});var Nke=s(jF);Wpe=n(Nke,"STRONG",{});var j2t=s(Wpe);NQo=r(j2t,"layoutlmv2"),j2t.forEach(t),qQo=r(Nke," \u2014 "),vX=n(Nke,"A",{href:!0});var D2t=s(vX);jQo=r(D2t,"LayoutLMv2ForQuestionAnswering"),D2t.forEach(t),DQo=r(Nke," (LayoutLMv2 model)"),Nke.forEach(t),GQo=i(X),DF=n(X,"LI",{});var qke=s(DF);Qpe=n(qke,"STRONG",{});var G2t=s(Qpe);OQo=r(G2t,"layoutlmv3"),G2t.forEach(t),VQo=r(qke," \u2014 "),FX=n(qke,"A",{href:!0});var O2t=s(FX);XQo=r(O2t,"LayoutLMv3ForQuestionAnswering"),O2t.forEach(t),zQo=r(qke," (LayoutLMv3 model)"),qke.forEach(t),WQo=i(X),GF=n(X,"LI",{});var jke=s(GF);Hpe=n(jke,"STRONG",{});var V2t=s(Hpe);QQo=r(V2t,"led"),V2t.forEach(t),HQo=r(jke," \u2014 "),TX=n(jke,"A",{href:!0});var X2t=s(TX);UQo=r(X2t,"LEDForQuestionAnswering"),X2t.forEach(t),JQo=r(jke," (LED model)"),jke.forEach(t),YQo=i(X),OF=n(X,"LI",{});var Dke=s(OF);Upe=n(Dke,"STRONG",{});var z2t=s(Upe);KQo=r(z2t,"longformer"),z2t.forEach(t),ZQo=r(Dke," \u2014 "),MX=n(Dke,"A",{href:!0});var W2t=s(MX);eHo=r(W2t,"LongformerForQuestionAnswering"),W2t.forEach(t),oHo=r(Dke," (Longformer model)"),Dke.forEach(t),rHo=i(X),VF=n(X,"LI",{});var Gke=s(VF);Jpe=n(Gke,"STRONG",{});var Q2t=s(Jpe);tHo=r(Q2t,"lxmert"),Q2t.forEach(t),aHo=r(Gke," \u2014 "),EX=n(Gke,"A",{href:!0});var H2t=s(EX);nHo=r(H2t,"LxmertForQuestionAnswering"),H2t.forEach(t),sHo=r(Gke," (LXMERT model)"),Gke.forEach(t),lHo=i(X),XF=n(X,"LI",{});var Oke=s(XF);Ype=n(Oke,"STRONG",{});var U2t=s(Ype);iHo=r(U2t,"mbart"),U2t.forEach(t),dHo=r(Oke," \u2014 "),CX=n(Oke,"A",{href:!0});var J2t=s(CX);cHo=r(J2t,"MBartForQuestionAnswering"),J2t.forEach(t),fHo=r(Oke," (mBART model)"),Oke.forEach(t),mHo=i(X),zF=n(X,"LI",{});var Vke=s(zF);Kpe=n(Vke,"STRONG",{});var Y2t=s(Kpe);gHo=r(Y2t,"megatron-bert"),Y2t.forEach(t),hHo=r(Vke," \u2014 "),wX=n(Vke,"A",{href:!0});var K2t=s(wX);pHo=r(K2t,"MegatronBertForQuestionAnswering"),K2t.forEach(t),_Ho=r(Vke," (Megatron-BERT model)"),Vke.forEach(t),uHo=i(X),WF=n(X,"LI",{});var Xke=s(WF);Zpe=n(Xke,"STRONG",{});var Z2t=s(Zpe);bHo=r(Z2t,"mobilebert"),Z2t.forEach(t),vHo=r(Xke," \u2014 "),AX=n(Xke,"A",{href:!0});var e1t=s(AX);FHo=r(e1t,"MobileBertForQuestionAnswering"),e1t.forEach(t),THo=r(Xke," (MobileBERT model)"),Xke.forEach(t),MHo=i(X),QF=n(X,"LI",{});var zke=s(QF);e_e=n(zke,"STRONG",{});var o1t=s(e_e);EHo=r(o1t,"mpnet"),o1t.forEach(t),CHo=r(zke," \u2014 "),LX=n(zke,"A",{href:!0});var r1t=s(LX);wHo=r(r1t,"MPNetForQuestionAnswering"),r1t.forEach(t),AHo=r(zke," (MPNet model)"),zke.forEach(t),LHo=i(X),HF=n(X,"LI",{});var Wke=s(HF);o_e=n(Wke,"STRONG",{});var t1t=s(o_e);yHo=r(t1t,"nystromformer"),t1t.forEach(t),xHo=r(Wke," \u2014 "),yX=n(Wke,"A",{href:!0});var a1t=s(yX);$Ho=r(a1t,"NystromformerForQuestionAnswering"),a1t.forEach(t),kHo=r(Wke," (Nystr\xF6mformer model)"),Wke.forEach(t),SHo=i(X),UF=n(X,"LI",{});var Qke=s(UF);r_e=n(Qke,"STRONG",{});var n1t=s(r_e);RHo=r(n1t,"qdqbert"),n1t.forEach(t),PHo=r(Qke," \u2014 "),xX=n(Qke,"A",{href:!0});var s1t=s(xX);BHo=r(s1t,"QDQBertForQuestionAnswering"),s1t.forEach(t),IHo=r(Qke," (QDQBert model)"),Qke.forEach(t),NHo=i(X),JF=n(X,"LI",{});var Hke=s(JF);t_e=n(Hke,"STRONG",{});var l1t=s(t_e);qHo=r(l1t,"reformer"),l1t.forEach(t),jHo=r(Hke," \u2014 "),$X=n(Hke,"A",{href:!0});var i1t=s($X);DHo=r(i1t,"ReformerForQuestionAnswering"),i1t.forEach(t),GHo=r(Hke," (Reformer model)"),Hke.forEach(t),OHo=i(X),YF=n(X,"LI",{});var Uke=s(YF);a_e=n(Uke,"STRONG",{});var d1t=s(a_e);VHo=r(d1t,"rembert"),d1t.forEach(t),XHo=r(Uke," \u2014 "),kX=n(Uke,"A",{href:!0});var c1t=s(kX);zHo=r(c1t,"RemBertForQuestionAnswering"),c1t.forEach(t),WHo=r(Uke," (RemBERT model)"),Uke.forEach(t),QHo=i(X),KF=n(X,"LI",{});var Jke=s(KF);n_e=n(Jke,"STRONG",{});var f1t=s(n_e);HHo=r(f1t,"roberta"),f1t.forEach(t),UHo=r(Jke," \u2014 "),SX=n(Jke,"A",{href:!0});var m1t=s(SX);JHo=r(m1t,"RobertaForQuestionAnswering"),m1t.forEach(t),YHo=r(Jke," (RoBERTa model)"),Jke.forEach(t),KHo=i(X),ZF=n(X,"LI",{});var Yke=s(ZF);s_e=n(Yke,"STRONG",{});var g1t=s(s_e);ZHo=r(g1t,"roformer"),g1t.forEach(t),eUo=r(Yke," \u2014 "),RX=n(Yke,"A",{href:!0});var h1t=s(RX);oUo=r(h1t,"RoFormerForQuestionAnswering"),h1t.forEach(t),rUo=r(Yke," (RoFormer model)"),Yke.forEach(t),tUo=i(X),e6=n(X,"LI",{});var Kke=s(e6);l_e=n(Kke,"STRONG",{});var p1t=s(l_e);aUo=r(p1t,"splinter"),p1t.forEach(t),nUo=r(Kke," \u2014 "),PX=n(Kke,"A",{href:!0});var _1t=s(PX);sUo=r(_1t,"SplinterForQuestionAnswering"),_1t.forEach(t),lUo=r(Kke," (Splinter model)"),Kke.forEach(t),iUo=i(X),o6=n(X,"LI",{});var Zke=s(o6);i_e=n(Zke,"STRONG",{});var u1t=s(i_e);dUo=r(u1t,"squeezebert"),u1t.forEach(t),cUo=r(Zke," \u2014 "),BX=n(Zke,"A",{href:!0});var b1t=s(BX);fUo=r(b1t,"SqueezeBertForQuestionAnswering"),b1t.forEach(t),mUo=r(Zke," (SqueezeBERT model)"),Zke.forEach(t),gUo=i(X),r6=n(X,"LI",{});var eSe=s(r6);d_e=n(eSe,"STRONG",{});var v1t=s(d_e);hUo=r(v1t,"xlm"),v1t.forEach(t),pUo=r(eSe," \u2014 "),IX=n(eSe,"A",{href:!0});var F1t=s(IX);_Uo=r(F1t,"XLMForQuestionAnsweringSimple"),F1t.forEach(t),uUo=r(eSe," (XLM model)"),eSe.forEach(t),bUo=i(X),t6=n(X,"LI",{});var oSe=s(t6);c_e=n(oSe,"STRONG",{});var T1t=s(c_e);vUo=r(T1t,"xlm-roberta"),T1t.forEach(t),FUo=r(oSe," \u2014 "),NX=n(oSe,"A",{href:!0});var M1t=s(NX);TUo=r(M1t,"XLMRobertaForQuestionAnswering"),M1t.forEach(t),MUo=r(oSe," (XLM-RoBERTa model)"),oSe.forEach(t),EUo=i(X),a6=n(X,"LI",{});var rSe=s(a6);f_e=n(rSe,"STRONG",{});var E1t=s(f_e);CUo=r(E1t,"xlm-roberta-xl"),E1t.forEach(t),wUo=r(rSe," \u2014 "),qX=n(rSe,"A",{href:!0});var C1t=s(qX);AUo=r(C1t,"XLMRobertaXLForQuestionAnswering"),C1t.forEach(t),LUo=r(rSe," (XLM-RoBERTa-XL model)"),rSe.forEach(t),yUo=i(X),n6=n(X,"LI",{});var tSe=s(n6);m_e=n(tSe,"STRONG",{});var w1t=s(m_e);xUo=r(w1t,"xlnet"),w1t.forEach(t),$Uo=r(tSe," \u2014 "),jX=n(tSe,"A",{href:!0});var A1t=s(jX);kUo=r(A1t,"XLNetForQuestionAnsweringSimple"),A1t.forEach(t),SUo=r(tSe," (XLNet model)"),tSe.forEach(t),RUo=i(X),s6=n(X,"LI",{});var aSe=s(s6);g_e=n(aSe,"STRONG",{});var L1t=s(g_e);PUo=r(L1t,"yoso"),L1t.forEach(t),BUo=r(aSe," \u2014 "),DX=n(aSe,"A",{href:!0});var y1t=s(DX);IUo=r(y1t,"YosoForQuestionAnswering"),y1t.forEach(t),NUo=r(aSe," (YOSO model)"),aSe.forEach(t),X.forEach(t),qUo=i(ca),l6=n(ca,"P",{});var nSe=s(l6);jUo=r(nSe,"The model is set in evaluation mode by default using "),h_e=n(nSe,"CODE",{});var x1t=s(h_e);DUo=r(x1t,"model.eval()"),x1t.forEach(t),GUo=r(nSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),p_e=n(nSe,"CODE",{});var $1t=s(p_e);OUo=r($1t,"model.train()"),$1t.forEach(t),nSe.forEach(t),VUo=i(ca),T(i6.$$.fragment,ca),ca.forEach(t),Zs.forEach(t),Vje=i(f),td=n(f,"H2",{class:!0});var QGe=s(td);d6=n(QGe,"A",{id:!0,class:!0,href:!0});var k1t=s(d6);__e=n(k1t,"SPAN",{});var S1t=s(__e);T(fL.$$.fragment,S1t),S1t.forEach(t),k1t.forEach(t),XUo=i(QGe),u_e=n(QGe,"SPAN",{});var R1t=s(u_e);zUo=r(R1t,"AutoModelForTableQuestionAnswering"),R1t.forEach(t),QGe.forEach(t),Xje=i(f),qo=n(f,"DIV",{class:!0});var el=s(qo);T(mL.$$.fragment,el),WUo=i(el),ad=n(el,"P",{});var uee=s(ad);QUo=r(uee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),GX=n(uee,"A",{href:!0});var P1t=s(GX);HUo=r(P1t,"from_pretrained()"),P1t.forEach(t),UUo=r(uee," class method or the "),OX=n(uee,"A",{href:!0});var B1t=s(OX);JUo=r(B1t,"from_config()"),B1t.forEach(t),YUo=r(uee,` class
method.`),uee.forEach(t),KUo=i(el),gL=n(el,"P",{});var HGe=s(gL);ZUo=r(HGe,"This class cannot be instantiated directly using "),b_e=n(HGe,"CODE",{});var I1t=s(b_e);eJo=r(I1t,"__init__()"),I1t.forEach(t),oJo=r(HGe," (throws an error)."),HGe.forEach(t),rJo=i(el),gt=n(el,"DIV",{class:!0});var g0=s(gt);T(hL.$$.fragment,g0),tJo=i(g0),v_e=n(g0,"P",{});var N1t=s(v_e);aJo=r(N1t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),N1t.forEach(t),nJo=i(g0),nd=n(g0,"P",{});var bee=s(nd);sJo=r(bee,`Note:
Loading a model from its configuration file does `),F_e=n(bee,"STRONG",{});var q1t=s(F_e);lJo=r(q1t,"not"),q1t.forEach(t),iJo=r(bee,` load the model weights. It only affects the
model\u2019s configuration. Use `),VX=n(bee,"A",{href:!0});var j1t=s(VX);dJo=r(j1t,"from_pretrained()"),j1t.forEach(t),cJo=r(bee," to load the model weights."),bee.forEach(t),fJo=i(g0),T(c6.$$.fragment,g0),g0.forEach(t),mJo=i(el),so=n(el,"DIV",{class:!0});var fa=s(so);T(pL.$$.fragment,fa),gJo=i(fa),T_e=n(fa,"P",{});var D1t=s(T_e);hJo=r(D1t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),D1t.forEach(t),pJo=i(fa),qa=n(fa,"P",{});var h0=s(qa);_Jo=r(h0,"The model class to instantiate is selected based on the "),M_e=n(h0,"CODE",{});var G1t=s(M_e);uJo=r(G1t,"model_type"),G1t.forEach(t),bJo=r(h0,` property of the config object (either
passed as an argument or loaded from `),E_e=n(h0,"CODE",{});var O1t=s(E_e);vJo=r(O1t,"pretrained_model_name_or_path"),O1t.forEach(t),FJo=r(h0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C_e=n(h0,"CODE",{});var V1t=s(C_e);TJo=r(V1t,"pretrained_model_name_or_path"),V1t.forEach(t),MJo=r(h0,":"),h0.forEach(t),EJo=i(fa),w_e=n(fa,"UL",{});var X1t=s(w_e);f6=n(X1t,"LI",{});var sSe=s(f6);A_e=n(sSe,"STRONG",{});var z1t=s(A_e);CJo=r(z1t,"tapas"),z1t.forEach(t),wJo=r(sSe," \u2014 "),XX=n(sSe,"A",{href:!0});var W1t=s(XX);AJo=r(W1t,"TapasForQuestionAnswering"),W1t.forEach(t),LJo=r(sSe," (TAPAS model)"),sSe.forEach(t),X1t.forEach(t),yJo=i(fa),m6=n(fa,"P",{});var lSe=s(m6);xJo=r(lSe,"The model is set in evaluation mode by default using "),L_e=n(lSe,"CODE",{});var Q1t=s(L_e);$Jo=r(Q1t,"model.eval()"),Q1t.forEach(t),kJo=r(lSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),y_e=n(lSe,"CODE",{});var H1t=s(y_e);SJo=r(H1t,"model.train()"),H1t.forEach(t),lSe.forEach(t),RJo=i(fa),T(g6.$$.fragment,fa),fa.forEach(t),el.forEach(t),zje=i(f),sd=n(f,"H2",{class:!0});var UGe=s(sd);h6=n(UGe,"A",{id:!0,class:!0,href:!0});var U1t=s(h6);x_e=n(U1t,"SPAN",{});var J1t=s(x_e);T(_L.$$.fragment,J1t),J1t.forEach(t),U1t.forEach(t),PJo=i(UGe),$_e=n(UGe,"SPAN",{});var Y1t=s($_e);BJo=r(Y1t,"AutoModelForImageClassification"),Y1t.forEach(t),UGe.forEach(t),Wje=i(f),jo=n(f,"DIV",{class:!0});var ol=s(jo);T(uL.$$.fragment,ol),IJo=i(ol),ld=n(ol,"P",{});var vee=s(ld);NJo=r(vee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),zX=n(vee,"A",{href:!0});var K1t=s(zX);qJo=r(K1t,"from_pretrained()"),K1t.forEach(t),jJo=r(vee," class method or the "),WX=n(vee,"A",{href:!0});var Z1t=s(WX);DJo=r(Z1t,"from_config()"),Z1t.forEach(t),GJo=r(vee,` class
method.`),vee.forEach(t),OJo=i(ol),bL=n(ol,"P",{});var JGe=s(bL);VJo=r(JGe,"This class cannot be instantiated directly using "),k_e=n(JGe,"CODE",{});var ebt=s(k_e);XJo=r(ebt,"__init__()"),ebt.forEach(t),zJo=r(JGe," (throws an error)."),JGe.forEach(t),WJo=i(ol),ht=n(ol,"DIV",{class:!0});var p0=s(ht);T(vL.$$.fragment,p0),QJo=i(p0),S_e=n(p0,"P",{});var obt=s(S_e);HJo=r(obt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),obt.forEach(t),UJo=i(p0),id=n(p0,"P",{});var Fee=s(id);JJo=r(Fee,`Note:
Loading a model from its configuration file does `),R_e=n(Fee,"STRONG",{});var rbt=s(R_e);YJo=r(rbt,"not"),rbt.forEach(t),KJo=r(Fee,` load the model weights. It only affects the
model\u2019s configuration. Use `),QX=n(Fee,"A",{href:!0});var tbt=s(QX);ZJo=r(tbt,"from_pretrained()"),tbt.forEach(t),eYo=r(Fee," to load the model weights."),Fee.forEach(t),oYo=i(p0),T(p6.$$.fragment,p0),p0.forEach(t),rYo=i(ol),lo=n(ol,"DIV",{class:!0});var ma=s(lo);T(FL.$$.fragment,ma),tYo=i(ma),P_e=n(ma,"P",{});var abt=s(P_e);aYo=r(abt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),abt.forEach(t),nYo=i(ma),ja=n(ma,"P",{});var _0=s(ja);sYo=r(_0,"The model class to instantiate is selected based on the "),B_e=n(_0,"CODE",{});var nbt=s(B_e);lYo=r(nbt,"model_type"),nbt.forEach(t),iYo=r(_0,` property of the config object (either
passed as an argument or loaded from `),I_e=n(_0,"CODE",{});var sbt=s(I_e);dYo=r(sbt,"pretrained_model_name_or_path"),sbt.forEach(t),cYo=r(_0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N_e=n(_0,"CODE",{});var lbt=s(N_e);fYo=r(lbt,"pretrained_model_name_or_path"),lbt.forEach(t),mYo=r(_0,":"),_0.forEach(t),gYo=i(ma),Fe=n(ma,"UL",{});var Te=s(Fe);_6=n(Te,"LI",{});var iSe=s(_6);q_e=n(iSe,"STRONG",{});var ibt=s(q_e);hYo=r(ibt,"beit"),ibt.forEach(t),pYo=r(iSe," \u2014 "),HX=n(iSe,"A",{href:!0});var dbt=s(HX);_Yo=r(dbt,"BeitForImageClassification"),dbt.forEach(t),uYo=r(iSe," (BEiT model)"),iSe.forEach(t),bYo=i(Te),u6=n(Te,"LI",{});var dSe=s(u6);j_e=n(dSe,"STRONG",{});var cbt=s(j_e);vYo=r(cbt,"convnext"),cbt.forEach(t),FYo=r(dSe," \u2014 "),UX=n(dSe,"A",{href:!0});var fbt=s(UX);TYo=r(fbt,"ConvNextForImageClassification"),fbt.forEach(t),MYo=r(dSe," (ConvNeXT model)"),dSe.forEach(t),EYo=i(Te),b6=n(Te,"LI",{});var cSe=s(b6);D_e=n(cSe,"STRONG",{});var mbt=s(D_e);CYo=r(mbt,"cvt"),mbt.forEach(t),wYo=r(cSe," \u2014 "),JX=n(cSe,"A",{href:!0});var gbt=s(JX);AYo=r(gbt,"CvtForImageClassification"),gbt.forEach(t),LYo=r(cSe," (CvT model)"),cSe.forEach(t),yYo=i(Te),v6=n(Te,"LI",{});var fSe=s(v6);G_e=n(fSe,"STRONG",{});var hbt=s(G_e);xYo=r(hbt,"data2vec-vision"),hbt.forEach(t),$Yo=r(fSe," \u2014 "),YX=n(fSe,"A",{href:!0});var pbt=s(YX);kYo=r(pbt,"Data2VecVisionForImageClassification"),pbt.forEach(t),SYo=r(fSe," (Data2VecVision model)"),fSe.forEach(t),RYo=i(Te),Is=n(Te,"LI",{});var sk=s(Is);O_e=n(sk,"STRONG",{});var _bt=s(O_e);PYo=r(_bt,"deit"),_bt.forEach(t),BYo=r(sk," \u2014 "),KX=n(sk,"A",{href:!0});var ubt=s(KX);IYo=r(ubt,"DeiTForImageClassification"),ubt.forEach(t),NYo=r(sk," or "),ZX=n(sk,"A",{href:!0});var bbt=s(ZX);qYo=r(bbt,"DeiTForImageClassificationWithTeacher"),bbt.forEach(t),jYo=r(sk," (DeiT model)"),sk.forEach(t),DYo=i(Te),F6=n(Te,"LI",{});var mSe=s(F6);V_e=n(mSe,"STRONG",{});var vbt=s(V_e);GYo=r(vbt,"imagegpt"),vbt.forEach(t),OYo=r(mSe," \u2014 "),ez=n(mSe,"A",{href:!0});var Fbt=s(ez);VYo=r(Fbt,"ImageGPTForImageClassification"),Fbt.forEach(t),XYo=r(mSe," (ImageGPT model)"),mSe.forEach(t),zYo=i(Te),Ns=n(Te,"LI",{});var lk=s(Ns);X_e=n(lk,"STRONG",{});var Tbt=s(X_e);WYo=r(Tbt,"levit"),Tbt.forEach(t),QYo=r(lk," \u2014 "),oz=n(lk,"A",{href:!0});var Mbt=s(oz);HYo=r(Mbt,"LevitForImageClassification"),Mbt.forEach(t),UYo=r(lk," or "),rz=n(lk,"A",{href:!0});var Ebt=s(rz);JYo=r(Ebt,"LevitForImageClassificationWithTeacher"),Ebt.forEach(t),YYo=r(lk," (LeViT model)"),lk.forEach(t),KYo=i(Te),pt=n(Te,"LI",{});var _f=s(pt);z_e=n(_f,"STRONG",{});var Cbt=s(z_e);ZYo=r(Cbt,"perceiver"),Cbt.forEach(t),eKo=r(_f," \u2014 "),tz=n(_f,"A",{href:!0});var wbt=s(tz);oKo=r(wbt,"PerceiverForImageClassificationLearned"),wbt.forEach(t),rKo=r(_f," or "),az=n(_f,"A",{href:!0});var Abt=s(az);tKo=r(Abt,"PerceiverForImageClassificationFourier"),Abt.forEach(t),aKo=r(_f," or "),nz=n(_f,"A",{href:!0});var Lbt=s(nz);nKo=r(Lbt,"PerceiverForImageClassificationConvProcessing"),Lbt.forEach(t),sKo=r(_f," (Perceiver model)"),_f.forEach(t),lKo=i(Te),T6=n(Te,"LI",{});var gSe=s(T6);W_e=n(gSe,"STRONG",{});var ybt=s(W_e);iKo=r(ybt,"poolformer"),ybt.forEach(t),dKo=r(gSe," \u2014 "),sz=n(gSe,"A",{href:!0});var xbt=s(sz);cKo=r(xbt,"PoolFormerForImageClassification"),xbt.forEach(t),fKo=r(gSe," (PoolFormer model)"),gSe.forEach(t),mKo=i(Te),M6=n(Te,"LI",{});var hSe=s(M6);Q_e=n(hSe,"STRONG",{});var $bt=s(Q_e);gKo=r($bt,"regnet"),$bt.forEach(t),hKo=r(hSe," \u2014 "),lz=n(hSe,"A",{href:!0});var kbt=s(lz);pKo=r(kbt,"RegNetForImageClassification"),kbt.forEach(t),_Ko=r(hSe," (RegNet model)"),hSe.forEach(t),uKo=i(Te),E6=n(Te,"LI",{});var pSe=s(E6);H_e=n(pSe,"STRONG",{});var Sbt=s(H_e);bKo=r(Sbt,"resnet"),Sbt.forEach(t),vKo=r(pSe," \u2014 "),iz=n(pSe,"A",{href:!0});var Rbt=s(iz);FKo=r(Rbt,"ResNetForImageClassification"),Rbt.forEach(t),TKo=r(pSe," (ResNet model)"),pSe.forEach(t),MKo=i(Te),C6=n(Te,"LI",{});var _Se=s(C6);U_e=n(_Se,"STRONG",{});var Pbt=s(U_e);EKo=r(Pbt,"segformer"),Pbt.forEach(t),CKo=r(_Se," \u2014 "),dz=n(_Se,"A",{href:!0});var Bbt=s(dz);wKo=r(Bbt,"SegformerForImageClassification"),Bbt.forEach(t),AKo=r(_Se," (SegFormer model)"),_Se.forEach(t),LKo=i(Te),w6=n(Te,"LI",{});var uSe=s(w6);J_e=n(uSe,"STRONG",{});var Ibt=s(J_e);yKo=r(Ibt,"swin"),Ibt.forEach(t),xKo=r(uSe," \u2014 "),cz=n(uSe,"A",{href:!0});var Nbt=s(cz);$Ko=r(Nbt,"SwinForImageClassification"),Nbt.forEach(t),kKo=r(uSe," (Swin Transformer model)"),uSe.forEach(t),SKo=i(Te),A6=n(Te,"LI",{});var bSe=s(A6);Y_e=n(bSe,"STRONG",{});var qbt=s(Y_e);RKo=r(qbt,"van"),qbt.forEach(t),PKo=r(bSe," \u2014 "),fz=n(bSe,"A",{href:!0});var jbt=s(fz);BKo=r(jbt,"VanForImageClassification"),jbt.forEach(t),IKo=r(bSe," (VAN model)"),bSe.forEach(t),NKo=i(Te),L6=n(Te,"LI",{});var vSe=s(L6);K_e=n(vSe,"STRONG",{});var Dbt=s(K_e);qKo=r(Dbt,"vit"),Dbt.forEach(t),jKo=r(vSe," \u2014 "),mz=n(vSe,"A",{href:!0});var Gbt=s(mz);DKo=r(Gbt,"ViTForImageClassification"),Gbt.forEach(t),GKo=r(vSe," (ViT model)"),vSe.forEach(t),Te.forEach(t),OKo=i(ma),y6=n(ma,"P",{});var FSe=s(y6);VKo=r(FSe,"The model is set in evaluation mode by default using "),Z_e=n(FSe,"CODE",{});var Obt=s(Z_e);XKo=r(Obt,"model.eval()"),Obt.forEach(t),zKo=r(FSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),eue=n(FSe,"CODE",{});var Vbt=s(eue);WKo=r(Vbt,"model.train()"),Vbt.forEach(t),FSe.forEach(t),QKo=i(ma),T(x6.$$.fragment,ma),ma.forEach(t),ol.forEach(t),Qje=i(f),dd=n(f,"H2",{class:!0});var YGe=s(dd);$6=n(YGe,"A",{id:!0,class:!0,href:!0});var Xbt=s($6);oue=n(Xbt,"SPAN",{});var zbt=s(oue);T(TL.$$.fragment,zbt),zbt.forEach(t),Xbt.forEach(t),HKo=i(YGe),rue=n(YGe,"SPAN",{});var Wbt=s(rue);UKo=r(Wbt,"AutoModelForVision2Seq"),Wbt.forEach(t),YGe.forEach(t),Hje=i(f),Do=n(f,"DIV",{class:!0});var rl=s(Do);T(ML.$$.fragment,rl),JKo=i(rl),cd=n(rl,"P",{});var Tee=s(cd);YKo=r(Tee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),gz=n(Tee,"A",{href:!0});var Qbt=s(gz);KKo=r(Qbt,"from_pretrained()"),Qbt.forEach(t),ZKo=r(Tee," class method or the "),hz=n(Tee,"A",{href:!0});var Hbt=s(hz);eZo=r(Hbt,"from_config()"),Hbt.forEach(t),oZo=r(Tee,` class
method.`),Tee.forEach(t),rZo=i(rl),EL=n(rl,"P",{});var KGe=s(EL);tZo=r(KGe,"This class cannot be instantiated directly using "),tue=n(KGe,"CODE",{});var Ubt=s(tue);aZo=r(Ubt,"__init__()"),Ubt.forEach(t),nZo=r(KGe," (throws an error)."),KGe.forEach(t),sZo=i(rl),_t=n(rl,"DIV",{class:!0});var u0=s(_t);T(CL.$$.fragment,u0),lZo=i(u0),aue=n(u0,"P",{});var Jbt=s(aue);iZo=r(Jbt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Jbt.forEach(t),dZo=i(u0),fd=n(u0,"P",{});var Mee=s(fd);cZo=r(Mee,`Note:
Loading a model from its configuration file does `),nue=n(Mee,"STRONG",{});var Ybt=s(nue);fZo=r(Ybt,"not"),Ybt.forEach(t),mZo=r(Mee,` load the model weights. It only affects the
model\u2019s configuration. Use `),pz=n(Mee,"A",{href:!0});var Kbt=s(pz);gZo=r(Kbt,"from_pretrained()"),Kbt.forEach(t),hZo=r(Mee," to load the model weights."),Mee.forEach(t),pZo=i(u0),T(k6.$$.fragment,u0),u0.forEach(t),_Zo=i(rl),io=n(rl,"DIV",{class:!0});var ga=s(io);T(wL.$$.fragment,ga),uZo=i(ga),sue=n(ga,"P",{});var Zbt=s(sue);bZo=r(Zbt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Zbt.forEach(t),vZo=i(ga),Da=n(ga,"P",{});var b0=s(Da);FZo=r(b0,"The model class to instantiate is selected based on the "),lue=n(b0,"CODE",{});var evt=s(lue);TZo=r(evt,"model_type"),evt.forEach(t),MZo=r(b0,` property of the config object (either
passed as an argument or loaded from `),iue=n(b0,"CODE",{});var ovt=s(iue);EZo=r(ovt,"pretrained_model_name_or_path"),ovt.forEach(t),CZo=r(b0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),due=n(b0,"CODE",{});var rvt=s(due);wZo=r(rvt,"pretrained_model_name_or_path"),rvt.forEach(t),AZo=r(b0,":"),b0.forEach(t),LZo=i(ga),cue=n(ga,"UL",{});var tvt=s(cue);S6=n(tvt,"LI",{});var TSe=s(S6);fue=n(TSe,"STRONG",{});var avt=s(fue);yZo=r(avt,"vision-encoder-decoder"),avt.forEach(t),xZo=r(TSe," \u2014 "),_z=n(TSe,"A",{href:!0});var nvt=s(_z);$Zo=r(nvt,"VisionEncoderDecoderModel"),nvt.forEach(t),kZo=r(TSe," (Vision Encoder decoder model)"),TSe.forEach(t),tvt.forEach(t),SZo=i(ga),R6=n(ga,"P",{});var MSe=s(R6);RZo=r(MSe,"The model is set in evaluation mode by default using "),mue=n(MSe,"CODE",{});var svt=s(mue);PZo=r(svt,"model.eval()"),svt.forEach(t),BZo=r(MSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gue=n(MSe,"CODE",{});var lvt=s(gue);IZo=r(lvt,"model.train()"),lvt.forEach(t),MSe.forEach(t),NZo=i(ga),T(P6.$$.fragment,ga),ga.forEach(t),rl.forEach(t),Uje=i(f),md=n(f,"H2",{class:!0});var ZGe=s(md);B6=n(ZGe,"A",{id:!0,class:!0,href:!0});var ivt=s(B6);hue=n(ivt,"SPAN",{});var dvt=s(hue);T(AL.$$.fragment,dvt),dvt.forEach(t),ivt.forEach(t),qZo=i(ZGe),pue=n(ZGe,"SPAN",{});var cvt=s(pue);jZo=r(cvt,"AutoModelForAudioClassification"),cvt.forEach(t),ZGe.forEach(t),Jje=i(f),Go=n(f,"DIV",{class:!0});var tl=s(Go);T(LL.$$.fragment,tl),DZo=i(tl),gd=n(tl,"P",{});var Eee=s(gd);GZo=r(Eee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),uz=n(Eee,"A",{href:!0});var fvt=s(uz);OZo=r(fvt,"from_pretrained()"),fvt.forEach(t),VZo=r(Eee," class method or the "),bz=n(Eee,"A",{href:!0});var mvt=s(bz);XZo=r(mvt,"from_config()"),mvt.forEach(t),zZo=r(Eee,` class
method.`),Eee.forEach(t),WZo=i(tl),yL=n(tl,"P",{});var eOe=s(yL);QZo=r(eOe,"This class cannot be instantiated directly using "),_ue=n(eOe,"CODE",{});var gvt=s(_ue);HZo=r(gvt,"__init__()"),gvt.forEach(t),UZo=r(eOe," (throws an error)."),eOe.forEach(t),JZo=i(tl),ut=n(tl,"DIV",{class:!0});var v0=s(ut);T(xL.$$.fragment,v0),YZo=i(v0),uue=n(v0,"P",{});var hvt=s(uue);KZo=r(hvt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),hvt.forEach(t),ZZo=i(v0),hd=n(v0,"P",{});var Cee=s(hd);eer=r(Cee,`Note:
Loading a model from its configuration file does `),bue=n(Cee,"STRONG",{});var pvt=s(bue);oer=r(pvt,"not"),pvt.forEach(t),rer=r(Cee,` load the model weights. It only affects the
model\u2019s configuration. Use `),vz=n(Cee,"A",{href:!0});var _vt=s(vz);ter=r(_vt,"from_pretrained()"),_vt.forEach(t),aer=r(Cee," to load the model weights."),Cee.forEach(t),ner=i(v0),T(I6.$$.fragment,v0),v0.forEach(t),ser=i(tl),co=n(tl,"DIV",{class:!0});var ha=s(co);T($L.$$.fragment,ha),ler=i(ha),vue=n(ha,"P",{});var uvt=s(vue);ier=r(uvt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),uvt.forEach(t),der=i(ha),Ga=n(ha,"P",{});var F0=s(Ga);cer=r(F0,"The model class to instantiate is selected based on the "),Fue=n(F0,"CODE",{});var bvt=s(Fue);fer=r(bvt,"model_type"),bvt.forEach(t),mer=r(F0,` property of the config object (either
passed as an argument or loaded from `),Tue=n(F0,"CODE",{});var vvt=s(Tue);ger=r(vvt,"pretrained_model_name_or_path"),vvt.forEach(t),her=r(F0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mue=n(F0,"CODE",{});var Fvt=s(Mue);per=r(Fvt,"pretrained_model_name_or_path"),Fvt.forEach(t),_er=r(F0,":"),F0.forEach(t),uer=i(ha),Re=n(ha,"UL",{});var Xe=s(Re);N6=n(Xe,"LI",{});var ESe=s(N6);Eue=n(ESe,"STRONG",{});var Tvt=s(Eue);ber=r(Tvt,"data2vec-audio"),Tvt.forEach(t),ver=r(ESe," \u2014 "),Fz=n(ESe,"A",{href:!0});var Mvt=s(Fz);Fer=r(Mvt,"Data2VecAudioForSequenceClassification"),Mvt.forEach(t),Ter=r(ESe," (Data2VecAudio model)"),ESe.forEach(t),Mer=i(Xe),q6=n(Xe,"LI",{});var CSe=s(q6);Cue=n(CSe,"STRONG",{});var Evt=s(Cue);Eer=r(Evt,"hubert"),Evt.forEach(t),Cer=r(CSe," \u2014 "),Tz=n(CSe,"A",{href:!0});var Cvt=s(Tz);wer=r(Cvt,"HubertForSequenceClassification"),Cvt.forEach(t),Aer=r(CSe," (Hubert model)"),CSe.forEach(t),Ler=i(Xe),j6=n(Xe,"LI",{});var wSe=s(j6);wue=n(wSe,"STRONG",{});var wvt=s(wue);yer=r(wvt,"sew"),wvt.forEach(t),xer=r(wSe," \u2014 "),Mz=n(wSe,"A",{href:!0});var Avt=s(Mz);$er=r(Avt,"SEWForSequenceClassification"),Avt.forEach(t),ker=r(wSe," (SEW model)"),wSe.forEach(t),Ser=i(Xe),D6=n(Xe,"LI",{});var ASe=s(D6);Aue=n(ASe,"STRONG",{});var Lvt=s(Aue);Rer=r(Lvt,"sew-d"),Lvt.forEach(t),Per=r(ASe," \u2014 "),Ez=n(ASe,"A",{href:!0});var yvt=s(Ez);Ber=r(yvt,"SEWDForSequenceClassification"),yvt.forEach(t),Ier=r(ASe," (SEW-D model)"),ASe.forEach(t),Ner=i(Xe),G6=n(Xe,"LI",{});var LSe=s(G6);Lue=n(LSe,"STRONG",{});var xvt=s(Lue);qer=r(xvt,"unispeech"),xvt.forEach(t),jer=r(LSe," \u2014 "),Cz=n(LSe,"A",{href:!0});var $vt=s(Cz);Der=r($vt,"UniSpeechForSequenceClassification"),$vt.forEach(t),Ger=r(LSe," (UniSpeech model)"),LSe.forEach(t),Oer=i(Xe),O6=n(Xe,"LI",{});var ySe=s(O6);yue=n(ySe,"STRONG",{});var kvt=s(yue);Ver=r(kvt,"unispeech-sat"),kvt.forEach(t),Xer=r(ySe," \u2014 "),wz=n(ySe,"A",{href:!0});var Svt=s(wz);zer=r(Svt,"UniSpeechSatForSequenceClassification"),Svt.forEach(t),Wer=r(ySe," (UniSpeechSat model)"),ySe.forEach(t),Qer=i(Xe),V6=n(Xe,"LI",{});var xSe=s(V6);xue=n(xSe,"STRONG",{});var Rvt=s(xue);Her=r(Rvt,"wav2vec2"),Rvt.forEach(t),Uer=r(xSe," \u2014 "),Az=n(xSe,"A",{href:!0});var Pvt=s(Az);Jer=r(Pvt,"Wav2Vec2ForSequenceClassification"),Pvt.forEach(t),Yer=r(xSe," (Wav2Vec2 model)"),xSe.forEach(t),Ker=i(Xe),X6=n(Xe,"LI",{});var $Se=s(X6);$ue=n($Se,"STRONG",{});var Bvt=s($ue);Zer=r(Bvt,"wav2vec2-conformer"),Bvt.forEach(t),eor=r($Se," \u2014 "),Lz=n($Se,"A",{href:!0});var Ivt=s(Lz);oor=r(Ivt,"Wav2Vec2ConformerForSequenceClassification"),Ivt.forEach(t),ror=r($Se," (Wav2Vec2-Conformer model)"),$Se.forEach(t),tor=i(Xe),z6=n(Xe,"LI",{});var kSe=s(z6);kue=n(kSe,"STRONG",{});var Nvt=s(kue);aor=r(Nvt,"wavlm"),Nvt.forEach(t),nor=r(kSe," \u2014 "),yz=n(kSe,"A",{href:!0});var qvt=s(yz);sor=r(qvt,"WavLMForSequenceClassification"),qvt.forEach(t),lor=r(kSe," (WavLM model)"),kSe.forEach(t),Xe.forEach(t),ior=i(ha),W6=n(ha,"P",{});var SSe=s(W6);dor=r(SSe,"The model is set in evaluation mode by default using "),Sue=n(SSe,"CODE",{});var jvt=s(Sue);cor=r(jvt,"model.eval()"),jvt.forEach(t),mor=r(SSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rue=n(SSe,"CODE",{});var Dvt=s(Rue);gor=r(Dvt,"model.train()"),Dvt.forEach(t),SSe.forEach(t),hor=i(ha),T(Q6.$$.fragment,ha),ha.forEach(t),tl.forEach(t),Yje=i(f),pd=n(f,"H2",{class:!0});var oOe=s(pd);H6=n(oOe,"A",{id:!0,class:!0,href:!0});var Gvt=s(H6);Pue=n(Gvt,"SPAN",{});var Ovt=s(Pue);T(kL.$$.fragment,Ovt),Ovt.forEach(t),Gvt.forEach(t),por=i(oOe),Bue=n(oOe,"SPAN",{});var Vvt=s(Bue);_or=r(Vvt,"AutoModelForAudioFrameClassification"),Vvt.forEach(t),oOe.forEach(t),Kje=i(f),Oo=n(f,"DIV",{class:!0});var al=s(Oo);T(SL.$$.fragment,al),uor=i(al),_d=n(al,"P",{});var wee=s(_d);bor=r(wee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),xz=n(wee,"A",{href:!0});var Xvt=s(xz);vor=r(Xvt,"from_pretrained()"),Xvt.forEach(t),For=r(wee," class method or the "),$z=n(wee,"A",{href:!0});var zvt=s($z);Tor=r(zvt,"from_config()"),zvt.forEach(t),Mor=r(wee,` class
method.`),wee.forEach(t),Eor=i(al),RL=n(al,"P",{});var rOe=s(RL);Cor=r(rOe,"This class cannot be instantiated directly using "),Iue=n(rOe,"CODE",{});var Wvt=s(Iue);wor=r(Wvt,"__init__()"),Wvt.forEach(t),Aor=r(rOe," (throws an error)."),rOe.forEach(t),Lor=i(al),bt=n(al,"DIV",{class:!0});var T0=s(bt);T(PL.$$.fragment,T0),yor=i(T0),Nue=n(T0,"P",{});var Qvt=s(Nue);xor=r(Qvt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),Qvt.forEach(t),$or=i(T0),ud=n(T0,"P",{});var Aee=s(ud);kor=r(Aee,`Note:
Loading a model from its configuration file does `),que=n(Aee,"STRONG",{});var Hvt=s(que);Sor=r(Hvt,"not"),Hvt.forEach(t),Ror=r(Aee,` load the model weights. It only affects the
model\u2019s configuration. Use `),kz=n(Aee,"A",{href:!0});var Uvt=s(kz);Por=r(Uvt,"from_pretrained()"),Uvt.forEach(t),Bor=r(Aee," to load the model weights."),Aee.forEach(t),Ior=i(T0),T(U6.$$.fragment,T0),T0.forEach(t),Nor=i(al),fo=n(al,"DIV",{class:!0});var pa=s(fo);T(BL.$$.fragment,pa),qor=i(pa),jue=n(pa,"P",{});var Jvt=s(jue);jor=r(Jvt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Jvt.forEach(t),Dor=i(pa),Oa=n(pa,"P",{});var M0=s(Oa);Gor=r(M0,"The model class to instantiate is selected based on the "),Due=n(M0,"CODE",{});var Yvt=s(Due);Oor=r(Yvt,"model_type"),Yvt.forEach(t),Vor=r(M0,` property of the config object (either
passed as an argument or loaded from `),Gue=n(M0,"CODE",{});var Kvt=s(Gue);Xor=r(Kvt,"pretrained_model_name_or_path"),Kvt.forEach(t),zor=r(M0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Oue=n(M0,"CODE",{});var Zvt=s(Oue);Wor=r(Zvt,"pretrained_model_name_or_path"),Zvt.forEach(t),Qor=r(M0,":"),M0.forEach(t),Hor=i(pa),Kr=n(pa,"UL",{});var nl=s(Kr);J6=n(nl,"LI",{});var RSe=s(J6);Vue=n(RSe,"STRONG",{});var eFt=s(Vue);Uor=r(eFt,"data2vec-audio"),eFt.forEach(t),Jor=r(RSe," \u2014 "),Sz=n(RSe,"A",{href:!0});var oFt=s(Sz);Yor=r(oFt,"Data2VecAudioForAudioFrameClassification"),oFt.forEach(t),Kor=r(RSe," (Data2VecAudio model)"),RSe.forEach(t),Zor=i(nl),Y6=n(nl,"LI",{});var PSe=s(Y6);Xue=n(PSe,"STRONG",{});var rFt=s(Xue);err=r(rFt,"unispeech-sat"),rFt.forEach(t),orr=r(PSe," \u2014 "),Rz=n(PSe,"A",{href:!0});var tFt=s(Rz);rrr=r(tFt,"UniSpeechSatForAudioFrameClassification"),tFt.forEach(t),trr=r(PSe," (UniSpeechSat model)"),PSe.forEach(t),arr=i(nl),K6=n(nl,"LI",{});var BSe=s(K6);zue=n(BSe,"STRONG",{});var aFt=s(zue);nrr=r(aFt,"wav2vec2"),aFt.forEach(t),srr=r(BSe," \u2014 "),Pz=n(BSe,"A",{href:!0});var nFt=s(Pz);lrr=r(nFt,"Wav2Vec2ForAudioFrameClassification"),nFt.forEach(t),irr=r(BSe," (Wav2Vec2 model)"),BSe.forEach(t),drr=i(nl),Z6=n(nl,"LI",{});var ISe=s(Z6);Wue=n(ISe,"STRONG",{});var sFt=s(Wue);crr=r(sFt,"wav2vec2-conformer"),sFt.forEach(t),frr=r(ISe," \u2014 "),Bz=n(ISe,"A",{href:!0});var lFt=s(Bz);mrr=r(lFt,"Wav2Vec2ConformerForAudioFrameClassification"),lFt.forEach(t),grr=r(ISe," (Wav2Vec2-Conformer model)"),ISe.forEach(t),hrr=i(nl),eT=n(nl,"LI",{});var NSe=s(eT);Que=n(NSe,"STRONG",{});var iFt=s(Que);prr=r(iFt,"wavlm"),iFt.forEach(t),_rr=r(NSe," \u2014 "),Iz=n(NSe,"A",{href:!0});var dFt=s(Iz);urr=r(dFt,"WavLMForAudioFrameClassification"),dFt.forEach(t),brr=r(NSe," (WavLM model)"),NSe.forEach(t),nl.forEach(t),vrr=i(pa),oT=n(pa,"P",{});var qSe=s(oT);Frr=r(qSe,"The model is set in evaluation mode by default using "),Hue=n(qSe,"CODE",{});var cFt=s(Hue);Trr=r(cFt,"model.eval()"),cFt.forEach(t),Mrr=r(qSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Uue=n(qSe,"CODE",{});var fFt=s(Uue);Err=r(fFt,"model.train()"),fFt.forEach(t),qSe.forEach(t),Crr=i(pa),T(rT.$$.fragment,pa),pa.forEach(t),al.forEach(t),Zje=i(f),bd=n(f,"H2",{class:!0});var tOe=s(bd);tT=n(tOe,"A",{id:!0,class:!0,href:!0});var mFt=s(tT);Jue=n(mFt,"SPAN",{});var gFt=s(Jue);T(IL.$$.fragment,gFt),gFt.forEach(t),mFt.forEach(t),wrr=i(tOe),Yue=n(tOe,"SPAN",{});var hFt=s(Yue);Arr=r(hFt,"AutoModelForCTC"),hFt.forEach(t),tOe.forEach(t),eDe=i(f),Vo=n(f,"DIV",{class:!0});var sl=s(Vo);T(NL.$$.fragment,sl),Lrr=i(sl),vd=n(sl,"P",{});var Lee=s(vd);yrr=r(Lee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),Nz=n(Lee,"A",{href:!0});var pFt=s(Nz);xrr=r(pFt,"from_pretrained()"),pFt.forEach(t),$rr=r(Lee," class method or the "),qz=n(Lee,"A",{href:!0});var _Ft=s(qz);krr=r(_Ft,"from_config()"),_Ft.forEach(t),Srr=r(Lee,` class
method.`),Lee.forEach(t),Rrr=i(sl),qL=n(sl,"P",{});var aOe=s(qL);Prr=r(aOe,"This class cannot be instantiated directly using "),Kue=n(aOe,"CODE",{});var uFt=s(Kue);Brr=r(uFt,"__init__()"),uFt.forEach(t),Irr=r(aOe," (throws an error)."),aOe.forEach(t),Nrr=i(sl),vt=n(sl,"DIV",{class:!0});var E0=s(vt);T(jL.$$.fragment,E0),qrr=i(E0),Zue=n(E0,"P",{});var bFt=s(Zue);jrr=r(bFt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),bFt.forEach(t),Drr=i(E0),Fd=n(E0,"P",{});var yee=s(Fd);Grr=r(yee,`Note:
Loading a model from its configuration file does `),e2e=n(yee,"STRONG",{});var vFt=s(e2e);Orr=r(vFt,"not"),vFt.forEach(t),Vrr=r(yee,` load the model weights. It only affects the
model\u2019s configuration. Use `),jz=n(yee,"A",{href:!0});var FFt=s(jz);Xrr=r(FFt,"from_pretrained()"),FFt.forEach(t),zrr=r(yee," to load the model weights."),yee.forEach(t),Wrr=i(E0),T(aT.$$.fragment,E0),E0.forEach(t),Qrr=i(sl),mo=n(sl,"DIV",{class:!0});var _a=s(mo);T(DL.$$.fragment,_a),Hrr=i(_a),o2e=n(_a,"P",{});var TFt=s(o2e);Urr=r(TFt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),TFt.forEach(t),Jrr=i(_a),Va=n(_a,"P",{});var C0=s(Va);Yrr=r(C0,"The model class to instantiate is selected based on the "),r2e=n(C0,"CODE",{});var MFt=s(r2e);Krr=r(MFt,"model_type"),MFt.forEach(t),Zrr=r(C0,` property of the config object (either
passed as an argument or loaded from `),t2e=n(C0,"CODE",{});var EFt=s(t2e);etr=r(EFt,"pretrained_model_name_or_path"),EFt.forEach(t),otr=r(C0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a2e=n(C0,"CODE",{});var CFt=s(a2e);rtr=r(CFt,"pretrained_model_name_or_path"),CFt.forEach(t),ttr=r(C0,":"),C0.forEach(t),atr=i(_a),Pe=n(_a,"UL",{});var ze=s(Pe);nT=n(ze,"LI",{});var jSe=s(nT);n2e=n(jSe,"STRONG",{});var wFt=s(n2e);ntr=r(wFt,"data2vec-audio"),wFt.forEach(t),str=r(jSe," \u2014 "),Dz=n(jSe,"A",{href:!0});var AFt=s(Dz);ltr=r(AFt,"Data2VecAudioForCTC"),AFt.forEach(t),itr=r(jSe," (Data2VecAudio model)"),jSe.forEach(t),dtr=i(ze),sT=n(ze,"LI",{});var DSe=s(sT);s2e=n(DSe,"STRONG",{});var LFt=s(s2e);ctr=r(LFt,"hubert"),LFt.forEach(t),ftr=r(DSe," \u2014 "),Gz=n(DSe,"A",{href:!0});var yFt=s(Gz);mtr=r(yFt,"HubertForCTC"),yFt.forEach(t),gtr=r(DSe," (Hubert model)"),DSe.forEach(t),htr=i(ze),lT=n(ze,"LI",{});var GSe=s(lT);l2e=n(GSe,"STRONG",{});var xFt=s(l2e);ptr=r(xFt,"sew"),xFt.forEach(t),_tr=r(GSe," \u2014 "),Oz=n(GSe,"A",{href:!0});var $Ft=s(Oz);utr=r($Ft,"SEWForCTC"),$Ft.forEach(t),btr=r(GSe," (SEW model)"),GSe.forEach(t),vtr=i(ze),iT=n(ze,"LI",{});var OSe=s(iT);i2e=n(OSe,"STRONG",{});var kFt=s(i2e);Ftr=r(kFt,"sew-d"),kFt.forEach(t),Ttr=r(OSe," \u2014 "),Vz=n(OSe,"A",{href:!0});var SFt=s(Vz);Mtr=r(SFt,"SEWDForCTC"),SFt.forEach(t),Etr=r(OSe," (SEW-D model)"),OSe.forEach(t),Ctr=i(ze),dT=n(ze,"LI",{});var VSe=s(dT);d2e=n(VSe,"STRONG",{});var RFt=s(d2e);wtr=r(RFt,"unispeech"),RFt.forEach(t),Atr=r(VSe," \u2014 "),Xz=n(VSe,"A",{href:!0});var PFt=s(Xz);Ltr=r(PFt,"UniSpeechForCTC"),PFt.forEach(t),ytr=r(VSe," (UniSpeech model)"),VSe.forEach(t),xtr=i(ze),cT=n(ze,"LI",{});var XSe=s(cT);c2e=n(XSe,"STRONG",{});var BFt=s(c2e);$tr=r(BFt,"unispeech-sat"),BFt.forEach(t),ktr=r(XSe," \u2014 "),zz=n(XSe,"A",{href:!0});var IFt=s(zz);Str=r(IFt,"UniSpeechSatForCTC"),IFt.forEach(t),Rtr=r(XSe," (UniSpeechSat model)"),XSe.forEach(t),Ptr=i(ze),fT=n(ze,"LI",{});var zSe=s(fT);f2e=n(zSe,"STRONG",{});var NFt=s(f2e);Btr=r(NFt,"wav2vec2"),NFt.forEach(t),Itr=r(zSe," \u2014 "),Wz=n(zSe,"A",{href:!0});var qFt=s(Wz);Ntr=r(qFt,"Wav2Vec2ForCTC"),qFt.forEach(t),qtr=r(zSe," (Wav2Vec2 model)"),zSe.forEach(t),jtr=i(ze),mT=n(ze,"LI",{});var WSe=s(mT);m2e=n(WSe,"STRONG",{});var jFt=s(m2e);Dtr=r(jFt,"wav2vec2-conformer"),jFt.forEach(t),Gtr=r(WSe," \u2014 "),Qz=n(WSe,"A",{href:!0});var DFt=s(Qz);Otr=r(DFt,"Wav2Vec2ConformerForCTC"),DFt.forEach(t),Vtr=r(WSe," (Wav2Vec2-Conformer model)"),WSe.forEach(t),Xtr=i(ze),gT=n(ze,"LI",{});var QSe=s(gT);g2e=n(QSe,"STRONG",{});var GFt=s(g2e);ztr=r(GFt,"wavlm"),GFt.forEach(t),Wtr=r(QSe," \u2014 "),Hz=n(QSe,"A",{href:!0});var OFt=s(Hz);Qtr=r(OFt,"WavLMForCTC"),OFt.forEach(t),Htr=r(QSe," (WavLM model)"),QSe.forEach(t),ze.forEach(t),Utr=i(_a),hT=n(_a,"P",{});var HSe=s(hT);Jtr=r(HSe,"The model is set in evaluation mode by default using "),h2e=n(HSe,"CODE",{});var VFt=s(h2e);Ytr=r(VFt,"model.eval()"),VFt.forEach(t),Ktr=r(HSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),p2e=n(HSe,"CODE",{});var XFt=s(p2e);Ztr=r(XFt,"model.train()"),XFt.forEach(t),HSe.forEach(t),ear=i(_a),T(pT.$$.fragment,_a),_a.forEach(t),sl.forEach(t),oDe=i(f),Td=n(f,"H2",{class:!0});var nOe=s(Td);_T=n(nOe,"A",{id:!0,class:!0,href:!0});var zFt=s(_T);_2e=n(zFt,"SPAN",{});var WFt=s(_2e);T(GL.$$.fragment,WFt),WFt.forEach(t),zFt.forEach(t),oar=i(nOe),u2e=n(nOe,"SPAN",{});var QFt=s(u2e);rar=r(QFt,"AutoModelForSpeechSeq2Seq"),QFt.forEach(t),nOe.forEach(t),rDe=i(f),Xo=n(f,"DIV",{class:!0});var ll=s(Xo);T(OL.$$.fragment,ll),tar=i(ll),Md=n(ll,"P",{});var xee=s(Md);aar=r(xee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Uz=n(xee,"A",{href:!0});var HFt=s(Uz);nar=r(HFt,"from_pretrained()"),HFt.forEach(t),sar=r(xee," class method or the "),Jz=n(xee,"A",{href:!0});var UFt=s(Jz);lar=r(UFt,"from_config()"),UFt.forEach(t),iar=r(xee,` class
method.`),xee.forEach(t),dar=i(ll),VL=n(ll,"P",{});var sOe=s(VL);car=r(sOe,"This class cannot be instantiated directly using "),b2e=n(sOe,"CODE",{});var JFt=s(b2e);far=r(JFt,"__init__()"),JFt.forEach(t),mar=r(sOe," (throws an error)."),sOe.forEach(t),gar=i(ll),Ft=n(ll,"DIV",{class:!0});var w0=s(Ft);T(XL.$$.fragment,w0),har=i(w0),v2e=n(w0,"P",{});var YFt=s(v2e);par=r(YFt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),YFt.forEach(t),_ar=i(w0),Ed=n(w0,"P",{});var $ee=s(Ed);uar=r($ee,`Note:
Loading a model from its configuration file does `),F2e=n($ee,"STRONG",{});var KFt=s(F2e);bar=r(KFt,"not"),KFt.forEach(t),Far=r($ee,` load the model weights. It only affects the
model\u2019s configuration. Use `),Yz=n($ee,"A",{href:!0});var ZFt=s(Yz);Tar=r(ZFt,"from_pretrained()"),ZFt.forEach(t),Mar=r($ee," to load the model weights."),$ee.forEach(t),Ear=i(w0),T(uT.$$.fragment,w0),w0.forEach(t),Car=i(ll),go=n(ll,"DIV",{class:!0});var ua=s(go);T(zL.$$.fragment,ua),war=i(ua),T2e=n(ua,"P",{});var e6t=s(T2e);Aar=r(e6t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),e6t.forEach(t),Lar=i(ua),Xa=n(ua,"P",{});var A0=s(Xa);yar=r(A0,"The model class to instantiate is selected based on the "),M2e=n(A0,"CODE",{});var o6t=s(M2e);xar=r(o6t,"model_type"),o6t.forEach(t),$ar=r(A0,` property of the config object (either
passed as an argument or loaded from `),E2e=n(A0,"CODE",{});var r6t=s(E2e);kar=r(r6t,"pretrained_model_name_or_path"),r6t.forEach(t),Sar=r(A0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C2e=n(A0,"CODE",{});var t6t=s(C2e);Rar=r(t6t,"pretrained_model_name_or_path"),t6t.forEach(t),Par=r(A0,":"),A0.forEach(t),Bar=i(ua),WL=n(ua,"UL",{});var lOe=s(WL);bT=n(lOe,"LI",{});var USe=s(bT);w2e=n(USe,"STRONG",{});var a6t=s(w2e);Iar=r(a6t,"speech-encoder-decoder"),a6t.forEach(t),Nar=r(USe," \u2014 "),Kz=n(USe,"A",{href:!0});var n6t=s(Kz);qar=r(n6t,"SpeechEncoderDecoderModel"),n6t.forEach(t),jar=r(USe," (Speech Encoder decoder model)"),USe.forEach(t),Dar=i(lOe),vT=n(lOe,"LI",{});var JSe=s(vT);A2e=n(JSe,"STRONG",{});var s6t=s(A2e);Gar=r(s6t,"speech_to_text"),s6t.forEach(t),Oar=r(JSe," \u2014 "),Zz=n(JSe,"A",{href:!0});var l6t=s(Zz);Var=r(l6t,"Speech2TextForConditionalGeneration"),l6t.forEach(t),Xar=r(JSe," (Speech2Text model)"),JSe.forEach(t),lOe.forEach(t),zar=i(ua),FT=n(ua,"P",{});var YSe=s(FT);War=r(YSe,"The model is set in evaluation mode by default using "),L2e=n(YSe,"CODE",{});var i6t=s(L2e);Qar=r(i6t,"model.eval()"),i6t.forEach(t),Har=r(YSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),y2e=n(YSe,"CODE",{});var d6t=s(y2e);Uar=r(d6t,"model.train()"),d6t.forEach(t),YSe.forEach(t),Jar=i(ua),T(TT.$$.fragment,ua),ua.forEach(t),ll.forEach(t),tDe=i(f),Cd=n(f,"H2",{class:!0});var iOe=s(Cd);MT=n(iOe,"A",{id:!0,class:!0,href:!0});var c6t=s(MT);x2e=n(c6t,"SPAN",{});var f6t=s(x2e);T(QL.$$.fragment,f6t),f6t.forEach(t),c6t.forEach(t),Yar=i(iOe),$2e=n(iOe,"SPAN",{});var m6t=s($2e);Kar=r(m6t,"AutoModelForAudioXVector"),m6t.forEach(t),iOe.forEach(t),aDe=i(f),zo=n(f,"DIV",{class:!0});var il=s(zo);T(HL.$$.fragment,il),Zar=i(il),wd=n(il,"P",{});var kee=s(wd);enr=r(kee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),eW=n(kee,"A",{href:!0});var g6t=s(eW);onr=r(g6t,"from_pretrained()"),g6t.forEach(t),rnr=r(kee," class method or the "),oW=n(kee,"A",{href:!0});var h6t=s(oW);tnr=r(h6t,"from_config()"),h6t.forEach(t),anr=r(kee,` class
method.`),kee.forEach(t),nnr=i(il),UL=n(il,"P",{});var dOe=s(UL);snr=r(dOe,"This class cannot be instantiated directly using "),k2e=n(dOe,"CODE",{});var p6t=s(k2e);lnr=r(p6t,"__init__()"),p6t.forEach(t),inr=r(dOe," (throws an error)."),dOe.forEach(t),dnr=i(il),Tt=n(il,"DIV",{class:!0});var L0=s(Tt);T(JL.$$.fragment,L0),cnr=i(L0),S2e=n(L0,"P",{});var _6t=s(S2e);fnr=r(_6t,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),_6t.forEach(t),mnr=i(L0),Ad=n(L0,"P",{});var See=s(Ad);gnr=r(See,`Note:
Loading a model from its configuration file does `),R2e=n(See,"STRONG",{});var u6t=s(R2e);hnr=r(u6t,"not"),u6t.forEach(t),pnr=r(See,` load the model weights. It only affects the
model\u2019s configuration. Use `),rW=n(See,"A",{href:!0});var b6t=s(rW);_nr=r(b6t,"from_pretrained()"),b6t.forEach(t),unr=r(See," to load the model weights."),See.forEach(t),bnr=i(L0),T(ET.$$.fragment,L0),L0.forEach(t),vnr=i(il),ho=n(il,"DIV",{class:!0});var ba=s(ho);T(YL.$$.fragment,ba),Fnr=i(ba),P2e=n(ba,"P",{});var v6t=s(P2e);Tnr=r(v6t,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),v6t.forEach(t),Mnr=i(ba),za=n(ba,"P",{});var y0=s(za);Enr=r(y0,"The model class to instantiate is selected based on the "),B2e=n(y0,"CODE",{});var F6t=s(B2e);Cnr=r(F6t,"model_type"),F6t.forEach(t),wnr=r(y0,` property of the config object (either
passed as an argument or loaded from `),I2e=n(y0,"CODE",{});var T6t=s(I2e);Anr=r(T6t,"pretrained_model_name_or_path"),T6t.forEach(t),Lnr=r(y0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N2e=n(y0,"CODE",{});var M6t=s(N2e);ynr=r(M6t,"pretrained_model_name_or_path"),M6t.forEach(t),xnr=r(y0,":"),y0.forEach(t),$nr=i(ba),Zr=n(ba,"UL",{});var dl=s(Zr);CT=n(dl,"LI",{});var KSe=s(CT);q2e=n(KSe,"STRONG",{});var E6t=s(q2e);knr=r(E6t,"data2vec-audio"),E6t.forEach(t),Snr=r(KSe," \u2014 "),tW=n(KSe,"A",{href:!0});var C6t=s(tW);Rnr=r(C6t,"Data2VecAudioForXVector"),C6t.forEach(t),Pnr=r(KSe," (Data2VecAudio model)"),KSe.forEach(t),Bnr=i(dl),wT=n(dl,"LI",{});var ZSe=s(wT);j2e=n(ZSe,"STRONG",{});var w6t=s(j2e);Inr=r(w6t,"unispeech-sat"),w6t.forEach(t),Nnr=r(ZSe," \u2014 "),aW=n(ZSe,"A",{href:!0});var A6t=s(aW);qnr=r(A6t,"UniSpeechSatForXVector"),A6t.forEach(t),jnr=r(ZSe," (UniSpeechSat model)"),ZSe.forEach(t),Dnr=i(dl),AT=n(dl,"LI",{});var eRe=s(AT);D2e=n(eRe,"STRONG",{});var L6t=s(D2e);Gnr=r(L6t,"wav2vec2"),L6t.forEach(t),Onr=r(eRe," \u2014 "),nW=n(eRe,"A",{href:!0});var y6t=s(nW);Vnr=r(y6t,"Wav2Vec2ForXVector"),y6t.forEach(t),Xnr=r(eRe," (Wav2Vec2 model)"),eRe.forEach(t),znr=i(dl),LT=n(dl,"LI",{});var oRe=s(LT);G2e=n(oRe,"STRONG",{});var x6t=s(G2e);Wnr=r(x6t,"wav2vec2-conformer"),x6t.forEach(t),Qnr=r(oRe," \u2014 "),sW=n(oRe,"A",{href:!0});var $6t=s(sW);Hnr=r($6t,"Wav2Vec2ConformerForXVector"),$6t.forEach(t),Unr=r(oRe," (Wav2Vec2-Conformer model)"),oRe.forEach(t),Jnr=i(dl),yT=n(dl,"LI",{});var rRe=s(yT);O2e=n(rRe,"STRONG",{});var k6t=s(O2e);Ynr=r(k6t,"wavlm"),k6t.forEach(t),Knr=r(rRe," \u2014 "),lW=n(rRe,"A",{href:!0});var S6t=s(lW);Znr=r(S6t,"WavLMForXVector"),S6t.forEach(t),esr=r(rRe," (WavLM model)"),rRe.forEach(t),dl.forEach(t),osr=i(ba),xT=n(ba,"P",{});var tRe=s(xT);rsr=r(tRe,"The model is set in evaluation mode by default using "),V2e=n(tRe,"CODE",{});var R6t=s(V2e);tsr=r(R6t,"model.eval()"),R6t.forEach(t),asr=r(tRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),X2e=n(tRe,"CODE",{});var P6t=s(X2e);nsr=r(P6t,"model.train()"),P6t.forEach(t),tRe.forEach(t),ssr=i(ba),T($T.$$.fragment,ba),ba.forEach(t),il.forEach(t),nDe=i(f),Ld=n(f,"H2",{class:!0});var cOe=s(Ld);kT=n(cOe,"A",{id:!0,class:!0,href:!0});var B6t=s(kT);z2e=n(B6t,"SPAN",{});var I6t=s(z2e);T(KL.$$.fragment,I6t),I6t.forEach(t),B6t.forEach(t),lsr=i(cOe),W2e=n(cOe,"SPAN",{});var N6t=s(W2e);isr=r(N6t,"AutoModelForMaskedImageModeling"),N6t.forEach(t),cOe.forEach(t),sDe=i(f),Wo=n(f,"DIV",{class:!0});var cl=s(Wo);T(ZL.$$.fragment,cl),dsr=i(cl),yd=n(cl,"P",{});var Ree=s(yd);csr=r(Ree,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),iW=n(Ree,"A",{href:!0});var q6t=s(iW);fsr=r(q6t,"from_pretrained()"),q6t.forEach(t),msr=r(Ree," class method or the "),dW=n(Ree,"A",{href:!0});var j6t=s(dW);gsr=r(j6t,"from_config()"),j6t.forEach(t),hsr=r(Ree,` class
method.`),Ree.forEach(t),psr=i(cl),ey=n(cl,"P",{});var fOe=s(ey);_sr=r(fOe,"This class cannot be instantiated directly using "),Q2e=n(fOe,"CODE",{});var D6t=s(Q2e);usr=r(D6t,"__init__()"),D6t.forEach(t),bsr=r(fOe," (throws an error)."),fOe.forEach(t),vsr=i(cl),Mt=n(cl,"DIV",{class:!0});var x0=s(Mt);T(oy.$$.fragment,x0),Fsr=i(x0),H2e=n(x0,"P",{});var G6t=s(H2e);Tsr=r(G6t,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),G6t.forEach(t),Msr=i(x0),xd=n(x0,"P",{});var Pee=s(xd);Esr=r(Pee,`Note:
Loading a model from its configuration file does `),U2e=n(Pee,"STRONG",{});var O6t=s(U2e);Csr=r(O6t,"not"),O6t.forEach(t),wsr=r(Pee,` load the model weights. It only affects the
model\u2019s configuration. Use `),cW=n(Pee,"A",{href:!0});var V6t=s(cW);Asr=r(V6t,"from_pretrained()"),V6t.forEach(t),Lsr=r(Pee," to load the model weights."),Pee.forEach(t),ysr=i(x0),T(ST.$$.fragment,x0),x0.forEach(t),xsr=i(cl),po=n(cl,"DIV",{class:!0});var va=s(po);T(ry.$$.fragment,va),$sr=i(va),J2e=n(va,"P",{});var X6t=s(J2e);ksr=r(X6t,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),X6t.forEach(t),Ssr=i(va),Wa=n(va,"P",{});var $0=s(Wa);Rsr=r($0,"The model class to instantiate is selected based on the "),Y2e=n($0,"CODE",{});var z6t=s(Y2e);Psr=r(z6t,"model_type"),z6t.forEach(t),Bsr=r($0,` property of the config object (either
passed as an argument or loaded from `),K2e=n($0,"CODE",{});var W6t=s(K2e);Isr=r(W6t,"pretrained_model_name_or_path"),W6t.forEach(t),Nsr=r($0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z2e=n($0,"CODE",{});var Q6t=s(Z2e);qsr=r(Q6t,"pretrained_model_name_or_path"),Q6t.forEach(t),jsr=r($0,":"),$0.forEach(t),Dsr=i(va),$d=n(va,"UL",{});var Bee=s($d);RT=n(Bee,"LI",{});var aRe=s(RT);e1e=n(aRe,"STRONG",{});var H6t=s(e1e);Gsr=r(H6t,"deit"),H6t.forEach(t),Osr=r(aRe," \u2014 "),fW=n(aRe,"A",{href:!0});var U6t=s(fW);Vsr=r(U6t,"DeiTForMaskedImageModeling"),U6t.forEach(t),Xsr=r(aRe," (DeiT model)"),aRe.forEach(t),zsr=i(Bee),PT=n(Bee,"LI",{});var nRe=s(PT);o1e=n(nRe,"STRONG",{});var J6t=s(o1e);Wsr=r(J6t,"swin"),J6t.forEach(t),Qsr=r(nRe," \u2014 "),mW=n(nRe,"A",{href:!0});var Y6t=s(mW);Hsr=r(Y6t,"SwinForMaskedImageModeling"),Y6t.forEach(t),Usr=r(nRe," (Swin Transformer model)"),nRe.forEach(t),Jsr=i(Bee),BT=n(Bee,"LI",{});var sRe=s(BT);r1e=n(sRe,"STRONG",{});var K6t=s(r1e);Ysr=r(K6t,"vit"),K6t.forEach(t),Ksr=r(sRe," \u2014 "),gW=n(sRe,"A",{href:!0});var Z6t=s(gW);Zsr=r(Z6t,"ViTForMaskedImageModeling"),Z6t.forEach(t),elr=r(sRe," (ViT model)"),sRe.forEach(t),Bee.forEach(t),olr=i(va),IT=n(va,"P",{});var lRe=s(IT);rlr=r(lRe,"The model is set in evaluation mode by default using "),t1e=n(lRe,"CODE",{});var eTt=s(t1e);tlr=r(eTt,"model.eval()"),eTt.forEach(t),alr=r(lRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),a1e=n(lRe,"CODE",{});var oTt=s(a1e);nlr=r(oTt,"model.train()"),oTt.forEach(t),lRe.forEach(t),slr=i(va),T(NT.$$.fragment,va),va.forEach(t),cl.forEach(t),lDe=i(f),kd=n(f,"H2",{class:!0});var mOe=s(kd);qT=n(mOe,"A",{id:!0,class:!0,href:!0});var rTt=s(qT);n1e=n(rTt,"SPAN",{});var tTt=s(n1e);T(ty.$$.fragment,tTt),tTt.forEach(t),rTt.forEach(t),llr=i(mOe),s1e=n(mOe,"SPAN",{});var aTt=s(s1e);ilr=r(aTt,"AutoModelForObjectDetection"),aTt.forEach(t),mOe.forEach(t),iDe=i(f),Qo=n(f,"DIV",{class:!0});var fl=s(Qo);T(ay.$$.fragment,fl),dlr=i(fl),Sd=n(fl,"P",{});var Iee=s(Sd);clr=r(Iee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),hW=n(Iee,"A",{href:!0});var nTt=s(hW);flr=r(nTt,"from_pretrained()"),nTt.forEach(t),mlr=r(Iee," class method or the "),pW=n(Iee,"A",{href:!0});var sTt=s(pW);glr=r(sTt,"from_config()"),sTt.forEach(t),hlr=r(Iee,` class
method.`),Iee.forEach(t),plr=i(fl),ny=n(fl,"P",{});var gOe=s(ny);_lr=r(gOe,"This class cannot be instantiated directly using "),l1e=n(gOe,"CODE",{});var lTt=s(l1e);ulr=r(lTt,"__init__()"),lTt.forEach(t),blr=r(gOe," (throws an error)."),gOe.forEach(t),vlr=i(fl),Et=n(fl,"DIV",{class:!0});var k0=s(Et);T(sy.$$.fragment,k0),Flr=i(k0),i1e=n(k0,"P",{});var iTt=s(i1e);Tlr=r(iTt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),iTt.forEach(t),Mlr=i(k0),Rd=n(k0,"P",{});var Nee=s(Rd);Elr=r(Nee,`Note:
Loading a model from its configuration file does `),d1e=n(Nee,"STRONG",{});var dTt=s(d1e);Clr=r(dTt,"not"),dTt.forEach(t),wlr=r(Nee,` load the model weights. It only affects the
model\u2019s configuration. Use `),_W=n(Nee,"A",{href:!0});var cTt=s(_W);Alr=r(cTt,"from_pretrained()"),cTt.forEach(t),Llr=r(Nee," to load the model weights."),Nee.forEach(t),ylr=i(k0),T(jT.$$.fragment,k0),k0.forEach(t),xlr=i(fl),_o=n(fl,"DIV",{class:!0});var Fa=s(_o);T(ly.$$.fragment,Fa),$lr=i(Fa),c1e=n(Fa,"P",{});var fTt=s(c1e);klr=r(fTt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),fTt.forEach(t),Slr=i(Fa),Qa=n(Fa,"P",{});var S0=s(Qa);Rlr=r(S0,"The model class to instantiate is selected based on the "),f1e=n(S0,"CODE",{});var mTt=s(f1e);Plr=r(mTt,"model_type"),mTt.forEach(t),Blr=r(S0,` property of the config object (either
passed as an argument or loaded from `),m1e=n(S0,"CODE",{});var gTt=s(m1e);Ilr=r(gTt,"pretrained_model_name_or_path"),gTt.forEach(t),Nlr=r(S0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g1e=n(S0,"CODE",{});var hTt=s(g1e);qlr=r(hTt,"pretrained_model_name_or_path"),hTt.forEach(t),jlr=r(S0,":"),S0.forEach(t),Dlr=i(Fa),iy=n(Fa,"UL",{});var hOe=s(iy);DT=n(hOe,"LI",{});var iRe=s(DT);h1e=n(iRe,"STRONG",{});var pTt=s(h1e);Glr=r(pTt,"detr"),pTt.forEach(t),Olr=r(iRe," \u2014 "),uW=n(iRe,"A",{href:!0});var _Tt=s(uW);Vlr=r(_Tt,"DetrForObjectDetection"),_Tt.forEach(t),Xlr=r(iRe," (DETR model)"),iRe.forEach(t),zlr=i(hOe),GT=n(hOe,"LI",{});var dRe=s(GT);p1e=n(dRe,"STRONG",{});var uTt=s(p1e);Wlr=r(uTt,"yolos"),uTt.forEach(t),Qlr=r(dRe," \u2014 "),bW=n(dRe,"A",{href:!0});var bTt=s(bW);Hlr=r(bTt,"YolosForObjectDetection"),bTt.forEach(t),Ulr=r(dRe," (YOLOS model)"),dRe.forEach(t),hOe.forEach(t),Jlr=i(Fa),OT=n(Fa,"P",{});var cRe=s(OT);Ylr=r(cRe,"The model is set in evaluation mode by default using "),_1e=n(cRe,"CODE",{});var vTt=s(_1e);Klr=r(vTt,"model.eval()"),vTt.forEach(t),Zlr=r(cRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),u1e=n(cRe,"CODE",{});var FTt=s(u1e);eir=r(FTt,"model.train()"),FTt.forEach(t),cRe.forEach(t),oir=i(Fa),T(VT.$$.fragment,Fa),Fa.forEach(t),fl.forEach(t),dDe=i(f),Pd=n(f,"H2",{class:!0});var pOe=s(Pd);XT=n(pOe,"A",{id:!0,class:!0,href:!0});var TTt=s(XT);b1e=n(TTt,"SPAN",{});var MTt=s(b1e);T(dy.$$.fragment,MTt),MTt.forEach(t),TTt.forEach(t),rir=i(pOe),v1e=n(pOe,"SPAN",{});var ETt=s(v1e);tir=r(ETt,"AutoModelForImageSegmentation"),ETt.forEach(t),pOe.forEach(t),cDe=i(f),Ho=n(f,"DIV",{class:!0});var ml=s(Ho);T(cy.$$.fragment,ml),air=i(ml),Bd=n(ml,"P",{});var qee=s(Bd);nir=r(qee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),vW=n(qee,"A",{href:!0});var CTt=s(vW);sir=r(CTt,"from_pretrained()"),CTt.forEach(t),lir=r(qee," class method or the "),FW=n(qee,"A",{href:!0});var wTt=s(FW);iir=r(wTt,"from_config()"),wTt.forEach(t),dir=r(qee,` class
method.`),qee.forEach(t),cir=i(ml),fy=n(ml,"P",{});var _Oe=s(fy);fir=r(_Oe,"This class cannot be instantiated directly using "),F1e=n(_Oe,"CODE",{});var ATt=s(F1e);mir=r(ATt,"__init__()"),ATt.forEach(t),gir=r(_Oe," (throws an error)."),_Oe.forEach(t),hir=i(ml),Ct=n(ml,"DIV",{class:!0});var R0=s(Ct);T(my.$$.fragment,R0),pir=i(R0),T1e=n(R0,"P",{});var LTt=s(T1e);_ir=r(LTt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),LTt.forEach(t),uir=i(R0),Id=n(R0,"P",{});var jee=s(Id);bir=r(jee,`Note:
Loading a model from its configuration file does `),M1e=n(jee,"STRONG",{});var yTt=s(M1e);vir=r(yTt,"not"),yTt.forEach(t),Fir=r(jee,` load the model weights. It only affects the
model\u2019s configuration. Use `),TW=n(jee,"A",{href:!0});var xTt=s(TW);Tir=r(xTt,"from_pretrained()"),xTt.forEach(t),Mir=r(jee," to load the model weights."),jee.forEach(t),Eir=i(R0),T(zT.$$.fragment,R0),R0.forEach(t),Cir=i(ml),uo=n(ml,"DIV",{class:!0});var Ta=s(uo);T(gy.$$.fragment,Ta),wir=i(Ta),E1e=n(Ta,"P",{});var $Tt=s(E1e);Air=r($Tt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),$Tt.forEach(t),Lir=i(Ta),Ha=n(Ta,"P",{});var P0=s(Ha);yir=r(P0,"The model class to instantiate is selected based on the "),C1e=n(P0,"CODE",{});var kTt=s(C1e);xir=r(kTt,"model_type"),kTt.forEach(t),$ir=r(P0,` property of the config object (either
passed as an argument or loaded from `),w1e=n(P0,"CODE",{});var STt=s(w1e);kir=r(STt,"pretrained_model_name_or_path"),STt.forEach(t),Sir=r(P0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A1e=n(P0,"CODE",{});var RTt=s(A1e);Rir=r(RTt,"pretrained_model_name_or_path"),RTt.forEach(t),Pir=r(P0,":"),P0.forEach(t),Bir=i(Ta),L1e=n(Ta,"UL",{});var PTt=s(L1e);WT=n(PTt,"LI",{});var fRe=s(WT);y1e=n(fRe,"STRONG",{});var BTt=s(y1e);Iir=r(BTt,"detr"),BTt.forEach(t),Nir=r(fRe," \u2014 "),MW=n(fRe,"A",{href:!0});var ITt=s(MW);qir=r(ITt,"DetrForSegmentation"),ITt.forEach(t),jir=r(fRe," (DETR model)"),fRe.forEach(t),PTt.forEach(t),Dir=i(Ta),QT=n(Ta,"P",{});var mRe=s(QT);Gir=r(mRe,"The model is set in evaluation mode by default using "),x1e=n(mRe,"CODE",{});var NTt=s(x1e);Oir=r(NTt,"model.eval()"),NTt.forEach(t),Vir=r(mRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$1e=n(mRe,"CODE",{});var qTt=s($1e);Xir=r(qTt,"model.train()"),qTt.forEach(t),mRe.forEach(t),zir=i(Ta),T(HT.$$.fragment,Ta),Ta.forEach(t),ml.forEach(t),fDe=i(f),Nd=n(f,"H2",{class:!0});var uOe=s(Nd);UT=n(uOe,"A",{id:!0,class:!0,href:!0});var jTt=s(UT);k1e=n(jTt,"SPAN",{});var DTt=s(k1e);T(hy.$$.fragment,DTt),DTt.forEach(t),jTt.forEach(t),Wir=i(uOe),S1e=n(uOe,"SPAN",{});var GTt=s(S1e);Qir=r(GTt,"AutoModelForSemanticSegmentation"),GTt.forEach(t),uOe.forEach(t),mDe=i(f),Uo=n(f,"DIV",{class:!0});var gl=s(Uo);T(py.$$.fragment,gl),Hir=i(gl),qd=n(gl,"P",{});var Dee=s(qd);Uir=r(Dee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),EW=n(Dee,"A",{href:!0});var OTt=s(EW);Jir=r(OTt,"from_pretrained()"),OTt.forEach(t),Yir=r(Dee," class method or the "),CW=n(Dee,"A",{href:!0});var VTt=s(CW);Kir=r(VTt,"from_config()"),VTt.forEach(t),Zir=r(Dee,` class
method.`),Dee.forEach(t),edr=i(gl),_y=n(gl,"P",{});var bOe=s(_y);odr=r(bOe,"This class cannot be instantiated directly using "),R1e=n(bOe,"CODE",{});var XTt=s(R1e);rdr=r(XTt,"__init__()"),XTt.forEach(t),tdr=r(bOe," (throws an error)."),bOe.forEach(t),adr=i(gl),wt=n(gl,"DIV",{class:!0});var B0=s(wt);T(uy.$$.fragment,B0),ndr=i(B0),P1e=n(B0,"P",{});var zTt=s(P1e);sdr=r(zTt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),zTt.forEach(t),ldr=i(B0),jd=n(B0,"P",{});var Gee=s(jd);idr=r(Gee,`Note:
Loading a model from its configuration file does `),B1e=n(Gee,"STRONG",{});var WTt=s(B1e);ddr=r(WTt,"not"),WTt.forEach(t),cdr=r(Gee,` load the model weights. It only affects the
model\u2019s configuration. Use `),wW=n(Gee,"A",{href:!0});var QTt=s(wW);fdr=r(QTt,"from_pretrained()"),QTt.forEach(t),mdr=r(Gee," to load the model weights."),Gee.forEach(t),gdr=i(B0),T(JT.$$.fragment,B0),B0.forEach(t),hdr=i(gl),bo=n(gl,"DIV",{class:!0});var Ma=s(bo);T(by.$$.fragment,Ma),pdr=i(Ma),I1e=n(Ma,"P",{});var HTt=s(I1e);_dr=r(HTt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),HTt.forEach(t),udr=i(Ma),Ua=n(Ma,"P",{});var I0=s(Ua);bdr=r(I0,"The model class to instantiate is selected based on the "),N1e=n(I0,"CODE",{});var UTt=s(N1e);vdr=r(UTt,"model_type"),UTt.forEach(t),Fdr=r(I0,` property of the config object (either
passed as an argument or loaded from `),q1e=n(I0,"CODE",{});var JTt=s(q1e);Tdr=r(JTt,"pretrained_model_name_or_path"),JTt.forEach(t),Mdr=r(I0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j1e=n(I0,"CODE",{});var YTt=s(j1e);Edr=r(YTt,"pretrained_model_name_or_path"),YTt.forEach(t),Cdr=r(I0,":"),I0.forEach(t),wdr=i(Ma),Ja=n(Ma,"UL",{});var N0=s(Ja);YT=n(N0,"LI",{});var gRe=s(YT);D1e=n(gRe,"STRONG",{});var KTt=s(D1e);Adr=r(KTt,"beit"),KTt.forEach(t),Ldr=r(gRe," \u2014 "),AW=n(gRe,"A",{href:!0});var ZTt=s(AW);ydr=r(ZTt,"BeitForSemanticSegmentation"),ZTt.forEach(t),xdr=r(gRe," (BEiT model)"),gRe.forEach(t),$dr=i(N0),KT=n(N0,"LI",{});var hRe=s(KT);G1e=n(hRe,"STRONG",{});var e7t=s(G1e);kdr=r(e7t,"data2vec-vision"),e7t.forEach(t),Sdr=r(hRe," \u2014 "),LW=n(hRe,"A",{href:!0});var o7t=s(LW);Rdr=r(o7t,"Data2VecVisionForSemanticSegmentation"),o7t.forEach(t),Pdr=r(hRe," (Data2VecVision model)"),hRe.forEach(t),Bdr=i(N0),ZT=n(N0,"LI",{});var pRe=s(ZT);O1e=n(pRe,"STRONG",{});var r7t=s(O1e);Idr=r(r7t,"dpt"),r7t.forEach(t),Ndr=r(pRe," \u2014 "),yW=n(pRe,"A",{href:!0});var t7t=s(yW);qdr=r(t7t,"DPTForSemanticSegmentation"),t7t.forEach(t),jdr=r(pRe," (DPT model)"),pRe.forEach(t),Ddr=i(N0),e7=n(N0,"LI",{});var _Re=s(e7);V1e=n(_Re,"STRONG",{});var a7t=s(V1e);Gdr=r(a7t,"segformer"),a7t.forEach(t),Odr=r(_Re," \u2014 "),xW=n(_Re,"A",{href:!0});var n7t=s(xW);Vdr=r(n7t,"SegformerForSemanticSegmentation"),n7t.forEach(t),Xdr=r(_Re," (SegFormer model)"),_Re.forEach(t),N0.forEach(t),zdr=i(Ma),o7=n(Ma,"P",{});var uRe=s(o7);Wdr=r(uRe,"The model is set in evaluation mode by default using "),X1e=n(uRe,"CODE",{});var s7t=s(X1e);Qdr=r(s7t,"model.eval()"),s7t.forEach(t),Hdr=r(uRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),z1e=n(uRe,"CODE",{});var l7t=s(z1e);Udr=r(l7t,"model.train()"),l7t.forEach(t),uRe.forEach(t),Jdr=i(Ma),T(r7.$$.fragment,Ma),Ma.forEach(t),gl.forEach(t),gDe=i(f),Dd=n(f,"H2",{class:!0});var vOe=s(Dd);t7=n(vOe,"A",{id:!0,class:!0,href:!0});var i7t=s(t7);W1e=n(i7t,"SPAN",{});var d7t=s(W1e);T(vy.$$.fragment,d7t),d7t.forEach(t),i7t.forEach(t),Ydr=i(vOe),Q1e=n(vOe,"SPAN",{});var c7t=s(Q1e);Kdr=r(c7t,"AutoModelForInstanceSegmentation"),c7t.forEach(t),vOe.forEach(t),hDe=i(f),Jo=n(f,"DIV",{class:!0});var hl=s(Jo);T(Fy.$$.fragment,hl),Zdr=i(hl),Gd=n(hl,"P",{});var Oee=s(Gd);ecr=r(Oee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),$W=n(Oee,"A",{href:!0});var f7t=s($W);ocr=r(f7t,"from_pretrained()"),f7t.forEach(t),rcr=r(Oee," class method or the "),kW=n(Oee,"A",{href:!0});var m7t=s(kW);tcr=r(m7t,"from_config()"),m7t.forEach(t),acr=r(Oee,` class
method.`),Oee.forEach(t),ncr=i(hl),Ty=n(hl,"P",{});var FOe=s(Ty);scr=r(FOe,"This class cannot be instantiated directly using "),H1e=n(FOe,"CODE",{});var g7t=s(H1e);lcr=r(g7t,"__init__()"),g7t.forEach(t),icr=r(FOe," (throws an error)."),FOe.forEach(t),dcr=i(hl),At=n(hl,"DIV",{class:!0});var q0=s(At);T(My.$$.fragment,q0),ccr=i(q0),U1e=n(q0,"P",{});var h7t=s(U1e);fcr=r(h7t,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),h7t.forEach(t),mcr=i(q0),Od=n(q0,"P",{});var Vee=s(Od);gcr=r(Vee,`Note:
Loading a model from its configuration file does `),J1e=n(Vee,"STRONG",{});var p7t=s(J1e);hcr=r(p7t,"not"),p7t.forEach(t),pcr=r(Vee,` load the model weights. It only affects the
model\u2019s configuration. Use `),SW=n(Vee,"A",{href:!0});var _7t=s(SW);_cr=r(_7t,"from_pretrained()"),_7t.forEach(t),ucr=r(Vee," to load the model weights."),Vee.forEach(t),bcr=i(q0),T(a7.$$.fragment,q0),q0.forEach(t),vcr=i(hl),vo=n(hl,"DIV",{class:!0});var Ea=s(vo);T(Ey.$$.fragment,Ea),Fcr=i(Ea),Y1e=n(Ea,"P",{});var u7t=s(Y1e);Tcr=r(u7t,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),u7t.forEach(t),Mcr=i(Ea),Ya=n(Ea,"P",{});var j0=s(Ya);Ecr=r(j0,"The model class to instantiate is selected based on the "),K1e=n(j0,"CODE",{});var b7t=s(K1e);Ccr=r(b7t,"model_type"),b7t.forEach(t),wcr=r(j0,` property of the config object (either
passed as an argument or loaded from `),Z1e=n(j0,"CODE",{});var v7t=s(Z1e);Acr=r(v7t,"pretrained_model_name_or_path"),v7t.forEach(t),Lcr=r(j0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ebe=n(j0,"CODE",{});var F7t=s(ebe);ycr=r(F7t,"pretrained_model_name_or_path"),F7t.forEach(t),xcr=r(j0,":"),j0.forEach(t),$cr=i(Ea),obe=n(Ea,"UL",{});var T7t=s(obe);n7=n(T7t,"LI",{});var bRe=s(n7);rbe=n(bRe,"STRONG",{});var M7t=s(rbe);kcr=r(M7t,"maskformer"),M7t.forEach(t),Scr=r(bRe," \u2014 "),RW=n(bRe,"A",{href:!0});var E7t=s(RW);Rcr=r(E7t,"MaskFormerForInstanceSegmentation"),E7t.forEach(t),Pcr=r(bRe," (MaskFormer model)"),bRe.forEach(t),T7t.forEach(t),Bcr=i(Ea),s7=n(Ea,"P",{});var vRe=s(s7);Icr=r(vRe,"The model is set in evaluation mode by default using "),tbe=n(vRe,"CODE",{});var C7t=s(tbe);Ncr=r(C7t,"model.eval()"),C7t.forEach(t),qcr=r(vRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),abe=n(vRe,"CODE",{});var w7t=s(abe);jcr=r(w7t,"model.train()"),w7t.forEach(t),vRe.forEach(t),Dcr=i(Ea),T(l7.$$.fragment,Ea),Ea.forEach(t),hl.forEach(t),pDe=i(f),Vd=n(f,"H2",{class:!0});var TOe=s(Vd);i7=n(TOe,"A",{id:!0,class:!0,href:!0});var A7t=s(i7);nbe=n(A7t,"SPAN",{});var L7t=s(nbe);T(Cy.$$.fragment,L7t),L7t.forEach(t),A7t.forEach(t),Gcr=i(TOe),sbe=n(TOe,"SPAN",{});var y7t=s(sbe);Ocr=r(y7t,"TFAutoModel"),y7t.forEach(t),TOe.forEach(t),_De=i(f),Yo=n(f,"DIV",{class:!0});var pl=s(Yo);T(wy.$$.fragment,pl),Vcr=i(pl),Xd=n(pl,"P",{});var Xee=s(Xd);Xcr=r(Xee,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),PW=n(Xee,"A",{href:!0});var x7t=s(PW);zcr=r(x7t,"from_pretrained()"),x7t.forEach(t),Wcr=r(Xee," class method or the "),BW=n(Xee,"A",{href:!0});var $7t=s(BW);Qcr=r($7t,"from_config()"),$7t.forEach(t),Hcr=r(Xee,` class
method.`),Xee.forEach(t),Ucr=i(pl),Ay=n(pl,"P",{});var MOe=s(Ay);Jcr=r(MOe,"This class cannot be instantiated directly using "),lbe=n(MOe,"CODE",{});var k7t=s(lbe);Ycr=r(k7t,"__init__()"),k7t.forEach(t),Kcr=r(MOe," (throws an error)."),MOe.forEach(t),Zcr=i(pl),Lt=n(pl,"DIV",{class:!0});var D0=s(Lt);T(Ly.$$.fragment,D0),efr=i(D0),ibe=n(D0,"P",{});var S7t=s(ibe);ofr=r(S7t,"Instantiates one of the base model classes of the library from a configuration."),S7t.forEach(t),rfr=i(D0),zd=n(D0,"P",{});var zee=s(zd);tfr=r(zee,`Note:
Loading a model from its configuration file does `),dbe=n(zee,"STRONG",{});var R7t=s(dbe);afr=r(R7t,"not"),R7t.forEach(t),nfr=r(zee,` load the model weights. It only affects the
model\u2019s configuration. Use `),IW=n(zee,"A",{href:!0});var P7t=s(IW);sfr=r(P7t,"from_pretrained()"),P7t.forEach(t),lfr=r(zee," to load the model weights."),zee.forEach(t),ifr=i(D0),T(d7.$$.fragment,D0),D0.forEach(t),dfr=i(pl),wr=n(pl,"DIV",{class:!0});var _l=s(wr);T(yy.$$.fragment,_l),cfr=i(_l),cbe=n(_l,"P",{});var B7t=s(cbe);ffr=r(B7t,"Instantiate one of the base model classes of the library from a pretrained model."),B7t.forEach(t),mfr=i(_l),Ka=n(_l,"P",{});var G0=s(Ka);gfr=r(G0,"The model class to instantiate is selected based on the "),fbe=n(G0,"CODE",{});var I7t=s(fbe);hfr=r(I7t,"model_type"),I7t.forEach(t),pfr=r(G0,` property of the config object (either
passed as an argument or loaded from `),mbe=n(G0,"CODE",{});var N7t=s(mbe);_fr=r(N7t,"pretrained_model_name_or_path"),N7t.forEach(t),ufr=r(G0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gbe=n(G0,"CODE",{});var q7t=s(gbe);bfr=r(q7t,"pretrained_model_name_or_path"),q7t.forEach(t),vfr=r(G0,":"),G0.forEach(t),Ffr=i(_l),q=n(_l,"UL",{});var D=s(q);c7=n(D,"LI",{});var FRe=s(c7);hbe=n(FRe,"STRONG",{});var j7t=s(hbe);Tfr=r(j7t,"albert"),j7t.forEach(t),Mfr=r(FRe," \u2014 "),NW=n(FRe,"A",{href:!0});var D7t=s(NW);Efr=r(D7t,"TFAlbertModel"),D7t.forEach(t),Cfr=r(FRe," (ALBERT model)"),FRe.forEach(t),wfr=i(D),f7=n(D,"LI",{});var TRe=s(f7);pbe=n(TRe,"STRONG",{});var G7t=s(pbe);Afr=r(G7t,"bart"),G7t.forEach(t),Lfr=r(TRe," \u2014 "),qW=n(TRe,"A",{href:!0});var O7t=s(qW);yfr=r(O7t,"TFBartModel"),O7t.forEach(t),xfr=r(TRe," (BART model)"),TRe.forEach(t),$fr=i(D),m7=n(D,"LI",{});var MRe=s(m7);_be=n(MRe,"STRONG",{});var V7t=s(_be);kfr=r(V7t,"bert"),V7t.forEach(t),Sfr=r(MRe," \u2014 "),jW=n(MRe,"A",{href:!0});var X7t=s(jW);Rfr=r(X7t,"TFBertModel"),X7t.forEach(t),Pfr=r(MRe," (BERT model)"),MRe.forEach(t),Bfr=i(D),g7=n(D,"LI",{});var ERe=s(g7);ube=n(ERe,"STRONG",{});var z7t=s(ube);Ifr=r(z7t,"blenderbot"),z7t.forEach(t),Nfr=r(ERe," \u2014 "),DW=n(ERe,"A",{href:!0});var W7t=s(DW);qfr=r(W7t,"TFBlenderbotModel"),W7t.forEach(t),jfr=r(ERe," (Blenderbot model)"),ERe.forEach(t),Dfr=i(D),h7=n(D,"LI",{});var CRe=s(h7);bbe=n(CRe,"STRONG",{});var Q7t=s(bbe);Gfr=r(Q7t,"blenderbot-small"),Q7t.forEach(t),Ofr=r(CRe," \u2014 "),GW=n(CRe,"A",{href:!0});var H7t=s(GW);Vfr=r(H7t,"TFBlenderbotSmallModel"),H7t.forEach(t),Xfr=r(CRe," (BlenderbotSmall model)"),CRe.forEach(t),zfr=i(D),p7=n(D,"LI",{});var wRe=s(p7);vbe=n(wRe,"STRONG",{});var U7t=s(vbe);Wfr=r(U7t,"camembert"),U7t.forEach(t),Qfr=r(wRe," \u2014 "),OW=n(wRe,"A",{href:!0});var J7t=s(OW);Hfr=r(J7t,"TFCamembertModel"),J7t.forEach(t),Ufr=r(wRe," (CamemBERT model)"),wRe.forEach(t),Jfr=i(D),_7=n(D,"LI",{});var ARe=s(_7);Fbe=n(ARe,"STRONG",{});var Y7t=s(Fbe);Yfr=r(Y7t,"clip"),Y7t.forEach(t),Kfr=r(ARe," \u2014 "),VW=n(ARe,"A",{href:!0});var K7t=s(VW);Zfr=r(K7t,"TFCLIPModel"),K7t.forEach(t),emr=r(ARe," (CLIP model)"),ARe.forEach(t),omr=i(D),u7=n(D,"LI",{});var LRe=s(u7);Tbe=n(LRe,"STRONG",{});var Z7t=s(Tbe);rmr=r(Z7t,"convbert"),Z7t.forEach(t),tmr=r(LRe," \u2014 "),XW=n(LRe,"A",{href:!0});var e9t=s(XW);amr=r(e9t,"TFConvBertModel"),e9t.forEach(t),nmr=r(LRe," (ConvBERT model)"),LRe.forEach(t),smr=i(D),b7=n(D,"LI",{});var yRe=s(b7);Mbe=n(yRe,"STRONG",{});var o9t=s(Mbe);lmr=r(o9t,"convnext"),o9t.forEach(t),imr=r(yRe," \u2014 "),zW=n(yRe,"A",{href:!0});var r9t=s(zW);dmr=r(r9t,"TFConvNextModel"),r9t.forEach(t),cmr=r(yRe," (ConvNeXT model)"),yRe.forEach(t),fmr=i(D),v7=n(D,"LI",{});var xRe=s(v7);Ebe=n(xRe,"STRONG",{});var t9t=s(Ebe);mmr=r(t9t,"ctrl"),t9t.forEach(t),gmr=r(xRe," \u2014 "),WW=n(xRe,"A",{href:!0});var a9t=s(WW);hmr=r(a9t,"TFCTRLModel"),a9t.forEach(t),pmr=r(xRe," (CTRL model)"),xRe.forEach(t),_mr=i(D),F7=n(D,"LI",{});var $Re=s(F7);Cbe=n($Re,"STRONG",{});var n9t=s(Cbe);umr=r(n9t,"data2vec-vision"),n9t.forEach(t),bmr=r($Re," \u2014 "),QW=n($Re,"A",{href:!0});var s9t=s(QW);vmr=r(s9t,"TFData2VecVisionModel"),s9t.forEach(t),Fmr=r($Re," (Data2VecVision model)"),$Re.forEach(t),Tmr=i(D),T7=n(D,"LI",{});var kRe=s(T7);wbe=n(kRe,"STRONG",{});var l9t=s(wbe);Mmr=r(l9t,"deberta"),l9t.forEach(t),Emr=r(kRe," \u2014 "),HW=n(kRe,"A",{href:!0});var i9t=s(HW);Cmr=r(i9t,"TFDebertaModel"),i9t.forEach(t),wmr=r(kRe," (DeBERTa model)"),kRe.forEach(t),Amr=i(D),M7=n(D,"LI",{});var SRe=s(M7);Abe=n(SRe,"STRONG",{});var d9t=s(Abe);Lmr=r(d9t,"deberta-v2"),d9t.forEach(t),ymr=r(SRe," \u2014 "),UW=n(SRe,"A",{href:!0});var c9t=s(UW);xmr=r(c9t,"TFDebertaV2Model"),c9t.forEach(t),$mr=r(SRe," (DeBERTa-v2 model)"),SRe.forEach(t),kmr=i(D),E7=n(D,"LI",{});var RRe=s(E7);Lbe=n(RRe,"STRONG",{});var f9t=s(Lbe);Smr=r(f9t,"distilbert"),f9t.forEach(t),Rmr=r(RRe," \u2014 "),JW=n(RRe,"A",{href:!0});var m9t=s(JW);Pmr=r(m9t,"TFDistilBertModel"),m9t.forEach(t),Bmr=r(RRe," (DistilBERT model)"),RRe.forEach(t),Imr=i(D),C7=n(D,"LI",{});var PRe=s(C7);ybe=n(PRe,"STRONG",{});var g9t=s(ybe);Nmr=r(g9t,"dpr"),g9t.forEach(t),qmr=r(PRe," \u2014 "),YW=n(PRe,"A",{href:!0});var h9t=s(YW);jmr=r(h9t,"TFDPRQuestionEncoder"),h9t.forEach(t),Dmr=r(PRe," (DPR model)"),PRe.forEach(t),Gmr=i(D),w7=n(D,"LI",{});var BRe=s(w7);xbe=n(BRe,"STRONG",{});var p9t=s(xbe);Omr=r(p9t,"electra"),p9t.forEach(t),Vmr=r(BRe," \u2014 "),KW=n(BRe,"A",{href:!0});var _9t=s(KW);Xmr=r(_9t,"TFElectraModel"),_9t.forEach(t),zmr=r(BRe," (ELECTRA model)"),BRe.forEach(t),Wmr=i(D),A7=n(D,"LI",{});var IRe=s(A7);$be=n(IRe,"STRONG",{});var u9t=s($be);Qmr=r(u9t,"flaubert"),u9t.forEach(t),Hmr=r(IRe," \u2014 "),ZW=n(IRe,"A",{href:!0});var b9t=s(ZW);Umr=r(b9t,"TFFlaubertModel"),b9t.forEach(t),Jmr=r(IRe," (FlauBERT model)"),IRe.forEach(t),Ymr=i(D),qs=n(D,"LI",{});var ik=s(qs);kbe=n(ik,"STRONG",{});var v9t=s(kbe);Kmr=r(v9t,"funnel"),v9t.forEach(t),Zmr=r(ik," \u2014 "),eQ=n(ik,"A",{href:!0});var F9t=s(eQ);egr=r(F9t,"TFFunnelModel"),F9t.forEach(t),ogr=r(ik," or "),oQ=n(ik,"A",{href:!0});var T9t=s(oQ);rgr=r(T9t,"TFFunnelBaseModel"),T9t.forEach(t),tgr=r(ik," (Funnel Transformer model)"),ik.forEach(t),agr=i(D),L7=n(D,"LI",{});var NRe=s(L7);Sbe=n(NRe,"STRONG",{});var M9t=s(Sbe);ngr=r(M9t,"gpt2"),M9t.forEach(t),sgr=r(NRe," \u2014 "),rQ=n(NRe,"A",{href:!0});var E9t=s(rQ);lgr=r(E9t,"TFGPT2Model"),E9t.forEach(t),igr=r(NRe," (OpenAI GPT-2 model)"),NRe.forEach(t),dgr=i(D),y7=n(D,"LI",{});var qRe=s(y7);Rbe=n(qRe,"STRONG",{});var C9t=s(Rbe);cgr=r(C9t,"gptj"),C9t.forEach(t),fgr=r(qRe," \u2014 "),tQ=n(qRe,"A",{href:!0});var w9t=s(tQ);mgr=r(w9t,"TFGPTJModel"),w9t.forEach(t),ggr=r(qRe," (GPT-J model)"),qRe.forEach(t),hgr=i(D),x7=n(D,"LI",{});var jRe=s(x7);Pbe=n(jRe,"STRONG",{});var A9t=s(Pbe);pgr=r(A9t,"hubert"),A9t.forEach(t),_gr=r(jRe," \u2014 "),aQ=n(jRe,"A",{href:!0});var L9t=s(aQ);ugr=r(L9t,"TFHubertModel"),L9t.forEach(t),bgr=r(jRe," (Hubert model)"),jRe.forEach(t),vgr=i(D),$7=n(D,"LI",{});var DRe=s($7);Bbe=n(DRe,"STRONG",{});var y9t=s(Bbe);Fgr=r(y9t,"layoutlm"),y9t.forEach(t),Tgr=r(DRe," \u2014 "),nQ=n(DRe,"A",{href:!0});var x9t=s(nQ);Mgr=r(x9t,"TFLayoutLMModel"),x9t.forEach(t),Egr=r(DRe," (LayoutLM model)"),DRe.forEach(t),Cgr=i(D),k7=n(D,"LI",{});var GRe=s(k7);Ibe=n(GRe,"STRONG",{});var $9t=s(Ibe);wgr=r($9t,"led"),$9t.forEach(t),Agr=r(GRe," \u2014 "),sQ=n(GRe,"A",{href:!0});var k9t=s(sQ);Lgr=r(k9t,"TFLEDModel"),k9t.forEach(t),ygr=r(GRe," (LED model)"),GRe.forEach(t),xgr=i(D),S7=n(D,"LI",{});var ORe=s(S7);Nbe=n(ORe,"STRONG",{});var S9t=s(Nbe);$gr=r(S9t,"longformer"),S9t.forEach(t),kgr=r(ORe," \u2014 "),lQ=n(ORe,"A",{href:!0});var R9t=s(lQ);Sgr=r(R9t,"TFLongformerModel"),R9t.forEach(t),Rgr=r(ORe," (Longformer model)"),ORe.forEach(t),Pgr=i(D),R7=n(D,"LI",{});var VRe=s(R7);qbe=n(VRe,"STRONG",{});var P9t=s(qbe);Bgr=r(P9t,"lxmert"),P9t.forEach(t),Igr=r(VRe," \u2014 "),iQ=n(VRe,"A",{href:!0});var B9t=s(iQ);Ngr=r(B9t,"TFLxmertModel"),B9t.forEach(t),qgr=r(VRe," (LXMERT model)"),VRe.forEach(t),jgr=i(D),P7=n(D,"LI",{});var XRe=s(P7);jbe=n(XRe,"STRONG",{});var I9t=s(jbe);Dgr=r(I9t,"marian"),I9t.forEach(t),Ggr=r(XRe," \u2014 "),dQ=n(XRe,"A",{href:!0});var N9t=s(dQ);Ogr=r(N9t,"TFMarianModel"),N9t.forEach(t),Vgr=r(XRe," (Marian model)"),XRe.forEach(t),Xgr=i(D),B7=n(D,"LI",{});var zRe=s(B7);Dbe=n(zRe,"STRONG",{});var q9t=s(Dbe);zgr=r(q9t,"mbart"),q9t.forEach(t),Wgr=r(zRe," \u2014 "),cQ=n(zRe,"A",{href:!0});var j9t=s(cQ);Qgr=r(j9t,"TFMBartModel"),j9t.forEach(t),Hgr=r(zRe," (mBART model)"),zRe.forEach(t),Ugr=i(D),I7=n(D,"LI",{});var WRe=s(I7);Gbe=n(WRe,"STRONG",{});var D9t=s(Gbe);Jgr=r(D9t,"mobilebert"),D9t.forEach(t),Ygr=r(WRe," \u2014 "),fQ=n(WRe,"A",{href:!0});var G9t=s(fQ);Kgr=r(G9t,"TFMobileBertModel"),G9t.forEach(t),Zgr=r(WRe," (MobileBERT model)"),WRe.forEach(t),ehr=i(D),N7=n(D,"LI",{});var QRe=s(N7);Obe=n(QRe,"STRONG",{});var O9t=s(Obe);ohr=r(O9t,"mpnet"),O9t.forEach(t),rhr=r(QRe," \u2014 "),mQ=n(QRe,"A",{href:!0});var V9t=s(mQ);thr=r(V9t,"TFMPNetModel"),V9t.forEach(t),ahr=r(QRe," (MPNet model)"),QRe.forEach(t),nhr=i(D),q7=n(D,"LI",{});var HRe=s(q7);Vbe=n(HRe,"STRONG",{});var X9t=s(Vbe);shr=r(X9t,"mt5"),X9t.forEach(t),lhr=r(HRe," \u2014 "),gQ=n(HRe,"A",{href:!0});var z9t=s(gQ);ihr=r(z9t,"TFMT5Model"),z9t.forEach(t),dhr=r(HRe," (MT5 model)"),HRe.forEach(t),chr=i(D),j7=n(D,"LI",{});var URe=s(j7);Xbe=n(URe,"STRONG",{});var W9t=s(Xbe);fhr=r(W9t,"openai-gpt"),W9t.forEach(t),mhr=r(URe," \u2014 "),hQ=n(URe,"A",{href:!0});var Q9t=s(hQ);ghr=r(Q9t,"TFOpenAIGPTModel"),Q9t.forEach(t),hhr=r(URe," (OpenAI GPT model)"),URe.forEach(t),phr=i(D),D7=n(D,"LI",{});var JRe=s(D7);zbe=n(JRe,"STRONG",{});var H9t=s(zbe);_hr=r(H9t,"opt"),H9t.forEach(t),uhr=r(JRe," \u2014 "),pQ=n(JRe,"A",{href:!0});var U9t=s(pQ);bhr=r(U9t,"TFOPTModel"),U9t.forEach(t),vhr=r(JRe," (OPT model)"),JRe.forEach(t),Fhr=i(D),G7=n(D,"LI",{});var YRe=s(G7);Wbe=n(YRe,"STRONG",{});var J9t=s(Wbe);Thr=r(J9t,"pegasus"),J9t.forEach(t),Mhr=r(YRe," \u2014 "),_Q=n(YRe,"A",{href:!0});var Y9t=s(_Q);Ehr=r(Y9t,"TFPegasusModel"),Y9t.forEach(t),Chr=r(YRe," (Pegasus model)"),YRe.forEach(t),whr=i(D),O7=n(D,"LI",{});var KRe=s(O7);Qbe=n(KRe,"STRONG",{});var K9t=s(Qbe);Ahr=r(K9t,"rembert"),K9t.forEach(t),Lhr=r(KRe," \u2014 "),uQ=n(KRe,"A",{href:!0});var Z9t=s(uQ);yhr=r(Z9t,"TFRemBertModel"),Z9t.forEach(t),xhr=r(KRe," (RemBERT model)"),KRe.forEach(t),$hr=i(D),V7=n(D,"LI",{});var ZRe=s(V7);Hbe=n(ZRe,"STRONG",{});var eMt=s(Hbe);khr=r(eMt,"roberta"),eMt.forEach(t),Shr=r(ZRe," \u2014 "),bQ=n(ZRe,"A",{href:!0});var oMt=s(bQ);Rhr=r(oMt,"TFRobertaModel"),oMt.forEach(t),Phr=r(ZRe," (RoBERTa model)"),ZRe.forEach(t),Bhr=i(D),X7=n(D,"LI",{});var ePe=s(X7);Ube=n(ePe,"STRONG",{});var rMt=s(Ube);Ihr=r(rMt,"roformer"),rMt.forEach(t),Nhr=r(ePe," \u2014 "),vQ=n(ePe,"A",{href:!0});var tMt=s(vQ);qhr=r(tMt,"TFRoFormerModel"),tMt.forEach(t),jhr=r(ePe," (RoFormer model)"),ePe.forEach(t),Dhr=i(D),z7=n(D,"LI",{});var oPe=s(z7);Jbe=n(oPe,"STRONG",{});var aMt=s(Jbe);Ghr=r(aMt,"speech_to_text"),aMt.forEach(t),Ohr=r(oPe," \u2014 "),FQ=n(oPe,"A",{href:!0});var nMt=s(FQ);Vhr=r(nMt,"TFSpeech2TextModel"),nMt.forEach(t),Xhr=r(oPe," (Speech2Text model)"),oPe.forEach(t),zhr=i(D),W7=n(D,"LI",{});var rPe=s(W7);Ybe=n(rPe,"STRONG",{});var sMt=s(Ybe);Whr=r(sMt,"swin"),sMt.forEach(t),Qhr=r(rPe," \u2014 "),TQ=n(rPe,"A",{href:!0});var lMt=s(TQ);Hhr=r(lMt,"TFSwinModel"),lMt.forEach(t),Uhr=r(rPe," (Swin Transformer model)"),rPe.forEach(t),Jhr=i(D),Q7=n(D,"LI",{});var tPe=s(Q7);Kbe=n(tPe,"STRONG",{});var iMt=s(Kbe);Yhr=r(iMt,"t5"),iMt.forEach(t),Khr=r(tPe," \u2014 "),MQ=n(tPe,"A",{href:!0});var dMt=s(MQ);Zhr=r(dMt,"TFT5Model"),dMt.forEach(t),epr=r(tPe," (T5 model)"),tPe.forEach(t),opr=i(D),H7=n(D,"LI",{});var aPe=s(H7);Zbe=n(aPe,"STRONG",{});var cMt=s(Zbe);rpr=r(cMt,"tapas"),cMt.forEach(t),tpr=r(aPe," \u2014 "),EQ=n(aPe,"A",{href:!0});var fMt=s(EQ);apr=r(fMt,"TFTapasModel"),fMt.forEach(t),npr=r(aPe," (TAPAS model)"),aPe.forEach(t),spr=i(D),U7=n(D,"LI",{});var nPe=s(U7);eve=n(nPe,"STRONG",{});var mMt=s(eve);lpr=r(mMt,"transfo-xl"),mMt.forEach(t),ipr=r(nPe," \u2014 "),CQ=n(nPe,"A",{href:!0});var gMt=s(CQ);dpr=r(gMt,"TFTransfoXLModel"),gMt.forEach(t),cpr=r(nPe," (Transformer-XL model)"),nPe.forEach(t),fpr=i(D),J7=n(D,"LI",{});var sPe=s(J7);ove=n(sPe,"STRONG",{});var hMt=s(ove);mpr=r(hMt,"vit"),hMt.forEach(t),gpr=r(sPe," \u2014 "),wQ=n(sPe,"A",{href:!0});var pMt=s(wQ);hpr=r(pMt,"TFViTModel"),pMt.forEach(t),ppr=r(sPe," (ViT model)"),sPe.forEach(t),_pr=i(D),Y7=n(D,"LI",{});var lPe=s(Y7);rve=n(lPe,"STRONG",{});var _Mt=s(rve);upr=r(_Mt,"vit_mae"),_Mt.forEach(t),bpr=r(lPe," \u2014 "),AQ=n(lPe,"A",{href:!0});var uMt=s(AQ);vpr=r(uMt,"TFViTMAEModel"),uMt.forEach(t),Fpr=r(lPe," (ViTMAE model)"),lPe.forEach(t),Tpr=i(D),K7=n(D,"LI",{});var iPe=s(K7);tve=n(iPe,"STRONG",{});var bMt=s(tve);Mpr=r(bMt,"wav2vec2"),bMt.forEach(t),Epr=r(iPe," \u2014 "),LQ=n(iPe,"A",{href:!0});var vMt=s(LQ);Cpr=r(vMt,"TFWav2Vec2Model"),vMt.forEach(t),wpr=r(iPe," (Wav2Vec2 model)"),iPe.forEach(t),Apr=i(D),Z7=n(D,"LI",{});var dPe=s(Z7);ave=n(dPe,"STRONG",{});var FMt=s(ave);Lpr=r(FMt,"xlm"),FMt.forEach(t),ypr=r(dPe," \u2014 "),yQ=n(dPe,"A",{href:!0});var TMt=s(yQ);xpr=r(TMt,"TFXLMModel"),TMt.forEach(t),$pr=r(dPe," (XLM model)"),dPe.forEach(t),kpr=i(D),e9=n(D,"LI",{});var cPe=s(e9);nve=n(cPe,"STRONG",{});var MMt=s(nve);Spr=r(MMt,"xlm-roberta"),MMt.forEach(t),Rpr=r(cPe," \u2014 "),xQ=n(cPe,"A",{href:!0});var EMt=s(xQ);Ppr=r(EMt,"TFXLMRobertaModel"),EMt.forEach(t),Bpr=r(cPe," (XLM-RoBERTa model)"),cPe.forEach(t),Ipr=i(D),o9=n(D,"LI",{});var fPe=s(o9);sve=n(fPe,"STRONG",{});var CMt=s(sve);Npr=r(CMt,"xlnet"),CMt.forEach(t),qpr=r(fPe," \u2014 "),$Q=n(fPe,"A",{href:!0});var wMt=s($Q);jpr=r(wMt,"TFXLNetModel"),wMt.forEach(t),Dpr=r(fPe," (XLNet model)"),fPe.forEach(t),D.forEach(t),Gpr=i(_l),T(r9.$$.fragment,_l),_l.forEach(t),pl.forEach(t),uDe=i(f),Wd=n(f,"H2",{class:!0});var EOe=s(Wd);t9=n(EOe,"A",{id:!0,class:!0,href:!0});var AMt=s(t9);lve=n(AMt,"SPAN",{});var LMt=s(lve);T(xy.$$.fragment,LMt),LMt.forEach(t),AMt.forEach(t),Opr=i(EOe),ive=n(EOe,"SPAN",{});var yMt=s(ive);Vpr=r(yMt,"TFAutoModelForPreTraining"),yMt.forEach(t),EOe.forEach(t),bDe=i(f),Ko=n(f,"DIV",{class:!0});var ul=s(Ko);T($y.$$.fragment,ul),Xpr=i(ul),Qd=n(ul,"P",{});var Wee=s(Qd);zpr=r(Wee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),kQ=n(Wee,"A",{href:!0});var xMt=s(kQ);Wpr=r(xMt,"from_pretrained()"),xMt.forEach(t),Qpr=r(Wee," class method or the "),SQ=n(Wee,"A",{href:!0});var $Mt=s(SQ);Hpr=r($Mt,"from_config()"),$Mt.forEach(t),Upr=r(Wee,` class
method.`),Wee.forEach(t),Jpr=i(ul),ky=n(ul,"P",{});var COe=s(ky);Ypr=r(COe,"This class cannot be instantiated directly using "),dve=n(COe,"CODE",{});var kMt=s(dve);Kpr=r(kMt,"__init__()"),kMt.forEach(t),Zpr=r(COe," (throws an error)."),COe.forEach(t),e_r=i(ul),yt=n(ul,"DIV",{class:!0});var O0=s(yt);T(Sy.$$.fragment,O0),o_r=i(O0),cve=n(O0,"P",{});var SMt=s(cve);r_r=r(SMt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),SMt.forEach(t),t_r=i(O0),Hd=n(O0,"P",{});var Qee=s(Hd);a_r=r(Qee,`Note:
Loading a model from its configuration file does `),fve=n(Qee,"STRONG",{});var RMt=s(fve);n_r=r(RMt,"not"),RMt.forEach(t),s_r=r(Qee,` load the model weights. It only affects the
model\u2019s configuration. Use `),RQ=n(Qee,"A",{href:!0});var PMt=s(RQ);l_r=r(PMt,"from_pretrained()"),PMt.forEach(t),i_r=r(Qee," to load the model weights."),Qee.forEach(t),d_r=i(O0),T(a9.$$.fragment,O0),O0.forEach(t),c_r=i(ul),Ar=n(ul,"DIV",{class:!0});var bl=s(Ar);T(Ry.$$.fragment,bl),f_r=i(bl),mve=n(bl,"P",{});var BMt=s(mve);m_r=r(BMt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),BMt.forEach(t),g_r=i(bl),Za=n(bl,"P",{});var V0=s(Za);h_r=r(V0,"The model class to instantiate is selected based on the "),gve=n(V0,"CODE",{});var IMt=s(gve);p_r=r(IMt,"model_type"),IMt.forEach(t),__r=r(V0,` property of the config object (either
passed as an argument or loaded from `),hve=n(V0,"CODE",{});var NMt=s(hve);u_r=r(NMt,"pretrained_model_name_or_path"),NMt.forEach(t),b_r=r(V0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pve=n(V0,"CODE",{});var qMt=s(pve);v_r=r(qMt,"pretrained_model_name_or_path"),qMt.forEach(t),F_r=r(V0,":"),V0.forEach(t),T_r=i(bl),se=n(bl,"UL",{});var le=s(se);n9=n(le,"LI",{});var mPe=s(n9);_ve=n(mPe,"STRONG",{});var jMt=s(_ve);M_r=r(jMt,"albert"),jMt.forEach(t),E_r=r(mPe," \u2014 "),PQ=n(mPe,"A",{href:!0});var DMt=s(PQ);C_r=r(DMt,"TFAlbertForPreTraining"),DMt.forEach(t),w_r=r(mPe," (ALBERT model)"),mPe.forEach(t),A_r=i(le),s9=n(le,"LI",{});var gPe=s(s9);uve=n(gPe,"STRONG",{});var GMt=s(uve);L_r=r(GMt,"bart"),GMt.forEach(t),y_r=r(gPe," \u2014 "),BQ=n(gPe,"A",{href:!0});var OMt=s(BQ);x_r=r(OMt,"TFBartForConditionalGeneration"),OMt.forEach(t),$_r=r(gPe," (BART model)"),gPe.forEach(t),k_r=i(le),l9=n(le,"LI",{});var hPe=s(l9);bve=n(hPe,"STRONG",{});var VMt=s(bve);S_r=r(VMt,"bert"),VMt.forEach(t),R_r=r(hPe," \u2014 "),IQ=n(hPe,"A",{href:!0});var XMt=s(IQ);P_r=r(XMt,"TFBertForPreTraining"),XMt.forEach(t),B_r=r(hPe," (BERT model)"),hPe.forEach(t),I_r=i(le),i9=n(le,"LI",{});var pPe=s(i9);vve=n(pPe,"STRONG",{});var zMt=s(vve);N_r=r(zMt,"camembert"),zMt.forEach(t),q_r=r(pPe," \u2014 "),NQ=n(pPe,"A",{href:!0});var WMt=s(NQ);j_r=r(WMt,"TFCamembertForMaskedLM"),WMt.forEach(t),D_r=r(pPe," (CamemBERT model)"),pPe.forEach(t),G_r=i(le),d9=n(le,"LI",{});var _Pe=s(d9);Fve=n(_Pe,"STRONG",{});var QMt=s(Fve);O_r=r(QMt,"ctrl"),QMt.forEach(t),V_r=r(_Pe," \u2014 "),qQ=n(_Pe,"A",{href:!0});var HMt=s(qQ);X_r=r(HMt,"TFCTRLLMHeadModel"),HMt.forEach(t),z_r=r(_Pe," (CTRL model)"),_Pe.forEach(t),W_r=i(le),c9=n(le,"LI",{});var uPe=s(c9);Tve=n(uPe,"STRONG",{});var UMt=s(Tve);Q_r=r(UMt,"distilbert"),UMt.forEach(t),H_r=r(uPe," \u2014 "),jQ=n(uPe,"A",{href:!0});var JMt=s(jQ);U_r=r(JMt,"TFDistilBertForMaskedLM"),JMt.forEach(t),J_r=r(uPe," (DistilBERT model)"),uPe.forEach(t),Y_r=i(le),f9=n(le,"LI",{});var bPe=s(f9);Mve=n(bPe,"STRONG",{});var YMt=s(Mve);K_r=r(YMt,"electra"),YMt.forEach(t),Z_r=r(bPe," \u2014 "),DQ=n(bPe,"A",{href:!0});var KMt=s(DQ);eur=r(KMt,"TFElectraForPreTraining"),KMt.forEach(t),our=r(bPe," (ELECTRA model)"),bPe.forEach(t),rur=i(le),m9=n(le,"LI",{});var vPe=s(m9);Eve=n(vPe,"STRONG",{});var ZMt=s(Eve);tur=r(ZMt,"flaubert"),ZMt.forEach(t),aur=r(vPe," \u2014 "),GQ=n(vPe,"A",{href:!0});var e4t=s(GQ);nur=r(e4t,"TFFlaubertWithLMHeadModel"),e4t.forEach(t),sur=r(vPe," (FlauBERT model)"),vPe.forEach(t),lur=i(le),g9=n(le,"LI",{});var FPe=s(g9);Cve=n(FPe,"STRONG",{});var o4t=s(Cve);iur=r(o4t,"funnel"),o4t.forEach(t),dur=r(FPe," \u2014 "),OQ=n(FPe,"A",{href:!0});var r4t=s(OQ);cur=r(r4t,"TFFunnelForPreTraining"),r4t.forEach(t),fur=r(FPe," (Funnel Transformer model)"),FPe.forEach(t),mur=i(le),h9=n(le,"LI",{});var TPe=s(h9);wve=n(TPe,"STRONG",{});var t4t=s(wve);gur=r(t4t,"gpt2"),t4t.forEach(t),hur=r(TPe," \u2014 "),VQ=n(TPe,"A",{href:!0});var a4t=s(VQ);pur=r(a4t,"TFGPT2LMHeadModel"),a4t.forEach(t),_ur=r(TPe," (OpenAI GPT-2 model)"),TPe.forEach(t),uur=i(le),p9=n(le,"LI",{});var MPe=s(p9);Ave=n(MPe,"STRONG",{});var n4t=s(Ave);bur=r(n4t,"layoutlm"),n4t.forEach(t),vur=r(MPe," \u2014 "),XQ=n(MPe,"A",{href:!0});var s4t=s(XQ);Fur=r(s4t,"TFLayoutLMForMaskedLM"),s4t.forEach(t),Tur=r(MPe," (LayoutLM model)"),MPe.forEach(t),Mur=i(le),_9=n(le,"LI",{});var EPe=s(_9);Lve=n(EPe,"STRONG",{});var l4t=s(Lve);Eur=r(l4t,"lxmert"),l4t.forEach(t),Cur=r(EPe," \u2014 "),zQ=n(EPe,"A",{href:!0});var i4t=s(zQ);wur=r(i4t,"TFLxmertForPreTraining"),i4t.forEach(t),Aur=r(EPe," (LXMERT model)"),EPe.forEach(t),Lur=i(le),u9=n(le,"LI",{});var CPe=s(u9);yve=n(CPe,"STRONG",{});var d4t=s(yve);yur=r(d4t,"mobilebert"),d4t.forEach(t),xur=r(CPe," \u2014 "),WQ=n(CPe,"A",{href:!0});var c4t=s(WQ);$ur=r(c4t,"TFMobileBertForPreTraining"),c4t.forEach(t),kur=r(CPe," (MobileBERT model)"),CPe.forEach(t),Sur=i(le),b9=n(le,"LI",{});var wPe=s(b9);xve=n(wPe,"STRONG",{});var f4t=s(xve);Rur=r(f4t,"mpnet"),f4t.forEach(t),Pur=r(wPe," \u2014 "),QQ=n(wPe,"A",{href:!0});var m4t=s(QQ);Bur=r(m4t,"TFMPNetForMaskedLM"),m4t.forEach(t),Iur=r(wPe," (MPNet model)"),wPe.forEach(t),Nur=i(le),v9=n(le,"LI",{});var APe=s(v9);$ve=n(APe,"STRONG",{});var g4t=s($ve);qur=r(g4t,"openai-gpt"),g4t.forEach(t),jur=r(APe," \u2014 "),HQ=n(APe,"A",{href:!0});var h4t=s(HQ);Dur=r(h4t,"TFOpenAIGPTLMHeadModel"),h4t.forEach(t),Gur=r(APe," (OpenAI GPT model)"),APe.forEach(t),Our=i(le),F9=n(le,"LI",{});var LPe=s(F9);kve=n(LPe,"STRONG",{});var p4t=s(kve);Vur=r(p4t,"roberta"),p4t.forEach(t),Xur=r(LPe," \u2014 "),UQ=n(LPe,"A",{href:!0});var _4t=s(UQ);zur=r(_4t,"TFRobertaForMaskedLM"),_4t.forEach(t),Wur=r(LPe," (RoBERTa model)"),LPe.forEach(t),Qur=i(le),T9=n(le,"LI",{});var yPe=s(T9);Sve=n(yPe,"STRONG",{});var u4t=s(Sve);Hur=r(u4t,"t5"),u4t.forEach(t),Uur=r(yPe," \u2014 "),JQ=n(yPe,"A",{href:!0});var b4t=s(JQ);Jur=r(b4t,"TFT5ForConditionalGeneration"),b4t.forEach(t),Yur=r(yPe," (T5 model)"),yPe.forEach(t),Kur=i(le),M9=n(le,"LI",{});var xPe=s(M9);Rve=n(xPe,"STRONG",{});var v4t=s(Rve);Zur=r(v4t,"tapas"),v4t.forEach(t),e2r=r(xPe," \u2014 "),YQ=n(xPe,"A",{href:!0});var F4t=s(YQ);o2r=r(F4t,"TFTapasForMaskedLM"),F4t.forEach(t),r2r=r(xPe," (TAPAS model)"),xPe.forEach(t),t2r=i(le),E9=n(le,"LI",{});var $Pe=s(E9);Pve=n($Pe,"STRONG",{});var T4t=s(Pve);a2r=r(T4t,"transfo-xl"),T4t.forEach(t),n2r=r($Pe," \u2014 "),KQ=n($Pe,"A",{href:!0});var M4t=s(KQ);s2r=r(M4t,"TFTransfoXLLMHeadModel"),M4t.forEach(t),l2r=r($Pe," (Transformer-XL model)"),$Pe.forEach(t),i2r=i(le),C9=n(le,"LI",{});var kPe=s(C9);Bve=n(kPe,"STRONG",{});var E4t=s(Bve);d2r=r(E4t,"vit_mae"),E4t.forEach(t),c2r=r(kPe," \u2014 "),ZQ=n(kPe,"A",{href:!0});var C4t=s(ZQ);f2r=r(C4t,"TFViTMAEForPreTraining"),C4t.forEach(t),m2r=r(kPe," (ViTMAE model)"),kPe.forEach(t),g2r=i(le),w9=n(le,"LI",{});var SPe=s(w9);Ive=n(SPe,"STRONG",{});var w4t=s(Ive);h2r=r(w4t,"xlm"),w4t.forEach(t),p2r=r(SPe," \u2014 "),eH=n(SPe,"A",{href:!0});var A4t=s(eH);_2r=r(A4t,"TFXLMWithLMHeadModel"),A4t.forEach(t),u2r=r(SPe," (XLM model)"),SPe.forEach(t),b2r=i(le),A9=n(le,"LI",{});var RPe=s(A9);Nve=n(RPe,"STRONG",{});var L4t=s(Nve);v2r=r(L4t,"xlm-roberta"),L4t.forEach(t),F2r=r(RPe," \u2014 "),oH=n(RPe,"A",{href:!0});var y4t=s(oH);T2r=r(y4t,"TFXLMRobertaForMaskedLM"),y4t.forEach(t),M2r=r(RPe," (XLM-RoBERTa model)"),RPe.forEach(t),E2r=i(le),L9=n(le,"LI",{});var PPe=s(L9);qve=n(PPe,"STRONG",{});var x4t=s(qve);C2r=r(x4t,"xlnet"),x4t.forEach(t),w2r=r(PPe," \u2014 "),rH=n(PPe,"A",{href:!0});var $4t=s(rH);A2r=r($4t,"TFXLNetLMHeadModel"),$4t.forEach(t),L2r=r(PPe," (XLNet model)"),PPe.forEach(t),le.forEach(t),y2r=i(bl),T(y9.$$.fragment,bl),bl.forEach(t),ul.forEach(t),vDe=i(f),Ud=n(f,"H2",{class:!0});var wOe=s(Ud);x9=n(wOe,"A",{id:!0,class:!0,href:!0});var k4t=s(x9);jve=n(k4t,"SPAN",{});var S4t=s(jve);T(Py.$$.fragment,S4t),S4t.forEach(t),k4t.forEach(t),x2r=i(wOe),Dve=n(wOe,"SPAN",{});var R4t=s(Dve);$2r=r(R4t,"TFAutoModelForCausalLM"),R4t.forEach(t),wOe.forEach(t),FDe=i(f),Zo=n(f,"DIV",{class:!0});var vl=s(Zo);T(By.$$.fragment,vl),k2r=i(vl),Jd=n(vl,"P",{});var Hee=s(Jd);S2r=r(Hee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),tH=n(Hee,"A",{href:!0});var P4t=s(tH);R2r=r(P4t,"from_pretrained()"),P4t.forEach(t),P2r=r(Hee," class method or the "),aH=n(Hee,"A",{href:!0});var B4t=s(aH);B2r=r(B4t,"from_config()"),B4t.forEach(t),I2r=r(Hee,` class
method.`),Hee.forEach(t),N2r=i(vl),Iy=n(vl,"P",{});var AOe=s(Iy);q2r=r(AOe,"This class cannot be instantiated directly using "),Gve=n(AOe,"CODE",{});var I4t=s(Gve);j2r=r(I4t,"__init__()"),I4t.forEach(t),D2r=r(AOe," (throws an error)."),AOe.forEach(t),G2r=i(vl),xt=n(vl,"DIV",{class:!0});var X0=s(xt);T(Ny.$$.fragment,X0),O2r=i(X0),Ove=n(X0,"P",{});var N4t=s(Ove);V2r=r(N4t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),N4t.forEach(t),X2r=i(X0),Yd=n(X0,"P",{});var Uee=s(Yd);z2r=r(Uee,`Note:
Loading a model from its configuration file does `),Vve=n(Uee,"STRONG",{});var q4t=s(Vve);W2r=r(q4t,"not"),q4t.forEach(t),Q2r=r(Uee,` load the model weights. It only affects the
model\u2019s configuration. Use `),nH=n(Uee,"A",{href:!0});var j4t=s(nH);H2r=r(j4t,"from_pretrained()"),j4t.forEach(t),U2r=r(Uee," to load the model weights."),Uee.forEach(t),J2r=i(X0),T($9.$$.fragment,X0),X0.forEach(t),Y2r=i(vl),Lr=n(vl,"DIV",{class:!0});var Fl=s(Lr);T(qy.$$.fragment,Fl),K2r=i(Fl),Xve=n(Fl,"P",{});var D4t=s(Xve);Z2r=r(D4t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),D4t.forEach(t),e1r=i(Fl),en=n(Fl,"P",{});var z0=s(en);o1r=r(z0,"The model class to instantiate is selected based on the "),zve=n(z0,"CODE",{});var G4t=s(zve);r1r=r(G4t,"model_type"),G4t.forEach(t),t1r=r(z0,` property of the config object (either
passed as an argument or loaded from `),Wve=n(z0,"CODE",{});var O4t=s(Wve);a1r=r(O4t,"pretrained_model_name_or_path"),O4t.forEach(t),n1r=r(z0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qve=n(z0,"CODE",{});var V4t=s(Qve);s1r=r(V4t,"pretrained_model_name_or_path"),V4t.forEach(t),l1r=r(z0,":"),z0.forEach(t),i1r=i(Fl),Me=n(Fl,"UL",{});var Ce=s(Me);k9=n(Ce,"LI",{});var BPe=s(k9);Hve=n(BPe,"STRONG",{});var X4t=s(Hve);d1r=r(X4t,"bert"),X4t.forEach(t),c1r=r(BPe," \u2014 "),sH=n(BPe,"A",{href:!0});var z4t=s(sH);f1r=r(z4t,"TFBertLMHeadModel"),z4t.forEach(t),m1r=r(BPe," (BERT model)"),BPe.forEach(t),g1r=i(Ce),S9=n(Ce,"LI",{});var IPe=s(S9);Uve=n(IPe,"STRONG",{});var W4t=s(Uve);h1r=r(W4t,"camembert"),W4t.forEach(t),p1r=r(IPe," \u2014 "),lH=n(IPe,"A",{href:!0});var Q4t=s(lH);_1r=r(Q4t,"TFCamembertForCausalLM"),Q4t.forEach(t),u1r=r(IPe," (CamemBERT model)"),IPe.forEach(t),b1r=i(Ce),R9=n(Ce,"LI",{});var NPe=s(R9);Jve=n(NPe,"STRONG",{});var H4t=s(Jve);v1r=r(H4t,"ctrl"),H4t.forEach(t),F1r=r(NPe," \u2014 "),iH=n(NPe,"A",{href:!0});var U4t=s(iH);T1r=r(U4t,"TFCTRLLMHeadModel"),U4t.forEach(t),M1r=r(NPe," (CTRL model)"),NPe.forEach(t),E1r=i(Ce),P9=n(Ce,"LI",{});var qPe=s(P9);Yve=n(qPe,"STRONG",{});var J4t=s(Yve);C1r=r(J4t,"gpt2"),J4t.forEach(t),w1r=r(qPe," \u2014 "),dH=n(qPe,"A",{href:!0});var Y4t=s(dH);A1r=r(Y4t,"TFGPT2LMHeadModel"),Y4t.forEach(t),L1r=r(qPe," (OpenAI GPT-2 model)"),qPe.forEach(t),y1r=i(Ce),B9=n(Ce,"LI",{});var jPe=s(B9);Kve=n(jPe,"STRONG",{});var K4t=s(Kve);x1r=r(K4t,"gptj"),K4t.forEach(t),$1r=r(jPe," \u2014 "),cH=n(jPe,"A",{href:!0});var Z4t=s(cH);k1r=r(Z4t,"TFGPTJForCausalLM"),Z4t.forEach(t),S1r=r(jPe," (GPT-J model)"),jPe.forEach(t),R1r=i(Ce),I9=n(Ce,"LI",{});var DPe=s(I9);Zve=n(DPe,"STRONG",{});var eEt=s(Zve);P1r=r(eEt,"openai-gpt"),eEt.forEach(t),B1r=r(DPe," \u2014 "),fH=n(DPe,"A",{href:!0});var oEt=s(fH);I1r=r(oEt,"TFOpenAIGPTLMHeadModel"),oEt.forEach(t),N1r=r(DPe," (OpenAI GPT model)"),DPe.forEach(t),q1r=i(Ce),N9=n(Ce,"LI",{});var GPe=s(N9);eFe=n(GPe,"STRONG",{});var rEt=s(eFe);j1r=r(rEt,"opt"),rEt.forEach(t),D1r=r(GPe," \u2014 "),mH=n(GPe,"A",{href:!0});var tEt=s(mH);G1r=r(tEt,"TFOPTForCausalLM"),tEt.forEach(t),O1r=r(GPe," (OPT model)"),GPe.forEach(t),V1r=i(Ce),q9=n(Ce,"LI",{});var OPe=s(q9);oFe=n(OPe,"STRONG",{});var aEt=s(oFe);X1r=r(aEt,"rembert"),aEt.forEach(t),z1r=r(OPe," \u2014 "),gH=n(OPe,"A",{href:!0});var nEt=s(gH);W1r=r(nEt,"TFRemBertForCausalLM"),nEt.forEach(t),Q1r=r(OPe," (RemBERT model)"),OPe.forEach(t),H1r=i(Ce),j9=n(Ce,"LI",{});var VPe=s(j9);rFe=n(VPe,"STRONG",{});var sEt=s(rFe);U1r=r(sEt,"roberta"),sEt.forEach(t),J1r=r(VPe," \u2014 "),hH=n(VPe,"A",{href:!0});var lEt=s(hH);Y1r=r(lEt,"TFRobertaForCausalLM"),lEt.forEach(t),K1r=r(VPe," (RoBERTa model)"),VPe.forEach(t),Z1r=i(Ce),D9=n(Ce,"LI",{});var XPe=s(D9);tFe=n(XPe,"STRONG",{});var iEt=s(tFe);ebr=r(iEt,"roformer"),iEt.forEach(t),obr=r(XPe," \u2014 "),pH=n(XPe,"A",{href:!0});var dEt=s(pH);rbr=r(dEt,"TFRoFormerForCausalLM"),dEt.forEach(t),tbr=r(XPe," (RoFormer model)"),XPe.forEach(t),abr=i(Ce),G9=n(Ce,"LI",{});var zPe=s(G9);aFe=n(zPe,"STRONG",{});var cEt=s(aFe);nbr=r(cEt,"transfo-xl"),cEt.forEach(t),sbr=r(zPe," \u2014 "),_H=n(zPe,"A",{href:!0});var fEt=s(_H);lbr=r(fEt,"TFTransfoXLLMHeadModel"),fEt.forEach(t),ibr=r(zPe," (Transformer-XL model)"),zPe.forEach(t),dbr=i(Ce),O9=n(Ce,"LI",{});var WPe=s(O9);nFe=n(WPe,"STRONG",{});var mEt=s(nFe);cbr=r(mEt,"xlm"),mEt.forEach(t),fbr=r(WPe," \u2014 "),uH=n(WPe,"A",{href:!0});var gEt=s(uH);mbr=r(gEt,"TFXLMWithLMHeadModel"),gEt.forEach(t),gbr=r(WPe," (XLM model)"),WPe.forEach(t),hbr=i(Ce),V9=n(Ce,"LI",{});var QPe=s(V9);sFe=n(QPe,"STRONG",{});var hEt=s(sFe);pbr=r(hEt,"xlnet"),hEt.forEach(t),_br=r(QPe," \u2014 "),bH=n(QPe,"A",{href:!0});var pEt=s(bH);ubr=r(pEt,"TFXLNetLMHeadModel"),pEt.forEach(t),bbr=r(QPe," (XLNet model)"),QPe.forEach(t),Ce.forEach(t),vbr=i(Fl),T(X9.$$.fragment,Fl),Fl.forEach(t),vl.forEach(t),TDe=i(f),Kd=n(f,"H2",{class:!0});var LOe=s(Kd);z9=n(LOe,"A",{id:!0,class:!0,href:!0});var _Et=s(z9);lFe=n(_Et,"SPAN",{});var uEt=s(lFe);T(jy.$$.fragment,uEt),uEt.forEach(t),_Et.forEach(t),Fbr=i(LOe),iFe=n(LOe,"SPAN",{});var bEt=s(iFe);Tbr=r(bEt,"TFAutoModelForImageClassification"),bEt.forEach(t),LOe.forEach(t),MDe=i(f),er=n(f,"DIV",{class:!0});var Tl=s(er);T(Dy.$$.fragment,Tl),Mbr=i(Tl),Zd=n(Tl,"P",{});var Jee=s(Zd);Ebr=r(Jee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),vH=n(Jee,"A",{href:!0});var vEt=s(vH);Cbr=r(vEt,"from_pretrained()"),vEt.forEach(t),wbr=r(Jee," class method or the "),FH=n(Jee,"A",{href:!0});var FEt=s(FH);Abr=r(FEt,"from_config()"),FEt.forEach(t),Lbr=r(Jee,` class
method.`),Jee.forEach(t),ybr=i(Tl),Gy=n(Tl,"P",{});var yOe=s(Gy);xbr=r(yOe,"This class cannot be instantiated directly using "),dFe=n(yOe,"CODE",{});var TEt=s(dFe);$br=r(TEt,"__init__()"),TEt.forEach(t),kbr=r(yOe," (throws an error)."),yOe.forEach(t),Sbr=i(Tl),$t=n(Tl,"DIV",{class:!0});var W0=s($t);T(Oy.$$.fragment,W0),Rbr=i(W0),cFe=n(W0,"P",{});var MEt=s(cFe);Pbr=r(MEt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),MEt.forEach(t),Bbr=i(W0),ec=n(W0,"P",{});var Yee=s(ec);Ibr=r(Yee,`Note:
Loading a model from its configuration file does `),fFe=n(Yee,"STRONG",{});var EEt=s(fFe);Nbr=r(EEt,"not"),EEt.forEach(t),qbr=r(Yee,` load the model weights. It only affects the
model\u2019s configuration. Use `),TH=n(Yee,"A",{href:!0});var CEt=s(TH);jbr=r(CEt,"from_pretrained()"),CEt.forEach(t),Dbr=r(Yee," to load the model weights."),Yee.forEach(t),Gbr=i(W0),T(W9.$$.fragment,W0),W0.forEach(t),Obr=i(Tl),yr=n(Tl,"DIV",{class:!0});var Ml=s(yr);T(Vy.$$.fragment,Ml),Vbr=i(Ml),mFe=n(Ml,"P",{});var wEt=s(mFe);Xbr=r(wEt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),wEt.forEach(t),zbr=i(Ml),on=n(Ml,"P",{});var Q0=s(on);Wbr=r(Q0,"The model class to instantiate is selected based on the "),gFe=n(Q0,"CODE",{});var AEt=s(gFe);Qbr=r(AEt,"model_type"),AEt.forEach(t),Hbr=r(Q0,` property of the config object (either
passed as an argument or loaded from `),hFe=n(Q0,"CODE",{});var LEt=s(hFe);Ubr=r(LEt,"pretrained_model_name_or_path"),LEt.forEach(t),Jbr=r(Q0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pFe=n(Q0,"CODE",{});var yEt=s(pFe);Ybr=r(yEt,"pretrained_model_name_or_path"),yEt.forEach(t),Kbr=r(Q0,":"),Q0.forEach(t),Zbr=i(Ml),rn=n(Ml,"UL",{});var H0=s(rn);Q9=n(H0,"LI",{});var HPe=s(Q9);_Fe=n(HPe,"STRONG",{});var xEt=s(_Fe);evr=r(xEt,"convnext"),xEt.forEach(t),ovr=r(HPe," \u2014 "),MH=n(HPe,"A",{href:!0});var $Et=s(MH);rvr=r($Et,"TFConvNextForImageClassification"),$Et.forEach(t),tvr=r(HPe," (ConvNeXT model)"),HPe.forEach(t),avr=i(H0),H9=n(H0,"LI",{});var UPe=s(H9);uFe=n(UPe,"STRONG",{});var kEt=s(uFe);nvr=r(kEt,"data2vec-vision"),kEt.forEach(t),svr=r(UPe," \u2014 "),EH=n(UPe,"A",{href:!0});var SEt=s(EH);lvr=r(SEt,"TFData2VecVisionForImageClassification"),SEt.forEach(t),ivr=r(UPe," (Data2VecVision model)"),UPe.forEach(t),dvr=i(H0),U9=n(H0,"LI",{});var JPe=s(U9);bFe=n(JPe,"STRONG",{});var REt=s(bFe);cvr=r(REt,"swin"),REt.forEach(t),fvr=r(JPe," \u2014 "),CH=n(JPe,"A",{href:!0});var PEt=s(CH);mvr=r(PEt,"TFSwinForImageClassification"),PEt.forEach(t),gvr=r(JPe," (Swin Transformer model)"),JPe.forEach(t),hvr=i(H0),J9=n(H0,"LI",{});var YPe=s(J9);vFe=n(YPe,"STRONG",{});var BEt=s(vFe);pvr=r(BEt,"vit"),BEt.forEach(t),_vr=r(YPe," \u2014 "),wH=n(YPe,"A",{href:!0});var IEt=s(wH);uvr=r(IEt,"TFViTForImageClassification"),IEt.forEach(t),bvr=r(YPe," (ViT model)"),YPe.forEach(t),H0.forEach(t),vvr=i(Ml),T(Y9.$$.fragment,Ml),Ml.forEach(t),Tl.forEach(t),EDe=i(f),oc=n(f,"H2",{class:!0});var xOe=s(oc);K9=n(xOe,"A",{id:!0,class:!0,href:!0});var NEt=s(K9);FFe=n(NEt,"SPAN",{});var qEt=s(FFe);T(Xy.$$.fragment,qEt),qEt.forEach(t),NEt.forEach(t),Fvr=i(xOe),TFe=n(xOe,"SPAN",{});var jEt=s(TFe);Tvr=r(jEt,"TFAutoModelForMaskedLM"),jEt.forEach(t),xOe.forEach(t),CDe=i(f),or=n(f,"DIV",{class:!0});var El=s(or);T(zy.$$.fragment,El),Mvr=i(El),rc=n(El,"P",{});var Kee=s(rc);Evr=r(Kee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),AH=n(Kee,"A",{href:!0});var DEt=s(AH);Cvr=r(DEt,"from_pretrained()"),DEt.forEach(t),wvr=r(Kee," class method or the "),LH=n(Kee,"A",{href:!0});var GEt=s(LH);Avr=r(GEt,"from_config()"),GEt.forEach(t),Lvr=r(Kee,` class
method.`),Kee.forEach(t),yvr=i(El),Wy=n(El,"P",{});var $Oe=s(Wy);xvr=r($Oe,"This class cannot be instantiated directly using "),MFe=n($Oe,"CODE",{});var OEt=s(MFe);$vr=r(OEt,"__init__()"),OEt.forEach(t),kvr=r($Oe," (throws an error)."),$Oe.forEach(t),Svr=i(El),kt=n(El,"DIV",{class:!0});var U0=s(kt);T(Qy.$$.fragment,U0),Rvr=i(U0),EFe=n(U0,"P",{});var VEt=s(EFe);Pvr=r(VEt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),VEt.forEach(t),Bvr=i(U0),tc=n(U0,"P",{});var Zee=s(tc);Ivr=r(Zee,`Note:
Loading a model from its configuration file does `),CFe=n(Zee,"STRONG",{});var XEt=s(CFe);Nvr=r(XEt,"not"),XEt.forEach(t),qvr=r(Zee,` load the model weights. It only affects the
model\u2019s configuration. Use `),yH=n(Zee,"A",{href:!0});var zEt=s(yH);jvr=r(zEt,"from_pretrained()"),zEt.forEach(t),Dvr=r(Zee," to load the model weights."),Zee.forEach(t),Gvr=i(U0),T(Z9.$$.fragment,U0),U0.forEach(t),Ovr=i(El),xr=n(El,"DIV",{class:!0});var Cl=s(xr);T(Hy.$$.fragment,Cl),Vvr=i(Cl),wFe=n(Cl,"P",{});var WEt=s(wFe);Xvr=r(WEt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),WEt.forEach(t),zvr=i(Cl),tn=n(Cl,"P",{});var J0=s(tn);Wvr=r(J0,"The model class to instantiate is selected based on the "),AFe=n(J0,"CODE",{});var QEt=s(AFe);Qvr=r(QEt,"model_type"),QEt.forEach(t),Hvr=r(J0,` property of the config object (either
passed as an argument or loaded from `),LFe=n(J0,"CODE",{});var HEt=s(LFe);Uvr=r(HEt,"pretrained_model_name_or_path"),HEt.forEach(t),Jvr=r(J0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yFe=n(J0,"CODE",{});var UEt=s(yFe);Yvr=r(UEt,"pretrained_model_name_or_path"),UEt.forEach(t),Kvr=r(J0,":"),J0.forEach(t),Zvr=i(Cl),ie=n(Cl,"UL",{});var fe=s(ie);eM=n(fe,"LI",{});var KPe=s(eM);xFe=n(KPe,"STRONG",{});var JEt=s(xFe);eFr=r(JEt,"albert"),JEt.forEach(t),oFr=r(KPe," \u2014 "),xH=n(KPe,"A",{href:!0});var YEt=s(xH);rFr=r(YEt,"TFAlbertForMaskedLM"),YEt.forEach(t),tFr=r(KPe," (ALBERT model)"),KPe.forEach(t),aFr=i(fe),oM=n(fe,"LI",{});var ZPe=s(oM);$Fe=n(ZPe,"STRONG",{});var KEt=s($Fe);nFr=r(KEt,"bert"),KEt.forEach(t),sFr=r(ZPe," \u2014 "),$H=n(ZPe,"A",{href:!0});var ZEt=s($H);lFr=r(ZEt,"TFBertForMaskedLM"),ZEt.forEach(t),iFr=r(ZPe," (BERT model)"),ZPe.forEach(t),dFr=i(fe),rM=n(fe,"LI",{});var eBe=s(rM);kFe=n(eBe,"STRONG",{});var eCt=s(kFe);cFr=r(eCt,"camembert"),eCt.forEach(t),fFr=r(eBe," \u2014 "),kH=n(eBe,"A",{href:!0});var oCt=s(kH);mFr=r(oCt,"TFCamembertForMaskedLM"),oCt.forEach(t),gFr=r(eBe," (CamemBERT model)"),eBe.forEach(t),hFr=i(fe),tM=n(fe,"LI",{});var oBe=s(tM);SFe=n(oBe,"STRONG",{});var rCt=s(SFe);pFr=r(rCt,"convbert"),rCt.forEach(t),_Fr=r(oBe," \u2014 "),SH=n(oBe,"A",{href:!0});var tCt=s(SH);uFr=r(tCt,"TFConvBertForMaskedLM"),tCt.forEach(t),bFr=r(oBe," (ConvBERT model)"),oBe.forEach(t),vFr=i(fe),aM=n(fe,"LI",{});var rBe=s(aM);RFe=n(rBe,"STRONG",{});var aCt=s(RFe);FFr=r(aCt,"deberta"),aCt.forEach(t),TFr=r(rBe," \u2014 "),RH=n(rBe,"A",{href:!0});var nCt=s(RH);MFr=r(nCt,"TFDebertaForMaskedLM"),nCt.forEach(t),EFr=r(rBe," (DeBERTa model)"),rBe.forEach(t),CFr=i(fe),nM=n(fe,"LI",{});var tBe=s(nM);PFe=n(tBe,"STRONG",{});var sCt=s(PFe);wFr=r(sCt,"deberta-v2"),sCt.forEach(t),AFr=r(tBe," \u2014 "),PH=n(tBe,"A",{href:!0});var lCt=s(PH);LFr=r(lCt,"TFDebertaV2ForMaskedLM"),lCt.forEach(t),yFr=r(tBe," (DeBERTa-v2 model)"),tBe.forEach(t),xFr=i(fe),sM=n(fe,"LI",{});var aBe=s(sM);BFe=n(aBe,"STRONG",{});var iCt=s(BFe);$Fr=r(iCt,"distilbert"),iCt.forEach(t),kFr=r(aBe," \u2014 "),BH=n(aBe,"A",{href:!0});var dCt=s(BH);SFr=r(dCt,"TFDistilBertForMaskedLM"),dCt.forEach(t),RFr=r(aBe," (DistilBERT model)"),aBe.forEach(t),PFr=i(fe),lM=n(fe,"LI",{});var nBe=s(lM);IFe=n(nBe,"STRONG",{});var cCt=s(IFe);BFr=r(cCt,"electra"),cCt.forEach(t),IFr=r(nBe," \u2014 "),IH=n(nBe,"A",{href:!0});var fCt=s(IH);NFr=r(fCt,"TFElectraForMaskedLM"),fCt.forEach(t),qFr=r(nBe," (ELECTRA model)"),nBe.forEach(t),jFr=i(fe),iM=n(fe,"LI",{});var sBe=s(iM);NFe=n(sBe,"STRONG",{});var mCt=s(NFe);DFr=r(mCt,"flaubert"),mCt.forEach(t),GFr=r(sBe," \u2014 "),NH=n(sBe,"A",{href:!0});var gCt=s(NH);OFr=r(gCt,"TFFlaubertWithLMHeadModel"),gCt.forEach(t),VFr=r(sBe," (FlauBERT model)"),sBe.forEach(t),XFr=i(fe),dM=n(fe,"LI",{});var lBe=s(dM);qFe=n(lBe,"STRONG",{});var hCt=s(qFe);zFr=r(hCt,"funnel"),hCt.forEach(t),WFr=r(lBe," \u2014 "),qH=n(lBe,"A",{href:!0});var pCt=s(qH);QFr=r(pCt,"TFFunnelForMaskedLM"),pCt.forEach(t),HFr=r(lBe," (Funnel Transformer model)"),lBe.forEach(t),UFr=i(fe),cM=n(fe,"LI",{});var iBe=s(cM);jFe=n(iBe,"STRONG",{});var _Ct=s(jFe);JFr=r(_Ct,"layoutlm"),_Ct.forEach(t),YFr=r(iBe," \u2014 "),jH=n(iBe,"A",{href:!0});var uCt=s(jH);KFr=r(uCt,"TFLayoutLMForMaskedLM"),uCt.forEach(t),ZFr=r(iBe," (LayoutLM model)"),iBe.forEach(t),e6r=i(fe),fM=n(fe,"LI",{});var dBe=s(fM);DFe=n(dBe,"STRONG",{});var bCt=s(DFe);o6r=r(bCt,"longformer"),bCt.forEach(t),r6r=r(dBe," \u2014 "),DH=n(dBe,"A",{href:!0});var vCt=s(DH);t6r=r(vCt,"TFLongformerForMaskedLM"),vCt.forEach(t),a6r=r(dBe," (Longformer model)"),dBe.forEach(t),n6r=i(fe),mM=n(fe,"LI",{});var cBe=s(mM);GFe=n(cBe,"STRONG",{});var FCt=s(GFe);s6r=r(FCt,"mobilebert"),FCt.forEach(t),l6r=r(cBe," \u2014 "),GH=n(cBe,"A",{href:!0});var TCt=s(GH);i6r=r(TCt,"TFMobileBertForMaskedLM"),TCt.forEach(t),d6r=r(cBe," (MobileBERT model)"),cBe.forEach(t),c6r=i(fe),gM=n(fe,"LI",{});var fBe=s(gM);OFe=n(fBe,"STRONG",{});var MCt=s(OFe);f6r=r(MCt,"mpnet"),MCt.forEach(t),m6r=r(fBe," \u2014 "),OH=n(fBe,"A",{href:!0});var ECt=s(OH);g6r=r(ECt,"TFMPNetForMaskedLM"),ECt.forEach(t),h6r=r(fBe," (MPNet model)"),fBe.forEach(t),p6r=i(fe),hM=n(fe,"LI",{});var mBe=s(hM);VFe=n(mBe,"STRONG",{});var CCt=s(VFe);_6r=r(CCt,"rembert"),CCt.forEach(t),u6r=r(mBe," \u2014 "),VH=n(mBe,"A",{href:!0});var wCt=s(VH);b6r=r(wCt,"TFRemBertForMaskedLM"),wCt.forEach(t),v6r=r(mBe," (RemBERT model)"),mBe.forEach(t),F6r=i(fe),pM=n(fe,"LI",{});var gBe=s(pM);XFe=n(gBe,"STRONG",{});var ACt=s(XFe);T6r=r(ACt,"roberta"),ACt.forEach(t),M6r=r(gBe," \u2014 "),XH=n(gBe,"A",{href:!0});var LCt=s(XH);E6r=r(LCt,"TFRobertaForMaskedLM"),LCt.forEach(t),C6r=r(gBe," (RoBERTa model)"),gBe.forEach(t),w6r=i(fe),_M=n(fe,"LI",{});var hBe=s(_M);zFe=n(hBe,"STRONG",{});var yCt=s(zFe);A6r=r(yCt,"roformer"),yCt.forEach(t),L6r=r(hBe," \u2014 "),zH=n(hBe,"A",{href:!0});var xCt=s(zH);y6r=r(xCt,"TFRoFormerForMaskedLM"),xCt.forEach(t),x6r=r(hBe," (RoFormer model)"),hBe.forEach(t),$6r=i(fe),uM=n(fe,"LI",{});var pBe=s(uM);WFe=n(pBe,"STRONG",{});var $Ct=s(WFe);k6r=r($Ct,"tapas"),$Ct.forEach(t),S6r=r(pBe," \u2014 "),WH=n(pBe,"A",{href:!0});var kCt=s(WH);R6r=r(kCt,"TFTapasForMaskedLM"),kCt.forEach(t),P6r=r(pBe," (TAPAS model)"),pBe.forEach(t),B6r=i(fe),bM=n(fe,"LI",{});var _Be=s(bM);QFe=n(_Be,"STRONG",{});var SCt=s(QFe);I6r=r(SCt,"xlm"),SCt.forEach(t),N6r=r(_Be," \u2014 "),QH=n(_Be,"A",{href:!0});var RCt=s(QH);q6r=r(RCt,"TFXLMWithLMHeadModel"),RCt.forEach(t),j6r=r(_Be," (XLM model)"),_Be.forEach(t),D6r=i(fe),vM=n(fe,"LI",{});var uBe=s(vM);HFe=n(uBe,"STRONG",{});var PCt=s(HFe);G6r=r(PCt,"xlm-roberta"),PCt.forEach(t),O6r=r(uBe," \u2014 "),HH=n(uBe,"A",{href:!0});var BCt=s(HH);V6r=r(BCt,"TFXLMRobertaForMaskedLM"),BCt.forEach(t),X6r=r(uBe," (XLM-RoBERTa model)"),uBe.forEach(t),fe.forEach(t),z6r=i(Cl),T(FM.$$.fragment,Cl),Cl.forEach(t),El.forEach(t),wDe=i(f),ac=n(f,"H2",{class:!0});var kOe=s(ac);TM=n(kOe,"A",{id:!0,class:!0,href:!0});var ICt=s(TM);UFe=n(ICt,"SPAN",{});var NCt=s(UFe);T(Uy.$$.fragment,NCt),NCt.forEach(t),ICt.forEach(t),W6r=i(kOe),JFe=n(kOe,"SPAN",{});var qCt=s(JFe);Q6r=r(qCt,"TFAutoModelForSeq2SeqLM"),qCt.forEach(t),kOe.forEach(t),ADe=i(f),rr=n(f,"DIV",{class:!0});var wl=s(rr);T(Jy.$$.fragment,wl),H6r=i(wl),nc=n(wl,"P",{});var eoe=s(nc);U6r=r(eoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),UH=n(eoe,"A",{href:!0});var jCt=s(UH);J6r=r(jCt,"from_pretrained()"),jCt.forEach(t),Y6r=r(eoe," class method or the "),JH=n(eoe,"A",{href:!0});var DCt=s(JH);K6r=r(DCt,"from_config()"),DCt.forEach(t),Z6r=r(eoe,` class
method.`),eoe.forEach(t),eTr=i(wl),Yy=n(wl,"P",{});var SOe=s(Yy);oTr=r(SOe,"This class cannot be instantiated directly using "),YFe=n(SOe,"CODE",{});var GCt=s(YFe);rTr=r(GCt,"__init__()"),GCt.forEach(t),tTr=r(SOe," (throws an error)."),SOe.forEach(t),aTr=i(wl),St=n(wl,"DIV",{class:!0});var Y0=s(St);T(Ky.$$.fragment,Y0),nTr=i(Y0),KFe=n(Y0,"P",{});var OCt=s(KFe);sTr=r(OCt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),OCt.forEach(t),lTr=i(Y0),sc=n(Y0,"P",{});var ooe=s(sc);iTr=r(ooe,`Note:
Loading a model from its configuration file does `),ZFe=n(ooe,"STRONG",{});var VCt=s(ZFe);dTr=r(VCt,"not"),VCt.forEach(t),cTr=r(ooe,` load the model weights. It only affects the
model\u2019s configuration. Use `),YH=n(ooe,"A",{href:!0});var XCt=s(YH);fTr=r(XCt,"from_pretrained()"),XCt.forEach(t),mTr=r(ooe," to load the model weights."),ooe.forEach(t),gTr=i(Y0),T(MM.$$.fragment,Y0),Y0.forEach(t),hTr=i(wl),$r=n(wl,"DIV",{class:!0});var Al=s($r);T(Zy.$$.fragment,Al),pTr=i(Al),e6e=n(Al,"P",{});var zCt=s(e6e);_Tr=r(zCt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),zCt.forEach(t),uTr=i(Al),an=n(Al,"P",{});var K0=s(an);bTr=r(K0,"The model class to instantiate is selected based on the "),o6e=n(K0,"CODE",{});var WCt=s(o6e);vTr=r(WCt,"model_type"),WCt.forEach(t),FTr=r(K0,` property of the config object (either
passed as an argument or loaded from `),r6e=n(K0,"CODE",{});var QCt=s(r6e);TTr=r(QCt,"pretrained_model_name_or_path"),QCt.forEach(t),MTr=r(K0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t6e=n(K0,"CODE",{});var HCt=s(t6e);ETr=r(HCt,"pretrained_model_name_or_path"),HCt.forEach(t),CTr=r(K0,":"),K0.forEach(t),wTr=i(Al),Le=n(Al,"UL",{});var Be=s(Le);EM=n(Be,"LI",{});var bBe=s(EM);a6e=n(bBe,"STRONG",{});var UCt=s(a6e);ATr=r(UCt,"bart"),UCt.forEach(t),LTr=r(bBe," \u2014 "),KH=n(bBe,"A",{href:!0});var JCt=s(KH);yTr=r(JCt,"TFBartForConditionalGeneration"),JCt.forEach(t),xTr=r(bBe," (BART model)"),bBe.forEach(t),$Tr=i(Be),CM=n(Be,"LI",{});var vBe=s(CM);n6e=n(vBe,"STRONG",{});var YCt=s(n6e);kTr=r(YCt,"blenderbot"),YCt.forEach(t),STr=r(vBe," \u2014 "),ZH=n(vBe,"A",{href:!0});var KCt=s(ZH);RTr=r(KCt,"TFBlenderbotForConditionalGeneration"),KCt.forEach(t),PTr=r(vBe," (Blenderbot model)"),vBe.forEach(t),BTr=i(Be),wM=n(Be,"LI",{});var FBe=s(wM);s6e=n(FBe,"STRONG",{});var ZCt=s(s6e);ITr=r(ZCt,"blenderbot-small"),ZCt.forEach(t),NTr=r(FBe," \u2014 "),eU=n(FBe,"A",{href:!0});var e5t=s(eU);qTr=r(e5t,"TFBlenderbotSmallForConditionalGeneration"),e5t.forEach(t),jTr=r(FBe," (BlenderbotSmall model)"),FBe.forEach(t),DTr=i(Be),AM=n(Be,"LI",{});var TBe=s(AM);l6e=n(TBe,"STRONG",{});var o5t=s(l6e);GTr=r(o5t,"encoder-decoder"),o5t.forEach(t),OTr=r(TBe," \u2014 "),oU=n(TBe,"A",{href:!0});var r5t=s(oU);VTr=r(r5t,"TFEncoderDecoderModel"),r5t.forEach(t),XTr=r(TBe," (Encoder decoder model)"),TBe.forEach(t),zTr=i(Be),LM=n(Be,"LI",{});var MBe=s(LM);i6e=n(MBe,"STRONG",{});var t5t=s(i6e);WTr=r(t5t,"led"),t5t.forEach(t),QTr=r(MBe," \u2014 "),rU=n(MBe,"A",{href:!0});var a5t=s(rU);HTr=r(a5t,"TFLEDForConditionalGeneration"),a5t.forEach(t),UTr=r(MBe," (LED model)"),MBe.forEach(t),JTr=i(Be),yM=n(Be,"LI",{});var EBe=s(yM);d6e=n(EBe,"STRONG",{});var n5t=s(d6e);YTr=r(n5t,"marian"),n5t.forEach(t),KTr=r(EBe," \u2014 "),tU=n(EBe,"A",{href:!0});var s5t=s(tU);ZTr=r(s5t,"TFMarianMTModel"),s5t.forEach(t),e7r=r(EBe," (Marian model)"),EBe.forEach(t),o7r=i(Be),xM=n(Be,"LI",{});var CBe=s(xM);c6e=n(CBe,"STRONG",{});var l5t=s(c6e);r7r=r(l5t,"mbart"),l5t.forEach(t),t7r=r(CBe," \u2014 "),aU=n(CBe,"A",{href:!0});var i5t=s(aU);a7r=r(i5t,"TFMBartForConditionalGeneration"),i5t.forEach(t),n7r=r(CBe," (mBART model)"),CBe.forEach(t),s7r=i(Be),$M=n(Be,"LI",{});var wBe=s($M);f6e=n(wBe,"STRONG",{});var d5t=s(f6e);l7r=r(d5t,"mt5"),d5t.forEach(t),i7r=r(wBe," \u2014 "),nU=n(wBe,"A",{href:!0});var c5t=s(nU);d7r=r(c5t,"TFMT5ForConditionalGeneration"),c5t.forEach(t),c7r=r(wBe," (MT5 model)"),wBe.forEach(t),f7r=i(Be),kM=n(Be,"LI",{});var ABe=s(kM);m6e=n(ABe,"STRONG",{});var f5t=s(m6e);m7r=r(f5t,"pegasus"),f5t.forEach(t),g7r=r(ABe," \u2014 "),sU=n(ABe,"A",{href:!0});var m5t=s(sU);h7r=r(m5t,"TFPegasusForConditionalGeneration"),m5t.forEach(t),p7r=r(ABe," (Pegasus model)"),ABe.forEach(t),_7r=i(Be),SM=n(Be,"LI",{});var LBe=s(SM);g6e=n(LBe,"STRONG",{});var g5t=s(g6e);u7r=r(g5t,"t5"),g5t.forEach(t),b7r=r(LBe," \u2014 "),lU=n(LBe,"A",{href:!0});var h5t=s(lU);v7r=r(h5t,"TFT5ForConditionalGeneration"),h5t.forEach(t),F7r=r(LBe," (T5 model)"),LBe.forEach(t),Be.forEach(t),T7r=i(Al),T(RM.$$.fragment,Al),Al.forEach(t),wl.forEach(t),LDe=i(f),lc=n(f,"H2",{class:!0});var ROe=s(lc);PM=n(ROe,"A",{id:!0,class:!0,href:!0});var p5t=s(PM);h6e=n(p5t,"SPAN",{});var _5t=s(h6e);T(e8.$$.fragment,_5t),_5t.forEach(t),p5t.forEach(t),M7r=i(ROe),p6e=n(ROe,"SPAN",{});var u5t=s(p6e);E7r=r(u5t,"TFAutoModelForSequenceClassification"),u5t.forEach(t),ROe.forEach(t),yDe=i(f),tr=n(f,"DIV",{class:!0});var Ll=s(tr);T(o8.$$.fragment,Ll),C7r=i(Ll),ic=n(Ll,"P",{});var roe=s(ic);w7r=r(roe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),iU=n(roe,"A",{href:!0});var b5t=s(iU);A7r=r(b5t,"from_pretrained()"),b5t.forEach(t),L7r=r(roe," class method or the "),dU=n(roe,"A",{href:!0});var v5t=s(dU);y7r=r(v5t,"from_config()"),v5t.forEach(t),x7r=r(roe,` class
method.`),roe.forEach(t),$7r=i(Ll),r8=n(Ll,"P",{});var POe=s(r8);k7r=r(POe,"This class cannot be instantiated directly using "),_6e=n(POe,"CODE",{});var F5t=s(_6e);S7r=r(F5t,"__init__()"),F5t.forEach(t),R7r=r(POe," (throws an error)."),POe.forEach(t),P7r=i(Ll),Rt=n(Ll,"DIV",{class:!0});var Z0=s(Rt);T(t8.$$.fragment,Z0),B7r=i(Z0),u6e=n(Z0,"P",{});var T5t=s(u6e);I7r=r(T5t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),T5t.forEach(t),N7r=i(Z0),dc=n(Z0,"P",{});var toe=s(dc);q7r=r(toe,`Note:
Loading a model from its configuration file does `),b6e=n(toe,"STRONG",{});var M5t=s(b6e);j7r=r(M5t,"not"),M5t.forEach(t),D7r=r(toe,` load the model weights. It only affects the
model\u2019s configuration. Use `),cU=n(toe,"A",{href:!0});var E5t=s(cU);G7r=r(E5t,"from_pretrained()"),E5t.forEach(t),O7r=r(toe," to load the model weights."),toe.forEach(t),V7r=i(Z0),T(BM.$$.fragment,Z0),Z0.forEach(t),X7r=i(Ll),kr=n(Ll,"DIV",{class:!0});var yl=s(kr);T(a8.$$.fragment,yl),z7r=i(yl),v6e=n(yl,"P",{});var C5t=s(v6e);W7r=r(C5t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),C5t.forEach(t),Q7r=i(yl),nn=n(yl,"P",{});var ew=s(nn);H7r=r(ew,"The model class to instantiate is selected based on the "),F6e=n(ew,"CODE",{});var w5t=s(F6e);U7r=r(w5t,"model_type"),w5t.forEach(t),J7r=r(ew,` property of the config object (either
passed as an argument or loaded from `),T6e=n(ew,"CODE",{});var A5t=s(T6e);Y7r=r(A5t,"pretrained_model_name_or_path"),A5t.forEach(t),K7r=r(ew,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M6e=n(ew,"CODE",{});var L5t=s(M6e);Z7r=r(L5t,"pretrained_model_name_or_path"),L5t.forEach(t),e9r=r(ew,":"),ew.forEach(t),o9r=i(yl),re=n(yl,"UL",{});var ne=s(re);IM=n(ne,"LI",{});var yBe=s(IM);E6e=n(yBe,"STRONG",{});var y5t=s(E6e);r9r=r(y5t,"albert"),y5t.forEach(t),t9r=r(yBe," \u2014 "),fU=n(yBe,"A",{href:!0});var x5t=s(fU);a9r=r(x5t,"TFAlbertForSequenceClassification"),x5t.forEach(t),n9r=r(yBe," (ALBERT model)"),yBe.forEach(t),s9r=i(ne),NM=n(ne,"LI",{});var xBe=s(NM);C6e=n(xBe,"STRONG",{});var $5t=s(C6e);l9r=r($5t,"bert"),$5t.forEach(t),i9r=r(xBe," \u2014 "),mU=n(xBe,"A",{href:!0});var k5t=s(mU);d9r=r(k5t,"TFBertForSequenceClassification"),k5t.forEach(t),c9r=r(xBe," (BERT model)"),xBe.forEach(t),f9r=i(ne),qM=n(ne,"LI",{});var $Be=s(qM);w6e=n($Be,"STRONG",{});var S5t=s(w6e);m9r=r(S5t,"camembert"),S5t.forEach(t),g9r=r($Be," \u2014 "),gU=n($Be,"A",{href:!0});var R5t=s(gU);h9r=r(R5t,"TFCamembertForSequenceClassification"),R5t.forEach(t),p9r=r($Be," (CamemBERT model)"),$Be.forEach(t),_9r=i(ne),jM=n(ne,"LI",{});var kBe=s(jM);A6e=n(kBe,"STRONG",{});var P5t=s(A6e);u9r=r(P5t,"convbert"),P5t.forEach(t),b9r=r(kBe," \u2014 "),hU=n(kBe,"A",{href:!0});var B5t=s(hU);v9r=r(B5t,"TFConvBertForSequenceClassification"),B5t.forEach(t),F9r=r(kBe," (ConvBERT model)"),kBe.forEach(t),T9r=i(ne),DM=n(ne,"LI",{});var SBe=s(DM);L6e=n(SBe,"STRONG",{});var I5t=s(L6e);M9r=r(I5t,"ctrl"),I5t.forEach(t),E9r=r(SBe," \u2014 "),pU=n(SBe,"A",{href:!0});var N5t=s(pU);C9r=r(N5t,"TFCTRLForSequenceClassification"),N5t.forEach(t),w9r=r(SBe," (CTRL model)"),SBe.forEach(t),A9r=i(ne),GM=n(ne,"LI",{});var RBe=s(GM);y6e=n(RBe,"STRONG",{});var q5t=s(y6e);L9r=r(q5t,"deberta"),q5t.forEach(t),y9r=r(RBe," \u2014 "),_U=n(RBe,"A",{href:!0});var j5t=s(_U);x9r=r(j5t,"TFDebertaForSequenceClassification"),j5t.forEach(t),$9r=r(RBe," (DeBERTa model)"),RBe.forEach(t),k9r=i(ne),OM=n(ne,"LI",{});var PBe=s(OM);x6e=n(PBe,"STRONG",{});var D5t=s(x6e);S9r=r(D5t,"deberta-v2"),D5t.forEach(t),R9r=r(PBe," \u2014 "),uU=n(PBe,"A",{href:!0});var G5t=s(uU);P9r=r(G5t,"TFDebertaV2ForSequenceClassification"),G5t.forEach(t),B9r=r(PBe," (DeBERTa-v2 model)"),PBe.forEach(t),I9r=i(ne),VM=n(ne,"LI",{});var BBe=s(VM);$6e=n(BBe,"STRONG",{});var O5t=s($6e);N9r=r(O5t,"distilbert"),O5t.forEach(t),q9r=r(BBe," \u2014 "),bU=n(BBe,"A",{href:!0});var V5t=s(bU);j9r=r(V5t,"TFDistilBertForSequenceClassification"),V5t.forEach(t),D9r=r(BBe," (DistilBERT model)"),BBe.forEach(t),G9r=i(ne),XM=n(ne,"LI",{});var IBe=s(XM);k6e=n(IBe,"STRONG",{});var X5t=s(k6e);O9r=r(X5t,"electra"),X5t.forEach(t),V9r=r(IBe," \u2014 "),vU=n(IBe,"A",{href:!0});var z5t=s(vU);X9r=r(z5t,"TFElectraForSequenceClassification"),z5t.forEach(t),z9r=r(IBe," (ELECTRA model)"),IBe.forEach(t),W9r=i(ne),zM=n(ne,"LI",{});var NBe=s(zM);S6e=n(NBe,"STRONG",{});var W5t=s(S6e);Q9r=r(W5t,"flaubert"),W5t.forEach(t),H9r=r(NBe," \u2014 "),FU=n(NBe,"A",{href:!0});var Q5t=s(FU);U9r=r(Q5t,"TFFlaubertForSequenceClassification"),Q5t.forEach(t),J9r=r(NBe," (FlauBERT model)"),NBe.forEach(t),Y9r=i(ne),WM=n(ne,"LI",{});var qBe=s(WM);R6e=n(qBe,"STRONG",{});var H5t=s(R6e);K9r=r(H5t,"funnel"),H5t.forEach(t),Z9r=r(qBe," \u2014 "),TU=n(qBe,"A",{href:!0});var U5t=s(TU);eMr=r(U5t,"TFFunnelForSequenceClassification"),U5t.forEach(t),oMr=r(qBe," (Funnel Transformer model)"),qBe.forEach(t),rMr=i(ne),QM=n(ne,"LI",{});var jBe=s(QM);P6e=n(jBe,"STRONG",{});var J5t=s(P6e);tMr=r(J5t,"gpt2"),J5t.forEach(t),aMr=r(jBe," \u2014 "),MU=n(jBe,"A",{href:!0});var Y5t=s(MU);nMr=r(Y5t,"TFGPT2ForSequenceClassification"),Y5t.forEach(t),sMr=r(jBe," (OpenAI GPT-2 model)"),jBe.forEach(t),lMr=i(ne),HM=n(ne,"LI",{});var DBe=s(HM);B6e=n(DBe,"STRONG",{});var K5t=s(B6e);iMr=r(K5t,"gptj"),K5t.forEach(t),dMr=r(DBe," \u2014 "),EU=n(DBe,"A",{href:!0});var Z5t=s(EU);cMr=r(Z5t,"TFGPTJForSequenceClassification"),Z5t.forEach(t),fMr=r(DBe," (GPT-J model)"),DBe.forEach(t),mMr=i(ne),UM=n(ne,"LI",{});var GBe=s(UM);I6e=n(GBe,"STRONG",{});var e3t=s(I6e);gMr=r(e3t,"layoutlm"),e3t.forEach(t),hMr=r(GBe," \u2014 "),CU=n(GBe,"A",{href:!0});var o3t=s(CU);pMr=r(o3t,"TFLayoutLMForSequenceClassification"),o3t.forEach(t),_Mr=r(GBe," (LayoutLM model)"),GBe.forEach(t),uMr=i(ne),JM=n(ne,"LI",{});var OBe=s(JM);N6e=n(OBe,"STRONG",{});var r3t=s(N6e);bMr=r(r3t,"longformer"),r3t.forEach(t),vMr=r(OBe," \u2014 "),wU=n(OBe,"A",{href:!0});var t3t=s(wU);FMr=r(t3t,"TFLongformerForSequenceClassification"),t3t.forEach(t),TMr=r(OBe," (Longformer model)"),OBe.forEach(t),MMr=i(ne),YM=n(ne,"LI",{});var VBe=s(YM);q6e=n(VBe,"STRONG",{});var a3t=s(q6e);EMr=r(a3t,"mobilebert"),a3t.forEach(t),CMr=r(VBe," \u2014 "),AU=n(VBe,"A",{href:!0});var n3t=s(AU);wMr=r(n3t,"TFMobileBertForSequenceClassification"),n3t.forEach(t),AMr=r(VBe," (MobileBERT model)"),VBe.forEach(t),LMr=i(ne),KM=n(ne,"LI",{});var XBe=s(KM);j6e=n(XBe,"STRONG",{});var s3t=s(j6e);yMr=r(s3t,"mpnet"),s3t.forEach(t),xMr=r(XBe," \u2014 "),LU=n(XBe,"A",{href:!0});var l3t=s(LU);$Mr=r(l3t,"TFMPNetForSequenceClassification"),l3t.forEach(t),kMr=r(XBe," (MPNet model)"),XBe.forEach(t),SMr=i(ne),ZM=n(ne,"LI",{});var zBe=s(ZM);D6e=n(zBe,"STRONG",{});var i3t=s(D6e);RMr=r(i3t,"openai-gpt"),i3t.forEach(t),PMr=r(zBe," \u2014 "),yU=n(zBe,"A",{href:!0});var d3t=s(yU);BMr=r(d3t,"TFOpenAIGPTForSequenceClassification"),d3t.forEach(t),IMr=r(zBe," (OpenAI GPT model)"),zBe.forEach(t),NMr=i(ne),e4=n(ne,"LI",{});var WBe=s(e4);G6e=n(WBe,"STRONG",{});var c3t=s(G6e);qMr=r(c3t,"rembert"),c3t.forEach(t),jMr=r(WBe," \u2014 "),xU=n(WBe,"A",{href:!0});var f3t=s(xU);DMr=r(f3t,"TFRemBertForSequenceClassification"),f3t.forEach(t),GMr=r(WBe," (RemBERT model)"),WBe.forEach(t),OMr=i(ne),o4=n(ne,"LI",{});var QBe=s(o4);O6e=n(QBe,"STRONG",{});var m3t=s(O6e);VMr=r(m3t,"roberta"),m3t.forEach(t),XMr=r(QBe," \u2014 "),$U=n(QBe,"A",{href:!0});var g3t=s($U);zMr=r(g3t,"TFRobertaForSequenceClassification"),g3t.forEach(t),WMr=r(QBe," (RoBERTa model)"),QBe.forEach(t),QMr=i(ne),r4=n(ne,"LI",{});var HBe=s(r4);V6e=n(HBe,"STRONG",{});var h3t=s(V6e);HMr=r(h3t,"roformer"),h3t.forEach(t),UMr=r(HBe," \u2014 "),kU=n(HBe,"A",{href:!0});var p3t=s(kU);JMr=r(p3t,"TFRoFormerForSequenceClassification"),p3t.forEach(t),YMr=r(HBe," (RoFormer model)"),HBe.forEach(t),KMr=i(ne),t4=n(ne,"LI",{});var UBe=s(t4);X6e=n(UBe,"STRONG",{});var _3t=s(X6e);ZMr=r(_3t,"tapas"),_3t.forEach(t),e4r=r(UBe," \u2014 "),SU=n(UBe,"A",{href:!0});var u3t=s(SU);o4r=r(u3t,"TFTapasForSequenceClassification"),u3t.forEach(t),r4r=r(UBe," (TAPAS model)"),UBe.forEach(t),t4r=i(ne),a4=n(ne,"LI",{});var JBe=s(a4);z6e=n(JBe,"STRONG",{});var b3t=s(z6e);a4r=r(b3t,"transfo-xl"),b3t.forEach(t),n4r=r(JBe," \u2014 "),RU=n(JBe,"A",{href:!0});var v3t=s(RU);s4r=r(v3t,"TFTransfoXLForSequenceClassification"),v3t.forEach(t),l4r=r(JBe," (Transformer-XL model)"),JBe.forEach(t),i4r=i(ne),n4=n(ne,"LI",{});var YBe=s(n4);W6e=n(YBe,"STRONG",{});var F3t=s(W6e);d4r=r(F3t,"xlm"),F3t.forEach(t),c4r=r(YBe," \u2014 "),PU=n(YBe,"A",{href:!0});var T3t=s(PU);f4r=r(T3t,"TFXLMForSequenceClassification"),T3t.forEach(t),m4r=r(YBe," (XLM model)"),YBe.forEach(t),g4r=i(ne),s4=n(ne,"LI",{});var KBe=s(s4);Q6e=n(KBe,"STRONG",{});var M3t=s(Q6e);h4r=r(M3t,"xlm-roberta"),M3t.forEach(t),p4r=r(KBe," \u2014 "),BU=n(KBe,"A",{href:!0});var E3t=s(BU);_4r=r(E3t,"TFXLMRobertaForSequenceClassification"),E3t.forEach(t),u4r=r(KBe," (XLM-RoBERTa model)"),KBe.forEach(t),b4r=i(ne),l4=n(ne,"LI",{});var ZBe=s(l4);H6e=n(ZBe,"STRONG",{});var C3t=s(H6e);v4r=r(C3t,"xlnet"),C3t.forEach(t),F4r=r(ZBe," \u2014 "),IU=n(ZBe,"A",{href:!0});var w3t=s(IU);T4r=r(w3t,"TFXLNetForSequenceClassification"),w3t.forEach(t),M4r=r(ZBe," (XLNet model)"),ZBe.forEach(t),ne.forEach(t),E4r=i(yl),T(i4.$$.fragment,yl),yl.forEach(t),Ll.forEach(t),xDe=i(f),cc=n(f,"H2",{class:!0});var BOe=s(cc);d4=n(BOe,"A",{id:!0,class:!0,href:!0});var A3t=s(d4);U6e=n(A3t,"SPAN",{});var L3t=s(U6e);T(n8.$$.fragment,L3t),L3t.forEach(t),A3t.forEach(t),C4r=i(BOe),J6e=n(BOe,"SPAN",{});var y3t=s(J6e);w4r=r(y3t,"TFAutoModelForMultipleChoice"),y3t.forEach(t),BOe.forEach(t),$De=i(f),ar=n(f,"DIV",{class:!0});var xl=s(ar);T(s8.$$.fragment,xl),A4r=i(xl),fc=n(xl,"P",{});var aoe=s(fc);L4r=r(aoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),NU=n(aoe,"A",{href:!0});var x3t=s(NU);y4r=r(x3t,"from_pretrained()"),x3t.forEach(t),x4r=r(aoe," class method or the "),qU=n(aoe,"A",{href:!0});var $3t=s(qU);$4r=r($3t,"from_config()"),$3t.forEach(t),k4r=r(aoe,` class
method.`),aoe.forEach(t),S4r=i(xl),l8=n(xl,"P",{});var IOe=s(l8);R4r=r(IOe,"This class cannot be instantiated directly using "),Y6e=n(IOe,"CODE",{});var k3t=s(Y6e);P4r=r(k3t,"__init__()"),k3t.forEach(t),B4r=r(IOe," (throws an error)."),IOe.forEach(t),I4r=i(xl),Pt=n(xl,"DIV",{class:!0});var ow=s(Pt);T(i8.$$.fragment,ow),N4r=i(ow),K6e=n(ow,"P",{});var S3t=s(K6e);q4r=r(S3t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),S3t.forEach(t),j4r=i(ow),mc=n(ow,"P",{});var noe=s(mc);D4r=r(noe,`Note:
Loading a model from its configuration file does `),Z6e=n(noe,"STRONG",{});var R3t=s(Z6e);G4r=r(R3t,"not"),R3t.forEach(t),O4r=r(noe,` load the model weights. It only affects the
model\u2019s configuration. Use `),jU=n(noe,"A",{href:!0});var P3t=s(jU);V4r=r(P3t,"from_pretrained()"),P3t.forEach(t),X4r=r(noe," to load the model weights."),noe.forEach(t),z4r=i(ow),T(c4.$$.fragment,ow),ow.forEach(t),W4r=i(xl),Sr=n(xl,"DIV",{class:!0});var $l=s(Sr);T(d8.$$.fragment,$l),Q4r=i($l),eTe=n($l,"P",{});var B3t=s(eTe);H4r=r(B3t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),B3t.forEach(t),U4r=i($l),sn=n($l,"P",{});var rw=s(sn);J4r=r(rw,"The model class to instantiate is selected based on the "),oTe=n(rw,"CODE",{});var I3t=s(oTe);Y4r=r(I3t,"model_type"),I3t.forEach(t),K4r=r(rw,` property of the config object (either
passed as an argument or loaded from `),rTe=n(rw,"CODE",{});var N3t=s(rTe);Z4r=r(N3t,"pretrained_model_name_or_path"),N3t.forEach(t),eEr=r(rw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tTe=n(rw,"CODE",{});var q3t=s(tTe);oEr=r(q3t,"pretrained_model_name_or_path"),q3t.forEach(t),rEr=r(rw,":"),rw.forEach(t),tEr=i($l),_e=n($l,"UL",{});var ve=s(_e);f4=n(ve,"LI",{});var eIe=s(f4);aTe=n(eIe,"STRONG",{});var j3t=s(aTe);aEr=r(j3t,"albert"),j3t.forEach(t),nEr=r(eIe," \u2014 "),DU=n(eIe,"A",{href:!0});var D3t=s(DU);sEr=r(D3t,"TFAlbertForMultipleChoice"),D3t.forEach(t),lEr=r(eIe," (ALBERT model)"),eIe.forEach(t),iEr=i(ve),m4=n(ve,"LI",{});var oIe=s(m4);nTe=n(oIe,"STRONG",{});var G3t=s(nTe);dEr=r(G3t,"bert"),G3t.forEach(t),cEr=r(oIe," \u2014 "),GU=n(oIe,"A",{href:!0});var O3t=s(GU);fEr=r(O3t,"TFBertForMultipleChoice"),O3t.forEach(t),mEr=r(oIe," (BERT model)"),oIe.forEach(t),gEr=i(ve),g4=n(ve,"LI",{});var rIe=s(g4);sTe=n(rIe,"STRONG",{});var V3t=s(sTe);hEr=r(V3t,"camembert"),V3t.forEach(t),pEr=r(rIe," \u2014 "),OU=n(rIe,"A",{href:!0});var X3t=s(OU);_Er=r(X3t,"TFCamembertForMultipleChoice"),X3t.forEach(t),uEr=r(rIe," (CamemBERT model)"),rIe.forEach(t),bEr=i(ve),h4=n(ve,"LI",{});var tIe=s(h4);lTe=n(tIe,"STRONG",{});var z3t=s(lTe);vEr=r(z3t,"convbert"),z3t.forEach(t),FEr=r(tIe," \u2014 "),VU=n(tIe,"A",{href:!0});var W3t=s(VU);TEr=r(W3t,"TFConvBertForMultipleChoice"),W3t.forEach(t),MEr=r(tIe," (ConvBERT model)"),tIe.forEach(t),EEr=i(ve),p4=n(ve,"LI",{});var aIe=s(p4);iTe=n(aIe,"STRONG",{});var Q3t=s(iTe);CEr=r(Q3t,"distilbert"),Q3t.forEach(t),wEr=r(aIe," \u2014 "),XU=n(aIe,"A",{href:!0});var H3t=s(XU);AEr=r(H3t,"TFDistilBertForMultipleChoice"),H3t.forEach(t),LEr=r(aIe," (DistilBERT model)"),aIe.forEach(t),yEr=i(ve),_4=n(ve,"LI",{});var nIe=s(_4);dTe=n(nIe,"STRONG",{});var U3t=s(dTe);xEr=r(U3t,"electra"),U3t.forEach(t),$Er=r(nIe," \u2014 "),zU=n(nIe,"A",{href:!0});var J3t=s(zU);kEr=r(J3t,"TFElectraForMultipleChoice"),J3t.forEach(t),SEr=r(nIe," (ELECTRA model)"),nIe.forEach(t),REr=i(ve),u4=n(ve,"LI",{});var sIe=s(u4);cTe=n(sIe,"STRONG",{});var Y3t=s(cTe);PEr=r(Y3t,"flaubert"),Y3t.forEach(t),BEr=r(sIe," \u2014 "),WU=n(sIe,"A",{href:!0});var K3t=s(WU);IEr=r(K3t,"TFFlaubertForMultipleChoice"),K3t.forEach(t),NEr=r(sIe," (FlauBERT model)"),sIe.forEach(t),qEr=i(ve),b4=n(ve,"LI",{});var lIe=s(b4);fTe=n(lIe,"STRONG",{});var Z3t=s(fTe);jEr=r(Z3t,"funnel"),Z3t.forEach(t),DEr=r(lIe," \u2014 "),QU=n(lIe,"A",{href:!0});var e0t=s(QU);GEr=r(e0t,"TFFunnelForMultipleChoice"),e0t.forEach(t),OEr=r(lIe," (Funnel Transformer model)"),lIe.forEach(t),VEr=i(ve),v4=n(ve,"LI",{});var iIe=s(v4);mTe=n(iIe,"STRONG",{});var o0t=s(mTe);XEr=r(o0t,"longformer"),o0t.forEach(t),zEr=r(iIe," \u2014 "),HU=n(iIe,"A",{href:!0});var r0t=s(HU);WEr=r(r0t,"TFLongformerForMultipleChoice"),r0t.forEach(t),QEr=r(iIe," (Longformer model)"),iIe.forEach(t),HEr=i(ve),F4=n(ve,"LI",{});var dIe=s(F4);gTe=n(dIe,"STRONG",{});var t0t=s(gTe);UEr=r(t0t,"mobilebert"),t0t.forEach(t),JEr=r(dIe," \u2014 "),UU=n(dIe,"A",{href:!0});var a0t=s(UU);YEr=r(a0t,"TFMobileBertForMultipleChoice"),a0t.forEach(t),KEr=r(dIe," (MobileBERT model)"),dIe.forEach(t),ZEr=i(ve),T4=n(ve,"LI",{});var cIe=s(T4);hTe=n(cIe,"STRONG",{});var n0t=s(hTe);eCr=r(n0t,"mpnet"),n0t.forEach(t),oCr=r(cIe," \u2014 "),JU=n(cIe,"A",{href:!0});var s0t=s(JU);rCr=r(s0t,"TFMPNetForMultipleChoice"),s0t.forEach(t),tCr=r(cIe," (MPNet model)"),cIe.forEach(t),aCr=i(ve),M4=n(ve,"LI",{});var fIe=s(M4);pTe=n(fIe,"STRONG",{});var l0t=s(pTe);nCr=r(l0t,"rembert"),l0t.forEach(t),sCr=r(fIe," \u2014 "),YU=n(fIe,"A",{href:!0});var i0t=s(YU);lCr=r(i0t,"TFRemBertForMultipleChoice"),i0t.forEach(t),iCr=r(fIe," (RemBERT model)"),fIe.forEach(t),dCr=i(ve),E4=n(ve,"LI",{});var mIe=s(E4);_Te=n(mIe,"STRONG",{});var d0t=s(_Te);cCr=r(d0t,"roberta"),d0t.forEach(t),fCr=r(mIe," \u2014 "),KU=n(mIe,"A",{href:!0});var c0t=s(KU);mCr=r(c0t,"TFRobertaForMultipleChoice"),c0t.forEach(t),gCr=r(mIe," (RoBERTa model)"),mIe.forEach(t),hCr=i(ve),C4=n(ve,"LI",{});var gIe=s(C4);uTe=n(gIe,"STRONG",{});var f0t=s(uTe);pCr=r(f0t,"roformer"),f0t.forEach(t),_Cr=r(gIe," \u2014 "),ZU=n(gIe,"A",{href:!0});var m0t=s(ZU);uCr=r(m0t,"TFRoFormerForMultipleChoice"),m0t.forEach(t),bCr=r(gIe," (RoFormer model)"),gIe.forEach(t),vCr=i(ve),w4=n(ve,"LI",{});var hIe=s(w4);bTe=n(hIe,"STRONG",{});var g0t=s(bTe);FCr=r(g0t,"xlm"),g0t.forEach(t),TCr=r(hIe," \u2014 "),eJ=n(hIe,"A",{href:!0});var h0t=s(eJ);MCr=r(h0t,"TFXLMForMultipleChoice"),h0t.forEach(t),ECr=r(hIe," (XLM model)"),hIe.forEach(t),CCr=i(ve),A4=n(ve,"LI",{});var pIe=s(A4);vTe=n(pIe,"STRONG",{});var p0t=s(vTe);wCr=r(p0t,"xlm-roberta"),p0t.forEach(t),ACr=r(pIe," \u2014 "),oJ=n(pIe,"A",{href:!0});var _0t=s(oJ);LCr=r(_0t,"TFXLMRobertaForMultipleChoice"),_0t.forEach(t),yCr=r(pIe," (XLM-RoBERTa model)"),pIe.forEach(t),xCr=i(ve),L4=n(ve,"LI",{});var _Ie=s(L4);FTe=n(_Ie,"STRONG",{});var u0t=s(FTe);$Cr=r(u0t,"xlnet"),u0t.forEach(t),kCr=r(_Ie," \u2014 "),rJ=n(_Ie,"A",{href:!0});var b0t=s(rJ);SCr=r(b0t,"TFXLNetForMultipleChoice"),b0t.forEach(t),RCr=r(_Ie," (XLNet model)"),_Ie.forEach(t),ve.forEach(t),PCr=i($l),T(y4.$$.fragment,$l),$l.forEach(t),xl.forEach(t),kDe=i(f),gc=n(f,"H2",{class:!0});var NOe=s(gc);x4=n(NOe,"A",{id:!0,class:!0,href:!0});var v0t=s(x4);TTe=n(v0t,"SPAN",{});var F0t=s(TTe);T(c8.$$.fragment,F0t),F0t.forEach(t),v0t.forEach(t),BCr=i(NOe),MTe=n(NOe,"SPAN",{});var T0t=s(MTe);ICr=r(T0t,"TFAutoModelForNextSentencePrediction"),T0t.forEach(t),NOe.forEach(t),SDe=i(f),nr=n(f,"DIV",{class:!0});var kl=s(nr);T(f8.$$.fragment,kl),NCr=i(kl),hc=n(kl,"P",{});var soe=s(hc);qCr=r(soe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),tJ=n(soe,"A",{href:!0});var M0t=s(tJ);jCr=r(M0t,"from_pretrained()"),M0t.forEach(t),DCr=r(soe," class method or the "),aJ=n(soe,"A",{href:!0});var E0t=s(aJ);GCr=r(E0t,"from_config()"),E0t.forEach(t),OCr=r(soe,` class
method.`),soe.forEach(t),VCr=i(kl),m8=n(kl,"P",{});var qOe=s(m8);XCr=r(qOe,"This class cannot be instantiated directly using "),ETe=n(qOe,"CODE",{});var C0t=s(ETe);zCr=r(C0t,"__init__()"),C0t.forEach(t),WCr=r(qOe," (throws an error)."),qOe.forEach(t),QCr=i(kl),Bt=n(kl,"DIV",{class:!0});var tw=s(Bt);T(g8.$$.fragment,tw),HCr=i(tw),CTe=n(tw,"P",{});var w0t=s(CTe);UCr=r(w0t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),w0t.forEach(t),JCr=i(tw),pc=n(tw,"P",{});var loe=s(pc);YCr=r(loe,`Note:
Loading a model from its configuration file does `),wTe=n(loe,"STRONG",{});var A0t=s(wTe);KCr=r(A0t,"not"),A0t.forEach(t),ZCr=r(loe,` load the model weights. It only affects the
model\u2019s configuration. Use `),nJ=n(loe,"A",{href:!0});var L0t=s(nJ);e5r=r(L0t,"from_pretrained()"),L0t.forEach(t),o5r=r(loe," to load the model weights."),loe.forEach(t),r5r=i(tw),T($4.$$.fragment,tw),tw.forEach(t),t5r=i(kl),Rr=n(kl,"DIV",{class:!0});var Sl=s(Rr);T(h8.$$.fragment,Sl),a5r=i(Sl),ATe=n(Sl,"P",{});var y0t=s(ATe);n5r=r(y0t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),y0t.forEach(t),s5r=i(Sl),ln=n(Sl,"P",{});var aw=s(ln);l5r=r(aw,"The model class to instantiate is selected based on the "),LTe=n(aw,"CODE",{});var x0t=s(LTe);i5r=r(x0t,"model_type"),x0t.forEach(t),d5r=r(aw,` property of the config object (either
passed as an argument or loaded from `),yTe=n(aw,"CODE",{});var $0t=s(yTe);c5r=r($0t,"pretrained_model_name_or_path"),$0t.forEach(t),f5r=r(aw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xTe=n(aw,"CODE",{});var k0t=s(xTe);m5r=r(k0t,"pretrained_model_name_or_path"),k0t.forEach(t),g5r=r(aw,":"),aw.forEach(t),h5r=i(Sl),p8=n(Sl,"UL",{});var jOe=s(p8);k4=n(jOe,"LI",{});var uIe=s(k4);$Te=n(uIe,"STRONG",{});var S0t=s($Te);p5r=r(S0t,"bert"),S0t.forEach(t),_5r=r(uIe," \u2014 "),sJ=n(uIe,"A",{href:!0});var R0t=s(sJ);u5r=r(R0t,"TFBertForNextSentencePrediction"),R0t.forEach(t),b5r=r(uIe," (BERT model)"),uIe.forEach(t),v5r=i(jOe),S4=n(jOe,"LI",{});var bIe=s(S4);kTe=n(bIe,"STRONG",{});var P0t=s(kTe);F5r=r(P0t,"mobilebert"),P0t.forEach(t),T5r=r(bIe," \u2014 "),lJ=n(bIe,"A",{href:!0});var B0t=s(lJ);M5r=r(B0t,"TFMobileBertForNextSentencePrediction"),B0t.forEach(t),E5r=r(bIe," (MobileBERT model)"),bIe.forEach(t),jOe.forEach(t),C5r=i(Sl),T(R4.$$.fragment,Sl),Sl.forEach(t),kl.forEach(t),RDe=i(f),_c=n(f,"H2",{class:!0});var DOe=s(_c);P4=n(DOe,"A",{id:!0,class:!0,href:!0});var I0t=s(P4);STe=n(I0t,"SPAN",{});var N0t=s(STe);T(_8.$$.fragment,N0t),N0t.forEach(t),I0t.forEach(t),w5r=i(DOe),RTe=n(DOe,"SPAN",{});var q0t=s(RTe);A5r=r(q0t,"TFAutoModelForTableQuestionAnswering"),q0t.forEach(t),DOe.forEach(t),PDe=i(f),sr=n(f,"DIV",{class:!0});var Rl=s(sr);T(u8.$$.fragment,Rl),L5r=i(Rl),uc=n(Rl,"P",{});var ioe=s(uc);y5r=r(ioe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),iJ=n(ioe,"A",{href:!0});var j0t=s(iJ);x5r=r(j0t,"from_pretrained()"),j0t.forEach(t),$5r=r(ioe," class method or the "),dJ=n(ioe,"A",{href:!0});var D0t=s(dJ);k5r=r(D0t,"from_config()"),D0t.forEach(t),S5r=r(ioe,` class
method.`),ioe.forEach(t),R5r=i(Rl),b8=n(Rl,"P",{});var GOe=s(b8);P5r=r(GOe,"This class cannot be instantiated directly using "),PTe=n(GOe,"CODE",{});var G0t=s(PTe);B5r=r(G0t,"__init__()"),G0t.forEach(t),I5r=r(GOe," (throws an error)."),GOe.forEach(t),N5r=i(Rl),It=n(Rl,"DIV",{class:!0});var nw=s(It);T(v8.$$.fragment,nw),q5r=i(nw),BTe=n(nw,"P",{});var O0t=s(BTe);j5r=r(O0t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),O0t.forEach(t),D5r=i(nw),bc=n(nw,"P",{});var doe=s(bc);G5r=r(doe,`Note:
Loading a model from its configuration file does `),ITe=n(doe,"STRONG",{});var V0t=s(ITe);O5r=r(V0t,"not"),V0t.forEach(t),V5r=r(doe,` load the model weights. It only affects the
model\u2019s configuration. Use `),cJ=n(doe,"A",{href:!0});var X0t=s(cJ);X5r=r(X0t,"from_pretrained()"),X0t.forEach(t),z5r=r(doe," to load the model weights."),doe.forEach(t),W5r=i(nw),T(B4.$$.fragment,nw),nw.forEach(t),Q5r=i(Rl),Pr=n(Rl,"DIV",{class:!0});var Pl=s(Pr);T(F8.$$.fragment,Pl),H5r=i(Pl),NTe=n(Pl,"P",{});var z0t=s(NTe);U5r=r(z0t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),z0t.forEach(t),J5r=i(Pl),dn=n(Pl,"P",{});var sw=s(dn);Y5r=r(sw,"The model class to instantiate is selected based on the "),qTe=n(sw,"CODE",{});var W0t=s(qTe);K5r=r(W0t,"model_type"),W0t.forEach(t),Z5r=r(sw,` property of the config object (either
passed as an argument or loaded from `),jTe=n(sw,"CODE",{});var Q0t=s(jTe);e3r=r(Q0t,"pretrained_model_name_or_path"),Q0t.forEach(t),o3r=r(sw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),DTe=n(sw,"CODE",{});var H0t=s(DTe);r3r=r(H0t,"pretrained_model_name_or_path"),H0t.forEach(t),t3r=r(sw,":"),sw.forEach(t),a3r=i(Pl),GTe=n(Pl,"UL",{});var U0t=s(GTe);I4=n(U0t,"LI",{});var vIe=s(I4);OTe=n(vIe,"STRONG",{});var J0t=s(OTe);n3r=r(J0t,"tapas"),J0t.forEach(t),s3r=r(vIe," \u2014 "),fJ=n(vIe,"A",{href:!0});var Y0t=s(fJ);l3r=r(Y0t,"TFTapasForQuestionAnswering"),Y0t.forEach(t),i3r=r(vIe," (TAPAS model)"),vIe.forEach(t),U0t.forEach(t),d3r=i(Pl),T(N4.$$.fragment,Pl),Pl.forEach(t),Rl.forEach(t),BDe=i(f),vc=n(f,"H2",{class:!0});var OOe=s(vc);q4=n(OOe,"A",{id:!0,class:!0,href:!0});var K0t=s(q4);VTe=n(K0t,"SPAN",{});var Z0t=s(VTe);T(T8.$$.fragment,Z0t),Z0t.forEach(t),K0t.forEach(t),c3r=i(OOe),XTe=n(OOe,"SPAN",{});var ewt=s(XTe);f3r=r(ewt,"TFAutoModelForTokenClassification"),ewt.forEach(t),OOe.forEach(t),IDe=i(f),lr=n(f,"DIV",{class:!0});var Bl=s(lr);T(M8.$$.fragment,Bl),m3r=i(Bl),Fc=n(Bl,"P",{});var coe=s(Fc);g3r=r(coe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),mJ=n(coe,"A",{href:!0});var owt=s(mJ);h3r=r(owt,"from_pretrained()"),owt.forEach(t),p3r=r(coe," class method or the "),gJ=n(coe,"A",{href:!0});var rwt=s(gJ);_3r=r(rwt,"from_config()"),rwt.forEach(t),u3r=r(coe,` class
method.`),coe.forEach(t),b3r=i(Bl),E8=n(Bl,"P",{});var VOe=s(E8);v3r=r(VOe,"This class cannot be instantiated directly using "),zTe=n(VOe,"CODE",{});var twt=s(zTe);F3r=r(twt,"__init__()"),twt.forEach(t),T3r=r(VOe," (throws an error)."),VOe.forEach(t),M3r=i(Bl),Nt=n(Bl,"DIV",{class:!0});var lw=s(Nt);T(C8.$$.fragment,lw),E3r=i(lw),WTe=n(lw,"P",{});var awt=s(WTe);C3r=r(awt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),awt.forEach(t),w3r=i(lw),Tc=n(lw,"P",{});var foe=s(Tc);A3r=r(foe,`Note:
Loading a model from its configuration file does `),QTe=n(foe,"STRONG",{});var nwt=s(QTe);L3r=r(nwt,"not"),nwt.forEach(t),y3r=r(foe,` load the model weights. It only affects the
model\u2019s configuration. Use `),hJ=n(foe,"A",{href:!0});var swt=s(hJ);x3r=r(swt,"from_pretrained()"),swt.forEach(t),$3r=r(foe," to load the model weights."),foe.forEach(t),k3r=i(lw),T(j4.$$.fragment,lw),lw.forEach(t),S3r=i(Bl),Br=n(Bl,"DIV",{class:!0});var Il=s(Br);T(w8.$$.fragment,Il),R3r=i(Il),HTe=n(Il,"P",{});var lwt=s(HTe);P3r=r(lwt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),lwt.forEach(t),B3r=i(Il),cn=n(Il,"P",{});var iw=s(cn);I3r=r(iw,"The model class to instantiate is selected based on the "),UTe=n(iw,"CODE",{});var iwt=s(UTe);N3r=r(iwt,"model_type"),iwt.forEach(t),q3r=r(iw,` property of the config object (either
passed as an argument or loaded from `),JTe=n(iw,"CODE",{});var dwt=s(JTe);j3r=r(dwt,"pretrained_model_name_or_path"),dwt.forEach(t),D3r=r(iw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),YTe=n(iw,"CODE",{});var cwt=s(YTe);G3r=r(cwt,"pretrained_model_name_or_path"),cwt.forEach(t),O3r=r(iw,":"),iw.forEach(t),V3r=i(Il),de=n(Il,"UL",{});var me=s(de);D4=n(me,"LI",{});var FIe=s(D4);KTe=n(FIe,"STRONG",{});var fwt=s(KTe);X3r=r(fwt,"albert"),fwt.forEach(t),z3r=r(FIe," \u2014 "),pJ=n(FIe,"A",{href:!0});var mwt=s(pJ);W3r=r(mwt,"TFAlbertForTokenClassification"),mwt.forEach(t),Q3r=r(FIe," (ALBERT model)"),FIe.forEach(t),H3r=i(me),G4=n(me,"LI",{});var TIe=s(G4);ZTe=n(TIe,"STRONG",{});var gwt=s(ZTe);U3r=r(gwt,"bert"),gwt.forEach(t),J3r=r(TIe," \u2014 "),_J=n(TIe,"A",{href:!0});var hwt=s(_J);Y3r=r(hwt,"TFBertForTokenClassification"),hwt.forEach(t),K3r=r(TIe," (BERT model)"),TIe.forEach(t),Z3r=i(me),O4=n(me,"LI",{});var MIe=s(O4);e7e=n(MIe,"STRONG",{});var pwt=s(e7e);e0r=r(pwt,"camembert"),pwt.forEach(t),o0r=r(MIe," \u2014 "),uJ=n(MIe,"A",{href:!0});var _wt=s(uJ);r0r=r(_wt,"TFCamembertForTokenClassification"),_wt.forEach(t),t0r=r(MIe," (CamemBERT model)"),MIe.forEach(t),a0r=i(me),V4=n(me,"LI",{});var EIe=s(V4);o7e=n(EIe,"STRONG",{});var uwt=s(o7e);n0r=r(uwt,"convbert"),uwt.forEach(t),s0r=r(EIe," \u2014 "),bJ=n(EIe,"A",{href:!0});var bwt=s(bJ);l0r=r(bwt,"TFConvBertForTokenClassification"),bwt.forEach(t),i0r=r(EIe," (ConvBERT model)"),EIe.forEach(t),d0r=i(me),X4=n(me,"LI",{});var CIe=s(X4);r7e=n(CIe,"STRONG",{});var vwt=s(r7e);c0r=r(vwt,"deberta"),vwt.forEach(t),f0r=r(CIe," \u2014 "),vJ=n(CIe,"A",{href:!0});var Fwt=s(vJ);m0r=r(Fwt,"TFDebertaForTokenClassification"),Fwt.forEach(t),g0r=r(CIe," (DeBERTa model)"),CIe.forEach(t),h0r=i(me),z4=n(me,"LI",{});var wIe=s(z4);t7e=n(wIe,"STRONG",{});var Twt=s(t7e);p0r=r(Twt,"deberta-v2"),Twt.forEach(t),_0r=r(wIe," \u2014 "),FJ=n(wIe,"A",{href:!0});var Mwt=s(FJ);u0r=r(Mwt,"TFDebertaV2ForTokenClassification"),Mwt.forEach(t),b0r=r(wIe," (DeBERTa-v2 model)"),wIe.forEach(t),v0r=i(me),W4=n(me,"LI",{});var AIe=s(W4);a7e=n(AIe,"STRONG",{});var Ewt=s(a7e);F0r=r(Ewt,"distilbert"),Ewt.forEach(t),T0r=r(AIe," \u2014 "),TJ=n(AIe,"A",{href:!0});var Cwt=s(TJ);M0r=r(Cwt,"TFDistilBertForTokenClassification"),Cwt.forEach(t),E0r=r(AIe," (DistilBERT model)"),AIe.forEach(t),C0r=i(me),Q4=n(me,"LI",{});var LIe=s(Q4);n7e=n(LIe,"STRONG",{});var wwt=s(n7e);w0r=r(wwt,"electra"),wwt.forEach(t),A0r=r(LIe," \u2014 "),MJ=n(LIe,"A",{href:!0});var Awt=s(MJ);L0r=r(Awt,"TFElectraForTokenClassification"),Awt.forEach(t),y0r=r(LIe," (ELECTRA model)"),LIe.forEach(t),x0r=i(me),H4=n(me,"LI",{});var yIe=s(H4);s7e=n(yIe,"STRONG",{});var Lwt=s(s7e);$0r=r(Lwt,"flaubert"),Lwt.forEach(t),k0r=r(yIe," \u2014 "),EJ=n(yIe,"A",{href:!0});var ywt=s(EJ);S0r=r(ywt,"TFFlaubertForTokenClassification"),ywt.forEach(t),R0r=r(yIe," (FlauBERT model)"),yIe.forEach(t),P0r=i(me),U4=n(me,"LI",{});var xIe=s(U4);l7e=n(xIe,"STRONG",{});var xwt=s(l7e);B0r=r(xwt,"funnel"),xwt.forEach(t),I0r=r(xIe," \u2014 "),CJ=n(xIe,"A",{href:!0});var $wt=s(CJ);N0r=r($wt,"TFFunnelForTokenClassification"),$wt.forEach(t),q0r=r(xIe," (Funnel Transformer model)"),xIe.forEach(t),j0r=i(me),J4=n(me,"LI",{});var $Ie=s(J4);i7e=n($Ie,"STRONG",{});var kwt=s(i7e);D0r=r(kwt,"layoutlm"),kwt.forEach(t),G0r=r($Ie," \u2014 "),wJ=n($Ie,"A",{href:!0});var Swt=s(wJ);O0r=r(Swt,"TFLayoutLMForTokenClassification"),Swt.forEach(t),V0r=r($Ie," (LayoutLM model)"),$Ie.forEach(t),X0r=i(me),Y4=n(me,"LI",{});var kIe=s(Y4);d7e=n(kIe,"STRONG",{});var Rwt=s(d7e);z0r=r(Rwt,"longformer"),Rwt.forEach(t),W0r=r(kIe," \u2014 "),AJ=n(kIe,"A",{href:!0});var Pwt=s(AJ);Q0r=r(Pwt,"TFLongformerForTokenClassification"),Pwt.forEach(t),H0r=r(kIe," (Longformer model)"),kIe.forEach(t),U0r=i(me),K4=n(me,"LI",{});var SIe=s(K4);c7e=n(SIe,"STRONG",{});var Bwt=s(c7e);J0r=r(Bwt,"mobilebert"),Bwt.forEach(t),Y0r=r(SIe," \u2014 "),LJ=n(SIe,"A",{href:!0});var Iwt=s(LJ);K0r=r(Iwt,"TFMobileBertForTokenClassification"),Iwt.forEach(t),Z0r=r(SIe," (MobileBERT model)"),SIe.forEach(t),ewr=i(me),Z4=n(me,"LI",{});var RIe=s(Z4);f7e=n(RIe,"STRONG",{});var Nwt=s(f7e);owr=r(Nwt,"mpnet"),Nwt.forEach(t),rwr=r(RIe," \u2014 "),yJ=n(RIe,"A",{href:!0});var qwt=s(yJ);twr=r(qwt,"TFMPNetForTokenClassification"),qwt.forEach(t),awr=r(RIe," (MPNet model)"),RIe.forEach(t),nwr=i(me),eE=n(me,"LI",{});var PIe=s(eE);m7e=n(PIe,"STRONG",{});var jwt=s(m7e);swr=r(jwt,"rembert"),jwt.forEach(t),lwr=r(PIe," \u2014 "),xJ=n(PIe,"A",{href:!0});var Dwt=s(xJ);iwr=r(Dwt,"TFRemBertForTokenClassification"),Dwt.forEach(t),dwr=r(PIe," (RemBERT model)"),PIe.forEach(t),cwr=i(me),oE=n(me,"LI",{});var BIe=s(oE);g7e=n(BIe,"STRONG",{});var Gwt=s(g7e);fwr=r(Gwt,"roberta"),Gwt.forEach(t),mwr=r(BIe," \u2014 "),$J=n(BIe,"A",{href:!0});var Owt=s($J);gwr=r(Owt,"TFRobertaForTokenClassification"),Owt.forEach(t),hwr=r(BIe," (RoBERTa model)"),BIe.forEach(t),pwr=i(me),rE=n(me,"LI",{});var IIe=s(rE);h7e=n(IIe,"STRONG",{});var Vwt=s(h7e);_wr=r(Vwt,"roformer"),Vwt.forEach(t),uwr=r(IIe," \u2014 "),kJ=n(IIe,"A",{href:!0});var Xwt=s(kJ);bwr=r(Xwt,"TFRoFormerForTokenClassification"),Xwt.forEach(t),vwr=r(IIe," (RoFormer model)"),IIe.forEach(t),Fwr=i(me),tE=n(me,"LI",{});var NIe=s(tE);p7e=n(NIe,"STRONG",{});var zwt=s(p7e);Twr=r(zwt,"xlm"),zwt.forEach(t),Mwr=r(NIe," \u2014 "),SJ=n(NIe,"A",{href:!0});var Wwt=s(SJ);Ewr=r(Wwt,"TFXLMForTokenClassification"),Wwt.forEach(t),Cwr=r(NIe," (XLM model)"),NIe.forEach(t),wwr=i(me),aE=n(me,"LI",{});var qIe=s(aE);_7e=n(qIe,"STRONG",{});var Qwt=s(_7e);Awr=r(Qwt,"xlm-roberta"),Qwt.forEach(t),Lwr=r(qIe," \u2014 "),RJ=n(qIe,"A",{href:!0});var Hwt=s(RJ);ywr=r(Hwt,"TFXLMRobertaForTokenClassification"),Hwt.forEach(t),xwr=r(qIe," (XLM-RoBERTa model)"),qIe.forEach(t),$wr=i(me),nE=n(me,"LI",{});var jIe=s(nE);u7e=n(jIe,"STRONG",{});var Uwt=s(u7e);kwr=r(Uwt,"xlnet"),Uwt.forEach(t),Swr=r(jIe," \u2014 "),PJ=n(jIe,"A",{href:!0});var Jwt=s(PJ);Rwr=r(Jwt,"TFXLNetForTokenClassification"),Jwt.forEach(t),Pwr=r(jIe," (XLNet model)"),jIe.forEach(t),me.forEach(t),Bwr=i(Il),T(sE.$$.fragment,Il),Il.forEach(t),Bl.forEach(t),NDe=i(f),Mc=n(f,"H2",{class:!0});var XOe=s(Mc);lE=n(XOe,"A",{id:!0,class:!0,href:!0});var Ywt=s(lE);b7e=n(Ywt,"SPAN",{});var Kwt=s(b7e);T(A8.$$.fragment,Kwt),Kwt.forEach(t),Ywt.forEach(t),Iwr=i(XOe),v7e=n(XOe,"SPAN",{});var Zwt=s(v7e);Nwr=r(Zwt,"TFAutoModelForQuestionAnswering"),Zwt.forEach(t),XOe.forEach(t),qDe=i(f),ir=n(f,"DIV",{class:!0});var Nl=s(ir);T(L8.$$.fragment,Nl),qwr=i(Nl),Ec=n(Nl,"P",{});var moe=s(Ec);jwr=r(moe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),BJ=n(moe,"A",{href:!0});var eAt=s(BJ);Dwr=r(eAt,"from_pretrained()"),eAt.forEach(t),Gwr=r(moe," class method or the "),IJ=n(moe,"A",{href:!0});var oAt=s(IJ);Owr=r(oAt,"from_config()"),oAt.forEach(t),Vwr=r(moe,` class
method.`),moe.forEach(t),Xwr=i(Nl),y8=n(Nl,"P",{});var zOe=s(y8);zwr=r(zOe,"This class cannot be instantiated directly using "),F7e=n(zOe,"CODE",{});var rAt=s(F7e);Wwr=r(rAt,"__init__()"),rAt.forEach(t),Qwr=r(zOe," (throws an error)."),zOe.forEach(t),Hwr=i(Nl),qt=n(Nl,"DIV",{class:!0});var dw=s(qt);T(x8.$$.fragment,dw),Uwr=i(dw),T7e=n(dw,"P",{});var tAt=s(T7e);Jwr=r(tAt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),tAt.forEach(t),Ywr=i(dw),Cc=n(dw,"P",{});var goe=s(Cc);Kwr=r(goe,`Note:
Loading a model from its configuration file does `),M7e=n(goe,"STRONG",{});var aAt=s(M7e);Zwr=r(aAt,"not"),aAt.forEach(t),eAr=r(goe,` load the model weights. It only affects the
model\u2019s configuration. Use `),NJ=n(goe,"A",{href:!0});var nAt=s(NJ);oAr=r(nAt,"from_pretrained()"),nAt.forEach(t),rAr=r(goe," to load the model weights."),goe.forEach(t),tAr=i(dw),T(iE.$$.fragment,dw),dw.forEach(t),aAr=i(Nl),Ir=n(Nl,"DIV",{class:!0});var ql=s(Ir);T($8.$$.fragment,ql),nAr=i(ql),E7e=n(ql,"P",{});var sAt=s(E7e);sAr=r(sAt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),sAt.forEach(t),lAr=i(ql),fn=n(ql,"P",{});var cw=s(fn);iAr=r(cw,"The model class to instantiate is selected based on the "),C7e=n(cw,"CODE",{});var lAt=s(C7e);dAr=r(lAt,"model_type"),lAt.forEach(t),cAr=r(cw,` property of the config object (either
passed as an argument or loaded from `),w7e=n(cw,"CODE",{});var iAt=s(w7e);fAr=r(iAt,"pretrained_model_name_or_path"),iAt.forEach(t),mAr=r(cw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A7e=n(cw,"CODE",{});var dAt=s(A7e);gAr=r(dAt,"pretrained_model_name_or_path"),dAt.forEach(t),hAr=r(cw,":"),cw.forEach(t),pAr=i(ql),ce=n(ql,"UL",{});var ge=s(ce);dE=n(ge,"LI",{});var DIe=s(dE);L7e=n(DIe,"STRONG",{});var cAt=s(L7e);_Ar=r(cAt,"albert"),cAt.forEach(t),uAr=r(DIe," \u2014 "),qJ=n(DIe,"A",{href:!0});var fAt=s(qJ);bAr=r(fAt,"TFAlbertForQuestionAnswering"),fAt.forEach(t),vAr=r(DIe," (ALBERT model)"),DIe.forEach(t),FAr=i(ge),cE=n(ge,"LI",{});var GIe=s(cE);y7e=n(GIe,"STRONG",{});var mAt=s(y7e);TAr=r(mAt,"bert"),mAt.forEach(t),MAr=r(GIe," \u2014 "),jJ=n(GIe,"A",{href:!0});var gAt=s(jJ);EAr=r(gAt,"TFBertForQuestionAnswering"),gAt.forEach(t),CAr=r(GIe," (BERT model)"),GIe.forEach(t),wAr=i(ge),fE=n(ge,"LI",{});var OIe=s(fE);x7e=n(OIe,"STRONG",{});var hAt=s(x7e);AAr=r(hAt,"camembert"),hAt.forEach(t),LAr=r(OIe," \u2014 "),DJ=n(OIe,"A",{href:!0});var pAt=s(DJ);yAr=r(pAt,"TFCamembertForQuestionAnswering"),pAt.forEach(t),xAr=r(OIe," (CamemBERT model)"),OIe.forEach(t),$Ar=i(ge),mE=n(ge,"LI",{});var VIe=s(mE);$7e=n(VIe,"STRONG",{});var _At=s($7e);kAr=r(_At,"convbert"),_At.forEach(t),SAr=r(VIe," \u2014 "),GJ=n(VIe,"A",{href:!0});var uAt=s(GJ);RAr=r(uAt,"TFConvBertForQuestionAnswering"),uAt.forEach(t),PAr=r(VIe," (ConvBERT model)"),VIe.forEach(t),BAr=i(ge),gE=n(ge,"LI",{});var XIe=s(gE);k7e=n(XIe,"STRONG",{});var bAt=s(k7e);IAr=r(bAt,"deberta"),bAt.forEach(t),NAr=r(XIe," \u2014 "),OJ=n(XIe,"A",{href:!0});var vAt=s(OJ);qAr=r(vAt,"TFDebertaForQuestionAnswering"),vAt.forEach(t),jAr=r(XIe," (DeBERTa model)"),XIe.forEach(t),DAr=i(ge),hE=n(ge,"LI",{});var zIe=s(hE);S7e=n(zIe,"STRONG",{});var FAt=s(S7e);GAr=r(FAt,"deberta-v2"),FAt.forEach(t),OAr=r(zIe," \u2014 "),VJ=n(zIe,"A",{href:!0});var TAt=s(VJ);VAr=r(TAt,"TFDebertaV2ForQuestionAnswering"),TAt.forEach(t),XAr=r(zIe," (DeBERTa-v2 model)"),zIe.forEach(t),zAr=i(ge),pE=n(ge,"LI",{});var WIe=s(pE);R7e=n(WIe,"STRONG",{});var MAt=s(R7e);WAr=r(MAt,"distilbert"),MAt.forEach(t),QAr=r(WIe," \u2014 "),XJ=n(WIe,"A",{href:!0});var EAt=s(XJ);HAr=r(EAt,"TFDistilBertForQuestionAnswering"),EAt.forEach(t),UAr=r(WIe," (DistilBERT model)"),WIe.forEach(t),JAr=i(ge),_E=n(ge,"LI",{});var QIe=s(_E);P7e=n(QIe,"STRONG",{});var CAt=s(P7e);YAr=r(CAt,"electra"),CAt.forEach(t),KAr=r(QIe," \u2014 "),zJ=n(QIe,"A",{href:!0});var wAt=s(zJ);ZAr=r(wAt,"TFElectraForQuestionAnswering"),wAt.forEach(t),eLr=r(QIe," (ELECTRA model)"),QIe.forEach(t),oLr=i(ge),uE=n(ge,"LI",{});var HIe=s(uE);B7e=n(HIe,"STRONG",{});var AAt=s(B7e);rLr=r(AAt,"flaubert"),AAt.forEach(t),tLr=r(HIe," \u2014 "),WJ=n(HIe,"A",{href:!0});var LAt=s(WJ);aLr=r(LAt,"TFFlaubertForQuestionAnsweringSimple"),LAt.forEach(t),nLr=r(HIe," (FlauBERT model)"),HIe.forEach(t),sLr=i(ge),bE=n(ge,"LI",{});var UIe=s(bE);I7e=n(UIe,"STRONG",{});var yAt=s(I7e);lLr=r(yAt,"funnel"),yAt.forEach(t),iLr=r(UIe," \u2014 "),QJ=n(UIe,"A",{href:!0});var xAt=s(QJ);dLr=r(xAt,"TFFunnelForQuestionAnswering"),xAt.forEach(t),cLr=r(UIe," (Funnel Transformer model)"),UIe.forEach(t),fLr=i(ge),vE=n(ge,"LI",{});var JIe=s(vE);N7e=n(JIe,"STRONG",{});var $At=s(N7e);mLr=r($At,"gptj"),$At.forEach(t),gLr=r(JIe," \u2014 "),HJ=n(JIe,"A",{href:!0});var kAt=s(HJ);hLr=r(kAt,"TFGPTJForQuestionAnswering"),kAt.forEach(t),pLr=r(JIe," (GPT-J model)"),JIe.forEach(t),_Lr=i(ge),FE=n(ge,"LI",{});var YIe=s(FE);q7e=n(YIe,"STRONG",{});var SAt=s(q7e);uLr=r(SAt,"longformer"),SAt.forEach(t),bLr=r(YIe," \u2014 "),UJ=n(YIe,"A",{href:!0});var RAt=s(UJ);vLr=r(RAt,"TFLongformerForQuestionAnswering"),RAt.forEach(t),FLr=r(YIe," (Longformer model)"),YIe.forEach(t),TLr=i(ge),TE=n(ge,"LI",{});var KIe=s(TE);j7e=n(KIe,"STRONG",{});var PAt=s(j7e);MLr=r(PAt,"mobilebert"),PAt.forEach(t),ELr=r(KIe," \u2014 "),JJ=n(KIe,"A",{href:!0});var BAt=s(JJ);CLr=r(BAt,"TFMobileBertForQuestionAnswering"),BAt.forEach(t),wLr=r(KIe," (MobileBERT model)"),KIe.forEach(t),ALr=i(ge),ME=n(ge,"LI",{});var ZIe=s(ME);D7e=n(ZIe,"STRONG",{});var IAt=s(D7e);LLr=r(IAt,"mpnet"),IAt.forEach(t),yLr=r(ZIe," \u2014 "),YJ=n(ZIe,"A",{href:!0});var NAt=s(YJ);xLr=r(NAt,"TFMPNetForQuestionAnswering"),NAt.forEach(t),$Lr=r(ZIe," (MPNet model)"),ZIe.forEach(t),kLr=i(ge),EE=n(ge,"LI",{});var eNe=s(EE);G7e=n(eNe,"STRONG",{});var qAt=s(G7e);SLr=r(qAt,"rembert"),qAt.forEach(t),RLr=r(eNe," \u2014 "),KJ=n(eNe,"A",{href:!0});var jAt=s(KJ);PLr=r(jAt,"TFRemBertForQuestionAnswering"),jAt.forEach(t),BLr=r(eNe," (RemBERT model)"),eNe.forEach(t),ILr=i(ge),CE=n(ge,"LI",{});var oNe=s(CE);O7e=n(oNe,"STRONG",{});var DAt=s(O7e);NLr=r(DAt,"roberta"),DAt.forEach(t),qLr=r(oNe," \u2014 "),ZJ=n(oNe,"A",{href:!0});var GAt=s(ZJ);jLr=r(GAt,"TFRobertaForQuestionAnswering"),GAt.forEach(t),DLr=r(oNe," (RoBERTa model)"),oNe.forEach(t),GLr=i(ge),wE=n(ge,"LI",{});var rNe=s(wE);V7e=n(rNe,"STRONG",{});var OAt=s(V7e);OLr=r(OAt,"roformer"),OAt.forEach(t),VLr=r(rNe," \u2014 "),eY=n(rNe,"A",{href:!0});var VAt=s(eY);XLr=r(VAt,"TFRoFormerForQuestionAnswering"),VAt.forEach(t),zLr=r(rNe," (RoFormer model)"),rNe.forEach(t),WLr=i(ge),AE=n(ge,"LI",{});var tNe=s(AE);X7e=n(tNe,"STRONG",{});var XAt=s(X7e);QLr=r(XAt,"xlm"),XAt.forEach(t),HLr=r(tNe," \u2014 "),oY=n(tNe,"A",{href:!0});var zAt=s(oY);ULr=r(zAt,"TFXLMForQuestionAnsweringSimple"),zAt.forEach(t),JLr=r(tNe," (XLM model)"),tNe.forEach(t),YLr=i(ge),LE=n(ge,"LI",{});var aNe=s(LE);z7e=n(aNe,"STRONG",{});var WAt=s(z7e);KLr=r(WAt,"xlm-roberta"),WAt.forEach(t),ZLr=r(aNe," \u2014 "),rY=n(aNe,"A",{href:!0});var QAt=s(rY);eyr=r(QAt,"TFXLMRobertaForQuestionAnswering"),QAt.forEach(t),oyr=r(aNe," (XLM-RoBERTa model)"),aNe.forEach(t),ryr=i(ge),yE=n(ge,"LI",{});var nNe=s(yE);W7e=n(nNe,"STRONG",{});var HAt=s(W7e);tyr=r(HAt,"xlnet"),HAt.forEach(t),ayr=r(nNe," \u2014 "),tY=n(nNe,"A",{href:!0});var UAt=s(tY);nyr=r(UAt,"TFXLNetForQuestionAnsweringSimple"),UAt.forEach(t),syr=r(nNe," (XLNet model)"),nNe.forEach(t),ge.forEach(t),lyr=i(ql),T(xE.$$.fragment,ql),ql.forEach(t),Nl.forEach(t),jDe=i(f),wc=n(f,"H2",{class:!0});var WOe=s(wc);$E=n(WOe,"A",{id:!0,class:!0,href:!0});var JAt=s($E);Q7e=n(JAt,"SPAN",{});var YAt=s(Q7e);T(k8.$$.fragment,YAt),YAt.forEach(t),JAt.forEach(t),iyr=i(WOe),H7e=n(WOe,"SPAN",{});var KAt=s(H7e);dyr=r(KAt,"TFAutoModelForVision2Seq"),KAt.forEach(t),WOe.forEach(t),DDe=i(f),dr=n(f,"DIV",{class:!0});var jl=s(dr);T(S8.$$.fragment,jl),cyr=i(jl),Ac=n(jl,"P",{});var hoe=s(Ac);fyr=r(hoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),aY=n(hoe,"A",{href:!0});var ZAt=s(aY);myr=r(ZAt,"from_pretrained()"),ZAt.forEach(t),gyr=r(hoe," class method or the "),nY=n(hoe,"A",{href:!0});var eLt=s(nY);hyr=r(eLt,"from_config()"),eLt.forEach(t),pyr=r(hoe,` class
method.`),hoe.forEach(t),_yr=i(jl),R8=n(jl,"P",{});var QOe=s(R8);uyr=r(QOe,"This class cannot be instantiated directly using "),U7e=n(QOe,"CODE",{});var oLt=s(U7e);byr=r(oLt,"__init__()"),oLt.forEach(t),vyr=r(QOe," (throws an error)."),QOe.forEach(t),Fyr=i(jl),jt=n(jl,"DIV",{class:!0});var fw=s(jt);T(P8.$$.fragment,fw),Tyr=i(fw),J7e=n(fw,"P",{});var rLt=s(J7e);Myr=r(rLt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),rLt.forEach(t),Eyr=i(fw),Lc=n(fw,"P",{});var poe=s(Lc);Cyr=r(poe,`Note:
Loading a model from its configuration file does `),Y7e=n(poe,"STRONG",{});var tLt=s(Y7e);wyr=r(tLt,"not"),tLt.forEach(t),Ayr=r(poe,` load the model weights. It only affects the
model\u2019s configuration. Use `),sY=n(poe,"A",{href:!0});var aLt=s(sY);Lyr=r(aLt,"from_pretrained()"),aLt.forEach(t),yyr=r(poe," to load the model weights."),poe.forEach(t),xyr=i(fw),T(kE.$$.fragment,fw),fw.forEach(t),$yr=i(jl),Nr=n(jl,"DIV",{class:!0});var Dl=s(Nr);T(B8.$$.fragment,Dl),kyr=i(Dl),K7e=n(Dl,"P",{});var nLt=s(K7e);Syr=r(nLt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),nLt.forEach(t),Ryr=i(Dl),mn=n(Dl,"P",{});var mw=s(mn);Pyr=r(mw,"The model class to instantiate is selected based on the "),Z7e=n(mw,"CODE",{});var sLt=s(Z7e);Byr=r(sLt,"model_type"),sLt.forEach(t),Iyr=r(mw,` property of the config object (either
passed as an argument or loaded from `),e9e=n(mw,"CODE",{});var lLt=s(e9e);Nyr=r(lLt,"pretrained_model_name_or_path"),lLt.forEach(t),qyr=r(mw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o9e=n(mw,"CODE",{});var iLt=s(o9e);jyr=r(iLt,"pretrained_model_name_or_path"),iLt.forEach(t),Dyr=r(mw,":"),mw.forEach(t),Gyr=i(Dl),r9e=n(Dl,"UL",{});var dLt=s(r9e);SE=n(dLt,"LI",{});var sNe=s(SE);t9e=n(sNe,"STRONG",{});var cLt=s(t9e);Oyr=r(cLt,"vision-encoder-decoder"),cLt.forEach(t),Vyr=r(sNe," \u2014 "),lY=n(sNe,"A",{href:!0});var fLt=s(lY);Xyr=r(fLt,"TFVisionEncoderDecoderModel"),fLt.forEach(t),zyr=r(sNe," (Vision Encoder decoder model)"),sNe.forEach(t),dLt.forEach(t),Wyr=i(Dl),T(RE.$$.fragment,Dl),Dl.forEach(t),jl.forEach(t),GDe=i(f),yc=n(f,"H2",{class:!0});var HOe=s(yc);PE=n(HOe,"A",{id:!0,class:!0,href:!0});var mLt=s(PE);a9e=n(mLt,"SPAN",{});var gLt=s(a9e);T(I8.$$.fragment,gLt),gLt.forEach(t),mLt.forEach(t),Qyr=i(HOe),n9e=n(HOe,"SPAN",{});var hLt=s(n9e);Hyr=r(hLt,"TFAutoModelForSpeechSeq2Seq"),hLt.forEach(t),HOe.forEach(t),ODe=i(f),cr=n(f,"DIV",{class:!0});var Gl=s(cr);T(N8.$$.fragment,Gl),Uyr=i(Gl),xc=n(Gl,"P",{});var _oe=s(xc);Jyr=r(_oe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),iY=n(_oe,"A",{href:!0});var pLt=s(iY);Yyr=r(pLt,"from_pretrained()"),pLt.forEach(t),Kyr=r(_oe," class method or the "),dY=n(_oe,"A",{href:!0});var _Lt=s(dY);Zyr=r(_Lt,"from_config()"),_Lt.forEach(t),e8r=r(_oe,` class
method.`),_oe.forEach(t),o8r=i(Gl),q8=n(Gl,"P",{});var UOe=s(q8);r8r=r(UOe,"This class cannot be instantiated directly using "),s9e=n(UOe,"CODE",{});var uLt=s(s9e);t8r=r(uLt,"__init__()"),uLt.forEach(t),a8r=r(UOe," (throws an error)."),UOe.forEach(t),n8r=i(Gl),Dt=n(Gl,"DIV",{class:!0});var gw=s(Dt);T(j8.$$.fragment,gw),s8r=i(gw),l9e=n(gw,"P",{});var bLt=s(l9e);l8r=r(bLt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),bLt.forEach(t),i8r=i(gw),$c=n(gw,"P",{});var uoe=s($c);d8r=r(uoe,`Note:
Loading a model from its configuration file does `),i9e=n(uoe,"STRONG",{});var vLt=s(i9e);c8r=r(vLt,"not"),vLt.forEach(t),f8r=r(uoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),cY=n(uoe,"A",{href:!0});var FLt=s(cY);m8r=r(FLt,"from_pretrained()"),FLt.forEach(t),g8r=r(uoe," to load the model weights."),uoe.forEach(t),h8r=i(gw),T(BE.$$.fragment,gw),gw.forEach(t),p8r=i(Gl),qr=n(Gl,"DIV",{class:!0});var Ol=s(qr);T(D8.$$.fragment,Ol),_8r=i(Ol),d9e=n(Ol,"P",{});var TLt=s(d9e);u8r=r(TLt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),TLt.forEach(t),b8r=i(Ol),gn=n(Ol,"P",{});var hw=s(gn);v8r=r(hw,"The model class to instantiate is selected based on the "),c9e=n(hw,"CODE",{});var MLt=s(c9e);F8r=r(MLt,"model_type"),MLt.forEach(t),T8r=r(hw,` property of the config object (either
passed as an argument or loaded from `),f9e=n(hw,"CODE",{});var ELt=s(f9e);M8r=r(ELt,"pretrained_model_name_or_path"),ELt.forEach(t),E8r=r(hw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m9e=n(hw,"CODE",{});var CLt=s(m9e);C8r=r(CLt,"pretrained_model_name_or_path"),CLt.forEach(t),w8r=r(hw,":"),hw.forEach(t),A8r=i(Ol),g9e=n(Ol,"UL",{});var wLt=s(g9e);IE=n(wLt,"LI",{});var lNe=s(IE);h9e=n(lNe,"STRONG",{});var ALt=s(h9e);L8r=r(ALt,"speech_to_text"),ALt.forEach(t),y8r=r(lNe," \u2014 "),fY=n(lNe,"A",{href:!0});var LLt=s(fY);x8r=r(LLt,"TFSpeech2TextForConditionalGeneration"),LLt.forEach(t),$8r=r(lNe," (Speech2Text model)"),lNe.forEach(t),wLt.forEach(t),k8r=i(Ol),T(NE.$$.fragment,Ol),Ol.forEach(t),Gl.forEach(t),VDe=i(f),kc=n(f,"H2",{class:!0});var JOe=s(kc);qE=n(JOe,"A",{id:!0,class:!0,href:!0});var yLt=s(qE);p9e=n(yLt,"SPAN",{});var xLt=s(p9e);T(G8.$$.fragment,xLt),xLt.forEach(t),yLt.forEach(t),S8r=i(JOe),_9e=n(JOe,"SPAN",{});var $Lt=s(_9e);R8r=r($Lt,"FlaxAutoModel"),$Lt.forEach(t),JOe.forEach(t),XDe=i(f),fr=n(f,"DIV",{class:!0});var Vl=s(fr);T(O8.$$.fragment,Vl),P8r=i(Vl),Sc=n(Vl,"P",{});var boe=s(Sc);B8r=r(boe,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),mY=n(boe,"A",{href:!0});var kLt=s(mY);I8r=r(kLt,"from_pretrained()"),kLt.forEach(t),N8r=r(boe," class method or the "),gY=n(boe,"A",{href:!0});var SLt=s(gY);q8r=r(SLt,"from_config()"),SLt.forEach(t),j8r=r(boe,` class
method.`),boe.forEach(t),D8r=i(Vl),V8=n(Vl,"P",{});var YOe=s(V8);G8r=r(YOe,"This class cannot be instantiated directly using "),u9e=n(YOe,"CODE",{});var RLt=s(u9e);O8r=r(RLt,"__init__()"),RLt.forEach(t),V8r=r(YOe," (throws an error)."),YOe.forEach(t),X8r=i(Vl),Gt=n(Vl,"DIV",{class:!0});var pw=s(Gt);T(X8.$$.fragment,pw),z8r=i(pw),b9e=n(pw,"P",{});var PLt=s(b9e);W8r=r(PLt,"Instantiates one of the base model classes of the library from a configuration."),PLt.forEach(t),Q8r=i(pw),Rc=n(pw,"P",{});var voe=s(Rc);H8r=r(voe,`Note:
Loading a model from its configuration file does `),v9e=n(voe,"STRONG",{});var BLt=s(v9e);U8r=r(BLt,"not"),BLt.forEach(t),J8r=r(voe,` load the model weights. It only affects the
model\u2019s configuration. Use `),hY=n(voe,"A",{href:!0});var ILt=s(hY);Y8r=r(ILt,"from_pretrained()"),ILt.forEach(t),K8r=r(voe," to load the model weights."),voe.forEach(t),Z8r=i(pw),T(jE.$$.fragment,pw),pw.forEach(t),exr=i(Vl),jr=n(Vl,"DIV",{class:!0});var Xl=s(jr);T(z8.$$.fragment,Xl),oxr=i(Xl),F9e=n(Xl,"P",{});var NLt=s(F9e);rxr=r(NLt,"Instantiate one of the base model classes of the library from a pretrained model."),NLt.forEach(t),txr=i(Xl),hn=n(Xl,"P",{});var _w=s(hn);axr=r(_w,"The model class to instantiate is selected based on the "),T9e=n(_w,"CODE",{});var qLt=s(T9e);nxr=r(qLt,"model_type"),qLt.forEach(t),sxr=r(_w,` property of the config object (either
passed as an argument or loaded from `),M9e=n(_w,"CODE",{});var jLt=s(M9e);lxr=r(jLt,"pretrained_model_name_or_path"),jLt.forEach(t),ixr=r(_w,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E9e=n(_w,"CODE",{});var DLt=s(E9e);dxr=r(DLt,"pretrained_model_name_or_path"),DLt.forEach(t),cxr=r(_w,":"),_w.forEach(t),fxr=i(Xl),oe=n(Xl,"UL",{});var ae=s(oe);DE=n(ae,"LI",{});var iNe=s(DE);C9e=n(iNe,"STRONG",{});var GLt=s(C9e);mxr=r(GLt,"albert"),GLt.forEach(t),gxr=r(iNe," \u2014 "),pY=n(iNe,"A",{href:!0});var OLt=s(pY);hxr=r(OLt,"FlaxAlbertModel"),OLt.forEach(t),pxr=r(iNe," (ALBERT model)"),iNe.forEach(t),_xr=i(ae),GE=n(ae,"LI",{});var dNe=s(GE);w9e=n(dNe,"STRONG",{});var VLt=s(w9e);uxr=r(VLt,"bart"),VLt.forEach(t),bxr=r(dNe," \u2014 "),_Y=n(dNe,"A",{href:!0});var XLt=s(_Y);vxr=r(XLt,"FlaxBartModel"),XLt.forEach(t),Fxr=r(dNe," (BART model)"),dNe.forEach(t),Txr=i(ae),OE=n(ae,"LI",{});var cNe=s(OE);A9e=n(cNe,"STRONG",{});var zLt=s(A9e);Mxr=r(zLt,"beit"),zLt.forEach(t),Exr=r(cNe," \u2014 "),uY=n(cNe,"A",{href:!0});var WLt=s(uY);Cxr=r(WLt,"FlaxBeitModel"),WLt.forEach(t),wxr=r(cNe," (BEiT model)"),cNe.forEach(t),Axr=i(ae),VE=n(ae,"LI",{});var fNe=s(VE);L9e=n(fNe,"STRONG",{});var QLt=s(L9e);Lxr=r(QLt,"bert"),QLt.forEach(t),yxr=r(fNe," \u2014 "),bY=n(fNe,"A",{href:!0});var HLt=s(bY);xxr=r(HLt,"FlaxBertModel"),HLt.forEach(t),$xr=r(fNe," (BERT model)"),fNe.forEach(t),kxr=i(ae),XE=n(ae,"LI",{});var mNe=s(XE);y9e=n(mNe,"STRONG",{});var ULt=s(y9e);Sxr=r(ULt,"big_bird"),ULt.forEach(t),Rxr=r(mNe," \u2014 "),vY=n(mNe,"A",{href:!0});var JLt=s(vY);Pxr=r(JLt,"FlaxBigBirdModel"),JLt.forEach(t),Bxr=r(mNe," (BigBird model)"),mNe.forEach(t),Ixr=i(ae),zE=n(ae,"LI",{});var gNe=s(zE);x9e=n(gNe,"STRONG",{});var YLt=s(x9e);Nxr=r(YLt,"blenderbot"),YLt.forEach(t),qxr=r(gNe," \u2014 "),FY=n(gNe,"A",{href:!0});var KLt=s(FY);jxr=r(KLt,"FlaxBlenderbotModel"),KLt.forEach(t),Dxr=r(gNe," (Blenderbot model)"),gNe.forEach(t),Gxr=i(ae),WE=n(ae,"LI",{});var hNe=s(WE);$9e=n(hNe,"STRONG",{});var ZLt=s($9e);Oxr=r(ZLt,"blenderbot-small"),ZLt.forEach(t),Vxr=r(hNe," \u2014 "),TY=n(hNe,"A",{href:!0});var eyt=s(TY);Xxr=r(eyt,"FlaxBlenderbotSmallModel"),eyt.forEach(t),zxr=r(hNe," (BlenderbotSmall model)"),hNe.forEach(t),Wxr=i(ae),QE=n(ae,"LI",{});var pNe=s(QE);k9e=n(pNe,"STRONG",{});var oyt=s(k9e);Qxr=r(oyt,"clip"),oyt.forEach(t),Hxr=r(pNe," \u2014 "),MY=n(pNe,"A",{href:!0});var ryt=s(MY);Uxr=r(ryt,"FlaxCLIPModel"),ryt.forEach(t),Jxr=r(pNe," (CLIP model)"),pNe.forEach(t),Yxr=i(ae),HE=n(ae,"LI",{});var _Ne=s(HE);S9e=n(_Ne,"STRONG",{});var tyt=s(S9e);Kxr=r(tyt,"distilbert"),tyt.forEach(t),Zxr=r(_Ne," \u2014 "),EY=n(_Ne,"A",{href:!0});var ayt=s(EY);e$r=r(ayt,"FlaxDistilBertModel"),ayt.forEach(t),o$r=r(_Ne," (DistilBERT model)"),_Ne.forEach(t),r$r=i(ae),UE=n(ae,"LI",{});var uNe=s(UE);R9e=n(uNe,"STRONG",{});var nyt=s(R9e);t$r=r(nyt,"electra"),nyt.forEach(t),a$r=r(uNe," \u2014 "),CY=n(uNe,"A",{href:!0});var syt=s(CY);n$r=r(syt,"FlaxElectraModel"),syt.forEach(t),s$r=r(uNe," (ELECTRA model)"),uNe.forEach(t),l$r=i(ae),JE=n(ae,"LI",{});var bNe=s(JE);P9e=n(bNe,"STRONG",{});var lyt=s(P9e);i$r=r(lyt,"gpt2"),lyt.forEach(t),d$r=r(bNe," \u2014 "),wY=n(bNe,"A",{href:!0});var iyt=s(wY);c$r=r(iyt,"FlaxGPT2Model"),iyt.forEach(t),f$r=r(bNe," (OpenAI GPT-2 model)"),bNe.forEach(t),m$r=i(ae),YE=n(ae,"LI",{});var vNe=s(YE);B9e=n(vNe,"STRONG",{});var dyt=s(B9e);g$r=r(dyt,"gpt_neo"),dyt.forEach(t),h$r=r(vNe," \u2014 "),AY=n(vNe,"A",{href:!0});var cyt=s(AY);p$r=r(cyt,"FlaxGPTNeoModel"),cyt.forEach(t),_$r=r(vNe," (GPT Neo model)"),vNe.forEach(t),u$r=i(ae),KE=n(ae,"LI",{});var FNe=s(KE);I9e=n(FNe,"STRONG",{});var fyt=s(I9e);b$r=r(fyt,"gptj"),fyt.forEach(t),v$r=r(FNe," \u2014 "),LY=n(FNe,"A",{href:!0});var myt=s(LY);F$r=r(myt,"FlaxGPTJModel"),myt.forEach(t),T$r=r(FNe," (GPT-J model)"),FNe.forEach(t),M$r=i(ae),ZE=n(ae,"LI",{});var TNe=s(ZE);N9e=n(TNe,"STRONG",{});var gyt=s(N9e);E$r=r(gyt,"longt5"),gyt.forEach(t),C$r=r(TNe," \u2014 "),yY=n(TNe,"A",{href:!0});var hyt=s(yY);w$r=r(hyt,"FlaxLongT5Model"),hyt.forEach(t),A$r=r(TNe," (LongT5 model)"),TNe.forEach(t),L$r=i(ae),eC=n(ae,"LI",{});var MNe=s(eC);q9e=n(MNe,"STRONG",{});var pyt=s(q9e);y$r=r(pyt,"marian"),pyt.forEach(t),x$r=r(MNe," \u2014 "),xY=n(MNe,"A",{href:!0});var _yt=s(xY);$$r=r(_yt,"FlaxMarianModel"),_yt.forEach(t),k$r=r(MNe," (Marian model)"),MNe.forEach(t),S$r=i(ae),oC=n(ae,"LI",{});var ENe=s(oC);j9e=n(ENe,"STRONG",{});var uyt=s(j9e);R$r=r(uyt,"mbart"),uyt.forEach(t),P$r=r(ENe," \u2014 "),$Y=n(ENe,"A",{href:!0});var byt=s($Y);B$r=r(byt,"FlaxMBartModel"),byt.forEach(t),I$r=r(ENe," (mBART model)"),ENe.forEach(t),N$r=i(ae),rC=n(ae,"LI",{});var CNe=s(rC);D9e=n(CNe,"STRONG",{});var vyt=s(D9e);q$r=r(vyt,"mt5"),vyt.forEach(t),j$r=r(CNe," \u2014 "),kY=n(CNe,"A",{href:!0});var Fyt=s(kY);D$r=r(Fyt,"FlaxMT5Model"),Fyt.forEach(t),G$r=r(CNe," (MT5 model)"),CNe.forEach(t),O$r=i(ae),tC=n(ae,"LI",{});var wNe=s(tC);G9e=n(wNe,"STRONG",{});var Tyt=s(G9e);V$r=r(Tyt,"opt"),Tyt.forEach(t),X$r=r(wNe," \u2014 "),SY=n(wNe,"A",{href:!0});var Myt=s(SY);z$r=r(Myt,"FlaxOPTModel"),Myt.forEach(t),W$r=r(wNe," (OPT model)"),wNe.forEach(t),Q$r=i(ae),aC=n(ae,"LI",{});var ANe=s(aC);O9e=n(ANe,"STRONG",{});var Eyt=s(O9e);H$r=r(Eyt,"pegasus"),Eyt.forEach(t),U$r=r(ANe," \u2014 "),RY=n(ANe,"A",{href:!0});var Cyt=s(RY);J$r=r(Cyt,"FlaxPegasusModel"),Cyt.forEach(t),Y$r=r(ANe," (Pegasus model)"),ANe.forEach(t),K$r=i(ae),nC=n(ae,"LI",{});var LNe=s(nC);V9e=n(LNe,"STRONG",{});var wyt=s(V9e);Z$r=r(wyt,"roberta"),wyt.forEach(t),ekr=r(LNe," \u2014 "),PY=n(LNe,"A",{href:!0});var Ayt=s(PY);okr=r(Ayt,"FlaxRobertaModel"),Ayt.forEach(t),rkr=r(LNe," (RoBERTa model)"),LNe.forEach(t),tkr=i(ae),sC=n(ae,"LI",{});var yNe=s(sC);X9e=n(yNe,"STRONG",{});var Lyt=s(X9e);akr=r(Lyt,"roformer"),Lyt.forEach(t),nkr=r(yNe," \u2014 "),BY=n(yNe,"A",{href:!0});var yyt=s(BY);skr=r(yyt,"FlaxRoFormerModel"),yyt.forEach(t),lkr=r(yNe," (RoFormer model)"),yNe.forEach(t),ikr=i(ae),lC=n(ae,"LI",{});var xNe=s(lC);z9e=n(xNe,"STRONG",{});var xyt=s(z9e);dkr=r(xyt,"t5"),xyt.forEach(t),ckr=r(xNe," \u2014 "),IY=n(xNe,"A",{href:!0});var $yt=s(IY);fkr=r($yt,"FlaxT5Model"),$yt.forEach(t),mkr=r(xNe," (T5 model)"),xNe.forEach(t),gkr=i(ae),iC=n(ae,"LI",{});var $Ne=s(iC);W9e=n($Ne,"STRONG",{});var kyt=s(W9e);hkr=r(kyt,"vision-text-dual-encoder"),kyt.forEach(t),pkr=r($Ne," \u2014 "),NY=n($Ne,"A",{href:!0});var Syt=s(NY);_kr=r(Syt,"FlaxVisionTextDualEncoderModel"),Syt.forEach(t),ukr=r($Ne," (VisionTextDualEncoder model)"),$Ne.forEach(t),bkr=i(ae),dC=n(ae,"LI",{});var kNe=s(dC);Q9e=n(kNe,"STRONG",{});var Ryt=s(Q9e);vkr=r(Ryt,"vit"),Ryt.forEach(t),Fkr=r(kNe," \u2014 "),qY=n(kNe,"A",{href:!0});var Pyt=s(qY);Tkr=r(Pyt,"FlaxViTModel"),Pyt.forEach(t),Mkr=r(kNe," (ViT model)"),kNe.forEach(t),Ekr=i(ae),cC=n(ae,"LI",{});var SNe=s(cC);H9e=n(SNe,"STRONG",{});var Byt=s(H9e);Ckr=r(Byt,"wav2vec2"),Byt.forEach(t),wkr=r(SNe," \u2014 "),jY=n(SNe,"A",{href:!0});var Iyt=s(jY);Akr=r(Iyt,"FlaxWav2Vec2Model"),Iyt.forEach(t),Lkr=r(SNe," (Wav2Vec2 model)"),SNe.forEach(t),ykr=i(ae),fC=n(ae,"LI",{});var RNe=s(fC);U9e=n(RNe,"STRONG",{});var Nyt=s(U9e);xkr=r(Nyt,"xglm"),Nyt.forEach(t),$kr=r(RNe," \u2014 "),DY=n(RNe,"A",{href:!0});var qyt=s(DY);kkr=r(qyt,"FlaxXGLMModel"),qyt.forEach(t),Skr=r(RNe," (XGLM model)"),RNe.forEach(t),Rkr=i(ae),mC=n(ae,"LI",{});var PNe=s(mC);J9e=n(PNe,"STRONG",{});var jyt=s(J9e);Pkr=r(jyt,"xlm-roberta"),jyt.forEach(t),Bkr=r(PNe," \u2014 "),GY=n(PNe,"A",{href:!0});var Dyt=s(GY);Ikr=r(Dyt,"FlaxXLMRobertaModel"),Dyt.forEach(t),Nkr=r(PNe," (XLM-RoBERTa model)"),PNe.forEach(t),ae.forEach(t),qkr=i(Xl),T(gC.$$.fragment,Xl),Xl.forEach(t),Vl.forEach(t),zDe=i(f),Pc=n(f,"H2",{class:!0});var KOe=s(Pc);hC=n(KOe,"A",{id:!0,class:!0,href:!0});var Gyt=s(hC);Y9e=n(Gyt,"SPAN",{});var Oyt=s(Y9e);T(W8.$$.fragment,Oyt),Oyt.forEach(t),Gyt.forEach(t),jkr=i(KOe),K9e=n(KOe,"SPAN",{});var Vyt=s(K9e);Dkr=r(Vyt,"FlaxAutoModelForCausalLM"),Vyt.forEach(t),KOe.forEach(t),WDe=i(f),mr=n(f,"DIV",{class:!0});var zl=s(mr);T(Q8.$$.fragment,zl),Gkr=i(zl),Bc=n(zl,"P",{});var Foe=s(Bc);Okr=r(Foe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),OY=n(Foe,"A",{href:!0});var Xyt=s(OY);Vkr=r(Xyt,"from_pretrained()"),Xyt.forEach(t),Xkr=r(Foe," class method or the "),VY=n(Foe,"A",{href:!0});var zyt=s(VY);zkr=r(zyt,"from_config()"),zyt.forEach(t),Wkr=r(Foe,` class
method.`),Foe.forEach(t),Qkr=i(zl),H8=n(zl,"P",{});var ZOe=s(H8);Hkr=r(ZOe,"This class cannot be instantiated directly using "),Z9e=n(ZOe,"CODE",{});var Wyt=s(Z9e);Ukr=r(Wyt,"__init__()"),Wyt.forEach(t),Jkr=r(ZOe," (throws an error)."),ZOe.forEach(t),Ykr=i(zl),Ot=n(zl,"DIV",{class:!0});var uw=s(Ot);T(U8.$$.fragment,uw),Kkr=i(uw),eMe=n(uw,"P",{});var Qyt=s(eMe);Zkr=r(Qyt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Qyt.forEach(t),eSr=i(uw),Ic=n(uw,"P",{});var Toe=s(Ic);oSr=r(Toe,`Note:
Loading a model from its configuration file does `),oMe=n(Toe,"STRONG",{});var Hyt=s(oMe);rSr=r(Hyt,"not"),Hyt.forEach(t),tSr=r(Toe,` load the model weights. It only affects the
model\u2019s configuration. Use `),XY=n(Toe,"A",{href:!0});var Uyt=s(XY);aSr=r(Uyt,"from_pretrained()"),Uyt.forEach(t),nSr=r(Toe," to load the model weights."),Toe.forEach(t),sSr=i(uw),T(pC.$$.fragment,uw),uw.forEach(t),lSr=i(zl),Dr=n(zl,"DIV",{class:!0});var Wl=s(Dr);T(J8.$$.fragment,Wl),iSr=i(Wl),rMe=n(Wl,"P",{});var Jyt=s(rMe);dSr=r(Jyt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Jyt.forEach(t),cSr=i(Wl),pn=n(Wl,"P",{});var bw=s(pn);fSr=r(bw,"The model class to instantiate is selected based on the "),tMe=n(bw,"CODE",{});var Yyt=s(tMe);mSr=r(Yyt,"model_type"),Yyt.forEach(t),gSr=r(bw,` property of the config object (either
passed as an argument or loaded from `),aMe=n(bw,"CODE",{});var Kyt=s(aMe);hSr=r(Kyt,"pretrained_model_name_or_path"),Kyt.forEach(t),pSr=r(bw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nMe=n(bw,"CODE",{});var Zyt=s(nMe);_Sr=r(Zyt,"pretrained_model_name_or_path"),Zyt.forEach(t),uSr=r(bw,":"),bw.forEach(t),bSr=i(Wl),ye=n(Wl,"UL",{});var Ie=s(ye);_C=n(Ie,"LI",{});var BNe=s(_C);sMe=n(BNe,"STRONG",{});var e8t=s(sMe);vSr=r(e8t,"bart"),e8t.forEach(t),FSr=r(BNe," \u2014 "),zY=n(BNe,"A",{href:!0});var o8t=s(zY);TSr=r(o8t,"FlaxBartForCausalLM"),o8t.forEach(t),MSr=r(BNe," (BART model)"),BNe.forEach(t),ESr=i(Ie),uC=n(Ie,"LI",{});var INe=s(uC);lMe=n(INe,"STRONG",{});var r8t=s(lMe);CSr=r(r8t,"bert"),r8t.forEach(t),wSr=r(INe," \u2014 "),WY=n(INe,"A",{href:!0});var t8t=s(WY);ASr=r(t8t,"FlaxBertForCausalLM"),t8t.forEach(t),LSr=r(INe," (BERT model)"),INe.forEach(t),ySr=i(Ie),bC=n(Ie,"LI",{});var NNe=s(bC);iMe=n(NNe,"STRONG",{});var a8t=s(iMe);xSr=r(a8t,"big_bird"),a8t.forEach(t),$Sr=r(NNe," \u2014 "),QY=n(NNe,"A",{href:!0});var n8t=s(QY);kSr=r(n8t,"FlaxBigBirdForCausalLM"),n8t.forEach(t),SSr=r(NNe," (BigBird model)"),NNe.forEach(t),RSr=i(Ie),vC=n(Ie,"LI",{});var qNe=s(vC);dMe=n(qNe,"STRONG",{});var s8t=s(dMe);PSr=r(s8t,"electra"),s8t.forEach(t),BSr=r(qNe," \u2014 "),HY=n(qNe,"A",{href:!0});var l8t=s(HY);ISr=r(l8t,"FlaxElectraForCausalLM"),l8t.forEach(t),NSr=r(qNe," (ELECTRA model)"),qNe.forEach(t),qSr=i(Ie),FC=n(Ie,"LI",{});var jNe=s(FC);cMe=n(jNe,"STRONG",{});var i8t=s(cMe);jSr=r(i8t,"gpt2"),i8t.forEach(t),DSr=r(jNe," \u2014 "),UY=n(jNe,"A",{href:!0});var d8t=s(UY);GSr=r(d8t,"FlaxGPT2LMHeadModel"),d8t.forEach(t),OSr=r(jNe," (OpenAI GPT-2 model)"),jNe.forEach(t),VSr=i(Ie),TC=n(Ie,"LI",{});var DNe=s(TC);fMe=n(DNe,"STRONG",{});var c8t=s(fMe);XSr=r(c8t,"gpt_neo"),c8t.forEach(t),zSr=r(DNe," \u2014 "),JY=n(DNe,"A",{href:!0});var f8t=s(JY);WSr=r(f8t,"FlaxGPTNeoForCausalLM"),f8t.forEach(t),QSr=r(DNe," (GPT Neo model)"),DNe.forEach(t),HSr=i(Ie),MC=n(Ie,"LI",{});var GNe=s(MC);mMe=n(GNe,"STRONG",{});var m8t=s(mMe);USr=r(m8t,"gptj"),m8t.forEach(t),JSr=r(GNe," \u2014 "),YY=n(GNe,"A",{href:!0});var g8t=s(YY);YSr=r(g8t,"FlaxGPTJForCausalLM"),g8t.forEach(t),KSr=r(GNe," (GPT-J model)"),GNe.forEach(t),ZSr=i(Ie),EC=n(Ie,"LI",{});var ONe=s(EC);gMe=n(ONe,"STRONG",{});var h8t=s(gMe);eRr=r(h8t,"opt"),h8t.forEach(t),oRr=r(ONe," \u2014 "),KY=n(ONe,"A",{href:!0});var p8t=s(KY);rRr=r(p8t,"FlaxOPTForCausalLM"),p8t.forEach(t),tRr=r(ONe," (OPT model)"),ONe.forEach(t),aRr=i(Ie),CC=n(Ie,"LI",{});var VNe=s(CC);hMe=n(VNe,"STRONG",{});var _8t=s(hMe);nRr=r(_8t,"roberta"),_8t.forEach(t),sRr=r(VNe," \u2014 "),ZY=n(VNe,"A",{href:!0});var u8t=s(ZY);lRr=r(u8t,"FlaxRobertaForCausalLM"),u8t.forEach(t),iRr=r(VNe," (RoBERTa model)"),VNe.forEach(t),dRr=i(Ie),wC=n(Ie,"LI",{});var XNe=s(wC);pMe=n(XNe,"STRONG",{});var b8t=s(pMe);cRr=r(b8t,"xglm"),b8t.forEach(t),fRr=r(XNe," \u2014 "),eK=n(XNe,"A",{href:!0});var v8t=s(eK);mRr=r(v8t,"FlaxXGLMForCausalLM"),v8t.forEach(t),gRr=r(XNe," (XGLM model)"),XNe.forEach(t),Ie.forEach(t),hRr=i(Wl),T(AC.$$.fragment,Wl),Wl.forEach(t),zl.forEach(t),QDe=i(f),Nc=n(f,"H2",{class:!0});var eVe=s(Nc);LC=n(eVe,"A",{id:!0,class:!0,href:!0});var F8t=s(LC);_Me=n(F8t,"SPAN",{});var T8t=s(_Me);T(Y8.$$.fragment,T8t),T8t.forEach(t),F8t.forEach(t),pRr=i(eVe),uMe=n(eVe,"SPAN",{});var M8t=s(uMe);_Rr=r(M8t,"FlaxAutoModelForPreTraining"),M8t.forEach(t),eVe.forEach(t),HDe=i(f),gr=n(f,"DIV",{class:!0});var Ql=s(gr);T(K8.$$.fragment,Ql),uRr=i(Ql),qc=n(Ql,"P",{});var Moe=s(qc);bRr=r(Moe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),oK=n(Moe,"A",{href:!0});var E8t=s(oK);vRr=r(E8t,"from_pretrained()"),E8t.forEach(t),FRr=r(Moe," class method or the "),rK=n(Moe,"A",{href:!0});var C8t=s(rK);TRr=r(C8t,"from_config()"),C8t.forEach(t),MRr=r(Moe,` class
method.`),Moe.forEach(t),ERr=i(Ql),Z8=n(Ql,"P",{});var oVe=s(Z8);CRr=r(oVe,"This class cannot be instantiated directly using "),bMe=n(oVe,"CODE",{});var w8t=s(bMe);wRr=r(w8t,"__init__()"),w8t.forEach(t),ARr=r(oVe," (throws an error)."),oVe.forEach(t),LRr=i(Ql),Vt=n(Ql,"DIV",{class:!0});var vw=s(Vt);T(ex.$$.fragment,vw),yRr=i(vw),vMe=n(vw,"P",{});var A8t=s(vMe);xRr=r(A8t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),A8t.forEach(t),$Rr=i(vw),jc=n(vw,"P",{});var Eoe=s(jc);kRr=r(Eoe,`Note:
Loading a model from its configuration file does `),FMe=n(Eoe,"STRONG",{});var L8t=s(FMe);SRr=r(L8t,"not"),L8t.forEach(t),RRr=r(Eoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),tK=n(Eoe,"A",{href:!0});var y8t=s(tK);PRr=r(y8t,"from_pretrained()"),y8t.forEach(t),BRr=r(Eoe," to load the model weights."),Eoe.forEach(t),IRr=i(vw),T(yC.$$.fragment,vw),vw.forEach(t),NRr=i(Ql),Gr=n(Ql,"DIV",{class:!0});var Hl=s(Gr);T(ox.$$.fragment,Hl),qRr=i(Hl),TMe=n(Hl,"P",{});var x8t=s(TMe);jRr=r(x8t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),x8t.forEach(t),DRr=i(Hl),_n=n(Hl,"P",{});var Fw=s(_n);GRr=r(Fw,"The model class to instantiate is selected based on the "),MMe=n(Fw,"CODE",{});var $8t=s(MMe);ORr=r($8t,"model_type"),$8t.forEach(t),VRr=r(Fw,` property of the config object (either
passed as an argument or loaded from `),EMe=n(Fw,"CODE",{});var k8t=s(EMe);XRr=r(k8t,"pretrained_model_name_or_path"),k8t.forEach(t),zRr=r(Fw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),CMe=n(Fw,"CODE",{});var S8t=s(CMe);WRr=r(S8t,"pretrained_model_name_or_path"),S8t.forEach(t),QRr=r(Fw,":"),Fw.forEach(t),HRr=i(Hl),Ee=n(Hl,"UL",{});var we=s(Ee);xC=n(we,"LI",{});var zNe=s(xC);wMe=n(zNe,"STRONG",{});var R8t=s(wMe);URr=r(R8t,"albert"),R8t.forEach(t),JRr=r(zNe," \u2014 "),aK=n(zNe,"A",{href:!0});var P8t=s(aK);YRr=r(P8t,"FlaxAlbertForPreTraining"),P8t.forEach(t),KRr=r(zNe," (ALBERT model)"),zNe.forEach(t),ZRr=i(we),$C=n(we,"LI",{});var WNe=s($C);AMe=n(WNe,"STRONG",{});var B8t=s(AMe);ePr=r(B8t,"bart"),B8t.forEach(t),oPr=r(WNe," \u2014 "),nK=n(WNe,"A",{href:!0});var I8t=s(nK);rPr=r(I8t,"FlaxBartForConditionalGeneration"),I8t.forEach(t),tPr=r(WNe," (BART model)"),WNe.forEach(t),aPr=i(we),kC=n(we,"LI",{});var QNe=s(kC);LMe=n(QNe,"STRONG",{});var N8t=s(LMe);nPr=r(N8t,"bert"),N8t.forEach(t),sPr=r(QNe," \u2014 "),sK=n(QNe,"A",{href:!0});var q8t=s(sK);lPr=r(q8t,"FlaxBertForPreTraining"),q8t.forEach(t),iPr=r(QNe," (BERT model)"),QNe.forEach(t),dPr=i(we),SC=n(we,"LI",{});var HNe=s(SC);yMe=n(HNe,"STRONG",{});var j8t=s(yMe);cPr=r(j8t,"big_bird"),j8t.forEach(t),fPr=r(HNe," \u2014 "),lK=n(HNe,"A",{href:!0});var D8t=s(lK);mPr=r(D8t,"FlaxBigBirdForPreTraining"),D8t.forEach(t),gPr=r(HNe," (BigBird model)"),HNe.forEach(t),hPr=i(we),RC=n(we,"LI",{});var UNe=s(RC);xMe=n(UNe,"STRONG",{});var G8t=s(xMe);pPr=r(G8t,"electra"),G8t.forEach(t),_Pr=r(UNe," \u2014 "),iK=n(UNe,"A",{href:!0});var O8t=s(iK);uPr=r(O8t,"FlaxElectraForPreTraining"),O8t.forEach(t),bPr=r(UNe," (ELECTRA model)"),UNe.forEach(t),vPr=i(we),PC=n(we,"LI",{});var JNe=s(PC);$Me=n(JNe,"STRONG",{});var V8t=s($Me);FPr=r(V8t,"longt5"),V8t.forEach(t),TPr=r(JNe," \u2014 "),dK=n(JNe,"A",{href:!0});var X8t=s(dK);MPr=r(X8t,"FlaxLongT5ForConditionalGeneration"),X8t.forEach(t),EPr=r(JNe," (LongT5 model)"),JNe.forEach(t),CPr=i(we),BC=n(we,"LI",{});var YNe=s(BC);kMe=n(YNe,"STRONG",{});var z8t=s(kMe);wPr=r(z8t,"mbart"),z8t.forEach(t),APr=r(YNe," \u2014 "),cK=n(YNe,"A",{href:!0});var W8t=s(cK);LPr=r(W8t,"FlaxMBartForConditionalGeneration"),W8t.forEach(t),yPr=r(YNe," (mBART model)"),YNe.forEach(t),xPr=i(we),IC=n(we,"LI",{});var KNe=s(IC);SMe=n(KNe,"STRONG",{});var Q8t=s(SMe);$Pr=r(Q8t,"mt5"),Q8t.forEach(t),kPr=r(KNe," \u2014 "),fK=n(KNe,"A",{href:!0});var H8t=s(fK);SPr=r(H8t,"FlaxMT5ForConditionalGeneration"),H8t.forEach(t),RPr=r(KNe," (MT5 model)"),KNe.forEach(t),PPr=i(we),NC=n(we,"LI",{});var ZNe=s(NC);RMe=n(ZNe,"STRONG",{});var U8t=s(RMe);BPr=r(U8t,"roberta"),U8t.forEach(t),IPr=r(ZNe," \u2014 "),mK=n(ZNe,"A",{href:!0});var J8t=s(mK);NPr=r(J8t,"FlaxRobertaForMaskedLM"),J8t.forEach(t),qPr=r(ZNe," (RoBERTa model)"),ZNe.forEach(t),jPr=i(we),qC=n(we,"LI",{});var eqe=s(qC);PMe=n(eqe,"STRONG",{});var Y8t=s(PMe);DPr=r(Y8t,"roformer"),Y8t.forEach(t),GPr=r(eqe," \u2014 "),gK=n(eqe,"A",{href:!0});var K8t=s(gK);OPr=r(K8t,"FlaxRoFormerForMaskedLM"),K8t.forEach(t),VPr=r(eqe," (RoFormer model)"),eqe.forEach(t),XPr=i(we),jC=n(we,"LI",{});var oqe=s(jC);BMe=n(oqe,"STRONG",{});var Z8t=s(BMe);zPr=r(Z8t,"t5"),Z8t.forEach(t),WPr=r(oqe," \u2014 "),hK=n(oqe,"A",{href:!0});var ext=s(hK);QPr=r(ext,"FlaxT5ForConditionalGeneration"),ext.forEach(t),HPr=r(oqe," (T5 model)"),oqe.forEach(t),UPr=i(we),DC=n(we,"LI",{});var rqe=s(DC);IMe=n(rqe,"STRONG",{});var oxt=s(IMe);JPr=r(oxt,"wav2vec2"),oxt.forEach(t),YPr=r(rqe," \u2014 "),pK=n(rqe,"A",{href:!0});var rxt=s(pK);KPr=r(rxt,"FlaxWav2Vec2ForPreTraining"),rxt.forEach(t),ZPr=r(rqe," (Wav2Vec2 model)"),rqe.forEach(t),eBr=i(we),GC=n(we,"LI",{});var tqe=s(GC);NMe=n(tqe,"STRONG",{});var txt=s(NMe);oBr=r(txt,"xlm-roberta"),txt.forEach(t),rBr=r(tqe," \u2014 "),_K=n(tqe,"A",{href:!0});var axt=s(_K);tBr=r(axt,"FlaxXLMRobertaForMaskedLM"),axt.forEach(t),aBr=r(tqe," (XLM-RoBERTa model)"),tqe.forEach(t),we.forEach(t),nBr=i(Hl),T(OC.$$.fragment,Hl),Hl.forEach(t),Ql.forEach(t),UDe=i(f),Dc=n(f,"H2",{class:!0});var rVe=s(Dc);VC=n(rVe,"A",{id:!0,class:!0,href:!0});var nxt=s(VC);qMe=n(nxt,"SPAN",{});var sxt=s(qMe);T(rx.$$.fragment,sxt),sxt.forEach(t),nxt.forEach(t),sBr=i(rVe),jMe=n(rVe,"SPAN",{});var lxt=s(jMe);lBr=r(lxt,"FlaxAutoModelForMaskedLM"),lxt.forEach(t),rVe.forEach(t),JDe=i(f),hr=n(f,"DIV",{class:!0});var Ul=s(hr);T(tx.$$.fragment,Ul),iBr=i(Ul),Gc=n(Ul,"P",{});var Coe=s(Gc);dBr=r(Coe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),uK=n(Coe,"A",{href:!0});var ixt=s(uK);cBr=r(ixt,"from_pretrained()"),ixt.forEach(t),fBr=r(Coe," class method or the "),bK=n(Coe,"A",{href:!0});var dxt=s(bK);mBr=r(dxt,"from_config()"),dxt.forEach(t),gBr=r(Coe,` class
method.`),Coe.forEach(t),hBr=i(Ul),ax=n(Ul,"P",{});var tVe=s(ax);pBr=r(tVe,"This class cannot be instantiated directly using "),DMe=n(tVe,"CODE",{});var cxt=s(DMe);_Br=r(cxt,"__init__()"),cxt.forEach(t),uBr=r(tVe," (throws an error)."),tVe.forEach(t),bBr=i(Ul),Xt=n(Ul,"DIV",{class:!0});var Tw=s(Xt);T(nx.$$.fragment,Tw),vBr=i(Tw),GMe=n(Tw,"P",{});var fxt=s(GMe);FBr=r(fxt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),fxt.forEach(t),TBr=i(Tw),Oc=n(Tw,"P",{});var woe=s(Oc);MBr=r(woe,`Note:
Loading a model from its configuration file does `),OMe=n(woe,"STRONG",{});var mxt=s(OMe);EBr=r(mxt,"not"),mxt.forEach(t),CBr=r(woe,` load the model weights. It only affects the
model\u2019s configuration. Use `),vK=n(woe,"A",{href:!0});var gxt=s(vK);wBr=r(gxt,"from_pretrained()"),gxt.forEach(t),ABr=r(woe," to load the model weights."),woe.forEach(t),LBr=i(Tw),T(XC.$$.fragment,Tw),Tw.forEach(t),yBr=i(Ul),Or=n(Ul,"DIV",{class:!0});var Jl=s(Or);T(sx.$$.fragment,Jl),xBr=i(Jl),VMe=n(Jl,"P",{});var hxt=s(VMe);$Br=r(hxt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),hxt.forEach(t),kBr=i(Jl),un=n(Jl,"P",{});var Mw=s(un);SBr=r(Mw,"The model class to instantiate is selected based on the "),XMe=n(Mw,"CODE",{});var pxt=s(XMe);RBr=r(pxt,"model_type"),pxt.forEach(t),PBr=r(Mw,` property of the config object (either
passed as an argument or loaded from `),zMe=n(Mw,"CODE",{});var _xt=s(zMe);BBr=r(_xt,"pretrained_model_name_or_path"),_xt.forEach(t),IBr=r(Mw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),WMe=n(Mw,"CODE",{});var uxt=s(WMe);NBr=r(uxt,"pretrained_model_name_or_path"),uxt.forEach(t),qBr=r(Mw,":"),Mw.forEach(t),jBr=i(Jl),xe=n(Jl,"UL",{});var Ne=s(xe);zC=n(Ne,"LI",{});var aqe=s(zC);QMe=n(aqe,"STRONG",{});var bxt=s(QMe);DBr=r(bxt,"albert"),bxt.forEach(t),GBr=r(aqe," \u2014 "),FK=n(aqe,"A",{href:!0});var vxt=s(FK);OBr=r(vxt,"FlaxAlbertForMaskedLM"),vxt.forEach(t),VBr=r(aqe," (ALBERT model)"),aqe.forEach(t),XBr=i(Ne),WC=n(Ne,"LI",{});var nqe=s(WC);HMe=n(nqe,"STRONG",{});var Fxt=s(HMe);zBr=r(Fxt,"bart"),Fxt.forEach(t),WBr=r(nqe," \u2014 "),TK=n(nqe,"A",{href:!0});var Txt=s(TK);QBr=r(Txt,"FlaxBartForConditionalGeneration"),Txt.forEach(t),HBr=r(nqe," (BART model)"),nqe.forEach(t),UBr=i(Ne),QC=n(Ne,"LI",{});var sqe=s(QC);UMe=n(sqe,"STRONG",{});var Mxt=s(UMe);JBr=r(Mxt,"bert"),Mxt.forEach(t),YBr=r(sqe," \u2014 "),MK=n(sqe,"A",{href:!0});var Ext=s(MK);KBr=r(Ext,"FlaxBertForMaskedLM"),Ext.forEach(t),ZBr=r(sqe," (BERT model)"),sqe.forEach(t),eIr=i(Ne),HC=n(Ne,"LI",{});var lqe=s(HC);JMe=n(lqe,"STRONG",{});var Cxt=s(JMe);oIr=r(Cxt,"big_bird"),Cxt.forEach(t),rIr=r(lqe," \u2014 "),EK=n(lqe,"A",{href:!0});var wxt=s(EK);tIr=r(wxt,"FlaxBigBirdForMaskedLM"),wxt.forEach(t),aIr=r(lqe," (BigBird model)"),lqe.forEach(t),nIr=i(Ne),UC=n(Ne,"LI",{});var iqe=s(UC);YMe=n(iqe,"STRONG",{});var Axt=s(YMe);sIr=r(Axt,"distilbert"),Axt.forEach(t),lIr=r(iqe," \u2014 "),CK=n(iqe,"A",{href:!0});var Lxt=s(CK);iIr=r(Lxt,"FlaxDistilBertForMaskedLM"),Lxt.forEach(t),dIr=r(iqe," (DistilBERT model)"),iqe.forEach(t),cIr=i(Ne),JC=n(Ne,"LI",{});var dqe=s(JC);KMe=n(dqe,"STRONG",{});var yxt=s(KMe);fIr=r(yxt,"electra"),yxt.forEach(t),mIr=r(dqe," \u2014 "),wK=n(dqe,"A",{href:!0});var xxt=s(wK);gIr=r(xxt,"FlaxElectraForMaskedLM"),xxt.forEach(t),hIr=r(dqe," (ELECTRA model)"),dqe.forEach(t),pIr=i(Ne),YC=n(Ne,"LI",{});var cqe=s(YC);ZMe=n(cqe,"STRONG",{});var $xt=s(ZMe);_Ir=r($xt,"mbart"),$xt.forEach(t),uIr=r(cqe," \u2014 "),AK=n(cqe,"A",{href:!0});var kxt=s(AK);bIr=r(kxt,"FlaxMBartForConditionalGeneration"),kxt.forEach(t),vIr=r(cqe," (mBART model)"),cqe.forEach(t),FIr=i(Ne),KC=n(Ne,"LI",{});var fqe=s(KC);e4e=n(fqe,"STRONG",{});var Sxt=s(e4e);TIr=r(Sxt,"roberta"),Sxt.forEach(t),MIr=r(fqe," \u2014 "),LK=n(fqe,"A",{href:!0});var Rxt=s(LK);EIr=r(Rxt,"FlaxRobertaForMaskedLM"),Rxt.forEach(t),CIr=r(fqe," (RoBERTa model)"),fqe.forEach(t),wIr=i(Ne),ZC=n(Ne,"LI",{});var mqe=s(ZC);o4e=n(mqe,"STRONG",{});var Pxt=s(o4e);AIr=r(Pxt,"roformer"),Pxt.forEach(t),LIr=r(mqe," \u2014 "),yK=n(mqe,"A",{href:!0});var Bxt=s(yK);yIr=r(Bxt,"FlaxRoFormerForMaskedLM"),Bxt.forEach(t),xIr=r(mqe," (RoFormer model)"),mqe.forEach(t),$Ir=i(Ne),e5=n(Ne,"LI",{});var gqe=s(e5);r4e=n(gqe,"STRONG",{});var Ixt=s(r4e);kIr=r(Ixt,"xlm-roberta"),Ixt.forEach(t),SIr=r(gqe," \u2014 "),xK=n(gqe,"A",{href:!0});var Nxt=s(xK);RIr=r(Nxt,"FlaxXLMRobertaForMaskedLM"),Nxt.forEach(t),PIr=r(gqe," (XLM-RoBERTa model)"),gqe.forEach(t),Ne.forEach(t),BIr=i(Jl),T(o5.$$.fragment,Jl),Jl.forEach(t),Ul.forEach(t),YDe=i(f),Vc=n(f,"H2",{class:!0});var aVe=s(Vc);r5=n(aVe,"A",{id:!0,class:!0,href:!0});var qxt=s(r5);t4e=n(qxt,"SPAN",{});var jxt=s(t4e);T(lx.$$.fragment,jxt),jxt.forEach(t),qxt.forEach(t),IIr=i(aVe),a4e=n(aVe,"SPAN",{});var Dxt=s(a4e);NIr=r(Dxt,"FlaxAutoModelForSeq2SeqLM"),Dxt.forEach(t),aVe.forEach(t),KDe=i(f),pr=n(f,"DIV",{class:!0});var Yl=s(pr);T(ix.$$.fragment,Yl),qIr=i(Yl),Xc=n(Yl,"P",{});var Aoe=s(Xc);jIr=r(Aoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),$K=n(Aoe,"A",{href:!0});var Gxt=s($K);DIr=r(Gxt,"from_pretrained()"),Gxt.forEach(t),GIr=r(Aoe," class method or the "),kK=n(Aoe,"A",{href:!0});var Oxt=s(kK);OIr=r(Oxt,"from_config()"),Oxt.forEach(t),VIr=r(Aoe,` class
method.`),Aoe.forEach(t),XIr=i(Yl),dx=n(Yl,"P",{});var nVe=s(dx);zIr=r(nVe,"This class cannot be instantiated directly using "),n4e=n(nVe,"CODE",{});var Vxt=s(n4e);WIr=r(Vxt,"__init__()"),Vxt.forEach(t),QIr=r(nVe," (throws an error)."),nVe.forEach(t),HIr=i(Yl),zt=n(Yl,"DIV",{class:!0});var Ew=s(zt);T(cx.$$.fragment,Ew),UIr=i(Ew),s4e=n(Ew,"P",{});var Xxt=s(s4e);JIr=r(Xxt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Xxt.forEach(t),YIr=i(Ew),zc=n(Ew,"P",{});var Loe=s(zc);KIr=r(Loe,`Note:
Loading a model from its configuration file does `),l4e=n(Loe,"STRONG",{});var zxt=s(l4e);ZIr=r(zxt,"not"),zxt.forEach(t),eNr=r(Loe,` load the model weights. It only affects the
model\u2019s configuration. Use `),SK=n(Loe,"A",{href:!0});var Wxt=s(SK);oNr=r(Wxt,"from_pretrained()"),Wxt.forEach(t),rNr=r(Loe," to load the model weights."),Loe.forEach(t),tNr=i(Ew),T(t5.$$.fragment,Ew),Ew.forEach(t),aNr=i(Yl),Vr=n(Yl,"DIV",{class:!0});var Kl=s(Vr);T(fx.$$.fragment,Kl),nNr=i(Kl),i4e=n(Kl,"P",{});var Qxt=s(i4e);sNr=r(Qxt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Qxt.forEach(t),lNr=i(Kl),bn=n(Kl,"P",{});var Cw=s(bn);iNr=r(Cw,"The model class to instantiate is selected based on the "),d4e=n(Cw,"CODE",{});var Hxt=s(d4e);dNr=r(Hxt,"model_type"),Hxt.forEach(t),cNr=r(Cw,` property of the config object (either
passed as an argument or loaded from `),c4e=n(Cw,"CODE",{});var Uxt=s(c4e);fNr=r(Uxt,"pretrained_model_name_or_path"),Uxt.forEach(t),mNr=r(Cw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f4e=n(Cw,"CODE",{});var Jxt=s(f4e);gNr=r(Jxt,"pretrained_model_name_or_path"),Jxt.forEach(t),hNr=r(Cw,":"),Cw.forEach(t),pNr=i(Kl),$e=n(Kl,"UL",{});var qe=s($e);a5=n(qe,"LI",{});var hqe=s(a5);m4e=n(hqe,"STRONG",{});var Yxt=s(m4e);_Nr=r(Yxt,"bart"),Yxt.forEach(t),uNr=r(hqe," \u2014 "),RK=n(hqe,"A",{href:!0});var Kxt=s(RK);bNr=r(Kxt,"FlaxBartForConditionalGeneration"),Kxt.forEach(t),vNr=r(hqe," (BART model)"),hqe.forEach(t),FNr=i(qe),n5=n(qe,"LI",{});var pqe=s(n5);g4e=n(pqe,"STRONG",{});var Zxt=s(g4e);TNr=r(Zxt,"blenderbot"),Zxt.forEach(t),MNr=r(pqe," \u2014 "),PK=n(pqe,"A",{href:!0});var e$t=s(PK);ENr=r(e$t,"FlaxBlenderbotForConditionalGeneration"),e$t.forEach(t),CNr=r(pqe," (Blenderbot model)"),pqe.forEach(t),wNr=i(qe),s5=n(qe,"LI",{});var _qe=s(s5);h4e=n(_qe,"STRONG",{});var o$t=s(h4e);ANr=r(o$t,"blenderbot-small"),o$t.forEach(t),LNr=r(_qe," \u2014 "),BK=n(_qe,"A",{href:!0});var r$t=s(BK);yNr=r(r$t,"FlaxBlenderbotSmallForConditionalGeneration"),r$t.forEach(t),xNr=r(_qe," (BlenderbotSmall model)"),_qe.forEach(t),$Nr=i(qe),l5=n(qe,"LI",{});var uqe=s(l5);p4e=n(uqe,"STRONG",{});var t$t=s(p4e);kNr=r(t$t,"encoder-decoder"),t$t.forEach(t),SNr=r(uqe," \u2014 "),IK=n(uqe,"A",{href:!0});var a$t=s(IK);RNr=r(a$t,"FlaxEncoderDecoderModel"),a$t.forEach(t),PNr=r(uqe," (Encoder decoder model)"),uqe.forEach(t),BNr=i(qe),i5=n(qe,"LI",{});var bqe=s(i5);_4e=n(bqe,"STRONG",{});var n$t=s(_4e);INr=r(n$t,"longt5"),n$t.forEach(t),NNr=r(bqe," \u2014 "),NK=n(bqe,"A",{href:!0});var s$t=s(NK);qNr=r(s$t,"FlaxLongT5ForConditionalGeneration"),s$t.forEach(t),jNr=r(bqe," (LongT5 model)"),bqe.forEach(t),DNr=i(qe),d5=n(qe,"LI",{});var vqe=s(d5);u4e=n(vqe,"STRONG",{});var l$t=s(u4e);GNr=r(l$t,"marian"),l$t.forEach(t),ONr=r(vqe," \u2014 "),qK=n(vqe,"A",{href:!0});var i$t=s(qK);VNr=r(i$t,"FlaxMarianMTModel"),i$t.forEach(t),XNr=r(vqe," (Marian model)"),vqe.forEach(t),zNr=i(qe),c5=n(qe,"LI",{});var Fqe=s(c5);b4e=n(Fqe,"STRONG",{});var d$t=s(b4e);WNr=r(d$t,"mbart"),d$t.forEach(t),QNr=r(Fqe," \u2014 "),jK=n(Fqe,"A",{href:!0});var c$t=s(jK);HNr=r(c$t,"FlaxMBartForConditionalGeneration"),c$t.forEach(t),UNr=r(Fqe," (mBART model)"),Fqe.forEach(t),JNr=i(qe),f5=n(qe,"LI",{});var Tqe=s(f5);v4e=n(Tqe,"STRONG",{});var f$t=s(v4e);YNr=r(f$t,"mt5"),f$t.forEach(t),KNr=r(Tqe," \u2014 "),DK=n(Tqe,"A",{href:!0});var m$t=s(DK);ZNr=r(m$t,"FlaxMT5ForConditionalGeneration"),m$t.forEach(t),eqr=r(Tqe," (MT5 model)"),Tqe.forEach(t),oqr=i(qe),m5=n(qe,"LI",{});var Mqe=s(m5);F4e=n(Mqe,"STRONG",{});var g$t=s(F4e);rqr=r(g$t,"pegasus"),g$t.forEach(t),tqr=r(Mqe," \u2014 "),GK=n(Mqe,"A",{href:!0});var h$t=s(GK);aqr=r(h$t,"FlaxPegasusForConditionalGeneration"),h$t.forEach(t),nqr=r(Mqe," (Pegasus model)"),Mqe.forEach(t),sqr=i(qe),g5=n(qe,"LI",{});var Eqe=s(g5);T4e=n(Eqe,"STRONG",{});var p$t=s(T4e);lqr=r(p$t,"t5"),p$t.forEach(t),iqr=r(Eqe," \u2014 "),OK=n(Eqe,"A",{href:!0});var _$t=s(OK);dqr=r(_$t,"FlaxT5ForConditionalGeneration"),_$t.forEach(t),cqr=r(Eqe," (T5 model)"),Eqe.forEach(t),qe.forEach(t),fqr=i(Kl),T(h5.$$.fragment,Kl),Kl.forEach(t),Yl.forEach(t),ZDe=i(f),Wc=n(f,"H2",{class:!0});var sVe=s(Wc);p5=n(sVe,"A",{id:!0,class:!0,href:!0});var u$t=s(p5);M4e=n(u$t,"SPAN",{});var b$t=s(M4e);T(mx.$$.fragment,b$t),b$t.forEach(t),u$t.forEach(t),mqr=i(sVe),E4e=n(sVe,"SPAN",{});var v$t=s(E4e);gqr=r(v$t,"FlaxAutoModelForSequenceClassification"),v$t.forEach(t),sVe.forEach(t),eGe=i(f),_r=n(f,"DIV",{class:!0});var Zl=s(_r);T(gx.$$.fragment,Zl),hqr=i(Zl),Qc=n(Zl,"P",{});var yoe=s(Qc);pqr=r(yoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),VK=n(yoe,"A",{href:!0});var F$t=s(VK);_qr=r(F$t,"from_pretrained()"),F$t.forEach(t),uqr=r(yoe," class method or the "),XK=n(yoe,"A",{href:!0});var T$t=s(XK);bqr=r(T$t,"from_config()"),T$t.forEach(t),vqr=r(yoe,` class
method.`),yoe.forEach(t),Fqr=i(Zl),hx=n(Zl,"P",{});var lVe=s(hx);Tqr=r(lVe,"This class cannot be instantiated directly using "),C4e=n(lVe,"CODE",{});var M$t=s(C4e);Mqr=r(M$t,"__init__()"),M$t.forEach(t),Eqr=r(lVe," (throws an error)."),lVe.forEach(t),Cqr=i(Zl),Wt=n(Zl,"DIV",{class:!0});var ww=s(Wt);T(px.$$.fragment,ww),wqr=i(ww),w4e=n(ww,"P",{});var E$t=s(w4e);Aqr=r(E$t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),E$t.forEach(t),Lqr=i(ww),Hc=n(ww,"P",{});var xoe=s(Hc);yqr=r(xoe,`Note:
Loading a model from its configuration file does `),A4e=n(xoe,"STRONG",{});var C$t=s(A4e);xqr=r(C$t,"not"),C$t.forEach(t),$qr=r(xoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),zK=n(xoe,"A",{href:!0});var w$t=s(zK);kqr=r(w$t,"from_pretrained()"),w$t.forEach(t),Sqr=r(xoe," to load the model weights."),xoe.forEach(t),Rqr=i(ww),T(_5.$$.fragment,ww),ww.forEach(t),Pqr=i(Zl),Xr=n(Zl,"DIV",{class:!0});var ei=s(Xr);T(_x.$$.fragment,ei),Bqr=i(ei),L4e=n(ei,"P",{});var A$t=s(L4e);Iqr=r(A$t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),A$t.forEach(t),Nqr=i(ei),vn=n(ei,"P",{});var Aw=s(vn);qqr=r(Aw,"The model class to instantiate is selected based on the "),y4e=n(Aw,"CODE",{});var L$t=s(y4e);jqr=r(L$t,"model_type"),L$t.forEach(t),Dqr=r(Aw,` property of the config object (either
passed as an argument or loaded from `),x4e=n(Aw,"CODE",{});var y$t=s(x4e);Gqr=r(y$t,"pretrained_model_name_or_path"),y$t.forEach(t),Oqr=r(Aw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$4e=n(Aw,"CODE",{});var x$t=s($4e);Vqr=r(x$t,"pretrained_model_name_or_path"),x$t.forEach(t),Xqr=r(Aw,":"),Aw.forEach(t),zqr=i(ei),ke=n(ei,"UL",{});var je=s(ke);u5=n(je,"LI",{});var Cqe=s(u5);k4e=n(Cqe,"STRONG",{});var $$t=s(k4e);Wqr=r($$t,"albert"),$$t.forEach(t),Qqr=r(Cqe," \u2014 "),WK=n(Cqe,"A",{href:!0});var k$t=s(WK);Hqr=r(k$t,"FlaxAlbertForSequenceClassification"),k$t.forEach(t),Uqr=r(Cqe," (ALBERT model)"),Cqe.forEach(t),Jqr=i(je),b5=n(je,"LI",{});var wqe=s(b5);S4e=n(wqe,"STRONG",{});var S$t=s(S4e);Yqr=r(S$t,"bart"),S$t.forEach(t),Kqr=r(wqe," \u2014 "),QK=n(wqe,"A",{href:!0});var R$t=s(QK);Zqr=r(R$t,"FlaxBartForSequenceClassification"),R$t.forEach(t),ejr=r(wqe," (BART model)"),wqe.forEach(t),ojr=i(je),v5=n(je,"LI",{});var Aqe=s(v5);R4e=n(Aqe,"STRONG",{});var P$t=s(R4e);rjr=r(P$t,"bert"),P$t.forEach(t),tjr=r(Aqe," \u2014 "),HK=n(Aqe,"A",{href:!0});var B$t=s(HK);ajr=r(B$t,"FlaxBertForSequenceClassification"),B$t.forEach(t),njr=r(Aqe," (BERT model)"),Aqe.forEach(t),sjr=i(je),F5=n(je,"LI",{});var Lqe=s(F5);P4e=n(Lqe,"STRONG",{});var I$t=s(P4e);ljr=r(I$t,"big_bird"),I$t.forEach(t),ijr=r(Lqe," \u2014 "),UK=n(Lqe,"A",{href:!0});var N$t=s(UK);djr=r(N$t,"FlaxBigBirdForSequenceClassification"),N$t.forEach(t),cjr=r(Lqe," (BigBird model)"),Lqe.forEach(t),fjr=i(je),T5=n(je,"LI",{});var yqe=s(T5);B4e=n(yqe,"STRONG",{});var q$t=s(B4e);mjr=r(q$t,"distilbert"),q$t.forEach(t),gjr=r(yqe," \u2014 "),JK=n(yqe,"A",{href:!0});var j$t=s(JK);hjr=r(j$t,"FlaxDistilBertForSequenceClassification"),j$t.forEach(t),pjr=r(yqe," (DistilBERT model)"),yqe.forEach(t),_jr=i(je),M5=n(je,"LI",{});var xqe=s(M5);I4e=n(xqe,"STRONG",{});var D$t=s(I4e);ujr=r(D$t,"electra"),D$t.forEach(t),bjr=r(xqe," \u2014 "),YK=n(xqe,"A",{href:!0});var G$t=s(YK);vjr=r(G$t,"FlaxElectraForSequenceClassification"),G$t.forEach(t),Fjr=r(xqe," (ELECTRA model)"),xqe.forEach(t),Tjr=i(je),E5=n(je,"LI",{});var $qe=s(E5);N4e=n($qe,"STRONG",{});var O$t=s(N4e);Mjr=r(O$t,"mbart"),O$t.forEach(t),Ejr=r($qe," \u2014 "),KK=n($qe,"A",{href:!0});var V$t=s(KK);Cjr=r(V$t,"FlaxMBartForSequenceClassification"),V$t.forEach(t),wjr=r($qe," (mBART model)"),$qe.forEach(t),Ajr=i(je),C5=n(je,"LI",{});var kqe=s(C5);q4e=n(kqe,"STRONG",{});var X$t=s(q4e);Ljr=r(X$t,"roberta"),X$t.forEach(t),yjr=r(kqe," \u2014 "),ZK=n(kqe,"A",{href:!0});var z$t=s(ZK);xjr=r(z$t,"FlaxRobertaForSequenceClassification"),z$t.forEach(t),$jr=r(kqe," (RoBERTa model)"),kqe.forEach(t),kjr=i(je),w5=n(je,"LI",{});var Sqe=s(w5);j4e=n(Sqe,"STRONG",{});var W$t=s(j4e);Sjr=r(W$t,"roformer"),W$t.forEach(t),Rjr=r(Sqe," \u2014 "),eZ=n(Sqe,"A",{href:!0});var Q$t=s(eZ);Pjr=r(Q$t,"FlaxRoFormerForSequenceClassification"),Q$t.forEach(t),Bjr=r(Sqe," (RoFormer model)"),Sqe.forEach(t),Ijr=i(je),A5=n(je,"LI",{});var Rqe=s(A5);D4e=n(Rqe,"STRONG",{});var H$t=s(D4e);Njr=r(H$t,"xlm-roberta"),H$t.forEach(t),qjr=r(Rqe," \u2014 "),oZ=n(Rqe,"A",{href:!0});var U$t=s(oZ);jjr=r(U$t,"FlaxXLMRobertaForSequenceClassification"),U$t.forEach(t),Djr=r(Rqe," (XLM-RoBERTa model)"),Rqe.forEach(t),je.forEach(t),Gjr=i(ei),T(L5.$$.fragment,ei),ei.forEach(t),Zl.forEach(t),oGe=i(f),Uc=n(f,"H2",{class:!0});var iVe=s(Uc);y5=n(iVe,"A",{id:!0,class:!0,href:!0});var J$t=s(y5);G4e=n(J$t,"SPAN",{});var Y$t=s(G4e);T(ux.$$.fragment,Y$t),Y$t.forEach(t),J$t.forEach(t),Ojr=i(iVe),O4e=n(iVe,"SPAN",{});var K$t=s(O4e);Vjr=r(K$t,"FlaxAutoModelForQuestionAnswering"),K$t.forEach(t),iVe.forEach(t),rGe=i(f),ur=n(f,"DIV",{class:!0});var oi=s(ur);T(bx.$$.fragment,oi),Xjr=i(oi),Jc=n(oi,"P",{});var $oe=s(Jc);zjr=r($oe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),rZ=n($oe,"A",{href:!0});var Z$t=s(rZ);Wjr=r(Z$t,"from_pretrained()"),Z$t.forEach(t),Qjr=r($oe," class method or the "),tZ=n($oe,"A",{href:!0});var ekt=s(tZ);Hjr=r(ekt,"from_config()"),ekt.forEach(t),Ujr=r($oe,` class
method.`),$oe.forEach(t),Jjr=i(oi),vx=n(oi,"P",{});var dVe=s(vx);Yjr=r(dVe,"This class cannot be instantiated directly using "),V4e=n(dVe,"CODE",{});var okt=s(V4e);Kjr=r(okt,"__init__()"),okt.forEach(t),Zjr=r(dVe," (throws an error)."),dVe.forEach(t),eDr=i(oi),Qt=n(oi,"DIV",{class:!0});var Lw=s(Qt);T(Fx.$$.fragment,Lw),oDr=i(Lw),X4e=n(Lw,"P",{});var rkt=s(X4e);rDr=r(rkt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),rkt.forEach(t),tDr=i(Lw),Yc=n(Lw,"P",{});var koe=s(Yc);aDr=r(koe,`Note:
Loading a model from its configuration file does `),z4e=n(koe,"STRONG",{});var tkt=s(z4e);nDr=r(tkt,"not"),tkt.forEach(t),sDr=r(koe,` load the model weights. It only affects the
model\u2019s configuration. Use `),aZ=n(koe,"A",{href:!0});var akt=s(aZ);lDr=r(akt,"from_pretrained()"),akt.forEach(t),iDr=r(koe," to load the model weights."),koe.forEach(t),dDr=i(Lw),T(x5.$$.fragment,Lw),Lw.forEach(t),cDr=i(oi),zr=n(oi,"DIV",{class:!0});var ri=s(zr);T(Tx.$$.fragment,ri),fDr=i(ri),W4e=n(ri,"P",{});var nkt=s(W4e);mDr=r(nkt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),nkt.forEach(t),gDr=i(ri),Fn=n(ri,"P",{});var yw=s(Fn);hDr=r(yw,"The model class to instantiate is selected based on the "),Q4e=n(yw,"CODE",{});var skt=s(Q4e);pDr=r(skt,"model_type"),skt.forEach(t),_Dr=r(yw,` property of the config object (either
passed as an argument or loaded from `),H4e=n(yw,"CODE",{});var lkt=s(H4e);uDr=r(lkt,"pretrained_model_name_or_path"),lkt.forEach(t),bDr=r(yw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U4e=n(yw,"CODE",{});var ikt=s(U4e);vDr=r(ikt,"pretrained_model_name_or_path"),ikt.forEach(t),FDr=r(yw,":"),yw.forEach(t),TDr=i(ri),Se=n(ri,"UL",{});var De=s(Se);$5=n(De,"LI",{});var Pqe=s($5);J4e=n(Pqe,"STRONG",{});var dkt=s(J4e);MDr=r(dkt,"albert"),dkt.forEach(t),EDr=r(Pqe," \u2014 "),nZ=n(Pqe,"A",{href:!0});var ckt=s(nZ);CDr=r(ckt,"FlaxAlbertForQuestionAnswering"),ckt.forEach(t),wDr=r(Pqe," (ALBERT model)"),Pqe.forEach(t),ADr=i(De),k5=n(De,"LI",{});var Bqe=s(k5);Y4e=n(Bqe,"STRONG",{});var fkt=s(Y4e);LDr=r(fkt,"bart"),fkt.forEach(t),yDr=r(Bqe," \u2014 "),sZ=n(Bqe,"A",{href:!0});var mkt=s(sZ);xDr=r(mkt,"FlaxBartForQuestionAnswering"),mkt.forEach(t),$Dr=r(Bqe," (BART model)"),Bqe.forEach(t),kDr=i(De),S5=n(De,"LI",{});var Iqe=s(S5);K4e=n(Iqe,"STRONG",{});var gkt=s(K4e);SDr=r(gkt,"bert"),gkt.forEach(t),RDr=r(Iqe," \u2014 "),lZ=n(Iqe,"A",{href:!0});var hkt=s(lZ);PDr=r(hkt,"FlaxBertForQuestionAnswering"),hkt.forEach(t),BDr=r(Iqe," (BERT model)"),Iqe.forEach(t),IDr=i(De),R5=n(De,"LI",{});var Nqe=s(R5);Z4e=n(Nqe,"STRONG",{});var pkt=s(Z4e);NDr=r(pkt,"big_bird"),pkt.forEach(t),qDr=r(Nqe," \u2014 "),iZ=n(Nqe,"A",{href:!0});var _kt=s(iZ);jDr=r(_kt,"FlaxBigBirdForQuestionAnswering"),_kt.forEach(t),DDr=r(Nqe," (BigBird model)"),Nqe.forEach(t),GDr=i(De),P5=n(De,"LI",{});var qqe=s(P5);eEe=n(qqe,"STRONG",{});var ukt=s(eEe);ODr=r(ukt,"distilbert"),ukt.forEach(t),VDr=r(qqe," \u2014 "),dZ=n(qqe,"A",{href:!0});var bkt=s(dZ);XDr=r(bkt,"FlaxDistilBertForQuestionAnswering"),bkt.forEach(t),zDr=r(qqe," (DistilBERT model)"),qqe.forEach(t),WDr=i(De),B5=n(De,"LI",{});var jqe=s(B5);oEe=n(jqe,"STRONG",{});var vkt=s(oEe);QDr=r(vkt,"electra"),vkt.forEach(t),HDr=r(jqe," \u2014 "),cZ=n(jqe,"A",{href:!0});var Fkt=s(cZ);UDr=r(Fkt,"FlaxElectraForQuestionAnswering"),Fkt.forEach(t),JDr=r(jqe," (ELECTRA model)"),jqe.forEach(t),YDr=i(De),I5=n(De,"LI",{});var Dqe=s(I5);rEe=n(Dqe,"STRONG",{});var Tkt=s(rEe);KDr=r(Tkt,"mbart"),Tkt.forEach(t),ZDr=r(Dqe," \u2014 "),fZ=n(Dqe,"A",{href:!0});var Mkt=s(fZ);eGr=r(Mkt,"FlaxMBartForQuestionAnswering"),Mkt.forEach(t),oGr=r(Dqe," (mBART model)"),Dqe.forEach(t),rGr=i(De),N5=n(De,"LI",{});var Gqe=s(N5);tEe=n(Gqe,"STRONG",{});var Ekt=s(tEe);tGr=r(Ekt,"roberta"),Ekt.forEach(t),aGr=r(Gqe," \u2014 "),mZ=n(Gqe,"A",{href:!0});var Ckt=s(mZ);nGr=r(Ckt,"FlaxRobertaForQuestionAnswering"),Ckt.forEach(t),sGr=r(Gqe," (RoBERTa model)"),Gqe.forEach(t),lGr=i(De),q5=n(De,"LI",{});var Oqe=s(q5);aEe=n(Oqe,"STRONG",{});var wkt=s(aEe);iGr=r(wkt,"roformer"),wkt.forEach(t),dGr=r(Oqe," \u2014 "),gZ=n(Oqe,"A",{href:!0});var Akt=s(gZ);cGr=r(Akt,"FlaxRoFormerForQuestionAnswering"),Akt.forEach(t),fGr=r(Oqe," (RoFormer model)"),Oqe.forEach(t),mGr=i(De),j5=n(De,"LI",{});var Vqe=s(j5);nEe=n(Vqe,"STRONG",{});var Lkt=s(nEe);gGr=r(Lkt,"xlm-roberta"),Lkt.forEach(t),hGr=r(Vqe," \u2014 "),hZ=n(Vqe,"A",{href:!0});var ykt=s(hZ);pGr=r(ykt,"FlaxXLMRobertaForQuestionAnswering"),ykt.forEach(t),_Gr=r(Vqe," (XLM-RoBERTa model)"),Vqe.forEach(t),De.forEach(t),uGr=i(ri),T(D5.$$.fragment,ri),ri.forEach(t),oi.forEach(t),tGe=i(f),Kc=n(f,"H2",{class:!0});var cVe=s(Kc);G5=n(cVe,"A",{id:!0,class:!0,href:!0});var xkt=s(G5);sEe=n(xkt,"SPAN",{});var $kt=s(sEe);T(Mx.$$.fragment,$kt),$kt.forEach(t),xkt.forEach(t),bGr=i(cVe),lEe=n(cVe,"SPAN",{});var kkt=s(lEe);vGr=r(kkt,"FlaxAutoModelForTokenClassification"),kkt.forEach(t),cVe.forEach(t),aGe=i(f),br=n(f,"DIV",{class:!0});var ti=s(br);T(Ex.$$.fragment,ti),FGr=i(ti),Zc=n(ti,"P",{});var Soe=s(Zc);TGr=r(Soe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),pZ=n(Soe,"A",{href:!0});var Skt=s(pZ);MGr=r(Skt,"from_pretrained()"),Skt.forEach(t),EGr=r(Soe," class method or the "),_Z=n(Soe,"A",{href:!0});var Rkt=s(_Z);CGr=r(Rkt,"from_config()"),Rkt.forEach(t),wGr=r(Soe,` class
method.`),Soe.forEach(t),AGr=i(ti),Cx=n(ti,"P",{});var fVe=s(Cx);LGr=r(fVe,"This class cannot be instantiated directly using "),iEe=n(fVe,"CODE",{});var Pkt=s(iEe);yGr=r(Pkt,"__init__()"),Pkt.forEach(t),xGr=r(fVe," (throws an error)."),fVe.forEach(t),$Gr=i(ti),Ht=n(ti,"DIV",{class:!0});var xw=s(Ht);T(wx.$$.fragment,xw),kGr=i(xw),dEe=n(xw,"P",{});var Bkt=s(dEe);SGr=r(Bkt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Bkt.forEach(t),RGr=i(xw),ef=n(xw,"P",{});var Roe=s(ef);PGr=r(Roe,`Note:
Loading a model from its configuration file does `),cEe=n(Roe,"STRONG",{});var Ikt=s(cEe);BGr=r(Ikt,"not"),Ikt.forEach(t),IGr=r(Roe,` load the model weights. It only affects the
model\u2019s configuration. Use `),uZ=n(Roe,"A",{href:!0});var Nkt=s(uZ);NGr=r(Nkt,"from_pretrained()"),Nkt.forEach(t),qGr=r(Roe," to load the model weights."),Roe.forEach(t),jGr=i(xw),T(O5.$$.fragment,xw),xw.forEach(t),DGr=i(ti),Wr=n(ti,"DIV",{class:!0});var ai=s(Wr);T(Ax.$$.fragment,ai),GGr=i(ai),fEe=n(ai,"P",{});var qkt=s(fEe);OGr=r(qkt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),qkt.forEach(t),VGr=i(ai),Tn=n(ai,"P",{});var $w=s(Tn);XGr=r($w,"The model class to instantiate is selected based on the "),mEe=n($w,"CODE",{});var jkt=s(mEe);zGr=r(jkt,"model_type"),jkt.forEach(t),WGr=r($w,` property of the config object (either
passed as an argument or loaded from `),gEe=n($w,"CODE",{});var Dkt=s(gEe);QGr=r(Dkt,"pretrained_model_name_or_path"),Dkt.forEach(t),HGr=r($w,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hEe=n($w,"CODE",{});var Gkt=s(hEe);UGr=r(Gkt,"pretrained_model_name_or_path"),Gkt.forEach(t),JGr=r($w,":"),$w.forEach(t),YGr=i(ai),Oe=n(ai,"UL",{});var Fo=s(Oe);V5=n(Fo,"LI",{});var Xqe=s(V5);pEe=n(Xqe,"STRONG",{});var Okt=s(pEe);KGr=r(Okt,"albert"),Okt.forEach(t),ZGr=r(Xqe," \u2014 "),bZ=n(Xqe,"A",{href:!0});var Vkt=s(bZ);eOr=r(Vkt,"FlaxAlbertForTokenClassification"),Vkt.forEach(t),oOr=r(Xqe," (ALBERT model)"),Xqe.forEach(t),rOr=i(Fo),X5=n(Fo,"LI",{});var zqe=s(X5);_Ee=n(zqe,"STRONG",{});var Xkt=s(_Ee);tOr=r(Xkt,"bert"),Xkt.forEach(t),aOr=r(zqe," \u2014 "),vZ=n(zqe,"A",{href:!0});var zkt=s(vZ);nOr=r(zkt,"FlaxBertForTokenClassification"),zkt.forEach(t),sOr=r(zqe," (BERT model)"),zqe.forEach(t),lOr=i(Fo),z5=n(Fo,"LI",{});var Wqe=s(z5);uEe=n(Wqe,"STRONG",{});var Wkt=s(uEe);iOr=r(Wkt,"big_bird"),Wkt.forEach(t),dOr=r(Wqe," \u2014 "),FZ=n(Wqe,"A",{href:!0});var Qkt=s(FZ);cOr=r(Qkt,"FlaxBigBirdForTokenClassification"),Qkt.forEach(t),fOr=r(Wqe," (BigBird model)"),Wqe.forEach(t),mOr=i(Fo),W5=n(Fo,"LI",{});var Qqe=s(W5);bEe=n(Qqe,"STRONG",{});var Hkt=s(bEe);gOr=r(Hkt,"distilbert"),Hkt.forEach(t),hOr=r(Qqe," \u2014 "),TZ=n(Qqe,"A",{href:!0});var Ukt=s(TZ);pOr=r(Ukt,"FlaxDistilBertForTokenClassification"),Ukt.forEach(t),_Or=r(Qqe," (DistilBERT model)"),Qqe.forEach(t),uOr=i(Fo),Q5=n(Fo,"LI",{});var Hqe=s(Q5);vEe=n(Hqe,"STRONG",{});var Jkt=s(vEe);bOr=r(Jkt,"electra"),Jkt.forEach(t),vOr=r(Hqe," \u2014 "),MZ=n(Hqe,"A",{href:!0});var Ykt=s(MZ);FOr=r(Ykt,"FlaxElectraForTokenClassification"),Ykt.forEach(t),TOr=r(Hqe," (ELECTRA model)"),Hqe.forEach(t),MOr=i(Fo),H5=n(Fo,"LI",{});var Uqe=s(H5);FEe=n(Uqe,"STRONG",{});var Kkt=s(FEe);EOr=r(Kkt,"roberta"),Kkt.forEach(t),COr=r(Uqe," \u2014 "),EZ=n(Uqe,"A",{href:!0});var Zkt=s(EZ);wOr=r(Zkt,"FlaxRobertaForTokenClassification"),Zkt.forEach(t),AOr=r(Uqe," (RoBERTa model)"),Uqe.forEach(t),LOr=i(Fo),U5=n(Fo,"LI",{});var Jqe=s(U5);TEe=n(Jqe,"STRONG",{});var eSt=s(TEe);yOr=r(eSt,"roformer"),eSt.forEach(t),xOr=r(Jqe," \u2014 "),CZ=n(Jqe,"A",{href:!0});var oSt=s(CZ);$Or=r(oSt,"FlaxRoFormerForTokenClassification"),oSt.forEach(t),kOr=r(Jqe," (RoFormer model)"),Jqe.forEach(t),SOr=i(Fo),J5=n(Fo,"LI",{});var Yqe=s(J5);MEe=n(Yqe,"STRONG",{});var rSt=s(MEe);ROr=r(rSt,"xlm-roberta"),rSt.forEach(t),POr=r(Yqe," \u2014 "),wZ=n(Yqe,"A",{href:!0});var tSt=s(wZ);BOr=r(tSt,"FlaxXLMRobertaForTokenClassification"),tSt.forEach(t),IOr=r(Yqe," (XLM-RoBERTa model)"),Yqe.forEach(t),Fo.forEach(t),NOr=i(ai),T(Y5.$$.fragment,ai),ai.forEach(t),ti.forEach(t),nGe=i(f),of=n(f,"H2",{class:!0});var mVe=s(of);K5=n(mVe,"A",{id:!0,class:!0,href:!0});var aSt=s(K5);EEe=n(aSt,"SPAN",{});var nSt=s(EEe);T(Lx.$$.fragment,nSt),nSt.forEach(t),aSt.forEach(t),qOr=i(mVe),CEe=n(mVe,"SPAN",{});var sSt=s(CEe);jOr=r(sSt,"FlaxAutoModelForMultipleChoice"),sSt.forEach(t),mVe.forEach(t),sGe=i(f),vr=n(f,"DIV",{class:!0});var ni=s(vr);T(yx.$$.fragment,ni),DOr=i(ni),rf=n(ni,"P",{});var Poe=s(rf);GOr=r(Poe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),AZ=n(Poe,"A",{href:!0});var lSt=s(AZ);OOr=r(lSt,"from_pretrained()"),lSt.forEach(t),VOr=r(Poe," class method or the "),LZ=n(Poe,"A",{href:!0});var iSt=s(LZ);XOr=r(iSt,"from_config()"),iSt.forEach(t),zOr=r(Poe,` class
method.`),Poe.forEach(t),WOr=i(ni),xx=n(ni,"P",{});var gVe=s(xx);QOr=r(gVe,"This class cannot be instantiated directly using "),wEe=n(gVe,"CODE",{});var dSt=s(wEe);HOr=r(dSt,"__init__()"),dSt.forEach(t),UOr=r(gVe," (throws an error)."),gVe.forEach(t),JOr=i(ni),Ut=n(ni,"DIV",{class:!0});var kw=s(Ut);T($x.$$.fragment,kw),YOr=i(kw),AEe=n(kw,"P",{});var cSt=s(AEe);KOr=r(cSt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),cSt.forEach(t),ZOr=i(kw),tf=n(kw,"P",{});var Boe=s(tf);eVr=r(Boe,`Note:
Loading a model from its configuration file does `),LEe=n(Boe,"STRONG",{});var fSt=s(LEe);oVr=r(fSt,"not"),fSt.forEach(t),rVr=r(Boe,` load the model weights. It only affects the
model\u2019s configuration. Use `),yZ=n(Boe,"A",{href:!0});var mSt=s(yZ);tVr=r(mSt,"from_pretrained()"),mSt.forEach(t),aVr=r(Boe," to load the model weights."),Boe.forEach(t),nVr=i(kw),T(Z5.$$.fragment,kw),kw.forEach(t),sVr=i(ni),Qr=n(ni,"DIV",{class:!0});var si=s(Qr);T(kx.$$.fragment,si),lVr=i(si),yEe=n(si,"P",{});var gSt=s(yEe);iVr=r(gSt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),gSt.forEach(t),dVr=i(si),Mn=n(si,"P",{});var Sw=s(Mn);cVr=r(Sw,"The model class to instantiate is selected based on the "),xEe=n(Sw,"CODE",{});var hSt=s(xEe);fVr=r(hSt,"model_type"),hSt.forEach(t),mVr=r(Sw,` property of the config object (either
passed as an argument or loaded from `),$Ee=n(Sw,"CODE",{});var pSt=s($Ee);gVr=r(pSt,"pretrained_model_name_or_path"),pSt.forEach(t),hVr=r(Sw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kEe=n(Sw,"CODE",{});var _St=s(kEe);pVr=r(_St,"pretrained_model_name_or_path"),_St.forEach(t),_Vr=r(Sw,":"),Sw.forEach(t),uVr=i(si),Ve=n(si,"UL",{});var To=s(Ve);e3=n(To,"LI",{});var Kqe=s(e3);SEe=n(Kqe,"STRONG",{});var uSt=s(SEe);bVr=r(uSt,"albert"),uSt.forEach(t),vVr=r(Kqe," \u2014 "),xZ=n(Kqe,"A",{href:!0});var bSt=s(xZ);FVr=r(bSt,"FlaxAlbertForMultipleChoice"),bSt.forEach(t),TVr=r(Kqe," (ALBERT model)"),Kqe.forEach(t),MVr=i(To),o3=n(To,"LI",{});var Zqe=s(o3);REe=n(Zqe,"STRONG",{});var vSt=s(REe);EVr=r(vSt,"bert"),vSt.forEach(t),CVr=r(Zqe," \u2014 "),$Z=n(Zqe,"A",{href:!0});var FSt=s($Z);wVr=r(FSt,"FlaxBertForMultipleChoice"),FSt.forEach(t),AVr=r(Zqe," (BERT model)"),Zqe.forEach(t),LVr=i(To),r3=n(To,"LI",{});var eje=s(r3);PEe=n(eje,"STRONG",{});var TSt=s(PEe);yVr=r(TSt,"big_bird"),TSt.forEach(t),xVr=r(eje," \u2014 "),kZ=n(eje,"A",{href:!0});var MSt=s(kZ);$Vr=r(MSt,"FlaxBigBirdForMultipleChoice"),MSt.forEach(t),kVr=r(eje," (BigBird model)"),eje.forEach(t),SVr=i(To),t3=n(To,"LI",{});var oje=s(t3);BEe=n(oje,"STRONG",{});var ESt=s(BEe);RVr=r(ESt,"distilbert"),ESt.forEach(t),PVr=r(oje," \u2014 "),SZ=n(oje,"A",{href:!0});var CSt=s(SZ);BVr=r(CSt,"FlaxDistilBertForMultipleChoice"),CSt.forEach(t),IVr=r(oje," (DistilBERT model)"),oje.forEach(t),NVr=i(To),a3=n(To,"LI",{});var rje=s(a3);IEe=n(rje,"STRONG",{});var wSt=s(IEe);qVr=r(wSt,"electra"),wSt.forEach(t),jVr=r(rje," \u2014 "),RZ=n(rje,"A",{href:!0});var ASt=s(RZ);DVr=r(ASt,"FlaxElectraForMultipleChoice"),ASt.forEach(t),GVr=r(rje," (ELECTRA model)"),rje.forEach(t),OVr=i(To),n3=n(To,"LI",{});var tje=s(n3);NEe=n(tje,"STRONG",{});var LSt=s(NEe);VVr=r(LSt,"roberta"),LSt.forEach(t),XVr=r(tje," \u2014 "),PZ=n(tje,"A",{href:!0});var ySt=s(PZ);zVr=r(ySt,"FlaxRobertaForMultipleChoice"),ySt.forEach(t),WVr=r(tje," (RoBERTa model)"),tje.forEach(t),QVr=i(To),s3=n(To,"LI",{});var aje=s(s3);qEe=n(aje,"STRONG",{});var xSt=s(qEe);HVr=r(xSt,"roformer"),xSt.forEach(t),UVr=r(aje," \u2014 "),BZ=n(aje,"A",{href:!0});var $St=s(BZ);JVr=r($St,"FlaxRoFormerForMultipleChoice"),$St.forEach(t),YVr=r(aje," (RoFormer model)"),aje.forEach(t),KVr=i(To),l3=n(To,"LI",{});var nje=s(l3);jEe=n(nje,"STRONG",{});var kSt=s(jEe);ZVr=r(kSt,"xlm-roberta"),kSt.forEach(t),eXr=r(nje," \u2014 "),IZ=n(nje,"A",{href:!0});var SSt=s(IZ);oXr=r(SSt,"FlaxXLMRobertaForMultipleChoice"),SSt.forEach(t),rXr=r(nje," (XLM-RoBERTa model)"),nje.forEach(t),To.forEach(t),tXr=i(si),T(i3.$$.fragment,si),si.forEach(t),ni.forEach(t),lGe=i(f),af=n(f,"H2",{class:!0});var hVe=s(af);d3=n(hVe,"A",{id:!0,class:!0,href:!0});var RSt=s(d3);DEe=n(RSt,"SPAN",{});var PSt=s(DEe);T(Sx.$$.fragment,PSt),PSt.forEach(t),RSt.forEach(t),aXr=i(hVe),GEe=n(hVe,"SPAN",{});var BSt=s(GEe);nXr=r(BSt,"FlaxAutoModelForNextSentencePrediction"),BSt.forEach(t),hVe.forEach(t),iGe=i(f),Fr=n(f,"DIV",{class:!0});var li=s(Fr);T(Rx.$$.fragment,li),sXr=i(li),nf=n(li,"P",{});var Ioe=s(nf);lXr=r(Ioe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),NZ=n(Ioe,"A",{href:!0});var ISt=s(NZ);iXr=r(ISt,"from_pretrained()"),ISt.forEach(t),dXr=r(Ioe," class method or the "),qZ=n(Ioe,"A",{href:!0});var NSt=s(qZ);cXr=r(NSt,"from_config()"),NSt.forEach(t),fXr=r(Ioe,` class
method.`),Ioe.forEach(t),mXr=i(li),Px=n(li,"P",{});var pVe=s(Px);gXr=r(pVe,"This class cannot be instantiated directly using "),OEe=n(pVe,"CODE",{});var qSt=s(OEe);hXr=r(qSt,"__init__()"),qSt.forEach(t),pXr=r(pVe," (throws an error)."),pVe.forEach(t),_Xr=i(li),Jt=n(li,"DIV",{class:!0});var Rw=s(Jt);T(Bx.$$.fragment,Rw),uXr=i(Rw),VEe=n(Rw,"P",{});var jSt=s(VEe);bXr=r(jSt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),jSt.forEach(t),vXr=i(Rw),sf=n(Rw,"P",{});var Noe=s(sf);FXr=r(Noe,`Note:
Loading a model from its configuration file does `),XEe=n(Noe,"STRONG",{});var DSt=s(XEe);TXr=r(DSt,"not"),DSt.forEach(t),MXr=r(Noe,` load the model weights. It only affects the
model\u2019s configuration. Use `),jZ=n(Noe,"A",{href:!0});var GSt=s(jZ);EXr=r(GSt,"from_pretrained()"),GSt.forEach(t),CXr=r(Noe," to load the model weights."),Noe.forEach(t),wXr=i(Rw),T(c3.$$.fragment,Rw),Rw.forEach(t),AXr=i(li),Hr=n(li,"DIV",{class:!0});var ii=s(Hr);T(Ix.$$.fragment,ii),LXr=i(ii),zEe=n(ii,"P",{});var OSt=s(zEe);yXr=r(OSt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),OSt.forEach(t),xXr=i(ii),En=n(ii,"P",{});var Pw=s(En);$Xr=r(Pw,"The model class to instantiate is selected based on the "),WEe=n(Pw,"CODE",{});var VSt=s(WEe);kXr=r(VSt,"model_type"),VSt.forEach(t),SXr=r(Pw,` property of the config object (either
passed as an argument or loaded from `),QEe=n(Pw,"CODE",{});var XSt=s(QEe);RXr=r(XSt,"pretrained_model_name_or_path"),XSt.forEach(t),PXr=r(Pw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),HEe=n(Pw,"CODE",{});var zSt=s(HEe);BXr=r(zSt,"pretrained_model_name_or_path"),zSt.forEach(t),IXr=r(Pw,":"),Pw.forEach(t),NXr=i(ii),UEe=n(ii,"UL",{});var WSt=s(UEe);f3=n(WSt,"LI",{});var sje=s(f3);JEe=n(sje,"STRONG",{});var QSt=s(JEe);qXr=r(QSt,"bert"),QSt.forEach(t),jXr=r(sje," \u2014 "),DZ=n(sje,"A",{href:!0});var HSt=s(DZ);DXr=r(HSt,"FlaxBertForNextSentencePrediction"),HSt.forEach(t),GXr=r(sje," (BERT model)"),sje.forEach(t),WSt.forEach(t),OXr=i(ii),T(m3.$$.fragment,ii),ii.forEach(t),li.forEach(t),dGe=i(f),lf=n(f,"H2",{class:!0});var _Ve=s(lf);g3=n(_Ve,"A",{id:!0,class:!0,href:!0});var USt=s(g3);YEe=n(USt,"SPAN",{});var JSt=s(YEe);T(Nx.$$.fragment,JSt),JSt.forEach(t),USt.forEach(t),VXr=i(_Ve),KEe=n(_Ve,"SPAN",{});var YSt=s(KEe);XXr=r(YSt,"FlaxAutoModelForImageClassification"),YSt.forEach(t),_Ve.forEach(t),cGe=i(f),Tr=n(f,"DIV",{class:!0});var di=s(Tr);T(qx.$$.fragment,di),zXr=i(di),df=n(di,"P",{});var qoe=s(df);WXr=r(qoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),GZ=n(qoe,"A",{href:!0});var KSt=s(GZ);QXr=r(KSt,"from_pretrained()"),KSt.forEach(t),HXr=r(qoe," class method or the "),OZ=n(qoe,"A",{href:!0});var ZSt=s(OZ);UXr=r(ZSt,"from_config()"),ZSt.forEach(t),JXr=r(qoe,` class
method.`),qoe.forEach(t),YXr=i(di),jx=n(di,"P",{});var uVe=s(jx);KXr=r(uVe,"This class cannot be instantiated directly using "),ZEe=n(uVe,"CODE",{});var eRt=s(ZEe);ZXr=r(eRt,"__init__()"),eRt.forEach(t),ezr=r(uVe," (throws an error)."),uVe.forEach(t),ozr=i(di),Yt=n(di,"DIV",{class:!0});var Bw=s(Yt);T(Dx.$$.fragment,Bw),rzr=i(Bw),eCe=n(Bw,"P",{});var oRt=s(eCe);tzr=r(oRt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),oRt.forEach(t),azr=i(Bw),cf=n(Bw,"P",{});var joe=s(cf);nzr=r(joe,`Note:
Loading a model from its configuration file does `),oCe=n(joe,"STRONG",{});var rRt=s(oCe);szr=r(rRt,"not"),rRt.forEach(t),lzr=r(joe,` load the model weights. It only affects the
model\u2019s configuration. Use `),VZ=n(joe,"A",{href:!0});var tRt=s(VZ);izr=r(tRt,"from_pretrained()"),tRt.forEach(t),dzr=r(joe," to load the model weights."),joe.forEach(t),czr=i(Bw),T(h3.$$.fragment,Bw),Bw.forEach(t),fzr=i(di),Ur=n(di,"DIV",{class:!0});var ci=s(Ur);T(Gx.$$.fragment,ci),mzr=i(ci),rCe=n(ci,"P",{});var aRt=s(rCe);gzr=r(aRt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),aRt.forEach(t),hzr=i(ci),Cn=n(ci,"P",{});var Iw=s(Cn);pzr=r(Iw,"The model class to instantiate is selected based on the "),tCe=n(Iw,"CODE",{});var nRt=s(tCe);_zr=r(nRt,"model_type"),nRt.forEach(t),uzr=r(Iw,` property of the config object (either
passed as an argument or loaded from `),aCe=n(Iw,"CODE",{});var sRt=s(aCe);bzr=r(sRt,"pretrained_model_name_or_path"),sRt.forEach(t),vzr=r(Iw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nCe=n(Iw,"CODE",{});var lRt=s(nCe);Fzr=r(lRt,"pretrained_model_name_or_path"),lRt.forEach(t),Tzr=r(Iw,":"),Iw.forEach(t),Mzr=i(ci),Ox=n(ci,"UL",{});var bVe=s(Ox);p3=n(bVe,"LI",{});var lje=s(p3);sCe=n(lje,"STRONG",{});var iRt=s(sCe);Ezr=r(iRt,"beit"),iRt.forEach(t),Czr=r(lje," \u2014 "),XZ=n(lje,"A",{href:!0});var dRt=s(XZ);wzr=r(dRt,"FlaxBeitForImageClassification"),dRt.forEach(t),Azr=r(lje," (BEiT model)"),lje.forEach(t),Lzr=i(bVe),_3=n(bVe,"LI",{});var ije=s(_3);lCe=n(ije,"STRONG",{});var cRt=s(lCe);yzr=r(cRt,"vit"),cRt.forEach(t),xzr=r(ije," \u2014 "),zZ=n(ije,"A",{href:!0});var fRt=s(zZ);$zr=r(fRt,"FlaxViTForImageClassification"),fRt.forEach(t),kzr=r(ije," (ViT model)"),ije.forEach(t),bVe.forEach(t),Szr=i(ci),T(u3.$$.fragment,ci),ci.forEach(t),di.forEach(t),fGe=i(f),ff=n(f,"H2",{class:!0});var vVe=s(ff);b3=n(vVe,"A",{id:!0,class:!0,href:!0});var mRt=s(b3);iCe=n(mRt,"SPAN",{});var gRt=s(iCe);T(Vx.$$.fragment,gRt),gRt.forEach(t),mRt.forEach(t),Rzr=i(vVe),dCe=n(vVe,"SPAN",{});var hRt=s(dCe);Pzr=r(hRt,"FlaxAutoModelForVision2Seq"),hRt.forEach(t),vVe.forEach(t),mGe=i(f),Mr=n(f,"DIV",{class:!0});var fi=s(Mr);T(Xx.$$.fragment,fi),Bzr=i(fi),mf=n(fi,"P",{});var Doe=s(mf);Izr=r(Doe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),WZ=n(Doe,"A",{href:!0});var pRt=s(WZ);Nzr=r(pRt,"from_pretrained()"),pRt.forEach(t),qzr=r(Doe," class method or the "),QZ=n(Doe,"A",{href:!0});var _Rt=s(QZ);jzr=r(_Rt,"from_config()"),_Rt.forEach(t),Dzr=r(Doe,` class
method.`),Doe.forEach(t),Gzr=i(fi),zx=n(fi,"P",{});var FVe=s(zx);Ozr=r(FVe,"This class cannot be instantiated directly using "),cCe=n(FVe,"CODE",{});var uRt=s(cCe);Vzr=r(uRt,"__init__()"),uRt.forEach(t),Xzr=r(FVe," (throws an error)."),FVe.forEach(t),zzr=i(fi),Kt=n(fi,"DIV",{class:!0});var Nw=s(Kt);T(Wx.$$.fragment,Nw),Wzr=i(Nw),fCe=n(Nw,"P",{});var bRt=s(fCe);Qzr=r(bRt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),bRt.forEach(t),Hzr=i(Nw),gf=n(Nw,"P",{});var Goe=s(gf);Uzr=r(Goe,`Note:
Loading a model from its configuration file does `),mCe=n(Goe,"STRONG",{});var vRt=s(mCe);Jzr=r(vRt,"not"),vRt.forEach(t),Yzr=r(Goe,` load the model weights. It only affects the
model\u2019s configuration. Use `),HZ=n(Goe,"A",{href:!0});var FRt=s(HZ);Kzr=r(FRt,"from_pretrained()"),FRt.forEach(t),Zzr=r(Goe," to load the model weights."),Goe.forEach(t),eWr=i(Nw),T(v3.$$.fragment,Nw),Nw.forEach(t),oWr=i(fi),Jr=n(fi,"DIV",{class:!0});var mi=s(Jr);T(Qx.$$.fragment,mi),rWr=i(mi),gCe=n(mi,"P",{});var TRt=s(gCe);tWr=r(TRt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),TRt.forEach(t),aWr=i(mi),wn=n(mi,"P",{});var qw=s(wn);nWr=r(qw,"The model class to instantiate is selected based on the "),hCe=n(qw,"CODE",{});var MRt=s(hCe);sWr=r(MRt,"model_type"),MRt.forEach(t),lWr=r(qw,` property of the config object (either
passed as an argument or loaded from `),pCe=n(qw,"CODE",{});var ERt=s(pCe);iWr=r(ERt,"pretrained_model_name_or_path"),ERt.forEach(t),dWr=r(qw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_Ce=n(qw,"CODE",{});var CRt=s(_Ce);cWr=r(CRt,"pretrained_model_name_or_path"),CRt.forEach(t),fWr=r(qw,":"),qw.forEach(t),mWr=i(mi),uCe=n(mi,"UL",{});var wRt=s(uCe);F3=n(wRt,"LI",{});var dje=s(F3);bCe=n(dje,"STRONG",{});var ARt=s(bCe);gWr=r(ARt,"vision-encoder-decoder"),ARt.forEach(t),hWr=r(dje," \u2014 "),UZ=n(dje,"A",{href:!0});var LRt=s(UZ);pWr=r(LRt,"FlaxVisionEncoderDecoderModel"),LRt.forEach(t),_Wr=r(dje," (Vision Encoder decoder model)"),dje.forEach(t),wRt.forEach(t),uWr=i(mi),T(T3.$$.fragment,mi),mi.forEach(t),fi.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(kBt)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(Ln,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.AutoConfig"),c(xn,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.AutoModel"),c($n,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.AutoTokenizer"),c(vi,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertModel"),c(Tf,"id","extending-the-auto-classes"),c(Tf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Tf,"href","#extending-the-auto-classes"),c(Fi,"class","relative group"),c(Ef,"id","transformers.AutoConfig"),c(Ef,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ef,"href","#transformers.AutoConfig"),c(Ti,"class","relative group"),c(pk,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(_k,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig"),c(uk,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig"),c(bk,"href","/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitConfig"),c(vk,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig"),c(Fk,"href","/docs/transformers/pr_16792/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(Tk,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig"),c(Mk,"href","/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(Ek,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(Ck,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(wk,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig"),c(Ak,"href","/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineConfig"),c(Lk,"href","/docs/transformers/pr_16792/en/model_doc/clip#transformers.CLIPConfig"),c(yk,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertConfig"),c(xk,"href","/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextConfig"),c($k,"href","/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLConfig"),c(kk,"href","/docs/transformers/pr_16792/en/model_doc/cvt#transformers.CvtConfig"),c(Sk,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(Rk,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(Pk,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(Bk,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaConfig"),c(Ik,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(Nk,"href","/docs/transformers/pr_16792/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(qk,"href","/docs/transformers/pr_16792/en/model_doc/deit#transformers.DeiTConfig"),c(jk,"href","/docs/transformers/pr_16792/en/model_doc/detr#transformers.DetrConfig"),c(Dk,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig"),c(Gk,"href","/docs/transformers/pr_16792/en/model_doc/dpr#transformers.DPRConfig"),c(Ok,"href","/docs/transformers/pr_16792/en/model_doc/dpt#transformers.DPTConfig"),c(Vk,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig"),c(Xk,"href","/docs/transformers/pr_16792/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(zk,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig"),c(Wk,"href","/docs/transformers/pr_16792/en/model_doc/flava#transformers.FlavaConfig"),c(Qk,"href","/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetConfig"),c(Hk,"href","/docs/transformers/pr_16792/en/model_doc/fsmt#transformers.FSMTConfig"),c(Uk,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig"),c(Jk,"href","/docs/transformers/pr_16792/en/model_doc/glpn#transformers.GLPNConfig"),c(Yk,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Config"),c(Kk,"href","/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(Zk,"href","/docs/transformers/pr_16792/en/model_doc/gpt_neox#transformers.GPTNeoXConfig"),c(eS,"href","/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJConfig"),c(oS,"href","/docs/transformers/pr_16792/en/model_doc/hubert#transformers.HubertConfig"),c(rS,"href","/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertConfig"),c(tS,"href","/docs/transformers/pr_16792/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(aS,"href","/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(nS,"href","/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(sS,"href","/docs/transformers/pr_16792/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),c(lS,"href","/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDConfig"),c(iS,"href","/docs/transformers/pr_16792/en/model_doc/levit#transformers.LevitConfig"),c(dS,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig"),c(cS,"href","/docs/transformers/pr_16792/en/model_doc/longt5#transformers.LongT5Config"),c(fS,"href","/docs/transformers/pr_16792/en/model_doc/luke#transformers.LukeConfig"),c(mS,"href","/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertConfig"),c(gS,"href","/docs/transformers/pr_16792/en/model_doc/m2m_100#transformers.M2M100Config"),c(hS,"href","/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianConfig"),c(pS,"href","/docs/transformers/pr_16792/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(_S,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig"),c(uS,"href","/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(bS,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(vS,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig"),c(FS,"href","/docs/transformers/pr_16792/en/model_doc/mt5#transformers.MT5Config"),c(TS,"href","/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(MS,"href","/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(ES,"href","/docs/transformers/pr_16792/en/model_doc/opt#transformers.OPTConfig"),c(CS,"href","/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusConfig"),c(wS,"href","/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverConfig"),c(AS,"href","/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartConfig"),c(LS,"href","/docs/transformers/pr_16792/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(yS,"href","/docs/transformers/pr_16792/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(xS,"href","/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertConfig"),c($S,"href","/docs/transformers/pr_16792/en/model_doc/rag#transformers.RagConfig"),c(kS,"href","/docs/transformers/pr_16792/en/model_doc/realm#transformers.RealmConfig"),c(SS,"href","/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerConfig"),c(RS,"href","/docs/transformers/pr_16792/en/model_doc/regnet#transformers.RegNetConfig"),c(PS,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig"),c(BS,"href","/docs/transformers/pr_16792/en/model_doc/resnet#transformers.ResNetConfig"),c(IS,"href","/docs/transformers/pr_16792/en/model_doc/retribert#transformers.RetriBertConfig"),c(NS,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig"),c(qS,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig"),c(jS,"href","/docs/transformers/pr_16792/en/model_doc/segformer#transformers.SegformerConfig"),c(DS,"href","/docs/transformers/pr_16792/en/model_doc/sew#transformers.SEWConfig"),c(GS,"href","/docs/transformers/pr_16792/en/model_doc/sew-d#transformers.SEWDConfig"),c(OS,"href","/docs/transformers/pr_16792/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(VS,"href","/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(XS,"href","/docs/transformers/pr_16792/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(zS,"href","/docs/transformers/pr_16792/en/model_doc/splinter#transformers.SplinterConfig"),c(WS,"href","/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(QS,"href","/docs/transformers/pr_16792/en/model_doc/swin#transformers.SwinConfig"),c(HS,"href","/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Config"),c(US,"href","/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasConfig"),c(JS,"href","/docs/transformers/pr_16792/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(YS,"href","/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(KS,"href","/docs/transformers/pr_16792/en/model_doc/trocr#transformers.TrOCRConfig"),c(ZS,"href","/docs/transformers/pr_16792/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(eR,"href","/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(oR,"href","/docs/transformers/pr_16792/en/model_doc/van#transformers.VanConfig"),c(rR,"href","/docs/transformers/pr_16792/en/model_doc/vilt#transformers.ViltConfig"),c(tR,"href","/docs/transformers/pr_16792/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(aR,"href","/docs/transformers/pr_16792/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(nR,"href","/docs/transformers/pr_16792/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(sR,"href","/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTConfig"),c(lR,"href","/docs/transformers/pr_16792/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(iR,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(dR,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(cR,"href","/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMConfig"),c(fR,"href","/docs/transformers/pr_16792/en/model_doc/xglm#transformers.XGLMConfig"),c(mR,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig"),c(gR,"href","/docs/transformers/pr_16792/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(hR,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(pR,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(_R,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig"),c(uR,"href","/docs/transformers/pr_16792/en/model_doc/yolos#transformers.YolosConfig"),c(bR,"href","/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoConfig"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xg,"id","transformers.AutoTokenizer"),c(xg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(xg,"href","#transformers.AutoTokenizer"),c(Ei,"class","relative group"),c(vR,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(FR,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertTokenizer"),c(TR,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(MR,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartTokenizer"),c(ER,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartTokenizerFast"),c(CR,"href","/docs/transformers/pr_16792/en/model_doc/barthez#transformers.BarthezTokenizer"),c(wR,"href","/docs/transformers/pr_16792/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(AR,"href","/docs/transformers/pr_16792/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(LR,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertTokenizer"),c(yR,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertTokenizerFast"),c(xR,"href","/docs/transformers/pr_16792/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c($R,"href","/docs/transformers/pr_16792/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(kR,"href","/docs/transformers/pr_16792/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(SR,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(RR,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(PR,"href","/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(BR,"href","/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(IR,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(NR,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(qR,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(jR,"href","/docs/transformers/pr_16792/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(DR,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertTokenizer"),c(GR,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(OR,"href","/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineTokenizer"),c(VR,"href","/docs/transformers/pr_16792/en/model_doc/clip#transformers.CLIPTokenizer"),c(XR,"href","/docs/transformers/pr_16792/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(zR,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(WR,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(QR,"href","/docs/transformers/pr_16792/en/model_doc/cpm#transformers.CpmTokenizer"),c(HR,"href","/docs/transformers/pr_16792/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(UR,"href","/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(JR,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaTokenizer"),c(YR,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(KR,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaTokenizer"),c(ZR,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(eP,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(oP,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(rP,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(tP,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(aP,"href","/docs/transformers/pr_16792/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(nP,"href","/docs/transformers/pr_16792/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(sP,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraTokenizer"),c(lP,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(iP,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(dP,"href","/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetTokenizer"),c(cP,"href","/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(fP,"href","/docs/transformers/pr_16792/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(mP,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelTokenizer"),c(gP,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(hP,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(pP,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(_P,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(uP,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(bP,"href","/docs/transformers/pr_16792/en/model_doc/gpt_neox#transformers.GPTNeoXTokenizerFast"),c(vP,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(FP,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(TP,"href","/docs/transformers/pr_16792/en/model_doc/herbert#transformers.HerbertTokenizer"),c(MP,"href","/docs/transformers/pr_16792/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(EP,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(CP,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaTokenizer"),c(wP,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(AP,"href","/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(LP,"href","/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(yP,"href","/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(xP,"href","/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c($P,"href","/docs/transformers/pr_16792/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),c(kP,"href","/docs/transformers/pr_16792/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),c(SP,"href","/docs/transformers/pr_16792/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(RP,"href","/docs/transformers/pr_16792/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(PP,"href","/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDTokenizer"),c(BP,"href","/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDTokenizerFast"),c(IP,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerTokenizer"),c(NP,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(qP,"href","/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Tokenizer"),c(jP,"href","/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5TokenizerFast"),c(DP,"href","/docs/transformers/pr_16792/en/model_doc/luke#transformers.LukeTokenizer"),c(GP,"href","/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(OP,"href","/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(VP,"href","/docs/transformers/pr_16792/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(XP,"href","/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianTokenizer"),c(zP,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartTokenizer"),c(WP,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(QP,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(HP,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(UP,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertTokenizer"),c(JP,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertTokenizerFast"),c(YP,"href","/docs/transformers/pr_16792/en/model_doc/mluke#transformers.MLukeTokenizer"),c(KP,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(ZP,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(eB,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(oB,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(rB,"href","/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Tokenizer"),c(tB,"href","/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5TokenizerFast"),c(aB,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertTokenizer"),c(nB,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(sB,"href","/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(lB,"href","/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(iB,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(dB,"href","/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(cB,"href","/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(fB,"href","/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(mB,"href","/docs/transformers/pr_16792/en/model_doc/phobert#transformers.PhobertTokenizer"),c(gB,"href","/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartTokenizer"),c(hB,"href","/docs/transformers/pr_16792/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(pB,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertTokenizer"),c(_B,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertTokenizerFast"),c(uB,"href","/docs/transformers/pr_16792/en/model_doc/rag#transformers.RagTokenizer"),c(bB,"href","/docs/transformers/pr_16792/en/model_doc/realm#transformers.RealmTokenizer"),c(vB,"href","/docs/transformers/pr_16792/en/model_doc/realm#transformers.RealmTokenizerFast"),c(FB,"href","/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerTokenizer"),c(TB,"href","/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(MB,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertTokenizer"),c(EB,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(CB,"href","/docs/transformers/pr_16792/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(wB,"href","/docs/transformers/pr_16792/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(AB,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaTokenizer"),c(LB,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(yB,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(xB,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c($B,"href","/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(kB,"href","/docs/transformers/pr_16792/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(SB,"href","/docs/transformers/pr_16792/en/model_doc/splinter#transformers.SplinterTokenizer"),c(RB,"href","/docs/transformers/pr_16792/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(PB,"href","/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(BB,"href","/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(IB,"href","/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Tokenizer"),c(NB,"href","/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5TokenizerFast"),c(qB,"href","/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasTokenizer"),c(jB,"href","/docs/transformers/pr_16792/en/model_doc/tapex#transformers.TapexTokenizer"),c(DB,"href","/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(GB,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertTokenizer"),c(OB,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertTokenizerFast"),c(VB,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(XB,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(zB,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(WB,"href","/docs/transformers/pr_16792/en/model_doc/xglm#transformers.XGLMTokenizer"),c(QB,"href","/docs/transformers/pr_16792/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(HB,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMTokenizer"),c(UB,"href","/docs/transformers/pr_16792/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(JB,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(YB,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(KB,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaTokenizer"),c(ZB,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(eI,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(oI,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(rI,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertTokenizer"),c(tI,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ch,"id","transformers.AutoFeatureExtractor"),c(ch,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ch,"href","#transformers.AutoFeatureExtractor"),c(Ci,"class","relative group"),c(aI,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(nI,"href","/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(sI,"href","/docs/transformers/pr_16792/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(lI,"href","/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(iI,"href","/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(dI,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(cI,"href","/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(fI,"href","/docs/transformers/pr_16792/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(mI,"href","/docs/transformers/pr_16792/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(gI,"href","/docs/transformers/pr_16792/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(hI,"href","/docs/transformers/pr_16792/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(pI,"href","/docs/transformers/pr_16792/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(_I,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(uI,"href","/docs/transformers/pr_16792/en/model_doc/imagegpt#transformers.ImageGPTFeatureExtractor"),c(bI,"href","/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(vI,"href","/docs/transformers/pr_16792/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),c(FI,"href","/docs/transformers/pr_16792/en/model_doc/levit#transformers.LevitFeatureExtractor"),c(TI,"href","/docs/transformers/pr_16792/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(MI,"href","/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(EI,"href","/docs/transformers/pr_16792/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(CI,"href","/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(wI,"href","/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(AI,"href","/docs/transformers/pr_16792/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(LI,"href","/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(yI,"href","/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(xI,"href","/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c($I,"href","/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(kI,"href","/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(SI,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(RI,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(PI,"href","/docs/transformers/pr_16792/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xh,"id","transformers.AutoProcessor"),c(Xh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Xh,"href","#transformers.AutoProcessor"),c(wi,"class","relative group"),c(BI,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(II,"href","/docs/transformers/pr_16792/en/model_doc/clip#transformers.CLIPProcessor"),c(NI,"href","/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(qI,"href","/docs/transformers/pr_16792/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),c(jI,"href","/docs/transformers/pr_16792/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(DI,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(GI,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(OI,"href","/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(VI,"href","/docs/transformers/pr_16792/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(XI,"href","/docs/transformers/pr_16792/en/model_doc/trocr#transformers.TrOCRProcessor"),c(zI,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(WI,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(QI,"href","/docs/transformers/pr_16792/en/model_doc/vilt#transformers.ViltProcessor"),c(HI,"href","/docs/transformers/pr_16792/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(UI,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(JI,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(YI,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fp,"id","transformers.AutoModel"),c(fp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fp,"href","#transformers.AutoModel"),c(Li,"class","relative group"),c(KI,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZI,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eN,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oN,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertModel"),c(rN,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartModel"),c(tN,"href","/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitModel"),c(aN,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertModel"),c(nN,"href","/docs/transformers/pr_16792/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(sN,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdModel"),c(lN,"href","/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(iN,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(dN,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(cN,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertModel"),c(fN,"href","/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineModel"),c(mN,"href","/docs/transformers/pr_16792/en/model_doc/clip#transformers.CLIPModel"),c(gN,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertModel"),c(hN,"href","/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextModel"),c(pN,"href","/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLModel"),c(_N,"href","/docs/transformers/pr_16792/en/model_doc/cvt#transformers.CvtModel"),c(uN,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(bN,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(vN,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(FN,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaModel"),c(TN,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(MN,"href","/docs/transformers/pr_16792/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(EN,"href","/docs/transformers/pr_16792/en/model_doc/deit#transformers.DeiTModel"),c(CN,"href","/docs/transformers/pr_16792/en/model_doc/detr#transformers.DetrModel"),c(wN,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertModel"),c(AN,"href","/docs/transformers/pr_16792/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(LN,"href","/docs/transformers/pr_16792/en/model_doc/dpt#transformers.DPTModel"),c(yN,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraModel"),c(xN,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertModel"),c($N,"href","/docs/transformers/pr_16792/en/model_doc/flava#transformers.FlavaModel"),c(kN,"href","/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetModel"),c(SN,"href","/docs/transformers/pr_16792/en/model_doc/fsmt#transformers.FSMTModel"),c(RN,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelModel"),c(PN,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelBaseModel"),c(BN,"href","/docs/transformers/pr_16792/en/model_doc/glpn#transformers.GLPNModel"),c(IN,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Model"),c(NN,"href","/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(qN,"href","/docs/transformers/pr_16792/en/model_doc/gpt_neox#transformers.GPTNeoXModel"),c(jN,"href","/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJModel"),c(DN,"href","/docs/transformers/pr_16792/en/model_doc/hubert#transformers.HubertModel"),c(GN,"href","/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertModel"),c(ON,"href","/docs/transformers/pr_16792/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(VN,"href","/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(XN,"href","/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(zN,"href","/docs/transformers/pr_16792/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),c(WN,"href","/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDModel"),c(QN,"href","/docs/transformers/pr_16792/en/model_doc/levit#transformers.LevitModel"),c(HN,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerModel"),c(UN,"href","/docs/transformers/pr_16792/en/model_doc/longt5#transformers.LongT5Model"),c(JN,"href","/docs/transformers/pr_16792/en/model_doc/luke#transformers.LukeModel"),c(YN,"href","/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertModel"),c(KN,"href","/docs/transformers/pr_16792/en/model_doc/m2m_100#transformers.M2M100Model"),c(ZN,"href","/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianModel"),c(eq,"href","/docs/transformers/pr_16792/en/model_doc/maskformer#transformers.MaskFormerModel"),c(oq,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartModel"),c(rq,"href","/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(tq,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertModel"),c(aq,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetModel"),c(nq,"href","/docs/transformers/pr_16792/en/model_doc/mt5#transformers.MT5Model"),c(sq,"href","/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerModel"),c(lq,"href","/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(iq,"href","/docs/transformers/pr_16792/en/model_doc/opt#transformers.OPTModel"),c(dq,"href","/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusModel"),c(cq,"href","/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverModel"),c(fq,"href","/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartModel"),c(mq,"href","/docs/transformers/pr_16792/en/model_doc/poolformer#transformers.PoolFormerModel"),c(gq,"href","/docs/transformers/pr_16792/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(hq,"href","/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertModel"),c(pq,"href","/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerModel"),c(_q,"href","/docs/transformers/pr_16792/en/model_doc/regnet#transformers.RegNetModel"),c(uq,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertModel"),c(bq,"href","/docs/transformers/pr_16792/en/model_doc/resnet#transformers.ResNetModel"),c(vq,"href","/docs/transformers/pr_16792/en/model_doc/retribert#transformers.RetriBertModel"),c(Fq,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaModel"),c(Tq,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerModel"),c(Mq,"href","/docs/transformers/pr_16792/en/model_doc/segformer#transformers.SegformerModel"),c(Eq,"href","/docs/transformers/pr_16792/en/model_doc/sew#transformers.SEWModel"),c(Cq,"href","/docs/transformers/pr_16792/en/model_doc/sew-d#transformers.SEWDModel"),c(wq,"href","/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(Aq,"href","/docs/transformers/pr_16792/en/model_doc/splinter#transformers.SplinterModel"),c(Lq,"href","/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(yq,"href","/docs/transformers/pr_16792/en/model_doc/swin#transformers.SwinModel"),c(xq,"href","/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Model"),c($q,"href","/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasModel"),c(kq,"href","/docs/transformers/pr_16792/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(Sq,"href","/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(Rq,"href","/docs/transformers/pr_16792/en/model_doc/unispeech#transformers.UniSpeechModel"),c(Pq,"href","/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(Bq,"href","/docs/transformers/pr_16792/en/model_doc/van#transformers.VanModel"),c(Iq,"href","/docs/transformers/pr_16792/en/model_doc/vilt#transformers.ViltModel"),c(Nq,"href","/docs/transformers/pr_16792/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(qq,"href","/docs/transformers/pr_16792/en/model_doc/visual_bert#transformers.VisualBertModel"),c(jq,"href","/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTModel"),c(Dq,"href","/docs/transformers/pr_16792/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(Gq,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(Oq,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(Vq,"href","/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMModel"),c(Xq,"href","/docs/transformers/pr_16792/en/model_doc/xglm#transformers.XGLMModel"),c(zq,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMModel"),c(Wq,"href","/docs/transformers/pr_16792/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(Qq,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(Hq,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(Uq,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetModel"),c(Jq,"href","/docs/transformers/pr_16792/en/model_doc/yolos#transformers.YolosModel"),c(Yq,"href","/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cu,"id","transformers.AutoModelForPreTraining"),c(cu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(cu,"href","#transformers.AutoModelForPreTraining"),c($i,"class","relative group"),c(Kq,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zq,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ej,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oj,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertForPreTraining"),c(rj,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(tj,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForPreTraining"),c(aj,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(nj,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(sj,"href","/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(lj,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(ij,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(dj,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(cj,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(fj,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForPreTraining"),c(mj,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(gj,"href","/docs/transformers/pr_16792/en/model_doc/flava#transformers.FlavaForPreTraining"),c(hj,"href","/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForPreTraining"),c(pj,"href","/docs/transformers/pr_16792/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(_j,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(uj,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(bj,"href","/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(vj,"href","/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(Fj,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(Tj,"href","/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(Mj,"href","/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(Ej,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(Cj,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(wj,"href","/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(Aj,"href","/docs/transformers/pr_16792/en/model_doc/retribert#transformers.RetriBertModel"),c(Lj,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(yj,"href","/docs/transformers/pr_16792/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(xj,"href","/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c($j,"href","/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(kj,"href","/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(Sj,"href","/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(Rj,"href","/docs/transformers/pr_16792/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(Pj,"href","/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(Bj,"href","/docs/transformers/pr_16792/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(Ij,"href","/docs/transformers/pr_16792/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(Nj,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(qj,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(jj,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(Dj,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(Gj,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(Oj,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(r2,"id","transformers.AutoModelForCausalLM"),c(r2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(r2,"href","#transformers.AutoModelForCausalLM"),c(Ri,"class","relative group"),c(Vj,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xj,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zj,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wj,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartForCausalLM"),c(Qj,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertLMHeadModel"),c(Hj,"href","/docs/transformers/pr_16792/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(Uj,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(Jj,"href","/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(Yj,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(Kj,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(Zj,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(eD,"href","/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(oD,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(rD,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForCausalLM"),c(tD,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(aD,"href","/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(nD,"href","/docs/transformers/pr_16792/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM"),c(sD,"href","/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(lD,"href","/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianForCausalLM"),c(iD,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartForCausalLM"),c(dD,"href","/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(cD,"href","/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(fD,"href","/docs/transformers/pr_16792/en/model_doc/opt#transformers.OPTForCausalLM"),c(mD,"href","/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(gD,"href","/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(hD,"href","/docs/transformers/pr_16792/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(pD,"href","/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(_D,"href","/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(uD,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(bD,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(vD,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(FD,"href","/docs/transformers/pr_16792/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(TD,"href","/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(MD,"href","/docs/transformers/pr_16792/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(ED,"href","/docs/transformers/pr_16792/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(CD,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(wD,"href","/docs/transformers/pr_16792/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(AD,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(LD,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(yD,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(V2,"id","transformers.AutoModelForMaskedLM"),c(V2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(V2,"href","#transformers.AutoModelForMaskedLM"),c(Ii,"class","relative group"),c(xD,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($D,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kD,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SD,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(RD,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(PD,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForMaskedLM"),c(BD,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(ID,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(ND,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(qD,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(jD,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(DD,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(GD,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(OD,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(VD,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(XD,"href","/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(zD,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(WD,"href","/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(QD,"href","/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(HD,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(UD,"href","/docs/transformers/pr_16792/en/model_doc/luke#transformers.LukeForMaskedLM"),c(JD,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(YD,"href","/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(KD,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(ZD,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(eG,"href","/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(oG,"href","/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(rG,"href","/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(tG,"href","/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(aG,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(nG,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(sG,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(lG,"href","/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(iG,"href","/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(dG,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(cG,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(fG,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(mG,"href","/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(x1,"id","transformers.AutoModelForSeq2SeqLM"),c(x1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(x1,"href","#transformers.AutoModelForSeq2SeqLM"),c(ji,"class","relative group"),c(gG,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hG,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pG,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_G,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(uG,"href","/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(bG,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(vG,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(FG,"href","/docs/transformers/pr_16792/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(TG,"href","/docs/transformers/pr_16792/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(MG,"href","/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(EG,"href","/docs/transformers/pr_16792/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration"),c(CG,"href","/docs/transformers/pr_16792/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(wG,"href","/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianMTModel"),c(AG,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(LG,"href","/docs/transformers/pr_16792/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(yG,"href","/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(xG,"href","/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c($G,"href","/docs/transformers/pr_16792/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(kG,"href","/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(SG,"href","/docs/transformers/pr_16792/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(J1,"id","transformers.AutoModelForSequenceClassification"),c(J1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(J1,"href","#transformers.AutoModelForSequenceClassification"),c(Oi,"class","relative group"),c(RG,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PG,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(BG,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IG,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(NG,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartForSequenceClassification"),c(qG,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForSequenceClassification"),c(jG,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(DG,"href","/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(GG,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(OG,"href","/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(VG,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(XG,"href","/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(zG,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(WG,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(QG,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(HG,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(UG,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(JG,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(YG,"href","/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(KG,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(ZG,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(eO,"href","/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(oO,"href","/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(rO,"href","/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(tO,"href","/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(aO,"href","/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(nO,"href","/docs/transformers/pr_16792/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),c(sO,"href","/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDForSequenceClassification"),c(lO,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(iO,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(dO,"href","/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(cO,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(fO,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(mO,"href","/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(gO,"href","/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(hO,"href","/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(pO,"href","/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(_O,"href","/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(uO,"href","/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(bO,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(vO,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(FO,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(TO,"href","/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(MO,"href","/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(EO,"href","/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(CO,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(wO,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(AO,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(LO,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(yO,"href","/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qb,"id","transformers.AutoModelForMultipleChoice"),c(Qb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Qb,"href","#transformers.AutoModelForMultipleChoice"),c(zi,"class","relative group"),c(xO,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($O,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kO,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SO,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(RO,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForMultipleChoice"),c(PO,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(BO,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(IO,"href","/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(NO,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(qO,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(jO,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(DO,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(GO,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(OO,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(VO,"href","/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(XO,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(zO,"href","/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(WO,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(QO,"href","/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(HO,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(UO,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(JO,"href","/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(YO,"href","/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(KO,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(ZO,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(eV,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(oV,"href","/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(rV,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(tV,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(aV,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(nV,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(sV,"href","/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Av,"id","transformers.AutoModelForNextSentencePrediction"),c(Av,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Av,"href","#transformers.AutoModelForNextSentencePrediction"),c(Hi,"class","relative group"),c(lV,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iV,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dV,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cV,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(fV,"href","/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(mV,"href","/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(gV,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(hV,"href","/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bv,"id","transformers.AutoModelForTokenClassification"),c(Bv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Bv,"href","#transformers.AutoModelForTokenClassification"),c(Yi,"class","relative group"),c(pV,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_V,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uV,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bV,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(vV,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForTokenClassification"),c(FV,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(TV,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(MV,"href","/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineForTokenClassification"),c(EV,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(CV,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(wV,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(AV,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(LV,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(yV,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(xV,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c($V,"href","/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(kV,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(SV,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(RV,"href","/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(PV,"href","/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(BV,"href","/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(IV,"href","/docs/transformers/pr_16792/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),c(NV,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(qV,"href","/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(jV,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(DV,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(GV,"href","/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(OV,"href","/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(VV,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(XV,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(zV,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(WV,"href","/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(QV,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(HV,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(UV,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(JV,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(YV,"href","/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vF,"id","transformers.AutoModelForQuestionAnswering"),c(vF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vF,"href","#transformers.AutoModelForQuestionAnswering"),c(ed,"class","relative group"),c(KV,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZV,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eX,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oX,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(rX,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(tX,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(aX,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(nX,"href","/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(sX,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(lX,"href","/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(iX,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(dX,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(cX,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(fX,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(mX,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(gX,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(hX,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(pX,"href","/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(_X,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(uX,"href","/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(bX,"href","/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(vX,"href","/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(FX,"href","/docs/transformers/pr_16792/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(TX,"href","/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(MX,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(EX,"href","/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(CX,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(wX,"href","/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(AX,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(LX,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(yX,"href","/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(xX,"href","/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c($X,"href","/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(kX,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(SX,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(RX,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(PX,"href","/docs/transformers/pr_16792/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(BX,"href","/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(IX,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(NX,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(qX,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(jX,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(DX,"href","/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(d6,"id","transformers.AutoModelForTableQuestionAnswering"),c(d6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(d6,"href","#transformers.AutoModelForTableQuestionAnswering"),c(td,"class","relative group"),c(GX,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OX,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VX,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XX,"href","/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(h6,"id","transformers.AutoModelForImageClassification"),c(h6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(h6,"href","#transformers.AutoModelForImageClassification"),c(sd,"class","relative group"),c(zX,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WX,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QX,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HX,"href","/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitForImageClassification"),c(UX,"href","/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(JX,"href","/docs/transformers/pr_16792/en/model_doc/cvt#transformers.CvtForImageClassification"),c(YX,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(KX,"href","/docs/transformers/pr_16792/en/model_doc/deit#transformers.DeiTForImageClassification"),c(ZX,"href","/docs/transformers/pr_16792/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(ez,"href","/docs/transformers/pr_16792/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(oz,"href","/docs/transformers/pr_16792/en/model_doc/levit#transformers.LevitForImageClassification"),c(rz,"href","/docs/transformers/pr_16792/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher"),c(tz,"href","/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(az,"href","/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(nz,"href","/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(sz,"href","/docs/transformers/pr_16792/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(lz,"href","/docs/transformers/pr_16792/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(iz,"href","/docs/transformers/pr_16792/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(dz,"href","/docs/transformers/pr_16792/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(cz,"href","/docs/transformers/pr_16792/en/model_doc/swin#transformers.SwinForImageClassification"),c(fz,"href","/docs/transformers/pr_16792/en/model_doc/van#transformers.VanForImageClassification"),c(mz,"href","/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTForImageClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($6,"id","transformers.AutoModelForVision2Seq"),c($6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($6,"href","#transformers.AutoModelForVision2Seq"),c(dd,"class","relative group"),c(gz,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hz,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pz,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_z,"href","/docs/transformers/pr_16792/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(B6,"id","transformers.AutoModelForAudioClassification"),c(B6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(B6,"href","#transformers.AutoModelForAudioClassification"),c(md,"class","relative group"),c(uz,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bz,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vz,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fz,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(Tz,"href","/docs/transformers/pr_16792/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(Mz,"href","/docs/transformers/pr_16792/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(Ez,"href","/docs/transformers/pr_16792/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(Cz,"href","/docs/transformers/pr_16792/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(wz,"href","/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(Az,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(Lz,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(yz,"href","/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(H6,"id","transformers.AutoModelForAudioFrameClassification"),c(H6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(H6,"href","#transformers.AutoModelForAudioFrameClassification"),c(pd,"class","relative group"),c(xz,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($z,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kz,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Sz,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(Rz,"href","/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(Pz,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(Bz,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(Iz,"href","/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tT,"id","transformers.AutoModelForCTC"),c(tT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(tT,"href","#transformers.AutoModelForCTC"),c(bd,"class","relative group"),c(Nz,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qz,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jz,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Dz,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(Gz,"href","/docs/transformers/pr_16792/en/model_doc/hubert#transformers.HubertForCTC"),c(Oz,"href","/docs/transformers/pr_16792/en/model_doc/sew#transformers.SEWForCTC"),c(Vz,"href","/docs/transformers/pr_16792/en/model_doc/sew-d#transformers.SEWDForCTC"),c(Xz,"href","/docs/transformers/pr_16792/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(zz,"href","/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(Wz,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(Qz,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(Hz,"href","/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMForCTC"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_T,"id","transformers.AutoModelForSpeechSeq2Seq"),c(_T,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_T,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(Td,"class","relative group"),c(Uz,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jz,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Yz,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Kz,"href","/docs/transformers/pr_16792/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(Zz,"href","/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MT,"id","transformers.AutoModelForAudioXVector"),c(MT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(MT,"href","#transformers.AutoModelForAudioXVector"),c(Cd,"class","relative group"),c(eW,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oW,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rW,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tW,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(aW,"href","/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(nW,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(sW,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(lW,"href","/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMForXVector"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kT,"id","transformers.AutoModelForMaskedImageModeling"),c(kT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(kT,"href","#transformers.AutoModelForMaskedImageModeling"),c(Ld,"class","relative group"),c(iW,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dW,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cW,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fW,"href","/docs/transformers/pr_16792/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(mW,"href","/docs/transformers/pr_16792/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(gW,"href","/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qT,"id","transformers.AutoModelForObjectDetection"),c(qT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qT,"href","#transformers.AutoModelForObjectDetection"),c(kd,"class","relative group"),c(hW,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pW,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_W,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uW,"href","/docs/transformers/pr_16792/en/model_doc/detr#transformers.DetrForObjectDetection"),c(bW,"href","/docs/transformers/pr_16792/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XT,"id","transformers.AutoModelForImageSegmentation"),c(XT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(XT,"href","#transformers.AutoModelForImageSegmentation"),c(Pd,"class","relative group"),c(vW,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FW,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TW,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MW,"href","/docs/transformers/pr_16792/en/model_doc/detr#transformers.DetrForSegmentation"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UT,"id","transformers.AutoModelForSemanticSegmentation"),c(UT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(UT,"href","#transformers.AutoModelForSemanticSegmentation"),c(Nd,"class","relative group"),c(EW,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CW,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wW,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AW,"href","/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(LW,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(yW,"href","/docs/transformers/pr_16792/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(xW,"href","/docs/transformers/pr_16792/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(t7,"id","transformers.AutoModelForInstanceSegmentation"),c(t7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(t7,"href","#transformers.AutoModelForInstanceSegmentation"),c(Dd,"class","relative group"),c($W,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kW,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(SW,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RW,"href","/docs/transformers/pr_16792/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(i7,"id","transformers.TFAutoModel"),c(i7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(i7,"href","#transformers.TFAutoModel"),c(Vd,"class","relative group"),c(PW,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BW,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IW,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NW,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertModel"),c(qW,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.TFBartModel"),c(jW,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertModel"),c(DW,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(GW,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(OW,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertModel"),c(VW,"href","/docs/transformers/pr_16792/en/model_doc/clip#transformers.TFCLIPModel"),c(XW,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.TFConvBertModel"),c(zW,"href","/docs/transformers/pr_16792/en/model_doc/convnext#transformers.TFConvNextModel"),c(WW,"href","/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.TFCTRLModel"),c(QW,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(HW,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.TFDebertaModel"),c(UW,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(JW,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(YW,"href","/docs/transformers/pr_16792/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(KW,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraModel"),c(ZW,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(eQ,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelModel"),c(oQ,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(rQ,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.TFGPT2Model"),c(tQ,"href","/docs/transformers/pr_16792/en/model_doc/gptj#transformers.TFGPTJModel"),c(aQ,"href","/docs/transformers/pr_16792/en/model_doc/hubert#transformers.TFHubertModel"),c(nQ,"href","/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(sQ,"href","/docs/transformers/pr_16792/en/model_doc/led#transformers.TFLEDModel"),c(lQ,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.TFLongformerModel"),c(iQ,"href","/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.TFLxmertModel"),c(dQ,"href","/docs/transformers/pr_16792/en/model_doc/marian#transformers.TFMarianModel"),c(cQ,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.TFMBartModel"),c(fQ,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(mQ,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetModel"),c(gQ,"href","/docs/transformers/pr_16792/en/model_doc/mt5#transformers.TFMT5Model"),c(hQ,"href","/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(pQ,"href","/docs/transformers/pr_16792/en/model_doc/opt#transformers.TFOPTModel"),c(_Q,"href","/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.TFPegasusModel"),c(uQ,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertModel"),c(bQ,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaModel"),c(vQ,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerModel"),c(FQ,"href","/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(TQ,"href","/docs/transformers/pr_16792/en/model_doc/swin#transformers.TFSwinModel"),c(MQ,"href","/docs/transformers/pr_16792/en/model_doc/t5#transformers.TFT5Model"),c(EQ,"href","/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TFTapasModel"),c(CQ,"href","/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(wQ,"href","/docs/transformers/pr_16792/en/model_doc/vit#transformers.TFViTModel"),c(AQ,"href","/docs/transformers/pr_16792/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(LQ,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(yQ,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMModel"),c(xQ,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c($Q,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetModel"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(t9,"id","transformers.TFAutoModelForPreTraining"),c(t9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(t9,"href","#transformers.TFAutoModelForPreTraining"),c(Wd,"class","relative group"),c(kQ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SQ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RQ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PQ,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(BQ,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(IQ,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertForPreTraining"),c(NQ,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(qQ,"href","/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(jQ,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(DQ,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(GQ,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(OQ,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(VQ,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(XQ,"href","/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(zQ,"href","/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(WQ,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(QQ,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(HQ,"href","/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(UQ,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(JQ,"href","/docs/transformers/pr_16792/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(YQ,"href","/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(KQ,"href","/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(ZQ,"href","/docs/transformers/pr_16792/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(eH,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(oH,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(rH,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(x9,"id","transformers.TFAutoModelForCausalLM"),c(x9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(x9,"href","#transformers.TFAutoModelForCausalLM"),c(Ud,"class","relative group"),c(tH,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aH,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nH,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sH,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(lH,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(iH,"href","/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(dH,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(cH,"href","/docs/transformers/pr_16792/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(fH,"href","/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(mH,"href","/docs/transformers/pr_16792/en/model_doc/opt#transformers.TFOPTForCausalLM"),c(gH,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(hH,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(pH,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(_H,"href","/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(uH,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(bH,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(z9,"id","transformers.TFAutoModelForImageClassification"),c(z9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(z9,"href","#transformers.TFAutoModelForImageClassification"),c(Kd,"class","relative group"),c(vH,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FH,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TH,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MH,"href","/docs/transformers/pr_16792/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(EH,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(CH,"href","/docs/transformers/pr_16792/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(wH,"href","/docs/transformers/pr_16792/en/model_doc/vit#transformers.TFViTForImageClassification"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(K9,"id","transformers.TFAutoModelForMaskedLM"),c(K9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(K9,"href","#transformers.TFAutoModelForMaskedLM"),c(oc,"class","relative group"),c(AH,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LH,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yH,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xH,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c($H,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(kH,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(SH,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(RH,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(PH,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(BH,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(IH,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(NH,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(qH,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(jH,"href","/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(DH,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(GH,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(OH,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(VH,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(XH,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(zH,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(WH,"href","/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(QH,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(HH,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TM,"id","transformers.TFAutoModelForSeq2SeqLM"),c(TM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(TM,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(ac,"class","relative group"),c(UH,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JH,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YH,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KH,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(ZH,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(eU,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(oU,"href","/docs/transformers/pr_16792/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(rU,"href","/docs/transformers/pr_16792/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(tU,"href","/docs/transformers/pr_16792/en/model_doc/marian#transformers.TFMarianMTModel"),c(aU,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(nU,"href","/docs/transformers/pr_16792/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(sU,"href","/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(lU,"href","/docs/transformers/pr_16792/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PM,"id","transformers.TFAutoModelForSequenceClassification"),c(PM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(PM,"href","#transformers.TFAutoModelForSequenceClassification"),c(lc,"class","relative group"),c(iU,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dU,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cU,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fU,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(mU,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(gU,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(hU,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(pU,"href","/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(_U,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(uU,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(bU,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(vU,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(FU,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(TU,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(MU,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(EU,"href","/docs/transformers/pr_16792/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(CU,"href","/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(wU,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(AU,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(LU,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(yU,"href","/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(xU,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c($U,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(kU,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(SU,"href","/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(RU,"href","/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(PU,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(BU,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(IU,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(d4,"id","transformers.TFAutoModelForMultipleChoice"),c(d4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(d4,"href","#transformers.TFAutoModelForMultipleChoice"),c(cc,"class","relative group"),c(NU,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qU,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jU,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DU,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(GU,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(OU,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(VU,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(XU,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(zU,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(WU,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(QU,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(HU,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(UU,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(JU,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(YU,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(KU,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(ZU,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(eJ,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(oJ,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(rJ,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(x4,"id","transformers.TFAutoModelForNextSentencePrediction"),c(x4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(x4,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(gc,"class","relative group"),c(tJ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aJ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nJ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sJ,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(lJ,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(P4,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(P4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(P4,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(_c,"class","relative group"),c(iJ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dJ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cJ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fJ,"href","/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(q4,"id","transformers.TFAutoModelForTokenClassification"),c(q4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(q4,"href","#transformers.TFAutoModelForTokenClassification"),c(vc,"class","relative group"),c(mJ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gJ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hJ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pJ,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(_J,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(uJ,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(bJ,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(vJ,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(FJ,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(TJ,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(MJ,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(EJ,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(CJ,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(wJ,"href","/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(AJ,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(LJ,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(yJ,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(xJ,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c($J,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(kJ,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(SJ,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(RJ,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(PJ,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lE,"id","transformers.TFAutoModelForQuestionAnswering"),c(lE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lE,"href","#transformers.TFAutoModelForQuestionAnswering"),c(Mc,"class","relative group"),c(BJ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IJ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NJ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qJ,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(jJ,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(DJ,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(GJ,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(OJ,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(VJ,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(XJ,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(zJ,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(WJ,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(QJ,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(HJ,"href","/docs/transformers/pr_16792/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(UJ,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(JJ,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(YJ,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(KJ,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(ZJ,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(eY,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(oY,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(rY,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(tY,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($E,"id","transformers.TFAutoModelForVision2Seq"),c($E,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($E,"href","#transformers.TFAutoModelForVision2Seq"),c(wc,"class","relative group"),c(aY,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nY,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sY,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lY,"href","/docs/transformers/pr_16792/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PE,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(PE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(PE,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(yc,"class","relative group"),c(iY,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dY,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cY,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fY,"href","/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qE,"id","transformers.FlaxAutoModel"),c(qE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qE,"href","#transformers.FlaxAutoModel"),c(kc,"class","relative group"),c(mY,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gY,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hY,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pY,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertModel"),c(_Y,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartModel"),c(uY,"href","/docs/transformers/pr_16792/en/model_doc/beit#transformers.FlaxBeitModel"),c(bY,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertModel"),c(vY,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(FY,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(TY,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(MY,"href","/docs/transformers/pr_16792/en/model_doc/clip#transformers.FlaxCLIPModel"),c(EY,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(CY,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraModel"),c(wY,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(AY,"href","/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(LY,"href","/docs/transformers/pr_16792/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(yY,"href","/docs/transformers/pr_16792/en/model_doc/longt5#transformers.FlaxLongT5Model"),c(xY,"href","/docs/transformers/pr_16792/en/model_doc/marian#transformers.FlaxMarianModel"),c($Y,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.FlaxMBartModel"),c(kY,"href","/docs/transformers/pr_16792/en/model_doc/mt5#transformers.FlaxMT5Model"),c(SY,"href","/docs/transformers/pr_16792/en/model_doc/opt#transformers.FlaxOPTModel"),c(RY,"href","/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(PY,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(BY,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(IY,"href","/docs/transformers/pr_16792/en/model_doc/t5#transformers.FlaxT5Model"),c(NY,"href","/docs/transformers/pr_16792/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(qY,"href","/docs/transformers/pr_16792/en/model_doc/vit#transformers.FlaxViTModel"),c(jY,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(DY,"href","/docs/transformers/pr_16792/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(GY,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hC,"id","transformers.FlaxAutoModelForCausalLM"),c(hC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(hC,"href","#transformers.FlaxAutoModelForCausalLM"),c(Pc,"class","relative group"),c(OY,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VY,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XY,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zY,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(WY,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(QY,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(HY,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(UY,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(JY,"href","/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(YY,"href","/docs/transformers/pr_16792/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(KY,"href","/docs/transformers/pr_16792/en/model_doc/opt#transformers.FlaxOPTForCausalLM"),c(ZY,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(eK,"href","/docs/transformers/pr_16792/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LC,"id","transformers.FlaxAutoModelForPreTraining"),c(LC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(LC,"href","#transformers.FlaxAutoModelForPreTraining"),c(Nc,"class","relative group"),c(oK,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rK,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tK,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aK,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(nK,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(sK,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(lK,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(iK,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(dK,"href","/docs/transformers/pr_16792/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(cK,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(fK,"href","/docs/transformers/pr_16792/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(mK,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(gK,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(hK,"href","/docs/transformers/pr_16792/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(pK,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(_K,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VC,"id","transformers.FlaxAutoModelForMaskedLM"),c(VC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(VC,"href","#transformers.FlaxAutoModelForMaskedLM"),c(Dc,"class","relative group"),c(uK,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bK,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vK,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FK,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(TK,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(MK,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(EK,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(CK,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(wK,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(AK,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(LK,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(yK,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(xK,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(r5,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(r5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(r5,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Vc,"class","relative group"),c($K,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kK,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(SK,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RK,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(PK,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(BK,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(IK,"href","/docs/transformers/pr_16792/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(NK,"href","/docs/transformers/pr_16792/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(qK,"href","/docs/transformers/pr_16792/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(jK,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(DK,"href","/docs/transformers/pr_16792/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(GK,"href","/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(OK,"href","/docs/transformers/pr_16792/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(p5,"id","transformers.FlaxAutoModelForSequenceClassification"),c(p5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(p5,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(Wc,"class","relative group"),c(VK,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XK,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zK,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WK,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(QK,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(HK,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(UK,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(JK,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(YK,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(KK,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(ZK,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(eZ,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(oZ,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(y5,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(y5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(y5,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(Uc,"class","relative group"),c(rZ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tZ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aZ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nZ,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(sZ,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(lZ,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(iZ,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(dZ,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(cZ,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(fZ,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(mZ,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(gZ,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(hZ,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(G5,"id","transformers.FlaxAutoModelForTokenClassification"),c(G5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(G5,"href","#transformers.FlaxAutoModelForTokenClassification"),c(Kc,"class","relative group"),c(pZ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_Z,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uZ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bZ,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(vZ,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(FZ,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(TZ,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(MZ,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(EZ,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(CZ,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(wZ,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(K5,"id","transformers.FlaxAutoModelForMultipleChoice"),c(K5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(K5,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(of,"class","relative group"),c(AZ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LZ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yZ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xZ,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c($Z,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(kZ,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(SZ,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(RZ,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(PZ,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(BZ,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(IZ,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(d3,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(d3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(d3,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(af,"class","relative group"),c(NZ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qZ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jZ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DZ,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(g3,"id","transformers.FlaxAutoModelForImageClassification"),c(g3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(g3,"href","#transformers.FlaxAutoModelForImageClassification"),c(lf,"class","relative group"),c(GZ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OZ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VZ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XZ,"href","/docs/transformers/pr_16792/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(zZ,"href","/docs/transformers/pr_16792/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(b3,"id","transformers.FlaxAutoModelForVision2Seq"),c(b3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(b3,"href","#transformers.FlaxAutoModelForVision2Seq"),c(ff,"class","relative group"),c(WZ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QZ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HZ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UZ,"href","/docs/transformers/pr_16792/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,u){e(document.head,g),b(f,v,u),b(f,p,u),e(p,m),e(m,_),M(d,_,null),e(p,h),e(p,Mo),e(Mo,gi),b(f,uf,u),b(f,rt,u),e(rt,hi),e(rt,pi),e(pi,jw),e(rt,bf),b(f,Ge,u),b(f,We,u),e(We,_i),e(We,Ln),e(Ln,Dw),e(We,yn),e(We,xn),e(xn,Gw),e(We,ui),e(We,$n),e($n,Ow),e(We,bi),b(f,vf,u),M(Ca,f,u),b(f,Qe,u),b(f,Ae,u),e(Ae,dk),e(Ae,vi),e(vi,ck),e(Ae,fk),b(f,Eo,u),b(f,wa,u),e(wa,mk),e(wa,Ff),e(Ff,gk),e(wa,TVe),b(f,cje,u),b(f,Fi,u),e(Fi,Tf),e(Tf,Ooe),M(Vw,Ooe,null),e(Fi,MVe),e(Fi,Voe),e(Voe,EVe),b(f,fje,u),b(f,kn,u),e(kn,CVe),e(kn,Xoe),e(Xoe,wVe),e(kn,AVe),e(kn,zoe),e(zoe,LVe),e(kn,yVe),b(f,mje,u),M(Xw,f,u),b(f,gje,u),b(f,hk,u),e(hk,xVe),b(f,hje,u),M(Mf,f,u),b(f,pje,u),b(f,Ti,u),e(Ti,Ef),e(Ef,Woe),M(zw,Woe,null),e(Ti,$Ve),e(Ti,Qoe),e(Qoe,kVe),b(f,_je,u),b(f,Co,u),M(Ww,Co,null),e(Co,SVe),e(Co,Qw),e(Qw,RVe),e(Qw,pk),e(pk,PVe),e(Qw,BVe),e(Co,IVe),e(Co,Hw),e(Hw,NVe),e(Hw,Hoe),e(Hoe,qVe),e(Hw,jVe),e(Co,DVe),e(Co,Er),M(Uw,Er,null),e(Er,GVe),e(Er,Uoe),e(Uoe,OVe),e(Er,VVe),e(Er,Mi),e(Mi,XVe),e(Mi,Joe),e(Joe,zVe),e(Mi,WVe),e(Mi,Yoe),e(Yoe,QVe),e(Mi,HVe),e(Er,UVe),e(Er,A),e(A,Cf),e(Cf,Koe),e(Koe,JVe),e(Cf,YVe),e(Cf,_k),e(_k,KVe),e(Cf,ZVe),e(A,eXe),e(A,wf),e(wf,Zoe),e(Zoe,oXe),e(wf,rXe),e(wf,uk),e(uk,tXe),e(wf,aXe),e(A,nXe),e(A,Af),e(Af,ere),e(ere,sXe),e(Af,lXe),e(Af,bk),e(bk,iXe),e(Af,dXe),e(A,cXe),e(A,Lf),e(Lf,ore),e(ore,fXe),e(Lf,mXe),e(Lf,vk),e(vk,gXe),e(Lf,hXe),e(A,pXe),e(A,yf),e(yf,rre),e(rre,_Xe),e(yf,uXe),e(yf,Fk),e(Fk,bXe),e(yf,vXe),e(A,FXe),e(A,xf),e(xf,tre),e(tre,TXe),e(xf,MXe),e(xf,Tk),e(Tk,EXe),e(xf,CXe),e(A,wXe),e(A,$f),e($f,are),e(are,AXe),e($f,LXe),e($f,Mk),e(Mk,yXe),e($f,xXe),e(A,$Xe),e(A,kf),e(kf,nre),e(nre,kXe),e(kf,SXe),e(kf,Ek),e(Ek,RXe),e(kf,PXe),e(A,BXe),e(A,Sf),e(Sf,sre),e(sre,IXe),e(Sf,NXe),e(Sf,Ck),e(Ck,qXe),e(Sf,jXe),e(A,DXe),e(A,Rf),e(Rf,lre),e(lre,GXe),e(Rf,OXe),e(Rf,wk),e(wk,VXe),e(Rf,XXe),e(A,zXe),e(A,Pf),e(Pf,ire),e(ire,WXe),e(Pf,QXe),e(Pf,Ak),e(Ak,HXe),e(Pf,UXe),e(A,JXe),e(A,Bf),e(Bf,dre),e(dre,YXe),e(Bf,KXe),e(Bf,Lk),e(Lk,ZXe),e(Bf,eze),e(A,oze),e(A,If),e(If,cre),e(cre,rze),e(If,tze),e(If,yk),e(yk,aze),e(If,nze),e(A,sze),e(A,Nf),e(Nf,fre),e(fre,lze),e(Nf,ize),e(Nf,xk),e(xk,dze),e(Nf,cze),e(A,fze),e(A,qf),e(qf,mre),e(mre,mze),e(qf,gze),e(qf,$k),e($k,hze),e(qf,pze),e(A,_ze),e(A,jf),e(jf,gre),e(gre,uze),e(jf,bze),e(jf,kk),e(kk,vze),e(jf,Fze),e(A,Tze),e(A,Df),e(Df,hre),e(hre,Mze),e(Df,Eze),e(Df,Sk),e(Sk,Cze),e(Df,wze),e(A,Aze),e(A,Gf),e(Gf,pre),e(pre,Lze),e(Gf,yze),e(Gf,Rk),e(Rk,xze),e(Gf,$ze),e(A,kze),e(A,Of),e(Of,_re),e(_re,Sze),e(Of,Rze),e(Of,Pk),e(Pk,Pze),e(Of,Bze),e(A,Ize),e(A,Vf),e(Vf,ure),e(ure,Nze),e(Vf,qze),e(Vf,Bk),e(Bk,jze),e(Vf,Dze),e(A,Gze),e(A,Xf),e(Xf,bre),e(bre,Oze),e(Xf,Vze),e(Xf,Ik),e(Ik,Xze),e(Xf,zze),e(A,Wze),e(A,zf),e(zf,vre),e(vre,Qze),e(zf,Hze),e(zf,Nk),e(Nk,Uze),e(zf,Jze),e(A,Yze),e(A,Wf),e(Wf,Fre),e(Fre,Kze),e(Wf,Zze),e(Wf,qk),e(qk,eWe),e(Wf,oWe),e(A,rWe),e(A,Qf),e(Qf,Tre),e(Tre,tWe),e(Qf,aWe),e(Qf,jk),e(jk,nWe),e(Qf,sWe),e(A,lWe),e(A,Hf),e(Hf,Mre),e(Mre,iWe),e(Hf,dWe),e(Hf,Dk),e(Dk,cWe),e(Hf,fWe),e(A,mWe),e(A,Uf),e(Uf,Ere),e(Ere,gWe),e(Uf,hWe),e(Uf,Gk),e(Gk,pWe),e(Uf,_We),e(A,uWe),e(A,Jf),e(Jf,Cre),e(Cre,bWe),e(Jf,vWe),e(Jf,Ok),e(Ok,FWe),e(Jf,TWe),e(A,MWe),e(A,Yf),e(Yf,wre),e(wre,EWe),e(Yf,CWe),e(Yf,Vk),e(Vk,wWe),e(Yf,AWe),e(A,LWe),e(A,Kf),e(Kf,Are),e(Are,yWe),e(Kf,xWe),e(Kf,Xk),e(Xk,$We),e(Kf,kWe),e(A,SWe),e(A,Zf),e(Zf,Lre),e(Lre,RWe),e(Zf,PWe),e(Zf,zk),e(zk,BWe),e(Zf,IWe),e(A,NWe),e(A,em),e(em,yre),e(yre,qWe),e(em,jWe),e(em,Wk),e(Wk,DWe),e(em,GWe),e(A,OWe),e(A,om),e(om,xre),e(xre,VWe),e(om,XWe),e(om,Qk),e(Qk,zWe),e(om,WWe),e(A,QWe),e(A,rm),e(rm,$re),e($re,HWe),e(rm,UWe),e(rm,Hk),e(Hk,JWe),e(rm,YWe),e(A,KWe),e(A,tm),e(tm,kre),e(kre,ZWe),e(tm,eQe),e(tm,Uk),e(Uk,oQe),e(tm,rQe),e(A,tQe),e(A,am),e(am,Sre),e(Sre,aQe),e(am,nQe),e(am,Jk),e(Jk,sQe),e(am,lQe),e(A,iQe),e(A,nm),e(nm,Rre),e(Rre,dQe),e(nm,cQe),e(nm,Yk),e(Yk,fQe),e(nm,mQe),e(A,gQe),e(A,sm),e(sm,Pre),e(Pre,hQe),e(sm,pQe),e(sm,Kk),e(Kk,_Qe),e(sm,uQe),e(A,bQe),e(A,lm),e(lm,Bre),e(Bre,vQe),e(lm,FQe),e(lm,Zk),e(Zk,TQe),e(lm,MQe),e(A,EQe),e(A,im),e(im,Ire),e(Ire,CQe),e(im,wQe),e(im,eS),e(eS,AQe),e(im,LQe),e(A,yQe),e(A,dm),e(dm,Nre),e(Nre,xQe),e(dm,$Qe),e(dm,oS),e(oS,kQe),e(dm,SQe),e(A,RQe),e(A,cm),e(cm,qre),e(qre,PQe),e(cm,BQe),e(cm,rS),e(rS,IQe),e(cm,NQe),e(A,qQe),e(A,fm),e(fm,jre),e(jre,jQe),e(fm,DQe),e(fm,tS),e(tS,GQe),e(fm,OQe),e(A,VQe),e(A,mm),e(mm,Dre),e(Dre,XQe),e(mm,zQe),e(mm,aS),e(aS,WQe),e(mm,QQe),e(A,HQe),e(A,gm),e(gm,Gre),e(Gre,UQe),e(gm,JQe),e(gm,nS),e(nS,YQe),e(gm,KQe),e(A,ZQe),e(A,hm),e(hm,Ore),e(Ore,eHe),e(hm,oHe),e(hm,sS),e(sS,rHe),e(hm,tHe),e(A,aHe),e(A,pm),e(pm,Vre),e(Vre,nHe),e(pm,sHe),e(pm,lS),e(lS,lHe),e(pm,iHe),e(A,dHe),e(A,_m),e(_m,Xre),e(Xre,cHe),e(_m,fHe),e(_m,iS),e(iS,mHe),e(_m,gHe),e(A,hHe),e(A,um),e(um,zre),e(zre,pHe),e(um,_He),e(um,dS),e(dS,uHe),e(um,bHe),e(A,vHe),e(A,bm),e(bm,Wre),e(Wre,FHe),e(bm,THe),e(bm,cS),e(cS,MHe),e(bm,EHe),e(A,CHe),e(A,vm),e(vm,Qre),e(Qre,wHe),e(vm,AHe),e(vm,fS),e(fS,LHe),e(vm,yHe),e(A,xHe),e(A,Fm),e(Fm,Hre),e(Hre,$He),e(Fm,kHe),e(Fm,mS),e(mS,SHe),e(Fm,RHe),e(A,PHe),e(A,Tm),e(Tm,Ure),e(Ure,BHe),e(Tm,IHe),e(Tm,gS),e(gS,NHe),e(Tm,qHe),e(A,jHe),e(A,Mm),e(Mm,Jre),e(Jre,DHe),e(Mm,GHe),e(Mm,hS),e(hS,OHe),e(Mm,VHe),e(A,XHe),e(A,Em),e(Em,Yre),e(Yre,zHe),e(Em,WHe),e(Em,pS),e(pS,QHe),e(Em,HHe),e(A,UHe),e(A,Cm),e(Cm,Kre),e(Kre,JHe),e(Cm,YHe),e(Cm,_S),e(_S,KHe),e(Cm,ZHe),e(A,eUe),e(A,wm),e(wm,Zre),e(Zre,oUe),e(wm,rUe),e(wm,uS),e(uS,tUe),e(wm,aUe),e(A,nUe),e(A,Am),e(Am,ete),e(ete,sUe),e(Am,lUe),e(Am,bS),e(bS,iUe),e(Am,dUe),e(A,cUe),e(A,Lm),e(Lm,ote),e(ote,fUe),e(Lm,mUe),e(Lm,vS),e(vS,gUe),e(Lm,hUe),e(A,pUe),e(A,ym),e(ym,rte),e(rte,_Ue),e(ym,uUe),e(ym,FS),e(FS,bUe),e(ym,vUe),e(A,FUe),e(A,xm),e(xm,tte),e(tte,TUe),e(xm,MUe),e(xm,TS),e(TS,EUe),e(xm,CUe),e(A,wUe),e(A,$m),e($m,ate),e(ate,AUe),e($m,LUe),e($m,MS),e(MS,yUe),e($m,xUe),e(A,$Ue),e(A,km),e(km,nte),e(nte,kUe),e(km,SUe),e(km,ES),e(ES,RUe),e(km,PUe),e(A,BUe),e(A,Sm),e(Sm,ste),e(ste,IUe),e(Sm,NUe),e(Sm,CS),e(CS,qUe),e(Sm,jUe),e(A,DUe),e(A,Rm),e(Rm,lte),e(lte,GUe),e(Rm,OUe),e(Rm,wS),e(wS,VUe),e(Rm,XUe),e(A,zUe),e(A,Pm),e(Pm,ite),e(ite,WUe),e(Pm,QUe),e(Pm,AS),e(AS,HUe),e(Pm,UUe),e(A,JUe),e(A,Bm),e(Bm,dte),e(dte,YUe),e(Bm,KUe),e(Bm,LS),e(LS,ZUe),e(Bm,eJe),e(A,oJe),e(A,Im),e(Im,cte),e(cte,rJe),e(Im,tJe),e(Im,yS),e(yS,aJe),e(Im,nJe),e(A,sJe),e(A,Nm),e(Nm,fte),e(fte,lJe),e(Nm,iJe),e(Nm,xS),e(xS,dJe),e(Nm,cJe),e(A,fJe),e(A,qm),e(qm,mte),e(mte,mJe),e(qm,gJe),e(qm,$S),e($S,hJe),e(qm,pJe),e(A,_Je),e(A,jm),e(jm,gte),e(gte,uJe),e(jm,bJe),e(jm,kS),e(kS,vJe),e(jm,FJe),e(A,TJe),e(A,Dm),e(Dm,hte),e(hte,MJe),e(Dm,EJe),e(Dm,SS),e(SS,CJe),e(Dm,wJe),e(A,AJe),e(A,Gm),e(Gm,pte),e(pte,LJe),e(Gm,yJe),e(Gm,RS),e(RS,xJe),e(Gm,$Je),e(A,kJe),e(A,Om),e(Om,_te),e(_te,SJe),e(Om,RJe),e(Om,PS),e(PS,PJe),e(Om,BJe),e(A,IJe),e(A,Vm),e(Vm,ute),e(ute,NJe),e(Vm,qJe),e(Vm,BS),e(BS,jJe),e(Vm,DJe),e(A,GJe),e(A,Xm),e(Xm,bte),e(bte,OJe),e(Xm,VJe),e(Xm,IS),e(IS,XJe),e(Xm,zJe),e(A,WJe),e(A,zm),e(zm,vte),e(vte,QJe),e(zm,HJe),e(zm,NS),e(NS,UJe),e(zm,JJe),e(A,YJe),e(A,Wm),e(Wm,Fte),e(Fte,KJe),e(Wm,ZJe),e(Wm,qS),e(qS,eYe),e(Wm,oYe),e(A,rYe),e(A,Qm),e(Qm,Tte),e(Tte,tYe),e(Qm,aYe),e(Qm,jS),e(jS,nYe),e(Qm,sYe),e(A,lYe),e(A,Hm),e(Hm,Mte),e(Mte,iYe),e(Hm,dYe),e(Hm,DS),e(DS,cYe),e(Hm,fYe),e(A,mYe),e(A,Um),e(Um,Ete),e(Ete,gYe),e(Um,hYe),e(Um,GS),e(GS,pYe),e(Um,_Ye),e(A,uYe),e(A,Jm),e(Jm,Cte),e(Cte,bYe),e(Jm,vYe),e(Jm,OS),e(OS,FYe),e(Jm,TYe),e(A,MYe),e(A,Ym),e(Ym,wte),e(wte,EYe),e(Ym,CYe),e(Ym,VS),e(VS,wYe),e(Ym,AYe),e(A,LYe),e(A,Km),e(Km,Ate),e(Ate,yYe),e(Km,xYe),e(Km,XS),e(XS,$Ye),e(Km,kYe),e(A,SYe),e(A,Zm),e(Zm,Lte),e(Lte,RYe),e(Zm,PYe),e(Zm,zS),e(zS,BYe),e(Zm,IYe),e(A,NYe),e(A,eg),e(eg,yte),e(yte,qYe),e(eg,jYe),e(eg,WS),e(WS,DYe),e(eg,GYe),e(A,OYe),e(A,og),e(og,xte),e(xte,VYe),e(og,XYe),e(og,QS),e(QS,zYe),e(og,WYe),e(A,QYe),e(A,rg),e(rg,$te),e($te,HYe),e(rg,UYe),e(rg,HS),e(HS,JYe),e(rg,YYe),e(A,KYe),e(A,tg),e(tg,kte),e(kte,ZYe),e(tg,eKe),e(tg,US),e(US,oKe),e(tg,rKe),e(A,tKe),e(A,ag),e(ag,Ste),e(Ste,aKe),e(ag,nKe),e(ag,JS),e(JS,sKe),e(ag,lKe),e(A,iKe),e(A,ng),e(ng,Rte),e(Rte,dKe),e(ng,cKe),e(ng,YS),e(YS,fKe),e(ng,mKe),e(A,gKe),e(A,sg),e(sg,Pte),e(Pte,hKe),e(sg,pKe),e(sg,KS),e(KS,_Ke),e(sg,uKe),e(A,bKe),e(A,lg),e(lg,Bte),e(Bte,vKe),e(lg,FKe),e(lg,ZS),e(ZS,TKe),e(lg,MKe),e(A,EKe),e(A,ig),e(ig,Ite),e(Ite,CKe),e(ig,wKe),e(ig,eR),e(eR,AKe),e(ig,LKe),e(A,yKe),e(A,dg),e(dg,Nte),e(Nte,xKe),e(dg,$Ke),e(dg,oR),e(oR,kKe),e(dg,SKe),e(A,RKe),e(A,cg),e(cg,qte),e(qte,PKe),e(cg,BKe),e(cg,rR),e(rR,IKe),e(cg,NKe),e(A,qKe),e(A,fg),e(fg,jte),e(jte,jKe),e(fg,DKe),e(fg,tR),e(tR,GKe),e(fg,OKe),e(A,VKe),e(A,mg),e(mg,Dte),e(Dte,XKe),e(mg,zKe),e(mg,aR),e(aR,WKe),e(mg,QKe),e(A,HKe),e(A,gg),e(gg,Gte),e(Gte,UKe),e(gg,JKe),e(gg,nR),e(nR,YKe),e(gg,KKe),e(A,ZKe),e(A,hg),e(hg,Ote),e(Ote,eZe),e(hg,oZe),e(hg,sR),e(sR,rZe),e(hg,tZe),e(A,aZe),e(A,pg),e(pg,Vte),e(Vte,nZe),e(pg,sZe),e(pg,lR),e(lR,lZe),e(pg,iZe),e(A,dZe),e(A,_g),e(_g,Xte),e(Xte,cZe),e(_g,fZe),e(_g,iR),e(iR,mZe),e(_g,gZe),e(A,hZe),e(A,ug),e(ug,zte),e(zte,pZe),e(ug,_Ze),e(ug,dR),e(dR,uZe),e(ug,bZe),e(A,vZe),e(A,bg),e(bg,Wte),e(Wte,FZe),e(bg,TZe),e(bg,cR),e(cR,MZe),e(bg,EZe),e(A,CZe),e(A,vg),e(vg,Qte),e(Qte,wZe),e(vg,AZe),e(vg,fR),e(fR,LZe),e(vg,yZe),e(A,xZe),e(A,Fg),e(Fg,Hte),e(Hte,$Ze),e(Fg,kZe),e(Fg,mR),e(mR,SZe),e(Fg,RZe),e(A,PZe),e(A,Tg),e(Tg,Ute),e(Ute,BZe),e(Tg,IZe),e(Tg,gR),e(gR,NZe),e(Tg,qZe),e(A,jZe),e(A,Mg),e(Mg,Jte),e(Jte,DZe),e(Mg,GZe),e(Mg,hR),e(hR,OZe),e(Mg,VZe),e(A,XZe),e(A,Eg),e(Eg,Yte),e(Yte,zZe),e(Eg,WZe),e(Eg,pR),e(pR,QZe),e(Eg,HZe),e(A,UZe),e(A,Cg),e(Cg,Kte),e(Kte,JZe),e(Cg,YZe),e(Cg,_R),e(_R,KZe),e(Cg,ZZe),e(A,eeo),e(A,wg),e(wg,Zte),e(Zte,oeo),e(wg,reo),e(wg,uR),e(uR,teo),e(wg,aeo),e(A,neo),e(A,Ag),e(Ag,eae),e(eae,seo),e(Ag,leo),e(Ag,bR),e(bR,ieo),e(Ag,deo),e(Er,ceo),M(Lg,Er,null),e(Co,feo),e(Co,yg),M(Jw,yg,null),e(yg,meo),e(yg,oae),e(oae,geo),b(f,uje,u),b(f,Ei,u),e(Ei,xg),e(xg,rae),M(Yw,rae,null),e(Ei,heo),e(Ei,tae),e(tae,peo),b(f,bje,u),b(f,wo,u),M(Kw,wo,null),e(wo,_eo),e(wo,Zw),e(Zw,ueo),e(Zw,vR),e(vR,beo),e(Zw,veo),e(wo,Feo),e(wo,eA),e(eA,Teo),e(eA,aae),e(aae,Meo),e(eA,Eeo),e(wo,Ceo),e(wo,Cr),M(oA,Cr,null),e(Cr,weo),e(Cr,nae),e(nae,Aeo),e(Cr,Leo),e(Cr,Aa),e(Aa,yeo),e(Aa,sae),e(sae,xeo),e(Aa,$eo),e(Aa,lae),e(lae,keo),e(Aa,Seo),e(Aa,iae),e(iae,Reo),e(Aa,Peo),e(Cr,Beo),e(Cr,k),e(k,Sn),e(Sn,dae),e(dae,Ieo),e(Sn,Neo),e(Sn,FR),e(FR,qeo),e(Sn,jeo),e(Sn,TR),e(TR,Deo),e(Sn,Geo),e(k,Oeo),e(k,Rn),e(Rn,cae),e(cae,Veo),e(Rn,Xeo),e(Rn,MR),e(MR,zeo),e(Rn,Weo),e(Rn,ER),e(ER,Qeo),e(Rn,Heo),e(k,Ueo),e(k,Pn),e(Pn,fae),e(fae,Jeo),e(Pn,Yeo),e(Pn,CR),e(CR,Keo),e(Pn,Zeo),e(Pn,wR),e(wR,eoo),e(Pn,ooo),e(k,roo),e(k,$g),e($g,mae),e(mae,too),e($g,aoo),e($g,AR),e(AR,noo),e($g,soo),e(k,loo),e(k,Bn),e(Bn,gae),e(gae,ioo),e(Bn,doo),e(Bn,LR),e(LR,coo),e(Bn,foo),e(Bn,yR),e(yR,moo),e(Bn,goo),e(k,hoo),e(k,kg),e(kg,hae),e(hae,poo),e(kg,_oo),e(kg,xR),e(xR,uoo),e(kg,boo),e(k,voo),e(k,Sg),e(Sg,pae),e(pae,Foo),e(Sg,Too),e(Sg,$R),e($R,Moo),e(Sg,Eoo),e(k,Coo),e(k,Rg),e(Rg,_ae),e(_ae,woo),e(Rg,Aoo),e(Rg,kR),e(kR,Loo),e(Rg,yoo),e(k,xoo),e(k,In),e(In,uae),e(uae,$oo),e(In,koo),e(In,SR),e(SR,Soo),e(In,Roo),e(In,RR),e(RR,Poo),e(In,Boo),e(k,Ioo),e(k,Nn),e(Nn,bae),e(bae,Noo),e(Nn,qoo),e(Nn,PR),e(PR,joo),e(Nn,Doo),e(Nn,BR),e(BR,Goo),e(Nn,Ooo),e(k,Voo),e(k,qn),e(qn,vae),e(vae,Xoo),e(qn,zoo),e(qn,IR),e(IR,Woo),e(qn,Qoo),e(qn,NR),e(NR,Hoo),e(qn,Uoo),e(k,Joo),e(k,Pg),e(Pg,Fae),e(Fae,Yoo),e(Pg,Koo),e(Pg,qR),e(qR,Zoo),e(Pg,ero),e(k,oro),e(k,Bg),e(Bg,Tae),e(Tae,rro),e(Bg,tro),e(Bg,jR),e(jR,aro),e(Bg,nro),e(k,sro),e(k,jn),e(jn,Mae),e(Mae,lro),e(jn,iro),e(jn,DR),e(DR,dro),e(jn,cro),e(jn,GR),e(GR,fro),e(jn,mro),e(k,gro),e(k,Ig),e(Ig,Eae),e(Eae,hro),e(Ig,pro),e(Ig,OR),e(OR,_ro),e(Ig,uro),e(k,bro),e(k,Dn),e(Dn,Cae),e(Cae,vro),e(Dn,Fro),e(Dn,VR),e(VR,Tro),e(Dn,Mro),e(Dn,XR),e(XR,Ero),e(Dn,Cro),e(k,wro),e(k,Gn),e(Gn,wae),e(wae,Aro),e(Gn,Lro),e(Gn,zR),e(zR,yro),e(Gn,xro),e(Gn,WR),e(WR,$ro),e(Gn,kro),e(k,Sro),e(k,On),e(On,Aae),e(Aae,Rro),e(On,Pro),e(On,QR),e(QR,Bro),e(On,Iro),e(On,HR),e(HR,Nro),e(On,qro),e(k,jro),e(k,Ng),e(Ng,Lae),e(Lae,Dro),e(Ng,Gro),e(Ng,UR),e(UR,Oro),e(Ng,Vro),e(k,Xro),e(k,Vn),e(Vn,yae),e(yae,zro),e(Vn,Wro),e(Vn,JR),e(JR,Qro),e(Vn,Hro),e(Vn,YR),e(YR,Uro),e(Vn,Jro),e(k,Yro),e(k,Xn),e(Xn,xae),e(xae,Kro),e(Xn,Zro),e(Xn,KR),e(KR,eto),e(Xn,oto),e(Xn,ZR),e(ZR,rto),e(Xn,tto),e(k,ato),e(k,zn),e(zn,$ae),e($ae,nto),e(zn,sto),e(zn,eP),e(eP,lto),e(zn,ito),e(zn,oP),e(oP,dto),e(zn,cto),e(k,fto),e(k,Wn),e(Wn,kae),e(kae,mto),e(Wn,gto),e(Wn,rP),e(rP,hto),e(Wn,pto),e(Wn,tP),e(tP,_to),e(Wn,uto),e(k,bto),e(k,Qn),e(Qn,Sae),e(Sae,vto),e(Qn,Fto),e(Qn,aP),e(aP,Tto),e(Qn,Mto),e(Qn,nP),e(nP,Eto),e(Qn,Cto),e(k,wto),e(k,Hn),e(Hn,Rae),e(Rae,Ato),e(Hn,Lto),e(Hn,sP),e(sP,yto),e(Hn,xto),e(Hn,lP),e(lP,$to),e(Hn,kto),e(k,Sto),e(k,qg),e(qg,Pae),e(Pae,Rto),e(qg,Pto),e(qg,iP),e(iP,Bto),e(qg,Ito),e(k,Nto),e(k,Un),e(Un,Bae),e(Bae,qto),e(Un,jto),e(Un,dP),e(dP,Dto),e(Un,Gto),e(Un,cP),e(cP,Oto),e(Un,Vto),e(k,Xto),e(k,jg),e(jg,Iae),e(Iae,zto),e(jg,Wto),e(jg,fP),e(fP,Qto),e(jg,Hto),e(k,Uto),e(k,Jn),e(Jn,Nae),e(Nae,Jto),e(Jn,Yto),e(Jn,mP),e(mP,Kto),e(Jn,Zto),e(Jn,gP),e(gP,eao),e(Jn,oao),e(k,rao),e(k,Yn),e(Yn,qae),e(qae,tao),e(Yn,aao),e(Yn,hP),e(hP,nao),e(Yn,sao),e(Yn,pP),e(pP,lao),e(Yn,iao),e(k,dao),e(k,Kn),e(Kn,jae),e(jae,cao),e(Kn,fao),e(Kn,_P),e(_P,mao),e(Kn,gao),e(Kn,uP),e(uP,hao),e(Kn,pao),e(k,_ao),e(k,Dg),e(Dg,Dae),e(Dae,uao),e(Dg,bao),e(Dg,bP),e(bP,vao),e(Dg,Fao),e(k,Tao),e(k,Zn),e(Zn,Gae),e(Gae,Mao),e(Zn,Eao),e(Zn,vP),e(vP,Cao),e(Zn,wao),e(Zn,FP),e(FP,Aao),e(Zn,Lao),e(k,yao),e(k,es),e(es,Oae),e(Oae,xao),e(es,$ao),e(es,TP),e(TP,kao),e(es,Sao),e(es,MP),e(MP,Rao),e(es,Pao),e(k,Bao),e(k,Gg),e(Gg,Vae),e(Vae,Iao),e(Gg,Nao),e(Gg,EP),e(EP,qao),e(Gg,jao),e(k,Dao),e(k,os),e(os,Xae),e(Xae,Gao),e(os,Oao),e(os,CP),e(CP,Vao),e(os,Xao),e(os,wP),e(wP,zao),e(os,Wao),e(k,Qao),e(k,rs),e(rs,zae),e(zae,Hao),e(rs,Uao),e(rs,AP),e(AP,Jao),e(rs,Yao),e(rs,LP),e(LP,Kao),e(rs,Zao),e(k,eno),e(k,ts),e(ts,Wae),e(Wae,ono),e(ts,rno),e(ts,yP),e(yP,tno),e(ts,ano),e(ts,xP),e(xP,nno),e(ts,sno),e(k,lno),e(k,as),e(as,Qae),e(Qae,ino),e(as,dno),e(as,$P),e($P,cno),e(as,fno),e(as,kP),e(kP,mno),e(as,gno),e(k,hno),e(k,ns),e(ns,Hae),e(Hae,pno),e(ns,_no),e(ns,SP),e(SP,uno),e(ns,bno),e(ns,RP),e(RP,vno),e(ns,Fno),e(k,Tno),e(k,ss),e(ss,Uae),e(Uae,Mno),e(ss,Eno),e(ss,PP),e(PP,Cno),e(ss,wno),e(ss,BP),e(BP,Ano),e(ss,Lno),e(k,yno),e(k,ls),e(ls,Jae),e(Jae,xno),e(ls,$no),e(ls,IP),e(IP,kno),e(ls,Sno),e(ls,NP),e(NP,Rno),e(ls,Pno),e(k,Bno),e(k,is),e(is,Yae),e(Yae,Ino),e(is,Nno),e(is,qP),e(qP,qno),e(is,jno),e(is,jP),e(jP,Dno),e(is,Gno),e(k,Ono),e(k,Og),e(Og,Kae),e(Kae,Vno),e(Og,Xno),e(Og,DP),e(DP,zno),e(Og,Wno),e(k,Qno),e(k,ds),e(ds,Zae),e(Zae,Hno),e(ds,Uno),e(ds,GP),e(GP,Jno),e(ds,Yno),e(ds,OP),e(OP,Kno),e(ds,Zno),e(k,eso),e(k,Vg),e(Vg,ene),e(ene,oso),e(Vg,rso),e(Vg,VP),e(VP,tso),e(Vg,aso),e(k,nso),e(k,Xg),e(Xg,one),e(one,sso),e(Xg,lso),e(Xg,XP),e(XP,iso),e(Xg,dso),e(k,cso),e(k,cs),e(cs,rne),e(rne,fso),e(cs,mso),e(cs,zP),e(zP,gso),e(cs,hso),e(cs,WP),e(WP,pso),e(cs,_so),e(k,uso),e(k,fs),e(fs,tne),e(tne,bso),e(fs,vso),e(fs,QP),e(QP,Fso),e(fs,Tso),e(fs,HP),e(HP,Mso),e(fs,Eso),e(k,Cso),e(k,ms),e(ms,ane),e(ane,wso),e(ms,Aso),e(ms,UP),e(UP,Lso),e(ms,yso),e(ms,JP),e(JP,xso),e(ms,$so),e(k,kso),e(k,zg),e(zg,nne),e(nne,Sso),e(zg,Rso),e(zg,YP),e(YP,Pso),e(zg,Bso),e(k,Iso),e(k,gs),e(gs,sne),e(sne,Nso),e(gs,qso),e(gs,KP),e(KP,jso),e(gs,Dso),e(gs,ZP),e(ZP,Gso),e(gs,Oso),e(k,Vso),e(k,hs),e(hs,lne),e(lne,Xso),e(hs,zso),e(hs,eB),e(eB,Wso),e(hs,Qso),e(hs,oB),e(oB,Hso),e(hs,Uso),e(k,Jso),e(k,ps),e(ps,ine),e(ine,Yso),e(ps,Kso),e(ps,rB),e(rB,Zso),e(ps,elo),e(ps,tB),e(tB,olo),e(ps,rlo),e(k,tlo),e(k,_s),e(_s,dne),e(dne,alo),e(_s,nlo),e(_s,aB),e(aB,slo),e(_s,llo),e(_s,nB),e(nB,ilo),e(_s,dlo),e(k,clo),e(k,us),e(us,cne),e(cne,flo),e(us,mlo),e(us,sB),e(sB,glo),e(us,hlo),e(us,lB),e(lB,plo),e(us,_lo),e(k,ulo),e(k,Wg),e(Wg,fne),e(fne,blo),e(Wg,vlo),e(Wg,iB),e(iB,Flo),e(Wg,Tlo),e(k,Mlo),e(k,bs),e(bs,mne),e(mne,Elo),e(bs,Clo),e(bs,dB),e(dB,wlo),e(bs,Alo),e(bs,cB),e(cB,Llo),e(bs,ylo),e(k,xlo),e(k,Qg),e(Qg,gne),e(gne,$lo),e(Qg,klo),e(Qg,fB),e(fB,Slo),e(Qg,Rlo),e(k,Plo),e(k,Hg),e(Hg,hne),e(hne,Blo),e(Hg,Ilo),e(Hg,mB),e(mB,Nlo),e(Hg,qlo),e(k,jlo),e(k,Ug),e(Ug,pne),e(pne,Dlo),e(Ug,Glo),e(Ug,gB),e(gB,Olo),e(Ug,Vlo),e(k,Xlo),e(k,Jg),e(Jg,_ne),e(_ne,zlo),e(Jg,Wlo),e(Jg,hB),e(hB,Qlo),e(Jg,Hlo),e(k,Ulo),e(k,vs),e(vs,une),e(une,Jlo),e(vs,Ylo),e(vs,pB),e(pB,Klo),e(vs,Zlo),e(vs,_B),e(_B,eio),e(vs,oio),e(k,rio),e(k,Yg),e(Yg,bne),e(bne,tio),e(Yg,aio),e(Yg,uB),e(uB,nio),e(Yg,sio),e(k,lio),e(k,Fs),e(Fs,vne),e(vne,iio),e(Fs,dio),e(Fs,bB),e(bB,cio),e(Fs,fio),e(Fs,vB),e(vB,mio),e(Fs,gio),e(k,hio),e(k,Ts),e(Ts,Fne),e(Fne,pio),e(Ts,_io),e(Ts,FB),e(FB,uio),e(Ts,bio),e(Ts,TB),e(TB,vio),e(Ts,Fio),e(k,Tio),e(k,Ms),e(Ms,Tne),e(Tne,Mio),e(Ms,Eio),e(Ms,MB),e(MB,Cio),e(Ms,wio),e(Ms,EB),e(EB,Aio),e(Ms,Lio),e(k,yio),e(k,Es),e(Es,Mne),e(Mne,xio),e(Es,$io),e(Es,CB),e(CB,kio),e(Es,Sio),e(Es,wB),e(wB,Rio),e(Es,Pio),e(k,Bio),e(k,Cs),e(Cs,Ene),e(Ene,Iio),e(Cs,Nio),e(Cs,AB),e(AB,qio),e(Cs,jio),e(Cs,LB),e(LB,Dio),e(Cs,Gio),e(k,Oio),e(k,ws),e(ws,Cne),e(Cne,Vio),e(ws,Xio),e(ws,yB),e(yB,zio),e(ws,Wio),e(ws,xB),e(xB,Qio),e(ws,Hio),e(k,Uio),e(k,Kg),e(Kg,wne),e(wne,Jio),e(Kg,Yio),e(Kg,$B),e($B,Kio),e(Kg,Zio),e(k,edo),e(k,Zg),e(Zg,Ane),e(Ane,odo),e(Zg,rdo),e(Zg,kB),e(kB,tdo),e(Zg,ado),e(k,ndo),e(k,As),e(As,Lne),e(Lne,sdo),e(As,ldo),e(As,SB),e(SB,ido),e(As,ddo),e(As,RB),e(RB,cdo),e(As,fdo),e(k,mdo),e(k,Ls),e(Ls,yne),e(yne,gdo),e(Ls,hdo),e(Ls,PB),e(PB,pdo),e(Ls,_do),e(Ls,BB),e(BB,udo),e(Ls,bdo),e(k,vdo),e(k,ys),e(ys,xne),e(xne,Fdo),e(ys,Tdo),e(ys,IB),e(IB,Mdo),e(ys,Edo),e(ys,NB),e(NB,Cdo),e(ys,wdo),e(k,Ado),e(k,eh),e(eh,$ne),e($ne,Ldo),e(eh,ydo),e(eh,qB),e(qB,xdo),e(eh,$do),e(k,kdo),e(k,oh),e(oh,kne),e(kne,Sdo),e(oh,Rdo),e(oh,jB),e(jB,Pdo),e(oh,Bdo),e(k,Ido),e(k,rh),e(rh,Sne),e(Sne,Ndo),e(rh,qdo),e(rh,DB),e(DB,jdo),e(rh,Ddo),e(k,Gdo),e(k,xs),e(xs,Rne),e(Rne,Odo),e(xs,Vdo),e(xs,GB),e(GB,Xdo),e(xs,zdo),e(xs,OB),e(OB,Wdo),e(xs,Qdo),e(k,Hdo),e(k,th),e(th,Pne),e(Pne,Udo),e(th,Jdo),e(th,VB),e(VB,Ydo),e(th,Kdo),e(k,Zdo),e(k,ah),e(ah,Bne),e(Bne,eco),e(ah,oco),e(ah,XB),e(XB,rco),e(ah,tco),e(k,aco),e(k,nh),e(nh,Ine),e(Ine,nco),e(nh,sco),e(nh,zB),e(zB,lco),e(nh,ico),e(k,dco),e(k,$s),e($s,Nne),e(Nne,cco),e($s,fco),e($s,WB),e(WB,mco),e($s,gco),e($s,QB),e(QB,hco),e($s,pco),e(k,_co),e(k,sh),e(sh,qne),e(qne,uco),e(sh,bco),e(sh,HB),e(HB,vco),e(sh,Fco),e(k,Tco),e(k,lh),e(lh,jne),e(jne,Mco),e(lh,Eco),e(lh,UB),e(UB,Cco),e(lh,wco),e(k,Aco),e(k,ks),e(ks,Dne),e(Dne,Lco),e(ks,yco),e(ks,JB),e(JB,xco),e(ks,$co),e(ks,YB),e(YB,kco),e(ks,Sco),e(k,Rco),e(k,Ss),e(Ss,Gne),e(Gne,Pco),e(Ss,Bco),e(Ss,KB),e(KB,Ico),e(Ss,Nco),e(Ss,ZB),e(ZB,qco),e(Ss,jco),e(k,Dco),e(k,Rs),e(Rs,One),e(One,Gco),e(Rs,Oco),e(Rs,eI),e(eI,Vco),e(Rs,Xco),e(Rs,oI),e(oI,zco),e(Rs,Wco),e(k,Qco),e(k,Ps),e(Ps,Vne),e(Vne,Hco),e(Ps,Uco),e(Ps,rI),e(rI,Jco),e(Ps,Yco),e(Ps,tI),e(tI,Kco),e(Ps,Zco),e(Cr,efo),M(ih,Cr,null),e(wo,ofo),e(wo,dh),M(rA,dh,null),e(dh,rfo),e(dh,Xne),e(Xne,tfo),b(f,vje,u),b(f,Ci,u),e(Ci,ch),e(ch,zne),M(tA,zne,null),e(Ci,afo),e(Ci,Wne),e(Wne,nfo),b(f,Fje,u),b(f,Ao,u),M(aA,Ao,null),e(Ao,sfo),e(Ao,nA),e(nA,lfo),e(nA,aI),e(aI,ifo),e(nA,dfo),e(Ao,cfo),e(Ao,sA),e(sA,ffo),e(sA,Qne),e(Qne,mfo),e(sA,gfo),e(Ao,hfo),e(Ao,He),M(lA,He,null),e(He,pfo),e(He,Hne),e(Hne,_fo),e(He,ufo),e(He,La),e(La,bfo),e(La,Une),e(Une,vfo),e(La,Ffo),e(La,Jne),e(Jne,Tfo),e(La,Mfo),e(La,Yne),e(Yne,Efo),e(La,Cfo),e(He,wfo),e(He,Y),e(Y,fh),e(fh,Kne),e(Kne,Afo),e(fh,Lfo),e(fh,nI),e(nI,yfo),e(fh,xfo),e(Y,$fo),e(Y,mh),e(mh,Zne),e(Zne,kfo),e(mh,Sfo),e(mh,sI),e(sI,Rfo),e(mh,Pfo),e(Y,Bfo),e(Y,gh),e(gh,ese),e(ese,Ifo),e(gh,Nfo),e(gh,lI),e(lI,qfo),e(gh,jfo),e(Y,Dfo),e(Y,hh),e(hh,ose),e(ose,Gfo),e(hh,Ofo),e(hh,iI),e(iI,Vfo),e(hh,Xfo),e(Y,zfo),e(Y,ph),e(ph,rse),e(rse,Wfo),e(ph,Qfo),e(ph,dI),e(dI,Hfo),e(ph,Ufo),e(Y,Jfo),e(Y,_h),e(_h,tse),e(tse,Yfo),e(_h,Kfo),e(_h,cI),e(cI,Zfo),e(_h,emo),e(Y,omo),e(Y,uh),e(uh,ase),e(ase,rmo),e(uh,tmo),e(uh,fI),e(fI,amo),e(uh,nmo),e(Y,smo),e(Y,bh),e(bh,nse),e(nse,lmo),e(bh,imo),e(bh,mI),e(mI,dmo),e(bh,cmo),e(Y,fmo),e(Y,vh),e(vh,sse),e(sse,mmo),e(vh,gmo),e(vh,gI),e(gI,hmo),e(vh,pmo),e(Y,_mo),e(Y,Fh),e(Fh,lse),e(lse,umo),e(Fh,bmo),e(Fh,hI),e(hI,vmo),e(Fh,Fmo),e(Y,Tmo),e(Y,Th),e(Th,ise),e(ise,Mmo),e(Th,Emo),e(Th,pI),e(pI,Cmo),e(Th,wmo),e(Y,Amo),e(Y,Mh),e(Mh,dse),e(dse,Lmo),e(Mh,ymo),e(Mh,_I),e(_I,xmo),e(Mh,$mo),e(Y,kmo),e(Y,Eh),e(Eh,cse),e(cse,Smo),e(Eh,Rmo),e(Eh,uI),e(uI,Pmo),e(Eh,Bmo),e(Y,Imo),e(Y,Ch),e(Ch,fse),e(fse,Nmo),e(Ch,qmo),e(Ch,bI),e(bI,jmo),e(Ch,Dmo),e(Y,Gmo),e(Y,wh),e(wh,mse),e(mse,Omo),e(wh,Vmo),e(wh,vI),e(vI,Xmo),e(wh,zmo),e(Y,Wmo),e(Y,Ah),e(Ah,gse),e(gse,Qmo),e(Ah,Hmo),e(Ah,FI),e(FI,Umo),e(Ah,Jmo),e(Y,Ymo),e(Y,Lh),e(Lh,hse),e(hse,Kmo),e(Lh,Zmo),e(Lh,TI),e(TI,ego),e(Lh,ogo),e(Y,rgo),e(Y,yh),e(yh,pse),e(pse,tgo),e(yh,ago),e(yh,MI),e(MI,ngo),e(yh,sgo),e(Y,lgo),e(Y,xh),e(xh,_se),e(_se,igo),e(xh,dgo),e(xh,EI),e(EI,cgo),e(xh,fgo),e(Y,mgo),e(Y,$h),e($h,use),e(use,ggo),e($h,hgo),e($h,CI),e(CI,pgo),e($h,_go),e(Y,ugo),e(Y,kh),e(kh,bse),e(bse,bgo),e(kh,vgo),e(kh,wI),e(wI,Fgo),e(kh,Tgo),e(Y,Mgo),e(Y,Sh),e(Sh,vse),e(vse,Ego),e(Sh,Cgo),e(Sh,AI),e(AI,wgo),e(Sh,Ago),e(Y,Lgo),e(Y,Rh),e(Rh,Fse),e(Fse,ygo),e(Rh,xgo),e(Rh,LI),e(LI,$go),e(Rh,kgo),e(Y,Sgo),e(Y,Ph),e(Ph,Tse),e(Tse,Rgo),e(Ph,Pgo),e(Ph,yI),e(yI,Bgo),e(Ph,Igo),e(Y,Ngo),e(Y,Bh),e(Bh,Mse),e(Mse,qgo),e(Bh,jgo),e(Bh,xI),e(xI,Dgo),e(Bh,Ggo),e(Y,Ogo),e(Y,Ih),e(Ih,Ese),e(Ese,Vgo),e(Ih,Xgo),e(Ih,$I),e($I,zgo),e(Ih,Wgo),e(Y,Qgo),e(Y,Nh),e(Nh,Cse),e(Cse,Hgo),e(Nh,Ugo),e(Nh,kI),e(kI,Jgo),e(Nh,Ygo),e(Y,Kgo),e(Y,qh),e(qh,wse),e(wse,Zgo),e(qh,eho),e(qh,SI),e(SI,oho),e(qh,rho),e(Y,tho),e(Y,jh),e(jh,Ase),e(Ase,aho),e(jh,nho),e(jh,RI),e(RI,sho),e(jh,lho),e(Y,iho),e(Y,Dh),e(Dh,Lse),e(Lse,dho),e(Dh,cho),e(Dh,PI),e(PI,fho),e(Dh,mho),e(He,gho),M(Gh,He,null),e(He,hho),M(Oh,He,null),e(Ao,pho),e(Ao,Vh),M(iA,Vh,null),e(Vh,_ho),e(Vh,yse),e(yse,uho),b(f,Tje,u),b(f,wi,u),e(wi,Xh),e(Xh,xse),M(dA,xse,null),e(wi,bho),e(wi,$se),e($se,vho),b(f,Mje,u),b(f,Lo,u),M(cA,Lo,null),e(Lo,Fho),e(Lo,fA),e(fA,Tho),e(fA,BI),e(BI,Mho),e(fA,Eho),e(Lo,Cho),e(Lo,mA),e(mA,who),e(mA,kse),e(kse,Aho),e(mA,Lho),e(Lo,yho),e(Lo,Ue),M(gA,Ue,null),e(Ue,xho),e(Ue,Sse),e(Sse,$ho),e(Ue,kho),e(Ue,Ai),e(Ai,Sho),e(Ai,Rse),e(Rse,Rho),e(Ai,Pho),e(Ai,Pse),e(Pse,Bho),e(Ai,Iho),e(Ue,Nho),e(Ue,he),e(he,zh),e(zh,Bse),e(Bse,qho),e(zh,jho),e(zh,II),e(II,Dho),e(zh,Gho),e(he,Oho),e(he,Wh),e(Wh,Ise),e(Ise,Vho),e(Wh,Xho),e(Wh,Nse),e(Nse,zho),e(Wh,Who),e(he,Qho),e(he,Qh),e(Qh,qse),e(qse,Hho),e(Qh,Uho),e(Qh,NI),e(NI,Jho),e(Qh,Yho),e(he,Kho),e(he,Hh),e(Hh,jse),e(jse,Zho),e(Hh,epo),e(Hh,qI),e(qI,opo),e(Hh,rpo),e(he,tpo),e(he,Uh),e(Uh,Dse),e(Dse,apo),e(Uh,npo),e(Uh,jI),e(jI,spo),e(Uh,lpo),e(he,ipo),e(he,Jh),e(Jh,Gse),e(Gse,dpo),e(Jh,cpo),e(Jh,DI),e(DI,fpo),e(Jh,mpo),e(he,gpo),e(he,Yh),e(Yh,Ose),e(Ose,hpo),e(Yh,ppo),e(Yh,GI),e(GI,_po),e(Yh,upo),e(he,bpo),e(he,Kh),e(Kh,Vse),e(Vse,vpo),e(Kh,Fpo),e(Kh,OI),e(OI,Tpo),e(Kh,Mpo),e(he,Epo),e(he,Zh),e(Zh,Xse),e(Xse,Cpo),e(Zh,wpo),e(Zh,VI),e(VI,Apo),e(Zh,Lpo),e(he,ypo),e(he,ep),e(ep,zse),e(zse,xpo),e(ep,$po),e(ep,XI),e(XI,kpo),e(ep,Spo),e(he,Rpo),e(he,op),e(op,Wse),e(Wse,Ppo),e(op,Bpo),e(op,zI),e(zI,Ipo),e(op,Npo),e(he,qpo),e(he,rp),e(rp,Qse),e(Qse,jpo),e(rp,Dpo),e(rp,WI),e(WI,Gpo),e(rp,Opo),e(he,Vpo),e(he,tp),e(tp,Hse),e(Hse,Xpo),e(tp,zpo),e(tp,QI),e(QI,Wpo),e(tp,Qpo),e(he,Hpo),e(he,ap),e(ap,Use),e(Use,Upo),e(ap,Jpo),e(ap,HI),e(HI,Ypo),e(ap,Kpo),e(he,Zpo),e(he,np),e(np,Jse),e(Jse,e_o),e(np,o_o),e(np,UI),e(UI,r_o),e(np,t_o),e(he,a_o),e(he,sp),e(sp,Yse),e(Yse,n_o),e(sp,s_o),e(sp,JI),e(JI,l_o),e(sp,i_o),e(he,d_o),e(he,lp),e(lp,Kse),e(Kse,c_o),e(lp,f_o),e(lp,YI),e(YI,m_o),e(lp,g_o),e(Ue,h_o),M(ip,Ue,null),e(Ue,p_o),M(dp,Ue,null),e(Lo,__o),e(Lo,cp),M(hA,cp,null),e(cp,u_o),e(cp,Zse),e(Zse,b_o),b(f,Eje,u),b(f,Li,u),e(Li,fp),e(fp,ele),M(pA,ele,null),e(Li,v_o),e(Li,ole),e(ole,F_o),b(f,Cje,u),b(f,yo,u),M(_A,yo,null),e(yo,T_o),e(yo,yi),e(yi,M_o),e(yi,KI),e(KI,E_o),e(yi,C_o),e(yi,ZI),e(ZI,w_o),e(yi,A_o),e(yo,L_o),e(yo,uA),e(uA,y_o),e(uA,rle),e(rle,x_o),e(uA,$_o),e(yo,k_o),e(yo,tt),M(bA,tt,null),e(tt,S_o),e(tt,tle),e(tle,R_o),e(tt,P_o),e(tt,xi),e(xi,B_o),e(xi,ale),e(ale,I_o),e(xi,N_o),e(xi,eN),e(eN,q_o),e(xi,j_o),e(tt,D_o),M(mp,tt,null),e(yo,G_o),e(yo,Je),M(vA,Je,null),e(Je,O_o),e(Je,nle),e(nle,V_o),e(Je,X_o),e(Je,ya),e(ya,z_o),e(ya,sle),e(sle,W_o),e(ya,Q_o),e(ya,lle),e(lle,H_o),e(ya,U_o),e(ya,ile),e(ile,J_o),e(ya,Y_o),e(Je,K_o),e(Je,x),e(x,gp),e(gp,dle),e(dle,Z_o),e(gp,euo),e(gp,oN),e(oN,ouo),e(gp,ruo),e(x,tuo),e(x,hp),e(hp,cle),e(cle,auo),e(hp,nuo),e(hp,rN),e(rN,suo),e(hp,luo),e(x,iuo),e(x,pp),e(pp,fle),e(fle,duo),e(pp,cuo),e(pp,tN),e(tN,fuo),e(pp,muo),e(x,guo),e(x,_p),e(_p,mle),e(mle,huo),e(_p,puo),e(_p,aN),e(aN,_uo),e(_p,uuo),e(x,buo),e(x,up),e(up,gle),e(gle,vuo),e(up,Fuo),e(up,nN),e(nN,Tuo),e(up,Muo),e(x,Euo),e(x,bp),e(bp,hle),e(hle,Cuo),e(bp,wuo),e(bp,sN),e(sN,Auo),e(bp,Luo),e(x,yuo),e(x,vp),e(vp,ple),e(ple,xuo),e(vp,$uo),e(vp,lN),e(lN,kuo),e(vp,Suo),e(x,Ruo),e(x,Fp),e(Fp,_le),e(_le,Puo),e(Fp,Buo),e(Fp,iN),e(iN,Iuo),e(Fp,Nuo),e(x,quo),e(x,Tp),e(Tp,ule),e(ule,juo),e(Tp,Duo),e(Tp,dN),e(dN,Guo),e(Tp,Ouo),e(x,Vuo),e(x,Mp),e(Mp,ble),e(ble,Xuo),e(Mp,zuo),e(Mp,cN),e(cN,Wuo),e(Mp,Quo),e(x,Huo),e(x,Ep),e(Ep,vle),e(vle,Uuo),e(Ep,Juo),e(Ep,fN),e(fN,Yuo),e(Ep,Kuo),e(x,Zuo),e(x,Cp),e(Cp,Fle),e(Fle,e2o),e(Cp,o2o),e(Cp,mN),e(mN,r2o),e(Cp,t2o),e(x,a2o),e(x,wp),e(wp,Tle),e(Tle,n2o),e(wp,s2o),e(wp,gN),e(gN,l2o),e(wp,i2o),e(x,d2o),e(x,Ap),e(Ap,Mle),e(Mle,c2o),e(Ap,f2o),e(Ap,hN),e(hN,m2o),e(Ap,g2o),e(x,h2o),e(x,Lp),e(Lp,Ele),e(Ele,p2o),e(Lp,_2o),e(Lp,pN),e(pN,u2o),e(Lp,b2o),e(x,v2o),e(x,yp),e(yp,Cle),e(Cle,F2o),e(yp,T2o),e(yp,_N),e(_N,M2o),e(yp,E2o),e(x,C2o),e(x,xp),e(xp,wle),e(wle,w2o),e(xp,A2o),e(xp,uN),e(uN,L2o),e(xp,y2o),e(x,x2o),e(x,$p),e($p,Ale),e(Ale,$2o),e($p,k2o),e($p,bN),e(bN,S2o),e($p,R2o),e(x,P2o),e(x,kp),e(kp,Lle),e(Lle,B2o),e(kp,I2o),e(kp,vN),e(vN,N2o),e(kp,q2o),e(x,j2o),e(x,Sp),e(Sp,yle),e(yle,D2o),e(Sp,G2o),e(Sp,FN),e(FN,O2o),e(Sp,V2o),e(x,X2o),e(x,Rp),e(Rp,xle),e(xle,z2o),e(Rp,W2o),e(Rp,TN),e(TN,Q2o),e(Rp,H2o),e(x,U2o),e(x,Pp),e(Pp,$le),e($le,J2o),e(Pp,Y2o),e(Pp,MN),e(MN,K2o),e(Pp,Z2o),e(x,e1o),e(x,Bp),e(Bp,kle),e(kle,o1o),e(Bp,r1o),e(Bp,EN),e(EN,t1o),e(Bp,a1o),e(x,n1o),e(x,Ip),e(Ip,Sle),e(Sle,s1o),e(Ip,l1o),e(Ip,CN),e(CN,i1o),e(Ip,d1o),e(x,c1o),e(x,Np),e(Np,Rle),e(Rle,f1o),e(Np,m1o),e(Np,wN),e(wN,g1o),e(Np,h1o),e(x,p1o),e(x,qp),e(qp,Ple),e(Ple,_1o),e(qp,u1o),e(qp,AN),e(AN,b1o),e(qp,v1o),e(x,F1o),e(x,jp),e(jp,Ble),e(Ble,T1o),e(jp,M1o),e(jp,LN),e(LN,E1o),e(jp,C1o),e(x,w1o),e(x,Dp),e(Dp,Ile),e(Ile,A1o),e(Dp,L1o),e(Dp,yN),e(yN,y1o),e(Dp,x1o),e(x,$1o),e(x,Gp),e(Gp,Nle),e(Nle,k1o),e(Gp,S1o),e(Gp,xN),e(xN,R1o),e(Gp,P1o),e(x,B1o),e(x,Op),e(Op,qle),e(qle,I1o),e(Op,N1o),e(Op,$N),e($N,q1o),e(Op,j1o),e(x,D1o),e(x,Vp),e(Vp,jle),e(jle,G1o),e(Vp,O1o),e(Vp,kN),e(kN,V1o),e(Vp,X1o),e(x,z1o),e(x,Xp),e(Xp,Dle),e(Dle,W1o),e(Xp,Q1o),e(Xp,SN),e(SN,H1o),e(Xp,U1o),e(x,J1o),e(x,Bs),e(Bs,Gle),e(Gle,Y1o),e(Bs,K1o),e(Bs,RN),e(RN,Z1o),e(Bs,ebo),e(Bs,PN),e(PN,obo),e(Bs,rbo),e(x,tbo),e(x,zp),e(zp,Ole),e(Ole,abo),e(zp,nbo),e(zp,BN),e(BN,sbo),e(zp,lbo),e(x,ibo),e(x,Wp),e(Wp,Vle),e(Vle,dbo),e(Wp,cbo),e(Wp,IN),e(IN,fbo),e(Wp,mbo),e(x,gbo),e(x,Qp),e(Qp,Xle),e(Xle,hbo),e(Qp,pbo),e(Qp,NN),e(NN,_bo),e(Qp,ubo),e(x,bbo),e(x,Hp),e(Hp,zle),e(zle,vbo),e(Hp,Fbo),e(Hp,qN),e(qN,Tbo),e(Hp,Mbo),e(x,Ebo),e(x,Up),e(Up,Wle),e(Wle,Cbo),e(Up,wbo),e(Up,jN),e(jN,Abo),e(Up,Lbo),e(x,ybo),e(x,Jp),e(Jp,Qle),e(Qle,xbo),e(Jp,$bo),e(Jp,DN),e(DN,kbo),e(Jp,Sbo),e(x,Rbo),e(x,Yp),e(Yp,Hle),e(Hle,Pbo),e(Yp,Bbo),e(Yp,GN),e(GN,Ibo),e(Yp,Nbo),e(x,qbo),e(x,Kp),e(Kp,Ule),e(Ule,jbo),e(Kp,Dbo),e(Kp,ON),e(ON,Gbo),e(Kp,Obo),e(x,Vbo),e(x,Zp),e(Zp,Jle),e(Jle,Xbo),e(Zp,zbo),e(Zp,VN),e(VN,Wbo),e(Zp,Qbo),e(x,Hbo),e(x,e_),e(e_,Yle),e(Yle,Ubo),e(e_,Jbo),e(e_,XN),e(XN,Ybo),e(e_,Kbo),e(x,Zbo),e(x,o_),e(o_,Kle),e(Kle,evo),e(o_,ovo),e(o_,zN),e(zN,rvo),e(o_,tvo),e(x,avo),e(x,r_),e(r_,Zle),e(Zle,nvo),e(r_,svo),e(r_,WN),e(WN,lvo),e(r_,ivo),e(x,dvo),e(x,t_),e(t_,eie),e(eie,cvo),e(t_,fvo),e(t_,QN),e(QN,mvo),e(t_,gvo),e(x,hvo),e(x,a_),e(a_,oie),e(oie,pvo),e(a_,_vo),e(a_,HN),e(HN,uvo),e(a_,bvo),e(x,vvo),e(x,n_),e(n_,rie),e(rie,Fvo),e(n_,Tvo),e(n_,UN),e(UN,Mvo),e(n_,Evo),e(x,Cvo),e(x,s_),e(s_,tie),e(tie,wvo),e(s_,Avo),e(s_,JN),e(JN,Lvo),e(s_,yvo),e(x,xvo),e(x,l_),e(l_,aie),e(aie,$vo),e(l_,kvo),e(l_,YN),e(YN,Svo),e(l_,Rvo),e(x,Pvo),e(x,i_),e(i_,nie),e(nie,Bvo),e(i_,Ivo),e(i_,KN),e(KN,Nvo),e(i_,qvo),e(x,jvo),e(x,d_),e(d_,sie),e(sie,Dvo),e(d_,Gvo),e(d_,ZN),e(ZN,Ovo),e(d_,Vvo),e(x,Xvo),e(x,c_),e(c_,lie),e(lie,zvo),e(c_,Wvo),e(c_,eq),e(eq,Qvo),e(c_,Hvo),e(x,Uvo),e(x,f_),e(f_,iie),e(iie,Jvo),e(f_,Yvo),e(f_,oq),e(oq,Kvo),e(f_,Zvo),e(x,eFo),e(x,m_),e(m_,die),e(die,oFo),e(m_,rFo),e(m_,rq),e(rq,tFo),e(m_,aFo),e(x,nFo),e(x,g_),e(g_,cie),e(cie,sFo),e(g_,lFo),e(g_,tq),e(tq,iFo),e(g_,dFo),e(x,cFo),e(x,h_),e(h_,fie),e(fie,fFo),e(h_,mFo),e(h_,aq),e(aq,gFo),e(h_,hFo),e(x,pFo),e(x,p_),e(p_,mie),e(mie,_Fo),e(p_,uFo),e(p_,nq),e(nq,bFo),e(p_,vFo),e(x,FFo),e(x,__),e(__,gie),e(gie,TFo),e(__,MFo),e(__,sq),e(sq,EFo),e(__,CFo),e(x,wFo),e(x,u_),e(u_,hie),e(hie,AFo),e(u_,LFo),e(u_,lq),e(lq,yFo),e(u_,xFo),e(x,$Fo),e(x,b_),e(b_,pie),e(pie,kFo),e(b_,SFo),e(b_,iq),e(iq,RFo),e(b_,PFo),e(x,BFo),e(x,v_),e(v_,_ie),e(_ie,IFo),e(v_,NFo),e(v_,dq),e(dq,qFo),e(v_,jFo),e(x,DFo),e(x,F_),e(F_,uie),e(uie,GFo),e(F_,OFo),e(F_,cq),e(cq,VFo),e(F_,XFo),e(x,zFo),e(x,T_),e(T_,bie),e(bie,WFo),e(T_,QFo),e(T_,fq),e(fq,HFo),e(T_,UFo),e(x,JFo),e(x,M_),e(M_,vie),e(vie,YFo),e(M_,KFo),e(M_,mq),e(mq,ZFo),e(M_,e6o),e(x,o6o),e(x,E_),e(E_,Fie),e(Fie,r6o),e(E_,t6o),e(E_,gq),e(gq,a6o),e(E_,n6o),e(x,s6o),e(x,C_),e(C_,Tie),e(Tie,l6o),e(C_,i6o),e(C_,hq),e(hq,d6o),e(C_,c6o),e(x,f6o),e(x,w_),e(w_,Mie),e(Mie,m6o),e(w_,g6o),e(w_,pq),e(pq,h6o),e(w_,p6o),e(x,_6o),e(x,A_),e(A_,Eie),e(Eie,u6o),e(A_,b6o),e(A_,_q),e(_q,v6o),e(A_,F6o),e(x,T6o),e(x,L_),e(L_,Cie),e(Cie,M6o),e(L_,E6o),e(L_,uq),e(uq,C6o),e(L_,w6o),e(x,A6o),e(x,y_),e(y_,wie),e(wie,L6o),e(y_,y6o),e(y_,bq),e(bq,x6o),e(y_,$6o),e(x,k6o),e(x,x_),e(x_,Aie),e(Aie,S6o),e(x_,R6o),e(x_,vq),e(vq,P6o),e(x_,B6o),e(x,I6o),e(x,$_),e($_,Lie),e(Lie,N6o),e($_,q6o),e($_,Fq),e(Fq,j6o),e($_,D6o),e(x,G6o),e(x,k_),e(k_,yie),e(yie,O6o),e(k_,V6o),e(k_,Tq),e(Tq,X6o),e(k_,z6o),e(x,W6o),e(x,S_),e(S_,xie),e(xie,Q6o),e(S_,H6o),e(S_,Mq),e(Mq,U6o),e(S_,J6o),e(x,Y6o),e(x,R_),e(R_,$ie),e($ie,K6o),e(R_,Z6o),e(R_,Eq),e(Eq,eTo),e(R_,oTo),e(x,rTo),e(x,P_),e(P_,kie),e(kie,tTo),e(P_,aTo),e(P_,Cq),e(Cq,nTo),e(P_,sTo),e(x,lTo),e(x,B_),e(B_,Sie),e(Sie,iTo),e(B_,dTo),e(B_,wq),e(wq,cTo),e(B_,fTo),e(x,mTo),e(x,I_),e(I_,Rie),e(Rie,gTo),e(I_,hTo),e(I_,Aq),e(Aq,pTo),e(I_,_To),e(x,uTo),e(x,N_),e(N_,Pie),e(Pie,bTo),e(N_,vTo),e(N_,Lq),e(Lq,FTo),e(N_,TTo),e(x,MTo),e(x,q_),e(q_,Bie),e(Bie,ETo),e(q_,CTo),e(q_,yq),e(yq,wTo),e(q_,ATo),e(x,LTo),e(x,j_),e(j_,Iie),e(Iie,yTo),e(j_,xTo),e(j_,xq),e(xq,$To),e(j_,kTo),e(x,STo),e(x,D_),e(D_,Nie),e(Nie,RTo),e(D_,PTo),e(D_,$q),e($q,BTo),e(D_,ITo),e(x,NTo),e(x,G_),e(G_,qie),e(qie,qTo),e(G_,jTo),e(G_,kq),e(kq,DTo),e(G_,GTo),e(x,OTo),e(x,O_),e(O_,jie),e(jie,VTo),e(O_,XTo),e(O_,Sq),e(Sq,zTo),e(O_,WTo),e(x,QTo),e(x,V_),e(V_,Die),e(Die,HTo),e(V_,UTo),e(V_,Rq),e(Rq,JTo),e(V_,YTo),e(x,KTo),e(x,X_),e(X_,Gie),e(Gie,ZTo),e(X_,e7o),e(X_,Pq),e(Pq,o7o),e(X_,r7o),e(x,t7o),e(x,z_),e(z_,Oie),e(Oie,a7o),e(z_,n7o),e(z_,Bq),e(Bq,s7o),e(z_,l7o),e(x,i7o),e(x,W_),e(W_,Vie),e(Vie,d7o),e(W_,c7o),e(W_,Iq),e(Iq,f7o),e(W_,m7o),e(x,g7o),e(x,Q_),e(Q_,Xie),e(Xie,h7o),e(Q_,p7o),e(Q_,Nq),e(Nq,_7o),e(Q_,u7o),e(x,b7o),e(x,H_),e(H_,zie),e(zie,v7o),e(H_,F7o),e(H_,qq),e(qq,T7o),e(H_,M7o),e(x,E7o),e(x,U_),e(U_,Wie),e(Wie,C7o),e(U_,w7o),e(U_,jq),e(jq,A7o),e(U_,L7o),e(x,y7o),e(x,J_),e(J_,Qie),e(Qie,x7o),e(J_,$7o),e(J_,Dq),e(Dq,k7o),e(J_,S7o),e(x,R7o),e(x,Y_),e(Y_,Hie),e(Hie,P7o),e(Y_,B7o),e(Y_,Gq),e(Gq,I7o),e(Y_,N7o),e(x,q7o),e(x,K_),e(K_,Uie),e(Uie,j7o),e(K_,D7o),e(K_,Oq),e(Oq,G7o),e(K_,O7o),e(x,V7o),e(x,Z_),e(Z_,Jie),e(Jie,X7o),e(Z_,z7o),e(Z_,Vq),e(Vq,W7o),e(Z_,Q7o),e(x,H7o),e(x,eu),e(eu,Yie),e(Yie,U7o),e(eu,J7o),e(eu,Xq),e(Xq,Y7o),e(eu,K7o),e(x,Z7o),e(x,ou),e(ou,Kie),e(Kie,e9o),e(ou,o9o),e(ou,zq),e(zq,r9o),e(ou,t9o),e(x,a9o),e(x,ru),e(ru,Zie),e(Zie,n9o),e(ru,s9o),e(ru,Wq),e(Wq,l9o),e(ru,i9o),e(x,d9o),e(x,tu),e(tu,ede),e(ede,c9o),e(tu,f9o),e(tu,Qq),e(Qq,m9o),e(tu,g9o),e(x,h9o),e(x,au),e(au,ode),e(ode,p9o),e(au,_9o),e(au,Hq),e(Hq,u9o),e(au,b9o),e(x,v9o),e(x,nu),e(nu,rde),e(rde,F9o),e(nu,T9o),e(nu,Uq),e(Uq,M9o),e(nu,E9o),e(x,C9o),e(x,su),e(su,tde),e(tde,w9o),e(su,A9o),e(su,Jq),e(Jq,L9o),e(su,y9o),e(x,x9o),e(x,lu),e(lu,ade),e(ade,$9o),e(lu,k9o),e(lu,Yq),e(Yq,S9o),e(lu,R9o),e(Je,P9o),e(Je,iu),e(iu,B9o),e(iu,nde),e(nde,I9o),e(iu,N9o),e(iu,sde),e(sde,q9o),e(Je,j9o),M(du,Je,null),b(f,wje,u),b(f,$i,u),e($i,cu),e(cu,lde),M(FA,lde,null),e($i,D9o),e($i,ide),e(ide,G9o),b(f,Aje,u),b(f,xo,u),M(TA,xo,null),e(xo,O9o),e(xo,ki),e(ki,V9o),e(ki,Kq),e(Kq,X9o),e(ki,z9o),e(ki,Zq),e(Zq,W9o),e(ki,Q9o),e(xo,H9o),e(xo,MA),e(MA,U9o),e(MA,dde),e(dde,J9o),e(MA,Y9o),e(xo,K9o),e(xo,at),M(EA,at,null),e(at,Z9o),e(at,cde),e(cde,eMo),e(at,oMo),e(at,Si),e(Si,rMo),e(Si,fde),e(fde,tMo),e(Si,aMo),e(Si,ej),e(ej,nMo),e(Si,sMo),e(at,lMo),M(fu,at,null),e(xo,iMo),e(xo,Ye),M(CA,Ye,null),e(Ye,dMo),e(Ye,mde),e(mde,cMo),e(Ye,fMo),e(Ye,xa),e(xa,mMo),e(xa,gde),e(gde,gMo),e(xa,hMo),e(xa,hde),e(hde,pMo),e(xa,_Mo),e(xa,pde),e(pde,uMo),e(xa,bMo),e(Ye,vMo),e(Ye,G),e(G,mu),e(mu,_de),e(_de,FMo),e(mu,TMo),e(mu,oj),e(oj,MMo),e(mu,EMo),e(G,CMo),e(G,gu),e(gu,ude),e(ude,wMo),e(gu,AMo),e(gu,rj),e(rj,LMo),e(gu,yMo),e(G,xMo),e(G,hu),e(hu,bde),e(bde,$Mo),e(hu,kMo),e(hu,tj),e(tj,SMo),e(hu,RMo),e(G,PMo),e(G,pu),e(pu,vde),e(vde,BMo),e(pu,IMo),e(pu,aj),e(aj,NMo),e(pu,qMo),e(G,jMo),e(G,_u),e(_u,Fde),e(Fde,DMo),e(_u,GMo),e(_u,nj),e(nj,OMo),e(_u,VMo),e(G,XMo),e(G,uu),e(uu,Tde),e(Tde,zMo),e(uu,WMo),e(uu,sj),e(sj,QMo),e(uu,HMo),e(G,UMo),e(G,bu),e(bu,Mde),e(Mde,JMo),e(bu,YMo),e(bu,lj),e(lj,KMo),e(bu,ZMo),e(G,e4o),e(G,vu),e(vu,Ede),e(Ede,o4o),e(vu,r4o),e(vu,ij),e(ij,t4o),e(vu,a4o),e(G,n4o),e(G,Fu),e(Fu,Cde),e(Cde,s4o),e(Fu,l4o),e(Fu,dj),e(dj,i4o),e(Fu,d4o),e(G,c4o),e(G,Tu),e(Tu,wde),e(wde,f4o),e(Tu,m4o),e(Tu,cj),e(cj,g4o),e(Tu,h4o),e(G,p4o),e(G,Mu),e(Mu,Ade),e(Ade,_4o),e(Mu,u4o),e(Mu,fj),e(fj,b4o),e(Mu,v4o),e(G,F4o),e(G,Eu),e(Eu,Lde),e(Lde,T4o),e(Eu,M4o),e(Eu,mj),e(mj,E4o),e(Eu,C4o),e(G,w4o),e(G,Cu),e(Cu,yde),e(yde,A4o),e(Cu,L4o),e(Cu,gj),e(gj,y4o),e(Cu,x4o),e(G,$4o),e(G,wu),e(wu,xde),e(xde,k4o),e(wu,S4o),e(wu,hj),e(hj,R4o),e(wu,P4o),e(G,B4o),e(G,Au),e(Au,$de),e($de,I4o),e(Au,N4o),e(Au,pj),e(pj,q4o),e(Au,j4o),e(G,D4o),e(G,Lu),e(Lu,kde),e(kde,G4o),e(Lu,O4o),e(Lu,_j),e(_j,V4o),e(Lu,X4o),e(G,z4o),e(G,yu),e(yu,Sde),e(Sde,W4o),e(yu,Q4o),e(yu,uj),e(uj,H4o),e(yu,U4o),e(G,J4o),e(G,xu),e(xu,Rde),e(Rde,Y4o),e(xu,K4o),e(xu,bj),e(bj,Z4o),e(xu,eEo),e(G,oEo),e(G,$u),e($u,Pde),e(Pde,rEo),e($u,tEo),e($u,vj),e(vj,aEo),e($u,nEo),e(G,sEo),e(G,ku),e(ku,Bde),e(Bde,lEo),e(ku,iEo),e(ku,Fj),e(Fj,dEo),e(ku,cEo),e(G,fEo),e(G,Su),e(Su,Ide),e(Ide,mEo),e(Su,gEo),e(Su,Tj),e(Tj,hEo),e(Su,pEo),e(G,_Eo),e(G,Ru),e(Ru,Nde),e(Nde,uEo),e(Ru,bEo),e(Ru,Mj),e(Mj,vEo),e(Ru,FEo),e(G,TEo),e(G,Pu),e(Pu,qde),e(qde,MEo),e(Pu,EEo),e(Pu,Ej),e(Ej,CEo),e(Pu,wEo),e(G,AEo),e(G,Bu),e(Bu,jde),e(jde,LEo),e(Bu,yEo),e(Bu,Cj),e(Cj,xEo),e(Bu,$Eo),e(G,kEo),e(G,Iu),e(Iu,Dde),e(Dde,SEo),e(Iu,REo),e(Iu,wj),e(wj,PEo),e(Iu,BEo),e(G,IEo),e(G,Nu),e(Nu,Gde),e(Gde,NEo),e(Nu,qEo),e(Nu,Aj),e(Aj,jEo),e(Nu,DEo),e(G,GEo),e(G,qu),e(qu,Ode),e(Ode,OEo),e(qu,VEo),e(qu,Lj),e(Lj,XEo),e(qu,zEo),e(G,WEo),e(G,ju),e(ju,Vde),e(Vde,QEo),e(ju,HEo),e(ju,yj),e(yj,UEo),e(ju,JEo),e(G,YEo),e(G,Du),e(Du,Xde),e(Xde,KEo),e(Du,ZEo),e(Du,xj),e(xj,eCo),e(Du,oCo),e(G,rCo),e(G,Gu),e(Gu,zde),e(zde,tCo),e(Gu,aCo),e(Gu,$j),e($j,nCo),e(Gu,sCo),e(G,lCo),e(G,Ou),e(Ou,Wde),e(Wde,iCo),e(Ou,dCo),e(Ou,kj),e(kj,cCo),e(Ou,fCo),e(G,mCo),e(G,Vu),e(Vu,Qde),e(Qde,gCo),e(Vu,hCo),e(Vu,Sj),e(Sj,pCo),e(Vu,_Co),e(G,uCo),e(G,Xu),e(Xu,Hde),e(Hde,bCo),e(Xu,vCo),e(Xu,Rj),e(Rj,FCo),e(Xu,TCo),e(G,MCo),e(G,zu),e(zu,Ude),e(Ude,ECo),e(zu,CCo),e(zu,Pj),e(Pj,wCo),e(zu,ACo),e(G,LCo),e(G,Wu),e(Wu,Jde),e(Jde,yCo),e(Wu,xCo),e(Wu,Bj),e(Bj,$Co),e(Wu,kCo),e(G,SCo),e(G,Qu),e(Qu,Yde),e(Yde,RCo),e(Qu,PCo),e(Qu,Ij),e(Ij,BCo),e(Qu,ICo),e(G,NCo),e(G,Hu),e(Hu,Kde),e(Kde,qCo),e(Hu,jCo),e(Hu,Nj),e(Nj,DCo),e(Hu,GCo),e(G,OCo),e(G,Uu),e(Uu,Zde),e(Zde,VCo),e(Uu,XCo),e(Uu,qj),e(qj,zCo),e(Uu,WCo),e(G,QCo),e(G,Ju),e(Ju,ece),e(ece,HCo),e(Ju,UCo),e(Ju,jj),e(jj,JCo),e(Ju,YCo),e(G,KCo),e(G,Yu),e(Yu,oce),e(oce,ZCo),e(Yu,e5o),e(Yu,Dj),e(Dj,o5o),e(Yu,r5o),e(G,t5o),e(G,Ku),e(Ku,rce),e(rce,a5o),e(Ku,n5o),e(Ku,Gj),e(Gj,s5o),e(Ku,l5o),e(G,i5o),e(G,Zu),e(Zu,tce),e(tce,d5o),e(Zu,c5o),e(Zu,Oj),e(Oj,f5o),e(Zu,m5o),e(Ye,g5o),e(Ye,e2),e(e2,h5o),e(e2,ace),e(ace,p5o),e(e2,_5o),e(e2,nce),e(nce,u5o),e(Ye,b5o),M(o2,Ye,null),b(f,Lje,u),b(f,Ri,u),e(Ri,r2),e(r2,sce),M(wA,sce,null),e(Ri,v5o),e(Ri,lce),e(lce,F5o),b(f,yje,u),b(f,$o,u),M(AA,$o,null),e($o,T5o),e($o,Pi),e(Pi,M5o),e(Pi,Vj),e(Vj,E5o),e(Pi,C5o),e(Pi,Xj),e(Xj,w5o),e(Pi,A5o),e($o,L5o),e($o,LA),e(LA,y5o),e(LA,ice),e(ice,x5o),e(LA,$5o),e($o,k5o),e($o,nt),M(yA,nt,null),e(nt,S5o),e(nt,dce),e(dce,R5o),e(nt,P5o),e(nt,Bi),e(Bi,B5o),e(Bi,cce),e(cce,I5o),e(Bi,N5o),e(Bi,zj),e(zj,q5o),e(Bi,j5o),e(nt,D5o),M(t2,nt,null),e($o,G5o),e($o,Ke),M(xA,Ke,null),e(Ke,O5o),e(Ke,fce),e(fce,V5o),e(Ke,X5o),e(Ke,$a),e($a,z5o),e($a,mce),e(mce,W5o),e($a,Q5o),e($a,gce),e(gce,H5o),e($a,U5o),e($a,hce),e(hce,J5o),e($a,Y5o),e(Ke,K5o),e(Ke,z),e(z,a2),e(a2,pce),e(pce,Z5o),e(a2,e3o),e(a2,Wj),e(Wj,o3o),e(a2,r3o),e(z,t3o),e(z,n2),e(n2,_ce),e(_ce,a3o),e(n2,n3o),e(n2,Qj),e(Qj,s3o),e(n2,l3o),e(z,i3o),e(z,s2),e(s2,uce),e(uce,d3o),e(s2,c3o),e(s2,Hj),e(Hj,f3o),e(s2,m3o),e(z,g3o),e(z,l2),e(l2,bce),e(bce,h3o),e(l2,p3o),e(l2,Uj),e(Uj,_3o),e(l2,u3o),e(z,b3o),e(z,i2),e(i2,vce),e(vce,v3o),e(i2,F3o),e(i2,Jj),e(Jj,T3o),e(i2,M3o),e(z,E3o),e(z,d2),e(d2,Fce),e(Fce,C3o),e(d2,w3o),e(d2,Yj),e(Yj,A3o),e(d2,L3o),e(z,y3o),e(z,c2),e(c2,Tce),e(Tce,x3o),e(c2,$3o),e(c2,Kj),e(Kj,k3o),e(c2,S3o),e(z,R3o),e(z,f2),e(f2,Mce),e(Mce,P3o),e(f2,B3o),e(f2,Zj),e(Zj,I3o),e(f2,N3o),e(z,q3o),e(z,m2),e(m2,Ece),e(Ece,j3o),e(m2,D3o),e(m2,eD),e(eD,G3o),e(m2,O3o),e(z,V3o),e(z,g2),e(g2,Cce),e(Cce,X3o),e(g2,z3o),e(g2,oD),e(oD,W3o),e(g2,Q3o),e(z,H3o),e(z,h2),e(h2,wce),e(wce,U3o),e(h2,J3o),e(h2,rD),e(rD,Y3o),e(h2,K3o),e(z,Z3o),e(z,p2),e(p2,Ace),e(Ace,e0o),e(p2,o0o),e(p2,tD),e(tD,r0o),e(p2,t0o),e(z,a0o),e(z,_2),e(_2,Lce),e(Lce,n0o),e(_2,s0o),e(_2,aD),e(aD,l0o),e(_2,i0o),e(z,d0o),e(z,u2),e(u2,yce),e(yce,c0o),e(u2,f0o),e(u2,nD),e(nD,m0o),e(u2,g0o),e(z,h0o),e(z,b2),e(b2,xce),e(xce,p0o),e(b2,_0o),e(b2,sD),e(sD,u0o),e(b2,b0o),e(z,v0o),e(z,v2),e(v2,$ce),e($ce,F0o),e(v2,T0o),e(v2,lD),e(lD,M0o),e(v2,E0o),e(z,C0o),e(z,F2),e(F2,kce),e(kce,w0o),e(F2,A0o),e(F2,iD),e(iD,L0o),e(F2,y0o),e(z,x0o),e(z,T2),e(T2,Sce),e(Sce,$0o),e(T2,k0o),e(T2,dD),e(dD,S0o),e(T2,R0o),e(z,P0o),e(z,M2),e(M2,Rce),e(Rce,B0o),e(M2,I0o),e(M2,cD),e(cD,N0o),e(M2,q0o),e(z,j0o),e(z,E2),e(E2,Pce),e(Pce,D0o),e(E2,G0o),e(E2,fD),e(fD,O0o),e(E2,V0o),e(z,X0o),e(z,C2),e(C2,Bce),e(Bce,z0o),e(C2,W0o),e(C2,mD),e(mD,Q0o),e(C2,H0o),e(z,U0o),e(z,w2),e(w2,Ice),e(Ice,J0o),e(w2,Y0o),e(w2,gD),e(gD,K0o),e(w2,Z0o),e(z,ewo),e(z,A2),e(A2,Nce),e(Nce,owo),e(A2,rwo),e(A2,hD),e(hD,two),e(A2,awo),e(z,nwo),e(z,L2),e(L2,qce),e(qce,swo),e(L2,lwo),e(L2,pD),e(pD,iwo),e(L2,dwo),e(z,cwo),e(z,y2),e(y2,jce),e(jce,fwo),e(y2,mwo),e(y2,_D),e(_D,gwo),e(y2,hwo),e(z,pwo),e(z,x2),e(x2,Dce),e(Dce,_wo),e(x2,uwo),e(x2,uD),e(uD,bwo),e(x2,vwo),e(z,Fwo),e(z,$2),e($2,Gce),e(Gce,Two),e($2,Mwo),e($2,bD),e(bD,Ewo),e($2,Cwo),e(z,wwo),e(z,k2),e(k2,Oce),e(Oce,Awo),e(k2,Lwo),e(k2,vD),e(vD,ywo),e(k2,xwo),e(z,$wo),e(z,S2),e(S2,Vce),e(Vce,kwo),e(S2,Swo),e(S2,FD),e(FD,Rwo),e(S2,Pwo),e(z,Bwo),e(z,R2),e(R2,Xce),e(Xce,Iwo),e(R2,Nwo),e(R2,TD),e(TD,qwo),e(R2,jwo),e(z,Dwo),e(z,P2),e(P2,zce),e(zce,Gwo),e(P2,Owo),e(P2,MD),e(MD,Vwo),e(P2,Xwo),e(z,zwo),e(z,B2),e(B2,Wce),e(Wce,Wwo),e(B2,Qwo),e(B2,ED),e(ED,Hwo),e(B2,Uwo),e(z,Jwo),e(z,I2),e(I2,Qce),e(Qce,Ywo),e(I2,Kwo),e(I2,CD),e(CD,Zwo),e(I2,eAo),e(z,oAo),e(z,N2),e(N2,Hce),e(Hce,rAo),e(N2,tAo),e(N2,wD),e(wD,aAo),e(N2,nAo),e(z,sAo),e(z,q2),e(q2,Uce),e(Uce,lAo),e(q2,iAo),e(q2,AD),e(AD,dAo),e(q2,cAo),e(z,fAo),e(z,j2),e(j2,Jce),e(Jce,mAo),e(j2,gAo),e(j2,LD),e(LD,hAo),e(j2,pAo),e(z,_Ao),e(z,D2),e(D2,Yce),e(Yce,uAo),e(D2,bAo),e(D2,yD),e(yD,vAo),e(D2,FAo),e(Ke,TAo),e(Ke,G2),e(G2,MAo),e(G2,Kce),e(Kce,EAo),e(G2,CAo),e(G2,Zce),e(Zce,wAo),e(Ke,AAo),M(O2,Ke,null),b(f,xje,u),b(f,Ii,u),e(Ii,V2),e(V2,efe),M($A,efe,null),e(Ii,LAo),e(Ii,ofe),e(ofe,yAo),b(f,$je,u),b(f,ko,u),M(kA,ko,null),e(ko,xAo),e(ko,Ni),e(Ni,$Ao),e(Ni,xD),e(xD,kAo),e(Ni,SAo),e(Ni,$D),e($D,RAo),e(Ni,PAo),e(ko,BAo),e(ko,SA),e(SA,IAo),e(SA,rfe),e(rfe,NAo),e(SA,qAo),e(ko,jAo),e(ko,st),M(RA,st,null),e(st,DAo),e(st,tfe),e(tfe,GAo),e(st,OAo),e(st,qi),e(qi,VAo),e(qi,afe),e(afe,XAo),e(qi,zAo),e(qi,kD),e(kD,WAo),e(qi,QAo),e(st,HAo),M(X2,st,null),e(ko,UAo),e(ko,Ze),M(PA,Ze,null),e(Ze,JAo),e(Ze,nfe),e(nfe,YAo),e(Ze,KAo),e(Ze,ka),e(ka,ZAo),e(ka,sfe),e(sfe,eLo),e(ka,oLo),e(ka,lfe),e(lfe,rLo),e(ka,tLo),e(ka,ife),e(ife,aLo),e(ka,nLo),e(Ze,sLo),e(Ze,W),e(W,z2),e(z2,dfe),e(dfe,lLo),e(z2,iLo),e(z2,SD),e(SD,dLo),e(z2,cLo),e(W,fLo),e(W,W2),e(W2,cfe),e(cfe,mLo),e(W2,gLo),e(W2,RD),e(RD,hLo),e(W2,pLo),e(W,_Lo),e(W,Q2),e(Q2,ffe),e(ffe,uLo),e(Q2,bLo),e(Q2,PD),e(PD,vLo),e(Q2,FLo),e(W,TLo),e(W,H2),e(H2,mfe),e(mfe,MLo),e(H2,ELo),e(H2,BD),e(BD,CLo),e(H2,wLo),e(W,ALo),e(W,U2),e(U2,gfe),e(gfe,LLo),e(U2,yLo),e(U2,ID),e(ID,xLo),e(U2,$Lo),e(W,kLo),e(W,J2),e(J2,hfe),e(hfe,SLo),e(J2,RLo),e(J2,ND),e(ND,PLo),e(J2,BLo),e(W,ILo),e(W,Y2),e(Y2,pfe),e(pfe,NLo),e(Y2,qLo),e(Y2,qD),e(qD,jLo),e(Y2,DLo),e(W,GLo),e(W,K2),e(K2,_fe),e(_fe,OLo),e(K2,VLo),e(K2,jD),e(jD,XLo),e(K2,zLo),e(W,WLo),e(W,Z2),e(Z2,ufe),e(ufe,QLo),e(Z2,HLo),e(Z2,DD),e(DD,ULo),e(Z2,JLo),e(W,YLo),e(W,e1),e(e1,bfe),e(bfe,KLo),e(e1,ZLo),e(e1,GD),e(GD,eyo),e(e1,oyo),e(W,ryo),e(W,o1),e(o1,vfe),e(vfe,tyo),e(o1,ayo),e(o1,OD),e(OD,nyo),e(o1,syo),e(W,lyo),e(W,r1),e(r1,Ffe),e(Ffe,iyo),e(r1,dyo),e(r1,VD),e(VD,cyo),e(r1,fyo),e(W,myo),e(W,t1),e(t1,Tfe),e(Tfe,gyo),e(t1,hyo),e(t1,XD),e(XD,pyo),e(t1,_yo),e(W,uyo),e(W,a1),e(a1,Mfe),e(Mfe,byo),e(a1,vyo),e(a1,zD),e(zD,Fyo),e(a1,Tyo),e(W,Myo),e(W,n1),e(n1,Efe),e(Efe,Eyo),e(n1,Cyo),e(n1,WD),e(WD,wyo),e(n1,Ayo),e(W,Lyo),e(W,s1),e(s1,Cfe),e(Cfe,yyo),e(s1,xyo),e(s1,QD),e(QD,$yo),e(s1,kyo),e(W,Syo),e(W,l1),e(l1,wfe),e(wfe,Ryo),e(l1,Pyo),e(l1,HD),e(HD,Byo),e(l1,Iyo),e(W,Nyo),e(W,i1),e(i1,Afe),e(Afe,qyo),e(i1,jyo),e(i1,UD),e(UD,Dyo),e(i1,Gyo),e(W,Oyo),e(W,d1),e(d1,Lfe),e(Lfe,Vyo),e(d1,Xyo),e(d1,JD),e(JD,zyo),e(d1,Wyo),e(W,Qyo),e(W,c1),e(c1,yfe),e(yfe,Hyo),e(c1,Uyo),e(c1,YD),e(YD,Jyo),e(c1,Yyo),e(W,Kyo),e(W,f1),e(f1,xfe),e(xfe,Zyo),e(f1,e8o),e(f1,KD),e(KD,o8o),e(f1,r8o),e(W,t8o),e(W,m1),e(m1,$fe),e($fe,a8o),e(m1,n8o),e(m1,ZD),e(ZD,s8o),e(m1,l8o),e(W,i8o),e(W,g1),e(g1,kfe),e(kfe,d8o),e(g1,c8o),e(g1,eG),e(eG,f8o),e(g1,m8o),e(W,g8o),e(W,h1),e(h1,Sfe),e(Sfe,h8o),e(h1,p8o),e(h1,oG),e(oG,_8o),e(h1,u8o),e(W,b8o),e(W,p1),e(p1,Rfe),e(Rfe,v8o),e(p1,F8o),e(p1,rG),e(rG,T8o),e(p1,M8o),e(W,E8o),e(W,_1),e(_1,Pfe),e(Pfe,C8o),e(_1,w8o),e(_1,tG),e(tG,A8o),e(_1,L8o),e(W,y8o),e(W,u1),e(u1,Bfe),e(Bfe,x8o),e(u1,$8o),e(u1,aG),e(aG,k8o),e(u1,S8o),e(W,R8o),e(W,b1),e(b1,Ife),e(Ife,P8o),e(b1,B8o),e(b1,nG),e(nG,I8o),e(b1,N8o),e(W,q8o),e(W,v1),e(v1,Nfe),e(Nfe,j8o),e(v1,D8o),e(v1,sG),e(sG,G8o),e(v1,O8o),e(W,V8o),e(W,F1),e(F1,qfe),e(qfe,X8o),e(F1,z8o),e(F1,lG),e(lG,W8o),e(F1,Q8o),e(W,H8o),e(W,T1),e(T1,jfe),e(jfe,U8o),e(T1,J8o),e(T1,iG),e(iG,Y8o),e(T1,K8o),e(W,Z8o),e(W,M1),e(M1,Dfe),e(Dfe,exo),e(M1,oxo),e(M1,Gfe),e(Gfe,rxo),e(M1,txo),e(W,axo),e(W,E1),e(E1,Ofe),e(Ofe,nxo),e(E1,sxo),e(E1,dG),e(dG,lxo),e(E1,ixo),e(W,dxo),e(W,C1),e(C1,Vfe),e(Vfe,cxo),e(C1,fxo),e(C1,cG),e(cG,mxo),e(C1,gxo),e(W,hxo),e(W,w1),e(w1,Xfe),e(Xfe,pxo),e(w1,_xo),e(w1,fG),e(fG,uxo),e(w1,bxo),e(W,vxo),e(W,A1),e(A1,zfe),e(zfe,Fxo),e(A1,Txo),e(A1,mG),e(mG,Mxo),e(A1,Exo),e(Ze,Cxo),e(Ze,L1),e(L1,wxo),e(L1,Wfe),e(Wfe,Axo),e(L1,Lxo),e(L1,Qfe),e(Qfe,yxo),e(Ze,xxo),M(y1,Ze,null),b(f,kje,u),b(f,ji,u),e(ji,x1),e(x1,Hfe),M(BA,Hfe,null),e(ji,$xo),e(ji,Ufe),e(Ufe,kxo),b(f,Sje,u),b(f,So,u),M(IA,So,null),e(So,Sxo),e(So,Di),e(Di,Rxo),e(Di,gG),e(gG,Pxo),e(Di,Bxo),e(Di,hG),e(hG,Ixo),e(Di,Nxo),e(So,qxo),e(So,NA),e(NA,jxo),e(NA,Jfe),e(Jfe,Dxo),e(NA,Gxo),e(So,Oxo),e(So,lt),M(qA,lt,null),e(lt,Vxo),e(lt,Yfe),e(Yfe,Xxo),e(lt,zxo),e(lt,Gi),e(Gi,Wxo),e(Gi,Kfe),e(Kfe,Qxo),e(Gi,Hxo),e(Gi,pG),e(pG,Uxo),e(Gi,Jxo),e(lt,Yxo),M($1,lt,null),e(So,Kxo),e(So,eo),M(jA,eo,null),e(eo,Zxo),e(eo,Zfe),e(Zfe,e$o),e(eo,o$o),e(eo,Sa),e(Sa,r$o),e(Sa,eme),e(eme,t$o),e(Sa,a$o),e(Sa,ome),e(ome,n$o),e(Sa,s$o),e(Sa,rme),e(rme,l$o),e(Sa,i$o),e(eo,d$o),e(eo,pe),e(pe,k1),e(k1,tme),e(tme,c$o),e(k1,f$o),e(k1,_G),e(_G,m$o),e(k1,g$o),e(pe,h$o),e(pe,S1),e(S1,ame),e(ame,p$o),e(S1,_$o),e(S1,uG),e(uG,u$o),e(S1,b$o),e(pe,v$o),e(pe,R1),e(R1,nme),e(nme,F$o),e(R1,T$o),e(R1,bG),e(bG,M$o),e(R1,E$o),e(pe,C$o),e(pe,P1),e(P1,sme),e(sme,w$o),e(P1,A$o),e(P1,vG),e(vG,L$o),e(P1,y$o),e(pe,x$o),e(pe,B1),e(B1,lme),e(lme,$$o),e(B1,k$o),e(B1,FG),e(FG,S$o),e(B1,R$o),e(pe,P$o),e(pe,I1),e(I1,ime),e(ime,B$o),e(I1,I$o),e(I1,TG),e(TG,N$o),e(I1,q$o),e(pe,j$o),e(pe,N1),e(N1,dme),e(dme,D$o),e(N1,G$o),e(N1,MG),e(MG,O$o),e(N1,V$o),e(pe,X$o),e(pe,q1),e(q1,cme),e(cme,z$o),e(q1,W$o),e(q1,EG),e(EG,Q$o),e(q1,H$o),e(pe,U$o),e(pe,j1),e(j1,fme),e(fme,J$o),e(j1,Y$o),e(j1,CG),e(CG,K$o),e(j1,Z$o),e(pe,eko),e(pe,D1),e(D1,mme),e(mme,oko),e(D1,rko),e(D1,wG),e(wG,tko),e(D1,ako),e(pe,nko),e(pe,G1),e(G1,gme),e(gme,sko),e(G1,lko),e(G1,AG),e(AG,iko),e(G1,dko),e(pe,cko),e(pe,O1),e(O1,hme),e(hme,fko),e(O1,mko),e(O1,LG),e(LG,gko),e(O1,hko),e(pe,pko),e(pe,V1),e(V1,pme),e(pme,_ko),e(V1,uko),e(V1,yG),e(yG,bko),e(V1,vko),e(pe,Fko),e(pe,X1),e(X1,_me),e(_me,Tko),e(X1,Mko),e(X1,xG),e(xG,Eko),e(X1,Cko),e(pe,wko),e(pe,z1),e(z1,ume),e(ume,Ako),e(z1,Lko),e(z1,$G),e($G,yko),e(z1,xko),e(pe,$ko),e(pe,W1),e(W1,bme),e(bme,kko),e(W1,Sko),e(W1,kG),e(kG,Rko),e(W1,Pko),e(pe,Bko),e(pe,Q1),e(Q1,vme),e(vme,Iko),e(Q1,Nko),e(Q1,SG),e(SG,qko),e(Q1,jko),e(eo,Dko),e(eo,H1),e(H1,Gko),e(H1,Fme),e(Fme,Oko),e(H1,Vko),e(H1,Tme),e(Tme,Xko),e(eo,zko),M(U1,eo,null),b(f,Rje,u),b(f,Oi,u),e(Oi,J1),e(J1,Mme),M(DA,Mme,null),e(Oi,Wko),e(Oi,Eme),e(Eme,Qko),b(f,Pje,u),b(f,Ro,u),M(GA,Ro,null),e(Ro,Hko),e(Ro,Vi),e(Vi,Uko),e(Vi,RG),e(RG,Jko),e(Vi,Yko),e(Vi,PG),e(PG,Kko),e(Vi,Zko),e(Ro,eSo),e(Ro,OA),e(OA,oSo),e(OA,Cme),e(Cme,rSo),e(OA,tSo),e(Ro,aSo),e(Ro,it),M(VA,it,null),e(it,nSo),e(it,wme),e(wme,sSo),e(it,lSo),e(it,Xi),e(Xi,iSo),e(Xi,Ame),e(Ame,dSo),e(Xi,cSo),e(Xi,BG),e(BG,fSo),e(Xi,mSo),e(it,gSo),M(Y1,it,null),e(Ro,hSo),e(Ro,oo),M(XA,oo,null),e(oo,pSo),e(oo,Lme),e(Lme,_So),e(oo,uSo),e(oo,Ra),e(Ra,bSo),e(Ra,yme),e(yme,vSo),e(Ra,FSo),e(Ra,xme),e(xme,TSo),e(Ra,MSo),e(Ra,$me),e($me,ESo),e(Ra,CSo),e(oo,wSo),e(oo,N),e(N,K1),e(K1,kme),e(kme,ASo),e(K1,LSo),e(K1,IG),e(IG,ySo),e(K1,xSo),e(N,$So),e(N,Z1),e(Z1,Sme),e(Sme,kSo),e(Z1,SSo),e(Z1,NG),e(NG,RSo),e(Z1,PSo),e(N,BSo),e(N,eb),e(eb,Rme),e(Rme,ISo),e(eb,NSo),e(eb,qG),e(qG,qSo),e(eb,jSo),e(N,DSo),e(N,ob),e(ob,Pme),e(Pme,GSo),e(ob,OSo),e(ob,jG),e(jG,VSo),e(ob,XSo),e(N,zSo),e(N,rb),e(rb,Bme),e(Bme,WSo),e(rb,QSo),e(rb,DG),e(DG,HSo),e(rb,USo),e(N,JSo),e(N,tb),e(tb,Ime),e(Ime,YSo),e(tb,KSo),e(tb,GG),e(GG,ZSo),e(tb,eRo),e(N,oRo),e(N,ab),e(ab,Nme),e(Nme,rRo),e(ab,tRo),e(ab,OG),e(OG,aRo),e(ab,nRo),e(N,sRo),e(N,nb),e(nb,qme),e(qme,lRo),e(nb,iRo),e(nb,VG),e(VG,dRo),e(nb,cRo),e(N,fRo),e(N,sb),e(sb,jme),e(jme,mRo),e(sb,gRo),e(sb,XG),e(XG,hRo),e(sb,pRo),e(N,_Ro),e(N,lb),e(lb,Dme),e(Dme,uRo),e(lb,bRo),e(lb,zG),e(zG,vRo),e(lb,FRo),e(N,TRo),e(N,ib),e(ib,Gme),e(Gme,MRo),e(ib,ERo),e(ib,WG),e(WG,CRo),e(ib,wRo),e(N,ARo),e(N,db),e(db,Ome),e(Ome,LRo),e(db,yRo),e(db,QG),e(QG,xRo),e(db,$Ro),e(N,kRo),e(N,cb),e(cb,Vme),e(Vme,SRo),e(cb,RRo),e(cb,HG),e(HG,PRo),e(cb,BRo),e(N,IRo),e(N,fb),e(fb,Xme),e(Xme,NRo),e(fb,qRo),e(fb,UG),e(UG,jRo),e(fb,DRo),e(N,GRo),e(N,mb),e(mb,zme),e(zme,ORo),e(mb,VRo),e(mb,JG),e(JG,XRo),e(mb,zRo),e(N,WRo),e(N,gb),e(gb,Wme),e(Wme,QRo),e(gb,HRo),e(gb,YG),e(YG,URo),e(gb,JRo),e(N,YRo),e(N,hb),e(hb,Qme),e(Qme,KRo),e(hb,ZRo),e(hb,KG),e(KG,ePo),e(hb,oPo),e(N,rPo),e(N,pb),e(pb,Hme),e(Hme,tPo),e(pb,aPo),e(pb,ZG),e(ZG,nPo),e(pb,sPo),e(N,lPo),e(N,_b),e(_b,Ume),e(Ume,iPo),e(_b,dPo),e(_b,eO),e(eO,cPo),e(_b,fPo),e(N,mPo),e(N,ub),e(ub,Jme),e(Jme,gPo),e(ub,hPo),e(ub,oO),e(oO,pPo),e(ub,_Po),e(N,uPo),e(N,bb),e(bb,Yme),e(Yme,bPo),e(bb,vPo),e(bb,rO),e(rO,FPo),e(bb,TPo),e(N,MPo),e(N,vb),e(vb,Kme),e(Kme,EPo),e(vb,CPo),e(vb,tO),e(tO,wPo),e(vb,APo),e(N,LPo),e(N,Fb),e(Fb,Zme),e(Zme,yPo),e(Fb,xPo),e(Fb,aO),e(aO,$Po),e(Fb,kPo),e(N,SPo),e(N,Tb),e(Tb,ege),e(ege,RPo),e(Tb,PPo),e(Tb,nO),e(nO,BPo),e(Tb,IPo),e(N,NPo),e(N,Mb),e(Mb,oge),e(oge,qPo),e(Mb,jPo),e(Mb,sO),e(sO,DPo),e(Mb,GPo),e(N,OPo),e(N,Eb),e(Eb,rge),e(rge,VPo),e(Eb,XPo),e(Eb,lO),e(lO,zPo),e(Eb,WPo),e(N,QPo),e(N,Cb),e(Cb,tge),e(tge,HPo),e(Cb,UPo),e(Cb,iO),e(iO,JPo),e(Cb,YPo),e(N,KPo),e(N,wb),e(wb,age),e(age,ZPo),e(wb,eBo),e(wb,dO),e(dO,oBo),e(wb,rBo),e(N,tBo),e(N,Ab),e(Ab,nge),e(nge,aBo),e(Ab,nBo),e(Ab,cO),e(cO,sBo),e(Ab,lBo),e(N,iBo),e(N,Lb),e(Lb,sge),e(sge,dBo),e(Lb,cBo),e(Lb,fO),e(fO,fBo),e(Lb,mBo),e(N,gBo),e(N,yb),e(yb,lge),e(lge,hBo),e(yb,pBo),e(yb,mO),e(mO,_Bo),e(yb,uBo),e(N,bBo),e(N,xb),e(xb,ige),e(ige,vBo),e(xb,FBo),e(xb,gO),e(gO,TBo),e(xb,MBo),e(N,EBo),e(N,$b),e($b,dge),e(dge,CBo),e($b,wBo),e($b,hO),e(hO,ABo),e($b,LBo),e(N,yBo),e(N,kb),e(kb,cge),e(cge,xBo),e(kb,$Bo),e(kb,pO),e(pO,kBo),e(kb,SBo),e(N,RBo),e(N,Sb),e(Sb,fge),e(fge,PBo),e(Sb,BBo),e(Sb,_O),e(_O,IBo),e(Sb,NBo),e(N,qBo),e(N,Rb),e(Rb,mge),e(mge,jBo),e(Rb,DBo),e(Rb,uO),e(uO,GBo),e(Rb,OBo),e(N,VBo),e(N,Pb),e(Pb,gge),e(gge,XBo),e(Pb,zBo),e(Pb,bO),e(bO,WBo),e(Pb,QBo),e(N,HBo),e(N,Bb),e(Bb,hge),e(hge,UBo),e(Bb,JBo),e(Bb,vO),e(vO,YBo),e(Bb,KBo),e(N,ZBo),e(N,Ib),e(Ib,pge),e(pge,eIo),e(Ib,oIo),e(Ib,FO),e(FO,rIo),e(Ib,tIo),e(N,aIo),e(N,Nb),e(Nb,_ge),e(_ge,nIo),e(Nb,sIo),e(Nb,TO),e(TO,lIo),e(Nb,iIo),e(N,dIo),e(N,qb),e(qb,uge),e(uge,cIo),e(qb,fIo),e(qb,MO),e(MO,mIo),e(qb,gIo),e(N,hIo),e(N,jb),e(jb,bge),e(bge,pIo),e(jb,_Io),e(jb,EO),e(EO,uIo),e(jb,bIo),e(N,vIo),e(N,Db),e(Db,vge),e(vge,FIo),e(Db,TIo),e(Db,CO),e(CO,MIo),e(Db,EIo),e(N,CIo),e(N,Gb),e(Gb,Fge),e(Fge,wIo),e(Gb,AIo),e(Gb,wO),e(wO,LIo),e(Gb,yIo),e(N,xIo),e(N,Ob),e(Ob,Tge),e(Tge,$Io),e(Ob,kIo),e(Ob,AO),e(AO,SIo),e(Ob,RIo),e(N,PIo),e(N,Vb),e(Vb,Mge),e(Mge,BIo),e(Vb,IIo),e(Vb,LO),e(LO,NIo),e(Vb,qIo),e(N,jIo),e(N,Xb),e(Xb,Ege),e(Ege,DIo),e(Xb,GIo),e(Xb,yO),e(yO,OIo),e(Xb,VIo),e(oo,XIo),e(oo,zb),e(zb,zIo),e(zb,Cge),e(Cge,WIo),e(zb,QIo),e(zb,wge),e(wge,HIo),e(oo,UIo),M(Wb,oo,null),b(f,Bje,u),b(f,zi,u),e(zi,Qb),e(Qb,Age),M(zA,Age,null),e(zi,JIo),e(zi,Lge),e(Lge,YIo),b(f,Ije,u),b(f,Po,u),M(WA,Po,null),e(Po,KIo),e(Po,Wi),e(Wi,ZIo),e(Wi,xO),e(xO,eNo),e(Wi,oNo),e(Wi,$O),e($O,rNo),e(Wi,tNo),e(Po,aNo),e(Po,QA),e(QA,nNo),e(QA,yge),e(yge,sNo),e(QA,lNo),e(Po,iNo),e(Po,dt),M(HA,dt,null),e(dt,dNo),e(dt,xge),e(xge,cNo),e(dt,fNo),e(dt,Qi),e(Qi,mNo),e(Qi,$ge),e($ge,gNo),e(Qi,hNo),e(Qi,kO),e(kO,pNo),e(Qi,_No),e(dt,uNo),M(Hb,dt,null),e(Po,bNo),e(Po,ro),M(UA,ro,null),e(ro,vNo),e(ro,kge),e(kge,FNo),e(ro,TNo),e(ro,Pa),e(Pa,MNo),e(Pa,Sge),e(Sge,ENo),e(Pa,CNo),e(Pa,Rge),e(Rge,wNo),e(Pa,ANo),e(Pa,Pge),e(Pge,LNo),e(Pa,yNo),e(ro,xNo),e(ro,K),e(K,Ub),e(Ub,Bge),e(Bge,$No),e(Ub,kNo),e(Ub,SO),e(SO,SNo),e(Ub,RNo),e(K,PNo),e(K,Jb),e(Jb,Ige),e(Ige,BNo),e(Jb,INo),e(Jb,RO),e(RO,NNo),e(Jb,qNo),e(K,jNo),e(K,Yb),e(Yb,Nge),e(Nge,DNo),e(Yb,GNo),e(Yb,PO),e(PO,ONo),e(Yb,VNo),e(K,XNo),e(K,Kb),e(Kb,qge),e(qge,zNo),e(Kb,WNo),e(Kb,BO),e(BO,QNo),e(Kb,HNo),e(K,UNo),e(K,Zb),e(Zb,jge),e(jge,JNo),e(Zb,YNo),e(Zb,IO),e(IO,KNo),e(Zb,ZNo),e(K,eqo),e(K,ev),e(ev,Dge),e(Dge,oqo),e(ev,rqo),e(ev,NO),e(NO,tqo),e(ev,aqo),e(K,nqo),e(K,ov),e(ov,Gge),e(Gge,sqo),e(ov,lqo),e(ov,qO),e(qO,iqo),e(ov,dqo),e(K,cqo),e(K,rv),e(rv,Oge),e(Oge,fqo),e(rv,mqo),e(rv,jO),e(jO,gqo),e(rv,hqo),e(K,pqo),e(K,tv),e(tv,Vge),e(Vge,_qo),e(tv,uqo),e(tv,DO),e(DO,bqo),e(tv,vqo),e(K,Fqo),e(K,av),e(av,Xge),e(Xge,Tqo),e(av,Mqo),e(av,GO),e(GO,Eqo),e(av,Cqo),e(K,wqo),e(K,nv),e(nv,zge),e(zge,Aqo),e(nv,Lqo),e(nv,OO),e(OO,yqo),e(nv,xqo),e(K,$qo),e(K,sv),e(sv,Wge),e(Wge,kqo),e(sv,Sqo),e(sv,VO),e(VO,Rqo),e(sv,Pqo),e(K,Bqo),e(K,lv),e(lv,Qge),e(Qge,Iqo),e(lv,Nqo),e(lv,XO),e(XO,qqo),e(lv,jqo),e(K,Dqo),e(K,iv),e(iv,Hge),e(Hge,Gqo),e(iv,Oqo),e(iv,zO),e(zO,Vqo),e(iv,Xqo),e(K,zqo),e(K,dv),e(dv,Uge),e(Uge,Wqo),e(dv,Qqo),e(dv,WO),e(WO,Hqo),e(dv,Uqo),e(K,Jqo),e(K,cv),e(cv,Jge),e(Jge,Yqo),e(cv,Kqo),e(cv,QO),e(QO,Zqo),e(cv,ejo),e(K,ojo),e(K,fv),e(fv,Yge),e(Yge,rjo),e(fv,tjo),e(fv,HO),e(HO,ajo),e(fv,njo),e(K,sjo),e(K,mv),e(mv,Kge),e(Kge,ljo),e(mv,ijo),e(mv,UO),e(UO,djo),e(mv,cjo),e(K,fjo),e(K,gv),e(gv,Zge),e(Zge,mjo),e(gv,gjo),e(gv,JO),e(JO,hjo),e(gv,pjo),e(K,_jo),e(K,hv),e(hv,ehe),e(ehe,ujo),e(hv,bjo),e(hv,YO),e(YO,vjo),e(hv,Fjo),e(K,Tjo),e(K,pv),e(pv,ohe),e(ohe,Mjo),e(pv,Ejo),e(pv,KO),e(KO,Cjo),e(pv,wjo),e(K,Ajo),e(K,_v),e(_v,rhe),e(rhe,Ljo),e(_v,yjo),e(_v,ZO),e(ZO,xjo),e(_v,$jo),e(K,kjo),e(K,uv),e(uv,the),e(the,Sjo),e(uv,Rjo),e(uv,eV),e(eV,Pjo),e(uv,Bjo),e(K,Ijo),e(K,bv),e(bv,ahe),e(ahe,Njo),e(bv,qjo),e(bv,oV),e(oV,jjo),e(bv,Djo),e(K,Gjo),e(K,vv),e(vv,nhe),e(nhe,Ojo),e(vv,Vjo),e(vv,rV),e(rV,Xjo),e(vv,zjo),e(K,Wjo),e(K,Fv),e(Fv,she),e(she,Qjo),e(Fv,Hjo),e(Fv,tV),e(tV,Ujo),e(Fv,Jjo),e(K,Yjo),e(K,Tv),e(Tv,lhe),e(lhe,Kjo),e(Tv,Zjo),e(Tv,aV),e(aV,eDo),e(Tv,oDo),e(K,rDo),e(K,Mv),e(Mv,ihe),e(ihe,tDo),e(Mv,aDo),e(Mv,nV),e(nV,nDo),e(Mv,sDo),e(K,lDo),e(K,Ev),e(Ev,dhe),e(dhe,iDo),e(Ev,dDo),e(Ev,sV),e(sV,cDo),e(Ev,fDo),e(ro,mDo),e(ro,Cv),e(Cv,gDo),e(Cv,che),e(che,hDo),e(Cv,pDo),e(Cv,fhe),e(fhe,_Do),e(ro,uDo),M(wv,ro,null),b(f,Nje,u),b(f,Hi,u),e(Hi,Av),e(Av,mhe),M(JA,mhe,null),e(Hi,bDo),e(Hi,ghe),e(ghe,vDo),b(f,qje,u),b(f,Bo,u),M(YA,Bo,null),e(Bo,FDo),e(Bo,Ui),e(Ui,TDo),e(Ui,lV),e(lV,MDo),e(Ui,EDo),e(Ui,iV),e(iV,CDo),e(Ui,wDo),e(Bo,ADo),e(Bo,KA),e(KA,LDo),e(KA,hhe),e(hhe,yDo),e(KA,xDo),e(Bo,$Do),e(Bo,ct),M(ZA,ct,null),e(ct,kDo),e(ct,phe),e(phe,SDo),e(ct,RDo),e(ct,Ji),e(Ji,PDo),e(Ji,_he),e(_he,BDo),e(Ji,IDo),e(Ji,dV),e(dV,NDo),e(Ji,qDo),e(ct,jDo),M(Lv,ct,null),e(Bo,DDo),e(Bo,to),M(eL,to,null),e(to,GDo),e(to,uhe),e(uhe,ODo),e(to,VDo),e(to,Ba),e(Ba,XDo),e(Ba,bhe),e(bhe,zDo),e(Ba,WDo),e(Ba,vhe),e(vhe,QDo),e(Ba,HDo),e(Ba,Fhe),e(Fhe,UDo),e(Ba,JDo),e(to,YDo),e(to,Yr),e(Yr,yv),e(yv,The),e(The,KDo),e(yv,ZDo),e(yv,cV),e(cV,eGo),e(yv,oGo),e(Yr,rGo),e(Yr,xv),e(xv,Mhe),e(Mhe,tGo),e(xv,aGo),e(xv,fV),e(fV,nGo),e(xv,sGo),e(Yr,lGo),e(Yr,$v),e($v,Ehe),e(Ehe,iGo),e($v,dGo),e($v,mV),e(mV,cGo),e($v,fGo),e(Yr,mGo),e(Yr,kv),e(kv,Che),e(Che,gGo),e(kv,hGo),e(kv,gV),e(gV,pGo),e(kv,_Go),e(Yr,uGo),e(Yr,Sv),e(Sv,whe),e(whe,bGo),e(Sv,vGo),e(Sv,hV),e(hV,FGo),e(Sv,TGo),e(to,MGo),e(to,Rv),e(Rv,EGo),e(Rv,Ahe),e(Ahe,CGo),e(Rv,wGo),e(Rv,Lhe),e(Lhe,AGo),e(to,LGo),M(Pv,to,null),b(f,jje,u),b(f,Yi,u),e(Yi,Bv),e(Bv,yhe),M(oL,yhe,null),e(Yi,yGo),e(Yi,xhe),e(xhe,xGo),b(f,Dje,u),b(f,Io,u),M(rL,Io,null),e(Io,$Go),e(Io,Ki),e(Ki,kGo),e(Ki,pV),e(pV,SGo),e(Ki,RGo),e(Ki,_V),e(_V,PGo),e(Ki,BGo),e(Io,IGo),e(Io,tL),e(tL,NGo),e(tL,$he),e($he,qGo),e(tL,jGo),e(Io,DGo),e(Io,ft),M(aL,ft,null),e(ft,GGo),e(ft,khe),e(khe,OGo),e(ft,VGo),e(ft,Zi),e(Zi,XGo),e(Zi,She),e(She,zGo),e(Zi,WGo),e(Zi,uV),e(uV,QGo),e(Zi,HGo),e(ft,UGo),M(Iv,ft,null),e(Io,JGo),e(Io,ao),M(nL,ao,null),e(ao,YGo),e(ao,Rhe),e(Rhe,KGo),e(ao,ZGo),e(ao,Ia),e(Ia,eOo),e(Ia,Phe),e(Phe,oOo),e(Ia,rOo),e(Ia,Bhe),e(Bhe,tOo),e(Ia,aOo),e(Ia,Ihe),e(Ihe,nOo),e(Ia,sOo),e(ao,lOo),e(ao,U),e(U,Nv),e(Nv,Nhe),e(Nhe,iOo),e(Nv,dOo),e(Nv,bV),e(bV,cOo),e(Nv,fOo),e(U,mOo),e(U,qv),e(qv,qhe),e(qhe,gOo),e(qv,hOo),e(qv,vV),e(vV,pOo),e(qv,_Oo),e(U,uOo),e(U,jv),e(jv,jhe),e(jhe,bOo),e(jv,vOo),e(jv,FV),e(FV,FOo),e(jv,TOo),e(U,MOo),e(U,Dv),e(Dv,Dhe),e(Dhe,EOo),e(Dv,COo),e(Dv,TV),e(TV,wOo),e(Dv,AOo),e(U,LOo),e(U,Gv),e(Gv,Ghe),e(Ghe,yOo),e(Gv,xOo),e(Gv,MV),e(MV,$Oo),e(Gv,kOo),e(U,SOo),e(U,Ov),e(Ov,Ohe),e(Ohe,ROo),e(Ov,POo),e(Ov,EV),e(EV,BOo),e(Ov,IOo),e(U,NOo),e(U,Vv),e(Vv,Vhe),e(Vhe,qOo),e(Vv,jOo),e(Vv,CV),e(CV,DOo),e(Vv,GOo),e(U,OOo),e(U,Xv),e(Xv,Xhe),e(Xhe,VOo),e(Xv,XOo),e(Xv,wV),e(wV,zOo),e(Xv,WOo),e(U,QOo),e(U,zv),e(zv,zhe),e(zhe,HOo),e(zv,UOo),e(zv,AV),e(AV,JOo),e(zv,YOo),e(U,KOo),e(U,Wv),e(Wv,Whe),e(Whe,ZOo),e(Wv,eVo),e(Wv,LV),e(LV,oVo),e(Wv,rVo),e(U,tVo),e(U,Qv),e(Qv,Qhe),e(Qhe,aVo),e(Qv,nVo),e(Qv,yV),e(yV,sVo),e(Qv,lVo),e(U,iVo),e(U,Hv),e(Hv,Hhe),e(Hhe,dVo),e(Hv,cVo),e(Hv,xV),e(xV,fVo),e(Hv,mVo),e(U,gVo),e(U,Uv),e(Uv,Uhe),e(Uhe,hVo),e(Uv,pVo),e(Uv,$V),e($V,_Vo),e(Uv,uVo),e(U,bVo),e(U,Jv),e(Jv,Jhe),e(Jhe,vVo),e(Jv,FVo),e(Jv,kV),e(kV,TVo),e(Jv,MVo),e(U,EVo),e(U,Yv),e(Yv,Yhe),e(Yhe,CVo),e(Yv,wVo),e(Yv,SV),e(SV,AVo),e(Yv,LVo),e(U,yVo),e(U,Kv),e(Kv,Khe),e(Khe,xVo),e(Kv,$Vo),e(Kv,RV),e(RV,kVo),e(Kv,SVo),e(U,RVo),e(U,Zv),e(Zv,Zhe),e(Zhe,PVo),e(Zv,BVo),e(Zv,PV),e(PV,IVo),e(Zv,NVo),e(U,qVo),e(U,eF),e(eF,epe),e(epe,jVo),e(eF,DVo),e(eF,BV),e(BV,GVo),e(eF,OVo),e(U,VVo),e(U,oF),e(oF,ope),e(ope,XVo),e(oF,zVo),e(oF,IV),e(IV,WVo),e(oF,QVo),e(U,HVo),e(U,rF),e(rF,rpe),e(rpe,UVo),e(rF,JVo),e(rF,NV),e(NV,YVo),e(rF,KVo),e(U,ZVo),e(U,tF),e(tF,tpe),e(tpe,eXo),e(tF,oXo),e(tF,qV),e(qV,rXo),e(tF,tXo),e(U,aXo),e(U,aF),e(aF,ape),e(ape,nXo),e(aF,sXo),e(aF,jV),e(jV,lXo),e(aF,iXo),e(U,dXo),e(U,nF),e(nF,npe),e(npe,cXo),e(nF,fXo),e(nF,DV),e(DV,mXo),e(nF,gXo),e(U,hXo),e(U,sF),e(sF,spe),e(spe,pXo),e(sF,_Xo),e(sF,GV),e(GV,uXo),e(sF,bXo),e(U,vXo),e(U,lF),e(lF,lpe),e(lpe,FXo),e(lF,TXo),e(lF,OV),e(OV,MXo),e(lF,EXo),e(U,CXo),e(U,iF),e(iF,ipe),e(ipe,wXo),e(iF,AXo),e(iF,VV),e(VV,LXo),e(iF,yXo),e(U,xXo),e(U,dF),e(dF,dpe),e(dpe,$Xo),e(dF,kXo),e(dF,XV),e(XV,SXo),e(dF,RXo),e(U,PXo),e(U,cF),e(cF,cpe),e(cpe,BXo),e(cF,IXo),e(cF,zV),e(zV,NXo),e(cF,qXo),e(U,jXo),e(U,fF),e(fF,fpe),e(fpe,DXo),e(fF,GXo),e(fF,WV),e(WV,OXo),e(fF,VXo),e(U,XXo),e(U,mF),e(mF,mpe),e(mpe,zXo),e(mF,WXo),e(mF,QV),e(QV,QXo),e(mF,HXo),e(U,UXo),e(U,gF),e(gF,gpe),e(gpe,JXo),e(gF,YXo),e(gF,HV),e(HV,KXo),e(gF,ZXo),e(U,ezo),e(U,hF),e(hF,hpe),e(hpe,ozo),e(hF,rzo),e(hF,UV),e(UV,tzo),e(hF,azo),e(U,nzo),e(U,pF),e(pF,ppe),e(ppe,szo),e(pF,lzo),e(pF,JV),e(JV,izo),e(pF,dzo),e(U,czo),e(U,_F),e(_F,_pe),e(_pe,fzo),e(_F,mzo),e(_F,YV),e(YV,gzo),e(_F,hzo),e(ao,pzo),e(ao,uF),e(uF,_zo),e(uF,upe),e(upe,uzo),e(uF,bzo),e(uF,bpe),e(bpe,vzo),e(ao,Fzo),M(bF,ao,null),b(f,Gje,u),b(f,ed,u),e(ed,vF),e(vF,vpe),M(sL,vpe,null),e(ed,Tzo),e(ed,Fpe),e(Fpe,Mzo),b(f,Oje,u),b(f,No,u),M(lL,No,null),e(No,Ezo),e(No,od),e(od,Czo),e(od,KV),e(KV,wzo),e(od,Azo),e(od,ZV),e(ZV,Lzo),e(od,yzo),e(No,xzo),e(No,iL),e(iL,$zo),e(iL,Tpe),e(Tpe,kzo),e(iL,Szo),e(No,Rzo),e(No,mt),M(dL,mt,null),e(mt,Pzo),e(mt,Mpe),e(Mpe,Bzo),e(mt,Izo),e(mt,rd),e(rd,Nzo),e(rd,Epe),e(Epe,qzo),e(rd,jzo),e(rd,eX),e(eX,Dzo),e(rd,Gzo),e(mt,Ozo),M(FF,mt,null),e(No,Vzo),e(No,no),M(cL,no,null),e(no,Xzo),e(no,Cpe),e(Cpe,zzo),e(no,Wzo),e(no,Na),e(Na,Qzo),e(Na,wpe),e(wpe,Hzo),e(Na,Uzo),e(Na,Ape),e(Ape,Jzo),e(Na,Yzo),e(Na,Lpe),e(Lpe,Kzo),e(Na,Zzo),e(no,eWo),e(no,V),e(V,TF),e(TF,ype),e(ype,oWo),e(TF,rWo),e(TF,oX),e(oX,tWo),e(TF,aWo),e(V,nWo),e(V,MF),e(MF,xpe),e(xpe,sWo),e(MF,lWo),e(MF,rX),e(rX,iWo),e(MF,dWo),e(V,cWo),e(V,EF),e(EF,$pe),e($pe,fWo),e(EF,mWo),e(EF,tX),e(tX,gWo),e(EF,hWo),e(V,pWo),e(V,CF),e(CF,kpe),e(kpe,_Wo),e(CF,uWo),e(CF,aX),e(aX,bWo),e(CF,vWo),e(V,FWo),e(V,wF),e(wF,Spe),e(Spe,TWo),e(wF,MWo),e(wF,nX),e(nX,EWo),e(wF,CWo),e(V,wWo),e(V,AF),e(AF,Rpe),e(Rpe,AWo),e(AF,LWo),e(AF,sX),e(sX,yWo),e(AF,xWo),e(V,$Wo),e(V,LF),e(LF,Ppe),e(Ppe,kWo),e(LF,SWo),e(LF,lX),e(lX,RWo),e(LF,PWo),e(V,BWo),e(V,yF),e(yF,Bpe),e(Bpe,IWo),e(yF,NWo),e(yF,iX),e(iX,qWo),e(yF,jWo),e(V,DWo),e(V,xF),e(xF,Ipe),e(Ipe,GWo),e(xF,OWo),e(xF,dX),e(dX,VWo),e(xF,XWo),e(V,zWo),e(V,$F),e($F,Npe),e(Npe,WWo),e($F,QWo),e($F,cX),e(cX,HWo),e($F,UWo),e(V,JWo),e(V,kF),e(kF,qpe),e(qpe,YWo),e(kF,KWo),e(kF,fX),e(fX,ZWo),e(kF,eQo),e(V,oQo),e(V,SF),e(SF,jpe),e(jpe,rQo),e(SF,tQo),e(SF,mX),e(mX,aQo),e(SF,nQo),e(V,sQo),e(V,RF),e(RF,Dpe),e(Dpe,lQo),e(RF,iQo),e(RF,gX),e(gX,dQo),e(RF,cQo),e(V,fQo),e(V,PF),e(PF,Gpe),e(Gpe,mQo),e(PF,gQo),e(PF,hX),e(hX,hQo),e(PF,pQo),e(V,_Qo),e(V,BF),e(BF,Ope),e(Ope,uQo),e(BF,bQo),e(BF,pX),e(pX,vQo),e(BF,FQo),e(V,TQo),e(V,IF),e(IF,Vpe),e(Vpe,MQo),e(IF,EQo),e(IF,_X),e(_X,CQo),e(IF,wQo),e(V,AQo),e(V,NF),e(NF,Xpe),e(Xpe,LQo),e(NF,yQo),e(NF,uX),e(uX,xQo),e(NF,$Qo),e(V,kQo),e(V,qF),e(qF,zpe),e(zpe,SQo),e(qF,RQo),e(qF,bX),e(bX,PQo),e(qF,BQo),e(V,IQo),e(V,jF),e(jF,Wpe),e(Wpe,NQo),e(jF,qQo),e(jF,vX),e(vX,jQo),e(jF,DQo),e(V,GQo),e(V,DF),e(DF,Qpe),e(Qpe,OQo),e(DF,VQo),e(DF,FX),e(FX,XQo),e(DF,zQo),e(V,WQo),e(V,GF),e(GF,Hpe),e(Hpe,QQo),e(GF,HQo),e(GF,TX),e(TX,UQo),e(GF,JQo),e(V,YQo),e(V,OF),e(OF,Upe),e(Upe,KQo),e(OF,ZQo),e(OF,MX),e(MX,eHo),e(OF,oHo),e(V,rHo),e(V,VF),e(VF,Jpe),e(Jpe,tHo),e(VF,aHo),e(VF,EX),e(EX,nHo),e(VF,sHo),e(V,lHo),e(V,XF),e(XF,Ype),e(Ype,iHo),e(XF,dHo),e(XF,CX),e(CX,cHo),e(XF,fHo),e(V,mHo),e(V,zF),e(zF,Kpe),e(Kpe,gHo),e(zF,hHo),e(zF,wX),e(wX,pHo),e(zF,_Ho),e(V,uHo),e(V,WF),e(WF,Zpe),e(Zpe,bHo),e(WF,vHo),e(WF,AX),e(AX,FHo),e(WF,THo),e(V,MHo),e(V,QF),e(QF,e_e),e(e_e,EHo),e(QF,CHo),e(QF,LX),e(LX,wHo),e(QF,AHo),e(V,LHo),e(V,HF),e(HF,o_e),e(o_e,yHo),e(HF,xHo),e(HF,yX),e(yX,$Ho),e(HF,kHo),e(V,SHo),e(V,UF),e(UF,r_e),e(r_e,RHo),e(UF,PHo),e(UF,xX),e(xX,BHo),e(UF,IHo),e(V,NHo),e(V,JF),e(JF,t_e),e(t_e,qHo),e(JF,jHo),e(JF,$X),e($X,DHo),e(JF,GHo),e(V,OHo),e(V,YF),e(YF,a_e),e(a_e,VHo),e(YF,XHo),e(YF,kX),e(kX,zHo),e(YF,WHo),e(V,QHo),e(V,KF),e(KF,n_e),e(n_e,HHo),e(KF,UHo),e(KF,SX),e(SX,JHo),e(KF,YHo),e(V,KHo),e(V,ZF),e(ZF,s_e),e(s_e,ZHo),e(ZF,eUo),e(ZF,RX),e(RX,oUo),e(ZF,rUo),e(V,tUo),e(V,e6),e(e6,l_e),e(l_e,aUo),e(e6,nUo),e(e6,PX),e(PX,sUo),e(e6,lUo),e(V,iUo),e(V,o6),e(o6,i_e),e(i_e,dUo),e(o6,cUo),e(o6,BX),e(BX,fUo),e(o6,mUo),e(V,gUo),e(V,r6),e(r6,d_e),e(d_e,hUo),e(r6,pUo),e(r6,IX),e(IX,_Uo),e(r6,uUo),e(V,bUo),e(V,t6),e(t6,c_e),e(c_e,vUo),e(t6,FUo),e(t6,NX),e(NX,TUo),e(t6,MUo),e(V,EUo),e(V,a6),e(a6,f_e),e(f_e,CUo),e(a6,wUo),e(a6,qX),e(qX,AUo),e(a6,LUo),e(V,yUo),e(V,n6),e(n6,m_e),e(m_e,xUo),e(n6,$Uo),e(n6,jX),e(jX,kUo),e(n6,SUo),e(V,RUo),e(V,s6),e(s6,g_e),e(g_e,PUo),e(s6,BUo),e(s6,DX),e(DX,IUo),e(s6,NUo),e(no,qUo),e(no,l6),e(l6,jUo),e(l6,h_e),e(h_e,DUo),e(l6,GUo),e(l6,p_e),e(p_e,OUo),e(no,VUo),M(i6,no,null),b(f,Vje,u),b(f,td,u),e(td,d6),e(d6,__e),M(fL,__e,null),e(td,XUo),e(td,u_e),e(u_e,zUo),b(f,Xje,u),b(f,qo,u),M(mL,qo,null),e(qo,WUo),e(qo,ad),e(ad,QUo),e(ad,GX),e(GX,HUo),e(ad,UUo),e(ad,OX),e(OX,JUo),e(ad,YUo),e(qo,KUo),e(qo,gL),e(gL,ZUo),e(gL,b_e),e(b_e,eJo),e(gL,oJo),e(qo,rJo),e(qo,gt),M(hL,gt,null),e(gt,tJo),e(gt,v_e),e(v_e,aJo),e(gt,nJo),e(gt,nd),e(nd,sJo),e(nd,F_e),e(F_e,lJo),e(nd,iJo),e(nd,VX),e(VX,dJo),e(nd,cJo),e(gt,fJo),M(c6,gt,null),e(qo,mJo),e(qo,so),M(pL,so,null),e(so,gJo),e(so,T_e),e(T_e,hJo),e(so,pJo),e(so,qa),e(qa,_Jo),e(qa,M_e),e(M_e,uJo),e(qa,bJo),e(qa,E_e),e(E_e,vJo),e(qa,FJo),e(qa,C_e),e(C_e,TJo),e(qa,MJo),e(so,EJo),e(so,w_e),e(w_e,f6),e(f6,A_e),e(A_e,CJo),e(f6,wJo),e(f6,XX),e(XX,AJo),e(f6,LJo),e(so,yJo),e(so,m6),e(m6,xJo),e(m6,L_e),e(L_e,$Jo),e(m6,kJo),e(m6,y_e),e(y_e,SJo),e(so,RJo),M(g6,so,null),b(f,zje,u),b(f,sd,u),e(sd,h6),e(h6,x_e),M(_L,x_e,null),e(sd,PJo),e(sd,$_e),e($_e,BJo),b(f,Wje,u),b(f,jo,u),M(uL,jo,null),e(jo,IJo),e(jo,ld),e(ld,NJo),e(ld,zX),e(zX,qJo),e(ld,jJo),e(ld,WX),e(WX,DJo),e(ld,GJo),e(jo,OJo),e(jo,bL),e(bL,VJo),e(bL,k_e),e(k_e,XJo),e(bL,zJo),e(jo,WJo),e(jo,ht),M(vL,ht,null),e(ht,QJo),e(ht,S_e),e(S_e,HJo),e(ht,UJo),e(ht,id),e(id,JJo),e(id,R_e),e(R_e,YJo),e(id,KJo),e(id,QX),e(QX,ZJo),e(id,eYo),e(ht,oYo),M(p6,ht,null),e(jo,rYo),e(jo,lo),M(FL,lo,null),e(lo,tYo),e(lo,P_e),e(P_e,aYo),e(lo,nYo),e(lo,ja),e(ja,sYo),e(ja,B_e),e(B_e,lYo),e(ja,iYo),e(ja,I_e),e(I_e,dYo),e(ja,cYo),e(ja,N_e),e(N_e,fYo),e(ja,mYo),e(lo,gYo),e(lo,Fe),e(Fe,_6),e(_6,q_e),e(q_e,hYo),e(_6,pYo),e(_6,HX),e(HX,_Yo),e(_6,uYo),e(Fe,bYo),e(Fe,u6),e(u6,j_e),e(j_e,vYo),e(u6,FYo),e(u6,UX),e(UX,TYo),e(u6,MYo),e(Fe,EYo),e(Fe,b6),e(b6,D_e),e(D_e,CYo),e(b6,wYo),e(b6,JX),e(JX,AYo),e(b6,LYo),e(Fe,yYo),e(Fe,v6),e(v6,G_e),e(G_e,xYo),e(v6,$Yo),e(v6,YX),e(YX,kYo),e(v6,SYo),e(Fe,RYo),e(Fe,Is),e(Is,O_e),e(O_e,PYo),e(Is,BYo),e(Is,KX),e(KX,IYo),e(Is,NYo),e(Is,ZX),e(ZX,qYo),e(Is,jYo),e(Fe,DYo),e(Fe,F6),e(F6,V_e),e(V_e,GYo),e(F6,OYo),e(F6,ez),e(ez,VYo),e(F6,XYo),e(Fe,zYo),e(Fe,Ns),e(Ns,X_e),e(X_e,WYo),e(Ns,QYo),e(Ns,oz),e(oz,HYo),e(Ns,UYo),e(Ns,rz),e(rz,JYo),e(Ns,YYo),e(Fe,KYo),e(Fe,pt),e(pt,z_e),e(z_e,ZYo),e(pt,eKo),e(pt,tz),e(tz,oKo),e(pt,rKo),e(pt,az),e(az,tKo),e(pt,aKo),e(pt,nz),e(nz,nKo),e(pt,sKo),e(Fe,lKo),e(Fe,T6),e(T6,W_e),e(W_e,iKo),e(T6,dKo),e(T6,sz),e(sz,cKo),e(T6,fKo),e(Fe,mKo),e(Fe,M6),e(M6,Q_e),e(Q_e,gKo),e(M6,hKo),e(M6,lz),e(lz,pKo),e(M6,_Ko),e(Fe,uKo),e(Fe,E6),e(E6,H_e),e(H_e,bKo),e(E6,vKo),e(E6,iz),e(iz,FKo),e(E6,TKo),e(Fe,MKo),e(Fe,C6),e(C6,U_e),e(U_e,EKo),e(C6,CKo),e(C6,dz),e(dz,wKo),e(C6,AKo),e(Fe,LKo),e(Fe,w6),e(w6,J_e),e(J_e,yKo),e(w6,xKo),e(w6,cz),e(cz,$Ko),e(w6,kKo),e(Fe,SKo),e(Fe,A6),e(A6,Y_e),e(Y_e,RKo),e(A6,PKo),e(A6,fz),e(fz,BKo),e(A6,IKo),e(Fe,NKo),e(Fe,L6),e(L6,K_e),e(K_e,qKo),e(L6,jKo),e(L6,mz),e(mz,DKo),e(L6,GKo),e(lo,OKo),e(lo,y6),e(y6,VKo),e(y6,Z_e),e(Z_e,XKo),e(y6,zKo),e(y6,eue),e(eue,WKo),e(lo,QKo),M(x6,lo,null),b(f,Qje,u),b(f,dd,u),e(dd,$6),e($6,oue),M(TL,oue,null),e(dd,HKo),e(dd,rue),e(rue,UKo),b(f,Hje,u),b(f,Do,u),M(ML,Do,null),e(Do,JKo),e(Do,cd),e(cd,YKo),e(cd,gz),e(gz,KKo),e(cd,ZKo),e(cd,hz),e(hz,eZo),e(cd,oZo),e(Do,rZo),e(Do,EL),e(EL,tZo),e(EL,tue),e(tue,aZo),e(EL,nZo),e(Do,sZo),e(Do,_t),M(CL,_t,null),e(_t,lZo),e(_t,aue),e(aue,iZo),e(_t,dZo),e(_t,fd),e(fd,cZo),e(fd,nue),e(nue,fZo),e(fd,mZo),e(fd,pz),e(pz,gZo),e(fd,hZo),e(_t,pZo),M(k6,_t,null),e(Do,_Zo),e(Do,io),M(wL,io,null),e(io,uZo),e(io,sue),e(sue,bZo),e(io,vZo),e(io,Da),e(Da,FZo),e(Da,lue),e(lue,TZo),e(Da,MZo),e(Da,iue),e(iue,EZo),e(Da,CZo),e(Da,due),e(due,wZo),e(Da,AZo),e(io,LZo),e(io,cue),e(cue,S6),e(S6,fue),e(fue,yZo),e(S6,xZo),e(S6,_z),e(_z,$Zo),e(S6,kZo),e(io,SZo),e(io,R6),e(R6,RZo),e(R6,mue),e(mue,PZo),e(R6,BZo),e(R6,gue),e(gue,IZo),e(io,NZo),M(P6,io,null),b(f,Uje,u),b(f,md,u),e(md,B6),e(B6,hue),M(AL,hue,null),e(md,qZo),e(md,pue),e(pue,jZo),b(f,Jje,u),b(f,Go,u),M(LL,Go,null),e(Go,DZo),e(Go,gd),e(gd,GZo),e(gd,uz),e(uz,OZo),e(gd,VZo),e(gd,bz),e(bz,XZo),e(gd,zZo),e(Go,WZo),e(Go,yL),e(yL,QZo),e(yL,_ue),e(_ue,HZo),e(yL,UZo),e(Go,JZo),e(Go,ut),M(xL,ut,null),e(ut,YZo),e(ut,uue),e(uue,KZo),e(ut,ZZo),e(ut,hd),e(hd,eer),e(hd,bue),e(bue,oer),e(hd,rer),e(hd,vz),e(vz,ter),e(hd,aer),e(ut,ner),M(I6,ut,null),e(Go,ser),e(Go,co),M($L,co,null),e(co,ler),e(co,vue),e(vue,ier),e(co,der),e(co,Ga),e(Ga,cer),e(Ga,Fue),e(Fue,fer),e(Ga,mer),e(Ga,Tue),e(Tue,ger),e(Ga,her),e(Ga,Mue),e(Mue,per),e(Ga,_er),e(co,uer),e(co,Re),e(Re,N6),e(N6,Eue),e(Eue,ber),e(N6,ver),e(N6,Fz),e(Fz,Fer),e(N6,Ter),e(Re,Mer),e(Re,q6),e(q6,Cue),e(Cue,Eer),e(q6,Cer),e(q6,Tz),e(Tz,wer),e(q6,Aer),e(Re,Ler),e(Re,j6),e(j6,wue),e(wue,yer),e(j6,xer),e(j6,Mz),e(Mz,$er),e(j6,ker),e(Re,Ser),e(Re,D6),e(D6,Aue),e(Aue,Rer),e(D6,Per),e(D6,Ez),e(Ez,Ber),e(D6,Ier),e(Re,Ner),e(Re,G6),e(G6,Lue),e(Lue,qer),e(G6,jer),e(G6,Cz),e(Cz,Der),e(G6,Ger),e(Re,Oer),e(Re,O6),e(O6,yue),e(yue,Ver),e(O6,Xer),e(O6,wz),e(wz,zer),e(O6,Wer),e(Re,Qer),e(Re,V6),e(V6,xue),e(xue,Her),e(V6,Uer),e(V6,Az),e(Az,Jer),e(V6,Yer),e(Re,Ker),e(Re,X6),e(X6,$ue),e($ue,Zer),e(X6,eor),e(X6,Lz),e(Lz,oor),e(X6,ror),e(Re,tor),e(Re,z6),e(z6,kue),e(kue,aor),e(z6,nor),e(z6,yz),e(yz,sor),e(z6,lor),e(co,ior),e(co,W6),e(W6,dor),e(W6,Sue),e(Sue,cor),e(W6,mor),e(W6,Rue),e(Rue,gor),e(co,hor),M(Q6,co,null),b(f,Yje,u),b(f,pd,u),e(pd,H6),e(H6,Pue),M(kL,Pue,null),e(pd,por),e(pd,Bue),e(Bue,_or),b(f,Kje,u),b(f,Oo,u),M(SL,Oo,null),e(Oo,uor),e(Oo,_d),e(_d,bor),e(_d,xz),e(xz,vor),e(_d,For),e(_d,$z),e($z,Tor),e(_d,Mor),e(Oo,Eor),e(Oo,RL),e(RL,Cor),e(RL,Iue),e(Iue,wor),e(RL,Aor),e(Oo,Lor),e(Oo,bt),M(PL,bt,null),e(bt,yor),e(bt,Nue),e(Nue,xor),e(bt,$or),e(bt,ud),e(ud,kor),e(ud,que),e(que,Sor),e(ud,Ror),e(ud,kz),e(kz,Por),e(ud,Bor),e(bt,Ior),M(U6,bt,null),e(Oo,Nor),e(Oo,fo),M(BL,fo,null),e(fo,qor),e(fo,jue),e(jue,jor),e(fo,Dor),e(fo,Oa),e(Oa,Gor),e(Oa,Due),e(Due,Oor),e(Oa,Vor),e(Oa,Gue),e(Gue,Xor),e(Oa,zor),e(Oa,Oue),e(Oue,Wor),e(Oa,Qor),e(fo,Hor),e(fo,Kr),e(Kr,J6),e(J6,Vue),e(Vue,Uor),e(J6,Jor),e(J6,Sz),e(Sz,Yor),e(J6,Kor),e(Kr,Zor),e(Kr,Y6),e(Y6,Xue),e(Xue,err),e(Y6,orr),e(Y6,Rz),e(Rz,rrr),e(Y6,trr),e(Kr,arr),e(Kr,K6),e(K6,zue),e(zue,nrr),e(K6,srr),e(K6,Pz),e(Pz,lrr),e(K6,irr),e(Kr,drr),e(Kr,Z6),e(Z6,Wue),e(Wue,crr),e(Z6,frr),e(Z6,Bz),e(Bz,mrr),e(Z6,grr),e(Kr,hrr),e(Kr,eT),e(eT,Que),e(Que,prr),e(eT,_rr),e(eT,Iz),e(Iz,urr),e(eT,brr),e(fo,vrr),e(fo,oT),e(oT,Frr),e(oT,Hue),e(Hue,Trr),e(oT,Mrr),e(oT,Uue),e(Uue,Err),e(fo,Crr),M(rT,fo,null),b(f,Zje,u),b(f,bd,u),e(bd,tT),e(tT,Jue),M(IL,Jue,null),e(bd,wrr),e(bd,Yue),e(Yue,Arr),b(f,eDe,u),b(f,Vo,u),M(NL,Vo,null),e(Vo,Lrr),e(Vo,vd),e(vd,yrr),e(vd,Nz),e(Nz,xrr),e(vd,$rr),e(vd,qz),e(qz,krr),e(vd,Srr),e(Vo,Rrr),e(Vo,qL),e(qL,Prr),e(qL,Kue),e(Kue,Brr),e(qL,Irr),e(Vo,Nrr),e(Vo,vt),M(jL,vt,null),e(vt,qrr),e(vt,Zue),e(Zue,jrr),e(vt,Drr),e(vt,Fd),e(Fd,Grr),e(Fd,e2e),e(e2e,Orr),e(Fd,Vrr),e(Fd,jz),e(jz,Xrr),e(Fd,zrr),e(vt,Wrr),M(aT,vt,null),e(Vo,Qrr),e(Vo,mo),M(DL,mo,null),e(mo,Hrr),e(mo,o2e),e(o2e,Urr),e(mo,Jrr),e(mo,Va),e(Va,Yrr),e(Va,r2e),e(r2e,Krr),e(Va,Zrr),e(Va,t2e),e(t2e,etr),e(Va,otr),e(Va,a2e),e(a2e,rtr),e(Va,ttr),e(mo,atr),e(mo,Pe),e(Pe,nT),e(nT,n2e),e(n2e,ntr),e(nT,str),e(nT,Dz),e(Dz,ltr),e(nT,itr),e(Pe,dtr),e(Pe,sT),e(sT,s2e),e(s2e,ctr),e(sT,ftr),e(sT,Gz),e(Gz,mtr),e(sT,gtr),e(Pe,htr),e(Pe,lT),e(lT,l2e),e(l2e,ptr),e(lT,_tr),e(lT,Oz),e(Oz,utr),e(lT,btr),e(Pe,vtr),e(Pe,iT),e(iT,i2e),e(i2e,Ftr),e(iT,Ttr),e(iT,Vz),e(Vz,Mtr),e(iT,Etr),e(Pe,Ctr),e(Pe,dT),e(dT,d2e),e(d2e,wtr),e(dT,Atr),e(dT,Xz),e(Xz,Ltr),e(dT,ytr),e(Pe,xtr),e(Pe,cT),e(cT,c2e),e(c2e,$tr),e(cT,ktr),e(cT,zz),e(zz,Str),e(cT,Rtr),e(Pe,Ptr),e(Pe,fT),e(fT,f2e),e(f2e,Btr),e(fT,Itr),e(fT,Wz),e(Wz,Ntr),e(fT,qtr),e(Pe,jtr),e(Pe,mT),e(mT,m2e),e(m2e,Dtr),e(mT,Gtr),e(mT,Qz),e(Qz,Otr),e(mT,Vtr),e(Pe,Xtr),e(Pe,gT),e(gT,g2e),e(g2e,ztr),e(gT,Wtr),e(gT,Hz),e(Hz,Qtr),e(gT,Htr),e(mo,Utr),e(mo,hT),e(hT,Jtr),e(hT,h2e),e(h2e,Ytr),e(hT,Ktr),e(hT,p2e),e(p2e,Ztr),e(mo,ear),M(pT,mo,null),b(f,oDe,u),b(f,Td,u),e(Td,_T),e(_T,_2e),M(GL,_2e,null),e(Td,oar),e(Td,u2e),e(u2e,rar),b(f,rDe,u),b(f,Xo,u),M(OL,Xo,null),e(Xo,tar),e(Xo,Md),e(Md,aar),e(Md,Uz),e(Uz,nar),e(Md,sar),e(Md,Jz),e(Jz,lar),e(Md,iar),e(Xo,dar),e(Xo,VL),e(VL,car),e(VL,b2e),e(b2e,far),e(VL,mar),e(Xo,gar),e(Xo,Ft),M(XL,Ft,null),e(Ft,har),e(Ft,v2e),e(v2e,par),e(Ft,_ar),e(Ft,Ed),e(Ed,uar),e(Ed,F2e),e(F2e,bar),e(Ed,Far),e(Ed,Yz),e(Yz,Tar),e(Ed,Mar),e(Ft,Ear),M(uT,Ft,null),e(Xo,Car),e(Xo,go),M(zL,go,null),e(go,war),e(go,T2e),e(T2e,Aar),e(go,Lar),e(go,Xa),e(Xa,yar),e(Xa,M2e),e(M2e,xar),e(Xa,$ar),e(Xa,E2e),e(E2e,kar),e(Xa,Sar),e(Xa,C2e),e(C2e,Rar),e(Xa,Par),e(go,Bar),e(go,WL),e(WL,bT),e(bT,w2e),e(w2e,Iar),e(bT,Nar),e(bT,Kz),e(Kz,qar),e(bT,jar),e(WL,Dar),e(WL,vT),e(vT,A2e),e(A2e,Gar),e(vT,Oar),e(vT,Zz),e(Zz,Var),e(vT,Xar),e(go,zar),e(go,FT),e(FT,War),e(FT,L2e),e(L2e,Qar),e(FT,Har),e(FT,y2e),e(y2e,Uar),e(go,Jar),M(TT,go,null),b(f,tDe,u),b(f,Cd,u),e(Cd,MT),e(MT,x2e),M(QL,x2e,null),e(Cd,Yar),e(Cd,$2e),e($2e,Kar),b(f,aDe,u),b(f,zo,u),M(HL,zo,null),e(zo,Zar),e(zo,wd),e(wd,enr),e(wd,eW),e(eW,onr),e(wd,rnr),e(wd,oW),e(oW,tnr),e(wd,anr),e(zo,nnr),e(zo,UL),e(UL,snr),e(UL,k2e),e(k2e,lnr),e(UL,inr),e(zo,dnr),e(zo,Tt),M(JL,Tt,null),e(Tt,cnr),e(Tt,S2e),e(S2e,fnr),e(Tt,mnr),e(Tt,Ad),e(Ad,gnr),e(Ad,R2e),e(R2e,hnr),e(Ad,pnr),e(Ad,rW),e(rW,_nr),e(Ad,unr),e(Tt,bnr),M(ET,Tt,null),e(zo,vnr),e(zo,ho),M(YL,ho,null),e(ho,Fnr),e(ho,P2e),e(P2e,Tnr),e(ho,Mnr),e(ho,za),e(za,Enr),e(za,B2e),e(B2e,Cnr),e(za,wnr),e(za,I2e),e(I2e,Anr),e(za,Lnr),e(za,N2e),e(N2e,ynr),e(za,xnr),e(ho,$nr),e(ho,Zr),e(Zr,CT),e(CT,q2e),e(q2e,knr),e(CT,Snr),e(CT,tW),e(tW,Rnr),e(CT,Pnr),e(Zr,Bnr),e(Zr,wT),e(wT,j2e),e(j2e,Inr),e(wT,Nnr),e(wT,aW),e(aW,qnr),e(wT,jnr),e(Zr,Dnr),e(Zr,AT),e(AT,D2e),e(D2e,Gnr),e(AT,Onr),e(AT,nW),e(nW,Vnr),e(AT,Xnr),e(Zr,znr),e(Zr,LT),e(LT,G2e),e(G2e,Wnr),e(LT,Qnr),e(LT,sW),e(sW,Hnr),e(LT,Unr),e(Zr,Jnr),e(Zr,yT),e(yT,O2e),e(O2e,Ynr),e(yT,Knr),e(yT,lW),e(lW,Znr),e(yT,esr),e(ho,osr),e(ho,xT),e(xT,rsr),e(xT,V2e),e(V2e,tsr),e(xT,asr),e(xT,X2e),e(X2e,nsr),e(ho,ssr),M($T,ho,null),b(f,nDe,u),b(f,Ld,u),e(Ld,kT),e(kT,z2e),M(KL,z2e,null),e(Ld,lsr),e(Ld,W2e),e(W2e,isr),b(f,sDe,u),b(f,Wo,u),M(ZL,Wo,null),e(Wo,dsr),e(Wo,yd),e(yd,csr),e(yd,iW),e(iW,fsr),e(yd,msr),e(yd,dW),e(dW,gsr),e(yd,hsr),e(Wo,psr),e(Wo,ey),e(ey,_sr),e(ey,Q2e),e(Q2e,usr),e(ey,bsr),e(Wo,vsr),e(Wo,Mt),M(oy,Mt,null),e(Mt,Fsr),e(Mt,H2e),e(H2e,Tsr),e(Mt,Msr),e(Mt,xd),e(xd,Esr),e(xd,U2e),e(U2e,Csr),e(xd,wsr),e(xd,cW),e(cW,Asr),e(xd,Lsr),e(Mt,ysr),M(ST,Mt,null),e(Wo,xsr),e(Wo,po),M(ry,po,null),e(po,$sr),e(po,J2e),e(J2e,ksr),e(po,Ssr),e(po,Wa),e(Wa,Rsr),e(Wa,Y2e),e(Y2e,Psr),e(Wa,Bsr),e(Wa,K2e),e(K2e,Isr),e(Wa,Nsr),e(Wa,Z2e),e(Z2e,qsr),e(Wa,jsr),e(po,Dsr),e(po,$d),e($d,RT),e(RT,e1e),e(e1e,Gsr),e(RT,Osr),e(RT,fW),e(fW,Vsr),e(RT,Xsr),e($d,zsr),e($d,PT),e(PT,o1e),e(o1e,Wsr),e(PT,Qsr),e(PT,mW),e(mW,Hsr),e(PT,Usr),e($d,Jsr),e($d,BT),e(BT,r1e),e(r1e,Ysr),e(BT,Ksr),e(BT,gW),e(gW,Zsr),e(BT,elr),e(po,olr),e(po,IT),e(IT,rlr),e(IT,t1e),e(t1e,tlr),e(IT,alr),e(IT,a1e),e(a1e,nlr),e(po,slr),M(NT,po,null),b(f,lDe,u),b(f,kd,u),e(kd,qT),e(qT,n1e),M(ty,n1e,null),e(kd,llr),e(kd,s1e),e(s1e,ilr),b(f,iDe,u),b(f,Qo,u),M(ay,Qo,null),e(Qo,dlr),e(Qo,Sd),e(Sd,clr),e(Sd,hW),e(hW,flr),e(Sd,mlr),e(Sd,pW),e(pW,glr),e(Sd,hlr),e(Qo,plr),e(Qo,ny),e(ny,_lr),e(ny,l1e),e(l1e,ulr),e(ny,blr),e(Qo,vlr),e(Qo,Et),M(sy,Et,null),e(Et,Flr),e(Et,i1e),e(i1e,Tlr),e(Et,Mlr),e(Et,Rd),e(Rd,Elr),e(Rd,d1e),e(d1e,Clr),e(Rd,wlr),e(Rd,_W),e(_W,Alr),e(Rd,Llr),e(Et,ylr),M(jT,Et,null),e(Qo,xlr),e(Qo,_o),M(ly,_o,null),e(_o,$lr),e(_o,c1e),e(c1e,klr),e(_o,Slr),e(_o,Qa),e(Qa,Rlr),e(Qa,f1e),e(f1e,Plr),e(Qa,Blr),e(Qa,m1e),e(m1e,Ilr),e(Qa,Nlr),e(Qa,g1e),e(g1e,qlr),e(Qa,jlr),e(_o,Dlr),e(_o,iy),e(iy,DT),e(DT,h1e),e(h1e,Glr),e(DT,Olr),e(DT,uW),e(uW,Vlr),e(DT,Xlr),e(iy,zlr),e(iy,GT),e(GT,p1e),e(p1e,Wlr),e(GT,Qlr),e(GT,bW),e(bW,Hlr),e(GT,Ulr),e(_o,Jlr),e(_o,OT),e(OT,Ylr),e(OT,_1e),e(_1e,Klr),e(OT,Zlr),e(OT,u1e),e(u1e,eir),e(_o,oir),M(VT,_o,null),b(f,dDe,u),b(f,Pd,u),e(Pd,XT),e(XT,b1e),M(dy,b1e,null),e(Pd,rir),e(Pd,v1e),e(v1e,tir),b(f,cDe,u),b(f,Ho,u),M(cy,Ho,null),e(Ho,air),e(Ho,Bd),e(Bd,nir),e(Bd,vW),e(vW,sir),e(Bd,lir),e(Bd,FW),e(FW,iir),e(Bd,dir),e(Ho,cir),e(Ho,fy),e(fy,fir),e(fy,F1e),e(F1e,mir),e(fy,gir),e(Ho,hir),e(Ho,Ct),M(my,Ct,null),e(Ct,pir),e(Ct,T1e),e(T1e,_ir),e(Ct,uir),e(Ct,Id),e(Id,bir),e(Id,M1e),e(M1e,vir),e(Id,Fir),e(Id,TW),e(TW,Tir),e(Id,Mir),e(Ct,Eir),M(zT,Ct,null),e(Ho,Cir),e(Ho,uo),M(gy,uo,null),e(uo,wir),e(uo,E1e),e(E1e,Air),e(uo,Lir),e(uo,Ha),e(Ha,yir),e(Ha,C1e),e(C1e,xir),e(Ha,$ir),e(Ha,w1e),e(w1e,kir),e(Ha,Sir),e(Ha,A1e),e(A1e,Rir),e(Ha,Pir),e(uo,Bir),e(uo,L1e),e(L1e,WT),e(WT,y1e),e(y1e,Iir),e(WT,Nir),e(WT,MW),e(MW,qir),e(WT,jir),e(uo,Dir),e(uo,QT),e(QT,Gir),e(QT,x1e),e(x1e,Oir),e(QT,Vir),e(QT,$1e),e($1e,Xir),e(uo,zir),M(HT,uo,null),b(f,fDe,u),b(f,Nd,u),e(Nd,UT),e(UT,k1e),M(hy,k1e,null),e(Nd,Wir),e(Nd,S1e),e(S1e,Qir),b(f,mDe,u),b(f,Uo,u),M(py,Uo,null),e(Uo,Hir),e(Uo,qd),e(qd,Uir),e(qd,EW),e(EW,Jir),e(qd,Yir),e(qd,CW),e(CW,Kir),e(qd,Zir),e(Uo,edr),e(Uo,_y),e(_y,odr),e(_y,R1e),e(R1e,rdr),e(_y,tdr),e(Uo,adr),e(Uo,wt),M(uy,wt,null),e(wt,ndr),e(wt,P1e),e(P1e,sdr),e(wt,ldr),e(wt,jd),e(jd,idr),e(jd,B1e),e(B1e,ddr),e(jd,cdr),e(jd,wW),e(wW,fdr),e(jd,mdr),e(wt,gdr),M(JT,wt,null),e(Uo,hdr),e(Uo,bo),M(by,bo,null),e(bo,pdr),e(bo,I1e),e(I1e,_dr),e(bo,udr),e(bo,Ua),e(Ua,bdr),e(Ua,N1e),e(N1e,vdr),e(Ua,Fdr),e(Ua,q1e),e(q1e,Tdr),e(Ua,Mdr),e(Ua,j1e),e(j1e,Edr),e(Ua,Cdr),e(bo,wdr),e(bo,Ja),e(Ja,YT),e(YT,D1e),e(D1e,Adr),e(YT,Ldr),e(YT,AW),e(AW,ydr),e(YT,xdr),e(Ja,$dr),e(Ja,KT),e(KT,G1e),e(G1e,kdr),e(KT,Sdr),e(KT,LW),e(LW,Rdr),e(KT,Pdr),e(Ja,Bdr),e(Ja,ZT),e(ZT,O1e),e(O1e,Idr),e(ZT,Ndr),e(ZT,yW),e(yW,qdr),e(ZT,jdr),e(Ja,Ddr),e(Ja,e7),e(e7,V1e),e(V1e,Gdr),e(e7,Odr),e(e7,xW),e(xW,Vdr),e(e7,Xdr),e(bo,zdr),e(bo,o7),e(o7,Wdr),e(o7,X1e),e(X1e,Qdr),e(o7,Hdr),e(o7,z1e),e(z1e,Udr),e(bo,Jdr),M(r7,bo,null),b(f,gDe,u),b(f,Dd,u),e(Dd,t7),e(t7,W1e),M(vy,W1e,null),e(Dd,Ydr),e(Dd,Q1e),e(Q1e,Kdr),b(f,hDe,u),b(f,Jo,u),M(Fy,Jo,null),e(Jo,Zdr),e(Jo,Gd),e(Gd,ecr),e(Gd,$W),e($W,ocr),e(Gd,rcr),e(Gd,kW),e(kW,tcr),e(Gd,acr),e(Jo,ncr),e(Jo,Ty),e(Ty,scr),e(Ty,H1e),e(H1e,lcr),e(Ty,icr),e(Jo,dcr),e(Jo,At),M(My,At,null),e(At,ccr),e(At,U1e),e(U1e,fcr),e(At,mcr),e(At,Od),e(Od,gcr),e(Od,J1e),e(J1e,hcr),e(Od,pcr),e(Od,SW),e(SW,_cr),e(Od,ucr),e(At,bcr),M(a7,At,null),e(Jo,vcr),e(Jo,vo),M(Ey,vo,null),e(vo,Fcr),e(vo,Y1e),e(Y1e,Tcr),e(vo,Mcr),e(vo,Ya),e(Ya,Ecr),e(Ya,K1e),e(K1e,Ccr),e(Ya,wcr),e(Ya,Z1e),e(Z1e,Acr),e(Ya,Lcr),e(Ya,ebe),e(ebe,ycr),e(Ya,xcr),e(vo,$cr),e(vo,obe),e(obe,n7),e(n7,rbe),e(rbe,kcr),e(n7,Scr),e(n7,RW),e(RW,Rcr),e(n7,Pcr),e(vo,Bcr),e(vo,s7),e(s7,Icr),e(s7,tbe),e(tbe,Ncr),e(s7,qcr),e(s7,abe),e(abe,jcr),e(vo,Dcr),M(l7,vo,null),b(f,pDe,u),b(f,Vd,u),e(Vd,i7),e(i7,nbe),M(Cy,nbe,null),e(Vd,Gcr),e(Vd,sbe),e(sbe,Ocr),b(f,_De,u),b(f,Yo,u),M(wy,Yo,null),e(Yo,Vcr),e(Yo,Xd),e(Xd,Xcr),e(Xd,PW),e(PW,zcr),e(Xd,Wcr),e(Xd,BW),e(BW,Qcr),e(Xd,Hcr),e(Yo,Ucr),e(Yo,Ay),e(Ay,Jcr),e(Ay,lbe),e(lbe,Ycr),e(Ay,Kcr),e(Yo,Zcr),e(Yo,Lt),M(Ly,Lt,null),e(Lt,efr),e(Lt,ibe),e(ibe,ofr),e(Lt,rfr),e(Lt,zd),e(zd,tfr),e(zd,dbe),e(dbe,afr),e(zd,nfr),e(zd,IW),e(IW,sfr),e(zd,lfr),e(Lt,ifr),M(d7,Lt,null),e(Yo,dfr),e(Yo,wr),M(yy,wr,null),e(wr,cfr),e(wr,cbe),e(cbe,ffr),e(wr,mfr),e(wr,Ka),e(Ka,gfr),e(Ka,fbe),e(fbe,hfr),e(Ka,pfr),e(Ka,mbe),e(mbe,_fr),e(Ka,ufr),e(Ka,gbe),e(gbe,bfr),e(Ka,vfr),e(wr,Ffr),e(wr,q),e(q,c7),e(c7,hbe),e(hbe,Tfr),e(c7,Mfr),e(c7,NW),e(NW,Efr),e(c7,Cfr),e(q,wfr),e(q,f7),e(f7,pbe),e(pbe,Afr),e(f7,Lfr),e(f7,qW),e(qW,yfr),e(f7,xfr),e(q,$fr),e(q,m7),e(m7,_be),e(_be,kfr),e(m7,Sfr),e(m7,jW),e(jW,Rfr),e(m7,Pfr),e(q,Bfr),e(q,g7),e(g7,ube),e(ube,Ifr),e(g7,Nfr),e(g7,DW),e(DW,qfr),e(g7,jfr),e(q,Dfr),e(q,h7),e(h7,bbe),e(bbe,Gfr),e(h7,Ofr),e(h7,GW),e(GW,Vfr),e(h7,Xfr),e(q,zfr),e(q,p7),e(p7,vbe),e(vbe,Wfr),e(p7,Qfr),e(p7,OW),e(OW,Hfr),e(p7,Ufr),e(q,Jfr),e(q,_7),e(_7,Fbe),e(Fbe,Yfr),e(_7,Kfr),e(_7,VW),e(VW,Zfr),e(_7,emr),e(q,omr),e(q,u7),e(u7,Tbe),e(Tbe,rmr),e(u7,tmr),e(u7,XW),e(XW,amr),e(u7,nmr),e(q,smr),e(q,b7),e(b7,Mbe),e(Mbe,lmr),e(b7,imr),e(b7,zW),e(zW,dmr),e(b7,cmr),e(q,fmr),e(q,v7),e(v7,Ebe),e(Ebe,mmr),e(v7,gmr),e(v7,WW),e(WW,hmr),e(v7,pmr),e(q,_mr),e(q,F7),e(F7,Cbe),e(Cbe,umr),e(F7,bmr),e(F7,QW),e(QW,vmr),e(F7,Fmr),e(q,Tmr),e(q,T7),e(T7,wbe),e(wbe,Mmr),e(T7,Emr),e(T7,HW),e(HW,Cmr),e(T7,wmr),e(q,Amr),e(q,M7),e(M7,Abe),e(Abe,Lmr),e(M7,ymr),e(M7,UW),e(UW,xmr),e(M7,$mr),e(q,kmr),e(q,E7),e(E7,Lbe),e(Lbe,Smr),e(E7,Rmr),e(E7,JW),e(JW,Pmr),e(E7,Bmr),e(q,Imr),e(q,C7),e(C7,ybe),e(ybe,Nmr),e(C7,qmr),e(C7,YW),e(YW,jmr),e(C7,Dmr),e(q,Gmr),e(q,w7),e(w7,xbe),e(xbe,Omr),e(w7,Vmr),e(w7,KW),e(KW,Xmr),e(w7,zmr),e(q,Wmr),e(q,A7),e(A7,$be),e($be,Qmr),e(A7,Hmr),e(A7,ZW),e(ZW,Umr),e(A7,Jmr),e(q,Ymr),e(q,qs),e(qs,kbe),e(kbe,Kmr),e(qs,Zmr),e(qs,eQ),e(eQ,egr),e(qs,ogr),e(qs,oQ),e(oQ,rgr),e(qs,tgr),e(q,agr),e(q,L7),e(L7,Sbe),e(Sbe,ngr),e(L7,sgr),e(L7,rQ),e(rQ,lgr),e(L7,igr),e(q,dgr),e(q,y7),e(y7,Rbe),e(Rbe,cgr),e(y7,fgr),e(y7,tQ),e(tQ,mgr),e(y7,ggr),e(q,hgr),e(q,x7),e(x7,Pbe),e(Pbe,pgr),e(x7,_gr),e(x7,aQ),e(aQ,ugr),e(x7,bgr),e(q,vgr),e(q,$7),e($7,Bbe),e(Bbe,Fgr),e($7,Tgr),e($7,nQ),e(nQ,Mgr),e($7,Egr),e(q,Cgr),e(q,k7),e(k7,Ibe),e(Ibe,wgr),e(k7,Agr),e(k7,sQ),e(sQ,Lgr),e(k7,ygr),e(q,xgr),e(q,S7),e(S7,Nbe),e(Nbe,$gr),e(S7,kgr),e(S7,lQ),e(lQ,Sgr),e(S7,Rgr),e(q,Pgr),e(q,R7),e(R7,qbe),e(qbe,Bgr),e(R7,Igr),e(R7,iQ),e(iQ,Ngr),e(R7,qgr),e(q,jgr),e(q,P7),e(P7,jbe),e(jbe,Dgr),e(P7,Ggr),e(P7,dQ),e(dQ,Ogr),e(P7,Vgr),e(q,Xgr),e(q,B7),e(B7,Dbe),e(Dbe,zgr),e(B7,Wgr),e(B7,cQ),e(cQ,Qgr),e(B7,Hgr),e(q,Ugr),e(q,I7),e(I7,Gbe),e(Gbe,Jgr),e(I7,Ygr),e(I7,fQ),e(fQ,Kgr),e(I7,Zgr),e(q,ehr),e(q,N7),e(N7,Obe),e(Obe,ohr),e(N7,rhr),e(N7,mQ),e(mQ,thr),e(N7,ahr),e(q,nhr),e(q,q7),e(q7,Vbe),e(Vbe,shr),e(q7,lhr),e(q7,gQ),e(gQ,ihr),e(q7,dhr),e(q,chr),e(q,j7),e(j7,Xbe),e(Xbe,fhr),e(j7,mhr),e(j7,hQ),e(hQ,ghr),e(j7,hhr),e(q,phr),e(q,D7),e(D7,zbe),e(zbe,_hr),e(D7,uhr),e(D7,pQ),e(pQ,bhr),e(D7,vhr),e(q,Fhr),e(q,G7),e(G7,Wbe),e(Wbe,Thr),e(G7,Mhr),e(G7,_Q),e(_Q,Ehr),e(G7,Chr),e(q,whr),e(q,O7),e(O7,Qbe),e(Qbe,Ahr),e(O7,Lhr),e(O7,uQ),e(uQ,yhr),e(O7,xhr),e(q,$hr),e(q,V7),e(V7,Hbe),e(Hbe,khr),e(V7,Shr),e(V7,bQ),e(bQ,Rhr),e(V7,Phr),e(q,Bhr),e(q,X7),e(X7,Ube),e(Ube,Ihr),e(X7,Nhr),e(X7,vQ),e(vQ,qhr),e(X7,jhr),e(q,Dhr),e(q,z7),e(z7,Jbe),e(Jbe,Ghr),e(z7,Ohr),e(z7,FQ),e(FQ,Vhr),e(z7,Xhr),e(q,zhr),e(q,W7),e(W7,Ybe),e(Ybe,Whr),e(W7,Qhr),e(W7,TQ),e(TQ,Hhr),e(W7,Uhr),e(q,Jhr),e(q,Q7),e(Q7,Kbe),e(Kbe,Yhr),e(Q7,Khr),e(Q7,MQ),e(MQ,Zhr),e(Q7,epr),e(q,opr),e(q,H7),e(H7,Zbe),e(Zbe,rpr),e(H7,tpr),e(H7,EQ),e(EQ,apr),e(H7,npr),e(q,spr),e(q,U7),e(U7,eve),e(eve,lpr),e(U7,ipr),e(U7,CQ),e(CQ,dpr),e(U7,cpr),e(q,fpr),e(q,J7),e(J7,ove),e(ove,mpr),e(J7,gpr),e(J7,wQ),e(wQ,hpr),e(J7,ppr),e(q,_pr),e(q,Y7),e(Y7,rve),e(rve,upr),e(Y7,bpr),e(Y7,AQ),e(AQ,vpr),e(Y7,Fpr),e(q,Tpr),e(q,K7),e(K7,tve),e(tve,Mpr),e(K7,Epr),e(K7,LQ),e(LQ,Cpr),e(K7,wpr),e(q,Apr),e(q,Z7),e(Z7,ave),e(ave,Lpr),e(Z7,ypr),e(Z7,yQ),e(yQ,xpr),e(Z7,$pr),e(q,kpr),e(q,e9),e(e9,nve),e(nve,Spr),e(e9,Rpr),e(e9,xQ),e(xQ,Ppr),e(e9,Bpr),e(q,Ipr),e(q,o9),e(o9,sve),e(sve,Npr),e(o9,qpr),e(o9,$Q),e($Q,jpr),e(o9,Dpr),e(wr,Gpr),M(r9,wr,null),b(f,uDe,u),b(f,Wd,u),e(Wd,t9),e(t9,lve),M(xy,lve,null),e(Wd,Opr),e(Wd,ive),e(ive,Vpr),b(f,bDe,u),b(f,Ko,u),M($y,Ko,null),e(Ko,Xpr),e(Ko,Qd),e(Qd,zpr),e(Qd,kQ),e(kQ,Wpr),e(Qd,Qpr),e(Qd,SQ),e(SQ,Hpr),e(Qd,Upr),e(Ko,Jpr),e(Ko,ky),e(ky,Ypr),e(ky,dve),e(dve,Kpr),e(ky,Zpr),e(Ko,e_r),e(Ko,yt),M(Sy,yt,null),e(yt,o_r),e(yt,cve),e(cve,r_r),e(yt,t_r),e(yt,Hd),e(Hd,a_r),e(Hd,fve),e(fve,n_r),e(Hd,s_r),e(Hd,RQ),e(RQ,l_r),e(Hd,i_r),e(yt,d_r),M(a9,yt,null),e(Ko,c_r),e(Ko,Ar),M(Ry,Ar,null),e(Ar,f_r),e(Ar,mve),e(mve,m_r),e(Ar,g_r),e(Ar,Za),e(Za,h_r),e(Za,gve),e(gve,p_r),e(Za,__r),e(Za,hve),e(hve,u_r),e(Za,b_r),e(Za,pve),e(pve,v_r),e(Za,F_r),e(Ar,T_r),e(Ar,se),e(se,n9),e(n9,_ve),e(_ve,M_r),e(n9,E_r),e(n9,PQ),e(PQ,C_r),e(n9,w_r),e(se,A_r),e(se,s9),e(s9,uve),e(uve,L_r),e(s9,y_r),e(s9,BQ),e(BQ,x_r),e(s9,$_r),e(se,k_r),e(se,l9),e(l9,bve),e(bve,S_r),e(l9,R_r),e(l9,IQ),e(IQ,P_r),e(l9,B_r),e(se,I_r),e(se,i9),e(i9,vve),e(vve,N_r),e(i9,q_r),e(i9,NQ),e(NQ,j_r),e(i9,D_r),e(se,G_r),e(se,d9),e(d9,Fve),e(Fve,O_r),e(d9,V_r),e(d9,qQ),e(qQ,X_r),e(d9,z_r),e(se,W_r),e(se,c9),e(c9,Tve),e(Tve,Q_r),e(c9,H_r),e(c9,jQ),e(jQ,U_r),e(c9,J_r),e(se,Y_r),e(se,f9),e(f9,Mve),e(Mve,K_r),e(f9,Z_r),e(f9,DQ),e(DQ,eur),e(f9,our),e(se,rur),e(se,m9),e(m9,Eve),e(Eve,tur),e(m9,aur),e(m9,GQ),e(GQ,nur),e(m9,sur),e(se,lur),e(se,g9),e(g9,Cve),e(Cve,iur),e(g9,dur),e(g9,OQ),e(OQ,cur),e(g9,fur),e(se,mur),e(se,h9),e(h9,wve),e(wve,gur),e(h9,hur),e(h9,VQ),e(VQ,pur),e(h9,_ur),e(se,uur),e(se,p9),e(p9,Ave),e(Ave,bur),e(p9,vur),e(p9,XQ),e(XQ,Fur),e(p9,Tur),e(se,Mur),e(se,_9),e(_9,Lve),e(Lve,Eur),e(_9,Cur),e(_9,zQ),e(zQ,wur),e(_9,Aur),e(se,Lur),e(se,u9),e(u9,yve),e(yve,yur),e(u9,xur),e(u9,WQ),e(WQ,$ur),e(u9,kur),e(se,Sur),e(se,b9),e(b9,xve),e(xve,Rur),e(b9,Pur),e(b9,QQ),e(QQ,Bur),e(b9,Iur),e(se,Nur),e(se,v9),e(v9,$ve),e($ve,qur),e(v9,jur),e(v9,HQ),e(HQ,Dur),e(v9,Gur),e(se,Our),e(se,F9),e(F9,kve),e(kve,Vur),e(F9,Xur),e(F9,UQ),e(UQ,zur),e(F9,Wur),e(se,Qur),e(se,T9),e(T9,Sve),e(Sve,Hur),e(T9,Uur),e(T9,JQ),e(JQ,Jur),e(T9,Yur),e(se,Kur),e(se,M9),e(M9,Rve),e(Rve,Zur),e(M9,e2r),e(M9,YQ),e(YQ,o2r),e(M9,r2r),e(se,t2r),e(se,E9),e(E9,Pve),e(Pve,a2r),e(E9,n2r),e(E9,KQ),e(KQ,s2r),e(E9,l2r),e(se,i2r),e(se,C9),e(C9,Bve),e(Bve,d2r),e(C9,c2r),e(C9,ZQ),e(ZQ,f2r),e(C9,m2r),e(se,g2r),e(se,w9),e(w9,Ive),e(Ive,h2r),e(w9,p2r),e(w9,eH),e(eH,_2r),e(w9,u2r),e(se,b2r),e(se,A9),e(A9,Nve),e(Nve,v2r),e(A9,F2r),e(A9,oH),e(oH,T2r),e(A9,M2r),e(se,E2r),e(se,L9),e(L9,qve),e(qve,C2r),e(L9,w2r),e(L9,rH),e(rH,A2r),e(L9,L2r),e(Ar,y2r),M(y9,Ar,null),b(f,vDe,u),b(f,Ud,u),e(Ud,x9),e(x9,jve),M(Py,jve,null),e(Ud,x2r),e(Ud,Dve),e(Dve,$2r),b(f,FDe,u),b(f,Zo,u),M(By,Zo,null),e(Zo,k2r),e(Zo,Jd),e(Jd,S2r),e(Jd,tH),e(tH,R2r),e(Jd,P2r),e(Jd,aH),e(aH,B2r),e(Jd,I2r),e(Zo,N2r),e(Zo,Iy),e(Iy,q2r),e(Iy,Gve),e(Gve,j2r),e(Iy,D2r),e(Zo,G2r),e(Zo,xt),M(Ny,xt,null),e(xt,O2r),e(xt,Ove),e(Ove,V2r),e(xt,X2r),e(xt,Yd),e(Yd,z2r),e(Yd,Vve),e(Vve,W2r),e(Yd,Q2r),e(Yd,nH),e(nH,H2r),e(Yd,U2r),e(xt,J2r),M($9,xt,null),e(Zo,Y2r),e(Zo,Lr),M(qy,Lr,null),e(Lr,K2r),e(Lr,Xve),e(Xve,Z2r),e(Lr,e1r),e(Lr,en),e(en,o1r),e(en,zve),e(zve,r1r),e(en,t1r),e(en,Wve),e(Wve,a1r),e(en,n1r),e(en,Qve),e(Qve,s1r),e(en,l1r),e(Lr,i1r),e(Lr,Me),e(Me,k9),e(k9,Hve),e(Hve,d1r),e(k9,c1r),e(k9,sH),e(sH,f1r),e(k9,m1r),e(Me,g1r),e(Me,S9),e(S9,Uve),e(Uve,h1r),e(S9,p1r),e(S9,lH),e(lH,_1r),e(S9,u1r),e(Me,b1r),e(Me,R9),e(R9,Jve),e(Jve,v1r),e(R9,F1r),e(R9,iH),e(iH,T1r),e(R9,M1r),e(Me,E1r),e(Me,P9),e(P9,Yve),e(Yve,C1r),e(P9,w1r),e(P9,dH),e(dH,A1r),e(P9,L1r),e(Me,y1r),e(Me,B9),e(B9,Kve),e(Kve,x1r),e(B9,$1r),e(B9,cH),e(cH,k1r),e(B9,S1r),e(Me,R1r),e(Me,I9),e(I9,Zve),e(Zve,P1r),e(I9,B1r),e(I9,fH),e(fH,I1r),e(I9,N1r),e(Me,q1r),e(Me,N9),e(N9,eFe),e(eFe,j1r),e(N9,D1r),e(N9,mH),e(mH,G1r),e(N9,O1r),e(Me,V1r),e(Me,q9),e(q9,oFe),e(oFe,X1r),e(q9,z1r),e(q9,gH),e(gH,W1r),e(q9,Q1r),e(Me,H1r),e(Me,j9),e(j9,rFe),e(rFe,U1r),e(j9,J1r),e(j9,hH),e(hH,Y1r),e(j9,K1r),e(Me,Z1r),e(Me,D9),e(D9,tFe),e(tFe,ebr),e(D9,obr),e(D9,pH),e(pH,rbr),e(D9,tbr),e(Me,abr),e(Me,G9),e(G9,aFe),e(aFe,nbr),e(G9,sbr),e(G9,_H),e(_H,lbr),e(G9,ibr),e(Me,dbr),e(Me,O9),e(O9,nFe),e(nFe,cbr),e(O9,fbr),e(O9,uH),e(uH,mbr),e(O9,gbr),e(Me,hbr),e(Me,V9),e(V9,sFe),e(sFe,pbr),e(V9,_br),e(V9,bH),e(bH,ubr),e(V9,bbr),e(Lr,vbr),M(X9,Lr,null),b(f,TDe,u),b(f,Kd,u),e(Kd,z9),e(z9,lFe),M(jy,lFe,null),e(Kd,Fbr),e(Kd,iFe),e(iFe,Tbr),b(f,MDe,u),b(f,er,u),M(Dy,er,null),e(er,Mbr),e(er,Zd),e(Zd,Ebr),e(Zd,vH),e(vH,Cbr),e(Zd,wbr),e(Zd,FH),e(FH,Abr),e(Zd,Lbr),e(er,ybr),e(er,Gy),e(Gy,xbr),e(Gy,dFe),e(dFe,$br),e(Gy,kbr),e(er,Sbr),e(er,$t),M(Oy,$t,null),e($t,Rbr),e($t,cFe),e(cFe,Pbr),e($t,Bbr),e($t,ec),e(ec,Ibr),e(ec,fFe),e(fFe,Nbr),e(ec,qbr),e(ec,TH),e(TH,jbr),e(ec,Dbr),e($t,Gbr),M(W9,$t,null),e(er,Obr),e(er,yr),M(Vy,yr,null),e(yr,Vbr),e(yr,mFe),e(mFe,Xbr),e(yr,zbr),e(yr,on),e(on,Wbr),e(on,gFe),e(gFe,Qbr),e(on,Hbr),e(on,hFe),e(hFe,Ubr),e(on,Jbr),e(on,pFe),e(pFe,Ybr),e(on,Kbr),e(yr,Zbr),e(yr,rn),e(rn,Q9),e(Q9,_Fe),e(_Fe,evr),e(Q9,ovr),e(Q9,MH),e(MH,rvr),e(Q9,tvr),e(rn,avr),e(rn,H9),e(H9,uFe),e(uFe,nvr),e(H9,svr),e(H9,EH),e(EH,lvr),e(H9,ivr),e(rn,dvr),e(rn,U9),e(U9,bFe),e(bFe,cvr),e(U9,fvr),e(U9,CH),e(CH,mvr),e(U9,gvr),e(rn,hvr),e(rn,J9),e(J9,vFe),e(vFe,pvr),e(J9,_vr),e(J9,wH),e(wH,uvr),e(J9,bvr),e(yr,vvr),M(Y9,yr,null),b(f,EDe,u),b(f,oc,u),e(oc,K9),e(K9,FFe),M(Xy,FFe,null),e(oc,Fvr),e(oc,TFe),e(TFe,Tvr),b(f,CDe,u),b(f,or,u),M(zy,or,null),e(or,Mvr),e(or,rc),e(rc,Evr),e(rc,AH),e(AH,Cvr),e(rc,wvr),e(rc,LH),e(LH,Avr),e(rc,Lvr),e(or,yvr),e(or,Wy),e(Wy,xvr),e(Wy,MFe),e(MFe,$vr),e(Wy,kvr),e(or,Svr),e(or,kt),M(Qy,kt,null),e(kt,Rvr),e(kt,EFe),e(EFe,Pvr),e(kt,Bvr),e(kt,tc),e(tc,Ivr),e(tc,CFe),e(CFe,Nvr),e(tc,qvr),e(tc,yH),e(yH,jvr),e(tc,Dvr),e(kt,Gvr),M(Z9,kt,null),e(or,Ovr),e(or,xr),M(Hy,xr,null),e(xr,Vvr),e(xr,wFe),e(wFe,Xvr),e(xr,zvr),e(xr,tn),e(tn,Wvr),e(tn,AFe),e(AFe,Qvr),e(tn,Hvr),e(tn,LFe),e(LFe,Uvr),e(tn,Jvr),e(tn,yFe),e(yFe,Yvr),e(tn,Kvr),e(xr,Zvr),e(xr,ie),e(ie,eM),e(eM,xFe),e(xFe,eFr),e(eM,oFr),e(eM,xH),e(xH,rFr),e(eM,tFr),e(ie,aFr),e(ie,oM),e(oM,$Fe),e($Fe,nFr),e(oM,sFr),e(oM,$H),e($H,lFr),e(oM,iFr),e(ie,dFr),e(ie,rM),e(rM,kFe),e(kFe,cFr),e(rM,fFr),e(rM,kH),e(kH,mFr),e(rM,gFr),e(ie,hFr),e(ie,tM),e(tM,SFe),e(SFe,pFr),e(tM,_Fr),e(tM,SH),e(SH,uFr),e(tM,bFr),e(ie,vFr),e(ie,aM),e(aM,RFe),e(RFe,FFr),e(aM,TFr),e(aM,RH),e(RH,MFr),e(aM,EFr),e(ie,CFr),e(ie,nM),e(nM,PFe),e(PFe,wFr),e(nM,AFr),e(nM,PH),e(PH,LFr),e(nM,yFr),e(ie,xFr),e(ie,sM),e(sM,BFe),e(BFe,$Fr),e(sM,kFr),e(sM,BH),e(BH,SFr),e(sM,RFr),e(ie,PFr),e(ie,lM),e(lM,IFe),e(IFe,BFr),e(lM,IFr),e(lM,IH),e(IH,NFr),e(lM,qFr),e(ie,jFr),e(ie,iM),e(iM,NFe),e(NFe,DFr),e(iM,GFr),e(iM,NH),e(NH,OFr),e(iM,VFr),e(ie,XFr),e(ie,dM),e(dM,qFe),e(qFe,zFr),e(dM,WFr),e(dM,qH),e(qH,QFr),e(dM,HFr),e(ie,UFr),e(ie,cM),e(cM,jFe),e(jFe,JFr),e(cM,YFr),e(cM,jH),e(jH,KFr),e(cM,ZFr),e(ie,e6r),e(ie,fM),e(fM,DFe),e(DFe,o6r),e(fM,r6r),e(fM,DH),e(DH,t6r),e(fM,a6r),e(ie,n6r),e(ie,mM),e(mM,GFe),e(GFe,s6r),e(mM,l6r),e(mM,GH),e(GH,i6r),e(mM,d6r),e(ie,c6r),e(ie,gM),e(gM,OFe),e(OFe,f6r),e(gM,m6r),e(gM,OH),e(OH,g6r),e(gM,h6r),e(ie,p6r),e(ie,hM),e(hM,VFe),e(VFe,_6r),e(hM,u6r),e(hM,VH),e(VH,b6r),e(hM,v6r),e(ie,F6r),e(ie,pM),e(pM,XFe),e(XFe,T6r),e(pM,M6r),e(pM,XH),e(XH,E6r),e(pM,C6r),e(ie,w6r),e(ie,_M),e(_M,zFe),e(zFe,A6r),e(_M,L6r),e(_M,zH),e(zH,y6r),e(_M,x6r),e(ie,$6r),e(ie,uM),e(uM,WFe),e(WFe,k6r),e(uM,S6r),e(uM,WH),e(WH,R6r),e(uM,P6r),e(ie,B6r),e(ie,bM),e(bM,QFe),e(QFe,I6r),e(bM,N6r),e(bM,QH),e(QH,q6r),e(bM,j6r),e(ie,D6r),e(ie,vM),e(vM,HFe),e(HFe,G6r),e(vM,O6r),e(vM,HH),e(HH,V6r),e(vM,X6r),e(xr,z6r),M(FM,xr,null),b(f,wDe,u),b(f,ac,u),e(ac,TM),e(TM,UFe),M(Uy,UFe,null),e(ac,W6r),e(ac,JFe),e(JFe,Q6r),b(f,ADe,u),b(f,rr,u),M(Jy,rr,null),e(rr,H6r),e(rr,nc),e(nc,U6r),e(nc,UH),e(UH,J6r),e(nc,Y6r),e(nc,JH),e(JH,K6r),e(nc,Z6r),e(rr,eTr),e(rr,Yy),e(Yy,oTr),e(Yy,YFe),e(YFe,rTr),e(Yy,tTr),e(rr,aTr),e(rr,St),M(Ky,St,null),e(St,nTr),e(St,KFe),e(KFe,sTr),e(St,lTr),e(St,sc),e(sc,iTr),e(sc,ZFe),e(ZFe,dTr),e(sc,cTr),e(sc,YH),e(YH,fTr),e(sc,mTr),e(St,gTr),M(MM,St,null),e(rr,hTr),e(rr,$r),M(Zy,$r,null),e($r,pTr),e($r,e6e),e(e6e,_Tr),e($r,uTr),e($r,an),e(an,bTr),e(an,o6e),e(o6e,vTr),e(an,FTr),e(an,r6e),e(r6e,TTr),e(an,MTr),e(an,t6e),e(t6e,ETr),e(an,CTr),e($r,wTr),e($r,Le),e(Le,EM),e(EM,a6e),e(a6e,ATr),e(EM,LTr),e(EM,KH),e(KH,yTr),e(EM,xTr),e(Le,$Tr),e(Le,CM),e(CM,n6e),e(n6e,kTr),e(CM,STr),e(CM,ZH),e(ZH,RTr),e(CM,PTr),e(Le,BTr),e(Le,wM),e(wM,s6e),e(s6e,ITr),e(wM,NTr),e(wM,eU),e(eU,qTr),e(wM,jTr),e(Le,DTr),e(Le,AM),e(AM,l6e),e(l6e,GTr),e(AM,OTr),e(AM,oU),e(oU,VTr),e(AM,XTr),e(Le,zTr),e(Le,LM),e(LM,i6e),e(i6e,WTr),e(LM,QTr),e(LM,rU),e(rU,HTr),e(LM,UTr),e(Le,JTr),e(Le,yM),e(yM,d6e),e(d6e,YTr),e(yM,KTr),e(yM,tU),e(tU,ZTr),e(yM,e7r),e(Le,o7r),e(Le,xM),e(xM,c6e),e(c6e,r7r),e(xM,t7r),e(xM,aU),e(aU,a7r),e(xM,n7r),e(Le,s7r),e(Le,$M),e($M,f6e),e(f6e,l7r),e($M,i7r),e($M,nU),e(nU,d7r),e($M,c7r),e(Le,f7r),e(Le,kM),e(kM,m6e),e(m6e,m7r),e(kM,g7r),e(kM,sU),e(sU,h7r),e(kM,p7r),e(Le,_7r),e(Le,SM),e(SM,g6e),e(g6e,u7r),e(SM,b7r),e(SM,lU),e(lU,v7r),e(SM,F7r),e($r,T7r),M(RM,$r,null),b(f,LDe,u),b(f,lc,u),e(lc,PM),e(PM,h6e),M(e8,h6e,null),e(lc,M7r),e(lc,p6e),e(p6e,E7r),b(f,yDe,u),b(f,tr,u),M(o8,tr,null),e(tr,C7r),e(tr,ic),e(ic,w7r),e(ic,iU),e(iU,A7r),e(ic,L7r),e(ic,dU),e(dU,y7r),e(ic,x7r),e(tr,$7r),e(tr,r8),e(r8,k7r),e(r8,_6e),e(_6e,S7r),e(r8,R7r),e(tr,P7r),e(tr,Rt),M(t8,Rt,null),e(Rt,B7r),e(Rt,u6e),e(u6e,I7r),e(Rt,N7r),e(Rt,dc),e(dc,q7r),e(dc,b6e),e(b6e,j7r),e(dc,D7r),e(dc,cU),e(cU,G7r),e(dc,O7r),e(Rt,V7r),M(BM,Rt,null),e(tr,X7r),e(tr,kr),M(a8,kr,null),e(kr,z7r),e(kr,v6e),e(v6e,W7r),e(kr,Q7r),e(kr,nn),e(nn,H7r),e(nn,F6e),e(F6e,U7r),e(nn,J7r),e(nn,T6e),e(T6e,Y7r),e(nn,K7r),e(nn,M6e),e(M6e,Z7r),e(nn,e9r),e(kr,o9r),e(kr,re),e(re,IM),e(IM,E6e),e(E6e,r9r),e(IM,t9r),e(IM,fU),e(fU,a9r),e(IM,n9r),e(re,s9r),e(re,NM),e(NM,C6e),e(C6e,l9r),e(NM,i9r),e(NM,mU),e(mU,d9r),e(NM,c9r),e(re,f9r),e(re,qM),e(qM,w6e),e(w6e,m9r),e(qM,g9r),e(qM,gU),e(gU,h9r),e(qM,p9r),e(re,_9r),e(re,jM),e(jM,A6e),e(A6e,u9r),e(jM,b9r),e(jM,hU),e(hU,v9r),e(jM,F9r),e(re,T9r),e(re,DM),e(DM,L6e),e(L6e,M9r),e(DM,E9r),e(DM,pU),e(pU,C9r),e(DM,w9r),e(re,A9r),e(re,GM),e(GM,y6e),e(y6e,L9r),e(GM,y9r),e(GM,_U),e(_U,x9r),e(GM,$9r),e(re,k9r),e(re,OM),e(OM,x6e),e(x6e,S9r),e(OM,R9r),e(OM,uU),e(uU,P9r),e(OM,B9r),e(re,I9r),e(re,VM),e(VM,$6e),e($6e,N9r),e(VM,q9r),e(VM,bU),e(bU,j9r),e(VM,D9r),e(re,G9r),e(re,XM),e(XM,k6e),e(k6e,O9r),e(XM,V9r),e(XM,vU),e(vU,X9r),e(XM,z9r),e(re,W9r),e(re,zM),e(zM,S6e),e(S6e,Q9r),e(zM,H9r),e(zM,FU),e(FU,U9r),e(zM,J9r),e(re,Y9r),e(re,WM),e(WM,R6e),e(R6e,K9r),e(WM,Z9r),e(WM,TU),e(TU,eMr),e(WM,oMr),e(re,rMr),e(re,QM),e(QM,P6e),e(P6e,tMr),e(QM,aMr),e(QM,MU),e(MU,nMr),e(QM,sMr),e(re,lMr),e(re,HM),e(HM,B6e),e(B6e,iMr),e(HM,dMr),e(HM,EU),e(EU,cMr),e(HM,fMr),e(re,mMr),e(re,UM),e(UM,I6e),e(I6e,gMr),e(UM,hMr),e(UM,CU),e(CU,pMr),e(UM,_Mr),e(re,uMr),e(re,JM),e(JM,N6e),e(N6e,bMr),e(JM,vMr),e(JM,wU),e(wU,FMr),e(JM,TMr),e(re,MMr),e(re,YM),e(YM,q6e),e(q6e,EMr),e(YM,CMr),e(YM,AU),e(AU,wMr),e(YM,AMr),e(re,LMr),e(re,KM),e(KM,j6e),e(j6e,yMr),e(KM,xMr),e(KM,LU),e(LU,$Mr),e(KM,kMr),e(re,SMr),e(re,ZM),e(ZM,D6e),e(D6e,RMr),e(ZM,PMr),e(ZM,yU),e(yU,BMr),e(ZM,IMr),e(re,NMr),e(re,e4),e(e4,G6e),e(G6e,qMr),e(e4,jMr),e(e4,xU),e(xU,DMr),e(e4,GMr),e(re,OMr),e(re,o4),e(o4,O6e),e(O6e,VMr),e(o4,XMr),e(o4,$U),e($U,zMr),e(o4,WMr),e(re,QMr),e(re,r4),e(r4,V6e),e(V6e,HMr),e(r4,UMr),e(r4,kU),e(kU,JMr),e(r4,YMr),e(re,KMr),e(re,t4),e(t4,X6e),e(X6e,ZMr),e(t4,e4r),e(t4,SU),e(SU,o4r),e(t4,r4r),e(re,t4r),e(re,a4),e(a4,z6e),e(z6e,a4r),e(a4,n4r),e(a4,RU),e(RU,s4r),e(a4,l4r),e(re,i4r),e(re,n4),e(n4,W6e),e(W6e,d4r),e(n4,c4r),e(n4,PU),e(PU,f4r),e(n4,m4r),e(re,g4r),e(re,s4),e(s4,Q6e),e(Q6e,h4r),e(s4,p4r),e(s4,BU),e(BU,_4r),e(s4,u4r),e(re,b4r),e(re,l4),e(l4,H6e),e(H6e,v4r),e(l4,F4r),e(l4,IU),e(IU,T4r),e(l4,M4r),e(kr,E4r),M(i4,kr,null),b(f,xDe,u),b(f,cc,u),e(cc,d4),e(d4,U6e),M(n8,U6e,null),e(cc,C4r),e(cc,J6e),e(J6e,w4r),b(f,$De,u),b(f,ar,u),M(s8,ar,null),e(ar,A4r),e(ar,fc),e(fc,L4r),e(fc,NU),e(NU,y4r),e(fc,x4r),e(fc,qU),e(qU,$4r),e(fc,k4r),e(ar,S4r),e(ar,l8),e(l8,R4r),e(l8,Y6e),e(Y6e,P4r),e(l8,B4r),e(ar,I4r),e(ar,Pt),M(i8,Pt,null),e(Pt,N4r),e(Pt,K6e),e(K6e,q4r),e(Pt,j4r),e(Pt,mc),e(mc,D4r),e(mc,Z6e),e(Z6e,G4r),e(mc,O4r),e(mc,jU),e(jU,V4r),e(mc,X4r),e(Pt,z4r),M(c4,Pt,null),e(ar,W4r),e(ar,Sr),M(d8,Sr,null),e(Sr,Q4r),e(Sr,eTe),e(eTe,H4r),e(Sr,U4r),e(Sr,sn),e(sn,J4r),e(sn,oTe),e(oTe,Y4r),e(sn,K4r),e(sn,rTe),e(rTe,Z4r),e(sn,eEr),e(sn,tTe),e(tTe,oEr),e(sn,rEr),e(Sr,tEr),e(Sr,_e),e(_e,f4),e(f4,aTe),e(aTe,aEr),e(f4,nEr),e(f4,DU),e(DU,sEr),e(f4,lEr),e(_e,iEr),e(_e,m4),e(m4,nTe),e(nTe,dEr),e(m4,cEr),e(m4,GU),e(GU,fEr),e(m4,mEr),e(_e,gEr),e(_e,g4),e(g4,sTe),e(sTe,hEr),e(g4,pEr),e(g4,OU),e(OU,_Er),e(g4,uEr),e(_e,bEr),e(_e,h4),e(h4,lTe),e(lTe,vEr),e(h4,FEr),e(h4,VU),e(VU,TEr),e(h4,MEr),e(_e,EEr),e(_e,p4),e(p4,iTe),e(iTe,CEr),e(p4,wEr),e(p4,XU),e(XU,AEr),e(p4,LEr),e(_e,yEr),e(_e,_4),e(_4,dTe),e(dTe,xEr),e(_4,$Er),e(_4,zU),e(zU,kEr),e(_4,SEr),e(_e,REr),e(_e,u4),e(u4,cTe),e(cTe,PEr),e(u4,BEr),e(u4,WU),e(WU,IEr),e(u4,NEr),e(_e,qEr),e(_e,b4),e(b4,fTe),e(fTe,jEr),e(b4,DEr),e(b4,QU),e(QU,GEr),e(b4,OEr),e(_e,VEr),e(_e,v4),e(v4,mTe),e(mTe,XEr),e(v4,zEr),e(v4,HU),e(HU,WEr),e(v4,QEr),e(_e,HEr),e(_e,F4),e(F4,gTe),e(gTe,UEr),e(F4,JEr),e(F4,UU),e(UU,YEr),e(F4,KEr),e(_e,ZEr),e(_e,T4),e(T4,hTe),e(hTe,eCr),e(T4,oCr),e(T4,JU),e(JU,rCr),e(T4,tCr),e(_e,aCr),e(_e,M4),e(M4,pTe),e(pTe,nCr),e(M4,sCr),e(M4,YU),e(YU,lCr),e(M4,iCr),e(_e,dCr),e(_e,E4),e(E4,_Te),e(_Te,cCr),e(E4,fCr),e(E4,KU),e(KU,mCr),e(E4,gCr),e(_e,hCr),e(_e,C4),e(C4,uTe),e(uTe,pCr),e(C4,_Cr),e(C4,ZU),e(ZU,uCr),e(C4,bCr),e(_e,vCr),e(_e,w4),e(w4,bTe),e(bTe,FCr),e(w4,TCr),e(w4,eJ),e(eJ,MCr),e(w4,ECr),e(_e,CCr),e(_e,A4),e(A4,vTe),e(vTe,wCr),e(A4,ACr),e(A4,oJ),e(oJ,LCr),e(A4,yCr),e(_e,xCr),e(_e,L4),e(L4,FTe),e(FTe,$Cr),e(L4,kCr),e(L4,rJ),e(rJ,SCr),e(L4,RCr),e(Sr,PCr),M(y4,Sr,null),b(f,kDe,u),b(f,gc,u),e(gc,x4),e(x4,TTe),M(c8,TTe,null),e(gc,BCr),e(gc,MTe),e(MTe,ICr),b(f,SDe,u),b(f,nr,u),M(f8,nr,null),e(nr,NCr),e(nr,hc),e(hc,qCr),e(hc,tJ),e(tJ,jCr),e(hc,DCr),e(hc,aJ),e(aJ,GCr),e(hc,OCr),e(nr,VCr),e(nr,m8),e(m8,XCr),e(m8,ETe),e(ETe,zCr),e(m8,WCr),e(nr,QCr),e(nr,Bt),M(g8,Bt,null),e(Bt,HCr),e(Bt,CTe),e(CTe,UCr),e(Bt,JCr),e(Bt,pc),e(pc,YCr),e(pc,wTe),e(wTe,KCr),e(pc,ZCr),e(pc,nJ),e(nJ,e5r),e(pc,o5r),e(Bt,r5r),M($4,Bt,null),e(nr,t5r),e(nr,Rr),M(h8,Rr,null),e(Rr,a5r),e(Rr,ATe),e(ATe,n5r),e(Rr,s5r),e(Rr,ln),e(ln,l5r),e(ln,LTe),e(LTe,i5r),e(ln,d5r),e(ln,yTe),e(yTe,c5r),e(ln,f5r),e(ln,xTe),e(xTe,m5r),e(ln,g5r),e(Rr,h5r),e(Rr,p8),e(p8,k4),e(k4,$Te),e($Te,p5r),e(k4,_5r),e(k4,sJ),e(sJ,u5r),e(k4,b5r),e(p8,v5r),e(p8,S4),e(S4,kTe),e(kTe,F5r),e(S4,T5r),e(S4,lJ),e(lJ,M5r),e(S4,E5r),e(Rr,C5r),M(R4,Rr,null),b(f,RDe,u),b(f,_c,u),e(_c,P4),e(P4,STe),M(_8,STe,null),e(_c,w5r),e(_c,RTe),e(RTe,A5r),b(f,PDe,u),b(f,sr,u),M(u8,sr,null),e(sr,L5r),e(sr,uc),e(uc,y5r),e(uc,iJ),e(iJ,x5r),e(uc,$5r),e(uc,dJ),e(dJ,k5r),e(uc,S5r),e(sr,R5r),e(sr,b8),e(b8,P5r),e(b8,PTe),e(PTe,B5r),e(b8,I5r),e(sr,N5r),e(sr,It),M(v8,It,null),e(It,q5r),e(It,BTe),e(BTe,j5r),e(It,D5r),e(It,bc),e(bc,G5r),e(bc,ITe),e(ITe,O5r),e(bc,V5r),e(bc,cJ),e(cJ,X5r),e(bc,z5r),e(It,W5r),M(B4,It,null),e(sr,Q5r),e(sr,Pr),M(F8,Pr,null),e(Pr,H5r),e(Pr,NTe),e(NTe,U5r),e(Pr,J5r),e(Pr,dn),e(dn,Y5r),e(dn,qTe),e(qTe,K5r),e(dn,Z5r),e(dn,jTe),e(jTe,e3r),e(dn,o3r),e(dn,DTe),e(DTe,r3r),e(dn,t3r),e(Pr,a3r),e(Pr,GTe),e(GTe,I4),e(I4,OTe),e(OTe,n3r),e(I4,s3r),e(I4,fJ),e(fJ,l3r),e(I4,i3r),e(Pr,d3r),M(N4,Pr,null),b(f,BDe,u),b(f,vc,u),e(vc,q4),e(q4,VTe),M(T8,VTe,null),e(vc,c3r),e(vc,XTe),e(XTe,f3r),b(f,IDe,u),b(f,lr,u),M(M8,lr,null),e(lr,m3r),e(lr,Fc),e(Fc,g3r),e(Fc,mJ),e(mJ,h3r),e(Fc,p3r),e(Fc,gJ),e(gJ,_3r),e(Fc,u3r),e(lr,b3r),e(lr,E8),e(E8,v3r),e(E8,zTe),e(zTe,F3r),e(E8,T3r),e(lr,M3r),e(lr,Nt),M(C8,Nt,null),e(Nt,E3r),e(Nt,WTe),e(WTe,C3r),e(Nt,w3r),e(Nt,Tc),e(Tc,A3r),e(Tc,QTe),e(QTe,L3r),e(Tc,y3r),e(Tc,hJ),e(hJ,x3r),e(Tc,$3r),e(Nt,k3r),M(j4,Nt,null),e(lr,S3r),e(lr,Br),M(w8,Br,null),e(Br,R3r),e(Br,HTe),e(HTe,P3r),e(Br,B3r),e(Br,cn),e(cn,I3r),e(cn,UTe),e(UTe,N3r),e(cn,q3r),e(cn,JTe),e(JTe,j3r),e(cn,D3r),e(cn,YTe),e(YTe,G3r),e(cn,O3r),e(Br,V3r),e(Br,de),e(de,D4),e(D4,KTe),e(KTe,X3r),e(D4,z3r),e(D4,pJ),e(pJ,W3r),e(D4,Q3r),e(de,H3r),e(de,G4),e(G4,ZTe),e(ZTe,U3r),e(G4,J3r),e(G4,_J),e(_J,Y3r),e(G4,K3r),e(de,Z3r),e(de,O4),e(O4,e7e),e(e7e,e0r),e(O4,o0r),e(O4,uJ),e(uJ,r0r),e(O4,t0r),e(de,a0r),e(de,V4),e(V4,o7e),e(o7e,n0r),e(V4,s0r),e(V4,bJ),e(bJ,l0r),e(V4,i0r),e(de,d0r),e(de,X4),e(X4,r7e),e(r7e,c0r),e(X4,f0r),e(X4,vJ),e(vJ,m0r),e(X4,g0r),e(de,h0r),e(de,z4),e(z4,t7e),e(t7e,p0r),e(z4,_0r),e(z4,FJ),e(FJ,u0r),e(z4,b0r),e(de,v0r),e(de,W4),e(W4,a7e),e(a7e,F0r),e(W4,T0r),e(W4,TJ),e(TJ,M0r),e(W4,E0r),e(de,C0r),e(de,Q4),e(Q4,n7e),e(n7e,w0r),e(Q4,A0r),e(Q4,MJ),e(MJ,L0r),e(Q4,y0r),e(de,x0r),e(de,H4),e(H4,s7e),e(s7e,$0r),e(H4,k0r),e(H4,EJ),e(EJ,S0r),e(H4,R0r),e(de,P0r),e(de,U4),e(U4,l7e),e(l7e,B0r),e(U4,I0r),e(U4,CJ),e(CJ,N0r),e(U4,q0r),e(de,j0r),e(de,J4),e(J4,i7e),e(i7e,D0r),e(J4,G0r),e(J4,wJ),e(wJ,O0r),e(J4,V0r),e(de,X0r),e(de,Y4),e(Y4,d7e),e(d7e,z0r),e(Y4,W0r),e(Y4,AJ),e(AJ,Q0r),e(Y4,H0r),e(de,U0r),e(de,K4),e(K4,c7e),e(c7e,J0r),e(K4,Y0r),e(K4,LJ),e(LJ,K0r),e(K4,Z0r),e(de,ewr),e(de,Z4),e(Z4,f7e),e(f7e,owr),e(Z4,rwr),e(Z4,yJ),e(yJ,twr),e(Z4,awr),e(de,nwr),e(de,eE),e(eE,m7e),e(m7e,swr),e(eE,lwr),e(eE,xJ),e(xJ,iwr),e(eE,dwr),e(de,cwr),e(de,oE),e(oE,g7e),e(g7e,fwr),e(oE,mwr),e(oE,$J),e($J,gwr),e(oE,hwr),e(de,pwr),e(de,rE),e(rE,h7e),e(h7e,_wr),e(rE,uwr),e(rE,kJ),e(kJ,bwr),e(rE,vwr),e(de,Fwr),e(de,tE),e(tE,p7e),e(p7e,Twr),e(tE,Mwr),e(tE,SJ),e(SJ,Ewr),e(tE,Cwr),e(de,wwr),e(de,aE),e(aE,_7e),e(_7e,Awr),e(aE,Lwr),e(aE,RJ),e(RJ,ywr),e(aE,xwr),e(de,$wr),e(de,nE),e(nE,u7e),e(u7e,kwr),e(nE,Swr),e(nE,PJ),e(PJ,Rwr),e(nE,Pwr),e(Br,Bwr),M(sE,Br,null),b(f,NDe,u),b(f,Mc,u),e(Mc,lE),e(lE,b7e),M(A8,b7e,null),e(Mc,Iwr),e(Mc,v7e),e(v7e,Nwr),b(f,qDe,u),b(f,ir,u),M(L8,ir,null),e(ir,qwr),e(ir,Ec),e(Ec,jwr),e(Ec,BJ),e(BJ,Dwr),e(Ec,Gwr),e(Ec,IJ),e(IJ,Owr),e(Ec,Vwr),e(ir,Xwr),e(ir,y8),e(y8,zwr),e(y8,F7e),e(F7e,Wwr),e(y8,Qwr),e(ir,Hwr),e(ir,qt),M(x8,qt,null),e(qt,Uwr),e(qt,T7e),e(T7e,Jwr),e(qt,Ywr),e(qt,Cc),e(Cc,Kwr),e(Cc,M7e),e(M7e,Zwr),e(Cc,eAr),e(Cc,NJ),e(NJ,oAr),e(Cc,rAr),e(qt,tAr),M(iE,qt,null),e(ir,aAr),e(ir,Ir),M($8,Ir,null),e(Ir,nAr),e(Ir,E7e),e(E7e,sAr),e(Ir,lAr),e(Ir,fn),e(fn,iAr),e(fn,C7e),e(C7e,dAr),e(fn,cAr),e(fn,w7e),e(w7e,fAr),e(fn,mAr),e(fn,A7e),e(A7e,gAr),e(fn,hAr),e(Ir,pAr),e(Ir,ce),e(ce,dE),e(dE,L7e),e(L7e,_Ar),e(dE,uAr),e(dE,qJ),e(qJ,bAr),e(dE,vAr),e(ce,FAr),e(ce,cE),e(cE,y7e),e(y7e,TAr),e(cE,MAr),e(cE,jJ),e(jJ,EAr),e(cE,CAr),e(ce,wAr),e(ce,fE),e(fE,x7e),e(x7e,AAr),e(fE,LAr),e(fE,DJ),e(DJ,yAr),e(fE,xAr),e(ce,$Ar),e(ce,mE),e(mE,$7e),e($7e,kAr),e(mE,SAr),e(mE,GJ),e(GJ,RAr),e(mE,PAr),e(ce,BAr),e(ce,gE),e(gE,k7e),e(k7e,IAr),e(gE,NAr),e(gE,OJ),e(OJ,qAr),e(gE,jAr),e(ce,DAr),e(ce,hE),e(hE,S7e),e(S7e,GAr),e(hE,OAr),e(hE,VJ),e(VJ,VAr),e(hE,XAr),e(ce,zAr),e(ce,pE),e(pE,R7e),e(R7e,WAr),e(pE,QAr),e(pE,XJ),e(XJ,HAr),e(pE,UAr),e(ce,JAr),e(ce,_E),e(_E,P7e),e(P7e,YAr),e(_E,KAr),e(_E,zJ),e(zJ,ZAr),e(_E,eLr),e(ce,oLr),e(ce,uE),e(uE,B7e),e(B7e,rLr),e(uE,tLr),e(uE,WJ),e(WJ,aLr),e(uE,nLr),e(ce,sLr),e(ce,bE),e(bE,I7e),e(I7e,lLr),e(bE,iLr),e(bE,QJ),e(QJ,dLr),e(bE,cLr),e(ce,fLr),e(ce,vE),e(vE,N7e),e(N7e,mLr),e(vE,gLr),e(vE,HJ),e(HJ,hLr),e(vE,pLr),e(ce,_Lr),e(ce,FE),e(FE,q7e),e(q7e,uLr),e(FE,bLr),e(FE,UJ),e(UJ,vLr),e(FE,FLr),e(ce,TLr),e(ce,TE),e(TE,j7e),e(j7e,MLr),e(TE,ELr),e(TE,JJ),e(JJ,CLr),e(TE,wLr),e(ce,ALr),e(ce,ME),e(ME,D7e),e(D7e,LLr),e(ME,yLr),e(ME,YJ),e(YJ,xLr),e(ME,$Lr),e(ce,kLr),e(ce,EE),e(EE,G7e),e(G7e,SLr),e(EE,RLr),e(EE,KJ),e(KJ,PLr),e(EE,BLr),e(ce,ILr),e(ce,CE),e(CE,O7e),e(O7e,NLr),e(CE,qLr),e(CE,ZJ),e(ZJ,jLr),e(CE,DLr),e(ce,GLr),e(ce,wE),e(wE,V7e),e(V7e,OLr),e(wE,VLr),e(wE,eY),e(eY,XLr),e(wE,zLr),e(ce,WLr),e(ce,AE),e(AE,X7e),e(X7e,QLr),e(AE,HLr),e(AE,oY),e(oY,ULr),e(AE,JLr),e(ce,YLr),e(ce,LE),e(LE,z7e),e(z7e,KLr),e(LE,ZLr),e(LE,rY),e(rY,eyr),e(LE,oyr),e(ce,ryr),e(ce,yE),e(yE,W7e),e(W7e,tyr),e(yE,ayr),e(yE,tY),e(tY,nyr),e(yE,syr),e(Ir,lyr),M(xE,Ir,null),b(f,jDe,u),b(f,wc,u),e(wc,$E),e($E,Q7e),M(k8,Q7e,null),e(wc,iyr),e(wc,H7e),e(H7e,dyr),b(f,DDe,u),b(f,dr,u),M(S8,dr,null),e(dr,cyr),e(dr,Ac),e(Ac,fyr),e(Ac,aY),e(aY,myr),e(Ac,gyr),e(Ac,nY),e(nY,hyr),e(Ac,pyr),e(dr,_yr),e(dr,R8),e(R8,uyr),e(R8,U7e),e(U7e,byr),e(R8,vyr),e(dr,Fyr),e(dr,jt),M(P8,jt,null),e(jt,Tyr),e(jt,J7e),e(J7e,Myr),e(jt,Eyr),e(jt,Lc),e(Lc,Cyr),e(Lc,Y7e),e(Y7e,wyr),e(Lc,Ayr),e(Lc,sY),e(sY,Lyr),e(Lc,yyr),e(jt,xyr),M(kE,jt,null),e(dr,$yr),e(dr,Nr),M(B8,Nr,null),e(Nr,kyr),e(Nr,K7e),e(K7e,Syr),e(Nr,Ryr),e(Nr,mn),e(mn,Pyr),e(mn,Z7e),e(Z7e,Byr),e(mn,Iyr),e(mn,e9e),e(e9e,Nyr),e(mn,qyr),e(mn,o9e),e(o9e,jyr),e(mn,Dyr),e(Nr,Gyr),e(Nr,r9e),e(r9e,SE),e(SE,t9e),e(t9e,Oyr),e(SE,Vyr),e(SE,lY),e(lY,Xyr),e(SE,zyr),e(Nr,Wyr),M(RE,Nr,null),b(f,GDe,u),b(f,yc,u),e(yc,PE),e(PE,a9e),M(I8,a9e,null),e(yc,Qyr),e(yc,n9e),e(n9e,Hyr),b(f,ODe,u),b(f,cr,u),M(N8,cr,null),e(cr,Uyr),e(cr,xc),e(xc,Jyr),e(xc,iY),e(iY,Yyr),e(xc,Kyr),e(xc,dY),e(dY,Zyr),e(xc,e8r),e(cr,o8r),e(cr,q8),e(q8,r8r),e(q8,s9e),e(s9e,t8r),e(q8,a8r),e(cr,n8r),e(cr,Dt),M(j8,Dt,null),e(Dt,s8r),e(Dt,l9e),e(l9e,l8r),e(Dt,i8r),e(Dt,$c),e($c,d8r),e($c,i9e),e(i9e,c8r),e($c,f8r),e($c,cY),e(cY,m8r),e($c,g8r),e(Dt,h8r),M(BE,Dt,null),e(cr,p8r),e(cr,qr),M(D8,qr,null),e(qr,_8r),e(qr,d9e),e(d9e,u8r),e(qr,b8r),e(qr,gn),e(gn,v8r),e(gn,c9e),e(c9e,F8r),e(gn,T8r),e(gn,f9e),e(f9e,M8r),e(gn,E8r),e(gn,m9e),e(m9e,C8r),e(gn,w8r),e(qr,A8r),e(qr,g9e),e(g9e,IE),e(IE,h9e),e(h9e,L8r),e(IE,y8r),e(IE,fY),e(fY,x8r),e(IE,$8r),e(qr,k8r),M(NE,qr,null),b(f,VDe,u),b(f,kc,u),e(kc,qE),e(qE,p9e),M(G8,p9e,null),e(kc,S8r),e(kc,_9e),e(_9e,R8r),b(f,XDe,u),b(f,fr,u),M(O8,fr,null),e(fr,P8r),e(fr,Sc),e(Sc,B8r),e(Sc,mY),e(mY,I8r),e(Sc,N8r),e(Sc,gY),e(gY,q8r),e(Sc,j8r),e(fr,D8r),e(fr,V8),e(V8,G8r),e(V8,u9e),e(u9e,O8r),e(V8,V8r),e(fr,X8r),e(fr,Gt),M(X8,Gt,null),e(Gt,z8r),e(Gt,b9e),e(b9e,W8r),e(Gt,Q8r),e(Gt,Rc),e(Rc,H8r),e(Rc,v9e),e(v9e,U8r),e(Rc,J8r),e(Rc,hY),e(hY,Y8r),e(Rc,K8r),e(Gt,Z8r),M(jE,Gt,null),e(fr,exr),e(fr,jr),M(z8,jr,null),e(jr,oxr),e(jr,F9e),e(F9e,rxr),e(jr,txr),e(jr,hn),e(hn,axr),e(hn,T9e),e(T9e,nxr),e(hn,sxr),e(hn,M9e),e(M9e,lxr),e(hn,ixr),e(hn,E9e),e(E9e,dxr),e(hn,cxr),e(jr,fxr),e(jr,oe),e(oe,DE),e(DE,C9e),e(C9e,mxr),e(DE,gxr),e(DE,pY),e(pY,hxr),e(DE,pxr),e(oe,_xr),e(oe,GE),e(GE,w9e),e(w9e,uxr),e(GE,bxr),e(GE,_Y),e(_Y,vxr),e(GE,Fxr),e(oe,Txr),e(oe,OE),e(OE,A9e),e(A9e,Mxr),e(OE,Exr),e(OE,uY),e(uY,Cxr),e(OE,wxr),e(oe,Axr),e(oe,VE),e(VE,L9e),e(L9e,Lxr),e(VE,yxr),e(VE,bY),e(bY,xxr),e(VE,$xr),e(oe,kxr),e(oe,XE),e(XE,y9e),e(y9e,Sxr),e(XE,Rxr),e(XE,vY),e(vY,Pxr),e(XE,Bxr),e(oe,Ixr),e(oe,zE),e(zE,x9e),e(x9e,Nxr),e(zE,qxr),e(zE,FY),e(FY,jxr),e(zE,Dxr),e(oe,Gxr),e(oe,WE),e(WE,$9e),e($9e,Oxr),e(WE,Vxr),e(WE,TY),e(TY,Xxr),e(WE,zxr),e(oe,Wxr),e(oe,QE),e(QE,k9e),e(k9e,Qxr),e(QE,Hxr),e(QE,MY),e(MY,Uxr),e(QE,Jxr),e(oe,Yxr),e(oe,HE),e(HE,S9e),e(S9e,Kxr),e(HE,Zxr),e(HE,EY),e(EY,e$r),e(HE,o$r),e(oe,r$r),e(oe,UE),e(UE,R9e),e(R9e,t$r),e(UE,a$r),e(UE,CY),e(CY,n$r),e(UE,s$r),e(oe,l$r),e(oe,JE),e(JE,P9e),e(P9e,i$r),e(JE,d$r),e(JE,wY),e(wY,c$r),e(JE,f$r),e(oe,m$r),e(oe,YE),e(YE,B9e),e(B9e,g$r),e(YE,h$r),e(YE,AY),e(AY,p$r),e(YE,_$r),e(oe,u$r),e(oe,KE),e(KE,I9e),e(I9e,b$r),e(KE,v$r),e(KE,LY),e(LY,F$r),e(KE,T$r),e(oe,M$r),e(oe,ZE),e(ZE,N9e),e(N9e,E$r),e(ZE,C$r),e(ZE,yY),e(yY,w$r),e(ZE,A$r),e(oe,L$r),e(oe,eC),e(eC,q9e),e(q9e,y$r),e(eC,x$r),e(eC,xY),e(xY,$$r),e(eC,k$r),e(oe,S$r),e(oe,oC),e(oC,j9e),e(j9e,R$r),e(oC,P$r),e(oC,$Y),e($Y,B$r),e(oC,I$r),e(oe,N$r),e(oe,rC),e(rC,D9e),e(D9e,q$r),e(rC,j$r),e(rC,kY),e(kY,D$r),e(rC,G$r),e(oe,O$r),e(oe,tC),e(tC,G9e),e(G9e,V$r),e(tC,X$r),e(tC,SY),e(SY,z$r),e(tC,W$r),e(oe,Q$r),e(oe,aC),e(aC,O9e),e(O9e,H$r),e(aC,U$r),e(aC,RY),e(RY,J$r),e(aC,Y$r),e(oe,K$r),e(oe,nC),e(nC,V9e),e(V9e,Z$r),e(nC,ekr),e(nC,PY),e(PY,okr),e(nC,rkr),e(oe,tkr),e(oe,sC),e(sC,X9e),e(X9e,akr),e(sC,nkr),e(sC,BY),e(BY,skr),e(sC,lkr),e(oe,ikr),e(oe,lC),e(lC,z9e),e(z9e,dkr),e(lC,ckr),e(lC,IY),e(IY,fkr),e(lC,mkr),e(oe,gkr),e(oe,iC),e(iC,W9e),e(W9e,hkr),e(iC,pkr),e(iC,NY),e(NY,_kr),e(iC,ukr),e(oe,bkr),e(oe,dC),e(dC,Q9e),e(Q9e,vkr),e(dC,Fkr),e(dC,qY),e(qY,Tkr),e(dC,Mkr),e(oe,Ekr),e(oe,cC),e(cC,H9e),e(H9e,Ckr),e(cC,wkr),e(cC,jY),e(jY,Akr),e(cC,Lkr),e(oe,ykr),e(oe,fC),e(fC,U9e),e(U9e,xkr),e(fC,$kr),e(fC,DY),e(DY,kkr),e(fC,Skr),e(oe,Rkr),e(oe,mC),e(mC,J9e),e(J9e,Pkr),e(mC,Bkr),e(mC,GY),e(GY,Ikr),e(mC,Nkr),e(jr,qkr),M(gC,jr,null),b(f,zDe,u),b(f,Pc,u),e(Pc,hC),e(hC,Y9e),M(W8,Y9e,null),e(Pc,jkr),e(Pc,K9e),e(K9e,Dkr),b(f,WDe,u),b(f,mr,u),M(Q8,mr,null),e(mr,Gkr),e(mr,Bc),e(Bc,Okr),e(Bc,OY),e(OY,Vkr),e(Bc,Xkr),e(Bc,VY),e(VY,zkr),e(Bc,Wkr),e(mr,Qkr),e(mr,H8),e(H8,Hkr),e(H8,Z9e),e(Z9e,Ukr),e(H8,Jkr),e(mr,Ykr),e(mr,Ot),M(U8,Ot,null),e(Ot,Kkr),e(Ot,eMe),e(eMe,Zkr),e(Ot,eSr),e(Ot,Ic),e(Ic,oSr),e(Ic,oMe),e(oMe,rSr),e(Ic,tSr),e(Ic,XY),e(XY,aSr),e(Ic,nSr),e(Ot,sSr),M(pC,Ot,null),e(mr,lSr),e(mr,Dr),M(J8,Dr,null),e(Dr,iSr),e(Dr,rMe),e(rMe,dSr),e(Dr,cSr),e(Dr,pn),e(pn,fSr),e(pn,tMe),e(tMe,mSr),e(pn,gSr),e(pn,aMe),e(aMe,hSr),e(pn,pSr),e(pn,nMe),e(nMe,_Sr),e(pn,uSr),e(Dr,bSr),e(Dr,ye),e(ye,_C),e(_C,sMe),e(sMe,vSr),e(_C,FSr),e(_C,zY),e(zY,TSr),e(_C,MSr),e(ye,ESr),e(ye,uC),e(uC,lMe),e(lMe,CSr),e(uC,wSr),e(uC,WY),e(WY,ASr),e(uC,LSr),e(ye,ySr),e(ye,bC),e(bC,iMe),e(iMe,xSr),e(bC,$Sr),e(bC,QY),e(QY,kSr),e(bC,SSr),e(ye,RSr),e(ye,vC),e(vC,dMe),e(dMe,PSr),e(vC,BSr),e(vC,HY),e(HY,ISr),e(vC,NSr),e(ye,qSr),e(ye,FC),e(FC,cMe),e(cMe,jSr),e(FC,DSr),e(FC,UY),e(UY,GSr),e(FC,OSr),e(ye,VSr),e(ye,TC),e(TC,fMe),e(fMe,XSr),e(TC,zSr),e(TC,JY),e(JY,WSr),e(TC,QSr),e(ye,HSr),e(ye,MC),e(MC,mMe),e(mMe,USr),e(MC,JSr),e(MC,YY),e(YY,YSr),e(MC,KSr),e(ye,ZSr),e(ye,EC),e(EC,gMe),e(gMe,eRr),e(EC,oRr),e(EC,KY),e(KY,rRr),e(EC,tRr),e(ye,aRr),e(ye,CC),e(CC,hMe),e(hMe,nRr),e(CC,sRr),e(CC,ZY),e(ZY,lRr),e(CC,iRr),e(ye,dRr),e(ye,wC),e(wC,pMe),e(pMe,cRr),e(wC,fRr),e(wC,eK),e(eK,mRr),e(wC,gRr),e(Dr,hRr),M(AC,Dr,null),b(f,QDe,u),b(f,Nc,u),e(Nc,LC),e(LC,_Me),M(Y8,_Me,null),e(Nc,pRr),e(Nc,uMe),e(uMe,_Rr),b(f,HDe,u),b(f,gr,u),M(K8,gr,null),e(gr,uRr),e(gr,qc),e(qc,bRr),e(qc,oK),e(oK,vRr),e(qc,FRr),e(qc,rK),e(rK,TRr),e(qc,MRr),e(gr,ERr),e(gr,Z8),e(Z8,CRr),e(Z8,bMe),e(bMe,wRr),e(Z8,ARr),e(gr,LRr),e(gr,Vt),M(ex,Vt,null),e(Vt,yRr),e(Vt,vMe),e(vMe,xRr),e(Vt,$Rr),e(Vt,jc),e(jc,kRr),e(jc,FMe),e(FMe,SRr),e(jc,RRr),e(jc,tK),e(tK,PRr),e(jc,BRr),e(Vt,IRr),M(yC,Vt,null),e(gr,NRr),e(gr,Gr),M(ox,Gr,null),e(Gr,qRr),e(Gr,TMe),e(TMe,jRr),e(Gr,DRr),e(Gr,_n),e(_n,GRr),e(_n,MMe),e(MMe,ORr),e(_n,VRr),e(_n,EMe),e(EMe,XRr),e(_n,zRr),e(_n,CMe),e(CMe,WRr),e(_n,QRr),e(Gr,HRr),e(Gr,Ee),e(Ee,xC),e(xC,wMe),e(wMe,URr),e(xC,JRr),e(xC,aK),e(aK,YRr),e(xC,KRr),e(Ee,ZRr),e(Ee,$C),e($C,AMe),e(AMe,ePr),e($C,oPr),e($C,nK),e(nK,rPr),e($C,tPr),e(Ee,aPr),e(Ee,kC),e(kC,LMe),e(LMe,nPr),e(kC,sPr),e(kC,sK),e(sK,lPr),e(kC,iPr),e(Ee,dPr),e(Ee,SC),e(SC,yMe),e(yMe,cPr),e(SC,fPr),e(SC,lK),e(lK,mPr),e(SC,gPr),e(Ee,hPr),e(Ee,RC),e(RC,xMe),e(xMe,pPr),e(RC,_Pr),e(RC,iK),e(iK,uPr),e(RC,bPr),e(Ee,vPr),e(Ee,PC),e(PC,$Me),e($Me,FPr),e(PC,TPr),e(PC,dK),e(dK,MPr),e(PC,EPr),e(Ee,CPr),e(Ee,BC),e(BC,kMe),e(kMe,wPr),e(BC,APr),e(BC,cK),e(cK,LPr),e(BC,yPr),e(Ee,xPr),e(Ee,IC),e(IC,SMe),e(SMe,$Pr),e(IC,kPr),e(IC,fK),e(fK,SPr),e(IC,RPr),e(Ee,PPr),e(Ee,NC),e(NC,RMe),e(RMe,BPr),e(NC,IPr),e(NC,mK),e(mK,NPr),e(NC,qPr),e(Ee,jPr),e(Ee,qC),e(qC,PMe),e(PMe,DPr),e(qC,GPr),e(qC,gK),e(gK,OPr),e(qC,VPr),e(Ee,XPr),e(Ee,jC),e(jC,BMe),e(BMe,zPr),e(jC,WPr),e(jC,hK),e(hK,QPr),e(jC,HPr),e(Ee,UPr),e(Ee,DC),e(DC,IMe),e(IMe,JPr),e(DC,YPr),e(DC,pK),e(pK,KPr),e(DC,ZPr),e(Ee,eBr),e(Ee,GC),e(GC,NMe),e(NMe,oBr),e(GC,rBr),e(GC,_K),e(_K,tBr),e(GC,aBr),e(Gr,nBr),M(OC,Gr,null),b(f,UDe,u),b(f,Dc,u),e(Dc,VC),e(VC,qMe),M(rx,qMe,null),e(Dc,sBr),e(Dc,jMe),e(jMe,lBr),b(f,JDe,u),b(f,hr,u),M(tx,hr,null),e(hr,iBr),e(hr,Gc),e(Gc,dBr),e(Gc,uK),e(uK,cBr),e(Gc,fBr),e(Gc,bK),e(bK,mBr),e(Gc,gBr),e(hr,hBr),e(hr,ax),e(ax,pBr),e(ax,DMe),e(DMe,_Br),e(ax,uBr),e(hr,bBr),e(hr,Xt),M(nx,Xt,null),e(Xt,vBr),e(Xt,GMe),e(GMe,FBr),e(Xt,TBr),e(Xt,Oc),e(Oc,MBr),e(Oc,OMe),e(OMe,EBr),e(Oc,CBr),e(Oc,vK),e(vK,wBr),e(Oc,ABr),e(Xt,LBr),M(XC,Xt,null),e(hr,yBr),e(hr,Or),M(sx,Or,null),e(Or,xBr),e(Or,VMe),e(VMe,$Br),e(Or,kBr),e(Or,un),e(un,SBr),e(un,XMe),e(XMe,RBr),e(un,PBr),e(un,zMe),e(zMe,BBr),e(un,IBr),e(un,WMe),e(WMe,NBr),e(un,qBr),e(Or,jBr),e(Or,xe),e(xe,zC),e(zC,QMe),e(QMe,DBr),e(zC,GBr),e(zC,FK),e(FK,OBr),e(zC,VBr),e(xe,XBr),e(xe,WC),e(WC,HMe),e(HMe,zBr),e(WC,WBr),e(WC,TK),e(TK,QBr),e(WC,HBr),e(xe,UBr),e(xe,QC),e(QC,UMe),e(UMe,JBr),e(QC,YBr),e(QC,MK),e(MK,KBr),e(QC,ZBr),e(xe,eIr),e(xe,HC),e(HC,JMe),e(JMe,oIr),e(HC,rIr),e(HC,EK),e(EK,tIr),e(HC,aIr),e(xe,nIr),e(xe,UC),e(UC,YMe),e(YMe,sIr),e(UC,lIr),e(UC,CK),e(CK,iIr),e(UC,dIr),e(xe,cIr),e(xe,JC),e(JC,KMe),e(KMe,fIr),e(JC,mIr),e(JC,wK),e(wK,gIr),e(JC,hIr),e(xe,pIr),e(xe,YC),e(YC,ZMe),e(ZMe,_Ir),e(YC,uIr),e(YC,AK),e(AK,bIr),e(YC,vIr),e(xe,FIr),e(xe,KC),e(KC,e4e),e(e4e,TIr),e(KC,MIr),e(KC,LK),e(LK,EIr),e(KC,CIr),e(xe,wIr),e(xe,ZC),e(ZC,o4e),e(o4e,AIr),e(ZC,LIr),e(ZC,yK),e(yK,yIr),e(ZC,xIr),e(xe,$Ir),e(xe,e5),e(e5,r4e),e(r4e,kIr),e(e5,SIr),e(e5,xK),e(xK,RIr),e(e5,PIr),e(Or,BIr),M(o5,Or,null),b(f,YDe,u),b(f,Vc,u),e(Vc,r5),e(r5,t4e),M(lx,t4e,null),e(Vc,IIr),e(Vc,a4e),e(a4e,NIr),b(f,KDe,u),b(f,pr,u),M(ix,pr,null),e(pr,qIr),e(pr,Xc),e(Xc,jIr),e(Xc,$K),e($K,DIr),e(Xc,GIr),e(Xc,kK),e(kK,OIr),e(Xc,VIr),e(pr,XIr),e(pr,dx),e(dx,zIr),e(dx,n4e),e(n4e,WIr),e(dx,QIr),e(pr,HIr),e(pr,zt),M(cx,zt,null),e(zt,UIr),e(zt,s4e),e(s4e,JIr),e(zt,YIr),e(zt,zc),e(zc,KIr),e(zc,l4e),e(l4e,ZIr),e(zc,eNr),e(zc,SK),e(SK,oNr),e(zc,rNr),e(zt,tNr),M(t5,zt,null),e(pr,aNr),e(pr,Vr),M(fx,Vr,null),e(Vr,nNr),e(Vr,i4e),e(i4e,sNr),e(Vr,lNr),e(Vr,bn),e(bn,iNr),e(bn,d4e),e(d4e,dNr),e(bn,cNr),e(bn,c4e),e(c4e,fNr),e(bn,mNr),e(bn,f4e),e(f4e,gNr),e(bn,hNr),e(Vr,pNr),e(Vr,$e),e($e,a5),e(a5,m4e),e(m4e,_Nr),e(a5,uNr),e(a5,RK),e(RK,bNr),e(a5,vNr),e($e,FNr),e($e,n5),e(n5,g4e),e(g4e,TNr),e(n5,MNr),e(n5,PK),e(PK,ENr),e(n5,CNr),e($e,wNr),e($e,s5),e(s5,h4e),e(h4e,ANr),e(s5,LNr),e(s5,BK),e(BK,yNr),e(s5,xNr),e($e,$Nr),e($e,l5),e(l5,p4e),e(p4e,kNr),e(l5,SNr),e(l5,IK),e(IK,RNr),e(l5,PNr),e($e,BNr),e($e,i5),e(i5,_4e),e(_4e,INr),e(i5,NNr),e(i5,NK),e(NK,qNr),e(i5,jNr),e($e,DNr),e($e,d5),e(d5,u4e),e(u4e,GNr),e(d5,ONr),e(d5,qK),e(qK,VNr),e(d5,XNr),e($e,zNr),e($e,c5),e(c5,b4e),e(b4e,WNr),e(c5,QNr),e(c5,jK),e(jK,HNr),e(c5,UNr),e($e,JNr),e($e,f5),e(f5,v4e),e(v4e,YNr),e(f5,KNr),e(f5,DK),e(DK,ZNr),e(f5,eqr),e($e,oqr),e($e,m5),e(m5,F4e),e(F4e,rqr),e(m5,tqr),e(m5,GK),e(GK,aqr),e(m5,nqr),e($e,sqr),e($e,g5),e(g5,T4e),e(T4e,lqr),e(g5,iqr),e(g5,OK),e(OK,dqr),e(g5,cqr),e(Vr,fqr),M(h5,Vr,null),b(f,ZDe,u),b(f,Wc,u),e(Wc,p5),e(p5,M4e),M(mx,M4e,null),e(Wc,mqr),e(Wc,E4e),e(E4e,gqr),b(f,eGe,u),b(f,_r,u),M(gx,_r,null),e(_r,hqr),e(_r,Qc),e(Qc,pqr),e(Qc,VK),e(VK,_qr),e(Qc,uqr),e(Qc,XK),e(XK,bqr),e(Qc,vqr),e(_r,Fqr),e(_r,hx),e(hx,Tqr),e(hx,C4e),e(C4e,Mqr),e(hx,Eqr),e(_r,Cqr),e(_r,Wt),M(px,Wt,null),e(Wt,wqr),e(Wt,w4e),e(w4e,Aqr),e(Wt,Lqr),e(Wt,Hc),e(Hc,yqr),e(Hc,A4e),e(A4e,xqr),e(Hc,$qr),e(Hc,zK),e(zK,kqr),e(Hc,Sqr),e(Wt,Rqr),M(_5,Wt,null),e(_r,Pqr),e(_r,Xr),M(_x,Xr,null),e(Xr,Bqr),e(Xr,L4e),e(L4e,Iqr),e(Xr,Nqr),e(Xr,vn),e(vn,qqr),e(vn,y4e),e(y4e,jqr),e(vn,Dqr),e(vn,x4e),e(x4e,Gqr),e(vn,Oqr),e(vn,$4e),e($4e,Vqr),e(vn,Xqr),e(Xr,zqr),e(Xr,ke),e(ke,u5),e(u5,k4e),e(k4e,Wqr),e(u5,Qqr),e(u5,WK),e(WK,Hqr),e(u5,Uqr),e(ke,Jqr),e(ke,b5),e(b5,S4e),e(S4e,Yqr),e(b5,Kqr),e(b5,QK),e(QK,Zqr),e(b5,ejr),e(ke,ojr),e(ke,v5),e(v5,R4e),e(R4e,rjr),e(v5,tjr),e(v5,HK),e(HK,ajr),e(v5,njr),e(ke,sjr),e(ke,F5),e(F5,P4e),e(P4e,ljr),e(F5,ijr),e(F5,UK),e(UK,djr),e(F5,cjr),e(ke,fjr),e(ke,T5),e(T5,B4e),e(B4e,mjr),e(T5,gjr),e(T5,JK),e(JK,hjr),e(T5,pjr),e(ke,_jr),e(ke,M5),e(M5,I4e),e(I4e,ujr),e(M5,bjr),e(M5,YK),e(YK,vjr),e(M5,Fjr),e(ke,Tjr),e(ke,E5),e(E5,N4e),e(N4e,Mjr),e(E5,Ejr),e(E5,KK),e(KK,Cjr),e(E5,wjr),e(ke,Ajr),e(ke,C5),e(C5,q4e),e(q4e,Ljr),e(C5,yjr),e(C5,ZK),e(ZK,xjr),e(C5,$jr),e(ke,kjr),e(ke,w5),e(w5,j4e),e(j4e,Sjr),e(w5,Rjr),e(w5,eZ),e(eZ,Pjr),e(w5,Bjr),e(ke,Ijr),e(ke,A5),e(A5,D4e),e(D4e,Njr),e(A5,qjr),e(A5,oZ),e(oZ,jjr),e(A5,Djr),e(Xr,Gjr),M(L5,Xr,null),b(f,oGe,u),b(f,Uc,u),e(Uc,y5),e(y5,G4e),M(ux,G4e,null),e(Uc,Ojr),e(Uc,O4e),e(O4e,Vjr),b(f,rGe,u),b(f,ur,u),M(bx,ur,null),e(ur,Xjr),e(ur,Jc),e(Jc,zjr),e(Jc,rZ),e(rZ,Wjr),e(Jc,Qjr),e(Jc,tZ),e(tZ,Hjr),e(Jc,Ujr),e(ur,Jjr),e(ur,vx),e(vx,Yjr),e(vx,V4e),e(V4e,Kjr),e(vx,Zjr),e(ur,eDr),e(ur,Qt),M(Fx,Qt,null),e(Qt,oDr),e(Qt,X4e),e(X4e,rDr),e(Qt,tDr),e(Qt,Yc),e(Yc,aDr),e(Yc,z4e),e(z4e,nDr),e(Yc,sDr),e(Yc,aZ),e(aZ,lDr),e(Yc,iDr),e(Qt,dDr),M(x5,Qt,null),e(ur,cDr),e(ur,zr),M(Tx,zr,null),e(zr,fDr),e(zr,W4e),e(W4e,mDr),e(zr,gDr),e(zr,Fn),e(Fn,hDr),e(Fn,Q4e),e(Q4e,pDr),e(Fn,_Dr),e(Fn,H4e),e(H4e,uDr),e(Fn,bDr),e(Fn,U4e),e(U4e,vDr),e(Fn,FDr),e(zr,TDr),e(zr,Se),e(Se,$5),e($5,J4e),e(J4e,MDr),e($5,EDr),e($5,nZ),e(nZ,CDr),e($5,wDr),e(Se,ADr),e(Se,k5),e(k5,Y4e),e(Y4e,LDr),e(k5,yDr),e(k5,sZ),e(sZ,xDr),e(k5,$Dr),e(Se,kDr),e(Se,S5),e(S5,K4e),e(K4e,SDr),e(S5,RDr),e(S5,lZ),e(lZ,PDr),e(S5,BDr),e(Se,IDr),e(Se,R5),e(R5,Z4e),e(Z4e,NDr),e(R5,qDr),e(R5,iZ),e(iZ,jDr),e(R5,DDr),e(Se,GDr),e(Se,P5),e(P5,eEe),e(eEe,ODr),e(P5,VDr),e(P5,dZ),e(dZ,XDr),e(P5,zDr),e(Se,WDr),e(Se,B5),e(B5,oEe),e(oEe,QDr),e(B5,HDr),e(B5,cZ),e(cZ,UDr),e(B5,JDr),e(Se,YDr),e(Se,I5),e(I5,rEe),e(rEe,KDr),e(I5,ZDr),e(I5,fZ),e(fZ,eGr),e(I5,oGr),e(Se,rGr),e(Se,N5),e(N5,tEe),e(tEe,tGr),e(N5,aGr),e(N5,mZ),e(mZ,nGr),e(N5,sGr),e(Se,lGr),e(Se,q5),e(q5,aEe),e(aEe,iGr),e(q5,dGr),e(q5,gZ),e(gZ,cGr),e(q5,fGr),e(Se,mGr),e(Se,j5),e(j5,nEe),e(nEe,gGr),e(j5,hGr),e(j5,hZ),e(hZ,pGr),e(j5,_Gr),e(zr,uGr),M(D5,zr,null),b(f,tGe,u),b(f,Kc,u),e(Kc,G5),e(G5,sEe),M(Mx,sEe,null),e(Kc,bGr),e(Kc,lEe),e(lEe,vGr),b(f,aGe,u),b(f,br,u),M(Ex,br,null),e(br,FGr),e(br,Zc),e(Zc,TGr),e(Zc,pZ),e(pZ,MGr),e(Zc,EGr),e(Zc,_Z),e(_Z,CGr),e(Zc,wGr),e(br,AGr),e(br,Cx),e(Cx,LGr),e(Cx,iEe),e(iEe,yGr),e(Cx,xGr),e(br,$Gr),e(br,Ht),M(wx,Ht,null),e(Ht,kGr),e(Ht,dEe),e(dEe,SGr),e(Ht,RGr),e(Ht,ef),e(ef,PGr),e(ef,cEe),e(cEe,BGr),e(ef,IGr),e(ef,uZ),e(uZ,NGr),e(ef,qGr),e(Ht,jGr),M(O5,Ht,null),e(br,DGr),e(br,Wr),M(Ax,Wr,null),e(Wr,GGr),e(Wr,fEe),e(fEe,OGr),e(Wr,VGr),e(Wr,Tn),e(Tn,XGr),e(Tn,mEe),e(mEe,zGr),e(Tn,WGr),e(Tn,gEe),e(gEe,QGr),e(Tn,HGr),e(Tn,hEe),e(hEe,UGr),e(Tn,JGr),e(Wr,YGr),e(Wr,Oe),e(Oe,V5),e(V5,pEe),e(pEe,KGr),e(V5,ZGr),e(V5,bZ),e(bZ,eOr),e(V5,oOr),e(Oe,rOr),e(Oe,X5),e(X5,_Ee),e(_Ee,tOr),e(X5,aOr),e(X5,vZ),e(vZ,nOr),e(X5,sOr),e(Oe,lOr),e(Oe,z5),e(z5,uEe),e(uEe,iOr),e(z5,dOr),e(z5,FZ),e(FZ,cOr),e(z5,fOr),e(Oe,mOr),e(Oe,W5),e(W5,bEe),e(bEe,gOr),e(W5,hOr),e(W5,TZ),e(TZ,pOr),e(W5,_Or),e(Oe,uOr),e(Oe,Q5),e(Q5,vEe),e(vEe,bOr),e(Q5,vOr),e(Q5,MZ),e(MZ,FOr),e(Q5,TOr),e(Oe,MOr),e(Oe,H5),e(H5,FEe),e(FEe,EOr),e(H5,COr),e(H5,EZ),e(EZ,wOr),e(H5,AOr),e(Oe,LOr),e(Oe,U5),e(U5,TEe),e(TEe,yOr),e(U5,xOr),e(U5,CZ),e(CZ,$Or),e(U5,kOr),e(Oe,SOr),e(Oe,J5),e(J5,MEe),e(MEe,ROr),e(J5,POr),e(J5,wZ),e(wZ,BOr),e(J5,IOr),e(Wr,NOr),M(Y5,Wr,null),b(f,nGe,u),b(f,of,u),e(of,K5),e(K5,EEe),M(Lx,EEe,null),e(of,qOr),e(of,CEe),e(CEe,jOr),b(f,sGe,u),b(f,vr,u),M(yx,vr,null),e(vr,DOr),e(vr,rf),e(rf,GOr),e(rf,AZ),e(AZ,OOr),e(rf,VOr),e(rf,LZ),e(LZ,XOr),e(rf,zOr),e(vr,WOr),e(vr,xx),e(xx,QOr),e(xx,wEe),e(wEe,HOr),e(xx,UOr),e(vr,JOr),e(vr,Ut),M($x,Ut,null),e(Ut,YOr),e(Ut,AEe),e(AEe,KOr),e(Ut,ZOr),e(Ut,tf),e(tf,eVr),e(tf,LEe),e(LEe,oVr),e(tf,rVr),e(tf,yZ),e(yZ,tVr),e(tf,aVr),e(Ut,nVr),M(Z5,Ut,null),e(vr,sVr),e(vr,Qr),M(kx,Qr,null),e(Qr,lVr),e(Qr,yEe),e(yEe,iVr),e(Qr,dVr),e(Qr,Mn),e(Mn,cVr),e(Mn,xEe),e(xEe,fVr),e(Mn,mVr),e(Mn,$Ee),e($Ee,gVr),e(Mn,hVr),e(Mn,kEe),e(kEe,pVr),e(Mn,_Vr),e(Qr,uVr),e(Qr,Ve),e(Ve,e3),e(e3,SEe),e(SEe,bVr),e(e3,vVr),e(e3,xZ),e(xZ,FVr),e(e3,TVr),e(Ve,MVr),e(Ve,o3),e(o3,REe),e(REe,EVr),e(o3,CVr),e(o3,$Z),e($Z,wVr),e(o3,AVr),e(Ve,LVr),e(Ve,r3),e(r3,PEe),e(PEe,yVr),e(r3,xVr),e(r3,kZ),e(kZ,$Vr),e(r3,kVr),e(Ve,SVr),e(Ve,t3),e(t3,BEe),e(BEe,RVr),e(t3,PVr),e(t3,SZ),e(SZ,BVr),e(t3,IVr),e(Ve,NVr),e(Ve,a3),e(a3,IEe),e(IEe,qVr),e(a3,jVr),e(a3,RZ),e(RZ,DVr),e(a3,GVr),e(Ve,OVr),e(Ve,n3),e(n3,NEe),e(NEe,VVr),e(n3,XVr),e(n3,PZ),e(PZ,zVr),e(n3,WVr),e(Ve,QVr),e(Ve,s3),e(s3,qEe),e(qEe,HVr),e(s3,UVr),e(s3,BZ),e(BZ,JVr),e(s3,YVr),e(Ve,KVr),e(Ve,l3),e(l3,jEe),e(jEe,ZVr),e(l3,eXr),e(l3,IZ),e(IZ,oXr),e(l3,rXr),e(Qr,tXr),M(i3,Qr,null),b(f,lGe,u),b(f,af,u),e(af,d3),e(d3,DEe),M(Sx,DEe,null),e(af,aXr),e(af,GEe),e(GEe,nXr),b(f,iGe,u),b(f,Fr,u),M(Rx,Fr,null),e(Fr,sXr),e(Fr,nf),e(nf,lXr),e(nf,NZ),e(NZ,iXr),e(nf,dXr),e(nf,qZ),e(qZ,cXr),e(nf,fXr),e(Fr,mXr),e(Fr,Px),e(Px,gXr),e(Px,OEe),e(OEe,hXr),e(Px,pXr),e(Fr,_Xr),e(Fr,Jt),M(Bx,Jt,null),e(Jt,uXr),e(Jt,VEe),e(VEe,bXr),e(Jt,vXr),e(Jt,sf),e(sf,FXr),e(sf,XEe),e(XEe,TXr),e(sf,MXr),e(sf,jZ),e(jZ,EXr),e(sf,CXr),e(Jt,wXr),M(c3,Jt,null),e(Fr,AXr),e(Fr,Hr),M(Ix,Hr,null),e(Hr,LXr),e(Hr,zEe),e(zEe,yXr),e(Hr,xXr),e(Hr,En),e(En,$Xr),e(En,WEe),e(WEe,kXr),e(En,SXr),e(En,QEe),e(QEe,RXr),e(En,PXr),e(En,HEe),e(HEe,BXr),e(En,IXr),e(Hr,NXr),e(Hr,UEe),e(UEe,f3),e(f3,JEe),e(JEe,qXr),e(f3,jXr),e(f3,DZ),e(DZ,DXr),e(f3,GXr),e(Hr,OXr),M(m3,Hr,null),b(f,dGe,u),b(f,lf,u),e(lf,g3),e(g3,YEe),M(Nx,YEe,null),e(lf,VXr),e(lf,KEe),e(KEe,XXr),b(f,cGe,u),b(f,Tr,u),M(qx,Tr,null),e(Tr,zXr),e(Tr,df),e(df,WXr),e(df,GZ),e(GZ,QXr),e(df,HXr),e(df,OZ),e(OZ,UXr),e(df,JXr),e(Tr,YXr),e(Tr,jx),e(jx,KXr),e(jx,ZEe),e(ZEe,ZXr),e(jx,ezr),e(Tr,ozr),e(Tr,Yt),M(Dx,Yt,null),e(Yt,rzr),e(Yt,eCe),e(eCe,tzr),e(Yt,azr),e(Yt,cf),e(cf,nzr),e(cf,oCe),e(oCe,szr),e(cf,lzr),e(cf,VZ),e(VZ,izr),e(cf,dzr),e(Yt,czr),M(h3,Yt,null),e(Tr,fzr),e(Tr,Ur),M(Gx,Ur,null),e(Ur,mzr),e(Ur,rCe),e(rCe,gzr),e(Ur,hzr),e(Ur,Cn),e(Cn,pzr),e(Cn,tCe),e(tCe,_zr),e(Cn,uzr),e(Cn,aCe),e(aCe,bzr),e(Cn,vzr),e(Cn,nCe),e(nCe,Fzr),e(Cn,Tzr),e(Ur,Mzr),e(Ur,Ox),e(Ox,p3),e(p3,sCe),e(sCe,Ezr),e(p3,Czr),e(p3,XZ),e(XZ,wzr),e(p3,Azr),e(Ox,Lzr),e(Ox,_3),e(_3,lCe),e(lCe,yzr),e(_3,xzr),e(_3,zZ),e(zZ,$zr),e(_3,kzr),e(Ur,Szr),M(u3,Ur,null),b(f,fGe,u),b(f,ff,u),e(ff,b3),e(b3,iCe),M(Vx,iCe,null),e(ff,Rzr),e(ff,dCe),e(dCe,Pzr),b(f,mGe,u),b(f,Mr,u),M(Xx,Mr,null),e(Mr,Bzr),e(Mr,mf),e(mf,Izr),e(mf,WZ),e(WZ,Nzr),e(mf,qzr),e(mf,QZ),e(QZ,jzr),e(mf,Dzr),e(Mr,Gzr),e(Mr,zx),e(zx,Ozr),e(zx,cCe),e(cCe,Vzr),e(zx,Xzr),e(Mr,zzr),e(Mr,Kt),M(Wx,Kt,null),e(Kt,Wzr),e(Kt,fCe),e(fCe,Qzr),e(Kt,Hzr),e(Kt,gf),e(gf,Uzr),e(gf,mCe),e(mCe,Jzr),e(gf,Yzr),e(gf,HZ),e(HZ,Kzr),e(gf,Zzr),e(Kt,eWr),M(v3,Kt,null),e(Mr,oWr),e(Mr,Jr),M(Qx,Jr,null),e(Jr,rWr),e(Jr,gCe),e(gCe,tWr),e(Jr,aWr),e(Jr,wn),e(wn,nWr),e(wn,hCe),e(hCe,sWr),e(wn,lWr),e(wn,pCe),e(pCe,iWr),e(wn,dWr),e(wn,_Ce),e(_Ce,cWr),e(wn,fWr),e(Jr,mWr),e(Jr,uCe),e(uCe,F3),e(F3,bCe),e(bCe,gWr),e(F3,hWr),e(F3,UZ),e(UZ,pWr),e(F3,_Wr),e(Jr,uWr),M(T3,Jr,null),gGe=!0},p(f,[u]){const Hx={};u&2&&(Hx.$$scope={dirty:u,ctx:f}),Mf.$set(Hx);const vCe={};u&2&&(vCe.$$scope={dirty:u,ctx:f}),Lg.$set(vCe);const FCe={};u&2&&(FCe.$$scope={dirty:u,ctx:f}),ih.$set(FCe);const TCe={};u&2&&(TCe.$$scope={dirty:u,ctx:f}),Gh.$set(TCe);const Ux={};u&2&&(Ux.$$scope={dirty:u,ctx:f}),Oh.$set(Ux);const MCe={};u&2&&(MCe.$$scope={dirty:u,ctx:f}),ip.$set(MCe);const An={};u&2&&(An.$$scope={dirty:u,ctx:f}),dp.$set(An);const ECe={};u&2&&(ECe.$$scope={dirty:u,ctx:f}),mp.$set(ECe);const CCe={};u&2&&(CCe.$$scope={dirty:u,ctx:f}),du.$set(CCe);const wCe={};u&2&&(wCe.$$scope={dirty:u,ctx:f}),fu.$set(wCe);const Jx={};u&2&&(Jx.$$scope={dirty:u,ctx:f}),o2.$set(Jx);const ACe={};u&2&&(ACe.$$scope={dirty:u,ctx:f}),t2.$set(ACe);const Yx={};u&2&&(Yx.$$scope={dirty:u,ctx:f}),O2.$set(Yx);const LCe={};u&2&&(LCe.$$scope={dirty:u,ctx:f}),X2.$set(LCe);const Kx={};u&2&&(Kx.$$scope={dirty:u,ctx:f}),y1.$set(Kx);const yCe={};u&2&&(yCe.$$scope={dirty:u,ctx:f}),$1.$set(yCe);const xCe={};u&2&&(xCe.$$scope={dirty:u,ctx:f}),U1.$set(xCe);const $Ce={};u&2&&($Ce.$$scope={dirty:u,ctx:f}),Y1.$set($Ce);const hf={};u&2&&(hf.$$scope={dirty:u,ctx:f}),Wb.$set(hf);const kCe={};u&2&&(kCe.$$scope={dirty:u,ctx:f}),Hb.$set(kCe);const SCe={};u&2&&(SCe.$$scope={dirty:u,ctx:f}),wv.$set(SCe);const RCe={};u&2&&(RCe.$$scope={dirty:u,ctx:f}),Lv.$set(RCe);const Zx={};u&2&&(Zx.$$scope={dirty:u,ctx:f}),Pv.$set(Zx);const PCe={};u&2&&(PCe.$$scope={dirty:u,ctx:f}),Iv.$set(PCe);const BCe={};u&2&&(BCe.$$scope={dirty:u,ctx:f}),bF.$set(BCe);const ICe={};u&2&&(ICe.$$scope={dirty:u,ctx:f}),FF.$set(ICe);const et={};u&2&&(et.$$scope={dirty:u,ctx:f}),i6.$set(et);const e$={};u&2&&(e$.$$scope={dirty:u,ctx:f}),c6.$set(e$);const NCe={};u&2&&(NCe.$$scope={dirty:u,ctx:f}),g6.$set(NCe);const o$={};u&2&&(o$.$$scope={dirty:u,ctx:f}),p6.$set(o$);const qCe={};u&2&&(qCe.$$scope={dirty:u,ctx:f}),x6.$set(qCe);const ot={};u&2&&(ot.$$scope={dirty:u,ctx:f}),k6.$set(ot);const jCe={};u&2&&(jCe.$$scope={dirty:u,ctx:f}),P6.$set(jCe);const pf={};u&2&&(pf.$$scope={dirty:u,ctx:f}),I6.$set(pf);const DCe={};u&2&&(DCe.$$scope={dirty:u,ctx:f}),Q6.$set(DCe);const GCe={};u&2&&(GCe.$$scope={dirty:u,ctx:f}),U6.$set(GCe);const L={};u&2&&(L.$$scope={dirty:u,ctx:f}),rT.$set(L);const M3={};u&2&&(M3.$$scope={dirty:u,ctx:f}),aT.$set(M3);const OCe={};u&2&&(OCe.$$scope={dirty:u,ctx:f}),pT.$set(OCe);const VCe={};u&2&&(VCe.$$scope={dirty:u,ctx:f}),uT.$set(VCe);const E3={};u&2&&(E3.$$scope={dirty:u,ctx:f}),TT.$set(E3);const XCe={};u&2&&(XCe.$$scope={dirty:u,ctx:f}),ET.$set(XCe);const zCe={};u&2&&(zCe.$$scope={dirty:u,ctx:f}),$T.$set(zCe);const C3={};u&2&&(C3.$$scope={dirty:u,ctx:f}),ST.$set(C3);const WCe={};u&2&&(WCe.$$scope={dirty:u,ctx:f}),NT.$set(WCe);const QCe={};u&2&&(QCe.$$scope={dirty:u,ctx:f}),jT.$set(QCe);const w3={};u&2&&(w3.$$scope={dirty:u,ctx:f}),VT.$set(w3);const HCe={};u&2&&(HCe.$$scope={dirty:u,ctx:f}),zT.$set(HCe);const UCe={};u&2&&(UCe.$$scope={dirty:u,ctx:f}),HT.$set(UCe);const A3={};u&2&&(A3.$$scope={dirty:u,ctx:f}),JT.$set(A3);const JCe={};u&2&&(JCe.$$scope={dirty:u,ctx:f}),r7.$set(JCe);const YCe={};u&2&&(YCe.$$scope={dirty:u,ctx:f}),a7.$set(YCe);const L3={};u&2&&(L3.$$scope={dirty:u,ctx:f}),l7.$set(L3);const KCe={};u&2&&(KCe.$$scope={dirty:u,ctx:f}),d7.$set(KCe);const ZCe={};u&2&&(ZCe.$$scope={dirty:u,ctx:f}),r9.$set(ZCe);const y3={};u&2&&(y3.$$scope={dirty:u,ctx:f}),a9.$set(y3);const e5e={};u&2&&(e5e.$$scope={dirty:u,ctx:f}),y9.$set(e5e);const o5e={};u&2&&(o5e.$$scope={dirty:u,ctx:f}),$9.$set(o5e);const x3={};u&2&&(x3.$$scope={dirty:u,ctx:f}),X9.$set(x3);const r5e={};u&2&&(r5e.$$scope={dirty:u,ctx:f}),W9.$set(r5e);const t5e={};u&2&&(t5e.$$scope={dirty:u,ctx:f}),Y9.$set(t5e);const $3={};u&2&&($3.$$scope={dirty:u,ctx:f}),Z9.$set($3);const a5e={};u&2&&(a5e.$$scope={dirty:u,ctx:f}),FM.$set(a5e);const n5e={};u&2&&(n5e.$$scope={dirty:u,ctx:f}),MM.$set(n5e);const k3={};u&2&&(k3.$$scope={dirty:u,ctx:f}),RM.$set(k3);const s5e={};u&2&&(s5e.$$scope={dirty:u,ctx:f}),BM.$set(s5e);const l5e={};u&2&&(l5e.$$scope={dirty:u,ctx:f}),i4.$set(l5e);const S3={};u&2&&(S3.$$scope={dirty:u,ctx:f}),c4.$set(S3);const i5e={};u&2&&(i5e.$$scope={dirty:u,ctx:f}),y4.$set(i5e);const d5e={};u&2&&(d5e.$$scope={dirty:u,ctx:f}),$4.$set(d5e);const R3={};u&2&&(R3.$$scope={dirty:u,ctx:f}),R4.$set(R3);const c5e={};u&2&&(c5e.$$scope={dirty:u,ctx:f}),B4.$set(c5e);const f5e={};u&2&&(f5e.$$scope={dirty:u,ctx:f}),N4.$set(f5e);const P3={};u&2&&(P3.$$scope={dirty:u,ctx:f}),j4.$set(P3);const m5e={};u&2&&(m5e.$$scope={dirty:u,ctx:f}),sE.$set(m5e);const g5e={};u&2&&(g5e.$$scope={dirty:u,ctx:f}),iE.$set(g5e);const B3={};u&2&&(B3.$$scope={dirty:u,ctx:f}),xE.$set(B3);const h5e={};u&2&&(h5e.$$scope={dirty:u,ctx:f}),kE.$set(h5e);const p5e={};u&2&&(p5e.$$scope={dirty:u,ctx:f}),RE.$set(p5e);const I3={};u&2&&(I3.$$scope={dirty:u,ctx:f}),BE.$set(I3);const _5e={};u&2&&(_5e.$$scope={dirty:u,ctx:f}),NE.$set(_5e);const u5e={};u&2&&(u5e.$$scope={dirty:u,ctx:f}),jE.$set(u5e);const N3={};u&2&&(N3.$$scope={dirty:u,ctx:f}),gC.$set(N3);const b5e={};u&2&&(b5e.$$scope={dirty:u,ctx:f}),pC.$set(b5e);const v5e={};u&2&&(v5e.$$scope={dirty:u,ctx:f}),AC.$set(v5e);const q3={};u&2&&(q3.$$scope={dirty:u,ctx:f}),yC.$set(q3);const F5e={};u&2&&(F5e.$$scope={dirty:u,ctx:f}),OC.$set(F5e);const T5e={};u&2&&(T5e.$$scope={dirty:u,ctx:f}),XC.$set(T5e);const j3={};u&2&&(j3.$$scope={dirty:u,ctx:f}),o5.$set(j3);const M5e={};u&2&&(M5e.$$scope={dirty:u,ctx:f}),t5.$set(M5e);const E5e={};u&2&&(E5e.$$scope={dirty:u,ctx:f}),h5.$set(E5e);const D3={};u&2&&(D3.$$scope={dirty:u,ctx:f}),_5.$set(D3);const C5e={};u&2&&(C5e.$$scope={dirty:u,ctx:f}),L5.$set(C5e);const w5e={};u&2&&(w5e.$$scope={dirty:u,ctx:f}),x5.$set(w5e);const G3={};u&2&&(G3.$$scope={dirty:u,ctx:f}),D5.$set(G3);const A5e={};u&2&&(A5e.$$scope={dirty:u,ctx:f}),O5.$set(A5e);const L5e={};u&2&&(L5e.$$scope={dirty:u,ctx:f}),Y5.$set(L5e);const O3={};u&2&&(O3.$$scope={dirty:u,ctx:f}),Z5.$set(O3);const y5e={};u&2&&(y5e.$$scope={dirty:u,ctx:f}),i3.$set(y5e);const x5e={};u&2&&(x5e.$$scope={dirty:u,ctx:f}),c3.$set(x5e);const V3={};u&2&&(V3.$$scope={dirty:u,ctx:f}),m3.$set(V3);const $5e={};u&2&&($5e.$$scope={dirty:u,ctx:f}),h3.$set($5e);const k5e={};u&2&&(k5e.$$scope={dirty:u,ctx:f}),u3.$set(k5e);const X3={};u&2&&(X3.$$scope={dirty:u,ctx:f}),v3.$set(X3);const S5e={};u&2&&(S5e.$$scope={dirty:u,ctx:f}),T3.$set(S5e)},i(f){gGe||(E(d.$$.fragment,f),E(Ca.$$.fragment,f),E(Vw.$$.fragment,f),E(Xw.$$.fragment,f),E(Mf.$$.fragment,f),E(zw.$$.fragment,f),E(Ww.$$.fragment,f),E(Uw.$$.fragment,f),E(Lg.$$.fragment,f),E(Jw.$$.fragment,f),E(Yw.$$.fragment,f),E(Kw.$$.fragment,f),E(oA.$$.fragment,f),E(ih.$$.fragment,f),E(rA.$$.fragment,f),E(tA.$$.fragment,f),E(aA.$$.fragment,f),E(lA.$$.fragment,f),E(Gh.$$.fragment,f),E(Oh.$$.fragment,f),E(iA.$$.fragment,f),E(dA.$$.fragment,f),E(cA.$$.fragment,f),E(gA.$$.fragment,f),E(ip.$$.fragment,f),E(dp.$$.fragment,f),E(hA.$$.fragment,f),E(pA.$$.fragment,f),E(_A.$$.fragment,f),E(bA.$$.fragment,f),E(mp.$$.fragment,f),E(vA.$$.fragment,f),E(du.$$.fragment,f),E(FA.$$.fragment,f),E(TA.$$.fragment,f),E(EA.$$.fragment,f),E(fu.$$.fragment,f),E(CA.$$.fragment,f),E(o2.$$.fragment,f),E(wA.$$.fragment,f),E(AA.$$.fragment,f),E(yA.$$.fragment,f),E(t2.$$.fragment,f),E(xA.$$.fragment,f),E(O2.$$.fragment,f),E($A.$$.fragment,f),E(kA.$$.fragment,f),E(RA.$$.fragment,f),E(X2.$$.fragment,f),E(PA.$$.fragment,f),E(y1.$$.fragment,f),E(BA.$$.fragment,f),E(IA.$$.fragment,f),E(qA.$$.fragment,f),E($1.$$.fragment,f),E(jA.$$.fragment,f),E(U1.$$.fragment,f),E(DA.$$.fragment,f),E(GA.$$.fragment,f),E(VA.$$.fragment,f),E(Y1.$$.fragment,f),E(XA.$$.fragment,f),E(Wb.$$.fragment,f),E(zA.$$.fragment,f),E(WA.$$.fragment,f),E(HA.$$.fragment,f),E(Hb.$$.fragment,f),E(UA.$$.fragment,f),E(wv.$$.fragment,f),E(JA.$$.fragment,f),E(YA.$$.fragment,f),E(ZA.$$.fragment,f),E(Lv.$$.fragment,f),E(eL.$$.fragment,f),E(Pv.$$.fragment,f),E(oL.$$.fragment,f),E(rL.$$.fragment,f),E(aL.$$.fragment,f),E(Iv.$$.fragment,f),E(nL.$$.fragment,f),E(bF.$$.fragment,f),E(sL.$$.fragment,f),E(lL.$$.fragment,f),E(dL.$$.fragment,f),E(FF.$$.fragment,f),E(cL.$$.fragment,f),E(i6.$$.fragment,f),E(fL.$$.fragment,f),E(mL.$$.fragment,f),E(hL.$$.fragment,f),E(c6.$$.fragment,f),E(pL.$$.fragment,f),E(g6.$$.fragment,f),E(_L.$$.fragment,f),E(uL.$$.fragment,f),E(vL.$$.fragment,f),E(p6.$$.fragment,f),E(FL.$$.fragment,f),E(x6.$$.fragment,f),E(TL.$$.fragment,f),E(ML.$$.fragment,f),E(CL.$$.fragment,f),E(k6.$$.fragment,f),E(wL.$$.fragment,f),E(P6.$$.fragment,f),E(AL.$$.fragment,f),E(LL.$$.fragment,f),E(xL.$$.fragment,f),E(I6.$$.fragment,f),E($L.$$.fragment,f),E(Q6.$$.fragment,f),E(kL.$$.fragment,f),E(SL.$$.fragment,f),E(PL.$$.fragment,f),E(U6.$$.fragment,f),E(BL.$$.fragment,f),E(rT.$$.fragment,f),E(IL.$$.fragment,f),E(NL.$$.fragment,f),E(jL.$$.fragment,f),E(aT.$$.fragment,f),E(DL.$$.fragment,f),E(pT.$$.fragment,f),E(GL.$$.fragment,f),E(OL.$$.fragment,f),E(XL.$$.fragment,f),E(uT.$$.fragment,f),E(zL.$$.fragment,f),E(TT.$$.fragment,f),E(QL.$$.fragment,f),E(HL.$$.fragment,f),E(JL.$$.fragment,f),E(ET.$$.fragment,f),E(YL.$$.fragment,f),E($T.$$.fragment,f),E(KL.$$.fragment,f),E(ZL.$$.fragment,f),E(oy.$$.fragment,f),E(ST.$$.fragment,f),E(ry.$$.fragment,f),E(NT.$$.fragment,f),E(ty.$$.fragment,f),E(ay.$$.fragment,f),E(sy.$$.fragment,f),E(jT.$$.fragment,f),E(ly.$$.fragment,f),E(VT.$$.fragment,f),E(dy.$$.fragment,f),E(cy.$$.fragment,f),E(my.$$.fragment,f),E(zT.$$.fragment,f),E(gy.$$.fragment,f),E(HT.$$.fragment,f),E(hy.$$.fragment,f),E(py.$$.fragment,f),E(uy.$$.fragment,f),E(JT.$$.fragment,f),E(by.$$.fragment,f),E(r7.$$.fragment,f),E(vy.$$.fragment,f),E(Fy.$$.fragment,f),E(My.$$.fragment,f),E(a7.$$.fragment,f),E(Ey.$$.fragment,f),E(l7.$$.fragment,f),E(Cy.$$.fragment,f),E(wy.$$.fragment,f),E(Ly.$$.fragment,f),E(d7.$$.fragment,f),E(yy.$$.fragment,f),E(r9.$$.fragment,f),E(xy.$$.fragment,f),E($y.$$.fragment,f),E(Sy.$$.fragment,f),E(a9.$$.fragment,f),E(Ry.$$.fragment,f),E(y9.$$.fragment,f),E(Py.$$.fragment,f),E(By.$$.fragment,f),E(Ny.$$.fragment,f),E($9.$$.fragment,f),E(qy.$$.fragment,f),E(X9.$$.fragment,f),E(jy.$$.fragment,f),E(Dy.$$.fragment,f),E(Oy.$$.fragment,f),E(W9.$$.fragment,f),E(Vy.$$.fragment,f),E(Y9.$$.fragment,f),E(Xy.$$.fragment,f),E(zy.$$.fragment,f),E(Qy.$$.fragment,f),E(Z9.$$.fragment,f),E(Hy.$$.fragment,f),E(FM.$$.fragment,f),E(Uy.$$.fragment,f),E(Jy.$$.fragment,f),E(Ky.$$.fragment,f),E(MM.$$.fragment,f),E(Zy.$$.fragment,f),E(RM.$$.fragment,f),E(e8.$$.fragment,f),E(o8.$$.fragment,f),E(t8.$$.fragment,f),E(BM.$$.fragment,f),E(a8.$$.fragment,f),E(i4.$$.fragment,f),E(n8.$$.fragment,f),E(s8.$$.fragment,f),E(i8.$$.fragment,f),E(c4.$$.fragment,f),E(d8.$$.fragment,f),E(y4.$$.fragment,f),E(c8.$$.fragment,f),E(f8.$$.fragment,f),E(g8.$$.fragment,f),E($4.$$.fragment,f),E(h8.$$.fragment,f),E(R4.$$.fragment,f),E(_8.$$.fragment,f),E(u8.$$.fragment,f),E(v8.$$.fragment,f),E(B4.$$.fragment,f),E(F8.$$.fragment,f),E(N4.$$.fragment,f),E(T8.$$.fragment,f),E(M8.$$.fragment,f),E(C8.$$.fragment,f),E(j4.$$.fragment,f),E(w8.$$.fragment,f),E(sE.$$.fragment,f),E(A8.$$.fragment,f),E(L8.$$.fragment,f),E(x8.$$.fragment,f),E(iE.$$.fragment,f),E($8.$$.fragment,f),E(xE.$$.fragment,f),E(k8.$$.fragment,f),E(S8.$$.fragment,f),E(P8.$$.fragment,f),E(kE.$$.fragment,f),E(B8.$$.fragment,f),E(RE.$$.fragment,f),E(I8.$$.fragment,f),E(N8.$$.fragment,f),E(j8.$$.fragment,f),E(BE.$$.fragment,f),E(D8.$$.fragment,f),E(NE.$$.fragment,f),E(G8.$$.fragment,f),E(O8.$$.fragment,f),E(X8.$$.fragment,f),E(jE.$$.fragment,f),E(z8.$$.fragment,f),E(gC.$$.fragment,f),E(W8.$$.fragment,f),E(Q8.$$.fragment,f),E(U8.$$.fragment,f),E(pC.$$.fragment,f),E(J8.$$.fragment,f),E(AC.$$.fragment,f),E(Y8.$$.fragment,f),E(K8.$$.fragment,f),E(ex.$$.fragment,f),E(yC.$$.fragment,f),E(ox.$$.fragment,f),E(OC.$$.fragment,f),E(rx.$$.fragment,f),E(tx.$$.fragment,f),E(nx.$$.fragment,f),E(XC.$$.fragment,f),E(sx.$$.fragment,f),E(o5.$$.fragment,f),E(lx.$$.fragment,f),E(ix.$$.fragment,f),E(cx.$$.fragment,f),E(t5.$$.fragment,f),E(fx.$$.fragment,f),E(h5.$$.fragment,f),E(mx.$$.fragment,f),E(gx.$$.fragment,f),E(px.$$.fragment,f),E(_5.$$.fragment,f),E(_x.$$.fragment,f),E(L5.$$.fragment,f),E(ux.$$.fragment,f),E(bx.$$.fragment,f),E(Fx.$$.fragment,f),E(x5.$$.fragment,f),E(Tx.$$.fragment,f),E(D5.$$.fragment,f),E(Mx.$$.fragment,f),E(Ex.$$.fragment,f),E(wx.$$.fragment,f),E(O5.$$.fragment,f),E(Ax.$$.fragment,f),E(Y5.$$.fragment,f),E(Lx.$$.fragment,f),E(yx.$$.fragment,f),E($x.$$.fragment,f),E(Z5.$$.fragment,f),E(kx.$$.fragment,f),E(i3.$$.fragment,f),E(Sx.$$.fragment,f),E(Rx.$$.fragment,f),E(Bx.$$.fragment,f),E(c3.$$.fragment,f),E(Ix.$$.fragment,f),E(m3.$$.fragment,f),E(Nx.$$.fragment,f),E(qx.$$.fragment,f),E(Dx.$$.fragment,f),E(h3.$$.fragment,f),E(Gx.$$.fragment,f),E(u3.$$.fragment,f),E(Vx.$$.fragment,f),E(Xx.$$.fragment,f),E(Wx.$$.fragment,f),E(v3.$$.fragment,f),E(Qx.$$.fragment,f),E(T3.$$.fragment,f),gGe=!0)},o(f){C(d.$$.fragment,f),C(Ca.$$.fragment,f),C(Vw.$$.fragment,f),C(Xw.$$.fragment,f),C(Mf.$$.fragment,f),C(zw.$$.fragment,f),C(Ww.$$.fragment,f),C(Uw.$$.fragment,f),C(Lg.$$.fragment,f),C(Jw.$$.fragment,f),C(Yw.$$.fragment,f),C(Kw.$$.fragment,f),C(oA.$$.fragment,f),C(ih.$$.fragment,f),C(rA.$$.fragment,f),C(tA.$$.fragment,f),C(aA.$$.fragment,f),C(lA.$$.fragment,f),C(Gh.$$.fragment,f),C(Oh.$$.fragment,f),C(iA.$$.fragment,f),C(dA.$$.fragment,f),C(cA.$$.fragment,f),C(gA.$$.fragment,f),C(ip.$$.fragment,f),C(dp.$$.fragment,f),C(hA.$$.fragment,f),C(pA.$$.fragment,f),C(_A.$$.fragment,f),C(bA.$$.fragment,f),C(mp.$$.fragment,f),C(vA.$$.fragment,f),C(du.$$.fragment,f),C(FA.$$.fragment,f),C(TA.$$.fragment,f),C(EA.$$.fragment,f),C(fu.$$.fragment,f),C(CA.$$.fragment,f),C(o2.$$.fragment,f),C(wA.$$.fragment,f),C(AA.$$.fragment,f),C(yA.$$.fragment,f),C(t2.$$.fragment,f),C(xA.$$.fragment,f),C(O2.$$.fragment,f),C($A.$$.fragment,f),C(kA.$$.fragment,f),C(RA.$$.fragment,f),C(X2.$$.fragment,f),C(PA.$$.fragment,f),C(y1.$$.fragment,f),C(BA.$$.fragment,f),C(IA.$$.fragment,f),C(qA.$$.fragment,f),C($1.$$.fragment,f),C(jA.$$.fragment,f),C(U1.$$.fragment,f),C(DA.$$.fragment,f),C(GA.$$.fragment,f),C(VA.$$.fragment,f),C(Y1.$$.fragment,f),C(XA.$$.fragment,f),C(Wb.$$.fragment,f),C(zA.$$.fragment,f),C(WA.$$.fragment,f),C(HA.$$.fragment,f),C(Hb.$$.fragment,f),C(UA.$$.fragment,f),C(wv.$$.fragment,f),C(JA.$$.fragment,f),C(YA.$$.fragment,f),C(ZA.$$.fragment,f),C(Lv.$$.fragment,f),C(eL.$$.fragment,f),C(Pv.$$.fragment,f),C(oL.$$.fragment,f),C(rL.$$.fragment,f),C(aL.$$.fragment,f),C(Iv.$$.fragment,f),C(nL.$$.fragment,f),C(bF.$$.fragment,f),C(sL.$$.fragment,f),C(lL.$$.fragment,f),C(dL.$$.fragment,f),C(FF.$$.fragment,f),C(cL.$$.fragment,f),C(i6.$$.fragment,f),C(fL.$$.fragment,f),C(mL.$$.fragment,f),C(hL.$$.fragment,f),C(c6.$$.fragment,f),C(pL.$$.fragment,f),C(g6.$$.fragment,f),C(_L.$$.fragment,f),C(uL.$$.fragment,f),C(vL.$$.fragment,f),C(p6.$$.fragment,f),C(FL.$$.fragment,f),C(x6.$$.fragment,f),C(TL.$$.fragment,f),C(ML.$$.fragment,f),C(CL.$$.fragment,f),C(k6.$$.fragment,f),C(wL.$$.fragment,f),C(P6.$$.fragment,f),C(AL.$$.fragment,f),C(LL.$$.fragment,f),C(xL.$$.fragment,f),C(I6.$$.fragment,f),C($L.$$.fragment,f),C(Q6.$$.fragment,f),C(kL.$$.fragment,f),C(SL.$$.fragment,f),C(PL.$$.fragment,f),C(U6.$$.fragment,f),C(BL.$$.fragment,f),C(rT.$$.fragment,f),C(IL.$$.fragment,f),C(NL.$$.fragment,f),C(jL.$$.fragment,f),C(aT.$$.fragment,f),C(DL.$$.fragment,f),C(pT.$$.fragment,f),C(GL.$$.fragment,f),C(OL.$$.fragment,f),C(XL.$$.fragment,f),C(uT.$$.fragment,f),C(zL.$$.fragment,f),C(TT.$$.fragment,f),C(QL.$$.fragment,f),C(HL.$$.fragment,f),C(JL.$$.fragment,f),C(ET.$$.fragment,f),C(YL.$$.fragment,f),C($T.$$.fragment,f),C(KL.$$.fragment,f),C(ZL.$$.fragment,f),C(oy.$$.fragment,f),C(ST.$$.fragment,f),C(ry.$$.fragment,f),C(NT.$$.fragment,f),C(ty.$$.fragment,f),C(ay.$$.fragment,f),C(sy.$$.fragment,f),C(jT.$$.fragment,f),C(ly.$$.fragment,f),C(VT.$$.fragment,f),C(dy.$$.fragment,f),C(cy.$$.fragment,f),C(my.$$.fragment,f),C(zT.$$.fragment,f),C(gy.$$.fragment,f),C(HT.$$.fragment,f),C(hy.$$.fragment,f),C(py.$$.fragment,f),C(uy.$$.fragment,f),C(JT.$$.fragment,f),C(by.$$.fragment,f),C(r7.$$.fragment,f),C(vy.$$.fragment,f),C(Fy.$$.fragment,f),C(My.$$.fragment,f),C(a7.$$.fragment,f),C(Ey.$$.fragment,f),C(l7.$$.fragment,f),C(Cy.$$.fragment,f),C(wy.$$.fragment,f),C(Ly.$$.fragment,f),C(d7.$$.fragment,f),C(yy.$$.fragment,f),C(r9.$$.fragment,f),C(xy.$$.fragment,f),C($y.$$.fragment,f),C(Sy.$$.fragment,f),C(a9.$$.fragment,f),C(Ry.$$.fragment,f),C(y9.$$.fragment,f),C(Py.$$.fragment,f),C(By.$$.fragment,f),C(Ny.$$.fragment,f),C($9.$$.fragment,f),C(qy.$$.fragment,f),C(X9.$$.fragment,f),C(jy.$$.fragment,f),C(Dy.$$.fragment,f),C(Oy.$$.fragment,f),C(W9.$$.fragment,f),C(Vy.$$.fragment,f),C(Y9.$$.fragment,f),C(Xy.$$.fragment,f),C(zy.$$.fragment,f),C(Qy.$$.fragment,f),C(Z9.$$.fragment,f),C(Hy.$$.fragment,f),C(FM.$$.fragment,f),C(Uy.$$.fragment,f),C(Jy.$$.fragment,f),C(Ky.$$.fragment,f),C(MM.$$.fragment,f),C(Zy.$$.fragment,f),C(RM.$$.fragment,f),C(e8.$$.fragment,f),C(o8.$$.fragment,f),C(t8.$$.fragment,f),C(BM.$$.fragment,f),C(a8.$$.fragment,f),C(i4.$$.fragment,f),C(n8.$$.fragment,f),C(s8.$$.fragment,f),C(i8.$$.fragment,f),C(c4.$$.fragment,f),C(d8.$$.fragment,f),C(y4.$$.fragment,f),C(c8.$$.fragment,f),C(f8.$$.fragment,f),C(g8.$$.fragment,f),C($4.$$.fragment,f),C(h8.$$.fragment,f),C(R4.$$.fragment,f),C(_8.$$.fragment,f),C(u8.$$.fragment,f),C(v8.$$.fragment,f),C(B4.$$.fragment,f),C(F8.$$.fragment,f),C(N4.$$.fragment,f),C(T8.$$.fragment,f),C(M8.$$.fragment,f),C(C8.$$.fragment,f),C(j4.$$.fragment,f),C(w8.$$.fragment,f),C(sE.$$.fragment,f),C(A8.$$.fragment,f),C(L8.$$.fragment,f),C(x8.$$.fragment,f),C(iE.$$.fragment,f),C($8.$$.fragment,f),C(xE.$$.fragment,f),C(k8.$$.fragment,f),C(S8.$$.fragment,f),C(P8.$$.fragment,f),C(kE.$$.fragment,f),C(B8.$$.fragment,f),C(RE.$$.fragment,f),C(I8.$$.fragment,f),C(N8.$$.fragment,f),C(j8.$$.fragment,f),C(BE.$$.fragment,f),C(D8.$$.fragment,f),C(NE.$$.fragment,f),C(G8.$$.fragment,f),C(O8.$$.fragment,f),C(X8.$$.fragment,f),C(jE.$$.fragment,f),C(z8.$$.fragment,f),C(gC.$$.fragment,f),C(W8.$$.fragment,f),C(Q8.$$.fragment,f),C(U8.$$.fragment,f),C(pC.$$.fragment,f),C(J8.$$.fragment,f),C(AC.$$.fragment,f),C(Y8.$$.fragment,f),C(K8.$$.fragment,f),C(ex.$$.fragment,f),C(yC.$$.fragment,f),C(ox.$$.fragment,f),C(OC.$$.fragment,f),C(rx.$$.fragment,f),C(tx.$$.fragment,f),C(nx.$$.fragment,f),C(XC.$$.fragment,f),C(sx.$$.fragment,f),C(o5.$$.fragment,f),C(lx.$$.fragment,f),C(ix.$$.fragment,f),C(cx.$$.fragment,f),C(t5.$$.fragment,f),C(fx.$$.fragment,f),C(h5.$$.fragment,f),C(mx.$$.fragment,f),C(gx.$$.fragment,f),C(px.$$.fragment,f),C(_5.$$.fragment,f),C(_x.$$.fragment,f),C(L5.$$.fragment,f),C(ux.$$.fragment,f),C(bx.$$.fragment,f),C(Fx.$$.fragment,f),C(x5.$$.fragment,f),C(Tx.$$.fragment,f),C(D5.$$.fragment,f),C(Mx.$$.fragment,f),C(Ex.$$.fragment,f),C(wx.$$.fragment,f),C(O5.$$.fragment,f),C(Ax.$$.fragment,f),C(Y5.$$.fragment,f),C(Lx.$$.fragment,f),C(yx.$$.fragment,f),C($x.$$.fragment,f),C(Z5.$$.fragment,f),C(kx.$$.fragment,f),C(i3.$$.fragment,f),C(Sx.$$.fragment,f),C(Rx.$$.fragment,f),C(Bx.$$.fragment,f),C(c3.$$.fragment,f),C(Ix.$$.fragment,f),C(m3.$$.fragment,f),C(Nx.$$.fragment,f),C(qx.$$.fragment,f),C(Dx.$$.fragment,f),C(h3.$$.fragment,f),C(Gx.$$.fragment,f),C(u3.$$.fragment,f),C(Vx.$$.fragment,f),C(Xx.$$.fragment,f),C(Wx.$$.fragment,f),C(v3.$$.fragment,f),C(Qx.$$.fragment,f),C(T3.$$.fragment,f),gGe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(uf),f&&t(rt),f&&t(Ge),f&&t(We),f&&t(vf),w(Ca,f),f&&t(Qe),f&&t(Ae),f&&t(Eo),f&&t(wa),f&&t(cje),f&&t(Fi),w(Vw),f&&t(fje),f&&t(kn),f&&t(mje),w(Xw,f),f&&t(gje),f&&t(hk),f&&t(hje),w(Mf,f),f&&t(pje),f&&t(Ti),w(zw),f&&t(_je),f&&t(Co),w(Ww),w(Uw),w(Lg),w(Jw),f&&t(uje),f&&t(Ei),w(Yw),f&&t(bje),f&&t(wo),w(Kw),w(oA),w(ih),w(rA),f&&t(vje),f&&t(Ci),w(tA),f&&t(Fje),f&&t(Ao),w(aA),w(lA),w(Gh),w(Oh),w(iA),f&&t(Tje),f&&t(wi),w(dA),f&&t(Mje),f&&t(Lo),w(cA),w(gA),w(ip),w(dp),w(hA),f&&t(Eje),f&&t(Li),w(pA),f&&t(Cje),f&&t(yo),w(_A),w(bA),w(mp),w(vA),w(du),f&&t(wje),f&&t($i),w(FA),f&&t(Aje),f&&t(xo),w(TA),w(EA),w(fu),w(CA),w(o2),f&&t(Lje),f&&t(Ri),w(wA),f&&t(yje),f&&t($o),w(AA),w(yA),w(t2),w(xA),w(O2),f&&t(xje),f&&t(Ii),w($A),f&&t($je),f&&t(ko),w(kA),w(RA),w(X2),w(PA),w(y1),f&&t(kje),f&&t(ji),w(BA),f&&t(Sje),f&&t(So),w(IA),w(qA),w($1),w(jA),w(U1),f&&t(Rje),f&&t(Oi),w(DA),f&&t(Pje),f&&t(Ro),w(GA),w(VA),w(Y1),w(XA),w(Wb),f&&t(Bje),f&&t(zi),w(zA),f&&t(Ije),f&&t(Po),w(WA),w(HA),w(Hb),w(UA),w(wv),f&&t(Nje),f&&t(Hi),w(JA),f&&t(qje),f&&t(Bo),w(YA),w(ZA),w(Lv),w(eL),w(Pv),f&&t(jje),f&&t(Yi),w(oL),f&&t(Dje),f&&t(Io),w(rL),w(aL),w(Iv),w(nL),w(bF),f&&t(Gje),f&&t(ed),w(sL),f&&t(Oje),f&&t(No),w(lL),w(dL),w(FF),w(cL),w(i6),f&&t(Vje),f&&t(td),w(fL),f&&t(Xje),f&&t(qo),w(mL),w(hL),w(c6),w(pL),w(g6),f&&t(zje),f&&t(sd),w(_L),f&&t(Wje),f&&t(jo),w(uL),w(vL),w(p6),w(FL),w(x6),f&&t(Qje),f&&t(dd),w(TL),f&&t(Hje),f&&t(Do),w(ML),w(CL),w(k6),w(wL),w(P6),f&&t(Uje),f&&t(md),w(AL),f&&t(Jje),f&&t(Go),w(LL),w(xL),w(I6),w($L),w(Q6),f&&t(Yje),f&&t(pd),w(kL),f&&t(Kje),f&&t(Oo),w(SL),w(PL),w(U6),w(BL),w(rT),f&&t(Zje),f&&t(bd),w(IL),f&&t(eDe),f&&t(Vo),w(NL),w(jL),w(aT),w(DL),w(pT),f&&t(oDe),f&&t(Td),w(GL),f&&t(rDe),f&&t(Xo),w(OL),w(XL),w(uT),w(zL),w(TT),f&&t(tDe),f&&t(Cd),w(QL),f&&t(aDe),f&&t(zo),w(HL),w(JL),w(ET),w(YL),w($T),f&&t(nDe),f&&t(Ld),w(KL),f&&t(sDe),f&&t(Wo),w(ZL),w(oy),w(ST),w(ry),w(NT),f&&t(lDe),f&&t(kd),w(ty),f&&t(iDe),f&&t(Qo),w(ay),w(sy),w(jT),w(ly),w(VT),f&&t(dDe),f&&t(Pd),w(dy),f&&t(cDe),f&&t(Ho),w(cy),w(my),w(zT),w(gy),w(HT),f&&t(fDe),f&&t(Nd),w(hy),f&&t(mDe),f&&t(Uo),w(py),w(uy),w(JT),w(by),w(r7),f&&t(gDe),f&&t(Dd),w(vy),f&&t(hDe),f&&t(Jo),w(Fy),w(My),w(a7),w(Ey),w(l7),f&&t(pDe),f&&t(Vd),w(Cy),f&&t(_De),f&&t(Yo),w(wy),w(Ly),w(d7),w(yy),w(r9),f&&t(uDe),f&&t(Wd),w(xy),f&&t(bDe),f&&t(Ko),w($y),w(Sy),w(a9),w(Ry),w(y9),f&&t(vDe),f&&t(Ud),w(Py),f&&t(FDe),f&&t(Zo),w(By),w(Ny),w($9),w(qy),w(X9),f&&t(TDe),f&&t(Kd),w(jy),f&&t(MDe),f&&t(er),w(Dy),w(Oy),w(W9),w(Vy),w(Y9),f&&t(EDe),f&&t(oc),w(Xy),f&&t(CDe),f&&t(or),w(zy),w(Qy),w(Z9),w(Hy),w(FM),f&&t(wDe),f&&t(ac),w(Uy),f&&t(ADe),f&&t(rr),w(Jy),w(Ky),w(MM),w(Zy),w(RM),f&&t(LDe),f&&t(lc),w(e8),f&&t(yDe),f&&t(tr),w(o8),w(t8),w(BM),w(a8),w(i4),f&&t(xDe),f&&t(cc),w(n8),f&&t($De),f&&t(ar),w(s8),w(i8),w(c4),w(d8),w(y4),f&&t(kDe),f&&t(gc),w(c8),f&&t(SDe),f&&t(nr),w(f8),w(g8),w($4),w(h8),w(R4),f&&t(RDe),f&&t(_c),w(_8),f&&t(PDe),f&&t(sr),w(u8),w(v8),w(B4),w(F8),w(N4),f&&t(BDe),f&&t(vc),w(T8),f&&t(IDe),f&&t(lr),w(M8),w(C8),w(j4),w(w8),w(sE),f&&t(NDe),f&&t(Mc),w(A8),f&&t(qDe),f&&t(ir),w(L8),w(x8),w(iE),w($8),w(xE),f&&t(jDe),f&&t(wc),w(k8),f&&t(DDe),f&&t(dr),w(S8),w(P8),w(kE),w(B8),w(RE),f&&t(GDe),f&&t(yc),w(I8),f&&t(ODe),f&&t(cr),w(N8),w(j8),w(BE),w(D8),w(NE),f&&t(VDe),f&&t(kc),w(G8),f&&t(XDe),f&&t(fr),w(O8),w(X8),w(jE),w(z8),w(gC),f&&t(zDe),f&&t(Pc),w(W8),f&&t(WDe),f&&t(mr),w(Q8),w(U8),w(pC),w(J8),w(AC),f&&t(QDe),f&&t(Nc),w(Y8),f&&t(HDe),f&&t(gr),w(K8),w(ex),w(yC),w(ox),w(OC),f&&t(UDe),f&&t(Dc),w(rx),f&&t(JDe),f&&t(hr),w(tx),w(nx),w(XC),w(sx),w(o5),f&&t(YDe),f&&t(Vc),w(lx),f&&t(KDe),f&&t(pr),w(ix),w(cx),w(t5),w(fx),w(h5),f&&t(ZDe),f&&t(Wc),w(mx),f&&t(eGe),f&&t(_r),w(gx),w(px),w(_5),w(_x),w(L5),f&&t(oGe),f&&t(Uc),w(ux),f&&t(rGe),f&&t(ur),w(bx),w(Fx),w(x5),w(Tx),w(D5),f&&t(tGe),f&&t(Kc),w(Mx),f&&t(aGe),f&&t(br),w(Ex),w(wx),w(O5),w(Ax),w(Y5),f&&t(nGe),f&&t(of),w(Lx),f&&t(sGe),f&&t(vr),w(yx),w($x),w(Z5),w(kx),w(i3),f&&t(lGe),f&&t(af),w(Sx),f&&t(iGe),f&&t(Fr),w(Rx),w(Bx),w(c3),w(Ix),w(m3),f&&t(dGe),f&&t(lf),w(Nx),f&&t(cGe),f&&t(Tr),w(qx),w(Dx),w(h3),w(Gx),w(u3),f&&t(fGe),f&&t(ff),w(Vx),f&&t(mGe),f&&t(Mr),w(Xx),w(Wx),w(v3),w(Qx),w(T3)}}}const kBt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function SBt(y){return SRt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class jBt extends yRt{constructor(g){super();xRt(this,g,SBt,$Bt,$Rt,{})}}export{jBt as default,kBt as metadata};
