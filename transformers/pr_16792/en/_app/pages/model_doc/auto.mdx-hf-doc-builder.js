import{S as Rkt,i as Pkt,s as Bkt,e as a,k as l,w as F,t as o,M as Ikt,c as n,d as t,m as i,a as s,x as T,h as r,b as c,G as e,g as b,y as M,q as E,o as C,B as w,v as Nkt,L as I}from"../../chunks/vendor-hf-doc-builder.js";import{T as OXr}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as P}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as te}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as B}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function qkt(L){let g,v,p,m,_,d,h,Mo,mi,_f,rt,gi,hi,$0,uf,De,We,pi,yn,k0,Ln,xn,S0,_i,$n,R0,ui,bf,Ca;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),_=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Mo=o(`, make sure its
`),mi=a("code"),_f=o("model_type"),rt=o(" attribute is set to the same key you use when registering the config (here "),gi=a("code"),hi=o('"new-model"'),$0=o(")."),uf=l(),De=a("p"),We=o("Likewise, if your "),pi=a("code"),yn=o("NewModel"),k0=o(" is a subclass of "),Ln=a("a"),xn=o("PreTrainedModel"),S0=o(`, make sure its
`),_i=a("code"),$n=o("config_class"),R0=o(` attribute is set to the same class you use when registering the model (here
`),ui=a("code"),bf=o("NewModelConfig"),Ca=o(")."),this.h()},l(Qe){g=n(Qe,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var Z$=s(p);m=r(Z$,"NewModelConfig"),Z$.forEach(t),_=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var bi=s(d);h=r(bi,"PretrainedConfig"),bi.forEach(t),Mo=r(Ae,`, make sure its
`),mi=n(Ae,"CODE",{});var ek=s(mi);_f=r(ek,"model_type"),ek.forEach(t),rt=r(Ae," attribute is set to the same key you use when registering the config (here "),gi=n(Ae,"CODE",{});var ok=s(gi);hi=r(ok,'"new-model"'),ok.forEach(t),$0=r(Ae,")."),Ae.forEach(t),uf=i(Qe),De=n(Qe,"P",{});var Eo=s(De);We=r(Eo,"Likewise, if your "),pi=n(Eo,"CODE",{});var wa=s(pi);yn=r(wa,"NewModel"),wa.forEach(t),k0=r(Eo," is a subclass of "),Ln=n(Eo,"A",{href:!0});var rk=s(Ln);xn=r(rk,"PreTrainedModel"),rk.forEach(t),S0=r(Eo,`, make sure its
`),_i=n(Eo,"CODE",{});var vf=s(_i);$n=r(vf,"config_class"),vf.forEach(t),R0=r(Eo,` attribute is set to the same class you use when registering the model (here
`),ui=n(Eo,"CODE",{});var tk=s(ui);bf=r(tk,"NewModelConfig"),tk.forEach(t),Ca=r(Eo,")."),Eo.forEach(t),this.h()},h(){c(Ln,"href","/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel")},m(Qe,Ae){b(Qe,g,Ae),e(g,v),e(g,p),e(p,m),e(g,_),e(g,d),e(d,h),e(g,Mo),e(g,mi),e(mi,_f),e(g,rt),e(g,gi),e(gi,hi),e(g,$0),b(Qe,uf,Ae),b(Qe,De,Ae),e(De,We),e(De,pi),e(pi,yn),e(De,k0),e(De,Ln),e(Ln,xn),e(De,S0),e(De,_i),e(_i,$n),e(De,R0),e(De,ui),e(ui,bf),e(De,Ca)},d(Qe){Qe&&t(g),Qe&&t(uf),Qe&&t(De)}}}function jkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Dkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")

# Download vocabulary from huggingface.co and define model-specific arguments
tokenizer = AutoTokenizer.from_pretrained("roberta-base", add_prefix_space=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and define model-specific arguments</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;roberta-base&quot;</span>, add_prefix_space=<span class="hljs-literal">True</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Gkt(L){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function Okt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Vkt(L){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function Xkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Wkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Qkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Hkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ukt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Jkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ykt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Kkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Zkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _St(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ESt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ASt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ySt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $St(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ISt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function USt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Rt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ERt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ARt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $Rt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BRt(L){let g,v,p,m,_,d,h,Mo,mi,_f,rt,gi,hi,$0,uf,De,We,pi,yn,k0,Ln,xn,S0,_i,$n,R0,ui,bf,Ca,Qe,Ae,Z$,bi,ek,ok,Eo,wa,rk,vf,tk,qOe,yqe,vi,Ff,Moe,P0,jOe,Eoe,DOe,Lqe,kn,GOe,Coe,OOe,VOe,woe,XOe,zOe,xqe,B0,$qe,ak,WOe,kqe,Tf,Sqe,Fi,Mf,Aoe,I0,QOe,yoe,HOe,Rqe,Co,N0,UOe,q0,JOe,nk,YOe,KOe,ZOe,j0,eVe,Loe,oVe,rVe,tVe,Er,D0,aVe,xoe,nVe,sVe,Ti,lVe,$oe,iVe,dVe,koe,cVe,fVe,mVe,A,Ef,Soe,gVe,hVe,sk,pVe,_Ve,uVe,Cf,Roe,bVe,vVe,lk,FVe,TVe,MVe,wf,Poe,EVe,CVe,ik,wVe,AVe,yVe,Af,Boe,LVe,xVe,dk,$Ve,kVe,SVe,yf,Ioe,RVe,PVe,ck,BVe,IVe,NVe,Lf,Noe,qVe,jVe,fk,DVe,GVe,OVe,xf,qoe,VVe,XVe,mk,zVe,WVe,QVe,$f,joe,HVe,UVe,gk,JVe,YVe,KVe,kf,Doe,ZVe,eXe,hk,oXe,rXe,tXe,Sf,Goe,aXe,nXe,pk,sXe,lXe,iXe,Rf,Ooe,dXe,cXe,_k,fXe,mXe,gXe,Pf,Voe,hXe,pXe,uk,_Xe,uXe,bXe,Bf,Xoe,vXe,FXe,bk,TXe,MXe,EXe,If,zoe,CXe,wXe,vk,AXe,yXe,LXe,Nf,Woe,xXe,$Xe,Fk,kXe,SXe,RXe,qf,Qoe,PXe,BXe,Tk,IXe,NXe,qXe,jf,Hoe,jXe,DXe,Mk,GXe,OXe,VXe,Df,Uoe,XXe,zXe,Ek,WXe,QXe,HXe,Gf,Joe,UXe,JXe,Ck,YXe,KXe,ZXe,Of,Yoe,eze,oze,wk,rze,tze,aze,Vf,Koe,nze,sze,Ak,lze,ize,dze,Xf,Zoe,cze,fze,yk,mze,gze,hze,zf,ere,pze,_ze,Lk,uze,bze,vze,Wf,ore,Fze,Tze,xk,Mze,Eze,Cze,Qf,rre,wze,Aze,$k,yze,Lze,xze,Hf,tre,$ze,kze,kk,Sze,Rze,Pze,Uf,are,Bze,Ize,Sk,Nze,qze,jze,Jf,nre,Dze,Gze,Rk,Oze,Vze,Xze,Yf,sre,zze,Wze,Pk,Qze,Hze,Uze,Kf,lre,Jze,Yze,Bk,Kze,Zze,eWe,Zf,ire,oWe,rWe,Ik,tWe,aWe,nWe,em,dre,sWe,lWe,Nk,iWe,dWe,cWe,om,cre,fWe,mWe,qk,gWe,hWe,pWe,rm,fre,_We,uWe,jk,bWe,vWe,FWe,tm,mre,TWe,MWe,Dk,EWe,CWe,wWe,am,gre,AWe,yWe,Gk,LWe,xWe,$We,nm,hre,kWe,SWe,Ok,RWe,PWe,BWe,sm,pre,IWe,NWe,Vk,qWe,jWe,DWe,lm,_re,GWe,OWe,Xk,VWe,XWe,zWe,im,ure,WWe,QWe,zk,HWe,UWe,JWe,dm,bre,YWe,KWe,Wk,ZWe,eQe,oQe,cm,vre,rQe,tQe,Qk,aQe,nQe,sQe,fm,Fre,lQe,iQe,Hk,dQe,cQe,fQe,mm,Tre,mQe,gQe,Uk,hQe,pQe,_Qe,gm,Mre,uQe,bQe,Jk,vQe,FQe,TQe,hm,Ere,MQe,EQe,Yk,CQe,wQe,AQe,pm,Cre,yQe,LQe,Kk,xQe,$Qe,kQe,_m,wre,SQe,RQe,Zk,PQe,BQe,IQe,um,Are,NQe,qQe,eS,jQe,DQe,GQe,bm,yre,OQe,VQe,oS,XQe,zQe,WQe,vm,Lre,QQe,HQe,rS,UQe,JQe,YQe,Fm,xre,KQe,ZQe,tS,eHe,oHe,rHe,Tm,$re,tHe,aHe,aS,nHe,sHe,lHe,Mm,kre,iHe,dHe,nS,cHe,fHe,mHe,Em,Sre,gHe,hHe,sS,pHe,_He,uHe,Cm,Rre,bHe,vHe,lS,FHe,THe,MHe,wm,Pre,EHe,CHe,iS,wHe,AHe,yHe,Am,Bre,LHe,xHe,dS,$He,kHe,SHe,ym,Ire,RHe,PHe,cS,BHe,IHe,NHe,Lm,Nre,qHe,jHe,fS,DHe,GHe,OHe,xm,qre,VHe,XHe,mS,zHe,WHe,QHe,$m,jre,HHe,UHe,gS,JHe,YHe,KHe,km,Dre,ZHe,eUe,hS,oUe,rUe,tUe,Sm,Gre,aUe,nUe,pS,sUe,lUe,iUe,Rm,Ore,dUe,cUe,_S,fUe,mUe,gUe,Pm,Vre,hUe,pUe,uS,_Ue,uUe,bUe,Bm,Xre,vUe,FUe,bS,TUe,MUe,EUe,Im,zre,CUe,wUe,vS,AUe,yUe,LUe,Nm,Wre,xUe,$Ue,FS,kUe,SUe,RUe,qm,Qre,PUe,BUe,TS,IUe,NUe,qUe,jm,Hre,jUe,DUe,MS,GUe,OUe,VUe,Dm,Ure,XUe,zUe,ES,WUe,QUe,HUe,Gm,Jre,UUe,JUe,CS,YUe,KUe,ZUe,Om,Yre,eJe,oJe,wS,rJe,tJe,aJe,Vm,Kre,nJe,sJe,AS,lJe,iJe,dJe,Xm,Zre,cJe,fJe,yS,mJe,gJe,hJe,zm,ete,pJe,_Je,LS,uJe,bJe,vJe,Wm,ote,FJe,TJe,xS,MJe,EJe,CJe,Qm,rte,wJe,AJe,$S,yJe,LJe,xJe,Hm,tte,$Je,kJe,kS,SJe,RJe,PJe,Um,ate,BJe,IJe,SS,NJe,qJe,jJe,Jm,nte,DJe,GJe,RS,OJe,VJe,XJe,Ym,ste,zJe,WJe,PS,QJe,HJe,UJe,Km,lte,JJe,YJe,BS,KJe,ZJe,eYe,Zm,ite,oYe,rYe,IS,tYe,aYe,nYe,eg,dte,sYe,lYe,NS,iYe,dYe,cYe,og,cte,fYe,mYe,qS,gYe,hYe,pYe,rg,fte,_Ye,uYe,jS,bYe,vYe,FYe,tg,mte,TYe,MYe,DS,EYe,CYe,wYe,ag,gte,AYe,yYe,GS,LYe,xYe,$Ye,ng,hte,kYe,SYe,OS,RYe,PYe,BYe,sg,pte,IYe,NYe,VS,qYe,jYe,DYe,lg,_te,GYe,OYe,XS,VYe,XYe,zYe,ig,ute,WYe,QYe,zS,HYe,UYe,JYe,dg,bte,YYe,KYe,WS,ZYe,eKe,oKe,cg,vte,rKe,tKe,QS,aKe,nKe,sKe,fg,Fte,lKe,iKe,HS,dKe,cKe,fKe,mg,Tte,mKe,gKe,US,hKe,pKe,_Ke,gg,Mte,uKe,bKe,JS,vKe,FKe,TKe,hg,Ete,MKe,EKe,YS,CKe,wKe,AKe,pg,Cte,yKe,LKe,KS,xKe,$Ke,kKe,_g,wte,SKe,RKe,ZS,PKe,BKe,IKe,ug,Ate,NKe,qKe,eR,jKe,DKe,GKe,bg,yte,OKe,VKe,oR,XKe,zKe,WKe,vg,Lte,QKe,HKe,rR,UKe,JKe,YKe,Fg,xte,KKe,ZKe,tR,eZe,oZe,rZe,Tg,$te,tZe,aZe,aR,nZe,sZe,lZe,Mg,kte,iZe,dZe,nR,cZe,fZe,mZe,Eg,Ste,gZe,hZe,sR,pZe,_Ze,uZe,Cg,Rte,bZe,vZe,lR,FZe,TZe,MZe,wg,EZe,Ag,G0,CZe,Pte,wZe,Pqe,Mi,yg,Bte,O0,AZe,Ite,yZe,Bqe,wo,V0,LZe,X0,xZe,iR,$Ze,kZe,SZe,z0,RZe,Nte,PZe,BZe,IZe,Cr,W0,NZe,qte,qZe,jZe,Aa,DZe,jte,GZe,OZe,Dte,VZe,XZe,Gte,zZe,WZe,QZe,k,Sn,Ote,HZe,UZe,dR,JZe,YZe,cR,KZe,ZZe,eeo,Rn,Vte,oeo,reo,fR,teo,aeo,mR,neo,seo,leo,Pn,Xte,ieo,deo,gR,ceo,feo,hR,meo,geo,heo,Lg,zte,peo,_eo,pR,ueo,beo,veo,Bn,Wte,Feo,Teo,_R,Meo,Eeo,uR,Ceo,weo,Aeo,xg,Qte,yeo,Leo,bR,xeo,$eo,keo,$g,Hte,Seo,Reo,vR,Peo,Beo,Ieo,kg,Ute,Neo,qeo,FR,jeo,Deo,Geo,In,Jte,Oeo,Veo,TR,Xeo,zeo,MR,Weo,Qeo,Heo,Nn,Yte,Ueo,Jeo,ER,Yeo,Keo,CR,Zeo,eoo,ooo,qn,Kte,roo,too,wR,aoo,noo,AR,soo,loo,ioo,Sg,Zte,doo,coo,yR,foo,moo,goo,Rg,eae,hoo,poo,LR,_oo,uoo,boo,jn,oae,voo,Foo,xR,Too,Moo,$R,Eoo,Coo,woo,Pg,rae,Aoo,yoo,kR,Loo,xoo,$oo,Dn,tae,koo,Soo,SR,Roo,Poo,RR,Boo,Ioo,Noo,Gn,aae,qoo,joo,PR,Doo,Goo,BR,Ooo,Voo,Xoo,On,nae,zoo,Woo,IR,Qoo,Hoo,NR,Uoo,Joo,Yoo,Bg,sae,Koo,Zoo,qR,ero,oro,rro,Vn,lae,tro,aro,jR,nro,sro,DR,lro,iro,dro,Xn,iae,cro,fro,GR,mro,gro,OR,hro,pro,_ro,zn,dae,uro,bro,VR,vro,Fro,XR,Tro,Mro,Ero,Wn,cae,Cro,wro,zR,Aro,yro,WR,Lro,xro,$ro,Qn,fae,kro,Sro,QR,Rro,Pro,HR,Bro,Iro,Nro,Hn,mae,qro,jro,UR,Dro,Gro,JR,Oro,Vro,Xro,Ig,gae,zro,Wro,YR,Qro,Hro,Uro,Un,hae,Jro,Yro,KR,Kro,Zro,ZR,eto,oto,rto,Ng,pae,tto,ato,eP,nto,sto,lto,Jn,_ae,ito,dto,oP,cto,fto,rP,mto,gto,hto,Yn,uae,pto,_to,tP,uto,bto,aP,vto,Fto,Tto,Kn,bae,Mto,Eto,nP,Cto,wto,sP,Ato,yto,Lto,qg,vae,xto,$to,lP,kto,Sto,Rto,Zn,Fae,Pto,Bto,iP,Ito,Nto,dP,qto,jto,Dto,es,Tae,Gto,Oto,cP,Vto,Xto,fP,zto,Wto,Qto,jg,Mae,Hto,Uto,mP,Jto,Yto,Kto,os,Eae,Zto,eao,gP,oao,rao,hP,tao,aao,nao,rs,Cae,sao,lao,pP,iao,dao,_P,cao,fao,mao,ts,wae,gao,hao,uP,pao,_ao,bP,uao,bao,vao,as,Aae,Fao,Tao,vP,Mao,Eao,FP,Cao,wao,Aao,ns,yae,yao,Lao,TP,xao,$ao,MP,kao,Sao,Rao,ss,Lae,Pao,Bao,EP,Iao,Nao,CP,qao,jao,Dao,ls,xae,Gao,Oao,wP,Vao,Xao,AP,zao,Wao,Qao,is,$ae,Hao,Uao,yP,Jao,Yao,LP,Kao,Zao,eno,Dg,kae,ono,rno,xP,tno,ano,nno,ds,Sae,sno,lno,$P,ino,dno,kP,cno,fno,mno,Gg,Rae,gno,hno,SP,pno,_no,uno,Og,Pae,bno,vno,RP,Fno,Tno,Mno,cs,Bae,Eno,Cno,PP,wno,Ano,BP,yno,Lno,xno,fs,Iae,$no,kno,IP,Sno,Rno,NP,Pno,Bno,Ino,ms,Nae,Nno,qno,qP,jno,Dno,jP,Gno,Ono,Vno,Vg,qae,Xno,zno,DP,Wno,Qno,Hno,gs,jae,Uno,Jno,GP,Yno,Kno,OP,Zno,eso,oso,hs,Dae,rso,tso,VP,aso,nso,XP,sso,lso,iso,ps,Gae,dso,cso,zP,fso,mso,WP,gso,hso,pso,_s,Oae,_so,uso,QP,bso,vso,HP,Fso,Tso,Mso,us,Vae,Eso,Cso,UP,wso,Aso,JP,yso,Lso,xso,Xg,Xae,$so,kso,YP,Sso,Rso,Pso,bs,zae,Bso,Iso,KP,Nso,qso,ZP,jso,Dso,Gso,zg,Wae,Oso,Vso,eB,Xso,zso,Wso,Wg,Qae,Qso,Hso,oB,Uso,Jso,Yso,Qg,Hae,Kso,Zso,rB,elo,olo,rlo,Hg,Uae,tlo,alo,tB,nlo,slo,llo,vs,Jae,ilo,dlo,aB,clo,flo,nB,mlo,glo,hlo,Ug,Yae,plo,_lo,sB,ulo,blo,vlo,Fs,Kae,Flo,Tlo,lB,Mlo,Elo,iB,Clo,wlo,Alo,Ts,Zae,ylo,Llo,dB,xlo,$lo,cB,klo,Slo,Rlo,Ms,ene,Plo,Blo,fB,Ilo,Nlo,mB,qlo,jlo,Dlo,Es,one,Glo,Olo,gB,Vlo,Xlo,hB,zlo,Wlo,Qlo,Cs,rne,Hlo,Ulo,pB,Jlo,Ylo,_B,Klo,Zlo,eio,ws,tne,oio,rio,uB,tio,aio,bB,nio,sio,lio,Jg,ane,iio,dio,vB,cio,fio,mio,Yg,nne,gio,hio,FB,pio,_io,uio,As,sne,bio,vio,TB,Fio,Tio,MB,Mio,Eio,Cio,ys,lne,wio,Aio,EB,yio,Lio,CB,xio,$io,kio,Ls,ine,Sio,Rio,wB,Pio,Bio,AB,Iio,Nio,qio,Kg,dne,jio,Dio,yB,Gio,Oio,Vio,Zg,cne,Xio,zio,LB,Wio,Qio,Hio,eh,fne,Uio,Jio,xB,Yio,Kio,Zio,xs,mne,edo,odo,$B,rdo,tdo,kB,ado,ndo,sdo,oh,gne,ldo,ido,SB,ddo,cdo,fdo,rh,hne,mdo,gdo,RB,hdo,pdo,_do,th,pne,udo,bdo,PB,vdo,Fdo,Tdo,$s,_ne,Mdo,Edo,BB,Cdo,wdo,IB,Ado,ydo,Ldo,ah,une,xdo,$do,NB,kdo,Sdo,Rdo,nh,bne,Pdo,Bdo,qB,Ido,Ndo,qdo,ks,vne,jdo,Ddo,jB,Gdo,Odo,DB,Vdo,Xdo,zdo,Ss,Fne,Wdo,Qdo,GB,Hdo,Udo,OB,Jdo,Ydo,Kdo,Rs,Tne,Zdo,eco,VB,oco,rco,XB,tco,aco,nco,Ps,Mne,sco,lco,zB,ico,dco,WB,cco,fco,mco,sh,gco,lh,Q0,hco,Ene,pco,Iqe,Ei,ih,Cne,H0,_co,wne,uco,Nqe,Ao,U0,bco,J0,vco,QB,Fco,Tco,Mco,Y0,Eco,Ane,Cco,wco,Aco,He,K0,yco,yne,Lco,xco,ya,$co,Lne,kco,Sco,xne,Rco,Pco,$ne,Bco,Ico,Nco,Y,dh,kne,qco,jco,HB,Dco,Gco,Oco,ch,Sne,Vco,Xco,UB,zco,Wco,Qco,fh,Rne,Hco,Uco,JB,Jco,Yco,Kco,mh,Pne,Zco,efo,YB,ofo,rfo,tfo,gh,Bne,afo,nfo,KB,sfo,lfo,ifo,hh,Ine,dfo,cfo,ZB,ffo,mfo,gfo,ph,Nne,hfo,pfo,eI,_fo,ufo,bfo,_h,qne,vfo,Ffo,oI,Tfo,Mfo,Efo,uh,jne,Cfo,wfo,rI,Afo,yfo,Lfo,bh,Dne,xfo,$fo,tI,kfo,Sfo,Rfo,vh,Gne,Pfo,Bfo,aI,Ifo,Nfo,qfo,Fh,One,jfo,Dfo,nI,Gfo,Ofo,Vfo,Th,Vne,Xfo,zfo,sI,Wfo,Qfo,Hfo,Mh,Xne,Ufo,Jfo,lI,Yfo,Kfo,Zfo,Eh,zne,emo,omo,iI,rmo,tmo,amo,Ch,Wne,nmo,smo,dI,lmo,imo,dmo,wh,Qne,cmo,fmo,cI,mmo,gmo,hmo,Ah,Hne,pmo,_mo,fI,umo,bmo,vmo,yh,Une,Fmo,Tmo,mI,Mmo,Emo,Cmo,Lh,Jne,wmo,Amo,gI,ymo,Lmo,xmo,xh,Yne,$mo,kmo,hI,Smo,Rmo,Pmo,$h,Kne,Bmo,Imo,pI,Nmo,qmo,jmo,kh,Zne,Dmo,Gmo,_I,Omo,Vmo,Xmo,Sh,ese,zmo,Wmo,uI,Qmo,Hmo,Umo,Rh,ose,Jmo,Ymo,bI,Kmo,Zmo,ego,Ph,rse,ogo,rgo,vI,tgo,ago,ngo,Bh,tse,sgo,lgo,FI,igo,dgo,cgo,Ih,ase,fgo,mgo,TI,ggo,hgo,pgo,Nh,nse,_go,ugo,MI,bgo,vgo,Fgo,qh,Tgo,jh,Mgo,Dh,Z0,Ego,sse,Cgo,qqe,Ci,Gh,lse,eA,wgo,ise,Ago,jqe,yo,oA,ygo,rA,Lgo,EI,xgo,$go,kgo,tA,Sgo,dse,Rgo,Pgo,Bgo,Ue,aA,Igo,cse,Ngo,qgo,wi,jgo,fse,Dgo,Ggo,mse,Ogo,Vgo,Xgo,he,Oh,gse,zgo,Wgo,CI,Qgo,Hgo,Ugo,Vh,hse,Jgo,Ygo,pse,Kgo,Zgo,eho,Xh,_se,oho,rho,wI,tho,aho,nho,zh,use,sho,lho,AI,iho,dho,cho,Wh,bse,fho,mho,yI,gho,hho,pho,Qh,vse,_ho,uho,LI,bho,vho,Fho,Hh,Fse,Tho,Mho,xI,Eho,Cho,who,Uh,Tse,Aho,yho,$I,Lho,xho,$ho,Jh,Mse,kho,Sho,kI,Rho,Pho,Bho,Yh,Ese,Iho,Nho,SI,qho,jho,Dho,Kh,Cse,Gho,Oho,RI,Vho,Xho,zho,Zh,wse,Who,Qho,PI,Hho,Uho,Jho,ep,Ase,Yho,Kho,BI,Zho,epo,opo,op,yse,rpo,tpo,II,apo,npo,spo,rp,Lse,lpo,ipo,NI,dpo,cpo,fpo,tp,xse,mpo,gpo,qI,hpo,ppo,_po,ap,$se,upo,bpo,jI,vpo,Fpo,Tpo,np,Mpo,sp,Epo,lp,nA,Cpo,kse,wpo,Dqe,Ai,ip,Sse,sA,Apo,Rse,ypo,Gqe,Lo,lA,Lpo,yi,xpo,DI,$po,kpo,GI,Spo,Rpo,Ppo,iA,Bpo,Pse,Ipo,Npo,qpo,tt,dA,jpo,Bse,Dpo,Gpo,Li,Opo,Ise,Vpo,Xpo,OI,zpo,Wpo,Qpo,dp,Hpo,Je,cA,Upo,Nse,Jpo,Ypo,La,Kpo,qse,Zpo,e_o,jse,o_o,r_o,Dse,t_o,a_o,n_o,x,cp,Gse,s_o,l_o,VI,i_o,d_o,c_o,fp,Ose,f_o,m_o,XI,g_o,h_o,p_o,mp,Vse,__o,u_o,zI,b_o,v_o,F_o,gp,Xse,T_o,M_o,WI,E_o,C_o,w_o,hp,zse,A_o,y_o,QI,L_o,x_o,$_o,pp,Wse,k_o,S_o,HI,R_o,P_o,B_o,_p,Qse,I_o,N_o,UI,q_o,j_o,D_o,up,Hse,G_o,O_o,JI,V_o,X_o,z_o,bp,Use,W_o,Q_o,YI,H_o,U_o,J_o,vp,Jse,Y_o,K_o,KI,Z_o,euo,ouo,Fp,Yse,ruo,tuo,ZI,auo,nuo,suo,Tp,Kse,luo,iuo,eN,duo,cuo,fuo,Mp,Zse,muo,guo,oN,huo,puo,_uo,Ep,ele,uuo,buo,rN,vuo,Fuo,Tuo,Cp,ole,Muo,Euo,tN,Cuo,wuo,Auo,wp,rle,yuo,Luo,aN,xuo,$uo,kuo,Ap,tle,Suo,Ruo,nN,Puo,Buo,Iuo,yp,ale,Nuo,quo,sN,juo,Duo,Guo,Lp,nle,Ouo,Vuo,lN,Xuo,zuo,Wuo,xp,sle,Quo,Huo,iN,Uuo,Juo,Yuo,$p,lle,Kuo,Zuo,dN,e2o,o2o,r2o,kp,ile,t2o,a2o,cN,n2o,s2o,l2o,Sp,dle,i2o,d2o,fN,c2o,f2o,m2o,Rp,cle,g2o,h2o,mN,p2o,_2o,u2o,Pp,fle,b2o,v2o,gN,F2o,T2o,M2o,Bp,mle,E2o,C2o,hN,w2o,A2o,y2o,Ip,gle,L2o,x2o,pN,$2o,k2o,S2o,Np,hle,R2o,P2o,_N,B2o,I2o,N2o,qp,ple,q2o,j2o,uN,D2o,G2o,O2o,jp,_le,V2o,X2o,bN,z2o,W2o,Q2o,Dp,ule,H2o,U2o,vN,J2o,Y2o,K2o,Gp,ble,Z2o,e1o,FN,o1o,r1o,t1o,Bs,vle,a1o,n1o,TN,s1o,l1o,MN,i1o,d1o,c1o,Op,Fle,f1o,m1o,EN,g1o,h1o,p1o,Vp,Tle,_1o,u1o,CN,b1o,v1o,F1o,Xp,Mle,T1o,M1o,wN,E1o,C1o,w1o,zp,Ele,A1o,y1o,AN,L1o,x1o,$1o,Wp,Cle,k1o,S1o,yN,R1o,P1o,B1o,Qp,wle,I1o,N1o,LN,q1o,j1o,D1o,Hp,Ale,G1o,O1o,xN,V1o,X1o,z1o,Up,yle,W1o,Q1o,$N,H1o,U1o,J1o,Jp,Lle,Y1o,K1o,kN,Z1o,ebo,obo,Yp,xle,rbo,tbo,SN,abo,nbo,sbo,Kp,$le,lbo,ibo,RN,dbo,cbo,fbo,Zp,kle,mbo,gbo,PN,hbo,pbo,_bo,e_,Sle,ubo,bbo,BN,vbo,Fbo,Tbo,o_,Rle,Mbo,Ebo,IN,Cbo,wbo,Abo,r_,Ple,ybo,Lbo,NN,xbo,$bo,kbo,t_,Ble,Sbo,Rbo,qN,Pbo,Bbo,Ibo,a_,Ile,Nbo,qbo,jN,jbo,Dbo,Gbo,n_,Nle,Obo,Vbo,DN,Xbo,zbo,Wbo,s_,qle,Qbo,Hbo,GN,Ubo,Jbo,Ybo,l_,jle,Kbo,Zbo,ON,evo,ovo,rvo,i_,Dle,tvo,avo,VN,nvo,svo,lvo,d_,Gle,ivo,dvo,XN,cvo,fvo,mvo,c_,Ole,gvo,hvo,zN,pvo,_vo,uvo,f_,Vle,bvo,vvo,WN,Fvo,Tvo,Mvo,m_,Xle,Evo,Cvo,QN,wvo,Avo,yvo,g_,zle,Lvo,xvo,HN,$vo,kvo,Svo,h_,Wle,Rvo,Pvo,UN,Bvo,Ivo,Nvo,p_,Qle,qvo,jvo,JN,Dvo,Gvo,Ovo,__,Hle,Vvo,Xvo,YN,zvo,Wvo,Qvo,u_,Ule,Hvo,Uvo,KN,Jvo,Yvo,Kvo,b_,Jle,Zvo,eFo,ZN,oFo,rFo,tFo,v_,Yle,aFo,nFo,eq,sFo,lFo,iFo,F_,Kle,dFo,cFo,oq,fFo,mFo,gFo,T_,Zle,hFo,pFo,rq,_Fo,uFo,bFo,M_,eie,vFo,FFo,tq,TFo,MFo,EFo,E_,oie,CFo,wFo,aq,AFo,yFo,LFo,C_,rie,xFo,$Fo,nq,kFo,SFo,RFo,w_,tie,PFo,BFo,sq,IFo,NFo,qFo,A_,aie,jFo,DFo,lq,GFo,OFo,VFo,y_,nie,XFo,zFo,iq,WFo,QFo,HFo,L_,sie,UFo,JFo,dq,YFo,KFo,ZFo,x_,lie,e6o,o6o,cq,r6o,t6o,a6o,$_,iie,n6o,s6o,fq,l6o,i6o,d6o,k_,die,c6o,f6o,mq,m6o,g6o,h6o,S_,cie,p6o,_6o,gq,u6o,b6o,v6o,R_,fie,F6o,T6o,hq,M6o,E6o,C6o,P_,mie,w6o,A6o,pq,y6o,L6o,x6o,B_,gie,$6o,k6o,_q,S6o,R6o,P6o,I_,hie,B6o,I6o,uq,N6o,q6o,j6o,N_,pie,D6o,G6o,bq,O6o,V6o,X6o,q_,_ie,z6o,W6o,vq,Q6o,H6o,U6o,j_,uie,J6o,Y6o,Fq,K6o,Z6o,eTo,D_,bie,oTo,rTo,Tq,tTo,aTo,nTo,G_,vie,sTo,lTo,Mq,iTo,dTo,cTo,O_,Fie,fTo,mTo,Eq,gTo,hTo,pTo,V_,Tie,_To,uTo,Cq,bTo,vTo,FTo,X_,Mie,TTo,MTo,wq,ETo,CTo,wTo,z_,Eie,ATo,yTo,Aq,LTo,xTo,$To,W_,Cie,kTo,STo,yq,RTo,PTo,BTo,Q_,wie,ITo,NTo,Lq,qTo,jTo,DTo,H_,Aie,GTo,OTo,xq,VTo,XTo,zTo,U_,yie,WTo,QTo,$q,HTo,UTo,JTo,J_,Lie,YTo,KTo,kq,ZTo,e7o,o7o,Y_,xie,r7o,t7o,Sq,a7o,n7o,s7o,K_,$ie,l7o,i7o,Rq,d7o,c7o,f7o,Z_,kie,m7o,g7o,Pq,h7o,p7o,_7o,eu,Sie,u7o,b7o,Bq,v7o,F7o,T7o,ou,Rie,M7o,E7o,Iq,C7o,w7o,A7o,ru,Pie,y7o,L7o,Nq,x7o,$7o,k7o,tu,Bie,S7o,R7o,qq,P7o,B7o,I7o,au,N7o,Iie,q7o,j7o,Nie,D7o,G7o,nu,Oqe,xi,su,qie,fA,O7o,jie,V7o,Vqe,xo,mA,X7o,$i,z7o,jq,W7o,Q7o,Dq,H7o,U7o,J7o,gA,Y7o,Die,K7o,Z7o,e9o,at,hA,o9o,Gie,r9o,t9o,ki,a9o,Oie,n9o,s9o,Gq,l9o,i9o,d9o,lu,c9o,Ye,pA,f9o,Vie,m9o,g9o,xa,h9o,Xie,p9o,_9o,zie,u9o,b9o,Wie,v9o,F9o,T9o,G,iu,Qie,M9o,E9o,Oq,C9o,w9o,A9o,du,Hie,y9o,L9o,Vq,x9o,$9o,k9o,cu,Uie,S9o,R9o,Xq,P9o,B9o,I9o,fu,Jie,N9o,q9o,zq,j9o,D9o,G9o,mu,Yie,O9o,V9o,Wq,X9o,z9o,W9o,gu,Kie,Q9o,H9o,Qq,U9o,J9o,Y9o,hu,Zie,K9o,Z9o,Hq,eMo,oMo,rMo,pu,ede,tMo,aMo,Uq,nMo,sMo,lMo,_u,ode,iMo,dMo,Jq,cMo,fMo,mMo,uu,rde,gMo,hMo,Yq,pMo,_Mo,uMo,bu,tde,bMo,vMo,Kq,FMo,TMo,MMo,vu,ade,EMo,CMo,Zq,wMo,AMo,yMo,Fu,nde,LMo,xMo,ej,$Mo,kMo,SMo,Tu,sde,RMo,PMo,oj,BMo,IMo,NMo,Mu,lde,qMo,jMo,rj,DMo,GMo,OMo,Eu,ide,VMo,XMo,tj,zMo,WMo,QMo,Cu,dde,HMo,UMo,aj,JMo,YMo,KMo,wu,cde,ZMo,e4o,nj,o4o,r4o,t4o,Au,fde,a4o,n4o,sj,s4o,l4o,i4o,yu,mde,d4o,c4o,lj,f4o,m4o,g4o,Lu,gde,h4o,p4o,ij,_4o,u4o,b4o,xu,hde,v4o,F4o,dj,T4o,M4o,E4o,$u,pde,C4o,w4o,cj,A4o,y4o,L4o,ku,_de,x4o,$4o,fj,k4o,S4o,R4o,Su,ude,P4o,B4o,mj,I4o,N4o,q4o,Ru,bde,j4o,D4o,gj,G4o,O4o,V4o,Pu,vde,X4o,z4o,hj,W4o,Q4o,H4o,Bu,Fde,U4o,J4o,pj,Y4o,K4o,Z4o,Iu,Tde,eEo,oEo,_j,rEo,tEo,aEo,Nu,Mde,nEo,sEo,uj,lEo,iEo,dEo,qu,Ede,cEo,fEo,bj,mEo,gEo,hEo,ju,Cde,pEo,_Eo,vj,uEo,bEo,vEo,Du,wde,FEo,TEo,Fj,MEo,EEo,CEo,Gu,Ade,wEo,AEo,Tj,yEo,LEo,xEo,Ou,yde,$Eo,kEo,Mj,SEo,REo,PEo,Vu,Lde,BEo,IEo,Ej,NEo,qEo,jEo,Xu,xde,DEo,GEo,Cj,OEo,VEo,XEo,zu,$de,zEo,WEo,wj,QEo,HEo,UEo,Wu,kde,JEo,YEo,Aj,KEo,ZEo,eCo,Qu,Sde,oCo,rCo,yj,tCo,aCo,nCo,Hu,Rde,sCo,lCo,Lj,iCo,dCo,cCo,Uu,Pde,fCo,mCo,xj,gCo,hCo,pCo,Ju,_Co,Bde,uCo,bCo,Ide,vCo,FCo,Yu,Xqe,Si,Ku,Nde,_A,TCo,qde,MCo,zqe,$o,uA,ECo,Ri,CCo,$j,wCo,ACo,kj,yCo,LCo,xCo,bA,$Co,jde,kCo,SCo,RCo,nt,vA,PCo,Dde,BCo,ICo,Pi,NCo,Gde,qCo,jCo,Sj,DCo,GCo,OCo,Zu,VCo,Ke,FA,XCo,Ode,zCo,WCo,$a,QCo,Vde,HCo,UCo,Xde,JCo,YCo,zde,KCo,ZCo,e5o,z,e2,Wde,o5o,r5o,Rj,t5o,a5o,n5o,o2,Qde,s5o,l5o,Pj,i5o,d5o,c5o,r2,Hde,f5o,m5o,Bj,g5o,h5o,p5o,t2,Ude,_5o,u5o,Ij,b5o,v5o,F5o,a2,Jde,T5o,M5o,Nj,E5o,C5o,w5o,n2,Yde,A5o,y5o,qj,L5o,x5o,$5o,s2,Kde,k5o,S5o,jj,R5o,P5o,B5o,l2,Zde,I5o,N5o,Dj,q5o,j5o,D5o,i2,ece,G5o,O5o,Gj,V5o,X5o,z5o,d2,oce,W5o,Q5o,Oj,H5o,U5o,J5o,c2,rce,Y5o,K5o,Vj,Z5o,e3o,o3o,f2,tce,r3o,t3o,Xj,a3o,n3o,s3o,m2,ace,l3o,i3o,zj,d3o,c3o,f3o,g2,nce,m3o,g3o,Wj,h3o,p3o,_3o,h2,sce,u3o,b3o,Qj,v3o,F3o,T3o,p2,lce,M3o,E3o,Hj,C3o,w3o,A3o,_2,ice,y3o,L3o,Uj,x3o,$3o,k3o,u2,dce,S3o,R3o,Jj,P3o,B3o,I3o,b2,cce,N3o,q3o,Yj,j3o,D3o,G3o,v2,fce,O3o,V3o,Kj,X3o,z3o,W3o,F2,mce,Q3o,H3o,Zj,U3o,J3o,Y3o,T2,gce,K3o,Z3o,eD,ewo,owo,rwo,M2,hce,two,awo,oD,nwo,swo,lwo,E2,pce,iwo,dwo,rD,cwo,fwo,mwo,C2,_ce,gwo,hwo,tD,pwo,_wo,uwo,w2,uce,bwo,vwo,aD,Fwo,Two,Mwo,A2,bce,Ewo,Cwo,nD,wwo,Awo,ywo,y2,vce,Lwo,xwo,sD,$wo,kwo,Swo,L2,Fce,Rwo,Pwo,lD,Bwo,Iwo,Nwo,x2,Tce,qwo,jwo,iD,Dwo,Gwo,Owo,$2,Mce,Vwo,Xwo,dD,zwo,Wwo,Qwo,k2,Ece,Hwo,Uwo,cD,Jwo,Ywo,Kwo,S2,Cce,Zwo,e0o,fD,o0o,r0o,t0o,R2,wce,a0o,n0o,mD,s0o,l0o,i0o,P2,Ace,d0o,c0o,gD,f0o,m0o,g0o,B2,yce,h0o,p0o,hD,_0o,u0o,b0o,I2,Lce,v0o,F0o,pD,T0o,M0o,E0o,N2,C0o,xce,w0o,A0o,$ce,y0o,L0o,q2,Wqe,Bi,j2,kce,TA,x0o,Sce,$0o,Qqe,ko,MA,k0o,Ii,S0o,_D,R0o,P0o,uD,B0o,I0o,N0o,EA,q0o,Rce,j0o,D0o,G0o,st,CA,O0o,Pce,V0o,X0o,Ni,z0o,Bce,W0o,Q0o,bD,H0o,U0o,J0o,D2,Y0o,Ze,wA,K0o,Ice,Z0o,eAo,ka,oAo,Nce,rAo,tAo,qce,aAo,nAo,jce,sAo,lAo,iAo,Q,G2,Dce,dAo,cAo,vD,fAo,mAo,gAo,O2,Gce,hAo,pAo,FD,_Ao,uAo,bAo,V2,Oce,vAo,FAo,TD,TAo,MAo,EAo,X2,Vce,CAo,wAo,MD,AAo,yAo,LAo,z2,Xce,xAo,$Ao,ED,kAo,SAo,RAo,W2,zce,PAo,BAo,CD,IAo,NAo,qAo,Q2,Wce,jAo,DAo,wD,GAo,OAo,VAo,H2,Qce,XAo,zAo,AD,WAo,QAo,HAo,U2,Hce,UAo,JAo,yD,YAo,KAo,ZAo,J2,Uce,eyo,oyo,LD,ryo,tyo,ayo,Y2,Jce,nyo,syo,xD,lyo,iyo,dyo,K2,Yce,cyo,fyo,$D,myo,gyo,hyo,Z2,Kce,pyo,_yo,kD,uyo,byo,vyo,e1,Zce,Fyo,Tyo,SD,Myo,Eyo,Cyo,o1,efe,wyo,Ayo,RD,yyo,Lyo,xyo,r1,ofe,$yo,kyo,PD,Syo,Ryo,Pyo,t1,rfe,Byo,Iyo,BD,Nyo,qyo,jyo,a1,tfe,Dyo,Gyo,ID,Oyo,Vyo,Xyo,n1,afe,zyo,Wyo,ND,Qyo,Hyo,Uyo,s1,nfe,Jyo,Yyo,qD,Kyo,Zyo,eLo,l1,sfe,oLo,rLo,jD,tLo,aLo,nLo,i1,lfe,sLo,lLo,DD,iLo,dLo,cLo,d1,ife,fLo,mLo,GD,gLo,hLo,pLo,c1,dfe,_Lo,uLo,OD,bLo,vLo,FLo,f1,cfe,TLo,MLo,VD,ELo,CLo,wLo,m1,ffe,ALo,yLo,XD,LLo,xLo,$Lo,g1,mfe,kLo,SLo,zD,RLo,PLo,BLo,h1,gfe,ILo,NLo,WD,qLo,jLo,DLo,p1,hfe,GLo,OLo,QD,VLo,XLo,zLo,_1,pfe,WLo,QLo,HD,HLo,ULo,JLo,u1,_fe,YLo,KLo,ufe,ZLo,e8o,o8o,b1,bfe,r8o,t8o,UD,a8o,n8o,s8o,v1,vfe,l8o,i8o,JD,d8o,c8o,f8o,F1,Ffe,m8o,g8o,YD,h8o,p8o,_8o,T1,Tfe,u8o,b8o,KD,v8o,F8o,T8o,M1,M8o,Mfe,E8o,C8o,Efe,w8o,A8o,E1,Hqe,qi,C1,Cfe,AA,y8o,wfe,L8o,Uqe,So,yA,x8o,ji,$8o,ZD,k8o,S8o,eG,R8o,P8o,B8o,LA,I8o,Afe,N8o,q8o,j8o,lt,xA,D8o,yfe,G8o,O8o,Di,V8o,Lfe,X8o,z8o,oG,W8o,Q8o,H8o,w1,U8o,eo,$A,J8o,xfe,Y8o,K8o,Sa,Z8o,$fe,exo,oxo,kfe,rxo,txo,Sfe,axo,nxo,sxo,pe,A1,Rfe,lxo,ixo,rG,dxo,cxo,fxo,y1,Pfe,mxo,gxo,tG,hxo,pxo,_xo,L1,Bfe,uxo,bxo,aG,vxo,Fxo,Txo,x1,Ife,Mxo,Exo,nG,Cxo,wxo,Axo,$1,Nfe,yxo,Lxo,sG,xxo,$xo,kxo,k1,qfe,Sxo,Rxo,lG,Pxo,Bxo,Ixo,S1,jfe,Nxo,qxo,iG,jxo,Dxo,Gxo,R1,Dfe,Oxo,Vxo,dG,Xxo,zxo,Wxo,P1,Gfe,Qxo,Hxo,cG,Uxo,Jxo,Yxo,B1,Ofe,Kxo,Zxo,fG,e$o,o$o,r$o,I1,Vfe,t$o,a$o,mG,n$o,s$o,l$o,N1,Xfe,i$o,d$o,gG,c$o,f$o,m$o,q1,zfe,g$o,h$o,hG,p$o,_$o,u$o,j1,Wfe,b$o,v$o,pG,F$o,T$o,M$o,D1,Qfe,E$o,C$o,_G,w$o,A$o,y$o,G1,Hfe,L$o,x$o,uG,$$o,k$o,S$o,O1,Ufe,R$o,P$o,bG,B$o,I$o,N$o,V1,q$o,Jfe,j$o,D$o,Yfe,G$o,O$o,X1,Jqe,Gi,z1,Kfe,kA,V$o,Zfe,X$o,Yqe,Ro,SA,z$o,Oi,W$o,vG,Q$o,H$o,FG,U$o,J$o,Y$o,RA,K$o,eme,Z$o,eko,oko,it,PA,rko,ome,tko,ako,Vi,nko,rme,sko,lko,TG,iko,dko,cko,W1,fko,oo,BA,mko,tme,gko,hko,Ra,pko,ame,_ko,uko,nme,bko,vko,sme,Fko,Tko,Mko,N,Q1,lme,Eko,Cko,MG,wko,Ako,yko,H1,ime,Lko,xko,EG,$ko,kko,Sko,U1,dme,Rko,Pko,CG,Bko,Iko,Nko,J1,cme,qko,jko,wG,Dko,Gko,Oko,Y1,fme,Vko,Xko,AG,zko,Wko,Qko,K1,mme,Hko,Uko,yG,Jko,Yko,Kko,Z1,gme,Zko,eSo,LG,oSo,rSo,tSo,eb,hme,aSo,nSo,xG,sSo,lSo,iSo,ob,pme,dSo,cSo,$G,fSo,mSo,gSo,rb,_me,hSo,pSo,kG,_So,uSo,bSo,tb,ume,vSo,FSo,SG,TSo,MSo,ESo,ab,bme,CSo,wSo,RG,ASo,ySo,LSo,nb,vme,xSo,$So,PG,kSo,SSo,RSo,sb,Fme,PSo,BSo,BG,ISo,NSo,qSo,lb,Tme,jSo,DSo,IG,GSo,OSo,VSo,ib,Mme,XSo,zSo,NG,WSo,QSo,HSo,db,Eme,USo,JSo,qG,YSo,KSo,ZSo,cb,Cme,eRo,oRo,jG,rRo,tRo,aRo,fb,wme,nRo,sRo,DG,lRo,iRo,dRo,mb,Ame,cRo,fRo,GG,mRo,gRo,hRo,gb,yme,pRo,_Ro,OG,uRo,bRo,vRo,hb,Lme,FRo,TRo,VG,MRo,ERo,CRo,pb,xme,wRo,ARo,XG,yRo,LRo,xRo,_b,$me,$Ro,kRo,zG,SRo,RRo,PRo,ub,kme,BRo,IRo,WG,NRo,qRo,jRo,bb,Sme,DRo,GRo,QG,ORo,VRo,XRo,vb,Rme,zRo,WRo,HG,QRo,HRo,URo,Fb,Pme,JRo,YRo,UG,KRo,ZRo,ePo,Tb,Bme,oPo,rPo,JG,tPo,aPo,nPo,Mb,Ime,sPo,lPo,YG,iPo,dPo,cPo,Eb,Nme,fPo,mPo,KG,gPo,hPo,pPo,Cb,qme,_Po,uPo,ZG,bPo,vPo,FPo,wb,jme,TPo,MPo,eO,EPo,CPo,wPo,Ab,Dme,APo,yPo,oO,LPo,xPo,$Po,yb,Gme,kPo,SPo,rO,RPo,PPo,BPo,Lb,Ome,IPo,NPo,tO,qPo,jPo,DPo,xb,Vme,GPo,OPo,aO,VPo,XPo,zPo,$b,Xme,WPo,QPo,nO,HPo,UPo,JPo,kb,zme,YPo,KPo,sO,ZPo,eBo,oBo,Sb,Wme,rBo,tBo,lO,aBo,nBo,sBo,Rb,Qme,lBo,iBo,iO,dBo,cBo,fBo,Pb,Hme,mBo,gBo,dO,hBo,pBo,_Bo,Bb,Ume,uBo,bBo,cO,vBo,FBo,TBo,Ib,Jme,MBo,EBo,fO,CBo,wBo,ABo,Nb,Yme,yBo,LBo,mO,xBo,$Bo,kBo,qb,Kme,SBo,RBo,gO,PBo,BBo,IBo,jb,Zme,NBo,qBo,hO,jBo,DBo,GBo,Db,OBo,ege,VBo,XBo,oge,zBo,WBo,Gb,Kqe,Xi,Ob,rge,IA,QBo,tge,HBo,Zqe,Po,NA,UBo,zi,JBo,pO,YBo,KBo,_O,ZBo,eIo,oIo,qA,rIo,age,tIo,aIo,nIo,dt,jA,sIo,nge,lIo,iIo,Wi,dIo,sge,cIo,fIo,uO,mIo,gIo,hIo,Vb,pIo,ro,DA,_Io,lge,uIo,bIo,Pa,vIo,ige,FIo,TIo,dge,MIo,EIo,cge,CIo,wIo,AIo,K,Xb,fge,yIo,LIo,bO,xIo,$Io,kIo,zb,mge,SIo,RIo,vO,PIo,BIo,IIo,Wb,gge,NIo,qIo,FO,jIo,DIo,GIo,Qb,hge,OIo,VIo,TO,XIo,zIo,WIo,Hb,pge,QIo,HIo,MO,UIo,JIo,YIo,Ub,_ge,KIo,ZIo,EO,eNo,oNo,rNo,Jb,uge,tNo,aNo,CO,nNo,sNo,lNo,Yb,bge,iNo,dNo,wO,cNo,fNo,mNo,Kb,vge,gNo,hNo,AO,pNo,_No,uNo,Zb,Fge,bNo,vNo,yO,FNo,TNo,MNo,ev,Tge,ENo,CNo,LO,wNo,ANo,yNo,ov,Mge,LNo,xNo,xO,$No,kNo,SNo,rv,Ege,RNo,PNo,$O,BNo,INo,NNo,tv,Cge,qNo,jNo,kO,DNo,GNo,ONo,av,wge,VNo,XNo,SO,zNo,WNo,QNo,nv,Age,HNo,UNo,RO,JNo,YNo,KNo,sv,yge,ZNo,eqo,PO,oqo,rqo,tqo,lv,Lge,aqo,nqo,BO,sqo,lqo,iqo,iv,xge,dqo,cqo,IO,fqo,mqo,gqo,dv,$ge,hqo,pqo,NO,_qo,uqo,bqo,cv,kge,vqo,Fqo,qO,Tqo,Mqo,Eqo,fv,Sge,Cqo,wqo,jO,Aqo,yqo,Lqo,mv,Rge,xqo,$qo,DO,kqo,Sqo,Rqo,gv,Pge,Pqo,Bqo,GO,Iqo,Nqo,qqo,hv,Bge,jqo,Dqo,OO,Gqo,Oqo,Vqo,pv,Ige,Xqo,zqo,VO,Wqo,Qqo,Hqo,_v,Nge,Uqo,Jqo,XO,Yqo,Kqo,Zqo,uv,qge,ejo,ojo,zO,rjo,tjo,ajo,bv,jge,njo,sjo,WO,ljo,ijo,djo,vv,cjo,Dge,fjo,mjo,Gge,gjo,hjo,Fv,eje,Qi,Tv,Oge,GA,pjo,Vge,_jo,oje,Bo,OA,ujo,Hi,bjo,QO,vjo,Fjo,HO,Tjo,Mjo,Ejo,VA,Cjo,Xge,wjo,Ajo,yjo,ct,XA,Ljo,zge,xjo,$jo,Ui,kjo,Wge,Sjo,Rjo,UO,Pjo,Bjo,Ijo,Mv,Njo,to,zA,qjo,Qge,jjo,Djo,Ba,Gjo,Hge,Ojo,Vjo,Uge,Xjo,zjo,Jge,Wjo,Qjo,Hjo,Yr,Ev,Yge,Ujo,Jjo,JO,Yjo,Kjo,Zjo,Cv,Kge,eDo,oDo,YO,rDo,tDo,aDo,wv,Zge,nDo,sDo,KO,lDo,iDo,dDo,Av,ehe,cDo,fDo,ZO,mDo,gDo,hDo,yv,ohe,pDo,_Do,eV,uDo,bDo,vDo,Lv,FDo,rhe,TDo,MDo,the,EDo,CDo,xv,rje,Ji,$v,ahe,WA,wDo,nhe,ADo,tje,Io,QA,yDo,Yi,LDo,oV,xDo,$Do,rV,kDo,SDo,RDo,HA,PDo,she,BDo,IDo,NDo,ft,UA,qDo,lhe,jDo,DDo,Ki,GDo,ihe,ODo,VDo,tV,XDo,zDo,WDo,kv,QDo,ao,JA,HDo,dhe,UDo,JDo,Ia,YDo,che,KDo,ZDo,fhe,eGo,oGo,mhe,rGo,tGo,aGo,H,Sv,ghe,nGo,sGo,aV,lGo,iGo,dGo,Rv,hhe,cGo,fGo,nV,mGo,gGo,hGo,Pv,phe,pGo,_Go,sV,uGo,bGo,vGo,Bv,_he,FGo,TGo,lV,MGo,EGo,CGo,Iv,uhe,wGo,AGo,iV,yGo,LGo,xGo,Nv,bhe,$Go,kGo,dV,SGo,RGo,PGo,qv,vhe,BGo,IGo,cV,NGo,qGo,jGo,jv,Fhe,DGo,GGo,fV,OGo,VGo,XGo,Dv,The,zGo,WGo,mV,QGo,HGo,UGo,Gv,Mhe,JGo,YGo,gV,KGo,ZGo,eOo,Ov,Ehe,oOo,rOo,hV,tOo,aOo,nOo,Vv,Che,sOo,lOo,pV,iOo,dOo,cOo,Xv,whe,fOo,mOo,_V,gOo,hOo,pOo,zv,Ahe,_Oo,uOo,uV,bOo,vOo,FOo,Wv,yhe,TOo,MOo,bV,EOo,COo,wOo,Qv,Lhe,AOo,yOo,vV,LOo,xOo,$Oo,Hv,xhe,kOo,SOo,FV,ROo,POo,BOo,Uv,$he,IOo,NOo,TV,qOo,jOo,DOo,Jv,khe,GOo,OOo,MV,VOo,XOo,zOo,Yv,She,WOo,QOo,EV,HOo,UOo,JOo,Kv,Rhe,YOo,KOo,CV,ZOo,eVo,oVo,Zv,Phe,rVo,tVo,wV,aVo,nVo,sVo,eF,Bhe,lVo,iVo,AV,dVo,cVo,fVo,oF,Ihe,mVo,gVo,yV,hVo,pVo,_Vo,rF,Nhe,uVo,bVo,LV,vVo,FVo,TVo,tF,qhe,MVo,EVo,xV,CVo,wVo,AVo,aF,jhe,yVo,LVo,$V,xVo,$Vo,kVo,nF,Dhe,SVo,RVo,kV,PVo,BVo,IVo,sF,Ghe,NVo,qVo,SV,jVo,DVo,GVo,lF,Ohe,OVo,VVo,RV,XVo,zVo,WVo,iF,Vhe,QVo,HVo,PV,UVo,JVo,YVo,dF,Xhe,KVo,ZVo,BV,eXo,oXo,rXo,cF,zhe,tXo,aXo,IV,nXo,sXo,lXo,fF,Whe,iXo,dXo,NV,cXo,fXo,mXo,mF,gXo,Qhe,hXo,pXo,Hhe,_Xo,uXo,gF,aje,Zi,hF,Uhe,YA,bXo,Jhe,vXo,nje,No,KA,FXo,ed,TXo,qV,MXo,EXo,jV,CXo,wXo,AXo,ZA,yXo,Yhe,LXo,xXo,$Xo,mt,ey,kXo,Khe,SXo,RXo,od,PXo,Zhe,BXo,IXo,DV,NXo,qXo,jXo,pF,DXo,no,oy,GXo,epe,OXo,VXo,Na,XXo,ope,zXo,WXo,rpe,QXo,HXo,tpe,UXo,JXo,YXo,V,_F,ape,KXo,ZXo,GV,ezo,ozo,rzo,uF,npe,tzo,azo,OV,nzo,szo,lzo,bF,spe,izo,dzo,VV,czo,fzo,mzo,vF,lpe,gzo,hzo,XV,pzo,_zo,uzo,FF,ipe,bzo,vzo,zV,Fzo,Tzo,Mzo,TF,dpe,Ezo,Czo,WV,wzo,Azo,yzo,MF,cpe,Lzo,xzo,QV,$zo,kzo,Szo,EF,fpe,Rzo,Pzo,HV,Bzo,Izo,Nzo,CF,mpe,qzo,jzo,UV,Dzo,Gzo,Ozo,wF,gpe,Vzo,Xzo,JV,zzo,Wzo,Qzo,AF,hpe,Hzo,Uzo,YV,Jzo,Yzo,Kzo,yF,ppe,Zzo,eWo,KV,oWo,rWo,tWo,LF,_pe,aWo,nWo,ZV,sWo,lWo,iWo,xF,upe,dWo,cWo,eX,fWo,mWo,gWo,$F,bpe,hWo,pWo,oX,_Wo,uWo,bWo,kF,vpe,vWo,FWo,rX,TWo,MWo,EWo,SF,Fpe,CWo,wWo,tX,AWo,yWo,LWo,RF,Tpe,xWo,$Wo,aX,kWo,SWo,RWo,PF,Mpe,PWo,BWo,nX,IWo,NWo,qWo,BF,Epe,jWo,DWo,sX,GWo,OWo,VWo,IF,Cpe,XWo,zWo,lX,WWo,QWo,HWo,NF,wpe,UWo,JWo,iX,YWo,KWo,ZWo,qF,Ape,eQo,oQo,dX,rQo,tQo,aQo,jF,ype,nQo,sQo,cX,lQo,iQo,dQo,DF,Lpe,cQo,fQo,fX,mQo,gQo,hQo,GF,xpe,pQo,_Qo,mX,uQo,bQo,vQo,OF,$pe,FQo,TQo,gX,MQo,EQo,CQo,VF,kpe,wQo,AQo,hX,yQo,LQo,xQo,XF,Spe,$Qo,kQo,pX,SQo,RQo,PQo,zF,Rpe,BQo,IQo,_X,NQo,qQo,jQo,WF,Ppe,DQo,GQo,uX,OQo,VQo,XQo,QF,Bpe,zQo,WQo,bX,QQo,HQo,UQo,HF,Ipe,JQo,YQo,vX,KQo,ZQo,eHo,UF,Npe,oHo,rHo,FX,tHo,aHo,nHo,JF,qpe,sHo,lHo,TX,iHo,dHo,cHo,YF,jpe,fHo,mHo,MX,gHo,hHo,pHo,KF,Dpe,_Ho,uHo,EX,bHo,vHo,FHo,ZF,Gpe,THo,MHo,CX,EHo,CHo,wHo,e6,Ope,AHo,yHo,wX,LHo,xHo,$Ho,o6,Vpe,kHo,SHo,AX,RHo,PHo,BHo,r6,IHo,Xpe,NHo,qHo,zpe,jHo,DHo,t6,sje,rd,a6,Wpe,ry,GHo,Qpe,OHo,lje,qo,ty,VHo,td,XHo,yX,zHo,WHo,LX,QHo,HHo,UHo,ay,JHo,Hpe,YHo,KHo,ZHo,gt,ny,eUo,Upe,oUo,rUo,ad,tUo,Jpe,aUo,nUo,xX,sUo,lUo,iUo,n6,dUo,so,sy,cUo,Ype,fUo,mUo,qa,gUo,Kpe,hUo,pUo,Zpe,_Uo,uUo,e_e,bUo,vUo,FUo,o_e,s6,r_e,TUo,MUo,$X,EUo,CUo,wUo,l6,AUo,t_e,yUo,LUo,a_e,xUo,$Uo,i6,ije,nd,d6,n_e,ly,kUo,s_e,SUo,dje,jo,iy,RUo,sd,PUo,kX,BUo,IUo,SX,NUo,qUo,jUo,dy,DUo,l_e,GUo,OUo,VUo,ht,cy,XUo,i_e,zUo,WUo,ld,QUo,d_e,HUo,UUo,RX,JUo,YUo,KUo,c6,ZUo,lo,fy,eJo,c_e,oJo,rJo,ja,tJo,f_e,aJo,nJo,m_e,sJo,lJo,g_e,iJo,dJo,cJo,Fe,f6,h_e,fJo,mJo,PX,gJo,hJo,pJo,m6,p_e,_Jo,uJo,BX,bJo,vJo,FJo,g6,__e,TJo,MJo,IX,EJo,CJo,wJo,h6,u_e,AJo,yJo,NX,LJo,xJo,$Jo,Is,b_e,kJo,SJo,qX,RJo,PJo,jX,BJo,IJo,NJo,p6,v_e,qJo,jJo,DX,DJo,GJo,OJo,pt,F_e,VJo,XJo,GX,zJo,WJo,OX,QJo,HJo,VX,UJo,JJo,YJo,_6,T_e,KJo,ZJo,XX,eYo,oYo,rYo,u6,M_e,tYo,aYo,zX,nYo,sYo,lYo,b6,E_e,iYo,dYo,WX,cYo,fYo,mYo,v6,C_e,gYo,hYo,QX,pYo,_Yo,uYo,F6,w_e,bYo,vYo,HX,FYo,TYo,MYo,T6,A_e,EYo,CYo,UX,wYo,AYo,yYo,M6,y_e,LYo,xYo,JX,$Yo,kYo,SYo,E6,RYo,L_e,PYo,BYo,x_e,IYo,NYo,C6,cje,id,w6,$_e,my,qYo,k_e,jYo,fje,Do,gy,DYo,dd,GYo,YX,OYo,VYo,KX,XYo,zYo,WYo,hy,QYo,S_e,HYo,UYo,JYo,_t,py,YYo,R_e,KYo,ZYo,cd,eKo,P_e,oKo,rKo,ZX,tKo,aKo,nKo,A6,sKo,io,_y,lKo,B_e,iKo,dKo,Da,cKo,I_e,fKo,mKo,N_e,gKo,hKo,q_e,pKo,_Ko,uKo,j_e,y6,D_e,bKo,vKo,ez,FKo,TKo,MKo,L6,EKo,G_e,CKo,wKo,O_e,AKo,yKo,x6,mje,fd,$6,V_e,uy,LKo,X_e,xKo,gje,Go,by,$Ko,md,kKo,oz,SKo,RKo,rz,PKo,BKo,IKo,vy,NKo,z_e,qKo,jKo,DKo,ut,Fy,GKo,W_e,OKo,VKo,gd,XKo,Q_e,zKo,WKo,tz,QKo,HKo,UKo,k6,JKo,co,Ty,YKo,H_e,KKo,ZKo,Ga,eZo,U_e,oZo,rZo,J_e,tZo,aZo,Y_e,nZo,sZo,lZo,Se,S6,K_e,iZo,dZo,az,cZo,fZo,mZo,R6,Z_e,gZo,hZo,nz,pZo,_Zo,uZo,P6,eue,bZo,vZo,sz,FZo,TZo,MZo,B6,oue,EZo,CZo,lz,wZo,AZo,yZo,I6,rue,LZo,xZo,iz,$Zo,kZo,SZo,N6,tue,RZo,PZo,dz,BZo,IZo,NZo,q6,aue,qZo,jZo,cz,DZo,GZo,OZo,j6,nue,VZo,XZo,fz,zZo,WZo,QZo,D6,sue,HZo,UZo,mz,JZo,YZo,KZo,G6,ZZo,lue,eer,oer,iue,rer,ter,O6,hje,hd,V6,due,My,aer,cue,ner,pje,Oo,Ey,ser,pd,ler,gz,ier,der,hz,cer,fer,mer,Cy,ger,fue,her,per,_er,bt,wy,uer,mue,ber,ver,_d,Fer,gue,Ter,Mer,pz,Eer,Cer,wer,X6,Aer,fo,Ay,yer,hue,Ler,xer,Oa,$er,pue,ker,Ser,_ue,Rer,Per,uue,Ber,Ier,Ner,Kr,z6,bue,qer,jer,_z,Der,Ger,Oer,W6,vue,Ver,Xer,uz,zer,Wer,Qer,Q6,Fue,Her,Uer,bz,Jer,Yer,Ker,H6,Tue,Zer,eor,vz,oor,ror,tor,U6,Mue,aor,nor,Fz,sor,lor,ior,J6,dor,Eue,cor,mor,Cue,gor,hor,Y6,_je,ud,K6,wue,yy,por,Aue,_or,uje,Vo,Ly,uor,bd,bor,Tz,vor,For,Mz,Tor,Mor,Eor,xy,Cor,yue,wor,Aor,yor,vt,$y,Lor,Lue,xor,$or,vd,kor,xue,Sor,Ror,Ez,Por,Bor,Ior,Z6,Nor,mo,ky,qor,$ue,jor,Dor,Va,Gor,kue,Oor,Vor,Sue,Xor,zor,Rue,Wor,Qor,Hor,Re,eT,Pue,Uor,Jor,Cz,Yor,Kor,Zor,oT,Bue,err,orr,wz,rrr,trr,arr,rT,Iue,nrr,srr,Az,lrr,irr,drr,tT,Nue,crr,frr,yz,mrr,grr,hrr,aT,que,prr,_rr,Lz,urr,brr,vrr,nT,jue,Frr,Trr,xz,Mrr,Err,Crr,sT,Due,wrr,Arr,$z,yrr,Lrr,xrr,lT,Gue,$rr,krr,kz,Srr,Rrr,Prr,iT,Oue,Brr,Irr,Sz,Nrr,qrr,jrr,dT,Drr,Vue,Grr,Orr,Xue,Vrr,Xrr,cT,bje,Fd,fT,zue,Sy,zrr,Wue,Wrr,vje,Xo,Ry,Qrr,Td,Hrr,Rz,Urr,Jrr,Pz,Yrr,Krr,Zrr,Py,etr,Que,otr,rtr,ttr,Ft,By,atr,Hue,ntr,str,Md,ltr,Uue,itr,dtr,Bz,ctr,ftr,mtr,mT,gtr,go,Iy,htr,Jue,ptr,_tr,Xa,utr,Yue,btr,vtr,Kue,Ftr,Ttr,Zue,Mtr,Etr,Ctr,Ny,gT,e2e,wtr,Atr,Iz,ytr,Ltr,xtr,hT,o2e,$tr,ktr,Nz,Str,Rtr,Ptr,pT,Btr,r2e,Itr,Ntr,t2e,qtr,jtr,_T,Fje,Ed,uT,a2e,qy,Dtr,n2e,Gtr,Tje,zo,jy,Otr,Cd,Vtr,qz,Xtr,ztr,jz,Wtr,Qtr,Htr,Dy,Utr,s2e,Jtr,Ytr,Ktr,Tt,Gy,Ztr,l2e,ear,oar,wd,rar,i2e,tar,aar,Dz,nar,sar,lar,bT,iar,ho,Oy,dar,d2e,car,far,za,mar,c2e,gar,har,f2e,par,_ar,m2e,uar,bar,Far,Zr,vT,g2e,Tar,Mar,Gz,Ear,Car,war,FT,h2e,Aar,yar,Oz,Lar,xar,$ar,TT,p2e,kar,Sar,Vz,Rar,Par,Bar,MT,_2e,Iar,Nar,Xz,qar,jar,Dar,ET,u2e,Gar,Oar,zz,Var,Xar,zar,CT,War,b2e,Qar,Har,v2e,Uar,Jar,wT,Mje,Ad,AT,F2e,Vy,Yar,T2e,Kar,Eje,Wo,Xy,Zar,yd,enr,Wz,onr,rnr,Qz,tnr,anr,nnr,zy,snr,M2e,lnr,inr,dnr,Mt,Wy,cnr,E2e,fnr,mnr,Ld,gnr,C2e,hnr,pnr,Hz,_nr,unr,bnr,yT,vnr,po,Qy,Fnr,w2e,Tnr,Mnr,Wa,Enr,A2e,Cnr,wnr,y2e,Anr,ynr,L2e,Lnr,xnr,$nr,xd,LT,x2e,knr,Snr,Uz,Rnr,Pnr,Bnr,xT,$2e,Inr,Nnr,Jz,qnr,jnr,Dnr,$T,k2e,Gnr,Onr,Yz,Vnr,Xnr,znr,kT,Wnr,S2e,Qnr,Hnr,R2e,Unr,Jnr,ST,Cje,$d,RT,P2e,Hy,Ynr,B2e,Knr,wje,Qo,Uy,Znr,kd,esr,Kz,osr,rsr,Zz,tsr,asr,nsr,Jy,ssr,I2e,lsr,isr,dsr,Et,Yy,csr,N2e,fsr,msr,Sd,gsr,q2e,hsr,psr,eW,_sr,usr,bsr,PT,vsr,_o,Ky,Fsr,j2e,Tsr,Msr,Qa,Esr,D2e,Csr,wsr,G2e,Asr,ysr,O2e,Lsr,xsr,$sr,Zy,BT,V2e,ksr,Ssr,oW,Rsr,Psr,Bsr,IT,X2e,Isr,Nsr,rW,qsr,jsr,Dsr,NT,Gsr,z2e,Osr,Vsr,W2e,Xsr,zsr,qT,Aje,Rd,jT,Q2e,eL,Wsr,H2e,Qsr,yje,Ho,oL,Hsr,Pd,Usr,tW,Jsr,Ysr,aW,Ksr,Zsr,elr,rL,olr,U2e,rlr,tlr,alr,Ct,tL,nlr,J2e,slr,llr,Bd,ilr,Y2e,dlr,clr,nW,flr,mlr,glr,DT,hlr,uo,aL,plr,K2e,_lr,ulr,Ha,blr,Z2e,vlr,Flr,e1e,Tlr,Mlr,o1e,Elr,Clr,wlr,r1e,GT,t1e,Alr,ylr,sW,Llr,xlr,$lr,OT,klr,a1e,Slr,Rlr,n1e,Plr,Blr,VT,Lje,Id,XT,s1e,nL,Ilr,l1e,Nlr,xje,Uo,sL,qlr,Nd,jlr,lW,Dlr,Glr,iW,Olr,Vlr,Xlr,lL,zlr,i1e,Wlr,Qlr,Hlr,wt,iL,Ulr,d1e,Jlr,Ylr,qd,Klr,c1e,Zlr,eir,dW,oir,rir,tir,zT,air,bo,dL,nir,f1e,sir,lir,Ua,iir,m1e,dir,cir,g1e,fir,mir,h1e,gir,hir,pir,Ja,WT,p1e,_ir,uir,cW,bir,vir,Fir,QT,_1e,Tir,Mir,fW,Eir,Cir,wir,HT,u1e,Air,yir,mW,Lir,xir,$ir,UT,b1e,kir,Sir,gW,Rir,Pir,Bir,JT,Iir,v1e,Nir,qir,F1e,jir,Dir,YT,$je,jd,KT,T1e,cL,Gir,M1e,Oir,kje,Jo,fL,Vir,Dd,Xir,hW,zir,Wir,pW,Qir,Hir,Uir,mL,Jir,E1e,Yir,Kir,Zir,At,gL,edr,C1e,odr,rdr,Gd,tdr,w1e,adr,ndr,_W,sdr,ldr,idr,ZT,ddr,vo,hL,cdr,A1e,fdr,mdr,Ya,gdr,y1e,hdr,pdr,L1e,_dr,udr,x1e,bdr,vdr,Fdr,$1e,e7,k1e,Tdr,Mdr,uW,Edr,Cdr,wdr,o7,Adr,S1e,ydr,Ldr,R1e,xdr,$dr,r7,Sje,Od,t7,P1e,pL,kdr,B1e,Sdr,Rje,Yo,_L,Rdr,Vd,Pdr,bW,Bdr,Idr,vW,Ndr,qdr,jdr,uL,Ddr,I1e,Gdr,Odr,Vdr,yt,bL,Xdr,N1e,zdr,Wdr,Xd,Qdr,q1e,Hdr,Udr,FW,Jdr,Ydr,Kdr,a7,Zdr,wr,vL,ecr,j1e,ocr,rcr,Ka,tcr,D1e,acr,ncr,G1e,scr,lcr,O1e,icr,dcr,ccr,q,n7,V1e,fcr,mcr,TW,gcr,hcr,pcr,s7,X1e,_cr,ucr,MW,bcr,vcr,Fcr,l7,z1e,Tcr,Mcr,EW,Ecr,Ccr,wcr,i7,W1e,Acr,ycr,CW,Lcr,xcr,$cr,d7,Q1e,kcr,Scr,wW,Rcr,Pcr,Bcr,c7,H1e,Icr,Ncr,AW,qcr,jcr,Dcr,f7,U1e,Gcr,Ocr,yW,Vcr,Xcr,zcr,m7,J1e,Wcr,Qcr,LW,Hcr,Ucr,Jcr,g7,Y1e,Ycr,Kcr,xW,Zcr,efr,ofr,h7,K1e,rfr,tfr,$W,afr,nfr,sfr,p7,Z1e,lfr,ifr,kW,dfr,cfr,ffr,_7,ebe,mfr,gfr,SW,hfr,pfr,_fr,u7,obe,ufr,bfr,RW,vfr,Ffr,Tfr,b7,rbe,Mfr,Efr,PW,Cfr,wfr,Afr,v7,tbe,yfr,Lfr,BW,xfr,$fr,kfr,F7,abe,Sfr,Rfr,IW,Pfr,Bfr,Ifr,T7,nbe,Nfr,qfr,NW,jfr,Dfr,Gfr,Ns,sbe,Ofr,Vfr,qW,Xfr,zfr,jW,Wfr,Qfr,Hfr,M7,lbe,Ufr,Jfr,DW,Yfr,Kfr,Zfr,E7,ibe,emr,omr,GW,rmr,tmr,amr,C7,dbe,nmr,smr,OW,lmr,imr,dmr,w7,cbe,cmr,fmr,VW,mmr,gmr,hmr,A7,fbe,pmr,_mr,XW,umr,bmr,vmr,y7,mbe,Fmr,Tmr,zW,Mmr,Emr,Cmr,L7,gbe,wmr,Amr,WW,ymr,Lmr,xmr,x7,hbe,$mr,kmr,QW,Smr,Rmr,Pmr,$7,pbe,Bmr,Imr,HW,Nmr,qmr,jmr,k7,_be,Dmr,Gmr,UW,Omr,Vmr,Xmr,S7,ube,zmr,Wmr,JW,Qmr,Hmr,Umr,R7,bbe,Jmr,Ymr,YW,Kmr,Zmr,egr,P7,vbe,ogr,rgr,KW,tgr,agr,ngr,B7,Fbe,sgr,lgr,ZW,igr,dgr,cgr,I7,Tbe,fgr,mgr,eQ,ggr,hgr,pgr,N7,Mbe,_gr,ugr,oQ,bgr,vgr,Fgr,q7,Ebe,Tgr,Mgr,rQ,Egr,Cgr,wgr,j7,Cbe,Agr,ygr,tQ,Lgr,xgr,$gr,D7,wbe,kgr,Sgr,aQ,Rgr,Pgr,Bgr,G7,Abe,Igr,Ngr,nQ,qgr,jgr,Dgr,O7,ybe,Ggr,Ogr,sQ,Vgr,Xgr,zgr,V7,Lbe,Wgr,Qgr,lQ,Hgr,Ugr,Jgr,X7,xbe,Ygr,Kgr,iQ,Zgr,ehr,ohr,z7,$be,rhr,thr,dQ,ahr,nhr,shr,W7,kbe,lhr,ihr,cQ,dhr,chr,fhr,Q7,Sbe,mhr,ghr,fQ,hhr,phr,_hr,H7,Rbe,uhr,bhr,mQ,vhr,Fhr,Thr,U7,Pbe,Mhr,Ehr,gQ,Chr,whr,Ahr,J7,Pje,zd,Y7,Bbe,FL,yhr,Ibe,Lhr,Bje,Ko,TL,xhr,Wd,$hr,hQ,khr,Shr,pQ,Rhr,Phr,Bhr,ML,Ihr,Nbe,Nhr,qhr,jhr,Lt,EL,Dhr,qbe,Ghr,Ohr,Qd,Vhr,jbe,Xhr,zhr,_Q,Whr,Qhr,Hhr,K7,Uhr,Ar,CL,Jhr,Dbe,Yhr,Khr,Za,Zhr,Gbe,epr,opr,Obe,rpr,tpr,Vbe,apr,npr,spr,se,Z7,Xbe,lpr,ipr,uQ,dpr,cpr,fpr,e9,zbe,mpr,gpr,bQ,hpr,ppr,_pr,o9,Wbe,upr,bpr,vQ,vpr,Fpr,Tpr,r9,Qbe,Mpr,Epr,FQ,Cpr,wpr,Apr,t9,Hbe,ypr,Lpr,TQ,xpr,$pr,kpr,a9,Ube,Spr,Rpr,MQ,Ppr,Bpr,Ipr,n9,Jbe,Npr,qpr,EQ,jpr,Dpr,Gpr,s9,Ybe,Opr,Vpr,CQ,Xpr,zpr,Wpr,l9,Kbe,Qpr,Hpr,wQ,Upr,Jpr,Ypr,i9,Zbe,Kpr,Zpr,AQ,e_r,o_r,r_r,d9,eve,t_r,a_r,yQ,n_r,s_r,l_r,c9,ove,i_r,d_r,LQ,c_r,f_r,m_r,f9,rve,g_r,h_r,xQ,p_r,__r,u_r,m9,tve,b_r,v_r,$Q,F_r,T_r,M_r,g9,ave,E_r,C_r,kQ,w_r,A_r,y_r,h9,nve,L_r,x_r,SQ,$_r,k_r,S_r,p9,sve,R_r,P_r,RQ,B_r,I_r,N_r,_9,lve,q_r,j_r,PQ,D_r,G_r,O_r,u9,ive,V_r,X_r,BQ,z_r,W_r,Q_r,b9,dve,H_r,U_r,IQ,J_r,Y_r,K_r,v9,cve,Z_r,eur,NQ,our,rur,tur,F9,fve,aur,nur,qQ,sur,lur,iur,T9,mve,dur,cur,jQ,fur,mur,gur,M9,Ije,Hd,E9,gve,wL,hur,hve,pur,Nje,Zo,AL,_ur,Ud,uur,DQ,bur,vur,GQ,Fur,Tur,Mur,yL,Eur,pve,Cur,wur,Aur,xt,LL,yur,_ve,Lur,xur,Jd,$ur,uve,kur,Sur,OQ,Rur,Pur,Bur,C9,Iur,yr,xL,Nur,bve,qur,jur,en,Dur,vve,Gur,Our,Fve,Vur,Xur,Tve,zur,Wur,Qur,Ee,w9,Mve,Hur,Uur,VQ,Jur,Yur,Kur,A9,Eve,Zur,e2r,XQ,o2r,r2r,t2r,y9,Cve,a2r,n2r,zQ,s2r,l2r,i2r,L9,wve,d2r,c2r,WQ,f2r,m2r,g2r,x9,Ave,h2r,p2r,QQ,_2r,u2r,b2r,$9,yve,v2r,F2r,HQ,T2r,M2r,E2r,k9,Lve,C2r,w2r,UQ,A2r,y2r,L2r,S9,xve,x2r,$2r,JQ,k2r,S2r,R2r,R9,$ve,P2r,B2r,YQ,I2r,N2r,q2r,P9,kve,j2r,D2r,KQ,G2r,O2r,V2r,B9,Sve,X2r,z2r,ZQ,W2r,Q2r,H2r,I9,Rve,U2r,J2r,eH,Y2r,K2r,Z2r,N9,qje,Yd,q9,Pve,$L,e1r,Bve,o1r,jje,er,kL,r1r,Kd,t1r,oH,a1r,n1r,rH,s1r,l1r,i1r,SL,d1r,Ive,c1r,f1r,m1r,$t,RL,g1r,Nve,h1r,p1r,Zd,_1r,qve,u1r,b1r,tH,v1r,F1r,T1r,j9,M1r,Lr,PL,E1r,jve,C1r,w1r,on,A1r,Dve,y1r,L1r,Gve,x1r,$1r,Ove,k1r,S1r,R1r,rn,D9,Vve,P1r,B1r,aH,I1r,N1r,q1r,G9,Xve,j1r,D1r,nH,G1r,O1r,V1r,O9,zve,X1r,z1r,sH,W1r,Q1r,H1r,V9,Wve,U1r,J1r,lH,Y1r,K1r,Z1r,X9,Dje,ec,z9,Qve,BL,ebr,Hve,obr,Gje,or,IL,rbr,oc,tbr,iH,abr,nbr,dH,sbr,lbr,ibr,NL,dbr,Uve,cbr,fbr,mbr,kt,qL,gbr,Jve,hbr,pbr,rc,_br,Yve,ubr,bbr,cH,vbr,Fbr,Tbr,W9,Mbr,xr,jL,Ebr,Kve,Cbr,wbr,tn,Abr,Zve,ybr,Lbr,eFe,xbr,$br,oFe,kbr,Sbr,Rbr,ie,Q9,rFe,Pbr,Bbr,fH,Ibr,Nbr,qbr,H9,tFe,jbr,Dbr,mH,Gbr,Obr,Vbr,U9,aFe,Xbr,zbr,gH,Wbr,Qbr,Hbr,J9,nFe,Ubr,Jbr,hH,Ybr,Kbr,Zbr,Y9,sFe,evr,ovr,pH,rvr,tvr,avr,K9,lFe,nvr,svr,_H,lvr,ivr,dvr,Z9,iFe,cvr,fvr,uH,mvr,gvr,hvr,eM,dFe,pvr,_vr,bH,uvr,bvr,vvr,oM,cFe,Fvr,Tvr,vH,Mvr,Evr,Cvr,rM,fFe,wvr,Avr,FH,yvr,Lvr,xvr,tM,mFe,$vr,kvr,TH,Svr,Rvr,Pvr,aM,gFe,Bvr,Ivr,MH,Nvr,qvr,jvr,nM,hFe,Dvr,Gvr,EH,Ovr,Vvr,Xvr,sM,pFe,zvr,Wvr,CH,Qvr,Hvr,Uvr,lM,_Fe,Jvr,Yvr,wH,Kvr,Zvr,eFr,iM,uFe,oFr,rFr,AH,tFr,aFr,nFr,dM,bFe,sFr,lFr,yH,iFr,dFr,cFr,cM,vFe,fFr,mFr,LH,gFr,hFr,pFr,fM,FFe,_Fr,uFr,xH,bFr,vFr,FFr,mM,TFe,TFr,MFr,$H,EFr,CFr,wFr,gM,Oje,tc,hM,MFe,DL,AFr,EFe,yFr,Vje,rr,GL,LFr,ac,xFr,kH,$Fr,kFr,SH,SFr,RFr,PFr,OL,BFr,CFe,IFr,NFr,qFr,St,VL,jFr,wFe,DFr,GFr,nc,OFr,AFe,VFr,XFr,RH,zFr,WFr,QFr,pM,HFr,$r,XL,UFr,yFe,JFr,YFr,an,KFr,LFe,ZFr,e6r,xFe,o6r,r6r,$Fe,t6r,a6r,n6r,ye,_M,kFe,s6r,l6r,PH,i6r,d6r,c6r,uM,SFe,f6r,m6r,BH,g6r,h6r,p6r,bM,RFe,_6r,u6r,IH,b6r,v6r,F6r,vM,PFe,T6r,M6r,NH,E6r,C6r,w6r,FM,BFe,A6r,y6r,qH,L6r,x6r,$6r,TM,IFe,k6r,S6r,jH,R6r,P6r,B6r,MM,NFe,I6r,N6r,DH,q6r,j6r,D6r,EM,qFe,G6r,O6r,GH,V6r,X6r,z6r,CM,jFe,W6r,Q6r,OH,H6r,U6r,J6r,wM,DFe,Y6r,K6r,VH,Z6r,eTr,oTr,AM,Xje,sc,yM,GFe,zL,rTr,OFe,tTr,zje,tr,WL,aTr,lc,nTr,XH,sTr,lTr,zH,iTr,dTr,cTr,QL,fTr,VFe,mTr,gTr,hTr,Rt,HL,pTr,XFe,_Tr,uTr,ic,bTr,zFe,vTr,FTr,WH,TTr,MTr,ETr,LM,CTr,kr,UL,wTr,WFe,ATr,yTr,nn,LTr,QFe,xTr,$Tr,HFe,kTr,STr,UFe,RTr,PTr,BTr,oe,xM,JFe,ITr,NTr,QH,qTr,jTr,DTr,$M,YFe,GTr,OTr,HH,VTr,XTr,zTr,kM,KFe,WTr,QTr,UH,HTr,UTr,JTr,SM,ZFe,YTr,KTr,JH,ZTr,e7r,o7r,RM,e6e,r7r,t7r,YH,a7r,n7r,s7r,PM,o6e,l7r,i7r,KH,d7r,c7r,f7r,BM,r6e,m7r,g7r,ZH,h7r,p7r,_7r,IM,t6e,u7r,b7r,eU,v7r,F7r,T7r,NM,a6e,M7r,E7r,oU,C7r,w7r,A7r,qM,n6e,y7r,L7r,rU,x7r,$7r,k7r,jM,s6e,S7r,R7r,tU,P7r,B7r,I7r,DM,l6e,N7r,q7r,aU,j7r,D7r,G7r,GM,i6e,O7r,V7r,nU,X7r,z7r,W7r,OM,d6e,Q7r,H7r,sU,U7r,J7r,Y7r,VM,c6e,K7r,Z7r,lU,e9r,o9r,r9r,XM,f6e,t9r,a9r,iU,n9r,s9r,l9r,zM,m6e,i9r,d9r,dU,c9r,f9r,m9r,WM,g6e,g9r,h9r,cU,p9r,_9r,u9r,QM,h6e,b9r,v9r,fU,F9r,T9r,M9r,HM,p6e,E9r,C9r,mU,w9r,A9r,y9r,UM,_6e,L9r,x9r,gU,$9r,k9r,S9r,JM,u6e,R9r,P9r,hU,B9r,I9r,N9r,YM,b6e,q9r,j9r,pU,D9r,G9r,O9r,KM,v6e,V9r,X9r,_U,z9r,W9r,Q9r,ZM,F6e,H9r,U9r,uU,J9r,Y9r,K9r,e4,T6e,Z9r,eMr,bU,oMr,rMr,tMr,o4,Wje,dc,r4,M6e,JL,aMr,E6e,nMr,Qje,ar,YL,sMr,cc,lMr,vU,iMr,dMr,FU,cMr,fMr,mMr,KL,gMr,C6e,hMr,pMr,_Mr,Pt,ZL,uMr,w6e,bMr,vMr,fc,FMr,A6e,TMr,MMr,TU,EMr,CMr,wMr,t4,AMr,Sr,e8,yMr,y6e,LMr,xMr,sn,$Mr,L6e,kMr,SMr,x6e,RMr,PMr,$6e,BMr,IMr,NMr,_e,a4,k6e,qMr,jMr,MU,DMr,GMr,OMr,n4,S6e,VMr,XMr,EU,zMr,WMr,QMr,s4,R6e,HMr,UMr,CU,JMr,YMr,KMr,l4,P6e,ZMr,e4r,wU,o4r,r4r,t4r,i4,B6e,a4r,n4r,AU,s4r,l4r,i4r,d4,I6e,d4r,c4r,yU,f4r,m4r,g4r,c4,N6e,h4r,p4r,LU,_4r,u4r,b4r,f4,q6e,v4r,F4r,xU,T4r,M4r,E4r,m4,j6e,C4r,w4r,$U,A4r,y4r,L4r,g4,D6e,x4r,$4r,kU,k4r,S4r,R4r,h4,G6e,P4r,B4r,SU,I4r,N4r,q4r,p4,O6e,j4r,D4r,RU,G4r,O4r,V4r,_4,V6e,X4r,z4r,PU,W4r,Q4r,H4r,u4,X6e,U4r,J4r,BU,Y4r,K4r,Z4r,b4,z6e,eEr,oEr,IU,rEr,tEr,aEr,v4,W6e,nEr,sEr,NU,lEr,iEr,dEr,F4,Q6e,cEr,fEr,qU,mEr,gEr,hEr,T4,Hje,mc,M4,H6e,o8,pEr,U6e,_Er,Uje,nr,r8,uEr,gc,bEr,jU,vEr,FEr,DU,TEr,MEr,EEr,t8,CEr,J6e,wEr,AEr,yEr,Bt,a8,LEr,Y6e,xEr,$Er,hc,kEr,K6e,SEr,REr,GU,PEr,BEr,IEr,E4,NEr,Rr,n8,qEr,Z6e,jEr,DEr,ln,GEr,eTe,OEr,VEr,oTe,XEr,zEr,rTe,WEr,QEr,HEr,s8,C4,tTe,UEr,JEr,OU,YEr,KEr,ZEr,w4,aTe,eCr,oCr,VU,rCr,tCr,aCr,A4,Jje,pc,y4,nTe,l8,nCr,sTe,sCr,Yje,sr,i8,lCr,_c,iCr,XU,dCr,cCr,zU,fCr,mCr,gCr,d8,hCr,lTe,pCr,_Cr,uCr,It,c8,bCr,iTe,vCr,FCr,uc,TCr,dTe,MCr,ECr,WU,CCr,wCr,ACr,L4,yCr,Pr,f8,LCr,cTe,xCr,$Cr,dn,kCr,fTe,SCr,RCr,mTe,PCr,BCr,gTe,ICr,NCr,qCr,hTe,x4,pTe,jCr,DCr,QU,GCr,OCr,VCr,$4,Kje,bc,k4,_Te,m8,XCr,uTe,zCr,Zje,lr,g8,WCr,vc,QCr,HU,HCr,UCr,UU,JCr,YCr,KCr,h8,ZCr,bTe,e5r,o5r,r5r,Nt,p8,t5r,vTe,a5r,n5r,Fc,s5r,FTe,l5r,i5r,JU,d5r,c5r,f5r,S4,m5r,Br,_8,g5r,TTe,h5r,p5r,cn,_5r,MTe,u5r,b5r,ETe,v5r,F5r,CTe,T5r,M5r,E5r,de,R4,wTe,C5r,w5r,YU,A5r,y5r,L5r,P4,ATe,x5r,$5r,KU,k5r,S5r,R5r,B4,yTe,P5r,B5r,ZU,I5r,N5r,q5r,I4,LTe,j5r,D5r,eJ,G5r,O5r,V5r,N4,xTe,X5r,z5r,oJ,W5r,Q5r,H5r,q4,$Te,U5r,J5r,rJ,Y5r,K5r,Z5r,j4,kTe,e3r,o3r,tJ,r3r,t3r,a3r,D4,STe,n3r,s3r,aJ,l3r,i3r,d3r,G4,RTe,c3r,f3r,nJ,m3r,g3r,h3r,O4,PTe,p3r,_3r,sJ,u3r,b3r,v3r,V4,BTe,F3r,T3r,lJ,M3r,E3r,C3r,X4,ITe,w3r,A3r,iJ,y3r,L3r,x3r,z4,NTe,$3r,k3r,dJ,S3r,R3r,P3r,W4,qTe,B3r,I3r,cJ,N3r,q3r,j3r,Q4,jTe,D3r,G3r,fJ,O3r,V3r,X3r,H4,DTe,z3r,W3r,mJ,Q3r,H3r,U3r,U4,GTe,J3r,Y3r,gJ,K3r,Z3r,ewr,J4,OTe,owr,rwr,hJ,twr,awr,nwr,Y4,VTe,swr,lwr,pJ,iwr,dwr,cwr,K4,XTe,fwr,mwr,_J,gwr,hwr,pwr,Z4,eDe,Tc,eE,zTe,u8,_wr,WTe,uwr,oDe,ir,b8,bwr,Mc,vwr,uJ,Fwr,Twr,bJ,Mwr,Ewr,Cwr,v8,wwr,QTe,Awr,ywr,Lwr,qt,F8,xwr,HTe,$wr,kwr,Ec,Swr,UTe,Rwr,Pwr,vJ,Bwr,Iwr,Nwr,oE,qwr,Ir,T8,jwr,JTe,Dwr,Gwr,fn,Owr,YTe,Vwr,Xwr,KTe,zwr,Wwr,ZTe,Qwr,Hwr,Uwr,ce,rE,e7e,Jwr,Ywr,FJ,Kwr,Zwr,e0r,tE,o7e,o0r,r0r,TJ,t0r,a0r,n0r,aE,r7e,s0r,l0r,MJ,i0r,d0r,c0r,nE,t7e,f0r,m0r,EJ,g0r,h0r,p0r,sE,a7e,_0r,u0r,CJ,b0r,v0r,F0r,lE,n7e,T0r,M0r,wJ,E0r,C0r,w0r,iE,s7e,A0r,y0r,AJ,L0r,x0r,$0r,dE,l7e,k0r,S0r,yJ,R0r,P0r,B0r,cE,i7e,I0r,N0r,LJ,q0r,j0r,D0r,fE,d7e,G0r,O0r,xJ,V0r,X0r,z0r,mE,c7e,W0r,Q0r,$J,H0r,U0r,J0r,gE,f7e,Y0r,K0r,kJ,Z0r,eAr,oAr,hE,m7e,rAr,tAr,SJ,aAr,nAr,sAr,pE,g7e,lAr,iAr,RJ,dAr,cAr,fAr,_E,h7e,mAr,gAr,PJ,hAr,pAr,_Ar,uE,p7e,uAr,bAr,BJ,vAr,FAr,TAr,bE,_7e,MAr,EAr,IJ,CAr,wAr,AAr,vE,u7e,yAr,LAr,NJ,xAr,$Ar,kAr,FE,b7e,SAr,RAr,qJ,PAr,BAr,IAr,TE,v7e,NAr,qAr,jJ,jAr,DAr,GAr,ME,rDe,Cc,EE,F7e,M8,OAr,T7e,VAr,tDe,dr,E8,XAr,wc,zAr,DJ,WAr,QAr,GJ,HAr,UAr,JAr,C8,YAr,M7e,KAr,ZAr,eyr,jt,w8,oyr,E7e,ryr,tyr,Ac,ayr,C7e,nyr,syr,OJ,lyr,iyr,dyr,CE,cyr,Nr,A8,fyr,w7e,myr,gyr,mn,hyr,A7e,pyr,_yr,y7e,uyr,byr,L7e,vyr,Fyr,Tyr,x7e,wE,$7e,Myr,Eyr,VJ,Cyr,wyr,Ayr,AE,aDe,yc,yE,k7e,y8,yyr,S7e,Lyr,nDe,cr,L8,xyr,Lc,$yr,XJ,kyr,Syr,zJ,Ryr,Pyr,Byr,x8,Iyr,R7e,Nyr,qyr,jyr,Dt,$8,Dyr,P7e,Gyr,Oyr,xc,Vyr,B7e,Xyr,zyr,WJ,Wyr,Qyr,Hyr,LE,Uyr,qr,k8,Jyr,I7e,Yyr,Kyr,gn,Zyr,N7e,eLr,oLr,q7e,rLr,tLr,j7e,aLr,nLr,sLr,D7e,xE,G7e,lLr,iLr,QJ,dLr,cLr,fLr,$E,sDe,$c,kE,O7e,S8,mLr,V7e,gLr,lDe,fr,R8,hLr,kc,pLr,HJ,_Lr,uLr,UJ,bLr,vLr,FLr,P8,TLr,X7e,MLr,ELr,CLr,Gt,B8,wLr,z7e,ALr,yLr,Sc,LLr,W7e,xLr,$Lr,JJ,kLr,SLr,RLr,SE,PLr,jr,I8,BLr,Q7e,ILr,NLr,hn,qLr,H7e,jLr,DLr,U7e,GLr,OLr,J7e,VLr,XLr,zLr,re,RE,Y7e,WLr,QLr,YJ,HLr,ULr,JLr,PE,K7e,YLr,KLr,KJ,ZLr,e8r,o8r,BE,Z7e,r8r,t8r,ZJ,a8r,n8r,s8r,IE,e9e,l8r,i8r,eY,d8r,c8r,f8r,NE,o9e,m8r,g8r,oY,h8r,p8r,_8r,qE,r9e,u8r,b8r,rY,v8r,F8r,T8r,jE,t9e,M8r,E8r,tY,C8r,w8r,A8r,DE,a9e,y8r,L8r,aY,x8r,$8r,k8r,GE,n9e,S8r,R8r,nY,P8r,B8r,I8r,OE,s9e,N8r,q8r,sY,j8r,D8r,G8r,VE,l9e,O8r,V8r,lY,X8r,z8r,W8r,XE,i9e,Q8r,H8r,iY,U8r,J8r,Y8r,zE,d9e,K8r,Z8r,dY,exr,oxr,rxr,WE,c9e,txr,axr,cY,nxr,sxr,lxr,QE,f9e,ixr,dxr,fY,cxr,fxr,mxr,HE,m9e,gxr,hxr,mY,pxr,_xr,uxr,UE,g9e,bxr,vxr,gY,Fxr,Txr,Mxr,JE,h9e,Exr,Cxr,hY,wxr,Axr,yxr,YE,p9e,Lxr,xxr,pY,$xr,kxr,Sxr,KE,_9e,Rxr,Pxr,_Y,Bxr,Ixr,Nxr,ZE,u9e,qxr,jxr,uY,Dxr,Gxr,Oxr,eC,b9e,Vxr,Xxr,bY,zxr,Wxr,Qxr,oC,v9e,Hxr,Uxr,vY,Jxr,Yxr,Kxr,rC,F9e,Zxr,e$r,FY,o$r,r$r,t$r,tC,T9e,a$r,n$r,TY,s$r,l$r,i$r,aC,M9e,d$r,c$r,MY,f$r,m$r,g$r,nC,iDe,Rc,sC,E9e,N8,h$r,C9e,p$r,dDe,mr,q8,_$r,Pc,u$r,EY,b$r,v$r,CY,F$r,T$r,M$r,j8,E$r,w9e,C$r,w$r,A$r,Ot,D8,y$r,A9e,L$r,x$r,Bc,$$r,y9e,k$r,S$r,wY,R$r,P$r,B$r,lC,I$r,Dr,G8,N$r,L9e,q$r,j$r,pn,D$r,x9e,G$r,O$r,$9e,V$r,X$r,k9e,z$r,W$r,Q$r,Pe,iC,S9e,H$r,U$r,AY,J$r,Y$r,K$r,dC,R9e,Z$r,ekr,yY,okr,rkr,tkr,cC,P9e,akr,nkr,LY,skr,lkr,ikr,fC,B9e,dkr,ckr,xY,fkr,mkr,gkr,mC,I9e,hkr,pkr,$Y,_kr,ukr,bkr,gC,N9e,vkr,Fkr,kY,Tkr,Mkr,Ekr,hC,q9e,Ckr,wkr,SY,Akr,ykr,Lkr,pC,j9e,xkr,$kr,RY,kkr,Skr,Rkr,_C,D9e,Pkr,Bkr,PY,Ikr,Nkr,qkr,uC,cDe,Ic,bC,G9e,O8,jkr,O9e,Dkr,fDe,gr,V8,Gkr,Nc,Okr,BY,Vkr,Xkr,IY,zkr,Wkr,Qkr,X8,Hkr,V9e,Ukr,Jkr,Ykr,Vt,z8,Kkr,X9e,Zkr,eSr,qc,oSr,z9e,rSr,tSr,NY,aSr,nSr,sSr,vC,lSr,Gr,W8,iSr,W9e,dSr,cSr,_n,fSr,Q9e,mSr,gSr,H9e,hSr,pSr,U9e,_Sr,uSr,bSr,Te,FC,J9e,vSr,FSr,qY,TSr,MSr,ESr,TC,Y9e,CSr,wSr,jY,ASr,ySr,LSr,MC,K9e,xSr,$Sr,DY,kSr,SSr,RSr,EC,Z9e,PSr,BSr,GY,ISr,NSr,qSr,CC,eMe,jSr,DSr,OY,GSr,OSr,VSr,wC,oMe,XSr,zSr,VY,WSr,QSr,HSr,AC,rMe,USr,JSr,XY,YSr,KSr,ZSr,yC,tMe,eRr,oRr,zY,rRr,tRr,aRr,LC,aMe,nRr,sRr,WY,lRr,iRr,dRr,xC,nMe,cRr,fRr,QY,mRr,gRr,hRr,$C,sMe,pRr,_Rr,HY,uRr,bRr,vRr,kC,lMe,FRr,TRr,UY,MRr,ERr,CRr,SC,iMe,wRr,ARr,JY,yRr,LRr,xRr,RC,mDe,jc,PC,dMe,Q8,$Rr,cMe,kRr,gDe,hr,H8,SRr,Dc,RRr,YY,PRr,BRr,KY,IRr,NRr,qRr,U8,jRr,fMe,DRr,GRr,ORr,Xt,J8,VRr,mMe,XRr,zRr,Gc,WRr,gMe,QRr,HRr,ZY,URr,JRr,YRr,BC,KRr,Or,Y8,ZRr,hMe,ePr,oPr,un,rPr,pMe,tPr,aPr,_Me,nPr,sPr,uMe,lPr,iPr,dPr,Le,IC,bMe,cPr,fPr,eK,mPr,gPr,hPr,NC,vMe,pPr,_Pr,oK,uPr,bPr,vPr,qC,FMe,FPr,TPr,rK,MPr,EPr,CPr,jC,TMe,wPr,APr,tK,yPr,LPr,xPr,DC,MMe,$Pr,kPr,aK,SPr,RPr,PPr,GC,EMe,BPr,IPr,nK,NPr,qPr,jPr,OC,CMe,DPr,GPr,sK,OPr,VPr,XPr,VC,wMe,zPr,WPr,lK,QPr,HPr,UPr,XC,AMe,JPr,YPr,iK,KPr,ZPr,eBr,zC,yMe,oBr,rBr,dK,tBr,aBr,nBr,WC,hDe,Oc,QC,LMe,K8,sBr,xMe,lBr,pDe,pr,Z8,iBr,Vc,dBr,cK,cBr,fBr,fK,mBr,gBr,hBr,ex,pBr,$Me,_Br,uBr,bBr,zt,ox,vBr,kMe,FBr,TBr,Xc,MBr,SMe,EBr,CBr,mK,wBr,ABr,yBr,HC,LBr,Vr,rx,xBr,RMe,$Br,kBr,bn,SBr,PMe,RBr,PBr,BMe,BBr,IBr,IMe,NBr,qBr,jBr,xe,UC,NMe,DBr,GBr,gK,OBr,VBr,XBr,JC,qMe,zBr,WBr,hK,QBr,HBr,UBr,YC,jMe,JBr,YBr,pK,KBr,ZBr,eIr,KC,DMe,oIr,rIr,_K,tIr,aIr,nIr,ZC,GMe,sIr,lIr,uK,iIr,dIr,cIr,e5,OMe,fIr,mIr,bK,gIr,hIr,pIr,o5,VMe,_Ir,uIr,vK,bIr,vIr,FIr,r5,XMe,TIr,MIr,FK,EIr,CIr,wIr,t5,zMe,AIr,yIr,TK,LIr,xIr,$Ir,a5,WMe,kIr,SIr,MK,RIr,PIr,BIr,n5,_De,zc,s5,QMe,tx,IIr,HMe,NIr,uDe,_r,ax,qIr,Wc,jIr,EK,DIr,GIr,CK,OIr,VIr,XIr,nx,zIr,UMe,WIr,QIr,HIr,Wt,sx,UIr,JMe,JIr,YIr,Qc,KIr,YMe,ZIr,eNr,wK,oNr,rNr,tNr,l5,aNr,Xr,lx,nNr,KMe,sNr,lNr,vn,iNr,ZMe,dNr,cNr,e4e,fNr,mNr,o4e,gNr,hNr,pNr,$e,i5,r4e,_Nr,uNr,AK,bNr,vNr,FNr,d5,t4e,TNr,MNr,yK,ENr,CNr,wNr,c5,a4e,ANr,yNr,LK,LNr,xNr,$Nr,f5,n4e,kNr,SNr,xK,RNr,PNr,BNr,m5,s4e,INr,NNr,$K,qNr,jNr,DNr,g5,l4e,GNr,ONr,kK,VNr,XNr,zNr,h5,i4e,WNr,QNr,SK,HNr,UNr,JNr,p5,d4e,YNr,KNr,RK,ZNr,eqr,oqr,_5,c4e,rqr,tqr,PK,aqr,nqr,sqr,u5,f4e,lqr,iqr,BK,dqr,cqr,fqr,b5,bDe,Hc,v5,m4e,ix,mqr,g4e,gqr,vDe,ur,dx,hqr,Uc,pqr,IK,_qr,uqr,NK,bqr,vqr,Fqr,cx,Tqr,h4e,Mqr,Eqr,Cqr,Qt,fx,wqr,p4e,Aqr,yqr,Jc,Lqr,_4e,xqr,$qr,qK,kqr,Sqr,Rqr,F5,Pqr,zr,mx,Bqr,u4e,Iqr,Nqr,Fn,qqr,b4e,jqr,Dqr,v4e,Gqr,Oqr,F4e,Vqr,Xqr,zqr,ke,T5,T4e,Wqr,Qqr,jK,Hqr,Uqr,Jqr,M5,M4e,Yqr,Kqr,DK,Zqr,ejr,ojr,E5,E4e,rjr,tjr,GK,ajr,njr,sjr,C5,C4e,ljr,ijr,OK,djr,cjr,fjr,w5,w4e,mjr,gjr,VK,hjr,pjr,_jr,A5,A4e,ujr,bjr,XK,vjr,Fjr,Tjr,y5,y4e,Mjr,Ejr,zK,Cjr,wjr,Ajr,L5,L4e,yjr,Ljr,WK,xjr,$jr,kjr,x5,x4e,Sjr,Rjr,QK,Pjr,Bjr,Ijr,$5,$4e,Njr,qjr,HK,jjr,Djr,Gjr,k5,FDe,Yc,S5,k4e,gx,Ojr,S4e,Vjr,TDe,br,hx,Xjr,Kc,zjr,UK,Wjr,Qjr,JK,Hjr,Ujr,Jjr,px,Yjr,R4e,Kjr,Zjr,eDr,Ht,_x,oDr,P4e,rDr,tDr,Zc,aDr,B4e,nDr,sDr,YK,lDr,iDr,dDr,R5,cDr,Wr,ux,fDr,I4e,mDr,gDr,Tn,hDr,N4e,pDr,_Dr,q4e,uDr,bDr,j4e,vDr,FDr,TDr,Ge,P5,D4e,MDr,EDr,KK,CDr,wDr,ADr,B5,G4e,yDr,LDr,ZK,xDr,$Dr,kDr,I5,O4e,SDr,RDr,eZ,PDr,BDr,IDr,N5,V4e,NDr,qDr,oZ,jDr,DDr,GDr,q5,X4e,ODr,VDr,rZ,XDr,zDr,WDr,j5,z4e,QDr,HDr,tZ,UDr,JDr,YDr,D5,W4e,KDr,ZDr,aZ,eGr,oGr,rGr,G5,Q4e,tGr,aGr,nZ,nGr,sGr,lGr,O5,MDe,ef,V5,H4e,bx,iGr,U4e,dGr,EDe,vr,vx,cGr,of,fGr,sZ,mGr,gGr,lZ,hGr,pGr,_Gr,Fx,uGr,J4e,bGr,vGr,FGr,Ut,Tx,TGr,Y4e,MGr,EGr,rf,CGr,K4e,wGr,AGr,iZ,yGr,LGr,xGr,X5,$Gr,Qr,Mx,kGr,Z4e,SGr,RGr,Mn,PGr,eEe,BGr,IGr,oEe,NGr,qGr,rEe,jGr,DGr,GGr,Oe,z5,tEe,OGr,VGr,dZ,XGr,zGr,WGr,W5,aEe,QGr,HGr,cZ,UGr,JGr,YGr,Q5,nEe,KGr,ZGr,fZ,eOr,oOr,rOr,H5,sEe,tOr,aOr,mZ,nOr,sOr,lOr,U5,lEe,iOr,dOr,gZ,cOr,fOr,mOr,J5,iEe,gOr,hOr,hZ,pOr,_Or,uOr,Y5,dEe,bOr,vOr,pZ,FOr,TOr,MOr,K5,cEe,EOr,COr,_Z,wOr,AOr,yOr,Z5,CDe,tf,e3,fEe,Ex,LOr,mEe,xOr,wDe,Fr,Cx,$Or,af,kOr,uZ,SOr,ROr,bZ,POr,BOr,IOr,wx,NOr,gEe,qOr,jOr,DOr,Jt,Ax,GOr,hEe,OOr,VOr,nf,XOr,pEe,zOr,WOr,vZ,QOr,HOr,UOr,o3,JOr,Hr,yx,YOr,_Ee,KOr,ZOr,En,eVr,uEe,oVr,rVr,bEe,tVr,aVr,vEe,nVr,sVr,lVr,FEe,r3,TEe,iVr,dVr,FZ,cVr,fVr,mVr,t3,ADe,sf,a3,MEe,Lx,gVr,EEe,hVr,yDe,Tr,xx,pVr,lf,_Vr,TZ,uVr,bVr,MZ,vVr,FVr,TVr,$x,MVr,CEe,EVr,CVr,wVr,Yt,kx,AVr,wEe,yVr,LVr,df,xVr,AEe,$Vr,kVr,EZ,SVr,RVr,PVr,n3,BVr,Ur,Sx,IVr,yEe,NVr,qVr,Cn,jVr,LEe,DVr,GVr,xEe,OVr,VVr,$Ee,XVr,zVr,WVr,Rx,s3,kEe,QVr,HVr,CZ,UVr,JVr,YVr,l3,SEe,KVr,ZVr,wZ,eXr,oXr,rXr,i3,LDe,cf,d3,REe,Px,tXr,PEe,aXr,xDe,Mr,Bx,nXr,ff,sXr,AZ,lXr,iXr,yZ,dXr,cXr,fXr,Ix,mXr,BEe,gXr,hXr,pXr,Kt,Nx,_Xr,IEe,uXr,bXr,mf,vXr,NEe,FXr,TXr,LZ,MXr,EXr,CXr,c3,wXr,Jr,qx,AXr,qEe,yXr,LXr,wn,xXr,jEe,$Xr,kXr,DEe,SXr,RXr,GEe,PXr,BXr,IXr,OEe,f3,VEe,NXr,qXr,xZ,jXr,DXr,GXr,m3,$De;return d=new te({}),Ca=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),P0=new te({}),B0=new P({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Tf=new OXr({props:{warning:!0,$$slots:{default:[qkt]},$$scope:{ctx:L}}}),I0=new te({}),N0=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/configuration_auto.py#L587"}}),D0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/configuration_auto.py#L610"}}),wg=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[jkt]},$$scope:{ctx:L}}}),G0=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/configuration_auto.py#L733"}}),O0=new te({}),V0=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/tokenization_auto.py#L397"}}),W0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_16792/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/tokenization_auto.py#L411"}}),sh=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[Dkt]},$$scope:{ctx:L}}}),Q0=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/tokenization_auto.py#L610"}}),H0=new te({}),U0=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/feature_extraction_auto.py#L190"}}),K0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_16792/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/feature_extraction_auto.py#L204"}}),qh=new OXr({props:{$$slots:{default:[Gkt]},$$scope:{ctx:L}}}),jh=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[Okt]},$$scope:{ctx:L}}}),Z0=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/feature_extraction_auto.py#L331"}}),eA=new te({}),oA=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/processing_auto.py#L88"}}),aA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/processing_auto.py#L102"}}),np=new OXr({props:{$$slots:{default:[Vkt]},$$scope:{ctx:L}}}),sp=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[Xkt]},$$scope:{ctx:L}}}),nA=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/processing_auto.py#L255"}}),sA=new te({}),lA=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L739"}}),dA=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (Flava model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt_neox#transformers.GPTNeoXModel">GPTNeoXModel</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longt5#transformers.LongT5Model">LongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),dp=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[zkt]},$$scope:{ctx:L}}}),cA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),nu=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[Wkt]},$$scope:{ctx:L}}}),fA=new te({}),mA=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L746"}}),hA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (Flava model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),lu=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[Qkt]},$$scope:{ctx:L}}}),pA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),Yu=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[Hkt]},$$scope:{ctx:L}}}),_A=new te({}),uA=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L761"}}),vA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM">GPTNeoXForCausalLM</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),Zu=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[Ukt]},$$scope:{ctx:L}}}),FA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),q2=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[Jkt]},$$scope:{ctx:L}}}),TA=new te({}),MA=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L768"}}),CA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),D2=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[Ykt]},$$scope:{ctx:L}}}),wA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),E1=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[Kkt]},$$scope:{ctx:L}}}),AA=new te({}),yA=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L775"}}),xA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration">LongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),w1=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[Zkt]},$$scope:{ctx:L}}}),$A=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),X1=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[eSt]},$$scope:{ctx:L}}}),kA=new te({}),SA=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L784"}}),PA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),W1=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[oSt]},$$scope:{ctx:L}}}),BA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),Gb=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[rSt]},$$scope:{ctx:L}}}),IA=new te({}),NA=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L818"}}),jA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),Vb=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[tSt]},$$scope:{ctx:L}}}),DA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),Fv=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[aSt]},$$scope:{ctx:L}}}),GA=new te({}),OA=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L825"}}),XA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),Mv=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[nSt]},$$scope:{ctx:L}}}),zA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),xv=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[sSt]},$$scope:{ctx:L}}}),WA=new te({}),QA=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L811"}}),UA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),kv=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[lSt]},$$scope:{ctx:L}}}),JA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),gF=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[iSt]},$$scope:{ctx:L}}}),YA=new te({}),KA=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L793"}}),ey=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),pF=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[dSt]},$$scope:{ctx:L}}}),oy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),t6=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[cSt]},$$scope:{ctx:L}}}),ry=new te({}),ty=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L800"}}),ny=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),n6=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[fSt]},$$scope:{ctx:L}}}),sy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),i6=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[mSt]},$$scope:{ctx:L}}}),ly=new te({}),iy=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L834"}}),cy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_16792/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),c6=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[gSt]},$$scope:{ctx:L}}}),fy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),C6=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[hSt]},$$scope:{ctx:L}}}),my=new te({}),gy=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L873"}}),py=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),A6=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[pSt]},$$scope:{ctx:L}}}),_y=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),x6=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[_St]},$$scope:{ctx:L}}}),uy=new te({}),by=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L880"}}),Fy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),k6=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[uSt]},$$scope:{ctx:L}}}),Ty=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),O6=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[bSt]},$$scope:{ctx:L}}}),My=new te({}),Ey=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L903"}}),wy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),X6=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[vSt]},$$scope:{ctx:L}}}),Ay=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),Y6=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[FSt]},$$scope:{ctx:L}}}),yy=new te({}),Ly=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L887"}}),$y=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),Z6=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[TSt]},$$scope:{ctx:L}}}),ky=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),cT=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[MSt]},$$scope:{ctx:L}}}),Sy=new te({}),Ry=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L894"}}),By=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),mT=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[ESt]},$$scope:{ctx:L}}}),Iy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),_T=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[CSt]},$$scope:{ctx:L}}}),qy=new te({}),jy=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L912"}}),Gy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),bT=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[wSt]},$$scope:{ctx:L}}}),Oy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),wT=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[ASt]},$$scope:{ctx:L}}}),Vy=new te({}),Xy=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L919"}}),Wy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),yT=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[ySt]},$$scope:{ctx:L}}}),Qy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),ST=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[LSt]},$$scope:{ctx:L}}}),Hy=new te({}),Uy=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L866"}}),Yy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),PT=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[xSt]},$$scope:{ctx:L}}}),Ky=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),qT=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[$St]},$$scope:{ctx:L}}}),eL=new te({}),oL=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L841"}}),tL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),DT=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[kSt]},$$scope:{ctx:L}}}),aL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),VT=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[SSt]},$$scope:{ctx:L}}}),nL=new te({}),sL=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L848"}}),iL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),zT=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[RSt]},$$scope:{ctx:L}}}),dL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),YT=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[PSt]},$$scope:{ctx:L}}}),cL=new te({}),fL=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L857"}}),gL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),ZT=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[BSt]},$$scope:{ctx:L}}}),hL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),r7=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[ISt]},$$scope:{ctx:L}}}),pL=new te({}),_L=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_tf_auto.py#L394"}}),bL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),a7=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[NSt]},$$scope:{ctx:L}}}),vL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),J7=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[qSt]},$$scope:{ctx:L}}}),FL=new te({}),TL=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_tf_auto.py#L401"}}),EL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),K7=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[jSt]},$$scope:{ctx:L}}}),CL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),M9=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[DSt]},$$scope:{ctx:L}}}),wL=new te({}),AL=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_tf_auto.py#L416"}}),LL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),C9=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[GSt]},$$scope:{ctx:L}}}),xL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),N9=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[OSt]},$$scope:{ctx:L}}}),$L=new te({}),kL=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_tf_auto.py#L432"}}),RL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),j9=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[VSt]},$$scope:{ctx:L}}}),PL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),X9=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[XSt]},$$scope:{ctx:L}}}),BL=new te({}),IL=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_tf_auto.py#L448"}}),qL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),W9=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[zSt]},$$scope:{ctx:L}}}),jL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),gM=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[WSt]},$$scope:{ctx:L}}}),DL=new te({}),GL=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_tf_auto.py#L455"}}),VL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),pM=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[QSt]},$$scope:{ctx:L}}}),XL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),AM=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[HSt]},$$scope:{ctx:L}}}),zL=new te({}),WL=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_tf_auto.py#L464"}}),HL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),LM=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[USt]},$$scope:{ctx:L}}}),UL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),o4=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[JSt]},$$scope:{ctx:L}}}),JL=new te({}),YL=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_tf_auto.py#L500"}}),ZL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),t4=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[YSt]},$$scope:{ctx:L}}}),e8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),T4=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[KSt]},$$scope:{ctx:L}}}),o8=new te({}),r8=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_tf_auto.py#L507"}}),a8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),E4=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[ZSt]},$$scope:{ctx:L}}}),n8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),A4=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[eRt]},$$scope:{ctx:L}}}),l8=new te({}),i8=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_tf_auto.py#L480"}}),c8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),L4=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[oRt]},$$scope:{ctx:L}}}),f8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),$4=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[rRt]},$$scope:{ctx:L}}}),m8=new te({}),g8=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_tf_auto.py#L491"}}),p8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),S4=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[tRt]},$$scope:{ctx:L}}}),_8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),Z4=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[aRt]},$$scope:{ctx:L}}}),u8=new te({}),b8=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_tf_auto.py#L473"}}),F8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),oE=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[nRt]},$$scope:{ctx:L}}}),T8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),ME=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[sRt]},$$scope:{ctx:L}}}),M8=new te({}),E8=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_tf_auto.py#L441"}}),w8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),CE=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[lRt]},$$scope:{ctx:L}}}),A8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),AE=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[iRt]},$$scope:{ctx:L}}}),y8=new te({}),L8=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_tf_auto.py#L516"}}),$8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),LE=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[dRt]},$$scope:{ctx:L}}}),k8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),$E=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[cRt]},$$scope:{ctx:L}}}),S8=new te({}),R8=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_flax_auto.py#L244"}}),B8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longt5#transformers.FlaxLongT5Model">FlaxLongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),SE=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[fRt]},$$scope:{ctx:L}}}),I8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),nC=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[mRt]},$$scope:{ctx:L}}}),N8=new te({}),q8=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_flax_auto.py#L258"}}),D8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),lC=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[gRt]},$$scope:{ctx:L}}}),G8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),uC=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[hRt]},$$scope:{ctx:L}}}),O8=new te({}),V8=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_flax_auto.py#L251"}}),z8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),vC=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[pRt]},$$scope:{ctx:L}}}),W8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),RC=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[_Rt]},$$scope:{ctx:L}}}),Q8=new te({}),H8=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_flax_auto.py#L265"}}),J8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),BC=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[uRt]},$$scope:{ctx:L}}}),Y8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),WC=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[bRt]},$$scope:{ctx:L}}}),K8=new te({}),Z8=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_flax_auto.py#L272"}}),ox=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),HC=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[vRt]},$$scope:{ctx:L}}}),rx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),n5=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[FRt]},$$scope:{ctx:L}}}),tx=new te({}),ax=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_flax_auto.py#L281"}}),sx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),l5=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[TRt]},$$scope:{ctx:L}}}),lx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),b5=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[MRt]},$$scope:{ctx:L}}}),ix=new te({}),dx=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_flax_auto.py#L290"}}),fx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),F5=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[ERt]},$$scope:{ctx:L}}}),mx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),k5=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[CRt]},$$scope:{ctx:L}}}),gx=new te({}),hx=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_flax_auto.py#L297"}}),_x=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),R5=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[wRt]},$$scope:{ctx:L}}}),ux=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),O5=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[ARt]},$$scope:{ctx:L}}}),bx=new te({}),vx=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_flax_auto.py#L306"}}),Tx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),X5=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[yRt]},$$scope:{ctx:L}}}),Mx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),Z5=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[LRt]},$$scope:{ctx:L}}}),Ex=new te({}),Cx=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_flax_auto.py#L313"}}),Ax=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),o3=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[xRt]},$$scope:{ctx:L}}}),yx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),t3=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[$Rt]},$$scope:{ctx:L}}}),Lx=new te({}),xx=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_flax_auto.py#L322"}}),kx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),n3=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[kRt]},$$scope:{ctx:L}}}),Sx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),i3=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[SRt]},$$scope:{ctx:L}}}),Px=new te({}),Bx=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_flax_auto.py#L331"}}),Nx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),c3=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[RRt]},$$scope:{ctx:L}}}),qx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),m3=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[PRt]},$$scope:{ctx:L}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),_=a("span"),F(d.$$.fragment),h=l(),Mo=a("span"),mi=o("Auto Classes"),_f=l(),rt=a("p"),gi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),hi=a("code"),$0=o("from_pretrained()"),uf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),De=l(),We=a("p"),pi=o("Instantiating one of "),yn=a("a"),k0=o("AutoConfig"),Ln=o(", "),xn=a("a"),S0=o("AutoModel"),_i=o(`, and
`),$n=a("a"),R0=o("AutoTokenizer"),ui=o(" will directly create a class of the relevant architecture. For instance"),bf=l(),F(Ca.$$.fragment),Qe=l(),Ae=a("p"),Z$=o("will create a model that is an instance of "),bi=a("a"),ek=o("BertModel"),ok=o("."),Eo=l(),wa=a("p"),rk=o("There is one class of "),vf=a("code"),tk=o("AutoModel"),qOe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),yqe=l(),vi=a("h2"),Ff=a("a"),Moe=a("span"),F(P0.$$.fragment),jOe=l(),Eoe=a("span"),DOe=o("Extending the Auto Classes"),Lqe=l(),kn=a("p"),GOe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Coe=a("code"),OOe=o("NewModel"),VOe=o(", make sure you have a "),woe=a("code"),XOe=o("NewModelConfig"),zOe=o(` then you can add those to the auto
classes like this:`),xqe=l(),F(B0.$$.fragment),$qe=l(),ak=a("p"),WOe=o("You will then be able to use the auto classes like you would usually do!"),kqe=l(),F(Tf.$$.fragment),Sqe=l(),Fi=a("h2"),Mf=a("a"),Aoe=a("span"),F(I0.$$.fragment),QOe=l(),yoe=a("span"),HOe=o("AutoConfig"),Rqe=l(),Co=a("div"),F(N0.$$.fragment),UOe=l(),q0=a("p"),JOe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),nk=a("a"),YOe=o("from_pretrained()"),KOe=o(" class method."),ZOe=l(),j0=a("p"),eVe=o("This class cannot be instantiated directly using "),Loe=a("code"),oVe=o("__init__()"),rVe=o(" (throws an error)."),tVe=l(),Er=a("div"),F(D0.$$.fragment),aVe=l(),xoe=a("p"),nVe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),sVe=l(),Ti=a("p"),lVe=o("The configuration class to instantiate is selected based on the "),$oe=a("code"),iVe=o("model_type"),dVe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),koe=a("code"),cVe=o("pretrained_model_name_or_path"),fVe=o(":"),mVe=l(),A=a("ul"),Ef=a("li"),Soe=a("strong"),gVe=o("albert"),hVe=o(" \u2014 "),sk=a("a"),pVe=o("AlbertConfig"),_Ve=o(" (ALBERT model)"),uVe=l(),Cf=a("li"),Roe=a("strong"),bVe=o("bart"),vVe=o(" \u2014 "),lk=a("a"),FVe=o("BartConfig"),TVe=o(" (BART model)"),MVe=l(),wf=a("li"),Poe=a("strong"),EVe=o("beit"),CVe=o(" \u2014 "),ik=a("a"),wVe=o("BeitConfig"),AVe=o(" (BEiT model)"),yVe=l(),Af=a("li"),Boe=a("strong"),LVe=o("bert"),xVe=o(" \u2014 "),dk=a("a"),$Ve=o("BertConfig"),kVe=o(" (BERT model)"),SVe=l(),yf=a("li"),Ioe=a("strong"),RVe=o("bert-generation"),PVe=o(" \u2014 "),ck=a("a"),BVe=o("BertGenerationConfig"),IVe=o(" (Bert Generation model)"),NVe=l(),Lf=a("li"),Noe=a("strong"),qVe=o("big_bird"),jVe=o(" \u2014 "),fk=a("a"),DVe=o("BigBirdConfig"),GVe=o(" (BigBird model)"),OVe=l(),xf=a("li"),qoe=a("strong"),VVe=o("bigbird_pegasus"),XVe=o(" \u2014 "),mk=a("a"),zVe=o("BigBirdPegasusConfig"),WVe=o(" (BigBirdPegasus model)"),QVe=l(),$f=a("li"),joe=a("strong"),HVe=o("blenderbot"),UVe=o(" \u2014 "),gk=a("a"),JVe=o("BlenderbotConfig"),YVe=o(" (Blenderbot model)"),KVe=l(),kf=a("li"),Doe=a("strong"),ZVe=o("blenderbot-small"),eXe=o(" \u2014 "),hk=a("a"),oXe=o("BlenderbotSmallConfig"),rXe=o(" (BlenderbotSmall model)"),tXe=l(),Sf=a("li"),Goe=a("strong"),aXe=o("camembert"),nXe=o(" \u2014 "),pk=a("a"),sXe=o("CamembertConfig"),lXe=o(" (CamemBERT model)"),iXe=l(),Rf=a("li"),Ooe=a("strong"),dXe=o("canine"),cXe=o(" \u2014 "),_k=a("a"),fXe=o("CanineConfig"),mXe=o(" (Canine model)"),gXe=l(),Pf=a("li"),Voe=a("strong"),hXe=o("clip"),pXe=o(" \u2014 "),uk=a("a"),_Xe=o("CLIPConfig"),uXe=o(" (CLIP model)"),bXe=l(),Bf=a("li"),Xoe=a("strong"),vXe=o("convbert"),FXe=o(" \u2014 "),bk=a("a"),TXe=o("ConvBertConfig"),MXe=o(" (ConvBERT model)"),EXe=l(),If=a("li"),zoe=a("strong"),CXe=o("convnext"),wXe=o(" \u2014 "),vk=a("a"),AXe=o("ConvNextConfig"),yXe=o(" (ConvNext model)"),LXe=l(),Nf=a("li"),Woe=a("strong"),xXe=o("ctrl"),$Xe=o(" \u2014 "),Fk=a("a"),kXe=o("CTRLConfig"),SXe=o(" (CTRL model)"),RXe=l(),qf=a("li"),Qoe=a("strong"),PXe=o("cvt"),BXe=o(" \u2014 "),Tk=a("a"),IXe=o("CvtConfig"),NXe=o(" (CvT model)"),qXe=l(),jf=a("li"),Hoe=a("strong"),jXe=o("data2vec-audio"),DXe=o(" \u2014 "),Mk=a("a"),GXe=o("Data2VecAudioConfig"),OXe=o(" (Data2VecAudio model)"),VXe=l(),Df=a("li"),Uoe=a("strong"),XXe=o("data2vec-text"),zXe=o(" \u2014 "),Ek=a("a"),WXe=o("Data2VecTextConfig"),QXe=o(" (Data2VecText model)"),HXe=l(),Gf=a("li"),Joe=a("strong"),UXe=o("data2vec-vision"),JXe=o(" \u2014 "),Ck=a("a"),YXe=o("Data2VecVisionConfig"),KXe=o(" (Data2VecVision model)"),ZXe=l(),Of=a("li"),Yoe=a("strong"),eze=o("deberta"),oze=o(" \u2014 "),wk=a("a"),rze=o("DebertaConfig"),tze=o(" (DeBERTa model)"),aze=l(),Vf=a("li"),Koe=a("strong"),nze=o("deberta-v2"),sze=o(" \u2014 "),Ak=a("a"),lze=o("DebertaV2Config"),ize=o(" (DeBERTa-v2 model)"),dze=l(),Xf=a("li"),Zoe=a("strong"),cze=o("decision_transformer"),fze=o(" \u2014 "),yk=a("a"),mze=o("DecisionTransformerConfig"),gze=o(" (Decision Transformer model)"),hze=l(),zf=a("li"),ere=a("strong"),pze=o("deit"),_ze=o(" \u2014 "),Lk=a("a"),uze=o("DeiTConfig"),bze=o(" (DeiT model)"),vze=l(),Wf=a("li"),ore=a("strong"),Fze=o("detr"),Tze=o(" \u2014 "),xk=a("a"),Mze=o("DetrConfig"),Eze=o(" (DETR model)"),Cze=l(),Qf=a("li"),rre=a("strong"),wze=o("distilbert"),Aze=o(" \u2014 "),$k=a("a"),yze=o("DistilBertConfig"),Lze=o(" (DistilBERT model)"),xze=l(),Hf=a("li"),tre=a("strong"),$ze=o("dpr"),kze=o(" \u2014 "),kk=a("a"),Sze=o("DPRConfig"),Rze=o(" (DPR model)"),Pze=l(),Uf=a("li"),are=a("strong"),Bze=o("dpt"),Ize=o(" \u2014 "),Sk=a("a"),Nze=o("DPTConfig"),qze=o(" (DPT model)"),jze=l(),Jf=a("li"),nre=a("strong"),Dze=o("electra"),Gze=o(" \u2014 "),Rk=a("a"),Oze=o("ElectraConfig"),Vze=o(" (ELECTRA model)"),Xze=l(),Yf=a("li"),sre=a("strong"),zze=o("encoder-decoder"),Wze=o(" \u2014 "),Pk=a("a"),Qze=o("EncoderDecoderConfig"),Hze=o(" (Encoder decoder model)"),Uze=l(),Kf=a("li"),lre=a("strong"),Jze=o("flaubert"),Yze=o(" \u2014 "),Bk=a("a"),Kze=o("FlaubertConfig"),Zze=o(" (FlauBERT model)"),eWe=l(),Zf=a("li"),ire=a("strong"),oWe=o("flava"),rWe=o(" \u2014 "),Ik=a("a"),tWe=o("FlavaConfig"),aWe=o(" (Flava model)"),nWe=l(),em=a("li"),dre=a("strong"),sWe=o("fnet"),lWe=o(" \u2014 "),Nk=a("a"),iWe=o("FNetConfig"),dWe=o(" (FNet model)"),cWe=l(),om=a("li"),cre=a("strong"),fWe=o("fsmt"),mWe=o(" \u2014 "),qk=a("a"),gWe=o("FSMTConfig"),hWe=o(" (FairSeq Machine-Translation model)"),pWe=l(),rm=a("li"),fre=a("strong"),_We=o("funnel"),uWe=o(" \u2014 "),jk=a("a"),bWe=o("FunnelConfig"),vWe=o(" (Funnel Transformer model)"),FWe=l(),tm=a("li"),mre=a("strong"),TWe=o("glpn"),MWe=o(" \u2014 "),Dk=a("a"),EWe=o("GLPNConfig"),CWe=o(" (GLPN model)"),wWe=l(),am=a("li"),gre=a("strong"),AWe=o("gpt2"),yWe=o(" \u2014 "),Gk=a("a"),LWe=o("GPT2Config"),xWe=o(" (OpenAI GPT-2 model)"),$We=l(),nm=a("li"),hre=a("strong"),kWe=o("gpt_neo"),SWe=o(" \u2014 "),Ok=a("a"),RWe=o("GPTNeoConfig"),PWe=o(" (GPT Neo model)"),BWe=l(),sm=a("li"),pre=a("strong"),IWe=o("gpt_neox"),NWe=o(" \u2014 "),Vk=a("a"),qWe=o("GPTNeoXConfig"),jWe=o(" (GPT NeoX model)"),DWe=l(),lm=a("li"),_re=a("strong"),GWe=o("gptj"),OWe=o(" \u2014 "),Xk=a("a"),VWe=o("GPTJConfig"),XWe=o(" (GPT-J model)"),zWe=l(),im=a("li"),ure=a("strong"),WWe=o("hubert"),QWe=o(" \u2014 "),zk=a("a"),HWe=o("HubertConfig"),UWe=o(" (Hubert model)"),JWe=l(),dm=a("li"),bre=a("strong"),YWe=o("ibert"),KWe=o(" \u2014 "),Wk=a("a"),ZWe=o("IBertConfig"),eQe=o(" (I-BERT model)"),oQe=l(),cm=a("li"),vre=a("strong"),rQe=o("imagegpt"),tQe=o(" \u2014 "),Qk=a("a"),aQe=o("ImageGPTConfig"),nQe=o(" (ImageGPT model)"),sQe=l(),fm=a("li"),Fre=a("strong"),lQe=o("layoutlm"),iQe=o(" \u2014 "),Hk=a("a"),dQe=o("LayoutLMConfig"),cQe=o(" (LayoutLM model)"),fQe=l(),mm=a("li"),Tre=a("strong"),mQe=o("layoutlmv2"),gQe=o(" \u2014 "),Uk=a("a"),hQe=o("LayoutLMv2Config"),pQe=o(" (LayoutLMv2 model)"),_Qe=l(),gm=a("li"),Mre=a("strong"),uQe=o("layoutlmv3"),bQe=o(" \u2014 "),Jk=a("a"),vQe=o("LayoutLMv3Config"),FQe=o(" (LayoutLMv3 model)"),TQe=l(),hm=a("li"),Ere=a("strong"),MQe=o("led"),EQe=o(" \u2014 "),Yk=a("a"),CQe=o("LEDConfig"),wQe=o(" (LED model)"),AQe=l(),pm=a("li"),Cre=a("strong"),yQe=o("longformer"),LQe=o(" \u2014 "),Kk=a("a"),xQe=o("LongformerConfig"),$Qe=o(" (Longformer model)"),kQe=l(),_m=a("li"),wre=a("strong"),SQe=o("longt5"),RQe=o(" \u2014 "),Zk=a("a"),PQe=o("LongT5Config"),BQe=o(" (LongT5 model)"),IQe=l(),um=a("li"),Are=a("strong"),NQe=o("luke"),qQe=o(" \u2014 "),eS=a("a"),jQe=o("LukeConfig"),DQe=o(" (LUKE model)"),GQe=l(),bm=a("li"),yre=a("strong"),OQe=o("lxmert"),VQe=o(" \u2014 "),oS=a("a"),XQe=o("LxmertConfig"),zQe=o(" (LXMERT model)"),WQe=l(),vm=a("li"),Lre=a("strong"),QQe=o("m2m_100"),HQe=o(" \u2014 "),rS=a("a"),UQe=o("M2M100Config"),JQe=o(" (M2M100 model)"),YQe=l(),Fm=a("li"),xre=a("strong"),KQe=o("marian"),ZQe=o(" \u2014 "),tS=a("a"),eHe=o("MarianConfig"),oHe=o(" (Marian model)"),rHe=l(),Tm=a("li"),$re=a("strong"),tHe=o("maskformer"),aHe=o(" \u2014 "),aS=a("a"),nHe=o("MaskFormerConfig"),sHe=o(" (MaskFormer model)"),lHe=l(),Mm=a("li"),kre=a("strong"),iHe=o("mbart"),dHe=o(" \u2014 "),nS=a("a"),cHe=o("MBartConfig"),fHe=o(" (mBART model)"),mHe=l(),Em=a("li"),Sre=a("strong"),gHe=o("megatron-bert"),hHe=o(" \u2014 "),sS=a("a"),pHe=o("MegatronBertConfig"),_He=o(" (MegatronBert model)"),uHe=l(),Cm=a("li"),Rre=a("strong"),bHe=o("mobilebert"),vHe=o(" \u2014 "),lS=a("a"),FHe=o("MobileBertConfig"),THe=o(" (MobileBERT model)"),MHe=l(),wm=a("li"),Pre=a("strong"),EHe=o("mpnet"),CHe=o(" \u2014 "),iS=a("a"),wHe=o("MPNetConfig"),AHe=o(" (MPNet model)"),yHe=l(),Am=a("li"),Bre=a("strong"),LHe=o("mt5"),xHe=o(" \u2014 "),dS=a("a"),$He=o("MT5Config"),kHe=o(" (mT5 model)"),SHe=l(),ym=a("li"),Ire=a("strong"),RHe=o("nystromformer"),PHe=o(" \u2014 "),cS=a("a"),BHe=o("NystromformerConfig"),IHe=o(" (Nystromformer model)"),NHe=l(),Lm=a("li"),Nre=a("strong"),qHe=o("openai-gpt"),jHe=o(" \u2014 "),fS=a("a"),DHe=o("OpenAIGPTConfig"),GHe=o(" (OpenAI GPT model)"),OHe=l(),xm=a("li"),qre=a("strong"),VHe=o("opt"),XHe=o(" \u2014 "),mS=a("a"),zHe=o("OPTConfig"),WHe=o(" (OPT model)"),QHe=l(),$m=a("li"),jre=a("strong"),HHe=o("pegasus"),UHe=o(" \u2014 "),gS=a("a"),JHe=o("PegasusConfig"),YHe=o(" (Pegasus model)"),KHe=l(),km=a("li"),Dre=a("strong"),ZHe=o("perceiver"),eUe=o(" \u2014 "),hS=a("a"),oUe=o("PerceiverConfig"),rUe=o(" (Perceiver model)"),tUe=l(),Sm=a("li"),Gre=a("strong"),aUe=o("plbart"),nUe=o(" \u2014 "),pS=a("a"),sUe=o("PLBartConfig"),lUe=o(" (PLBart model)"),iUe=l(),Rm=a("li"),Ore=a("strong"),dUe=o("poolformer"),cUe=o(" \u2014 "),_S=a("a"),fUe=o("PoolFormerConfig"),mUe=o(" (PoolFormer model)"),gUe=l(),Pm=a("li"),Vre=a("strong"),hUe=o("prophetnet"),pUe=o(" \u2014 "),uS=a("a"),_Ue=o("ProphetNetConfig"),uUe=o(" (ProphetNet model)"),bUe=l(),Bm=a("li"),Xre=a("strong"),vUe=o("qdqbert"),FUe=o(" \u2014 "),bS=a("a"),TUe=o("QDQBertConfig"),MUe=o(" (QDQBert model)"),EUe=l(),Im=a("li"),zre=a("strong"),CUe=o("rag"),wUe=o(" \u2014 "),vS=a("a"),AUe=o("RagConfig"),yUe=o(" (RAG model)"),LUe=l(),Nm=a("li"),Wre=a("strong"),xUe=o("realm"),$Ue=o(" \u2014 "),FS=a("a"),kUe=o("RealmConfig"),SUe=o(" (Realm model)"),RUe=l(),qm=a("li"),Qre=a("strong"),PUe=o("reformer"),BUe=o(" \u2014 "),TS=a("a"),IUe=o("ReformerConfig"),NUe=o(" (Reformer model)"),qUe=l(),jm=a("li"),Hre=a("strong"),jUe=o("regnet"),DUe=o(" \u2014 "),MS=a("a"),GUe=o("RegNetConfig"),OUe=o(" (RegNet model)"),VUe=l(),Dm=a("li"),Ure=a("strong"),XUe=o("rembert"),zUe=o(" \u2014 "),ES=a("a"),WUe=o("RemBertConfig"),QUe=o(" (RemBERT model)"),HUe=l(),Gm=a("li"),Jre=a("strong"),UUe=o("resnet"),JUe=o(" \u2014 "),CS=a("a"),YUe=o("ResNetConfig"),KUe=o(" (ResNet model)"),ZUe=l(),Om=a("li"),Yre=a("strong"),eJe=o("retribert"),oJe=o(" \u2014 "),wS=a("a"),rJe=o("RetriBertConfig"),tJe=o(" (RetriBERT model)"),aJe=l(),Vm=a("li"),Kre=a("strong"),nJe=o("roberta"),sJe=o(" \u2014 "),AS=a("a"),lJe=o("RobertaConfig"),iJe=o(" (RoBERTa model)"),dJe=l(),Xm=a("li"),Zre=a("strong"),cJe=o("roformer"),fJe=o(" \u2014 "),yS=a("a"),mJe=o("RoFormerConfig"),gJe=o(" (RoFormer model)"),hJe=l(),zm=a("li"),ete=a("strong"),pJe=o("segformer"),_Je=o(" \u2014 "),LS=a("a"),uJe=o("SegformerConfig"),bJe=o(" (SegFormer model)"),vJe=l(),Wm=a("li"),ote=a("strong"),FJe=o("sew"),TJe=o(" \u2014 "),xS=a("a"),MJe=o("SEWConfig"),EJe=o(" (SEW model)"),CJe=l(),Qm=a("li"),rte=a("strong"),wJe=o("sew-d"),AJe=o(" \u2014 "),$S=a("a"),yJe=o("SEWDConfig"),LJe=o(" (SEW-D model)"),xJe=l(),Hm=a("li"),tte=a("strong"),$Je=o("speech-encoder-decoder"),kJe=o(" \u2014 "),kS=a("a"),SJe=o("SpeechEncoderDecoderConfig"),RJe=o(" (Speech Encoder decoder model)"),PJe=l(),Um=a("li"),ate=a("strong"),BJe=o("speech_to_text"),IJe=o(" \u2014 "),SS=a("a"),NJe=o("Speech2TextConfig"),qJe=o(" (Speech2Text model)"),jJe=l(),Jm=a("li"),nte=a("strong"),DJe=o("speech_to_text_2"),GJe=o(" \u2014 "),RS=a("a"),OJe=o("Speech2Text2Config"),VJe=o(" (Speech2Text2 model)"),XJe=l(),Ym=a("li"),ste=a("strong"),zJe=o("splinter"),WJe=o(" \u2014 "),PS=a("a"),QJe=o("SplinterConfig"),HJe=o(" (Splinter model)"),UJe=l(),Km=a("li"),lte=a("strong"),JJe=o("squeezebert"),YJe=o(" \u2014 "),BS=a("a"),KJe=o("SqueezeBertConfig"),ZJe=o(" (SqueezeBERT model)"),eYe=l(),Zm=a("li"),ite=a("strong"),oYe=o("swin"),rYe=o(" \u2014 "),IS=a("a"),tYe=o("SwinConfig"),aYe=o(" (Swin model)"),nYe=l(),eg=a("li"),dte=a("strong"),sYe=o("t5"),lYe=o(" \u2014 "),NS=a("a"),iYe=o("T5Config"),dYe=o(" (T5 model)"),cYe=l(),og=a("li"),cte=a("strong"),fYe=o("tapas"),mYe=o(" \u2014 "),qS=a("a"),gYe=o("TapasConfig"),hYe=o(" (TAPAS model)"),pYe=l(),rg=a("li"),fte=a("strong"),_Ye=o("trajectory_transformer"),uYe=o(" \u2014 "),jS=a("a"),bYe=o("TrajectoryTransformerConfig"),vYe=o(" (Trajectory Transformer model)"),FYe=l(),tg=a("li"),mte=a("strong"),TYe=o("transfo-xl"),MYe=o(" \u2014 "),DS=a("a"),EYe=o("TransfoXLConfig"),CYe=o(" (Transformer-XL model)"),wYe=l(),ag=a("li"),gte=a("strong"),AYe=o("trocr"),yYe=o(" \u2014 "),GS=a("a"),LYe=o("TrOCRConfig"),xYe=o(" (TrOCR model)"),$Ye=l(),ng=a("li"),hte=a("strong"),kYe=o("unispeech"),SYe=o(" \u2014 "),OS=a("a"),RYe=o("UniSpeechConfig"),PYe=o(" (UniSpeech model)"),BYe=l(),sg=a("li"),pte=a("strong"),IYe=o("unispeech-sat"),NYe=o(" \u2014 "),VS=a("a"),qYe=o("UniSpeechSatConfig"),jYe=o(" (UniSpeechSat model)"),DYe=l(),lg=a("li"),_te=a("strong"),GYe=o("van"),OYe=o(" \u2014 "),XS=a("a"),VYe=o("VanConfig"),XYe=o(" (VAN model)"),zYe=l(),ig=a("li"),ute=a("strong"),WYe=o("vilt"),QYe=o(" \u2014 "),zS=a("a"),HYe=o("ViltConfig"),UYe=o(" (ViLT model)"),JYe=l(),dg=a("li"),bte=a("strong"),YYe=o("vision-encoder-decoder"),KYe=o(" \u2014 "),WS=a("a"),ZYe=o("VisionEncoderDecoderConfig"),eKe=o(" (Vision Encoder decoder model)"),oKe=l(),cg=a("li"),vte=a("strong"),rKe=o("vision-text-dual-encoder"),tKe=o(" \u2014 "),QS=a("a"),aKe=o("VisionTextDualEncoderConfig"),nKe=o(" (VisionTextDualEncoder model)"),sKe=l(),fg=a("li"),Fte=a("strong"),lKe=o("visual_bert"),iKe=o(" \u2014 "),HS=a("a"),dKe=o("VisualBertConfig"),cKe=o(" (VisualBert model)"),fKe=l(),mg=a("li"),Tte=a("strong"),mKe=o("vit"),gKe=o(" \u2014 "),US=a("a"),hKe=o("ViTConfig"),pKe=o(" (ViT model)"),_Ke=l(),gg=a("li"),Mte=a("strong"),uKe=o("vit_mae"),bKe=o(" \u2014 "),JS=a("a"),vKe=o("ViTMAEConfig"),FKe=o(" (ViTMAE model)"),TKe=l(),hg=a("li"),Ete=a("strong"),MKe=o("wav2vec2"),EKe=o(" \u2014 "),YS=a("a"),CKe=o("Wav2Vec2Config"),wKe=o(" (Wav2Vec2 model)"),AKe=l(),pg=a("li"),Cte=a("strong"),yKe=o("wav2vec2-conformer"),LKe=o(" \u2014 "),KS=a("a"),xKe=o("Wav2Vec2ConformerConfig"),$Ke=o(" (Wav2Vec2-Conformer model)"),kKe=l(),_g=a("li"),wte=a("strong"),SKe=o("wavlm"),RKe=o(" \u2014 "),ZS=a("a"),PKe=o("WavLMConfig"),BKe=o(" (WavLM model)"),IKe=l(),ug=a("li"),Ate=a("strong"),NKe=o("xglm"),qKe=o(" \u2014 "),eR=a("a"),jKe=o("XGLMConfig"),DKe=o(" (XGLM model)"),GKe=l(),bg=a("li"),yte=a("strong"),OKe=o("xlm"),VKe=o(" \u2014 "),oR=a("a"),XKe=o("XLMConfig"),zKe=o(" (XLM model)"),WKe=l(),vg=a("li"),Lte=a("strong"),QKe=o("xlm-prophetnet"),HKe=o(" \u2014 "),rR=a("a"),UKe=o("XLMProphetNetConfig"),JKe=o(" (XLMProphetNet model)"),YKe=l(),Fg=a("li"),xte=a("strong"),KKe=o("xlm-roberta"),ZKe=o(" \u2014 "),tR=a("a"),eZe=o("XLMRobertaConfig"),oZe=o(" (XLM-RoBERTa model)"),rZe=l(),Tg=a("li"),$te=a("strong"),tZe=o("xlm-roberta-xl"),aZe=o(" \u2014 "),aR=a("a"),nZe=o("XLMRobertaXLConfig"),sZe=o(" (XLM-RoBERTa-XL model)"),lZe=l(),Mg=a("li"),kte=a("strong"),iZe=o("xlnet"),dZe=o(" \u2014 "),nR=a("a"),cZe=o("XLNetConfig"),fZe=o(" (XLNet model)"),mZe=l(),Eg=a("li"),Ste=a("strong"),gZe=o("yolos"),hZe=o(" \u2014 "),sR=a("a"),pZe=o("YolosConfig"),_Ze=o(" (YOLOS model)"),uZe=l(),Cg=a("li"),Rte=a("strong"),bZe=o("yoso"),vZe=o(" \u2014 "),lR=a("a"),FZe=o("YosoConfig"),TZe=o(" (YOSO model)"),MZe=l(),F(wg.$$.fragment),EZe=l(),Ag=a("div"),F(G0.$$.fragment),CZe=l(),Pte=a("p"),wZe=o("Register a new configuration for this class."),Pqe=l(),Mi=a("h2"),yg=a("a"),Bte=a("span"),F(O0.$$.fragment),AZe=l(),Ite=a("span"),yZe=o("AutoTokenizer"),Bqe=l(),wo=a("div"),F(V0.$$.fragment),LZe=l(),X0=a("p"),xZe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),iR=a("a"),$Ze=o("AutoTokenizer.from_pretrained()"),kZe=o(" class method."),SZe=l(),z0=a("p"),RZe=o("This class cannot be instantiated directly using "),Nte=a("code"),PZe=o("__init__()"),BZe=o(" (throws an error)."),IZe=l(),Cr=a("div"),F(W0.$$.fragment),NZe=l(),qte=a("p"),qZe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),jZe=l(),Aa=a("p"),DZe=o("The tokenizer class to instantiate is selected based on the "),jte=a("code"),GZe=o("model_type"),OZe=o(` property of the config object (either
passed as an argument or loaded from `),Dte=a("code"),VZe=o("pretrained_model_name_or_path"),XZe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gte=a("code"),zZe=o("pretrained_model_name_or_path"),WZe=o(":"),QZe=l(),k=a("ul"),Sn=a("li"),Ote=a("strong"),HZe=o("albert"),UZe=o(" \u2014 "),dR=a("a"),JZe=o("AlbertTokenizer"),YZe=o(" or "),cR=a("a"),KZe=o("AlbertTokenizerFast"),ZZe=o(" (ALBERT model)"),eeo=l(),Rn=a("li"),Vte=a("strong"),oeo=o("bart"),reo=o(" \u2014 "),fR=a("a"),teo=o("BartTokenizer"),aeo=o(" or "),mR=a("a"),neo=o("BartTokenizerFast"),seo=o(" (BART model)"),leo=l(),Pn=a("li"),Xte=a("strong"),ieo=o("barthez"),deo=o(" \u2014 "),gR=a("a"),ceo=o("BarthezTokenizer"),feo=o(" or "),hR=a("a"),meo=o("BarthezTokenizerFast"),geo=o(" (BARThez model)"),heo=l(),Lg=a("li"),zte=a("strong"),peo=o("bartpho"),_eo=o(" \u2014 "),pR=a("a"),ueo=o("BartphoTokenizer"),beo=o(" (BARTpho model)"),veo=l(),Bn=a("li"),Wte=a("strong"),Feo=o("bert"),Teo=o(" \u2014 "),_R=a("a"),Meo=o("BertTokenizer"),Eeo=o(" or "),uR=a("a"),Ceo=o("BertTokenizerFast"),weo=o(" (BERT model)"),Aeo=l(),xg=a("li"),Qte=a("strong"),yeo=o("bert-generation"),Leo=o(" \u2014 "),bR=a("a"),xeo=o("BertGenerationTokenizer"),$eo=o(" (Bert Generation model)"),keo=l(),$g=a("li"),Hte=a("strong"),Seo=o("bert-japanese"),Reo=o(" \u2014 "),vR=a("a"),Peo=o("BertJapaneseTokenizer"),Beo=o(" (BertJapanese model)"),Ieo=l(),kg=a("li"),Ute=a("strong"),Neo=o("bertweet"),qeo=o(" \u2014 "),FR=a("a"),jeo=o("BertweetTokenizer"),Deo=o(" (Bertweet model)"),Geo=l(),In=a("li"),Jte=a("strong"),Oeo=o("big_bird"),Veo=o(" \u2014 "),TR=a("a"),Xeo=o("BigBirdTokenizer"),zeo=o(" or "),MR=a("a"),Weo=o("BigBirdTokenizerFast"),Qeo=o(" (BigBird model)"),Heo=l(),Nn=a("li"),Yte=a("strong"),Ueo=o("bigbird_pegasus"),Jeo=o(" \u2014 "),ER=a("a"),Yeo=o("PegasusTokenizer"),Keo=o(" or "),CR=a("a"),Zeo=o("PegasusTokenizerFast"),eoo=o(" (BigBirdPegasus model)"),ooo=l(),qn=a("li"),Kte=a("strong"),roo=o("blenderbot"),too=o(" \u2014 "),wR=a("a"),aoo=o("BlenderbotTokenizer"),noo=o(" or "),AR=a("a"),soo=o("BlenderbotTokenizerFast"),loo=o(" (Blenderbot model)"),ioo=l(),Sg=a("li"),Zte=a("strong"),doo=o("blenderbot-small"),coo=o(" \u2014 "),yR=a("a"),foo=o("BlenderbotSmallTokenizer"),moo=o(" (BlenderbotSmall model)"),goo=l(),Rg=a("li"),eae=a("strong"),hoo=o("byt5"),poo=o(" \u2014 "),LR=a("a"),_oo=o("ByT5Tokenizer"),uoo=o(" (ByT5 model)"),boo=l(),jn=a("li"),oae=a("strong"),voo=o("camembert"),Foo=o(" \u2014 "),xR=a("a"),Too=o("CamembertTokenizer"),Moo=o(" or "),$R=a("a"),Eoo=o("CamembertTokenizerFast"),Coo=o(" (CamemBERT model)"),woo=l(),Pg=a("li"),rae=a("strong"),Aoo=o("canine"),yoo=o(" \u2014 "),kR=a("a"),Loo=o("CanineTokenizer"),xoo=o(" (Canine model)"),$oo=l(),Dn=a("li"),tae=a("strong"),koo=o("clip"),Soo=o(" \u2014 "),SR=a("a"),Roo=o("CLIPTokenizer"),Poo=o(" or "),RR=a("a"),Boo=o("CLIPTokenizerFast"),Ioo=o(" (CLIP model)"),Noo=l(),Gn=a("li"),aae=a("strong"),qoo=o("convbert"),joo=o(" \u2014 "),PR=a("a"),Doo=o("ConvBertTokenizer"),Goo=o(" or "),BR=a("a"),Ooo=o("ConvBertTokenizerFast"),Voo=o(" (ConvBERT model)"),Xoo=l(),On=a("li"),nae=a("strong"),zoo=o("cpm"),Woo=o(" \u2014 "),IR=a("a"),Qoo=o("CpmTokenizer"),Hoo=o(" or "),NR=a("a"),Uoo=o("CpmTokenizerFast"),Joo=o(" (CPM model)"),Yoo=l(),Bg=a("li"),sae=a("strong"),Koo=o("ctrl"),Zoo=o(" \u2014 "),qR=a("a"),ero=o("CTRLTokenizer"),oro=o(" (CTRL model)"),rro=l(),Vn=a("li"),lae=a("strong"),tro=o("data2vec-text"),aro=o(" \u2014 "),jR=a("a"),nro=o("RobertaTokenizer"),sro=o(" or "),DR=a("a"),lro=o("RobertaTokenizerFast"),iro=o(" (Data2VecText model)"),dro=l(),Xn=a("li"),iae=a("strong"),cro=o("deberta"),fro=o(" \u2014 "),GR=a("a"),mro=o("DebertaTokenizer"),gro=o(" or "),OR=a("a"),hro=o("DebertaTokenizerFast"),pro=o(" (DeBERTa model)"),_ro=l(),zn=a("li"),dae=a("strong"),uro=o("deberta-v2"),bro=o(" \u2014 "),VR=a("a"),vro=o("DebertaV2Tokenizer"),Fro=o(" or "),XR=a("a"),Tro=o("DebertaV2TokenizerFast"),Mro=o(" (DeBERTa-v2 model)"),Ero=l(),Wn=a("li"),cae=a("strong"),Cro=o("distilbert"),wro=o(" \u2014 "),zR=a("a"),Aro=o("DistilBertTokenizer"),yro=o(" or "),WR=a("a"),Lro=o("DistilBertTokenizerFast"),xro=o(" (DistilBERT model)"),$ro=l(),Qn=a("li"),fae=a("strong"),kro=o("dpr"),Sro=o(" \u2014 "),QR=a("a"),Rro=o("DPRQuestionEncoderTokenizer"),Pro=o(" or "),HR=a("a"),Bro=o("DPRQuestionEncoderTokenizerFast"),Iro=o(" (DPR model)"),Nro=l(),Hn=a("li"),mae=a("strong"),qro=o("electra"),jro=o(" \u2014 "),UR=a("a"),Dro=o("ElectraTokenizer"),Gro=o(" or "),JR=a("a"),Oro=o("ElectraTokenizerFast"),Vro=o(" (ELECTRA model)"),Xro=l(),Ig=a("li"),gae=a("strong"),zro=o("flaubert"),Wro=o(" \u2014 "),YR=a("a"),Qro=o("FlaubertTokenizer"),Hro=o(" (FlauBERT model)"),Uro=l(),Un=a("li"),hae=a("strong"),Jro=o("fnet"),Yro=o(" \u2014 "),KR=a("a"),Kro=o("FNetTokenizer"),Zro=o(" or "),ZR=a("a"),eto=o("FNetTokenizerFast"),oto=o(" (FNet model)"),rto=l(),Ng=a("li"),pae=a("strong"),tto=o("fsmt"),ato=o(" \u2014 "),eP=a("a"),nto=o("FSMTTokenizer"),sto=o(" (FairSeq Machine-Translation model)"),lto=l(),Jn=a("li"),_ae=a("strong"),ito=o("funnel"),dto=o(" \u2014 "),oP=a("a"),cto=o("FunnelTokenizer"),fto=o(" or "),rP=a("a"),mto=o("FunnelTokenizerFast"),gto=o(" (Funnel Transformer model)"),hto=l(),Yn=a("li"),uae=a("strong"),pto=o("gpt2"),_to=o(" \u2014 "),tP=a("a"),uto=o("GPT2Tokenizer"),bto=o(" or "),aP=a("a"),vto=o("GPT2TokenizerFast"),Fto=o(" (OpenAI GPT-2 model)"),Tto=l(),Kn=a("li"),bae=a("strong"),Mto=o("gpt_neo"),Eto=o(" \u2014 "),nP=a("a"),Cto=o("GPT2Tokenizer"),wto=o(" or "),sP=a("a"),Ato=o("GPT2TokenizerFast"),yto=o(" (GPT Neo model)"),Lto=l(),qg=a("li"),vae=a("strong"),xto=o("gpt_neox"),$to=o(" \u2014 "),lP=a("a"),kto=o("GPTNeoXTokenizerFast"),Sto=o(" (GPT NeoX model)"),Rto=l(),Zn=a("li"),Fae=a("strong"),Pto=o("gptj"),Bto=o(" \u2014 "),iP=a("a"),Ito=o("GPT2Tokenizer"),Nto=o(" or "),dP=a("a"),qto=o("GPT2TokenizerFast"),jto=o(" (GPT-J model)"),Dto=l(),es=a("li"),Tae=a("strong"),Gto=o("herbert"),Oto=o(" \u2014 "),cP=a("a"),Vto=o("HerbertTokenizer"),Xto=o(" or "),fP=a("a"),zto=o("HerbertTokenizerFast"),Wto=o(" (HerBERT model)"),Qto=l(),jg=a("li"),Mae=a("strong"),Hto=o("hubert"),Uto=o(" \u2014 "),mP=a("a"),Jto=o("Wav2Vec2CTCTokenizer"),Yto=o(" (Hubert model)"),Kto=l(),os=a("li"),Eae=a("strong"),Zto=o("ibert"),eao=o(" \u2014 "),gP=a("a"),oao=o("RobertaTokenizer"),rao=o(" or "),hP=a("a"),tao=o("RobertaTokenizerFast"),aao=o(" (I-BERT model)"),nao=l(),rs=a("li"),Cae=a("strong"),sao=o("layoutlm"),lao=o(" \u2014 "),pP=a("a"),iao=o("LayoutLMTokenizer"),dao=o(" or "),_P=a("a"),cao=o("LayoutLMTokenizerFast"),fao=o(" (LayoutLM model)"),mao=l(),ts=a("li"),wae=a("strong"),gao=o("layoutlmv2"),hao=o(" \u2014 "),uP=a("a"),pao=o("LayoutLMv2Tokenizer"),_ao=o(" or "),bP=a("a"),uao=o("LayoutLMv2TokenizerFast"),bao=o(" (LayoutLMv2 model)"),vao=l(),as=a("li"),Aae=a("strong"),Fao=o("layoutlmv3"),Tao=o(" \u2014 "),vP=a("a"),Mao=o("LayoutLMv3Tokenizer"),Eao=o(" or "),FP=a("a"),Cao=o("LayoutLMv3TokenizerFast"),wao=o(" (LayoutLMv3 model)"),Aao=l(),ns=a("li"),yae=a("strong"),yao=o("layoutxlm"),Lao=o(" \u2014 "),TP=a("a"),xao=o("LayoutXLMTokenizer"),$ao=o(" or "),MP=a("a"),kao=o("LayoutXLMTokenizerFast"),Sao=o(" (LayoutXLM model)"),Rao=l(),ss=a("li"),Lae=a("strong"),Pao=o("led"),Bao=o(" \u2014 "),EP=a("a"),Iao=o("LEDTokenizer"),Nao=o(" or "),CP=a("a"),qao=o("LEDTokenizerFast"),jao=o(" (LED model)"),Dao=l(),ls=a("li"),xae=a("strong"),Gao=o("longformer"),Oao=o(" \u2014 "),wP=a("a"),Vao=o("LongformerTokenizer"),Xao=o(" or "),AP=a("a"),zao=o("LongformerTokenizerFast"),Wao=o(" (Longformer model)"),Qao=l(),is=a("li"),$ae=a("strong"),Hao=o("longt5"),Uao=o(" \u2014 "),yP=a("a"),Jao=o("T5Tokenizer"),Yao=o(" or "),LP=a("a"),Kao=o("T5TokenizerFast"),Zao=o(" (LongT5 model)"),eno=l(),Dg=a("li"),kae=a("strong"),ono=o("luke"),rno=o(" \u2014 "),xP=a("a"),tno=o("LukeTokenizer"),ano=o(" (LUKE model)"),nno=l(),ds=a("li"),Sae=a("strong"),sno=o("lxmert"),lno=o(" \u2014 "),$P=a("a"),ino=o("LxmertTokenizer"),dno=o(" or "),kP=a("a"),cno=o("LxmertTokenizerFast"),fno=o(" (LXMERT model)"),mno=l(),Gg=a("li"),Rae=a("strong"),gno=o("m2m_100"),hno=o(" \u2014 "),SP=a("a"),pno=o("M2M100Tokenizer"),_no=o(" (M2M100 model)"),uno=l(),Og=a("li"),Pae=a("strong"),bno=o("marian"),vno=o(" \u2014 "),RP=a("a"),Fno=o("MarianTokenizer"),Tno=o(" (Marian model)"),Mno=l(),cs=a("li"),Bae=a("strong"),Eno=o("mbart"),Cno=o(" \u2014 "),PP=a("a"),wno=o("MBartTokenizer"),Ano=o(" or "),BP=a("a"),yno=o("MBartTokenizerFast"),Lno=o(" (mBART model)"),xno=l(),fs=a("li"),Iae=a("strong"),$no=o("mbart50"),kno=o(" \u2014 "),IP=a("a"),Sno=o("MBart50Tokenizer"),Rno=o(" or "),NP=a("a"),Pno=o("MBart50TokenizerFast"),Bno=o(" (mBART-50 model)"),Ino=l(),ms=a("li"),Nae=a("strong"),Nno=o("megatron-bert"),qno=o(" \u2014 "),qP=a("a"),jno=o("BertTokenizer"),Dno=o(" or "),jP=a("a"),Gno=o("BertTokenizerFast"),Ono=o(" (MegatronBert model)"),Vno=l(),Vg=a("li"),qae=a("strong"),Xno=o("mluke"),zno=o(" \u2014 "),DP=a("a"),Wno=o("MLukeTokenizer"),Qno=o(" (mLUKE model)"),Hno=l(),gs=a("li"),jae=a("strong"),Uno=o("mobilebert"),Jno=o(" \u2014 "),GP=a("a"),Yno=o("MobileBertTokenizer"),Kno=o(" or "),OP=a("a"),Zno=o("MobileBertTokenizerFast"),eso=o(" (MobileBERT model)"),oso=l(),hs=a("li"),Dae=a("strong"),rso=o("mpnet"),tso=o(" \u2014 "),VP=a("a"),aso=o("MPNetTokenizer"),nso=o(" or "),XP=a("a"),sso=o("MPNetTokenizerFast"),lso=o(" (MPNet model)"),iso=l(),ps=a("li"),Gae=a("strong"),dso=o("mt5"),cso=o(" \u2014 "),zP=a("a"),fso=o("MT5Tokenizer"),mso=o(" or "),WP=a("a"),gso=o("MT5TokenizerFast"),hso=o(" (mT5 model)"),pso=l(),_s=a("li"),Oae=a("strong"),_so=o("nystromformer"),uso=o(" \u2014 "),QP=a("a"),bso=o("AlbertTokenizer"),vso=o(" or "),HP=a("a"),Fso=o("AlbertTokenizerFast"),Tso=o(" (Nystromformer model)"),Mso=l(),us=a("li"),Vae=a("strong"),Eso=o("openai-gpt"),Cso=o(" \u2014 "),UP=a("a"),wso=o("OpenAIGPTTokenizer"),Aso=o(" or "),JP=a("a"),yso=o("OpenAIGPTTokenizerFast"),Lso=o(" (OpenAI GPT model)"),xso=l(),Xg=a("li"),Xae=a("strong"),$so=o("opt"),kso=o(" \u2014 "),YP=a("a"),Sso=o("GPT2Tokenizer"),Rso=o(" (OPT model)"),Pso=l(),bs=a("li"),zae=a("strong"),Bso=o("pegasus"),Iso=o(" \u2014 "),KP=a("a"),Nso=o("PegasusTokenizer"),qso=o(" or "),ZP=a("a"),jso=o("PegasusTokenizerFast"),Dso=o(" (Pegasus model)"),Gso=l(),zg=a("li"),Wae=a("strong"),Oso=o("perceiver"),Vso=o(" \u2014 "),eB=a("a"),Xso=o("PerceiverTokenizer"),zso=o(" (Perceiver model)"),Wso=l(),Wg=a("li"),Qae=a("strong"),Qso=o("phobert"),Hso=o(" \u2014 "),oB=a("a"),Uso=o("PhobertTokenizer"),Jso=o(" (PhoBERT model)"),Yso=l(),Qg=a("li"),Hae=a("strong"),Kso=o("plbart"),Zso=o(" \u2014 "),rB=a("a"),elo=o("PLBartTokenizer"),olo=o(" (PLBart model)"),rlo=l(),Hg=a("li"),Uae=a("strong"),tlo=o("prophetnet"),alo=o(" \u2014 "),tB=a("a"),nlo=o("ProphetNetTokenizer"),slo=o(" (ProphetNet model)"),llo=l(),vs=a("li"),Jae=a("strong"),ilo=o("qdqbert"),dlo=o(" \u2014 "),aB=a("a"),clo=o("BertTokenizer"),flo=o(" or "),nB=a("a"),mlo=o("BertTokenizerFast"),glo=o(" (QDQBert model)"),hlo=l(),Ug=a("li"),Yae=a("strong"),plo=o("rag"),_lo=o(" \u2014 "),sB=a("a"),ulo=o("RagTokenizer"),blo=o(" (RAG model)"),vlo=l(),Fs=a("li"),Kae=a("strong"),Flo=o("realm"),Tlo=o(" \u2014 "),lB=a("a"),Mlo=o("RealmTokenizer"),Elo=o(" or "),iB=a("a"),Clo=o("RealmTokenizerFast"),wlo=o(" (Realm model)"),Alo=l(),Ts=a("li"),Zae=a("strong"),ylo=o("reformer"),Llo=o(" \u2014 "),dB=a("a"),xlo=o("ReformerTokenizer"),$lo=o(" or "),cB=a("a"),klo=o("ReformerTokenizerFast"),Slo=o(" (Reformer model)"),Rlo=l(),Ms=a("li"),ene=a("strong"),Plo=o("rembert"),Blo=o(" \u2014 "),fB=a("a"),Ilo=o("RemBertTokenizer"),Nlo=o(" or "),mB=a("a"),qlo=o("RemBertTokenizerFast"),jlo=o(" (RemBERT model)"),Dlo=l(),Es=a("li"),one=a("strong"),Glo=o("retribert"),Olo=o(" \u2014 "),gB=a("a"),Vlo=o("RetriBertTokenizer"),Xlo=o(" or "),hB=a("a"),zlo=o("RetriBertTokenizerFast"),Wlo=o(" (RetriBERT model)"),Qlo=l(),Cs=a("li"),rne=a("strong"),Hlo=o("roberta"),Ulo=o(" \u2014 "),pB=a("a"),Jlo=o("RobertaTokenizer"),Ylo=o(" or "),_B=a("a"),Klo=o("RobertaTokenizerFast"),Zlo=o(" (RoBERTa model)"),eio=l(),ws=a("li"),tne=a("strong"),oio=o("roformer"),rio=o(" \u2014 "),uB=a("a"),tio=o("RoFormerTokenizer"),aio=o(" or "),bB=a("a"),nio=o("RoFormerTokenizerFast"),sio=o(" (RoFormer model)"),lio=l(),Jg=a("li"),ane=a("strong"),iio=o("speech_to_text"),dio=o(" \u2014 "),vB=a("a"),cio=o("Speech2TextTokenizer"),fio=o(" (Speech2Text model)"),mio=l(),Yg=a("li"),nne=a("strong"),gio=o("speech_to_text_2"),hio=o(" \u2014 "),FB=a("a"),pio=o("Speech2Text2Tokenizer"),_io=o(" (Speech2Text2 model)"),uio=l(),As=a("li"),sne=a("strong"),bio=o("splinter"),vio=o(" \u2014 "),TB=a("a"),Fio=o("SplinterTokenizer"),Tio=o(" or "),MB=a("a"),Mio=o("SplinterTokenizerFast"),Eio=o(" (Splinter model)"),Cio=l(),ys=a("li"),lne=a("strong"),wio=o("squeezebert"),Aio=o(" \u2014 "),EB=a("a"),yio=o("SqueezeBertTokenizer"),Lio=o(" or "),CB=a("a"),xio=o("SqueezeBertTokenizerFast"),$io=o(" (SqueezeBERT model)"),kio=l(),Ls=a("li"),ine=a("strong"),Sio=o("t5"),Rio=o(" \u2014 "),wB=a("a"),Pio=o("T5Tokenizer"),Bio=o(" or "),AB=a("a"),Iio=o("T5TokenizerFast"),Nio=o(" (T5 model)"),qio=l(),Kg=a("li"),dne=a("strong"),jio=o("tapas"),Dio=o(" \u2014 "),yB=a("a"),Gio=o("TapasTokenizer"),Oio=o(" (TAPAS model)"),Vio=l(),Zg=a("li"),cne=a("strong"),Xio=o("tapex"),zio=o(" \u2014 "),LB=a("a"),Wio=o("TapexTokenizer"),Qio=o(" (TAPEX model)"),Hio=l(),eh=a("li"),fne=a("strong"),Uio=o("transfo-xl"),Jio=o(" \u2014 "),xB=a("a"),Yio=o("TransfoXLTokenizer"),Kio=o(" (Transformer-XL model)"),Zio=l(),xs=a("li"),mne=a("strong"),edo=o("visual_bert"),odo=o(" \u2014 "),$B=a("a"),rdo=o("BertTokenizer"),tdo=o(" or "),kB=a("a"),ado=o("BertTokenizerFast"),ndo=o(" (VisualBert model)"),sdo=l(),oh=a("li"),gne=a("strong"),ldo=o("wav2vec2"),ido=o(" \u2014 "),SB=a("a"),ddo=o("Wav2Vec2CTCTokenizer"),cdo=o(" (Wav2Vec2 model)"),fdo=l(),rh=a("li"),hne=a("strong"),mdo=o("wav2vec2-conformer"),gdo=o(" \u2014 "),RB=a("a"),hdo=o("Wav2Vec2CTCTokenizer"),pdo=o(" (Wav2Vec2-Conformer model)"),_do=l(),th=a("li"),pne=a("strong"),udo=o("wav2vec2_phoneme"),bdo=o(" \u2014 "),PB=a("a"),vdo=o("Wav2Vec2PhonemeCTCTokenizer"),Fdo=o(" (Wav2Vec2Phoneme model)"),Tdo=l(),$s=a("li"),_ne=a("strong"),Mdo=o("xglm"),Edo=o(" \u2014 "),BB=a("a"),Cdo=o("XGLMTokenizer"),wdo=o(" or "),IB=a("a"),Ado=o("XGLMTokenizerFast"),ydo=o(" (XGLM model)"),Ldo=l(),ah=a("li"),une=a("strong"),xdo=o("xlm"),$do=o(" \u2014 "),NB=a("a"),kdo=o("XLMTokenizer"),Sdo=o(" (XLM model)"),Rdo=l(),nh=a("li"),bne=a("strong"),Pdo=o("xlm-prophetnet"),Bdo=o(" \u2014 "),qB=a("a"),Ido=o("XLMProphetNetTokenizer"),Ndo=o(" (XLMProphetNet model)"),qdo=l(),ks=a("li"),vne=a("strong"),jdo=o("xlm-roberta"),Ddo=o(" \u2014 "),jB=a("a"),Gdo=o("XLMRobertaTokenizer"),Odo=o(" or "),DB=a("a"),Vdo=o("XLMRobertaTokenizerFast"),Xdo=o(" (XLM-RoBERTa model)"),zdo=l(),Ss=a("li"),Fne=a("strong"),Wdo=o("xlm-roberta-xl"),Qdo=o(" \u2014 "),GB=a("a"),Hdo=o("RobertaTokenizer"),Udo=o(" or "),OB=a("a"),Jdo=o("RobertaTokenizerFast"),Ydo=o(" (XLM-RoBERTa-XL model)"),Kdo=l(),Rs=a("li"),Tne=a("strong"),Zdo=o("xlnet"),eco=o(" \u2014 "),VB=a("a"),oco=o("XLNetTokenizer"),rco=o(" or "),XB=a("a"),tco=o("XLNetTokenizerFast"),aco=o(" (XLNet model)"),nco=l(),Ps=a("li"),Mne=a("strong"),sco=o("yoso"),lco=o(" \u2014 "),zB=a("a"),ico=o("AlbertTokenizer"),dco=o(" or "),WB=a("a"),cco=o("AlbertTokenizerFast"),fco=o(" (YOSO model)"),mco=l(),F(sh.$$.fragment),gco=l(),lh=a("div"),F(Q0.$$.fragment),hco=l(),Ene=a("p"),pco=o("Register a new tokenizer in this mapping."),Iqe=l(),Ei=a("h2"),ih=a("a"),Cne=a("span"),F(H0.$$.fragment),_co=l(),wne=a("span"),uco=o("AutoFeatureExtractor"),Nqe=l(),Ao=a("div"),F(U0.$$.fragment),bco=l(),J0=a("p"),vco=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),QB=a("a"),Fco=o("AutoFeatureExtractor.from_pretrained()"),Tco=o(" class method."),Mco=l(),Y0=a("p"),Eco=o("This class cannot be instantiated directly using "),Ane=a("code"),Cco=o("__init__()"),wco=o(" (throws an error)."),Aco=l(),He=a("div"),F(K0.$$.fragment),yco=l(),yne=a("p"),Lco=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),xco=l(),ya=a("p"),$co=o("The feature extractor class to instantiate is selected based on the "),Lne=a("code"),kco=o("model_type"),Sco=o(` property of the config object
(either passed as an argument or loaded from `),xne=a("code"),Rco=o("pretrained_model_name_or_path"),Pco=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),$ne=a("code"),Bco=o("pretrained_model_name_or_path"),Ico=o(":"),Nco=l(),Y=a("ul"),dh=a("li"),kne=a("strong"),qco=o("beit"),jco=o(" \u2014 "),HB=a("a"),Dco=o("BeitFeatureExtractor"),Gco=o(" (BEiT model)"),Oco=l(),ch=a("li"),Sne=a("strong"),Vco=o("clip"),Xco=o(" \u2014 "),UB=a("a"),zco=o("CLIPFeatureExtractor"),Wco=o(" (CLIP model)"),Qco=l(),fh=a("li"),Rne=a("strong"),Hco=o("convnext"),Uco=o(" \u2014 "),JB=a("a"),Jco=o("ConvNextFeatureExtractor"),Yco=o(" (ConvNext model)"),Kco=l(),mh=a("li"),Pne=a("strong"),Zco=o("cvt"),efo=o(" \u2014 "),YB=a("a"),ofo=o("ConvNextFeatureExtractor"),rfo=o(" (CvT model)"),tfo=l(),gh=a("li"),Bne=a("strong"),afo=o("data2vec-audio"),nfo=o(" \u2014 "),KB=a("a"),sfo=o("Wav2Vec2FeatureExtractor"),lfo=o(" (Data2VecAudio model)"),ifo=l(),hh=a("li"),Ine=a("strong"),dfo=o("data2vec-vision"),cfo=o(" \u2014 "),ZB=a("a"),ffo=o("BeitFeatureExtractor"),mfo=o(" (Data2VecVision model)"),gfo=l(),ph=a("li"),Nne=a("strong"),hfo=o("deit"),pfo=o(" \u2014 "),eI=a("a"),_fo=o("DeiTFeatureExtractor"),ufo=o(" (DeiT model)"),bfo=l(),_h=a("li"),qne=a("strong"),vfo=o("detr"),Ffo=o(" \u2014 "),oI=a("a"),Tfo=o("DetrFeatureExtractor"),Mfo=o(" (DETR model)"),Efo=l(),uh=a("li"),jne=a("strong"),Cfo=o("dpt"),wfo=o(" \u2014 "),rI=a("a"),Afo=o("DPTFeatureExtractor"),yfo=o(" (DPT model)"),Lfo=l(),bh=a("li"),Dne=a("strong"),xfo=o("flava"),$fo=o(" \u2014 "),tI=a("a"),kfo=o("FlavaFeatureExtractor"),Sfo=o(" (Flava model)"),Rfo=l(),vh=a("li"),Gne=a("strong"),Pfo=o("glpn"),Bfo=o(" \u2014 "),aI=a("a"),Ifo=o("GLPNFeatureExtractor"),Nfo=o(" (GLPN model)"),qfo=l(),Fh=a("li"),One=a("strong"),jfo=o("hubert"),Dfo=o(" \u2014 "),nI=a("a"),Gfo=o("Wav2Vec2FeatureExtractor"),Ofo=o(" (Hubert model)"),Vfo=l(),Th=a("li"),Vne=a("strong"),Xfo=o("imagegpt"),zfo=o(" \u2014 "),sI=a("a"),Wfo=o("ImageGPTFeatureExtractor"),Qfo=o(" (ImageGPT model)"),Hfo=l(),Mh=a("li"),Xne=a("strong"),Ufo=o("layoutlmv2"),Jfo=o(" \u2014 "),lI=a("a"),Yfo=o("LayoutLMv2FeatureExtractor"),Kfo=o(" (LayoutLMv2 model)"),Zfo=l(),Eh=a("li"),zne=a("strong"),emo=o("layoutlmv3"),omo=o(" \u2014 "),iI=a("a"),rmo=o("LayoutLMv3FeatureExtractor"),tmo=o(" (LayoutLMv3 model)"),amo=l(),Ch=a("li"),Wne=a("strong"),nmo=o("maskformer"),smo=o(" \u2014 "),dI=a("a"),lmo=o("MaskFormerFeatureExtractor"),imo=o(" (MaskFormer model)"),dmo=l(),wh=a("li"),Qne=a("strong"),cmo=o("perceiver"),fmo=o(" \u2014 "),cI=a("a"),mmo=o("PerceiverFeatureExtractor"),gmo=o(" (Perceiver model)"),hmo=l(),Ah=a("li"),Hne=a("strong"),pmo=o("poolformer"),_mo=o(" \u2014 "),fI=a("a"),umo=o("PoolFormerFeatureExtractor"),bmo=o(" (PoolFormer model)"),vmo=l(),yh=a("li"),Une=a("strong"),Fmo=o("regnet"),Tmo=o(" \u2014 "),mI=a("a"),Mmo=o("ConvNextFeatureExtractor"),Emo=o(" (RegNet model)"),Cmo=l(),Lh=a("li"),Jne=a("strong"),wmo=o("resnet"),Amo=o(" \u2014 "),gI=a("a"),ymo=o("ConvNextFeatureExtractor"),Lmo=o(" (ResNet model)"),xmo=l(),xh=a("li"),Yne=a("strong"),$mo=o("segformer"),kmo=o(" \u2014 "),hI=a("a"),Smo=o("SegformerFeatureExtractor"),Rmo=o(" (SegFormer model)"),Pmo=l(),$h=a("li"),Kne=a("strong"),Bmo=o("speech_to_text"),Imo=o(" \u2014 "),pI=a("a"),Nmo=o("Speech2TextFeatureExtractor"),qmo=o(" (Speech2Text model)"),jmo=l(),kh=a("li"),Zne=a("strong"),Dmo=o("swin"),Gmo=o(" \u2014 "),_I=a("a"),Omo=o("ViTFeatureExtractor"),Vmo=o(" (Swin model)"),Xmo=l(),Sh=a("li"),ese=a("strong"),zmo=o("van"),Wmo=o(" \u2014 "),uI=a("a"),Qmo=o("ConvNextFeatureExtractor"),Hmo=o(" (VAN model)"),Umo=l(),Rh=a("li"),ose=a("strong"),Jmo=o("vit"),Ymo=o(" \u2014 "),bI=a("a"),Kmo=o("ViTFeatureExtractor"),Zmo=o(" (ViT model)"),ego=l(),Ph=a("li"),rse=a("strong"),ogo=o("vit_mae"),rgo=o(" \u2014 "),vI=a("a"),tgo=o("ViTFeatureExtractor"),ago=o(" (ViTMAE model)"),ngo=l(),Bh=a("li"),tse=a("strong"),sgo=o("wav2vec2"),lgo=o(" \u2014 "),FI=a("a"),igo=o("Wav2Vec2FeatureExtractor"),dgo=o(" (Wav2Vec2 model)"),cgo=l(),Ih=a("li"),ase=a("strong"),fgo=o("wav2vec2-conformer"),mgo=o(" \u2014 "),TI=a("a"),ggo=o("Wav2Vec2FeatureExtractor"),hgo=o(" (Wav2Vec2-Conformer model)"),pgo=l(),Nh=a("li"),nse=a("strong"),_go=o("yolos"),ugo=o(" \u2014 "),MI=a("a"),bgo=o("YolosFeatureExtractor"),vgo=o(" (YOLOS model)"),Fgo=l(),F(qh.$$.fragment),Tgo=l(),F(jh.$$.fragment),Mgo=l(),Dh=a("div"),F(Z0.$$.fragment),Ego=l(),sse=a("p"),Cgo=o("Register a new feature extractor for this class."),qqe=l(),Ci=a("h2"),Gh=a("a"),lse=a("span"),F(eA.$$.fragment),wgo=l(),ise=a("span"),Ago=o("AutoProcessor"),jqe=l(),yo=a("div"),F(oA.$$.fragment),ygo=l(),rA=a("p"),Lgo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),EI=a("a"),xgo=o("AutoProcessor.from_pretrained()"),$go=o(" class method."),kgo=l(),tA=a("p"),Sgo=o("This class cannot be instantiated directly using "),dse=a("code"),Rgo=o("__init__()"),Pgo=o(" (throws an error)."),Bgo=l(),Ue=a("div"),F(aA.$$.fragment),Igo=l(),cse=a("p"),Ngo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),qgo=l(),wi=a("p"),jgo=o("The processor class to instantiate is selected based on the "),fse=a("code"),Dgo=o("model_type"),Ggo=o(` property of the config object (either
passed as an argument or loaded from `),mse=a("code"),Ogo=o("pretrained_model_name_or_path"),Vgo=o(" if possible):"),Xgo=l(),he=a("ul"),Oh=a("li"),gse=a("strong"),zgo=o("clip"),Wgo=o(" \u2014 "),CI=a("a"),Qgo=o("CLIPProcessor"),Hgo=o(" (CLIP model)"),Ugo=l(),Vh=a("li"),hse=a("strong"),Jgo=o("flava"),Ygo=o(" \u2014 "),pse=a("code"),Kgo=o("FLAVAProcessor"),Zgo=o(" (Flava model)"),eho=l(),Xh=a("li"),_se=a("strong"),oho=o("layoutlmv2"),rho=o(" \u2014 "),wI=a("a"),tho=o("LayoutLMv2Processor"),aho=o(" (LayoutLMv2 model)"),nho=l(),zh=a("li"),use=a("strong"),sho=o("layoutlmv3"),lho=o(" \u2014 "),AI=a("a"),iho=o("LayoutLMv3Processor"),dho=o(" (LayoutLMv3 model)"),cho=l(),Wh=a("li"),bse=a("strong"),fho=o("layoutxlm"),mho=o(" \u2014 "),yI=a("a"),gho=o("LayoutXLMProcessor"),hho=o(" (LayoutXLM model)"),pho=l(),Qh=a("li"),vse=a("strong"),_ho=o("sew"),uho=o(" \u2014 "),LI=a("a"),bho=o("Wav2Vec2Processor"),vho=o(" (SEW model)"),Fho=l(),Hh=a("li"),Fse=a("strong"),Tho=o("sew-d"),Mho=o(" \u2014 "),xI=a("a"),Eho=o("Wav2Vec2Processor"),Cho=o(" (SEW-D model)"),who=l(),Uh=a("li"),Tse=a("strong"),Aho=o("speech_to_text"),yho=o(" \u2014 "),$I=a("a"),Lho=o("Speech2TextProcessor"),xho=o(" (Speech2Text model)"),$ho=l(),Jh=a("li"),Mse=a("strong"),kho=o("speech_to_text_2"),Sho=o(" \u2014 "),kI=a("a"),Rho=o("Speech2Text2Processor"),Pho=o(" (Speech2Text2 model)"),Bho=l(),Yh=a("li"),Ese=a("strong"),Iho=o("trocr"),Nho=o(" \u2014 "),SI=a("a"),qho=o("TrOCRProcessor"),jho=o(" (TrOCR model)"),Dho=l(),Kh=a("li"),Cse=a("strong"),Gho=o("unispeech"),Oho=o(" \u2014 "),RI=a("a"),Vho=o("Wav2Vec2Processor"),Xho=o(" (UniSpeech model)"),zho=l(),Zh=a("li"),wse=a("strong"),Who=o("unispeech-sat"),Qho=o(" \u2014 "),PI=a("a"),Hho=o("Wav2Vec2Processor"),Uho=o(" (UniSpeechSat model)"),Jho=l(),ep=a("li"),Ase=a("strong"),Yho=o("vilt"),Kho=o(" \u2014 "),BI=a("a"),Zho=o("ViltProcessor"),epo=o(" (ViLT model)"),opo=l(),op=a("li"),yse=a("strong"),rpo=o("vision-text-dual-encoder"),tpo=o(" \u2014 "),II=a("a"),apo=o("VisionTextDualEncoderProcessor"),npo=o(" (VisionTextDualEncoder model)"),spo=l(),rp=a("li"),Lse=a("strong"),lpo=o("wav2vec2"),ipo=o(" \u2014 "),NI=a("a"),dpo=o("Wav2Vec2Processor"),cpo=o(" (Wav2Vec2 model)"),fpo=l(),tp=a("li"),xse=a("strong"),mpo=o("wav2vec2-conformer"),gpo=o(" \u2014 "),qI=a("a"),hpo=o("Wav2Vec2Processor"),ppo=o(" (Wav2Vec2-Conformer model)"),_po=l(),ap=a("li"),$se=a("strong"),upo=o("wavlm"),bpo=o(" \u2014 "),jI=a("a"),vpo=o("Wav2Vec2Processor"),Fpo=o(" (WavLM model)"),Tpo=l(),F(np.$$.fragment),Mpo=l(),F(sp.$$.fragment),Epo=l(),lp=a("div"),F(nA.$$.fragment),Cpo=l(),kse=a("p"),wpo=o("Register a new processor for this class."),Dqe=l(),Ai=a("h2"),ip=a("a"),Sse=a("span"),F(sA.$$.fragment),Apo=l(),Rse=a("span"),ypo=o("AutoModel"),Gqe=l(),Lo=a("div"),F(lA.$$.fragment),Lpo=l(),yi=a("p"),xpo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),DI=a("a"),$po=o("from_pretrained()"),kpo=o(" class method or the "),GI=a("a"),Spo=o("from_config()"),Rpo=o(` class
method.`),Ppo=l(),iA=a("p"),Bpo=o("This class cannot be instantiated directly using "),Pse=a("code"),Ipo=o("__init__()"),Npo=o(" (throws an error)."),qpo=l(),tt=a("div"),F(dA.$$.fragment),jpo=l(),Bse=a("p"),Dpo=o("Instantiates one of the base model classes of the library from a configuration."),Gpo=l(),Li=a("p"),Opo=o(`Note:
Loading a model from its configuration file does `),Ise=a("strong"),Vpo=o("not"),Xpo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OI=a("a"),zpo=o("from_pretrained()"),Wpo=o(" to load the model weights."),Qpo=l(),F(dp.$$.fragment),Hpo=l(),Je=a("div"),F(cA.$$.fragment),Upo=l(),Nse=a("p"),Jpo=o("Instantiate one of the base model classes of the library from a pretrained model."),Ypo=l(),La=a("p"),Kpo=o("The model class to instantiate is selected based on the "),qse=a("code"),Zpo=o("model_type"),e_o=o(` property of the config object (either
passed as an argument or loaded from `),jse=a("code"),o_o=o("pretrained_model_name_or_path"),r_o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dse=a("code"),t_o=o("pretrained_model_name_or_path"),a_o=o(":"),n_o=l(),x=a("ul"),cp=a("li"),Gse=a("strong"),s_o=o("albert"),l_o=o(" \u2014 "),VI=a("a"),i_o=o("AlbertModel"),d_o=o(" (ALBERT model)"),c_o=l(),fp=a("li"),Ose=a("strong"),f_o=o("bart"),m_o=o(" \u2014 "),XI=a("a"),g_o=o("BartModel"),h_o=o(" (BART model)"),p_o=l(),mp=a("li"),Vse=a("strong"),__o=o("beit"),u_o=o(" \u2014 "),zI=a("a"),b_o=o("BeitModel"),v_o=o(" (BEiT model)"),F_o=l(),gp=a("li"),Xse=a("strong"),T_o=o("bert"),M_o=o(" \u2014 "),WI=a("a"),E_o=o("BertModel"),C_o=o(" (BERT model)"),w_o=l(),hp=a("li"),zse=a("strong"),A_o=o("bert-generation"),y_o=o(" \u2014 "),QI=a("a"),L_o=o("BertGenerationEncoder"),x_o=o(" (Bert Generation model)"),$_o=l(),pp=a("li"),Wse=a("strong"),k_o=o("big_bird"),S_o=o(" \u2014 "),HI=a("a"),R_o=o("BigBirdModel"),P_o=o(" (BigBird model)"),B_o=l(),_p=a("li"),Qse=a("strong"),I_o=o("bigbird_pegasus"),N_o=o(" \u2014 "),UI=a("a"),q_o=o("BigBirdPegasusModel"),j_o=o(" (BigBirdPegasus model)"),D_o=l(),up=a("li"),Hse=a("strong"),G_o=o("blenderbot"),O_o=o(" \u2014 "),JI=a("a"),V_o=o("BlenderbotModel"),X_o=o(" (Blenderbot model)"),z_o=l(),bp=a("li"),Use=a("strong"),W_o=o("blenderbot-small"),Q_o=o(" \u2014 "),YI=a("a"),H_o=o("BlenderbotSmallModel"),U_o=o(" (BlenderbotSmall model)"),J_o=l(),vp=a("li"),Jse=a("strong"),Y_o=o("camembert"),K_o=o(" \u2014 "),KI=a("a"),Z_o=o("CamembertModel"),euo=o(" (CamemBERT model)"),ouo=l(),Fp=a("li"),Yse=a("strong"),ruo=o("canine"),tuo=o(" \u2014 "),ZI=a("a"),auo=o("CanineModel"),nuo=o(" (Canine model)"),suo=l(),Tp=a("li"),Kse=a("strong"),luo=o("clip"),iuo=o(" \u2014 "),eN=a("a"),duo=o("CLIPModel"),cuo=o(" (CLIP model)"),fuo=l(),Mp=a("li"),Zse=a("strong"),muo=o("convbert"),guo=o(" \u2014 "),oN=a("a"),huo=o("ConvBertModel"),puo=o(" (ConvBERT model)"),_uo=l(),Ep=a("li"),ele=a("strong"),uuo=o("convnext"),buo=o(" \u2014 "),rN=a("a"),vuo=o("ConvNextModel"),Fuo=o(" (ConvNext model)"),Tuo=l(),Cp=a("li"),ole=a("strong"),Muo=o("ctrl"),Euo=o(" \u2014 "),tN=a("a"),Cuo=o("CTRLModel"),wuo=o(" (CTRL model)"),Auo=l(),wp=a("li"),rle=a("strong"),yuo=o("cvt"),Luo=o(" \u2014 "),aN=a("a"),xuo=o("CvtModel"),$uo=o(" (CvT model)"),kuo=l(),Ap=a("li"),tle=a("strong"),Suo=o("data2vec-audio"),Ruo=o(" \u2014 "),nN=a("a"),Puo=o("Data2VecAudioModel"),Buo=o(" (Data2VecAudio model)"),Iuo=l(),yp=a("li"),ale=a("strong"),Nuo=o("data2vec-text"),quo=o(" \u2014 "),sN=a("a"),juo=o("Data2VecTextModel"),Duo=o(" (Data2VecText model)"),Guo=l(),Lp=a("li"),nle=a("strong"),Ouo=o("data2vec-vision"),Vuo=o(" \u2014 "),lN=a("a"),Xuo=o("Data2VecVisionModel"),zuo=o(" (Data2VecVision model)"),Wuo=l(),xp=a("li"),sle=a("strong"),Quo=o("deberta"),Huo=o(" \u2014 "),iN=a("a"),Uuo=o("DebertaModel"),Juo=o(" (DeBERTa model)"),Yuo=l(),$p=a("li"),lle=a("strong"),Kuo=o("deberta-v2"),Zuo=o(" \u2014 "),dN=a("a"),e2o=o("DebertaV2Model"),o2o=o(" (DeBERTa-v2 model)"),r2o=l(),kp=a("li"),ile=a("strong"),t2o=o("decision_transformer"),a2o=o(" \u2014 "),cN=a("a"),n2o=o("DecisionTransformerModel"),s2o=o(" (Decision Transformer model)"),l2o=l(),Sp=a("li"),dle=a("strong"),i2o=o("deit"),d2o=o(" \u2014 "),fN=a("a"),c2o=o("DeiTModel"),f2o=o(" (DeiT model)"),m2o=l(),Rp=a("li"),cle=a("strong"),g2o=o("detr"),h2o=o(" \u2014 "),mN=a("a"),p2o=o("DetrModel"),_2o=o(" (DETR model)"),u2o=l(),Pp=a("li"),fle=a("strong"),b2o=o("distilbert"),v2o=o(" \u2014 "),gN=a("a"),F2o=o("DistilBertModel"),T2o=o(" (DistilBERT model)"),M2o=l(),Bp=a("li"),mle=a("strong"),E2o=o("dpr"),C2o=o(" \u2014 "),hN=a("a"),w2o=o("DPRQuestionEncoder"),A2o=o(" (DPR model)"),y2o=l(),Ip=a("li"),gle=a("strong"),L2o=o("dpt"),x2o=o(" \u2014 "),pN=a("a"),$2o=o("DPTModel"),k2o=o(" (DPT model)"),S2o=l(),Np=a("li"),hle=a("strong"),R2o=o("electra"),P2o=o(" \u2014 "),_N=a("a"),B2o=o("ElectraModel"),I2o=o(" (ELECTRA model)"),N2o=l(),qp=a("li"),ple=a("strong"),q2o=o("flaubert"),j2o=o(" \u2014 "),uN=a("a"),D2o=o("FlaubertModel"),G2o=o(" (FlauBERT model)"),O2o=l(),jp=a("li"),_le=a("strong"),V2o=o("flava"),X2o=o(" \u2014 "),bN=a("a"),z2o=o("FlavaModel"),W2o=o(" (Flava model)"),Q2o=l(),Dp=a("li"),ule=a("strong"),H2o=o("fnet"),U2o=o(" \u2014 "),vN=a("a"),J2o=o("FNetModel"),Y2o=o(" (FNet model)"),K2o=l(),Gp=a("li"),ble=a("strong"),Z2o=o("fsmt"),e1o=o(" \u2014 "),FN=a("a"),o1o=o("FSMTModel"),r1o=o(" (FairSeq Machine-Translation model)"),t1o=l(),Bs=a("li"),vle=a("strong"),a1o=o("funnel"),n1o=o(" \u2014 "),TN=a("a"),s1o=o("FunnelModel"),l1o=o(" or "),MN=a("a"),i1o=o("FunnelBaseModel"),d1o=o(" (Funnel Transformer model)"),c1o=l(),Op=a("li"),Fle=a("strong"),f1o=o("glpn"),m1o=o(" \u2014 "),EN=a("a"),g1o=o("GLPNModel"),h1o=o(" (GLPN model)"),p1o=l(),Vp=a("li"),Tle=a("strong"),_1o=o("gpt2"),u1o=o(" \u2014 "),CN=a("a"),b1o=o("GPT2Model"),v1o=o(" (OpenAI GPT-2 model)"),F1o=l(),Xp=a("li"),Mle=a("strong"),T1o=o("gpt_neo"),M1o=o(" \u2014 "),wN=a("a"),E1o=o("GPTNeoModel"),C1o=o(" (GPT Neo model)"),w1o=l(),zp=a("li"),Ele=a("strong"),A1o=o("gpt_neox"),y1o=o(" \u2014 "),AN=a("a"),L1o=o("GPTNeoXModel"),x1o=o(" (GPT NeoX model)"),$1o=l(),Wp=a("li"),Cle=a("strong"),k1o=o("gptj"),S1o=o(" \u2014 "),yN=a("a"),R1o=o("GPTJModel"),P1o=o(" (GPT-J model)"),B1o=l(),Qp=a("li"),wle=a("strong"),I1o=o("hubert"),N1o=o(" \u2014 "),LN=a("a"),q1o=o("HubertModel"),j1o=o(" (Hubert model)"),D1o=l(),Hp=a("li"),Ale=a("strong"),G1o=o("ibert"),O1o=o(" \u2014 "),xN=a("a"),V1o=o("IBertModel"),X1o=o(" (I-BERT model)"),z1o=l(),Up=a("li"),yle=a("strong"),W1o=o("imagegpt"),Q1o=o(" \u2014 "),$N=a("a"),H1o=o("ImageGPTModel"),U1o=o(" (ImageGPT model)"),J1o=l(),Jp=a("li"),Lle=a("strong"),Y1o=o("layoutlm"),K1o=o(" \u2014 "),kN=a("a"),Z1o=o("LayoutLMModel"),ebo=o(" (LayoutLM model)"),obo=l(),Yp=a("li"),xle=a("strong"),rbo=o("layoutlmv2"),tbo=o(" \u2014 "),SN=a("a"),abo=o("LayoutLMv2Model"),nbo=o(" (LayoutLMv2 model)"),sbo=l(),Kp=a("li"),$le=a("strong"),lbo=o("layoutlmv3"),ibo=o(" \u2014 "),RN=a("a"),dbo=o("LayoutLMv3Model"),cbo=o(" (LayoutLMv3 model)"),fbo=l(),Zp=a("li"),kle=a("strong"),mbo=o("led"),gbo=o(" \u2014 "),PN=a("a"),hbo=o("LEDModel"),pbo=o(" (LED model)"),_bo=l(),e_=a("li"),Sle=a("strong"),ubo=o("longformer"),bbo=o(" \u2014 "),BN=a("a"),vbo=o("LongformerModel"),Fbo=o(" (Longformer model)"),Tbo=l(),o_=a("li"),Rle=a("strong"),Mbo=o("longt5"),Ebo=o(" \u2014 "),IN=a("a"),Cbo=o("LongT5Model"),wbo=o(" (LongT5 model)"),Abo=l(),r_=a("li"),Ple=a("strong"),ybo=o("luke"),Lbo=o(" \u2014 "),NN=a("a"),xbo=o("LukeModel"),$bo=o(" (LUKE model)"),kbo=l(),t_=a("li"),Ble=a("strong"),Sbo=o("lxmert"),Rbo=o(" \u2014 "),qN=a("a"),Pbo=o("LxmertModel"),Bbo=o(" (LXMERT model)"),Ibo=l(),a_=a("li"),Ile=a("strong"),Nbo=o("m2m_100"),qbo=o(" \u2014 "),jN=a("a"),jbo=o("M2M100Model"),Dbo=o(" (M2M100 model)"),Gbo=l(),n_=a("li"),Nle=a("strong"),Obo=o("marian"),Vbo=o(" \u2014 "),DN=a("a"),Xbo=o("MarianModel"),zbo=o(" (Marian model)"),Wbo=l(),s_=a("li"),qle=a("strong"),Qbo=o("maskformer"),Hbo=o(" \u2014 "),GN=a("a"),Ubo=o("MaskFormerModel"),Jbo=o(" (MaskFormer model)"),Ybo=l(),l_=a("li"),jle=a("strong"),Kbo=o("mbart"),Zbo=o(" \u2014 "),ON=a("a"),evo=o("MBartModel"),ovo=o(" (mBART model)"),rvo=l(),i_=a("li"),Dle=a("strong"),tvo=o("megatron-bert"),avo=o(" \u2014 "),VN=a("a"),nvo=o("MegatronBertModel"),svo=o(" (MegatronBert model)"),lvo=l(),d_=a("li"),Gle=a("strong"),ivo=o("mobilebert"),dvo=o(" \u2014 "),XN=a("a"),cvo=o("MobileBertModel"),fvo=o(" (MobileBERT model)"),mvo=l(),c_=a("li"),Ole=a("strong"),gvo=o("mpnet"),hvo=o(" \u2014 "),zN=a("a"),pvo=o("MPNetModel"),_vo=o(" (MPNet model)"),uvo=l(),f_=a("li"),Vle=a("strong"),bvo=o("mt5"),vvo=o(" \u2014 "),WN=a("a"),Fvo=o("MT5Model"),Tvo=o(" (mT5 model)"),Mvo=l(),m_=a("li"),Xle=a("strong"),Evo=o("nystromformer"),Cvo=o(" \u2014 "),QN=a("a"),wvo=o("NystromformerModel"),Avo=o(" (Nystromformer model)"),yvo=l(),g_=a("li"),zle=a("strong"),Lvo=o("openai-gpt"),xvo=o(" \u2014 "),HN=a("a"),$vo=o("OpenAIGPTModel"),kvo=o(" (OpenAI GPT model)"),Svo=l(),h_=a("li"),Wle=a("strong"),Rvo=o("opt"),Pvo=o(" \u2014 "),UN=a("a"),Bvo=o("OPTModel"),Ivo=o(" (OPT model)"),Nvo=l(),p_=a("li"),Qle=a("strong"),qvo=o("pegasus"),jvo=o(" \u2014 "),JN=a("a"),Dvo=o("PegasusModel"),Gvo=o(" (Pegasus model)"),Ovo=l(),__=a("li"),Hle=a("strong"),Vvo=o("perceiver"),Xvo=o(" \u2014 "),YN=a("a"),zvo=o("PerceiverModel"),Wvo=o(" (Perceiver model)"),Qvo=l(),u_=a("li"),Ule=a("strong"),Hvo=o("plbart"),Uvo=o(" \u2014 "),KN=a("a"),Jvo=o("PLBartModel"),Yvo=o(" (PLBart model)"),Kvo=l(),b_=a("li"),Jle=a("strong"),Zvo=o("poolformer"),eFo=o(" \u2014 "),ZN=a("a"),oFo=o("PoolFormerModel"),rFo=o(" (PoolFormer model)"),tFo=l(),v_=a("li"),Yle=a("strong"),aFo=o("prophetnet"),nFo=o(" \u2014 "),eq=a("a"),sFo=o("ProphetNetModel"),lFo=o(" (ProphetNet model)"),iFo=l(),F_=a("li"),Kle=a("strong"),dFo=o("qdqbert"),cFo=o(" \u2014 "),oq=a("a"),fFo=o("QDQBertModel"),mFo=o(" (QDQBert model)"),gFo=l(),T_=a("li"),Zle=a("strong"),hFo=o("reformer"),pFo=o(" \u2014 "),rq=a("a"),_Fo=o("ReformerModel"),uFo=o(" (Reformer model)"),bFo=l(),M_=a("li"),eie=a("strong"),vFo=o("regnet"),FFo=o(" \u2014 "),tq=a("a"),TFo=o("RegNetModel"),MFo=o(" (RegNet model)"),EFo=l(),E_=a("li"),oie=a("strong"),CFo=o("rembert"),wFo=o(" \u2014 "),aq=a("a"),AFo=o("RemBertModel"),yFo=o(" (RemBERT model)"),LFo=l(),C_=a("li"),rie=a("strong"),xFo=o("resnet"),$Fo=o(" \u2014 "),nq=a("a"),kFo=o("ResNetModel"),SFo=o(" (ResNet model)"),RFo=l(),w_=a("li"),tie=a("strong"),PFo=o("retribert"),BFo=o(" \u2014 "),sq=a("a"),IFo=o("RetriBertModel"),NFo=o(" (RetriBERT model)"),qFo=l(),A_=a("li"),aie=a("strong"),jFo=o("roberta"),DFo=o(" \u2014 "),lq=a("a"),GFo=o("RobertaModel"),OFo=o(" (RoBERTa model)"),VFo=l(),y_=a("li"),nie=a("strong"),XFo=o("roformer"),zFo=o(" \u2014 "),iq=a("a"),WFo=o("RoFormerModel"),QFo=o(" (RoFormer model)"),HFo=l(),L_=a("li"),sie=a("strong"),UFo=o("segformer"),JFo=o(" \u2014 "),dq=a("a"),YFo=o("SegformerModel"),KFo=o(" (SegFormer model)"),ZFo=l(),x_=a("li"),lie=a("strong"),e6o=o("sew"),o6o=o(" \u2014 "),cq=a("a"),r6o=o("SEWModel"),t6o=o(" (SEW model)"),a6o=l(),$_=a("li"),iie=a("strong"),n6o=o("sew-d"),s6o=o(" \u2014 "),fq=a("a"),l6o=o("SEWDModel"),i6o=o(" (SEW-D model)"),d6o=l(),k_=a("li"),die=a("strong"),c6o=o("speech_to_text"),f6o=o(" \u2014 "),mq=a("a"),m6o=o("Speech2TextModel"),g6o=o(" (Speech2Text model)"),h6o=l(),S_=a("li"),cie=a("strong"),p6o=o("splinter"),_6o=o(" \u2014 "),gq=a("a"),u6o=o("SplinterModel"),b6o=o(" (Splinter model)"),v6o=l(),R_=a("li"),fie=a("strong"),F6o=o("squeezebert"),T6o=o(" \u2014 "),hq=a("a"),M6o=o("SqueezeBertModel"),E6o=o(" (SqueezeBERT model)"),C6o=l(),P_=a("li"),mie=a("strong"),w6o=o("swin"),A6o=o(" \u2014 "),pq=a("a"),y6o=o("SwinModel"),L6o=o(" (Swin model)"),x6o=l(),B_=a("li"),gie=a("strong"),$6o=o("t5"),k6o=o(" \u2014 "),_q=a("a"),S6o=o("T5Model"),R6o=o(" (T5 model)"),P6o=l(),I_=a("li"),hie=a("strong"),B6o=o("tapas"),I6o=o(" \u2014 "),uq=a("a"),N6o=o("TapasModel"),q6o=o(" (TAPAS model)"),j6o=l(),N_=a("li"),pie=a("strong"),D6o=o("trajectory_transformer"),G6o=o(" \u2014 "),bq=a("a"),O6o=o("TrajectoryTransformerModel"),V6o=o(" (Trajectory Transformer model)"),X6o=l(),q_=a("li"),_ie=a("strong"),z6o=o("transfo-xl"),W6o=o(" \u2014 "),vq=a("a"),Q6o=o("TransfoXLModel"),H6o=o(" (Transformer-XL model)"),U6o=l(),j_=a("li"),uie=a("strong"),J6o=o("unispeech"),Y6o=o(" \u2014 "),Fq=a("a"),K6o=o("UniSpeechModel"),Z6o=o(" (UniSpeech model)"),eTo=l(),D_=a("li"),bie=a("strong"),oTo=o("unispeech-sat"),rTo=o(" \u2014 "),Tq=a("a"),tTo=o("UniSpeechSatModel"),aTo=o(" (UniSpeechSat model)"),nTo=l(),G_=a("li"),vie=a("strong"),sTo=o("van"),lTo=o(" \u2014 "),Mq=a("a"),iTo=o("VanModel"),dTo=o(" (VAN model)"),cTo=l(),O_=a("li"),Fie=a("strong"),fTo=o("vilt"),mTo=o(" \u2014 "),Eq=a("a"),gTo=o("ViltModel"),hTo=o(" (ViLT model)"),pTo=l(),V_=a("li"),Tie=a("strong"),_To=o("vision-text-dual-encoder"),uTo=o(" \u2014 "),Cq=a("a"),bTo=o("VisionTextDualEncoderModel"),vTo=o(" (VisionTextDualEncoder model)"),FTo=l(),X_=a("li"),Mie=a("strong"),TTo=o("visual_bert"),MTo=o(" \u2014 "),wq=a("a"),ETo=o("VisualBertModel"),CTo=o(" (VisualBert model)"),wTo=l(),z_=a("li"),Eie=a("strong"),ATo=o("vit"),yTo=o(" \u2014 "),Aq=a("a"),LTo=o("ViTModel"),xTo=o(" (ViT model)"),$To=l(),W_=a("li"),Cie=a("strong"),kTo=o("vit_mae"),STo=o(" \u2014 "),yq=a("a"),RTo=o("ViTMAEModel"),PTo=o(" (ViTMAE model)"),BTo=l(),Q_=a("li"),wie=a("strong"),ITo=o("wav2vec2"),NTo=o(" \u2014 "),Lq=a("a"),qTo=o("Wav2Vec2Model"),jTo=o(" (Wav2Vec2 model)"),DTo=l(),H_=a("li"),Aie=a("strong"),GTo=o("wav2vec2-conformer"),OTo=o(" \u2014 "),xq=a("a"),VTo=o("Wav2Vec2ConformerModel"),XTo=o(" (Wav2Vec2-Conformer model)"),zTo=l(),U_=a("li"),yie=a("strong"),WTo=o("wavlm"),QTo=o(" \u2014 "),$q=a("a"),HTo=o("WavLMModel"),UTo=o(" (WavLM model)"),JTo=l(),J_=a("li"),Lie=a("strong"),YTo=o("xglm"),KTo=o(" \u2014 "),kq=a("a"),ZTo=o("XGLMModel"),e7o=o(" (XGLM model)"),o7o=l(),Y_=a("li"),xie=a("strong"),r7o=o("xlm"),t7o=o(" \u2014 "),Sq=a("a"),a7o=o("XLMModel"),n7o=o(" (XLM model)"),s7o=l(),K_=a("li"),$ie=a("strong"),l7o=o("xlm-prophetnet"),i7o=o(" \u2014 "),Rq=a("a"),d7o=o("XLMProphetNetModel"),c7o=o(" (XLMProphetNet model)"),f7o=l(),Z_=a("li"),kie=a("strong"),m7o=o("xlm-roberta"),g7o=o(" \u2014 "),Pq=a("a"),h7o=o("XLMRobertaModel"),p7o=o(" (XLM-RoBERTa model)"),_7o=l(),eu=a("li"),Sie=a("strong"),u7o=o("xlm-roberta-xl"),b7o=o(" \u2014 "),Bq=a("a"),v7o=o("XLMRobertaXLModel"),F7o=o(" (XLM-RoBERTa-XL model)"),T7o=l(),ou=a("li"),Rie=a("strong"),M7o=o("xlnet"),E7o=o(" \u2014 "),Iq=a("a"),C7o=o("XLNetModel"),w7o=o(" (XLNet model)"),A7o=l(),ru=a("li"),Pie=a("strong"),y7o=o("yolos"),L7o=o(" \u2014 "),Nq=a("a"),x7o=o("YolosModel"),$7o=o(" (YOLOS model)"),k7o=l(),tu=a("li"),Bie=a("strong"),S7o=o("yoso"),R7o=o(" \u2014 "),qq=a("a"),P7o=o("YosoModel"),B7o=o(" (YOSO model)"),I7o=l(),au=a("p"),N7o=o("The model is set in evaluation mode by default using "),Iie=a("code"),q7o=o("model.eval()"),j7o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nie=a("code"),D7o=o("model.train()"),G7o=l(),F(nu.$$.fragment),Oqe=l(),xi=a("h2"),su=a("a"),qie=a("span"),F(fA.$$.fragment),O7o=l(),jie=a("span"),V7o=o("AutoModelForPreTraining"),Vqe=l(),xo=a("div"),F(mA.$$.fragment),X7o=l(),$i=a("p"),z7o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),jq=a("a"),W7o=o("from_pretrained()"),Q7o=o(" class method or the "),Dq=a("a"),H7o=o("from_config()"),U7o=o(` class
method.`),J7o=l(),gA=a("p"),Y7o=o("This class cannot be instantiated directly using "),Die=a("code"),K7o=o("__init__()"),Z7o=o(" (throws an error)."),e9o=l(),at=a("div"),F(hA.$$.fragment),o9o=l(),Gie=a("p"),r9o=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),t9o=l(),ki=a("p"),a9o=o(`Note:
Loading a model from its configuration file does `),Oie=a("strong"),n9o=o("not"),s9o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Gq=a("a"),l9o=o("from_pretrained()"),i9o=o(" to load the model weights."),d9o=l(),F(lu.$$.fragment),c9o=l(),Ye=a("div"),F(pA.$$.fragment),f9o=l(),Vie=a("p"),m9o=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),g9o=l(),xa=a("p"),h9o=o("The model class to instantiate is selected based on the "),Xie=a("code"),p9o=o("model_type"),_9o=o(` property of the config object (either
passed as an argument or loaded from `),zie=a("code"),u9o=o("pretrained_model_name_or_path"),b9o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wie=a("code"),v9o=o("pretrained_model_name_or_path"),F9o=o(":"),T9o=l(),G=a("ul"),iu=a("li"),Qie=a("strong"),M9o=o("albert"),E9o=o(" \u2014 "),Oq=a("a"),C9o=o("AlbertForPreTraining"),w9o=o(" (ALBERT model)"),A9o=l(),du=a("li"),Hie=a("strong"),y9o=o("bart"),L9o=o(" \u2014 "),Vq=a("a"),x9o=o("BartForConditionalGeneration"),$9o=o(" (BART model)"),k9o=l(),cu=a("li"),Uie=a("strong"),S9o=o("bert"),R9o=o(" \u2014 "),Xq=a("a"),P9o=o("BertForPreTraining"),B9o=o(" (BERT model)"),I9o=l(),fu=a("li"),Jie=a("strong"),N9o=o("big_bird"),q9o=o(" \u2014 "),zq=a("a"),j9o=o("BigBirdForPreTraining"),D9o=o(" (BigBird model)"),G9o=l(),mu=a("li"),Yie=a("strong"),O9o=o("camembert"),V9o=o(" \u2014 "),Wq=a("a"),X9o=o("CamembertForMaskedLM"),z9o=o(" (CamemBERT model)"),W9o=l(),gu=a("li"),Kie=a("strong"),Q9o=o("ctrl"),H9o=o(" \u2014 "),Qq=a("a"),U9o=o("CTRLLMHeadModel"),J9o=o(" (CTRL model)"),Y9o=l(),hu=a("li"),Zie=a("strong"),K9o=o("data2vec-text"),Z9o=o(" \u2014 "),Hq=a("a"),eMo=o("Data2VecTextForMaskedLM"),oMo=o(" (Data2VecText model)"),rMo=l(),pu=a("li"),ede=a("strong"),tMo=o("deberta"),aMo=o(" \u2014 "),Uq=a("a"),nMo=o("DebertaForMaskedLM"),sMo=o(" (DeBERTa model)"),lMo=l(),_u=a("li"),ode=a("strong"),iMo=o("deberta-v2"),dMo=o(" \u2014 "),Jq=a("a"),cMo=o("DebertaV2ForMaskedLM"),fMo=o(" (DeBERTa-v2 model)"),mMo=l(),uu=a("li"),rde=a("strong"),gMo=o("distilbert"),hMo=o(" \u2014 "),Yq=a("a"),pMo=o("DistilBertForMaskedLM"),_Mo=o(" (DistilBERT model)"),uMo=l(),bu=a("li"),tde=a("strong"),bMo=o("electra"),vMo=o(" \u2014 "),Kq=a("a"),FMo=o("ElectraForPreTraining"),TMo=o(" (ELECTRA model)"),MMo=l(),vu=a("li"),ade=a("strong"),EMo=o("flaubert"),CMo=o(" \u2014 "),Zq=a("a"),wMo=o("FlaubertWithLMHeadModel"),AMo=o(" (FlauBERT model)"),yMo=l(),Fu=a("li"),nde=a("strong"),LMo=o("flava"),xMo=o(" \u2014 "),ej=a("a"),$Mo=o("FlavaForPreTraining"),kMo=o(" (Flava model)"),SMo=l(),Tu=a("li"),sde=a("strong"),RMo=o("fnet"),PMo=o(" \u2014 "),oj=a("a"),BMo=o("FNetForPreTraining"),IMo=o(" (FNet model)"),NMo=l(),Mu=a("li"),lde=a("strong"),qMo=o("fsmt"),jMo=o(" \u2014 "),rj=a("a"),DMo=o("FSMTForConditionalGeneration"),GMo=o(" (FairSeq Machine-Translation model)"),OMo=l(),Eu=a("li"),ide=a("strong"),VMo=o("funnel"),XMo=o(" \u2014 "),tj=a("a"),zMo=o("FunnelForPreTraining"),WMo=o(" (Funnel Transformer model)"),QMo=l(),Cu=a("li"),dde=a("strong"),HMo=o("gpt2"),UMo=o(" \u2014 "),aj=a("a"),JMo=o("GPT2LMHeadModel"),YMo=o(" (OpenAI GPT-2 model)"),KMo=l(),wu=a("li"),cde=a("strong"),ZMo=o("ibert"),e4o=o(" \u2014 "),nj=a("a"),o4o=o("IBertForMaskedLM"),r4o=o(" (I-BERT model)"),t4o=l(),Au=a("li"),fde=a("strong"),a4o=o("layoutlm"),n4o=o(" \u2014 "),sj=a("a"),s4o=o("LayoutLMForMaskedLM"),l4o=o(" (LayoutLM model)"),i4o=l(),yu=a("li"),mde=a("strong"),d4o=o("longformer"),c4o=o(" \u2014 "),lj=a("a"),f4o=o("LongformerForMaskedLM"),m4o=o(" (Longformer model)"),g4o=l(),Lu=a("li"),gde=a("strong"),h4o=o("lxmert"),p4o=o(" \u2014 "),ij=a("a"),_4o=o("LxmertForPreTraining"),u4o=o(" (LXMERT model)"),b4o=l(),xu=a("li"),hde=a("strong"),v4o=o("megatron-bert"),F4o=o(" \u2014 "),dj=a("a"),T4o=o("MegatronBertForPreTraining"),M4o=o(" (MegatronBert model)"),E4o=l(),$u=a("li"),pde=a("strong"),C4o=o("mobilebert"),w4o=o(" \u2014 "),cj=a("a"),A4o=o("MobileBertForPreTraining"),y4o=o(" (MobileBERT model)"),L4o=l(),ku=a("li"),_de=a("strong"),x4o=o("mpnet"),$4o=o(" \u2014 "),fj=a("a"),k4o=o("MPNetForMaskedLM"),S4o=o(" (MPNet model)"),R4o=l(),Su=a("li"),ude=a("strong"),P4o=o("openai-gpt"),B4o=o(" \u2014 "),mj=a("a"),I4o=o("OpenAIGPTLMHeadModel"),N4o=o(" (OpenAI GPT model)"),q4o=l(),Ru=a("li"),bde=a("strong"),j4o=o("retribert"),D4o=o(" \u2014 "),gj=a("a"),G4o=o("RetriBertModel"),O4o=o(" (RetriBERT model)"),V4o=l(),Pu=a("li"),vde=a("strong"),X4o=o("roberta"),z4o=o(" \u2014 "),hj=a("a"),W4o=o("RobertaForMaskedLM"),Q4o=o(" (RoBERTa model)"),H4o=l(),Bu=a("li"),Fde=a("strong"),U4o=o("splinter"),J4o=o(" \u2014 "),pj=a("a"),Y4o=o("SplinterForPreTraining"),K4o=o(" (Splinter model)"),Z4o=l(),Iu=a("li"),Tde=a("strong"),eEo=o("squeezebert"),oEo=o(" \u2014 "),_j=a("a"),rEo=o("SqueezeBertForMaskedLM"),tEo=o(" (SqueezeBERT model)"),aEo=l(),Nu=a("li"),Mde=a("strong"),nEo=o("t5"),sEo=o(" \u2014 "),uj=a("a"),lEo=o("T5ForConditionalGeneration"),iEo=o(" (T5 model)"),dEo=l(),qu=a("li"),Ede=a("strong"),cEo=o("tapas"),fEo=o(" \u2014 "),bj=a("a"),mEo=o("TapasForMaskedLM"),gEo=o(" (TAPAS model)"),hEo=l(),ju=a("li"),Cde=a("strong"),pEo=o("transfo-xl"),_Eo=o(" \u2014 "),vj=a("a"),uEo=o("TransfoXLLMHeadModel"),bEo=o(" (Transformer-XL model)"),vEo=l(),Du=a("li"),wde=a("strong"),FEo=o("unispeech"),TEo=o(" \u2014 "),Fj=a("a"),MEo=o("UniSpeechForPreTraining"),EEo=o(" (UniSpeech model)"),CEo=l(),Gu=a("li"),Ade=a("strong"),wEo=o("unispeech-sat"),AEo=o(" \u2014 "),Tj=a("a"),yEo=o("UniSpeechSatForPreTraining"),LEo=o(" (UniSpeechSat model)"),xEo=l(),Ou=a("li"),yde=a("strong"),$Eo=o("visual_bert"),kEo=o(" \u2014 "),Mj=a("a"),SEo=o("VisualBertForPreTraining"),REo=o(" (VisualBert model)"),PEo=l(),Vu=a("li"),Lde=a("strong"),BEo=o("vit_mae"),IEo=o(" \u2014 "),Ej=a("a"),NEo=o("ViTMAEForPreTraining"),qEo=o(" (ViTMAE model)"),jEo=l(),Xu=a("li"),xde=a("strong"),DEo=o("wav2vec2"),GEo=o(" \u2014 "),Cj=a("a"),OEo=o("Wav2Vec2ForPreTraining"),VEo=o(" (Wav2Vec2 model)"),XEo=l(),zu=a("li"),$de=a("strong"),zEo=o("wav2vec2-conformer"),WEo=o(" \u2014 "),wj=a("a"),QEo=o("Wav2Vec2ConformerForPreTraining"),HEo=o(" (Wav2Vec2-Conformer model)"),UEo=l(),Wu=a("li"),kde=a("strong"),JEo=o("xlm"),YEo=o(" \u2014 "),Aj=a("a"),KEo=o("XLMWithLMHeadModel"),ZEo=o(" (XLM model)"),eCo=l(),Qu=a("li"),Sde=a("strong"),oCo=o("xlm-roberta"),rCo=o(" \u2014 "),yj=a("a"),tCo=o("XLMRobertaForMaskedLM"),aCo=o(" (XLM-RoBERTa model)"),nCo=l(),Hu=a("li"),Rde=a("strong"),sCo=o("xlm-roberta-xl"),lCo=o(" \u2014 "),Lj=a("a"),iCo=o("XLMRobertaXLForMaskedLM"),dCo=o(" (XLM-RoBERTa-XL model)"),cCo=l(),Uu=a("li"),Pde=a("strong"),fCo=o("xlnet"),mCo=o(" \u2014 "),xj=a("a"),gCo=o("XLNetLMHeadModel"),hCo=o(" (XLNet model)"),pCo=l(),Ju=a("p"),_Co=o("The model is set in evaluation mode by default using "),Bde=a("code"),uCo=o("model.eval()"),bCo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ide=a("code"),vCo=o("model.train()"),FCo=l(),F(Yu.$$.fragment),Xqe=l(),Si=a("h2"),Ku=a("a"),Nde=a("span"),F(_A.$$.fragment),TCo=l(),qde=a("span"),MCo=o("AutoModelForCausalLM"),zqe=l(),$o=a("div"),F(uA.$$.fragment),ECo=l(),Ri=a("p"),CCo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),$j=a("a"),wCo=o("from_pretrained()"),ACo=o(" class method or the "),kj=a("a"),yCo=o("from_config()"),LCo=o(` class
method.`),xCo=l(),bA=a("p"),$Co=o("This class cannot be instantiated directly using "),jde=a("code"),kCo=o("__init__()"),SCo=o(" (throws an error)."),RCo=l(),nt=a("div"),F(vA.$$.fragment),PCo=l(),Dde=a("p"),BCo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),ICo=l(),Pi=a("p"),NCo=o(`Note:
Loading a model from its configuration file does `),Gde=a("strong"),qCo=o("not"),jCo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Sj=a("a"),DCo=o("from_pretrained()"),GCo=o(" to load the model weights."),OCo=l(),F(Zu.$$.fragment),VCo=l(),Ke=a("div"),F(FA.$$.fragment),XCo=l(),Ode=a("p"),zCo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),WCo=l(),$a=a("p"),QCo=o("The model class to instantiate is selected based on the "),Vde=a("code"),HCo=o("model_type"),UCo=o(` property of the config object (either
passed as an argument or loaded from `),Xde=a("code"),JCo=o("pretrained_model_name_or_path"),YCo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zde=a("code"),KCo=o("pretrained_model_name_or_path"),ZCo=o(":"),e5o=l(),z=a("ul"),e2=a("li"),Wde=a("strong"),o5o=o("bart"),r5o=o(" \u2014 "),Rj=a("a"),t5o=o("BartForCausalLM"),a5o=o(" (BART model)"),n5o=l(),o2=a("li"),Qde=a("strong"),s5o=o("bert"),l5o=o(" \u2014 "),Pj=a("a"),i5o=o("BertLMHeadModel"),d5o=o(" (BERT model)"),c5o=l(),r2=a("li"),Hde=a("strong"),f5o=o("bert-generation"),m5o=o(" \u2014 "),Bj=a("a"),g5o=o("BertGenerationDecoder"),h5o=o(" (Bert Generation model)"),p5o=l(),t2=a("li"),Ude=a("strong"),_5o=o("big_bird"),u5o=o(" \u2014 "),Ij=a("a"),b5o=o("BigBirdForCausalLM"),v5o=o(" (BigBird model)"),F5o=l(),a2=a("li"),Jde=a("strong"),T5o=o("bigbird_pegasus"),M5o=o(" \u2014 "),Nj=a("a"),E5o=o("BigBirdPegasusForCausalLM"),C5o=o(" (BigBirdPegasus model)"),w5o=l(),n2=a("li"),Yde=a("strong"),A5o=o("blenderbot"),y5o=o(" \u2014 "),qj=a("a"),L5o=o("BlenderbotForCausalLM"),x5o=o(" (Blenderbot model)"),$5o=l(),s2=a("li"),Kde=a("strong"),k5o=o("blenderbot-small"),S5o=o(" \u2014 "),jj=a("a"),R5o=o("BlenderbotSmallForCausalLM"),P5o=o(" (BlenderbotSmall model)"),B5o=l(),l2=a("li"),Zde=a("strong"),I5o=o("camembert"),N5o=o(" \u2014 "),Dj=a("a"),q5o=o("CamembertForCausalLM"),j5o=o(" (CamemBERT model)"),D5o=l(),i2=a("li"),ece=a("strong"),G5o=o("ctrl"),O5o=o(" \u2014 "),Gj=a("a"),V5o=o("CTRLLMHeadModel"),X5o=o(" (CTRL model)"),z5o=l(),d2=a("li"),oce=a("strong"),W5o=o("data2vec-text"),Q5o=o(" \u2014 "),Oj=a("a"),H5o=o("Data2VecTextForCausalLM"),U5o=o(" (Data2VecText model)"),J5o=l(),c2=a("li"),rce=a("strong"),Y5o=o("electra"),K5o=o(" \u2014 "),Vj=a("a"),Z5o=o("ElectraForCausalLM"),e3o=o(" (ELECTRA model)"),o3o=l(),f2=a("li"),tce=a("strong"),r3o=o("gpt2"),t3o=o(" \u2014 "),Xj=a("a"),a3o=o("GPT2LMHeadModel"),n3o=o(" (OpenAI GPT-2 model)"),s3o=l(),m2=a("li"),ace=a("strong"),l3o=o("gpt_neo"),i3o=o(" \u2014 "),zj=a("a"),d3o=o("GPTNeoForCausalLM"),c3o=o(" (GPT Neo model)"),f3o=l(),g2=a("li"),nce=a("strong"),m3o=o("gpt_neox"),g3o=o(" \u2014 "),Wj=a("a"),h3o=o("GPTNeoXForCausalLM"),p3o=o(" (GPT NeoX model)"),_3o=l(),h2=a("li"),sce=a("strong"),u3o=o("gptj"),b3o=o(" \u2014 "),Qj=a("a"),v3o=o("GPTJForCausalLM"),F3o=o(" (GPT-J model)"),T3o=l(),p2=a("li"),lce=a("strong"),M3o=o("marian"),E3o=o(" \u2014 "),Hj=a("a"),C3o=o("MarianForCausalLM"),w3o=o(" (Marian model)"),A3o=l(),_2=a("li"),ice=a("strong"),y3o=o("mbart"),L3o=o(" \u2014 "),Uj=a("a"),x3o=o("MBartForCausalLM"),$3o=o(" (mBART model)"),k3o=l(),u2=a("li"),dce=a("strong"),S3o=o("megatron-bert"),R3o=o(" \u2014 "),Jj=a("a"),P3o=o("MegatronBertForCausalLM"),B3o=o(" (MegatronBert model)"),I3o=l(),b2=a("li"),cce=a("strong"),N3o=o("openai-gpt"),q3o=o(" \u2014 "),Yj=a("a"),j3o=o("OpenAIGPTLMHeadModel"),D3o=o(" (OpenAI GPT model)"),G3o=l(),v2=a("li"),fce=a("strong"),O3o=o("opt"),V3o=o(" \u2014 "),Kj=a("a"),X3o=o("OPTForCausalLM"),z3o=o(" (OPT model)"),W3o=l(),F2=a("li"),mce=a("strong"),Q3o=o("pegasus"),H3o=o(" \u2014 "),Zj=a("a"),U3o=o("PegasusForCausalLM"),J3o=o(" (Pegasus model)"),Y3o=l(),T2=a("li"),gce=a("strong"),K3o=o("plbart"),Z3o=o(" \u2014 "),eD=a("a"),ewo=o("PLBartForCausalLM"),owo=o(" (PLBart model)"),rwo=l(),M2=a("li"),hce=a("strong"),two=o("prophetnet"),awo=o(" \u2014 "),oD=a("a"),nwo=o("ProphetNetForCausalLM"),swo=o(" (ProphetNet model)"),lwo=l(),E2=a("li"),pce=a("strong"),iwo=o("qdqbert"),dwo=o(" \u2014 "),rD=a("a"),cwo=o("QDQBertLMHeadModel"),fwo=o(" (QDQBert model)"),mwo=l(),C2=a("li"),_ce=a("strong"),gwo=o("reformer"),hwo=o(" \u2014 "),tD=a("a"),pwo=o("ReformerModelWithLMHead"),_wo=o(" (Reformer model)"),uwo=l(),w2=a("li"),uce=a("strong"),bwo=o("rembert"),vwo=o(" \u2014 "),aD=a("a"),Fwo=o("RemBertForCausalLM"),Two=o(" (RemBERT model)"),Mwo=l(),A2=a("li"),bce=a("strong"),Ewo=o("roberta"),Cwo=o(" \u2014 "),nD=a("a"),wwo=o("RobertaForCausalLM"),Awo=o(" (RoBERTa model)"),ywo=l(),y2=a("li"),vce=a("strong"),Lwo=o("roformer"),xwo=o(" \u2014 "),sD=a("a"),$wo=o("RoFormerForCausalLM"),kwo=o(" (RoFormer model)"),Swo=l(),L2=a("li"),Fce=a("strong"),Rwo=o("speech_to_text_2"),Pwo=o(" \u2014 "),lD=a("a"),Bwo=o("Speech2Text2ForCausalLM"),Iwo=o(" (Speech2Text2 model)"),Nwo=l(),x2=a("li"),Tce=a("strong"),qwo=o("transfo-xl"),jwo=o(" \u2014 "),iD=a("a"),Dwo=o("TransfoXLLMHeadModel"),Gwo=o(" (Transformer-XL model)"),Owo=l(),$2=a("li"),Mce=a("strong"),Vwo=o("trocr"),Xwo=o(" \u2014 "),dD=a("a"),zwo=o("TrOCRForCausalLM"),Wwo=o(" (TrOCR model)"),Qwo=l(),k2=a("li"),Ece=a("strong"),Hwo=o("xglm"),Uwo=o(" \u2014 "),cD=a("a"),Jwo=o("XGLMForCausalLM"),Ywo=o(" (XGLM model)"),Kwo=l(),S2=a("li"),Cce=a("strong"),Zwo=o("xlm"),e0o=o(" \u2014 "),fD=a("a"),o0o=o("XLMWithLMHeadModel"),r0o=o(" (XLM model)"),t0o=l(),R2=a("li"),wce=a("strong"),a0o=o("xlm-prophetnet"),n0o=o(" \u2014 "),mD=a("a"),s0o=o("XLMProphetNetForCausalLM"),l0o=o(" (XLMProphetNet model)"),i0o=l(),P2=a("li"),Ace=a("strong"),d0o=o("xlm-roberta"),c0o=o(" \u2014 "),gD=a("a"),f0o=o("XLMRobertaForCausalLM"),m0o=o(" (XLM-RoBERTa model)"),g0o=l(),B2=a("li"),yce=a("strong"),h0o=o("xlm-roberta-xl"),p0o=o(" \u2014 "),hD=a("a"),_0o=o("XLMRobertaXLForCausalLM"),u0o=o(" (XLM-RoBERTa-XL model)"),b0o=l(),I2=a("li"),Lce=a("strong"),v0o=o("xlnet"),F0o=o(" \u2014 "),pD=a("a"),T0o=o("XLNetLMHeadModel"),M0o=o(" (XLNet model)"),E0o=l(),N2=a("p"),C0o=o("The model is set in evaluation mode by default using "),xce=a("code"),w0o=o("model.eval()"),A0o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$ce=a("code"),y0o=o("model.train()"),L0o=l(),F(q2.$$.fragment),Wqe=l(),Bi=a("h2"),j2=a("a"),kce=a("span"),F(TA.$$.fragment),x0o=l(),Sce=a("span"),$0o=o("AutoModelForMaskedLM"),Qqe=l(),ko=a("div"),F(MA.$$.fragment),k0o=l(),Ii=a("p"),S0o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),_D=a("a"),R0o=o("from_pretrained()"),P0o=o(" class method or the "),uD=a("a"),B0o=o("from_config()"),I0o=o(` class
method.`),N0o=l(),EA=a("p"),q0o=o("This class cannot be instantiated directly using "),Rce=a("code"),j0o=o("__init__()"),D0o=o(" (throws an error)."),G0o=l(),st=a("div"),F(CA.$$.fragment),O0o=l(),Pce=a("p"),V0o=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),X0o=l(),Ni=a("p"),z0o=o(`Note:
Loading a model from its configuration file does `),Bce=a("strong"),W0o=o("not"),Q0o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bD=a("a"),H0o=o("from_pretrained()"),U0o=o(" to load the model weights."),J0o=l(),F(D2.$$.fragment),Y0o=l(),Ze=a("div"),F(wA.$$.fragment),K0o=l(),Ice=a("p"),Z0o=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),eAo=l(),ka=a("p"),oAo=o("The model class to instantiate is selected based on the "),Nce=a("code"),rAo=o("model_type"),tAo=o(` property of the config object (either
passed as an argument or loaded from `),qce=a("code"),aAo=o("pretrained_model_name_or_path"),nAo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jce=a("code"),sAo=o("pretrained_model_name_or_path"),lAo=o(":"),iAo=l(),Q=a("ul"),G2=a("li"),Dce=a("strong"),dAo=o("albert"),cAo=o(" \u2014 "),vD=a("a"),fAo=o("AlbertForMaskedLM"),mAo=o(" (ALBERT model)"),gAo=l(),O2=a("li"),Gce=a("strong"),hAo=o("bart"),pAo=o(" \u2014 "),FD=a("a"),_Ao=o("BartForConditionalGeneration"),uAo=o(" (BART model)"),bAo=l(),V2=a("li"),Oce=a("strong"),vAo=o("bert"),FAo=o(" \u2014 "),TD=a("a"),TAo=o("BertForMaskedLM"),MAo=o(" (BERT model)"),EAo=l(),X2=a("li"),Vce=a("strong"),CAo=o("big_bird"),wAo=o(" \u2014 "),MD=a("a"),AAo=o("BigBirdForMaskedLM"),yAo=o(" (BigBird model)"),LAo=l(),z2=a("li"),Xce=a("strong"),xAo=o("camembert"),$Ao=o(" \u2014 "),ED=a("a"),kAo=o("CamembertForMaskedLM"),SAo=o(" (CamemBERT model)"),RAo=l(),W2=a("li"),zce=a("strong"),PAo=o("convbert"),BAo=o(" \u2014 "),CD=a("a"),IAo=o("ConvBertForMaskedLM"),NAo=o(" (ConvBERT model)"),qAo=l(),Q2=a("li"),Wce=a("strong"),jAo=o("data2vec-text"),DAo=o(" \u2014 "),wD=a("a"),GAo=o("Data2VecTextForMaskedLM"),OAo=o(" (Data2VecText model)"),VAo=l(),H2=a("li"),Qce=a("strong"),XAo=o("deberta"),zAo=o(" \u2014 "),AD=a("a"),WAo=o("DebertaForMaskedLM"),QAo=o(" (DeBERTa model)"),HAo=l(),U2=a("li"),Hce=a("strong"),UAo=o("deberta-v2"),JAo=o(" \u2014 "),yD=a("a"),YAo=o("DebertaV2ForMaskedLM"),KAo=o(" (DeBERTa-v2 model)"),ZAo=l(),J2=a("li"),Uce=a("strong"),eyo=o("distilbert"),oyo=o(" \u2014 "),LD=a("a"),ryo=o("DistilBertForMaskedLM"),tyo=o(" (DistilBERT model)"),ayo=l(),Y2=a("li"),Jce=a("strong"),nyo=o("electra"),syo=o(" \u2014 "),xD=a("a"),lyo=o("ElectraForMaskedLM"),iyo=o(" (ELECTRA model)"),dyo=l(),K2=a("li"),Yce=a("strong"),cyo=o("flaubert"),fyo=o(" \u2014 "),$D=a("a"),myo=o("FlaubertWithLMHeadModel"),gyo=o(" (FlauBERT model)"),hyo=l(),Z2=a("li"),Kce=a("strong"),pyo=o("fnet"),_yo=o(" \u2014 "),kD=a("a"),uyo=o("FNetForMaskedLM"),byo=o(" (FNet model)"),vyo=l(),e1=a("li"),Zce=a("strong"),Fyo=o("funnel"),Tyo=o(" \u2014 "),SD=a("a"),Myo=o("FunnelForMaskedLM"),Eyo=o(" (Funnel Transformer model)"),Cyo=l(),o1=a("li"),efe=a("strong"),wyo=o("ibert"),Ayo=o(" \u2014 "),RD=a("a"),yyo=o("IBertForMaskedLM"),Lyo=o(" (I-BERT model)"),xyo=l(),r1=a("li"),ofe=a("strong"),$yo=o("layoutlm"),kyo=o(" \u2014 "),PD=a("a"),Syo=o("LayoutLMForMaskedLM"),Ryo=o(" (LayoutLM model)"),Pyo=l(),t1=a("li"),rfe=a("strong"),Byo=o("longformer"),Iyo=o(" \u2014 "),BD=a("a"),Nyo=o("LongformerForMaskedLM"),qyo=o(" (Longformer model)"),jyo=l(),a1=a("li"),tfe=a("strong"),Dyo=o("mbart"),Gyo=o(" \u2014 "),ID=a("a"),Oyo=o("MBartForConditionalGeneration"),Vyo=o(" (mBART model)"),Xyo=l(),n1=a("li"),afe=a("strong"),zyo=o("megatron-bert"),Wyo=o(" \u2014 "),ND=a("a"),Qyo=o("MegatronBertForMaskedLM"),Hyo=o(" (MegatronBert model)"),Uyo=l(),s1=a("li"),nfe=a("strong"),Jyo=o("mobilebert"),Yyo=o(" \u2014 "),qD=a("a"),Kyo=o("MobileBertForMaskedLM"),Zyo=o(" (MobileBERT model)"),eLo=l(),l1=a("li"),sfe=a("strong"),oLo=o("mpnet"),rLo=o(" \u2014 "),jD=a("a"),tLo=o("MPNetForMaskedLM"),aLo=o(" (MPNet model)"),nLo=l(),i1=a("li"),lfe=a("strong"),sLo=o("nystromformer"),lLo=o(" \u2014 "),DD=a("a"),iLo=o("NystromformerForMaskedLM"),dLo=o(" (Nystromformer model)"),cLo=l(),d1=a("li"),ife=a("strong"),fLo=o("perceiver"),mLo=o(" \u2014 "),GD=a("a"),gLo=o("PerceiverForMaskedLM"),hLo=o(" (Perceiver model)"),pLo=l(),c1=a("li"),dfe=a("strong"),_Lo=o("qdqbert"),uLo=o(" \u2014 "),OD=a("a"),bLo=o("QDQBertForMaskedLM"),vLo=o(" (QDQBert model)"),FLo=l(),f1=a("li"),cfe=a("strong"),TLo=o("reformer"),MLo=o(" \u2014 "),VD=a("a"),ELo=o("ReformerForMaskedLM"),CLo=o(" (Reformer model)"),wLo=l(),m1=a("li"),ffe=a("strong"),ALo=o("rembert"),yLo=o(" \u2014 "),XD=a("a"),LLo=o("RemBertForMaskedLM"),xLo=o(" (RemBERT model)"),$Lo=l(),g1=a("li"),mfe=a("strong"),kLo=o("roberta"),SLo=o(" \u2014 "),zD=a("a"),RLo=o("RobertaForMaskedLM"),PLo=o(" (RoBERTa model)"),BLo=l(),h1=a("li"),gfe=a("strong"),ILo=o("roformer"),NLo=o(" \u2014 "),WD=a("a"),qLo=o("RoFormerForMaskedLM"),jLo=o(" (RoFormer model)"),DLo=l(),p1=a("li"),hfe=a("strong"),GLo=o("squeezebert"),OLo=o(" \u2014 "),QD=a("a"),VLo=o("SqueezeBertForMaskedLM"),XLo=o(" (SqueezeBERT model)"),zLo=l(),_1=a("li"),pfe=a("strong"),WLo=o("tapas"),QLo=o(" \u2014 "),HD=a("a"),HLo=o("TapasForMaskedLM"),ULo=o(" (TAPAS model)"),JLo=l(),u1=a("li"),_fe=a("strong"),YLo=o("wav2vec2"),KLo=o(" \u2014 "),ufe=a("code"),ZLo=o("Wav2Vec2ForMaskedLM"),e8o=o(" (Wav2Vec2 model)"),o8o=l(),b1=a("li"),bfe=a("strong"),r8o=o("xlm"),t8o=o(" \u2014 "),UD=a("a"),a8o=o("XLMWithLMHeadModel"),n8o=o(" (XLM model)"),s8o=l(),v1=a("li"),vfe=a("strong"),l8o=o("xlm-roberta"),i8o=o(" \u2014 "),JD=a("a"),d8o=o("XLMRobertaForMaskedLM"),c8o=o(" (XLM-RoBERTa model)"),f8o=l(),F1=a("li"),Ffe=a("strong"),m8o=o("xlm-roberta-xl"),g8o=o(" \u2014 "),YD=a("a"),h8o=o("XLMRobertaXLForMaskedLM"),p8o=o(" (XLM-RoBERTa-XL model)"),_8o=l(),T1=a("li"),Tfe=a("strong"),u8o=o("yoso"),b8o=o(" \u2014 "),KD=a("a"),v8o=o("YosoForMaskedLM"),F8o=o(" (YOSO model)"),T8o=l(),M1=a("p"),M8o=o("The model is set in evaluation mode by default using "),Mfe=a("code"),E8o=o("model.eval()"),C8o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Efe=a("code"),w8o=o("model.train()"),A8o=l(),F(E1.$$.fragment),Hqe=l(),qi=a("h2"),C1=a("a"),Cfe=a("span"),F(AA.$$.fragment),y8o=l(),wfe=a("span"),L8o=o("AutoModelForSeq2SeqLM"),Uqe=l(),So=a("div"),F(yA.$$.fragment),x8o=l(),ji=a("p"),$8o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),ZD=a("a"),k8o=o("from_pretrained()"),S8o=o(" class method or the "),eG=a("a"),R8o=o("from_config()"),P8o=o(` class
method.`),B8o=l(),LA=a("p"),I8o=o("This class cannot be instantiated directly using "),Afe=a("code"),N8o=o("__init__()"),q8o=o(" (throws an error)."),j8o=l(),lt=a("div"),F(xA.$$.fragment),D8o=l(),yfe=a("p"),G8o=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),O8o=l(),Di=a("p"),V8o=o(`Note:
Loading a model from its configuration file does `),Lfe=a("strong"),X8o=o("not"),z8o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oG=a("a"),W8o=o("from_pretrained()"),Q8o=o(" to load the model weights."),H8o=l(),F(w1.$$.fragment),U8o=l(),eo=a("div"),F($A.$$.fragment),J8o=l(),xfe=a("p"),Y8o=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),K8o=l(),Sa=a("p"),Z8o=o("The model class to instantiate is selected based on the "),$fe=a("code"),exo=o("model_type"),oxo=o(` property of the config object (either
passed as an argument or loaded from `),kfe=a("code"),rxo=o("pretrained_model_name_or_path"),txo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sfe=a("code"),axo=o("pretrained_model_name_or_path"),nxo=o(":"),sxo=l(),pe=a("ul"),A1=a("li"),Rfe=a("strong"),lxo=o("bart"),ixo=o(" \u2014 "),rG=a("a"),dxo=o("BartForConditionalGeneration"),cxo=o(" (BART model)"),fxo=l(),y1=a("li"),Pfe=a("strong"),mxo=o("bigbird_pegasus"),gxo=o(" \u2014 "),tG=a("a"),hxo=o("BigBirdPegasusForConditionalGeneration"),pxo=o(" (BigBirdPegasus model)"),_xo=l(),L1=a("li"),Bfe=a("strong"),uxo=o("blenderbot"),bxo=o(" \u2014 "),aG=a("a"),vxo=o("BlenderbotForConditionalGeneration"),Fxo=o(" (Blenderbot model)"),Txo=l(),x1=a("li"),Ife=a("strong"),Mxo=o("blenderbot-small"),Exo=o(" \u2014 "),nG=a("a"),Cxo=o("BlenderbotSmallForConditionalGeneration"),wxo=o(" (BlenderbotSmall model)"),Axo=l(),$1=a("li"),Nfe=a("strong"),yxo=o("encoder-decoder"),Lxo=o(" \u2014 "),sG=a("a"),xxo=o("EncoderDecoderModel"),$xo=o(" (Encoder decoder model)"),kxo=l(),k1=a("li"),qfe=a("strong"),Sxo=o("fsmt"),Rxo=o(" \u2014 "),lG=a("a"),Pxo=o("FSMTForConditionalGeneration"),Bxo=o(" (FairSeq Machine-Translation model)"),Ixo=l(),S1=a("li"),jfe=a("strong"),Nxo=o("led"),qxo=o(" \u2014 "),iG=a("a"),jxo=o("LEDForConditionalGeneration"),Dxo=o(" (LED model)"),Gxo=l(),R1=a("li"),Dfe=a("strong"),Oxo=o("longt5"),Vxo=o(" \u2014 "),dG=a("a"),Xxo=o("LongT5ForConditionalGeneration"),zxo=o(" (LongT5 model)"),Wxo=l(),P1=a("li"),Gfe=a("strong"),Qxo=o("m2m_100"),Hxo=o(" \u2014 "),cG=a("a"),Uxo=o("M2M100ForConditionalGeneration"),Jxo=o(" (M2M100 model)"),Yxo=l(),B1=a("li"),Ofe=a("strong"),Kxo=o("marian"),Zxo=o(" \u2014 "),fG=a("a"),e$o=o("MarianMTModel"),o$o=o(" (Marian model)"),r$o=l(),I1=a("li"),Vfe=a("strong"),t$o=o("mbart"),a$o=o(" \u2014 "),mG=a("a"),n$o=o("MBartForConditionalGeneration"),s$o=o(" (mBART model)"),l$o=l(),N1=a("li"),Xfe=a("strong"),i$o=o("mt5"),d$o=o(" \u2014 "),gG=a("a"),c$o=o("MT5ForConditionalGeneration"),f$o=o(" (mT5 model)"),m$o=l(),q1=a("li"),zfe=a("strong"),g$o=o("pegasus"),h$o=o(" \u2014 "),hG=a("a"),p$o=o("PegasusForConditionalGeneration"),_$o=o(" (Pegasus model)"),u$o=l(),j1=a("li"),Wfe=a("strong"),b$o=o("plbart"),v$o=o(" \u2014 "),pG=a("a"),F$o=o("PLBartForConditionalGeneration"),T$o=o(" (PLBart model)"),M$o=l(),D1=a("li"),Qfe=a("strong"),E$o=o("prophetnet"),C$o=o(" \u2014 "),_G=a("a"),w$o=o("ProphetNetForConditionalGeneration"),A$o=o(" (ProphetNet model)"),y$o=l(),G1=a("li"),Hfe=a("strong"),L$o=o("t5"),x$o=o(" \u2014 "),uG=a("a"),$$o=o("T5ForConditionalGeneration"),k$o=o(" (T5 model)"),S$o=l(),O1=a("li"),Ufe=a("strong"),R$o=o("xlm-prophetnet"),P$o=o(" \u2014 "),bG=a("a"),B$o=o("XLMProphetNetForConditionalGeneration"),I$o=o(" (XLMProphetNet model)"),N$o=l(),V1=a("p"),q$o=o("The model is set in evaluation mode by default using "),Jfe=a("code"),j$o=o("model.eval()"),D$o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Yfe=a("code"),G$o=o("model.train()"),O$o=l(),F(X1.$$.fragment),Jqe=l(),Gi=a("h2"),z1=a("a"),Kfe=a("span"),F(kA.$$.fragment),V$o=l(),Zfe=a("span"),X$o=o("AutoModelForSequenceClassification"),Yqe=l(),Ro=a("div"),F(SA.$$.fragment),z$o=l(),Oi=a("p"),W$o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),vG=a("a"),Q$o=o("from_pretrained()"),H$o=o(" class method or the "),FG=a("a"),U$o=o("from_config()"),J$o=o(` class
method.`),Y$o=l(),RA=a("p"),K$o=o("This class cannot be instantiated directly using "),eme=a("code"),Z$o=o("__init__()"),eko=o(" (throws an error)."),oko=l(),it=a("div"),F(PA.$$.fragment),rko=l(),ome=a("p"),tko=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),ako=l(),Vi=a("p"),nko=o(`Note:
Loading a model from its configuration file does `),rme=a("strong"),sko=o("not"),lko=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TG=a("a"),iko=o("from_pretrained()"),dko=o(" to load the model weights."),cko=l(),F(W1.$$.fragment),fko=l(),oo=a("div"),F(BA.$$.fragment),mko=l(),tme=a("p"),gko=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),hko=l(),Ra=a("p"),pko=o("The model class to instantiate is selected based on the "),ame=a("code"),_ko=o("model_type"),uko=o(` property of the config object (either
passed as an argument or loaded from `),nme=a("code"),bko=o("pretrained_model_name_or_path"),vko=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sme=a("code"),Fko=o("pretrained_model_name_or_path"),Tko=o(":"),Mko=l(),N=a("ul"),Q1=a("li"),lme=a("strong"),Eko=o("albert"),Cko=o(" \u2014 "),MG=a("a"),wko=o("AlbertForSequenceClassification"),Ako=o(" (ALBERT model)"),yko=l(),H1=a("li"),ime=a("strong"),Lko=o("bart"),xko=o(" \u2014 "),EG=a("a"),$ko=o("BartForSequenceClassification"),kko=o(" (BART model)"),Sko=l(),U1=a("li"),dme=a("strong"),Rko=o("bert"),Pko=o(" \u2014 "),CG=a("a"),Bko=o("BertForSequenceClassification"),Iko=o(" (BERT model)"),Nko=l(),J1=a("li"),cme=a("strong"),qko=o("big_bird"),jko=o(" \u2014 "),wG=a("a"),Dko=o("BigBirdForSequenceClassification"),Gko=o(" (BigBird model)"),Oko=l(),Y1=a("li"),fme=a("strong"),Vko=o("bigbird_pegasus"),Xko=o(" \u2014 "),AG=a("a"),zko=o("BigBirdPegasusForSequenceClassification"),Wko=o(" (BigBirdPegasus model)"),Qko=l(),K1=a("li"),mme=a("strong"),Hko=o("camembert"),Uko=o(" \u2014 "),yG=a("a"),Jko=o("CamembertForSequenceClassification"),Yko=o(" (CamemBERT model)"),Kko=l(),Z1=a("li"),gme=a("strong"),Zko=o("canine"),eSo=o(" \u2014 "),LG=a("a"),oSo=o("CanineForSequenceClassification"),rSo=o(" (Canine model)"),tSo=l(),eb=a("li"),hme=a("strong"),aSo=o("convbert"),nSo=o(" \u2014 "),xG=a("a"),sSo=o("ConvBertForSequenceClassification"),lSo=o(" (ConvBERT model)"),iSo=l(),ob=a("li"),pme=a("strong"),dSo=o("ctrl"),cSo=o(" \u2014 "),$G=a("a"),fSo=o("CTRLForSequenceClassification"),mSo=o(" (CTRL model)"),gSo=l(),rb=a("li"),_me=a("strong"),hSo=o("data2vec-text"),pSo=o(" \u2014 "),kG=a("a"),_So=o("Data2VecTextForSequenceClassification"),uSo=o(" (Data2VecText model)"),bSo=l(),tb=a("li"),ume=a("strong"),vSo=o("deberta"),FSo=o(" \u2014 "),SG=a("a"),TSo=o("DebertaForSequenceClassification"),MSo=o(" (DeBERTa model)"),ESo=l(),ab=a("li"),bme=a("strong"),CSo=o("deberta-v2"),wSo=o(" \u2014 "),RG=a("a"),ASo=o("DebertaV2ForSequenceClassification"),ySo=o(" (DeBERTa-v2 model)"),LSo=l(),nb=a("li"),vme=a("strong"),xSo=o("distilbert"),$So=o(" \u2014 "),PG=a("a"),kSo=o("DistilBertForSequenceClassification"),SSo=o(" (DistilBERT model)"),RSo=l(),sb=a("li"),Fme=a("strong"),PSo=o("electra"),BSo=o(" \u2014 "),BG=a("a"),ISo=o("ElectraForSequenceClassification"),NSo=o(" (ELECTRA model)"),qSo=l(),lb=a("li"),Tme=a("strong"),jSo=o("flaubert"),DSo=o(" \u2014 "),IG=a("a"),GSo=o("FlaubertForSequenceClassification"),OSo=o(" (FlauBERT model)"),VSo=l(),ib=a("li"),Mme=a("strong"),XSo=o("fnet"),zSo=o(" \u2014 "),NG=a("a"),WSo=o("FNetForSequenceClassification"),QSo=o(" (FNet model)"),HSo=l(),db=a("li"),Eme=a("strong"),USo=o("funnel"),JSo=o(" \u2014 "),qG=a("a"),YSo=o("FunnelForSequenceClassification"),KSo=o(" (Funnel Transformer model)"),ZSo=l(),cb=a("li"),Cme=a("strong"),eRo=o("gpt2"),oRo=o(" \u2014 "),jG=a("a"),rRo=o("GPT2ForSequenceClassification"),tRo=o(" (OpenAI GPT-2 model)"),aRo=l(),fb=a("li"),wme=a("strong"),nRo=o("gpt_neo"),sRo=o(" \u2014 "),DG=a("a"),lRo=o("GPTNeoForSequenceClassification"),iRo=o(" (GPT Neo model)"),dRo=l(),mb=a("li"),Ame=a("strong"),cRo=o("gptj"),fRo=o(" \u2014 "),GG=a("a"),mRo=o("GPTJForSequenceClassification"),gRo=o(" (GPT-J model)"),hRo=l(),gb=a("li"),yme=a("strong"),pRo=o("ibert"),_Ro=o(" \u2014 "),OG=a("a"),uRo=o("IBertForSequenceClassification"),bRo=o(" (I-BERT model)"),vRo=l(),hb=a("li"),Lme=a("strong"),FRo=o("layoutlm"),TRo=o(" \u2014 "),VG=a("a"),MRo=o("LayoutLMForSequenceClassification"),ERo=o(" (LayoutLM model)"),CRo=l(),pb=a("li"),xme=a("strong"),wRo=o("layoutlmv2"),ARo=o(" \u2014 "),XG=a("a"),yRo=o("LayoutLMv2ForSequenceClassification"),LRo=o(" (LayoutLMv2 model)"),xRo=l(),_b=a("li"),$me=a("strong"),$Ro=o("layoutlmv3"),kRo=o(" \u2014 "),zG=a("a"),SRo=o("LayoutLMv3ForSequenceClassification"),RRo=o(" (LayoutLMv3 model)"),PRo=l(),ub=a("li"),kme=a("strong"),BRo=o("led"),IRo=o(" \u2014 "),WG=a("a"),NRo=o("LEDForSequenceClassification"),qRo=o(" (LED model)"),jRo=l(),bb=a("li"),Sme=a("strong"),DRo=o("longformer"),GRo=o(" \u2014 "),QG=a("a"),ORo=o("LongformerForSequenceClassification"),VRo=o(" (Longformer model)"),XRo=l(),vb=a("li"),Rme=a("strong"),zRo=o("mbart"),WRo=o(" \u2014 "),HG=a("a"),QRo=o("MBartForSequenceClassification"),HRo=o(" (mBART model)"),URo=l(),Fb=a("li"),Pme=a("strong"),JRo=o("megatron-bert"),YRo=o(" \u2014 "),UG=a("a"),KRo=o("MegatronBertForSequenceClassification"),ZRo=o(" (MegatronBert model)"),ePo=l(),Tb=a("li"),Bme=a("strong"),oPo=o("mobilebert"),rPo=o(" \u2014 "),JG=a("a"),tPo=o("MobileBertForSequenceClassification"),aPo=o(" (MobileBERT model)"),nPo=l(),Mb=a("li"),Ime=a("strong"),sPo=o("mpnet"),lPo=o(" \u2014 "),YG=a("a"),iPo=o("MPNetForSequenceClassification"),dPo=o(" (MPNet model)"),cPo=l(),Eb=a("li"),Nme=a("strong"),fPo=o("nystromformer"),mPo=o(" \u2014 "),KG=a("a"),gPo=o("NystromformerForSequenceClassification"),hPo=o(" (Nystromformer model)"),pPo=l(),Cb=a("li"),qme=a("strong"),_Po=o("openai-gpt"),uPo=o(" \u2014 "),ZG=a("a"),bPo=o("OpenAIGPTForSequenceClassification"),vPo=o(" (OpenAI GPT model)"),FPo=l(),wb=a("li"),jme=a("strong"),TPo=o("perceiver"),MPo=o(" \u2014 "),eO=a("a"),EPo=o("PerceiverForSequenceClassification"),CPo=o(" (Perceiver model)"),wPo=l(),Ab=a("li"),Dme=a("strong"),APo=o("plbart"),yPo=o(" \u2014 "),oO=a("a"),LPo=o("PLBartForSequenceClassification"),xPo=o(" (PLBart model)"),$Po=l(),yb=a("li"),Gme=a("strong"),kPo=o("qdqbert"),SPo=o(" \u2014 "),rO=a("a"),RPo=o("QDQBertForSequenceClassification"),PPo=o(" (QDQBert model)"),BPo=l(),Lb=a("li"),Ome=a("strong"),IPo=o("reformer"),NPo=o(" \u2014 "),tO=a("a"),qPo=o("ReformerForSequenceClassification"),jPo=o(" (Reformer model)"),DPo=l(),xb=a("li"),Vme=a("strong"),GPo=o("rembert"),OPo=o(" \u2014 "),aO=a("a"),VPo=o("RemBertForSequenceClassification"),XPo=o(" (RemBERT model)"),zPo=l(),$b=a("li"),Xme=a("strong"),WPo=o("roberta"),QPo=o(" \u2014 "),nO=a("a"),HPo=o("RobertaForSequenceClassification"),UPo=o(" (RoBERTa model)"),JPo=l(),kb=a("li"),zme=a("strong"),YPo=o("roformer"),KPo=o(" \u2014 "),sO=a("a"),ZPo=o("RoFormerForSequenceClassification"),eBo=o(" (RoFormer model)"),oBo=l(),Sb=a("li"),Wme=a("strong"),rBo=o("squeezebert"),tBo=o(" \u2014 "),lO=a("a"),aBo=o("SqueezeBertForSequenceClassification"),nBo=o(" (SqueezeBERT model)"),sBo=l(),Rb=a("li"),Qme=a("strong"),lBo=o("tapas"),iBo=o(" \u2014 "),iO=a("a"),dBo=o("TapasForSequenceClassification"),cBo=o(" (TAPAS model)"),fBo=l(),Pb=a("li"),Hme=a("strong"),mBo=o("transfo-xl"),gBo=o(" \u2014 "),dO=a("a"),hBo=o("TransfoXLForSequenceClassification"),pBo=o(" (Transformer-XL model)"),_Bo=l(),Bb=a("li"),Ume=a("strong"),uBo=o("xlm"),bBo=o(" \u2014 "),cO=a("a"),vBo=o("XLMForSequenceClassification"),FBo=o(" (XLM model)"),TBo=l(),Ib=a("li"),Jme=a("strong"),MBo=o("xlm-roberta"),EBo=o(" \u2014 "),fO=a("a"),CBo=o("XLMRobertaForSequenceClassification"),wBo=o(" (XLM-RoBERTa model)"),ABo=l(),Nb=a("li"),Yme=a("strong"),yBo=o("xlm-roberta-xl"),LBo=o(" \u2014 "),mO=a("a"),xBo=o("XLMRobertaXLForSequenceClassification"),$Bo=o(" (XLM-RoBERTa-XL model)"),kBo=l(),qb=a("li"),Kme=a("strong"),SBo=o("xlnet"),RBo=o(" \u2014 "),gO=a("a"),PBo=o("XLNetForSequenceClassification"),BBo=o(" (XLNet model)"),IBo=l(),jb=a("li"),Zme=a("strong"),NBo=o("yoso"),qBo=o(" \u2014 "),hO=a("a"),jBo=o("YosoForSequenceClassification"),DBo=o(" (YOSO model)"),GBo=l(),Db=a("p"),OBo=o("The model is set in evaluation mode by default using "),ege=a("code"),VBo=o("model.eval()"),XBo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),oge=a("code"),zBo=o("model.train()"),WBo=l(),F(Gb.$$.fragment),Kqe=l(),Xi=a("h2"),Ob=a("a"),rge=a("span"),F(IA.$$.fragment),QBo=l(),tge=a("span"),HBo=o("AutoModelForMultipleChoice"),Zqe=l(),Po=a("div"),F(NA.$$.fragment),UBo=l(),zi=a("p"),JBo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),pO=a("a"),YBo=o("from_pretrained()"),KBo=o(" class method or the "),_O=a("a"),ZBo=o("from_config()"),eIo=o(` class
method.`),oIo=l(),qA=a("p"),rIo=o("This class cannot be instantiated directly using "),age=a("code"),tIo=o("__init__()"),aIo=o(" (throws an error)."),nIo=l(),dt=a("div"),F(jA.$$.fragment),sIo=l(),nge=a("p"),lIo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),iIo=l(),Wi=a("p"),dIo=o(`Note:
Loading a model from its configuration file does `),sge=a("strong"),cIo=o("not"),fIo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uO=a("a"),mIo=o("from_pretrained()"),gIo=o(" to load the model weights."),hIo=l(),F(Vb.$$.fragment),pIo=l(),ro=a("div"),F(DA.$$.fragment),_Io=l(),lge=a("p"),uIo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),bIo=l(),Pa=a("p"),vIo=o("The model class to instantiate is selected based on the "),ige=a("code"),FIo=o("model_type"),TIo=o(` property of the config object (either
passed as an argument or loaded from `),dge=a("code"),MIo=o("pretrained_model_name_or_path"),EIo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cge=a("code"),CIo=o("pretrained_model_name_or_path"),wIo=o(":"),AIo=l(),K=a("ul"),Xb=a("li"),fge=a("strong"),yIo=o("albert"),LIo=o(" \u2014 "),bO=a("a"),xIo=o("AlbertForMultipleChoice"),$Io=o(" (ALBERT model)"),kIo=l(),zb=a("li"),mge=a("strong"),SIo=o("bert"),RIo=o(" \u2014 "),vO=a("a"),PIo=o("BertForMultipleChoice"),BIo=o(" (BERT model)"),IIo=l(),Wb=a("li"),gge=a("strong"),NIo=o("big_bird"),qIo=o(" \u2014 "),FO=a("a"),jIo=o("BigBirdForMultipleChoice"),DIo=o(" (BigBird model)"),GIo=l(),Qb=a("li"),hge=a("strong"),OIo=o("camembert"),VIo=o(" \u2014 "),TO=a("a"),XIo=o("CamembertForMultipleChoice"),zIo=o(" (CamemBERT model)"),WIo=l(),Hb=a("li"),pge=a("strong"),QIo=o("canine"),HIo=o(" \u2014 "),MO=a("a"),UIo=o("CanineForMultipleChoice"),JIo=o(" (Canine model)"),YIo=l(),Ub=a("li"),_ge=a("strong"),KIo=o("convbert"),ZIo=o(" \u2014 "),EO=a("a"),eNo=o("ConvBertForMultipleChoice"),oNo=o(" (ConvBERT model)"),rNo=l(),Jb=a("li"),uge=a("strong"),tNo=o("data2vec-text"),aNo=o(" \u2014 "),CO=a("a"),nNo=o("Data2VecTextForMultipleChoice"),sNo=o(" (Data2VecText model)"),lNo=l(),Yb=a("li"),bge=a("strong"),iNo=o("deberta-v2"),dNo=o(" \u2014 "),wO=a("a"),cNo=o("DebertaV2ForMultipleChoice"),fNo=o(" (DeBERTa-v2 model)"),mNo=l(),Kb=a("li"),vge=a("strong"),gNo=o("distilbert"),hNo=o(" \u2014 "),AO=a("a"),pNo=o("DistilBertForMultipleChoice"),_No=o(" (DistilBERT model)"),uNo=l(),Zb=a("li"),Fge=a("strong"),bNo=o("electra"),vNo=o(" \u2014 "),yO=a("a"),FNo=o("ElectraForMultipleChoice"),TNo=o(" (ELECTRA model)"),MNo=l(),ev=a("li"),Tge=a("strong"),ENo=o("flaubert"),CNo=o(" \u2014 "),LO=a("a"),wNo=o("FlaubertForMultipleChoice"),ANo=o(" (FlauBERT model)"),yNo=l(),ov=a("li"),Mge=a("strong"),LNo=o("fnet"),xNo=o(" \u2014 "),xO=a("a"),$No=o("FNetForMultipleChoice"),kNo=o(" (FNet model)"),SNo=l(),rv=a("li"),Ege=a("strong"),RNo=o("funnel"),PNo=o(" \u2014 "),$O=a("a"),BNo=o("FunnelForMultipleChoice"),INo=o(" (Funnel Transformer model)"),NNo=l(),tv=a("li"),Cge=a("strong"),qNo=o("ibert"),jNo=o(" \u2014 "),kO=a("a"),DNo=o("IBertForMultipleChoice"),GNo=o(" (I-BERT model)"),ONo=l(),av=a("li"),wge=a("strong"),VNo=o("longformer"),XNo=o(" \u2014 "),SO=a("a"),zNo=o("LongformerForMultipleChoice"),WNo=o(" (Longformer model)"),QNo=l(),nv=a("li"),Age=a("strong"),HNo=o("megatron-bert"),UNo=o(" \u2014 "),RO=a("a"),JNo=o("MegatronBertForMultipleChoice"),YNo=o(" (MegatronBert model)"),KNo=l(),sv=a("li"),yge=a("strong"),ZNo=o("mobilebert"),eqo=o(" \u2014 "),PO=a("a"),oqo=o("MobileBertForMultipleChoice"),rqo=o(" (MobileBERT model)"),tqo=l(),lv=a("li"),Lge=a("strong"),aqo=o("mpnet"),nqo=o(" \u2014 "),BO=a("a"),sqo=o("MPNetForMultipleChoice"),lqo=o(" (MPNet model)"),iqo=l(),iv=a("li"),xge=a("strong"),dqo=o("nystromformer"),cqo=o(" \u2014 "),IO=a("a"),fqo=o("NystromformerForMultipleChoice"),mqo=o(" (Nystromformer model)"),gqo=l(),dv=a("li"),$ge=a("strong"),hqo=o("qdqbert"),pqo=o(" \u2014 "),NO=a("a"),_qo=o("QDQBertForMultipleChoice"),uqo=o(" (QDQBert model)"),bqo=l(),cv=a("li"),kge=a("strong"),vqo=o("rembert"),Fqo=o(" \u2014 "),qO=a("a"),Tqo=o("RemBertForMultipleChoice"),Mqo=o(" (RemBERT model)"),Eqo=l(),fv=a("li"),Sge=a("strong"),Cqo=o("roberta"),wqo=o(" \u2014 "),jO=a("a"),Aqo=o("RobertaForMultipleChoice"),yqo=o(" (RoBERTa model)"),Lqo=l(),mv=a("li"),Rge=a("strong"),xqo=o("roformer"),$qo=o(" \u2014 "),DO=a("a"),kqo=o("RoFormerForMultipleChoice"),Sqo=o(" (RoFormer model)"),Rqo=l(),gv=a("li"),Pge=a("strong"),Pqo=o("squeezebert"),Bqo=o(" \u2014 "),GO=a("a"),Iqo=o("SqueezeBertForMultipleChoice"),Nqo=o(" (SqueezeBERT model)"),qqo=l(),hv=a("li"),Bge=a("strong"),jqo=o("xlm"),Dqo=o(" \u2014 "),OO=a("a"),Gqo=o("XLMForMultipleChoice"),Oqo=o(" (XLM model)"),Vqo=l(),pv=a("li"),Ige=a("strong"),Xqo=o("xlm-roberta"),zqo=o(" \u2014 "),VO=a("a"),Wqo=o("XLMRobertaForMultipleChoice"),Qqo=o(" (XLM-RoBERTa model)"),Hqo=l(),_v=a("li"),Nge=a("strong"),Uqo=o("xlm-roberta-xl"),Jqo=o(" \u2014 "),XO=a("a"),Yqo=o("XLMRobertaXLForMultipleChoice"),Kqo=o(" (XLM-RoBERTa-XL model)"),Zqo=l(),uv=a("li"),qge=a("strong"),ejo=o("xlnet"),ojo=o(" \u2014 "),zO=a("a"),rjo=o("XLNetForMultipleChoice"),tjo=o(" (XLNet model)"),ajo=l(),bv=a("li"),jge=a("strong"),njo=o("yoso"),sjo=o(" \u2014 "),WO=a("a"),ljo=o("YosoForMultipleChoice"),ijo=o(" (YOSO model)"),djo=l(),vv=a("p"),cjo=o("The model is set in evaluation mode by default using "),Dge=a("code"),fjo=o("model.eval()"),mjo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gge=a("code"),gjo=o("model.train()"),hjo=l(),F(Fv.$$.fragment),eje=l(),Qi=a("h2"),Tv=a("a"),Oge=a("span"),F(GA.$$.fragment),pjo=l(),Vge=a("span"),_jo=o("AutoModelForNextSentencePrediction"),oje=l(),Bo=a("div"),F(OA.$$.fragment),ujo=l(),Hi=a("p"),bjo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),QO=a("a"),vjo=o("from_pretrained()"),Fjo=o(" class method or the "),HO=a("a"),Tjo=o("from_config()"),Mjo=o(` class
method.`),Ejo=l(),VA=a("p"),Cjo=o("This class cannot be instantiated directly using "),Xge=a("code"),wjo=o("__init__()"),Ajo=o(" (throws an error)."),yjo=l(),ct=a("div"),F(XA.$$.fragment),Ljo=l(),zge=a("p"),xjo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),$jo=l(),Ui=a("p"),kjo=o(`Note:
Loading a model from its configuration file does `),Wge=a("strong"),Sjo=o("not"),Rjo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UO=a("a"),Pjo=o("from_pretrained()"),Bjo=o(" to load the model weights."),Ijo=l(),F(Mv.$$.fragment),Njo=l(),to=a("div"),F(zA.$$.fragment),qjo=l(),Qge=a("p"),jjo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Djo=l(),Ba=a("p"),Gjo=o("The model class to instantiate is selected based on the "),Hge=a("code"),Ojo=o("model_type"),Vjo=o(` property of the config object (either
passed as an argument or loaded from `),Uge=a("code"),Xjo=o("pretrained_model_name_or_path"),zjo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jge=a("code"),Wjo=o("pretrained_model_name_or_path"),Qjo=o(":"),Hjo=l(),Yr=a("ul"),Ev=a("li"),Yge=a("strong"),Ujo=o("bert"),Jjo=o(" \u2014 "),JO=a("a"),Yjo=o("BertForNextSentencePrediction"),Kjo=o(" (BERT model)"),Zjo=l(),Cv=a("li"),Kge=a("strong"),eDo=o("fnet"),oDo=o(" \u2014 "),YO=a("a"),rDo=o("FNetForNextSentencePrediction"),tDo=o(" (FNet model)"),aDo=l(),wv=a("li"),Zge=a("strong"),nDo=o("megatron-bert"),sDo=o(" \u2014 "),KO=a("a"),lDo=o("MegatronBertForNextSentencePrediction"),iDo=o(" (MegatronBert model)"),dDo=l(),Av=a("li"),ehe=a("strong"),cDo=o("mobilebert"),fDo=o(" \u2014 "),ZO=a("a"),mDo=o("MobileBertForNextSentencePrediction"),gDo=o(" (MobileBERT model)"),hDo=l(),yv=a("li"),ohe=a("strong"),pDo=o("qdqbert"),_Do=o(" \u2014 "),eV=a("a"),uDo=o("QDQBertForNextSentencePrediction"),bDo=o(" (QDQBert model)"),vDo=l(),Lv=a("p"),FDo=o("The model is set in evaluation mode by default using "),rhe=a("code"),TDo=o("model.eval()"),MDo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),the=a("code"),EDo=o("model.train()"),CDo=l(),F(xv.$$.fragment),rje=l(),Ji=a("h2"),$v=a("a"),ahe=a("span"),F(WA.$$.fragment),wDo=l(),nhe=a("span"),ADo=o("AutoModelForTokenClassification"),tje=l(),Io=a("div"),F(QA.$$.fragment),yDo=l(),Yi=a("p"),LDo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),oV=a("a"),xDo=o("from_pretrained()"),$Do=o(" class method or the "),rV=a("a"),kDo=o("from_config()"),SDo=o(` class
method.`),RDo=l(),HA=a("p"),PDo=o("This class cannot be instantiated directly using "),she=a("code"),BDo=o("__init__()"),IDo=o(" (throws an error)."),NDo=l(),ft=a("div"),F(UA.$$.fragment),qDo=l(),lhe=a("p"),jDo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),DDo=l(),Ki=a("p"),GDo=o(`Note:
Loading a model from its configuration file does `),ihe=a("strong"),ODo=o("not"),VDo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tV=a("a"),XDo=o("from_pretrained()"),zDo=o(" to load the model weights."),WDo=l(),F(kv.$$.fragment),QDo=l(),ao=a("div"),F(JA.$$.fragment),HDo=l(),dhe=a("p"),UDo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),JDo=l(),Ia=a("p"),YDo=o("The model class to instantiate is selected based on the "),che=a("code"),KDo=o("model_type"),ZDo=o(` property of the config object (either
passed as an argument or loaded from `),fhe=a("code"),eGo=o("pretrained_model_name_or_path"),oGo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mhe=a("code"),rGo=o("pretrained_model_name_or_path"),tGo=o(":"),aGo=l(),H=a("ul"),Sv=a("li"),ghe=a("strong"),nGo=o("albert"),sGo=o(" \u2014 "),aV=a("a"),lGo=o("AlbertForTokenClassification"),iGo=o(" (ALBERT model)"),dGo=l(),Rv=a("li"),hhe=a("strong"),cGo=o("bert"),fGo=o(" \u2014 "),nV=a("a"),mGo=o("BertForTokenClassification"),gGo=o(" (BERT model)"),hGo=l(),Pv=a("li"),phe=a("strong"),pGo=o("big_bird"),_Go=o(" \u2014 "),sV=a("a"),uGo=o("BigBirdForTokenClassification"),bGo=o(" (BigBird model)"),vGo=l(),Bv=a("li"),_he=a("strong"),FGo=o("camembert"),TGo=o(" \u2014 "),lV=a("a"),MGo=o("CamembertForTokenClassification"),EGo=o(" (CamemBERT model)"),CGo=l(),Iv=a("li"),uhe=a("strong"),wGo=o("canine"),AGo=o(" \u2014 "),iV=a("a"),yGo=o("CanineForTokenClassification"),LGo=o(" (Canine model)"),xGo=l(),Nv=a("li"),bhe=a("strong"),$Go=o("convbert"),kGo=o(" \u2014 "),dV=a("a"),SGo=o("ConvBertForTokenClassification"),RGo=o(" (ConvBERT model)"),PGo=l(),qv=a("li"),vhe=a("strong"),BGo=o("data2vec-text"),IGo=o(" \u2014 "),cV=a("a"),NGo=o("Data2VecTextForTokenClassification"),qGo=o(" (Data2VecText model)"),jGo=l(),jv=a("li"),Fhe=a("strong"),DGo=o("deberta"),GGo=o(" \u2014 "),fV=a("a"),OGo=o("DebertaForTokenClassification"),VGo=o(" (DeBERTa model)"),XGo=l(),Dv=a("li"),The=a("strong"),zGo=o("deberta-v2"),WGo=o(" \u2014 "),mV=a("a"),QGo=o("DebertaV2ForTokenClassification"),HGo=o(" (DeBERTa-v2 model)"),UGo=l(),Gv=a("li"),Mhe=a("strong"),JGo=o("distilbert"),YGo=o(" \u2014 "),gV=a("a"),KGo=o("DistilBertForTokenClassification"),ZGo=o(" (DistilBERT model)"),eOo=l(),Ov=a("li"),Ehe=a("strong"),oOo=o("electra"),rOo=o(" \u2014 "),hV=a("a"),tOo=o("ElectraForTokenClassification"),aOo=o(" (ELECTRA model)"),nOo=l(),Vv=a("li"),Che=a("strong"),sOo=o("flaubert"),lOo=o(" \u2014 "),pV=a("a"),iOo=o("FlaubertForTokenClassification"),dOo=o(" (FlauBERT model)"),cOo=l(),Xv=a("li"),whe=a("strong"),fOo=o("fnet"),mOo=o(" \u2014 "),_V=a("a"),gOo=o("FNetForTokenClassification"),hOo=o(" (FNet model)"),pOo=l(),zv=a("li"),Ahe=a("strong"),_Oo=o("funnel"),uOo=o(" \u2014 "),uV=a("a"),bOo=o("FunnelForTokenClassification"),vOo=o(" (Funnel Transformer model)"),FOo=l(),Wv=a("li"),yhe=a("strong"),TOo=o("gpt2"),MOo=o(" \u2014 "),bV=a("a"),EOo=o("GPT2ForTokenClassification"),COo=o(" (OpenAI GPT-2 model)"),wOo=l(),Qv=a("li"),Lhe=a("strong"),AOo=o("ibert"),yOo=o(" \u2014 "),vV=a("a"),LOo=o("IBertForTokenClassification"),xOo=o(" (I-BERT model)"),$Oo=l(),Hv=a("li"),xhe=a("strong"),kOo=o("layoutlm"),SOo=o(" \u2014 "),FV=a("a"),ROo=o("LayoutLMForTokenClassification"),POo=o(" (LayoutLM model)"),BOo=l(),Uv=a("li"),$he=a("strong"),IOo=o("layoutlmv2"),NOo=o(" \u2014 "),TV=a("a"),qOo=o("LayoutLMv2ForTokenClassification"),jOo=o(" (LayoutLMv2 model)"),DOo=l(),Jv=a("li"),khe=a("strong"),GOo=o("layoutlmv3"),OOo=o(" \u2014 "),MV=a("a"),VOo=o("LayoutLMv3ForTokenClassification"),XOo=o(" (LayoutLMv3 model)"),zOo=l(),Yv=a("li"),She=a("strong"),WOo=o("longformer"),QOo=o(" \u2014 "),EV=a("a"),HOo=o("LongformerForTokenClassification"),UOo=o(" (Longformer model)"),JOo=l(),Kv=a("li"),Rhe=a("strong"),YOo=o("megatron-bert"),KOo=o(" \u2014 "),CV=a("a"),ZOo=o("MegatronBertForTokenClassification"),eVo=o(" (MegatronBert model)"),oVo=l(),Zv=a("li"),Phe=a("strong"),rVo=o("mobilebert"),tVo=o(" \u2014 "),wV=a("a"),aVo=o("MobileBertForTokenClassification"),nVo=o(" (MobileBERT model)"),sVo=l(),eF=a("li"),Bhe=a("strong"),lVo=o("mpnet"),iVo=o(" \u2014 "),AV=a("a"),dVo=o("MPNetForTokenClassification"),cVo=o(" (MPNet model)"),fVo=l(),oF=a("li"),Ihe=a("strong"),mVo=o("nystromformer"),gVo=o(" \u2014 "),yV=a("a"),hVo=o("NystromformerForTokenClassification"),pVo=o(" (Nystromformer model)"),_Vo=l(),rF=a("li"),Nhe=a("strong"),uVo=o("qdqbert"),bVo=o(" \u2014 "),LV=a("a"),vVo=o("QDQBertForTokenClassification"),FVo=o(" (QDQBert model)"),TVo=l(),tF=a("li"),qhe=a("strong"),MVo=o("rembert"),EVo=o(" \u2014 "),xV=a("a"),CVo=o("RemBertForTokenClassification"),wVo=o(" (RemBERT model)"),AVo=l(),aF=a("li"),jhe=a("strong"),yVo=o("roberta"),LVo=o(" \u2014 "),$V=a("a"),xVo=o("RobertaForTokenClassification"),$Vo=o(" (RoBERTa model)"),kVo=l(),nF=a("li"),Dhe=a("strong"),SVo=o("roformer"),RVo=o(" \u2014 "),kV=a("a"),PVo=o("RoFormerForTokenClassification"),BVo=o(" (RoFormer model)"),IVo=l(),sF=a("li"),Ghe=a("strong"),NVo=o("squeezebert"),qVo=o(" \u2014 "),SV=a("a"),jVo=o("SqueezeBertForTokenClassification"),DVo=o(" (SqueezeBERT model)"),GVo=l(),lF=a("li"),Ohe=a("strong"),OVo=o("xlm"),VVo=o(" \u2014 "),RV=a("a"),XVo=o("XLMForTokenClassification"),zVo=o(" (XLM model)"),WVo=l(),iF=a("li"),Vhe=a("strong"),QVo=o("xlm-roberta"),HVo=o(" \u2014 "),PV=a("a"),UVo=o("XLMRobertaForTokenClassification"),JVo=o(" (XLM-RoBERTa model)"),YVo=l(),dF=a("li"),Xhe=a("strong"),KVo=o("xlm-roberta-xl"),ZVo=o(" \u2014 "),BV=a("a"),eXo=o("XLMRobertaXLForTokenClassification"),oXo=o(" (XLM-RoBERTa-XL model)"),rXo=l(),cF=a("li"),zhe=a("strong"),tXo=o("xlnet"),aXo=o(" \u2014 "),IV=a("a"),nXo=o("XLNetForTokenClassification"),sXo=o(" (XLNet model)"),lXo=l(),fF=a("li"),Whe=a("strong"),iXo=o("yoso"),dXo=o(" \u2014 "),NV=a("a"),cXo=o("YosoForTokenClassification"),fXo=o(" (YOSO model)"),mXo=l(),mF=a("p"),gXo=o("The model is set in evaluation mode by default using "),Qhe=a("code"),hXo=o("model.eval()"),pXo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hhe=a("code"),_Xo=o("model.train()"),uXo=l(),F(gF.$$.fragment),aje=l(),Zi=a("h2"),hF=a("a"),Uhe=a("span"),F(YA.$$.fragment),bXo=l(),Jhe=a("span"),vXo=o("AutoModelForQuestionAnswering"),nje=l(),No=a("div"),F(KA.$$.fragment),FXo=l(),ed=a("p"),TXo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),qV=a("a"),MXo=o("from_pretrained()"),EXo=o(" class method or the "),jV=a("a"),CXo=o("from_config()"),wXo=o(` class
method.`),AXo=l(),ZA=a("p"),yXo=o("This class cannot be instantiated directly using "),Yhe=a("code"),LXo=o("__init__()"),xXo=o(" (throws an error)."),$Xo=l(),mt=a("div"),F(ey.$$.fragment),kXo=l(),Khe=a("p"),SXo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),RXo=l(),od=a("p"),PXo=o(`Note:
Loading a model from its configuration file does `),Zhe=a("strong"),BXo=o("not"),IXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DV=a("a"),NXo=o("from_pretrained()"),qXo=o(" to load the model weights."),jXo=l(),F(pF.$$.fragment),DXo=l(),no=a("div"),F(oy.$$.fragment),GXo=l(),epe=a("p"),OXo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),VXo=l(),Na=a("p"),XXo=o("The model class to instantiate is selected based on the "),ope=a("code"),zXo=o("model_type"),WXo=o(` property of the config object (either
passed as an argument or loaded from `),rpe=a("code"),QXo=o("pretrained_model_name_or_path"),HXo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tpe=a("code"),UXo=o("pretrained_model_name_or_path"),JXo=o(":"),YXo=l(),V=a("ul"),_F=a("li"),ape=a("strong"),KXo=o("albert"),ZXo=o(" \u2014 "),GV=a("a"),ezo=o("AlbertForQuestionAnswering"),ozo=o(" (ALBERT model)"),rzo=l(),uF=a("li"),npe=a("strong"),tzo=o("bart"),azo=o(" \u2014 "),OV=a("a"),nzo=o("BartForQuestionAnswering"),szo=o(" (BART model)"),lzo=l(),bF=a("li"),spe=a("strong"),izo=o("bert"),dzo=o(" \u2014 "),VV=a("a"),czo=o("BertForQuestionAnswering"),fzo=o(" (BERT model)"),mzo=l(),vF=a("li"),lpe=a("strong"),gzo=o("big_bird"),hzo=o(" \u2014 "),XV=a("a"),pzo=o("BigBirdForQuestionAnswering"),_zo=o(" (BigBird model)"),uzo=l(),FF=a("li"),ipe=a("strong"),bzo=o("bigbird_pegasus"),vzo=o(" \u2014 "),zV=a("a"),Fzo=o("BigBirdPegasusForQuestionAnswering"),Tzo=o(" (BigBirdPegasus model)"),Mzo=l(),TF=a("li"),dpe=a("strong"),Ezo=o("camembert"),Czo=o(" \u2014 "),WV=a("a"),wzo=o("CamembertForQuestionAnswering"),Azo=o(" (CamemBERT model)"),yzo=l(),MF=a("li"),cpe=a("strong"),Lzo=o("canine"),xzo=o(" \u2014 "),QV=a("a"),$zo=o("CanineForQuestionAnswering"),kzo=o(" (Canine model)"),Szo=l(),EF=a("li"),fpe=a("strong"),Rzo=o("convbert"),Pzo=o(" \u2014 "),HV=a("a"),Bzo=o("ConvBertForQuestionAnswering"),Izo=o(" (ConvBERT model)"),Nzo=l(),CF=a("li"),mpe=a("strong"),qzo=o("data2vec-text"),jzo=o(" \u2014 "),UV=a("a"),Dzo=o("Data2VecTextForQuestionAnswering"),Gzo=o(" (Data2VecText model)"),Ozo=l(),wF=a("li"),gpe=a("strong"),Vzo=o("deberta"),Xzo=o(" \u2014 "),JV=a("a"),zzo=o("DebertaForQuestionAnswering"),Wzo=o(" (DeBERTa model)"),Qzo=l(),AF=a("li"),hpe=a("strong"),Hzo=o("deberta-v2"),Uzo=o(" \u2014 "),YV=a("a"),Jzo=o("DebertaV2ForQuestionAnswering"),Yzo=o(" (DeBERTa-v2 model)"),Kzo=l(),yF=a("li"),ppe=a("strong"),Zzo=o("distilbert"),eWo=o(" \u2014 "),KV=a("a"),oWo=o("DistilBertForQuestionAnswering"),rWo=o(" (DistilBERT model)"),tWo=l(),LF=a("li"),_pe=a("strong"),aWo=o("electra"),nWo=o(" \u2014 "),ZV=a("a"),sWo=o("ElectraForQuestionAnswering"),lWo=o(" (ELECTRA model)"),iWo=l(),xF=a("li"),upe=a("strong"),dWo=o("flaubert"),cWo=o(" \u2014 "),eX=a("a"),fWo=o("FlaubertForQuestionAnsweringSimple"),mWo=o(" (FlauBERT model)"),gWo=l(),$F=a("li"),bpe=a("strong"),hWo=o("fnet"),pWo=o(" \u2014 "),oX=a("a"),_Wo=o("FNetForQuestionAnswering"),uWo=o(" (FNet model)"),bWo=l(),kF=a("li"),vpe=a("strong"),vWo=o("funnel"),FWo=o(" \u2014 "),rX=a("a"),TWo=o("FunnelForQuestionAnswering"),MWo=o(" (Funnel Transformer model)"),EWo=l(),SF=a("li"),Fpe=a("strong"),CWo=o("gptj"),wWo=o(" \u2014 "),tX=a("a"),AWo=o("GPTJForQuestionAnswering"),yWo=o(" (GPT-J model)"),LWo=l(),RF=a("li"),Tpe=a("strong"),xWo=o("ibert"),$Wo=o(" \u2014 "),aX=a("a"),kWo=o("IBertForQuestionAnswering"),SWo=o(" (I-BERT model)"),RWo=l(),PF=a("li"),Mpe=a("strong"),PWo=o("layoutlmv2"),BWo=o(" \u2014 "),nX=a("a"),IWo=o("LayoutLMv2ForQuestionAnswering"),NWo=o(" (LayoutLMv2 model)"),qWo=l(),BF=a("li"),Epe=a("strong"),jWo=o("layoutlmv3"),DWo=o(" \u2014 "),sX=a("a"),GWo=o("LayoutLMv3ForQuestionAnswering"),OWo=o(" (LayoutLMv3 model)"),VWo=l(),IF=a("li"),Cpe=a("strong"),XWo=o("led"),zWo=o(" \u2014 "),lX=a("a"),WWo=o("LEDForQuestionAnswering"),QWo=o(" (LED model)"),HWo=l(),NF=a("li"),wpe=a("strong"),UWo=o("longformer"),JWo=o(" \u2014 "),iX=a("a"),YWo=o("LongformerForQuestionAnswering"),KWo=o(" (Longformer model)"),ZWo=l(),qF=a("li"),Ape=a("strong"),eQo=o("lxmert"),oQo=o(" \u2014 "),dX=a("a"),rQo=o("LxmertForQuestionAnswering"),tQo=o(" (LXMERT model)"),aQo=l(),jF=a("li"),ype=a("strong"),nQo=o("mbart"),sQo=o(" \u2014 "),cX=a("a"),lQo=o("MBartForQuestionAnswering"),iQo=o(" (mBART model)"),dQo=l(),DF=a("li"),Lpe=a("strong"),cQo=o("megatron-bert"),fQo=o(" \u2014 "),fX=a("a"),mQo=o("MegatronBertForQuestionAnswering"),gQo=o(" (MegatronBert model)"),hQo=l(),GF=a("li"),xpe=a("strong"),pQo=o("mobilebert"),_Qo=o(" \u2014 "),mX=a("a"),uQo=o("MobileBertForQuestionAnswering"),bQo=o(" (MobileBERT model)"),vQo=l(),OF=a("li"),$pe=a("strong"),FQo=o("mpnet"),TQo=o(" \u2014 "),gX=a("a"),MQo=o("MPNetForQuestionAnswering"),EQo=o(" (MPNet model)"),CQo=l(),VF=a("li"),kpe=a("strong"),wQo=o("nystromformer"),AQo=o(" \u2014 "),hX=a("a"),yQo=o("NystromformerForQuestionAnswering"),LQo=o(" (Nystromformer model)"),xQo=l(),XF=a("li"),Spe=a("strong"),$Qo=o("qdqbert"),kQo=o(" \u2014 "),pX=a("a"),SQo=o("QDQBertForQuestionAnswering"),RQo=o(" (QDQBert model)"),PQo=l(),zF=a("li"),Rpe=a("strong"),BQo=o("reformer"),IQo=o(" \u2014 "),_X=a("a"),NQo=o("ReformerForQuestionAnswering"),qQo=o(" (Reformer model)"),jQo=l(),WF=a("li"),Ppe=a("strong"),DQo=o("rembert"),GQo=o(" \u2014 "),uX=a("a"),OQo=o("RemBertForQuestionAnswering"),VQo=o(" (RemBERT model)"),XQo=l(),QF=a("li"),Bpe=a("strong"),zQo=o("roberta"),WQo=o(" \u2014 "),bX=a("a"),QQo=o("RobertaForQuestionAnswering"),HQo=o(" (RoBERTa model)"),UQo=l(),HF=a("li"),Ipe=a("strong"),JQo=o("roformer"),YQo=o(" \u2014 "),vX=a("a"),KQo=o("RoFormerForQuestionAnswering"),ZQo=o(" (RoFormer model)"),eHo=l(),UF=a("li"),Npe=a("strong"),oHo=o("splinter"),rHo=o(" \u2014 "),FX=a("a"),tHo=o("SplinterForQuestionAnswering"),aHo=o(" (Splinter model)"),nHo=l(),JF=a("li"),qpe=a("strong"),sHo=o("squeezebert"),lHo=o(" \u2014 "),TX=a("a"),iHo=o("SqueezeBertForQuestionAnswering"),dHo=o(" (SqueezeBERT model)"),cHo=l(),YF=a("li"),jpe=a("strong"),fHo=o("xlm"),mHo=o(" \u2014 "),MX=a("a"),gHo=o("XLMForQuestionAnsweringSimple"),hHo=o(" (XLM model)"),pHo=l(),KF=a("li"),Dpe=a("strong"),_Ho=o("xlm-roberta"),uHo=o(" \u2014 "),EX=a("a"),bHo=o("XLMRobertaForQuestionAnswering"),vHo=o(" (XLM-RoBERTa model)"),FHo=l(),ZF=a("li"),Gpe=a("strong"),THo=o("xlm-roberta-xl"),MHo=o(" \u2014 "),CX=a("a"),EHo=o("XLMRobertaXLForQuestionAnswering"),CHo=o(" (XLM-RoBERTa-XL model)"),wHo=l(),e6=a("li"),Ope=a("strong"),AHo=o("xlnet"),yHo=o(" \u2014 "),wX=a("a"),LHo=o("XLNetForQuestionAnsweringSimple"),xHo=o(" (XLNet model)"),$Ho=l(),o6=a("li"),Vpe=a("strong"),kHo=o("yoso"),SHo=o(" \u2014 "),AX=a("a"),RHo=o("YosoForQuestionAnswering"),PHo=o(" (YOSO model)"),BHo=l(),r6=a("p"),IHo=o("The model is set in evaluation mode by default using "),Xpe=a("code"),NHo=o("model.eval()"),qHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zpe=a("code"),jHo=o("model.train()"),DHo=l(),F(t6.$$.fragment),sje=l(),rd=a("h2"),a6=a("a"),Wpe=a("span"),F(ry.$$.fragment),GHo=l(),Qpe=a("span"),OHo=o("AutoModelForTableQuestionAnswering"),lje=l(),qo=a("div"),F(ty.$$.fragment),VHo=l(),td=a("p"),XHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),yX=a("a"),zHo=o("from_pretrained()"),WHo=o(" class method or the "),LX=a("a"),QHo=o("from_config()"),HHo=o(` class
method.`),UHo=l(),ay=a("p"),JHo=o("This class cannot be instantiated directly using "),Hpe=a("code"),YHo=o("__init__()"),KHo=o(" (throws an error)."),ZHo=l(),gt=a("div"),F(ny.$$.fragment),eUo=l(),Upe=a("p"),oUo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),rUo=l(),ad=a("p"),tUo=o(`Note:
Loading a model from its configuration file does `),Jpe=a("strong"),aUo=o("not"),nUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xX=a("a"),sUo=o("from_pretrained()"),lUo=o(" to load the model weights."),iUo=l(),F(n6.$$.fragment),dUo=l(),so=a("div"),F(sy.$$.fragment),cUo=l(),Ype=a("p"),fUo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),mUo=l(),qa=a("p"),gUo=o("The model class to instantiate is selected based on the "),Kpe=a("code"),hUo=o("model_type"),pUo=o(` property of the config object (either
passed as an argument or loaded from `),Zpe=a("code"),_Uo=o("pretrained_model_name_or_path"),uUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e_e=a("code"),bUo=o("pretrained_model_name_or_path"),vUo=o(":"),FUo=l(),o_e=a("ul"),s6=a("li"),r_e=a("strong"),TUo=o("tapas"),MUo=o(" \u2014 "),$X=a("a"),EUo=o("TapasForQuestionAnswering"),CUo=o(" (TAPAS model)"),wUo=l(),l6=a("p"),AUo=o("The model is set in evaluation mode by default using "),t_e=a("code"),yUo=o("model.eval()"),LUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),a_e=a("code"),xUo=o("model.train()"),$Uo=l(),F(i6.$$.fragment),ije=l(),nd=a("h2"),d6=a("a"),n_e=a("span"),F(ly.$$.fragment),kUo=l(),s_e=a("span"),SUo=o("AutoModelForImageClassification"),dje=l(),jo=a("div"),F(iy.$$.fragment),RUo=l(),sd=a("p"),PUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),kX=a("a"),BUo=o("from_pretrained()"),IUo=o(" class method or the "),SX=a("a"),NUo=o("from_config()"),qUo=o(` class
method.`),jUo=l(),dy=a("p"),DUo=o("This class cannot be instantiated directly using "),l_e=a("code"),GUo=o("__init__()"),OUo=o(" (throws an error)."),VUo=l(),ht=a("div"),F(cy.$$.fragment),XUo=l(),i_e=a("p"),zUo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),WUo=l(),ld=a("p"),QUo=o(`Note:
Loading a model from its configuration file does `),d_e=a("strong"),HUo=o("not"),UUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RX=a("a"),JUo=o("from_pretrained()"),YUo=o(" to load the model weights."),KUo=l(),F(c6.$$.fragment),ZUo=l(),lo=a("div"),F(fy.$$.fragment),eJo=l(),c_e=a("p"),oJo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),rJo=l(),ja=a("p"),tJo=o("The model class to instantiate is selected based on the "),f_e=a("code"),aJo=o("model_type"),nJo=o(` property of the config object (either
passed as an argument or loaded from `),m_e=a("code"),sJo=o("pretrained_model_name_or_path"),lJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g_e=a("code"),iJo=o("pretrained_model_name_or_path"),dJo=o(":"),cJo=l(),Fe=a("ul"),f6=a("li"),h_e=a("strong"),fJo=o("beit"),mJo=o(" \u2014 "),PX=a("a"),gJo=o("BeitForImageClassification"),hJo=o(" (BEiT model)"),pJo=l(),m6=a("li"),p_e=a("strong"),_Jo=o("convnext"),uJo=o(" \u2014 "),BX=a("a"),bJo=o("ConvNextForImageClassification"),vJo=o(" (ConvNext model)"),FJo=l(),g6=a("li"),__e=a("strong"),TJo=o("cvt"),MJo=o(" \u2014 "),IX=a("a"),EJo=o("CvtForImageClassification"),CJo=o(" (CvT model)"),wJo=l(),h6=a("li"),u_e=a("strong"),AJo=o("data2vec-vision"),yJo=o(" \u2014 "),NX=a("a"),LJo=o("Data2VecVisionForImageClassification"),xJo=o(" (Data2VecVision model)"),$Jo=l(),Is=a("li"),b_e=a("strong"),kJo=o("deit"),SJo=o(" \u2014 "),qX=a("a"),RJo=o("DeiTForImageClassification"),PJo=o(" or "),jX=a("a"),BJo=o("DeiTForImageClassificationWithTeacher"),IJo=o(" (DeiT model)"),NJo=l(),p6=a("li"),v_e=a("strong"),qJo=o("imagegpt"),jJo=o(" \u2014 "),DX=a("a"),DJo=o("ImageGPTForImageClassification"),GJo=o(" (ImageGPT model)"),OJo=l(),pt=a("li"),F_e=a("strong"),VJo=o("perceiver"),XJo=o(" \u2014 "),GX=a("a"),zJo=o("PerceiverForImageClassificationLearned"),WJo=o(" or "),OX=a("a"),QJo=o("PerceiverForImageClassificationFourier"),HJo=o(" or "),VX=a("a"),UJo=o("PerceiverForImageClassificationConvProcessing"),JJo=o(" (Perceiver model)"),YJo=l(),_6=a("li"),T_e=a("strong"),KJo=o("poolformer"),ZJo=o(" \u2014 "),XX=a("a"),eYo=o("PoolFormerForImageClassification"),oYo=o(" (PoolFormer model)"),rYo=l(),u6=a("li"),M_e=a("strong"),tYo=o("regnet"),aYo=o(" \u2014 "),zX=a("a"),nYo=o("RegNetForImageClassification"),sYo=o(" (RegNet model)"),lYo=l(),b6=a("li"),E_e=a("strong"),iYo=o("resnet"),dYo=o(" \u2014 "),WX=a("a"),cYo=o("ResNetForImageClassification"),fYo=o(" (ResNet model)"),mYo=l(),v6=a("li"),C_e=a("strong"),gYo=o("segformer"),hYo=o(" \u2014 "),QX=a("a"),pYo=o("SegformerForImageClassification"),_Yo=o(" (SegFormer model)"),uYo=l(),F6=a("li"),w_e=a("strong"),bYo=o("swin"),vYo=o(" \u2014 "),HX=a("a"),FYo=o("SwinForImageClassification"),TYo=o(" (Swin model)"),MYo=l(),T6=a("li"),A_e=a("strong"),EYo=o("van"),CYo=o(" \u2014 "),UX=a("a"),wYo=o("VanForImageClassification"),AYo=o(" (VAN model)"),yYo=l(),M6=a("li"),y_e=a("strong"),LYo=o("vit"),xYo=o(" \u2014 "),JX=a("a"),$Yo=o("ViTForImageClassification"),kYo=o(" (ViT model)"),SYo=l(),E6=a("p"),RYo=o("The model is set in evaluation mode by default using "),L_e=a("code"),PYo=o("model.eval()"),BYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),x_e=a("code"),IYo=o("model.train()"),NYo=l(),F(C6.$$.fragment),cje=l(),id=a("h2"),w6=a("a"),$_e=a("span"),F(my.$$.fragment),qYo=l(),k_e=a("span"),jYo=o("AutoModelForVision2Seq"),fje=l(),Do=a("div"),F(gy.$$.fragment),DYo=l(),dd=a("p"),GYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),YX=a("a"),OYo=o("from_pretrained()"),VYo=o(" class method or the "),KX=a("a"),XYo=o("from_config()"),zYo=o(` class
method.`),WYo=l(),hy=a("p"),QYo=o("This class cannot be instantiated directly using "),S_e=a("code"),HYo=o("__init__()"),UYo=o(" (throws an error)."),JYo=l(),_t=a("div"),F(py.$$.fragment),YYo=l(),R_e=a("p"),KYo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),ZYo=l(),cd=a("p"),eKo=o(`Note:
Loading a model from its configuration file does `),P_e=a("strong"),oKo=o("not"),rKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZX=a("a"),tKo=o("from_pretrained()"),aKo=o(" to load the model weights."),nKo=l(),F(A6.$$.fragment),sKo=l(),io=a("div"),F(_y.$$.fragment),lKo=l(),B_e=a("p"),iKo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),dKo=l(),Da=a("p"),cKo=o("The model class to instantiate is selected based on the "),I_e=a("code"),fKo=o("model_type"),mKo=o(` property of the config object (either
passed as an argument or loaded from `),N_e=a("code"),gKo=o("pretrained_model_name_or_path"),hKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q_e=a("code"),pKo=o("pretrained_model_name_or_path"),_Ko=o(":"),uKo=l(),j_e=a("ul"),y6=a("li"),D_e=a("strong"),bKo=o("vision-encoder-decoder"),vKo=o(" \u2014 "),ez=a("a"),FKo=o("VisionEncoderDecoderModel"),TKo=o(" (Vision Encoder decoder model)"),MKo=l(),L6=a("p"),EKo=o("The model is set in evaluation mode by default using "),G_e=a("code"),CKo=o("model.eval()"),wKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),O_e=a("code"),AKo=o("model.train()"),yKo=l(),F(x6.$$.fragment),mje=l(),fd=a("h2"),$6=a("a"),V_e=a("span"),F(uy.$$.fragment),LKo=l(),X_e=a("span"),xKo=o("AutoModelForAudioClassification"),gje=l(),Go=a("div"),F(by.$$.fragment),$Ko=l(),md=a("p"),kKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),oz=a("a"),SKo=o("from_pretrained()"),RKo=o(" class method or the "),rz=a("a"),PKo=o("from_config()"),BKo=o(` class
method.`),IKo=l(),vy=a("p"),NKo=o("This class cannot be instantiated directly using "),z_e=a("code"),qKo=o("__init__()"),jKo=o(" (throws an error)."),DKo=l(),ut=a("div"),F(Fy.$$.fragment),GKo=l(),W_e=a("p"),OKo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),VKo=l(),gd=a("p"),XKo=o(`Note:
Loading a model from its configuration file does `),Q_e=a("strong"),zKo=o("not"),WKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tz=a("a"),QKo=o("from_pretrained()"),HKo=o(" to load the model weights."),UKo=l(),F(k6.$$.fragment),JKo=l(),co=a("div"),F(Ty.$$.fragment),YKo=l(),H_e=a("p"),KKo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),ZKo=l(),Ga=a("p"),eZo=o("The model class to instantiate is selected based on the "),U_e=a("code"),oZo=o("model_type"),rZo=o(` property of the config object (either
passed as an argument or loaded from `),J_e=a("code"),tZo=o("pretrained_model_name_or_path"),aZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y_e=a("code"),nZo=o("pretrained_model_name_or_path"),sZo=o(":"),lZo=l(),Se=a("ul"),S6=a("li"),K_e=a("strong"),iZo=o("data2vec-audio"),dZo=o(" \u2014 "),az=a("a"),cZo=o("Data2VecAudioForSequenceClassification"),fZo=o(" (Data2VecAudio model)"),mZo=l(),R6=a("li"),Z_e=a("strong"),gZo=o("hubert"),hZo=o(" \u2014 "),nz=a("a"),pZo=o("HubertForSequenceClassification"),_Zo=o(" (Hubert model)"),uZo=l(),P6=a("li"),eue=a("strong"),bZo=o("sew"),vZo=o(" \u2014 "),sz=a("a"),FZo=o("SEWForSequenceClassification"),TZo=o(" (SEW model)"),MZo=l(),B6=a("li"),oue=a("strong"),EZo=o("sew-d"),CZo=o(" \u2014 "),lz=a("a"),wZo=o("SEWDForSequenceClassification"),AZo=o(" (SEW-D model)"),yZo=l(),I6=a("li"),rue=a("strong"),LZo=o("unispeech"),xZo=o(" \u2014 "),iz=a("a"),$Zo=o("UniSpeechForSequenceClassification"),kZo=o(" (UniSpeech model)"),SZo=l(),N6=a("li"),tue=a("strong"),RZo=o("unispeech-sat"),PZo=o(" \u2014 "),dz=a("a"),BZo=o("UniSpeechSatForSequenceClassification"),IZo=o(" (UniSpeechSat model)"),NZo=l(),q6=a("li"),aue=a("strong"),qZo=o("wav2vec2"),jZo=o(" \u2014 "),cz=a("a"),DZo=o("Wav2Vec2ForSequenceClassification"),GZo=o(" (Wav2Vec2 model)"),OZo=l(),j6=a("li"),nue=a("strong"),VZo=o("wav2vec2-conformer"),XZo=o(" \u2014 "),fz=a("a"),zZo=o("Wav2Vec2ConformerForSequenceClassification"),WZo=o(" (Wav2Vec2-Conformer model)"),QZo=l(),D6=a("li"),sue=a("strong"),HZo=o("wavlm"),UZo=o(" \u2014 "),mz=a("a"),JZo=o("WavLMForSequenceClassification"),YZo=o(" (WavLM model)"),KZo=l(),G6=a("p"),ZZo=o("The model is set in evaluation mode by default using "),lue=a("code"),eer=o("model.eval()"),oer=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),iue=a("code"),rer=o("model.train()"),ter=l(),F(O6.$$.fragment),hje=l(),hd=a("h2"),V6=a("a"),due=a("span"),F(My.$$.fragment),aer=l(),cue=a("span"),ner=o("AutoModelForAudioFrameClassification"),pje=l(),Oo=a("div"),F(Ey.$$.fragment),ser=l(),pd=a("p"),ler=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),gz=a("a"),ier=o("from_pretrained()"),der=o(" class method or the "),hz=a("a"),cer=o("from_config()"),fer=o(` class
method.`),mer=l(),Cy=a("p"),ger=o("This class cannot be instantiated directly using "),fue=a("code"),her=o("__init__()"),per=o(" (throws an error)."),_er=l(),bt=a("div"),F(wy.$$.fragment),uer=l(),mue=a("p"),ber=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),ver=l(),_d=a("p"),Fer=o(`Note:
Loading a model from its configuration file does `),gue=a("strong"),Ter=o("not"),Mer=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pz=a("a"),Eer=o("from_pretrained()"),Cer=o(" to load the model weights."),wer=l(),F(X6.$$.fragment),Aer=l(),fo=a("div"),F(Ay.$$.fragment),yer=l(),hue=a("p"),Ler=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),xer=l(),Oa=a("p"),$er=o("The model class to instantiate is selected based on the "),pue=a("code"),ker=o("model_type"),Ser=o(` property of the config object (either
passed as an argument or loaded from `),_ue=a("code"),Rer=o("pretrained_model_name_or_path"),Per=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uue=a("code"),Ber=o("pretrained_model_name_or_path"),Ier=o(":"),Ner=l(),Kr=a("ul"),z6=a("li"),bue=a("strong"),qer=o("data2vec-audio"),jer=o(" \u2014 "),_z=a("a"),Der=o("Data2VecAudioForAudioFrameClassification"),Ger=o(" (Data2VecAudio model)"),Oer=l(),W6=a("li"),vue=a("strong"),Ver=o("unispeech-sat"),Xer=o(" \u2014 "),uz=a("a"),zer=o("UniSpeechSatForAudioFrameClassification"),Wer=o(" (UniSpeechSat model)"),Qer=l(),Q6=a("li"),Fue=a("strong"),Her=o("wav2vec2"),Uer=o(" \u2014 "),bz=a("a"),Jer=o("Wav2Vec2ForAudioFrameClassification"),Yer=o(" (Wav2Vec2 model)"),Ker=l(),H6=a("li"),Tue=a("strong"),Zer=o("wav2vec2-conformer"),eor=o(" \u2014 "),vz=a("a"),oor=o("Wav2Vec2ConformerForAudioFrameClassification"),ror=o(" (Wav2Vec2-Conformer model)"),tor=l(),U6=a("li"),Mue=a("strong"),aor=o("wavlm"),nor=o(" \u2014 "),Fz=a("a"),sor=o("WavLMForAudioFrameClassification"),lor=o(" (WavLM model)"),ior=l(),J6=a("p"),dor=o("The model is set in evaluation mode by default using "),Eue=a("code"),cor=o("model.eval()"),mor=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cue=a("code"),gor=o("model.train()"),hor=l(),F(Y6.$$.fragment),_je=l(),ud=a("h2"),K6=a("a"),wue=a("span"),F(yy.$$.fragment),por=l(),Aue=a("span"),_or=o("AutoModelForCTC"),uje=l(),Vo=a("div"),F(Ly.$$.fragment),uor=l(),bd=a("p"),bor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),Tz=a("a"),vor=o("from_pretrained()"),For=o(" class method or the "),Mz=a("a"),Tor=o("from_config()"),Mor=o(` class
method.`),Eor=l(),xy=a("p"),Cor=o("This class cannot be instantiated directly using "),yue=a("code"),wor=o("__init__()"),Aor=o(" (throws an error)."),yor=l(),vt=a("div"),F($y.$$.fragment),Lor=l(),Lue=a("p"),xor=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),$or=l(),vd=a("p"),kor=o(`Note:
Loading a model from its configuration file does `),xue=a("strong"),Sor=o("not"),Ror=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ez=a("a"),Por=o("from_pretrained()"),Bor=o(" to load the model weights."),Ior=l(),F(Z6.$$.fragment),Nor=l(),mo=a("div"),F(ky.$$.fragment),qor=l(),$ue=a("p"),jor=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Dor=l(),Va=a("p"),Gor=o("The model class to instantiate is selected based on the "),kue=a("code"),Oor=o("model_type"),Vor=o(` property of the config object (either
passed as an argument or loaded from `),Sue=a("code"),Xor=o("pretrained_model_name_or_path"),zor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rue=a("code"),Wor=o("pretrained_model_name_or_path"),Qor=o(":"),Hor=l(),Re=a("ul"),eT=a("li"),Pue=a("strong"),Uor=o("data2vec-audio"),Jor=o(" \u2014 "),Cz=a("a"),Yor=o("Data2VecAudioForCTC"),Kor=o(" (Data2VecAudio model)"),Zor=l(),oT=a("li"),Bue=a("strong"),err=o("hubert"),orr=o(" \u2014 "),wz=a("a"),rrr=o("HubertForCTC"),trr=o(" (Hubert model)"),arr=l(),rT=a("li"),Iue=a("strong"),nrr=o("sew"),srr=o(" \u2014 "),Az=a("a"),lrr=o("SEWForCTC"),irr=o(" (SEW model)"),drr=l(),tT=a("li"),Nue=a("strong"),crr=o("sew-d"),frr=o(" \u2014 "),yz=a("a"),mrr=o("SEWDForCTC"),grr=o(" (SEW-D model)"),hrr=l(),aT=a("li"),que=a("strong"),prr=o("unispeech"),_rr=o(" \u2014 "),Lz=a("a"),urr=o("UniSpeechForCTC"),brr=o(" (UniSpeech model)"),vrr=l(),nT=a("li"),jue=a("strong"),Frr=o("unispeech-sat"),Trr=o(" \u2014 "),xz=a("a"),Mrr=o("UniSpeechSatForCTC"),Err=o(" (UniSpeechSat model)"),Crr=l(),sT=a("li"),Due=a("strong"),wrr=o("wav2vec2"),Arr=o(" \u2014 "),$z=a("a"),yrr=o("Wav2Vec2ForCTC"),Lrr=o(" (Wav2Vec2 model)"),xrr=l(),lT=a("li"),Gue=a("strong"),$rr=o("wav2vec2-conformer"),krr=o(" \u2014 "),kz=a("a"),Srr=o("Wav2Vec2ConformerForCTC"),Rrr=o(" (Wav2Vec2-Conformer model)"),Prr=l(),iT=a("li"),Oue=a("strong"),Brr=o("wavlm"),Irr=o(" \u2014 "),Sz=a("a"),Nrr=o("WavLMForCTC"),qrr=o(" (WavLM model)"),jrr=l(),dT=a("p"),Drr=o("The model is set in evaluation mode by default using "),Vue=a("code"),Grr=o("model.eval()"),Orr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xue=a("code"),Vrr=o("model.train()"),Xrr=l(),F(cT.$$.fragment),bje=l(),Fd=a("h2"),fT=a("a"),zue=a("span"),F(Sy.$$.fragment),zrr=l(),Wue=a("span"),Wrr=o("AutoModelForSpeechSeq2Seq"),vje=l(),Xo=a("div"),F(Ry.$$.fragment),Qrr=l(),Td=a("p"),Hrr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Rz=a("a"),Urr=o("from_pretrained()"),Jrr=o(" class method or the "),Pz=a("a"),Yrr=o("from_config()"),Krr=o(` class
method.`),Zrr=l(),Py=a("p"),etr=o("This class cannot be instantiated directly using "),Que=a("code"),otr=o("__init__()"),rtr=o(" (throws an error)."),ttr=l(),Ft=a("div"),F(By.$$.fragment),atr=l(),Hue=a("p"),ntr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),str=l(),Md=a("p"),ltr=o(`Note:
Loading a model from its configuration file does `),Uue=a("strong"),itr=o("not"),dtr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Bz=a("a"),ctr=o("from_pretrained()"),ftr=o(" to load the model weights."),mtr=l(),F(mT.$$.fragment),gtr=l(),go=a("div"),F(Iy.$$.fragment),htr=l(),Jue=a("p"),ptr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),_tr=l(),Xa=a("p"),utr=o("The model class to instantiate is selected based on the "),Yue=a("code"),btr=o("model_type"),vtr=o(` property of the config object (either
passed as an argument or loaded from `),Kue=a("code"),Ftr=o("pretrained_model_name_or_path"),Ttr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zue=a("code"),Mtr=o("pretrained_model_name_or_path"),Etr=o(":"),Ctr=l(),Ny=a("ul"),gT=a("li"),e2e=a("strong"),wtr=o("speech-encoder-decoder"),Atr=o(" \u2014 "),Iz=a("a"),ytr=o("SpeechEncoderDecoderModel"),Ltr=o(" (Speech Encoder decoder model)"),xtr=l(),hT=a("li"),o2e=a("strong"),$tr=o("speech_to_text"),ktr=o(" \u2014 "),Nz=a("a"),Str=o("Speech2TextForConditionalGeneration"),Rtr=o(" (Speech2Text model)"),Ptr=l(),pT=a("p"),Btr=o("The model is set in evaluation mode by default using "),r2e=a("code"),Itr=o("model.eval()"),Ntr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),t2e=a("code"),qtr=o("model.train()"),jtr=l(),F(_T.$$.fragment),Fje=l(),Ed=a("h2"),uT=a("a"),a2e=a("span"),F(qy.$$.fragment),Dtr=l(),n2e=a("span"),Gtr=o("AutoModelForAudioXVector"),Tje=l(),zo=a("div"),F(jy.$$.fragment),Otr=l(),Cd=a("p"),Vtr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),qz=a("a"),Xtr=o("from_pretrained()"),ztr=o(" class method or the "),jz=a("a"),Wtr=o("from_config()"),Qtr=o(` class
method.`),Htr=l(),Dy=a("p"),Utr=o("This class cannot be instantiated directly using "),s2e=a("code"),Jtr=o("__init__()"),Ytr=o(" (throws an error)."),Ktr=l(),Tt=a("div"),F(Gy.$$.fragment),Ztr=l(),l2e=a("p"),ear=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),oar=l(),wd=a("p"),rar=o(`Note:
Loading a model from its configuration file does `),i2e=a("strong"),tar=o("not"),aar=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Dz=a("a"),nar=o("from_pretrained()"),sar=o(" to load the model weights."),lar=l(),F(bT.$$.fragment),iar=l(),ho=a("div"),F(Oy.$$.fragment),dar=l(),d2e=a("p"),car=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),far=l(),za=a("p"),mar=o("The model class to instantiate is selected based on the "),c2e=a("code"),gar=o("model_type"),har=o(` property of the config object (either
passed as an argument or loaded from `),f2e=a("code"),par=o("pretrained_model_name_or_path"),_ar=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m2e=a("code"),uar=o("pretrained_model_name_or_path"),bar=o(":"),Far=l(),Zr=a("ul"),vT=a("li"),g2e=a("strong"),Tar=o("data2vec-audio"),Mar=o(" \u2014 "),Gz=a("a"),Ear=o("Data2VecAudioForXVector"),Car=o(" (Data2VecAudio model)"),war=l(),FT=a("li"),h2e=a("strong"),Aar=o("unispeech-sat"),yar=o(" \u2014 "),Oz=a("a"),Lar=o("UniSpeechSatForXVector"),xar=o(" (UniSpeechSat model)"),$ar=l(),TT=a("li"),p2e=a("strong"),kar=o("wav2vec2"),Sar=o(" \u2014 "),Vz=a("a"),Rar=o("Wav2Vec2ForXVector"),Par=o(" (Wav2Vec2 model)"),Bar=l(),MT=a("li"),_2e=a("strong"),Iar=o("wav2vec2-conformer"),Nar=o(" \u2014 "),Xz=a("a"),qar=o("Wav2Vec2ConformerForXVector"),jar=o(" (Wav2Vec2-Conformer model)"),Dar=l(),ET=a("li"),u2e=a("strong"),Gar=o("wavlm"),Oar=o(" \u2014 "),zz=a("a"),Var=o("WavLMForXVector"),Xar=o(" (WavLM model)"),zar=l(),CT=a("p"),War=o("The model is set in evaluation mode by default using "),b2e=a("code"),Qar=o("model.eval()"),Har=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),v2e=a("code"),Uar=o("model.train()"),Jar=l(),F(wT.$$.fragment),Mje=l(),Ad=a("h2"),AT=a("a"),F2e=a("span"),F(Vy.$$.fragment),Yar=l(),T2e=a("span"),Kar=o("AutoModelForMaskedImageModeling"),Eje=l(),Wo=a("div"),F(Xy.$$.fragment),Zar=l(),yd=a("p"),enr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),Wz=a("a"),onr=o("from_pretrained()"),rnr=o(" class method or the "),Qz=a("a"),tnr=o("from_config()"),anr=o(` class
method.`),nnr=l(),zy=a("p"),snr=o("This class cannot be instantiated directly using "),M2e=a("code"),lnr=o("__init__()"),inr=o(" (throws an error)."),dnr=l(),Mt=a("div"),F(Wy.$$.fragment),cnr=l(),E2e=a("p"),fnr=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),mnr=l(),Ld=a("p"),gnr=o(`Note:
Loading a model from its configuration file does `),C2e=a("strong"),hnr=o("not"),pnr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Hz=a("a"),_nr=o("from_pretrained()"),unr=o(" to load the model weights."),bnr=l(),F(yT.$$.fragment),vnr=l(),po=a("div"),F(Qy.$$.fragment),Fnr=l(),w2e=a("p"),Tnr=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Mnr=l(),Wa=a("p"),Enr=o("The model class to instantiate is selected based on the "),A2e=a("code"),Cnr=o("model_type"),wnr=o(` property of the config object (either
passed as an argument or loaded from `),y2e=a("code"),Anr=o("pretrained_model_name_or_path"),ynr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L2e=a("code"),Lnr=o("pretrained_model_name_or_path"),xnr=o(":"),$nr=l(),xd=a("ul"),LT=a("li"),x2e=a("strong"),knr=o("deit"),Snr=o(" \u2014 "),Uz=a("a"),Rnr=o("DeiTForMaskedImageModeling"),Pnr=o(" (DeiT model)"),Bnr=l(),xT=a("li"),$2e=a("strong"),Inr=o("swin"),Nnr=o(" \u2014 "),Jz=a("a"),qnr=o("SwinForMaskedImageModeling"),jnr=o(" (Swin model)"),Dnr=l(),$T=a("li"),k2e=a("strong"),Gnr=o("vit"),Onr=o(" \u2014 "),Yz=a("a"),Vnr=o("ViTForMaskedImageModeling"),Xnr=o(" (ViT model)"),znr=l(),kT=a("p"),Wnr=o("The model is set in evaluation mode by default using "),S2e=a("code"),Qnr=o("model.eval()"),Hnr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),R2e=a("code"),Unr=o("model.train()"),Jnr=l(),F(ST.$$.fragment),Cje=l(),$d=a("h2"),RT=a("a"),P2e=a("span"),F(Hy.$$.fragment),Ynr=l(),B2e=a("span"),Knr=o("AutoModelForObjectDetection"),wje=l(),Qo=a("div"),F(Uy.$$.fragment),Znr=l(),kd=a("p"),esr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),Kz=a("a"),osr=o("from_pretrained()"),rsr=o(" class method or the "),Zz=a("a"),tsr=o("from_config()"),asr=o(` class
method.`),nsr=l(),Jy=a("p"),ssr=o("This class cannot be instantiated directly using "),I2e=a("code"),lsr=o("__init__()"),isr=o(" (throws an error)."),dsr=l(),Et=a("div"),F(Yy.$$.fragment),csr=l(),N2e=a("p"),fsr=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),msr=l(),Sd=a("p"),gsr=o(`Note:
Loading a model from its configuration file does `),q2e=a("strong"),hsr=o("not"),psr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eW=a("a"),_sr=o("from_pretrained()"),usr=o(" to load the model weights."),bsr=l(),F(PT.$$.fragment),vsr=l(),_o=a("div"),F(Ky.$$.fragment),Fsr=l(),j2e=a("p"),Tsr=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Msr=l(),Qa=a("p"),Esr=o("The model class to instantiate is selected based on the "),D2e=a("code"),Csr=o("model_type"),wsr=o(` property of the config object (either
passed as an argument or loaded from `),G2e=a("code"),Asr=o("pretrained_model_name_or_path"),ysr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O2e=a("code"),Lsr=o("pretrained_model_name_or_path"),xsr=o(":"),$sr=l(),Zy=a("ul"),BT=a("li"),V2e=a("strong"),ksr=o("detr"),Ssr=o(" \u2014 "),oW=a("a"),Rsr=o("DetrForObjectDetection"),Psr=o(" (DETR model)"),Bsr=l(),IT=a("li"),X2e=a("strong"),Isr=o("yolos"),Nsr=o(" \u2014 "),rW=a("a"),qsr=o("YolosForObjectDetection"),jsr=o(" (YOLOS model)"),Dsr=l(),NT=a("p"),Gsr=o("The model is set in evaluation mode by default using "),z2e=a("code"),Osr=o("model.eval()"),Vsr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),W2e=a("code"),Xsr=o("model.train()"),zsr=l(),F(qT.$$.fragment),Aje=l(),Rd=a("h2"),jT=a("a"),Q2e=a("span"),F(eL.$$.fragment),Wsr=l(),H2e=a("span"),Qsr=o("AutoModelForImageSegmentation"),yje=l(),Ho=a("div"),F(oL.$$.fragment),Hsr=l(),Pd=a("p"),Usr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),tW=a("a"),Jsr=o("from_pretrained()"),Ysr=o(" class method or the "),aW=a("a"),Ksr=o("from_config()"),Zsr=o(` class
method.`),elr=l(),rL=a("p"),olr=o("This class cannot be instantiated directly using "),U2e=a("code"),rlr=o("__init__()"),tlr=o(" (throws an error)."),alr=l(),Ct=a("div"),F(tL.$$.fragment),nlr=l(),J2e=a("p"),slr=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),llr=l(),Bd=a("p"),ilr=o(`Note:
Loading a model from its configuration file does `),Y2e=a("strong"),dlr=o("not"),clr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nW=a("a"),flr=o("from_pretrained()"),mlr=o(" to load the model weights."),glr=l(),F(DT.$$.fragment),hlr=l(),uo=a("div"),F(aL.$$.fragment),plr=l(),K2e=a("p"),_lr=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),ulr=l(),Ha=a("p"),blr=o("The model class to instantiate is selected based on the "),Z2e=a("code"),vlr=o("model_type"),Flr=o(` property of the config object (either
passed as an argument or loaded from `),e1e=a("code"),Tlr=o("pretrained_model_name_or_path"),Mlr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o1e=a("code"),Elr=o("pretrained_model_name_or_path"),Clr=o(":"),wlr=l(),r1e=a("ul"),GT=a("li"),t1e=a("strong"),Alr=o("detr"),ylr=o(" \u2014 "),sW=a("a"),Llr=o("DetrForSegmentation"),xlr=o(" (DETR model)"),$lr=l(),OT=a("p"),klr=o("The model is set in evaluation mode by default using "),a1e=a("code"),Slr=o("model.eval()"),Rlr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),n1e=a("code"),Plr=o("model.train()"),Blr=l(),F(VT.$$.fragment),Lje=l(),Id=a("h2"),XT=a("a"),s1e=a("span"),F(nL.$$.fragment),Ilr=l(),l1e=a("span"),Nlr=o("AutoModelForSemanticSegmentation"),xje=l(),Uo=a("div"),F(sL.$$.fragment),qlr=l(),Nd=a("p"),jlr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),lW=a("a"),Dlr=o("from_pretrained()"),Glr=o(" class method or the "),iW=a("a"),Olr=o("from_config()"),Vlr=o(` class
method.`),Xlr=l(),lL=a("p"),zlr=o("This class cannot be instantiated directly using "),i1e=a("code"),Wlr=o("__init__()"),Qlr=o(" (throws an error)."),Hlr=l(),wt=a("div"),F(iL.$$.fragment),Ulr=l(),d1e=a("p"),Jlr=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Ylr=l(),qd=a("p"),Klr=o(`Note:
Loading a model from its configuration file does `),c1e=a("strong"),Zlr=o("not"),eir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dW=a("a"),oir=o("from_pretrained()"),rir=o(" to load the model weights."),tir=l(),F(zT.$$.fragment),air=l(),bo=a("div"),F(dL.$$.fragment),nir=l(),f1e=a("p"),sir=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),lir=l(),Ua=a("p"),iir=o("The model class to instantiate is selected based on the "),m1e=a("code"),dir=o("model_type"),cir=o(` property of the config object (either
passed as an argument or loaded from `),g1e=a("code"),fir=o("pretrained_model_name_or_path"),mir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h1e=a("code"),gir=o("pretrained_model_name_or_path"),hir=o(":"),pir=l(),Ja=a("ul"),WT=a("li"),p1e=a("strong"),_ir=o("beit"),uir=o(" \u2014 "),cW=a("a"),bir=o("BeitForSemanticSegmentation"),vir=o(" (BEiT model)"),Fir=l(),QT=a("li"),_1e=a("strong"),Tir=o("data2vec-vision"),Mir=o(" \u2014 "),fW=a("a"),Eir=o("Data2VecVisionForSemanticSegmentation"),Cir=o(" (Data2VecVision model)"),wir=l(),HT=a("li"),u1e=a("strong"),Air=o("dpt"),yir=o(" \u2014 "),mW=a("a"),Lir=o("DPTForSemanticSegmentation"),xir=o(" (DPT model)"),$ir=l(),UT=a("li"),b1e=a("strong"),kir=o("segformer"),Sir=o(" \u2014 "),gW=a("a"),Rir=o("SegformerForSemanticSegmentation"),Pir=o(" (SegFormer model)"),Bir=l(),JT=a("p"),Iir=o("The model is set in evaluation mode by default using "),v1e=a("code"),Nir=o("model.eval()"),qir=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),F1e=a("code"),jir=o("model.train()"),Dir=l(),F(YT.$$.fragment),$je=l(),jd=a("h2"),KT=a("a"),T1e=a("span"),F(cL.$$.fragment),Gir=l(),M1e=a("span"),Oir=o("AutoModelForInstanceSegmentation"),kje=l(),Jo=a("div"),F(fL.$$.fragment),Vir=l(),Dd=a("p"),Xir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),hW=a("a"),zir=o("from_pretrained()"),Wir=o(" class method or the "),pW=a("a"),Qir=o("from_config()"),Hir=o(` class
method.`),Uir=l(),mL=a("p"),Jir=o("This class cannot be instantiated directly using "),E1e=a("code"),Yir=o("__init__()"),Kir=o(" (throws an error)."),Zir=l(),At=a("div"),F(gL.$$.fragment),edr=l(),C1e=a("p"),odr=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),rdr=l(),Gd=a("p"),tdr=o(`Note:
Loading a model from its configuration file does `),w1e=a("strong"),adr=o("not"),ndr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_W=a("a"),sdr=o("from_pretrained()"),ldr=o(" to load the model weights."),idr=l(),F(ZT.$$.fragment),ddr=l(),vo=a("div"),F(hL.$$.fragment),cdr=l(),A1e=a("p"),fdr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),mdr=l(),Ya=a("p"),gdr=o("The model class to instantiate is selected based on the "),y1e=a("code"),hdr=o("model_type"),pdr=o(` property of the config object (either
passed as an argument or loaded from `),L1e=a("code"),_dr=o("pretrained_model_name_or_path"),udr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x1e=a("code"),bdr=o("pretrained_model_name_or_path"),vdr=o(":"),Fdr=l(),$1e=a("ul"),e7=a("li"),k1e=a("strong"),Tdr=o("maskformer"),Mdr=o(" \u2014 "),uW=a("a"),Edr=o("MaskFormerForInstanceSegmentation"),Cdr=o(" (MaskFormer model)"),wdr=l(),o7=a("p"),Adr=o("The model is set in evaluation mode by default using "),S1e=a("code"),ydr=o("model.eval()"),Ldr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),R1e=a("code"),xdr=o("model.train()"),$dr=l(),F(r7.$$.fragment),Sje=l(),Od=a("h2"),t7=a("a"),P1e=a("span"),F(pL.$$.fragment),kdr=l(),B1e=a("span"),Sdr=o("TFAutoModel"),Rje=l(),Yo=a("div"),F(_L.$$.fragment),Rdr=l(),Vd=a("p"),Pdr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),bW=a("a"),Bdr=o("from_pretrained()"),Idr=o(" class method or the "),vW=a("a"),Ndr=o("from_config()"),qdr=o(` class
method.`),jdr=l(),uL=a("p"),Ddr=o("This class cannot be instantiated directly using "),I1e=a("code"),Gdr=o("__init__()"),Odr=o(" (throws an error)."),Vdr=l(),yt=a("div"),F(bL.$$.fragment),Xdr=l(),N1e=a("p"),zdr=o("Instantiates one of the base model classes of the library from a configuration."),Wdr=l(),Xd=a("p"),Qdr=o(`Note:
Loading a model from its configuration file does `),q1e=a("strong"),Hdr=o("not"),Udr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FW=a("a"),Jdr=o("from_pretrained()"),Ydr=o(" to load the model weights."),Kdr=l(),F(a7.$$.fragment),Zdr=l(),wr=a("div"),F(vL.$$.fragment),ecr=l(),j1e=a("p"),ocr=o("Instantiate one of the base model classes of the library from a pretrained model."),rcr=l(),Ka=a("p"),tcr=o("The model class to instantiate is selected based on the "),D1e=a("code"),acr=o("model_type"),ncr=o(` property of the config object (either
passed as an argument or loaded from `),G1e=a("code"),scr=o("pretrained_model_name_or_path"),lcr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O1e=a("code"),icr=o("pretrained_model_name_or_path"),dcr=o(":"),ccr=l(),q=a("ul"),n7=a("li"),V1e=a("strong"),fcr=o("albert"),mcr=o(" \u2014 "),TW=a("a"),gcr=o("TFAlbertModel"),hcr=o(" (ALBERT model)"),pcr=l(),s7=a("li"),X1e=a("strong"),_cr=o("bart"),ucr=o(" \u2014 "),MW=a("a"),bcr=o("TFBartModel"),vcr=o(" (BART model)"),Fcr=l(),l7=a("li"),z1e=a("strong"),Tcr=o("bert"),Mcr=o(" \u2014 "),EW=a("a"),Ecr=o("TFBertModel"),Ccr=o(" (BERT model)"),wcr=l(),i7=a("li"),W1e=a("strong"),Acr=o("blenderbot"),ycr=o(" \u2014 "),CW=a("a"),Lcr=o("TFBlenderbotModel"),xcr=o(" (Blenderbot model)"),$cr=l(),d7=a("li"),Q1e=a("strong"),kcr=o("blenderbot-small"),Scr=o(" \u2014 "),wW=a("a"),Rcr=o("TFBlenderbotSmallModel"),Pcr=o(" (BlenderbotSmall model)"),Bcr=l(),c7=a("li"),H1e=a("strong"),Icr=o("camembert"),Ncr=o(" \u2014 "),AW=a("a"),qcr=o("TFCamembertModel"),jcr=o(" (CamemBERT model)"),Dcr=l(),f7=a("li"),U1e=a("strong"),Gcr=o("clip"),Ocr=o(" \u2014 "),yW=a("a"),Vcr=o("TFCLIPModel"),Xcr=o(" (CLIP model)"),zcr=l(),m7=a("li"),J1e=a("strong"),Wcr=o("convbert"),Qcr=o(" \u2014 "),LW=a("a"),Hcr=o("TFConvBertModel"),Ucr=o(" (ConvBERT model)"),Jcr=l(),g7=a("li"),Y1e=a("strong"),Ycr=o("convnext"),Kcr=o(" \u2014 "),xW=a("a"),Zcr=o("TFConvNextModel"),efr=o(" (ConvNext model)"),ofr=l(),h7=a("li"),K1e=a("strong"),rfr=o("ctrl"),tfr=o(" \u2014 "),$W=a("a"),afr=o("TFCTRLModel"),nfr=o(" (CTRL model)"),sfr=l(),p7=a("li"),Z1e=a("strong"),lfr=o("data2vec-vision"),ifr=o(" \u2014 "),kW=a("a"),dfr=o("TFData2VecVisionModel"),cfr=o(" (Data2VecVision model)"),ffr=l(),_7=a("li"),ebe=a("strong"),mfr=o("deberta"),gfr=o(" \u2014 "),SW=a("a"),hfr=o("TFDebertaModel"),pfr=o(" (DeBERTa model)"),_fr=l(),u7=a("li"),obe=a("strong"),ufr=o("deberta-v2"),bfr=o(" \u2014 "),RW=a("a"),vfr=o("TFDebertaV2Model"),Ffr=o(" (DeBERTa-v2 model)"),Tfr=l(),b7=a("li"),rbe=a("strong"),Mfr=o("distilbert"),Efr=o(" \u2014 "),PW=a("a"),Cfr=o("TFDistilBertModel"),wfr=o(" (DistilBERT model)"),Afr=l(),v7=a("li"),tbe=a("strong"),yfr=o("dpr"),Lfr=o(" \u2014 "),BW=a("a"),xfr=o("TFDPRQuestionEncoder"),$fr=o(" (DPR model)"),kfr=l(),F7=a("li"),abe=a("strong"),Sfr=o("electra"),Rfr=o(" \u2014 "),IW=a("a"),Pfr=o("TFElectraModel"),Bfr=o(" (ELECTRA model)"),Ifr=l(),T7=a("li"),nbe=a("strong"),Nfr=o("flaubert"),qfr=o(" \u2014 "),NW=a("a"),jfr=o("TFFlaubertModel"),Dfr=o(" (FlauBERT model)"),Gfr=l(),Ns=a("li"),sbe=a("strong"),Ofr=o("funnel"),Vfr=o(" \u2014 "),qW=a("a"),Xfr=o("TFFunnelModel"),zfr=o(" or "),jW=a("a"),Wfr=o("TFFunnelBaseModel"),Qfr=o(" (Funnel Transformer model)"),Hfr=l(),M7=a("li"),lbe=a("strong"),Ufr=o("gpt2"),Jfr=o(" \u2014 "),DW=a("a"),Yfr=o("TFGPT2Model"),Kfr=o(" (OpenAI GPT-2 model)"),Zfr=l(),E7=a("li"),ibe=a("strong"),emr=o("gptj"),omr=o(" \u2014 "),GW=a("a"),rmr=o("TFGPTJModel"),tmr=o(" (GPT-J model)"),amr=l(),C7=a("li"),dbe=a("strong"),nmr=o("hubert"),smr=o(" \u2014 "),OW=a("a"),lmr=o("TFHubertModel"),imr=o(" (Hubert model)"),dmr=l(),w7=a("li"),cbe=a("strong"),cmr=o("layoutlm"),fmr=o(" \u2014 "),VW=a("a"),mmr=o("TFLayoutLMModel"),gmr=o(" (LayoutLM model)"),hmr=l(),A7=a("li"),fbe=a("strong"),pmr=o("led"),_mr=o(" \u2014 "),XW=a("a"),umr=o("TFLEDModel"),bmr=o(" (LED model)"),vmr=l(),y7=a("li"),mbe=a("strong"),Fmr=o("longformer"),Tmr=o(" \u2014 "),zW=a("a"),Mmr=o("TFLongformerModel"),Emr=o(" (Longformer model)"),Cmr=l(),L7=a("li"),gbe=a("strong"),wmr=o("lxmert"),Amr=o(" \u2014 "),WW=a("a"),ymr=o("TFLxmertModel"),Lmr=o(" (LXMERT model)"),xmr=l(),x7=a("li"),hbe=a("strong"),$mr=o("marian"),kmr=o(" \u2014 "),QW=a("a"),Smr=o("TFMarianModel"),Rmr=o(" (Marian model)"),Pmr=l(),$7=a("li"),pbe=a("strong"),Bmr=o("mbart"),Imr=o(" \u2014 "),HW=a("a"),Nmr=o("TFMBartModel"),qmr=o(" (mBART model)"),jmr=l(),k7=a("li"),_be=a("strong"),Dmr=o("mobilebert"),Gmr=o(" \u2014 "),UW=a("a"),Omr=o("TFMobileBertModel"),Vmr=o(" (MobileBERT model)"),Xmr=l(),S7=a("li"),ube=a("strong"),zmr=o("mpnet"),Wmr=o(" \u2014 "),JW=a("a"),Qmr=o("TFMPNetModel"),Hmr=o(" (MPNet model)"),Umr=l(),R7=a("li"),bbe=a("strong"),Jmr=o("mt5"),Ymr=o(" \u2014 "),YW=a("a"),Kmr=o("TFMT5Model"),Zmr=o(" (mT5 model)"),egr=l(),P7=a("li"),vbe=a("strong"),ogr=o("openai-gpt"),rgr=o(" \u2014 "),KW=a("a"),tgr=o("TFOpenAIGPTModel"),agr=o(" (OpenAI GPT model)"),ngr=l(),B7=a("li"),Fbe=a("strong"),sgr=o("pegasus"),lgr=o(" \u2014 "),ZW=a("a"),igr=o("TFPegasusModel"),dgr=o(" (Pegasus model)"),cgr=l(),I7=a("li"),Tbe=a("strong"),fgr=o("rembert"),mgr=o(" \u2014 "),eQ=a("a"),ggr=o("TFRemBertModel"),hgr=o(" (RemBERT model)"),pgr=l(),N7=a("li"),Mbe=a("strong"),_gr=o("roberta"),ugr=o(" \u2014 "),oQ=a("a"),bgr=o("TFRobertaModel"),vgr=o(" (RoBERTa model)"),Fgr=l(),q7=a("li"),Ebe=a("strong"),Tgr=o("roformer"),Mgr=o(" \u2014 "),rQ=a("a"),Egr=o("TFRoFormerModel"),Cgr=o(" (RoFormer model)"),wgr=l(),j7=a("li"),Cbe=a("strong"),Agr=o("speech_to_text"),ygr=o(" \u2014 "),tQ=a("a"),Lgr=o("TFSpeech2TextModel"),xgr=o(" (Speech2Text model)"),$gr=l(),D7=a("li"),wbe=a("strong"),kgr=o("swin"),Sgr=o(" \u2014 "),aQ=a("a"),Rgr=o("TFSwinModel"),Pgr=o(" (Swin model)"),Bgr=l(),G7=a("li"),Abe=a("strong"),Igr=o("t5"),Ngr=o(" \u2014 "),nQ=a("a"),qgr=o("TFT5Model"),jgr=o(" (T5 model)"),Dgr=l(),O7=a("li"),ybe=a("strong"),Ggr=o("tapas"),Ogr=o(" \u2014 "),sQ=a("a"),Vgr=o("TFTapasModel"),Xgr=o(" (TAPAS model)"),zgr=l(),V7=a("li"),Lbe=a("strong"),Wgr=o("transfo-xl"),Qgr=o(" \u2014 "),lQ=a("a"),Hgr=o("TFTransfoXLModel"),Ugr=o(" (Transformer-XL model)"),Jgr=l(),X7=a("li"),xbe=a("strong"),Ygr=o("vit"),Kgr=o(" \u2014 "),iQ=a("a"),Zgr=o("TFViTModel"),ehr=o(" (ViT model)"),ohr=l(),z7=a("li"),$be=a("strong"),rhr=o("vit_mae"),thr=o(" \u2014 "),dQ=a("a"),ahr=o("TFViTMAEModel"),nhr=o(" (ViTMAE model)"),shr=l(),W7=a("li"),kbe=a("strong"),lhr=o("wav2vec2"),ihr=o(" \u2014 "),cQ=a("a"),dhr=o("TFWav2Vec2Model"),chr=o(" (Wav2Vec2 model)"),fhr=l(),Q7=a("li"),Sbe=a("strong"),mhr=o("xlm"),ghr=o(" \u2014 "),fQ=a("a"),hhr=o("TFXLMModel"),phr=o(" (XLM model)"),_hr=l(),H7=a("li"),Rbe=a("strong"),uhr=o("xlm-roberta"),bhr=o(" \u2014 "),mQ=a("a"),vhr=o("TFXLMRobertaModel"),Fhr=o(" (XLM-RoBERTa model)"),Thr=l(),U7=a("li"),Pbe=a("strong"),Mhr=o("xlnet"),Ehr=o(" \u2014 "),gQ=a("a"),Chr=o("TFXLNetModel"),whr=o(" (XLNet model)"),Ahr=l(),F(J7.$$.fragment),Pje=l(),zd=a("h2"),Y7=a("a"),Bbe=a("span"),F(FL.$$.fragment),yhr=l(),Ibe=a("span"),Lhr=o("TFAutoModelForPreTraining"),Bje=l(),Ko=a("div"),F(TL.$$.fragment),xhr=l(),Wd=a("p"),$hr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),hQ=a("a"),khr=o("from_pretrained()"),Shr=o(" class method or the "),pQ=a("a"),Rhr=o("from_config()"),Phr=o(` class
method.`),Bhr=l(),ML=a("p"),Ihr=o("This class cannot be instantiated directly using "),Nbe=a("code"),Nhr=o("__init__()"),qhr=o(" (throws an error)."),jhr=l(),Lt=a("div"),F(EL.$$.fragment),Dhr=l(),qbe=a("p"),Ghr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Ohr=l(),Qd=a("p"),Vhr=o(`Note:
Loading a model from its configuration file does `),jbe=a("strong"),Xhr=o("not"),zhr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_Q=a("a"),Whr=o("from_pretrained()"),Qhr=o(" to load the model weights."),Hhr=l(),F(K7.$$.fragment),Uhr=l(),Ar=a("div"),F(CL.$$.fragment),Jhr=l(),Dbe=a("p"),Yhr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Khr=l(),Za=a("p"),Zhr=o("The model class to instantiate is selected based on the "),Gbe=a("code"),epr=o("model_type"),opr=o(` property of the config object (either
passed as an argument or loaded from `),Obe=a("code"),rpr=o("pretrained_model_name_or_path"),tpr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vbe=a("code"),apr=o("pretrained_model_name_or_path"),npr=o(":"),spr=l(),se=a("ul"),Z7=a("li"),Xbe=a("strong"),lpr=o("albert"),ipr=o(" \u2014 "),uQ=a("a"),dpr=o("TFAlbertForPreTraining"),cpr=o(" (ALBERT model)"),fpr=l(),e9=a("li"),zbe=a("strong"),mpr=o("bart"),gpr=o(" \u2014 "),bQ=a("a"),hpr=o("TFBartForConditionalGeneration"),ppr=o(" (BART model)"),_pr=l(),o9=a("li"),Wbe=a("strong"),upr=o("bert"),bpr=o(" \u2014 "),vQ=a("a"),vpr=o("TFBertForPreTraining"),Fpr=o(" (BERT model)"),Tpr=l(),r9=a("li"),Qbe=a("strong"),Mpr=o("camembert"),Epr=o(" \u2014 "),FQ=a("a"),Cpr=o("TFCamembertForMaskedLM"),wpr=o(" (CamemBERT model)"),Apr=l(),t9=a("li"),Hbe=a("strong"),ypr=o("ctrl"),Lpr=o(" \u2014 "),TQ=a("a"),xpr=o("TFCTRLLMHeadModel"),$pr=o(" (CTRL model)"),kpr=l(),a9=a("li"),Ube=a("strong"),Spr=o("distilbert"),Rpr=o(" \u2014 "),MQ=a("a"),Ppr=o("TFDistilBertForMaskedLM"),Bpr=o(" (DistilBERT model)"),Ipr=l(),n9=a("li"),Jbe=a("strong"),Npr=o("electra"),qpr=o(" \u2014 "),EQ=a("a"),jpr=o("TFElectraForPreTraining"),Dpr=o(" (ELECTRA model)"),Gpr=l(),s9=a("li"),Ybe=a("strong"),Opr=o("flaubert"),Vpr=o(" \u2014 "),CQ=a("a"),Xpr=o("TFFlaubertWithLMHeadModel"),zpr=o(" (FlauBERT model)"),Wpr=l(),l9=a("li"),Kbe=a("strong"),Qpr=o("funnel"),Hpr=o(" \u2014 "),wQ=a("a"),Upr=o("TFFunnelForPreTraining"),Jpr=o(" (Funnel Transformer model)"),Ypr=l(),i9=a("li"),Zbe=a("strong"),Kpr=o("gpt2"),Zpr=o(" \u2014 "),AQ=a("a"),e_r=o("TFGPT2LMHeadModel"),o_r=o(" (OpenAI GPT-2 model)"),r_r=l(),d9=a("li"),eve=a("strong"),t_r=o("layoutlm"),a_r=o(" \u2014 "),yQ=a("a"),n_r=o("TFLayoutLMForMaskedLM"),s_r=o(" (LayoutLM model)"),l_r=l(),c9=a("li"),ove=a("strong"),i_r=o("lxmert"),d_r=o(" \u2014 "),LQ=a("a"),c_r=o("TFLxmertForPreTraining"),f_r=o(" (LXMERT model)"),m_r=l(),f9=a("li"),rve=a("strong"),g_r=o("mobilebert"),h_r=o(" \u2014 "),xQ=a("a"),p_r=o("TFMobileBertForPreTraining"),__r=o(" (MobileBERT model)"),u_r=l(),m9=a("li"),tve=a("strong"),b_r=o("mpnet"),v_r=o(" \u2014 "),$Q=a("a"),F_r=o("TFMPNetForMaskedLM"),T_r=o(" (MPNet model)"),M_r=l(),g9=a("li"),ave=a("strong"),E_r=o("openai-gpt"),C_r=o(" \u2014 "),kQ=a("a"),w_r=o("TFOpenAIGPTLMHeadModel"),A_r=o(" (OpenAI GPT model)"),y_r=l(),h9=a("li"),nve=a("strong"),L_r=o("roberta"),x_r=o(" \u2014 "),SQ=a("a"),$_r=o("TFRobertaForMaskedLM"),k_r=o(" (RoBERTa model)"),S_r=l(),p9=a("li"),sve=a("strong"),R_r=o("t5"),P_r=o(" \u2014 "),RQ=a("a"),B_r=o("TFT5ForConditionalGeneration"),I_r=o(" (T5 model)"),N_r=l(),_9=a("li"),lve=a("strong"),q_r=o("tapas"),j_r=o(" \u2014 "),PQ=a("a"),D_r=o("TFTapasForMaskedLM"),G_r=o(" (TAPAS model)"),O_r=l(),u9=a("li"),ive=a("strong"),V_r=o("transfo-xl"),X_r=o(" \u2014 "),BQ=a("a"),z_r=o("TFTransfoXLLMHeadModel"),W_r=o(" (Transformer-XL model)"),Q_r=l(),b9=a("li"),dve=a("strong"),H_r=o("vit_mae"),U_r=o(" \u2014 "),IQ=a("a"),J_r=o("TFViTMAEForPreTraining"),Y_r=o(" (ViTMAE model)"),K_r=l(),v9=a("li"),cve=a("strong"),Z_r=o("xlm"),eur=o(" \u2014 "),NQ=a("a"),our=o("TFXLMWithLMHeadModel"),rur=o(" (XLM model)"),tur=l(),F9=a("li"),fve=a("strong"),aur=o("xlm-roberta"),nur=o(" \u2014 "),qQ=a("a"),sur=o("TFXLMRobertaForMaskedLM"),lur=o(" (XLM-RoBERTa model)"),iur=l(),T9=a("li"),mve=a("strong"),dur=o("xlnet"),cur=o(" \u2014 "),jQ=a("a"),fur=o("TFXLNetLMHeadModel"),mur=o(" (XLNet model)"),gur=l(),F(M9.$$.fragment),Ije=l(),Hd=a("h2"),E9=a("a"),gve=a("span"),F(wL.$$.fragment),hur=l(),hve=a("span"),pur=o("TFAutoModelForCausalLM"),Nje=l(),Zo=a("div"),F(AL.$$.fragment),_ur=l(),Ud=a("p"),uur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),DQ=a("a"),bur=o("from_pretrained()"),vur=o(" class method or the "),GQ=a("a"),Fur=o("from_config()"),Tur=o(` class
method.`),Mur=l(),yL=a("p"),Eur=o("This class cannot be instantiated directly using "),pve=a("code"),Cur=o("__init__()"),wur=o(" (throws an error)."),Aur=l(),xt=a("div"),F(LL.$$.fragment),yur=l(),_ve=a("p"),Lur=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),xur=l(),Jd=a("p"),$ur=o(`Note:
Loading a model from its configuration file does `),uve=a("strong"),kur=o("not"),Sur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OQ=a("a"),Rur=o("from_pretrained()"),Pur=o(" to load the model weights."),Bur=l(),F(C9.$$.fragment),Iur=l(),yr=a("div"),F(xL.$$.fragment),Nur=l(),bve=a("p"),qur=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),jur=l(),en=a("p"),Dur=o("The model class to instantiate is selected based on the "),vve=a("code"),Gur=o("model_type"),Our=o(` property of the config object (either
passed as an argument or loaded from `),Fve=a("code"),Vur=o("pretrained_model_name_or_path"),Xur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tve=a("code"),zur=o("pretrained_model_name_or_path"),Wur=o(":"),Qur=l(),Ee=a("ul"),w9=a("li"),Mve=a("strong"),Hur=o("bert"),Uur=o(" \u2014 "),VQ=a("a"),Jur=o("TFBertLMHeadModel"),Yur=o(" (BERT model)"),Kur=l(),A9=a("li"),Eve=a("strong"),Zur=o("camembert"),e2r=o(" \u2014 "),XQ=a("a"),o2r=o("TFCamembertForCausalLM"),r2r=o(" (CamemBERT model)"),t2r=l(),y9=a("li"),Cve=a("strong"),a2r=o("ctrl"),n2r=o(" \u2014 "),zQ=a("a"),s2r=o("TFCTRLLMHeadModel"),l2r=o(" (CTRL model)"),i2r=l(),L9=a("li"),wve=a("strong"),d2r=o("gpt2"),c2r=o(" \u2014 "),WQ=a("a"),f2r=o("TFGPT2LMHeadModel"),m2r=o(" (OpenAI GPT-2 model)"),g2r=l(),x9=a("li"),Ave=a("strong"),h2r=o("gptj"),p2r=o(" \u2014 "),QQ=a("a"),_2r=o("TFGPTJForCausalLM"),u2r=o(" (GPT-J model)"),b2r=l(),$9=a("li"),yve=a("strong"),v2r=o("openai-gpt"),F2r=o(" \u2014 "),HQ=a("a"),T2r=o("TFOpenAIGPTLMHeadModel"),M2r=o(" (OpenAI GPT model)"),E2r=l(),k9=a("li"),Lve=a("strong"),C2r=o("rembert"),w2r=o(" \u2014 "),UQ=a("a"),A2r=o("TFRemBertForCausalLM"),y2r=o(" (RemBERT model)"),L2r=l(),S9=a("li"),xve=a("strong"),x2r=o("roberta"),$2r=o(" \u2014 "),JQ=a("a"),k2r=o("TFRobertaForCausalLM"),S2r=o(" (RoBERTa model)"),R2r=l(),R9=a("li"),$ve=a("strong"),P2r=o("roformer"),B2r=o(" \u2014 "),YQ=a("a"),I2r=o("TFRoFormerForCausalLM"),N2r=o(" (RoFormer model)"),q2r=l(),P9=a("li"),kve=a("strong"),j2r=o("transfo-xl"),D2r=o(" \u2014 "),KQ=a("a"),G2r=o("TFTransfoXLLMHeadModel"),O2r=o(" (Transformer-XL model)"),V2r=l(),B9=a("li"),Sve=a("strong"),X2r=o("xlm"),z2r=o(" \u2014 "),ZQ=a("a"),W2r=o("TFXLMWithLMHeadModel"),Q2r=o(" (XLM model)"),H2r=l(),I9=a("li"),Rve=a("strong"),U2r=o("xlnet"),J2r=o(" \u2014 "),eH=a("a"),Y2r=o("TFXLNetLMHeadModel"),K2r=o(" (XLNet model)"),Z2r=l(),F(N9.$$.fragment),qje=l(),Yd=a("h2"),q9=a("a"),Pve=a("span"),F($L.$$.fragment),e1r=l(),Bve=a("span"),o1r=o("TFAutoModelForImageClassification"),jje=l(),er=a("div"),F(kL.$$.fragment),r1r=l(),Kd=a("p"),t1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),oH=a("a"),a1r=o("from_pretrained()"),n1r=o(" class method or the "),rH=a("a"),s1r=o("from_config()"),l1r=o(` class
method.`),i1r=l(),SL=a("p"),d1r=o("This class cannot be instantiated directly using "),Ive=a("code"),c1r=o("__init__()"),f1r=o(" (throws an error)."),m1r=l(),$t=a("div"),F(RL.$$.fragment),g1r=l(),Nve=a("p"),h1r=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),p1r=l(),Zd=a("p"),_1r=o(`Note:
Loading a model from its configuration file does `),qve=a("strong"),u1r=o("not"),b1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tH=a("a"),v1r=o("from_pretrained()"),F1r=o(" to load the model weights."),T1r=l(),F(j9.$$.fragment),M1r=l(),Lr=a("div"),F(PL.$$.fragment),E1r=l(),jve=a("p"),C1r=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),w1r=l(),on=a("p"),A1r=o("The model class to instantiate is selected based on the "),Dve=a("code"),y1r=o("model_type"),L1r=o(` property of the config object (either
passed as an argument or loaded from `),Gve=a("code"),x1r=o("pretrained_model_name_or_path"),$1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ove=a("code"),k1r=o("pretrained_model_name_or_path"),S1r=o(":"),R1r=l(),rn=a("ul"),D9=a("li"),Vve=a("strong"),P1r=o("convnext"),B1r=o(" \u2014 "),aH=a("a"),I1r=o("TFConvNextForImageClassification"),N1r=o(" (ConvNext model)"),q1r=l(),G9=a("li"),Xve=a("strong"),j1r=o("data2vec-vision"),D1r=o(" \u2014 "),nH=a("a"),G1r=o("TFData2VecVisionForImageClassification"),O1r=o(" (Data2VecVision model)"),V1r=l(),O9=a("li"),zve=a("strong"),X1r=o("swin"),z1r=o(" \u2014 "),sH=a("a"),W1r=o("TFSwinForImageClassification"),Q1r=o(" (Swin model)"),H1r=l(),V9=a("li"),Wve=a("strong"),U1r=o("vit"),J1r=o(" \u2014 "),lH=a("a"),Y1r=o("TFViTForImageClassification"),K1r=o(" (ViT model)"),Z1r=l(),F(X9.$$.fragment),Dje=l(),ec=a("h2"),z9=a("a"),Qve=a("span"),F(BL.$$.fragment),ebr=l(),Hve=a("span"),obr=o("TFAutoModelForMaskedLM"),Gje=l(),or=a("div"),F(IL.$$.fragment),rbr=l(),oc=a("p"),tbr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),iH=a("a"),abr=o("from_pretrained()"),nbr=o(" class method or the "),dH=a("a"),sbr=o("from_config()"),lbr=o(` class
method.`),ibr=l(),NL=a("p"),dbr=o("This class cannot be instantiated directly using "),Uve=a("code"),cbr=o("__init__()"),fbr=o(" (throws an error)."),mbr=l(),kt=a("div"),F(qL.$$.fragment),gbr=l(),Jve=a("p"),hbr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),pbr=l(),rc=a("p"),_br=o(`Note:
Loading a model from its configuration file does `),Yve=a("strong"),ubr=o("not"),bbr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cH=a("a"),vbr=o("from_pretrained()"),Fbr=o(" to load the model weights."),Tbr=l(),F(W9.$$.fragment),Mbr=l(),xr=a("div"),F(jL.$$.fragment),Ebr=l(),Kve=a("p"),Cbr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),wbr=l(),tn=a("p"),Abr=o("The model class to instantiate is selected based on the "),Zve=a("code"),ybr=o("model_type"),Lbr=o(` property of the config object (either
passed as an argument or loaded from `),eFe=a("code"),xbr=o("pretrained_model_name_or_path"),$br=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oFe=a("code"),kbr=o("pretrained_model_name_or_path"),Sbr=o(":"),Rbr=l(),ie=a("ul"),Q9=a("li"),rFe=a("strong"),Pbr=o("albert"),Bbr=o(" \u2014 "),fH=a("a"),Ibr=o("TFAlbertForMaskedLM"),Nbr=o(" (ALBERT model)"),qbr=l(),H9=a("li"),tFe=a("strong"),jbr=o("bert"),Dbr=o(" \u2014 "),mH=a("a"),Gbr=o("TFBertForMaskedLM"),Obr=o(" (BERT model)"),Vbr=l(),U9=a("li"),aFe=a("strong"),Xbr=o("camembert"),zbr=o(" \u2014 "),gH=a("a"),Wbr=o("TFCamembertForMaskedLM"),Qbr=o(" (CamemBERT model)"),Hbr=l(),J9=a("li"),nFe=a("strong"),Ubr=o("convbert"),Jbr=o(" \u2014 "),hH=a("a"),Ybr=o("TFConvBertForMaskedLM"),Kbr=o(" (ConvBERT model)"),Zbr=l(),Y9=a("li"),sFe=a("strong"),evr=o("deberta"),ovr=o(" \u2014 "),pH=a("a"),rvr=o("TFDebertaForMaskedLM"),tvr=o(" (DeBERTa model)"),avr=l(),K9=a("li"),lFe=a("strong"),nvr=o("deberta-v2"),svr=o(" \u2014 "),_H=a("a"),lvr=o("TFDebertaV2ForMaskedLM"),ivr=o(" (DeBERTa-v2 model)"),dvr=l(),Z9=a("li"),iFe=a("strong"),cvr=o("distilbert"),fvr=o(" \u2014 "),uH=a("a"),mvr=o("TFDistilBertForMaskedLM"),gvr=o(" (DistilBERT model)"),hvr=l(),eM=a("li"),dFe=a("strong"),pvr=o("electra"),_vr=o(" \u2014 "),bH=a("a"),uvr=o("TFElectraForMaskedLM"),bvr=o(" (ELECTRA model)"),vvr=l(),oM=a("li"),cFe=a("strong"),Fvr=o("flaubert"),Tvr=o(" \u2014 "),vH=a("a"),Mvr=o("TFFlaubertWithLMHeadModel"),Evr=o(" (FlauBERT model)"),Cvr=l(),rM=a("li"),fFe=a("strong"),wvr=o("funnel"),Avr=o(" \u2014 "),FH=a("a"),yvr=o("TFFunnelForMaskedLM"),Lvr=o(" (Funnel Transformer model)"),xvr=l(),tM=a("li"),mFe=a("strong"),$vr=o("layoutlm"),kvr=o(" \u2014 "),TH=a("a"),Svr=o("TFLayoutLMForMaskedLM"),Rvr=o(" (LayoutLM model)"),Pvr=l(),aM=a("li"),gFe=a("strong"),Bvr=o("longformer"),Ivr=o(" \u2014 "),MH=a("a"),Nvr=o("TFLongformerForMaskedLM"),qvr=o(" (Longformer model)"),jvr=l(),nM=a("li"),hFe=a("strong"),Dvr=o("mobilebert"),Gvr=o(" \u2014 "),EH=a("a"),Ovr=o("TFMobileBertForMaskedLM"),Vvr=o(" (MobileBERT model)"),Xvr=l(),sM=a("li"),pFe=a("strong"),zvr=o("mpnet"),Wvr=o(" \u2014 "),CH=a("a"),Qvr=o("TFMPNetForMaskedLM"),Hvr=o(" (MPNet model)"),Uvr=l(),lM=a("li"),_Fe=a("strong"),Jvr=o("rembert"),Yvr=o(" \u2014 "),wH=a("a"),Kvr=o("TFRemBertForMaskedLM"),Zvr=o(" (RemBERT model)"),eFr=l(),iM=a("li"),uFe=a("strong"),oFr=o("roberta"),rFr=o(" \u2014 "),AH=a("a"),tFr=o("TFRobertaForMaskedLM"),aFr=o(" (RoBERTa model)"),nFr=l(),dM=a("li"),bFe=a("strong"),sFr=o("roformer"),lFr=o(" \u2014 "),yH=a("a"),iFr=o("TFRoFormerForMaskedLM"),dFr=o(" (RoFormer model)"),cFr=l(),cM=a("li"),vFe=a("strong"),fFr=o("tapas"),mFr=o(" \u2014 "),LH=a("a"),gFr=o("TFTapasForMaskedLM"),hFr=o(" (TAPAS model)"),pFr=l(),fM=a("li"),FFe=a("strong"),_Fr=o("xlm"),uFr=o(" \u2014 "),xH=a("a"),bFr=o("TFXLMWithLMHeadModel"),vFr=o(" (XLM model)"),FFr=l(),mM=a("li"),TFe=a("strong"),TFr=o("xlm-roberta"),MFr=o(" \u2014 "),$H=a("a"),EFr=o("TFXLMRobertaForMaskedLM"),CFr=o(" (XLM-RoBERTa model)"),wFr=l(),F(gM.$$.fragment),Oje=l(),tc=a("h2"),hM=a("a"),MFe=a("span"),F(DL.$$.fragment),AFr=l(),EFe=a("span"),yFr=o("TFAutoModelForSeq2SeqLM"),Vje=l(),rr=a("div"),F(GL.$$.fragment),LFr=l(),ac=a("p"),xFr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),kH=a("a"),$Fr=o("from_pretrained()"),kFr=o(" class method or the "),SH=a("a"),SFr=o("from_config()"),RFr=o(` class
method.`),PFr=l(),OL=a("p"),BFr=o("This class cannot be instantiated directly using "),CFe=a("code"),IFr=o("__init__()"),NFr=o(" (throws an error)."),qFr=l(),St=a("div"),F(VL.$$.fragment),jFr=l(),wFe=a("p"),DFr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),GFr=l(),nc=a("p"),OFr=o(`Note:
Loading a model from its configuration file does `),AFe=a("strong"),VFr=o("not"),XFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RH=a("a"),zFr=o("from_pretrained()"),WFr=o(" to load the model weights."),QFr=l(),F(pM.$$.fragment),HFr=l(),$r=a("div"),F(XL.$$.fragment),UFr=l(),yFe=a("p"),JFr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),YFr=l(),an=a("p"),KFr=o("The model class to instantiate is selected based on the "),LFe=a("code"),ZFr=o("model_type"),e6r=o(` property of the config object (either
passed as an argument or loaded from `),xFe=a("code"),o6r=o("pretrained_model_name_or_path"),r6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$Fe=a("code"),t6r=o("pretrained_model_name_or_path"),a6r=o(":"),n6r=l(),ye=a("ul"),_M=a("li"),kFe=a("strong"),s6r=o("bart"),l6r=o(" \u2014 "),PH=a("a"),i6r=o("TFBartForConditionalGeneration"),d6r=o(" (BART model)"),c6r=l(),uM=a("li"),SFe=a("strong"),f6r=o("blenderbot"),m6r=o(" \u2014 "),BH=a("a"),g6r=o("TFBlenderbotForConditionalGeneration"),h6r=o(" (Blenderbot model)"),p6r=l(),bM=a("li"),RFe=a("strong"),_6r=o("blenderbot-small"),u6r=o(" \u2014 "),IH=a("a"),b6r=o("TFBlenderbotSmallForConditionalGeneration"),v6r=o(" (BlenderbotSmall model)"),F6r=l(),vM=a("li"),PFe=a("strong"),T6r=o("encoder-decoder"),M6r=o(" \u2014 "),NH=a("a"),E6r=o("TFEncoderDecoderModel"),C6r=o(" (Encoder decoder model)"),w6r=l(),FM=a("li"),BFe=a("strong"),A6r=o("led"),y6r=o(" \u2014 "),qH=a("a"),L6r=o("TFLEDForConditionalGeneration"),x6r=o(" (LED model)"),$6r=l(),TM=a("li"),IFe=a("strong"),k6r=o("marian"),S6r=o(" \u2014 "),jH=a("a"),R6r=o("TFMarianMTModel"),P6r=o(" (Marian model)"),B6r=l(),MM=a("li"),NFe=a("strong"),I6r=o("mbart"),N6r=o(" \u2014 "),DH=a("a"),q6r=o("TFMBartForConditionalGeneration"),j6r=o(" (mBART model)"),D6r=l(),EM=a("li"),qFe=a("strong"),G6r=o("mt5"),O6r=o(" \u2014 "),GH=a("a"),V6r=o("TFMT5ForConditionalGeneration"),X6r=o(" (mT5 model)"),z6r=l(),CM=a("li"),jFe=a("strong"),W6r=o("pegasus"),Q6r=o(" \u2014 "),OH=a("a"),H6r=o("TFPegasusForConditionalGeneration"),U6r=o(" (Pegasus model)"),J6r=l(),wM=a("li"),DFe=a("strong"),Y6r=o("t5"),K6r=o(" \u2014 "),VH=a("a"),Z6r=o("TFT5ForConditionalGeneration"),eTr=o(" (T5 model)"),oTr=l(),F(AM.$$.fragment),Xje=l(),sc=a("h2"),yM=a("a"),GFe=a("span"),F(zL.$$.fragment),rTr=l(),OFe=a("span"),tTr=o("TFAutoModelForSequenceClassification"),zje=l(),tr=a("div"),F(WL.$$.fragment),aTr=l(),lc=a("p"),nTr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),XH=a("a"),sTr=o("from_pretrained()"),lTr=o(" class method or the "),zH=a("a"),iTr=o("from_config()"),dTr=o(` class
method.`),cTr=l(),QL=a("p"),fTr=o("This class cannot be instantiated directly using "),VFe=a("code"),mTr=o("__init__()"),gTr=o(" (throws an error)."),hTr=l(),Rt=a("div"),F(HL.$$.fragment),pTr=l(),XFe=a("p"),_Tr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),uTr=l(),ic=a("p"),bTr=o(`Note:
Loading a model from its configuration file does `),zFe=a("strong"),vTr=o("not"),FTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WH=a("a"),TTr=o("from_pretrained()"),MTr=o(" to load the model weights."),ETr=l(),F(LM.$$.fragment),CTr=l(),kr=a("div"),F(UL.$$.fragment),wTr=l(),WFe=a("p"),ATr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),yTr=l(),nn=a("p"),LTr=o("The model class to instantiate is selected based on the "),QFe=a("code"),xTr=o("model_type"),$Tr=o(` property of the config object (either
passed as an argument or loaded from `),HFe=a("code"),kTr=o("pretrained_model_name_or_path"),STr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),UFe=a("code"),RTr=o("pretrained_model_name_or_path"),PTr=o(":"),BTr=l(),oe=a("ul"),xM=a("li"),JFe=a("strong"),ITr=o("albert"),NTr=o(" \u2014 "),QH=a("a"),qTr=o("TFAlbertForSequenceClassification"),jTr=o(" (ALBERT model)"),DTr=l(),$M=a("li"),YFe=a("strong"),GTr=o("bert"),OTr=o(" \u2014 "),HH=a("a"),VTr=o("TFBertForSequenceClassification"),XTr=o(" (BERT model)"),zTr=l(),kM=a("li"),KFe=a("strong"),WTr=o("camembert"),QTr=o(" \u2014 "),UH=a("a"),HTr=o("TFCamembertForSequenceClassification"),UTr=o(" (CamemBERT model)"),JTr=l(),SM=a("li"),ZFe=a("strong"),YTr=o("convbert"),KTr=o(" \u2014 "),JH=a("a"),ZTr=o("TFConvBertForSequenceClassification"),e7r=o(" (ConvBERT model)"),o7r=l(),RM=a("li"),e6e=a("strong"),r7r=o("ctrl"),t7r=o(" \u2014 "),YH=a("a"),a7r=o("TFCTRLForSequenceClassification"),n7r=o(" (CTRL model)"),s7r=l(),PM=a("li"),o6e=a("strong"),l7r=o("deberta"),i7r=o(" \u2014 "),KH=a("a"),d7r=o("TFDebertaForSequenceClassification"),c7r=o(" (DeBERTa model)"),f7r=l(),BM=a("li"),r6e=a("strong"),m7r=o("deberta-v2"),g7r=o(" \u2014 "),ZH=a("a"),h7r=o("TFDebertaV2ForSequenceClassification"),p7r=o(" (DeBERTa-v2 model)"),_7r=l(),IM=a("li"),t6e=a("strong"),u7r=o("distilbert"),b7r=o(" \u2014 "),eU=a("a"),v7r=o("TFDistilBertForSequenceClassification"),F7r=o(" (DistilBERT model)"),T7r=l(),NM=a("li"),a6e=a("strong"),M7r=o("electra"),E7r=o(" \u2014 "),oU=a("a"),C7r=o("TFElectraForSequenceClassification"),w7r=o(" (ELECTRA model)"),A7r=l(),qM=a("li"),n6e=a("strong"),y7r=o("flaubert"),L7r=o(" \u2014 "),rU=a("a"),x7r=o("TFFlaubertForSequenceClassification"),$7r=o(" (FlauBERT model)"),k7r=l(),jM=a("li"),s6e=a("strong"),S7r=o("funnel"),R7r=o(" \u2014 "),tU=a("a"),P7r=o("TFFunnelForSequenceClassification"),B7r=o(" (Funnel Transformer model)"),I7r=l(),DM=a("li"),l6e=a("strong"),N7r=o("gpt2"),q7r=o(" \u2014 "),aU=a("a"),j7r=o("TFGPT2ForSequenceClassification"),D7r=o(" (OpenAI GPT-2 model)"),G7r=l(),GM=a("li"),i6e=a("strong"),O7r=o("gptj"),V7r=o(" \u2014 "),nU=a("a"),X7r=o("TFGPTJForSequenceClassification"),z7r=o(" (GPT-J model)"),W7r=l(),OM=a("li"),d6e=a("strong"),Q7r=o("layoutlm"),H7r=o(" \u2014 "),sU=a("a"),U7r=o("TFLayoutLMForSequenceClassification"),J7r=o(" (LayoutLM model)"),Y7r=l(),VM=a("li"),c6e=a("strong"),K7r=o("longformer"),Z7r=o(" \u2014 "),lU=a("a"),e9r=o("TFLongformerForSequenceClassification"),o9r=o(" (Longformer model)"),r9r=l(),XM=a("li"),f6e=a("strong"),t9r=o("mobilebert"),a9r=o(" \u2014 "),iU=a("a"),n9r=o("TFMobileBertForSequenceClassification"),s9r=o(" (MobileBERT model)"),l9r=l(),zM=a("li"),m6e=a("strong"),i9r=o("mpnet"),d9r=o(" \u2014 "),dU=a("a"),c9r=o("TFMPNetForSequenceClassification"),f9r=o(" (MPNet model)"),m9r=l(),WM=a("li"),g6e=a("strong"),g9r=o("openai-gpt"),h9r=o(" \u2014 "),cU=a("a"),p9r=o("TFOpenAIGPTForSequenceClassification"),_9r=o(" (OpenAI GPT model)"),u9r=l(),QM=a("li"),h6e=a("strong"),b9r=o("rembert"),v9r=o(" \u2014 "),fU=a("a"),F9r=o("TFRemBertForSequenceClassification"),T9r=o(" (RemBERT model)"),M9r=l(),HM=a("li"),p6e=a("strong"),E9r=o("roberta"),C9r=o(" \u2014 "),mU=a("a"),w9r=o("TFRobertaForSequenceClassification"),A9r=o(" (RoBERTa model)"),y9r=l(),UM=a("li"),_6e=a("strong"),L9r=o("roformer"),x9r=o(" \u2014 "),gU=a("a"),$9r=o("TFRoFormerForSequenceClassification"),k9r=o(" (RoFormer model)"),S9r=l(),JM=a("li"),u6e=a("strong"),R9r=o("tapas"),P9r=o(" \u2014 "),hU=a("a"),B9r=o("TFTapasForSequenceClassification"),I9r=o(" (TAPAS model)"),N9r=l(),YM=a("li"),b6e=a("strong"),q9r=o("transfo-xl"),j9r=o(" \u2014 "),pU=a("a"),D9r=o("TFTransfoXLForSequenceClassification"),G9r=o(" (Transformer-XL model)"),O9r=l(),KM=a("li"),v6e=a("strong"),V9r=o("xlm"),X9r=o(" \u2014 "),_U=a("a"),z9r=o("TFXLMForSequenceClassification"),W9r=o(" (XLM model)"),Q9r=l(),ZM=a("li"),F6e=a("strong"),H9r=o("xlm-roberta"),U9r=o(" \u2014 "),uU=a("a"),J9r=o("TFXLMRobertaForSequenceClassification"),Y9r=o(" (XLM-RoBERTa model)"),K9r=l(),e4=a("li"),T6e=a("strong"),Z9r=o("xlnet"),eMr=o(" \u2014 "),bU=a("a"),oMr=o("TFXLNetForSequenceClassification"),rMr=o(" (XLNet model)"),tMr=l(),F(o4.$$.fragment),Wje=l(),dc=a("h2"),r4=a("a"),M6e=a("span"),F(JL.$$.fragment),aMr=l(),E6e=a("span"),nMr=o("TFAutoModelForMultipleChoice"),Qje=l(),ar=a("div"),F(YL.$$.fragment),sMr=l(),cc=a("p"),lMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),vU=a("a"),iMr=o("from_pretrained()"),dMr=o(" class method or the "),FU=a("a"),cMr=o("from_config()"),fMr=o(` class
method.`),mMr=l(),KL=a("p"),gMr=o("This class cannot be instantiated directly using "),C6e=a("code"),hMr=o("__init__()"),pMr=o(" (throws an error)."),_Mr=l(),Pt=a("div"),F(ZL.$$.fragment),uMr=l(),w6e=a("p"),bMr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),vMr=l(),fc=a("p"),FMr=o(`Note:
Loading a model from its configuration file does `),A6e=a("strong"),TMr=o("not"),MMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TU=a("a"),EMr=o("from_pretrained()"),CMr=o(" to load the model weights."),wMr=l(),F(t4.$$.fragment),AMr=l(),Sr=a("div"),F(e8.$$.fragment),yMr=l(),y6e=a("p"),LMr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),xMr=l(),sn=a("p"),$Mr=o("The model class to instantiate is selected based on the "),L6e=a("code"),kMr=o("model_type"),SMr=o(` property of the config object (either
passed as an argument or loaded from `),x6e=a("code"),RMr=o("pretrained_model_name_or_path"),PMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$6e=a("code"),BMr=o("pretrained_model_name_or_path"),IMr=o(":"),NMr=l(),_e=a("ul"),a4=a("li"),k6e=a("strong"),qMr=o("albert"),jMr=o(" \u2014 "),MU=a("a"),DMr=o("TFAlbertForMultipleChoice"),GMr=o(" (ALBERT model)"),OMr=l(),n4=a("li"),S6e=a("strong"),VMr=o("bert"),XMr=o(" \u2014 "),EU=a("a"),zMr=o("TFBertForMultipleChoice"),WMr=o(" (BERT model)"),QMr=l(),s4=a("li"),R6e=a("strong"),HMr=o("camembert"),UMr=o(" \u2014 "),CU=a("a"),JMr=o("TFCamembertForMultipleChoice"),YMr=o(" (CamemBERT model)"),KMr=l(),l4=a("li"),P6e=a("strong"),ZMr=o("convbert"),e4r=o(" \u2014 "),wU=a("a"),o4r=o("TFConvBertForMultipleChoice"),r4r=o(" (ConvBERT model)"),t4r=l(),i4=a("li"),B6e=a("strong"),a4r=o("distilbert"),n4r=o(" \u2014 "),AU=a("a"),s4r=o("TFDistilBertForMultipleChoice"),l4r=o(" (DistilBERT model)"),i4r=l(),d4=a("li"),I6e=a("strong"),d4r=o("electra"),c4r=o(" \u2014 "),yU=a("a"),f4r=o("TFElectraForMultipleChoice"),m4r=o(" (ELECTRA model)"),g4r=l(),c4=a("li"),N6e=a("strong"),h4r=o("flaubert"),p4r=o(" \u2014 "),LU=a("a"),_4r=o("TFFlaubertForMultipleChoice"),u4r=o(" (FlauBERT model)"),b4r=l(),f4=a("li"),q6e=a("strong"),v4r=o("funnel"),F4r=o(" \u2014 "),xU=a("a"),T4r=o("TFFunnelForMultipleChoice"),M4r=o(" (Funnel Transformer model)"),E4r=l(),m4=a("li"),j6e=a("strong"),C4r=o("longformer"),w4r=o(" \u2014 "),$U=a("a"),A4r=o("TFLongformerForMultipleChoice"),y4r=o(" (Longformer model)"),L4r=l(),g4=a("li"),D6e=a("strong"),x4r=o("mobilebert"),$4r=o(" \u2014 "),kU=a("a"),k4r=o("TFMobileBertForMultipleChoice"),S4r=o(" (MobileBERT model)"),R4r=l(),h4=a("li"),G6e=a("strong"),P4r=o("mpnet"),B4r=o(" \u2014 "),SU=a("a"),I4r=o("TFMPNetForMultipleChoice"),N4r=o(" (MPNet model)"),q4r=l(),p4=a("li"),O6e=a("strong"),j4r=o("rembert"),D4r=o(" \u2014 "),RU=a("a"),G4r=o("TFRemBertForMultipleChoice"),O4r=o(" (RemBERT model)"),V4r=l(),_4=a("li"),V6e=a("strong"),X4r=o("roberta"),z4r=o(" \u2014 "),PU=a("a"),W4r=o("TFRobertaForMultipleChoice"),Q4r=o(" (RoBERTa model)"),H4r=l(),u4=a("li"),X6e=a("strong"),U4r=o("roformer"),J4r=o(" \u2014 "),BU=a("a"),Y4r=o("TFRoFormerForMultipleChoice"),K4r=o(" (RoFormer model)"),Z4r=l(),b4=a("li"),z6e=a("strong"),eEr=o("xlm"),oEr=o(" \u2014 "),IU=a("a"),rEr=o("TFXLMForMultipleChoice"),tEr=o(" (XLM model)"),aEr=l(),v4=a("li"),W6e=a("strong"),nEr=o("xlm-roberta"),sEr=o(" \u2014 "),NU=a("a"),lEr=o("TFXLMRobertaForMultipleChoice"),iEr=o(" (XLM-RoBERTa model)"),dEr=l(),F4=a("li"),Q6e=a("strong"),cEr=o("xlnet"),fEr=o(" \u2014 "),qU=a("a"),mEr=o("TFXLNetForMultipleChoice"),gEr=o(" (XLNet model)"),hEr=l(),F(T4.$$.fragment),Hje=l(),mc=a("h2"),M4=a("a"),H6e=a("span"),F(o8.$$.fragment),pEr=l(),U6e=a("span"),_Er=o("TFAutoModelForNextSentencePrediction"),Uje=l(),nr=a("div"),F(r8.$$.fragment),uEr=l(),gc=a("p"),bEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),jU=a("a"),vEr=o("from_pretrained()"),FEr=o(" class method or the "),DU=a("a"),TEr=o("from_config()"),MEr=o(` class
method.`),EEr=l(),t8=a("p"),CEr=o("This class cannot be instantiated directly using "),J6e=a("code"),wEr=o("__init__()"),AEr=o(" (throws an error)."),yEr=l(),Bt=a("div"),F(a8.$$.fragment),LEr=l(),Y6e=a("p"),xEr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),$Er=l(),hc=a("p"),kEr=o(`Note:
Loading a model from its configuration file does `),K6e=a("strong"),SEr=o("not"),REr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GU=a("a"),PEr=o("from_pretrained()"),BEr=o(" to load the model weights."),IEr=l(),F(E4.$$.fragment),NEr=l(),Rr=a("div"),F(n8.$$.fragment),qEr=l(),Z6e=a("p"),jEr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),DEr=l(),ln=a("p"),GEr=o("The model class to instantiate is selected based on the "),eTe=a("code"),OEr=o("model_type"),VEr=o(` property of the config object (either
passed as an argument or loaded from `),oTe=a("code"),XEr=o("pretrained_model_name_or_path"),zEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rTe=a("code"),WEr=o("pretrained_model_name_or_path"),QEr=o(":"),HEr=l(),s8=a("ul"),C4=a("li"),tTe=a("strong"),UEr=o("bert"),JEr=o(" \u2014 "),OU=a("a"),YEr=o("TFBertForNextSentencePrediction"),KEr=o(" (BERT model)"),ZEr=l(),w4=a("li"),aTe=a("strong"),eCr=o("mobilebert"),oCr=o(" \u2014 "),VU=a("a"),rCr=o("TFMobileBertForNextSentencePrediction"),tCr=o(" (MobileBERT model)"),aCr=l(),F(A4.$$.fragment),Jje=l(),pc=a("h2"),y4=a("a"),nTe=a("span"),F(l8.$$.fragment),nCr=l(),sTe=a("span"),sCr=o("TFAutoModelForTableQuestionAnswering"),Yje=l(),sr=a("div"),F(i8.$$.fragment),lCr=l(),_c=a("p"),iCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),XU=a("a"),dCr=o("from_pretrained()"),cCr=o(" class method or the "),zU=a("a"),fCr=o("from_config()"),mCr=o(` class
method.`),gCr=l(),d8=a("p"),hCr=o("This class cannot be instantiated directly using "),lTe=a("code"),pCr=o("__init__()"),_Cr=o(" (throws an error)."),uCr=l(),It=a("div"),F(c8.$$.fragment),bCr=l(),iTe=a("p"),vCr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),FCr=l(),uc=a("p"),TCr=o(`Note:
Loading a model from its configuration file does `),dTe=a("strong"),MCr=o("not"),ECr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WU=a("a"),CCr=o("from_pretrained()"),wCr=o(" to load the model weights."),ACr=l(),F(L4.$$.fragment),yCr=l(),Pr=a("div"),F(f8.$$.fragment),LCr=l(),cTe=a("p"),xCr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),$Cr=l(),dn=a("p"),kCr=o("The model class to instantiate is selected based on the "),fTe=a("code"),SCr=o("model_type"),RCr=o(` property of the config object (either
passed as an argument or loaded from `),mTe=a("code"),PCr=o("pretrained_model_name_or_path"),BCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gTe=a("code"),ICr=o("pretrained_model_name_or_path"),NCr=o(":"),qCr=l(),hTe=a("ul"),x4=a("li"),pTe=a("strong"),jCr=o("tapas"),DCr=o(" \u2014 "),QU=a("a"),GCr=o("TFTapasForQuestionAnswering"),OCr=o(" (TAPAS model)"),VCr=l(),F($4.$$.fragment),Kje=l(),bc=a("h2"),k4=a("a"),_Te=a("span"),F(m8.$$.fragment),XCr=l(),uTe=a("span"),zCr=o("TFAutoModelForTokenClassification"),Zje=l(),lr=a("div"),F(g8.$$.fragment),WCr=l(),vc=a("p"),QCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),HU=a("a"),HCr=o("from_pretrained()"),UCr=o(" class method or the "),UU=a("a"),JCr=o("from_config()"),YCr=o(` class
method.`),KCr=l(),h8=a("p"),ZCr=o("This class cannot be instantiated directly using "),bTe=a("code"),e5r=o("__init__()"),o5r=o(" (throws an error)."),r5r=l(),Nt=a("div"),F(p8.$$.fragment),t5r=l(),vTe=a("p"),a5r=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),n5r=l(),Fc=a("p"),s5r=o(`Note:
Loading a model from its configuration file does `),FTe=a("strong"),l5r=o("not"),i5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JU=a("a"),d5r=o("from_pretrained()"),c5r=o(" to load the model weights."),f5r=l(),F(S4.$$.fragment),m5r=l(),Br=a("div"),F(_8.$$.fragment),g5r=l(),TTe=a("p"),h5r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),p5r=l(),cn=a("p"),_5r=o("The model class to instantiate is selected based on the "),MTe=a("code"),u5r=o("model_type"),b5r=o(` property of the config object (either
passed as an argument or loaded from `),ETe=a("code"),v5r=o("pretrained_model_name_or_path"),F5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),CTe=a("code"),T5r=o("pretrained_model_name_or_path"),M5r=o(":"),E5r=l(),de=a("ul"),R4=a("li"),wTe=a("strong"),C5r=o("albert"),w5r=o(" \u2014 "),YU=a("a"),A5r=o("TFAlbertForTokenClassification"),y5r=o(" (ALBERT model)"),L5r=l(),P4=a("li"),ATe=a("strong"),x5r=o("bert"),$5r=o(" \u2014 "),KU=a("a"),k5r=o("TFBertForTokenClassification"),S5r=o(" (BERT model)"),R5r=l(),B4=a("li"),yTe=a("strong"),P5r=o("camembert"),B5r=o(" \u2014 "),ZU=a("a"),I5r=o("TFCamembertForTokenClassification"),N5r=o(" (CamemBERT model)"),q5r=l(),I4=a("li"),LTe=a("strong"),j5r=o("convbert"),D5r=o(" \u2014 "),eJ=a("a"),G5r=o("TFConvBertForTokenClassification"),O5r=o(" (ConvBERT model)"),V5r=l(),N4=a("li"),xTe=a("strong"),X5r=o("deberta"),z5r=o(" \u2014 "),oJ=a("a"),W5r=o("TFDebertaForTokenClassification"),Q5r=o(" (DeBERTa model)"),H5r=l(),q4=a("li"),$Te=a("strong"),U5r=o("deberta-v2"),J5r=o(" \u2014 "),rJ=a("a"),Y5r=o("TFDebertaV2ForTokenClassification"),K5r=o(" (DeBERTa-v2 model)"),Z5r=l(),j4=a("li"),kTe=a("strong"),e3r=o("distilbert"),o3r=o(" \u2014 "),tJ=a("a"),r3r=o("TFDistilBertForTokenClassification"),t3r=o(" (DistilBERT model)"),a3r=l(),D4=a("li"),STe=a("strong"),n3r=o("electra"),s3r=o(" \u2014 "),aJ=a("a"),l3r=o("TFElectraForTokenClassification"),i3r=o(" (ELECTRA model)"),d3r=l(),G4=a("li"),RTe=a("strong"),c3r=o("flaubert"),f3r=o(" \u2014 "),nJ=a("a"),m3r=o("TFFlaubertForTokenClassification"),g3r=o(" (FlauBERT model)"),h3r=l(),O4=a("li"),PTe=a("strong"),p3r=o("funnel"),_3r=o(" \u2014 "),sJ=a("a"),u3r=o("TFFunnelForTokenClassification"),b3r=o(" (Funnel Transformer model)"),v3r=l(),V4=a("li"),BTe=a("strong"),F3r=o("layoutlm"),T3r=o(" \u2014 "),lJ=a("a"),M3r=o("TFLayoutLMForTokenClassification"),E3r=o(" (LayoutLM model)"),C3r=l(),X4=a("li"),ITe=a("strong"),w3r=o("longformer"),A3r=o(" \u2014 "),iJ=a("a"),y3r=o("TFLongformerForTokenClassification"),L3r=o(" (Longformer model)"),x3r=l(),z4=a("li"),NTe=a("strong"),$3r=o("mobilebert"),k3r=o(" \u2014 "),dJ=a("a"),S3r=o("TFMobileBertForTokenClassification"),R3r=o(" (MobileBERT model)"),P3r=l(),W4=a("li"),qTe=a("strong"),B3r=o("mpnet"),I3r=o(" \u2014 "),cJ=a("a"),N3r=o("TFMPNetForTokenClassification"),q3r=o(" (MPNet model)"),j3r=l(),Q4=a("li"),jTe=a("strong"),D3r=o("rembert"),G3r=o(" \u2014 "),fJ=a("a"),O3r=o("TFRemBertForTokenClassification"),V3r=o(" (RemBERT model)"),X3r=l(),H4=a("li"),DTe=a("strong"),z3r=o("roberta"),W3r=o(" \u2014 "),mJ=a("a"),Q3r=o("TFRobertaForTokenClassification"),H3r=o(" (RoBERTa model)"),U3r=l(),U4=a("li"),GTe=a("strong"),J3r=o("roformer"),Y3r=o(" \u2014 "),gJ=a("a"),K3r=o("TFRoFormerForTokenClassification"),Z3r=o(" (RoFormer model)"),ewr=l(),J4=a("li"),OTe=a("strong"),owr=o("xlm"),rwr=o(" \u2014 "),hJ=a("a"),twr=o("TFXLMForTokenClassification"),awr=o(" (XLM model)"),nwr=l(),Y4=a("li"),VTe=a("strong"),swr=o("xlm-roberta"),lwr=o(" \u2014 "),pJ=a("a"),iwr=o("TFXLMRobertaForTokenClassification"),dwr=o(" (XLM-RoBERTa model)"),cwr=l(),K4=a("li"),XTe=a("strong"),fwr=o("xlnet"),mwr=o(" \u2014 "),_J=a("a"),gwr=o("TFXLNetForTokenClassification"),hwr=o(" (XLNet model)"),pwr=l(),F(Z4.$$.fragment),eDe=l(),Tc=a("h2"),eE=a("a"),zTe=a("span"),F(u8.$$.fragment),_wr=l(),WTe=a("span"),uwr=o("TFAutoModelForQuestionAnswering"),oDe=l(),ir=a("div"),F(b8.$$.fragment),bwr=l(),Mc=a("p"),vwr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),uJ=a("a"),Fwr=o("from_pretrained()"),Twr=o(" class method or the "),bJ=a("a"),Mwr=o("from_config()"),Ewr=o(` class
method.`),Cwr=l(),v8=a("p"),wwr=o("This class cannot be instantiated directly using "),QTe=a("code"),Awr=o("__init__()"),ywr=o(" (throws an error)."),Lwr=l(),qt=a("div"),F(F8.$$.fragment),xwr=l(),HTe=a("p"),$wr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),kwr=l(),Ec=a("p"),Swr=o(`Note:
Loading a model from its configuration file does `),UTe=a("strong"),Rwr=o("not"),Pwr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vJ=a("a"),Bwr=o("from_pretrained()"),Iwr=o(" to load the model weights."),Nwr=l(),F(oE.$$.fragment),qwr=l(),Ir=a("div"),F(T8.$$.fragment),jwr=l(),JTe=a("p"),Dwr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Gwr=l(),fn=a("p"),Owr=o("The model class to instantiate is selected based on the "),YTe=a("code"),Vwr=o("model_type"),Xwr=o(` property of the config object (either
passed as an argument or loaded from `),KTe=a("code"),zwr=o("pretrained_model_name_or_path"),Wwr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ZTe=a("code"),Qwr=o("pretrained_model_name_or_path"),Hwr=o(":"),Uwr=l(),ce=a("ul"),rE=a("li"),e7e=a("strong"),Jwr=o("albert"),Ywr=o(" \u2014 "),FJ=a("a"),Kwr=o("TFAlbertForQuestionAnswering"),Zwr=o(" (ALBERT model)"),e0r=l(),tE=a("li"),o7e=a("strong"),o0r=o("bert"),r0r=o(" \u2014 "),TJ=a("a"),t0r=o("TFBertForQuestionAnswering"),a0r=o(" (BERT model)"),n0r=l(),aE=a("li"),r7e=a("strong"),s0r=o("camembert"),l0r=o(" \u2014 "),MJ=a("a"),i0r=o("TFCamembertForQuestionAnswering"),d0r=o(" (CamemBERT model)"),c0r=l(),nE=a("li"),t7e=a("strong"),f0r=o("convbert"),m0r=o(" \u2014 "),EJ=a("a"),g0r=o("TFConvBertForQuestionAnswering"),h0r=o(" (ConvBERT model)"),p0r=l(),sE=a("li"),a7e=a("strong"),_0r=o("deberta"),u0r=o(" \u2014 "),CJ=a("a"),b0r=o("TFDebertaForQuestionAnswering"),v0r=o(" (DeBERTa model)"),F0r=l(),lE=a("li"),n7e=a("strong"),T0r=o("deberta-v2"),M0r=o(" \u2014 "),wJ=a("a"),E0r=o("TFDebertaV2ForQuestionAnswering"),C0r=o(" (DeBERTa-v2 model)"),w0r=l(),iE=a("li"),s7e=a("strong"),A0r=o("distilbert"),y0r=o(" \u2014 "),AJ=a("a"),L0r=o("TFDistilBertForQuestionAnswering"),x0r=o(" (DistilBERT model)"),$0r=l(),dE=a("li"),l7e=a("strong"),k0r=o("electra"),S0r=o(" \u2014 "),yJ=a("a"),R0r=o("TFElectraForQuestionAnswering"),P0r=o(" (ELECTRA model)"),B0r=l(),cE=a("li"),i7e=a("strong"),I0r=o("flaubert"),N0r=o(" \u2014 "),LJ=a("a"),q0r=o("TFFlaubertForQuestionAnsweringSimple"),j0r=o(" (FlauBERT model)"),D0r=l(),fE=a("li"),d7e=a("strong"),G0r=o("funnel"),O0r=o(" \u2014 "),xJ=a("a"),V0r=o("TFFunnelForQuestionAnswering"),X0r=o(" (Funnel Transformer model)"),z0r=l(),mE=a("li"),c7e=a("strong"),W0r=o("gptj"),Q0r=o(" \u2014 "),$J=a("a"),H0r=o("TFGPTJForQuestionAnswering"),U0r=o(" (GPT-J model)"),J0r=l(),gE=a("li"),f7e=a("strong"),Y0r=o("longformer"),K0r=o(" \u2014 "),kJ=a("a"),Z0r=o("TFLongformerForQuestionAnswering"),eAr=o(" (Longformer model)"),oAr=l(),hE=a("li"),m7e=a("strong"),rAr=o("mobilebert"),tAr=o(" \u2014 "),SJ=a("a"),aAr=o("TFMobileBertForQuestionAnswering"),nAr=o(" (MobileBERT model)"),sAr=l(),pE=a("li"),g7e=a("strong"),lAr=o("mpnet"),iAr=o(" \u2014 "),RJ=a("a"),dAr=o("TFMPNetForQuestionAnswering"),cAr=o(" (MPNet model)"),fAr=l(),_E=a("li"),h7e=a("strong"),mAr=o("rembert"),gAr=o(" \u2014 "),PJ=a("a"),hAr=o("TFRemBertForQuestionAnswering"),pAr=o(" (RemBERT model)"),_Ar=l(),uE=a("li"),p7e=a("strong"),uAr=o("roberta"),bAr=o(" \u2014 "),BJ=a("a"),vAr=o("TFRobertaForQuestionAnswering"),FAr=o(" (RoBERTa model)"),TAr=l(),bE=a("li"),_7e=a("strong"),MAr=o("roformer"),EAr=o(" \u2014 "),IJ=a("a"),CAr=o("TFRoFormerForQuestionAnswering"),wAr=o(" (RoFormer model)"),AAr=l(),vE=a("li"),u7e=a("strong"),yAr=o("xlm"),LAr=o(" \u2014 "),NJ=a("a"),xAr=o("TFXLMForQuestionAnsweringSimple"),$Ar=o(" (XLM model)"),kAr=l(),FE=a("li"),b7e=a("strong"),SAr=o("xlm-roberta"),RAr=o(" \u2014 "),qJ=a("a"),PAr=o("TFXLMRobertaForQuestionAnswering"),BAr=o(" (XLM-RoBERTa model)"),IAr=l(),TE=a("li"),v7e=a("strong"),NAr=o("xlnet"),qAr=o(" \u2014 "),jJ=a("a"),jAr=o("TFXLNetForQuestionAnsweringSimple"),DAr=o(" (XLNet model)"),GAr=l(),F(ME.$$.fragment),rDe=l(),Cc=a("h2"),EE=a("a"),F7e=a("span"),F(M8.$$.fragment),OAr=l(),T7e=a("span"),VAr=o("TFAutoModelForVision2Seq"),tDe=l(),dr=a("div"),F(E8.$$.fragment),XAr=l(),wc=a("p"),zAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),DJ=a("a"),WAr=o("from_pretrained()"),QAr=o(" class method or the "),GJ=a("a"),HAr=o("from_config()"),UAr=o(` class
method.`),JAr=l(),C8=a("p"),YAr=o("This class cannot be instantiated directly using "),M7e=a("code"),KAr=o("__init__()"),ZAr=o(" (throws an error)."),eyr=l(),jt=a("div"),F(w8.$$.fragment),oyr=l(),E7e=a("p"),ryr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),tyr=l(),Ac=a("p"),ayr=o(`Note:
Loading a model from its configuration file does `),C7e=a("strong"),nyr=o("not"),syr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OJ=a("a"),lyr=o("from_pretrained()"),iyr=o(" to load the model weights."),dyr=l(),F(CE.$$.fragment),cyr=l(),Nr=a("div"),F(A8.$$.fragment),fyr=l(),w7e=a("p"),myr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),gyr=l(),mn=a("p"),hyr=o("The model class to instantiate is selected based on the "),A7e=a("code"),pyr=o("model_type"),_yr=o(` property of the config object (either
passed as an argument or loaded from `),y7e=a("code"),uyr=o("pretrained_model_name_or_path"),byr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L7e=a("code"),vyr=o("pretrained_model_name_or_path"),Fyr=o(":"),Tyr=l(),x7e=a("ul"),wE=a("li"),$7e=a("strong"),Myr=o("vision-encoder-decoder"),Eyr=o(" \u2014 "),VJ=a("a"),Cyr=o("TFVisionEncoderDecoderModel"),wyr=o(" (Vision Encoder decoder model)"),Ayr=l(),F(AE.$$.fragment),aDe=l(),yc=a("h2"),yE=a("a"),k7e=a("span"),F(y8.$$.fragment),yyr=l(),S7e=a("span"),Lyr=o("TFAutoModelForSpeechSeq2Seq"),nDe=l(),cr=a("div"),F(L8.$$.fragment),xyr=l(),Lc=a("p"),$yr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),XJ=a("a"),kyr=o("from_pretrained()"),Syr=o(" class method or the "),zJ=a("a"),Ryr=o("from_config()"),Pyr=o(` class
method.`),Byr=l(),x8=a("p"),Iyr=o("This class cannot be instantiated directly using "),R7e=a("code"),Nyr=o("__init__()"),qyr=o(" (throws an error)."),jyr=l(),Dt=a("div"),F($8.$$.fragment),Dyr=l(),P7e=a("p"),Gyr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Oyr=l(),xc=a("p"),Vyr=o(`Note:
Loading a model from its configuration file does `),B7e=a("strong"),Xyr=o("not"),zyr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WJ=a("a"),Wyr=o("from_pretrained()"),Qyr=o(" to load the model weights."),Hyr=l(),F(LE.$$.fragment),Uyr=l(),qr=a("div"),F(k8.$$.fragment),Jyr=l(),I7e=a("p"),Yyr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Kyr=l(),gn=a("p"),Zyr=o("The model class to instantiate is selected based on the "),N7e=a("code"),eLr=o("model_type"),oLr=o(` property of the config object (either
passed as an argument or loaded from `),q7e=a("code"),rLr=o("pretrained_model_name_or_path"),tLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j7e=a("code"),aLr=o("pretrained_model_name_or_path"),nLr=o(":"),sLr=l(),D7e=a("ul"),xE=a("li"),G7e=a("strong"),lLr=o("speech_to_text"),iLr=o(" \u2014 "),QJ=a("a"),dLr=o("TFSpeech2TextForConditionalGeneration"),cLr=o(" (Speech2Text model)"),fLr=l(),F($E.$$.fragment),sDe=l(),$c=a("h2"),kE=a("a"),O7e=a("span"),F(S8.$$.fragment),mLr=l(),V7e=a("span"),gLr=o("FlaxAutoModel"),lDe=l(),fr=a("div"),F(R8.$$.fragment),hLr=l(),kc=a("p"),pLr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),HJ=a("a"),_Lr=o("from_pretrained()"),uLr=o(" class method or the "),UJ=a("a"),bLr=o("from_config()"),vLr=o(` class
method.`),FLr=l(),P8=a("p"),TLr=o("This class cannot be instantiated directly using "),X7e=a("code"),MLr=o("__init__()"),ELr=o(" (throws an error)."),CLr=l(),Gt=a("div"),F(B8.$$.fragment),wLr=l(),z7e=a("p"),ALr=o("Instantiates one of the base model classes of the library from a configuration."),yLr=l(),Sc=a("p"),LLr=o(`Note:
Loading a model from its configuration file does `),W7e=a("strong"),xLr=o("not"),$Lr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JJ=a("a"),kLr=o("from_pretrained()"),SLr=o(" to load the model weights."),RLr=l(),F(SE.$$.fragment),PLr=l(),jr=a("div"),F(I8.$$.fragment),BLr=l(),Q7e=a("p"),ILr=o("Instantiate one of the base model classes of the library from a pretrained model."),NLr=l(),hn=a("p"),qLr=o("The model class to instantiate is selected based on the "),H7e=a("code"),jLr=o("model_type"),DLr=o(` property of the config object (either
passed as an argument or loaded from `),U7e=a("code"),GLr=o("pretrained_model_name_or_path"),OLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J7e=a("code"),VLr=o("pretrained_model_name_or_path"),XLr=o(":"),zLr=l(),re=a("ul"),RE=a("li"),Y7e=a("strong"),WLr=o("albert"),QLr=o(" \u2014 "),YJ=a("a"),HLr=o("FlaxAlbertModel"),ULr=o(" (ALBERT model)"),JLr=l(),PE=a("li"),K7e=a("strong"),YLr=o("bart"),KLr=o(" \u2014 "),KJ=a("a"),ZLr=o("FlaxBartModel"),e8r=o(" (BART model)"),o8r=l(),BE=a("li"),Z7e=a("strong"),r8r=o("beit"),t8r=o(" \u2014 "),ZJ=a("a"),a8r=o("FlaxBeitModel"),n8r=o(" (BEiT model)"),s8r=l(),IE=a("li"),e9e=a("strong"),l8r=o("bert"),i8r=o(" \u2014 "),eY=a("a"),d8r=o("FlaxBertModel"),c8r=o(" (BERT model)"),f8r=l(),NE=a("li"),o9e=a("strong"),m8r=o("big_bird"),g8r=o(" \u2014 "),oY=a("a"),h8r=o("FlaxBigBirdModel"),p8r=o(" (BigBird model)"),_8r=l(),qE=a("li"),r9e=a("strong"),u8r=o("blenderbot"),b8r=o(" \u2014 "),rY=a("a"),v8r=o("FlaxBlenderbotModel"),F8r=o(" (Blenderbot model)"),T8r=l(),jE=a("li"),t9e=a("strong"),M8r=o("blenderbot-small"),E8r=o(" \u2014 "),tY=a("a"),C8r=o("FlaxBlenderbotSmallModel"),w8r=o(" (BlenderbotSmall model)"),A8r=l(),DE=a("li"),a9e=a("strong"),y8r=o("clip"),L8r=o(" \u2014 "),aY=a("a"),x8r=o("FlaxCLIPModel"),$8r=o(" (CLIP model)"),k8r=l(),GE=a("li"),n9e=a("strong"),S8r=o("distilbert"),R8r=o(" \u2014 "),nY=a("a"),P8r=o("FlaxDistilBertModel"),B8r=o(" (DistilBERT model)"),I8r=l(),OE=a("li"),s9e=a("strong"),N8r=o("electra"),q8r=o(" \u2014 "),sY=a("a"),j8r=o("FlaxElectraModel"),D8r=o(" (ELECTRA model)"),G8r=l(),VE=a("li"),l9e=a("strong"),O8r=o("gpt2"),V8r=o(" \u2014 "),lY=a("a"),X8r=o("FlaxGPT2Model"),z8r=o(" (OpenAI GPT-2 model)"),W8r=l(),XE=a("li"),i9e=a("strong"),Q8r=o("gpt_neo"),H8r=o(" \u2014 "),iY=a("a"),U8r=o("FlaxGPTNeoModel"),J8r=o(" (GPT Neo model)"),Y8r=l(),zE=a("li"),d9e=a("strong"),K8r=o("gptj"),Z8r=o(" \u2014 "),dY=a("a"),exr=o("FlaxGPTJModel"),oxr=o(" (GPT-J model)"),rxr=l(),WE=a("li"),c9e=a("strong"),txr=o("longt5"),axr=o(" \u2014 "),cY=a("a"),nxr=o("FlaxLongT5Model"),sxr=o(" (LongT5 model)"),lxr=l(),QE=a("li"),f9e=a("strong"),ixr=o("marian"),dxr=o(" \u2014 "),fY=a("a"),cxr=o("FlaxMarianModel"),fxr=o(" (Marian model)"),mxr=l(),HE=a("li"),m9e=a("strong"),gxr=o("mbart"),hxr=o(" \u2014 "),mY=a("a"),pxr=o("FlaxMBartModel"),_xr=o(" (mBART model)"),uxr=l(),UE=a("li"),g9e=a("strong"),bxr=o("mt5"),vxr=o(" \u2014 "),gY=a("a"),Fxr=o("FlaxMT5Model"),Txr=o(" (mT5 model)"),Mxr=l(),JE=a("li"),h9e=a("strong"),Exr=o("pegasus"),Cxr=o(" \u2014 "),hY=a("a"),wxr=o("FlaxPegasusModel"),Axr=o(" (Pegasus model)"),yxr=l(),YE=a("li"),p9e=a("strong"),Lxr=o("roberta"),xxr=o(" \u2014 "),pY=a("a"),$xr=o("FlaxRobertaModel"),kxr=o(" (RoBERTa model)"),Sxr=l(),KE=a("li"),_9e=a("strong"),Rxr=o("roformer"),Pxr=o(" \u2014 "),_Y=a("a"),Bxr=o("FlaxRoFormerModel"),Ixr=o(" (RoFormer model)"),Nxr=l(),ZE=a("li"),u9e=a("strong"),qxr=o("t5"),jxr=o(" \u2014 "),uY=a("a"),Dxr=o("FlaxT5Model"),Gxr=o(" (T5 model)"),Oxr=l(),eC=a("li"),b9e=a("strong"),Vxr=o("vision-text-dual-encoder"),Xxr=o(" \u2014 "),bY=a("a"),zxr=o("FlaxVisionTextDualEncoderModel"),Wxr=o(" (VisionTextDualEncoder model)"),Qxr=l(),oC=a("li"),v9e=a("strong"),Hxr=o("vit"),Uxr=o(" \u2014 "),vY=a("a"),Jxr=o("FlaxViTModel"),Yxr=o(" (ViT model)"),Kxr=l(),rC=a("li"),F9e=a("strong"),Zxr=o("wav2vec2"),e$r=o(" \u2014 "),FY=a("a"),o$r=o("FlaxWav2Vec2Model"),r$r=o(" (Wav2Vec2 model)"),t$r=l(),tC=a("li"),T9e=a("strong"),a$r=o("xglm"),n$r=o(" \u2014 "),TY=a("a"),s$r=o("FlaxXGLMModel"),l$r=o(" (XGLM model)"),i$r=l(),aC=a("li"),M9e=a("strong"),d$r=o("xlm-roberta"),c$r=o(" \u2014 "),MY=a("a"),f$r=o("FlaxXLMRobertaModel"),m$r=o(" (XLM-RoBERTa model)"),g$r=l(),F(nC.$$.fragment),iDe=l(),Rc=a("h2"),sC=a("a"),E9e=a("span"),F(N8.$$.fragment),h$r=l(),C9e=a("span"),p$r=o("FlaxAutoModelForCausalLM"),dDe=l(),mr=a("div"),F(q8.$$.fragment),_$r=l(),Pc=a("p"),u$r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),EY=a("a"),b$r=o("from_pretrained()"),v$r=o(" class method or the "),CY=a("a"),F$r=o("from_config()"),T$r=o(` class
method.`),M$r=l(),j8=a("p"),E$r=o("This class cannot be instantiated directly using "),w9e=a("code"),C$r=o("__init__()"),w$r=o(" (throws an error)."),A$r=l(),Ot=a("div"),F(D8.$$.fragment),y$r=l(),A9e=a("p"),L$r=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),x$r=l(),Bc=a("p"),$$r=o(`Note:
Loading a model from its configuration file does `),y9e=a("strong"),k$r=o("not"),S$r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wY=a("a"),R$r=o("from_pretrained()"),P$r=o(" to load the model weights."),B$r=l(),F(lC.$$.fragment),I$r=l(),Dr=a("div"),F(G8.$$.fragment),N$r=l(),L9e=a("p"),q$r=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),j$r=l(),pn=a("p"),D$r=o("The model class to instantiate is selected based on the "),x9e=a("code"),G$r=o("model_type"),O$r=o(` property of the config object (either
passed as an argument or loaded from `),$9e=a("code"),V$r=o("pretrained_model_name_or_path"),X$r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k9e=a("code"),z$r=o("pretrained_model_name_or_path"),W$r=o(":"),Q$r=l(),Pe=a("ul"),iC=a("li"),S9e=a("strong"),H$r=o("bart"),U$r=o(" \u2014 "),AY=a("a"),J$r=o("FlaxBartForCausalLM"),Y$r=o(" (BART model)"),K$r=l(),dC=a("li"),R9e=a("strong"),Z$r=o("bert"),ekr=o(" \u2014 "),yY=a("a"),okr=o("FlaxBertForCausalLM"),rkr=o(" (BERT model)"),tkr=l(),cC=a("li"),P9e=a("strong"),akr=o("big_bird"),nkr=o(" \u2014 "),LY=a("a"),skr=o("FlaxBigBirdForCausalLM"),lkr=o(" (BigBird model)"),ikr=l(),fC=a("li"),B9e=a("strong"),dkr=o("electra"),ckr=o(" \u2014 "),xY=a("a"),fkr=o("FlaxElectraForCausalLM"),mkr=o(" (ELECTRA model)"),gkr=l(),mC=a("li"),I9e=a("strong"),hkr=o("gpt2"),pkr=o(" \u2014 "),$Y=a("a"),_kr=o("FlaxGPT2LMHeadModel"),ukr=o(" (OpenAI GPT-2 model)"),bkr=l(),gC=a("li"),N9e=a("strong"),vkr=o("gpt_neo"),Fkr=o(" \u2014 "),kY=a("a"),Tkr=o("FlaxGPTNeoForCausalLM"),Mkr=o(" (GPT Neo model)"),Ekr=l(),hC=a("li"),q9e=a("strong"),Ckr=o("gptj"),wkr=o(" \u2014 "),SY=a("a"),Akr=o("FlaxGPTJForCausalLM"),ykr=o(" (GPT-J model)"),Lkr=l(),pC=a("li"),j9e=a("strong"),xkr=o("roberta"),$kr=o(" \u2014 "),RY=a("a"),kkr=o("FlaxRobertaForCausalLM"),Skr=o(" (RoBERTa model)"),Rkr=l(),_C=a("li"),D9e=a("strong"),Pkr=o("xglm"),Bkr=o(" \u2014 "),PY=a("a"),Ikr=o("FlaxXGLMForCausalLM"),Nkr=o(" (XGLM model)"),qkr=l(),F(uC.$$.fragment),cDe=l(),Ic=a("h2"),bC=a("a"),G9e=a("span"),F(O8.$$.fragment),jkr=l(),O9e=a("span"),Dkr=o("FlaxAutoModelForPreTraining"),fDe=l(),gr=a("div"),F(V8.$$.fragment),Gkr=l(),Nc=a("p"),Okr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),BY=a("a"),Vkr=o("from_pretrained()"),Xkr=o(" class method or the "),IY=a("a"),zkr=o("from_config()"),Wkr=o(` class
method.`),Qkr=l(),X8=a("p"),Hkr=o("This class cannot be instantiated directly using "),V9e=a("code"),Ukr=o("__init__()"),Jkr=o(" (throws an error)."),Ykr=l(),Vt=a("div"),F(z8.$$.fragment),Kkr=l(),X9e=a("p"),Zkr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),eSr=l(),qc=a("p"),oSr=o(`Note:
Loading a model from its configuration file does `),z9e=a("strong"),rSr=o("not"),tSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NY=a("a"),aSr=o("from_pretrained()"),nSr=o(" to load the model weights."),sSr=l(),F(vC.$$.fragment),lSr=l(),Gr=a("div"),F(W8.$$.fragment),iSr=l(),W9e=a("p"),dSr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),cSr=l(),_n=a("p"),fSr=o("The model class to instantiate is selected based on the "),Q9e=a("code"),mSr=o("model_type"),gSr=o(` property of the config object (either
passed as an argument or loaded from `),H9e=a("code"),hSr=o("pretrained_model_name_or_path"),pSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U9e=a("code"),_Sr=o("pretrained_model_name_or_path"),uSr=o(":"),bSr=l(),Te=a("ul"),FC=a("li"),J9e=a("strong"),vSr=o("albert"),FSr=o(" \u2014 "),qY=a("a"),TSr=o("FlaxAlbertForPreTraining"),MSr=o(" (ALBERT model)"),ESr=l(),TC=a("li"),Y9e=a("strong"),CSr=o("bart"),wSr=o(" \u2014 "),jY=a("a"),ASr=o("FlaxBartForConditionalGeneration"),ySr=o(" (BART model)"),LSr=l(),MC=a("li"),K9e=a("strong"),xSr=o("bert"),$Sr=o(" \u2014 "),DY=a("a"),kSr=o("FlaxBertForPreTraining"),SSr=o(" (BERT model)"),RSr=l(),EC=a("li"),Z9e=a("strong"),PSr=o("big_bird"),BSr=o(" \u2014 "),GY=a("a"),ISr=o("FlaxBigBirdForPreTraining"),NSr=o(" (BigBird model)"),qSr=l(),CC=a("li"),eMe=a("strong"),jSr=o("electra"),DSr=o(" \u2014 "),OY=a("a"),GSr=o("FlaxElectraForPreTraining"),OSr=o(" (ELECTRA model)"),VSr=l(),wC=a("li"),oMe=a("strong"),XSr=o("longt5"),zSr=o(" \u2014 "),VY=a("a"),WSr=o("FlaxLongT5ForConditionalGeneration"),QSr=o(" (LongT5 model)"),HSr=l(),AC=a("li"),rMe=a("strong"),USr=o("mbart"),JSr=o(" \u2014 "),XY=a("a"),YSr=o("FlaxMBartForConditionalGeneration"),KSr=o(" (mBART model)"),ZSr=l(),yC=a("li"),tMe=a("strong"),eRr=o("mt5"),oRr=o(" \u2014 "),zY=a("a"),rRr=o("FlaxMT5ForConditionalGeneration"),tRr=o(" (mT5 model)"),aRr=l(),LC=a("li"),aMe=a("strong"),nRr=o("roberta"),sRr=o(" \u2014 "),WY=a("a"),lRr=o("FlaxRobertaForMaskedLM"),iRr=o(" (RoBERTa model)"),dRr=l(),xC=a("li"),nMe=a("strong"),cRr=o("roformer"),fRr=o(" \u2014 "),QY=a("a"),mRr=o("FlaxRoFormerForMaskedLM"),gRr=o(" (RoFormer model)"),hRr=l(),$C=a("li"),sMe=a("strong"),pRr=o("t5"),_Rr=o(" \u2014 "),HY=a("a"),uRr=o("FlaxT5ForConditionalGeneration"),bRr=o(" (T5 model)"),vRr=l(),kC=a("li"),lMe=a("strong"),FRr=o("wav2vec2"),TRr=o(" \u2014 "),UY=a("a"),MRr=o("FlaxWav2Vec2ForPreTraining"),ERr=o(" (Wav2Vec2 model)"),CRr=l(),SC=a("li"),iMe=a("strong"),wRr=o("xlm-roberta"),ARr=o(" \u2014 "),JY=a("a"),yRr=o("FlaxXLMRobertaForMaskedLM"),LRr=o(" (XLM-RoBERTa model)"),xRr=l(),F(RC.$$.fragment),mDe=l(),jc=a("h2"),PC=a("a"),dMe=a("span"),F(Q8.$$.fragment),$Rr=l(),cMe=a("span"),kRr=o("FlaxAutoModelForMaskedLM"),gDe=l(),hr=a("div"),F(H8.$$.fragment),SRr=l(),Dc=a("p"),RRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),YY=a("a"),PRr=o("from_pretrained()"),BRr=o(" class method or the "),KY=a("a"),IRr=o("from_config()"),NRr=o(` class
method.`),qRr=l(),U8=a("p"),jRr=o("This class cannot be instantiated directly using "),fMe=a("code"),DRr=o("__init__()"),GRr=o(" (throws an error)."),ORr=l(),Xt=a("div"),F(J8.$$.fragment),VRr=l(),mMe=a("p"),XRr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),zRr=l(),Gc=a("p"),WRr=o(`Note:
Loading a model from its configuration file does `),gMe=a("strong"),QRr=o("not"),HRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZY=a("a"),URr=o("from_pretrained()"),JRr=o(" to load the model weights."),YRr=l(),F(BC.$$.fragment),KRr=l(),Or=a("div"),F(Y8.$$.fragment),ZRr=l(),hMe=a("p"),ePr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),oPr=l(),un=a("p"),rPr=o("The model class to instantiate is selected based on the "),pMe=a("code"),tPr=o("model_type"),aPr=o(` property of the config object (either
passed as an argument or loaded from `),_Me=a("code"),nPr=o("pretrained_model_name_or_path"),sPr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uMe=a("code"),lPr=o("pretrained_model_name_or_path"),iPr=o(":"),dPr=l(),Le=a("ul"),IC=a("li"),bMe=a("strong"),cPr=o("albert"),fPr=o(" \u2014 "),eK=a("a"),mPr=o("FlaxAlbertForMaskedLM"),gPr=o(" (ALBERT model)"),hPr=l(),NC=a("li"),vMe=a("strong"),pPr=o("bart"),_Pr=o(" \u2014 "),oK=a("a"),uPr=o("FlaxBartForConditionalGeneration"),bPr=o(" (BART model)"),vPr=l(),qC=a("li"),FMe=a("strong"),FPr=o("bert"),TPr=o(" \u2014 "),rK=a("a"),MPr=o("FlaxBertForMaskedLM"),EPr=o(" (BERT model)"),CPr=l(),jC=a("li"),TMe=a("strong"),wPr=o("big_bird"),APr=o(" \u2014 "),tK=a("a"),yPr=o("FlaxBigBirdForMaskedLM"),LPr=o(" (BigBird model)"),xPr=l(),DC=a("li"),MMe=a("strong"),$Pr=o("distilbert"),kPr=o(" \u2014 "),aK=a("a"),SPr=o("FlaxDistilBertForMaskedLM"),RPr=o(" (DistilBERT model)"),PPr=l(),GC=a("li"),EMe=a("strong"),BPr=o("electra"),IPr=o(" \u2014 "),nK=a("a"),NPr=o("FlaxElectraForMaskedLM"),qPr=o(" (ELECTRA model)"),jPr=l(),OC=a("li"),CMe=a("strong"),DPr=o("mbart"),GPr=o(" \u2014 "),sK=a("a"),OPr=o("FlaxMBartForConditionalGeneration"),VPr=o(" (mBART model)"),XPr=l(),VC=a("li"),wMe=a("strong"),zPr=o("roberta"),WPr=o(" \u2014 "),lK=a("a"),QPr=o("FlaxRobertaForMaskedLM"),HPr=o(" (RoBERTa model)"),UPr=l(),XC=a("li"),AMe=a("strong"),JPr=o("roformer"),YPr=o(" \u2014 "),iK=a("a"),KPr=o("FlaxRoFormerForMaskedLM"),ZPr=o(" (RoFormer model)"),eBr=l(),zC=a("li"),yMe=a("strong"),oBr=o("xlm-roberta"),rBr=o(" \u2014 "),dK=a("a"),tBr=o("FlaxXLMRobertaForMaskedLM"),aBr=o(" (XLM-RoBERTa model)"),nBr=l(),F(WC.$$.fragment),hDe=l(),Oc=a("h2"),QC=a("a"),LMe=a("span"),F(K8.$$.fragment),sBr=l(),xMe=a("span"),lBr=o("FlaxAutoModelForSeq2SeqLM"),pDe=l(),pr=a("div"),F(Z8.$$.fragment),iBr=l(),Vc=a("p"),dBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),cK=a("a"),cBr=o("from_pretrained()"),fBr=o(" class method or the "),fK=a("a"),mBr=o("from_config()"),gBr=o(` class
method.`),hBr=l(),ex=a("p"),pBr=o("This class cannot be instantiated directly using "),$Me=a("code"),_Br=o("__init__()"),uBr=o(" (throws an error)."),bBr=l(),zt=a("div"),F(ox.$$.fragment),vBr=l(),kMe=a("p"),FBr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),TBr=l(),Xc=a("p"),MBr=o(`Note:
Loading a model from its configuration file does `),SMe=a("strong"),EBr=o("not"),CBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mK=a("a"),wBr=o("from_pretrained()"),ABr=o(" to load the model weights."),yBr=l(),F(HC.$$.fragment),LBr=l(),Vr=a("div"),F(rx.$$.fragment),xBr=l(),RMe=a("p"),$Br=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),kBr=l(),bn=a("p"),SBr=o("The model class to instantiate is selected based on the "),PMe=a("code"),RBr=o("model_type"),PBr=o(` property of the config object (either
passed as an argument or loaded from `),BMe=a("code"),BBr=o("pretrained_model_name_or_path"),IBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),IMe=a("code"),NBr=o("pretrained_model_name_or_path"),qBr=o(":"),jBr=l(),xe=a("ul"),UC=a("li"),NMe=a("strong"),DBr=o("bart"),GBr=o(" \u2014 "),gK=a("a"),OBr=o("FlaxBartForConditionalGeneration"),VBr=o(" (BART model)"),XBr=l(),JC=a("li"),qMe=a("strong"),zBr=o("blenderbot"),WBr=o(" \u2014 "),hK=a("a"),QBr=o("FlaxBlenderbotForConditionalGeneration"),HBr=o(" (Blenderbot model)"),UBr=l(),YC=a("li"),jMe=a("strong"),JBr=o("blenderbot-small"),YBr=o(" \u2014 "),pK=a("a"),KBr=o("FlaxBlenderbotSmallForConditionalGeneration"),ZBr=o(" (BlenderbotSmall model)"),eIr=l(),KC=a("li"),DMe=a("strong"),oIr=o("encoder-decoder"),rIr=o(" \u2014 "),_K=a("a"),tIr=o("FlaxEncoderDecoderModel"),aIr=o(" (Encoder decoder model)"),nIr=l(),ZC=a("li"),GMe=a("strong"),sIr=o("longt5"),lIr=o(" \u2014 "),uK=a("a"),iIr=o("FlaxLongT5ForConditionalGeneration"),dIr=o(" (LongT5 model)"),cIr=l(),e5=a("li"),OMe=a("strong"),fIr=o("marian"),mIr=o(" \u2014 "),bK=a("a"),gIr=o("FlaxMarianMTModel"),hIr=o(" (Marian model)"),pIr=l(),o5=a("li"),VMe=a("strong"),_Ir=o("mbart"),uIr=o(" \u2014 "),vK=a("a"),bIr=o("FlaxMBartForConditionalGeneration"),vIr=o(" (mBART model)"),FIr=l(),r5=a("li"),XMe=a("strong"),TIr=o("mt5"),MIr=o(" \u2014 "),FK=a("a"),EIr=o("FlaxMT5ForConditionalGeneration"),CIr=o(" (mT5 model)"),wIr=l(),t5=a("li"),zMe=a("strong"),AIr=o("pegasus"),yIr=o(" \u2014 "),TK=a("a"),LIr=o("FlaxPegasusForConditionalGeneration"),xIr=o(" (Pegasus model)"),$Ir=l(),a5=a("li"),WMe=a("strong"),kIr=o("t5"),SIr=o(" \u2014 "),MK=a("a"),RIr=o("FlaxT5ForConditionalGeneration"),PIr=o(" (T5 model)"),BIr=l(),F(n5.$$.fragment),_De=l(),zc=a("h2"),s5=a("a"),QMe=a("span"),F(tx.$$.fragment),IIr=l(),HMe=a("span"),NIr=o("FlaxAutoModelForSequenceClassification"),uDe=l(),_r=a("div"),F(ax.$$.fragment),qIr=l(),Wc=a("p"),jIr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),EK=a("a"),DIr=o("from_pretrained()"),GIr=o(" class method or the "),CK=a("a"),OIr=o("from_config()"),VIr=o(` class
method.`),XIr=l(),nx=a("p"),zIr=o("This class cannot be instantiated directly using "),UMe=a("code"),WIr=o("__init__()"),QIr=o(" (throws an error)."),HIr=l(),Wt=a("div"),F(sx.$$.fragment),UIr=l(),JMe=a("p"),JIr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),YIr=l(),Qc=a("p"),KIr=o(`Note:
Loading a model from its configuration file does `),YMe=a("strong"),ZIr=o("not"),eNr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wK=a("a"),oNr=o("from_pretrained()"),rNr=o(" to load the model weights."),tNr=l(),F(l5.$$.fragment),aNr=l(),Xr=a("div"),F(lx.$$.fragment),nNr=l(),KMe=a("p"),sNr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),lNr=l(),vn=a("p"),iNr=o("The model class to instantiate is selected based on the "),ZMe=a("code"),dNr=o("model_type"),cNr=o(` property of the config object (either
passed as an argument or loaded from `),e4e=a("code"),fNr=o("pretrained_model_name_or_path"),mNr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o4e=a("code"),gNr=o("pretrained_model_name_or_path"),hNr=o(":"),pNr=l(),$e=a("ul"),i5=a("li"),r4e=a("strong"),_Nr=o("albert"),uNr=o(" \u2014 "),AK=a("a"),bNr=o("FlaxAlbertForSequenceClassification"),vNr=o(" (ALBERT model)"),FNr=l(),d5=a("li"),t4e=a("strong"),TNr=o("bart"),MNr=o(" \u2014 "),yK=a("a"),ENr=o("FlaxBartForSequenceClassification"),CNr=o(" (BART model)"),wNr=l(),c5=a("li"),a4e=a("strong"),ANr=o("bert"),yNr=o(" \u2014 "),LK=a("a"),LNr=o("FlaxBertForSequenceClassification"),xNr=o(" (BERT model)"),$Nr=l(),f5=a("li"),n4e=a("strong"),kNr=o("big_bird"),SNr=o(" \u2014 "),xK=a("a"),RNr=o("FlaxBigBirdForSequenceClassification"),PNr=o(" (BigBird model)"),BNr=l(),m5=a("li"),s4e=a("strong"),INr=o("distilbert"),NNr=o(" \u2014 "),$K=a("a"),qNr=o("FlaxDistilBertForSequenceClassification"),jNr=o(" (DistilBERT model)"),DNr=l(),g5=a("li"),l4e=a("strong"),GNr=o("electra"),ONr=o(" \u2014 "),kK=a("a"),VNr=o("FlaxElectraForSequenceClassification"),XNr=o(" (ELECTRA model)"),zNr=l(),h5=a("li"),i4e=a("strong"),WNr=o("mbart"),QNr=o(" \u2014 "),SK=a("a"),HNr=o("FlaxMBartForSequenceClassification"),UNr=o(" (mBART model)"),JNr=l(),p5=a("li"),d4e=a("strong"),YNr=o("roberta"),KNr=o(" \u2014 "),RK=a("a"),ZNr=o("FlaxRobertaForSequenceClassification"),eqr=o(" (RoBERTa model)"),oqr=l(),_5=a("li"),c4e=a("strong"),rqr=o("roformer"),tqr=o(" \u2014 "),PK=a("a"),aqr=o("FlaxRoFormerForSequenceClassification"),nqr=o(" (RoFormer model)"),sqr=l(),u5=a("li"),f4e=a("strong"),lqr=o("xlm-roberta"),iqr=o(" \u2014 "),BK=a("a"),dqr=o("FlaxXLMRobertaForSequenceClassification"),cqr=o(" (XLM-RoBERTa model)"),fqr=l(),F(b5.$$.fragment),bDe=l(),Hc=a("h2"),v5=a("a"),m4e=a("span"),F(ix.$$.fragment),mqr=l(),g4e=a("span"),gqr=o("FlaxAutoModelForQuestionAnswering"),vDe=l(),ur=a("div"),F(dx.$$.fragment),hqr=l(),Uc=a("p"),pqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),IK=a("a"),_qr=o("from_pretrained()"),uqr=o(" class method or the "),NK=a("a"),bqr=o("from_config()"),vqr=o(` class
method.`),Fqr=l(),cx=a("p"),Tqr=o("This class cannot be instantiated directly using "),h4e=a("code"),Mqr=o("__init__()"),Eqr=o(" (throws an error)."),Cqr=l(),Qt=a("div"),F(fx.$$.fragment),wqr=l(),p4e=a("p"),Aqr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),yqr=l(),Jc=a("p"),Lqr=o(`Note:
Loading a model from its configuration file does `),_4e=a("strong"),xqr=o("not"),$qr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qK=a("a"),kqr=o("from_pretrained()"),Sqr=o(" to load the model weights."),Rqr=l(),F(F5.$$.fragment),Pqr=l(),zr=a("div"),F(mx.$$.fragment),Bqr=l(),u4e=a("p"),Iqr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Nqr=l(),Fn=a("p"),qqr=o("The model class to instantiate is selected based on the "),b4e=a("code"),jqr=o("model_type"),Dqr=o(` property of the config object (either
passed as an argument or loaded from `),v4e=a("code"),Gqr=o("pretrained_model_name_or_path"),Oqr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F4e=a("code"),Vqr=o("pretrained_model_name_or_path"),Xqr=o(":"),zqr=l(),ke=a("ul"),T5=a("li"),T4e=a("strong"),Wqr=o("albert"),Qqr=o(" \u2014 "),jK=a("a"),Hqr=o("FlaxAlbertForQuestionAnswering"),Uqr=o(" (ALBERT model)"),Jqr=l(),M5=a("li"),M4e=a("strong"),Yqr=o("bart"),Kqr=o(" \u2014 "),DK=a("a"),Zqr=o("FlaxBartForQuestionAnswering"),ejr=o(" (BART model)"),ojr=l(),E5=a("li"),E4e=a("strong"),rjr=o("bert"),tjr=o(" \u2014 "),GK=a("a"),ajr=o("FlaxBertForQuestionAnswering"),njr=o(" (BERT model)"),sjr=l(),C5=a("li"),C4e=a("strong"),ljr=o("big_bird"),ijr=o(" \u2014 "),OK=a("a"),djr=o("FlaxBigBirdForQuestionAnswering"),cjr=o(" (BigBird model)"),fjr=l(),w5=a("li"),w4e=a("strong"),mjr=o("distilbert"),gjr=o(" \u2014 "),VK=a("a"),hjr=o("FlaxDistilBertForQuestionAnswering"),pjr=o(" (DistilBERT model)"),_jr=l(),A5=a("li"),A4e=a("strong"),ujr=o("electra"),bjr=o(" \u2014 "),XK=a("a"),vjr=o("FlaxElectraForQuestionAnswering"),Fjr=o(" (ELECTRA model)"),Tjr=l(),y5=a("li"),y4e=a("strong"),Mjr=o("mbart"),Ejr=o(" \u2014 "),zK=a("a"),Cjr=o("FlaxMBartForQuestionAnswering"),wjr=o(" (mBART model)"),Ajr=l(),L5=a("li"),L4e=a("strong"),yjr=o("roberta"),Ljr=o(" \u2014 "),WK=a("a"),xjr=o("FlaxRobertaForQuestionAnswering"),$jr=o(" (RoBERTa model)"),kjr=l(),x5=a("li"),x4e=a("strong"),Sjr=o("roformer"),Rjr=o(" \u2014 "),QK=a("a"),Pjr=o("FlaxRoFormerForQuestionAnswering"),Bjr=o(" (RoFormer model)"),Ijr=l(),$5=a("li"),$4e=a("strong"),Njr=o("xlm-roberta"),qjr=o(" \u2014 "),HK=a("a"),jjr=o("FlaxXLMRobertaForQuestionAnswering"),Djr=o(" (XLM-RoBERTa model)"),Gjr=l(),F(k5.$$.fragment),FDe=l(),Yc=a("h2"),S5=a("a"),k4e=a("span"),F(gx.$$.fragment),Ojr=l(),S4e=a("span"),Vjr=o("FlaxAutoModelForTokenClassification"),TDe=l(),br=a("div"),F(hx.$$.fragment),Xjr=l(),Kc=a("p"),zjr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),UK=a("a"),Wjr=o("from_pretrained()"),Qjr=o(" class method or the "),JK=a("a"),Hjr=o("from_config()"),Ujr=o(` class
method.`),Jjr=l(),px=a("p"),Yjr=o("This class cannot be instantiated directly using "),R4e=a("code"),Kjr=o("__init__()"),Zjr=o(" (throws an error)."),eDr=l(),Ht=a("div"),F(_x.$$.fragment),oDr=l(),P4e=a("p"),rDr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),tDr=l(),Zc=a("p"),aDr=o(`Note:
Loading a model from its configuration file does `),B4e=a("strong"),nDr=o("not"),sDr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YK=a("a"),lDr=o("from_pretrained()"),iDr=o(" to load the model weights."),dDr=l(),F(R5.$$.fragment),cDr=l(),Wr=a("div"),F(ux.$$.fragment),fDr=l(),I4e=a("p"),mDr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),gDr=l(),Tn=a("p"),hDr=o("The model class to instantiate is selected based on the "),N4e=a("code"),pDr=o("model_type"),_Dr=o(` property of the config object (either
passed as an argument or loaded from `),q4e=a("code"),uDr=o("pretrained_model_name_or_path"),bDr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j4e=a("code"),vDr=o("pretrained_model_name_or_path"),FDr=o(":"),TDr=l(),Ge=a("ul"),P5=a("li"),D4e=a("strong"),MDr=o("albert"),EDr=o(" \u2014 "),KK=a("a"),CDr=o("FlaxAlbertForTokenClassification"),wDr=o(" (ALBERT model)"),ADr=l(),B5=a("li"),G4e=a("strong"),yDr=o("bert"),LDr=o(" \u2014 "),ZK=a("a"),xDr=o("FlaxBertForTokenClassification"),$Dr=o(" (BERT model)"),kDr=l(),I5=a("li"),O4e=a("strong"),SDr=o("big_bird"),RDr=o(" \u2014 "),eZ=a("a"),PDr=o("FlaxBigBirdForTokenClassification"),BDr=o(" (BigBird model)"),IDr=l(),N5=a("li"),V4e=a("strong"),NDr=o("distilbert"),qDr=o(" \u2014 "),oZ=a("a"),jDr=o("FlaxDistilBertForTokenClassification"),DDr=o(" (DistilBERT model)"),GDr=l(),q5=a("li"),X4e=a("strong"),ODr=o("electra"),VDr=o(" \u2014 "),rZ=a("a"),XDr=o("FlaxElectraForTokenClassification"),zDr=o(" (ELECTRA model)"),WDr=l(),j5=a("li"),z4e=a("strong"),QDr=o("roberta"),HDr=o(" \u2014 "),tZ=a("a"),UDr=o("FlaxRobertaForTokenClassification"),JDr=o(" (RoBERTa model)"),YDr=l(),D5=a("li"),W4e=a("strong"),KDr=o("roformer"),ZDr=o(" \u2014 "),aZ=a("a"),eGr=o("FlaxRoFormerForTokenClassification"),oGr=o(" (RoFormer model)"),rGr=l(),G5=a("li"),Q4e=a("strong"),tGr=o("xlm-roberta"),aGr=o(" \u2014 "),nZ=a("a"),nGr=o("FlaxXLMRobertaForTokenClassification"),sGr=o(" (XLM-RoBERTa model)"),lGr=l(),F(O5.$$.fragment),MDe=l(),ef=a("h2"),V5=a("a"),H4e=a("span"),F(bx.$$.fragment),iGr=l(),U4e=a("span"),dGr=o("FlaxAutoModelForMultipleChoice"),EDe=l(),vr=a("div"),F(vx.$$.fragment),cGr=l(),of=a("p"),fGr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),sZ=a("a"),mGr=o("from_pretrained()"),gGr=o(" class method or the "),lZ=a("a"),hGr=o("from_config()"),pGr=o(` class
method.`),_Gr=l(),Fx=a("p"),uGr=o("This class cannot be instantiated directly using "),J4e=a("code"),bGr=o("__init__()"),vGr=o(" (throws an error)."),FGr=l(),Ut=a("div"),F(Tx.$$.fragment),TGr=l(),Y4e=a("p"),MGr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),EGr=l(),rf=a("p"),CGr=o(`Note:
Loading a model from its configuration file does `),K4e=a("strong"),wGr=o("not"),AGr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iZ=a("a"),yGr=o("from_pretrained()"),LGr=o(" to load the model weights."),xGr=l(),F(X5.$$.fragment),$Gr=l(),Qr=a("div"),F(Mx.$$.fragment),kGr=l(),Z4e=a("p"),SGr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),RGr=l(),Mn=a("p"),PGr=o("The model class to instantiate is selected based on the "),eEe=a("code"),BGr=o("model_type"),IGr=o(` property of the config object (either
passed as an argument or loaded from `),oEe=a("code"),NGr=o("pretrained_model_name_or_path"),qGr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rEe=a("code"),jGr=o("pretrained_model_name_or_path"),DGr=o(":"),GGr=l(),Oe=a("ul"),z5=a("li"),tEe=a("strong"),OGr=o("albert"),VGr=o(" \u2014 "),dZ=a("a"),XGr=o("FlaxAlbertForMultipleChoice"),zGr=o(" (ALBERT model)"),WGr=l(),W5=a("li"),aEe=a("strong"),QGr=o("bert"),HGr=o(" \u2014 "),cZ=a("a"),UGr=o("FlaxBertForMultipleChoice"),JGr=o(" (BERT model)"),YGr=l(),Q5=a("li"),nEe=a("strong"),KGr=o("big_bird"),ZGr=o(" \u2014 "),fZ=a("a"),eOr=o("FlaxBigBirdForMultipleChoice"),oOr=o(" (BigBird model)"),rOr=l(),H5=a("li"),sEe=a("strong"),tOr=o("distilbert"),aOr=o(" \u2014 "),mZ=a("a"),nOr=o("FlaxDistilBertForMultipleChoice"),sOr=o(" (DistilBERT model)"),lOr=l(),U5=a("li"),lEe=a("strong"),iOr=o("electra"),dOr=o(" \u2014 "),gZ=a("a"),cOr=o("FlaxElectraForMultipleChoice"),fOr=o(" (ELECTRA model)"),mOr=l(),J5=a("li"),iEe=a("strong"),gOr=o("roberta"),hOr=o(" \u2014 "),hZ=a("a"),pOr=o("FlaxRobertaForMultipleChoice"),_Or=o(" (RoBERTa model)"),uOr=l(),Y5=a("li"),dEe=a("strong"),bOr=o("roformer"),vOr=o(" \u2014 "),pZ=a("a"),FOr=o("FlaxRoFormerForMultipleChoice"),TOr=o(" (RoFormer model)"),MOr=l(),K5=a("li"),cEe=a("strong"),EOr=o("xlm-roberta"),COr=o(" \u2014 "),_Z=a("a"),wOr=o("FlaxXLMRobertaForMultipleChoice"),AOr=o(" (XLM-RoBERTa model)"),yOr=l(),F(Z5.$$.fragment),CDe=l(),tf=a("h2"),e3=a("a"),fEe=a("span"),F(Ex.$$.fragment),LOr=l(),mEe=a("span"),xOr=o("FlaxAutoModelForNextSentencePrediction"),wDe=l(),Fr=a("div"),F(Cx.$$.fragment),$Or=l(),af=a("p"),kOr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),uZ=a("a"),SOr=o("from_pretrained()"),ROr=o(" class method or the "),bZ=a("a"),POr=o("from_config()"),BOr=o(` class
method.`),IOr=l(),wx=a("p"),NOr=o("This class cannot be instantiated directly using "),gEe=a("code"),qOr=o("__init__()"),jOr=o(" (throws an error)."),DOr=l(),Jt=a("div"),F(Ax.$$.fragment),GOr=l(),hEe=a("p"),OOr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),VOr=l(),nf=a("p"),XOr=o(`Note:
Loading a model from its configuration file does `),pEe=a("strong"),zOr=o("not"),WOr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vZ=a("a"),QOr=o("from_pretrained()"),HOr=o(" to load the model weights."),UOr=l(),F(o3.$$.fragment),JOr=l(),Hr=a("div"),F(yx.$$.fragment),YOr=l(),_Ee=a("p"),KOr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),ZOr=l(),En=a("p"),eVr=o("The model class to instantiate is selected based on the "),uEe=a("code"),oVr=o("model_type"),rVr=o(` property of the config object (either
passed as an argument or loaded from `),bEe=a("code"),tVr=o("pretrained_model_name_or_path"),aVr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vEe=a("code"),nVr=o("pretrained_model_name_or_path"),sVr=o(":"),lVr=l(),FEe=a("ul"),r3=a("li"),TEe=a("strong"),iVr=o("bert"),dVr=o(" \u2014 "),FZ=a("a"),cVr=o("FlaxBertForNextSentencePrediction"),fVr=o(" (BERT model)"),mVr=l(),F(t3.$$.fragment),ADe=l(),sf=a("h2"),a3=a("a"),MEe=a("span"),F(Lx.$$.fragment),gVr=l(),EEe=a("span"),hVr=o("FlaxAutoModelForImageClassification"),yDe=l(),Tr=a("div"),F(xx.$$.fragment),pVr=l(),lf=a("p"),_Vr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),TZ=a("a"),uVr=o("from_pretrained()"),bVr=o(" class method or the "),MZ=a("a"),vVr=o("from_config()"),FVr=o(` class
method.`),TVr=l(),$x=a("p"),MVr=o("This class cannot be instantiated directly using "),CEe=a("code"),EVr=o("__init__()"),CVr=o(" (throws an error)."),wVr=l(),Yt=a("div"),F(kx.$$.fragment),AVr=l(),wEe=a("p"),yVr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),LVr=l(),df=a("p"),xVr=o(`Note:
Loading a model from its configuration file does `),AEe=a("strong"),$Vr=o("not"),kVr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EZ=a("a"),SVr=o("from_pretrained()"),RVr=o(" to load the model weights."),PVr=l(),F(n3.$$.fragment),BVr=l(),Ur=a("div"),F(Sx.$$.fragment),IVr=l(),yEe=a("p"),NVr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),qVr=l(),Cn=a("p"),jVr=o("The model class to instantiate is selected based on the "),LEe=a("code"),DVr=o("model_type"),GVr=o(` property of the config object (either
passed as an argument or loaded from `),xEe=a("code"),OVr=o("pretrained_model_name_or_path"),VVr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$Ee=a("code"),XVr=o("pretrained_model_name_or_path"),zVr=o(":"),WVr=l(),Rx=a("ul"),s3=a("li"),kEe=a("strong"),QVr=o("beit"),HVr=o(" \u2014 "),CZ=a("a"),UVr=o("FlaxBeitForImageClassification"),JVr=o(" (BEiT model)"),YVr=l(),l3=a("li"),SEe=a("strong"),KVr=o("vit"),ZVr=o(" \u2014 "),wZ=a("a"),eXr=o("FlaxViTForImageClassification"),oXr=o(" (ViT model)"),rXr=l(),F(i3.$$.fragment),LDe=l(),cf=a("h2"),d3=a("a"),REe=a("span"),F(Px.$$.fragment),tXr=l(),PEe=a("span"),aXr=o("FlaxAutoModelForVision2Seq"),xDe=l(),Mr=a("div"),F(Bx.$$.fragment),nXr=l(),ff=a("p"),sXr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),AZ=a("a"),lXr=o("from_pretrained()"),iXr=o(" class method or the "),yZ=a("a"),dXr=o("from_config()"),cXr=o(` class
method.`),fXr=l(),Ix=a("p"),mXr=o("This class cannot be instantiated directly using "),BEe=a("code"),gXr=o("__init__()"),hXr=o(" (throws an error)."),pXr=l(),Kt=a("div"),F(Nx.$$.fragment),_Xr=l(),IEe=a("p"),uXr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),bXr=l(),mf=a("p"),vXr=o(`Note:
Loading a model from its configuration file does `),NEe=a("strong"),FXr=o("not"),TXr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LZ=a("a"),MXr=o("from_pretrained()"),EXr=o(" to load the model weights."),CXr=l(),F(c3.$$.fragment),wXr=l(),Jr=a("div"),F(qx.$$.fragment),AXr=l(),qEe=a("p"),yXr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),LXr=l(),wn=a("p"),xXr=o("The model class to instantiate is selected based on the "),jEe=a("code"),$Xr=o("model_type"),kXr=o(` property of the config object (either
passed as an argument or loaded from `),DEe=a("code"),SXr=o("pretrained_model_name_or_path"),RXr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),GEe=a("code"),PXr=o("pretrained_model_name_or_path"),BXr=o(":"),IXr=l(),OEe=a("ul"),f3=a("li"),VEe=a("strong"),NXr=o("vision-encoder-decoder"),qXr=o(" \u2014 "),xZ=a("a"),jXr=o("FlaxVisionEncoderDecoderModel"),DXr=o(" (Vision Encoder decoder model)"),GXr=l(),F(m3.$$.fragment),this.h()},l(f){const u=Ikt('[data-svelte="svelte-1phssyn"]',document.head);g=n(u,"META",{name:!0,content:!0}),u.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var jx=s(p);m=n(jx,"A",{id:!0,class:!0,href:!0});var XEe=s(m);_=n(XEe,"SPAN",{});var zEe=s(_);T(d.$$.fragment,zEe),zEe.forEach(t),XEe.forEach(t),h=i(jx),Mo=n(jx,"SPAN",{});var WEe=s(Mo);mi=r(WEe,"Auto Classes"),WEe.forEach(t),jx.forEach(t),_f=i(f),rt=n(f,"P",{});var Dx=s(rt);gi=r(Dx,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),hi=n(Dx,"CODE",{});var QEe=s(hi);$0=r(QEe,"from_pretrained()"),QEe.forEach(t),uf=r(Dx,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Dx.forEach(t),De=i(f),We=n(f,"P",{});var An=s(We);pi=r(An,"Instantiating one of "),yn=n(An,"A",{href:!0});var HEe=s(yn);k0=r(HEe,"AutoConfig"),HEe.forEach(t),Ln=r(An,", "),xn=n(An,"A",{href:!0});var UEe=s(xn);S0=r(UEe,"AutoModel"),UEe.forEach(t),_i=r(An,`, and
`),$n=n(An,"A",{href:!0});var JEe=s($n);R0=r(JEe,"AutoTokenizer"),JEe.forEach(t),ui=r(An," will directly create a class of the relevant architecture. For instance"),An.forEach(t),bf=i(f),T(Ca.$$.fragment,f),Qe=i(f),Ae=n(f,"P",{});var Gx=s(Ae);Z$=r(Gx,"will create a model that is an instance of "),bi=n(Gx,"A",{href:!0});var YEe=s(bi);ek=r(YEe,"BertModel"),YEe.forEach(t),ok=r(Gx,"."),Gx.forEach(t),Eo=i(f),wa=n(f,"P",{});var Ox=s(wa);rk=r(Ox,"There is one class of "),vf=n(Ox,"CODE",{});var KEe=s(vf);tk=r(KEe,"AutoModel"),KEe.forEach(t),qOe=r(Ox," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),Ox.forEach(t),yqe=i(f),vi=n(f,"H2",{class:!0});var Vx=s(vi);Ff=n(Vx,"A",{id:!0,class:!0,href:!0});var ZEe=s(Ff);Moe=n(ZEe,"SPAN",{});var eCe=s(Moe);T(P0.$$.fragment,eCe),eCe.forEach(t),ZEe.forEach(t),jOe=i(Vx),Eoe=n(Vx,"SPAN",{});var oCe=s(Eoe);DOe=r(oCe,"Extending the Auto Classes"),oCe.forEach(t),Vx.forEach(t),Lqe=i(f),kn=n(f,"P",{});var gf=s(kn);GOe=r(gf,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Coe=n(gf,"CODE",{});var rCe=s(Coe);OOe=r(rCe,"NewModel"),rCe.forEach(t),VOe=r(gf,", make sure you have a "),woe=n(gf,"CODE",{});var tCe=s(woe);XOe=r(tCe,"NewModelConfig"),tCe.forEach(t),zOe=r(gf,` then you can add those to the auto
classes like this:`),gf.forEach(t),xqe=i(f),T(B0.$$.fragment,f),$qe=i(f),ak=n(f,"P",{});var aCe=s(ak);WOe=r(aCe,"You will then be able to use the auto classes like you would usually do!"),aCe.forEach(t),kqe=i(f),T(Tf.$$.fragment,f),Sqe=i(f),Fi=n(f,"H2",{class:!0});var Xx=s(Fi);Mf=n(Xx,"A",{id:!0,class:!0,href:!0});var nCe=s(Mf);Aoe=n(nCe,"SPAN",{});var sCe=s(Aoe);T(I0.$$.fragment,sCe),sCe.forEach(t),nCe.forEach(t),QOe=i(Xx),yoe=n(Xx,"SPAN",{});var lCe=s(yoe);HOe=r(lCe,"AutoConfig"),lCe.forEach(t),Xx.forEach(t),Rqe=i(f),Co=n(f,"DIV",{class:!0});var et=s(Co);T(N0.$$.fragment,et),UOe=i(et),q0=n(et,"P",{});var zx=s(q0);JOe=r(zx,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),nk=n(zx,"A",{href:!0});var iCe=s(nk);YOe=r(iCe,"from_pretrained()"),iCe.forEach(t),KOe=r(zx," class method."),zx.forEach(t),ZOe=i(et),j0=n(et,"P",{});var Wx=s(j0);eVe=r(Wx,"This class cannot be instantiated directly using "),Loe=n(Wx,"CODE",{});var dCe=s(Loe);oVe=r(dCe,"__init__()"),dCe.forEach(t),rVe=r(Wx," (throws an error)."),Wx.forEach(t),tVe=i(et),Er=n(et,"DIV",{class:!0});var ot=s(Er);T(D0.$$.fragment,ot),aVe=i(ot),xoe=n(ot,"P",{});var cCe=s(xoe);nVe=r(cCe,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),cCe.forEach(t),sVe=i(ot),Ti=n(ot,"P",{});var hf=s(Ti);lVe=r(hf,"The configuration class to instantiate is selected based on the "),$oe=n(hf,"CODE",{});var fCe=s($oe);iVe=r(fCe,"model_type"),fCe.forEach(t),dVe=r(hf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),koe=n(hf,"CODE",{});var mCe=s(koe);cVe=r(mCe,"pretrained_model_name_or_path"),mCe.forEach(t),fVe=r(hf,":"),hf.forEach(t),mVe=i(ot),A=n(ot,"UL",{});var y=s(A);Ef=n(y,"LI",{});var g3=s(Ef);Soe=n(g3,"STRONG",{});var gCe=s(Soe);gVe=r(gCe,"albert"),gCe.forEach(t),hVe=r(g3," \u2014 "),sk=n(g3,"A",{href:!0});var hCe=s(sk);pVe=r(hCe,"AlbertConfig"),hCe.forEach(t),_Ve=r(g3," (ALBERT model)"),g3.forEach(t),uVe=i(y),Cf=n(y,"LI",{});var h3=s(Cf);Roe=n(h3,"STRONG",{});var pCe=s(Roe);bVe=r(pCe,"bart"),pCe.forEach(t),vVe=r(h3," \u2014 "),lk=n(h3,"A",{href:!0});var _Ce=s(lk);FVe=r(_Ce,"BartConfig"),_Ce.forEach(t),TVe=r(h3," (BART model)"),h3.forEach(t),MVe=i(y),wf=n(y,"LI",{});var p3=s(wf);Poe=n(p3,"STRONG",{});var uCe=s(Poe);EVe=r(uCe,"beit"),uCe.forEach(t),CVe=r(p3," \u2014 "),ik=n(p3,"A",{href:!0});var bCe=s(ik);wVe=r(bCe,"BeitConfig"),bCe.forEach(t),AVe=r(p3," (BEiT model)"),p3.forEach(t),yVe=i(y),Af=n(y,"LI",{});var _3=s(Af);Boe=n(_3,"STRONG",{});var vCe=s(Boe);LVe=r(vCe,"bert"),vCe.forEach(t),xVe=r(_3," \u2014 "),dk=n(_3,"A",{href:!0});var FCe=s(dk);$Ve=r(FCe,"BertConfig"),FCe.forEach(t),kVe=r(_3," (BERT model)"),_3.forEach(t),SVe=i(y),yf=n(y,"LI",{});var u3=s(yf);Ioe=n(u3,"STRONG",{});var TCe=s(Ioe);RVe=r(TCe,"bert-generation"),TCe.forEach(t),PVe=r(u3," \u2014 "),ck=n(u3,"A",{href:!0});var MCe=s(ck);BVe=r(MCe,"BertGenerationConfig"),MCe.forEach(t),IVe=r(u3," (Bert Generation model)"),u3.forEach(t),NVe=i(y),Lf=n(y,"LI",{});var b3=s(Lf);Noe=n(b3,"STRONG",{});var ECe=s(Noe);qVe=r(ECe,"big_bird"),ECe.forEach(t),jVe=r(b3," \u2014 "),fk=n(b3,"A",{href:!0});var CCe=s(fk);DVe=r(CCe,"BigBirdConfig"),CCe.forEach(t),GVe=r(b3," (BigBird model)"),b3.forEach(t),OVe=i(y),xf=n(y,"LI",{});var v3=s(xf);qoe=n(v3,"STRONG",{});var wCe=s(qoe);VVe=r(wCe,"bigbird_pegasus"),wCe.forEach(t),XVe=r(v3," \u2014 "),mk=n(v3,"A",{href:!0});var ACe=s(mk);zVe=r(ACe,"BigBirdPegasusConfig"),ACe.forEach(t),WVe=r(v3," (BigBirdPegasus model)"),v3.forEach(t),QVe=i(y),$f=n(y,"LI",{});var F3=s($f);joe=n(F3,"STRONG",{});var yCe=s(joe);HVe=r(yCe,"blenderbot"),yCe.forEach(t),UVe=r(F3," \u2014 "),gk=n(F3,"A",{href:!0});var LCe=s(gk);JVe=r(LCe,"BlenderbotConfig"),LCe.forEach(t),YVe=r(F3," (Blenderbot model)"),F3.forEach(t),KVe=i(y),kf=n(y,"LI",{});var T3=s(kf);Doe=n(T3,"STRONG",{});var xCe=s(Doe);ZVe=r(xCe,"blenderbot-small"),xCe.forEach(t),eXe=r(T3," \u2014 "),hk=n(T3,"A",{href:!0});var $Ce=s(hk);oXe=r($Ce,"BlenderbotSmallConfig"),$Ce.forEach(t),rXe=r(T3," (BlenderbotSmall model)"),T3.forEach(t),tXe=i(y),Sf=n(y,"LI",{});var M3=s(Sf);Goe=n(M3,"STRONG",{});var kCe=s(Goe);aXe=r(kCe,"camembert"),kCe.forEach(t),nXe=r(M3," \u2014 "),pk=n(M3,"A",{href:!0});var SCe=s(pk);sXe=r(SCe,"CamembertConfig"),SCe.forEach(t),lXe=r(M3," (CamemBERT model)"),M3.forEach(t),iXe=i(y),Rf=n(y,"LI",{});var E3=s(Rf);Ooe=n(E3,"STRONG",{});var RCe=s(Ooe);dXe=r(RCe,"canine"),RCe.forEach(t),cXe=r(E3," \u2014 "),_k=n(E3,"A",{href:!0});var PCe=s(_k);fXe=r(PCe,"CanineConfig"),PCe.forEach(t),mXe=r(E3," (Canine model)"),E3.forEach(t),gXe=i(y),Pf=n(y,"LI",{});var C3=s(Pf);Voe=n(C3,"STRONG",{});var BCe=s(Voe);hXe=r(BCe,"clip"),BCe.forEach(t),pXe=r(C3," \u2014 "),uk=n(C3,"A",{href:!0});var ICe=s(uk);_Xe=r(ICe,"CLIPConfig"),ICe.forEach(t),uXe=r(C3," (CLIP model)"),C3.forEach(t),bXe=i(y),Bf=n(y,"LI",{});var w3=s(Bf);Xoe=n(w3,"STRONG",{});var NCe=s(Xoe);vXe=r(NCe,"convbert"),NCe.forEach(t),FXe=r(w3," \u2014 "),bk=n(w3,"A",{href:!0});var qCe=s(bk);TXe=r(qCe,"ConvBertConfig"),qCe.forEach(t),MXe=r(w3," (ConvBERT model)"),w3.forEach(t),EXe=i(y),If=n(y,"LI",{});var A3=s(If);zoe=n(A3,"STRONG",{});var jCe=s(zoe);CXe=r(jCe,"convnext"),jCe.forEach(t),wXe=r(A3," \u2014 "),vk=n(A3,"A",{href:!0});var DCe=s(vk);AXe=r(DCe,"ConvNextConfig"),DCe.forEach(t),yXe=r(A3," (ConvNext model)"),A3.forEach(t),LXe=i(y),Nf=n(y,"LI",{});var y3=s(Nf);Woe=n(y3,"STRONG",{});var GCe=s(Woe);xXe=r(GCe,"ctrl"),GCe.forEach(t),$Xe=r(y3," \u2014 "),Fk=n(y3,"A",{href:!0});var OCe=s(Fk);kXe=r(OCe,"CTRLConfig"),OCe.forEach(t),SXe=r(y3," (CTRL model)"),y3.forEach(t),RXe=i(y),qf=n(y,"LI",{});var L3=s(qf);Qoe=n(L3,"STRONG",{});var VCe=s(Qoe);PXe=r(VCe,"cvt"),VCe.forEach(t),BXe=r(L3," \u2014 "),Tk=n(L3,"A",{href:!0});var XCe=s(Tk);IXe=r(XCe,"CvtConfig"),XCe.forEach(t),NXe=r(L3," (CvT model)"),L3.forEach(t),qXe=i(y),jf=n(y,"LI",{});var x3=s(jf);Hoe=n(x3,"STRONG",{});var zCe=s(Hoe);jXe=r(zCe,"data2vec-audio"),zCe.forEach(t),DXe=r(x3," \u2014 "),Mk=n(x3,"A",{href:!0});var WCe=s(Mk);GXe=r(WCe,"Data2VecAudioConfig"),WCe.forEach(t),OXe=r(x3," (Data2VecAudio model)"),x3.forEach(t),VXe=i(y),Df=n(y,"LI",{});var $3=s(Df);Uoe=n($3,"STRONG",{});var QCe=s(Uoe);XXe=r(QCe,"data2vec-text"),QCe.forEach(t),zXe=r($3," \u2014 "),Ek=n($3,"A",{href:!0});var HCe=s(Ek);WXe=r(HCe,"Data2VecTextConfig"),HCe.forEach(t),QXe=r($3," (Data2VecText model)"),$3.forEach(t),HXe=i(y),Gf=n(y,"LI",{});var k3=s(Gf);Joe=n(k3,"STRONG",{});var UCe=s(Joe);UXe=r(UCe,"data2vec-vision"),UCe.forEach(t),JXe=r(k3," \u2014 "),Ck=n(k3,"A",{href:!0});var JCe=s(Ck);YXe=r(JCe,"Data2VecVisionConfig"),JCe.forEach(t),KXe=r(k3," (Data2VecVision model)"),k3.forEach(t),ZXe=i(y),Of=n(y,"LI",{});var S3=s(Of);Yoe=n(S3,"STRONG",{});var YCe=s(Yoe);eze=r(YCe,"deberta"),YCe.forEach(t),oze=r(S3," \u2014 "),wk=n(S3,"A",{href:!0});var KCe=s(wk);rze=r(KCe,"DebertaConfig"),KCe.forEach(t),tze=r(S3," (DeBERTa model)"),S3.forEach(t),aze=i(y),Vf=n(y,"LI",{});var R3=s(Vf);Koe=n(R3,"STRONG",{});var ZCe=s(Koe);nze=r(ZCe,"deberta-v2"),ZCe.forEach(t),sze=r(R3," \u2014 "),Ak=n(R3,"A",{href:!0});var e5e=s(Ak);lze=r(e5e,"DebertaV2Config"),e5e.forEach(t),ize=r(R3," (DeBERTa-v2 model)"),R3.forEach(t),dze=i(y),Xf=n(y,"LI",{});var P3=s(Xf);Zoe=n(P3,"STRONG",{});var o5e=s(Zoe);cze=r(o5e,"decision_transformer"),o5e.forEach(t),fze=r(P3," \u2014 "),yk=n(P3,"A",{href:!0});var r5e=s(yk);mze=r(r5e,"DecisionTransformerConfig"),r5e.forEach(t),gze=r(P3," (Decision Transformer model)"),P3.forEach(t),hze=i(y),zf=n(y,"LI",{});var B3=s(zf);ere=n(B3,"STRONG",{});var t5e=s(ere);pze=r(t5e,"deit"),t5e.forEach(t),_ze=r(B3," \u2014 "),Lk=n(B3,"A",{href:!0});var VXr=s(Lk);uze=r(VXr,"DeiTConfig"),VXr.forEach(t),bze=r(B3," (DeiT model)"),B3.forEach(t),vze=i(y),Wf=n(y,"LI",{});var a5e=s(Wf);ore=n(a5e,"STRONG",{});var XXr=s(ore);Fze=r(XXr,"detr"),XXr.forEach(t),Tze=r(a5e," \u2014 "),xk=n(a5e,"A",{href:!0});var zXr=s(xk);Mze=r(zXr,"DetrConfig"),zXr.forEach(t),Eze=r(a5e," (DETR model)"),a5e.forEach(t),Cze=i(y),Qf=n(y,"LI",{});var n5e=s(Qf);rre=n(n5e,"STRONG",{});var WXr=s(rre);wze=r(WXr,"distilbert"),WXr.forEach(t),Aze=r(n5e," \u2014 "),$k=n(n5e,"A",{href:!0});var QXr=s($k);yze=r(QXr,"DistilBertConfig"),QXr.forEach(t),Lze=r(n5e," (DistilBERT model)"),n5e.forEach(t),xze=i(y),Hf=n(y,"LI",{});var s5e=s(Hf);tre=n(s5e,"STRONG",{});var HXr=s(tre);$ze=r(HXr,"dpr"),HXr.forEach(t),kze=r(s5e," \u2014 "),kk=n(s5e,"A",{href:!0});var UXr=s(kk);Sze=r(UXr,"DPRConfig"),UXr.forEach(t),Rze=r(s5e," (DPR model)"),s5e.forEach(t),Pze=i(y),Uf=n(y,"LI",{});var l5e=s(Uf);are=n(l5e,"STRONG",{});var JXr=s(are);Bze=r(JXr,"dpt"),JXr.forEach(t),Ize=r(l5e," \u2014 "),Sk=n(l5e,"A",{href:!0});var YXr=s(Sk);Nze=r(YXr,"DPTConfig"),YXr.forEach(t),qze=r(l5e," (DPT model)"),l5e.forEach(t),jze=i(y),Jf=n(y,"LI",{});var i5e=s(Jf);nre=n(i5e,"STRONG",{});var KXr=s(nre);Dze=r(KXr,"electra"),KXr.forEach(t),Gze=r(i5e," \u2014 "),Rk=n(i5e,"A",{href:!0});var ZXr=s(Rk);Oze=r(ZXr,"ElectraConfig"),ZXr.forEach(t),Vze=r(i5e," (ELECTRA model)"),i5e.forEach(t),Xze=i(y),Yf=n(y,"LI",{});var d5e=s(Yf);sre=n(d5e,"STRONG",{});var ezr=s(sre);zze=r(ezr,"encoder-decoder"),ezr.forEach(t),Wze=r(d5e," \u2014 "),Pk=n(d5e,"A",{href:!0});var ozr=s(Pk);Qze=r(ozr,"EncoderDecoderConfig"),ozr.forEach(t),Hze=r(d5e," (Encoder decoder model)"),d5e.forEach(t),Uze=i(y),Kf=n(y,"LI",{});var c5e=s(Kf);lre=n(c5e,"STRONG",{});var rzr=s(lre);Jze=r(rzr,"flaubert"),rzr.forEach(t),Yze=r(c5e," \u2014 "),Bk=n(c5e,"A",{href:!0});var tzr=s(Bk);Kze=r(tzr,"FlaubertConfig"),tzr.forEach(t),Zze=r(c5e," (FlauBERT model)"),c5e.forEach(t),eWe=i(y),Zf=n(y,"LI",{});var f5e=s(Zf);ire=n(f5e,"STRONG",{});var azr=s(ire);oWe=r(azr,"flava"),azr.forEach(t),rWe=r(f5e," \u2014 "),Ik=n(f5e,"A",{href:!0});var nzr=s(Ik);tWe=r(nzr,"FlavaConfig"),nzr.forEach(t),aWe=r(f5e," (Flava model)"),f5e.forEach(t),nWe=i(y),em=n(y,"LI",{});var m5e=s(em);dre=n(m5e,"STRONG",{});var szr=s(dre);sWe=r(szr,"fnet"),szr.forEach(t),lWe=r(m5e," \u2014 "),Nk=n(m5e,"A",{href:!0});var lzr=s(Nk);iWe=r(lzr,"FNetConfig"),lzr.forEach(t),dWe=r(m5e," (FNet model)"),m5e.forEach(t),cWe=i(y),om=n(y,"LI",{});var g5e=s(om);cre=n(g5e,"STRONG",{});var izr=s(cre);fWe=r(izr,"fsmt"),izr.forEach(t),mWe=r(g5e," \u2014 "),qk=n(g5e,"A",{href:!0});var dzr=s(qk);gWe=r(dzr,"FSMTConfig"),dzr.forEach(t),hWe=r(g5e," (FairSeq Machine-Translation model)"),g5e.forEach(t),pWe=i(y),rm=n(y,"LI",{});var h5e=s(rm);fre=n(h5e,"STRONG",{});var czr=s(fre);_We=r(czr,"funnel"),czr.forEach(t),uWe=r(h5e," \u2014 "),jk=n(h5e,"A",{href:!0});var fzr=s(jk);bWe=r(fzr,"FunnelConfig"),fzr.forEach(t),vWe=r(h5e," (Funnel Transformer model)"),h5e.forEach(t),FWe=i(y),tm=n(y,"LI",{});var p5e=s(tm);mre=n(p5e,"STRONG",{});var mzr=s(mre);TWe=r(mzr,"glpn"),mzr.forEach(t),MWe=r(p5e," \u2014 "),Dk=n(p5e,"A",{href:!0});var gzr=s(Dk);EWe=r(gzr,"GLPNConfig"),gzr.forEach(t),CWe=r(p5e," (GLPN model)"),p5e.forEach(t),wWe=i(y),am=n(y,"LI",{});var _5e=s(am);gre=n(_5e,"STRONG",{});var hzr=s(gre);AWe=r(hzr,"gpt2"),hzr.forEach(t),yWe=r(_5e," \u2014 "),Gk=n(_5e,"A",{href:!0});var pzr=s(Gk);LWe=r(pzr,"GPT2Config"),pzr.forEach(t),xWe=r(_5e," (OpenAI GPT-2 model)"),_5e.forEach(t),$We=i(y),nm=n(y,"LI",{});var u5e=s(nm);hre=n(u5e,"STRONG",{});var _zr=s(hre);kWe=r(_zr,"gpt_neo"),_zr.forEach(t),SWe=r(u5e," \u2014 "),Ok=n(u5e,"A",{href:!0});var uzr=s(Ok);RWe=r(uzr,"GPTNeoConfig"),uzr.forEach(t),PWe=r(u5e," (GPT Neo model)"),u5e.forEach(t),BWe=i(y),sm=n(y,"LI",{});var b5e=s(sm);pre=n(b5e,"STRONG",{});var bzr=s(pre);IWe=r(bzr,"gpt_neox"),bzr.forEach(t),NWe=r(b5e," \u2014 "),Vk=n(b5e,"A",{href:!0});var vzr=s(Vk);qWe=r(vzr,"GPTNeoXConfig"),vzr.forEach(t),jWe=r(b5e," (GPT NeoX model)"),b5e.forEach(t),DWe=i(y),lm=n(y,"LI",{});var v5e=s(lm);_re=n(v5e,"STRONG",{});var Fzr=s(_re);GWe=r(Fzr,"gptj"),Fzr.forEach(t),OWe=r(v5e," \u2014 "),Xk=n(v5e,"A",{href:!0});var Tzr=s(Xk);VWe=r(Tzr,"GPTJConfig"),Tzr.forEach(t),XWe=r(v5e," (GPT-J model)"),v5e.forEach(t),zWe=i(y),im=n(y,"LI",{});var F5e=s(im);ure=n(F5e,"STRONG",{});var Mzr=s(ure);WWe=r(Mzr,"hubert"),Mzr.forEach(t),QWe=r(F5e," \u2014 "),zk=n(F5e,"A",{href:!0});var Ezr=s(zk);HWe=r(Ezr,"HubertConfig"),Ezr.forEach(t),UWe=r(F5e," (Hubert model)"),F5e.forEach(t),JWe=i(y),dm=n(y,"LI",{});var T5e=s(dm);bre=n(T5e,"STRONG",{});var Czr=s(bre);YWe=r(Czr,"ibert"),Czr.forEach(t),KWe=r(T5e," \u2014 "),Wk=n(T5e,"A",{href:!0});var wzr=s(Wk);ZWe=r(wzr,"IBertConfig"),wzr.forEach(t),eQe=r(T5e," (I-BERT model)"),T5e.forEach(t),oQe=i(y),cm=n(y,"LI",{});var M5e=s(cm);vre=n(M5e,"STRONG",{});var Azr=s(vre);rQe=r(Azr,"imagegpt"),Azr.forEach(t),tQe=r(M5e," \u2014 "),Qk=n(M5e,"A",{href:!0});var yzr=s(Qk);aQe=r(yzr,"ImageGPTConfig"),yzr.forEach(t),nQe=r(M5e," (ImageGPT model)"),M5e.forEach(t),sQe=i(y),fm=n(y,"LI",{});var E5e=s(fm);Fre=n(E5e,"STRONG",{});var Lzr=s(Fre);lQe=r(Lzr,"layoutlm"),Lzr.forEach(t),iQe=r(E5e," \u2014 "),Hk=n(E5e,"A",{href:!0});var xzr=s(Hk);dQe=r(xzr,"LayoutLMConfig"),xzr.forEach(t),cQe=r(E5e," (LayoutLM model)"),E5e.forEach(t),fQe=i(y),mm=n(y,"LI",{});var C5e=s(mm);Tre=n(C5e,"STRONG",{});var $zr=s(Tre);mQe=r($zr,"layoutlmv2"),$zr.forEach(t),gQe=r(C5e," \u2014 "),Uk=n(C5e,"A",{href:!0});var kzr=s(Uk);hQe=r(kzr,"LayoutLMv2Config"),kzr.forEach(t),pQe=r(C5e," (LayoutLMv2 model)"),C5e.forEach(t),_Qe=i(y),gm=n(y,"LI",{});var w5e=s(gm);Mre=n(w5e,"STRONG",{});var Szr=s(Mre);uQe=r(Szr,"layoutlmv3"),Szr.forEach(t),bQe=r(w5e," \u2014 "),Jk=n(w5e,"A",{href:!0});var Rzr=s(Jk);vQe=r(Rzr,"LayoutLMv3Config"),Rzr.forEach(t),FQe=r(w5e," (LayoutLMv3 model)"),w5e.forEach(t),TQe=i(y),hm=n(y,"LI",{});var A5e=s(hm);Ere=n(A5e,"STRONG",{});var Pzr=s(Ere);MQe=r(Pzr,"led"),Pzr.forEach(t),EQe=r(A5e," \u2014 "),Yk=n(A5e,"A",{href:!0});var Bzr=s(Yk);CQe=r(Bzr,"LEDConfig"),Bzr.forEach(t),wQe=r(A5e," (LED model)"),A5e.forEach(t),AQe=i(y),pm=n(y,"LI",{});var y5e=s(pm);Cre=n(y5e,"STRONG",{});var Izr=s(Cre);yQe=r(Izr,"longformer"),Izr.forEach(t),LQe=r(y5e," \u2014 "),Kk=n(y5e,"A",{href:!0});var Nzr=s(Kk);xQe=r(Nzr,"LongformerConfig"),Nzr.forEach(t),$Qe=r(y5e," (Longformer model)"),y5e.forEach(t),kQe=i(y),_m=n(y,"LI",{});var L5e=s(_m);wre=n(L5e,"STRONG",{});var qzr=s(wre);SQe=r(qzr,"longt5"),qzr.forEach(t),RQe=r(L5e," \u2014 "),Zk=n(L5e,"A",{href:!0});var jzr=s(Zk);PQe=r(jzr,"LongT5Config"),jzr.forEach(t),BQe=r(L5e," (LongT5 model)"),L5e.forEach(t),IQe=i(y),um=n(y,"LI",{});var x5e=s(um);Are=n(x5e,"STRONG",{});var Dzr=s(Are);NQe=r(Dzr,"luke"),Dzr.forEach(t),qQe=r(x5e," \u2014 "),eS=n(x5e,"A",{href:!0});var Gzr=s(eS);jQe=r(Gzr,"LukeConfig"),Gzr.forEach(t),DQe=r(x5e," (LUKE model)"),x5e.forEach(t),GQe=i(y),bm=n(y,"LI",{});var $5e=s(bm);yre=n($5e,"STRONG",{});var Ozr=s(yre);OQe=r(Ozr,"lxmert"),Ozr.forEach(t),VQe=r($5e," \u2014 "),oS=n($5e,"A",{href:!0});var Vzr=s(oS);XQe=r(Vzr,"LxmertConfig"),Vzr.forEach(t),zQe=r($5e," (LXMERT model)"),$5e.forEach(t),WQe=i(y),vm=n(y,"LI",{});var k5e=s(vm);Lre=n(k5e,"STRONG",{});var Xzr=s(Lre);QQe=r(Xzr,"m2m_100"),Xzr.forEach(t),HQe=r(k5e," \u2014 "),rS=n(k5e,"A",{href:!0});var zzr=s(rS);UQe=r(zzr,"M2M100Config"),zzr.forEach(t),JQe=r(k5e," (M2M100 model)"),k5e.forEach(t),YQe=i(y),Fm=n(y,"LI",{});var S5e=s(Fm);xre=n(S5e,"STRONG",{});var Wzr=s(xre);KQe=r(Wzr,"marian"),Wzr.forEach(t),ZQe=r(S5e," \u2014 "),tS=n(S5e,"A",{href:!0});var Qzr=s(tS);eHe=r(Qzr,"MarianConfig"),Qzr.forEach(t),oHe=r(S5e," (Marian model)"),S5e.forEach(t),rHe=i(y),Tm=n(y,"LI",{});var R5e=s(Tm);$re=n(R5e,"STRONG",{});var Hzr=s($re);tHe=r(Hzr,"maskformer"),Hzr.forEach(t),aHe=r(R5e," \u2014 "),aS=n(R5e,"A",{href:!0});var Uzr=s(aS);nHe=r(Uzr,"MaskFormerConfig"),Uzr.forEach(t),sHe=r(R5e," (MaskFormer model)"),R5e.forEach(t),lHe=i(y),Mm=n(y,"LI",{});var P5e=s(Mm);kre=n(P5e,"STRONG",{});var Jzr=s(kre);iHe=r(Jzr,"mbart"),Jzr.forEach(t),dHe=r(P5e," \u2014 "),nS=n(P5e,"A",{href:!0});var Yzr=s(nS);cHe=r(Yzr,"MBartConfig"),Yzr.forEach(t),fHe=r(P5e," (mBART model)"),P5e.forEach(t),mHe=i(y),Em=n(y,"LI",{});var B5e=s(Em);Sre=n(B5e,"STRONG",{});var Kzr=s(Sre);gHe=r(Kzr,"megatron-bert"),Kzr.forEach(t),hHe=r(B5e," \u2014 "),sS=n(B5e,"A",{href:!0});var Zzr=s(sS);pHe=r(Zzr,"MegatronBertConfig"),Zzr.forEach(t),_He=r(B5e," (MegatronBert model)"),B5e.forEach(t),uHe=i(y),Cm=n(y,"LI",{});var I5e=s(Cm);Rre=n(I5e,"STRONG",{});var eWr=s(Rre);bHe=r(eWr,"mobilebert"),eWr.forEach(t),vHe=r(I5e," \u2014 "),lS=n(I5e,"A",{href:!0});var oWr=s(lS);FHe=r(oWr,"MobileBertConfig"),oWr.forEach(t),THe=r(I5e," (MobileBERT model)"),I5e.forEach(t),MHe=i(y),wm=n(y,"LI",{});var N5e=s(wm);Pre=n(N5e,"STRONG",{});var rWr=s(Pre);EHe=r(rWr,"mpnet"),rWr.forEach(t),CHe=r(N5e," \u2014 "),iS=n(N5e,"A",{href:!0});var tWr=s(iS);wHe=r(tWr,"MPNetConfig"),tWr.forEach(t),AHe=r(N5e," (MPNet model)"),N5e.forEach(t),yHe=i(y),Am=n(y,"LI",{});var q5e=s(Am);Bre=n(q5e,"STRONG",{});var aWr=s(Bre);LHe=r(aWr,"mt5"),aWr.forEach(t),xHe=r(q5e," \u2014 "),dS=n(q5e,"A",{href:!0});var nWr=s(dS);$He=r(nWr,"MT5Config"),nWr.forEach(t),kHe=r(q5e," (mT5 model)"),q5e.forEach(t),SHe=i(y),ym=n(y,"LI",{});var j5e=s(ym);Ire=n(j5e,"STRONG",{});var sWr=s(Ire);RHe=r(sWr,"nystromformer"),sWr.forEach(t),PHe=r(j5e," \u2014 "),cS=n(j5e,"A",{href:!0});var lWr=s(cS);BHe=r(lWr,"NystromformerConfig"),lWr.forEach(t),IHe=r(j5e," (Nystromformer model)"),j5e.forEach(t),NHe=i(y),Lm=n(y,"LI",{});var D5e=s(Lm);Nre=n(D5e,"STRONG",{});var iWr=s(Nre);qHe=r(iWr,"openai-gpt"),iWr.forEach(t),jHe=r(D5e," \u2014 "),fS=n(D5e,"A",{href:!0});var dWr=s(fS);DHe=r(dWr,"OpenAIGPTConfig"),dWr.forEach(t),GHe=r(D5e," (OpenAI GPT model)"),D5e.forEach(t),OHe=i(y),xm=n(y,"LI",{});var G5e=s(xm);qre=n(G5e,"STRONG",{});var cWr=s(qre);VHe=r(cWr,"opt"),cWr.forEach(t),XHe=r(G5e," \u2014 "),mS=n(G5e,"A",{href:!0});var fWr=s(mS);zHe=r(fWr,"OPTConfig"),fWr.forEach(t),WHe=r(G5e," (OPT model)"),G5e.forEach(t),QHe=i(y),$m=n(y,"LI",{});var O5e=s($m);jre=n(O5e,"STRONG",{});var mWr=s(jre);HHe=r(mWr,"pegasus"),mWr.forEach(t),UHe=r(O5e," \u2014 "),gS=n(O5e,"A",{href:!0});var gWr=s(gS);JHe=r(gWr,"PegasusConfig"),gWr.forEach(t),YHe=r(O5e," (Pegasus model)"),O5e.forEach(t),KHe=i(y),km=n(y,"LI",{});var V5e=s(km);Dre=n(V5e,"STRONG",{});var hWr=s(Dre);ZHe=r(hWr,"perceiver"),hWr.forEach(t),eUe=r(V5e," \u2014 "),hS=n(V5e,"A",{href:!0});var pWr=s(hS);oUe=r(pWr,"PerceiverConfig"),pWr.forEach(t),rUe=r(V5e," (Perceiver model)"),V5e.forEach(t),tUe=i(y),Sm=n(y,"LI",{});var X5e=s(Sm);Gre=n(X5e,"STRONG",{});var _Wr=s(Gre);aUe=r(_Wr,"plbart"),_Wr.forEach(t),nUe=r(X5e," \u2014 "),pS=n(X5e,"A",{href:!0});var uWr=s(pS);sUe=r(uWr,"PLBartConfig"),uWr.forEach(t),lUe=r(X5e," (PLBart model)"),X5e.forEach(t),iUe=i(y),Rm=n(y,"LI",{});var z5e=s(Rm);Ore=n(z5e,"STRONG",{});var bWr=s(Ore);dUe=r(bWr,"poolformer"),bWr.forEach(t),cUe=r(z5e," \u2014 "),_S=n(z5e,"A",{href:!0});var vWr=s(_S);fUe=r(vWr,"PoolFormerConfig"),vWr.forEach(t),mUe=r(z5e," (PoolFormer model)"),z5e.forEach(t),gUe=i(y),Pm=n(y,"LI",{});var W5e=s(Pm);Vre=n(W5e,"STRONG",{});var FWr=s(Vre);hUe=r(FWr,"prophetnet"),FWr.forEach(t),pUe=r(W5e," \u2014 "),uS=n(W5e,"A",{href:!0});var TWr=s(uS);_Ue=r(TWr,"ProphetNetConfig"),TWr.forEach(t),uUe=r(W5e," (ProphetNet model)"),W5e.forEach(t),bUe=i(y),Bm=n(y,"LI",{});var Q5e=s(Bm);Xre=n(Q5e,"STRONG",{});var MWr=s(Xre);vUe=r(MWr,"qdqbert"),MWr.forEach(t),FUe=r(Q5e," \u2014 "),bS=n(Q5e,"A",{href:!0});var EWr=s(bS);TUe=r(EWr,"QDQBertConfig"),EWr.forEach(t),MUe=r(Q5e," (QDQBert model)"),Q5e.forEach(t),EUe=i(y),Im=n(y,"LI",{});var H5e=s(Im);zre=n(H5e,"STRONG",{});var CWr=s(zre);CUe=r(CWr,"rag"),CWr.forEach(t),wUe=r(H5e," \u2014 "),vS=n(H5e,"A",{href:!0});var wWr=s(vS);AUe=r(wWr,"RagConfig"),wWr.forEach(t),yUe=r(H5e," (RAG model)"),H5e.forEach(t),LUe=i(y),Nm=n(y,"LI",{});var U5e=s(Nm);Wre=n(U5e,"STRONG",{});var AWr=s(Wre);xUe=r(AWr,"realm"),AWr.forEach(t),$Ue=r(U5e," \u2014 "),FS=n(U5e,"A",{href:!0});var yWr=s(FS);kUe=r(yWr,"RealmConfig"),yWr.forEach(t),SUe=r(U5e," (Realm model)"),U5e.forEach(t),RUe=i(y),qm=n(y,"LI",{});var J5e=s(qm);Qre=n(J5e,"STRONG",{});var LWr=s(Qre);PUe=r(LWr,"reformer"),LWr.forEach(t),BUe=r(J5e," \u2014 "),TS=n(J5e,"A",{href:!0});var xWr=s(TS);IUe=r(xWr,"ReformerConfig"),xWr.forEach(t),NUe=r(J5e," (Reformer model)"),J5e.forEach(t),qUe=i(y),jm=n(y,"LI",{});var Y5e=s(jm);Hre=n(Y5e,"STRONG",{});var $Wr=s(Hre);jUe=r($Wr,"regnet"),$Wr.forEach(t),DUe=r(Y5e," \u2014 "),MS=n(Y5e,"A",{href:!0});var kWr=s(MS);GUe=r(kWr,"RegNetConfig"),kWr.forEach(t),OUe=r(Y5e," (RegNet model)"),Y5e.forEach(t),VUe=i(y),Dm=n(y,"LI",{});var K5e=s(Dm);Ure=n(K5e,"STRONG",{});var SWr=s(Ure);XUe=r(SWr,"rembert"),SWr.forEach(t),zUe=r(K5e," \u2014 "),ES=n(K5e,"A",{href:!0});var RWr=s(ES);WUe=r(RWr,"RemBertConfig"),RWr.forEach(t),QUe=r(K5e," (RemBERT model)"),K5e.forEach(t),HUe=i(y),Gm=n(y,"LI",{});var Z5e=s(Gm);Jre=n(Z5e,"STRONG",{});var PWr=s(Jre);UUe=r(PWr,"resnet"),PWr.forEach(t),JUe=r(Z5e," \u2014 "),CS=n(Z5e,"A",{href:!0});var BWr=s(CS);YUe=r(BWr,"ResNetConfig"),BWr.forEach(t),KUe=r(Z5e," (ResNet model)"),Z5e.forEach(t),ZUe=i(y),Om=n(y,"LI",{});var e3e=s(Om);Yre=n(e3e,"STRONG",{});var IWr=s(Yre);eJe=r(IWr,"retribert"),IWr.forEach(t),oJe=r(e3e," \u2014 "),wS=n(e3e,"A",{href:!0});var NWr=s(wS);rJe=r(NWr,"RetriBertConfig"),NWr.forEach(t),tJe=r(e3e," (RetriBERT model)"),e3e.forEach(t),aJe=i(y),Vm=n(y,"LI",{});var o3e=s(Vm);Kre=n(o3e,"STRONG",{});var qWr=s(Kre);nJe=r(qWr,"roberta"),qWr.forEach(t),sJe=r(o3e," \u2014 "),AS=n(o3e,"A",{href:!0});var jWr=s(AS);lJe=r(jWr,"RobertaConfig"),jWr.forEach(t),iJe=r(o3e," (RoBERTa model)"),o3e.forEach(t),dJe=i(y),Xm=n(y,"LI",{});var r3e=s(Xm);Zre=n(r3e,"STRONG",{});var DWr=s(Zre);cJe=r(DWr,"roformer"),DWr.forEach(t),fJe=r(r3e," \u2014 "),yS=n(r3e,"A",{href:!0});var GWr=s(yS);mJe=r(GWr,"RoFormerConfig"),GWr.forEach(t),gJe=r(r3e," (RoFormer model)"),r3e.forEach(t),hJe=i(y),zm=n(y,"LI",{});var t3e=s(zm);ete=n(t3e,"STRONG",{});var OWr=s(ete);pJe=r(OWr,"segformer"),OWr.forEach(t),_Je=r(t3e," \u2014 "),LS=n(t3e,"A",{href:!0});var VWr=s(LS);uJe=r(VWr,"SegformerConfig"),VWr.forEach(t),bJe=r(t3e," (SegFormer model)"),t3e.forEach(t),vJe=i(y),Wm=n(y,"LI",{});var a3e=s(Wm);ote=n(a3e,"STRONG",{});var XWr=s(ote);FJe=r(XWr,"sew"),XWr.forEach(t),TJe=r(a3e," \u2014 "),xS=n(a3e,"A",{href:!0});var zWr=s(xS);MJe=r(zWr,"SEWConfig"),zWr.forEach(t),EJe=r(a3e," (SEW model)"),a3e.forEach(t),CJe=i(y),Qm=n(y,"LI",{});var n3e=s(Qm);rte=n(n3e,"STRONG",{});var WWr=s(rte);wJe=r(WWr,"sew-d"),WWr.forEach(t),AJe=r(n3e," \u2014 "),$S=n(n3e,"A",{href:!0});var QWr=s($S);yJe=r(QWr,"SEWDConfig"),QWr.forEach(t),LJe=r(n3e," (SEW-D model)"),n3e.forEach(t),xJe=i(y),Hm=n(y,"LI",{});var s3e=s(Hm);tte=n(s3e,"STRONG",{});var HWr=s(tte);$Je=r(HWr,"speech-encoder-decoder"),HWr.forEach(t),kJe=r(s3e," \u2014 "),kS=n(s3e,"A",{href:!0});var UWr=s(kS);SJe=r(UWr,"SpeechEncoderDecoderConfig"),UWr.forEach(t),RJe=r(s3e," (Speech Encoder decoder model)"),s3e.forEach(t),PJe=i(y),Um=n(y,"LI",{});var l3e=s(Um);ate=n(l3e,"STRONG",{});var JWr=s(ate);BJe=r(JWr,"speech_to_text"),JWr.forEach(t),IJe=r(l3e," \u2014 "),SS=n(l3e,"A",{href:!0});var YWr=s(SS);NJe=r(YWr,"Speech2TextConfig"),YWr.forEach(t),qJe=r(l3e," (Speech2Text model)"),l3e.forEach(t),jJe=i(y),Jm=n(y,"LI",{});var i3e=s(Jm);nte=n(i3e,"STRONG",{});var KWr=s(nte);DJe=r(KWr,"speech_to_text_2"),KWr.forEach(t),GJe=r(i3e," \u2014 "),RS=n(i3e,"A",{href:!0});var ZWr=s(RS);OJe=r(ZWr,"Speech2Text2Config"),ZWr.forEach(t),VJe=r(i3e," (Speech2Text2 model)"),i3e.forEach(t),XJe=i(y),Ym=n(y,"LI",{});var d3e=s(Ym);ste=n(d3e,"STRONG",{});var eQr=s(ste);zJe=r(eQr,"splinter"),eQr.forEach(t),WJe=r(d3e," \u2014 "),PS=n(d3e,"A",{href:!0});var oQr=s(PS);QJe=r(oQr,"SplinterConfig"),oQr.forEach(t),HJe=r(d3e," (Splinter model)"),d3e.forEach(t),UJe=i(y),Km=n(y,"LI",{});var c3e=s(Km);lte=n(c3e,"STRONG",{});var rQr=s(lte);JJe=r(rQr,"squeezebert"),rQr.forEach(t),YJe=r(c3e," \u2014 "),BS=n(c3e,"A",{href:!0});var tQr=s(BS);KJe=r(tQr,"SqueezeBertConfig"),tQr.forEach(t),ZJe=r(c3e," (SqueezeBERT model)"),c3e.forEach(t),eYe=i(y),Zm=n(y,"LI",{});var f3e=s(Zm);ite=n(f3e,"STRONG",{});var aQr=s(ite);oYe=r(aQr,"swin"),aQr.forEach(t),rYe=r(f3e," \u2014 "),IS=n(f3e,"A",{href:!0});var nQr=s(IS);tYe=r(nQr,"SwinConfig"),nQr.forEach(t),aYe=r(f3e," (Swin model)"),f3e.forEach(t),nYe=i(y),eg=n(y,"LI",{});var m3e=s(eg);dte=n(m3e,"STRONG",{});var sQr=s(dte);sYe=r(sQr,"t5"),sQr.forEach(t),lYe=r(m3e," \u2014 "),NS=n(m3e,"A",{href:!0});var lQr=s(NS);iYe=r(lQr,"T5Config"),lQr.forEach(t),dYe=r(m3e," (T5 model)"),m3e.forEach(t),cYe=i(y),og=n(y,"LI",{});var g3e=s(og);cte=n(g3e,"STRONG",{});var iQr=s(cte);fYe=r(iQr,"tapas"),iQr.forEach(t),mYe=r(g3e," \u2014 "),qS=n(g3e,"A",{href:!0});var dQr=s(qS);gYe=r(dQr,"TapasConfig"),dQr.forEach(t),hYe=r(g3e," (TAPAS model)"),g3e.forEach(t),pYe=i(y),rg=n(y,"LI",{});var h3e=s(rg);fte=n(h3e,"STRONG",{});var cQr=s(fte);_Ye=r(cQr,"trajectory_transformer"),cQr.forEach(t),uYe=r(h3e," \u2014 "),jS=n(h3e,"A",{href:!0});var fQr=s(jS);bYe=r(fQr,"TrajectoryTransformerConfig"),fQr.forEach(t),vYe=r(h3e," (Trajectory Transformer model)"),h3e.forEach(t),FYe=i(y),tg=n(y,"LI",{});var p3e=s(tg);mte=n(p3e,"STRONG",{});var mQr=s(mte);TYe=r(mQr,"transfo-xl"),mQr.forEach(t),MYe=r(p3e," \u2014 "),DS=n(p3e,"A",{href:!0});var gQr=s(DS);EYe=r(gQr,"TransfoXLConfig"),gQr.forEach(t),CYe=r(p3e," (Transformer-XL model)"),p3e.forEach(t),wYe=i(y),ag=n(y,"LI",{});var _3e=s(ag);gte=n(_3e,"STRONG",{});var hQr=s(gte);AYe=r(hQr,"trocr"),hQr.forEach(t),yYe=r(_3e," \u2014 "),GS=n(_3e,"A",{href:!0});var pQr=s(GS);LYe=r(pQr,"TrOCRConfig"),pQr.forEach(t),xYe=r(_3e," (TrOCR model)"),_3e.forEach(t),$Ye=i(y),ng=n(y,"LI",{});var u3e=s(ng);hte=n(u3e,"STRONG",{});var _Qr=s(hte);kYe=r(_Qr,"unispeech"),_Qr.forEach(t),SYe=r(u3e," \u2014 "),OS=n(u3e,"A",{href:!0});var uQr=s(OS);RYe=r(uQr,"UniSpeechConfig"),uQr.forEach(t),PYe=r(u3e," (UniSpeech model)"),u3e.forEach(t),BYe=i(y),sg=n(y,"LI",{});var b3e=s(sg);pte=n(b3e,"STRONG",{});var bQr=s(pte);IYe=r(bQr,"unispeech-sat"),bQr.forEach(t),NYe=r(b3e," \u2014 "),VS=n(b3e,"A",{href:!0});var vQr=s(VS);qYe=r(vQr,"UniSpeechSatConfig"),vQr.forEach(t),jYe=r(b3e," (UniSpeechSat model)"),b3e.forEach(t),DYe=i(y),lg=n(y,"LI",{});var v3e=s(lg);_te=n(v3e,"STRONG",{});var FQr=s(_te);GYe=r(FQr,"van"),FQr.forEach(t),OYe=r(v3e," \u2014 "),XS=n(v3e,"A",{href:!0});var TQr=s(XS);VYe=r(TQr,"VanConfig"),TQr.forEach(t),XYe=r(v3e," (VAN model)"),v3e.forEach(t),zYe=i(y),ig=n(y,"LI",{});var F3e=s(ig);ute=n(F3e,"STRONG",{});var MQr=s(ute);WYe=r(MQr,"vilt"),MQr.forEach(t),QYe=r(F3e," \u2014 "),zS=n(F3e,"A",{href:!0});var EQr=s(zS);HYe=r(EQr,"ViltConfig"),EQr.forEach(t),UYe=r(F3e," (ViLT model)"),F3e.forEach(t),JYe=i(y),dg=n(y,"LI",{});var T3e=s(dg);bte=n(T3e,"STRONG",{});var CQr=s(bte);YYe=r(CQr,"vision-encoder-decoder"),CQr.forEach(t),KYe=r(T3e," \u2014 "),WS=n(T3e,"A",{href:!0});var wQr=s(WS);ZYe=r(wQr,"VisionEncoderDecoderConfig"),wQr.forEach(t),eKe=r(T3e," (Vision Encoder decoder model)"),T3e.forEach(t),oKe=i(y),cg=n(y,"LI",{});var M3e=s(cg);vte=n(M3e,"STRONG",{});var AQr=s(vte);rKe=r(AQr,"vision-text-dual-encoder"),AQr.forEach(t),tKe=r(M3e," \u2014 "),QS=n(M3e,"A",{href:!0});var yQr=s(QS);aKe=r(yQr,"VisionTextDualEncoderConfig"),yQr.forEach(t),nKe=r(M3e," (VisionTextDualEncoder model)"),M3e.forEach(t),sKe=i(y),fg=n(y,"LI",{});var E3e=s(fg);Fte=n(E3e,"STRONG",{});var LQr=s(Fte);lKe=r(LQr,"visual_bert"),LQr.forEach(t),iKe=r(E3e," \u2014 "),HS=n(E3e,"A",{href:!0});var xQr=s(HS);dKe=r(xQr,"VisualBertConfig"),xQr.forEach(t),cKe=r(E3e," (VisualBert model)"),E3e.forEach(t),fKe=i(y),mg=n(y,"LI",{});var C3e=s(mg);Tte=n(C3e,"STRONG",{});var $Qr=s(Tte);mKe=r($Qr,"vit"),$Qr.forEach(t),gKe=r(C3e," \u2014 "),US=n(C3e,"A",{href:!0});var kQr=s(US);hKe=r(kQr,"ViTConfig"),kQr.forEach(t),pKe=r(C3e," (ViT model)"),C3e.forEach(t),_Ke=i(y),gg=n(y,"LI",{});var w3e=s(gg);Mte=n(w3e,"STRONG",{});var SQr=s(Mte);uKe=r(SQr,"vit_mae"),SQr.forEach(t),bKe=r(w3e," \u2014 "),JS=n(w3e,"A",{href:!0});var RQr=s(JS);vKe=r(RQr,"ViTMAEConfig"),RQr.forEach(t),FKe=r(w3e," (ViTMAE model)"),w3e.forEach(t),TKe=i(y),hg=n(y,"LI",{});var A3e=s(hg);Ete=n(A3e,"STRONG",{});var PQr=s(Ete);MKe=r(PQr,"wav2vec2"),PQr.forEach(t),EKe=r(A3e," \u2014 "),YS=n(A3e,"A",{href:!0});var BQr=s(YS);CKe=r(BQr,"Wav2Vec2Config"),BQr.forEach(t),wKe=r(A3e," (Wav2Vec2 model)"),A3e.forEach(t),AKe=i(y),pg=n(y,"LI",{});var y3e=s(pg);Cte=n(y3e,"STRONG",{});var IQr=s(Cte);yKe=r(IQr,"wav2vec2-conformer"),IQr.forEach(t),LKe=r(y3e," \u2014 "),KS=n(y3e,"A",{href:!0});var NQr=s(KS);xKe=r(NQr,"Wav2Vec2ConformerConfig"),NQr.forEach(t),$Ke=r(y3e," (Wav2Vec2-Conformer model)"),y3e.forEach(t),kKe=i(y),_g=n(y,"LI",{});var L3e=s(_g);wte=n(L3e,"STRONG",{});var qQr=s(wte);SKe=r(qQr,"wavlm"),qQr.forEach(t),RKe=r(L3e," \u2014 "),ZS=n(L3e,"A",{href:!0});var jQr=s(ZS);PKe=r(jQr,"WavLMConfig"),jQr.forEach(t),BKe=r(L3e," (WavLM model)"),L3e.forEach(t),IKe=i(y),ug=n(y,"LI",{});var x3e=s(ug);Ate=n(x3e,"STRONG",{});var DQr=s(Ate);NKe=r(DQr,"xglm"),DQr.forEach(t),qKe=r(x3e," \u2014 "),eR=n(x3e,"A",{href:!0});var GQr=s(eR);jKe=r(GQr,"XGLMConfig"),GQr.forEach(t),DKe=r(x3e," (XGLM model)"),x3e.forEach(t),GKe=i(y),bg=n(y,"LI",{});var $3e=s(bg);yte=n($3e,"STRONG",{});var OQr=s(yte);OKe=r(OQr,"xlm"),OQr.forEach(t),VKe=r($3e," \u2014 "),oR=n($3e,"A",{href:!0});var VQr=s(oR);XKe=r(VQr,"XLMConfig"),VQr.forEach(t),zKe=r($3e," (XLM model)"),$3e.forEach(t),WKe=i(y),vg=n(y,"LI",{});var k3e=s(vg);Lte=n(k3e,"STRONG",{});var XQr=s(Lte);QKe=r(XQr,"xlm-prophetnet"),XQr.forEach(t),HKe=r(k3e," \u2014 "),rR=n(k3e,"A",{href:!0});var zQr=s(rR);UKe=r(zQr,"XLMProphetNetConfig"),zQr.forEach(t),JKe=r(k3e," (XLMProphetNet model)"),k3e.forEach(t),YKe=i(y),Fg=n(y,"LI",{});var S3e=s(Fg);xte=n(S3e,"STRONG",{});var WQr=s(xte);KKe=r(WQr,"xlm-roberta"),WQr.forEach(t),ZKe=r(S3e," \u2014 "),tR=n(S3e,"A",{href:!0});var QQr=s(tR);eZe=r(QQr,"XLMRobertaConfig"),QQr.forEach(t),oZe=r(S3e," (XLM-RoBERTa model)"),S3e.forEach(t),rZe=i(y),Tg=n(y,"LI",{});var R3e=s(Tg);$te=n(R3e,"STRONG",{});var HQr=s($te);tZe=r(HQr,"xlm-roberta-xl"),HQr.forEach(t),aZe=r(R3e," \u2014 "),aR=n(R3e,"A",{href:!0});var UQr=s(aR);nZe=r(UQr,"XLMRobertaXLConfig"),UQr.forEach(t),sZe=r(R3e," (XLM-RoBERTa-XL model)"),R3e.forEach(t),lZe=i(y),Mg=n(y,"LI",{});var P3e=s(Mg);kte=n(P3e,"STRONG",{});var JQr=s(kte);iZe=r(JQr,"xlnet"),JQr.forEach(t),dZe=r(P3e," \u2014 "),nR=n(P3e,"A",{href:!0});var YQr=s(nR);cZe=r(YQr,"XLNetConfig"),YQr.forEach(t),fZe=r(P3e," (XLNet model)"),P3e.forEach(t),mZe=i(y),Eg=n(y,"LI",{});var B3e=s(Eg);Ste=n(B3e,"STRONG",{});var KQr=s(Ste);gZe=r(KQr,"yolos"),KQr.forEach(t),hZe=r(B3e," \u2014 "),sR=n(B3e,"A",{href:!0});var ZQr=s(sR);pZe=r(ZQr,"YolosConfig"),ZQr.forEach(t),_Ze=r(B3e," (YOLOS model)"),B3e.forEach(t),uZe=i(y),Cg=n(y,"LI",{});var I3e=s(Cg);Rte=n(I3e,"STRONG",{});var eHr=s(Rte);bZe=r(eHr,"yoso"),eHr.forEach(t),vZe=r(I3e," \u2014 "),lR=n(I3e,"A",{href:!0});var oHr=s(lR);FZe=r(oHr,"YosoConfig"),oHr.forEach(t),TZe=r(I3e," (YOSO model)"),I3e.forEach(t),y.forEach(t),MZe=i(ot),T(wg.$$.fragment,ot),ot.forEach(t),EZe=i(et),Ag=n(et,"DIV",{class:!0});var kDe=s(Ag);T(G0.$$.fragment,kDe),CZe=i(kDe),Pte=n(kDe,"P",{});var rHr=s(Pte);wZe=r(rHr,"Register a new configuration for this class."),rHr.forEach(t),kDe.forEach(t),et.forEach(t),Pqe=i(f),Mi=n(f,"H2",{class:!0});var SDe=s(Mi);yg=n(SDe,"A",{id:!0,class:!0,href:!0});var tHr=s(yg);Bte=n(tHr,"SPAN",{});var aHr=s(Bte);T(O0.$$.fragment,aHr),aHr.forEach(t),tHr.forEach(t),AZe=i(SDe),Ite=n(SDe,"SPAN",{});var nHr=s(Ite);yZe=r(nHr,"AutoTokenizer"),nHr.forEach(t),SDe.forEach(t),Bqe=i(f),wo=n(f,"DIV",{class:!0});var qs=s(wo);T(V0.$$.fragment,qs),LZe=i(qs),X0=n(qs,"P",{});var RDe=s(X0);xZe=r(RDe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),iR=n(RDe,"A",{href:!0});var sHr=s(iR);$Ze=r(sHr,"AutoTokenizer.from_pretrained()"),sHr.forEach(t),kZe=r(RDe," class method."),RDe.forEach(t),SZe=i(qs),z0=n(qs,"P",{});var PDe=s(z0);RZe=r(PDe,"This class cannot be instantiated directly using "),Nte=n(PDe,"CODE",{});var lHr=s(Nte);PZe=r(lHr,"__init__()"),lHr.forEach(t),BZe=r(PDe," (throws an error)."),PDe.forEach(t),IZe=i(qs),Cr=n(qs,"DIV",{class:!0});var js=s(Cr);T(W0.$$.fragment,js),NZe=i(js),qte=n(js,"P",{});var iHr=s(qte);qZe=r(iHr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),iHr.forEach(t),jZe=i(js),Aa=n(js,"P",{});var I3=s(Aa);DZe=r(I3,"The tokenizer class to instantiate is selected based on the "),jte=n(I3,"CODE",{});var dHr=s(jte);GZe=r(dHr,"model_type"),dHr.forEach(t),OZe=r(I3,` property of the config object (either
passed as an argument or loaded from `),Dte=n(I3,"CODE",{});var cHr=s(Dte);VZe=r(cHr,"pretrained_model_name_or_path"),cHr.forEach(t),XZe=r(I3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gte=n(I3,"CODE",{});var fHr=s(Gte);zZe=r(fHr,"pretrained_model_name_or_path"),fHr.forEach(t),WZe=r(I3,":"),I3.forEach(t),QZe=i(js),k=n(js,"UL",{});var S=s(k);Sn=n(S,"LI",{});var Qx=s(Sn);Ote=n(Qx,"STRONG",{});var mHr=s(Ote);HZe=r(mHr,"albert"),mHr.forEach(t),UZe=r(Qx," \u2014 "),dR=n(Qx,"A",{href:!0});var gHr=s(dR);JZe=r(gHr,"AlbertTokenizer"),gHr.forEach(t),YZe=r(Qx," or "),cR=n(Qx,"A",{href:!0});var hHr=s(cR);KZe=r(hHr,"AlbertTokenizerFast"),hHr.forEach(t),ZZe=r(Qx," (ALBERT model)"),Qx.forEach(t),eeo=i(S),Rn=n(S,"LI",{});var Hx=s(Rn);Vte=n(Hx,"STRONG",{});var pHr=s(Vte);oeo=r(pHr,"bart"),pHr.forEach(t),reo=r(Hx," \u2014 "),fR=n(Hx,"A",{href:!0});var _Hr=s(fR);teo=r(_Hr,"BartTokenizer"),_Hr.forEach(t),aeo=r(Hx," or "),mR=n(Hx,"A",{href:!0});var uHr=s(mR);neo=r(uHr,"BartTokenizerFast"),uHr.forEach(t),seo=r(Hx," (BART model)"),Hx.forEach(t),leo=i(S),Pn=n(S,"LI",{});var Ux=s(Pn);Xte=n(Ux,"STRONG",{});var bHr=s(Xte);ieo=r(bHr,"barthez"),bHr.forEach(t),deo=r(Ux," \u2014 "),gR=n(Ux,"A",{href:!0});var vHr=s(gR);ceo=r(vHr,"BarthezTokenizer"),vHr.forEach(t),feo=r(Ux," or "),hR=n(Ux,"A",{href:!0});var FHr=s(hR);meo=r(FHr,"BarthezTokenizerFast"),FHr.forEach(t),geo=r(Ux," (BARThez model)"),Ux.forEach(t),heo=i(S),Lg=n(S,"LI",{});var N3e=s(Lg);zte=n(N3e,"STRONG",{});var THr=s(zte);peo=r(THr,"bartpho"),THr.forEach(t),_eo=r(N3e," \u2014 "),pR=n(N3e,"A",{href:!0});var MHr=s(pR);ueo=r(MHr,"BartphoTokenizer"),MHr.forEach(t),beo=r(N3e," (BARTpho model)"),N3e.forEach(t),veo=i(S),Bn=n(S,"LI",{});var Jx=s(Bn);Wte=n(Jx,"STRONG",{});var EHr=s(Wte);Feo=r(EHr,"bert"),EHr.forEach(t),Teo=r(Jx," \u2014 "),_R=n(Jx,"A",{href:!0});var CHr=s(_R);Meo=r(CHr,"BertTokenizer"),CHr.forEach(t),Eeo=r(Jx," or "),uR=n(Jx,"A",{href:!0});var wHr=s(uR);Ceo=r(wHr,"BertTokenizerFast"),wHr.forEach(t),weo=r(Jx," (BERT model)"),Jx.forEach(t),Aeo=i(S),xg=n(S,"LI",{});var q3e=s(xg);Qte=n(q3e,"STRONG",{});var AHr=s(Qte);yeo=r(AHr,"bert-generation"),AHr.forEach(t),Leo=r(q3e," \u2014 "),bR=n(q3e,"A",{href:!0});var yHr=s(bR);xeo=r(yHr,"BertGenerationTokenizer"),yHr.forEach(t),$eo=r(q3e," (Bert Generation model)"),q3e.forEach(t),keo=i(S),$g=n(S,"LI",{});var j3e=s($g);Hte=n(j3e,"STRONG",{});var LHr=s(Hte);Seo=r(LHr,"bert-japanese"),LHr.forEach(t),Reo=r(j3e," \u2014 "),vR=n(j3e,"A",{href:!0});var xHr=s(vR);Peo=r(xHr,"BertJapaneseTokenizer"),xHr.forEach(t),Beo=r(j3e," (BertJapanese model)"),j3e.forEach(t),Ieo=i(S),kg=n(S,"LI",{});var D3e=s(kg);Ute=n(D3e,"STRONG",{});var $Hr=s(Ute);Neo=r($Hr,"bertweet"),$Hr.forEach(t),qeo=r(D3e," \u2014 "),FR=n(D3e,"A",{href:!0});var kHr=s(FR);jeo=r(kHr,"BertweetTokenizer"),kHr.forEach(t),Deo=r(D3e," (Bertweet model)"),D3e.forEach(t),Geo=i(S),In=n(S,"LI",{});var Yx=s(In);Jte=n(Yx,"STRONG",{});var SHr=s(Jte);Oeo=r(SHr,"big_bird"),SHr.forEach(t),Veo=r(Yx," \u2014 "),TR=n(Yx,"A",{href:!0});var RHr=s(TR);Xeo=r(RHr,"BigBirdTokenizer"),RHr.forEach(t),zeo=r(Yx," or "),MR=n(Yx,"A",{href:!0});var PHr=s(MR);Weo=r(PHr,"BigBirdTokenizerFast"),PHr.forEach(t),Qeo=r(Yx," (BigBird model)"),Yx.forEach(t),Heo=i(S),Nn=n(S,"LI",{});var Kx=s(Nn);Yte=n(Kx,"STRONG",{});var BHr=s(Yte);Ueo=r(BHr,"bigbird_pegasus"),BHr.forEach(t),Jeo=r(Kx," \u2014 "),ER=n(Kx,"A",{href:!0});var IHr=s(ER);Yeo=r(IHr,"PegasusTokenizer"),IHr.forEach(t),Keo=r(Kx," or "),CR=n(Kx,"A",{href:!0});var NHr=s(CR);Zeo=r(NHr,"PegasusTokenizerFast"),NHr.forEach(t),eoo=r(Kx," (BigBirdPegasus model)"),Kx.forEach(t),ooo=i(S),qn=n(S,"LI",{});var Zx=s(qn);Kte=n(Zx,"STRONG",{});var qHr=s(Kte);roo=r(qHr,"blenderbot"),qHr.forEach(t),too=r(Zx," \u2014 "),wR=n(Zx,"A",{href:!0});var jHr=s(wR);aoo=r(jHr,"BlenderbotTokenizer"),jHr.forEach(t),noo=r(Zx," or "),AR=n(Zx,"A",{href:!0});var DHr=s(AR);soo=r(DHr,"BlenderbotTokenizerFast"),DHr.forEach(t),loo=r(Zx," (Blenderbot model)"),Zx.forEach(t),ioo=i(S),Sg=n(S,"LI",{});var G3e=s(Sg);Zte=n(G3e,"STRONG",{});var GHr=s(Zte);doo=r(GHr,"blenderbot-small"),GHr.forEach(t),coo=r(G3e," \u2014 "),yR=n(G3e,"A",{href:!0});var OHr=s(yR);foo=r(OHr,"BlenderbotSmallTokenizer"),OHr.forEach(t),moo=r(G3e," (BlenderbotSmall model)"),G3e.forEach(t),goo=i(S),Rg=n(S,"LI",{});var O3e=s(Rg);eae=n(O3e,"STRONG",{});var VHr=s(eae);hoo=r(VHr,"byt5"),VHr.forEach(t),poo=r(O3e," \u2014 "),LR=n(O3e,"A",{href:!0});var XHr=s(LR);_oo=r(XHr,"ByT5Tokenizer"),XHr.forEach(t),uoo=r(O3e," (ByT5 model)"),O3e.forEach(t),boo=i(S),jn=n(S,"LI",{});var e$=s(jn);oae=n(e$,"STRONG",{});var zHr=s(oae);voo=r(zHr,"camembert"),zHr.forEach(t),Foo=r(e$," \u2014 "),xR=n(e$,"A",{href:!0});var WHr=s(xR);Too=r(WHr,"CamembertTokenizer"),WHr.forEach(t),Moo=r(e$," or "),$R=n(e$,"A",{href:!0});var QHr=s($R);Eoo=r(QHr,"CamembertTokenizerFast"),QHr.forEach(t),Coo=r(e$," (CamemBERT model)"),e$.forEach(t),woo=i(S),Pg=n(S,"LI",{});var V3e=s(Pg);rae=n(V3e,"STRONG",{});var HHr=s(rae);Aoo=r(HHr,"canine"),HHr.forEach(t),yoo=r(V3e," \u2014 "),kR=n(V3e,"A",{href:!0});var UHr=s(kR);Loo=r(UHr,"CanineTokenizer"),UHr.forEach(t),xoo=r(V3e," (Canine model)"),V3e.forEach(t),$oo=i(S),Dn=n(S,"LI",{});var o$=s(Dn);tae=n(o$,"STRONG",{});var JHr=s(tae);koo=r(JHr,"clip"),JHr.forEach(t),Soo=r(o$," \u2014 "),SR=n(o$,"A",{href:!0});var YHr=s(SR);Roo=r(YHr,"CLIPTokenizer"),YHr.forEach(t),Poo=r(o$," or "),RR=n(o$,"A",{href:!0});var KHr=s(RR);Boo=r(KHr,"CLIPTokenizerFast"),KHr.forEach(t),Ioo=r(o$," (CLIP model)"),o$.forEach(t),Noo=i(S),Gn=n(S,"LI",{});var r$=s(Gn);aae=n(r$,"STRONG",{});var ZHr=s(aae);qoo=r(ZHr,"convbert"),ZHr.forEach(t),joo=r(r$," \u2014 "),PR=n(r$,"A",{href:!0});var eUr=s(PR);Doo=r(eUr,"ConvBertTokenizer"),eUr.forEach(t),Goo=r(r$," or "),BR=n(r$,"A",{href:!0});var oUr=s(BR);Ooo=r(oUr,"ConvBertTokenizerFast"),oUr.forEach(t),Voo=r(r$," (ConvBERT model)"),r$.forEach(t),Xoo=i(S),On=n(S,"LI",{});var t$=s(On);nae=n(t$,"STRONG",{});var rUr=s(nae);zoo=r(rUr,"cpm"),rUr.forEach(t),Woo=r(t$," \u2014 "),IR=n(t$,"A",{href:!0});var tUr=s(IR);Qoo=r(tUr,"CpmTokenizer"),tUr.forEach(t),Hoo=r(t$," or "),NR=n(t$,"A",{href:!0});var aUr=s(NR);Uoo=r(aUr,"CpmTokenizerFast"),aUr.forEach(t),Joo=r(t$," (CPM model)"),t$.forEach(t),Yoo=i(S),Bg=n(S,"LI",{});var X3e=s(Bg);sae=n(X3e,"STRONG",{});var nUr=s(sae);Koo=r(nUr,"ctrl"),nUr.forEach(t),Zoo=r(X3e," \u2014 "),qR=n(X3e,"A",{href:!0});var sUr=s(qR);ero=r(sUr,"CTRLTokenizer"),sUr.forEach(t),oro=r(X3e," (CTRL model)"),X3e.forEach(t),rro=i(S),Vn=n(S,"LI",{});var a$=s(Vn);lae=n(a$,"STRONG",{});var lUr=s(lae);tro=r(lUr,"data2vec-text"),lUr.forEach(t),aro=r(a$," \u2014 "),jR=n(a$,"A",{href:!0});var iUr=s(jR);nro=r(iUr,"RobertaTokenizer"),iUr.forEach(t),sro=r(a$," or "),DR=n(a$,"A",{href:!0});var dUr=s(DR);lro=r(dUr,"RobertaTokenizerFast"),dUr.forEach(t),iro=r(a$," (Data2VecText model)"),a$.forEach(t),dro=i(S),Xn=n(S,"LI",{});var n$=s(Xn);iae=n(n$,"STRONG",{});var cUr=s(iae);cro=r(cUr,"deberta"),cUr.forEach(t),fro=r(n$," \u2014 "),GR=n(n$,"A",{href:!0});var fUr=s(GR);mro=r(fUr,"DebertaTokenizer"),fUr.forEach(t),gro=r(n$," or "),OR=n(n$,"A",{href:!0});var mUr=s(OR);hro=r(mUr,"DebertaTokenizerFast"),mUr.forEach(t),pro=r(n$," (DeBERTa model)"),n$.forEach(t),_ro=i(S),zn=n(S,"LI",{});var s$=s(zn);dae=n(s$,"STRONG",{});var gUr=s(dae);uro=r(gUr,"deberta-v2"),gUr.forEach(t),bro=r(s$," \u2014 "),VR=n(s$,"A",{href:!0});var hUr=s(VR);vro=r(hUr,"DebertaV2Tokenizer"),hUr.forEach(t),Fro=r(s$," or "),XR=n(s$,"A",{href:!0});var pUr=s(XR);Tro=r(pUr,"DebertaV2TokenizerFast"),pUr.forEach(t),Mro=r(s$," (DeBERTa-v2 model)"),s$.forEach(t),Ero=i(S),Wn=n(S,"LI",{});var l$=s(Wn);cae=n(l$,"STRONG",{});var _Ur=s(cae);Cro=r(_Ur,"distilbert"),_Ur.forEach(t),wro=r(l$," \u2014 "),zR=n(l$,"A",{href:!0});var uUr=s(zR);Aro=r(uUr,"DistilBertTokenizer"),uUr.forEach(t),yro=r(l$," or "),WR=n(l$,"A",{href:!0});var bUr=s(WR);Lro=r(bUr,"DistilBertTokenizerFast"),bUr.forEach(t),xro=r(l$," (DistilBERT model)"),l$.forEach(t),$ro=i(S),Qn=n(S,"LI",{});var i$=s(Qn);fae=n(i$,"STRONG",{});var vUr=s(fae);kro=r(vUr,"dpr"),vUr.forEach(t),Sro=r(i$," \u2014 "),QR=n(i$,"A",{href:!0});var FUr=s(QR);Rro=r(FUr,"DPRQuestionEncoderTokenizer"),FUr.forEach(t),Pro=r(i$," or "),HR=n(i$,"A",{href:!0});var TUr=s(HR);Bro=r(TUr,"DPRQuestionEncoderTokenizerFast"),TUr.forEach(t),Iro=r(i$," (DPR model)"),i$.forEach(t),Nro=i(S),Hn=n(S,"LI",{});var d$=s(Hn);mae=n(d$,"STRONG",{});var MUr=s(mae);qro=r(MUr,"electra"),MUr.forEach(t),jro=r(d$," \u2014 "),UR=n(d$,"A",{href:!0});var EUr=s(UR);Dro=r(EUr,"ElectraTokenizer"),EUr.forEach(t),Gro=r(d$," or "),JR=n(d$,"A",{href:!0});var CUr=s(JR);Oro=r(CUr,"ElectraTokenizerFast"),CUr.forEach(t),Vro=r(d$," (ELECTRA model)"),d$.forEach(t),Xro=i(S),Ig=n(S,"LI",{});var z3e=s(Ig);gae=n(z3e,"STRONG",{});var wUr=s(gae);zro=r(wUr,"flaubert"),wUr.forEach(t),Wro=r(z3e," \u2014 "),YR=n(z3e,"A",{href:!0});var AUr=s(YR);Qro=r(AUr,"FlaubertTokenizer"),AUr.forEach(t),Hro=r(z3e," (FlauBERT model)"),z3e.forEach(t),Uro=i(S),Un=n(S,"LI",{});var c$=s(Un);hae=n(c$,"STRONG",{});var yUr=s(hae);Jro=r(yUr,"fnet"),yUr.forEach(t),Yro=r(c$," \u2014 "),KR=n(c$,"A",{href:!0});var LUr=s(KR);Kro=r(LUr,"FNetTokenizer"),LUr.forEach(t),Zro=r(c$," or "),ZR=n(c$,"A",{href:!0});var xUr=s(ZR);eto=r(xUr,"FNetTokenizerFast"),xUr.forEach(t),oto=r(c$," (FNet model)"),c$.forEach(t),rto=i(S),Ng=n(S,"LI",{});var W3e=s(Ng);pae=n(W3e,"STRONG",{});var $Ur=s(pae);tto=r($Ur,"fsmt"),$Ur.forEach(t),ato=r(W3e," \u2014 "),eP=n(W3e,"A",{href:!0});var kUr=s(eP);nto=r(kUr,"FSMTTokenizer"),kUr.forEach(t),sto=r(W3e," (FairSeq Machine-Translation model)"),W3e.forEach(t),lto=i(S),Jn=n(S,"LI",{});var f$=s(Jn);_ae=n(f$,"STRONG",{});var SUr=s(_ae);ito=r(SUr,"funnel"),SUr.forEach(t),dto=r(f$," \u2014 "),oP=n(f$,"A",{href:!0});var RUr=s(oP);cto=r(RUr,"FunnelTokenizer"),RUr.forEach(t),fto=r(f$," or "),rP=n(f$,"A",{href:!0});var PUr=s(rP);mto=r(PUr,"FunnelTokenizerFast"),PUr.forEach(t),gto=r(f$," (Funnel Transformer model)"),f$.forEach(t),hto=i(S),Yn=n(S,"LI",{});var m$=s(Yn);uae=n(m$,"STRONG",{});var BUr=s(uae);pto=r(BUr,"gpt2"),BUr.forEach(t),_to=r(m$," \u2014 "),tP=n(m$,"A",{href:!0});var IUr=s(tP);uto=r(IUr,"GPT2Tokenizer"),IUr.forEach(t),bto=r(m$," or "),aP=n(m$,"A",{href:!0});var NUr=s(aP);vto=r(NUr,"GPT2TokenizerFast"),NUr.forEach(t),Fto=r(m$," (OpenAI GPT-2 model)"),m$.forEach(t),Tto=i(S),Kn=n(S,"LI",{});var g$=s(Kn);bae=n(g$,"STRONG",{});var qUr=s(bae);Mto=r(qUr,"gpt_neo"),qUr.forEach(t),Eto=r(g$," \u2014 "),nP=n(g$,"A",{href:!0});var jUr=s(nP);Cto=r(jUr,"GPT2Tokenizer"),jUr.forEach(t),wto=r(g$," or "),sP=n(g$,"A",{href:!0});var DUr=s(sP);Ato=r(DUr,"GPT2TokenizerFast"),DUr.forEach(t),yto=r(g$," (GPT Neo model)"),g$.forEach(t),Lto=i(S),qg=n(S,"LI",{});var Q3e=s(qg);vae=n(Q3e,"STRONG",{});var GUr=s(vae);xto=r(GUr,"gpt_neox"),GUr.forEach(t),$to=r(Q3e," \u2014 "),lP=n(Q3e,"A",{href:!0});var OUr=s(lP);kto=r(OUr,"GPTNeoXTokenizerFast"),OUr.forEach(t),Sto=r(Q3e," (GPT NeoX model)"),Q3e.forEach(t),Rto=i(S),Zn=n(S,"LI",{});var h$=s(Zn);Fae=n(h$,"STRONG",{});var VUr=s(Fae);Pto=r(VUr,"gptj"),VUr.forEach(t),Bto=r(h$," \u2014 "),iP=n(h$,"A",{href:!0});var XUr=s(iP);Ito=r(XUr,"GPT2Tokenizer"),XUr.forEach(t),Nto=r(h$," or "),dP=n(h$,"A",{href:!0});var zUr=s(dP);qto=r(zUr,"GPT2TokenizerFast"),zUr.forEach(t),jto=r(h$," (GPT-J model)"),h$.forEach(t),Dto=i(S),es=n(S,"LI",{});var p$=s(es);Tae=n(p$,"STRONG",{});var WUr=s(Tae);Gto=r(WUr,"herbert"),WUr.forEach(t),Oto=r(p$," \u2014 "),cP=n(p$,"A",{href:!0});var QUr=s(cP);Vto=r(QUr,"HerbertTokenizer"),QUr.forEach(t),Xto=r(p$," or "),fP=n(p$,"A",{href:!0});var HUr=s(fP);zto=r(HUr,"HerbertTokenizerFast"),HUr.forEach(t),Wto=r(p$," (HerBERT model)"),p$.forEach(t),Qto=i(S),jg=n(S,"LI",{});var H3e=s(jg);Mae=n(H3e,"STRONG",{});var UUr=s(Mae);Hto=r(UUr,"hubert"),UUr.forEach(t),Uto=r(H3e," \u2014 "),mP=n(H3e,"A",{href:!0});var JUr=s(mP);Jto=r(JUr,"Wav2Vec2CTCTokenizer"),JUr.forEach(t),Yto=r(H3e," (Hubert model)"),H3e.forEach(t),Kto=i(S),os=n(S,"LI",{});var _$=s(os);Eae=n(_$,"STRONG",{});var YUr=s(Eae);Zto=r(YUr,"ibert"),YUr.forEach(t),eao=r(_$," \u2014 "),gP=n(_$,"A",{href:!0});var KUr=s(gP);oao=r(KUr,"RobertaTokenizer"),KUr.forEach(t),rao=r(_$," or "),hP=n(_$,"A",{href:!0});var ZUr=s(hP);tao=r(ZUr,"RobertaTokenizerFast"),ZUr.forEach(t),aao=r(_$," (I-BERT model)"),_$.forEach(t),nao=i(S),rs=n(S,"LI",{});var u$=s(rs);Cae=n(u$,"STRONG",{});var eJr=s(Cae);sao=r(eJr,"layoutlm"),eJr.forEach(t),lao=r(u$," \u2014 "),pP=n(u$,"A",{href:!0});var oJr=s(pP);iao=r(oJr,"LayoutLMTokenizer"),oJr.forEach(t),dao=r(u$," or "),_P=n(u$,"A",{href:!0});var rJr=s(_P);cao=r(rJr,"LayoutLMTokenizerFast"),rJr.forEach(t),fao=r(u$," (LayoutLM model)"),u$.forEach(t),mao=i(S),ts=n(S,"LI",{});var b$=s(ts);wae=n(b$,"STRONG",{});var tJr=s(wae);gao=r(tJr,"layoutlmv2"),tJr.forEach(t),hao=r(b$," \u2014 "),uP=n(b$,"A",{href:!0});var aJr=s(uP);pao=r(aJr,"LayoutLMv2Tokenizer"),aJr.forEach(t),_ao=r(b$," or "),bP=n(b$,"A",{href:!0});var nJr=s(bP);uao=r(nJr,"LayoutLMv2TokenizerFast"),nJr.forEach(t),bao=r(b$," (LayoutLMv2 model)"),b$.forEach(t),vao=i(S),as=n(S,"LI",{});var v$=s(as);Aae=n(v$,"STRONG",{});var sJr=s(Aae);Fao=r(sJr,"layoutlmv3"),sJr.forEach(t),Tao=r(v$," \u2014 "),vP=n(v$,"A",{href:!0});var lJr=s(vP);Mao=r(lJr,"LayoutLMv3Tokenizer"),lJr.forEach(t),Eao=r(v$," or "),FP=n(v$,"A",{href:!0});var iJr=s(FP);Cao=r(iJr,"LayoutLMv3TokenizerFast"),iJr.forEach(t),wao=r(v$," (LayoutLMv3 model)"),v$.forEach(t),Aao=i(S),ns=n(S,"LI",{});var F$=s(ns);yae=n(F$,"STRONG",{});var dJr=s(yae);yao=r(dJr,"layoutxlm"),dJr.forEach(t),Lao=r(F$," \u2014 "),TP=n(F$,"A",{href:!0});var cJr=s(TP);xao=r(cJr,"LayoutXLMTokenizer"),cJr.forEach(t),$ao=r(F$," or "),MP=n(F$,"A",{href:!0});var fJr=s(MP);kao=r(fJr,"LayoutXLMTokenizerFast"),fJr.forEach(t),Sao=r(F$," (LayoutXLM model)"),F$.forEach(t),Rao=i(S),ss=n(S,"LI",{});var T$=s(ss);Lae=n(T$,"STRONG",{});var mJr=s(Lae);Pao=r(mJr,"led"),mJr.forEach(t),Bao=r(T$," \u2014 "),EP=n(T$,"A",{href:!0});var gJr=s(EP);Iao=r(gJr,"LEDTokenizer"),gJr.forEach(t),Nao=r(T$," or "),CP=n(T$,"A",{href:!0});var hJr=s(CP);qao=r(hJr,"LEDTokenizerFast"),hJr.forEach(t),jao=r(T$," (LED model)"),T$.forEach(t),Dao=i(S),ls=n(S,"LI",{});var M$=s(ls);xae=n(M$,"STRONG",{});var pJr=s(xae);Gao=r(pJr,"longformer"),pJr.forEach(t),Oao=r(M$," \u2014 "),wP=n(M$,"A",{href:!0});var _Jr=s(wP);Vao=r(_Jr,"LongformerTokenizer"),_Jr.forEach(t),Xao=r(M$," or "),AP=n(M$,"A",{href:!0});var uJr=s(AP);zao=r(uJr,"LongformerTokenizerFast"),uJr.forEach(t),Wao=r(M$," (Longformer model)"),M$.forEach(t),Qao=i(S),is=n(S,"LI",{});var E$=s(is);$ae=n(E$,"STRONG",{});var bJr=s($ae);Hao=r(bJr,"longt5"),bJr.forEach(t),Uao=r(E$," \u2014 "),yP=n(E$,"A",{href:!0});var vJr=s(yP);Jao=r(vJr,"T5Tokenizer"),vJr.forEach(t),Yao=r(E$," or "),LP=n(E$,"A",{href:!0});var FJr=s(LP);Kao=r(FJr,"T5TokenizerFast"),FJr.forEach(t),Zao=r(E$," (LongT5 model)"),E$.forEach(t),eno=i(S),Dg=n(S,"LI",{});var U3e=s(Dg);kae=n(U3e,"STRONG",{});var TJr=s(kae);ono=r(TJr,"luke"),TJr.forEach(t),rno=r(U3e," \u2014 "),xP=n(U3e,"A",{href:!0});var MJr=s(xP);tno=r(MJr,"LukeTokenizer"),MJr.forEach(t),ano=r(U3e," (LUKE model)"),U3e.forEach(t),nno=i(S),ds=n(S,"LI",{});var C$=s(ds);Sae=n(C$,"STRONG",{});var EJr=s(Sae);sno=r(EJr,"lxmert"),EJr.forEach(t),lno=r(C$," \u2014 "),$P=n(C$,"A",{href:!0});var CJr=s($P);ino=r(CJr,"LxmertTokenizer"),CJr.forEach(t),dno=r(C$," or "),kP=n(C$,"A",{href:!0});var wJr=s(kP);cno=r(wJr,"LxmertTokenizerFast"),wJr.forEach(t),fno=r(C$," (LXMERT model)"),C$.forEach(t),mno=i(S),Gg=n(S,"LI",{});var J3e=s(Gg);Rae=n(J3e,"STRONG",{});var AJr=s(Rae);gno=r(AJr,"m2m_100"),AJr.forEach(t),hno=r(J3e," \u2014 "),SP=n(J3e,"A",{href:!0});var yJr=s(SP);pno=r(yJr,"M2M100Tokenizer"),yJr.forEach(t),_no=r(J3e," (M2M100 model)"),J3e.forEach(t),uno=i(S),Og=n(S,"LI",{});var Y3e=s(Og);Pae=n(Y3e,"STRONG",{});var LJr=s(Pae);bno=r(LJr,"marian"),LJr.forEach(t),vno=r(Y3e," \u2014 "),RP=n(Y3e,"A",{href:!0});var xJr=s(RP);Fno=r(xJr,"MarianTokenizer"),xJr.forEach(t),Tno=r(Y3e," (Marian model)"),Y3e.forEach(t),Mno=i(S),cs=n(S,"LI",{});var w$=s(cs);Bae=n(w$,"STRONG",{});var $Jr=s(Bae);Eno=r($Jr,"mbart"),$Jr.forEach(t),Cno=r(w$," \u2014 "),PP=n(w$,"A",{href:!0});var kJr=s(PP);wno=r(kJr,"MBartTokenizer"),kJr.forEach(t),Ano=r(w$," or "),BP=n(w$,"A",{href:!0});var SJr=s(BP);yno=r(SJr,"MBartTokenizerFast"),SJr.forEach(t),Lno=r(w$," (mBART model)"),w$.forEach(t),xno=i(S),fs=n(S,"LI",{});var A$=s(fs);Iae=n(A$,"STRONG",{});var RJr=s(Iae);$no=r(RJr,"mbart50"),RJr.forEach(t),kno=r(A$," \u2014 "),IP=n(A$,"A",{href:!0});var PJr=s(IP);Sno=r(PJr,"MBart50Tokenizer"),PJr.forEach(t),Rno=r(A$," or "),NP=n(A$,"A",{href:!0});var BJr=s(NP);Pno=r(BJr,"MBart50TokenizerFast"),BJr.forEach(t),Bno=r(A$," (mBART-50 model)"),A$.forEach(t),Ino=i(S),ms=n(S,"LI",{});var y$=s(ms);Nae=n(y$,"STRONG",{});var IJr=s(Nae);Nno=r(IJr,"megatron-bert"),IJr.forEach(t),qno=r(y$," \u2014 "),qP=n(y$,"A",{href:!0});var NJr=s(qP);jno=r(NJr,"BertTokenizer"),NJr.forEach(t),Dno=r(y$," or "),jP=n(y$,"A",{href:!0});var qJr=s(jP);Gno=r(qJr,"BertTokenizerFast"),qJr.forEach(t),Ono=r(y$," (MegatronBert model)"),y$.forEach(t),Vno=i(S),Vg=n(S,"LI",{});var K3e=s(Vg);qae=n(K3e,"STRONG",{});var jJr=s(qae);Xno=r(jJr,"mluke"),jJr.forEach(t),zno=r(K3e," \u2014 "),DP=n(K3e,"A",{href:!0});var DJr=s(DP);Wno=r(DJr,"MLukeTokenizer"),DJr.forEach(t),Qno=r(K3e," (mLUKE model)"),K3e.forEach(t),Hno=i(S),gs=n(S,"LI",{});var L$=s(gs);jae=n(L$,"STRONG",{});var GJr=s(jae);Uno=r(GJr,"mobilebert"),GJr.forEach(t),Jno=r(L$," \u2014 "),GP=n(L$,"A",{href:!0});var OJr=s(GP);Yno=r(OJr,"MobileBertTokenizer"),OJr.forEach(t),Kno=r(L$," or "),OP=n(L$,"A",{href:!0});var VJr=s(OP);Zno=r(VJr,"MobileBertTokenizerFast"),VJr.forEach(t),eso=r(L$," (MobileBERT model)"),L$.forEach(t),oso=i(S),hs=n(S,"LI",{});var x$=s(hs);Dae=n(x$,"STRONG",{});var XJr=s(Dae);rso=r(XJr,"mpnet"),XJr.forEach(t),tso=r(x$," \u2014 "),VP=n(x$,"A",{href:!0});var zJr=s(VP);aso=r(zJr,"MPNetTokenizer"),zJr.forEach(t),nso=r(x$," or "),XP=n(x$,"A",{href:!0});var WJr=s(XP);sso=r(WJr,"MPNetTokenizerFast"),WJr.forEach(t),lso=r(x$," (MPNet model)"),x$.forEach(t),iso=i(S),ps=n(S,"LI",{});var $$=s(ps);Gae=n($$,"STRONG",{});var QJr=s(Gae);dso=r(QJr,"mt5"),QJr.forEach(t),cso=r($$," \u2014 "),zP=n($$,"A",{href:!0});var HJr=s(zP);fso=r(HJr,"MT5Tokenizer"),HJr.forEach(t),mso=r($$," or "),WP=n($$,"A",{href:!0});var UJr=s(WP);gso=r(UJr,"MT5TokenizerFast"),UJr.forEach(t),hso=r($$," (mT5 model)"),$$.forEach(t),pso=i(S),_s=n(S,"LI",{});var k$=s(_s);Oae=n(k$,"STRONG",{});var JJr=s(Oae);_so=r(JJr,"nystromformer"),JJr.forEach(t),uso=r(k$," \u2014 "),QP=n(k$,"A",{href:!0});var YJr=s(QP);bso=r(YJr,"AlbertTokenizer"),YJr.forEach(t),vso=r(k$," or "),HP=n(k$,"A",{href:!0});var KJr=s(HP);Fso=r(KJr,"AlbertTokenizerFast"),KJr.forEach(t),Tso=r(k$," (Nystromformer model)"),k$.forEach(t),Mso=i(S),us=n(S,"LI",{});var S$=s(us);Vae=n(S$,"STRONG",{});var ZJr=s(Vae);Eso=r(ZJr,"openai-gpt"),ZJr.forEach(t),Cso=r(S$," \u2014 "),UP=n(S$,"A",{href:!0});var eYr=s(UP);wso=r(eYr,"OpenAIGPTTokenizer"),eYr.forEach(t),Aso=r(S$," or "),JP=n(S$,"A",{href:!0});var oYr=s(JP);yso=r(oYr,"OpenAIGPTTokenizerFast"),oYr.forEach(t),Lso=r(S$," (OpenAI GPT model)"),S$.forEach(t),xso=i(S),Xg=n(S,"LI",{});var Z3e=s(Xg);Xae=n(Z3e,"STRONG",{});var rYr=s(Xae);$so=r(rYr,"opt"),rYr.forEach(t),kso=r(Z3e," \u2014 "),YP=n(Z3e,"A",{href:!0});var tYr=s(YP);Sso=r(tYr,"GPT2Tokenizer"),tYr.forEach(t),Rso=r(Z3e," (OPT model)"),Z3e.forEach(t),Pso=i(S),bs=n(S,"LI",{});var R$=s(bs);zae=n(R$,"STRONG",{});var aYr=s(zae);Bso=r(aYr,"pegasus"),aYr.forEach(t),Iso=r(R$," \u2014 "),KP=n(R$,"A",{href:!0});var nYr=s(KP);Nso=r(nYr,"PegasusTokenizer"),nYr.forEach(t),qso=r(R$," or "),ZP=n(R$,"A",{href:!0});var sYr=s(ZP);jso=r(sYr,"PegasusTokenizerFast"),sYr.forEach(t),Dso=r(R$," (Pegasus model)"),R$.forEach(t),Gso=i(S),zg=n(S,"LI",{});var ewe=s(zg);Wae=n(ewe,"STRONG",{});var lYr=s(Wae);Oso=r(lYr,"perceiver"),lYr.forEach(t),Vso=r(ewe," \u2014 "),eB=n(ewe,"A",{href:!0});var iYr=s(eB);Xso=r(iYr,"PerceiverTokenizer"),iYr.forEach(t),zso=r(ewe," (Perceiver model)"),ewe.forEach(t),Wso=i(S),Wg=n(S,"LI",{});var owe=s(Wg);Qae=n(owe,"STRONG",{});var dYr=s(Qae);Qso=r(dYr,"phobert"),dYr.forEach(t),Hso=r(owe," \u2014 "),oB=n(owe,"A",{href:!0});var cYr=s(oB);Uso=r(cYr,"PhobertTokenizer"),cYr.forEach(t),Jso=r(owe," (PhoBERT model)"),owe.forEach(t),Yso=i(S),Qg=n(S,"LI",{});var rwe=s(Qg);Hae=n(rwe,"STRONG",{});var fYr=s(Hae);Kso=r(fYr,"plbart"),fYr.forEach(t),Zso=r(rwe," \u2014 "),rB=n(rwe,"A",{href:!0});var mYr=s(rB);elo=r(mYr,"PLBartTokenizer"),mYr.forEach(t),olo=r(rwe," (PLBart model)"),rwe.forEach(t),rlo=i(S),Hg=n(S,"LI",{});var twe=s(Hg);Uae=n(twe,"STRONG",{});var gYr=s(Uae);tlo=r(gYr,"prophetnet"),gYr.forEach(t),alo=r(twe," \u2014 "),tB=n(twe,"A",{href:!0});var hYr=s(tB);nlo=r(hYr,"ProphetNetTokenizer"),hYr.forEach(t),slo=r(twe," (ProphetNet model)"),twe.forEach(t),llo=i(S),vs=n(S,"LI",{});var P$=s(vs);Jae=n(P$,"STRONG",{});var pYr=s(Jae);ilo=r(pYr,"qdqbert"),pYr.forEach(t),dlo=r(P$," \u2014 "),aB=n(P$,"A",{href:!0});var _Yr=s(aB);clo=r(_Yr,"BertTokenizer"),_Yr.forEach(t),flo=r(P$," or "),nB=n(P$,"A",{href:!0});var uYr=s(nB);mlo=r(uYr,"BertTokenizerFast"),uYr.forEach(t),glo=r(P$," (QDQBert model)"),P$.forEach(t),hlo=i(S),Ug=n(S,"LI",{});var awe=s(Ug);Yae=n(awe,"STRONG",{});var bYr=s(Yae);plo=r(bYr,"rag"),bYr.forEach(t),_lo=r(awe," \u2014 "),sB=n(awe,"A",{href:!0});var vYr=s(sB);ulo=r(vYr,"RagTokenizer"),vYr.forEach(t),blo=r(awe," (RAG model)"),awe.forEach(t),vlo=i(S),Fs=n(S,"LI",{});var B$=s(Fs);Kae=n(B$,"STRONG",{});var FYr=s(Kae);Flo=r(FYr,"realm"),FYr.forEach(t),Tlo=r(B$," \u2014 "),lB=n(B$,"A",{href:!0});var TYr=s(lB);Mlo=r(TYr,"RealmTokenizer"),TYr.forEach(t),Elo=r(B$," or "),iB=n(B$,"A",{href:!0});var MYr=s(iB);Clo=r(MYr,"RealmTokenizerFast"),MYr.forEach(t),wlo=r(B$," (Realm model)"),B$.forEach(t),Alo=i(S),Ts=n(S,"LI",{});var I$=s(Ts);Zae=n(I$,"STRONG",{});var EYr=s(Zae);ylo=r(EYr,"reformer"),EYr.forEach(t),Llo=r(I$," \u2014 "),dB=n(I$,"A",{href:!0});var CYr=s(dB);xlo=r(CYr,"ReformerTokenizer"),CYr.forEach(t),$lo=r(I$," or "),cB=n(I$,"A",{href:!0});var wYr=s(cB);klo=r(wYr,"ReformerTokenizerFast"),wYr.forEach(t),Slo=r(I$," (Reformer model)"),I$.forEach(t),Rlo=i(S),Ms=n(S,"LI",{});var N$=s(Ms);ene=n(N$,"STRONG",{});var AYr=s(ene);Plo=r(AYr,"rembert"),AYr.forEach(t),Blo=r(N$," \u2014 "),fB=n(N$,"A",{href:!0});var yYr=s(fB);Ilo=r(yYr,"RemBertTokenizer"),yYr.forEach(t),Nlo=r(N$," or "),mB=n(N$,"A",{href:!0});var LYr=s(mB);qlo=r(LYr,"RemBertTokenizerFast"),LYr.forEach(t),jlo=r(N$," (RemBERT model)"),N$.forEach(t),Dlo=i(S),Es=n(S,"LI",{});var q$=s(Es);one=n(q$,"STRONG",{});var xYr=s(one);Glo=r(xYr,"retribert"),xYr.forEach(t),Olo=r(q$," \u2014 "),gB=n(q$,"A",{href:!0});var $Yr=s(gB);Vlo=r($Yr,"RetriBertTokenizer"),$Yr.forEach(t),Xlo=r(q$," or "),hB=n(q$,"A",{href:!0});var kYr=s(hB);zlo=r(kYr,"RetriBertTokenizerFast"),kYr.forEach(t),Wlo=r(q$," (RetriBERT model)"),q$.forEach(t),Qlo=i(S),Cs=n(S,"LI",{});var j$=s(Cs);rne=n(j$,"STRONG",{});var SYr=s(rne);Hlo=r(SYr,"roberta"),SYr.forEach(t),Ulo=r(j$," \u2014 "),pB=n(j$,"A",{href:!0});var RYr=s(pB);Jlo=r(RYr,"RobertaTokenizer"),RYr.forEach(t),Ylo=r(j$," or "),_B=n(j$,"A",{href:!0});var PYr=s(_B);Klo=r(PYr,"RobertaTokenizerFast"),PYr.forEach(t),Zlo=r(j$," (RoBERTa model)"),j$.forEach(t),eio=i(S),ws=n(S,"LI",{});var D$=s(ws);tne=n(D$,"STRONG",{});var BYr=s(tne);oio=r(BYr,"roformer"),BYr.forEach(t),rio=r(D$," \u2014 "),uB=n(D$,"A",{href:!0});var IYr=s(uB);tio=r(IYr,"RoFormerTokenizer"),IYr.forEach(t),aio=r(D$," or "),bB=n(D$,"A",{href:!0});var NYr=s(bB);nio=r(NYr,"RoFormerTokenizerFast"),NYr.forEach(t),sio=r(D$," (RoFormer model)"),D$.forEach(t),lio=i(S),Jg=n(S,"LI",{});var nwe=s(Jg);ane=n(nwe,"STRONG",{});var qYr=s(ane);iio=r(qYr,"speech_to_text"),qYr.forEach(t),dio=r(nwe," \u2014 "),vB=n(nwe,"A",{href:!0});var jYr=s(vB);cio=r(jYr,"Speech2TextTokenizer"),jYr.forEach(t),fio=r(nwe," (Speech2Text model)"),nwe.forEach(t),mio=i(S),Yg=n(S,"LI",{});var swe=s(Yg);nne=n(swe,"STRONG",{});var DYr=s(nne);gio=r(DYr,"speech_to_text_2"),DYr.forEach(t),hio=r(swe," \u2014 "),FB=n(swe,"A",{href:!0});var GYr=s(FB);pio=r(GYr,"Speech2Text2Tokenizer"),GYr.forEach(t),_io=r(swe," (Speech2Text2 model)"),swe.forEach(t),uio=i(S),As=n(S,"LI",{});var G$=s(As);sne=n(G$,"STRONG",{});var OYr=s(sne);bio=r(OYr,"splinter"),OYr.forEach(t),vio=r(G$," \u2014 "),TB=n(G$,"A",{href:!0});var VYr=s(TB);Fio=r(VYr,"SplinterTokenizer"),VYr.forEach(t),Tio=r(G$," or "),MB=n(G$,"A",{href:!0});var XYr=s(MB);Mio=r(XYr,"SplinterTokenizerFast"),XYr.forEach(t),Eio=r(G$," (Splinter model)"),G$.forEach(t),Cio=i(S),ys=n(S,"LI",{});var O$=s(ys);lne=n(O$,"STRONG",{});var zYr=s(lne);wio=r(zYr,"squeezebert"),zYr.forEach(t),Aio=r(O$," \u2014 "),EB=n(O$,"A",{href:!0});var WYr=s(EB);yio=r(WYr,"SqueezeBertTokenizer"),WYr.forEach(t),Lio=r(O$," or "),CB=n(O$,"A",{href:!0});var QYr=s(CB);xio=r(QYr,"SqueezeBertTokenizerFast"),QYr.forEach(t),$io=r(O$," (SqueezeBERT model)"),O$.forEach(t),kio=i(S),Ls=n(S,"LI",{});var V$=s(Ls);ine=n(V$,"STRONG",{});var HYr=s(ine);Sio=r(HYr,"t5"),HYr.forEach(t),Rio=r(V$," \u2014 "),wB=n(V$,"A",{href:!0});var UYr=s(wB);Pio=r(UYr,"T5Tokenizer"),UYr.forEach(t),Bio=r(V$," or "),AB=n(V$,"A",{href:!0});var JYr=s(AB);Iio=r(JYr,"T5TokenizerFast"),JYr.forEach(t),Nio=r(V$," (T5 model)"),V$.forEach(t),qio=i(S),Kg=n(S,"LI",{});var lwe=s(Kg);dne=n(lwe,"STRONG",{});var YYr=s(dne);jio=r(YYr,"tapas"),YYr.forEach(t),Dio=r(lwe," \u2014 "),yB=n(lwe,"A",{href:!0});var KYr=s(yB);Gio=r(KYr,"TapasTokenizer"),KYr.forEach(t),Oio=r(lwe," (TAPAS model)"),lwe.forEach(t),Vio=i(S),Zg=n(S,"LI",{});var iwe=s(Zg);cne=n(iwe,"STRONG",{});var ZYr=s(cne);Xio=r(ZYr,"tapex"),ZYr.forEach(t),zio=r(iwe," \u2014 "),LB=n(iwe,"A",{href:!0});var eKr=s(LB);Wio=r(eKr,"TapexTokenizer"),eKr.forEach(t),Qio=r(iwe," (TAPEX model)"),iwe.forEach(t),Hio=i(S),eh=n(S,"LI",{});var dwe=s(eh);fne=n(dwe,"STRONG",{});var oKr=s(fne);Uio=r(oKr,"transfo-xl"),oKr.forEach(t),Jio=r(dwe," \u2014 "),xB=n(dwe,"A",{href:!0});var rKr=s(xB);Yio=r(rKr,"TransfoXLTokenizer"),rKr.forEach(t),Kio=r(dwe," (Transformer-XL model)"),dwe.forEach(t),Zio=i(S),xs=n(S,"LI",{});var X$=s(xs);mne=n(X$,"STRONG",{});var tKr=s(mne);edo=r(tKr,"visual_bert"),tKr.forEach(t),odo=r(X$," \u2014 "),$B=n(X$,"A",{href:!0});var aKr=s($B);rdo=r(aKr,"BertTokenizer"),aKr.forEach(t),tdo=r(X$," or "),kB=n(X$,"A",{href:!0});var nKr=s(kB);ado=r(nKr,"BertTokenizerFast"),nKr.forEach(t),ndo=r(X$," (VisualBert model)"),X$.forEach(t),sdo=i(S),oh=n(S,"LI",{});var cwe=s(oh);gne=n(cwe,"STRONG",{});var sKr=s(gne);ldo=r(sKr,"wav2vec2"),sKr.forEach(t),ido=r(cwe," \u2014 "),SB=n(cwe,"A",{href:!0});var lKr=s(SB);ddo=r(lKr,"Wav2Vec2CTCTokenizer"),lKr.forEach(t),cdo=r(cwe," (Wav2Vec2 model)"),cwe.forEach(t),fdo=i(S),rh=n(S,"LI",{});var fwe=s(rh);hne=n(fwe,"STRONG",{});var iKr=s(hne);mdo=r(iKr,"wav2vec2-conformer"),iKr.forEach(t),gdo=r(fwe," \u2014 "),RB=n(fwe,"A",{href:!0});var dKr=s(RB);hdo=r(dKr,"Wav2Vec2CTCTokenizer"),dKr.forEach(t),pdo=r(fwe," (Wav2Vec2-Conformer model)"),fwe.forEach(t),_do=i(S),th=n(S,"LI",{});var mwe=s(th);pne=n(mwe,"STRONG",{});var cKr=s(pne);udo=r(cKr,"wav2vec2_phoneme"),cKr.forEach(t),bdo=r(mwe," \u2014 "),PB=n(mwe,"A",{href:!0});var fKr=s(PB);vdo=r(fKr,"Wav2Vec2PhonemeCTCTokenizer"),fKr.forEach(t),Fdo=r(mwe," (Wav2Vec2Phoneme model)"),mwe.forEach(t),Tdo=i(S),$s=n(S,"LI",{});var z$=s($s);_ne=n(z$,"STRONG",{});var mKr=s(_ne);Mdo=r(mKr,"xglm"),mKr.forEach(t),Edo=r(z$," \u2014 "),BB=n(z$,"A",{href:!0});var gKr=s(BB);Cdo=r(gKr,"XGLMTokenizer"),gKr.forEach(t),wdo=r(z$," or "),IB=n(z$,"A",{href:!0});var hKr=s(IB);Ado=r(hKr,"XGLMTokenizerFast"),hKr.forEach(t),ydo=r(z$," (XGLM model)"),z$.forEach(t),Ldo=i(S),ah=n(S,"LI",{});var gwe=s(ah);une=n(gwe,"STRONG",{});var pKr=s(une);xdo=r(pKr,"xlm"),pKr.forEach(t),$do=r(gwe," \u2014 "),NB=n(gwe,"A",{href:!0});var _Kr=s(NB);kdo=r(_Kr,"XLMTokenizer"),_Kr.forEach(t),Sdo=r(gwe," (XLM model)"),gwe.forEach(t),Rdo=i(S),nh=n(S,"LI",{});var hwe=s(nh);bne=n(hwe,"STRONG",{});var uKr=s(bne);Pdo=r(uKr,"xlm-prophetnet"),uKr.forEach(t),Bdo=r(hwe," \u2014 "),qB=n(hwe,"A",{href:!0});var bKr=s(qB);Ido=r(bKr,"XLMProphetNetTokenizer"),bKr.forEach(t),Ndo=r(hwe," (XLMProphetNet model)"),hwe.forEach(t),qdo=i(S),ks=n(S,"LI",{});var W$=s(ks);vne=n(W$,"STRONG",{});var vKr=s(vne);jdo=r(vKr,"xlm-roberta"),vKr.forEach(t),Ddo=r(W$," \u2014 "),jB=n(W$,"A",{href:!0});var FKr=s(jB);Gdo=r(FKr,"XLMRobertaTokenizer"),FKr.forEach(t),Odo=r(W$," or "),DB=n(W$,"A",{href:!0});var TKr=s(DB);Vdo=r(TKr,"XLMRobertaTokenizerFast"),TKr.forEach(t),Xdo=r(W$," (XLM-RoBERTa model)"),W$.forEach(t),zdo=i(S),Ss=n(S,"LI",{});var Q$=s(Ss);Fne=n(Q$,"STRONG",{});var MKr=s(Fne);Wdo=r(MKr,"xlm-roberta-xl"),MKr.forEach(t),Qdo=r(Q$," \u2014 "),GB=n(Q$,"A",{href:!0});var EKr=s(GB);Hdo=r(EKr,"RobertaTokenizer"),EKr.forEach(t),Udo=r(Q$," or "),OB=n(Q$,"A",{href:!0});var CKr=s(OB);Jdo=r(CKr,"RobertaTokenizerFast"),CKr.forEach(t),Ydo=r(Q$," (XLM-RoBERTa-XL model)"),Q$.forEach(t),Kdo=i(S),Rs=n(S,"LI",{});var H$=s(Rs);Tne=n(H$,"STRONG",{});var wKr=s(Tne);Zdo=r(wKr,"xlnet"),wKr.forEach(t),eco=r(H$," \u2014 "),VB=n(H$,"A",{href:!0});var AKr=s(VB);oco=r(AKr,"XLNetTokenizer"),AKr.forEach(t),rco=r(H$," or "),XB=n(H$,"A",{href:!0});var yKr=s(XB);tco=r(yKr,"XLNetTokenizerFast"),yKr.forEach(t),aco=r(H$," (XLNet model)"),H$.forEach(t),nco=i(S),Ps=n(S,"LI",{});var U$=s(Ps);Mne=n(U$,"STRONG",{});var LKr=s(Mne);sco=r(LKr,"yoso"),LKr.forEach(t),lco=r(U$," \u2014 "),zB=n(U$,"A",{href:!0});var xKr=s(zB);ico=r(xKr,"AlbertTokenizer"),xKr.forEach(t),dco=r(U$," or "),WB=n(U$,"A",{href:!0});var $Kr=s(WB);cco=r($Kr,"AlbertTokenizerFast"),$Kr.forEach(t),fco=r(U$," (YOSO model)"),U$.forEach(t),S.forEach(t),mco=i(js),T(sh.$$.fragment,js),js.forEach(t),gco=i(qs),lh=n(qs,"DIV",{class:!0});var BDe=s(lh);T(Q0.$$.fragment,BDe),hco=i(BDe),Ene=n(BDe,"P",{});var kKr=s(Ene);pco=r(kKr,"Register a new tokenizer in this mapping."),kKr.forEach(t),BDe.forEach(t),qs.forEach(t),Iqe=i(f),Ei=n(f,"H2",{class:!0});var IDe=s(Ei);ih=n(IDe,"A",{id:!0,class:!0,href:!0});var SKr=s(ih);Cne=n(SKr,"SPAN",{});var RKr=s(Cne);T(H0.$$.fragment,RKr),RKr.forEach(t),SKr.forEach(t),_co=i(IDe),wne=n(IDe,"SPAN",{});var PKr=s(wne);uco=r(PKr,"AutoFeatureExtractor"),PKr.forEach(t),IDe.forEach(t),Nqe=i(f),Ao=n(f,"DIV",{class:!0});var Ds=s(Ao);T(U0.$$.fragment,Ds),bco=i(Ds),J0=n(Ds,"P",{});var NDe=s(J0);vco=r(NDe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),QB=n(NDe,"A",{href:!0});var BKr=s(QB);Fco=r(BKr,"AutoFeatureExtractor.from_pretrained()"),BKr.forEach(t),Tco=r(NDe," class method."),NDe.forEach(t),Mco=i(Ds),Y0=n(Ds,"P",{});var qDe=s(Y0);Eco=r(qDe,"This class cannot be instantiated directly using "),Ane=n(qDe,"CODE",{});var IKr=s(Ane);Cco=r(IKr,"__init__()"),IKr.forEach(t),wco=r(qDe," (throws an error)."),qDe.forEach(t),Aco=i(Ds),He=n(Ds,"DIV",{class:!0});var Zt=s(He);T(K0.$$.fragment,Zt),yco=i(Zt),yne=n(Zt,"P",{});var NKr=s(yne);Lco=r(NKr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),NKr.forEach(t),xco=i(Zt),ya=n(Zt,"P",{});var N3=s(ya);$co=r(N3,"The feature extractor class to instantiate is selected based on the "),Lne=n(N3,"CODE",{});var qKr=s(Lne);kco=r(qKr,"model_type"),qKr.forEach(t),Sco=r(N3,` property of the config object
(either passed as an argument or loaded from `),xne=n(N3,"CODE",{});var jKr=s(xne);Rco=r(jKr,"pretrained_model_name_or_path"),jKr.forEach(t),Pco=r(N3,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),$ne=n(N3,"CODE",{});var DKr=s($ne);Bco=r(DKr,"pretrained_model_name_or_path"),DKr.forEach(t),Ico=r(N3,":"),N3.forEach(t),Nco=i(Zt),Y=n(Zt,"UL",{});var Z=s(Y);dh=n(Z,"LI",{});var pwe=s(dh);kne=n(pwe,"STRONG",{});var GKr=s(kne);qco=r(GKr,"beit"),GKr.forEach(t),jco=r(pwe," \u2014 "),HB=n(pwe,"A",{href:!0});var OKr=s(HB);Dco=r(OKr,"BeitFeatureExtractor"),OKr.forEach(t),Gco=r(pwe," (BEiT model)"),pwe.forEach(t),Oco=i(Z),ch=n(Z,"LI",{});var _we=s(ch);Sne=n(_we,"STRONG",{});var VKr=s(Sne);Vco=r(VKr,"clip"),VKr.forEach(t),Xco=r(_we," \u2014 "),UB=n(_we,"A",{href:!0});var XKr=s(UB);zco=r(XKr,"CLIPFeatureExtractor"),XKr.forEach(t),Wco=r(_we," (CLIP model)"),_we.forEach(t),Qco=i(Z),fh=n(Z,"LI",{});var uwe=s(fh);Rne=n(uwe,"STRONG",{});var zKr=s(Rne);Hco=r(zKr,"convnext"),zKr.forEach(t),Uco=r(uwe," \u2014 "),JB=n(uwe,"A",{href:!0});var WKr=s(JB);Jco=r(WKr,"ConvNextFeatureExtractor"),WKr.forEach(t),Yco=r(uwe," (ConvNext model)"),uwe.forEach(t),Kco=i(Z),mh=n(Z,"LI",{});var bwe=s(mh);Pne=n(bwe,"STRONG",{});var QKr=s(Pne);Zco=r(QKr,"cvt"),QKr.forEach(t),efo=r(bwe," \u2014 "),YB=n(bwe,"A",{href:!0});var HKr=s(YB);ofo=r(HKr,"ConvNextFeatureExtractor"),HKr.forEach(t),rfo=r(bwe," (CvT model)"),bwe.forEach(t),tfo=i(Z),gh=n(Z,"LI",{});var vwe=s(gh);Bne=n(vwe,"STRONG",{});var UKr=s(Bne);afo=r(UKr,"data2vec-audio"),UKr.forEach(t),nfo=r(vwe," \u2014 "),KB=n(vwe,"A",{href:!0});var JKr=s(KB);sfo=r(JKr,"Wav2Vec2FeatureExtractor"),JKr.forEach(t),lfo=r(vwe," (Data2VecAudio model)"),vwe.forEach(t),ifo=i(Z),hh=n(Z,"LI",{});var Fwe=s(hh);Ine=n(Fwe,"STRONG",{});var YKr=s(Ine);dfo=r(YKr,"data2vec-vision"),YKr.forEach(t),cfo=r(Fwe," \u2014 "),ZB=n(Fwe,"A",{href:!0});var KKr=s(ZB);ffo=r(KKr,"BeitFeatureExtractor"),KKr.forEach(t),mfo=r(Fwe," (Data2VecVision model)"),Fwe.forEach(t),gfo=i(Z),ph=n(Z,"LI",{});var Twe=s(ph);Nne=n(Twe,"STRONG",{});var ZKr=s(Nne);hfo=r(ZKr,"deit"),ZKr.forEach(t),pfo=r(Twe," \u2014 "),eI=n(Twe,"A",{href:!0});var eZr=s(eI);_fo=r(eZr,"DeiTFeatureExtractor"),eZr.forEach(t),ufo=r(Twe," (DeiT model)"),Twe.forEach(t),bfo=i(Z),_h=n(Z,"LI",{});var Mwe=s(_h);qne=n(Mwe,"STRONG",{});var oZr=s(qne);vfo=r(oZr,"detr"),oZr.forEach(t),Ffo=r(Mwe," \u2014 "),oI=n(Mwe,"A",{href:!0});var rZr=s(oI);Tfo=r(rZr,"DetrFeatureExtractor"),rZr.forEach(t),Mfo=r(Mwe," (DETR model)"),Mwe.forEach(t),Efo=i(Z),uh=n(Z,"LI",{});var Ewe=s(uh);jne=n(Ewe,"STRONG",{});var tZr=s(jne);Cfo=r(tZr,"dpt"),tZr.forEach(t),wfo=r(Ewe," \u2014 "),rI=n(Ewe,"A",{href:!0});var aZr=s(rI);Afo=r(aZr,"DPTFeatureExtractor"),aZr.forEach(t),yfo=r(Ewe," (DPT model)"),Ewe.forEach(t),Lfo=i(Z),bh=n(Z,"LI",{});var Cwe=s(bh);Dne=n(Cwe,"STRONG",{});var nZr=s(Dne);xfo=r(nZr,"flava"),nZr.forEach(t),$fo=r(Cwe," \u2014 "),tI=n(Cwe,"A",{href:!0});var sZr=s(tI);kfo=r(sZr,"FlavaFeatureExtractor"),sZr.forEach(t),Sfo=r(Cwe," (Flava model)"),Cwe.forEach(t),Rfo=i(Z),vh=n(Z,"LI",{});var wwe=s(vh);Gne=n(wwe,"STRONG",{});var lZr=s(Gne);Pfo=r(lZr,"glpn"),lZr.forEach(t),Bfo=r(wwe," \u2014 "),aI=n(wwe,"A",{href:!0});var iZr=s(aI);Ifo=r(iZr,"GLPNFeatureExtractor"),iZr.forEach(t),Nfo=r(wwe," (GLPN model)"),wwe.forEach(t),qfo=i(Z),Fh=n(Z,"LI",{});var Awe=s(Fh);One=n(Awe,"STRONG",{});var dZr=s(One);jfo=r(dZr,"hubert"),dZr.forEach(t),Dfo=r(Awe," \u2014 "),nI=n(Awe,"A",{href:!0});var cZr=s(nI);Gfo=r(cZr,"Wav2Vec2FeatureExtractor"),cZr.forEach(t),Ofo=r(Awe," (Hubert model)"),Awe.forEach(t),Vfo=i(Z),Th=n(Z,"LI",{});var ywe=s(Th);Vne=n(ywe,"STRONG",{});var fZr=s(Vne);Xfo=r(fZr,"imagegpt"),fZr.forEach(t),zfo=r(ywe," \u2014 "),sI=n(ywe,"A",{href:!0});var mZr=s(sI);Wfo=r(mZr,"ImageGPTFeatureExtractor"),mZr.forEach(t),Qfo=r(ywe," (ImageGPT model)"),ywe.forEach(t),Hfo=i(Z),Mh=n(Z,"LI",{});var Lwe=s(Mh);Xne=n(Lwe,"STRONG",{});var gZr=s(Xne);Ufo=r(gZr,"layoutlmv2"),gZr.forEach(t),Jfo=r(Lwe," \u2014 "),lI=n(Lwe,"A",{href:!0});var hZr=s(lI);Yfo=r(hZr,"LayoutLMv2FeatureExtractor"),hZr.forEach(t),Kfo=r(Lwe," (LayoutLMv2 model)"),Lwe.forEach(t),Zfo=i(Z),Eh=n(Z,"LI",{});var xwe=s(Eh);zne=n(xwe,"STRONG",{});var pZr=s(zne);emo=r(pZr,"layoutlmv3"),pZr.forEach(t),omo=r(xwe," \u2014 "),iI=n(xwe,"A",{href:!0});var _Zr=s(iI);rmo=r(_Zr,"LayoutLMv3FeatureExtractor"),_Zr.forEach(t),tmo=r(xwe," (LayoutLMv3 model)"),xwe.forEach(t),amo=i(Z),Ch=n(Z,"LI",{});var $we=s(Ch);Wne=n($we,"STRONG",{});var uZr=s(Wne);nmo=r(uZr,"maskformer"),uZr.forEach(t),smo=r($we," \u2014 "),dI=n($we,"A",{href:!0});var bZr=s(dI);lmo=r(bZr,"MaskFormerFeatureExtractor"),bZr.forEach(t),imo=r($we," (MaskFormer model)"),$we.forEach(t),dmo=i(Z),wh=n(Z,"LI",{});var kwe=s(wh);Qne=n(kwe,"STRONG",{});var vZr=s(Qne);cmo=r(vZr,"perceiver"),vZr.forEach(t),fmo=r(kwe," \u2014 "),cI=n(kwe,"A",{href:!0});var FZr=s(cI);mmo=r(FZr,"PerceiverFeatureExtractor"),FZr.forEach(t),gmo=r(kwe," (Perceiver model)"),kwe.forEach(t),hmo=i(Z),Ah=n(Z,"LI",{});var Swe=s(Ah);Hne=n(Swe,"STRONG",{});var TZr=s(Hne);pmo=r(TZr,"poolformer"),TZr.forEach(t),_mo=r(Swe," \u2014 "),fI=n(Swe,"A",{href:!0});var MZr=s(fI);umo=r(MZr,"PoolFormerFeatureExtractor"),MZr.forEach(t),bmo=r(Swe," (PoolFormer model)"),Swe.forEach(t),vmo=i(Z),yh=n(Z,"LI",{});var Rwe=s(yh);Une=n(Rwe,"STRONG",{});var EZr=s(Une);Fmo=r(EZr,"regnet"),EZr.forEach(t),Tmo=r(Rwe," \u2014 "),mI=n(Rwe,"A",{href:!0});var CZr=s(mI);Mmo=r(CZr,"ConvNextFeatureExtractor"),CZr.forEach(t),Emo=r(Rwe," (RegNet model)"),Rwe.forEach(t),Cmo=i(Z),Lh=n(Z,"LI",{});var Pwe=s(Lh);Jne=n(Pwe,"STRONG",{});var wZr=s(Jne);wmo=r(wZr,"resnet"),wZr.forEach(t),Amo=r(Pwe," \u2014 "),gI=n(Pwe,"A",{href:!0});var AZr=s(gI);ymo=r(AZr,"ConvNextFeatureExtractor"),AZr.forEach(t),Lmo=r(Pwe," (ResNet model)"),Pwe.forEach(t),xmo=i(Z),xh=n(Z,"LI",{});var Bwe=s(xh);Yne=n(Bwe,"STRONG",{});var yZr=s(Yne);$mo=r(yZr,"segformer"),yZr.forEach(t),kmo=r(Bwe," \u2014 "),hI=n(Bwe,"A",{href:!0});var LZr=s(hI);Smo=r(LZr,"SegformerFeatureExtractor"),LZr.forEach(t),Rmo=r(Bwe," (SegFormer model)"),Bwe.forEach(t),Pmo=i(Z),$h=n(Z,"LI",{});var Iwe=s($h);Kne=n(Iwe,"STRONG",{});var xZr=s(Kne);Bmo=r(xZr,"speech_to_text"),xZr.forEach(t),Imo=r(Iwe," \u2014 "),pI=n(Iwe,"A",{href:!0});var $Zr=s(pI);Nmo=r($Zr,"Speech2TextFeatureExtractor"),$Zr.forEach(t),qmo=r(Iwe," (Speech2Text model)"),Iwe.forEach(t),jmo=i(Z),kh=n(Z,"LI",{});var Nwe=s(kh);Zne=n(Nwe,"STRONG",{});var kZr=s(Zne);Dmo=r(kZr,"swin"),kZr.forEach(t),Gmo=r(Nwe," \u2014 "),_I=n(Nwe,"A",{href:!0});var SZr=s(_I);Omo=r(SZr,"ViTFeatureExtractor"),SZr.forEach(t),Vmo=r(Nwe," (Swin model)"),Nwe.forEach(t),Xmo=i(Z),Sh=n(Z,"LI",{});var qwe=s(Sh);ese=n(qwe,"STRONG",{});var RZr=s(ese);zmo=r(RZr,"van"),RZr.forEach(t),Wmo=r(qwe," \u2014 "),uI=n(qwe,"A",{href:!0});var PZr=s(uI);Qmo=r(PZr,"ConvNextFeatureExtractor"),PZr.forEach(t),Hmo=r(qwe," (VAN model)"),qwe.forEach(t),Umo=i(Z),Rh=n(Z,"LI",{});var jwe=s(Rh);ose=n(jwe,"STRONG",{});var BZr=s(ose);Jmo=r(BZr,"vit"),BZr.forEach(t),Ymo=r(jwe," \u2014 "),bI=n(jwe,"A",{href:!0});var IZr=s(bI);Kmo=r(IZr,"ViTFeatureExtractor"),IZr.forEach(t),Zmo=r(jwe," (ViT model)"),jwe.forEach(t),ego=i(Z),Ph=n(Z,"LI",{});var Dwe=s(Ph);rse=n(Dwe,"STRONG",{});var NZr=s(rse);ogo=r(NZr,"vit_mae"),NZr.forEach(t),rgo=r(Dwe," \u2014 "),vI=n(Dwe,"A",{href:!0});var qZr=s(vI);tgo=r(qZr,"ViTFeatureExtractor"),qZr.forEach(t),ago=r(Dwe," (ViTMAE model)"),Dwe.forEach(t),ngo=i(Z),Bh=n(Z,"LI",{});var Gwe=s(Bh);tse=n(Gwe,"STRONG",{});var jZr=s(tse);sgo=r(jZr,"wav2vec2"),jZr.forEach(t),lgo=r(Gwe," \u2014 "),FI=n(Gwe,"A",{href:!0});var DZr=s(FI);igo=r(DZr,"Wav2Vec2FeatureExtractor"),DZr.forEach(t),dgo=r(Gwe," (Wav2Vec2 model)"),Gwe.forEach(t),cgo=i(Z),Ih=n(Z,"LI",{});var Owe=s(Ih);ase=n(Owe,"STRONG",{});var GZr=s(ase);fgo=r(GZr,"wav2vec2-conformer"),GZr.forEach(t),mgo=r(Owe," \u2014 "),TI=n(Owe,"A",{href:!0});var OZr=s(TI);ggo=r(OZr,"Wav2Vec2FeatureExtractor"),OZr.forEach(t),hgo=r(Owe," (Wav2Vec2-Conformer model)"),Owe.forEach(t),pgo=i(Z),Nh=n(Z,"LI",{});var Vwe=s(Nh);nse=n(Vwe,"STRONG",{});var VZr=s(nse);_go=r(VZr,"yolos"),VZr.forEach(t),ugo=r(Vwe," \u2014 "),MI=n(Vwe,"A",{href:!0});var XZr=s(MI);bgo=r(XZr,"YolosFeatureExtractor"),XZr.forEach(t),vgo=r(Vwe," (YOLOS model)"),Vwe.forEach(t),Z.forEach(t),Fgo=i(Zt),T(qh.$$.fragment,Zt),Tgo=i(Zt),T(jh.$$.fragment,Zt),Zt.forEach(t),Mgo=i(Ds),Dh=n(Ds,"DIV",{class:!0});var jDe=s(Dh);T(Z0.$$.fragment,jDe),Ego=i(jDe),sse=n(jDe,"P",{});var zZr=s(sse);Cgo=r(zZr,"Register a new feature extractor for this class."),zZr.forEach(t),jDe.forEach(t),Ds.forEach(t),qqe=i(f),Ci=n(f,"H2",{class:!0});var DDe=s(Ci);Gh=n(DDe,"A",{id:!0,class:!0,href:!0});var WZr=s(Gh);lse=n(WZr,"SPAN",{});var QZr=s(lse);T(eA.$$.fragment,QZr),QZr.forEach(t),WZr.forEach(t),wgo=i(DDe),ise=n(DDe,"SPAN",{});var HZr=s(ise);Ago=r(HZr,"AutoProcessor"),HZr.forEach(t),DDe.forEach(t),jqe=i(f),yo=n(f,"DIV",{class:!0});var Gs=s(yo);T(oA.$$.fragment,Gs),ygo=i(Gs),rA=n(Gs,"P",{});var GDe=s(rA);Lgo=r(GDe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),EI=n(GDe,"A",{href:!0});var UZr=s(EI);xgo=r(UZr,"AutoProcessor.from_pretrained()"),UZr.forEach(t),$go=r(GDe," class method."),GDe.forEach(t),kgo=i(Gs),tA=n(Gs,"P",{});var ODe=s(tA);Sgo=r(ODe,"This class cannot be instantiated directly using "),dse=n(ODe,"CODE",{});var JZr=s(dse);Rgo=r(JZr,"__init__()"),JZr.forEach(t),Pgo=r(ODe," (throws an error)."),ODe.forEach(t),Bgo=i(Gs),Ue=n(Gs,"DIV",{class:!0});var ea=s(Ue);T(aA.$$.fragment,ea),Igo=i(ea),cse=n(ea,"P",{});var YZr=s(cse);Ngo=r(YZr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),YZr.forEach(t),qgo=i(ea),wi=n(ea,"P",{});var $Z=s(wi);jgo=r($Z,"The processor class to instantiate is selected based on the "),fse=n($Z,"CODE",{});var KZr=s(fse);Dgo=r(KZr,"model_type"),KZr.forEach(t),Ggo=r($Z,` property of the config object (either
passed as an argument or loaded from `),mse=n($Z,"CODE",{});var ZZr=s(mse);Ogo=r(ZZr,"pretrained_model_name_or_path"),ZZr.forEach(t),Vgo=r($Z," if possible):"),$Z.forEach(t),Xgo=i(ea),he=n(ea,"UL",{});var ue=s(he);Oh=n(ue,"LI",{});var Xwe=s(Oh);gse=n(Xwe,"STRONG",{});var eet=s(gse);zgo=r(eet,"clip"),eet.forEach(t),Wgo=r(Xwe," \u2014 "),CI=n(Xwe,"A",{href:!0});var oet=s(CI);Qgo=r(oet,"CLIPProcessor"),oet.forEach(t),Hgo=r(Xwe," (CLIP model)"),Xwe.forEach(t),Ugo=i(ue),Vh=n(ue,"LI",{});var zwe=s(Vh);hse=n(zwe,"STRONG",{});var ret=s(hse);Jgo=r(ret,"flava"),ret.forEach(t),Ygo=r(zwe," \u2014 "),pse=n(zwe,"CODE",{});var tet=s(pse);Kgo=r(tet,"FLAVAProcessor"),tet.forEach(t),Zgo=r(zwe," (Flava model)"),zwe.forEach(t),eho=i(ue),Xh=n(ue,"LI",{});var Wwe=s(Xh);_se=n(Wwe,"STRONG",{});var aet=s(_se);oho=r(aet,"layoutlmv2"),aet.forEach(t),rho=r(Wwe," \u2014 "),wI=n(Wwe,"A",{href:!0});var net=s(wI);tho=r(net,"LayoutLMv2Processor"),net.forEach(t),aho=r(Wwe," (LayoutLMv2 model)"),Wwe.forEach(t),nho=i(ue),zh=n(ue,"LI",{});var Qwe=s(zh);use=n(Qwe,"STRONG",{});var set=s(use);sho=r(set,"layoutlmv3"),set.forEach(t),lho=r(Qwe," \u2014 "),AI=n(Qwe,"A",{href:!0});var iet=s(AI);iho=r(iet,"LayoutLMv3Processor"),iet.forEach(t),dho=r(Qwe," (LayoutLMv3 model)"),Qwe.forEach(t),cho=i(ue),Wh=n(ue,"LI",{});var Hwe=s(Wh);bse=n(Hwe,"STRONG",{});var det=s(bse);fho=r(det,"layoutxlm"),det.forEach(t),mho=r(Hwe," \u2014 "),yI=n(Hwe,"A",{href:!0});var cet=s(yI);gho=r(cet,"LayoutXLMProcessor"),cet.forEach(t),hho=r(Hwe," (LayoutXLM model)"),Hwe.forEach(t),pho=i(ue),Qh=n(ue,"LI",{});var Uwe=s(Qh);vse=n(Uwe,"STRONG",{});var fet=s(vse);_ho=r(fet,"sew"),fet.forEach(t),uho=r(Uwe," \u2014 "),LI=n(Uwe,"A",{href:!0});var met=s(LI);bho=r(met,"Wav2Vec2Processor"),met.forEach(t),vho=r(Uwe," (SEW model)"),Uwe.forEach(t),Fho=i(ue),Hh=n(ue,"LI",{});var Jwe=s(Hh);Fse=n(Jwe,"STRONG",{});var get=s(Fse);Tho=r(get,"sew-d"),get.forEach(t),Mho=r(Jwe," \u2014 "),xI=n(Jwe,"A",{href:!0});var het=s(xI);Eho=r(het,"Wav2Vec2Processor"),het.forEach(t),Cho=r(Jwe," (SEW-D model)"),Jwe.forEach(t),who=i(ue),Uh=n(ue,"LI",{});var Ywe=s(Uh);Tse=n(Ywe,"STRONG",{});var pet=s(Tse);Aho=r(pet,"speech_to_text"),pet.forEach(t),yho=r(Ywe," \u2014 "),$I=n(Ywe,"A",{href:!0});var _et=s($I);Lho=r(_et,"Speech2TextProcessor"),_et.forEach(t),xho=r(Ywe," (Speech2Text model)"),Ywe.forEach(t),$ho=i(ue),Jh=n(ue,"LI",{});var Kwe=s(Jh);Mse=n(Kwe,"STRONG",{});var uet=s(Mse);kho=r(uet,"speech_to_text_2"),uet.forEach(t),Sho=r(Kwe," \u2014 "),kI=n(Kwe,"A",{href:!0});var bet=s(kI);Rho=r(bet,"Speech2Text2Processor"),bet.forEach(t),Pho=r(Kwe," (Speech2Text2 model)"),Kwe.forEach(t),Bho=i(ue),Yh=n(ue,"LI",{});var Zwe=s(Yh);Ese=n(Zwe,"STRONG",{});var vet=s(Ese);Iho=r(vet,"trocr"),vet.forEach(t),Nho=r(Zwe," \u2014 "),SI=n(Zwe,"A",{href:!0});var Fet=s(SI);qho=r(Fet,"TrOCRProcessor"),Fet.forEach(t),jho=r(Zwe," (TrOCR model)"),Zwe.forEach(t),Dho=i(ue),Kh=n(ue,"LI",{});var e0e=s(Kh);Cse=n(e0e,"STRONG",{});var Tet=s(Cse);Gho=r(Tet,"unispeech"),Tet.forEach(t),Oho=r(e0e," \u2014 "),RI=n(e0e,"A",{href:!0});var Met=s(RI);Vho=r(Met,"Wav2Vec2Processor"),Met.forEach(t),Xho=r(e0e," (UniSpeech model)"),e0e.forEach(t),zho=i(ue),Zh=n(ue,"LI",{});var o0e=s(Zh);wse=n(o0e,"STRONG",{});var Eet=s(wse);Who=r(Eet,"unispeech-sat"),Eet.forEach(t),Qho=r(o0e," \u2014 "),PI=n(o0e,"A",{href:!0});var Cet=s(PI);Hho=r(Cet,"Wav2Vec2Processor"),Cet.forEach(t),Uho=r(o0e," (UniSpeechSat model)"),o0e.forEach(t),Jho=i(ue),ep=n(ue,"LI",{});var r0e=s(ep);Ase=n(r0e,"STRONG",{});var wet=s(Ase);Yho=r(wet,"vilt"),wet.forEach(t),Kho=r(r0e," \u2014 "),BI=n(r0e,"A",{href:!0});var Aet=s(BI);Zho=r(Aet,"ViltProcessor"),Aet.forEach(t),epo=r(r0e," (ViLT model)"),r0e.forEach(t),opo=i(ue),op=n(ue,"LI",{});var t0e=s(op);yse=n(t0e,"STRONG",{});var yet=s(yse);rpo=r(yet,"vision-text-dual-encoder"),yet.forEach(t),tpo=r(t0e," \u2014 "),II=n(t0e,"A",{href:!0});var Let=s(II);apo=r(Let,"VisionTextDualEncoderProcessor"),Let.forEach(t),npo=r(t0e," (VisionTextDualEncoder model)"),t0e.forEach(t),spo=i(ue),rp=n(ue,"LI",{});var a0e=s(rp);Lse=n(a0e,"STRONG",{});var xet=s(Lse);lpo=r(xet,"wav2vec2"),xet.forEach(t),ipo=r(a0e," \u2014 "),NI=n(a0e,"A",{href:!0});var $et=s(NI);dpo=r($et,"Wav2Vec2Processor"),$et.forEach(t),cpo=r(a0e," (Wav2Vec2 model)"),a0e.forEach(t),fpo=i(ue),tp=n(ue,"LI",{});var n0e=s(tp);xse=n(n0e,"STRONG",{});var ket=s(xse);mpo=r(ket,"wav2vec2-conformer"),ket.forEach(t),gpo=r(n0e," \u2014 "),qI=n(n0e,"A",{href:!0});var Set=s(qI);hpo=r(Set,"Wav2Vec2Processor"),Set.forEach(t),ppo=r(n0e," (Wav2Vec2-Conformer model)"),n0e.forEach(t),_po=i(ue),ap=n(ue,"LI",{});var s0e=s(ap);$se=n(s0e,"STRONG",{});var Ret=s($se);upo=r(Ret,"wavlm"),Ret.forEach(t),bpo=r(s0e," \u2014 "),jI=n(s0e,"A",{href:!0});var Pet=s(jI);vpo=r(Pet,"Wav2Vec2Processor"),Pet.forEach(t),Fpo=r(s0e," (WavLM model)"),s0e.forEach(t),ue.forEach(t),Tpo=i(ea),T(np.$$.fragment,ea),Mpo=i(ea),T(sp.$$.fragment,ea),ea.forEach(t),Epo=i(Gs),lp=n(Gs,"DIV",{class:!0});var VDe=s(lp);T(nA.$$.fragment,VDe),Cpo=i(VDe),kse=n(VDe,"P",{});var Bet=s(kse);wpo=r(Bet,"Register a new processor for this class."),Bet.forEach(t),VDe.forEach(t),Gs.forEach(t),Dqe=i(f),Ai=n(f,"H2",{class:!0});var XDe=s(Ai);ip=n(XDe,"A",{id:!0,class:!0,href:!0});var Iet=s(ip);Sse=n(Iet,"SPAN",{});var Net=s(Sse);T(sA.$$.fragment,Net),Net.forEach(t),Iet.forEach(t),Apo=i(XDe),Rse=n(XDe,"SPAN",{});var qet=s(Rse);ypo=r(qet,"AutoModel"),qet.forEach(t),XDe.forEach(t),Gqe=i(f),Lo=n(f,"DIV",{class:!0});var Os=s(Lo);T(lA.$$.fragment,Os),Lpo=i(Os),yi=n(Os,"P",{});var kZ=s(yi);xpo=r(kZ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),DI=n(kZ,"A",{href:!0});var jet=s(DI);$po=r(jet,"from_pretrained()"),jet.forEach(t),kpo=r(kZ," class method or the "),GI=n(kZ,"A",{href:!0});var Det=s(GI);Spo=r(Det,"from_config()"),Det.forEach(t),Rpo=r(kZ,` class
method.`),kZ.forEach(t),Ppo=i(Os),iA=n(Os,"P",{});var zDe=s(iA);Bpo=r(zDe,"This class cannot be instantiated directly using "),Pse=n(zDe,"CODE",{});var Get=s(Pse);Ipo=r(Get,"__init__()"),Get.forEach(t),Npo=r(zDe," (throws an error)."),zDe.forEach(t),qpo=i(Os),tt=n(Os,"DIV",{class:!0});var q3=s(tt);T(dA.$$.fragment,q3),jpo=i(q3),Bse=n(q3,"P",{});var Oet=s(Bse);Dpo=r(Oet,"Instantiates one of the base model classes of the library from a configuration."),Oet.forEach(t),Gpo=i(q3),Li=n(q3,"P",{});var SZ=s(Li);Opo=r(SZ,`Note:
Loading a model from its configuration file does `),Ise=n(SZ,"STRONG",{});var Vet=s(Ise);Vpo=r(Vet,"not"),Vet.forEach(t),Xpo=r(SZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),OI=n(SZ,"A",{href:!0});var Xet=s(OI);zpo=r(Xet,"from_pretrained()"),Xet.forEach(t),Wpo=r(SZ," to load the model weights."),SZ.forEach(t),Qpo=i(q3),T(dp.$$.fragment,q3),q3.forEach(t),Hpo=i(Os),Je=n(Os,"DIV",{class:!0});var oa=s(Je);T(cA.$$.fragment,oa),Upo=i(oa),Nse=n(oa,"P",{});var zet=s(Nse);Jpo=r(zet,"Instantiate one of the base model classes of the library from a pretrained model."),zet.forEach(t),Ypo=i(oa),La=n(oa,"P",{});var j3=s(La);Kpo=r(j3,"The model class to instantiate is selected based on the "),qse=n(j3,"CODE",{});var Wet=s(qse);Zpo=r(Wet,"model_type"),Wet.forEach(t),e_o=r(j3,` property of the config object (either
passed as an argument or loaded from `),jse=n(j3,"CODE",{});var Qet=s(jse);o_o=r(Qet,"pretrained_model_name_or_path"),Qet.forEach(t),r_o=r(j3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dse=n(j3,"CODE",{});var Het=s(Dse);t_o=r(Het,"pretrained_model_name_or_path"),Het.forEach(t),a_o=r(j3,":"),j3.forEach(t),n_o=i(oa),x=n(oa,"UL",{});var $=s(x);cp=n($,"LI",{});var l0e=s(cp);Gse=n(l0e,"STRONG",{});var Uet=s(Gse);s_o=r(Uet,"albert"),Uet.forEach(t),l_o=r(l0e," \u2014 "),VI=n(l0e,"A",{href:!0});var Jet=s(VI);i_o=r(Jet,"AlbertModel"),Jet.forEach(t),d_o=r(l0e," (ALBERT model)"),l0e.forEach(t),c_o=i($),fp=n($,"LI",{});var i0e=s(fp);Ose=n(i0e,"STRONG",{});var Yet=s(Ose);f_o=r(Yet,"bart"),Yet.forEach(t),m_o=r(i0e," \u2014 "),XI=n(i0e,"A",{href:!0});var Ket=s(XI);g_o=r(Ket,"BartModel"),Ket.forEach(t),h_o=r(i0e," (BART model)"),i0e.forEach(t),p_o=i($),mp=n($,"LI",{});var d0e=s(mp);Vse=n(d0e,"STRONG",{});var Zet=s(Vse);__o=r(Zet,"beit"),Zet.forEach(t),u_o=r(d0e," \u2014 "),zI=n(d0e,"A",{href:!0});var eot=s(zI);b_o=r(eot,"BeitModel"),eot.forEach(t),v_o=r(d0e," (BEiT model)"),d0e.forEach(t),F_o=i($),gp=n($,"LI",{});var c0e=s(gp);Xse=n(c0e,"STRONG",{});var oot=s(Xse);T_o=r(oot,"bert"),oot.forEach(t),M_o=r(c0e," \u2014 "),WI=n(c0e,"A",{href:!0});var rot=s(WI);E_o=r(rot,"BertModel"),rot.forEach(t),C_o=r(c0e," (BERT model)"),c0e.forEach(t),w_o=i($),hp=n($,"LI",{});var f0e=s(hp);zse=n(f0e,"STRONG",{});var tot=s(zse);A_o=r(tot,"bert-generation"),tot.forEach(t),y_o=r(f0e," \u2014 "),QI=n(f0e,"A",{href:!0});var aot=s(QI);L_o=r(aot,"BertGenerationEncoder"),aot.forEach(t),x_o=r(f0e," (Bert Generation model)"),f0e.forEach(t),$_o=i($),pp=n($,"LI",{});var m0e=s(pp);Wse=n(m0e,"STRONG",{});var not=s(Wse);k_o=r(not,"big_bird"),not.forEach(t),S_o=r(m0e," \u2014 "),HI=n(m0e,"A",{href:!0});var sot=s(HI);R_o=r(sot,"BigBirdModel"),sot.forEach(t),P_o=r(m0e," (BigBird model)"),m0e.forEach(t),B_o=i($),_p=n($,"LI",{});var g0e=s(_p);Qse=n(g0e,"STRONG",{});var lot=s(Qse);I_o=r(lot,"bigbird_pegasus"),lot.forEach(t),N_o=r(g0e," \u2014 "),UI=n(g0e,"A",{href:!0});var iot=s(UI);q_o=r(iot,"BigBirdPegasusModel"),iot.forEach(t),j_o=r(g0e," (BigBirdPegasus model)"),g0e.forEach(t),D_o=i($),up=n($,"LI",{});var h0e=s(up);Hse=n(h0e,"STRONG",{});var dot=s(Hse);G_o=r(dot,"blenderbot"),dot.forEach(t),O_o=r(h0e," \u2014 "),JI=n(h0e,"A",{href:!0});var cot=s(JI);V_o=r(cot,"BlenderbotModel"),cot.forEach(t),X_o=r(h0e," (Blenderbot model)"),h0e.forEach(t),z_o=i($),bp=n($,"LI",{});var p0e=s(bp);Use=n(p0e,"STRONG",{});var fot=s(Use);W_o=r(fot,"blenderbot-small"),fot.forEach(t),Q_o=r(p0e," \u2014 "),YI=n(p0e,"A",{href:!0});var mot=s(YI);H_o=r(mot,"BlenderbotSmallModel"),mot.forEach(t),U_o=r(p0e," (BlenderbotSmall model)"),p0e.forEach(t),J_o=i($),vp=n($,"LI",{});var _0e=s(vp);Jse=n(_0e,"STRONG",{});var got=s(Jse);Y_o=r(got,"camembert"),got.forEach(t),K_o=r(_0e," \u2014 "),KI=n(_0e,"A",{href:!0});var hot=s(KI);Z_o=r(hot,"CamembertModel"),hot.forEach(t),euo=r(_0e," (CamemBERT model)"),_0e.forEach(t),ouo=i($),Fp=n($,"LI",{});var u0e=s(Fp);Yse=n(u0e,"STRONG",{});var pot=s(Yse);ruo=r(pot,"canine"),pot.forEach(t),tuo=r(u0e," \u2014 "),ZI=n(u0e,"A",{href:!0});var _ot=s(ZI);auo=r(_ot,"CanineModel"),_ot.forEach(t),nuo=r(u0e," (Canine model)"),u0e.forEach(t),suo=i($),Tp=n($,"LI",{});var b0e=s(Tp);Kse=n(b0e,"STRONG",{});var uot=s(Kse);luo=r(uot,"clip"),uot.forEach(t),iuo=r(b0e," \u2014 "),eN=n(b0e,"A",{href:!0});var bot=s(eN);duo=r(bot,"CLIPModel"),bot.forEach(t),cuo=r(b0e," (CLIP model)"),b0e.forEach(t),fuo=i($),Mp=n($,"LI",{});var v0e=s(Mp);Zse=n(v0e,"STRONG",{});var vot=s(Zse);muo=r(vot,"convbert"),vot.forEach(t),guo=r(v0e," \u2014 "),oN=n(v0e,"A",{href:!0});var Fot=s(oN);huo=r(Fot,"ConvBertModel"),Fot.forEach(t),puo=r(v0e," (ConvBERT model)"),v0e.forEach(t),_uo=i($),Ep=n($,"LI",{});var F0e=s(Ep);ele=n(F0e,"STRONG",{});var Tot=s(ele);uuo=r(Tot,"convnext"),Tot.forEach(t),buo=r(F0e," \u2014 "),rN=n(F0e,"A",{href:!0});var Mot=s(rN);vuo=r(Mot,"ConvNextModel"),Mot.forEach(t),Fuo=r(F0e," (ConvNext model)"),F0e.forEach(t),Tuo=i($),Cp=n($,"LI",{});var T0e=s(Cp);ole=n(T0e,"STRONG",{});var Eot=s(ole);Muo=r(Eot,"ctrl"),Eot.forEach(t),Euo=r(T0e," \u2014 "),tN=n(T0e,"A",{href:!0});var Cot=s(tN);Cuo=r(Cot,"CTRLModel"),Cot.forEach(t),wuo=r(T0e," (CTRL model)"),T0e.forEach(t),Auo=i($),wp=n($,"LI",{});var M0e=s(wp);rle=n(M0e,"STRONG",{});var wot=s(rle);yuo=r(wot,"cvt"),wot.forEach(t),Luo=r(M0e," \u2014 "),aN=n(M0e,"A",{href:!0});var Aot=s(aN);xuo=r(Aot,"CvtModel"),Aot.forEach(t),$uo=r(M0e," (CvT model)"),M0e.forEach(t),kuo=i($),Ap=n($,"LI",{});var E0e=s(Ap);tle=n(E0e,"STRONG",{});var yot=s(tle);Suo=r(yot,"data2vec-audio"),yot.forEach(t),Ruo=r(E0e," \u2014 "),nN=n(E0e,"A",{href:!0});var Lot=s(nN);Puo=r(Lot,"Data2VecAudioModel"),Lot.forEach(t),Buo=r(E0e," (Data2VecAudio model)"),E0e.forEach(t),Iuo=i($),yp=n($,"LI",{});var C0e=s(yp);ale=n(C0e,"STRONG",{});var xot=s(ale);Nuo=r(xot,"data2vec-text"),xot.forEach(t),quo=r(C0e," \u2014 "),sN=n(C0e,"A",{href:!0});var $ot=s(sN);juo=r($ot,"Data2VecTextModel"),$ot.forEach(t),Duo=r(C0e," (Data2VecText model)"),C0e.forEach(t),Guo=i($),Lp=n($,"LI",{});var w0e=s(Lp);nle=n(w0e,"STRONG",{});var kot=s(nle);Ouo=r(kot,"data2vec-vision"),kot.forEach(t),Vuo=r(w0e," \u2014 "),lN=n(w0e,"A",{href:!0});var Sot=s(lN);Xuo=r(Sot,"Data2VecVisionModel"),Sot.forEach(t),zuo=r(w0e," (Data2VecVision model)"),w0e.forEach(t),Wuo=i($),xp=n($,"LI",{});var A0e=s(xp);sle=n(A0e,"STRONG",{});var Rot=s(sle);Quo=r(Rot,"deberta"),Rot.forEach(t),Huo=r(A0e," \u2014 "),iN=n(A0e,"A",{href:!0});var Pot=s(iN);Uuo=r(Pot,"DebertaModel"),Pot.forEach(t),Juo=r(A0e," (DeBERTa model)"),A0e.forEach(t),Yuo=i($),$p=n($,"LI",{});var y0e=s($p);lle=n(y0e,"STRONG",{});var Bot=s(lle);Kuo=r(Bot,"deberta-v2"),Bot.forEach(t),Zuo=r(y0e," \u2014 "),dN=n(y0e,"A",{href:!0});var Iot=s(dN);e2o=r(Iot,"DebertaV2Model"),Iot.forEach(t),o2o=r(y0e," (DeBERTa-v2 model)"),y0e.forEach(t),r2o=i($),kp=n($,"LI",{});var L0e=s(kp);ile=n(L0e,"STRONG",{});var Not=s(ile);t2o=r(Not,"decision_transformer"),Not.forEach(t),a2o=r(L0e," \u2014 "),cN=n(L0e,"A",{href:!0});var qot=s(cN);n2o=r(qot,"DecisionTransformerModel"),qot.forEach(t),s2o=r(L0e," (Decision Transformer model)"),L0e.forEach(t),l2o=i($),Sp=n($,"LI",{});var x0e=s(Sp);dle=n(x0e,"STRONG",{});var jot=s(dle);i2o=r(jot,"deit"),jot.forEach(t),d2o=r(x0e," \u2014 "),fN=n(x0e,"A",{href:!0});var Dot=s(fN);c2o=r(Dot,"DeiTModel"),Dot.forEach(t),f2o=r(x0e," (DeiT model)"),x0e.forEach(t),m2o=i($),Rp=n($,"LI",{});var $0e=s(Rp);cle=n($0e,"STRONG",{});var Got=s(cle);g2o=r(Got,"detr"),Got.forEach(t),h2o=r($0e," \u2014 "),mN=n($0e,"A",{href:!0});var Oot=s(mN);p2o=r(Oot,"DetrModel"),Oot.forEach(t),_2o=r($0e," (DETR model)"),$0e.forEach(t),u2o=i($),Pp=n($,"LI",{});var k0e=s(Pp);fle=n(k0e,"STRONG",{});var Vot=s(fle);b2o=r(Vot,"distilbert"),Vot.forEach(t),v2o=r(k0e," \u2014 "),gN=n(k0e,"A",{href:!0});var Xot=s(gN);F2o=r(Xot,"DistilBertModel"),Xot.forEach(t),T2o=r(k0e," (DistilBERT model)"),k0e.forEach(t),M2o=i($),Bp=n($,"LI",{});var S0e=s(Bp);mle=n(S0e,"STRONG",{});var zot=s(mle);E2o=r(zot,"dpr"),zot.forEach(t),C2o=r(S0e," \u2014 "),hN=n(S0e,"A",{href:!0});var Wot=s(hN);w2o=r(Wot,"DPRQuestionEncoder"),Wot.forEach(t),A2o=r(S0e," (DPR model)"),S0e.forEach(t),y2o=i($),Ip=n($,"LI",{});var R0e=s(Ip);gle=n(R0e,"STRONG",{});var Qot=s(gle);L2o=r(Qot,"dpt"),Qot.forEach(t),x2o=r(R0e," \u2014 "),pN=n(R0e,"A",{href:!0});var Hot=s(pN);$2o=r(Hot,"DPTModel"),Hot.forEach(t),k2o=r(R0e," (DPT model)"),R0e.forEach(t),S2o=i($),Np=n($,"LI",{});var P0e=s(Np);hle=n(P0e,"STRONG",{});var Uot=s(hle);R2o=r(Uot,"electra"),Uot.forEach(t),P2o=r(P0e," \u2014 "),_N=n(P0e,"A",{href:!0});var Jot=s(_N);B2o=r(Jot,"ElectraModel"),Jot.forEach(t),I2o=r(P0e," (ELECTRA model)"),P0e.forEach(t),N2o=i($),qp=n($,"LI",{});var B0e=s(qp);ple=n(B0e,"STRONG",{});var Yot=s(ple);q2o=r(Yot,"flaubert"),Yot.forEach(t),j2o=r(B0e," \u2014 "),uN=n(B0e,"A",{href:!0});var Kot=s(uN);D2o=r(Kot,"FlaubertModel"),Kot.forEach(t),G2o=r(B0e," (FlauBERT model)"),B0e.forEach(t),O2o=i($),jp=n($,"LI",{});var I0e=s(jp);_le=n(I0e,"STRONG",{});var Zot=s(_le);V2o=r(Zot,"flava"),Zot.forEach(t),X2o=r(I0e," \u2014 "),bN=n(I0e,"A",{href:!0});var ert=s(bN);z2o=r(ert,"FlavaModel"),ert.forEach(t),W2o=r(I0e," (Flava model)"),I0e.forEach(t),Q2o=i($),Dp=n($,"LI",{});var N0e=s(Dp);ule=n(N0e,"STRONG",{});var ort=s(ule);H2o=r(ort,"fnet"),ort.forEach(t),U2o=r(N0e," \u2014 "),vN=n(N0e,"A",{href:!0});var rrt=s(vN);J2o=r(rrt,"FNetModel"),rrt.forEach(t),Y2o=r(N0e," (FNet model)"),N0e.forEach(t),K2o=i($),Gp=n($,"LI",{});var q0e=s(Gp);ble=n(q0e,"STRONG",{});var trt=s(ble);Z2o=r(trt,"fsmt"),trt.forEach(t),e1o=r(q0e," \u2014 "),FN=n(q0e,"A",{href:!0});var art=s(FN);o1o=r(art,"FSMTModel"),art.forEach(t),r1o=r(q0e," (FairSeq Machine-Translation model)"),q0e.forEach(t),t1o=i($),Bs=n($,"LI",{});var J$=s(Bs);vle=n(J$,"STRONG",{});var nrt=s(vle);a1o=r(nrt,"funnel"),nrt.forEach(t),n1o=r(J$," \u2014 "),TN=n(J$,"A",{href:!0});var srt=s(TN);s1o=r(srt,"FunnelModel"),srt.forEach(t),l1o=r(J$," or "),MN=n(J$,"A",{href:!0});var lrt=s(MN);i1o=r(lrt,"FunnelBaseModel"),lrt.forEach(t),d1o=r(J$," (Funnel Transformer model)"),J$.forEach(t),c1o=i($),Op=n($,"LI",{});var j0e=s(Op);Fle=n(j0e,"STRONG",{});var irt=s(Fle);f1o=r(irt,"glpn"),irt.forEach(t),m1o=r(j0e," \u2014 "),EN=n(j0e,"A",{href:!0});var drt=s(EN);g1o=r(drt,"GLPNModel"),drt.forEach(t),h1o=r(j0e," (GLPN model)"),j0e.forEach(t),p1o=i($),Vp=n($,"LI",{});var D0e=s(Vp);Tle=n(D0e,"STRONG",{});var crt=s(Tle);_1o=r(crt,"gpt2"),crt.forEach(t),u1o=r(D0e," \u2014 "),CN=n(D0e,"A",{href:!0});var frt=s(CN);b1o=r(frt,"GPT2Model"),frt.forEach(t),v1o=r(D0e," (OpenAI GPT-2 model)"),D0e.forEach(t),F1o=i($),Xp=n($,"LI",{});var G0e=s(Xp);Mle=n(G0e,"STRONG",{});var mrt=s(Mle);T1o=r(mrt,"gpt_neo"),mrt.forEach(t),M1o=r(G0e," \u2014 "),wN=n(G0e,"A",{href:!0});var grt=s(wN);E1o=r(grt,"GPTNeoModel"),grt.forEach(t),C1o=r(G0e," (GPT Neo model)"),G0e.forEach(t),w1o=i($),zp=n($,"LI",{});var O0e=s(zp);Ele=n(O0e,"STRONG",{});var hrt=s(Ele);A1o=r(hrt,"gpt_neox"),hrt.forEach(t),y1o=r(O0e," \u2014 "),AN=n(O0e,"A",{href:!0});var prt=s(AN);L1o=r(prt,"GPTNeoXModel"),prt.forEach(t),x1o=r(O0e," (GPT NeoX model)"),O0e.forEach(t),$1o=i($),Wp=n($,"LI",{});var V0e=s(Wp);Cle=n(V0e,"STRONG",{});var _rt=s(Cle);k1o=r(_rt,"gptj"),_rt.forEach(t),S1o=r(V0e," \u2014 "),yN=n(V0e,"A",{href:!0});var urt=s(yN);R1o=r(urt,"GPTJModel"),urt.forEach(t),P1o=r(V0e," (GPT-J model)"),V0e.forEach(t),B1o=i($),Qp=n($,"LI",{});var X0e=s(Qp);wle=n(X0e,"STRONG",{});var brt=s(wle);I1o=r(brt,"hubert"),brt.forEach(t),N1o=r(X0e," \u2014 "),LN=n(X0e,"A",{href:!0});var vrt=s(LN);q1o=r(vrt,"HubertModel"),vrt.forEach(t),j1o=r(X0e," (Hubert model)"),X0e.forEach(t),D1o=i($),Hp=n($,"LI",{});var z0e=s(Hp);Ale=n(z0e,"STRONG",{});var Frt=s(Ale);G1o=r(Frt,"ibert"),Frt.forEach(t),O1o=r(z0e," \u2014 "),xN=n(z0e,"A",{href:!0});var Trt=s(xN);V1o=r(Trt,"IBertModel"),Trt.forEach(t),X1o=r(z0e," (I-BERT model)"),z0e.forEach(t),z1o=i($),Up=n($,"LI",{});var W0e=s(Up);yle=n(W0e,"STRONG",{});var Mrt=s(yle);W1o=r(Mrt,"imagegpt"),Mrt.forEach(t),Q1o=r(W0e," \u2014 "),$N=n(W0e,"A",{href:!0});var Ert=s($N);H1o=r(Ert,"ImageGPTModel"),Ert.forEach(t),U1o=r(W0e," (ImageGPT model)"),W0e.forEach(t),J1o=i($),Jp=n($,"LI",{});var Q0e=s(Jp);Lle=n(Q0e,"STRONG",{});var Crt=s(Lle);Y1o=r(Crt,"layoutlm"),Crt.forEach(t),K1o=r(Q0e," \u2014 "),kN=n(Q0e,"A",{href:!0});var wrt=s(kN);Z1o=r(wrt,"LayoutLMModel"),wrt.forEach(t),ebo=r(Q0e," (LayoutLM model)"),Q0e.forEach(t),obo=i($),Yp=n($,"LI",{});var H0e=s(Yp);xle=n(H0e,"STRONG",{});var Art=s(xle);rbo=r(Art,"layoutlmv2"),Art.forEach(t),tbo=r(H0e," \u2014 "),SN=n(H0e,"A",{href:!0});var yrt=s(SN);abo=r(yrt,"LayoutLMv2Model"),yrt.forEach(t),nbo=r(H0e," (LayoutLMv2 model)"),H0e.forEach(t),sbo=i($),Kp=n($,"LI",{});var U0e=s(Kp);$le=n(U0e,"STRONG",{});var Lrt=s($le);lbo=r(Lrt,"layoutlmv3"),Lrt.forEach(t),ibo=r(U0e," \u2014 "),RN=n(U0e,"A",{href:!0});var xrt=s(RN);dbo=r(xrt,"LayoutLMv3Model"),xrt.forEach(t),cbo=r(U0e," (LayoutLMv3 model)"),U0e.forEach(t),fbo=i($),Zp=n($,"LI",{});var J0e=s(Zp);kle=n(J0e,"STRONG",{});var $rt=s(kle);mbo=r($rt,"led"),$rt.forEach(t),gbo=r(J0e," \u2014 "),PN=n(J0e,"A",{href:!0});var krt=s(PN);hbo=r(krt,"LEDModel"),krt.forEach(t),pbo=r(J0e," (LED model)"),J0e.forEach(t),_bo=i($),e_=n($,"LI",{});var Y0e=s(e_);Sle=n(Y0e,"STRONG",{});var Srt=s(Sle);ubo=r(Srt,"longformer"),Srt.forEach(t),bbo=r(Y0e," \u2014 "),BN=n(Y0e,"A",{href:!0});var Rrt=s(BN);vbo=r(Rrt,"LongformerModel"),Rrt.forEach(t),Fbo=r(Y0e," (Longformer model)"),Y0e.forEach(t),Tbo=i($),o_=n($,"LI",{});var K0e=s(o_);Rle=n(K0e,"STRONG",{});var Prt=s(Rle);Mbo=r(Prt,"longt5"),Prt.forEach(t),Ebo=r(K0e," \u2014 "),IN=n(K0e,"A",{href:!0});var Brt=s(IN);Cbo=r(Brt,"LongT5Model"),Brt.forEach(t),wbo=r(K0e," (LongT5 model)"),K0e.forEach(t),Abo=i($),r_=n($,"LI",{});var Z0e=s(r_);Ple=n(Z0e,"STRONG",{});var Irt=s(Ple);ybo=r(Irt,"luke"),Irt.forEach(t),Lbo=r(Z0e," \u2014 "),NN=n(Z0e,"A",{href:!0});var Nrt=s(NN);xbo=r(Nrt,"LukeModel"),Nrt.forEach(t),$bo=r(Z0e," (LUKE model)"),Z0e.forEach(t),kbo=i($),t_=n($,"LI",{});var eAe=s(t_);Ble=n(eAe,"STRONG",{});var qrt=s(Ble);Sbo=r(qrt,"lxmert"),qrt.forEach(t),Rbo=r(eAe," \u2014 "),qN=n(eAe,"A",{href:!0});var jrt=s(qN);Pbo=r(jrt,"LxmertModel"),jrt.forEach(t),Bbo=r(eAe," (LXMERT model)"),eAe.forEach(t),Ibo=i($),a_=n($,"LI",{});var oAe=s(a_);Ile=n(oAe,"STRONG",{});var Drt=s(Ile);Nbo=r(Drt,"m2m_100"),Drt.forEach(t),qbo=r(oAe," \u2014 "),jN=n(oAe,"A",{href:!0});var Grt=s(jN);jbo=r(Grt,"M2M100Model"),Grt.forEach(t),Dbo=r(oAe," (M2M100 model)"),oAe.forEach(t),Gbo=i($),n_=n($,"LI",{});var rAe=s(n_);Nle=n(rAe,"STRONG",{});var Ort=s(Nle);Obo=r(Ort,"marian"),Ort.forEach(t),Vbo=r(rAe," \u2014 "),DN=n(rAe,"A",{href:!0});var Vrt=s(DN);Xbo=r(Vrt,"MarianModel"),Vrt.forEach(t),zbo=r(rAe," (Marian model)"),rAe.forEach(t),Wbo=i($),s_=n($,"LI",{});var tAe=s(s_);qle=n(tAe,"STRONG",{});var Xrt=s(qle);Qbo=r(Xrt,"maskformer"),Xrt.forEach(t),Hbo=r(tAe," \u2014 "),GN=n(tAe,"A",{href:!0});var zrt=s(GN);Ubo=r(zrt,"MaskFormerModel"),zrt.forEach(t),Jbo=r(tAe," (MaskFormer model)"),tAe.forEach(t),Ybo=i($),l_=n($,"LI",{});var aAe=s(l_);jle=n(aAe,"STRONG",{});var Wrt=s(jle);Kbo=r(Wrt,"mbart"),Wrt.forEach(t),Zbo=r(aAe," \u2014 "),ON=n(aAe,"A",{href:!0});var Qrt=s(ON);evo=r(Qrt,"MBartModel"),Qrt.forEach(t),ovo=r(aAe," (mBART model)"),aAe.forEach(t),rvo=i($),i_=n($,"LI",{});var nAe=s(i_);Dle=n(nAe,"STRONG",{});var Hrt=s(Dle);tvo=r(Hrt,"megatron-bert"),Hrt.forEach(t),avo=r(nAe," \u2014 "),VN=n(nAe,"A",{href:!0});var Urt=s(VN);nvo=r(Urt,"MegatronBertModel"),Urt.forEach(t),svo=r(nAe," (MegatronBert model)"),nAe.forEach(t),lvo=i($),d_=n($,"LI",{});var sAe=s(d_);Gle=n(sAe,"STRONG",{});var Jrt=s(Gle);ivo=r(Jrt,"mobilebert"),Jrt.forEach(t),dvo=r(sAe," \u2014 "),XN=n(sAe,"A",{href:!0});var Yrt=s(XN);cvo=r(Yrt,"MobileBertModel"),Yrt.forEach(t),fvo=r(sAe," (MobileBERT model)"),sAe.forEach(t),mvo=i($),c_=n($,"LI",{});var lAe=s(c_);Ole=n(lAe,"STRONG",{});var Krt=s(Ole);gvo=r(Krt,"mpnet"),Krt.forEach(t),hvo=r(lAe," \u2014 "),zN=n(lAe,"A",{href:!0});var Zrt=s(zN);pvo=r(Zrt,"MPNetModel"),Zrt.forEach(t),_vo=r(lAe," (MPNet model)"),lAe.forEach(t),uvo=i($),f_=n($,"LI",{});var iAe=s(f_);Vle=n(iAe,"STRONG",{});var ett=s(Vle);bvo=r(ett,"mt5"),ett.forEach(t),vvo=r(iAe," \u2014 "),WN=n(iAe,"A",{href:!0});var ott=s(WN);Fvo=r(ott,"MT5Model"),ott.forEach(t),Tvo=r(iAe," (mT5 model)"),iAe.forEach(t),Mvo=i($),m_=n($,"LI",{});var dAe=s(m_);Xle=n(dAe,"STRONG",{});var rtt=s(Xle);Evo=r(rtt,"nystromformer"),rtt.forEach(t),Cvo=r(dAe," \u2014 "),QN=n(dAe,"A",{href:!0});var ttt=s(QN);wvo=r(ttt,"NystromformerModel"),ttt.forEach(t),Avo=r(dAe," (Nystromformer model)"),dAe.forEach(t),yvo=i($),g_=n($,"LI",{});var cAe=s(g_);zle=n(cAe,"STRONG",{});var att=s(zle);Lvo=r(att,"openai-gpt"),att.forEach(t),xvo=r(cAe," \u2014 "),HN=n(cAe,"A",{href:!0});var ntt=s(HN);$vo=r(ntt,"OpenAIGPTModel"),ntt.forEach(t),kvo=r(cAe," (OpenAI GPT model)"),cAe.forEach(t),Svo=i($),h_=n($,"LI",{});var fAe=s(h_);Wle=n(fAe,"STRONG",{});var stt=s(Wle);Rvo=r(stt,"opt"),stt.forEach(t),Pvo=r(fAe," \u2014 "),UN=n(fAe,"A",{href:!0});var ltt=s(UN);Bvo=r(ltt,"OPTModel"),ltt.forEach(t),Ivo=r(fAe," (OPT model)"),fAe.forEach(t),Nvo=i($),p_=n($,"LI",{});var mAe=s(p_);Qle=n(mAe,"STRONG",{});var itt=s(Qle);qvo=r(itt,"pegasus"),itt.forEach(t),jvo=r(mAe," \u2014 "),JN=n(mAe,"A",{href:!0});var dtt=s(JN);Dvo=r(dtt,"PegasusModel"),dtt.forEach(t),Gvo=r(mAe," (Pegasus model)"),mAe.forEach(t),Ovo=i($),__=n($,"LI",{});var gAe=s(__);Hle=n(gAe,"STRONG",{});var ctt=s(Hle);Vvo=r(ctt,"perceiver"),ctt.forEach(t),Xvo=r(gAe," \u2014 "),YN=n(gAe,"A",{href:!0});var ftt=s(YN);zvo=r(ftt,"PerceiverModel"),ftt.forEach(t),Wvo=r(gAe," (Perceiver model)"),gAe.forEach(t),Qvo=i($),u_=n($,"LI",{});var hAe=s(u_);Ule=n(hAe,"STRONG",{});var mtt=s(Ule);Hvo=r(mtt,"plbart"),mtt.forEach(t),Uvo=r(hAe," \u2014 "),KN=n(hAe,"A",{href:!0});var gtt=s(KN);Jvo=r(gtt,"PLBartModel"),gtt.forEach(t),Yvo=r(hAe," (PLBart model)"),hAe.forEach(t),Kvo=i($),b_=n($,"LI",{});var pAe=s(b_);Jle=n(pAe,"STRONG",{});var htt=s(Jle);Zvo=r(htt,"poolformer"),htt.forEach(t),eFo=r(pAe," \u2014 "),ZN=n(pAe,"A",{href:!0});var ptt=s(ZN);oFo=r(ptt,"PoolFormerModel"),ptt.forEach(t),rFo=r(pAe," (PoolFormer model)"),pAe.forEach(t),tFo=i($),v_=n($,"LI",{});var _Ae=s(v_);Yle=n(_Ae,"STRONG",{});var _tt=s(Yle);aFo=r(_tt,"prophetnet"),_tt.forEach(t),nFo=r(_Ae," \u2014 "),eq=n(_Ae,"A",{href:!0});var utt=s(eq);sFo=r(utt,"ProphetNetModel"),utt.forEach(t),lFo=r(_Ae," (ProphetNet model)"),_Ae.forEach(t),iFo=i($),F_=n($,"LI",{});var uAe=s(F_);Kle=n(uAe,"STRONG",{});var btt=s(Kle);dFo=r(btt,"qdqbert"),btt.forEach(t),cFo=r(uAe," \u2014 "),oq=n(uAe,"A",{href:!0});var vtt=s(oq);fFo=r(vtt,"QDQBertModel"),vtt.forEach(t),mFo=r(uAe," (QDQBert model)"),uAe.forEach(t),gFo=i($),T_=n($,"LI",{});var bAe=s(T_);Zle=n(bAe,"STRONG",{});var Ftt=s(Zle);hFo=r(Ftt,"reformer"),Ftt.forEach(t),pFo=r(bAe," \u2014 "),rq=n(bAe,"A",{href:!0});var Ttt=s(rq);_Fo=r(Ttt,"ReformerModel"),Ttt.forEach(t),uFo=r(bAe," (Reformer model)"),bAe.forEach(t),bFo=i($),M_=n($,"LI",{});var vAe=s(M_);eie=n(vAe,"STRONG",{});var Mtt=s(eie);vFo=r(Mtt,"regnet"),Mtt.forEach(t),FFo=r(vAe," \u2014 "),tq=n(vAe,"A",{href:!0});var Ett=s(tq);TFo=r(Ett,"RegNetModel"),Ett.forEach(t),MFo=r(vAe," (RegNet model)"),vAe.forEach(t),EFo=i($),E_=n($,"LI",{});var FAe=s(E_);oie=n(FAe,"STRONG",{});var Ctt=s(oie);CFo=r(Ctt,"rembert"),Ctt.forEach(t),wFo=r(FAe," \u2014 "),aq=n(FAe,"A",{href:!0});var wtt=s(aq);AFo=r(wtt,"RemBertModel"),wtt.forEach(t),yFo=r(FAe," (RemBERT model)"),FAe.forEach(t),LFo=i($),C_=n($,"LI",{});var TAe=s(C_);rie=n(TAe,"STRONG",{});var Att=s(rie);xFo=r(Att,"resnet"),Att.forEach(t),$Fo=r(TAe," \u2014 "),nq=n(TAe,"A",{href:!0});var ytt=s(nq);kFo=r(ytt,"ResNetModel"),ytt.forEach(t),SFo=r(TAe," (ResNet model)"),TAe.forEach(t),RFo=i($),w_=n($,"LI",{});var MAe=s(w_);tie=n(MAe,"STRONG",{});var Ltt=s(tie);PFo=r(Ltt,"retribert"),Ltt.forEach(t),BFo=r(MAe," \u2014 "),sq=n(MAe,"A",{href:!0});var xtt=s(sq);IFo=r(xtt,"RetriBertModel"),xtt.forEach(t),NFo=r(MAe," (RetriBERT model)"),MAe.forEach(t),qFo=i($),A_=n($,"LI",{});var EAe=s(A_);aie=n(EAe,"STRONG",{});var $tt=s(aie);jFo=r($tt,"roberta"),$tt.forEach(t),DFo=r(EAe," \u2014 "),lq=n(EAe,"A",{href:!0});var ktt=s(lq);GFo=r(ktt,"RobertaModel"),ktt.forEach(t),OFo=r(EAe," (RoBERTa model)"),EAe.forEach(t),VFo=i($),y_=n($,"LI",{});var CAe=s(y_);nie=n(CAe,"STRONG",{});var Stt=s(nie);XFo=r(Stt,"roformer"),Stt.forEach(t),zFo=r(CAe," \u2014 "),iq=n(CAe,"A",{href:!0});var Rtt=s(iq);WFo=r(Rtt,"RoFormerModel"),Rtt.forEach(t),QFo=r(CAe," (RoFormer model)"),CAe.forEach(t),HFo=i($),L_=n($,"LI",{});var wAe=s(L_);sie=n(wAe,"STRONG",{});var Ptt=s(sie);UFo=r(Ptt,"segformer"),Ptt.forEach(t),JFo=r(wAe," \u2014 "),dq=n(wAe,"A",{href:!0});var Btt=s(dq);YFo=r(Btt,"SegformerModel"),Btt.forEach(t),KFo=r(wAe," (SegFormer model)"),wAe.forEach(t),ZFo=i($),x_=n($,"LI",{});var AAe=s(x_);lie=n(AAe,"STRONG",{});var Itt=s(lie);e6o=r(Itt,"sew"),Itt.forEach(t),o6o=r(AAe," \u2014 "),cq=n(AAe,"A",{href:!0});var Ntt=s(cq);r6o=r(Ntt,"SEWModel"),Ntt.forEach(t),t6o=r(AAe," (SEW model)"),AAe.forEach(t),a6o=i($),$_=n($,"LI",{});var yAe=s($_);iie=n(yAe,"STRONG",{});var qtt=s(iie);n6o=r(qtt,"sew-d"),qtt.forEach(t),s6o=r(yAe," \u2014 "),fq=n(yAe,"A",{href:!0});var jtt=s(fq);l6o=r(jtt,"SEWDModel"),jtt.forEach(t),i6o=r(yAe," (SEW-D model)"),yAe.forEach(t),d6o=i($),k_=n($,"LI",{});var LAe=s(k_);die=n(LAe,"STRONG",{});var Dtt=s(die);c6o=r(Dtt,"speech_to_text"),Dtt.forEach(t),f6o=r(LAe," \u2014 "),mq=n(LAe,"A",{href:!0});var Gtt=s(mq);m6o=r(Gtt,"Speech2TextModel"),Gtt.forEach(t),g6o=r(LAe," (Speech2Text model)"),LAe.forEach(t),h6o=i($),S_=n($,"LI",{});var xAe=s(S_);cie=n(xAe,"STRONG",{});var Ott=s(cie);p6o=r(Ott,"splinter"),Ott.forEach(t),_6o=r(xAe," \u2014 "),gq=n(xAe,"A",{href:!0});var Vtt=s(gq);u6o=r(Vtt,"SplinterModel"),Vtt.forEach(t),b6o=r(xAe," (Splinter model)"),xAe.forEach(t),v6o=i($),R_=n($,"LI",{});var $Ae=s(R_);fie=n($Ae,"STRONG",{});var Xtt=s(fie);F6o=r(Xtt,"squeezebert"),Xtt.forEach(t),T6o=r($Ae," \u2014 "),hq=n($Ae,"A",{href:!0});var ztt=s(hq);M6o=r(ztt,"SqueezeBertModel"),ztt.forEach(t),E6o=r($Ae," (SqueezeBERT model)"),$Ae.forEach(t),C6o=i($),P_=n($,"LI",{});var kAe=s(P_);mie=n(kAe,"STRONG",{});var Wtt=s(mie);w6o=r(Wtt,"swin"),Wtt.forEach(t),A6o=r(kAe," \u2014 "),pq=n(kAe,"A",{href:!0});var Qtt=s(pq);y6o=r(Qtt,"SwinModel"),Qtt.forEach(t),L6o=r(kAe," (Swin model)"),kAe.forEach(t),x6o=i($),B_=n($,"LI",{});var SAe=s(B_);gie=n(SAe,"STRONG",{});var Htt=s(gie);$6o=r(Htt,"t5"),Htt.forEach(t),k6o=r(SAe," \u2014 "),_q=n(SAe,"A",{href:!0});var Utt=s(_q);S6o=r(Utt,"T5Model"),Utt.forEach(t),R6o=r(SAe," (T5 model)"),SAe.forEach(t),P6o=i($),I_=n($,"LI",{});var RAe=s(I_);hie=n(RAe,"STRONG",{});var Jtt=s(hie);B6o=r(Jtt,"tapas"),Jtt.forEach(t),I6o=r(RAe," \u2014 "),uq=n(RAe,"A",{href:!0});var Ytt=s(uq);N6o=r(Ytt,"TapasModel"),Ytt.forEach(t),q6o=r(RAe," (TAPAS model)"),RAe.forEach(t),j6o=i($),N_=n($,"LI",{});var PAe=s(N_);pie=n(PAe,"STRONG",{});var Ktt=s(pie);D6o=r(Ktt,"trajectory_transformer"),Ktt.forEach(t),G6o=r(PAe," \u2014 "),bq=n(PAe,"A",{href:!0});var Ztt=s(bq);O6o=r(Ztt,"TrajectoryTransformerModel"),Ztt.forEach(t),V6o=r(PAe," (Trajectory Transformer model)"),PAe.forEach(t),X6o=i($),q_=n($,"LI",{});var BAe=s(q_);_ie=n(BAe,"STRONG",{});var eat=s(_ie);z6o=r(eat,"transfo-xl"),eat.forEach(t),W6o=r(BAe," \u2014 "),vq=n(BAe,"A",{href:!0});var oat=s(vq);Q6o=r(oat,"TransfoXLModel"),oat.forEach(t),H6o=r(BAe," (Transformer-XL model)"),BAe.forEach(t),U6o=i($),j_=n($,"LI",{});var IAe=s(j_);uie=n(IAe,"STRONG",{});var rat=s(uie);J6o=r(rat,"unispeech"),rat.forEach(t),Y6o=r(IAe," \u2014 "),Fq=n(IAe,"A",{href:!0});var tat=s(Fq);K6o=r(tat,"UniSpeechModel"),tat.forEach(t),Z6o=r(IAe," (UniSpeech model)"),IAe.forEach(t),eTo=i($),D_=n($,"LI",{});var NAe=s(D_);bie=n(NAe,"STRONG",{});var aat=s(bie);oTo=r(aat,"unispeech-sat"),aat.forEach(t),rTo=r(NAe," \u2014 "),Tq=n(NAe,"A",{href:!0});var nat=s(Tq);tTo=r(nat,"UniSpeechSatModel"),nat.forEach(t),aTo=r(NAe," (UniSpeechSat model)"),NAe.forEach(t),nTo=i($),G_=n($,"LI",{});var qAe=s(G_);vie=n(qAe,"STRONG",{});var sat=s(vie);sTo=r(sat,"van"),sat.forEach(t),lTo=r(qAe," \u2014 "),Mq=n(qAe,"A",{href:!0});var lat=s(Mq);iTo=r(lat,"VanModel"),lat.forEach(t),dTo=r(qAe," (VAN model)"),qAe.forEach(t),cTo=i($),O_=n($,"LI",{});var jAe=s(O_);Fie=n(jAe,"STRONG",{});var iat=s(Fie);fTo=r(iat,"vilt"),iat.forEach(t),mTo=r(jAe," \u2014 "),Eq=n(jAe,"A",{href:!0});var dat=s(Eq);gTo=r(dat,"ViltModel"),dat.forEach(t),hTo=r(jAe," (ViLT model)"),jAe.forEach(t),pTo=i($),V_=n($,"LI",{});var DAe=s(V_);Tie=n(DAe,"STRONG",{});var cat=s(Tie);_To=r(cat,"vision-text-dual-encoder"),cat.forEach(t),uTo=r(DAe," \u2014 "),Cq=n(DAe,"A",{href:!0});var fat=s(Cq);bTo=r(fat,"VisionTextDualEncoderModel"),fat.forEach(t),vTo=r(DAe," (VisionTextDualEncoder model)"),DAe.forEach(t),FTo=i($),X_=n($,"LI",{});var GAe=s(X_);Mie=n(GAe,"STRONG",{});var mat=s(Mie);TTo=r(mat,"visual_bert"),mat.forEach(t),MTo=r(GAe," \u2014 "),wq=n(GAe,"A",{href:!0});var gat=s(wq);ETo=r(gat,"VisualBertModel"),gat.forEach(t),CTo=r(GAe," (VisualBert model)"),GAe.forEach(t),wTo=i($),z_=n($,"LI",{});var OAe=s(z_);Eie=n(OAe,"STRONG",{});var hat=s(Eie);ATo=r(hat,"vit"),hat.forEach(t),yTo=r(OAe," \u2014 "),Aq=n(OAe,"A",{href:!0});var pat=s(Aq);LTo=r(pat,"ViTModel"),pat.forEach(t),xTo=r(OAe," (ViT model)"),OAe.forEach(t),$To=i($),W_=n($,"LI",{});var VAe=s(W_);Cie=n(VAe,"STRONG",{});var _at=s(Cie);kTo=r(_at,"vit_mae"),_at.forEach(t),STo=r(VAe," \u2014 "),yq=n(VAe,"A",{href:!0});var uat=s(yq);RTo=r(uat,"ViTMAEModel"),uat.forEach(t),PTo=r(VAe," (ViTMAE model)"),VAe.forEach(t),BTo=i($),Q_=n($,"LI",{});var XAe=s(Q_);wie=n(XAe,"STRONG",{});var bat=s(wie);ITo=r(bat,"wav2vec2"),bat.forEach(t),NTo=r(XAe," \u2014 "),Lq=n(XAe,"A",{href:!0});var vat=s(Lq);qTo=r(vat,"Wav2Vec2Model"),vat.forEach(t),jTo=r(XAe," (Wav2Vec2 model)"),XAe.forEach(t),DTo=i($),H_=n($,"LI",{});var zAe=s(H_);Aie=n(zAe,"STRONG",{});var Fat=s(Aie);GTo=r(Fat,"wav2vec2-conformer"),Fat.forEach(t),OTo=r(zAe," \u2014 "),xq=n(zAe,"A",{href:!0});var Tat=s(xq);VTo=r(Tat,"Wav2Vec2ConformerModel"),Tat.forEach(t),XTo=r(zAe," (Wav2Vec2-Conformer model)"),zAe.forEach(t),zTo=i($),U_=n($,"LI",{});var WAe=s(U_);yie=n(WAe,"STRONG",{});var Mat=s(yie);WTo=r(Mat,"wavlm"),Mat.forEach(t),QTo=r(WAe," \u2014 "),$q=n(WAe,"A",{href:!0});var Eat=s($q);HTo=r(Eat,"WavLMModel"),Eat.forEach(t),UTo=r(WAe," (WavLM model)"),WAe.forEach(t),JTo=i($),J_=n($,"LI",{});var QAe=s(J_);Lie=n(QAe,"STRONG",{});var Cat=s(Lie);YTo=r(Cat,"xglm"),Cat.forEach(t),KTo=r(QAe," \u2014 "),kq=n(QAe,"A",{href:!0});var wat=s(kq);ZTo=r(wat,"XGLMModel"),wat.forEach(t),e7o=r(QAe," (XGLM model)"),QAe.forEach(t),o7o=i($),Y_=n($,"LI",{});var HAe=s(Y_);xie=n(HAe,"STRONG",{});var Aat=s(xie);r7o=r(Aat,"xlm"),Aat.forEach(t),t7o=r(HAe," \u2014 "),Sq=n(HAe,"A",{href:!0});var yat=s(Sq);a7o=r(yat,"XLMModel"),yat.forEach(t),n7o=r(HAe," (XLM model)"),HAe.forEach(t),s7o=i($),K_=n($,"LI",{});var UAe=s(K_);$ie=n(UAe,"STRONG",{});var Lat=s($ie);l7o=r(Lat,"xlm-prophetnet"),Lat.forEach(t),i7o=r(UAe," \u2014 "),Rq=n(UAe,"A",{href:!0});var xat=s(Rq);d7o=r(xat,"XLMProphetNetModel"),xat.forEach(t),c7o=r(UAe," (XLMProphetNet model)"),UAe.forEach(t),f7o=i($),Z_=n($,"LI",{});var JAe=s(Z_);kie=n(JAe,"STRONG",{});var $at=s(kie);m7o=r($at,"xlm-roberta"),$at.forEach(t),g7o=r(JAe," \u2014 "),Pq=n(JAe,"A",{href:!0});var kat=s(Pq);h7o=r(kat,"XLMRobertaModel"),kat.forEach(t),p7o=r(JAe," (XLM-RoBERTa model)"),JAe.forEach(t),_7o=i($),eu=n($,"LI",{});var YAe=s(eu);Sie=n(YAe,"STRONG",{});var Sat=s(Sie);u7o=r(Sat,"xlm-roberta-xl"),Sat.forEach(t),b7o=r(YAe," \u2014 "),Bq=n(YAe,"A",{href:!0});var Rat=s(Bq);v7o=r(Rat,"XLMRobertaXLModel"),Rat.forEach(t),F7o=r(YAe," (XLM-RoBERTa-XL model)"),YAe.forEach(t),T7o=i($),ou=n($,"LI",{});var KAe=s(ou);Rie=n(KAe,"STRONG",{});var Pat=s(Rie);M7o=r(Pat,"xlnet"),Pat.forEach(t),E7o=r(KAe," \u2014 "),Iq=n(KAe,"A",{href:!0});var Bat=s(Iq);C7o=r(Bat,"XLNetModel"),Bat.forEach(t),w7o=r(KAe," (XLNet model)"),KAe.forEach(t),A7o=i($),ru=n($,"LI",{});var ZAe=s(ru);Pie=n(ZAe,"STRONG",{});var Iat=s(Pie);y7o=r(Iat,"yolos"),Iat.forEach(t),L7o=r(ZAe," \u2014 "),Nq=n(ZAe,"A",{href:!0});var Nat=s(Nq);x7o=r(Nat,"YolosModel"),Nat.forEach(t),$7o=r(ZAe," (YOLOS model)"),ZAe.forEach(t),k7o=i($),tu=n($,"LI",{});var eye=s(tu);Bie=n(eye,"STRONG",{});var qat=s(Bie);S7o=r(qat,"yoso"),qat.forEach(t),R7o=r(eye," \u2014 "),qq=n(eye,"A",{href:!0});var jat=s(qq);P7o=r(jat,"YosoModel"),jat.forEach(t),B7o=r(eye," (YOSO model)"),eye.forEach(t),$.forEach(t),I7o=i(oa),au=n(oa,"P",{});var oye=s(au);N7o=r(oye,"The model is set in evaluation mode by default using "),Iie=n(oye,"CODE",{});var Dat=s(Iie);q7o=r(Dat,"model.eval()"),Dat.forEach(t),j7o=r(oye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nie=n(oye,"CODE",{});var Gat=s(Nie);D7o=r(Gat,"model.train()"),Gat.forEach(t),oye.forEach(t),G7o=i(oa),T(nu.$$.fragment,oa),oa.forEach(t),Os.forEach(t),Oqe=i(f),xi=n(f,"H2",{class:!0});var WDe=s(xi);su=n(WDe,"A",{id:!0,class:!0,href:!0});var Oat=s(su);qie=n(Oat,"SPAN",{});var Vat=s(qie);T(fA.$$.fragment,Vat),Vat.forEach(t),Oat.forEach(t),O7o=i(WDe),jie=n(WDe,"SPAN",{});var Xat=s(jie);V7o=r(Xat,"AutoModelForPreTraining"),Xat.forEach(t),WDe.forEach(t),Vqe=i(f),xo=n(f,"DIV",{class:!0});var Vs=s(xo);T(mA.$$.fragment,Vs),X7o=i(Vs),$i=n(Vs,"P",{});var RZ=s($i);z7o=r(RZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),jq=n(RZ,"A",{href:!0});var zat=s(jq);W7o=r(zat,"from_pretrained()"),zat.forEach(t),Q7o=r(RZ," class method or the "),Dq=n(RZ,"A",{href:!0});var Wat=s(Dq);H7o=r(Wat,"from_config()"),Wat.forEach(t),U7o=r(RZ,` class
method.`),RZ.forEach(t),J7o=i(Vs),gA=n(Vs,"P",{});var QDe=s(gA);Y7o=r(QDe,"This class cannot be instantiated directly using "),Die=n(QDe,"CODE",{});var Qat=s(Die);K7o=r(Qat,"__init__()"),Qat.forEach(t),Z7o=r(QDe," (throws an error)."),QDe.forEach(t),e9o=i(Vs),at=n(Vs,"DIV",{class:!0});var D3=s(at);T(hA.$$.fragment,D3),o9o=i(D3),Gie=n(D3,"P",{});var Hat=s(Gie);r9o=r(Hat,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Hat.forEach(t),t9o=i(D3),ki=n(D3,"P",{});var PZ=s(ki);a9o=r(PZ,`Note:
Loading a model from its configuration file does `),Oie=n(PZ,"STRONG",{});var Uat=s(Oie);n9o=r(Uat,"not"),Uat.forEach(t),s9o=r(PZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Gq=n(PZ,"A",{href:!0});var Jat=s(Gq);l9o=r(Jat,"from_pretrained()"),Jat.forEach(t),i9o=r(PZ," to load the model weights."),PZ.forEach(t),d9o=i(D3),T(lu.$$.fragment,D3),D3.forEach(t),c9o=i(Vs),Ye=n(Vs,"DIV",{class:!0});var ra=s(Ye);T(pA.$$.fragment,ra),f9o=i(ra),Vie=n(ra,"P",{});var Yat=s(Vie);m9o=r(Yat,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Yat.forEach(t),g9o=i(ra),xa=n(ra,"P",{});var G3=s(xa);h9o=r(G3,"The model class to instantiate is selected based on the "),Xie=n(G3,"CODE",{});var Kat=s(Xie);p9o=r(Kat,"model_type"),Kat.forEach(t),_9o=r(G3,` property of the config object (either
passed as an argument or loaded from `),zie=n(G3,"CODE",{});var Zat=s(zie);u9o=r(Zat,"pretrained_model_name_or_path"),Zat.forEach(t),b9o=r(G3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wie=n(G3,"CODE",{});var ent=s(Wie);v9o=r(ent,"pretrained_model_name_or_path"),ent.forEach(t),F9o=r(G3,":"),G3.forEach(t),T9o=i(ra),G=n(ra,"UL",{});var O=s(G);iu=n(O,"LI",{});var rye=s(iu);Qie=n(rye,"STRONG",{});var ont=s(Qie);M9o=r(ont,"albert"),ont.forEach(t),E9o=r(rye," \u2014 "),Oq=n(rye,"A",{href:!0});var rnt=s(Oq);C9o=r(rnt,"AlbertForPreTraining"),rnt.forEach(t),w9o=r(rye," (ALBERT model)"),rye.forEach(t),A9o=i(O),du=n(O,"LI",{});var tye=s(du);Hie=n(tye,"STRONG",{});var tnt=s(Hie);y9o=r(tnt,"bart"),tnt.forEach(t),L9o=r(tye," \u2014 "),Vq=n(tye,"A",{href:!0});var ant=s(Vq);x9o=r(ant,"BartForConditionalGeneration"),ant.forEach(t),$9o=r(tye," (BART model)"),tye.forEach(t),k9o=i(O),cu=n(O,"LI",{});var aye=s(cu);Uie=n(aye,"STRONG",{});var nnt=s(Uie);S9o=r(nnt,"bert"),nnt.forEach(t),R9o=r(aye," \u2014 "),Xq=n(aye,"A",{href:!0});var snt=s(Xq);P9o=r(snt,"BertForPreTraining"),snt.forEach(t),B9o=r(aye," (BERT model)"),aye.forEach(t),I9o=i(O),fu=n(O,"LI",{});var nye=s(fu);Jie=n(nye,"STRONG",{});var lnt=s(Jie);N9o=r(lnt,"big_bird"),lnt.forEach(t),q9o=r(nye," \u2014 "),zq=n(nye,"A",{href:!0});var int=s(zq);j9o=r(int,"BigBirdForPreTraining"),int.forEach(t),D9o=r(nye," (BigBird model)"),nye.forEach(t),G9o=i(O),mu=n(O,"LI",{});var sye=s(mu);Yie=n(sye,"STRONG",{});var dnt=s(Yie);O9o=r(dnt,"camembert"),dnt.forEach(t),V9o=r(sye," \u2014 "),Wq=n(sye,"A",{href:!0});var cnt=s(Wq);X9o=r(cnt,"CamembertForMaskedLM"),cnt.forEach(t),z9o=r(sye," (CamemBERT model)"),sye.forEach(t),W9o=i(O),gu=n(O,"LI",{});var lye=s(gu);Kie=n(lye,"STRONG",{});var fnt=s(Kie);Q9o=r(fnt,"ctrl"),fnt.forEach(t),H9o=r(lye," \u2014 "),Qq=n(lye,"A",{href:!0});var mnt=s(Qq);U9o=r(mnt,"CTRLLMHeadModel"),mnt.forEach(t),J9o=r(lye," (CTRL model)"),lye.forEach(t),Y9o=i(O),hu=n(O,"LI",{});var iye=s(hu);Zie=n(iye,"STRONG",{});var gnt=s(Zie);K9o=r(gnt,"data2vec-text"),gnt.forEach(t),Z9o=r(iye," \u2014 "),Hq=n(iye,"A",{href:!0});var hnt=s(Hq);eMo=r(hnt,"Data2VecTextForMaskedLM"),hnt.forEach(t),oMo=r(iye," (Data2VecText model)"),iye.forEach(t),rMo=i(O),pu=n(O,"LI",{});var dye=s(pu);ede=n(dye,"STRONG",{});var pnt=s(ede);tMo=r(pnt,"deberta"),pnt.forEach(t),aMo=r(dye," \u2014 "),Uq=n(dye,"A",{href:!0});var _nt=s(Uq);nMo=r(_nt,"DebertaForMaskedLM"),_nt.forEach(t),sMo=r(dye," (DeBERTa model)"),dye.forEach(t),lMo=i(O),_u=n(O,"LI",{});var cye=s(_u);ode=n(cye,"STRONG",{});var unt=s(ode);iMo=r(unt,"deberta-v2"),unt.forEach(t),dMo=r(cye," \u2014 "),Jq=n(cye,"A",{href:!0});var bnt=s(Jq);cMo=r(bnt,"DebertaV2ForMaskedLM"),bnt.forEach(t),fMo=r(cye," (DeBERTa-v2 model)"),cye.forEach(t),mMo=i(O),uu=n(O,"LI",{});var fye=s(uu);rde=n(fye,"STRONG",{});var vnt=s(rde);gMo=r(vnt,"distilbert"),vnt.forEach(t),hMo=r(fye," \u2014 "),Yq=n(fye,"A",{href:!0});var Fnt=s(Yq);pMo=r(Fnt,"DistilBertForMaskedLM"),Fnt.forEach(t),_Mo=r(fye," (DistilBERT model)"),fye.forEach(t),uMo=i(O),bu=n(O,"LI",{});var mye=s(bu);tde=n(mye,"STRONG",{});var Tnt=s(tde);bMo=r(Tnt,"electra"),Tnt.forEach(t),vMo=r(mye," \u2014 "),Kq=n(mye,"A",{href:!0});var Mnt=s(Kq);FMo=r(Mnt,"ElectraForPreTraining"),Mnt.forEach(t),TMo=r(mye," (ELECTRA model)"),mye.forEach(t),MMo=i(O),vu=n(O,"LI",{});var gye=s(vu);ade=n(gye,"STRONG",{});var Ent=s(ade);EMo=r(Ent,"flaubert"),Ent.forEach(t),CMo=r(gye," \u2014 "),Zq=n(gye,"A",{href:!0});var Cnt=s(Zq);wMo=r(Cnt,"FlaubertWithLMHeadModel"),Cnt.forEach(t),AMo=r(gye," (FlauBERT model)"),gye.forEach(t),yMo=i(O),Fu=n(O,"LI",{});var hye=s(Fu);nde=n(hye,"STRONG",{});var wnt=s(nde);LMo=r(wnt,"flava"),wnt.forEach(t),xMo=r(hye," \u2014 "),ej=n(hye,"A",{href:!0});var Ant=s(ej);$Mo=r(Ant,"FlavaForPreTraining"),Ant.forEach(t),kMo=r(hye," (Flava model)"),hye.forEach(t),SMo=i(O),Tu=n(O,"LI",{});var pye=s(Tu);sde=n(pye,"STRONG",{});var ynt=s(sde);RMo=r(ynt,"fnet"),ynt.forEach(t),PMo=r(pye," \u2014 "),oj=n(pye,"A",{href:!0});var Lnt=s(oj);BMo=r(Lnt,"FNetForPreTraining"),Lnt.forEach(t),IMo=r(pye," (FNet model)"),pye.forEach(t),NMo=i(O),Mu=n(O,"LI",{});var _ye=s(Mu);lde=n(_ye,"STRONG",{});var xnt=s(lde);qMo=r(xnt,"fsmt"),xnt.forEach(t),jMo=r(_ye," \u2014 "),rj=n(_ye,"A",{href:!0});var $nt=s(rj);DMo=r($nt,"FSMTForConditionalGeneration"),$nt.forEach(t),GMo=r(_ye," (FairSeq Machine-Translation model)"),_ye.forEach(t),OMo=i(O),Eu=n(O,"LI",{});var uye=s(Eu);ide=n(uye,"STRONG",{});var knt=s(ide);VMo=r(knt,"funnel"),knt.forEach(t),XMo=r(uye," \u2014 "),tj=n(uye,"A",{href:!0});var Snt=s(tj);zMo=r(Snt,"FunnelForPreTraining"),Snt.forEach(t),WMo=r(uye," (Funnel Transformer model)"),uye.forEach(t),QMo=i(O),Cu=n(O,"LI",{});var bye=s(Cu);dde=n(bye,"STRONG",{});var Rnt=s(dde);HMo=r(Rnt,"gpt2"),Rnt.forEach(t),UMo=r(bye," \u2014 "),aj=n(bye,"A",{href:!0});var Pnt=s(aj);JMo=r(Pnt,"GPT2LMHeadModel"),Pnt.forEach(t),YMo=r(bye," (OpenAI GPT-2 model)"),bye.forEach(t),KMo=i(O),wu=n(O,"LI",{});var vye=s(wu);cde=n(vye,"STRONG",{});var Bnt=s(cde);ZMo=r(Bnt,"ibert"),Bnt.forEach(t),e4o=r(vye," \u2014 "),nj=n(vye,"A",{href:!0});var Int=s(nj);o4o=r(Int,"IBertForMaskedLM"),Int.forEach(t),r4o=r(vye," (I-BERT model)"),vye.forEach(t),t4o=i(O),Au=n(O,"LI",{});var Fye=s(Au);fde=n(Fye,"STRONG",{});var Nnt=s(fde);a4o=r(Nnt,"layoutlm"),Nnt.forEach(t),n4o=r(Fye," \u2014 "),sj=n(Fye,"A",{href:!0});var qnt=s(sj);s4o=r(qnt,"LayoutLMForMaskedLM"),qnt.forEach(t),l4o=r(Fye," (LayoutLM model)"),Fye.forEach(t),i4o=i(O),yu=n(O,"LI",{});var Tye=s(yu);mde=n(Tye,"STRONG",{});var jnt=s(mde);d4o=r(jnt,"longformer"),jnt.forEach(t),c4o=r(Tye," \u2014 "),lj=n(Tye,"A",{href:!0});var Dnt=s(lj);f4o=r(Dnt,"LongformerForMaskedLM"),Dnt.forEach(t),m4o=r(Tye," (Longformer model)"),Tye.forEach(t),g4o=i(O),Lu=n(O,"LI",{});var Mye=s(Lu);gde=n(Mye,"STRONG",{});var Gnt=s(gde);h4o=r(Gnt,"lxmert"),Gnt.forEach(t),p4o=r(Mye," \u2014 "),ij=n(Mye,"A",{href:!0});var Ont=s(ij);_4o=r(Ont,"LxmertForPreTraining"),Ont.forEach(t),u4o=r(Mye," (LXMERT model)"),Mye.forEach(t),b4o=i(O),xu=n(O,"LI",{});var Eye=s(xu);hde=n(Eye,"STRONG",{});var Vnt=s(hde);v4o=r(Vnt,"megatron-bert"),Vnt.forEach(t),F4o=r(Eye," \u2014 "),dj=n(Eye,"A",{href:!0});var Xnt=s(dj);T4o=r(Xnt,"MegatronBertForPreTraining"),Xnt.forEach(t),M4o=r(Eye," (MegatronBert model)"),Eye.forEach(t),E4o=i(O),$u=n(O,"LI",{});var Cye=s($u);pde=n(Cye,"STRONG",{});var znt=s(pde);C4o=r(znt,"mobilebert"),znt.forEach(t),w4o=r(Cye," \u2014 "),cj=n(Cye,"A",{href:!0});var Wnt=s(cj);A4o=r(Wnt,"MobileBertForPreTraining"),Wnt.forEach(t),y4o=r(Cye," (MobileBERT model)"),Cye.forEach(t),L4o=i(O),ku=n(O,"LI",{});var wye=s(ku);_de=n(wye,"STRONG",{});var Qnt=s(_de);x4o=r(Qnt,"mpnet"),Qnt.forEach(t),$4o=r(wye," \u2014 "),fj=n(wye,"A",{href:!0});var Hnt=s(fj);k4o=r(Hnt,"MPNetForMaskedLM"),Hnt.forEach(t),S4o=r(wye," (MPNet model)"),wye.forEach(t),R4o=i(O),Su=n(O,"LI",{});var Aye=s(Su);ude=n(Aye,"STRONG",{});var Unt=s(ude);P4o=r(Unt,"openai-gpt"),Unt.forEach(t),B4o=r(Aye," \u2014 "),mj=n(Aye,"A",{href:!0});var Jnt=s(mj);I4o=r(Jnt,"OpenAIGPTLMHeadModel"),Jnt.forEach(t),N4o=r(Aye," (OpenAI GPT model)"),Aye.forEach(t),q4o=i(O),Ru=n(O,"LI",{});var yye=s(Ru);bde=n(yye,"STRONG",{});var Ynt=s(bde);j4o=r(Ynt,"retribert"),Ynt.forEach(t),D4o=r(yye," \u2014 "),gj=n(yye,"A",{href:!0});var Knt=s(gj);G4o=r(Knt,"RetriBertModel"),Knt.forEach(t),O4o=r(yye," (RetriBERT model)"),yye.forEach(t),V4o=i(O),Pu=n(O,"LI",{});var Lye=s(Pu);vde=n(Lye,"STRONG",{});var Znt=s(vde);X4o=r(Znt,"roberta"),Znt.forEach(t),z4o=r(Lye," \u2014 "),hj=n(Lye,"A",{href:!0});var est=s(hj);W4o=r(est,"RobertaForMaskedLM"),est.forEach(t),Q4o=r(Lye," (RoBERTa model)"),Lye.forEach(t),H4o=i(O),Bu=n(O,"LI",{});var xye=s(Bu);Fde=n(xye,"STRONG",{});var ost=s(Fde);U4o=r(ost,"splinter"),ost.forEach(t),J4o=r(xye," \u2014 "),pj=n(xye,"A",{href:!0});var rst=s(pj);Y4o=r(rst,"SplinterForPreTraining"),rst.forEach(t),K4o=r(xye," (Splinter model)"),xye.forEach(t),Z4o=i(O),Iu=n(O,"LI",{});var $ye=s(Iu);Tde=n($ye,"STRONG",{});var tst=s(Tde);eEo=r(tst,"squeezebert"),tst.forEach(t),oEo=r($ye," \u2014 "),_j=n($ye,"A",{href:!0});var ast=s(_j);rEo=r(ast,"SqueezeBertForMaskedLM"),ast.forEach(t),tEo=r($ye," (SqueezeBERT model)"),$ye.forEach(t),aEo=i(O),Nu=n(O,"LI",{});var kye=s(Nu);Mde=n(kye,"STRONG",{});var nst=s(Mde);nEo=r(nst,"t5"),nst.forEach(t),sEo=r(kye," \u2014 "),uj=n(kye,"A",{href:!0});var sst=s(uj);lEo=r(sst,"T5ForConditionalGeneration"),sst.forEach(t),iEo=r(kye," (T5 model)"),kye.forEach(t),dEo=i(O),qu=n(O,"LI",{});var Sye=s(qu);Ede=n(Sye,"STRONG",{});var lst=s(Ede);cEo=r(lst,"tapas"),lst.forEach(t),fEo=r(Sye," \u2014 "),bj=n(Sye,"A",{href:!0});var ist=s(bj);mEo=r(ist,"TapasForMaskedLM"),ist.forEach(t),gEo=r(Sye," (TAPAS model)"),Sye.forEach(t),hEo=i(O),ju=n(O,"LI",{});var Rye=s(ju);Cde=n(Rye,"STRONG",{});var dst=s(Cde);pEo=r(dst,"transfo-xl"),dst.forEach(t),_Eo=r(Rye," \u2014 "),vj=n(Rye,"A",{href:!0});var cst=s(vj);uEo=r(cst,"TransfoXLLMHeadModel"),cst.forEach(t),bEo=r(Rye," (Transformer-XL model)"),Rye.forEach(t),vEo=i(O),Du=n(O,"LI",{});var Pye=s(Du);wde=n(Pye,"STRONG",{});var fst=s(wde);FEo=r(fst,"unispeech"),fst.forEach(t),TEo=r(Pye," \u2014 "),Fj=n(Pye,"A",{href:!0});var mst=s(Fj);MEo=r(mst,"UniSpeechForPreTraining"),mst.forEach(t),EEo=r(Pye," (UniSpeech model)"),Pye.forEach(t),CEo=i(O),Gu=n(O,"LI",{});var Bye=s(Gu);Ade=n(Bye,"STRONG",{});var gst=s(Ade);wEo=r(gst,"unispeech-sat"),gst.forEach(t),AEo=r(Bye," \u2014 "),Tj=n(Bye,"A",{href:!0});var hst=s(Tj);yEo=r(hst,"UniSpeechSatForPreTraining"),hst.forEach(t),LEo=r(Bye," (UniSpeechSat model)"),Bye.forEach(t),xEo=i(O),Ou=n(O,"LI",{});var Iye=s(Ou);yde=n(Iye,"STRONG",{});var pst=s(yde);$Eo=r(pst,"visual_bert"),pst.forEach(t),kEo=r(Iye," \u2014 "),Mj=n(Iye,"A",{href:!0});var _st=s(Mj);SEo=r(_st,"VisualBertForPreTraining"),_st.forEach(t),REo=r(Iye," (VisualBert model)"),Iye.forEach(t),PEo=i(O),Vu=n(O,"LI",{});var Nye=s(Vu);Lde=n(Nye,"STRONG",{});var ust=s(Lde);BEo=r(ust,"vit_mae"),ust.forEach(t),IEo=r(Nye," \u2014 "),Ej=n(Nye,"A",{href:!0});var bst=s(Ej);NEo=r(bst,"ViTMAEForPreTraining"),bst.forEach(t),qEo=r(Nye," (ViTMAE model)"),Nye.forEach(t),jEo=i(O),Xu=n(O,"LI",{});var qye=s(Xu);xde=n(qye,"STRONG",{});var vst=s(xde);DEo=r(vst,"wav2vec2"),vst.forEach(t),GEo=r(qye," \u2014 "),Cj=n(qye,"A",{href:!0});var Fst=s(Cj);OEo=r(Fst,"Wav2Vec2ForPreTraining"),Fst.forEach(t),VEo=r(qye," (Wav2Vec2 model)"),qye.forEach(t),XEo=i(O),zu=n(O,"LI",{});var jye=s(zu);$de=n(jye,"STRONG",{});var Tst=s($de);zEo=r(Tst,"wav2vec2-conformer"),Tst.forEach(t),WEo=r(jye," \u2014 "),wj=n(jye,"A",{href:!0});var Mst=s(wj);QEo=r(Mst,"Wav2Vec2ConformerForPreTraining"),Mst.forEach(t),HEo=r(jye," (Wav2Vec2-Conformer model)"),jye.forEach(t),UEo=i(O),Wu=n(O,"LI",{});var Dye=s(Wu);kde=n(Dye,"STRONG",{});var Est=s(kde);JEo=r(Est,"xlm"),Est.forEach(t),YEo=r(Dye," \u2014 "),Aj=n(Dye,"A",{href:!0});var Cst=s(Aj);KEo=r(Cst,"XLMWithLMHeadModel"),Cst.forEach(t),ZEo=r(Dye," (XLM model)"),Dye.forEach(t),eCo=i(O),Qu=n(O,"LI",{});var Gye=s(Qu);Sde=n(Gye,"STRONG",{});var wst=s(Sde);oCo=r(wst,"xlm-roberta"),wst.forEach(t),rCo=r(Gye," \u2014 "),yj=n(Gye,"A",{href:!0});var Ast=s(yj);tCo=r(Ast,"XLMRobertaForMaskedLM"),Ast.forEach(t),aCo=r(Gye," (XLM-RoBERTa model)"),Gye.forEach(t),nCo=i(O),Hu=n(O,"LI",{});var Oye=s(Hu);Rde=n(Oye,"STRONG",{});var yst=s(Rde);sCo=r(yst,"xlm-roberta-xl"),yst.forEach(t),lCo=r(Oye," \u2014 "),Lj=n(Oye,"A",{href:!0});var Lst=s(Lj);iCo=r(Lst,"XLMRobertaXLForMaskedLM"),Lst.forEach(t),dCo=r(Oye," (XLM-RoBERTa-XL model)"),Oye.forEach(t),cCo=i(O),Uu=n(O,"LI",{});var Vye=s(Uu);Pde=n(Vye,"STRONG",{});var xst=s(Pde);fCo=r(xst,"xlnet"),xst.forEach(t),mCo=r(Vye," \u2014 "),xj=n(Vye,"A",{href:!0});var $st=s(xj);gCo=r($st,"XLNetLMHeadModel"),$st.forEach(t),hCo=r(Vye," (XLNet model)"),Vye.forEach(t),O.forEach(t),pCo=i(ra),Ju=n(ra,"P",{});var Xye=s(Ju);_Co=r(Xye,"The model is set in evaluation mode by default using "),Bde=n(Xye,"CODE",{});var kst=s(Bde);uCo=r(kst,"model.eval()"),kst.forEach(t),bCo=r(Xye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ide=n(Xye,"CODE",{});var Sst=s(Ide);vCo=r(Sst,"model.train()"),Sst.forEach(t),Xye.forEach(t),FCo=i(ra),T(Yu.$$.fragment,ra),ra.forEach(t),Vs.forEach(t),Xqe=i(f),Si=n(f,"H2",{class:!0});var HDe=s(Si);Ku=n(HDe,"A",{id:!0,class:!0,href:!0});var Rst=s(Ku);Nde=n(Rst,"SPAN",{});var Pst=s(Nde);T(_A.$$.fragment,Pst),Pst.forEach(t),Rst.forEach(t),TCo=i(HDe),qde=n(HDe,"SPAN",{});var Bst=s(qde);MCo=r(Bst,"AutoModelForCausalLM"),Bst.forEach(t),HDe.forEach(t),zqe=i(f),$o=n(f,"DIV",{class:!0});var Xs=s($o);T(uA.$$.fragment,Xs),ECo=i(Xs),Ri=n(Xs,"P",{});var BZ=s(Ri);CCo=r(BZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),$j=n(BZ,"A",{href:!0});var Ist=s($j);wCo=r(Ist,"from_pretrained()"),Ist.forEach(t),ACo=r(BZ," class method or the "),kj=n(BZ,"A",{href:!0});var Nst=s(kj);yCo=r(Nst,"from_config()"),Nst.forEach(t),LCo=r(BZ,` class
method.`),BZ.forEach(t),xCo=i(Xs),bA=n(Xs,"P",{});var UDe=s(bA);$Co=r(UDe,"This class cannot be instantiated directly using "),jde=n(UDe,"CODE",{});var qst=s(jde);kCo=r(qst,"__init__()"),qst.forEach(t),SCo=r(UDe," (throws an error)."),UDe.forEach(t),RCo=i(Xs),nt=n(Xs,"DIV",{class:!0});var O3=s(nt);T(vA.$$.fragment,O3),PCo=i(O3),Dde=n(O3,"P",{});var jst=s(Dde);BCo=r(jst,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),jst.forEach(t),ICo=i(O3),Pi=n(O3,"P",{});var IZ=s(Pi);NCo=r(IZ,`Note:
Loading a model from its configuration file does `),Gde=n(IZ,"STRONG",{});var Dst=s(Gde);qCo=r(Dst,"not"),Dst.forEach(t),jCo=r(IZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Sj=n(IZ,"A",{href:!0});var Gst=s(Sj);DCo=r(Gst,"from_pretrained()"),Gst.forEach(t),GCo=r(IZ," to load the model weights."),IZ.forEach(t),OCo=i(O3),T(Zu.$$.fragment,O3),O3.forEach(t),VCo=i(Xs),Ke=n(Xs,"DIV",{class:!0});var ta=s(Ke);T(FA.$$.fragment,ta),XCo=i(ta),Ode=n(ta,"P",{});var Ost=s(Ode);zCo=r(Ost,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Ost.forEach(t),WCo=i(ta),$a=n(ta,"P",{});var V3=s($a);QCo=r(V3,"The model class to instantiate is selected based on the "),Vde=n(V3,"CODE",{});var Vst=s(Vde);HCo=r(Vst,"model_type"),Vst.forEach(t),UCo=r(V3,` property of the config object (either
passed as an argument or loaded from `),Xde=n(V3,"CODE",{});var Xst=s(Xde);JCo=r(Xst,"pretrained_model_name_or_path"),Xst.forEach(t),YCo=r(V3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zde=n(V3,"CODE",{});var zst=s(zde);KCo=r(zst,"pretrained_model_name_or_path"),zst.forEach(t),ZCo=r(V3,":"),V3.forEach(t),e5o=i(ta),z=n(ta,"UL",{});var W=s(z);e2=n(W,"LI",{});var zye=s(e2);Wde=n(zye,"STRONG",{});var Wst=s(Wde);o5o=r(Wst,"bart"),Wst.forEach(t),r5o=r(zye," \u2014 "),Rj=n(zye,"A",{href:!0});var Qst=s(Rj);t5o=r(Qst,"BartForCausalLM"),Qst.forEach(t),a5o=r(zye," (BART model)"),zye.forEach(t),n5o=i(W),o2=n(W,"LI",{});var Wye=s(o2);Qde=n(Wye,"STRONG",{});var Hst=s(Qde);s5o=r(Hst,"bert"),Hst.forEach(t),l5o=r(Wye," \u2014 "),Pj=n(Wye,"A",{href:!0});var Ust=s(Pj);i5o=r(Ust,"BertLMHeadModel"),Ust.forEach(t),d5o=r(Wye," (BERT model)"),Wye.forEach(t),c5o=i(W),r2=n(W,"LI",{});var Qye=s(r2);Hde=n(Qye,"STRONG",{});var Jst=s(Hde);f5o=r(Jst,"bert-generation"),Jst.forEach(t),m5o=r(Qye," \u2014 "),Bj=n(Qye,"A",{href:!0});var Yst=s(Bj);g5o=r(Yst,"BertGenerationDecoder"),Yst.forEach(t),h5o=r(Qye," (Bert Generation model)"),Qye.forEach(t),p5o=i(W),t2=n(W,"LI",{});var Hye=s(t2);Ude=n(Hye,"STRONG",{});var Kst=s(Ude);_5o=r(Kst,"big_bird"),Kst.forEach(t),u5o=r(Hye," \u2014 "),Ij=n(Hye,"A",{href:!0});var Zst=s(Ij);b5o=r(Zst,"BigBirdForCausalLM"),Zst.forEach(t),v5o=r(Hye," (BigBird model)"),Hye.forEach(t),F5o=i(W),a2=n(W,"LI",{});var Uye=s(a2);Jde=n(Uye,"STRONG",{});var elt=s(Jde);T5o=r(elt,"bigbird_pegasus"),elt.forEach(t),M5o=r(Uye," \u2014 "),Nj=n(Uye,"A",{href:!0});var olt=s(Nj);E5o=r(olt,"BigBirdPegasusForCausalLM"),olt.forEach(t),C5o=r(Uye," (BigBirdPegasus model)"),Uye.forEach(t),w5o=i(W),n2=n(W,"LI",{});var Jye=s(n2);Yde=n(Jye,"STRONG",{});var rlt=s(Yde);A5o=r(rlt,"blenderbot"),rlt.forEach(t),y5o=r(Jye," \u2014 "),qj=n(Jye,"A",{href:!0});var tlt=s(qj);L5o=r(tlt,"BlenderbotForCausalLM"),tlt.forEach(t),x5o=r(Jye," (Blenderbot model)"),Jye.forEach(t),$5o=i(W),s2=n(W,"LI",{});var Yye=s(s2);Kde=n(Yye,"STRONG",{});var alt=s(Kde);k5o=r(alt,"blenderbot-small"),alt.forEach(t),S5o=r(Yye," \u2014 "),jj=n(Yye,"A",{href:!0});var nlt=s(jj);R5o=r(nlt,"BlenderbotSmallForCausalLM"),nlt.forEach(t),P5o=r(Yye," (BlenderbotSmall model)"),Yye.forEach(t),B5o=i(W),l2=n(W,"LI",{});var Kye=s(l2);Zde=n(Kye,"STRONG",{});var slt=s(Zde);I5o=r(slt,"camembert"),slt.forEach(t),N5o=r(Kye," \u2014 "),Dj=n(Kye,"A",{href:!0});var llt=s(Dj);q5o=r(llt,"CamembertForCausalLM"),llt.forEach(t),j5o=r(Kye," (CamemBERT model)"),Kye.forEach(t),D5o=i(W),i2=n(W,"LI",{});var Zye=s(i2);ece=n(Zye,"STRONG",{});var ilt=s(ece);G5o=r(ilt,"ctrl"),ilt.forEach(t),O5o=r(Zye," \u2014 "),Gj=n(Zye,"A",{href:!0});var dlt=s(Gj);V5o=r(dlt,"CTRLLMHeadModel"),dlt.forEach(t),X5o=r(Zye," (CTRL model)"),Zye.forEach(t),z5o=i(W),d2=n(W,"LI",{});var eLe=s(d2);oce=n(eLe,"STRONG",{});var clt=s(oce);W5o=r(clt,"data2vec-text"),clt.forEach(t),Q5o=r(eLe," \u2014 "),Oj=n(eLe,"A",{href:!0});var flt=s(Oj);H5o=r(flt,"Data2VecTextForCausalLM"),flt.forEach(t),U5o=r(eLe," (Data2VecText model)"),eLe.forEach(t),J5o=i(W),c2=n(W,"LI",{});var oLe=s(c2);rce=n(oLe,"STRONG",{});var mlt=s(rce);Y5o=r(mlt,"electra"),mlt.forEach(t),K5o=r(oLe," \u2014 "),Vj=n(oLe,"A",{href:!0});var glt=s(Vj);Z5o=r(glt,"ElectraForCausalLM"),glt.forEach(t),e3o=r(oLe," (ELECTRA model)"),oLe.forEach(t),o3o=i(W),f2=n(W,"LI",{});var rLe=s(f2);tce=n(rLe,"STRONG",{});var hlt=s(tce);r3o=r(hlt,"gpt2"),hlt.forEach(t),t3o=r(rLe," \u2014 "),Xj=n(rLe,"A",{href:!0});var plt=s(Xj);a3o=r(plt,"GPT2LMHeadModel"),plt.forEach(t),n3o=r(rLe," (OpenAI GPT-2 model)"),rLe.forEach(t),s3o=i(W),m2=n(W,"LI",{});var tLe=s(m2);ace=n(tLe,"STRONG",{});var _lt=s(ace);l3o=r(_lt,"gpt_neo"),_lt.forEach(t),i3o=r(tLe," \u2014 "),zj=n(tLe,"A",{href:!0});var ult=s(zj);d3o=r(ult,"GPTNeoForCausalLM"),ult.forEach(t),c3o=r(tLe," (GPT Neo model)"),tLe.forEach(t),f3o=i(W),g2=n(W,"LI",{});var aLe=s(g2);nce=n(aLe,"STRONG",{});var blt=s(nce);m3o=r(blt,"gpt_neox"),blt.forEach(t),g3o=r(aLe," \u2014 "),Wj=n(aLe,"A",{href:!0});var vlt=s(Wj);h3o=r(vlt,"GPTNeoXForCausalLM"),vlt.forEach(t),p3o=r(aLe," (GPT NeoX model)"),aLe.forEach(t),_3o=i(W),h2=n(W,"LI",{});var nLe=s(h2);sce=n(nLe,"STRONG",{});var Flt=s(sce);u3o=r(Flt,"gptj"),Flt.forEach(t),b3o=r(nLe," \u2014 "),Qj=n(nLe,"A",{href:!0});var Tlt=s(Qj);v3o=r(Tlt,"GPTJForCausalLM"),Tlt.forEach(t),F3o=r(nLe," (GPT-J model)"),nLe.forEach(t),T3o=i(W),p2=n(W,"LI",{});var sLe=s(p2);lce=n(sLe,"STRONG",{});var Mlt=s(lce);M3o=r(Mlt,"marian"),Mlt.forEach(t),E3o=r(sLe," \u2014 "),Hj=n(sLe,"A",{href:!0});var Elt=s(Hj);C3o=r(Elt,"MarianForCausalLM"),Elt.forEach(t),w3o=r(sLe," (Marian model)"),sLe.forEach(t),A3o=i(W),_2=n(W,"LI",{});var lLe=s(_2);ice=n(lLe,"STRONG",{});var Clt=s(ice);y3o=r(Clt,"mbart"),Clt.forEach(t),L3o=r(lLe," \u2014 "),Uj=n(lLe,"A",{href:!0});var wlt=s(Uj);x3o=r(wlt,"MBartForCausalLM"),wlt.forEach(t),$3o=r(lLe," (mBART model)"),lLe.forEach(t),k3o=i(W),u2=n(W,"LI",{});var iLe=s(u2);dce=n(iLe,"STRONG",{});var Alt=s(dce);S3o=r(Alt,"megatron-bert"),Alt.forEach(t),R3o=r(iLe," \u2014 "),Jj=n(iLe,"A",{href:!0});var ylt=s(Jj);P3o=r(ylt,"MegatronBertForCausalLM"),ylt.forEach(t),B3o=r(iLe," (MegatronBert model)"),iLe.forEach(t),I3o=i(W),b2=n(W,"LI",{});var dLe=s(b2);cce=n(dLe,"STRONG",{});var Llt=s(cce);N3o=r(Llt,"openai-gpt"),Llt.forEach(t),q3o=r(dLe," \u2014 "),Yj=n(dLe,"A",{href:!0});var xlt=s(Yj);j3o=r(xlt,"OpenAIGPTLMHeadModel"),xlt.forEach(t),D3o=r(dLe," (OpenAI GPT model)"),dLe.forEach(t),G3o=i(W),v2=n(W,"LI",{});var cLe=s(v2);fce=n(cLe,"STRONG",{});var $lt=s(fce);O3o=r($lt,"opt"),$lt.forEach(t),V3o=r(cLe," \u2014 "),Kj=n(cLe,"A",{href:!0});var klt=s(Kj);X3o=r(klt,"OPTForCausalLM"),klt.forEach(t),z3o=r(cLe," (OPT model)"),cLe.forEach(t),W3o=i(W),F2=n(W,"LI",{});var fLe=s(F2);mce=n(fLe,"STRONG",{});var Slt=s(mce);Q3o=r(Slt,"pegasus"),Slt.forEach(t),H3o=r(fLe," \u2014 "),Zj=n(fLe,"A",{href:!0});var Rlt=s(Zj);U3o=r(Rlt,"PegasusForCausalLM"),Rlt.forEach(t),J3o=r(fLe," (Pegasus model)"),fLe.forEach(t),Y3o=i(W),T2=n(W,"LI",{});var mLe=s(T2);gce=n(mLe,"STRONG",{});var Plt=s(gce);K3o=r(Plt,"plbart"),Plt.forEach(t),Z3o=r(mLe," \u2014 "),eD=n(mLe,"A",{href:!0});var Blt=s(eD);ewo=r(Blt,"PLBartForCausalLM"),Blt.forEach(t),owo=r(mLe," (PLBart model)"),mLe.forEach(t),rwo=i(W),M2=n(W,"LI",{});var gLe=s(M2);hce=n(gLe,"STRONG",{});var Ilt=s(hce);two=r(Ilt,"prophetnet"),Ilt.forEach(t),awo=r(gLe," \u2014 "),oD=n(gLe,"A",{href:!0});var Nlt=s(oD);nwo=r(Nlt,"ProphetNetForCausalLM"),Nlt.forEach(t),swo=r(gLe," (ProphetNet model)"),gLe.forEach(t),lwo=i(W),E2=n(W,"LI",{});var hLe=s(E2);pce=n(hLe,"STRONG",{});var qlt=s(pce);iwo=r(qlt,"qdqbert"),qlt.forEach(t),dwo=r(hLe," \u2014 "),rD=n(hLe,"A",{href:!0});var jlt=s(rD);cwo=r(jlt,"QDQBertLMHeadModel"),jlt.forEach(t),fwo=r(hLe," (QDQBert model)"),hLe.forEach(t),mwo=i(W),C2=n(W,"LI",{});var pLe=s(C2);_ce=n(pLe,"STRONG",{});var Dlt=s(_ce);gwo=r(Dlt,"reformer"),Dlt.forEach(t),hwo=r(pLe," \u2014 "),tD=n(pLe,"A",{href:!0});var Glt=s(tD);pwo=r(Glt,"ReformerModelWithLMHead"),Glt.forEach(t),_wo=r(pLe," (Reformer model)"),pLe.forEach(t),uwo=i(W),w2=n(W,"LI",{});var _Le=s(w2);uce=n(_Le,"STRONG",{});var Olt=s(uce);bwo=r(Olt,"rembert"),Olt.forEach(t),vwo=r(_Le," \u2014 "),aD=n(_Le,"A",{href:!0});var Vlt=s(aD);Fwo=r(Vlt,"RemBertForCausalLM"),Vlt.forEach(t),Two=r(_Le," (RemBERT model)"),_Le.forEach(t),Mwo=i(W),A2=n(W,"LI",{});var uLe=s(A2);bce=n(uLe,"STRONG",{});var Xlt=s(bce);Ewo=r(Xlt,"roberta"),Xlt.forEach(t),Cwo=r(uLe," \u2014 "),nD=n(uLe,"A",{href:!0});var zlt=s(nD);wwo=r(zlt,"RobertaForCausalLM"),zlt.forEach(t),Awo=r(uLe," (RoBERTa model)"),uLe.forEach(t),ywo=i(W),y2=n(W,"LI",{});var bLe=s(y2);vce=n(bLe,"STRONG",{});var Wlt=s(vce);Lwo=r(Wlt,"roformer"),Wlt.forEach(t),xwo=r(bLe," \u2014 "),sD=n(bLe,"A",{href:!0});var Qlt=s(sD);$wo=r(Qlt,"RoFormerForCausalLM"),Qlt.forEach(t),kwo=r(bLe," (RoFormer model)"),bLe.forEach(t),Swo=i(W),L2=n(W,"LI",{});var vLe=s(L2);Fce=n(vLe,"STRONG",{});var Hlt=s(Fce);Rwo=r(Hlt,"speech_to_text_2"),Hlt.forEach(t),Pwo=r(vLe," \u2014 "),lD=n(vLe,"A",{href:!0});var Ult=s(lD);Bwo=r(Ult,"Speech2Text2ForCausalLM"),Ult.forEach(t),Iwo=r(vLe," (Speech2Text2 model)"),vLe.forEach(t),Nwo=i(W),x2=n(W,"LI",{});var FLe=s(x2);Tce=n(FLe,"STRONG",{});var Jlt=s(Tce);qwo=r(Jlt,"transfo-xl"),Jlt.forEach(t),jwo=r(FLe," \u2014 "),iD=n(FLe,"A",{href:!0});var Ylt=s(iD);Dwo=r(Ylt,"TransfoXLLMHeadModel"),Ylt.forEach(t),Gwo=r(FLe," (Transformer-XL model)"),FLe.forEach(t),Owo=i(W),$2=n(W,"LI",{});var TLe=s($2);Mce=n(TLe,"STRONG",{});var Klt=s(Mce);Vwo=r(Klt,"trocr"),Klt.forEach(t),Xwo=r(TLe," \u2014 "),dD=n(TLe,"A",{href:!0});var Zlt=s(dD);zwo=r(Zlt,"TrOCRForCausalLM"),Zlt.forEach(t),Wwo=r(TLe," (TrOCR model)"),TLe.forEach(t),Qwo=i(W),k2=n(W,"LI",{});var MLe=s(k2);Ece=n(MLe,"STRONG",{});var eit=s(Ece);Hwo=r(eit,"xglm"),eit.forEach(t),Uwo=r(MLe," \u2014 "),cD=n(MLe,"A",{href:!0});var oit=s(cD);Jwo=r(oit,"XGLMForCausalLM"),oit.forEach(t),Ywo=r(MLe," (XGLM model)"),MLe.forEach(t),Kwo=i(W),S2=n(W,"LI",{});var ELe=s(S2);Cce=n(ELe,"STRONG",{});var rit=s(Cce);Zwo=r(rit,"xlm"),rit.forEach(t),e0o=r(ELe," \u2014 "),fD=n(ELe,"A",{href:!0});var tit=s(fD);o0o=r(tit,"XLMWithLMHeadModel"),tit.forEach(t),r0o=r(ELe," (XLM model)"),ELe.forEach(t),t0o=i(W),R2=n(W,"LI",{});var CLe=s(R2);wce=n(CLe,"STRONG",{});var ait=s(wce);a0o=r(ait,"xlm-prophetnet"),ait.forEach(t),n0o=r(CLe," \u2014 "),mD=n(CLe,"A",{href:!0});var nit=s(mD);s0o=r(nit,"XLMProphetNetForCausalLM"),nit.forEach(t),l0o=r(CLe," (XLMProphetNet model)"),CLe.forEach(t),i0o=i(W),P2=n(W,"LI",{});var wLe=s(P2);Ace=n(wLe,"STRONG",{});var sit=s(Ace);d0o=r(sit,"xlm-roberta"),sit.forEach(t),c0o=r(wLe," \u2014 "),gD=n(wLe,"A",{href:!0});var lit=s(gD);f0o=r(lit,"XLMRobertaForCausalLM"),lit.forEach(t),m0o=r(wLe," (XLM-RoBERTa model)"),wLe.forEach(t),g0o=i(W),B2=n(W,"LI",{});var ALe=s(B2);yce=n(ALe,"STRONG",{});var iit=s(yce);h0o=r(iit,"xlm-roberta-xl"),iit.forEach(t),p0o=r(ALe," \u2014 "),hD=n(ALe,"A",{href:!0});var dit=s(hD);_0o=r(dit,"XLMRobertaXLForCausalLM"),dit.forEach(t),u0o=r(ALe," (XLM-RoBERTa-XL model)"),ALe.forEach(t),b0o=i(W),I2=n(W,"LI",{});var yLe=s(I2);Lce=n(yLe,"STRONG",{});var cit=s(Lce);v0o=r(cit,"xlnet"),cit.forEach(t),F0o=r(yLe," \u2014 "),pD=n(yLe,"A",{href:!0});var fit=s(pD);T0o=r(fit,"XLNetLMHeadModel"),fit.forEach(t),M0o=r(yLe," (XLNet model)"),yLe.forEach(t),W.forEach(t),E0o=i(ta),N2=n(ta,"P",{});var LLe=s(N2);C0o=r(LLe,"The model is set in evaluation mode by default using "),xce=n(LLe,"CODE",{});var mit=s(xce);w0o=r(mit,"model.eval()"),mit.forEach(t),A0o=r(LLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$ce=n(LLe,"CODE",{});var git=s($ce);y0o=r(git,"model.train()"),git.forEach(t),LLe.forEach(t),L0o=i(ta),T(q2.$$.fragment,ta),ta.forEach(t),Xs.forEach(t),Wqe=i(f),Bi=n(f,"H2",{class:!0});var JDe=s(Bi);j2=n(JDe,"A",{id:!0,class:!0,href:!0});var hit=s(j2);kce=n(hit,"SPAN",{});var pit=s(kce);T(TA.$$.fragment,pit),pit.forEach(t),hit.forEach(t),x0o=i(JDe),Sce=n(JDe,"SPAN",{});var _it=s(Sce);$0o=r(_it,"AutoModelForMaskedLM"),_it.forEach(t),JDe.forEach(t),Qqe=i(f),ko=n(f,"DIV",{class:!0});var zs=s(ko);T(MA.$$.fragment,zs),k0o=i(zs),Ii=n(zs,"P",{});var NZ=s(Ii);S0o=r(NZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),_D=n(NZ,"A",{href:!0});var uit=s(_D);R0o=r(uit,"from_pretrained()"),uit.forEach(t),P0o=r(NZ," class method or the "),uD=n(NZ,"A",{href:!0});var bit=s(uD);B0o=r(bit,"from_config()"),bit.forEach(t),I0o=r(NZ,` class
method.`),NZ.forEach(t),N0o=i(zs),EA=n(zs,"P",{});var YDe=s(EA);q0o=r(YDe,"This class cannot be instantiated directly using "),Rce=n(YDe,"CODE",{});var vit=s(Rce);j0o=r(vit,"__init__()"),vit.forEach(t),D0o=r(YDe," (throws an error)."),YDe.forEach(t),G0o=i(zs),st=n(zs,"DIV",{class:!0});var X3=s(st);T(CA.$$.fragment,X3),O0o=i(X3),Pce=n(X3,"P",{});var Fit=s(Pce);V0o=r(Fit,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Fit.forEach(t),X0o=i(X3),Ni=n(X3,"P",{});var qZ=s(Ni);z0o=r(qZ,`Note:
Loading a model from its configuration file does `),Bce=n(qZ,"STRONG",{});var Tit=s(Bce);W0o=r(Tit,"not"),Tit.forEach(t),Q0o=r(qZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),bD=n(qZ,"A",{href:!0});var Mit=s(bD);H0o=r(Mit,"from_pretrained()"),Mit.forEach(t),U0o=r(qZ," to load the model weights."),qZ.forEach(t),J0o=i(X3),T(D2.$$.fragment,X3),X3.forEach(t),Y0o=i(zs),Ze=n(zs,"DIV",{class:!0});var aa=s(Ze);T(wA.$$.fragment,aa),K0o=i(aa),Ice=n(aa,"P",{});var Eit=s(Ice);Z0o=r(Eit,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Eit.forEach(t),eAo=i(aa),ka=n(aa,"P",{});var z3=s(ka);oAo=r(z3,"The model class to instantiate is selected based on the "),Nce=n(z3,"CODE",{});var Cit=s(Nce);rAo=r(Cit,"model_type"),Cit.forEach(t),tAo=r(z3,` property of the config object (either
passed as an argument or loaded from `),qce=n(z3,"CODE",{});var wit=s(qce);aAo=r(wit,"pretrained_model_name_or_path"),wit.forEach(t),nAo=r(z3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jce=n(z3,"CODE",{});var Ait=s(jce);sAo=r(Ait,"pretrained_model_name_or_path"),Ait.forEach(t),lAo=r(z3,":"),z3.forEach(t),iAo=i(aa),Q=n(aa,"UL",{});var U=s(Q);G2=n(U,"LI",{});var xLe=s(G2);Dce=n(xLe,"STRONG",{});var yit=s(Dce);dAo=r(yit,"albert"),yit.forEach(t),cAo=r(xLe," \u2014 "),vD=n(xLe,"A",{href:!0});var Lit=s(vD);fAo=r(Lit,"AlbertForMaskedLM"),Lit.forEach(t),mAo=r(xLe," (ALBERT model)"),xLe.forEach(t),gAo=i(U),O2=n(U,"LI",{});var $Le=s(O2);Gce=n($Le,"STRONG",{});var xit=s(Gce);hAo=r(xit,"bart"),xit.forEach(t),pAo=r($Le," \u2014 "),FD=n($Le,"A",{href:!0});var $it=s(FD);_Ao=r($it,"BartForConditionalGeneration"),$it.forEach(t),uAo=r($Le," (BART model)"),$Le.forEach(t),bAo=i(U),V2=n(U,"LI",{});var kLe=s(V2);Oce=n(kLe,"STRONG",{});var kit=s(Oce);vAo=r(kit,"bert"),kit.forEach(t),FAo=r(kLe," \u2014 "),TD=n(kLe,"A",{href:!0});var Sit=s(TD);TAo=r(Sit,"BertForMaskedLM"),Sit.forEach(t),MAo=r(kLe," (BERT model)"),kLe.forEach(t),EAo=i(U),X2=n(U,"LI",{});var SLe=s(X2);Vce=n(SLe,"STRONG",{});var Rit=s(Vce);CAo=r(Rit,"big_bird"),Rit.forEach(t),wAo=r(SLe," \u2014 "),MD=n(SLe,"A",{href:!0});var Pit=s(MD);AAo=r(Pit,"BigBirdForMaskedLM"),Pit.forEach(t),yAo=r(SLe," (BigBird model)"),SLe.forEach(t),LAo=i(U),z2=n(U,"LI",{});var RLe=s(z2);Xce=n(RLe,"STRONG",{});var Bit=s(Xce);xAo=r(Bit,"camembert"),Bit.forEach(t),$Ao=r(RLe," \u2014 "),ED=n(RLe,"A",{href:!0});var Iit=s(ED);kAo=r(Iit,"CamembertForMaskedLM"),Iit.forEach(t),SAo=r(RLe," (CamemBERT model)"),RLe.forEach(t),RAo=i(U),W2=n(U,"LI",{});var PLe=s(W2);zce=n(PLe,"STRONG",{});var Nit=s(zce);PAo=r(Nit,"convbert"),Nit.forEach(t),BAo=r(PLe," \u2014 "),CD=n(PLe,"A",{href:!0});var qit=s(CD);IAo=r(qit,"ConvBertForMaskedLM"),qit.forEach(t),NAo=r(PLe," (ConvBERT model)"),PLe.forEach(t),qAo=i(U),Q2=n(U,"LI",{});var BLe=s(Q2);Wce=n(BLe,"STRONG",{});var jit=s(Wce);jAo=r(jit,"data2vec-text"),jit.forEach(t),DAo=r(BLe," \u2014 "),wD=n(BLe,"A",{href:!0});var Dit=s(wD);GAo=r(Dit,"Data2VecTextForMaskedLM"),Dit.forEach(t),OAo=r(BLe," (Data2VecText model)"),BLe.forEach(t),VAo=i(U),H2=n(U,"LI",{});var ILe=s(H2);Qce=n(ILe,"STRONG",{});var Git=s(Qce);XAo=r(Git,"deberta"),Git.forEach(t),zAo=r(ILe," \u2014 "),AD=n(ILe,"A",{href:!0});var Oit=s(AD);WAo=r(Oit,"DebertaForMaskedLM"),Oit.forEach(t),QAo=r(ILe," (DeBERTa model)"),ILe.forEach(t),HAo=i(U),U2=n(U,"LI",{});var NLe=s(U2);Hce=n(NLe,"STRONG",{});var Vit=s(Hce);UAo=r(Vit,"deberta-v2"),Vit.forEach(t),JAo=r(NLe," \u2014 "),yD=n(NLe,"A",{href:!0});var Xit=s(yD);YAo=r(Xit,"DebertaV2ForMaskedLM"),Xit.forEach(t),KAo=r(NLe," (DeBERTa-v2 model)"),NLe.forEach(t),ZAo=i(U),J2=n(U,"LI",{});var qLe=s(J2);Uce=n(qLe,"STRONG",{});var zit=s(Uce);eyo=r(zit,"distilbert"),zit.forEach(t),oyo=r(qLe," \u2014 "),LD=n(qLe,"A",{href:!0});var Wit=s(LD);ryo=r(Wit,"DistilBertForMaskedLM"),Wit.forEach(t),tyo=r(qLe," (DistilBERT model)"),qLe.forEach(t),ayo=i(U),Y2=n(U,"LI",{});var jLe=s(Y2);Jce=n(jLe,"STRONG",{});var Qit=s(Jce);nyo=r(Qit,"electra"),Qit.forEach(t),syo=r(jLe," \u2014 "),xD=n(jLe,"A",{href:!0});var Hit=s(xD);lyo=r(Hit,"ElectraForMaskedLM"),Hit.forEach(t),iyo=r(jLe," (ELECTRA model)"),jLe.forEach(t),dyo=i(U),K2=n(U,"LI",{});var DLe=s(K2);Yce=n(DLe,"STRONG",{});var Uit=s(Yce);cyo=r(Uit,"flaubert"),Uit.forEach(t),fyo=r(DLe," \u2014 "),$D=n(DLe,"A",{href:!0});var Jit=s($D);myo=r(Jit,"FlaubertWithLMHeadModel"),Jit.forEach(t),gyo=r(DLe," (FlauBERT model)"),DLe.forEach(t),hyo=i(U),Z2=n(U,"LI",{});var GLe=s(Z2);Kce=n(GLe,"STRONG",{});var Yit=s(Kce);pyo=r(Yit,"fnet"),Yit.forEach(t),_yo=r(GLe," \u2014 "),kD=n(GLe,"A",{href:!0});var Kit=s(kD);uyo=r(Kit,"FNetForMaskedLM"),Kit.forEach(t),byo=r(GLe," (FNet model)"),GLe.forEach(t),vyo=i(U),e1=n(U,"LI",{});var OLe=s(e1);Zce=n(OLe,"STRONG",{});var Zit=s(Zce);Fyo=r(Zit,"funnel"),Zit.forEach(t),Tyo=r(OLe," \u2014 "),SD=n(OLe,"A",{href:!0});var edt=s(SD);Myo=r(edt,"FunnelForMaskedLM"),edt.forEach(t),Eyo=r(OLe," (Funnel Transformer model)"),OLe.forEach(t),Cyo=i(U),o1=n(U,"LI",{});var VLe=s(o1);efe=n(VLe,"STRONG",{});var odt=s(efe);wyo=r(odt,"ibert"),odt.forEach(t),Ayo=r(VLe," \u2014 "),RD=n(VLe,"A",{href:!0});var rdt=s(RD);yyo=r(rdt,"IBertForMaskedLM"),rdt.forEach(t),Lyo=r(VLe," (I-BERT model)"),VLe.forEach(t),xyo=i(U),r1=n(U,"LI",{});var XLe=s(r1);ofe=n(XLe,"STRONG",{});var tdt=s(ofe);$yo=r(tdt,"layoutlm"),tdt.forEach(t),kyo=r(XLe," \u2014 "),PD=n(XLe,"A",{href:!0});var adt=s(PD);Syo=r(adt,"LayoutLMForMaskedLM"),adt.forEach(t),Ryo=r(XLe," (LayoutLM model)"),XLe.forEach(t),Pyo=i(U),t1=n(U,"LI",{});var zLe=s(t1);rfe=n(zLe,"STRONG",{});var ndt=s(rfe);Byo=r(ndt,"longformer"),ndt.forEach(t),Iyo=r(zLe," \u2014 "),BD=n(zLe,"A",{href:!0});var sdt=s(BD);Nyo=r(sdt,"LongformerForMaskedLM"),sdt.forEach(t),qyo=r(zLe," (Longformer model)"),zLe.forEach(t),jyo=i(U),a1=n(U,"LI",{});var WLe=s(a1);tfe=n(WLe,"STRONG",{});var ldt=s(tfe);Dyo=r(ldt,"mbart"),ldt.forEach(t),Gyo=r(WLe," \u2014 "),ID=n(WLe,"A",{href:!0});var idt=s(ID);Oyo=r(idt,"MBartForConditionalGeneration"),idt.forEach(t),Vyo=r(WLe," (mBART model)"),WLe.forEach(t),Xyo=i(U),n1=n(U,"LI",{});var QLe=s(n1);afe=n(QLe,"STRONG",{});var ddt=s(afe);zyo=r(ddt,"megatron-bert"),ddt.forEach(t),Wyo=r(QLe," \u2014 "),ND=n(QLe,"A",{href:!0});var cdt=s(ND);Qyo=r(cdt,"MegatronBertForMaskedLM"),cdt.forEach(t),Hyo=r(QLe," (MegatronBert model)"),QLe.forEach(t),Uyo=i(U),s1=n(U,"LI",{});var HLe=s(s1);nfe=n(HLe,"STRONG",{});var fdt=s(nfe);Jyo=r(fdt,"mobilebert"),fdt.forEach(t),Yyo=r(HLe," \u2014 "),qD=n(HLe,"A",{href:!0});var mdt=s(qD);Kyo=r(mdt,"MobileBertForMaskedLM"),mdt.forEach(t),Zyo=r(HLe," (MobileBERT model)"),HLe.forEach(t),eLo=i(U),l1=n(U,"LI",{});var ULe=s(l1);sfe=n(ULe,"STRONG",{});var gdt=s(sfe);oLo=r(gdt,"mpnet"),gdt.forEach(t),rLo=r(ULe," \u2014 "),jD=n(ULe,"A",{href:!0});var hdt=s(jD);tLo=r(hdt,"MPNetForMaskedLM"),hdt.forEach(t),aLo=r(ULe," (MPNet model)"),ULe.forEach(t),nLo=i(U),i1=n(U,"LI",{});var JLe=s(i1);lfe=n(JLe,"STRONG",{});var pdt=s(lfe);sLo=r(pdt,"nystromformer"),pdt.forEach(t),lLo=r(JLe," \u2014 "),DD=n(JLe,"A",{href:!0});var _dt=s(DD);iLo=r(_dt,"NystromformerForMaskedLM"),_dt.forEach(t),dLo=r(JLe," (Nystromformer model)"),JLe.forEach(t),cLo=i(U),d1=n(U,"LI",{});var YLe=s(d1);ife=n(YLe,"STRONG",{});var udt=s(ife);fLo=r(udt,"perceiver"),udt.forEach(t),mLo=r(YLe," \u2014 "),GD=n(YLe,"A",{href:!0});var bdt=s(GD);gLo=r(bdt,"PerceiverForMaskedLM"),bdt.forEach(t),hLo=r(YLe," (Perceiver model)"),YLe.forEach(t),pLo=i(U),c1=n(U,"LI",{});var KLe=s(c1);dfe=n(KLe,"STRONG",{});var vdt=s(dfe);_Lo=r(vdt,"qdqbert"),vdt.forEach(t),uLo=r(KLe," \u2014 "),OD=n(KLe,"A",{href:!0});var Fdt=s(OD);bLo=r(Fdt,"QDQBertForMaskedLM"),Fdt.forEach(t),vLo=r(KLe," (QDQBert model)"),KLe.forEach(t),FLo=i(U),f1=n(U,"LI",{});var ZLe=s(f1);cfe=n(ZLe,"STRONG",{});var Tdt=s(cfe);TLo=r(Tdt,"reformer"),Tdt.forEach(t),MLo=r(ZLe," \u2014 "),VD=n(ZLe,"A",{href:!0});var Mdt=s(VD);ELo=r(Mdt,"ReformerForMaskedLM"),Mdt.forEach(t),CLo=r(ZLe," (Reformer model)"),ZLe.forEach(t),wLo=i(U),m1=n(U,"LI",{});var e8e=s(m1);ffe=n(e8e,"STRONG",{});var Edt=s(ffe);ALo=r(Edt,"rembert"),Edt.forEach(t),yLo=r(e8e," \u2014 "),XD=n(e8e,"A",{href:!0});var Cdt=s(XD);LLo=r(Cdt,"RemBertForMaskedLM"),Cdt.forEach(t),xLo=r(e8e," (RemBERT model)"),e8e.forEach(t),$Lo=i(U),g1=n(U,"LI",{});var o8e=s(g1);mfe=n(o8e,"STRONG",{});var wdt=s(mfe);kLo=r(wdt,"roberta"),wdt.forEach(t),SLo=r(o8e," \u2014 "),zD=n(o8e,"A",{href:!0});var Adt=s(zD);RLo=r(Adt,"RobertaForMaskedLM"),Adt.forEach(t),PLo=r(o8e," (RoBERTa model)"),o8e.forEach(t),BLo=i(U),h1=n(U,"LI",{});var r8e=s(h1);gfe=n(r8e,"STRONG",{});var ydt=s(gfe);ILo=r(ydt,"roformer"),ydt.forEach(t),NLo=r(r8e," \u2014 "),WD=n(r8e,"A",{href:!0});var Ldt=s(WD);qLo=r(Ldt,"RoFormerForMaskedLM"),Ldt.forEach(t),jLo=r(r8e," (RoFormer model)"),r8e.forEach(t),DLo=i(U),p1=n(U,"LI",{});var t8e=s(p1);hfe=n(t8e,"STRONG",{});var xdt=s(hfe);GLo=r(xdt,"squeezebert"),xdt.forEach(t),OLo=r(t8e," \u2014 "),QD=n(t8e,"A",{href:!0});var $dt=s(QD);VLo=r($dt,"SqueezeBertForMaskedLM"),$dt.forEach(t),XLo=r(t8e," (SqueezeBERT model)"),t8e.forEach(t),zLo=i(U),_1=n(U,"LI",{});var a8e=s(_1);pfe=n(a8e,"STRONG",{});var kdt=s(pfe);WLo=r(kdt,"tapas"),kdt.forEach(t),QLo=r(a8e," \u2014 "),HD=n(a8e,"A",{href:!0});var Sdt=s(HD);HLo=r(Sdt,"TapasForMaskedLM"),Sdt.forEach(t),ULo=r(a8e," (TAPAS model)"),a8e.forEach(t),JLo=i(U),u1=n(U,"LI",{});var n8e=s(u1);_fe=n(n8e,"STRONG",{});var Rdt=s(_fe);YLo=r(Rdt,"wav2vec2"),Rdt.forEach(t),KLo=r(n8e," \u2014 "),ufe=n(n8e,"CODE",{});var Pdt=s(ufe);ZLo=r(Pdt,"Wav2Vec2ForMaskedLM"),Pdt.forEach(t),e8o=r(n8e," (Wav2Vec2 model)"),n8e.forEach(t),o8o=i(U),b1=n(U,"LI",{});var s8e=s(b1);bfe=n(s8e,"STRONG",{});var Bdt=s(bfe);r8o=r(Bdt,"xlm"),Bdt.forEach(t),t8o=r(s8e," \u2014 "),UD=n(s8e,"A",{href:!0});var Idt=s(UD);a8o=r(Idt,"XLMWithLMHeadModel"),Idt.forEach(t),n8o=r(s8e," (XLM model)"),s8e.forEach(t),s8o=i(U),v1=n(U,"LI",{});var l8e=s(v1);vfe=n(l8e,"STRONG",{});var Ndt=s(vfe);l8o=r(Ndt,"xlm-roberta"),Ndt.forEach(t),i8o=r(l8e," \u2014 "),JD=n(l8e,"A",{href:!0});var qdt=s(JD);d8o=r(qdt,"XLMRobertaForMaskedLM"),qdt.forEach(t),c8o=r(l8e," (XLM-RoBERTa model)"),l8e.forEach(t),f8o=i(U),F1=n(U,"LI",{});var i8e=s(F1);Ffe=n(i8e,"STRONG",{});var jdt=s(Ffe);m8o=r(jdt,"xlm-roberta-xl"),jdt.forEach(t),g8o=r(i8e," \u2014 "),YD=n(i8e,"A",{href:!0});var Ddt=s(YD);h8o=r(Ddt,"XLMRobertaXLForMaskedLM"),Ddt.forEach(t),p8o=r(i8e," (XLM-RoBERTa-XL model)"),i8e.forEach(t),_8o=i(U),T1=n(U,"LI",{});var d8e=s(T1);Tfe=n(d8e,"STRONG",{});var Gdt=s(Tfe);u8o=r(Gdt,"yoso"),Gdt.forEach(t),b8o=r(d8e," \u2014 "),KD=n(d8e,"A",{href:!0});var Odt=s(KD);v8o=r(Odt,"YosoForMaskedLM"),Odt.forEach(t),F8o=r(d8e," (YOSO model)"),d8e.forEach(t),U.forEach(t),T8o=i(aa),M1=n(aa,"P",{});var c8e=s(M1);M8o=r(c8e,"The model is set in evaluation mode by default using "),Mfe=n(c8e,"CODE",{});var Vdt=s(Mfe);E8o=r(Vdt,"model.eval()"),Vdt.forEach(t),C8o=r(c8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Efe=n(c8e,"CODE",{});var Xdt=s(Efe);w8o=r(Xdt,"model.train()"),Xdt.forEach(t),c8e.forEach(t),A8o=i(aa),T(E1.$$.fragment,aa),aa.forEach(t),zs.forEach(t),Hqe=i(f),qi=n(f,"H2",{class:!0});var KDe=s(qi);C1=n(KDe,"A",{id:!0,class:!0,href:!0});var zdt=s(C1);Cfe=n(zdt,"SPAN",{});var Wdt=s(Cfe);T(AA.$$.fragment,Wdt),Wdt.forEach(t),zdt.forEach(t),y8o=i(KDe),wfe=n(KDe,"SPAN",{});var Qdt=s(wfe);L8o=r(Qdt,"AutoModelForSeq2SeqLM"),Qdt.forEach(t),KDe.forEach(t),Uqe=i(f),So=n(f,"DIV",{class:!0});var Ws=s(So);T(yA.$$.fragment,Ws),x8o=i(Ws),ji=n(Ws,"P",{});var jZ=s(ji);$8o=r(jZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),ZD=n(jZ,"A",{href:!0});var Hdt=s(ZD);k8o=r(Hdt,"from_pretrained()"),Hdt.forEach(t),S8o=r(jZ," class method or the "),eG=n(jZ,"A",{href:!0});var Udt=s(eG);R8o=r(Udt,"from_config()"),Udt.forEach(t),P8o=r(jZ,` class
method.`),jZ.forEach(t),B8o=i(Ws),LA=n(Ws,"P",{});var ZDe=s(LA);I8o=r(ZDe,"This class cannot be instantiated directly using "),Afe=n(ZDe,"CODE",{});var Jdt=s(Afe);N8o=r(Jdt,"__init__()"),Jdt.forEach(t),q8o=r(ZDe," (throws an error)."),ZDe.forEach(t),j8o=i(Ws),lt=n(Ws,"DIV",{class:!0});var W3=s(lt);T(xA.$$.fragment,W3),D8o=i(W3),yfe=n(W3,"P",{});var Ydt=s(yfe);G8o=r(Ydt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Ydt.forEach(t),O8o=i(W3),Di=n(W3,"P",{});var DZ=s(Di);V8o=r(DZ,`Note:
Loading a model from its configuration file does `),Lfe=n(DZ,"STRONG",{});var Kdt=s(Lfe);X8o=r(Kdt,"not"),Kdt.forEach(t),z8o=r(DZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),oG=n(DZ,"A",{href:!0});var Zdt=s(oG);W8o=r(Zdt,"from_pretrained()"),Zdt.forEach(t),Q8o=r(DZ," to load the model weights."),DZ.forEach(t),H8o=i(W3),T(w1.$$.fragment,W3),W3.forEach(t),U8o=i(Ws),eo=n(Ws,"DIV",{class:!0});var na=s(eo);T($A.$$.fragment,na),J8o=i(na),xfe=n(na,"P",{});var ect=s(xfe);Y8o=r(ect,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),ect.forEach(t),K8o=i(na),Sa=n(na,"P",{});var Q3=s(Sa);Z8o=r(Q3,"The model class to instantiate is selected based on the "),$fe=n(Q3,"CODE",{});var oct=s($fe);exo=r(oct,"model_type"),oct.forEach(t),oxo=r(Q3,` property of the config object (either
passed as an argument or loaded from `),kfe=n(Q3,"CODE",{});var rct=s(kfe);rxo=r(rct,"pretrained_model_name_or_path"),rct.forEach(t),txo=r(Q3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sfe=n(Q3,"CODE",{});var tct=s(Sfe);axo=r(tct,"pretrained_model_name_or_path"),tct.forEach(t),nxo=r(Q3,":"),Q3.forEach(t),sxo=i(na),pe=n(na,"UL",{});var be=s(pe);A1=n(be,"LI",{});var f8e=s(A1);Rfe=n(f8e,"STRONG",{});var act=s(Rfe);lxo=r(act,"bart"),act.forEach(t),ixo=r(f8e," \u2014 "),rG=n(f8e,"A",{href:!0});var nct=s(rG);dxo=r(nct,"BartForConditionalGeneration"),nct.forEach(t),cxo=r(f8e," (BART model)"),f8e.forEach(t),fxo=i(be),y1=n(be,"LI",{});var m8e=s(y1);Pfe=n(m8e,"STRONG",{});var sct=s(Pfe);mxo=r(sct,"bigbird_pegasus"),sct.forEach(t),gxo=r(m8e," \u2014 "),tG=n(m8e,"A",{href:!0});var lct=s(tG);hxo=r(lct,"BigBirdPegasusForConditionalGeneration"),lct.forEach(t),pxo=r(m8e," (BigBirdPegasus model)"),m8e.forEach(t),_xo=i(be),L1=n(be,"LI",{});var g8e=s(L1);Bfe=n(g8e,"STRONG",{});var ict=s(Bfe);uxo=r(ict,"blenderbot"),ict.forEach(t),bxo=r(g8e," \u2014 "),aG=n(g8e,"A",{href:!0});var dct=s(aG);vxo=r(dct,"BlenderbotForConditionalGeneration"),dct.forEach(t),Fxo=r(g8e," (Blenderbot model)"),g8e.forEach(t),Txo=i(be),x1=n(be,"LI",{});var h8e=s(x1);Ife=n(h8e,"STRONG",{});var cct=s(Ife);Mxo=r(cct,"blenderbot-small"),cct.forEach(t),Exo=r(h8e," \u2014 "),nG=n(h8e,"A",{href:!0});var fct=s(nG);Cxo=r(fct,"BlenderbotSmallForConditionalGeneration"),fct.forEach(t),wxo=r(h8e," (BlenderbotSmall model)"),h8e.forEach(t),Axo=i(be),$1=n(be,"LI",{});var p8e=s($1);Nfe=n(p8e,"STRONG",{});var mct=s(Nfe);yxo=r(mct,"encoder-decoder"),mct.forEach(t),Lxo=r(p8e," \u2014 "),sG=n(p8e,"A",{href:!0});var gct=s(sG);xxo=r(gct,"EncoderDecoderModel"),gct.forEach(t),$xo=r(p8e," (Encoder decoder model)"),p8e.forEach(t),kxo=i(be),k1=n(be,"LI",{});var _8e=s(k1);qfe=n(_8e,"STRONG",{});var hct=s(qfe);Sxo=r(hct,"fsmt"),hct.forEach(t),Rxo=r(_8e," \u2014 "),lG=n(_8e,"A",{href:!0});var pct=s(lG);Pxo=r(pct,"FSMTForConditionalGeneration"),pct.forEach(t),Bxo=r(_8e," (FairSeq Machine-Translation model)"),_8e.forEach(t),Ixo=i(be),S1=n(be,"LI",{});var u8e=s(S1);jfe=n(u8e,"STRONG",{});var _ct=s(jfe);Nxo=r(_ct,"led"),_ct.forEach(t),qxo=r(u8e," \u2014 "),iG=n(u8e,"A",{href:!0});var uct=s(iG);jxo=r(uct,"LEDForConditionalGeneration"),uct.forEach(t),Dxo=r(u8e," (LED model)"),u8e.forEach(t),Gxo=i(be),R1=n(be,"LI",{});var b8e=s(R1);Dfe=n(b8e,"STRONG",{});var bct=s(Dfe);Oxo=r(bct,"longt5"),bct.forEach(t),Vxo=r(b8e," \u2014 "),dG=n(b8e,"A",{href:!0});var vct=s(dG);Xxo=r(vct,"LongT5ForConditionalGeneration"),vct.forEach(t),zxo=r(b8e," (LongT5 model)"),b8e.forEach(t),Wxo=i(be),P1=n(be,"LI",{});var v8e=s(P1);Gfe=n(v8e,"STRONG",{});var Fct=s(Gfe);Qxo=r(Fct,"m2m_100"),Fct.forEach(t),Hxo=r(v8e," \u2014 "),cG=n(v8e,"A",{href:!0});var Tct=s(cG);Uxo=r(Tct,"M2M100ForConditionalGeneration"),Tct.forEach(t),Jxo=r(v8e," (M2M100 model)"),v8e.forEach(t),Yxo=i(be),B1=n(be,"LI",{});var F8e=s(B1);Ofe=n(F8e,"STRONG",{});var Mct=s(Ofe);Kxo=r(Mct,"marian"),Mct.forEach(t),Zxo=r(F8e," \u2014 "),fG=n(F8e,"A",{href:!0});var Ect=s(fG);e$o=r(Ect,"MarianMTModel"),Ect.forEach(t),o$o=r(F8e," (Marian model)"),F8e.forEach(t),r$o=i(be),I1=n(be,"LI",{});var T8e=s(I1);Vfe=n(T8e,"STRONG",{});var Cct=s(Vfe);t$o=r(Cct,"mbart"),Cct.forEach(t),a$o=r(T8e," \u2014 "),mG=n(T8e,"A",{href:!0});var wct=s(mG);n$o=r(wct,"MBartForConditionalGeneration"),wct.forEach(t),s$o=r(T8e," (mBART model)"),T8e.forEach(t),l$o=i(be),N1=n(be,"LI",{});var M8e=s(N1);Xfe=n(M8e,"STRONG",{});var Act=s(Xfe);i$o=r(Act,"mt5"),Act.forEach(t),d$o=r(M8e," \u2014 "),gG=n(M8e,"A",{href:!0});var yct=s(gG);c$o=r(yct,"MT5ForConditionalGeneration"),yct.forEach(t),f$o=r(M8e," (mT5 model)"),M8e.forEach(t),m$o=i(be),q1=n(be,"LI",{});var E8e=s(q1);zfe=n(E8e,"STRONG",{});var Lct=s(zfe);g$o=r(Lct,"pegasus"),Lct.forEach(t),h$o=r(E8e," \u2014 "),hG=n(E8e,"A",{href:!0});var xct=s(hG);p$o=r(xct,"PegasusForConditionalGeneration"),xct.forEach(t),_$o=r(E8e," (Pegasus model)"),E8e.forEach(t),u$o=i(be),j1=n(be,"LI",{});var C8e=s(j1);Wfe=n(C8e,"STRONG",{});var $ct=s(Wfe);b$o=r($ct,"plbart"),$ct.forEach(t),v$o=r(C8e," \u2014 "),pG=n(C8e,"A",{href:!0});var kct=s(pG);F$o=r(kct,"PLBartForConditionalGeneration"),kct.forEach(t),T$o=r(C8e," (PLBart model)"),C8e.forEach(t),M$o=i(be),D1=n(be,"LI",{});var w8e=s(D1);Qfe=n(w8e,"STRONG",{});var Sct=s(Qfe);E$o=r(Sct,"prophetnet"),Sct.forEach(t),C$o=r(w8e," \u2014 "),_G=n(w8e,"A",{href:!0});var Rct=s(_G);w$o=r(Rct,"ProphetNetForConditionalGeneration"),Rct.forEach(t),A$o=r(w8e," (ProphetNet model)"),w8e.forEach(t),y$o=i(be),G1=n(be,"LI",{});var A8e=s(G1);Hfe=n(A8e,"STRONG",{});var Pct=s(Hfe);L$o=r(Pct,"t5"),Pct.forEach(t),x$o=r(A8e," \u2014 "),uG=n(A8e,"A",{href:!0});var Bct=s(uG);$$o=r(Bct,"T5ForConditionalGeneration"),Bct.forEach(t),k$o=r(A8e," (T5 model)"),A8e.forEach(t),S$o=i(be),O1=n(be,"LI",{});var y8e=s(O1);Ufe=n(y8e,"STRONG",{});var Ict=s(Ufe);R$o=r(Ict,"xlm-prophetnet"),Ict.forEach(t),P$o=r(y8e," \u2014 "),bG=n(y8e,"A",{href:!0});var Nct=s(bG);B$o=r(Nct,"XLMProphetNetForConditionalGeneration"),Nct.forEach(t),I$o=r(y8e," (XLMProphetNet model)"),y8e.forEach(t),be.forEach(t),N$o=i(na),V1=n(na,"P",{});var L8e=s(V1);q$o=r(L8e,"The model is set in evaluation mode by default using "),Jfe=n(L8e,"CODE",{});var qct=s(Jfe);j$o=r(qct,"model.eval()"),qct.forEach(t),D$o=r(L8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Yfe=n(L8e,"CODE",{});var jct=s(Yfe);G$o=r(jct,"model.train()"),jct.forEach(t),L8e.forEach(t),O$o=i(na),T(X1.$$.fragment,na),na.forEach(t),Ws.forEach(t),Jqe=i(f),Gi=n(f,"H2",{class:!0});var eGe=s(Gi);z1=n(eGe,"A",{id:!0,class:!0,href:!0});var Dct=s(z1);Kfe=n(Dct,"SPAN",{});var Gct=s(Kfe);T(kA.$$.fragment,Gct),Gct.forEach(t),Dct.forEach(t),V$o=i(eGe),Zfe=n(eGe,"SPAN",{});var Oct=s(Zfe);X$o=r(Oct,"AutoModelForSequenceClassification"),Oct.forEach(t),eGe.forEach(t),Yqe=i(f),Ro=n(f,"DIV",{class:!0});var Qs=s(Ro);T(SA.$$.fragment,Qs),z$o=i(Qs),Oi=n(Qs,"P",{});var GZ=s(Oi);W$o=r(GZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),vG=n(GZ,"A",{href:!0});var Vct=s(vG);Q$o=r(Vct,"from_pretrained()"),Vct.forEach(t),H$o=r(GZ," class method or the "),FG=n(GZ,"A",{href:!0});var Xct=s(FG);U$o=r(Xct,"from_config()"),Xct.forEach(t),J$o=r(GZ,` class
method.`),GZ.forEach(t),Y$o=i(Qs),RA=n(Qs,"P",{});var oGe=s(RA);K$o=r(oGe,"This class cannot be instantiated directly using "),eme=n(oGe,"CODE",{});var zct=s(eme);Z$o=r(zct,"__init__()"),zct.forEach(t),eko=r(oGe," (throws an error)."),oGe.forEach(t),oko=i(Qs),it=n(Qs,"DIV",{class:!0});var H3=s(it);T(PA.$$.fragment,H3),rko=i(H3),ome=n(H3,"P",{});var Wct=s(ome);tko=r(Wct,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Wct.forEach(t),ako=i(H3),Vi=n(H3,"P",{});var OZ=s(Vi);nko=r(OZ,`Note:
Loading a model from its configuration file does `),rme=n(OZ,"STRONG",{});var Qct=s(rme);sko=r(Qct,"not"),Qct.forEach(t),lko=r(OZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),TG=n(OZ,"A",{href:!0});var Hct=s(TG);iko=r(Hct,"from_pretrained()"),Hct.forEach(t),dko=r(OZ," to load the model weights."),OZ.forEach(t),cko=i(H3),T(W1.$$.fragment,H3),H3.forEach(t),fko=i(Qs),oo=n(Qs,"DIV",{class:!0});var sa=s(oo);T(BA.$$.fragment,sa),mko=i(sa),tme=n(sa,"P",{});var Uct=s(tme);gko=r(Uct,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Uct.forEach(t),hko=i(sa),Ra=n(sa,"P",{});var U3=s(Ra);pko=r(U3,"The model class to instantiate is selected based on the "),ame=n(U3,"CODE",{});var Jct=s(ame);_ko=r(Jct,"model_type"),Jct.forEach(t),uko=r(U3,` property of the config object (either
passed as an argument or loaded from `),nme=n(U3,"CODE",{});var Yct=s(nme);bko=r(Yct,"pretrained_model_name_or_path"),Yct.forEach(t),vko=r(U3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sme=n(U3,"CODE",{});var Kct=s(sme);Fko=r(Kct,"pretrained_model_name_or_path"),Kct.forEach(t),Tko=r(U3,":"),U3.forEach(t),Mko=i(sa),N=n(sa,"UL",{});var j=s(N);Q1=n(j,"LI",{});var x8e=s(Q1);lme=n(x8e,"STRONG",{});var Zct=s(lme);Eko=r(Zct,"albert"),Zct.forEach(t),Cko=r(x8e," \u2014 "),MG=n(x8e,"A",{href:!0});var eft=s(MG);wko=r(eft,"AlbertForSequenceClassification"),eft.forEach(t),Ako=r(x8e," (ALBERT model)"),x8e.forEach(t),yko=i(j),H1=n(j,"LI",{});var $8e=s(H1);ime=n($8e,"STRONG",{});var oft=s(ime);Lko=r(oft,"bart"),oft.forEach(t),xko=r($8e," \u2014 "),EG=n($8e,"A",{href:!0});var rft=s(EG);$ko=r(rft,"BartForSequenceClassification"),rft.forEach(t),kko=r($8e," (BART model)"),$8e.forEach(t),Sko=i(j),U1=n(j,"LI",{});var k8e=s(U1);dme=n(k8e,"STRONG",{});var tft=s(dme);Rko=r(tft,"bert"),tft.forEach(t),Pko=r(k8e," \u2014 "),CG=n(k8e,"A",{href:!0});var aft=s(CG);Bko=r(aft,"BertForSequenceClassification"),aft.forEach(t),Iko=r(k8e," (BERT model)"),k8e.forEach(t),Nko=i(j),J1=n(j,"LI",{});var S8e=s(J1);cme=n(S8e,"STRONG",{});var nft=s(cme);qko=r(nft,"big_bird"),nft.forEach(t),jko=r(S8e," \u2014 "),wG=n(S8e,"A",{href:!0});var sft=s(wG);Dko=r(sft,"BigBirdForSequenceClassification"),sft.forEach(t),Gko=r(S8e," (BigBird model)"),S8e.forEach(t),Oko=i(j),Y1=n(j,"LI",{});var R8e=s(Y1);fme=n(R8e,"STRONG",{});var lft=s(fme);Vko=r(lft,"bigbird_pegasus"),lft.forEach(t),Xko=r(R8e," \u2014 "),AG=n(R8e,"A",{href:!0});var ift=s(AG);zko=r(ift,"BigBirdPegasusForSequenceClassification"),ift.forEach(t),Wko=r(R8e," (BigBirdPegasus model)"),R8e.forEach(t),Qko=i(j),K1=n(j,"LI",{});var P8e=s(K1);mme=n(P8e,"STRONG",{});var dft=s(mme);Hko=r(dft,"camembert"),dft.forEach(t),Uko=r(P8e," \u2014 "),yG=n(P8e,"A",{href:!0});var cft=s(yG);Jko=r(cft,"CamembertForSequenceClassification"),cft.forEach(t),Yko=r(P8e," (CamemBERT model)"),P8e.forEach(t),Kko=i(j),Z1=n(j,"LI",{});var B8e=s(Z1);gme=n(B8e,"STRONG",{});var fft=s(gme);Zko=r(fft,"canine"),fft.forEach(t),eSo=r(B8e," \u2014 "),LG=n(B8e,"A",{href:!0});var mft=s(LG);oSo=r(mft,"CanineForSequenceClassification"),mft.forEach(t),rSo=r(B8e," (Canine model)"),B8e.forEach(t),tSo=i(j),eb=n(j,"LI",{});var I8e=s(eb);hme=n(I8e,"STRONG",{});var gft=s(hme);aSo=r(gft,"convbert"),gft.forEach(t),nSo=r(I8e," \u2014 "),xG=n(I8e,"A",{href:!0});var hft=s(xG);sSo=r(hft,"ConvBertForSequenceClassification"),hft.forEach(t),lSo=r(I8e," (ConvBERT model)"),I8e.forEach(t),iSo=i(j),ob=n(j,"LI",{});var N8e=s(ob);pme=n(N8e,"STRONG",{});var pft=s(pme);dSo=r(pft,"ctrl"),pft.forEach(t),cSo=r(N8e," \u2014 "),$G=n(N8e,"A",{href:!0});var _ft=s($G);fSo=r(_ft,"CTRLForSequenceClassification"),_ft.forEach(t),mSo=r(N8e," (CTRL model)"),N8e.forEach(t),gSo=i(j),rb=n(j,"LI",{});var q8e=s(rb);_me=n(q8e,"STRONG",{});var uft=s(_me);hSo=r(uft,"data2vec-text"),uft.forEach(t),pSo=r(q8e," \u2014 "),kG=n(q8e,"A",{href:!0});var bft=s(kG);_So=r(bft,"Data2VecTextForSequenceClassification"),bft.forEach(t),uSo=r(q8e," (Data2VecText model)"),q8e.forEach(t),bSo=i(j),tb=n(j,"LI",{});var j8e=s(tb);ume=n(j8e,"STRONG",{});var vft=s(ume);vSo=r(vft,"deberta"),vft.forEach(t),FSo=r(j8e," \u2014 "),SG=n(j8e,"A",{href:!0});var Fft=s(SG);TSo=r(Fft,"DebertaForSequenceClassification"),Fft.forEach(t),MSo=r(j8e," (DeBERTa model)"),j8e.forEach(t),ESo=i(j),ab=n(j,"LI",{});var D8e=s(ab);bme=n(D8e,"STRONG",{});var Tft=s(bme);CSo=r(Tft,"deberta-v2"),Tft.forEach(t),wSo=r(D8e," \u2014 "),RG=n(D8e,"A",{href:!0});var Mft=s(RG);ASo=r(Mft,"DebertaV2ForSequenceClassification"),Mft.forEach(t),ySo=r(D8e," (DeBERTa-v2 model)"),D8e.forEach(t),LSo=i(j),nb=n(j,"LI",{});var G8e=s(nb);vme=n(G8e,"STRONG",{});var Eft=s(vme);xSo=r(Eft,"distilbert"),Eft.forEach(t),$So=r(G8e," \u2014 "),PG=n(G8e,"A",{href:!0});var Cft=s(PG);kSo=r(Cft,"DistilBertForSequenceClassification"),Cft.forEach(t),SSo=r(G8e," (DistilBERT model)"),G8e.forEach(t),RSo=i(j),sb=n(j,"LI",{});var O8e=s(sb);Fme=n(O8e,"STRONG",{});var wft=s(Fme);PSo=r(wft,"electra"),wft.forEach(t),BSo=r(O8e," \u2014 "),BG=n(O8e,"A",{href:!0});var Aft=s(BG);ISo=r(Aft,"ElectraForSequenceClassification"),Aft.forEach(t),NSo=r(O8e," (ELECTRA model)"),O8e.forEach(t),qSo=i(j),lb=n(j,"LI",{});var V8e=s(lb);Tme=n(V8e,"STRONG",{});var yft=s(Tme);jSo=r(yft,"flaubert"),yft.forEach(t),DSo=r(V8e," \u2014 "),IG=n(V8e,"A",{href:!0});var Lft=s(IG);GSo=r(Lft,"FlaubertForSequenceClassification"),Lft.forEach(t),OSo=r(V8e," (FlauBERT model)"),V8e.forEach(t),VSo=i(j),ib=n(j,"LI",{});var X8e=s(ib);Mme=n(X8e,"STRONG",{});var xft=s(Mme);XSo=r(xft,"fnet"),xft.forEach(t),zSo=r(X8e," \u2014 "),NG=n(X8e,"A",{href:!0});var $ft=s(NG);WSo=r($ft,"FNetForSequenceClassification"),$ft.forEach(t),QSo=r(X8e," (FNet model)"),X8e.forEach(t),HSo=i(j),db=n(j,"LI",{});var z8e=s(db);Eme=n(z8e,"STRONG",{});var kft=s(Eme);USo=r(kft,"funnel"),kft.forEach(t),JSo=r(z8e," \u2014 "),qG=n(z8e,"A",{href:!0});var Sft=s(qG);YSo=r(Sft,"FunnelForSequenceClassification"),Sft.forEach(t),KSo=r(z8e," (Funnel Transformer model)"),z8e.forEach(t),ZSo=i(j),cb=n(j,"LI",{});var W8e=s(cb);Cme=n(W8e,"STRONG",{});var Rft=s(Cme);eRo=r(Rft,"gpt2"),Rft.forEach(t),oRo=r(W8e," \u2014 "),jG=n(W8e,"A",{href:!0});var Pft=s(jG);rRo=r(Pft,"GPT2ForSequenceClassification"),Pft.forEach(t),tRo=r(W8e," (OpenAI GPT-2 model)"),W8e.forEach(t),aRo=i(j),fb=n(j,"LI",{});var Q8e=s(fb);wme=n(Q8e,"STRONG",{});var Bft=s(wme);nRo=r(Bft,"gpt_neo"),Bft.forEach(t),sRo=r(Q8e," \u2014 "),DG=n(Q8e,"A",{href:!0});var Ift=s(DG);lRo=r(Ift,"GPTNeoForSequenceClassification"),Ift.forEach(t),iRo=r(Q8e," (GPT Neo model)"),Q8e.forEach(t),dRo=i(j),mb=n(j,"LI",{});var H8e=s(mb);Ame=n(H8e,"STRONG",{});var Nft=s(Ame);cRo=r(Nft,"gptj"),Nft.forEach(t),fRo=r(H8e," \u2014 "),GG=n(H8e,"A",{href:!0});var qft=s(GG);mRo=r(qft,"GPTJForSequenceClassification"),qft.forEach(t),gRo=r(H8e," (GPT-J model)"),H8e.forEach(t),hRo=i(j),gb=n(j,"LI",{});var U8e=s(gb);yme=n(U8e,"STRONG",{});var jft=s(yme);pRo=r(jft,"ibert"),jft.forEach(t),_Ro=r(U8e," \u2014 "),OG=n(U8e,"A",{href:!0});var Dft=s(OG);uRo=r(Dft,"IBertForSequenceClassification"),Dft.forEach(t),bRo=r(U8e," (I-BERT model)"),U8e.forEach(t),vRo=i(j),hb=n(j,"LI",{});var J8e=s(hb);Lme=n(J8e,"STRONG",{});var Gft=s(Lme);FRo=r(Gft,"layoutlm"),Gft.forEach(t),TRo=r(J8e," \u2014 "),VG=n(J8e,"A",{href:!0});var Oft=s(VG);MRo=r(Oft,"LayoutLMForSequenceClassification"),Oft.forEach(t),ERo=r(J8e," (LayoutLM model)"),J8e.forEach(t),CRo=i(j),pb=n(j,"LI",{});var Y8e=s(pb);xme=n(Y8e,"STRONG",{});var Vft=s(xme);wRo=r(Vft,"layoutlmv2"),Vft.forEach(t),ARo=r(Y8e," \u2014 "),XG=n(Y8e,"A",{href:!0});var Xft=s(XG);yRo=r(Xft,"LayoutLMv2ForSequenceClassification"),Xft.forEach(t),LRo=r(Y8e," (LayoutLMv2 model)"),Y8e.forEach(t),xRo=i(j),_b=n(j,"LI",{});var K8e=s(_b);$me=n(K8e,"STRONG",{});var zft=s($me);$Ro=r(zft,"layoutlmv3"),zft.forEach(t),kRo=r(K8e," \u2014 "),zG=n(K8e,"A",{href:!0});var Wft=s(zG);SRo=r(Wft,"LayoutLMv3ForSequenceClassification"),Wft.forEach(t),RRo=r(K8e," (LayoutLMv3 model)"),K8e.forEach(t),PRo=i(j),ub=n(j,"LI",{});var Z8e=s(ub);kme=n(Z8e,"STRONG",{});var Qft=s(kme);BRo=r(Qft,"led"),Qft.forEach(t),IRo=r(Z8e," \u2014 "),WG=n(Z8e,"A",{href:!0});var Hft=s(WG);NRo=r(Hft,"LEDForSequenceClassification"),Hft.forEach(t),qRo=r(Z8e," (LED model)"),Z8e.forEach(t),jRo=i(j),bb=n(j,"LI",{});var exe=s(bb);Sme=n(exe,"STRONG",{});var Uft=s(Sme);DRo=r(Uft,"longformer"),Uft.forEach(t),GRo=r(exe," \u2014 "),QG=n(exe,"A",{href:!0});var Jft=s(QG);ORo=r(Jft,"LongformerForSequenceClassification"),Jft.forEach(t),VRo=r(exe," (Longformer model)"),exe.forEach(t),XRo=i(j),vb=n(j,"LI",{});var oxe=s(vb);Rme=n(oxe,"STRONG",{});var Yft=s(Rme);zRo=r(Yft,"mbart"),Yft.forEach(t),WRo=r(oxe," \u2014 "),HG=n(oxe,"A",{href:!0});var Kft=s(HG);QRo=r(Kft,"MBartForSequenceClassification"),Kft.forEach(t),HRo=r(oxe," (mBART model)"),oxe.forEach(t),URo=i(j),Fb=n(j,"LI",{});var rxe=s(Fb);Pme=n(rxe,"STRONG",{});var Zft=s(Pme);JRo=r(Zft,"megatron-bert"),Zft.forEach(t),YRo=r(rxe," \u2014 "),UG=n(rxe,"A",{href:!0});var emt=s(UG);KRo=r(emt,"MegatronBertForSequenceClassification"),emt.forEach(t),ZRo=r(rxe," (MegatronBert model)"),rxe.forEach(t),ePo=i(j),Tb=n(j,"LI",{});var txe=s(Tb);Bme=n(txe,"STRONG",{});var omt=s(Bme);oPo=r(omt,"mobilebert"),omt.forEach(t),rPo=r(txe," \u2014 "),JG=n(txe,"A",{href:!0});var rmt=s(JG);tPo=r(rmt,"MobileBertForSequenceClassification"),rmt.forEach(t),aPo=r(txe," (MobileBERT model)"),txe.forEach(t),nPo=i(j),Mb=n(j,"LI",{});var axe=s(Mb);Ime=n(axe,"STRONG",{});var tmt=s(Ime);sPo=r(tmt,"mpnet"),tmt.forEach(t),lPo=r(axe," \u2014 "),YG=n(axe,"A",{href:!0});var amt=s(YG);iPo=r(amt,"MPNetForSequenceClassification"),amt.forEach(t),dPo=r(axe," (MPNet model)"),axe.forEach(t),cPo=i(j),Eb=n(j,"LI",{});var nxe=s(Eb);Nme=n(nxe,"STRONG",{});var nmt=s(Nme);fPo=r(nmt,"nystromformer"),nmt.forEach(t),mPo=r(nxe," \u2014 "),KG=n(nxe,"A",{href:!0});var smt=s(KG);gPo=r(smt,"NystromformerForSequenceClassification"),smt.forEach(t),hPo=r(nxe," (Nystromformer model)"),nxe.forEach(t),pPo=i(j),Cb=n(j,"LI",{});var sxe=s(Cb);qme=n(sxe,"STRONG",{});var lmt=s(qme);_Po=r(lmt,"openai-gpt"),lmt.forEach(t),uPo=r(sxe," \u2014 "),ZG=n(sxe,"A",{href:!0});var imt=s(ZG);bPo=r(imt,"OpenAIGPTForSequenceClassification"),imt.forEach(t),vPo=r(sxe," (OpenAI GPT model)"),sxe.forEach(t),FPo=i(j),wb=n(j,"LI",{});var lxe=s(wb);jme=n(lxe,"STRONG",{});var dmt=s(jme);TPo=r(dmt,"perceiver"),dmt.forEach(t),MPo=r(lxe," \u2014 "),eO=n(lxe,"A",{href:!0});var cmt=s(eO);EPo=r(cmt,"PerceiverForSequenceClassification"),cmt.forEach(t),CPo=r(lxe," (Perceiver model)"),lxe.forEach(t),wPo=i(j),Ab=n(j,"LI",{});var ixe=s(Ab);Dme=n(ixe,"STRONG",{});var fmt=s(Dme);APo=r(fmt,"plbart"),fmt.forEach(t),yPo=r(ixe," \u2014 "),oO=n(ixe,"A",{href:!0});var mmt=s(oO);LPo=r(mmt,"PLBartForSequenceClassification"),mmt.forEach(t),xPo=r(ixe," (PLBart model)"),ixe.forEach(t),$Po=i(j),yb=n(j,"LI",{});var dxe=s(yb);Gme=n(dxe,"STRONG",{});var gmt=s(Gme);kPo=r(gmt,"qdqbert"),gmt.forEach(t),SPo=r(dxe," \u2014 "),rO=n(dxe,"A",{href:!0});var hmt=s(rO);RPo=r(hmt,"QDQBertForSequenceClassification"),hmt.forEach(t),PPo=r(dxe," (QDQBert model)"),dxe.forEach(t),BPo=i(j),Lb=n(j,"LI",{});var cxe=s(Lb);Ome=n(cxe,"STRONG",{});var pmt=s(Ome);IPo=r(pmt,"reformer"),pmt.forEach(t),NPo=r(cxe," \u2014 "),tO=n(cxe,"A",{href:!0});var _mt=s(tO);qPo=r(_mt,"ReformerForSequenceClassification"),_mt.forEach(t),jPo=r(cxe," (Reformer model)"),cxe.forEach(t),DPo=i(j),xb=n(j,"LI",{});var fxe=s(xb);Vme=n(fxe,"STRONG",{});var umt=s(Vme);GPo=r(umt,"rembert"),umt.forEach(t),OPo=r(fxe," \u2014 "),aO=n(fxe,"A",{href:!0});var bmt=s(aO);VPo=r(bmt,"RemBertForSequenceClassification"),bmt.forEach(t),XPo=r(fxe," (RemBERT model)"),fxe.forEach(t),zPo=i(j),$b=n(j,"LI",{});var mxe=s($b);Xme=n(mxe,"STRONG",{});var vmt=s(Xme);WPo=r(vmt,"roberta"),vmt.forEach(t),QPo=r(mxe," \u2014 "),nO=n(mxe,"A",{href:!0});var Fmt=s(nO);HPo=r(Fmt,"RobertaForSequenceClassification"),Fmt.forEach(t),UPo=r(mxe," (RoBERTa model)"),mxe.forEach(t),JPo=i(j),kb=n(j,"LI",{});var gxe=s(kb);zme=n(gxe,"STRONG",{});var Tmt=s(zme);YPo=r(Tmt,"roformer"),Tmt.forEach(t),KPo=r(gxe," \u2014 "),sO=n(gxe,"A",{href:!0});var Mmt=s(sO);ZPo=r(Mmt,"RoFormerForSequenceClassification"),Mmt.forEach(t),eBo=r(gxe," (RoFormer model)"),gxe.forEach(t),oBo=i(j),Sb=n(j,"LI",{});var hxe=s(Sb);Wme=n(hxe,"STRONG",{});var Emt=s(Wme);rBo=r(Emt,"squeezebert"),Emt.forEach(t),tBo=r(hxe," \u2014 "),lO=n(hxe,"A",{href:!0});var Cmt=s(lO);aBo=r(Cmt,"SqueezeBertForSequenceClassification"),Cmt.forEach(t),nBo=r(hxe," (SqueezeBERT model)"),hxe.forEach(t),sBo=i(j),Rb=n(j,"LI",{});var pxe=s(Rb);Qme=n(pxe,"STRONG",{});var wmt=s(Qme);lBo=r(wmt,"tapas"),wmt.forEach(t),iBo=r(pxe," \u2014 "),iO=n(pxe,"A",{href:!0});var Amt=s(iO);dBo=r(Amt,"TapasForSequenceClassification"),Amt.forEach(t),cBo=r(pxe," (TAPAS model)"),pxe.forEach(t),fBo=i(j),Pb=n(j,"LI",{});var _xe=s(Pb);Hme=n(_xe,"STRONG",{});var ymt=s(Hme);mBo=r(ymt,"transfo-xl"),ymt.forEach(t),gBo=r(_xe," \u2014 "),dO=n(_xe,"A",{href:!0});var Lmt=s(dO);hBo=r(Lmt,"TransfoXLForSequenceClassification"),Lmt.forEach(t),pBo=r(_xe," (Transformer-XL model)"),_xe.forEach(t),_Bo=i(j),Bb=n(j,"LI",{});var uxe=s(Bb);Ume=n(uxe,"STRONG",{});var xmt=s(Ume);uBo=r(xmt,"xlm"),xmt.forEach(t),bBo=r(uxe," \u2014 "),cO=n(uxe,"A",{href:!0});var $mt=s(cO);vBo=r($mt,"XLMForSequenceClassification"),$mt.forEach(t),FBo=r(uxe," (XLM model)"),uxe.forEach(t),TBo=i(j),Ib=n(j,"LI",{});var bxe=s(Ib);Jme=n(bxe,"STRONG",{});var kmt=s(Jme);MBo=r(kmt,"xlm-roberta"),kmt.forEach(t),EBo=r(bxe," \u2014 "),fO=n(bxe,"A",{href:!0});var Smt=s(fO);CBo=r(Smt,"XLMRobertaForSequenceClassification"),Smt.forEach(t),wBo=r(bxe," (XLM-RoBERTa model)"),bxe.forEach(t),ABo=i(j),Nb=n(j,"LI",{});var vxe=s(Nb);Yme=n(vxe,"STRONG",{});var Rmt=s(Yme);yBo=r(Rmt,"xlm-roberta-xl"),Rmt.forEach(t),LBo=r(vxe," \u2014 "),mO=n(vxe,"A",{href:!0});var Pmt=s(mO);xBo=r(Pmt,"XLMRobertaXLForSequenceClassification"),Pmt.forEach(t),$Bo=r(vxe," (XLM-RoBERTa-XL model)"),vxe.forEach(t),kBo=i(j),qb=n(j,"LI",{});var Fxe=s(qb);Kme=n(Fxe,"STRONG",{});var Bmt=s(Kme);SBo=r(Bmt,"xlnet"),Bmt.forEach(t),RBo=r(Fxe," \u2014 "),gO=n(Fxe,"A",{href:!0});var Imt=s(gO);PBo=r(Imt,"XLNetForSequenceClassification"),Imt.forEach(t),BBo=r(Fxe," (XLNet model)"),Fxe.forEach(t),IBo=i(j),jb=n(j,"LI",{});var Txe=s(jb);Zme=n(Txe,"STRONG",{});var Nmt=s(Zme);NBo=r(Nmt,"yoso"),Nmt.forEach(t),qBo=r(Txe," \u2014 "),hO=n(Txe,"A",{href:!0});var qmt=s(hO);jBo=r(qmt,"YosoForSequenceClassification"),qmt.forEach(t),DBo=r(Txe," (YOSO model)"),Txe.forEach(t),j.forEach(t),GBo=i(sa),Db=n(sa,"P",{});var Mxe=s(Db);OBo=r(Mxe,"The model is set in evaluation mode by default using "),ege=n(Mxe,"CODE",{});var jmt=s(ege);VBo=r(jmt,"model.eval()"),jmt.forEach(t),XBo=r(Mxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),oge=n(Mxe,"CODE",{});var Dmt=s(oge);zBo=r(Dmt,"model.train()"),Dmt.forEach(t),Mxe.forEach(t),WBo=i(sa),T(Gb.$$.fragment,sa),sa.forEach(t),Qs.forEach(t),Kqe=i(f),Xi=n(f,"H2",{class:!0});var rGe=s(Xi);Ob=n(rGe,"A",{id:!0,class:!0,href:!0});var Gmt=s(Ob);rge=n(Gmt,"SPAN",{});var Omt=s(rge);T(IA.$$.fragment,Omt),Omt.forEach(t),Gmt.forEach(t),QBo=i(rGe),tge=n(rGe,"SPAN",{});var Vmt=s(tge);HBo=r(Vmt,"AutoModelForMultipleChoice"),Vmt.forEach(t),rGe.forEach(t),Zqe=i(f),Po=n(f,"DIV",{class:!0});var Hs=s(Po);T(NA.$$.fragment,Hs),UBo=i(Hs),zi=n(Hs,"P",{});var VZ=s(zi);JBo=r(VZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),pO=n(VZ,"A",{href:!0});var Xmt=s(pO);YBo=r(Xmt,"from_pretrained()"),Xmt.forEach(t),KBo=r(VZ," class method or the "),_O=n(VZ,"A",{href:!0});var zmt=s(_O);ZBo=r(zmt,"from_config()"),zmt.forEach(t),eIo=r(VZ,` class
method.`),VZ.forEach(t),oIo=i(Hs),qA=n(Hs,"P",{});var tGe=s(qA);rIo=r(tGe,"This class cannot be instantiated directly using "),age=n(tGe,"CODE",{});var Wmt=s(age);tIo=r(Wmt,"__init__()"),Wmt.forEach(t),aIo=r(tGe," (throws an error)."),tGe.forEach(t),nIo=i(Hs),dt=n(Hs,"DIV",{class:!0});var J3=s(dt);T(jA.$$.fragment,J3),sIo=i(J3),nge=n(J3,"P",{});var Qmt=s(nge);lIo=r(Qmt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Qmt.forEach(t),iIo=i(J3),Wi=n(J3,"P",{});var XZ=s(Wi);dIo=r(XZ,`Note:
Loading a model from its configuration file does `),sge=n(XZ,"STRONG",{});var Hmt=s(sge);cIo=r(Hmt,"not"),Hmt.forEach(t),fIo=r(XZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),uO=n(XZ,"A",{href:!0});var Umt=s(uO);mIo=r(Umt,"from_pretrained()"),Umt.forEach(t),gIo=r(XZ," to load the model weights."),XZ.forEach(t),hIo=i(J3),T(Vb.$$.fragment,J3),J3.forEach(t),pIo=i(Hs),ro=n(Hs,"DIV",{class:!0});var la=s(ro);T(DA.$$.fragment,la),_Io=i(la),lge=n(la,"P",{});var Jmt=s(lge);uIo=r(Jmt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Jmt.forEach(t),bIo=i(la),Pa=n(la,"P",{});var Y3=s(Pa);vIo=r(Y3,"The model class to instantiate is selected based on the "),ige=n(Y3,"CODE",{});var Ymt=s(ige);FIo=r(Ymt,"model_type"),Ymt.forEach(t),TIo=r(Y3,` property of the config object (either
passed as an argument or loaded from `),dge=n(Y3,"CODE",{});var Kmt=s(dge);MIo=r(Kmt,"pretrained_model_name_or_path"),Kmt.forEach(t),EIo=r(Y3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cge=n(Y3,"CODE",{});var Zmt=s(cge);CIo=r(Zmt,"pretrained_model_name_or_path"),Zmt.forEach(t),wIo=r(Y3,":"),Y3.forEach(t),AIo=i(la),K=n(la,"UL",{});var ee=s(K);Xb=n(ee,"LI",{});var Exe=s(Xb);fge=n(Exe,"STRONG",{});var egt=s(fge);yIo=r(egt,"albert"),egt.forEach(t),LIo=r(Exe," \u2014 "),bO=n(Exe,"A",{href:!0});var ogt=s(bO);xIo=r(ogt,"AlbertForMultipleChoice"),ogt.forEach(t),$Io=r(Exe," (ALBERT model)"),Exe.forEach(t),kIo=i(ee),zb=n(ee,"LI",{});var Cxe=s(zb);mge=n(Cxe,"STRONG",{});var rgt=s(mge);SIo=r(rgt,"bert"),rgt.forEach(t),RIo=r(Cxe," \u2014 "),vO=n(Cxe,"A",{href:!0});var tgt=s(vO);PIo=r(tgt,"BertForMultipleChoice"),tgt.forEach(t),BIo=r(Cxe," (BERT model)"),Cxe.forEach(t),IIo=i(ee),Wb=n(ee,"LI",{});var wxe=s(Wb);gge=n(wxe,"STRONG",{});var agt=s(gge);NIo=r(agt,"big_bird"),agt.forEach(t),qIo=r(wxe," \u2014 "),FO=n(wxe,"A",{href:!0});var ngt=s(FO);jIo=r(ngt,"BigBirdForMultipleChoice"),ngt.forEach(t),DIo=r(wxe," (BigBird model)"),wxe.forEach(t),GIo=i(ee),Qb=n(ee,"LI",{});var Axe=s(Qb);hge=n(Axe,"STRONG",{});var sgt=s(hge);OIo=r(sgt,"camembert"),sgt.forEach(t),VIo=r(Axe," \u2014 "),TO=n(Axe,"A",{href:!0});var lgt=s(TO);XIo=r(lgt,"CamembertForMultipleChoice"),lgt.forEach(t),zIo=r(Axe," (CamemBERT model)"),Axe.forEach(t),WIo=i(ee),Hb=n(ee,"LI",{});var yxe=s(Hb);pge=n(yxe,"STRONG",{});var igt=s(pge);QIo=r(igt,"canine"),igt.forEach(t),HIo=r(yxe," \u2014 "),MO=n(yxe,"A",{href:!0});var dgt=s(MO);UIo=r(dgt,"CanineForMultipleChoice"),dgt.forEach(t),JIo=r(yxe," (Canine model)"),yxe.forEach(t),YIo=i(ee),Ub=n(ee,"LI",{});var Lxe=s(Ub);_ge=n(Lxe,"STRONG",{});var cgt=s(_ge);KIo=r(cgt,"convbert"),cgt.forEach(t),ZIo=r(Lxe," \u2014 "),EO=n(Lxe,"A",{href:!0});var fgt=s(EO);eNo=r(fgt,"ConvBertForMultipleChoice"),fgt.forEach(t),oNo=r(Lxe," (ConvBERT model)"),Lxe.forEach(t),rNo=i(ee),Jb=n(ee,"LI",{});var xxe=s(Jb);uge=n(xxe,"STRONG",{});var mgt=s(uge);tNo=r(mgt,"data2vec-text"),mgt.forEach(t),aNo=r(xxe," \u2014 "),CO=n(xxe,"A",{href:!0});var ggt=s(CO);nNo=r(ggt,"Data2VecTextForMultipleChoice"),ggt.forEach(t),sNo=r(xxe," (Data2VecText model)"),xxe.forEach(t),lNo=i(ee),Yb=n(ee,"LI",{});var $xe=s(Yb);bge=n($xe,"STRONG",{});var hgt=s(bge);iNo=r(hgt,"deberta-v2"),hgt.forEach(t),dNo=r($xe," \u2014 "),wO=n($xe,"A",{href:!0});var pgt=s(wO);cNo=r(pgt,"DebertaV2ForMultipleChoice"),pgt.forEach(t),fNo=r($xe," (DeBERTa-v2 model)"),$xe.forEach(t),mNo=i(ee),Kb=n(ee,"LI",{});var kxe=s(Kb);vge=n(kxe,"STRONG",{});var _gt=s(vge);gNo=r(_gt,"distilbert"),_gt.forEach(t),hNo=r(kxe," \u2014 "),AO=n(kxe,"A",{href:!0});var ugt=s(AO);pNo=r(ugt,"DistilBertForMultipleChoice"),ugt.forEach(t),_No=r(kxe," (DistilBERT model)"),kxe.forEach(t),uNo=i(ee),Zb=n(ee,"LI",{});var Sxe=s(Zb);Fge=n(Sxe,"STRONG",{});var bgt=s(Fge);bNo=r(bgt,"electra"),bgt.forEach(t),vNo=r(Sxe," \u2014 "),yO=n(Sxe,"A",{href:!0});var vgt=s(yO);FNo=r(vgt,"ElectraForMultipleChoice"),vgt.forEach(t),TNo=r(Sxe," (ELECTRA model)"),Sxe.forEach(t),MNo=i(ee),ev=n(ee,"LI",{});var Rxe=s(ev);Tge=n(Rxe,"STRONG",{});var Fgt=s(Tge);ENo=r(Fgt,"flaubert"),Fgt.forEach(t),CNo=r(Rxe," \u2014 "),LO=n(Rxe,"A",{href:!0});var Tgt=s(LO);wNo=r(Tgt,"FlaubertForMultipleChoice"),Tgt.forEach(t),ANo=r(Rxe," (FlauBERT model)"),Rxe.forEach(t),yNo=i(ee),ov=n(ee,"LI",{});var Pxe=s(ov);Mge=n(Pxe,"STRONG",{});var Mgt=s(Mge);LNo=r(Mgt,"fnet"),Mgt.forEach(t),xNo=r(Pxe," \u2014 "),xO=n(Pxe,"A",{href:!0});var Egt=s(xO);$No=r(Egt,"FNetForMultipleChoice"),Egt.forEach(t),kNo=r(Pxe," (FNet model)"),Pxe.forEach(t),SNo=i(ee),rv=n(ee,"LI",{});var Bxe=s(rv);Ege=n(Bxe,"STRONG",{});var Cgt=s(Ege);RNo=r(Cgt,"funnel"),Cgt.forEach(t),PNo=r(Bxe," \u2014 "),$O=n(Bxe,"A",{href:!0});var wgt=s($O);BNo=r(wgt,"FunnelForMultipleChoice"),wgt.forEach(t),INo=r(Bxe," (Funnel Transformer model)"),Bxe.forEach(t),NNo=i(ee),tv=n(ee,"LI",{});var Ixe=s(tv);Cge=n(Ixe,"STRONG",{});var Agt=s(Cge);qNo=r(Agt,"ibert"),Agt.forEach(t),jNo=r(Ixe," \u2014 "),kO=n(Ixe,"A",{href:!0});var ygt=s(kO);DNo=r(ygt,"IBertForMultipleChoice"),ygt.forEach(t),GNo=r(Ixe," (I-BERT model)"),Ixe.forEach(t),ONo=i(ee),av=n(ee,"LI",{});var Nxe=s(av);wge=n(Nxe,"STRONG",{});var Lgt=s(wge);VNo=r(Lgt,"longformer"),Lgt.forEach(t),XNo=r(Nxe," \u2014 "),SO=n(Nxe,"A",{href:!0});var xgt=s(SO);zNo=r(xgt,"LongformerForMultipleChoice"),xgt.forEach(t),WNo=r(Nxe," (Longformer model)"),Nxe.forEach(t),QNo=i(ee),nv=n(ee,"LI",{});var qxe=s(nv);Age=n(qxe,"STRONG",{});var $gt=s(Age);HNo=r($gt,"megatron-bert"),$gt.forEach(t),UNo=r(qxe," \u2014 "),RO=n(qxe,"A",{href:!0});var kgt=s(RO);JNo=r(kgt,"MegatronBertForMultipleChoice"),kgt.forEach(t),YNo=r(qxe," (MegatronBert model)"),qxe.forEach(t),KNo=i(ee),sv=n(ee,"LI",{});var jxe=s(sv);yge=n(jxe,"STRONG",{});var Sgt=s(yge);ZNo=r(Sgt,"mobilebert"),Sgt.forEach(t),eqo=r(jxe," \u2014 "),PO=n(jxe,"A",{href:!0});var Rgt=s(PO);oqo=r(Rgt,"MobileBertForMultipleChoice"),Rgt.forEach(t),rqo=r(jxe," (MobileBERT model)"),jxe.forEach(t),tqo=i(ee),lv=n(ee,"LI",{});var Dxe=s(lv);Lge=n(Dxe,"STRONG",{});var Pgt=s(Lge);aqo=r(Pgt,"mpnet"),Pgt.forEach(t),nqo=r(Dxe," \u2014 "),BO=n(Dxe,"A",{href:!0});var Bgt=s(BO);sqo=r(Bgt,"MPNetForMultipleChoice"),Bgt.forEach(t),lqo=r(Dxe," (MPNet model)"),Dxe.forEach(t),iqo=i(ee),iv=n(ee,"LI",{});var Gxe=s(iv);xge=n(Gxe,"STRONG",{});var Igt=s(xge);dqo=r(Igt,"nystromformer"),Igt.forEach(t),cqo=r(Gxe," \u2014 "),IO=n(Gxe,"A",{href:!0});var Ngt=s(IO);fqo=r(Ngt,"NystromformerForMultipleChoice"),Ngt.forEach(t),mqo=r(Gxe," (Nystromformer model)"),Gxe.forEach(t),gqo=i(ee),dv=n(ee,"LI",{});var Oxe=s(dv);$ge=n(Oxe,"STRONG",{});var qgt=s($ge);hqo=r(qgt,"qdqbert"),qgt.forEach(t),pqo=r(Oxe," \u2014 "),NO=n(Oxe,"A",{href:!0});var jgt=s(NO);_qo=r(jgt,"QDQBertForMultipleChoice"),jgt.forEach(t),uqo=r(Oxe," (QDQBert model)"),Oxe.forEach(t),bqo=i(ee),cv=n(ee,"LI",{});var Vxe=s(cv);kge=n(Vxe,"STRONG",{});var Dgt=s(kge);vqo=r(Dgt,"rembert"),Dgt.forEach(t),Fqo=r(Vxe," \u2014 "),qO=n(Vxe,"A",{href:!0});var Ggt=s(qO);Tqo=r(Ggt,"RemBertForMultipleChoice"),Ggt.forEach(t),Mqo=r(Vxe," (RemBERT model)"),Vxe.forEach(t),Eqo=i(ee),fv=n(ee,"LI",{});var Xxe=s(fv);Sge=n(Xxe,"STRONG",{});var Ogt=s(Sge);Cqo=r(Ogt,"roberta"),Ogt.forEach(t),wqo=r(Xxe," \u2014 "),jO=n(Xxe,"A",{href:!0});var Vgt=s(jO);Aqo=r(Vgt,"RobertaForMultipleChoice"),Vgt.forEach(t),yqo=r(Xxe," (RoBERTa model)"),Xxe.forEach(t),Lqo=i(ee),mv=n(ee,"LI",{});var zxe=s(mv);Rge=n(zxe,"STRONG",{});var Xgt=s(Rge);xqo=r(Xgt,"roformer"),Xgt.forEach(t),$qo=r(zxe," \u2014 "),DO=n(zxe,"A",{href:!0});var zgt=s(DO);kqo=r(zgt,"RoFormerForMultipleChoice"),zgt.forEach(t),Sqo=r(zxe," (RoFormer model)"),zxe.forEach(t),Rqo=i(ee),gv=n(ee,"LI",{});var Wxe=s(gv);Pge=n(Wxe,"STRONG",{});var Wgt=s(Pge);Pqo=r(Wgt,"squeezebert"),Wgt.forEach(t),Bqo=r(Wxe," \u2014 "),GO=n(Wxe,"A",{href:!0});var Qgt=s(GO);Iqo=r(Qgt,"SqueezeBertForMultipleChoice"),Qgt.forEach(t),Nqo=r(Wxe," (SqueezeBERT model)"),Wxe.forEach(t),qqo=i(ee),hv=n(ee,"LI",{});var Qxe=s(hv);Bge=n(Qxe,"STRONG",{});var Hgt=s(Bge);jqo=r(Hgt,"xlm"),Hgt.forEach(t),Dqo=r(Qxe," \u2014 "),OO=n(Qxe,"A",{href:!0});var Ugt=s(OO);Gqo=r(Ugt,"XLMForMultipleChoice"),Ugt.forEach(t),Oqo=r(Qxe," (XLM model)"),Qxe.forEach(t),Vqo=i(ee),pv=n(ee,"LI",{});var Hxe=s(pv);Ige=n(Hxe,"STRONG",{});var Jgt=s(Ige);Xqo=r(Jgt,"xlm-roberta"),Jgt.forEach(t),zqo=r(Hxe," \u2014 "),VO=n(Hxe,"A",{href:!0});var Ygt=s(VO);Wqo=r(Ygt,"XLMRobertaForMultipleChoice"),Ygt.forEach(t),Qqo=r(Hxe," (XLM-RoBERTa model)"),Hxe.forEach(t),Hqo=i(ee),_v=n(ee,"LI",{});var Uxe=s(_v);Nge=n(Uxe,"STRONG",{});var Kgt=s(Nge);Uqo=r(Kgt,"xlm-roberta-xl"),Kgt.forEach(t),Jqo=r(Uxe," \u2014 "),XO=n(Uxe,"A",{href:!0});var Zgt=s(XO);Yqo=r(Zgt,"XLMRobertaXLForMultipleChoice"),Zgt.forEach(t),Kqo=r(Uxe," (XLM-RoBERTa-XL model)"),Uxe.forEach(t),Zqo=i(ee),uv=n(ee,"LI",{});var Jxe=s(uv);qge=n(Jxe,"STRONG",{});var eht=s(qge);ejo=r(eht,"xlnet"),eht.forEach(t),ojo=r(Jxe," \u2014 "),zO=n(Jxe,"A",{href:!0});var oht=s(zO);rjo=r(oht,"XLNetForMultipleChoice"),oht.forEach(t),tjo=r(Jxe," (XLNet model)"),Jxe.forEach(t),ajo=i(ee),bv=n(ee,"LI",{});var Yxe=s(bv);jge=n(Yxe,"STRONG",{});var rht=s(jge);njo=r(rht,"yoso"),rht.forEach(t),sjo=r(Yxe," \u2014 "),WO=n(Yxe,"A",{href:!0});var tht=s(WO);ljo=r(tht,"YosoForMultipleChoice"),tht.forEach(t),ijo=r(Yxe," (YOSO model)"),Yxe.forEach(t),ee.forEach(t),djo=i(la),vv=n(la,"P",{});var Kxe=s(vv);cjo=r(Kxe,"The model is set in evaluation mode by default using "),Dge=n(Kxe,"CODE",{});var aht=s(Dge);fjo=r(aht,"model.eval()"),aht.forEach(t),mjo=r(Kxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gge=n(Kxe,"CODE",{});var nht=s(Gge);gjo=r(nht,"model.train()"),nht.forEach(t),Kxe.forEach(t),hjo=i(la),T(Fv.$$.fragment,la),la.forEach(t),Hs.forEach(t),eje=i(f),Qi=n(f,"H2",{class:!0});var aGe=s(Qi);Tv=n(aGe,"A",{id:!0,class:!0,href:!0});var sht=s(Tv);Oge=n(sht,"SPAN",{});var lht=s(Oge);T(GA.$$.fragment,lht),lht.forEach(t),sht.forEach(t),pjo=i(aGe),Vge=n(aGe,"SPAN",{});var iht=s(Vge);_jo=r(iht,"AutoModelForNextSentencePrediction"),iht.forEach(t),aGe.forEach(t),oje=i(f),Bo=n(f,"DIV",{class:!0});var Us=s(Bo);T(OA.$$.fragment,Us),ujo=i(Us),Hi=n(Us,"P",{});var zZ=s(Hi);bjo=r(zZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),QO=n(zZ,"A",{href:!0});var dht=s(QO);vjo=r(dht,"from_pretrained()"),dht.forEach(t),Fjo=r(zZ," class method or the "),HO=n(zZ,"A",{href:!0});var cht=s(HO);Tjo=r(cht,"from_config()"),cht.forEach(t),Mjo=r(zZ,` class
method.`),zZ.forEach(t),Ejo=i(Us),VA=n(Us,"P",{});var nGe=s(VA);Cjo=r(nGe,"This class cannot be instantiated directly using "),Xge=n(nGe,"CODE",{});var fht=s(Xge);wjo=r(fht,"__init__()"),fht.forEach(t),Ajo=r(nGe," (throws an error)."),nGe.forEach(t),yjo=i(Us),ct=n(Us,"DIV",{class:!0});var K3=s(ct);T(XA.$$.fragment,K3),Ljo=i(K3),zge=n(K3,"P",{});var mht=s(zge);xjo=r(mht,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),mht.forEach(t),$jo=i(K3),Ui=n(K3,"P",{});var WZ=s(Ui);kjo=r(WZ,`Note:
Loading a model from its configuration file does `),Wge=n(WZ,"STRONG",{});var ght=s(Wge);Sjo=r(ght,"not"),ght.forEach(t),Rjo=r(WZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),UO=n(WZ,"A",{href:!0});var hht=s(UO);Pjo=r(hht,"from_pretrained()"),hht.forEach(t),Bjo=r(WZ," to load the model weights."),WZ.forEach(t),Ijo=i(K3),T(Mv.$$.fragment,K3),K3.forEach(t),Njo=i(Us),to=n(Us,"DIV",{class:!0});var ia=s(to);T(zA.$$.fragment,ia),qjo=i(ia),Qge=n(ia,"P",{});var pht=s(Qge);jjo=r(pht,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),pht.forEach(t),Djo=i(ia),Ba=n(ia,"P",{});var Z3=s(Ba);Gjo=r(Z3,"The model class to instantiate is selected based on the "),Hge=n(Z3,"CODE",{});var _ht=s(Hge);Ojo=r(_ht,"model_type"),_ht.forEach(t),Vjo=r(Z3,` property of the config object (either
passed as an argument or loaded from `),Uge=n(Z3,"CODE",{});var uht=s(Uge);Xjo=r(uht,"pretrained_model_name_or_path"),uht.forEach(t),zjo=r(Z3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jge=n(Z3,"CODE",{});var bht=s(Jge);Wjo=r(bht,"pretrained_model_name_or_path"),bht.forEach(t),Qjo=r(Z3,":"),Z3.forEach(t),Hjo=i(ia),Yr=n(ia,"UL",{});var Js=s(Yr);Ev=n(Js,"LI",{});var Zxe=s(Ev);Yge=n(Zxe,"STRONG",{});var vht=s(Yge);Ujo=r(vht,"bert"),vht.forEach(t),Jjo=r(Zxe," \u2014 "),JO=n(Zxe,"A",{href:!0});var Fht=s(JO);Yjo=r(Fht,"BertForNextSentencePrediction"),Fht.forEach(t),Kjo=r(Zxe," (BERT model)"),Zxe.forEach(t),Zjo=i(Js),Cv=n(Js,"LI",{});var e$e=s(Cv);Kge=n(e$e,"STRONG",{});var Tht=s(Kge);eDo=r(Tht,"fnet"),Tht.forEach(t),oDo=r(e$e," \u2014 "),YO=n(e$e,"A",{href:!0});var Mht=s(YO);rDo=r(Mht,"FNetForNextSentencePrediction"),Mht.forEach(t),tDo=r(e$e," (FNet model)"),e$e.forEach(t),aDo=i(Js),wv=n(Js,"LI",{});var o$e=s(wv);Zge=n(o$e,"STRONG",{});var Eht=s(Zge);nDo=r(Eht,"megatron-bert"),Eht.forEach(t),sDo=r(o$e," \u2014 "),KO=n(o$e,"A",{href:!0});var Cht=s(KO);lDo=r(Cht,"MegatronBertForNextSentencePrediction"),Cht.forEach(t),iDo=r(o$e," (MegatronBert model)"),o$e.forEach(t),dDo=i(Js),Av=n(Js,"LI",{});var r$e=s(Av);ehe=n(r$e,"STRONG",{});var wht=s(ehe);cDo=r(wht,"mobilebert"),wht.forEach(t),fDo=r(r$e," \u2014 "),ZO=n(r$e,"A",{href:!0});var Aht=s(ZO);mDo=r(Aht,"MobileBertForNextSentencePrediction"),Aht.forEach(t),gDo=r(r$e," (MobileBERT model)"),r$e.forEach(t),hDo=i(Js),yv=n(Js,"LI",{});var t$e=s(yv);ohe=n(t$e,"STRONG",{});var yht=s(ohe);pDo=r(yht,"qdqbert"),yht.forEach(t),_Do=r(t$e," \u2014 "),eV=n(t$e,"A",{href:!0});var Lht=s(eV);uDo=r(Lht,"QDQBertForNextSentencePrediction"),Lht.forEach(t),bDo=r(t$e," (QDQBert model)"),t$e.forEach(t),Js.forEach(t),vDo=i(ia),Lv=n(ia,"P",{});var a$e=s(Lv);FDo=r(a$e,"The model is set in evaluation mode by default using "),rhe=n(a$e,"CODE",{});var xht=s(rhe);TDo=r(xht,"model.eval()"),xht.forEach(t),MDo=r(a$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),the=n(a$e,"CODE",{});var $ht=s(the);EDo=r($ht,"model.train()"),$ht.forEach(t),a$e.forEach(t),CDo=i(ia),T(xv.$$.fragment,ia),ia.forEach(t),Us.forEach(t),rje=i(f),Ji=n(f,"H2",{class:!0});var sGe=s(Ji);$v=n(sGe,"A",{id:!0,class:!0,href:!0});var kht=s($v);ahe=n(kht,"SPAN",{});var Sht=s(ahe);T(WA.$$.fragment,Sht),Sht.forEach(t),kht.forEach(t),wDo=i(sGe),nhe=n(sGe,"SPAN",{});var Rht=s(nhe);ADo=r(Rht,"AutoModelForTokenClassification"),Rht.forEach(t),sGe.forEach(t),tje=i(f),Io=n(f,"DIV",{class:!0});var Ys=s(Io);T(QA.$$.fragment,Ys),yDo=i(Ys),Yi=n(Ys,"P",{});var QZ=s(Yi);LDo=r(QZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),oV=n(QZ,"A",{href:!0});var Pht=s(oV);xDo=r(Pht,"from_pretrained()"),Pht.forEach(t),$Do=r(QZ," class method or the "),rV=n(QZ,"A",{href:!0});var Bht=s(rV);kDo=r(Bht,"from_config()"),Bht.forEach(t),SDo=r(QZ,` class
method.`),QZ.forEach(t),RDo=i(Ys),HA=n(Ys,"P",{});var lGe=s(HA);PDo=r(lGe,"This class cannot be instantiated directly using "),she=n(lGe,"CODE",{});var Iht=s(she);BDo=r(Iht,"__init__()"),Iht.forEach(t),IDo=r(lGe," (throws an error)."),lGe.forEach(t),NDo=i(Ys),ft=n(Ys,"DIV",{class:!0});var ew=s(ft);T(UA.$$.fragment,ew),qDo=i(ew),lhe=n(ew,"P",{});var Nht=s(lhe);jDo=r(Nht,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Nht.forEach(t),DDo=i(ew),Ki=n(ew,"P",{});var HZ=s(Ki);GDo=r(HZ,`Note:
Loading a model from its configuration file does `),ihe=n(HZ,"STRONG",{});var qht=s(ihe);ODo=r(qht,"not"),qht.forEach(t),VDo=r(HZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),tV=n(HZ,"A",{href:!0});var jht=s(tV);XDo=r(jht,"from_pretrained()"),jht.forEach(t),zDo=r(HZ," to load the model weights."),HZ.forEach(t),WDo=i(ew),T(kv.$$.fragment,ew),ew.forEach(t),QDo=i(Ys),ao=n(Ys,"DIV",{class:!0});var da=s(ao);T(JA.$$.fragment,da),HDo=i(da),dhe=n(da,"P",{});var Dht=s(dhe);UDo=r(Dht,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Dht.forEach(t),JDo=i(da),Ia=n(da,"P",{});var ow=s(Ia);YDo=r(ow,"The model class to instantiate is selected based on the "),che=n(ow,"CODE",{});var Ght=s(che);KDo=r(Ght,"model_type"),Ght.forEach(t),ZDo=r(ow,` property of the config object (either
passed as an argument or loaded from `),fhe=n(ow,"CODE",{});var Oht=s(fhe);eGo=r(Oht,"pretrained_model_name_or_path"),Oht.forEach(t),oGo=r(ow,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mhe=n(ow,"CODE",{});var Vht=s(mhe);rGo=r(Vht,"pretrained_model_name_or_path"),Vht.forEach(t),tGo=r(ow,":"),ow.forEach(t),aGo=i(da),H=n(da,"UL",{});var J=s(H);Sv=n(J,"LI",{});var n$e=s(Sv);ghe=n(n$e,"STRONG",{});var Xht=s(ghe);nGo=r(Xht,"albert"),Xht.forEach(t),sGo=r(n$e," \u2014 "),aV=n(n$e,"A",{href:!0});var zht=s(aV);lGo=r(zht,"AlbertForTokenClassification"),zht.forEach(t),iGo=r(n$e," (ALBERT model)"),n$e.forEach(t),dGo=i(J),Rv=n(J,"LI",{});var s$e=s(Rv);hhe=n(s$e,"STRONG",{});var Wht=s(hhe);cGo=r(Wht,"bert"),Wht.forEach(t),fGo=r(s$e," \u2014 "),nV=n(s$e,"A",{href:!0});var Qht=s(nV);mGo=r(Qht,"BertForTokenClassification"),Qht.forEach(t),gGo=r(s$e," (BERT model)"),s$e.forEach(t),hGo=i(J),Pv=n(J,"LI",{});var l$e=s(Pv);phe=n(l$e,"STRONG",{});var Hht=s(phe);pGo=r(Hht,"big_bird"),Hht.forEach(t),_Go=r(l$e," \u2014 "),sV=n(l$e,"A",{href:!0});var Uht=s(sV);uGo=r(Uht,"BigBirdForTokenClassification"),Uht.forEach(t),bGo=r(l$e," (BigBird model)"),l$e.forEach(t),vGo=i(J),Bv=n(J,"LI",{});var i$e=s(Bv);_he=n(i$e,"STRONG",{});var Jht=s(_he);FGo=r(Jht,"camembert"),Jht.forEach(t),TGo=r(i$e," \u2014 "),lV=n(i$e,"A",{href:!0});var Yht=s(lV);MGo=r(Yht,"CamembertForTokenClassification"),Yht.forEach(t),EGo=r(i$e," (CamemBERT model)"),i$e.forEach(t),CGo=i(J),Iv=n(J,"LI",{});var d$e=s(Iv);uhe=n(d$e,"STRONG",{});var Kht=s(uhe);wGo=r(Kht,"canine"),Kht.forEach(t),AGo=r(d$e," \u2014 "),iV=n(d$e,"A",{href:!0});var Zht=s(iV);yGo=r(Zht,"CanineForTokenClassification"),Zht.forEach(t),LGo=r(d$e," (Canine model)"),d$e.forEach(t),xGo=i(J),Nv=n(J,"LI",{});var c$e=s(Nv);bhe=n(c$e,"STRONG",{});var ept=s(bhe);$Go=r(ept,"convbert"),ept.forEach(t),kGo=r(c$e," \u2014 "),dV=n(c$e,"A",{href:!0});var opt=s(dV);SGo=r(opt,"ConvBertForTokenClassification"),opt.forEach(t),RGo=r(c$e," (ConvBERT model)"),c$e.forEach(t),PGo=i(J),qv=n(J,"LI",{});var f$e=s(qv);vhe=n(f$e,"STRONG",{});var rpt=s(vhe);BGo=r(rpt,"data2vec-text"),rpt.forEach(t),IGo=r(f$e," \u2014 "),cV=n(f$e,"A",{href:!0});var tpt=s(cV);NGo=r(tpt,"Data2VecTextForTokenClassification"),tpt.forEach(t),qGo=r(f$e," (Data2VecText model)"),f$e.forEach(t),jGo=i(J),jv=n(J,"LI",{});var m$e=s(jv);Fhe=n(m$e,"STRONG",{});var apt=s(Fhe);DGo=r(apt,"deberta"),apt.forEach(t),GGo=r(m$e," \u2014 "),fV=n(m$e,"A",{href:!0});var npt=s(fV);OGo=r(npt,"DebertaForTokenClassification"),npt.forEach(t),VGo=r(m$e," (DeBERTa model)"),m$e.forEach(t),XGo=i(J),Dv=n(J,"LI",{});var g$e=s(Dv);The=n(g$e,"STRONG",{});var spt=s(The);zGo=r(spt,"deberta-v2"),spt.forEach(t),WGo=r(g$e," \u2014 "),mV=n(g$e,"A",{href:!0});var lpt=s(mV);QGo=r(lpt,"DebertaV2ForTokenClassification"),lpt.forEach(t),HGo=r(g$e," (DeBERTa-v2 model)"),g$e.forEach(t),UGo=i(J),Gv=n(J,"LI",{});var h$e=s(Gv);Mhe=n(h$e,"STRONG",{});var ipt=s(Mhe);JGo=r(ipt,"distilbert"),ipt.forEach(t),YGo=r(h$e," \u2014 "),gV=n(h$e,"A",{href:!0});var dpt=s(gV);KGo=r(dpt,"DistilBertForTokenClassification"),dpt.forEach(t),ZGo=r(h$e," (DistilBERT model)"),h$e.forEach(t),eOo=i(J),Ov=n(J,"LI",{});var p$e=s(Ov);Ehe=n(p$e,"STRONG",{});var cpt=s(Ehe);oOo=r(cpt,"electra"),cpt.forEach(t),rOo=r(p$e," \u2014 "),hV=n(p$e,"A",{href:!0});var fpt=s(hV);tOo=r(fpt,"ElectraForTokenClassification"),fpt.forEach(t),aOo=r(p$e," (ELECTRA model)"),p$e.forEach(t),nOo=i(J),Vv=n(J,"LI",{});var _$e=s(Vv);Che=n(_$e,"STRONG",{});var mpt=s(Che);sOo=r(mpt,"flaubert"),mpt.forEach(t),lOo=r(_$e," \u2014 "),pV=n(_$e,"A",{href:!0});var gpt=s(pV);iOo=r(gpt,"FlaubertForTokenClassification"),gpt.forEach(t),dOo=r(_$e," (FlauBERT model)"),_$e.forEach(t),cOo=i(J),Xv=n(J,"LI",{});var u$e=s(Xv);whe=n(u$e,"STRONG",{});var hpt=s(whe);fOo=r(hpt,"fnet"),hpt.forEach(t),mOo=r(u$e," \u2014 "),_V=n(u$e,"A",{href:!0});var ppt=s(_V);gOo=r(ppt,"FNetForTokenClassification"),ppt.forEach(t),hOo=r(u$e," (FNet model)"),u$e.forEach(t),pOo=i(J),zv=n(J,"LI",{});var b$e=s(zv);Ahe=n(b$e,"STRONG",{});var _pt=s(Ahe);_Oo=r(_pt,"funnel"),_pt.forEach(t),uOo=r(b$e," \u2014 "),uV=n(b$e,"A",{href:!0});var upt=s(uV);bOo=r(upt,"FunnelForTokenClassification"),upt.forEach(t),vOo=r(b$e," (Funnel Transformer model)"),b$e.forEach(t),FOo=i(J),Wv=n(J,"LI",{});var v$e=s(Wv);yhe=n(v$e,"STRONG",{});var bpt=s(yhe);TOo=r(bpt,"gpt2"),bpt.forEach(t),MOo=r(v$e," \u2014 "),bV=n(v$e,"A",{href:!0});var vpt=s(bV);EOo=r(vpt,"GPT2ForTokenClassification"),vpt.forEach(t),COo=r(v$e," (OpenAI GPT-2 model)"),v$e.forEach(t),wOo=i(J),Qv=n(J,"LI",{});var F$e=s(Qv);Lhe=n(F$e,"STRONG",{});var Fpt=s(Lhe);AOo=r(Fpt,"ibert"),Fpt.forEach(t),yOo=r(F$e," \u2014 "),vV=n(F$e,"A",{href:!0});var Tpt=s(vV);LOo=r(Tpt,"IBertForTokenClassification"),Tpt.forEach(t),xOo=r(F$e," (I-BERT model)"),F$e.forEach(t),$Oo=i(J),Hv=n(J,"LI",{});var T$e=s(Hv);xhe=n(T$e,"STRONG",{});var Mpt=s(xhe);kOo=r(Mpt,"layoutlm"),Mpt.forEach(t),SOo=r(T$e," \u2014 "),FV=n(T$e,"A",{href:!0});var Ept=s(FV);ROo=r(Ept,"LayoutLMForTokenClassification"),Ept.forEach(t),POo=r(T$e," (LayoutLM model)"),T$e.forEach(t),BOo=i(J),Uv=n(J,"LI",{});var M$e=s(Uv);$he=n(M$e,"STRONG",{});var Cpt=s($he);IOo=r(Cpt,"layoutlmv2"),Cpt.forEach(t),NOo=r(M$e," \u2014 "),TV=n(M$e,"A",{href:!0});var wpt=s(TV);qOo=r(wpt,"LayoutLMv2ForTokenClassification"),wpt.forEach(t),jOo=r(M$e," (LayoutLMv2 model)"),M$e.forEach(t),DOo=i(J),Jv=n(J,"LI",{});var E$e=s(Jv);khe=n(E$e,"STRONG",{});var Apt=s(khe);GOo=r(Apt,"layoutlmv3"),Apt.forEach(t),OOo=r(E$e," \u2014 "),MV=n(E$e,"A",{href:!0});var ypt=s(MV);VOo=r(ypt,"LayoutLMv3ForTokenClassification"),ypt.forEach(t),XOo=r(E$e," (LayoutLMv3 model)"),E$e.forEach(t),zOo=i(J),Yv=n(J,"LI",{});var C$e=s(Yv);She=n(C$e,"STRONG",{});var Lpt=s(She);WOo=r(Lpt,"longformer"),Lpt.forEach(t),QOo=r(C$e," \u2014 "),EV=n(C$e,"A",{href:!0});var xpt=s(EV);HOo=r(xpt,"LongformerForTokenClassification"),xpt.forEach(t),UOo=r(C$e," (Longformer model)"),C$e.forEach(t),JOo=i(J),Kv=n(J,"LI",{});var w$e=s(Kv);Rhe=n(w$e,"STRONG",{});var $pt=s(Rhe);YOo=r($pt,"megatron-bert"),$pt.forEach(t),KOo=r(w$e," \u2014 "),CV=n(w$e,"A",{href:!0});var kpt=s(CV);ZOo=r(kpt,"MegatronBertForTokenClassification"),kpt.forEach(t),eVo=r(w$e," (MegatronBert model)"),w$e.forEach(t),oVo=i(J),Zv=n(J,"LI",{});var A$e=s(Zv);Phe=n(A$e,"STRONG",{});var Spt=s(Phe);rVo=r(Spt,"mobilebert"),Spt.forEach(t),tVo=r(A$e," \u2014 "),wV=n(A$e,"A",{href:!0});var Rpt=s(wV);aVo=r(Rpt,"MobileBertForTokenClassification"),Rpt.forEach(t),nVo=r(A$e," (MobileBERT model)"),A$e.forEach(t),sVo=i(J),eF=n(J,"LI",{});var y$e=s(eF);Bhe=n(y$e,"STRONG",{});var Ppt=s(Bhe);lVo=r(Ppt,"mpnet"),Ppt.forEach(t),iVo=r(y$e," \u2014 "),AV=n(y$e,"A",{href:!0});var Bpt=s(AV);dVo=r(Bpt,"MPNetForTokenClassification"),Bpt.forEach(t),cVo=r(y$e," (MPNet model)"),y$e.forEach(t),fVo=i(J),oF=n(J,"LI",{});var L$e=s(oF);Ihe=n(L$e,"STRONG",{});var Ipt=s(Ihe);mVo=r(Ipt,"nystromformer"),Ipt.forEach(t),gVo=r(L$e," \u2014 "),yV=n(L$e,"A",{href:!0});var Npt=s(yV);hVo=r(Npt,"NystromformerForTokenClassification"),Npt.forEach(t),pVo=r(L$e," (Nystromformer model)"),L$e.forEach(t),_Vo=i(J),rF=n(J,"LI",{});var x$e=s(rF);Nhe=n(x$e,"STRONG",{});var qpt=s(Nhe);uVo=r(qpt,"qdqbert"),qpt.forEach(t),bVo=r(x$e," \u2014 "),LV=n(x$e,"A",{href:!0});var jpt=s(LV);vVo=r(jpt,"QDQBertForTokenClassification"),jpt.forEach(t),FVo=r(x$e," (QDQBert model)"),x$e.forEach(t),TVo=i(J),tF=n(J,"LI",{});var $$e=s(tF);qhe=n($$e,"STRONG",{});var Dpt=s(qhe);MVo=r(Dpt,"rembert"),Dpt.forEach(t),EVo=r($$e," \u2014 "),xV=n($$e,"A",{href:!0});var Gpt=s(xV);CVo=r(Gpt,"RemBertForTokenClassification"),Gpt.forEach(t),wVo=r($$e," (RemBERT model)"),$$e.forEach(t),AVo=i(J),aF=n(J,"LI",{});var k$e=s(aF);jhe=n(k$e,"STRONG",{});var Opt=s(jhe);yVo=r(Opt,"roberta"),Opt.forEach(t),LVo=r(k$e," \u2014 "),$V=n(k$e,"A",{href:!0});var Vpt=s($V);xVo=r(Vpt,"RobertaForTokenClassification"),Vpt.forEach(t),$Vo=r(k$e," (RoBERTa model)"),k$e.forEach(t),kVo=i(J),nF=n(J,"LI",{});var S$e=s(nF);Dhe=n(S$e,"STRONG",{});var Xpt=s(Dhe);SVo=r(Xpt,"roformer"),Xpt.forEach(t),RVo=r(S$e," \u2014 "),kV=n(S$e,"A",{href:!0});var zpt=s(kV);PVo=r(zpt,"RoFormerForTokenClassification"),zpt.forEach(t),BVo=r(S$e," (RoFormer model)"),S$e.forEach(t),IVo=i(J),sF=n(J,"LI",{});var R$e=s(sF);Ghe=n(R$e,"STRONG",{});var Wpt=s(Ghe);NVo=r(Wpt,"squeezebert"),Wpt.forEach(t),qVo=r(R$e," \u2014 "),SV=n(R$e,"A",{href:!0});var Qpt=s(SV);jVo=r(Qpt,"SqueezeBertForTokenClassification"),Qpt.forEach(t),DVo=r(R$e," (SqueezeBERT model)"),R$e.forEach(t),GVo=i(J),lF=n(J,"LI",{});var P$e=s(lF);Ohe=n(P$e,"STRONG",{});var Hpt=s(Ohe);OVo=r(Hpt,"xlm"),Hpt.forEach(t),VVo=r(P$e," \u2014 "),RV=n(P$e,"A",{href:!0});var Upt=s(RV);XVo=r(Upt,"XLMForTokenClassification"),Upt.forEach(t),zVo=r(P$e," (XLM model)"),P$e.forEach(t),WVo=i(J),iF=n(J,"LI",{});var B$e=s(iF);Vhe=n(B$e,"STRONG",{});var Jpt=s(Vhe);QVo=r(Jpt,"xlm-roberta"),Jpt.forEach(t),HVo=r(B$e," \u2014 "),PV=n(B$e,"A",{href:!0});var Ypt=s(PV);UVo=r(Ypt,"XLMRobertaForTokenClassification"),Ypt.forEach(t),JVo=r(B$e," (XLM-RoBERTa model)"),B$e.forEach(t),YVo=i(J),dF=n(J,"LI",{});var I$e=s(dF);Xhe=n(I$e,"STRONG",{});var Kpt=s(Xhe);KVo=r(Kpt,"xlm-roberta-xl"),Kpt.forEach(t),ZVo=r(I$e," \u2014 "),BV=n(I$e,"A",{href:!0});var Zpt=s(BV);eXo=r(Zpt,"XLMRobertaXLForTokenClassification"),Zpt.forEach(t),oXo=r(I$e," (XLM-RoBERTa-XL model)"),I$e.forEach(t),rXo=i(J),cF=n(J,"LI",{});var N$e=s(cF);zhe=n(N$e,"STRONG",{});var e_t=s(zhe);tXo=r(e_t,"xlnet"),e_t.forEach(t),aXo=r(N$e," \u2014 "),IV=n(N$e,"A",{href:!0});var o_t=s(IV);nXo=r(o_t,"XLNetForTokenClassification"),o_t.forEach(t),sXo=r(N$e," (XLNet model)"),N$e.forEach(t),lXo=i(J),fF=n(J,"LI",{});var q$e=s(fF);Whe=n(q$e,"STRONG",{});var r_t=s(Whe);iXo=r(r_t,"yoso"),r_t.forEach(t),dXo=r(q$e," \u2014 "),NV=n(q$e,"A",{href:!0});var t_t=s(NV);cXo=r(t_t,"YosoForTokenClassification"),t_t.forEach(t),fXo=r(q$e," (YOSO model)"),q$e.forEach(t),J.forEach(t),mXo=i(da),mF=n(da,"P",{});var j$e=s(mF);gXo=r(j$e,"The model is set in evaluation mode by default using "),Qhe=n(j$e,"CODE",{});var a_t=s(Qhe);hXo=r(a_t,"model.eval()"),a_t.forEach(t),pXo=r(j$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hhe=n(j$e,"CODE",{});var n_t=s(Hhe);_Xo=r(n_t,"model.train()"),n_t.forEach(t),j$e.forEach(t),uXo=i(da),T(gF.$$.fragment,da),da.forEach(t),Ys.forEach(t),aje=i(f),Zi=n(f,"H2",{class:!0});var iGe=s(Zi);hF=n(iGe,"A",{id:!0,class:!0,href:!0});var s_t=s(hF);Uhe=n(s_t,"SPAN",{});var l_t=s(Uhe);T(YA.$$.fragment,l_t),l_t.forEach(t),s_t.forEach(t),bXo=i(iGe),Jhe=n(iGe,"SPAN",{});var i_t=s(Jhe);vXo=r(i_t,"AutoModelForQuestionAnswering"),i_t.forEach(t),iGe.forEach(t),nje=i(f),No=n(f,"DIV",{class:!0});var Ks=s(No);T(KA.$$.fragment,Ks),FXo=i(Ks),ed=n(Ks,"P",{});var UZ=s(ed);TXo=r(UZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),qV=n(UZ,"A",{href:!0});var d_t=s(qV);MXo=r(d_t,"from_pretrained()"),d_t.forEach(t),EXo=r(UZ," class method or the "),jV=n(UZ,"A",{href:!0});var c_t=s(jV);CXo=r(c_t,"from_config()"),c_t.forEach(t),wXo=r(UZ,` class
method.`),UZ.forEach(t),AXo=i(Ks),ZA=n(Ks,"P",{});var dGe=s(ZA);yXo=r(dGe,"This class cannot be instantiated directly using "),Yhe=n(dGe,"CODE",{});var f_t=s(Yhe);LXo=r(f_t,"__init__()"),f_t.forEach(t),xXo=r(dGe," (throws an error)."),dGe.forEach(t),$Xo=i(Ks),mt=n(Ks,"DIV",{class:!0});var rw=s(mt);T(ey.$$.fragment,rw),kXo=i(rw),Khe=n(rw,"P",{});var m_t=s(Khe);SXo=r(m_t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),m_t.forEach(t),RXo=i(rw),od=n(rw,"P",{});var JZ=s(od);PXo=r(JZ,`Note:
Loading a model from its configuration file does `),Zhe=n(JZ,"STRONG",{});var g_t=s(Zhe);BXo=r(g_t,"not"),g_t.forEach(t),IXo=r(JZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),DV=n(JZ,"A",{href:!0});var h_t=s(DV);NXo=r(h_t,"from_pretrained()"),h_t.forEach(t),qXo=r(JZ," to load the model weights."),JZ.forEach(t),jXo=i(rw),T(pF.$$.fragment,rw),rw.forEach(t),DXo=i(Ks),no=n(Ks,"DIV",{class:!0});var ca=s(no);T(oy.$$.fragment,ca),GXo=i(ca),epe=n(ca,"P",{});var p_t=s(epe);OXo=r(p_t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),p_t.forEach(t),VXo=i(ca),Na=n(ca,"P",{});var tw=s(Na);XXo=r(tw,"The model class to instantiate is selected based on the "),ope=n(tw,"CODE",{});var __t=s(ope);zXo=r(__t,"model_type"),__t.forEach(t),WXo=r(tw,` property of the config object (either
passed as an argument or loaded from `),rpe=n(tw,"CODE",{});var u_t=s(rpe);QXo=r(u_t,"pretrained_model_name_or_path"),u_t.forEach(t),HXo=r(tw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tpe=n(tw,"CODE",{});var b_t=s(tpe);UXo=r(b_t,"pretrained_model_name_or_path"),b_t.forEach(t),JXo=r(tw,":"),tw.forEach(t),YXo=i(ca),V=n(ca,"UL",{});var X=s(V);_F=n(X,"LI",{});var D$e=s(_F);ape=n(D$e,"STRONG",{});var v_t=s(ape);KXo=r(v_t,"albert"),v_t.forEach(t),ZXo=r(D$e," \u2014 "),GV=n(D$e,"A",{href:!0});var F_t=s(GV);ezo=r(F_t,"AlbertForQuestionAnswering"),F_t.forEach(t),ozo=r(D$e," (ALBERT model)"),D$e.forEach(t),rzo=i(X),uF=n(X,"LI",{});var G$e=s(uF);npe=n(G$e,"STRONG",{});var T_t=s(npe);tzo=r(T_t,"bart"),T_t.forEach(t),azo=r(G$e," \u2014 "),OV=n(G$e,"A",{href:!0});var M_t=s(OV);nzo=r(M_t,"BartForQuestionAnswering"),M_t.forEach(t),szo=r(G$e," (BART model)"),G$e.forEach(t),lzo=i(X),bF=n(X,"LI",{});var O$e=s(bF);spe=n(O$e,"STRONG",{});var E_t=s(spe);izo=r(E_t,"bert"),E_t.forEach(t),dzo=r(O$e," \u2014 "),VV=n(O$e,"A",{href:!0});var C_t=s(VV);czo=r(C_t,"BertForQuestionAnswering"),C_t.forEach(t),fzo=r(O$e," (BERT model)"),O$e.forEach(t),mzo=i(X),vF=n(X,"LI",{});var V$e=s(vF);lpe=n(V$e,"STRONG",{});var w_t=s(lpe);gzo=r(w_t,"big_bird"),w_t.forEach(t),hzo=r(V$e," \u2014 "),XV=n(V$e,"A",{href:!0});var A_t=s(XV);pzo=r(A_t,"BigBirdForQuestionAnswering"),A_t.forEach(t),_zo=r(V$e," (BigBird model)"),V$e.forEach(t),uzo=i(X),FF=n(X,"LI",{});var X$e=s(FF);ipe=n(X$e,"STRONG",{});var y_t=s(ipe);bzo=r(y_t,"bigbird_pegasus"),y_t.forEach(t),vzo=r(X$e," \u2014 "),zV=n(X$e,"A",{href:!0});var L_t=s(zV);Fzo=r(L_t,"BigBirdPegasusForQuestionAnswering"),L_t.forEach(t),Tzo=r(X$e," (BigBirdPegasus model)"),X$e.forEach(t),Mzo=i(X),TF=n(X,"LI",{});var z$e=s(TF);dpe=n(z$e,"STRONG",{});var x_t=s(dpe);Ezo=r(x_t,"camembert"),x_t.forEach(t),Czo=r(z$e," \u2014 "),WV=n(z$e,"A",{href:!0});var $_t=s(WV);wzo=r($_t,"CamembertForQuestionAnswering"),$_t.forEach(t),Azo=r(z$e," (CamemBERT model)"),z$e.forEach(t),yzo=i(X),MF=n(X,"LI",{});var W$e=s(MF);cpe=n(W$e,"STRONG",{});var k_t=s(cpe);Lzo=r(k_t,"canine"),k_t.forEach(t),xzo=r(W$e," \u2014 "),QV=n(W$e,"A",{href:!0});var S_t=s(QV);$zo=r(S_t,"CanineForQuestionAnswering"),S_t.forEach(t),kzo=r(W$e," (Canine model)"),W$e.forEach(t),Szo=i(X),EF=n(X,"LI",{});var Q$e=s(EF);fpe=n(Q$e,"STRONG",{});var R_t=s(fpe);Rzo=r(R_t,"convbert"),R_t.forEach(t),Pzo=r(Q$e," \u2014 "),HV=n(Q$e,"A",{href:!0});var P_t=s(HV);Bzo=r(P_t,"ConvBertForQuestionAnswering"),P_t.forEach(t),Izo=r(Q$e," (ConvBERT model)"),Q$e.forEach(t),Nzo=i(X),CF=n(X,"LI",{});var H$e=s(CF);mpe=n(H$e,"STRONG",{});var B_t=s(mpe);qzo=r(B_t,"data2vec-text"),B_t.forEach(t),jzo=r(H$e," \u2014 "),UV=n(H$e,"A",{href:!0});var I_t=s(UV);Dzo=r(I_t,"Data2VecTextForQuestionAnswering"),I_t.forEach(t),Gzo=r(H$e," (Data2VecText model)"),H$e.forEach(t),Ozo=i(X),wF=n(X,"LI",{});var U$e=s(wF);gpe=n(U$e,"STRONG",{});var N_t=s(gpe);Vzo=r(N_t,"deberta"),N_t.forEach(t),Xzo=r(U$e," \u2014 "),JV=n(U$e,"A",{href:!0});var q_t=s(JV);zzo=r(q_t,"DebertaForQuestionAnswering"),q_t.forEach(t),Wzo=r(U$e," (DeBERTa model)"),U$e.forEach(t),Qzo=i(X),AF=n(X,"LI",{});var J$e=s(AF);hpe=n(J$e,"STRONG",{});var j_t=s(hpe);Hzo=r(j_t,"deberta-v2"),j_t.forEach(t),Uzo=r(J$e," \u2014 "),YV=n(J$e,"A",{href:!0});var D_t=s(YV);Jzo=r(D_t,"DebertaV2ForQuestionAnswering"),D_t.forEach(t),Yzo=r(J$e," (DeBERTa-v2 model)"),J$e.forEach(t),Kzo=i(X),yF=n(X,"LI",{});var Y$e=s(yF);ppe=n(Y$e,"STRONG",{});var G_t=s(ppe);Zzo=r(G_t,"distilbert"),G_t.forEach(t),eWo=r(Y$e," \u2014 "),KV=n(Y$e,"A",{href:!0});var O_t=s(KV);oWo=r(O_t,"DistilBertForQuestionAnswering"),O_t.forEach(t),rWo=r(Y$e," (DistilBERT model)"),Y$e.forEach(t),tWo=i(X),LF=n(X,"LI",{});var K$e=s(LF);_pe=n(K$e,"STRONG",{});var V_t=s(_pe);aWo=r(V_t,"electra"),V_t.forEach(t),nWo=r(K$e," \u2014 "),ZV=n(K$e,"A",{href:!0});var X_t=s(ZV);sWo=r(X_t,"ElectraForQuestionAnswering"),X_t.forEach(t),lWo=r(K$e," (ELECTRA model)"),K$e.forEach(t),iWo=i(X),xF=n(X,"LI",{});var Z$e=s(xF);upe=n(Z$e,"STRONG",{});var z_t=s(upe);dWo=r(z_t,"flaubert"),z_t.forEach(t),cWo=r(Z$e," \u2014 "),eX=n(Z$e,"A",{href:!0});var W_t=s(eX);fWo=r(W_t,"FlaubertForQuestionAnsweringSimple"),W_t.forEach(t),mWo=r(Z$e," (FlauBERT model)"),Z$e.forEach(t),gWo=i(X),$F=n(X,"LI",{});var eke=s($F);bpe=n(eke,"STRONG",{});var Q_t=s(bpe);hWo=r(Q_t,"fnet"),Q_t.forEach(t),pWo=r(eke," \u2014 "),oX=n(eke,"A",{href:!0});var H_t=s(oX);_Wo=r(H_t,"FNetForQuestionAnswering"),H_t.forEach(t),uWo=r(eke," (FNet model)"),eke.forEach(t),bWo=i(X),kF=n(X,"LI",{});var oke=s(kF);vpe=n(oke,"STRONG",{});var U_t=s(vpe);vWo=r(U_t,"funnel"),U_t.forEach(t),FWo=r(oke," \u2014 "),rX=n(oke,"A",{href:!0});var J_t=s(rX);TWo=r(J_t,"FunnelForQuestionAnswering"),J_t.forEach(t),MWo=r(oke," (Funnel Transformer model)"),oke.forEach(t),EWo=i(X),SF=n(X,"LI",{});var rke=s(SF);Fpe=n(rke,"STRONG",{});var Y_t=s(Fpe);CWo=r(Y_t,"gptj"),Y_t.forEach(t),wWo=r(rke," \u2014 "),tX=n(rke,"A",{href:!0});var K_t=s(tX);AWo=r(K_t,"GPTJForQuestionAnswering"),K_t.forEach(t),yWo=r(rke," (GPT-J model)"),rke.forEach(t),LWo=i(X),RF=n(X,"LI",{});var tke=s(RF);Tpe=n(tke,"STRONG",{});var Z_t=s(Tpe);xWo=r(Z_t,"ibert"),Z_t.forEach(t),$Wo=r(tke," \u2014 "),aX=n(tke,"A",{href:!0});var eut=s(aX);kWo=r(eut,"IBertForQuestionAnswering"),eut.forEach(t),SWo=r(tke," (I-BERT model)"),tke.forEach(t),RWo=i(X),PF=n(X,"LI",{});var ake=s(PF);Mpe=n(ake,"STRONG",{});var out=s(Mpe);PWo=r(out,"layoutlmv2"),out.forEach(t),BWo=r(ake," \u2014 "),nX=n(ake,"A",{href:!0});var rut=s(nX);IWo=r(rut,"LayoutLMv2ForQuestionAnswering"),rut.forEach(t),NWo=r(ake," (LayoutLMv2 model)"),ake.forEach(t),qWo=i(X),BF=n(X,"LI",{});var nke=s(BF);Epe=n(nke,"STRONG",{});var tut=s(Epe);jWo=r(tut,"layoutlmv3"),tut.forEach(t),DWo=r(nke," \u2014 "),sX=n(nke,"A",{href:!0});var aut=s(sX);GWo=r(aut,"LayoutLMv3ForQuestionAnswering"),aut.forEach(t),OWo=r(nke," (LayoutLMv3 model)"),nke.forEach(t),VWo=i(X),IF=n(X,"LI",{});var ske=s(IF);Cpe=n(ske,"STRONG",{});var nut=s(Cpe);XWo=r(nut,"led"),nut.forEach(t),zWo=r(ske," \u2014 "),lX=n(ske,"A",{href:!0});var sut=s(lX);WWo=r(sut,"LEDForQuestionAnswering"),sut.forEach(t),QWo=r(ske," (LED model)"),ske.forEach(t),HWo=i(X),NF=n(X,"LI",{});var lke=s(NF);wpe=n(lke,"STRONG",{});var lut=s(wpe);UWo=r(lut,"longformer"),lut.forEach(t),JWo=r(lke," \u2014 "),iX=n(lke,"A",{href:!0});var iut=s(iX);YWo=r(iut,"LongformerForQuestionAnswering"),iut.forEach(t),KWo=r(lke," (Longformer model)"),lke.forEach(t),ZWo=i(X),qF=n(X,"LI",{});var ike=s(qF);Ape=n(ike,"STRONG",{});var dut=s(Ape);eQo=r(dut,"lxmert"),dut.forEach(t),oQo=r(ike," \u2014 "),dX=n(ike,"A",{href:!0});var cut=s(dX);rQo=r(cut,"LxmertForQuestionAnswering"),cut.forEach(t),tQo=r(ike," (LXMERT model)"),ike.forEach(t),aQo=i(X),jF=n(X,"LI",{});var dke=s(jF);ype=n(dke,"STRONG",{});var fut=s(ype);nQo=r(fut,"mbart"),fut.forEach(t),sQo=r(dke," \u2014 "),cX=n(dke,"A",{href:!0});var mut=s(cX);lQo=r(mut,"MBartForQuestionAnswering"),mut.forEach(t),iQo=r(dke," (mBART model)"),dke.forEach(t),dQo=i(X),DF=n(X,"LI",{});var cke=s(DF);Lpe=n(cke,"STRONG",{});var gut=s(Lpe);cQo=r(gut,"megatron-bert"),gut.forEach(t),fQo=r(cke," \u2014 "),fX=n(cke,"A",{href:!0});var hut=s(fX);mQo=r(hut,"MegatronBertForQuestionAnswering"),hut.forEach(t),gQo=r(cke," (MegatronBert model)"),cke.forEach(t),hQo=i(X),GF=n(X,"LI",{});var fke=s(GF);xpe=n(fke,"STRONG",{});var put=s(xpe);pQo=r(put,"mobilebert"),put.forEach(t),_Qo=r(fke," \u2014 "),mX=n(fke,"A",{href:!0});var _ut=s(mX);uQo=r(_ut,"MobileBertForQuestionAnswering"),_ut.forEach(t),bQo=r(fke," (MobileBERT model)"),fke.forEach(t),vQo=i(X),OF=n(X,"LI",{});var mke=s(OF);$pe=n(mke,"STRONG",{});var uut=s($pe);FQo=r(uut,"mpnet"),uut.forEach(t),TQo=r(mke," \u2014 "),gX=n(mke,"A",{href:!0});var but=s(gX);MQo=r(but,"MPNetForQuestionAnswering"),but.forEach(t),EQo=r(mke," (MPNet model)"),mke.forEach(t),CQo=i(X),VF=n(X,"LI",{});var gke=s(VF);kpe=n(gke,"STRONG",{});var vut=s(kpe);wQo=r(vut,"nystromformer"),vut.forEach(t),AQo=r(gke," \u2014 "),hX=n(gke,"A",{href:!0});var Fut=s(hX);yQo=r(Fut,"NystromformerForQuestionAnswering"),Fut.forEach(t),LQo=r(gke," (Nystromformer model)"),gke.forEach(t),xQo=i(X),XF=n(X,"LI",{});var hke=s(XF);Spe=n(hke,"STRONG",{});var Tut=s(Spe);$Qo=r(Tut,"qdqbert"),Tut.forEach(t),kQo=r(hke," \u2014 "),pX=n(hke,"A",{href:!0});var Mut=s(pX);SQo=r(Mut,"QDQBertForQuestionAnswering"),Mut.forEach(t),RQo=r(hke," (QDQBert model)"),hke.forEach(t),PQo=i(X),zF=n(X,"LI",{});var pke=s(zF);Rpe=n(pke,"STRONG",{});var Eut=s(Rpe);BQo=r(Eut,"reformer"),Eut.forEach(t),IQo=r(pke," \u2014 "),_X=n(pke,"A",{href:!0});var Cut=s(_X);NQo=r(Cut,"ReformerForQuestionAnswering"),Cut.forEach(t),qQo=r(pke," (Reformer model)"),pke.forEach(t),jQo=i(X),WF=n(X,"LI",{});var _ke=s(WF);Ppe=n(_ke,"STRONG",{});var wut=s(Ppe);DQo=r(wut,"rembert"),wut.forEach(t),GQo=r(_ke," \u2014 "),uX=n(_ke,"A",{href:!0});var Aut=s(uX);OQo=r(Aut,"RemBertForQuestionAnswering"),Aut.forEach(t),VQo=r(_ke," (RemBERT model)"),_ke.forEach(t),XQo=i(X),QF=n(X,"LI",{});var uke=s(QF);Bpe=n(uke,"STRONG",{});var yut=s(Bpe);zQo=r(yut,"roberta"),yut.forEach(t),WQo=r(uke," \u2014 "),bX=n(uke,"A",{href:!0});var Lut=s(bX);QQo=r(Lut,"RobertaForQuestionAnswering"),Lut.forEach(t),HQo=r(uke," (RoBERTa model)"),uke.forEach(t),UQo=i(X),HF=n(X,"LI",{});var bke=s(HF);Ipe=n(bke,"STRONG",{});var xut=s(Ipe);JQo=r(xut,"roformer"),xut.forEach(t),YQo=r(bke," \u2014 "),vX=n(bke,"A",{href:!0});var $ut=s(vX);KQo=r($ut,"RoFormerForQuestionAnswering"),$ut.forEach(t),ZQo=r(bke," (RoFormer model)"),bke.forEach(t),eHo=i(X),UF=n(X,"LI",{});var vke=s(UF);Npe=n(vke,"STRONG",{});var kut=s(Npe);oHo=r(kut,"splinter"),kut.forEach(t),rHo=r(vke," \u2014 "),FX=n(vke,"A",{href:!0});var Sut=s(FX);tHo=r(Sut,"SplinterForQuestionAnswering"),Sut.forEach(t),aHo=r(vke," (Splinter model)"),vke.forEach(t),nHo=i(X),JF=n(X,"LI",{});var Fke=s(JF);qpe=n(Fke,"STRONG",{});var Rut=s(qpe);sHo=r(Rut,"squeezebert"),Rut.forEach(t),lHo=r(Fke," \u2014 "),TX=n(Fke,"A",{href:!0});var Put=s(TX);iHo=r(Put,"SqueezeBertForQuestionAnswering"),Put.forEach(t),dHo=r(Fke," (SqueezeBERT model)"),Fke.forEach(t),cHo=i(X),YF=n(X,"LI",{});var Tke=s(YF);jpe=n(Tke,"STRONG",{});var But=s(jpe);fHo=r(But,"xlm"),But.forEach(t),mHo=r(Tke," \u2014 "),MX=n(Tke,"A",{href:!0});var Iut=s(MX);gHo=r(Iut,"XLMForQuestionAnsweringSimple"),Iut.forEach(t),hHo=r(Tke," (XLM model)"),Tke.forEach(t),pHo=i(X),KF=n(X,"LI",{});var Mke=s(KF);Dpe=n(Mke,"STRONG",{});var Nut=s(Dpe);_Ho=r(Nut,"xlm-roberta"),Nut.forEach(t),uHo=r(Mke," \u2014 "),EX=n(Mke,"A",{href:!0});var qut=s(EX);bHo=r(qut,"XLMRobertaForQuestionAnswering"),qut.forEach(t),vHo=r(Mke," (XLM-RoBERTa model)"),Mke.forEach(t),FHo=i(X),ZF=n(X,"LI",{});var Eke=s(ZF);Gpe=n(Eke,"STRONG",{});var jut=s(Gpe);THo=r(jut,"xlm-roberta-xl"),jut.forEach(t),MHo=r(Eke," \u2014 "),CX=n(Eke,"A",{href:!0});var Dut=s(CX);EHo=r(Dut,"XLMRobertaXLForQuestionAnswering"),Dut.forEach(t),CHo=r(Eke," (XLM-RoBERTa-XL model)"),Eke.forEach(t),wHo=i(X),e6=n(X,"LI",{});var Cke=s(e6);Ope=n(Cke,"STRONG",{});var Gut=s(Ope);AHo=r(Gut,"xlnet"),Gut.forEach(t),yHo=r(Cke," \u2014 "),wX=n(Cke,"A",{href:!0});var Out=s(wX);LHo=r(Out,"XLNetForQuestionAnsweringSimple"),Out.forEach(t),xHo=r(Cke," (XLNet model)"),Cke.forEach(t),$Ho=i(X),o6=n(X,"LI",{});var wke=s(o6);Vpe=n(wke,"STRONG",{});var Vut=s(Vpe);kHo=r(Vut,"yoso"),Vut.forEach(t),SHo=r(wke," \u2014 "),AX=n(wke,"A",{href:!0});var Xut=s(AX);RHo=r(Xut,"YosoForQuestionAnswering"),Xut.forEach(t),PHo=r(wke," (YOSO model)"),wke.forEach(t),X.forEach(t),BHo=i(ca),r6=n(ca,"P",{});var Ake=s(r6);IHo=r(Ake,"The model is set in evaluation mode by default using "),Xpe=n(Ake,"CODE",{});var zut=s(Xpe);NHo=r(zut,"model.eval()"),zut.forEach(t),qHo=r(Ake,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zpe=n(Ake,"CODE",{});var Wut=s(zpe);jHo=r(Wut,"model.train()"),Wut.forEach(t),Ake.forEach(t),DHo=i(ca),T(t6.$$.fragment,ca),ca.forEach(t),Ks.forEach(t),sje=i(f),rd=n(f,"H2",{class:!0});var cGe=s(rd);a6=n(cGe,"A",{id:!0,class:!0,href:!0});var Qut=s(a6);Wpe=n(Qut,"SPAN",{});var Hut=s(Wpe);T(ry.$$.fragment,Hut),Hut.forEach(t),Qut.forEach(t),GHo=i(cGe),Qpe=n(cGe,"SPAN",{});var Uut=s(Qpe);OHo=r(Uut,"AutoModelForTableQuestionAnswering"),Uut.forEach(t),cGe.forEach(t),lje=i(f),qo=n(f,"DIV",{class:!0});var Zs=s(qo);T(ty.$$.fragment,Zs),VHo=i(Zs),td=n(Zs,"P",{});var YZ=s(td);XHo=r(YZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),yX=n(YZ,"A",{href:!0});var Jut=s(yX);zHo=r(Jut,"from_pretrained()"),Jut.forEach(t),WHo=r(YZ," class method or the "),LX=n(YZ,"A",{href:!0});var Yut=s(LX);QHo=r(Yut,"from_config()"),Yut.forEach(t),HHo=r(YZ,` class
method.`),YZ.forEach(t),UHo=i(Zs),ay=n(Zs,"P",{});var fGe=s(ay);JHo=r(fGe,"This class cannot be instantiated directly using "),Hpe=n(fGe,"CODE",{});var Kut=s(Hpe);YHo=r(Kut,"__init__()"),Kut.forEach(t),KHo=r(fGe," (throws an error)."),fGe.forEach(t),ZHo=i(Zs),gt=n(Zs,"DIV",{class:!0});var aw=s(gt);T(ny.$$.fragment,aw),eUo=i(aw),Upe=n(aw,"P",{});var Zut=s(Upe);oUo=r(Zut,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Zut.forEach(t),rUo=i(aw),ad=n(aw,"P",{});var KZ=s(ad);tUo=r(KZ,`Note:
Loading a model from its configuration file does `),Jpe=n(KZ,"STRONG",{});var e2t=s(Jpe);aUo=r(e2t,"not"),e2t.forEach(t),nUo=r(KZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),xX=n(KZ,"A",{href:!0});var o2t=s(xX);sUo=r(o2t,"from_pretrained()"),o2t.forEach(t),lUo=r(KZ," to load the model weights."),KZ.forEach(t),iUo=i(aw),T(n6.$$.fragment,aw),aw.forEach(t),dUo=i(Zs),so=n(Zs,"DIV",{class:!0});var fa=s(so);T(sy.$$.fragment,fa),cUo=i(fa),Ype=n(fa,"P",{});var r2t=s(Ype);fUo=r(r2t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),r2t.forEach(t),mUo=i(fa),qa=n(fa,"P",{});var nw=s(qa);gUo=r(nw,"The model class to instantiate is selected based on the "),Kpe=n(nw,"CODE",{});var t2t=s(Kpe);hUo=r(t2t,"model_type"),t2t.forEach(t),pUo=r(nw,` property of the config object (either
passed as an argument or loaded from `),Zpe=n(nw,"CODE",{});var a2t=s(Zpe);_Uo=r(a2t,"pretrained_model_name_or_path"),a2t.forEach(t),uUo=r(nw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e_e=n(nw,"CODE",{});var n2t=s(e_e);bUo=r(n2t,"pretrained_model_name_or_path"),n2t.forEach(t),vUo=r(nw,":"),nw.forEach(t),FUo=i(fa),o_e=n(fa,"UL",{});var s2t=s(o_e);s6=n(s2t,"LI",{});var yke=s(s6);r_e=n(yke,"STRONG",{});var l2t=s(r_e);TUo=r(l2t,"tapas"),l2t.forEach(t),MUo=r(yke," \u2014 "),$X=n(yke,"A",{href:!0});var i2t=s($X);EUo=r(i2t,"TapasForQuestionAnswering"),i2t.forEach(t),CUo=r(yke," (TAPAS model)"),yke.forEach(t),s2t.forEach(t),wUo=i(fa),l6=n(fa,"P",{});var Lke=s(l6);AUo=r(Lke,"The model is set in evaluation mode by default using "),t_e=n(Lke,"CODE",{});var d2t=s(t_e);yUo=r(d2t,"model.eval()"),d2t.forEach(t),LUo=r(Lke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),a_e=n(Lke,"CODE",{});var c2t=s(a_e);xUo=r(c2t,"model.train()"),c2t.forEach(t),Lke.forEach(t),$Uo=i(fa),T(i6.$$.fragment,fa),fa.forEach(t),Zs.forEach(t),ije=i(f),nd=n(f,"H2",{class:!0});var mGe=s(nd);d6=n(mGe,"A",{id:!0,class:!0,href:!0});var f2t=s(d6);n_e=n(f2t,"SPAN",{});var m2t=s(n_e);T(ly.$$.fragment,m2t),m2t.forEach(t),f2t.forEach(t),kUo=i(mGe),s_e=n(mGe,"SPAN",{});var g2t=s(s_e);SUo=r(g2t,"AutoModelForImageClassification"),g2t.forEach(t),mGe.forEach(t),dje=i(f),jo=n(f,"DIV",{class:!0});var el=s(jo);T(iy.$$.fragment,el),RUo=i(el),sd=n(el,"P",{});var ZZ=s(sd);PUo=r(ZZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),kX=n(ZZ,"A",{href:!0});var h2t=s(kX);BUo=r(h2t,"from_pretrained()"),h2t.forEach(t),IUo=r(ZZ," class method or the "),SX=n(ZZ,"A",{href:!0});var p2t=s(SX);NUo=r(p2t,"from_config()"),p2t.forEach(t),qUo=r(ZZ,` class
method.`),ZZ.forEach(t),jUo=i(el),dy=n(el,"P",{});var gGe=s(dy);DUo=r(gGe,"This class cannot be instantiated directly using "),l_e=n(gGe,"CODE",{});var _2t=s(l_e);GUo=r(_2t,"__init__()"),_2t.forEach(t),OUo=r(gGe," (throws an error)."),gGe.forEach(t),VUo=i(el),ht=n(el,"DIV",{class:!0});var sw=s(ht);T(cy.$$.fragment,sw),XUo=i(sw),i_e=n(sw,"P",{});var u2t=s(i_e);zUo=r(u2t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),u2t.forEach(t),WUo=i(sw),ld=n(sw,"P",{});var eee=s(ld);QUo=r(eee,`Note:
Loading a model from its configuration file does `),d_e=n(eee,"STRONG",{});var b2t=s(d_e);HUo=r(b2t,"not"),b2t.forEach(t),UUo=r(eee,` load the model weights. It only affects the
model\u2019s configuration. Use `),RX=n(eee,"A",{href:!0});var v2t=s(RX);JUo=r(v2t,"from_pretrained()"),v2t.forEach(t),YUo=r(eee," to load the model weights."),eee.forEach(t),KUo=i(sw),T(c6.$$.fragment,sw),sw.forEach(t),ZUo=i(el),lo=n(el,"DIV",{class:!0});var ma=s(lo);T(fy.$$.fragment,ma),eJo=i(ma),c_e=n(ma,"P",{});var F2t=s(c_e);oJo=r(F2t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),F2t.forEach(t),rJo=i(ma),ja=n(ma,"P",{});var lw=s(ja);tJo=r(lw,"The model class to instantiate is selected based on the "),f_e=n(lw,"CODE",{});var T2t=s(f_e);aJo=r(T2t,"model_type"),T2t.forEach(t),nJo=r(lw,` property of the config object (either
passed as an argument or loaded from `),m_e=n(lw,"CODE",{});var M2t=s(m_e);sJo=r(M2t,"pretrained_model_name_or_path"),M2t.forEach(t),lJo=r(lw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g_e=n(lw,"CODE",{});var E2t=s(g_e);iJo=r(E2t,"pretrained_model_name_or_path"),E2t.forEach(t),dJo=r(lw,":"),lw.forEach(t),cJo=i(ma),Fe=n(ma,"UL",{});var Me=s(Fe);f6=n(Me,"LI",{});var xke=s(f6);h_e=n(xke,"STRONG",{});var C2t=s(h_e);fJo=r(C2t,"beit"),C2t.forEach(t),mJo=r(xke," \u2014 "),PX=n(xke,"A",{href:!0});var w2t=s(PX);gJo=r(w2t,"BeitForImageClassification"),w2t.forEach(t),hJo=r(xke," (BEiT model)"),xke.forEach(t),pJo=i(Me),m6=n(Me,"LI",{});var $ke=s(m6);p_e=n($ke,"STRONG",{});var A2t=s(p_e);_Jo=r(A2t,"convnext"),A2t.forEach(t),uJo=r($ke," \u2014 "),BX=n($ke,"A",{href:!0});var y2t=s(BX);bJo=r(y2t,"ConvNextForImageClassification"),y2t.forEach(t),vJo=r($ke," (ConvNext model)"),$ke.forEach(t),FJo=i(Me),g6=n(Me,"LI",{});var kke=s(g6);__e=n(kke,"STRONG",{});var L2t=s(__e);TJo=r(L2t,"cvt"),L2t.forEach(t),MJo=r(kke," \u2014 "),IX=n(kke,"A",{href:!0});var x2t=s(IX);EJo=r(x2t,"CvtForImageClassification"),x2t.forEach(t),CJo=r(kke," (CvT model)"),kke.forEach(t),wJo=i(Me),h6=n(Me,"LI",{});var Ske=s(h6);u_e=n(Ske,"STRONG",{});var $2t=s(u_e);AJo=r($2t,"data2vec-vision"),$2t.forEach(t),yJo=r(Ske," \u2014 "),NX=n(Ske,"A",{href:!0});var k2t=s(NX);LJo=r(k2t,"Data2VecVisionForImageClassification"),k2t.forEach(t),xJo=r(Ske," (Data2VecVision model)"),Ske.forEach(t),$Jo=i(Me),Is=n(Me,"LI",{});var Y$=s(Is);b_e=n(Y$,"STRONG",{});var S2t=s(b_e);kJo=r(S2t,"deit"),S2t.forEach(t),SJo=r(Y$," \u2014 "),qX=n(Y$,"A",{href:!0});var R2t=s(qX);RJo=r(R2t,"DeiTForImageClassification"),R2t.forEach(t),PJo=r(Y$," or "),jX=n(Y$,"A",{href:!0});var P2t=s(jX);BJo=r(P2t,"DeiTForImageClassificationWithTeacher"),P2t.forEach(t),IJo=r(Y$," (DeiT model)"),Y$.forEach(t),NJo=i(Me),p6=n(Me,"LI",{});var Rke=s(p6);v_e=n(Rke,"STRONG",{});var B2t=s(v_e);qJo=r(B2t,"imagegpt"),B2t.forEach(t),jJo=r(Rke," \u2014 "),DX=n(Rke,"A",{href:!0});var I2t=s(DX);DJo=r(I2t,"ImageGPTForImageClassification"),I2t.forEach(t),GJo=r(Rke," (ImageGPT model)"),Rke.forEach(t),OJo=i(Me),pt=n(Me,"LI",{});var pf=s(pt);F_e=n(pf,"STRONG",{});var N2t=s(F_e);VJo=r(N2t,"perceiver"),N2t.forEach(t),XJo=r(pf," \u2014 "),GX=n(pf,"A",{href:!0});var q2t=s(GX);zJo=r(q2t,"PerceiverForImageClassificationLearned"),q2t.forEach(t),WJo=r(pf," or "),OX=n(pf,"A",{href:!0});var j2t=s(OX);QJo=r(j2t,"PerceiverForImageClassificationFourier"),j2t.forEach(t),HJo=r(pf," or "),VX=n(pf,"A",{href:!0});var D2t=s(VX);UJo=r(D2t,"PerceiverForImageClassificationConvProcessing"),D2t.forEach(t),JJo=r(pf," (Perceiver model)"),pf.forEach(t),YJo=i(Me),_6=n(Me,"LI",{});var Pke=s(_6);T_e=n(Pke,"STRONG",{});var G2t=s(T_e);KJo=r(G2t,"poolformer"),G2t.forEach(t),ZJo=r(Pke," \u2014 "),XX=n(Pke,"A",{href:!0});var O2t=s(XX);eYo=r(O2t,"PoolFormerForImageClassification"),O2t.forEach(t),oYo=r(Pke," (PoolFormer model)"),Pke.forEach(t),rYo=i(Me),u6=n(Me,"LI",{});var Bke=s(u6);M_e=n(Bke,"STRONG",{});var V2t=s(M_e);tYo=r(V2t,"regnet"),V2t.forEach(t),aYo=r(Bke," \u2014 "),zX=n(Bke,"A",{href:!0});var X2t=s(zX);nYo=r(X2t,"RegNetForImageClassification"),X2t.forEach(t),sYo=r(Bke," (RegNet model)"),Bke.forEach(t),lYo=i(Me),b6=n(Me,"LI",{});var Ike=s(b6);E_e=n(Ike,"STRONG",{});var z2t=s(E_e);iYo=r(z2t,"resnet"),z2t.forEach(t),dYo=r(Ike," \u2014 "),WX=n(Ike,"A",{href:!0});var W2t=s(WX);cYo=r(W2t,"ResNetForImageClassification"),W2t.forEach(t),fYo=r(Ike," (ResNet model)"),Ike.forEach(t),mYo=i(Me),v6=n(Me,"LI",{});var Nke=s(v6);C_e=n(Nke,"STRONG",{});var Q2t=s(C_e);gYo=r(Q2t,"segformer"),Q2t.forEach(t),hYo=r(Nke," \u2014 "),QX=n(Nke,"A",{href:!0});var H2t=s(QX);pYo=r(H2t,"SegformerForImageClassification"),H2t.forEach(t),_Yo=r(Nke," (SegFormer model)"),Nke.forEach(t),uYo=i(Me),F6=n(Me,"LI",{});var qke=s(F6);w_e=n(qke,"STRONG",{});var U2t=s(w_e);bYo=r(U2t,"swin"),U2t.forEach(t),vYo=r(qke," \u2014 "),HX=n(qke,"A",{href:!0});var J2t=s(HX);FYo=r(J2t,"SwinForImageClassification"),J2t.forEach(t),TYo=r(qke," (Swin model)"),qke.forEach(t),MYo=i(Me),T6=n(Me,"LI",{});var jke=s(T6);A_e=n(jke,"STRONG",{});var Y2t=s(A_e);EYo=r(Y2t,"van"),Y2t.forEach(t),CYo=r(jke," \u2014 "),UX=n(jke,"A",{href:!0});var K2t=s(UX);wYo=r(K2t,"VanForImageClassification"),K2t.forEach(t),AYo=r(jke," (VAN model)"),jke.forEach(t),yYo=i(Me),M6=n(Me,"LI",{});var Dke=s(M6);y_e=n(Dke,"STRONG",{});var Z2t=s(y_e);LYo=r(Z2t,"vit"),Z2t.forEach(t),xYo=r(Dke," \u2014 "),JX=n(Dke,"A",{href:!0});var e1t=s(JX);$Yo=r(e1t,"ViTForImageClassification"),e1t.forEach(t),kYo=r(Dke," (ViT model)"),Dke.forEach(t),Me.forEach(t),SYo=i(ma),E6=n(ma,"P",{});var Gke=s(E6);RYo=r(Gke,"The model is set in evaluation mode by default using "),L_e=n(Gke,"CODE",{});var o1t=s(L_e);PYo=r(o1t,"model.eval()"),o1t.forEach(t),BYo=r(Gke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),x_e=n(Gke,"CODE",{});var r1t=s(x_e);IYo=r(r1t,"model.train()"),r1t.forEach(t),Gke.forEach(t),NYo=i(ma),T(C6.$$.fragment,ma),ma.forEach(t),el.forEach(t),cje=i(f),id=n(f,"H2",{class:!0});var hGe=s(id);w6=n(hGe,"A",{id:!0,class:!0,href:!0});var t1t=s(w6);$_e=n(t1t,"SPAN",{});var a1t=s($_e);T(my.$$.fragment,a1t),a1t.forEach(t),t1t.forEach(t),qYo=i(hGe),k_e=n(hGe,"SPAN",{});var n1t=s(k_e);jYo=r(n1t,"AutoModelForVision2Seq"),n1t.forEach(t),hGe.forEach(t),fje=i(f),Do=n(f,"DIV",{class:!0});var ol=s(Do);T(gy.$$.fragment,ol),DYo=i(ol),dd=n(ol,"P",{});var oee=s(dd);GYo=r(oee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),YX=n(oee,"A",{href:!0});var s1t=s(YX);OYo=r(s1t,"from_pretrained()"),s1t.forEach(t),VYo=r(oee," class method or the "),KX=n(oee,"A",{href:!0});var l1t=s(KX);XYo=r(l1t,"from_config()"),l1t.forEach(t),zYo=r(oee,` class
method.`),oee.forEach(t),WYo=i(ol),hy=n(ol,"P",{});var pGe=s(hy);QYo=r(pGe,"This class cannot be instantiated directly using "),S_e=n(pGe,"CODE",{});var i1t=s(S_e);HYo=r(i1t,"__init__()"),i1t.forEach(t),UYo=r(pGe," (throws an error)."),pGe.forEach(t),JYo=i(ol),_t=n(ol,"DIV",{class:!0});var iw=s(_t);T(py.$$.fragment,iw),YYo=i(iw),R_e=n(iw,"P",{});var d1t=s(R_e);KYo=r(d1t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),d1t.forEach(t),ZYo=i(iw),cd=n(iw,"P",{});var ree=s(cd);eKo=r(ree,`Note:
Loading a model from its configuration file does `),P_e=n(ree,"STRONG",{});var c1t=s(P_e);oKo=r(c1t,"not"),c1t.forEach(t),rKo=r(ree,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZX=n(ree,"A",{href:!0});var f1t=s(ZX);tKo=r(f1t,"from_pretrained()"),f1t.forEach(t),aKo=r(ree," to load the model weights."),ree.forEach(t),nKo=i(iw),T(A6.$$.fragment,iw),iw.forEach(t),sKo=i(ol),io=n(ol,"DIV",{class:!0});var ga=s(io);T(_y.$$.fragment,ga),lKo=i(ga),B_e=n(ga,"P",{});var m1t=s(B_e);iKo=r(m1t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),m1t.forEach(t),dKo=i(ga),Da=n(ga,"P",{});var dw=s(Da);cKo=r(dw,"The model class to instantiate is selected based on the "),I_e=n(dw,"CODE",{});var g1t=s(I_e);fKo=r(g1t,"model_type"),g1t.forEach(t),mKo=r(dw,` property of the config object (either
passed as an argument or loaded from `),N_e=n(dw,"CODE",{});var h1t=s(N_e);gKo=r(h1t,"pretrained_model_name_or_path"),h1t.forEach(t),hKo=r(dw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q_e=n(dw,"CODE",{});var p1t=s(q_e);pKo=r(p1t,"pretrained_model_name_or_path"),p1t.forEach(t),_Ko=r(dw,":"),dw.forEach(t),uKo=i(ga),j_e=n(ga,"UL",{});var _1t=s(j_e);y6=n(_1t,"LI",{});var Oke=s(y6);D_e=n(Oke,"STRONG",{});var u1t=s(D_e);bKo=r(u1t,"vision-encoder-decoder"),u1t.forEach(t),vKo=r(Oke," \u2014 "),ez=n(Oke,"A",{href:!0});var b1t=s(ez);FKo=r(b1t,"VisionEncoderDecoderModel"),b1t.forEach(t),TKo=r(Oke," (Vision Encoder decoder model)"),Oke.forEach(t),_1t.forEach(t),MKo=i(ga),L6=n(ga,"P",{});var Vke=s(L6);EKo=r(Vke,"The model is set in evaluation mode by default using "),G_e=n(Vke,"CODE",{});var v1t=s(G_e);CKo=r(v1t,"model.eval()"),v1t.forEach(t),wKo=r(Vke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),O_e=n(Vke,"CODE",{});var F1t=s(O_e);AKo=r(F1t,"model.train()"),F1t.forEach(t),Vke.forEach(t),yKo=i(ga),T(x6.$$.fragment,ga),ga.forEach(t),ol.forEach(t),mje=i(f),fd=n(f,"H2",{class:!0});var _Ge=s(fd);$6=n(_Ge,"A",{id:!0,class:!0,href:!0});var T1t=s($6);V_e=n(T1t,"SPAN",{});var M1t=s(V_e);T(uy.$$.fragment,M1t),M1t.forEach(t),T1t.forEach(t),LKo=i(_Ge),X_e=n(_Ge,"SPAN",{});var E1t=s(X_e);xKo=r(E1t,"AutoModelForAudioClassification"),E1t.forEach(t),_Ge.forEach(t),gje=i(f),Go=n(f,"DIV",{class:!0});var rl=s(Go);T(by.$$.fragment,rl),$Ko=i(rl),md=n(rl,"P",{});var tee=s(md);kKo=r(tee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),oz=n(tee,"A",{href:!0});var C1t=s(oz);SKo=r(C1t,"from_pretrained()"),C1t.forEach(t),RKo=r(tee," class method or the "),rz=n(tee,"A",{href:!0});var w1t=s(rz);PKo=r(w1t,"from_config()"),w1t.forEach(t),BKo=r(tee,` class
method.`),tee.forEach(t),IKo=i(rl),vy=n(rl,"P",{});var uGe=s(vy);NKo=r(uGe,"This class cannot be instantiated directly using "),z_e=n(uGe,"CODE",{});var A1t=s(z_e);qKo=r(A1t,"__init__()"),A1t.forEach(t),jKo=r(uGe," (throws an error)."),uGe.forEach(t),DKo=i(rl),ut=n(rl,"DIV",{class:!0});var cw=s(ut);T(Fy.$$.fragment,cw),GKo=i(cw),W_e=n(cw,"P",{});var y1t=s(W_e);OKo=r(y1t,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),y1t.forEach(t),VKo=i(cw),gd=n(cw,"P",{});var aee=s(gd);XKo=r(aee,`Note:
Loading a model from its configuration file does `),Q_e=n(aee,"STRONG",{});var L1t=s(Q_e);zKo=r(L1t,"not"),L1t.forEach(t),WKo=r(aee,` load the model weights. It only affects the
model\u2019s configuration. Use `),tz=n(aee,"A",{href:!0});var x1t=s(tz);QKo=r(x1t,"from_pretrained()"),x1t.forEach(t),HKo=r(aee," to load the model weights."),aee.forEach(t),UKo=i(cw),T(k6.$$.fragment,cw),cw.forEach(t),JKo=i(rl),co=n(rl,"DIV",{class:!0});var ha=s(co);T(Ty.$$.fragment,ha),YKo=i(ha),H_e=n(ha,"P",{});var $1t=s(H_e);KKo=r($1t,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),$1t.forEach(t),ZKo=i(ha),Ga=n(ha,"P",{});var fw=s(Ga);eZo=r(fw,"The model class to instantiate is selected based on the "),U_e=n(fw,"CODE",{});var k1t=s(U_e);oZo=r(k1t,"model_type"),k1t.forEach(t),rZo=r(fw,` property of the config object (either
passed as an argument or loaded from `),J_e=n(fw,"CODE",{});var S1t=s(J_e);tZo=r(S1t,"pretrained_model_name_or_path"),S1t.forEach(t),aZo=r(fw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y_e=n(fw,"CODE",{});var R1t=s(Y_e);nZo=r(R1t,"pretrained_model_name_or_path"),R1t.forEach(t),sZo=r(fw,":"),fw.forEach(t),lZo=i(ha),Se=n(ha,"UL",{});var Ve=s(Se);S6=n(Ve,"LI",{});var Xke=s(S6);K_e=n(Xke,"STRONG",{});var P1t=s(K_e);iZo=r(P1t,"data2vec-audio"),P1t.forEach(t),dZo=r(Xke," \u2014 "),az=n(Xke,"A",{href:!0});var B1t=s(az);cZo=r(B1t,"Data2VecAudioForSequenceClassification"),B1t.forEach(t),fZo=r(Xke," (Data2VecAudio model)"),Xke.forEach(t),mZo=i(Ve),R6=n(Ve,"LI",{});var zke=s(R6);Z_e=n(zke,"STRONG",{});var I1t=s(Z_e);gZo=r(I1t,"hubert"),I1t.forEach(t),hZo=r(zke," \u2014 "),nz=n(zke,"A",{href:!0});var N1t=s(nz);pZo=r(N1t,"HubertForSequenceClassification"),N1t.forEach(t),_Zo=r(zke," (Hubert model)"),zke.forEach(t),uZo=i(Ve),P6=n(Ve,"LI",{});var Wke=s(P6);eue=n(Wke,"STRONG",{});var q1t=s(eue);bZo=r(q1t,"sew"),q1t.forEach(t),vZo=r(Wke," \u2014 "),sz=n(Wke,"A",{href:!0});var j1t=s(sz);FZo=r(j1t,"SEWForSequenceClassification"),j1t.forEach(t),TZo=r(Wke," (SEW model)"),Wke.forEach(t),MZo=i(Ve),B6=n(Ve,"LI",{});var Qke=s(B6);oue=n(Qke,"STRONG",{});var D1t=s(oue);EZo=r(D1t,"sew-d"),D1t.forEach(t),CZo=r(Qke," \u2014 "),lz=n(Qke,"A",{href:!0});var G1t=s(lz);wZo=r(G1t,"SEWDForSequenceClassification"),G1t.forEach(t),AZo=r(Qke," (SEW-D model)"),Qke.forEach(t),yZo=i(Ve),I6=n(Ve,"LI",{});var Hke=s(I6);rue=n(Hke,"STRONG",{});var O1t=s(rue);LZo=r(O1t,"unispeech"),O1t.forEach(t),xZo=r(Hke," \u2014 "),iz=n(Hke,"A",{href:!0});var V1t=s(iz);$Zo=r(V1t,"UniSpeechForSequenceClassification"),V1t.forEach(t),kZo=r(Hke," (UniSpeech model)"),Hke.forEach(t),SZo=i(Ve),N6=n(Ve,"LI",{});var Uke=s(N6);tue=n(Uke,"STRONG",{});var X1t=s(tue);RZo=r(X1t,"unispeech-sat"),X1t.forEach(t),PZo=r(Uke," \u2014 "),dz=n(Uke,"A",{href:!0});var z1t=s(dz);BZo=r(z1t,"UniSpeechSatForSequenceClassification"),z1t.forEach(t),IZo=r(Uke," (UniSpeechSat model)"),Uke.forEach(t),NZo=i(Ve),q6=n(Ve,"LI",{});var Jke=s(q6);aue=n(Jke,"STRONG",{});var W1t=s(aue);qZo=r(W1t,"wav2vec2"),W1t.forEach(t),jZo=r(Jke," \u2014 "),cz=n(Jke,"A",{href:!0});var Q1t=s(cz);DZo=r(Q1t,"Wav2Vec2ForSequenceClassification"),Q1t.forEach(t),GZo=r(Jke," (Wav2Vec2 model)"),Jke.forEach(t),OZo=i(Ve),j6=n(Ve,"LI",{});var Yke=s(j6);nue=n(Yke,"STRONG",{});var H1t=s(nue);VZo=r(H1t,"wav2vec2-conformer"),H1t.forEach(t),XZo=r(Yke," \u2014 "),fz=n(Yke,"A",{href:!0});var U1t=s(fz);zZo=r(U1t,"Wav2Vec2ConformerForSequenceClassification"),U1t.forEach(t),WZo=r(Yke," (Wav2Vec2-Conformer model)"),Yke.forEach(t),QZo=i(Ve),D6=n(Ve,"LI",{});var Kke=s(D6);sue=n(Kke,"STRONG",{});var J1t=s(sue);HZo=r(J1t,"wavlm"),J1t.forEach(t),UZo=r(Kke," \u2014 "),mz=n(Kke,"A",{href:!0});var Y1t=s(mz);JZo=r(Y1t,"WavLMForSequenceClassification"),Y1t.forEach(t),YZo=r(Kke," (WavLM model)"),Kke.forEach(t),Ve.forEach(t),KZo=i(ha),G6=n(ha,"P",{});var Zke=s(G6);ZZo=r(Zke,"The model is set in evaluation mode by default using "),lue=n(Zke,"CODE",{});var K1t=s(lue);eer=r(K1t,"model.eval()"),K1t.forEach(t),oer=r(Zke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),iue=n(Zke,"CODE",{});var Z1t=s(iue);rer=r(Z1t,"model.train()"),Z1t.forEach(t),Zke.forEach(t),ter=i(ha),T(O6.$$.fragment,ha),ha.forEach(t),rl.forEach(t),hje=i(f),hd=n(f,"H2",{class:!0});var bGe=s(hd);V6=n(bGe,"A",{id:!0,class:!0,href:!0});var ebt=s(V6);due=n(ebt,"SPAN",{});var obt=s(due);T(My.$$.fragment,obt),obt.forEach(t),ebt.forEach(t),aer=i(bGe),cue=n(bGe,"SPAN",{});var rbt=s(cue);ner=r(rbt,"AutoModelForAudioFrameClassification"),rbt.forEach(t),bGe.forEach(t),pje=i(f),Oo=n(f,"DIV",{class:!0});var tl=s(Oo);T(Ey.$$.fragment,tl),ser=i(tl),pd=n(tl,"P",{});var nee=s(pd);ler=r(nee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),gz=n(nee,"A",{href:!0});var tbt=s(gz);ier=r(tbt,"from_pretrained()"),tbt.forEach(t),der=r(nee," class method or the "),hz=n(nee,"A",{href:!0});var abt=s(hz);cer=r(abt,"from_config()"),abt.forEach(t),fer=r(nee,` class
method.`),nee.forEach(t),mer=i(tl),Cy=n(tl,"P",{});var vGe=s(Cy);ger=r(vGe,"This class cannot be instantiated directly using "),fue=n(vGe,"CODE",{});var nbt=s(fue);her=r(nbt,"__init__()"),nbt.forEach(t),per=r(vGe," (throws an error)."),vGe.forEach(t),_er=i(tl),bt=n(tl,"DIV",{class:!0});var mw=s(bt);T(wy.$$.fragment,mw),uer=i(mw),mue=n(mw,"P",{});var sbt=s(mue);ber=r(sbt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),sbt.forEach(t),ver=i(mw),_d=n(mw,"P",{});var see=s(_d);Fer=r(see,`Note:
Loading a model from its configuration file does `),gue=n(see,"STRONG",{});var lbt=s(gue);Ter=r(lbt,"not"),lbt.forEach(t),Mer=r(see,` load the model weights. It only affects the
model\u2019s configuration. Use `),pz=n(see,"A",{href:!0});var ibt=s(pz);Eer=r(ibt,"from_pretrained()"),ibt.forEach(t),Cer=r(see," to load the model weights."),see.forEach(t),wer=i(mw),T(X6.$$.fragment,mw),mw.forEach(t),Aer=i(tl),fo=n(tl,"DIV",{class:!0});var pa=s(fo);T(Ay.$$.fragment,pa),yer=i(pa),hue=n(pa,"P",{});var dbt=s(hue);Ler=r(dbt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),dbt.forEach(t),xer=i(pa),Oa=n(pa,"P",{});var gw=s(Oa);$er=r(gw,"The model class to instantiate is selected based on the "),pue=n(gw,"CODE",{});var cbt=s(pue);ker=r(cbt,"model_type"),cbt.forEach(t),Ser=r(gw,` property of the config object (either
passed as an argument or loaded from `),_ue=n(gw,"CODE",{});var fbt=s(_ue);Rer=r(fbt,"pretrained_model_name_or_path"),fbt.forEach(t),Per=r(gw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uue=n(gw,"CODE",{});var mbt=s(uue);Ber=r(mbt,"pretrained_model_name_or_path"),mbt.forEach(t),Ier=r(gw,":"),gw.forEach(t),Ner=i(pa),Kr=n(pa,"UL",{});var al=s(Kr);z6=n(al,"LI",{});var eSe=s(z6);bue=n(eSe,"STRONG",{});var gbt=s(bue);qer=r(gbt,"data2vec-audio"),gbt.forEach(t),jer=r(eSe," \u2014 "),_z=n(eSe,"A",{href:!0});var hbt=s(_z);Der=r(hbt,"Data2VecAudioForAudioFrameClassification"),hbt.forEach(t),Ger=r(eSe," (Data2VecAudio model)"),eSe.forEach(t),Oer=i(al),W6=n(al,"LI",{});var oSe=s(W6);vue=n(oSe,"STRONG",{});var pbt=s(vue);Ver=r(pbt,"unispeech-sat"),pbt.forEach(t),Xer=r(oSe," \u2014 "),uz=n(oSe,"A",{href:!0});var _bt=s(uz);zer=r(_bt,"UniSpeechSatForAudioFrameClassification"),_bt.forEach(t),Wer=r(oSe," (UniSpeechSat model)"),oSe.forEach(t),Qer=i(al),Q6=n(al,"LI",{});var rSe=s(Q6);Fue=n(rSe,"STRONG",{});var ubt=s(Fue);Her=r(ubt,"wav2vec2"),ubt.forEach(t),Uer=r(rSe," \u2014 "),bz=n(rSe,"A",{href:!0});var bbt=s(bz);Jer=r(bbt,"Wav2Vec2ForAudioFrameClassification"),bbt.forEach(t),Yer=r(rSe," (Wav2Vec2 model)"),rSe.forEach(t),Ker=i(al),H6=n(al,"LI",{});var tSe=s(H6);Tue=n(tSe,"STRONG",{});var vbt=s(Tue);Zer=r(vbt,"wav2vec2-conformer"),vbt.forEach(t),eor=r(tSe," \u2014 "),vz=n(tSe,"A",{href:!0});var Fbt=s(vz);oor=r(Fbt,"Wav2Vec2ConformerForAudioFrameClassification"),Fbt.forEach(t),ror=r(tSe," (Wav2Vec2-Conformer model)"),tSe.forEach(t),tor=i(al),U6=n(al,"LI",{});var aSe=s(U6);Mue=n(aSe,"STRONG",{});var Tbt=s(Mue);aor=r(Tbt,"wavlm"),Tbt.forEach(t),nor=r(aSe," \u2014 "),Fz=n(aSe,"A",{href:!0});var Mbt=s(Fz);sor=r(Mbt,"WavLMForAudioFrameClassification"),Mbt.forEach(t),lor=r(aSe," (WavLM model)"),aSe.forEach(t),al.forEach(t),ior=i(pa),J6=n(pa,"P",{});var nSe=s(J6);dor=r(nSe,"The model is set in evaluation mode by default using "),Eue=n(nSe,"CODE",{});var Ebt=s(Eue);cor=r(Ebt,"model.eval()"),Ebt.forEach(t),mor=r(nSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cue=n(nSe,"CODE",{});var Cbt=s(Cue);gor=r(Cbt,"model.train()"),Cbt.forEach(t),nSe.forEach(t),hor=i(pa),T(Y6.$$.fragment,pa),pa.forEach(t),tl.forEach(t),_je=i(f),ud=n(f,"H2",{class:!0});var FGe=s(ud);K6=n(FGe,"A",{id:!0,class:!0,href:!0});var wbt=s(K6);wue=n(wbt,"SPAN",{});var Abt=s(wue);T(yy.$$.fragment,Abt),Abt.forEach(t),wbt.forEach(t),por=i(FGe),Aue=n(FGe,"SPAN",{});var ybt=s(Aue);_or=r(ybt,"AutoModelForCTC"),ybt.forEach(t),FGe.forEach(t),uje=i(f),Vo=n(f,"DIV",{class:!0});var nl=s(Vo);T(Ly.$$.fragment,nl),uor=i(nl),bd=n(nl,"P",{});var lee=s(bd);bor=r(lee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),Tz=n(lee,"A",{href:!0});var Lbt=s(Tz);vor=r(Lbt,"from_pretrained()"),Lbt.forEach(t),For=r(lee," class method or the "),Mz=n(lee,"A",{href:!0});var xbt=s(Mz);Tor=r(xbt,"from_config()"),xbt.forEach(t),Mor=r(lee,` class
method.`),lee.forEach(t),Eor=i(nl),xy=n(nl,"P",{});var TGe=s(xy);Cor=r(TGe,"This class cannot be instantiated directly using "),yue=n(TGe,"CODE",{});var $bt=s(yue);wor=r($bt,"__init__()"),$bt.forEach(t),Aor=r(TGe," (throws an error)."),TGe.forEach(t),yor=i(nl),vt=n(nl,"DIV",{class:!0});var hw=s(vt);T($y.$$.fragment,hw),Lor=i(hw),Lue=n(hw,"P",{});var kbt=s(Lue);xor=r(kbt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),kbt.forEach(t),$or=i(hw),vd=n(hw,"P",{});var iee=s(vd);kor=r(iee,`Note:
Loading a model from its configuration file does `),xue=n(iee,"STRONG",{});var Sbt=s(xue);Sor=r(Sbt,"not"),Sbt.forEach(t),Ror=r(iee,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ez=n(iee,"A",{href:!0});var Rbt=s(Ez);Por=r(Rbt,"from_pretrained()"),Rbt.forEach(t),Bor=r(iee," to load the model weights."),iee.forEach(t),Ior=i(hw),T(Z6.$$.fragment,hw),hw.forEach(t),Nor=i(nl),mo=n(nl,"DIV",{class:!0});var _a=s(mo);T(ky.$$.fragment,_a),qor=i(_a),$ue=n(_a,"P",{});var Pbt=s($ue);jor=r(Pbt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Pbt.forEach(t),Dor=i(_a),Va=n(_a,"P",{});var pw=s(Va);Gor=r(pw,"The model class to instantiate is selected based on the "),kue=n(pw,"CODE",{});var Bbt=s(kue);Oor=r(Bbt,"model_type"),Bbt.forEach(t),Vor=r(pw,` property of the config object (either
passed as an argument or loaded from `),Sue=n(pw,"CODE",{});var Ibt=s(Sue);Xor=r(Ibt,"pretrained_model_name_or_path"),Ibt.forEach(t),zor=r(pw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rue=n(pw,"CODE",{});var Nbt=s(Rue);Wor=r(Nbt,"pretrained_model_name_or_path"),Nbt.forEach(t),Qor=r(pw,":"),pw.forEach(t),Hor=i(_a),Re=n(_a,"UL",{});var Xe=s(Re);eT=n(Xe,"LI",{});var sSe=s(eT);Pue=n(sSe,"STRONG",{});var qbt=s(Pue);Uor=r(qbt,"data2vec-audio"),qbt.forEach(t),Jor=r(sSe," \u2014 "),Cz=n(sSe,"A",{href:!0});var jbt=s(Cz);Yor=r(jbt,"Data2VecAudioForCTC"),jbt.forEach(t),Kor=r(sSe," (Data2VecAudio model)"),sSe.forEach(t),Zor=i(Xe),oT=n(Xe,"LI",{});var lSe=s(oT);Bue=n(lSe,"STRONG",{});var Dbt=s(Bue);err=r(Dbt,"hubert"),Dbt.forEach(t),orr=r(lSe," \u2014 "),wz=n(lSe,"A",{href:!0});var Gbt=s(wz);rrr=r(Gbt,"HubertForCTC"),Gbt.forEach(t),trr=r(lSe," (Hubert model)"),lSe.forEach(t),arr=i(Xe),rT=n(Xe,"LI",{});var iSe=s(rT);Iue=n(iSe,"STRONG",{});var Obt=s(Iue);nrr=r(Obt,"sew"),Obt.forEach(t),srr=r(iSe," \u2014 "),Az=n(iSe,"A",{href:!0});var Vbt=s(Az);lrr=r(Vbt,"SEWForCTC"),Vbt.forEach(t),irr=r(iSe," (SEW model)"),iSe.forEach(t),drr=i(Xe),tT=n(Xe,"LI",{});var dSe=s(tT);Nue=n(dSe,"STRONG",{});var Xbt=s(Nue);crr=r(Xbt,"sew-d"),Xbt.forEach(t),frr=r(dSe," \u2014 "),yz=n(dSe,"A",{href:!0});var zbt=s(yz);mrr=r(zbt,"SEWDForCTC"),zbt.forEach(t),grr=r(dSe," (SEW-D model)"),dSe.forEach(t),hrr=i(Xe),aT=n(Xe,"LI",{});var cSe=s(aT);que=n(cSe,"STRONG",{});var Wbt=s(que);prr=r(Wbt,"unispeech"),Wbt.forEach(t),_rr=r(cSe," \u2014 "),Lz=n(cSe,"A",{href:!0});var Qbt=s(Lz);urr=r(Qbt,"UniSpeechForCTC"),Qbt.forEach(t),brr=r(cSe," (UniSpeech model)"),cSe.forEach(t),vrr=i(Xe),nT=n(Xe,"LI",{});var fSe=s(nT);jue=n(fSe,"STRONG",{});var Hbt=s(jue);Frr=r(Hbt,"unispeech-sat"),Hbt.forEach(t),Trr=r(fSe," \u2014 "),xz=n(fSe,"A",{href:!0});var Ubt=s(xz);Mrr=r(Ubt,"UniSpeechSatForCTC"),Ubt.forEach(t),Err=r(fSe," (UniSpeechSat model)"),fSe.forEach(t),Crr=i(Xe),sT=n(Xe,"LI",{});var mSe=s(sT);Due=n(mSe,"STRONG",{});var Jbt=s(Due);wrr=r(Jbt,"wav2vec2"),Jbt.forEach(t),Arr=r(mSe," \u2014 "),$z=n(mSe,"A",{href:!0});var Ybt=s($z);yrr=r(Ybt,"Wav2Vec2ForCTC"),Ybt.forEach(t),Lrr=r(mSe," (Wav2Vec2 model)"),mSe.forEach(t),xrr=i(Xe),lT=n(Xe,"LI",{});var gSe=s(lT);Gue=n(gSe,"STRONG",{});var Kbt=s(Gue);$rr=r(Kbt,"wav2vec2-conformer"),Kbt.forEach(t),krr=r(gSe," \u2014 "),kz=n(gSe,"A",{href:!0});var Zbt=s(kz);Srr=r(Zbt,"Wav2Vec2ConformerForCTC"),Zbt.forEach(t),Rrr=r(gSe," (Wav2Vec2-Conformer model)"),gSe.forEach(t),Prr=i(Xe),iT=n(Xe,"LI",{});var hSe=s(iT);Oue=n(hSe,"STRONG",{});var evt=s(Oue);Brr=r(evt,"wavlm"),evt.forEach(t),Irr=r(hSe," \u2014 "),Sz=n(hSe,"A",{href:!0});var ovt=s(Sz);Nrr=r(ovt,"WavLMForCTC"),ovt.forEach(t),qrr=r(hSe," (WavLM model)"),hSe.forEach(t),Xe.forEach(t),jrr=i(_a),dT=n(_a,"P",{});var pSe=s(dT);Drr=r(pSe,"The model is set in evaluation mode by default using "),Vue=n(pSe,"CODE",{});var rvt=s(Vue);Grr=r(rvt,"model.eval()"),rvt.forEach(t),Orr=r(pSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xue=n(pSe,"CODE",{});var tvt=s(Xue);Vrr=r(tvt,"model.train()"),tvt.forEach(t),pSe.forEach(t),Xrr=i(_a),T(cT.$$.fragment,_a),_a.forEach(t),nl.forEach(t),bje=i(f),Fd=n(f,"H2",{class:!0});var MGe=s(Fd);fT=n(MGe,"A",{id:!0,class:!0,href:!0});var avt=s(fT);zue=n(avt,"SPAN",{});var nvt=s(zue);T(Sy.$$.fragment,nvt),nvt.forEach(t),avt.forEach(t),zrr=i(MGe),Wue=n(MGe,"SPAN",{});var svt=s(Wue);Wrr=r(svt,"AutoModelForSpeechSeq2Seq"),svt.forEach(t),MGe.forEach(t),vje=i(f),Xo=n(f,"DIV",{class:!0});var sl=s(Xo);T(Ry.$$.fragment,sl),Qrr=i(sl),Td=n(sl,"P",{});var dee=s(Td);Hrr=r(dee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Rz=n(dee,"A",{href:!0});var lvt=s(Rz);Urr=r(lvt,"from_pretrained()"),lvt.forEach(t),Jrr=r(dee," class method or the "),Pz=n(dee,"A",{href:!0});var ivt=s(Pz);Yrr=r(ivt,"from_config()"),ivt.forEach(t),Krr=r(dee,` class
method.`),dee.forEach(t),Zrr=i(sl),Py=n(sl,"P",{});var EGe=s(Py);etr=r(EGe,"This class cannot be instantiated directly using "),Que=n(EGe,"CODE",{});var dvt=s(Que);otr=r(dvt,"__init__()"),dvt.forEach(t),rtr=r(EGe," (throws an error)."),EGe.forEach(t),ttr=i(sl),Ft=n(sl,"DIV",{class:!0});var _w=s(Ft);T(By.$$.fragment,_w),atr=i(_w),Hue=n(_w,"P",{});var cvt=s(Hue);ntr=r(cvt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),cvt.forEach(t),str=i(_w),Md=n(_w,"P",{});var cee=s(Md);ltr=r(cee,`Note:
Loading a model from its configuration file does `),Uue=n(cee,"STRONG",{});var fvt=s(Uue);itr=r(fvt,"not"),fvt.forEach(t),dtr=r(cee,` load the model weights. It only affects the
model\u2019s configuration. Use `),Bz=n(cee,"A",{href:!0});var mvt=s(Bz);ctr=r(mvt,"from_pretrained()"),mvt.forEach(t),ftr=r(cee," to load the model weights."),cee.forEach(t),mtr=i(_w),T(mT.$$.fragment,_w),_w.forEach(t),gtr=i(sl),go=n(sl,"DIV",{class:!0});var ua=s(go);T(Iy.$$.fragment,ua),htr=i(ua),Jue=n(ua,"P",{});var gvt=s(Jue);ptr=r(gvt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),gvt.forEach(t),_tr=i(ua),Xa=n(ua,"P",{});var uw=s(Xa);utr=r(uw,"The model class to instantiate is selected based on the "),Yue=n(uw,"CODE",{});var hvt=s(Yue);btr=r(hvt,"model_type"),hvt.forEach(t),vtr=r(uw,` property of the config object (either
passed as an argument or loaded from `),Kue=n(uw,"CODE",{});var pvt=s(Kue);Ftr=r(pvt,"pretrained_model_name_or_path"),pvt.forEach(t),Ttr=r(uw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zue=n(uw,"CODE",{});var _vt=s(Zue);Mtr=r(_vt,"pretrained_model_name_or_path"),_vt.forEach(t),Etr=r(uw,":"),uw.forEach(t),Ctr=i(ua),Ny=n(ua,"UL",{});var CGe=s(Ny);gT=n(CGe,"LI",{});var _Se=s(gT);e2e=n(_Se,"STRONG",{});var uvt=s(e2e);wtr=r(uvt,"speech-encoder-decoder"),uvt.forEach(t),Atr=r(_Se," \u2014 "),Iz=n(_Se,"A",{href:!0});var bvt=s(Iz);ytr=r(bvt,"SpeechEncoderDecoderModel"),bvt.forEach(t),Ltr=r(_Se," (Speech Encoder decoder model)"),_Se.forEach(t),xtr=i(CGe),hT=n(CGe,"LI",{});var uSe=s(hT);o2e=n(uSe,"STRONG",{});var vvt=s(o2e);$tr=r(vvt,"speech_to_text"),vvt.forEach(t),ktr=r(uSe," \u2014 "),Nz=n(uSe,"A",{href:!0});var Fvt=s(Nz);Str=r(Fvt,"Speech2TextForConditionalGeneration"),Fvt.forEach(t),Rtr=r(uSe," (Speech2Text model)"),uSe.forEach(t),CGe.forEach(t),Ptr=i(ua),pT=n(ua,"P",{});var bSe=s(pT);Btr=r(bSe,"The model is set in evaluation mode by default using "),r2e=n(bSe,"CODE",{});var Tvt=s(r2e);Itr=r(Tvt,"model.eval()"),Tvt.forEach(t),Ntr=r(bSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),t2e=n(bSe,"CODE",{});var Mvt=s(t2e);qtr=r(Mvt,"model.train()"),Mvt.forEach(t),bSe.forEach(t),jtr=i(ua),T(_T.$$.fragment,ua),ua.forEach(t),sl.forEach(t),Fje=i(f),Ed=n(f,"H2",{class:!0});var wGe=s(Ed);uT=n(wGe,"A",{id:!0,class:!0,href:!0});var Evt=s(uT);a2e=n(Evt,"SPAN",{});var Cvt=s(a2e);T(qy.$$.fragment,Cvt),Cvt.forEach(t),Evt.forEach(t),Dtr=i(wGe),n2e=n(wGe,"SPAN",{});var wvt=s(n2e);Gtr=r(wvt,"AutoModelForAudioXVector"),wvt.forEach(t),wGe.forEach(t),Tje=i(f),zo=n(f,"DIV",{class:!0});var ll=s(zo);T(jy.$$.fragment,ll),Otr=i(ll),Cd=n(ll,"P",{});var fee=s(Cd);Vtr=r(fee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),qz=n(fee,"A",{href:!0});var Avt=s(qz);Xtr=r(Avt,"from_pretrained()"),Avt.forEach(t),ztr=r(fee," class method or the "),jz=n(fee,"A",{href:!0});var yvt=s(jz);Wtr=r(yvt,"from_config()"),yvt.forEach(t),Qtr=r(fee,` class
method.`),fee.forEach(t),Htr=i(ll),Dy=n(ll,"P",{});var AGe=s(Dy);Utr=r(AGe,"This class cannot be instantiated directly using "),s2e=n(AGe,"CODE",{});var Lvt=s(s2e);Jtr=r(Lvt,"__init__()"),Lvt.forEach(t),Ytr=r(AGe," (throws an error)."),AGe.forEach(t),Ktr=i(ll),Tt=n(ll,"DIV",{class:!0});var bw=s(Tt);T(Gy.$$.fragment,bw),Ztr=i(bw),l2e=n(bw,"P",{});var xvt=s(l2e);ear=r(xvt,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),xvt.forEach(t),oar=i(bw),wd=n(bw,"P",{});var mee=s(wd);rar=r(mee,`Note:
Loading a model from its configuration file does `),i2e=n(mee,"STRONG",{});var $vt=s(i2e);tar=r($vt,"not"),$vt.forEach(t),aar=r(mee,` load the model weights. It only affects the
model\u2019s configuration. Use `),Dz=n(mee,"A",{href:!0});var kvt=s(Dz);nar=r(kvt,"from_pretrained()"),kvt.forEach(t),sar=r(mee," to load the model weights."),mee.forEach(t),lar=i(bw),T(bT.$$.fragment,bw),bw.forEach(t),iar=i(ll),ho=n(ll,"DIV",{class:!0});var ba=s(ho);T(Oy.$$.fragment,ba),dar=i(ba),d2e=n(ba,"P",{});var Svt=s(d2e);car=r(Svt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Svt.forEach(t),far=i(ba),za=n(ba,"P",{});var vw=s(za);mar=r(vw,"The model class to instantiate is selected based on the "),c2e=n(vw,"CODE",{});var Rvt=s(c2e);gar=r(Rvt,"model_type"),Rvt.forEach(t),har=r(vw,` property of the config object (either
passed as an argument or loaded from `),f2e=n(vw,"CODE",{});var Pvt=s(f2e);par=r(Pvt,"pretrained_model_name_or_path"),Pvt.forEach(t),_ar=r(vw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m2e=n(vw,"CODE",{});var Bvt=s(m2e);uar=r(Bvt,"pretrained_model_name_or_path"),Bvt.forEach(t),bar=r(vw,":"),vw.forEach(t),Far=i(ba),Zr=n(ba,"UL",{});var il=s(Zr);vT=n(il,"LI",{});var vSe=s(vT);g2e=n(vSe,"STRONG",{});var Ivt=s(g2e);Tar=r(Ivt,"data2vec-audio"),Ivt.forEach(t),Mar=r(vSe," \u2014 "),Gz=n(vSe,"A",{href:!0});var Nvt=s(Gz);Ear=r(Nvt,"Data2VecAudioForXVector"),Nvt.forEach(t),Car=r(vSe," (Data2VecAudio model)"),vSe.forEach(t),war=i(il),FT=n(il,"LI",{});var FSe=s(FT);h2e=n(FSe,"STRONG",{});var qvt=s(h2e);Aar=r(qvt,"unispeech-sat"),qvt.forEach(t),yar=r(FSe," \u2014 "),Oz=n(FSe,"A",{href:!0});var jvt=s(Oz);Lar=r(jvt,"UniSpeechSatForXVector"),jvt.forEach(t),xar=r(FSe," (UniSpeechSat model)"),FSe.forEach(t),$ar=i(il),TT=n(il,"LI",{});var TSe=s(TT);p2e=n(TSe,"STRONG",{});var Dvt=s(p2e);kar=r(Dvt,"wav2vec2"),Dvt.forEach(t),Sar=r(TSe," \u2014 "),Vz=n(TSe,"A",{href:!0});var Gvt=s(Vz);Rar=r(Gvt,"Wav2Vec2ForXVector"),Gvt.forEach(t),Par=r(TSe," (Wav2Vec2 model)"),TSe.forEach(t),Bar=i(il),MT=n(il,"LI",{});var MSe=s(MT);_2e=n(MSe,"STRONG",{});var Ovt=s(_2e);Iar=r(Ovt,"wav2vec2-conformer"),Ovt.forEach(t),Nar=r(MSe," \u2014 "),Xz=n(MSe,"A",{href:!0});var Vvt=s(Xz);qar=r(Vvt,"Wav2Vec2ConformerForXVector"),Vvt.forEach(t),jar=r(MSe," (Wav2Vec2-Conformer model)"),MSe.forEach(t),Dar=i(il),ET=n(il,"LI",{});var ESe=s(ET);u2e=n(ESe,"STRONG",{});var Xvt=s(u2e);Gar=r(Xvt,"wavlm"),Xvt.forEach(t),Oar=r(ESe," \u2014 "),zz=n(ESe,"A",{href:!0});var zvt=s(zz);Var=r(zvt,"WavLMForXVector"),zvt.forEach(t),Xar=r(ESe," (WavLM model)"),ESe.forEach(t),il.forEach(t),zar=i(ba),CT=n(ba,"P",{});var CSe=s(CT);War=r(CSe,"The model is set in evaluation mode by default using "),b2e=n(CSe,"CODE",{});var Wvt=s(b2e);Qar=r(Wvt,"model.eval()"),Wvt.forEach(t),Har=r(CSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),v2e=n(CSe,"CODE",{});var Qvt=s(v2e);Uar=r(Qvt,"model.train()"),Qvt.forEach(t),CSe.forEach(t),Jar=i(ba),T(wT.$$.fragment,ba),ba.forEach(t),ll.forEach(t),Mje=i(f),Ad=n(f,"H2",{class:!0});var yGe=s(Ad);AT=n(yGe,"A",{id:!0,class:!0,href:!0});var Hvt=s(AT);F2e=n(Hvt,"SPAN",{});var Uvt=s(F2e);T(Vy.$$.fragment,Uvt),Uvt.forEach(t),Hvt.forEach(t),Yar=i(yGe),T2e=n(yGe,"SPAN",{});var Jvt=s(T2e);Kar=r(Jvt,"AutoModelForMaskedImageModeling"),Jvt.forEach(t),yGe.forEach(t),Eje=i(f),Wo=n(f,"DIV",{class:!0});var dl=s(Wo);T(Xy.$$.fragment,dl),Zar=i(dl),yd=n(dl,"P",{});var gee=s(yd);enr=r(gee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),Wz=n(gee,"A",{href:!0});var Yvt=s(Wz);onr=r(Yvt,"from_pretrained()"),Yvt.forEach(t),rnr=r(gee," class method or the "),Qz=n(gee,"A",{href:!0});var Kvt=s(Qz);tnr=r(Kvt,"from_config()"),Kvt.forEach(t),anr=r(gee,` class
method.`),gee.forEach(t),nnr=i(dl),zy=n(dl,"P",{});var LGe=s(zy);snr=r(LGe,"This class cannot be instantiated directly using "),M2e=n(LGe,"CODE",{});var Zvt=s(M2e);lnr=r(Zvt,"__init__()"),Zvt.forEach(t),inr=r(LGe," (throws an error)."),LGe.forEach(t),dnr=i(dl),Mt=n(dl,"DIV",{class:!0});var Fw=s(Mt);T(Wy.$$.fragment,Fw),cnr=i(Fw),E2e=n(Fw,"P",{});var eFt=s(E2e);fnr=r(eFt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),eFt.forEach(t),mnr=i(Fw),Ld=n(Fw,"P",{});var hee=s(Ld);gnr=r(hee,`Note:
Loading a model from its configuration file does `),C2e=n(hee,"STRONG",{});var oFt=s(C2e);hnr=r(oFt,"not"),oFt.forEach(t),pnr=r(hee,` load the model weights. It only affects the
model\u2019s configuration. Use `),Hz=n(hee,"A",{href:!0});var rFt=s(Hz);_nr=r(rFt,"from_pretrained()"),rFt.forEach(t),unr=r(hee," to load the model weights."),hee.forEach(t),bnr=i(Fw),T(yT.$$.fragment,Fw),Fw.forEach(t),vnr=i(dl),po=n(dl,"DIV",{class:!0});var va=s(po);T(Qy.$$.fragment,va),Fnr=i(va),w2e=n(va,"P",{});var tFt=s(w2e);Tnr=r(tFt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),tFt.forEach(t),Mnr=i(va),Wa=n(va,"P",{});var Tw=s(Wa);Enr=r(Tw,"The model class to instantiate is selected based on the "),A2e=n(Tw,"CODE",{});var aFt=s(A2e);Cnr=r(aFt,"model_type"),aFt.forEach(t),wnr=r(Tw,` property of the config object (either
passed as an argument or loaded from `),y2e=n(Tw,"CODE",{});var nFt=s(y2e);Anr=r(nFt,"pretrained_model_name_or_path"),nFt.forEach(t),ynr=r(Tw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L2e=n(Tw,"CODE",{});var sFt=s(L2e);Lnr=r(sFt,"pretrained_model_name_or_path"),sFt.forEach(t),xnr=r(Tw,":"),Tw.forEach(t),$nr=i(va),xd=n(va,"UL",{});var pee=s(xd);LT=n(pee,"LI",{});var wSe=s(LT);x2e=n(wSe,"STRONG",{});var lFt=s(x2e);knr=r(lFt,"deit"),lFt.forEach(t),Snr=r(wSe," \u2014 "),Uz=n(wSe,"A",{href:!0});var iFt=s(Uz);Rnr=r(iFt,"DeiTForMaskedImageModeling"),iFt.forEach(t),Pnr=r(wSe," (DeiT model)"),wSe.forEach(t),Bnr=i(pee),xT=n(pee,"LI",{});var ASe=s(xT);$2e=n(ASe,"STRONG",{});var dFt=s($2e);Inr=r(dFt,"swin"),dFt.forEach(t),Nnr=r(ASe," \u2014 "),Jz=n(ASe,"A",{href:!0});var cFt=s(Jz);qnr=r(cFt,"SwinForMaskedImageModeling"),cFt.forEach(t),jnr=r(ASe," (Swin model)"),ASe.forEach(t),Dnr=i(pee),$T=n(pee,"LI",{});var ySe=s($T);k2e=n(ySe,"STRONG",{});var fFt=s(k2e);Gnr=r(fFt,"vit"),fFt.forEach(t),Onr=r(ySe," \u2014 "),Yz=n(ySe,"A",{href:!0});var mFt=s(Yz);Vnr=r(mFt,"ViTForMaskedImageModeling"),mFt.forEach(t),Xnr=r(ySe," (ViT model)"),ySe.forEach(t),pee.forEach(t),znr=i(va),kT=n(va,"P",{});var LSe=s(kT);Wnr=r(LSe,"The model is set in evaluation mode by default using "),S2e=n(LSe,"CODE",{});var gFt=s(S2e);Qnr=r(gFt,"model.eval()"),gFt.forEach(t),Hnr=r(LSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),R2e=n(LSe,"CODE",{});var hFt=s(R2e);Unr=r(hFt,"model.train()"),hFt.forEach(t),LSe.forEach(t),Jnr=i(va),T(ST.$$.fragment,va),va.forEach(t),dl.forEach(t),Cje=i(f),$d=n(f,"H2",{class:!0});var xGe=s($d);RT=n(xGe,"A",{id:!0,class:!0,href:!0});var pFt=s(RT);P2e=n(pFt,"SPAN",{});var _Ft=s(P2e);T(Hy.$$.fragment,_Ft),_Ft.forEach(t),pFt.forEach(t),Ynr=i(xGe),B2e=n(xGe,"SPAN",{});var uFt=s(B2e);Knr=r(uFt,"AutoModelForObjectDetection"),uFt.forEach(t),xGe.forEach(t),wje=i(f),Qo=n(f,"DIV",{class:!0});var cl=s(Qo);T(Uy.$$.fragment,cl),Znr=i(cl),kd=n(cl,"P",{});var _ee=s(kd);esr=r(_ee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),Kz=n(_ee,"A",{href:!0});var bFt=s(Kz);osr=r(bFt,"from_pretrained()"),bFt.forEach(t),rsr=r(_ee," class method or the "),Zz=n(_ee,"A",{href:!0});var vFt=s(Zz);tsr=r(vFt,"from_config()"),vFt.forEach(t),asr=r(_ee,` class
method.`),_ee.forEach(t),nsr=i(cl),Jy=n(cl,"P",{});var $Ge=s(Jy);ssr=r($Ge,"This class cannot be instantiated directly using "),I2e=n($Ge,"CODE",{});var FFt=s(I2e);lsr=r(FFt,"__init__()"),FFt.forEach(t),isr=r($Ge," (throws an error)."),$Ge.forEach(t),dsr=i(cl),Et=n(cl,"DIV",{class:!0});var Mw=s(Et);T(Yy.$$.fragment,Mw),csr=i(Mw),N2e=n(Mw,"P",{});var TFt=s(N2e);fsr=r(TFt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),TFt.forEach(t),msr=i(Mw),Sd=n(Mw,"P",{});var uee=s(Sd);gsr=r(uee,`Note:
Loading a model from its configuration file does `),q2e=n(uee,"STRONG",{});var MFt=s(q2e);hsr=r(MFt,"not"),MFt.forEach(t),psr=r(uee,` load the model weights. It only affects the
model\u2019s configuration. Use `),eW=n(uee,"A",{href:!0});var EFt=s(eW);_sr=r(EFt,"from_pretrained()"),EFt.forEach(t),usr=r(uee," to load the model weights."),uee.forEach(t),bsr=i(Mw),T(PT.$$.fragment,Mw),Mw.forEach(t),vsr=i(cl),_o=n(cl,"DIV",{class:!0});var Fa=s(_o);T(Ky.$$.fragment,Fa),Fsr=i(Fa),j2e=n(Fa,"P",{});var CFt=s(j2e);Tsr=r(CFt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),CFt.forEach(t),Msr=i(Fa),Qa=n(Fa,"P",{});var Ew=s(Qa);Esr=r(Ew,"The model class to instantiate is selected based on the "),D2e=n(Ew,"CODE",{});var wFt=s(D2e);Csr=r(wFt,"model_type"),wFt.forEach(t),wsr=r(Ew,` property of the config object (either
passed as an argument or loaded from `),G2e=n(Ew,"CODE",{});var AFt=s(G2e);Asr=r(AFt,"pretrained_model_name_or_path"),AFt.forEach(t),ysr=r(Ew,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O2e=n(Ew,"CODE",{});var yFt=s(O2e);Lsr=r(yFt,"pretrained_model_name_or_path"),yFt.forEach(t),xsr=r(Ew,":"),Ew.forEach(t),$sr=i(Fa),Zy=n(Fa,"UL",{});var kGe=s(Zy);BT=n(kGe,"LI",{});var xSe=s(BT);V2e=n(xSe,"STRONG",{});var LFt=s(V2e);ksr=r(LFt,"detr"),LFt.forEach(t),Ssr=r(xSe," \u2014 "),oW=n(xSe,"A",{href:!0});var xFt=s(oW);Rsr=r(xFt,"DetrForObjectDetection"),xFt.forEach(t),Psr=r(xSe," (DETR model)"),xSe.forEach(t),Bsr=i(kGe),IT=n(kGe,"LI",{});var $Se=s(IT);X2e=n($Se,"STRONG",{});var $Ft=s(X2e);Isr=r($Ft,"yolos"),$Ft.forEach(t),Nsr=r($Se," \u2014 "),rW=n($Se,"A",{href:!0});var kFt=s(rW);qsr=r(kFt,"YolosForObjectDetection"),kFt.forEach(t),jsr=r($Se," (YOLOS model)"),$Se.forEach(t),kGe.forEach(t),Dsr=i(Fa),NT=n(Fa,"P",{});var kSe=s(NT);Gsr=r(kSe,"The model is set in evaluation mode by default using "),z2e=n(kSe,"CODE",{});var SFt=s(z2e);Osr=r(SFt,"model.eval()"),SFt.forEach(t),Vsr=r(kSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),W2e=n(kSe,"CODE",{});var RFt=s(W2e);Xsr=r(RFt,"model.train()"),RFt.forEach(t),kSe.forEach(t),zsr=i(Fa),T(qT.$$.fragment,Fa),Fa.forEach(t),cl.forEach(t),Aje=i(f),Rd=n(f,"H2",{class:!0});var SGe=s(Rd);jT=n(SGe,"A",{id:!0,class:!0,href:!0});var PFt=s(jT);Q2e=n(PFt,"SPAN",{});var BFt=s(Q2e);T(eL.$$.fragment,BFt),BFt.forEach(t),PFt.forEach(t),Wsr=i(SGe),H2e=n(SGe,"SPAN",{});var IFt=s(H2e);Qsr=r(IFt,"AutoModelForImageSegmentation"),IFt.forEach(t),SGe.forEach(t),yje=i(f),Ho=n(f,"DIV",{class:!0});var fl=s(Ho);T(oL.$$.fragment,fl),Hsr=i(fl),Pd=n(fl,"P",{});var bee=s(Pd);Usr=r(bee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),tW=n(bee,"A",{href:!0});var NFt=s(tW);Jsr=r(NFt,"from_pretrained()"),NFt.forEach(t),Ysr=r(bee," class method or the "),aW=n(bee,"A",{href:!0});var qFt=s(aW);Ksr=r(qFt,"from_config()"),qFt.forEach(t),Zsr=r(bee,` class
method.`),bee.forEach(t),elr=i(fl),rL=n(fl,"P",{});var RGe=s(rL);olr=r(RGe,"This class cannot be instantiated directly using "),U2e=n(RGe,"CODE",{});var jFt=s(U2e);rlr=r(jFt,"__init__()"),jFt.forEach(t),tlr=r(RGe," (throws an error)."),RGe.forEach(t),alr=i(fl),Ct=n(fl,"DIV",{class:!0});var Cw=s(Ct);T(tL.$$.fragment,Cw),nlr=i(Cw),J2e=n(Cw,"P",{});var DFt=s(J2e);slr=r(DFt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),DFt.forEach(t),llr=i(Cw),Bd=n(Cw,"P",{});var vee=s(Bd);ilr=r(vee,`Note:
Loading a model from its configuration file does `),Y2e=n(vee,"STRONG",{});var GFt=s(Y2e);dlr=r(GFt,"not"),GFt.forEach(t),clr=r(vee,` load the model weights. It only affects the
model\u2019s configuration. Use `),nW=n(vee,"A",{href:!0});var OFt=s(nW);flr=r(OFt,"from_pretrained()"),OFt.forEach(t),mlr=r(vee," to load the model weights."),vee.forEach(t),glr=i(Cw),T(DT.$$.fragment,Cw),Cw.forEach(t),hlr=i(fl),uo=n(fl,"DIV",{class:!0});var Ta=s(uo);T(aL.$$.fragment,Ta),plr=i(Ta),K2e=n(Ta,"P",{});var VFt=s(K2e);_lr=r(VFt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),VFt.forEach(t),ulr=i(Ta),Ha=n(Ta,"P",{});var ww=s(Ha);blr=r(ww,"The model class to instantiate is selected based on the "),Z2e=n(ww,"CODE",{});var XFt=s(Z2e);vlr=r(XFt,"model_type"),XFt.forEach(t),Flr=r(ww,` property of the config object (either
passed as an argument or loaded from `),e1e=n(ww,"CODE",{});var zFt=s(e1e);Tlr=r(zFt,"pretrained_model_name_or_path"),zFt.forEach(t),Mlr=r(ww,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o1e=n(ww,"CODE",{});var WFt=s(o1e);Elr=r(WFt,"pretrained_model_name_or_path"),WFt.forEach(t),Clr=r(ww,":"),ww.forEach(t),wlr=i(Ta),r1e=n(Ta,"UL",{});var QFt=s(r1e);GT=n(QFt,"LI",{});var SSe=s(GT);t1e=n(SSe,"STRONG",{});var HFt=s(t1e);Alr=r(HFt,"detr"),HFt.forEach(t),ylr=r(SSe," \u2014 "),sW=n(SSe,"A",{href:!0});var UFt=s(sW);Llr=r(UFt,"DetrForSegmentation"),UFt.forEach(t),xlr=r(SSe," (DETR model)"),SSe.forEach(t),QFt.forEach(t),$lr=i(Ta),OT=n(Ta,"P",{});var RSe=s(OT);klr=r(RSe,"The model is set in evaluation mode by default using "),a1e=n(RSe,"CODE",{});var JFt=s(a1e);Slr=r(JFt,"model.eval()"),JFt.forEach(t),Rlr=r(RSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),n1e=n(RSe,"CODE",{});var YFt=s(n1e);Plr=r(YFt,"model.train()"),YFt.forEach(t),RSe.forEach(t),Blr=i(Ta),T(VT.$$.fragment,Ta),Ta.forEach(t),fl.forEach(t),Lje=i(f),Id=n(f,"H2",{class:!0});var PGe=s(Id);XT=n(PGe,"A",{id:!0,class:!0,href:!0});var KFt=s(XT);s1e=n(KFt,"SPAN",{});var ZFt=s(s1e);T(nL.$$.fragment,ZFt),ZFt.forEach(t),KFt.forEach(t),Ilr=i(PGe),l1e=n(PGe,"SPAN",{});var e6t=s(l1e);Nlr=r(e6t,"AutoModelForSemanticSegmentation"),e6t.forEach(t),PGe.forEach(t),xje=i(f),Uo=n(f,"DIV",{class:!0});var ml=s(Uo);T(sL.$$.fragment,ml),qlr=i(ml),Nd=n(ml,"P",{});var Fee=s(Nd);jlr=r(Fee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),lW=n(Fee,"A",{href:!0});var o6t=s(lW);Dlr=r(o6t,"from_pretrained()"),o6t.forEach(t),Glr=r(Fee," class method or the "),iW=n(Fee,"A",{href:!0});var r6t=s(iW);Olr=r(r6t,"from_config()"),r6t.forEach(t),Vlr=r(Fee,` class
method.`),Fee.forEach(t),Xlr=i(ml),lL=n(ml,"P",{});var BGe=s(lL);zlr=r(BGe,"This class cannot be instantiated directly using "),i1e=n(BGe,"CODE",{});var t6t=s(i1e);Wlr=r(t6t,"__init__()"),t6t.forEach(t),Qlr=r(BGe," (throws an error)."),BGe.forEach(t),Hlr=i(ml),wt=n(ml,"DIV",{class:!0});var Aw=s(wt);T(iL.$$.fragment,Aw),Ulr=i(Aw),d1e=n(Aw,"P",{});var a6t=s(d1e);Jlr=r(a6t,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),a6t.forEach(t),Ylr=i(Aw),qd=n(Aw,"P",{});var Tee=s(qd);Klr=r(Tee,`Note:
Loading a model from its configuration file does `),c1e=n(Tee,"STRONG",{});var n6t=s(c1e);Zlr=r(n6t,"not"),n6t.forEach(t),eir=r(Tee,` load the model weights. It only affects the
model\u2019s configuration. Use `),dW=n(Tee,"A",{href:!0});var s6t=s(dW);oir=r(s6t,"from_pretrained()"),s6t.forEach(t),rir=r(Tee," to load the model weights."),Tee.forEach(t),tir=i(Aw),T(zT.$$.fragment,Aw),Aw.forEach(t),air=i(ml),bo=n(ml,"DIV",{class:!0});var Ma=s(bo);T(dL.$$.fragment,Ma),nir=i(Ma),f1e=n(Ma,"P",{});var l6t=s(f1e);sir=r(l6t,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),l6t.forEach(t),lir=i(Ma),Ua=n(Ma,"P",{});var yw=s(Ua);iir=r(yw,"The model class to instantiate is selected based on the "),m1e=n(yw,"CODE",{});var i6t=s(m1e);dir=r(i6t,"model_type"),i6t.forEach(t),cir=r(yw,` property of the config object (either
passed as an argument or loaded from `),g1e=n(yw,"CODE",{});var d6t=s(g1e);fir=r(d6t,"pretrained_model_name_or_path"),d6t.forEach(t),mir=r(yw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h1e=n(yw,"CODE",{});var c6t=s(h1e);gir=r(c6t,"pretrained_model_name_or_path"),c6t.forEach(t),hir=r(yw,":"),yw.forEach(t),pir=i(Ma),Ja=n(Ma,"UL",{});var Lw=s(Ja);WT=n(Lw,"LI",{});var PSe=s(WT);p1e=n(PSe,"STRONG",{});var f6t=s(p1e);_ir=r(f6t,"beit"),f6t.forEach(t),uir=r(PSe," \u2014 "),cW=n(PSe,"A",{href:!0});var m6t=s(cW);bir=r(m6t,"BeitForSemanticSegmentation"),m6t.forEach(t),vir=r(PSe," (BEiT model)"),PSe.forEach(t),Fir=i(Lw),QT=n(Lw,"LI",{});var BSe=s(QT);_1e=n(BSe,"STRONG",{});var g6t=s(_1e);Tir=r(g6t,"data2vec-vision"),g6t.forEach(t),Mir=r(BSe," \u2014 "),fW=n(BSe,"A",{href:!0});var h6t=s(fW);Eir=r(h6t,"Data2VecVisionForSemanticSegmentation"),h6t.forEach(t),Cir=r(BSe," (Data2VecVision model)"),BSe.forEach(t),wir=i(Lw),HT=n(Lw,"LI",{});var ISe=s(HT);u1e=n(ISe,"STRONG",{});var p6t=s(u1e);Air=r(p6t,"dpt"),p6t.forEach(t),yir=r(ISe," \u2014 "),mW=n(ISe,"A",{href:!0});var _6t=s(mW);Lir=r(_6t,"DPTForSemanticSegmentation"),_6t.forEach(t),xir=r(ISe," (DPT model)"),ISe.forEach(t),$ir=i(Lw),UT=n(Lw,"LI",{});var NSe=s(UT);b1e=n(NSe,"STRONG",{});var u6t=s(b1e);kir=r(u6t,"segformer"),u6t.forEach(t),Sir=r(NSe," \u2014 "),gW=n(NSe,"A",{href:!0});var b6t=s(gW);Rir=r(b6t,"SegformerForSemanticSegmentation"),b6t.forEach(t),Pir=r(NSe," (SegFormer model)"),NSe.forEach(t),Lw.forEach(t),Bir=i(Ma),JT=n(Ma,"P",{});var qSe=s(JT);Iir=r(qSe,"The model is set in evaluation mode by default using "),v1e=n(qSe,"CODE",{});var v6t=s(v1e);Nir=r(v6t,"model.eval()"),v6t.forEach(t),qir=r(qSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),F1e=n(qSe,"CODE",{});var F6t=s(F1e);jir=r(F6t,"model.train()"),F6t.forEach(t),qSe.forEach(t),Dir=i(Ma),T(YT.$$.fragment,Ma),Ma.forEach(t),ml.forEach(t),$je=i(f),jd=n(f,"H2",{class:!0});var IGe=s(jd);KT=n(IGe,"A",{id:!0,class:!0,href:!0});var T6t=s(KT);T1e=n(T6t,"SPAN",{});var M6t=s(T1e);T(cL.$$.fragment,M6t),M6t.forEach(t),T6t.forEach(t),Gir=i(IGe),M1e=n(IGe,"SPAN",{});var E6t=s(M1e);Oir=r(E6t,"AutoModelForInstanceSegmentation"),E6t.forEach(t),IGe.forEach(t),kje=i(f),Jo=n(f,"DIV",{class:!0});var gl=s(Jo);T(fL.$$.fragment,gl),Vir=i(gl),Dd=n(gl,"P",{});var Mee=s(Dd);Xir=r(Mee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),hW=n(Mee,"A",{href:!0});var C6t=s(hW);zir=r(C6t,"from_pretrained()"),C6t.forEach(t),Wir=r(Mee," class method or the "),pW=n(Mee,"A",{href:!0});var w6t=s(pW);Qir=r(w6t,"from_config()"),w6t.forEach(t),Hir=r(Mee,` class
method.`),Mee.forEach(t),Uir=i(gl),mL=n(gl,"P",{});var NGe=s(mL);Jir=r(NGe,"This class cannot be instantiated directly using "),E1e=n(NGe,"CODE",{});var A6t=s(E1e);Yir=r(A6t,"__init__()"),A6t.forEach(t),Kir=r(NGe," (throws an error)."),NGe.forEach(t),Zir=i(gl),At=n(gl,"DIV",{class:!0});var xw=s(At);T(gL.$$.fragment,xw),edr=i(xw),C1e=n(xw,"P",{});var y6t=s(C1e);odr=r(y6t,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),y6t.forEach(t),rdr=i(xw),Gd=n(xw,"P",{});var Eee=s(Gd);tdr=r(Eee,`Note:
Loading a model from its configuration file does `),w1e=n(Eee,"STRONG",{});var L6t=s(w1e);adr=r(L6t,"not"),L6t.forEach(t),ndr=r(Eee,` load the model weights. It only affects the
model\u2019s configuration. Use `),_W=n(Eee,"A",{href:!0});var x6t=s(_W);sdr=r(x6t,"from_pretrained()"),x6t.forEach(t),ldr=r(Eee," to load the model weights."),Eee.forEach(t),idr=i(xw),T(ZT.$$.fragment,xw),xw.forEach(t),ddr=i(gl),vo=n(gl,"DIV",{class:!0});var Ea=s(vo);T(hL.$$.fragment,Ea),cdr=i(Ea),A1e=n(Ea,"P",{});var $6t=s(A1e);fdr=r($6t,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),$6t.forEach(t),mdr=i(Ea),Ya=n(Ea,"P",{});var $w=s(Ya);gdr=r($w,"The model class to instantiate is selected based on the "),y1e=n($w,"CODE",{});var k6t=s(y1e);hdr=r(k6t,"model_type"),k6t.forEach(t),pdr=r($w,` property of the config object (either
passed as an argument or loaded from `),L1e=n($w,"CODE",{});var S6t=s(L1e);_dr=r(S6t,"pretrained_model_name_or_path"),S6t.forEach(t),udr=r($w,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x1e=n($w,"CODE",{});var R6t=s(x1e);bdr=r(R6t,"pretrained_model_name_or_path"),R6t.forEach(t),vdr=r($w,":"),$w.forEach(t),Fdr=i(Ea),$1e=n(Ea,"UL",{});var P6t=s($1e);e7=n(P6t,"LI",{});var jSe=s(e7);k1e=n(jSe,"STRONG",{});var B6t=s(k1e);Tdr=r(B6t,"maskformer"),B6t.forEach(t),Mdr=r(jSe," \u2014 "),uW=n(jSe,"A",{href:!0});var I6t=s(uW);Edr=r(I6t,"MaskFormerForInstanceSegmentation"),I6t.forEach(t),Cdr=r(jSe," (MaskFormer model)"),jSe.forEach(t),P6t.forEach(t),wdr=i(Ea),o7=n(Ea,"P",{});var DSe=s(o7);Adr=r(DSe,"The model is set in evaluation mode by default using "),S1e=n(DSe,"CODE",{});var N6t=s(S1e);ydr=r(N6t,"model.eval()"),N6t.forEach(t),Ldr=r(DSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),R1e=n(DSe,"CODE",{});var q6t=s(R1e);xdr=r(q6t,"model.train()"),q6t.forEach(t),DSe.forEach(t),$dr=i(Ea),T(r7.$$.fragment,Ea),Ea.forEach(t),gl.forEach(t),Sje=i(f),Od=n(f,"H2",{class:!0});var qGe=s(Od);t7=n(qGe,"A",{id:!0,class:!0,href:!0});var j6t=s(t7);P1e=n(j6t,"SPAN",{});var D6t=s(P1e);T(pL.$$.fragment,D6t),D6t.forEach(t),j6t.forEach(t),kdr=i(qGe),B1e=n(qGe,"SPAN",{});var G6t=s(B1e);Sdr=r(G6t,"TFAutoModel"),G6t.forEach(t),qGe.forEach(t),Rje=i(f),Yo=n(f,"DIV",{class:!0});var hl=s(Yo);T(_L.$$.fragment,hl),Rdr=i(hl),Vd=n(hl,"P",{});var Cee=s(Vd);Pdr=r(Cee,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),bW=n(Cee,"A",{href:!0});var O6t=s(bW);Bdr=r(O6t,"from_pretrained()"),O6t.forEach(t),Idr=r(Cee," class method or the "),vW=n(Cee,"A",{href:!0});var V6t=s(vW);Ndr=r(V6t,"from_config()"),V6t.forEach(t),qdr=r(Cee,` class
method.`),Cee.forEach(t),jdr=i(hl),uL=n(hl,"P",{});var jGe=s(uL);Ddr=r(jGe,"This class cannot be instantiated directly using "),I1e=n(jGe,"CODE",{});var X6t=s(I1e);Gdr=r(X6t,"__init__()"),X6t.forEach(t),Odr=r(jGe," (throws an error)."),jGe.forEach(t),Vdr=i(hl),yt=n(hl,"DIV",{class:!0});var kw=s(yt);T(bL.$$.fragment,kw),Xdr=i(kw),N1e=n(kw,"P",{});var z6t=s(N1e);zdr=r(z6t,"Instantiates one of the base model classes of the library from a configuration."),z6t.forEach(t),Wdr=i(kw),Xd=n(kw,"P",{});var wee=s(Xd);Qdr=r(wee,`Note:
Loading a model from its configuration file does `),q1e=n(wee,"STRONG",{});var W6t=s(q1e);Hdr=r(W6t,"not"),W6t.forEach(t),Udr=r(wee,` load the model weights. It only affects the
model\u2019s configuration. Use `),FW=n(wee,"A",{href:!0});var Q6t=s(FW);Jdr=r(Q6t,"from_pretrained()"),Q6t.forEach(t),Ydr=r(wee," to load the model weights."),wee.forEach(t),Kdr=i(kw),T(a7.$$.fragment,kw),kw.forEach(t),Zdr=i(hl),wr=n(hl,"DIV",{class:!0});var pl=s(wr);T(vL.$$.fragment,pl),ecr=i(pl),j1e=n(pl,"P",{});var H6t=s(j1e);ocr=r(H6t,"Instantiate one of the base model classes of the library from a pretrained model."),H6t.forEach(t),rcr=i(pl),Ka=n(pl,"P",{});var Sw=s(Ka);tcr=r(Sw,"The model class to instantiate is selected based on the "),D1e=n(Sw,"CODE",{});var U6t=s(D1e);acr=r(U6t,"model_type"),U6t.forEach(t),ncr=r(Sw,` property of the config object (either
passed as an argument or loaded from `),G1e=n(Sw,"CODE",{});var J6t=s(G1e);scr=r(J6t,"pretrained_model_name_or_path"),J6t.forEach(t),lcr=r(Sw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O1e=n(Sw,"CODE",{});var Y6t=s(O1e);icr=r(Y6t,"pretrained_model_name_or_path"),Y6t.forEach(t),dcr=r(Sw,":"),Sw.forEach(t),ccr=i(pl),q=n(pl,"UL",{});var D=s(q);n7=n(D,"LI",{});var GSe=s(n7);V1e=n(GSe,"STRONG",{});var K6t=s(V1e);fcr=r(K6t,"albert"),K6t.forEach(t),mcr=r(GSe," \u2014 "),TW=n(GSe,"A",{href:!0});var Z6t=s(TW);gcr=r(Z6t,"TFAlbertModel"),Z6t.forEach(t),hcr=r(GSe," (ALBERT model)"),GSe.forEach(t),pcr=i(D),s7=n(D,"LI",{});var OSe=s(s7);X1e=n(OSe,"STRONG",{});var eTt=s(X1e);_cr=r(eTt,"bart"),eTt.forEach(t),ucr=r(OSe," \u2014 "),MW=n(OSe,"A",{href:!0});var oTt=s(MW);bcr=r(oTt,"TFBartModel"),oTt.forEach(t),vcr=r(OSe," (BART model)"),OSe.forEach(t),Fcr=i(D),l7=n(D,"LI",{});var VSe=s(l7);z1e=n(VSe,"STRONG",{});var rTt=s(z1e);Tcr=r(rTt,"bert"),rTt.forEach(t),Mcr=r(VSe," \u2014 "),EW=n(VSe,"A",{href:!0});var tTt=s(EW);Ecr=r(tTt,"TFBertModel"),tTt.forEach(t),Ccr=r(VSe," (BERT model)"),VSe.forEach(t),wcr=i(D),i7=n(D,"LI",{});var XSe=s(i7);W1e=n(XSe,"STRONG",{});var aTt=s(W1e);Acr=r(aTt,"blenderbot"),aTt.forEach(t),ycr=r(XSe," \u2014 "),CW=n(XSe,"A",{href:!0});var nTt=s(CW);Lcr=r(nTt,"TFBlenderbotModel"),nTt.forEach(t),xcr=r(XSe," (Blenderbot model)"),XSe.forEach(t),$cr=i(D),d7=n(D,"LI",{});var zSe=s(d7);Q1e=n(zSe,"STRONG",{});var sTt=s(Q1e);kcr=r(sTt,"blenderbot-small"),sTt.forEach(t),Scr=r(zSe," \u2014 "),wW=n(zSe,"A",{href:!0});var lTt=s(wW);Rcr=r(lTt,"TFBlenderbotSmallModel"),lTt.forEach(t),Pcr=r(zSe," (BlenderbotSmall model)"),zSe.forEach(t),Bcr=i(D),c7=n(D,"LI",{});var WSe=s(c7);H1e=n(WSe,"STRONG",{});var iTt=s(H1e);Icr=r(iTt,"camembert"),iTt.forEach(t),Ncr=r(WSe," \u2014 "),AW=n(WSe,"A",{href:!0});var dTt=s(AW);qcr=r(dTt,"TFCamembertModel"),dTt.forEach(t),jcr=r(WSe," (CamemBERT model)"),WSe.forEach(t),Dcr=i(D),f7=n(D,"LI",{});var QSe=s(f7);U1e=n(QSe,"STRONG",{});var cTt=s(U1e);Gcr=r(cTt,"clip"),cTt.forEach(t),Ocr=r(QSe," \u2014 "),yW=n(QSe,"A",{href:!0});var fTt=s(yW);Vcr=r(fTt,"TFCLIPModel"),fTt.forEach(t),Xcr=r(QSe," (CLIP model)"),QSe.forEach(t),zcr=i(D),m7=n(D,"LI",{});var HSe=s(m7);J1e=n(HSe,"STRONG",{});var mTt=s(J1e);Wcr=r(mTt,"convbert"),mTt.forEach(t),Qcr=r(HSe," \u2014 "),LW=n(HSe,"A",{href:!0});var gTt=s(LW);Hcr=r(gTt,"TFConvBertModel"),gTt.forEach(t),Ucr=r(HSe," (ConvBERT model)"),HSe.forEach(t),Jcr=i(D),g7=n(D,"LI",{});var USe=s(g7);Y1e=n(USe,"STRONG",{});var hTt=s(Y1e);Ycr=r(hTt,"convnext"),hTt.forEach(t),Kcr=r(USe," \u2014 "),xW=n(USe,"A",{href:!0});var pTt=s(xW);Zcr=r(pTt,"TFConvNextModel"),pTt.forEach(t),efr=r(USe," (ConvNext model)"),USe.forEach(t),ofr=i(D),h7=n(D,"LI",{});var JSe=s(h7);K1e=n(JSe,"STRONG",{});var _Tt=s(K1e);rfr=r(_Tt,"ctrl"),_Tt.forEach(t),tfr=r(JSe," \u2014 "),$W=n(JSe,"A",{href:!0});var uTt=s($W);afr=r(uTt,"TFCTRLModel"),uTt.forEach(t),nfr=r(JSe," (CTRL model)"),JSe.forEach(t),sfr=i(D),p7=n(D,"LI",{});var YSe=s(p7);Z1e=n(YSe,"STRONG",{});var bTt=s(Z1e);lfr=r(bTt,"data2vec-vision"),bTt.forEach(t),ifr=r(YSe," \u2014 "),kW=n(YSe,"A",{href:!0});var vTt=s(kW);dfr=r(vTt,"TFData2VecVisionModel"),vTt.forEach(t),cfr=r(YSe," (Data2VecVision model)"),YSe.forEach(t),ffr=i(D),_7=n(D,"LI",{});var KSe=s(_7);ebe=n(KSe,"STRONG",{});var FTt=s(ebe);mfr=r(FTt,"deberta"),FTt.forEach(t),gfr=r(KSe," \u2014 "),SW=n(KSe,"A",{href:!0});var TTt=s(SW);hfr=r(TTt,"TFDebertaModel"),TTt.forEach(t),pfr=r(KSe," (DeBERTa model)"),KSe.forEach(t),_fr=i(D),u7=n(D,"LI",{});var ZSe=s(u7);obe=n(ZSe,"STRONG",{});var MTt=s(obe);ufr=r(MTt,"deberta-v2"),MTt.forEach(t),bfr=r(ZSe," \u2014 "),RW=n(ZSe,"A",{href:!0});var ETt=s(RW);vfr=r(ETt,"TFDebertaV2Model"),ETt.forEach(t),Ffr=r(ZSe," (DeBERTa-v2 model)"),ZSe.forEach(t),Tfr=i(D),b7=n(D,"LI",{});var eRe=s(b7);rbe=n(eRe,"STRONG",{});var CTt=s(rbe);Mfr=r(CTt,"distilbert"),CTt.forEach(t),Efr=r(eRe," \u2014 "),PW=n(eRe,"A",{href:!0});var wTt=s(PW);Cfr=r(wTt,"TFDistilBertModel"),wTt.forEach(t),wfr=r(eRe," (DistilBERT model)"),eRe.forEach(t),Afr=i(D),v7=n(D,"LI",{});var oRe=s(v7);tbe=n(oRe,"STRONG",{});var ATt=s(tbe);yfr=r(ATt,"dpr"),ATt.forEach(t),Lfr=r(oRe," \u2014 "),BW=n(oRe,"A",{href:!0});var yTt=s(BW);xfr=r(yTt,"TFDPRQuestionEncoder"),yTt.forEach(t),$fr=r(oRe," (DPR model)"),oRe.forEach(t),kfr=i(D),F7=n(D,"LI",{});var rRe=s(F7);abe=n(rRe,"STRONG",{});var LTt=s(abe);Sfr=r(LTt,"electra"),LTt.forEach(t),Rfr=r(rRe," \u2014 "),IW=n(rRe,"A",{href:!0});var xTt=s(IW);Pfr=r(xTt,"TFElectraModel"),xTt.forEach(t),Bfr=r(rRe," (ELECTRA model)"),rRe.forEach(t),Ifr=i(D),T7=n(D,"LI",{});var tRe=s(T7);nbe=n(tRe,"STRONG",{});var $Tt=s(nbe);Nfr=r($Tt,"flaubert"),$Tt.forEach(t),qfr=r(tRe," \u2014 "),NW=n(tRe,"A",{href:!0});var kTt=s(NW);jfr=r(kTt,"TFFlaubertModel"),kTt.forEach(t),Dfr=r(tRe," (FlauBERT model)"),tRe.forEach(t),Gfr=i(D),Ns=n(D,"LI",{});var K$=s(Ns);sbe=n(K$,"STRONG",{});var STt=s(sbe);Ofr=r(STt,"funnel"),STt.forEach(t),Vfr=r(K$," \u2014 "),qW=n(K$,"A",{href:!0});var RTt=s(qW);Xfr=r(RTt,"TFFunnelModel"),RTt.forEach(t),zfr=r(K$," or "),jW=n(K$,"A",{href:!0});var PTt=s(jW);Wfr=r(PTt,"TFFunnelBaseModel"),PTt.forEach(t),Qfr=r(K$," (Funnel Transformer model)"),K$.forEach(t),Hfr=i(D),M7=n(D,"LI",{});var aRe=s(M7);lbe=n(aRe,"STRONG",{});var BTt=s(lbe);Ufr=r(BTt,"gpt2"),BTt.forEach(t),Jfr=r(aRe," \u2014 "),DW=n(aRe,"A",{href:!0});var ITt=s(DW);Yfr=r(ITt,"TFGPT2Model"),ITt.forEach(t),Kfr=r(aRe," (OpenAI GPT-2 model)"),aRe.forEach(t),Zfr=i(D),E7=n(D,"LI",{});var nRe=s(E7);ibe=n(nRe,"STRONG",{});var NTt=s(ibe);emr=r(NTt,"gptj"),NTt.forEach(t),omr=r(nRe," \u2014 "),GW=n(nRe,"A",{href:!0});var qTt=s(GW);rmr=r(qTt,"TFGPTJModel"),qTt.forEach(t),tmr=r(nRe," (GPT-J model)"),nRe.forEach(t),amr=i(D),C7=n(D,"LI",{});var sRe=s(C7);dbe=n(sRe,"STRONG",{});var jTt=s(dbe);nmr=r(jTt,"hubert"),jTt.forEach(t),smr=r(sRe," \u2014 "),OW=n(sRe,"A",{href:!0});var DTt=s(OW);lmr=r(DTt,"TFHubertModel"),DTt.forEach(t),imr=r(sRe," (Hubert model)"),sRe.forEach(t),dmr=i(D),w7=n(D,"LI",{});var lRe=s(w7);cbe=n(lRe,"STRONG",{});var GTt=s(cbe);cmr=r(GTt,"layoutlm"),GTt.forEach(t),fmr=r(lRe," \u2014 "),VW=n(lRe,"A",{href:!0});var OTt=s(VW);mmr=r(OTt,"TFLayoutLMModel"),OTt.forEach(t),gmr=r(lRe," (LayoutLM model)"),lRe.forEach(t),hmr=i(D),A7=n(D,"LI",{});var iRe=s(A7);fbe=n(iRe,"STRONG",{});var VTt=s(fbe);pmr=r(VTt,"led"),VTt.forEach(t),_mr=r(iRe," \u2014 "),XW=n(iRe,"A",{href:!0});var XTt=s(XW);umr=r(XTt,"TFLEDModel"),XTt.forEach(t),bmr=r(iRe," (LED model)"),iRe.forEach(t),vmr=i(D),y7=n(D,"LI",{});var dRe=s(y7);mbe=n(dRe,"STRONG",{});var zTt=s(mbe);Fmr=r(zTt,"longformer"),zTt.forEach(t),Tmr=r(dRe," \u2014 "),zW=n(dRe,"A",{href:!0});var WTt=s(zW);Mmr=r(WTt,"TFLongformerModel"),WTt.forEach(t),Emr=r(dRe," (Longformer model)"),dRe.forEach(t),Cmr=i(D),L7=n(D,"LI",{});var cRe=s(L7);gbe=n(cRe,"STRONG",{});var QTt=s(gbe);wmr=r(QTt,"lxmert"),QTt.forEach(t),Amr=r(cRe," \u2014 "),WW=n(cRe,"A",{href:!0});var HTt=s(WW);ymr=r(HTt,"TFLxmertModel"),HTt.forEach(t),Lmr=r(cRe," (LXMERT model)"),cRe.forEach(t),xmr=i(D),x7=n(D,"LI",{});var fRe=s(x7);hbe=n(fRe,"STRONG",{});var UTt=s(hbe);$mr=r(UTt,"marian"),UTt.forEach(t),kmr=r(fRe," \u2014 "),QW=n(fRe,"A",{href:!0});var JTt=s(QW);Smr=r(JTt,"TFMarianModel"),JTt.forEach(t),Rmr=r(fRe," (Marian model)"),fRe.forEach(t),Pmr=i(D),$7=n(D,"LI",{});var mRe=s($7);pbe=n(mRe,"STRONG",{});var YTt=s(pbe);Bmr=r(YTt,"mbart"),YTt.forEach(t),Imr=r(mRe," \u2014 "),HW=n(mRe,"A",{href:!0});var KTt=s(HW);Nmr=r(KTt,"TFMBartModel"),KTt.forEach(t),qmr=r(mRe," (mBART model)"),mRe.forEach(t),jmr=i(D),k7=n(D,"LI",{});var gRe=s(k7);_be=n(gRe,"STRONG",{});var ZTt=s(_be);Dmr=r(ZTt,"mobilebert"),ZTt.forEach(t),Gmr=r(gRe," \u2014 "),UW=n(gRe,"A",{href:!0});var e7t=s(UW);Omr=r(e7t,"TFMobileBertModel"),e7t.forEach(t),Vmr=r(gRe," (MobileBERT model)"),gRe.forEach(t),Xmr=i(D),S7=n(D,"LI",{});var hRe=s(S7);ube=n(hRe,"STRONG",{});var o7t=s(ube);zmr=r(o7t,"mpnet"),o7t.forEach(t),Wmr=r(hRe," \u2014 "),JW=n(hRe,"A",{href:!0});var r7t=s(JW);Qmr=r(r7t,"TFMPNetModel"),r7t.forEach(t),Hmr=r(hRe," (MPNet model)"),hRe.forEach(t),Umr=i(D),R7=n(D,"LI",{});var pRe=s(R7);bbe=n(pRe,"STRONG",{});var t7t=s(bbe);Jmr=r(t7t,"mt5"),t7t.forEach(t),Ymr=r(pRe," \u2014 "),YW=n(pRe,"A",{href:!0});var a7t=s(YW);Kmr=r(a7t,"TFMT5Model"),a7t.forEach(t),Zmr=r(pRe," (mT5 model)"),pRe.forEach(t),egr=i(D),P7=n(D,"LI",{});var _Re=s(P7);vbe=n(_Re,"STRONG",{});var n7t=s(vbe);ogr=r(n7t,"openai-gpt"),n7t.forEach(t),rgr=r(_Re," \u2014 "),KW=n(_Re,"A",{href:!0});var s7t=s(KW);tgr=r(s7t,"TFOpenAIGPTModel"),s7t.forEach(t),agr=r(_Re," (OpenAI GPT model)"),_Re.forEach(t),ngr=i(D),B7=n(D,"LI",{});var uRe=s(B7);Fbe=n(uRe,"STRONG",{});var l7t=s(Fbe);sgr=r(l7t,"pegasus"),l7t.forEach(t),lgr=r(uRe," \u2014 "),ZW=n(uRe,"A",{href:!0});var i7t=s(ZW);igr=r(i7t,"TFPegasusModel"),i7t.forEach(t),dgr=r(uRe," (Pegasus model)"),uRe.forEach(t),cgr=i(D),I7=n(D,"LI",{});var bRe=s(I7);Tbe=n(bRe,"STRONG",{});var d7t=s(Tbe);fgr=r(d7t,"rembert"),d7t.forEach(t),mgr=r(bRe," \u2014 "),eQ=n(bRe,"A",{href:!0});var c7t=s(eQ);ggr=r(c7t,"TFRemBertModel"),c7t.forEach(t),hgr=r(bRe," (RemBERT model)"),bRe.forEach(t),pgr=i(D),N7=n(D,"LI",{});var vRe=s(N7);Mbe=n(vRe,"STRONG",{});var f7t=s(Mbe);_gr=r(f7t,"roberta"),f7t.forEach(t),ugr=r(vRe," \u2014 "),oQ=n(vRe,"A",{href:!0});var m7t=s(oQ);bgr=r(m7t,"TFRobertaModel"),m7t.forEach(t),vgr=r(vRe," (RoBERTa model)"),vRe.forEach(t),Fgr=i(D),q7=n(D,"LI",{});var FRe=s(q7);Ebe=n(FRe,"STRONG",{});var g7t=s(Ebe);Tgr=r(g7t,"roformer"),g7t.forEach(t),Mgr=r(FRe," \u2014 "),rQ=n(FRe,"A",{href:!0});var h7t=s(rQ);Egr=r(h7t,"TFRoFormerModel"),h7t.forEach(t),Cgr=r(FRe," (RoFormer model)"),FRe.forEach(t),wgr=i(D),j7=n(D,"LI",{});var TRe=s(j7);Cbe=n(TRe,"STRONG",{});var p7t=s(Cbe);Agr=r(p7t,"speech_to_text"),p7t.forEach(t),ygr=r(TRe," \u2014 "),tQ=n(TRe,"A",{href:!0});var _7t=s(tQ);Lgr=r(_7t,"TFSpeech2TextModel"),_7t.forEach(t),xgr=r(TRe," (Speech2Text model)"),TRe.forEach(t),$gr=i(D),D7=n(D,"LI",{});var MRe=s(D7);wbe=n(MRe,"STRONG",{});var u7t=s(wbe);kgr=r(u7t,"swin"),u7t.forEach(t),Sgr=r(MRe," \u2014 "),aQ=n(MRe,"A",{href:!0});var b7t=s(aQ);Rgr=r(b7t,"TFSwinModel"),b7t.forEach(t),Pgr=r(MRe," (Swin model)"),MRe.forEach(t),Bgr=i(D),G7=n(D,"LI",{});var ERe=s(G7);Abe=n(ERe,"STRONG",{});var v7t=s(Abe);Igr=r(v7t,"t5"),v7t.forEach(t),Ngr=r(ERe," \u2014 "),nQ=n(ERe,"A",{href:!0});var F7t=s(nQ);qgr=r(F7t,"TFT5Model"),F7t.forEach(t),jgr=r(ERe," (T5 model)"),ERe.forEach(t),Dgr=i(D),O7=n(D,"LI",{});var CRe=s(O7);ybe=n(CRe,"STRONG",{});var T7t=s(ybe);Ggr=r(T7t,"tapas"),T7t.forEach(t),Ogr=r(CRe," \u2014 "),sQ=n(CRe,"A",{href:!0});var M7t=s(sQ);Vgr=r(M7t,"TFTapasModel"),M7t.forEach(t),Xgr=r(CRe," (TAPAS model)"),CRe.forEach(t),zgr=i(D),V7=n(D,"LI",{});var wRe=s(V7);Lbe=n(wRe,"STRONG",{});var E7t=s(Lbe);Wgr=r(E7t,"transfo-xl"),E7t.forEach(t),Qgr=r(wRe," \u2014 "),lQ=n(wRe,"A",{href:!0});var C7t=s(lQ);Hgr=r(C7t,"TFTransfoXLModel"),C7t.forEach(t),Ugr=r(wRe," (Transformer-XL model)"),wRe.forEach(t),Jgr=i(D),X7=n(D,"LI",{});var ARe=s(X7);xbe=n(ARe,"STRONG",{});var w7t=s(xbe);Ygr=r(w7t,"vit"),w7t.forEach(t),Kgr=r(ARe," \u2014 "),iQ=n(ARe,"A",{href:!0});var A7t=s(iQ);Zgr=r(A7t,"TFViTModel"),A7t.forEach(t),ehr=r(ARe," (ViT model)"),ARe.forEach(t),ohr=i(D),z7=n(D,"LI",{});var yRe=s(z7);$be=n(yRe,"STRONG",{});var y7t=s($be);rhr=r(y7t,"vit_mae"),y7t.forEach(t),thr=r(yRe," \u2014 "),dQ=n(yRe,"A",{href:!0});var L7t=s(dQ);ahr=r(L7t,"TFViTMAEModel"),L7t.forEach(t),nhr=r(yRe," (ViTMAE model)"),yRe.forEach(t),shr=i(D),W7=n(D,"LI",{});var LRe=s(W7);kbe=n(LRe,"STRONG",{});var x7t=s(kbe);lhr=r(x7t,"wav2vec2"),x7t.forEach(t),ihr=r(LRe," \u2014 "),cQ=n(LRe,"A",{href:!0});var $7t=s(cQ);dhr=r($7t,"TFWav2Vec2Model"),$7t.forEach(t),chr=r(LRe," (Wav2Vec2 model)"),LRe.forEach(t),fhr=i(D),Q7=n(D,"LI",{});var xRe=s(Q7);Sbe=n(xRe,"STRONG",{});var k7t=s(Sbe);mhr=r(k7t,"xlm"),k7t.forEach(t),ghr=r(xRe," \u2014 "),fQ=n(xRe,"A",{href:!0});var S7t=s(fQ);hhr=r(S7t,"TFXLMModel"),S7t.forEach(t),phr=r(xRe," (XLM model)"),xRe.forEach(t),_hr=i(D),H7=n(D,"LI",{});var $Re=s(H7);Rbe=n($Re,"STRONG",{});var R7t=s(Rbe);uhr=r(R7t,"xlm-roberta"),R7t.forEach(t),bhr=r($Re," \u2014 "),mQ=n($Re,"A",{href:!0});var P7t=s(mQ);vhr=r(P7t,"TFXLMRobertaModel"),P7t.forEach(t),Fhr=r($Re," (XLM-RoBERTa model)"),$Re.forEach(t),Thr=i(D),U7=n(D,"LI",{});var kRe=s(U7);Pbe=n(kRe,"STRONG",{});var B7t=s(Pbe);Mhr=r(B7t,"xlnet"),B7t.forEach(t),Ehr=r(kRe," \u2014 "),gQ=n(kRe,"A",{href:!0});var I7t=s(gQ);Chr=r(I7t,"TFXLNetModel"),I7t.forEach(t),whr=r(kRe," (XLNet model)"),kRe.forEach(t),D.forEach(t),Ahr=i(pl),T(J7.$$.fragment,pl),pl.forEach(t),hl.forEach(t),Pje=i(f),zd=n(f,"H2",{class:!0});var DGe=s(zd);Y7=n(DGe,"A",{id:!0,class:!0,href:!0});var N7t=s(Y7);Bbe=n(N7t,"SPAN",{});var q7t=s(Bbe);T(FL.$$.fragment,q7t),q7t.forEach(t),N7t.forEach(t),yhr=i(DGe),Ibe=n(DGe,"SPAN",{});var j7t=s(Ibe);Lhr=r(j7t,"TFAutoModelForPreTraining"),j7t.forEach(t),DGe.forEach(t),Bje=i(f),Ko=n(f,"DIV",{class:!0});var _l=s(Ko);T(TL.$$.fragment,_l),xhr=i(_l),Wd=n(_l,"P",{});var Aee=s(Wd);$hr=r(Aee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),hQ=n(Aee,"A",{href:!0});var D7t=s(hQ);khr=r(D7t,"from_pretrained()"),D7t.forEach(t),Shr=r(Aee," class method or the "),pQ=n(Aee,"A",{href:!0});var G7t=s(pQ);Rhr=r(G7t,"from_config()"),G7t.forEach(t),Phr=r(Aee,` class
method.`),Aee.forEach(t),Bhr=i(_l),ML=n(_l,"P",{});var GGe=s(ML);Ihr=r(GGe,"This class cannot be instantiated directly using "),Nbe=n(GGe,"CODE",{});var O7t=s(Nbe);Nhr=r(O7t,"__init__()"),O7t.forEach(t),qhr=r(GGe," (throws an error)."),GGe.forEach(t),jhr=i(_l),Lt=n(_l,"DIV",{class:!0});var Rw=s(Lt);T(EL.$$.fragment,Rw),Dhr=i(Rw),qbe=n(Rw,"P",{});var V7t=s(qbe);Ghr=r(V7t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),V7t.forEach(t),Ohr=i(Rw),Qd=n(Rw,"P",{});var yee=s(Qd);Vhr=r(yee,`Note:
Loading a model from its configuration file does `),jbe=n(yee,"STRONG",{});var X7t=s(jbe);Xhr=r(X7t,"not"),X7t.forEach(t),zhr=r(yee,` load the model weights. It only affects the
model\u2019s configuration. Use `),_Q=n(yee,"A",{href:!0});var z7t=s(_Q);Whr=r(z7t,"from_pretrained()"),z7t.forEach(t),Qhr=r(yee," to load the model weights."),yee.forEach(t),Hhr=i(Rw),T(K7.$$.fragment,Rw),Rw.forEach(t),Uhr=i(_l),Ar=n(_l,"DIV",{class:!0});var ul=s(Ar);T(CL.$$.fragment,ul),Jhr=i(ul),Dbe=n(ul,"P",{});var W7t=s(Dbe);Yhr=r(W7t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),W7t.forEach(t),Khr=i(ul),Za=n(ul,"P",{});var Pw=s(Za);Zhr=r(Pw,"The model class to instantiate is selected based on the "),Gbe=n(Pw,"CODE",{});var Q7t=s(Gbe);epr=r(Q7t,"model_type"),Q7t.forEach(t),opr=r(Pw,` property of the config object (either
passed as an argument or loaded from `),Obe=n(Pw,"CODE",{});var H7t=s(Obe);rpr=r(H7t,"pretrained_model_name_or_path"),H7t.forEach(t),tpr=r(Pw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vbe=n(Pw,"CODE",{});var U7t=s(Vbe);apr=r(U7t,"pretrained_model_name_or_path"),U7t.forEach(t),npr=r(Pw,":"),Pw.forEach(t),spr=i(ul),se=n(ul,"UL",{});var le=s(se);Z7=n(le,"LI",{});var SRe=s(Z7);Xbe=n(SRe,"STRONG",{});var J7t=s(Xbe);lpr=r(J7t,"albert"),J7t.forEach(t),ipr=r(SRe," \u2014 "),uQ=n(SRe,"A",{href:!0});var Y7t=s(uQ);dpr=r(Y7t,"TFAlbertForPreTraining"),Y7t.forEach(t),cpr=r(SRe," (ALBERT model)"),SRe.forEach(t),fpr=i(le),e9=n(le,"LI",{});var RRe=s(e9);zbe=n(RRe,"STRONG",{});var K7t=s(zbe);mpr=r(K7t,"bart"),K7t.forEach(t),gpr=r(RRe," \u2014 "),bQ=n(RRe,"A",{href:!0});var Z7t=s(bQ);hpr=r(Z7t,"TFBartForConditionalGeneration"),Z7t.forEach(t),ppr=r(RRe," (BART model)"),RRe.forEach(t),_pr=i(le),o9=n(le,"LI",{});var PRe=s(o9);Wbe=n(PRe,"STRONG",{});var e9t=s(Wbe);upr=r(e9t,"bert"),e9t.forEach(t),bpr=r(PRe," \u2014 "),vQ=n(PRe,"A",{href:!0});var o9t=s(vQ);vpr=r(o9t,"TFBertForPreTraining"),o9t.forEach(t),Fpr=r(PRe," (BERT model)"),PRe.forEach(t),Tpr=i(le),r9=n(le,"LI",{});var BRe=s(r9);Qbe=n(BRe,"STRONG",{});var r9t=s(Qbe);Mpr=r(r9t,"camembert"),r9t.forEach(t),Epr=r(BRe," \u2014 "),FQ=n(BRe,"A",{href:!0});var t9t=s(FQ);Cpr=r(t9t,"TFCamembertForMaskedLM"),t9t.forEach(t),wpr=r(BRe," (CamemBERT model)"),BRe.forEach(t),Apr=i(le),t9=n(le,"LI",{});var IRe=s(t9);Hbe=n(IRe,"STRONG",{});var a9t=s(Hbe);ypr=r(a9t,"ctrl"),a9t.forEach(t),Lpr=r(IRe," \u2014 "),TQ=n(IRe,"A",{href:!0});var n9t=s(TQ);xpr=r(n9t,"TFCTRLLMHeadModel"),n9t.forEach(t),$pr=r(IRe," (CTRL model)"),IRe.forEach(t),kpr=i(le),a9=n(le,"LI",{});var NRe=s(a9);Ube=n(NRe,"STRONG",{});var s9t=s(Ube);Spr=r(s9t,"distilbert"),s9t.forEach(t),Rpr=r(NRe," \u2014 "),MQ=n(NRe,"A",{href:!0});var l9t=s(MQ);Ppr=r(l9t,"TFDistilBertForMaskedLM"),l9t.forEach(t),Bpr=r(NRe," (DistilBERT model)"),NRe.forEach(t),Ipr=i(le),n9=n(le,"LI",{});var qRe=s(n9);Jbe=n(qRe,"STRONG",{});var i9t=s(Jbe);Npr=r(i9t,"electra"),i9t.forEach(t),qpr=r(qRe," \u2014 "),EQ=n(qRe,"A",{href:!0});var d9t=s(EQ);jpr=r(d9t,"TFElectraForPreTraining"),d9t.forEach(t),Dpr=r(qRe," (ELECTRA model)"),qRe.forEach(t),Gpr=i(le),s9=n(le,"LI",{});var jRe=s(s9);Ybe=n(jRe,"STRONG",{});var c9t=s(Ybe);Opr=r(c9t,"flaubert"),c9t.forEach(t),Vpr=r(jRe," \u2014 "),CQ=n(jRe,"A",{href:!0});var f9t=s(CQ);Xpr=r(f9t,"TFFlaubertWithLMHeadModel"),f9t.forEach(t),zpr=r(jRe," (FlauBERT model)"),jRe.forEach(t),Wpr=i(le),l9=n(le,"LI",{});var DRe=s(l9);Kbe=n(DRe,"STRONG",{});var m9t=s(Kbe);Qpr=r(m9t,"funnel"),m9t.forEach(t),Hpr=r(DRe," \u2014 "),wQ=n(DRe,"A",{href:!0});var g9t=s(wQ);Upr=r(g9t,"TFFunnelForPreTraining"),g9t.forEach(t),Jpr=r(DRe," (Funnel Transformer model)"),DRe.forEach(t),Ypr=i(le),i9=n(le,"LI",{});var GRe=s(i9);Zbe=n(GRe,"STRONG",{});var h9t=s(Zbe);Kpr=r(h9t,"gpt2"),h9t.forEach(t),Zpr=r(GRe," \u2014 "),AQ=n(GRe,"A",{href:!0});var p9t=s(AQ);e_r=r(p9t,"TFGPT2LMHeadModel"),p9t.forEach(t),o_r=r(GRe," (OpenAI GPT-2 model)"),GRe.forEach(t),r_r=i(le),d9=n(le,"LI",{});var ORe=s(d9);eve=n(ORe,"STRONG",{});var _9t=s(eve);t_r=r(_9t,"layoutlm"),_9t.forEach(t),a_r=r(ORe," \u2014 "),yQ=n(ORe,"A",{href:!0});var u9t=s(yQ);n_r=r(u9t,"TFLayoutLMForMaskedLM"),u9t.forEach(t),s_r=r(ORe," (LayoutLM model)"),ORe.forEach(t),l_r=i(le),c9=n(le,"LI",{});var VRe=s(c9);ove=n(VRe,"STRONG",{});var b9t=s(ove);i_r=r(b9t,"lxmert"),b9t.forEach(t),d_r=r(VRe," \u2014 "),LQ=n(VRe,"A",{href:!0});var v9t=s(LQ);c_r=r(v9t,"TFLxmertForPreTraining"),v9t.forEach(t),f_r=r(VRe," (LXMERT model)"),VRe.forEach(t),m_r=i(le),f9=n(le,"LI",{});var XRe=s(f9);rve=n(XRe,"STRONG",{});var F9t=s(rve);g_r=r(F9t,"mobilebert"),F9t.forEach(t),h_r=r(XRe," \u2014 "),xQ=n(XRe,"A",{href:!0});var T9t=s(xQ);p_r=r(T9t,"TFMobileBertForPreTraining"),T9t.forEach(t),__r=r(XRe," (MobileBERT model)"),XRe.forEach(t),u_r=i(le),m9=n(le,"LI",{});var zRe=s(m9);tve=n(zRe,"STRONG",{});var M9t=s(tve);b_r=r(M9t,"mpnet"),M9t.forEach(t),v_r=r(zRe," \u2014 "),$Q=n(zRe,"A",{href:!0});var E9t=s($Q);F_r=r(E9t,"TFMPNetForMaskedLM"),E9t.forEach(t),T_r=r(zRe," (MPNet model)"),zRe.forEach(t),M_r=i(le),g9=n(le,"LI",{});var WRe=s(g9);ave=n(WRe,"STRONG",{});var C9t=s(ave);E_r=r(C9t,"openai-gpt"),C9t.forEach(t),C_r=r(WRe," \u2014 "),kQ=n(WRe,"A",{href:!0});var w9t=s(kQ);w_r=r(w9t,"TFOpenAIGPTLMHeadModel"),w9t.forEach(t),A_r=r(WRe," (OpenAI GPT model)"),WRe.forEach(t),y_r=i(le),h9=n(le,"LI",{});var QRe=s(h9);nve=n(QRe,"STRONG",{});var A9t=s(nve);L_r=r(A9t,"roberta"),A9t.forEach(t),x_r=r(QRe," \u2014 "),SQ=n(QRe,"A",{href:!0});var y9t=s(SQ);$_r=r(y9t,"TFRobertaForMaskedLM"),y9t.forEach(t),k_r=r(QRe," (RoBERTa model)"),QRe.forEach(t),S_r=i(le),p9=n(le,"LI",{});var HRe=s(p9);sve=n(HRe,"STRONG",{});var L9t=s(sve);R_r=r(L9t,"t5"),L9t.forEach(t),P_r=r(HRe," \u2014 "),RQ=n(HRe,"A",{href:!0});var x9t=s(RQ);B_r=r(x9t,"TFT5ForConditionalGeneration"),x9t.forEach(t),I_r=r(HRe," (T5 model)"),HRe.forEach(t),N_r=i(le),_9=n(le,"LI",{});var URe=s(_9);lve=n(URe,"STRONG",{});var $9t=s(lve);q_r=r($9t,"tapas"),$9t.forEach(t),j_r=r(URe," \u2014 "),PQ=n(URe,"A",{href:!0});var k9t=s(PQ);D_r=r(k9t,"TFTapasForMaskedLM"),k9t.forEach(t),G_r=r(URe," (TAPAS model)"),URe.forEach(t),O_r=i(le),u9=n(le,"LI",{});var JRe=s(u9);ive=n(JRe,"STRONG",{});var S9t=s(ive);V_r=r(S9t,"transfo-xl"),S9t.forEach(t),X_r=r(JRe," \u2014 "),BQ=n(JRe,"A",{href:!0});var R9t=s(BQ);z_r=r(R9t,"TFTransfoXLLMHeadModel"),R9t.forEach(t),W_r=r(JRe," (Transformer-XL model)"),JRe.forEach(t),Q_r=i(le),b9=n(le,"LI",{});var YRe=s(b9);dve=n(YRe,"STRONG",{});var P9t=s(dve);H_r=r(P9t,"vit_mae"),P9t.forEach(t),U_r=r(YRe," \u2014 "),IQ=n(YRe,"A",{href:!0});var B9t=s(IQ);J_r=r(B9t,"TFViTMAEForPreTraining"),B9t.forEach(t),Y_r=r(YRe," (ViTMAE model)"),YRe.forEach(t),K_r=i(le),v9=n(le,"LI",{});var KRe=s(v9);cve=n(KRe,"STRONG",{});var I9t=s(cve);Z_r=r(I9t,"xlm"),I9t.forEach(t),eur=r(KRe," \u2014 "),NQ=n(KRe,"A",{href:!0});var N9t=s(NQ);our=r(N9t,"TFXLMWithLMHeadModel"),N9t.forEach(t),rur=r(KRe," (XLM model)"),KRe.forEach(t),tur=i(le),F9=n(le,"LI",{});var ZRe=s(F9);fve=n(ZRe,"STRONG",{});var q9t=s(fve);aur=r(q9t,"xlm-roberta"),q9t.forEach(t),nur=r(ZRe," \u2014 "),qQ=n(ZRe,"A",{href:!0});var j9t=s(qQ);sur=r(j9t,"TFXLMRobertaForMaskedLM"),j9t.forEach(t),lur=r(ZRe," (XLM-RoBERTa model)"),ZRe.forEach(t),iur=i(le),T9=n(le,"LI",{});var ePe=s(T9);mve=n(ePe,"STRONG",{});var D9t=s(mve);dur=r(D9t,"xlnet"),D9t.forEach(t),cur=r(ePe," \u2014 "),jQ=n(ePe,"A",{href:!0});var G9t=s(jQ);fur=r(G9t,"TFXLNetLMHeadModel"),G9t.forEach(t),mur=r(ePe," (XLNet model)"),ePe.forEach(t),le.forEach(t),gur=i(ul),T(M9.$$.fragment,ul),ul.forEach(t),_l.forEach(t),Ije=i(f),Hd=n(f,"H2",{class:!0});var OGe=s(Hd);E9=n(OGe,"A",{id:!0,class:!0,href:!0});var O9t=s(E9);gve=n(O9t,"SPAN",{});var V9t=s(gve);T(wL.$$.fragment,V9t),V9t.forEach(t),O9t.forEach(t),hur=i(OGe),hve=n(OGe,"SPAN",{});var X9t=s(hve);pur=r(X9t,"TFAutoModelForCausalLM"),X9t.forEach(t),OGe.forEach(t),Nje=i(f),Zo=n(f,"DIV",{class:!0});var bl=s(Zo);T(AL.$$.fragment,bl),_ur=i(bl),Ud=n(bl,"P",{});var Lee=s(Ud);uur=r(Lee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),DQ=n(Lee,"A",{href:!0});var z9t=s(DQ);bur=r(z9t,"from_pretrained()"),z9t.forEach(t),vur=r(Lee," class method or the "),GQ=n(Lee,"A",{href:!0});var W9t=s(GQ);Fur=r(W9t,"from_config()"),W9t.forEach(t),Tur=r(Lee,` class
method.`),Lee.forEach(t),Mur=i(bl),yL=n(bl,"P",{});var VGe=s(yL);Eur=r(VGe,"This class cannot be instantiated directly using "),pve=n(VGe,"CODE",{});var Q9t=s(pve);Cur=r(Q9t,"__init__()"),Q9t.forEach(t),wur=r(VGe," (throws an error)."),VGe.forEach(t),Aur=i(bl),xt=n(bl,"DIV",{class:!0});var Bw=s(xt);T(LL.$$.fragment,Bw),yur=i(Bw),_ve=n(Bw,"P",{});var H9t=s(_ve);Lur=r(H9t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),H9t.forEach(t),xur=i(Bw),Jd=n(Bw,"P",{});var xee=s(Jd);$ur=r(xee,`Note:
Loading a model from its configuration file does `),uve=n(xee,"STRONG",{});var U9t=s(uve);kur=r(U9t,"not"),U9t.forEach(t),Sur=r(xee,` load the model weights. It only affects the
model\u2019s configuration. Use `),OQ=n(xee,"A",{href:!0});var J9t=s(OQ);Rur=r(J9t,"from_pretrained()"),J9t.forEach(t),Pur=r(xee," to load the model weights."),xee.forEach(t),Bur=i(Bw),T(C9.$$.fragment,Bw),Bw.forEach(t),Iur=i(bl),yr=n(bl,"DIV",{class:!0});var vl=s(yr);T(xL.$$.fragment,vl),Nur=i(vl),bve=n(vl,"P",{});var Y9t=s(bve);qur=r(Y9t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Y9t.forEach(t),jur=i(vl),en=n(vl,"P",{});var Iw=s(en);Dur=r(Iw,"The model class to instantiate is selected based on the "),vve=n(Iw,"CODE",{});var K9t=s(vve);Gur=r(K9t,"model_type"),K9t.forEach(t),Our=r(Iw,` property of the config object (either
passed as an argument or loaded from `),Fve=n(Iw,"CODE",{});var Z9t=s(Fve);Vur=r(Z9t,"pretrained_model_name_or_path"),Z9t.forEach(t),Xur=r(Iw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tve=n(Iw,"CODE",{});var eMt=s(Tve);zur=r(eMt,"pretrained_model_name_or_path"),eMt.forEach(t),Wur=r(Iw,":"),Iw.forEach(t),Qur=i(vl),Ee=n(vl,"UL",{});var we=s(Ee);w9=n(we,"LI",{});var oPe=s(w9);Mve=n(oPe,"STRONG",{});var oMt=s(Mve);Hur=r(oMt,"bert"),oMt.forEach(t),Uur=r(oPe," \u2014 "),VQ=n(oPe,"A",{href:!0});var rMt=s(VQ);Jur=r(rMt,"TFBertLMHeadModel"),rMt.forEach(t),Yur=r(oPe," (BERT model)"),oPe.forEach(t),Kur=i(we),A9=n(we,"LI",{});var rPe=s(A9);Eve=n(rPe,"STRONG",{});var tMt=s(Eve);Zur=r(tMt,"camembert"),tMt.forEach(t),e2r=r(rPe," \u2014 "),XQ=n(rPe,"A",{href:!0});var aMt=s(XQ);o2r=r(aMt,"TFCamembertForCausalLM"),aMt.forEach(t),r2r=r(rPe," (CamemBERT model)"),rPe.forEach(t),t2r=i(we),y9=n(we,"LI",{});var tPe=s(y9);Cve=n(tPe,"STRONG",{});var nMt=s(Cve);a2r=r(nMt,"ctrl"),nMt.forEach(t),n2r=r(tPe," \u2014 "),zQ=n(tPe,"A",{href:!0});var sMt=s(zQ);s2r=r(sMt,"TFCTRLLMHeadModel"),sMt.forEach(t),l2r=r(tPe," (CTRL model)"),tPe.forEach(t),i2r=i(we),L9=n(we,"LI",{});var aPe=s(L9);wve=n(aPe,"STRONG",{});var lMt=s(wve);d2r=r(lMt,"gpt2"),lMt.forEach(t),c2r=r(aPe," \u2014 "),WQ=n(aPe,"A",{href:!0});var iMt=s(WQ);f2r=r(iMt,"TFGPT2LMHeadModel"),iMt.forEach(t),m2r=r(aPe," (OpenAI GPT-2 model)"),aPe.forEach(t),g2r=i(we),x9=n(we,"LI",{});var nPe=s(x9);Ave=n(nPe,"STRONG",{});var dMt=s(Ave);h2r=r(dMt,"gptj"),dMt.forEach(t),p2r=r(nPe," \u2014 "),QQ=n(nPe,"A",{href:!0});var cMt=s(QQ);_2r=r(cMt,"TFGPTJForCausalLM"),cMt.forEach(t),u2r=r(nPe," (GPT-J model)"),nPe.forEach(t),b2r=i(we),$9=n(we,"LI",{});var sPe=s($9);yve=n(sPe,"STRONG",{});var fMt=s(yve);v2r=r(fMt,"openai-gpt"),fMt.forEach(t),F2r=r(sPe," \u2014 "),HQ=n(sPe,"A",{href:!0});var mMt=s(HQ);T2r=r(mMt,"TFOpenAIGPTLMHeadModel"),mMt.forEach(t),M2r=r(sPe," (OpenAI GPT model)"),sPe.forEach(t),E2r=i(we),k9=n(we,"LI",{});var lPe=s(k9);Lve=n(lPe,"STRONG",{});var gMt=s(Lve);C2r=r(gMt,"rembert"),gMt.forEach(t),w2r=r(lPe," \u2014 "),UQ=n(lPe,"A",{href:!0});var hMt=s(UQ);A2r=r(hMt,"TFRemBertForCausalLM"),hMt.forEach(t),y2r=r(lPe," (RemBERT model)"),lPe.forEach(t),L2r=i(we),S9=n(we,"LI",{});var iPe=s(S9);xve=n(iPe,"STRONG",{});var pMt=s(xve);x2r=r(pMt,"roberta"),pMt.forEach(t),$2r=r(iPe," \u2014 "),JQ=n(iPe,"A",{href:!0});var _Mt=s(JQ);k2r=r(_Mt,"TFRobertaForCausalLM"),_Mt.forEach(t),S2r=r(iPe," (RoBERTa model)"),iPe.forEach(t),R2r=i(we),R9=n(we,"LI",{});var dPe=s(R9);$ve=n(dPe,"STRONG",{});var uMt=s($ve);P2r=r(uMt,"roformer"),uMt.forEach(t),B2r=r(dPe," \u2014 "),YQ=n(dPe,"A",{href:!0});var bMt=s(YQ);I2r=r(bMt,"TFRoFormerForCausalLM"),bMt.forEach(t),N2r=r(dPe," (RoFormer model)"),dPe.forEach(t),q2r=i(we),P9=n(we,"LI",{});var cPe=s(P9);kve=n(cPe,"STRONG",{});var vMt=s(kve);j2r=r(vMt,"transfo-xl"),vMt.forEach(t),D2r=r(cPe," \u2014 "),KQ=n(cPe,"A",{href:!0});var FMt=s(KQ);G2r=r(FMt,"TFTransfoXLLMHeadModel"),FMt.forEach(t),O2r=r(cPe," (Transformer-XL model)"),cPe.forEach(t),V2r=i(we),B9=n(we,"LI",{});var fPe=s(B9);Sve=n(fPe,"STRONG",{});var TMt=s(Sve);X2r=r(TMt,"xlm"),TMt.forEach(t),z2r=r(fPe," \u2014 "),ZQ=n(fPe,"A",{href:!0});var MMt=s(ZQ);W2r=r(MMt,"TFXLMWithLMHeadModel"),MMt.forEach(t),Q2r=r(fPe," (XLM model)"),fPe.forEach(t),H2r=i(we),I9=n(we,"LI",{});var mPe=s(I9);Rve=n(mPe,"STRONG",{});var EMt=s(Rve);U2r=r(EMt,"xlnet"),EMt.forEach(t),J2r=r(mPe," \u2014 "),eH=n(mPe,"A",{href:!0});var CMt=s(eH);Y2r=r(CMt,"TFXLNetLMHeadModel"),CMt.forEach(t),K2r=r(mPe," (XLNet model)"),mPe.forEach(t),we.forEach(t),Z2r=i(vl),T(N9.$$.fragment,vl),vl.forEach(t),bl.forEach(t),qje=i(f),Yd=n(f,"H2",{class:!0});var XGe=s(Yd);q9=n(XGe,"A",{id:!0,class:!0,href:!0});var wMt=s(q9);Pve=n(wMt,"SPAN",{});var AMt=s(Pve);T($L.$$.fragment,AMt),AMt.forEach(t),wMt.forEach(t),e1r=i(XGe),Bve=n(XGe,"SPAN",{});var yMt=s(Bve);o1r=r(yMt,"TFAutoModelForImageClassification"),yMt.forEach(t),XGe.forEach(t),jje=i(f),er=n(f,"DIV",{class:!0});var Fl=s(er);T(kL.$$.fragment,Fl),r1r=i(Fl),Kd=n(Fl,"P",{});var $ee=s(Kd);t1r=r($ee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),oH=n($ee,"A",{href:!0});var LMt=s(oH);a1r=r(LMt,"from_pretrained()"),LMt.forEach(t),n1r=r($ee," class method or the "),rH=n($ee,"A",{href:!0});var xMt=s(rH);s1r=r(xMt,"from_config()"),xMt.forEach(t),l1r=r($ee,` class
method.`),$ee.forEach(t),i1r=i(Fl),SL=n(Fl,"P",{});var zGe=s(SL);d1r=r(zGe,"This class cannot be instantiated directly using "),Ive=n(zGe,"CODE",{});var $Mt=s(Ive);c1r=r($Mt,"__init__()"),$Mt.forEach(t),f1r=r(zGe," (throws an error)."),zGe.forEach(t),m1r=i(Fl),$t=n(Fl,"DIV",{class:!0});var Nw=s($t);T(RL.$$.fragment,Nw),g1r=i(Nw),Nve=n(Nw,"P",{});var kMt=s(Nve);h1r=r(kMt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),kMt.forEach(t),p1r=i(Nw),Zd=n(Nw,"P",{});var kee=s(Zd);_1r=r(kee,`Note:
Loading a model from its configuration file does `),qve=n(kee,"STRONG",{});var SMt=s(qve);u1r=r(SMt,"not"),SMt.forEach(t),b1r=r(kee,` load the model weights. It only affects the
model\u2019s configuration. Use `),tH=n(kee,"A",{href:!0});var RMt=s(tH);v1r=r(RMt,"from_pretrained()"),RMt.forEach(t),F1r=r(kee," to load the model weights."),kee.forEach(t),T1r=i(Nw),T(j9.$$.fragment,Nw),Nw.forEach(t),M1r=i(Fl),Lr=n(Fl,"DIV",{class:!0});var Tl=s(Lr);T(PL.$$.fragment,Tl),E1r=i(Tl),jve=n(Tl,"P",{});var PMt=s(jve);C1r=r(PMt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),PMt.forEach(t),w1r=i(Tl),on=n(Tl,"P",{});var qw=s(on);A1r=r(qw,"The model class to instantiate is selected based on the "),Dve=n(qw,"CODE",{});var BMt=s(Dve);y1r=r(BMt,"model_type"),BMt.forEach(t),L1r=r(qw,` property of the config object (either
passed as an argument or loaded from `),Gve=n(qw,"CODE",{});var IMt=s(Gve);x1r=r(IMt,"pretrained_model_name_or_path"),IMt.forEach(t),$1r=r(qw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ove=n(qw,"CODE",{});var NMt=s(Ove);k1r=r(NMt,"pretrained_model_name_or_path"),NMt.forEach(t),S1r=r(qw,":"),qw.forEach(t),R1r=i(Tl),rn=n(Tl,"UL",{});var jw=s(rn);D9=n(jw,"LI",{});var gPe=s(D9);Vve=n(gPe,"STRONG",{});var qMt=s(Vve);P1r=r(qMt,"convnext"),qMt.forEach(t),B1r=r(gPe," \u2014 "),aH=n(gPe,"A",{href:!0});var jMt=s(aH);I1r=r(jMt,"TFConvNextForImageClassification"),jMt.forEach(t),N1r=r(gPe," (ConvNext model)"),gPe.forEach(t),q1r=i(jw),G9=n(jw,"LI",{});var hPe=s(G9);Xve=n(hPe,"STRONG",{});var DMt=s(Xve);j1r=r(DMt,"data2vec-vision"),DMt.forEach(t),D1r=r(hPe," \u2014 "),nH=n(hPe,"A",{href:!0});var GMt=s(nH);G1r=r(GMt,"TFData2VecVisionForImageClassification"),GMt.forEach(t),O1r=r(hPe," (Data2VecVision model)"),hPe.forEach(t),V1r=i(jw),O9=n(jw,"LI",{});var pPe=s(O9);zve=n(pPe,"STRONG",{});var OMt=s(zve);X1r=r(OMt,"swin"),OMt.forEach(t),z1r=r(pPe," \u2014 "),sH=n(pPe,"A",{href:!0});var VMt=s(sH);W1r=r(VMt,"TFSwinForImageClassification"),VMt.forEach(t),Q1r=r(pPe," (Swin model)"),pPe.forEach(t),H1r=i(jw),V9=n(jw,"LI",{});var _Pe=s(V9);Wve=n(_Pe,"STRONG",{});var XMt=s(Wve);U1r=r(XMt,"vit"),XMt.forEach(t),J1r=r(_Pe," \u2014 "),lH=n(_Pe,"A",{href:!0});var zMt=s(lH);Y1r=r(zMt,"TFViTForImageClassification"),zMt.forEach(t),K1r=r(_Pe," (ViT model)"),_Pe.forEach(t),jw.forEach(t),Z1r=i(Tl),T(X9.$$.fragment,Tl),Tl.forEach(t),Fl.forEach(t),Dje=i(f),ec=n(f,"H2",{class:!0});var WGe=s(ec);z9=n(WGe,"A",{id:!0,class:!0,href:!0});var WMt=s(z9);Qve=n(WMt,"SPAN",{});var QMt=s(Qve);T(BL.$$.fragment,QMt),QMt.forEach(t),WMt.forEach(t),ebr=i(WGe),Hve=n(WGe,"SPAN",{});var HMt=s(Hve);obr=r(HMt,"TFAutoModelForMaskedLM"),HMt.forEach(t),WGe.forEach(t),Gje=i(f),or=n(f,"DIV",{class:!0});var Ml=s(or);T(IL.$$.fragment,Ml),rbr=i(Ml),oc=n(Ml,"P",{});var See=s(oc);tbr=r(See,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),iH=n(See,"A",{href:!0});var UMt=s(iH);abr=r(UMt,"from_pretrained()"),UMt.forEach(t),nbr=r(See," class method or the "),dH=n(See,"A",{href:!0});var JMt=s(dH);sbr=r(JMt,"from_config()"),JMt.forEach(t),lbr=r(See,` class
method.`),See.forEach(t),ibr=i(Ml),NL=n(Ml,"P",{});var QGe=s(NL);dbr=r(QGe,"This class cannot be instantiated directly using "),Uve=n(QGe,"CODE",{});var YMt=s(Uve);cbr=r(YMt,"__init__()"),YMt.forEach(t),fbr=r(QGe," (throws an error)."),QGe.forEach(t),mbr=i(Ml),kt=n(Ml,"DIV",{class:!0});var Dw=s(kt);T(qL.$$.fragment,Dw),gbr=i(Dw),Jve=n(Dw,"P",{});var KMt=s(Jve);hbr=r(KMt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),KMt.forEach(t),pbr=i(Dw),rc=n(Dw,"P",{});var Ree=s(rc);_br=r(Ree,`Note:
Loading a model from its configuration file does `),Yve=n(Ree,"STRONG",{});var ZMt=s(Yve);ubr=r(ZMt,"not"),ZMt.forEach(t),bbr=r(Ree,` load the model weights. It only affects the
model\u2019s configuration. Use `),cH=n(Ree,"A",{href:!0});var e4t=s(cH);vbr=r(e4t,"from_pretrained()"),e4t.forEach(t),Fbr=r(Ree," to load the model weights."),Ree.forEach(t),Tbr=i(Dw),T(W9.$$.fragment,Dw),Dw.forEach(t),Mbr=i(Ml),xr=n(Ml,"DIV",{class:!0});var El=s(xr);T(jL.$$.fragment,El),Ebr=i(El),Kve=n(El,"P",{});var o4t=s(Kve);Cbr=r(o4t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),o4t.forEach(t),wbr=i(El),tn=n(El,"P",{});var Gw=s(tn);Abr=r(Gw,"The model class to instantiate is selected based on the "),Zve=n(Gw,"CODE",{});var r4t=s(Zve);ybr=r(r4t,"model_type"),r4t.forEach(t),Lbr=r(Gw,` property of the config object (either
passed as an argument or loaded from `),eFe=n(Gw,"CODE",{});var t4t=s(eFe);xbr=r(t4t,"pretrained_model_name_or_path"),t4t.forEach(t),$br=r(Gw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oFe=n(Gw,"CODE",{});var a4t=s(oFe);kbr=r(a4t,"pretrained_model_name_or_path"),a4t.forEach(t),Sbr=r(Gw,":"),Gw.forEach(t),Rbr=i(El),ie=n(El,"UL",{});var fe=s(ie);Q9=n(fe,"LI",{});var uPe=s(Q9);rFe=n(uPe,"STRONG",{});var n4t=s(rFe);Pbr=r(n4t,"albert"),n4t.forEach(t),Bbr=r(uPe," \u2014 "),fH=n(uPe,"A",{href:!0});var s4t=s(fH);Ibr=r(s4t,"TFAlbertForMaskedLM"),s4t.forEach(t),Nbr=r(uPe," (ALBERT model)"),uPe.forEach(t),qbr=i(fe),H9=n(fe,"LI",{});var bPe=s(H9);tFe=n(bPe,"STRONG",{});var l4t=s(tFe);jbr=r(l4t,"bert"),l4t.forEach(t),Dbr=r(bPe," \u2014 "),mH=n(bPe,"A",{href:!0});var i4t=s(mH);Gbr=r(i4t,"TFBertForMaskedLM"),i4t.forEach(t),Obr=r(bPe," (BERT model)"),bPe.forEach(t),Vbr=i(fe),U9=n(fe,"LI",{});var vPe=s(U9);aFe=n(vPe,"STRONG",{});var d4t=s(aFe);Xbr=r(d4t,"camembert"),d4t.forEach(t),zbr=r(vPe," \u2014 "),gH=n(vPe,"A",{href:!0});var c4t=s(gH);Wbr=r(c4t,"TFCamembertForMaskedLM"),c4t.forEach(t),Qbr=r(vPe," (CamemBERT model)"),vPe.forEach(t),Hbr=i(fe),J9=n(fe,"LI",{});var FPe=s(J9);nFe=n(FPe,"STRONG",{});var f4t=s(nFe);Ubr=r(f4t,"convbert"),f4t.forEach(t),Jbr=r(FPe," \u2014 "),hH=n(FPe,"A",{href:!0});var m4t=s(hH);Ybr=r(m4t,"TFConvBertForMaskedLM"),m4t.forEach(t),Kbr=r(FPe," (ConvBERT model)"),FPe.forEach(t),Zbr=i(fe),Y9=n(fe,"LI",{});var TPe=s(Y9);sFe=n(TPe,"STRONG",{});var g4t=s(sFe);evr=r(g4t,"deberta"),g4t.forEach(t),ovr=r(TPe," \u2014 "),pH=n(TPe,"A",{href:!0});var h4t=s(pH);rvr=r(h4t,"TFDebertaForMaskedLM"),h4t.forEach(t),tvr=r(TPe," (DeBERTa model)"),TPe.forEach(t),avr=i(fe),K9=n(fe,"LI",{});var MPe=s(K9);lFe=n(MPe,"STRONG",{});var p4t=s(lFe);nvr=r(p4t,"deberta-v2"),p4t.forEach(t),svr=r(MPe," \u2014 "),_H=n(MPe,"A",{href:!0});var _4t=s(_H);lvr=r(_4t,"TFDebertaV2ForMaskedLM"),_4t.forEach(t),ivr=r(MPe," (DeBERTa-v2 model)"),MPe.forEach(t),dvr=i(fe),Z9=n(fe,"LI",{});var EPe=s(Z9);iFe=n(EPe,"STRONG",{});var u4t=s(iFe);cvr=r(u4t,"distilbert"),u4t.forEach(t),fvr=r(EPe," \u2014 "),uH=n(EPe,"A",{href:!0});var b4t=s(uH);mvr=r(b4t,"TFDistilBertForMaskedLM"),b4t.forEach(t),gvr=r(EPe," (DistilBERT model)"),EPe.forEach(t),hvr=i(fe),eM=n(fe,"LI",{});var CPe=s(eM);dFe=n(CPe,"STRONG",{});var v4t=s(dFe);pvr=r(v4t,"electra"),v4t.forEach(t),_vr=r(CPe," \u2014 "),bH=n(CPe,"A",{href:!0});var F4t=s(bH);uvr=r(F4t,"TFElectraForMaskedLM"),F4t.forEach(t),bvr=r(CPe," (ELECTRA model)"),CPe.forEach(t),vvr=i(fe),oM=n(fe,"LI",{});var wPe=s(oM);cFe=n(wPe,"STRONG",{});var T4t=s(cFe);Fvr=r(T4t,"flaubert"),T4t.forEach(t),Tvr=r(wPe," \u2014 "),vH=n(wPe,"A",{href:!0});var M4t=s(vH);Mvr=r(M4t,"TFFlaubertWithLMHeadModel"),M4t.forEach(t),Evr=r(wPe," (FlauBERT model)"),wPe.forEach(t),Cvr=i(fe),rM=n(fe,"LI",{});var APe=s(rM);fFe=n(APe,"STRONG",{});var E4t=s(fFe);wvr=r(E4t,"funnel"),E4t.forEach(t),Avr=r(APe," \u2014 "),FH=n(APe,"A",{href:!0});var C4t=s(FH);yvr=r(C4t,"TFFunnelForMaskedLM"),C4t.forEach(t),Lvr=r(APe," (Funnel Transformer model)"),APe.forEach(t),xvr=i(fe),tM=n(fe,"LI",{});var yPe=s(tM);mFe=n(yPe,"STRONG",{});var w4t=s(mFe);$vr=r(w4t,"layoutlm"),w4t.forEach(t),kvr=r(yPe," \u2014 "),TH=n(yPe,"A",{href:!0});var A4t=s(TH);Svr=r(A4t,"TFLayoutLMForMaskedLM"),A4t.forEach(t),Rvr=r(yPe," (LayoutLM model)"),yPe.forEach(t),Pvr=i(fe),aM=n(fe,"LI",{});var LPe=s(aM);gFe=n(LPe,"STRONG",{});var y4t=s(gFe);Bvr=r(y4t,"longformer"),y4t.forEach(t),Ivr=r(LPe," \u2014 "),MH=n(LPe,"A",{href:!0});var L4t=s(MH);Nvr=r(L4t,"TFLongformerForMaskedLM"),L4t.forEach(t),qvr=r(LPe," (Longformer model)"),LPe.forEach(t),jvr=i(fe),nM=n(fe,"LI",{});var xPe=s(nM);hFe=n(xPe,"STRONG",{});var x4t=s(hFe);Dvr=r(x4t,"mobilebert"),x4t.forEach(t),Gvr=r(xPe," \u2014 "),EH=n(xPe,"A",{href:!0});var $4t=s(EH);Ovr=r($4t,"TFMobileBertForMaskedLM"),$4t.forEach(t),Vvr=r(xPe," (MobileBERT model)"),xPe.forEach(t),Xvr=i(fe),sM=n(fe,"LI",{});var $Pe=s(sM);pFe=n($Pe,"STRONG",{});var k4t=s(pFe);zvr=r(k4t,"mpnet"),k4t.forEach(t),Wvr=r($Pe," \u2014 "),CH=n($Pe,"A",{href:!0});var S4t=s(CH);Qvr=r(S4t,"TFMPNetForMaskedLM"),S4t.forEach(t),Hvr=r($Pe," (MPNet model)"),$Pe.forEach(t),Uvr=i(fe),lM=n(fe,"LI",{});var kPe=s(lM);_Fe=n(kPe,"STRONG",{});var R4t=s(_Fe);Jvr=r(R4t,"rembert"),R4t.forEach(t),Yvr=r(kPe," \u2014 "),wH=n(kPe,"A",{href:!0});var P4t=s(wH);Kvr=r(P4t,"TFRemBertForMaskedLM"),P4t.forEach(t),Zvr=r(kPe," (RemBERT model)"),kPe.forEach(t),eFr=i(fe),iM=n(fe,"LI",{});var SPe=s(iM);uFe=n(SPe,"STRONG",{});var B4t=s(uFe);oFr=r(B4t,"roberta"),B4t.forEach(t),rFr=r(SPe," \u2014 "),AH=n(SPe,"A",{href:!0});var I4t=s(AH);tFr=r(I4t,"TFRobertaForMaskedLM"),I4t.forEach(t),aFr=r(SPe," (RoBERTa model)"),SPe.forEach(t),nFr=i(fe),dM=n(fe,"LI",{});var RPe=s(dM);bFe=n(RPe,"STRONG",{});var N4t=s(bFe);sFr=r(N4t,"roformer"),N4t.forEach(t),lFr=r(RPe," \u2014 "),yH=n(RPe,"A",{href:!0});var q4t=s(yH);iFr=r(q4t,"TFRoFormerForMaskedLM"),q4t.forEach(t),dFr=r(RPe," (RoFormer model)"),RPe.forEach(t),cFr=i(fe),cM=n(fe,"LI",{});var PPe=s(cM);vFe=n(PPe,"STRONG",{});var j4t=s(vFe);fFr=r(j4t,"tapas"),j4t.forEach(t),mFr=r(PPe," \u2014 "),LH=n(PPe,"A",{href:!0});var D4t=s(LH);gFr=r(D4t,"TFTapasForMaskedLM"),D4t.forEach(t),hFr=r(PPe," (TAPAS model)"),PPe.forEach(t),pFr=i(fe),fM=n(fe,"LI",{});var BPe=s(fM);FFe=n(BPe,"STRONG",{});var G4t=s(FFe);_Fr=r(G4t,"xlm"),G4t.forEach(t),uFr=r(BPe," \u2014 "),xH=n(BPe,"A",{href:!0});var O4t=s(xH);bFr=r(O4t,"TFXLMWithLMHeadModel"),O4t.forEach(t),vFr=r(BPe," (XLM model)"),BPe.forEach(t),FFr=i(fe),mM=n(fe,"LI",{});var IPe=s(mM);TFe=n(IPe,"STRONG",{});var V4t=s(TFe);TFr=r(V4t,"xlm-roberta"),V4t.forEach(t),MFr=r(IPe," \u2014 "),$H=n(IPe,"A",{href:!0});var X4t=s($H);EFr=r(X4t,"TFXLMRobertaForMaskedLM"),X4t.forEach(t),CFr=r(IPe," (XLM-RoBERTa model)"),IPe.forEach(t),fe.forEach(t),wFr=i(El),T(gM.$$.fragment,El),El.forEach(t),Ml.forEach(t),Oje=i(f),tc=n(f,"H2",{class:!0});var HGe=s(tc);hM=n(HGe,"A",{id:!0,class:!0,href:!0});var z4t=s(hM);MFe=n(z4t,"SPAN",{});var W4t=s(MFe);T(DL.$$.fragment,W4t),W4t.forEach(t),z4t.forEach(t),AFr=i(HGe),EFe=n(HGe,"SPAN",{});var Q4t=s(EFe);yFr=r(Q4t,"TFAutoModelForSeq2SeqLM"),Q4t.forEach(t),HGe.forEach(t),Vje=i(f),rr=n(f,"DIV",{class:!0});var Cl=s(rr);T(GL.$$.fragment,Cl),LFr=i(Cl),ac=n(Cl,"P",{});var Pee=s(ac);xFr=r(Pee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),kH=n(Pee,"A",{href:!0});var H4t=s(kH);$Fr=r(H4t,"from_pretrained()"),H4t.forEach(t),kFr=r(Pee," class method or the "),SH=n(Pee,"A",{href:!0});var U4t=s(SH);SFr=r(U4t,"from_config()"),U4t.forEach(t),RFr=r(Pee,` class
method.`),Pee.forEach(t),PFr=i(Cl),OL=n(Cl,"P",{});var UGe=s(OL);BFr=r(UGe,"This class cannot be instantiated directly using "),CFe=n(UGe,"CODE",{});var J4t=s(CFe);IFr=r(J4t,"__init__()"),J4t.forEach(t),NFr=r(UGe," (throws an error)."),UGe.forEach(t),qFr=i(Cl),St=n(Cl,"DIV",{class:!0});var Ow=s(St);T(VL.$$.fragment,Ow),jFr=i(Ow),wFe=n(Ow,"P",{});var Y4t=s(wFe);DFr=r(Y4t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Y4t.forEach(t),GFr=i(Ow),nc=n(Ow,"P",{});var Bee=s(nc);OFr=r(Bee,`Note:
Loading a model from its configuration file does `),AFe=n(Bee,"STRONG",{});var K4t=s(AFe);VFr=r(K4t,"not"),K4t.forEach(t),XFr=r(Bee,` load the model weights. It only affects the
model\u2019s configuration. Use `),RH=n(Bee,"A",{href:!0});var Z4t=s(RH);zFr=r(Z4t,"from_pretrained()"),Z4t.forEach(t),WFr=r(Bee," to load the model weights."),Bee.forEach(t),QFr=i(Ow),T(pM.$$.fragment,Ow),Ow.forEach(t),HFr=i(Cl),$r=n(Cl,"DIV",{class:!0});var wl=s($r);T(XL.$$.fragment,wl),UFr=i(wl),yFe=n(wl,"P",{});var eEt=s(yFe);JFr=r(eEt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),eEt.forEach(t),YFr=i(wl),an=n(wl,"P",{});var Vw=s(an);KFr=r(Vw,"The model class to instantiate is selected based on the "),LFe=n(Vw,"CODE",{});var oEt=s(LFe);ZFr=r(oEt,"model_type"),oEt.forEach(t),e6r=r(Vw,` property of the config object (either
passed as an argument or loaded from `),xFe=n(Vw,"CODE",{});var rEt=s(xFe);o6r=r(rEt,"pretrained_model_name_or_path"),rEt.forEach(t),r6r=r(Vw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$Fe=n(Vw,"CODE",{});var tEt=s($Fe);t6r=r(tEt,"pretrained_model_name_or_path"),tEt.forEach(t),a6r=r(Vw,":"),Vw.forEach(t),n6r=i(wl),ye=n(wl,"UL",{});var Be=s(ye);_M=n(Be,"LI",{});var NPe=s(_M);kFe=n(NPe,"STRONG",{});var aEt=s(kFe);s6r=r(aEt,"bart"),aEt.forEach(t),l6r=r(NPe," \u2014 "),PH=n(NPe,"A",{href:!0});var nEt=s(PH);i6r=r(nEt,"TFBartForConditionalGeneration"),nEt.forEach(t),d6r=r(NPe," (BART model)"),NPe.forEach(t),c6r=i(Be),uM=n(Be,"LI",{});var qPe=s(uM);SFe=n(qPe,"STRONG",{});var sEt=s(SFe);f6r=r(sEt,"blenderbot"),sEt.forEach(t),m6r=r(qPe," \u2014 "),BH=n(qPe,"A",{href:!0});var lEt=s(BH);g6r=r(lEt,"TFBlenderbotForConditionalGeneration"),lEt.forEach(t),h6r=r(qPe," (Blenderbot model)"),qPe.forEach(t),p6r=i(Be),bM=n(Be,"LI",{});var jPe=s(bM);RFe=n(jPe,"STRONG",{});var iEt=s(RFe);_6r=r(iEt,"blenderbot-small"),iEt.forEach(t),u6r=r(jPe," \u2014 "),IH=n(jPe,"A",{href:!0});var dEt=s(IH);b6r=r(dEt,"TFBlenderbotSmallForConditionalGeneration"),dEt.forEach(t),v6r=r(jPe," (BlenderbotSmall model)"),jPe.forEach(t),F6r=i(Be),vM=n(Be,"LI",{});var DPe=s(vM);PFe=n(DPe,"STRONG",{});var cEt=s(PFe);T6r=r(cEt,"encoder-decoder"),cEt.forEach(t),M6r=r(DPe," \u2014 "),NH=n(DPe,"A",{href:!0});var fEt=s(NH);E6r=r(fEt,"TFEncoderDecoderModel"),fEt.forEach(t),C6r=r(DPe," (Encoder decoder model)"),DPe.forEach(t),w6r=i(Be),FM=n(Be,"LI",{});var GPe=s(FM);BFe=n(GPe,"STRONG",{});var mEt=s(BFe);A6r=r(mEt,"led"),mEt.forEach(t),y6r=r(GPe," \u2014 "),qH=n(GPe,"A",{href:!0});var gEt=s(qH);L6r=r(gEt,"TFLEDForConditionalGeneration"),gEt.forEach(t),x6r=r(GPe," (LED model)"),GPe.forEach(t),$6r=i(Be),TM=n(Be,"LI",{});var OPe=s(TM);IFe=n(OPe,"STRONG",{});var hEt=s(IFe);k6r=r(hEt,"marian"),hEt.forEach(t),S6r=r(OPe," \u2014 "),jH=n(OPe,"A",{href:!0});var pEt=s(jH);R6r=r(pEt,"TFMarianMTModel"),pEt.forEach(t),P6r=r(OPe," (Marian model)"),OPe.forEach(t),B6r=i(Be),MM=n(Be,"LI",{});var VPe=s(MM);NFe=n(VPe,"STRONG",{});var _Et=s(NFe);I6r=r(_Et,"mbart"),_Et.forEach(t),N6r=r(VPe," \u2014 "),DH=n(VPe,"A",{href:!0});var uEt=s(DH);q6r=r(uEt,"TFMBartForConditionalGeneration"),uEt.forEach(t),j6r=r(VPe," (mBART model)"),VPe.forEach(t),D6r=i(Be),EM=n(Be,"LI",{});var XPe=s(EM);qFe=n(XPe,"STRONG",{});var bEt=s(qFe);G6r=r(bEt,"mt5"),bEt.forEach(t),O6r=r(XPe," \u2014 "),GH=n(XPe,"A",{href:!0});var vEt=s(GH);V6r=r(vEt,"TFMT5ForConditionalGeneration"),vEt.forEach(t),X6r=r(XPe," (mT5 model)"),XPe.forEach(t),z6r=i(Be),CM=n(Be,"LI",{});var zPe=s(CM);jFe=n(zPe,"STRONG",{});var FEt=s(jFe);W6r=r(FEt,"pegasus"),FEt.forEach(t),Q6r=r(zPe," \u2014 "),OH=n(zPe,"A",{href:!0});var TEt=s(OH);H6r=r(TEt,"TFPegasusForConditionalGeneration"),TEt.forEach(t),U6r=r(zPe," (Pegasus model)"),zPe.forEach(t),J6r=i(Be),wM=n(Be,"LI",{});var WPe=s(wM);DFe=n(WPe,"STRONG",{});var MEt=s(DFe);Y6r=r(MEt,"t5"),MEt.forEach(t),K6r=r(WPe," \u2014 "),VH=n(WPe,"A",{href:!0});var EEt=s(VH);Z6r=r(EEt,"TFT5ForConditionalGeneration"),EEt.forEach(t),eTr=r(WPe," (T5 model)"),WPe.forEach(t),Be.forEach(t),oTr=i(wl),T(AM.$$.fragment,wl),wl.forEach(t),Cl.forEach(t),Xje=i(f),sc=n(f,"H2",{class:!0});var JGe=s(sc);yM=n(JGe,"A",{id:!0,class:!0,href:!0});var CEt=s(yM);GFe=n(CEt,"SPAN",{});var wEt=s(GFe);T(zL.$$.fragment,wEt),wEt.forEach(t),CEt.forEach(t),rTr=i(JGe),OFe=n(JGe,"SPAN",{});var AEt=s(OFe);tTr=r(AEt,"TFAutoModelForSequenceClassification"),AEt.forEach(t),JGe.forEach(t),zje=i(f),tr=n(f,"DIV",{class:!0});var Al=s(tr);T(WL.$$.fragment,Al),aTr=i(Al),lc=n(Al,"P",{});var Iee=s(lc);nTr=r(Iee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),XH=n(Iee,"A",{href:!0});var yEt=s(XH);sTr=r(yEt,"from_pretrained()"),yEt.forEach(t),lTr=r(Iee," class method or the "),zH=n(Iee,"A",{href:!0});var LEt=s(zH);iTr=r(LEt,"from_config()"),LEt.forEach(t),dTr=r(Iee,` class
method.`),Iee.forEach(t),cTr=i(Al),QL=n(Al,"P",{});var YGe=s(QL);fTr=r(YGe,"This class cannot be instantiated directly using "),VFe=n(YGe,"CODE",{});var xEt=s(VFe);mTr=r(xEt,"__init__()"),xEt.forEach(t),gTr=r(YGe," (throws an error)."),YGe.forEach(t),hTr=i(Al),Rt=n(Al,"DIV",{class:!0});var Xw=s(Rt);T(HL.$$.fragment,Xw),pTr=i(Xw),XFe=n(Xw,"P",{});var $Et=s(XFe);_Tr=r($Et,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),$Et.forEach(t),uTr=i(Xw),ic=n(Xw,"P",{});var Nee=s(ic);bTr=r(Nee,`Note:
Loading a model from its configuration file does `),zFe=n(Nee,"STRONG",{});var kEt=s(zFe);vTr=r(kEt,"not"),kEt.forEach(t),FTr=r(Nee,` load the model weights. It only affects the
model\u2019s configuration. Use `),WH=n(Nee,"A",{href:!0});var SEt=s(WH);TTr=r(SEt,"from_pretrained()"),SEt.forEach(t),MTr=r(Nee," to load the model weights."),Nee.forEach(t),ETr=i(Xw),T(LM.$$.fragment,Xw),Xw.forEach(t),CTr=i(Al),kr=n(Al,"DIV",{class:!0});var yl=s(kr);T(UL.$$.fragment,yl),wTr=i(yl),WFe=n(yl,"P",{});var REt=s(WFe);ATr=r(REt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),REt.forEach(t),yTr=i(yl),nn=n(yl,"P",{});var zw=s(nn);LTr=r(zw,"The model class to instantiate is selected based on the "),QFe=n(zw,"CODE",{});var PEt=s(QFe);xTr=r(PEt,"model_type"),PEt.forEach(t),$Tr=r(zw,` property of the config object (either
passed as an argument or loaded from `),HFe=n(zw,"CODE",{});var BEt=s(HFe);kTr=r(BEt,"pretrained_model_name_or_path"),BEt.forEach(t),STr=r(zw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),UFe=n(zw,"CODE",{});var IEt=s(UFe);RTr=r(IEt,"pretrained_model_name_or_path"),IEt.forEach(t),PTr=r(zw,":"),zw.forEach(t),BTr=i(yl),oe=n(yl,"UL",{});var ae=s(oe);xM=n(ae,"LI",{});var QPe=s(xM);JFe=n(QPe,"STRONG",{});var NEt=s(JFe);ITr=r(NEt,"albert"),NEt.forEach(t),NTr=r(QPe," \u2014 "),QH=n(QPe,"A",{href:!0});var qEt=s(QH);qTr=r(qEt,"TFAlbertForSequenceClassification"),qEt.forEach(t),jTr=r(QPe," (ALBERT model)"),QPe.forEach(t),DTr=i(ae),$M=n(ae,"LI",{});var HPe=s($M);YFe=n(HPe,"STRONG",{});var jEt=s(YFe);GTr=r(jEt,"bert"),jEt.forEach(t),OTr=r(HPe," \u2014 "),HH=n(HPe,"A",{href:!0});var DEt=s(HH);VTr=r(DEt,"TFBertForSequenceClassification"),DEt.forEach(t),XTr=r(HPe," (BERT model)"),HPe.forEach(t),zTr=i(ae),kM=n(ae,"LI",{});var UPe=s(kM);KFe=n(UPe,"STRONG",{});var GEt=s(KFe);WTr=r(GEt,"camembert"),GEt.forEach(t),QTr=r(UPe," \u2014 "),UH=n(UPe,"A",{href:!0});var OEt=s(UH);HTr=r(OEt,"TFCamembertForSequenceClassification"),OEt.forEach(t),UTr=r(UPe," (CamemBERT model)"),UPe.forEach(t),JTr=i(ae),SM=n(ae,"LI",{});var JPe=s(SM);ZFe=n(JPe,"STRONG",{});var VEt=s(ZFe);YTr=r(VEt,"convbert"),VEt.forEach(t),KTr=r(JPe," \u2014 "),JH=n(JPe,"A",{href:!0});var XEt=s(JH);ZTr=r(XEt,"TFConvBertForSequenceClassification"),XEt.forEach(t),e7r=r(JPe," (ConvBERT model)"),JPe.forEach(t),o7r=i(ae),RM=n(ae,"LI",{});var YPe=s(RM);e6e=n(YPe,"STRONG",{});var zEt=s(e6e);r7r=r(zEt,"ctrl"),zEt.forEach(t),t7r=r(YPe," \u2014 "),YH=n(YPe,"A",{href:!0});var WEt=s(YH);a7r=r(WEt,"TFCTRLForSequenceClassification"),WEt.forEach(t),n7r=r(YPe," (CTRL model)"),YPe.forEach(t),s7r=i(ae),PM=n(ae,"LI",{});var KPe=s(PM);o6e=n(KPe,"STRONG",{});var QEt=s(o6e);l7r=r(QEt,"deberta"),QEt.forEach(t),i7r=r(KPe," \u2014 "),KH=n(KPe,"A",{href:!0});var HEt=s(KH);d7r=r(HEt,"TFDebertaForSequenceClassification"),HEt.forEach(t),c7r=r(KPe," (DeBERTa model)"),KPe.forEach(t),f7r=i(ae),BM=n(ae,"LI",{});var ZPe=s(BM);r6e=n(ZPe,"STRONG",{});var UEt=s(r6e);m7r=r(UEt,"deberta-v2"),UEt.forEach(t),g7r=r(ZPe," \u2014 "),ZH=n(ZPe,"A",{href:!0});var JEt=s(ZH);h7r=r(JEt,"TFDebertaV2ForSequenceClassification"),JEt.forEach(t),p7r=r(ZPe," (DeBERTa-v2 model)"),ZPe.forEach(t),_7r=i(ae),IM=n(ae,"LI",{});var eBe=s(IM);t6e=n(eBe,"STRONG",{});var YEt=s(t6e);u7r=r(YEt,"distilbert"),YEt.forEach(t),b7r=r(eBe," \u2014 "),eU=n(eBe,"A",{href:!0});var KEt=s(eU);v7r=r(KEt,"TFDistilBertForSequenceClassification"),KEt.forEach(t),F7r=r(eBe," (DistilBERT model)"),eBe.forEach(t),T7r=i(ae),NM=n(ae,"LI",{});var oBe=s(NM);a6e=n(oBe,"STRONG",{});var ZEt=s(a6e);M7r=r(ZEt,"electra"),ZEt.forEach(t),E7r=r(oBe," \u2014 "),oU=n(oBe,"A",{href:!0});var eCt=s(oU);C7r=r(eCt,"TFElectraForSequenceClassification"),eCt.forEach(t),w7r=r(oBe," (ELECTRA model)"),oBe.forEach(t),A7r=i(ae),qM=n(ae,"LI",{});var rBe=s(qM);n6e=n(rBe,"STRONG",{});var oCt=s(n6e);y7r=r(oCt,"flaubert"),oCt.forEach(t),L7r=r(rBe," \u2014 "),rU=n(rBe,"A",{href:!0});var rCt=s(rU);x7r=r(rCt,"TFFlaubertForSequenceClassification"),rCt.forEach(t),$7r=r(rBe," (FlauBERT model)"),rBe.forEach(t),k7r=i(ae),jM=n(ae,"LI",{});var tBe=s(jM);s6e=n(tBe,"STRONG",{});var tCt=s(s6e);S7r=r(tCt,"funnel"),tCt.forEach(t),R7r=r(tBe," \u2014 "),tU=n(tBe,"A",{href:!0});var aCt=s(tU);P7r=r(aCt,"TFFunnelForSequenceClassification"),aCt.forEach(t),B7r=r(tBe," (Funnel Transformer model)"),tBe.forEach(t),I7r=i(ae),DM=n(ae,"LI",{});var aBe=s(DM);l6e=n(aBe,"STRONG",{});var nCt=s(l6e);N7r=r(nCt,"gpt2"),nCt.forEach(t),q7r=r(aBe," \u2014 "),aU=n(aBe,"A",{href:!0});var sCt=s(aU);j7r=r(sCt,"TFGPT2ForSequenceClassification"),sCt.forEach(t),D7r=r(aBe," (OpenAI GPT-2 model)"),aBe.forEach(t),G7r=i(ae),GM=n(ae,"LI",{});var nBe=s(GM);i6e=n(nBe,"STRONG",{});var lCt=s(i6e);O7r=r(lCt,"gptj"),lCt.forEach(t),V7r=r(nBe," \u2014 "),nU=n(nBe,"A",{href:!0});var iCt=s(nU);X7r=r(iCt,"TFGPTJForSequenceClassification"),iCt.forEach(t),z7r=r(nBe," (GPT-J model)"),nBe.forEach(t),W7r=i(ae),OM=n(ae,"LI",{});var sBe=s(OM);d6e=n(sBe,"STRONG",{});var dCt=s(d6e);Q7r=r(dCt,"layoutlm"),dCt.forEach(t),H7r=r(sBe," \u2014 "),sU=n(sBe,"A",{href:!0});var cCt=s(sU);U7r=r(cCt,"TFLayoutLMForSequenceClassification"),cCt.forEach(t),J7r=r(sBe," (LayoutLM model)"),sBe.forEach(t),Y7r=i(ae),VM=n(ae,"LI",{});var lBe=s(VM);c6e=n(lBe,"STRONG",{});var fCt=s(c6e);K7r=r(fCt,"longformer"),fCt.forEach(t),Z7r=r(lBe," \u2014 "),lU=n(lBe,"A",{href:!0});var mCt=s(lU);e9r=r(mCt,"TFLongformerForSequenceClassification"),mCt.forEach(t),o9r=r(lBe," (Longformer model)"),lBe.forEach(t),r9r=i(ae),XM=n(ae,"LI",{});var iBe=s(XM);f6e=n(iBe,"STRONG",{});var gCt=s(f6e);t9r=r(gCt,"mobilebert"),gCt.forEach(t),a9r=r(iBe," \u2014 "),iU=n(iBe,"A",{href:!0});var hCt=s(iU);n9r=r(hCt,"TFMobileBertForSequenceClassification"),hCt.forEach(t),s9r=r(iBe," (MobileBERT model)"),iBe.forEach(t),l9r=i(ae),zM=n(ae,"LI",{});var dBe=s(zM);m6e=n(dBe,"STRONG",{});var pCt=s(m6e);i9r=r(pCt,"mpnet"),pCt.forEach(t),d9r=r(dBe," \u2014 "),dU=n(dBe,"A",{href:!0});var _Ct=s(dU);c9r=r(_Ct,"TFMPNetForSequenceClassification"),_Ct.forEach(t),f9r=r(dBe," (MPNet model)"),dBe.forEach(t),m9r=i(ae),WM=n(ae,"LI",{});var cBe=s(WM);g6e=n(cBe,"STRONG",{});var uCt=s(g6e);g9r=r(uCt,"openai-gpt"),uCt.forEach(t),h9r=r(cBe," \u2014 "),cU=n(cBe,"A",{href:!0});var bCt=s(cU);p9r=r(bCt,"TFOpenAIGPTForSequenceClassification"),bCt.forEach(t),_9r=r(cBe," (OpenAI GPT model)"),cBe.forEach(t),u9r=i(ae),QM=n(ae,"LI",{});var fBe=s(QM);h6e=n(fBe,"STRONG",{});var vCt=s(h6e);b9r=r(vCt,"rembert"),vCt.forEach(t),v9r=r(fBe," \u2014 "),fU=n(fBe,"A",{href:!0});var FCt=s(fU);F9r=r(FCt,"TFRemBertForSequenceClassification"),FCt.forEach(t),T9r=r(fBe," (RemBERT model)"),fBe.forEach(t),M9r=i(ae),HM=n(ae,"LI",{});var mBe=s(HM);p6e=n(mBe,"STRONG",{});var TCt=s(p6e);E9r=r(TCt,"roberta"),TCt.forEach(t),C9r=r(mBe," \u2014 "),mU=n(mBe,"A",{href:!0});var MCt=s(mU);w9r=r(MCt,"TFRobertaForSequenceClassification"),MCt.forEach(t),A9r=r(mBe," (RoBERTa model)"),mBe.forEach(t),y9r=i(ae),UM=n(ae,"LI",{});var gBe=s(UM);_6e=n(gBe,"STRONG",{});var ECt=s(_6e);L9r=r(ECt,"roformer"),ECt.forEach(t),x9r=r(gBe," \u2014 "),gU=n(gBe,"A",{href:!0});var CCt=s(gU);$9r=r(CCt,"TFRoFormerForSequenceClassification"),CCt.forEach(t),k9r=r(gBe," (RoFormer model)"),gBe.forEach(t),S9r=i(ae),JM=n(ae,"LI",{});var hBe=s(JM);u6e=n(hBe,"STRONG",{});var wCt=s(u6e);R9r=r(wCt,"tapas"),wCt.forEach(t),P9r=r(hBe," \u2014 "),hU=n(hBe,"A",{href:!0});var ACt=s(hU);B9r=r(ACt,"TFTapasForSequenceClassification"),ACt.forEach(t),I9r=r(hBe," (TAPAS model)"),hBe.forEach(t),N9r=i(ae),YM=n(ae,"LI",{});var pBe=s(YM);b6e=n(pBe,"STRONG",{});var yCt=s(b6e);q9r=r(yCt,"transfo-xl"),yCt.forEach(t),j9r=r(pBe," \u2014 "),pU=n(pBe,"A",{href:!0});var LCt=s(pU);D9r=r(LCt,"TFTransfoXLForSequenceClassification"),LCt.forEach(t),G9r=r(pBe," (Transformer-XL model)"),pBe.forEach(t),O9r=i(ae),KM=n(ae,"LI",{});var _Be=s(KM);v6e=n(_Be,"STRONG",{});var xCt=s(v6e);V9r=r(xCt,"xlm"),xCt.forEach(t),X9r=r(_Be," \u2014 "),_U=n(_Be,"A",{href:!0});var $Ct=s(_U);z9r=r($Ct,"TFXLMForSequenceClassification"),$Ct.forEach(t),W9r=r(_Be," (XLM model)"),_Be.forEach(t),Q9r=i(ae),ZM=n(ae,"LI",{});var uBe=s(ZM);F6e=n(uBe,"STRONG",{});var kCt=s(F6e);H9r=r(kCt,"xlm-roberta"),kCt.forEach(t),U9r=r(uBe," \u2014 "),uU=n(uBe,"A",{href:!0});var SCt=s(uU);J9r=r(SCt,"TFXLMRobertaForSequenceClassification"),SCt.forEach(t),Y9r=r(uBe," (XLM-RoBERTa model)"),uBe.forEach(t),K9r=i(ae),e4=n(ae,"LI",{});var bBe=s(e4);T6e=n(bBe,"STRONG",{});var RCt=s(T6e);Z9r=r(RCt,"xlnet"),RCt.forEach(t),eMr=r(bBe," \u2014 "),bU=n(bBe,"A",{href:!0});var PCt=s(bU);oMr=r(PCt,"TFXLNetForSequenceClassification"),PCt.forEach(t),rMr=r(bBe," (XLNet model)"),bBe.forEach(t),ae.forEach(t),tMr=i(yl),T(o4.$$.fragment,yl),yl.forEach(t),Al.forEach(t),Wje=i(f),dc=n(f,"H2",{class:!0});var KGe=s(dc);r4=n(KGe,"A",{id:!0,class:!0,href:!0});var BCt=s(r4);M6e=n(BCt,"SPAN",{});var ICt=s(M6e);T(JL.$$.fragment,ICt),ICt.forEach(t),BCt.forEach(t),aMr=i(KGe),E6e=n(KGe,"SPAN",{});var NCt=s(E6e);nMr=r(NCt,"TFAutoModelForMultipleChoice"),NCt.forEach(t),KGe.forEach(t),Qje=i(f),ar=n(f,"DIV",{class:!0});var Ll=s(ar);T(YL.$$.fragment,Ll),sMr=i(Ll),cc=n(Ll,"P",{});var qee=s(cc);lMr=r(qee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),vU=n(qee,"A",{href:!0});var qCt=s(vU);iMr=r(qCt,"from_pretrained()"),qCt.forEach(t),dMr=r(qee," class method or the "),FU=n(qee,"A",{href:!0});var jCt=s(FU);cMr=r(jCt,"from_config()"),jCt.forEach(t),fMr=r(qee,` class
method.`),qee.forEach(t),mMr=i(Ll),KL=n(Ll,"P",{});var ZGe=s(KL);gMr=r(ZGe,"This class cannot be instantiated directly using "),C6e=n(ZGe,"CODE",{});var DCt=s(C6e);hMr=r(DCt,"__init__()"),DCt.forEach(t),pMr=r(ZGe," (throws an error)."),ZGe.forEach(t),_Mr=i(Ll),Pt=n(Ll,"DIV",{class:!0});var Ww=s(Pt);T(ZL.$$.fragment,Ww),uMr=i(Ww),w6e=n(Ww,"P",{});var GCt=s(w6e);bMr=r(GCt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),GCt.forEach(t),vMr=i(Ww),fc=n(Ww,"P",{});var jee=s(fc);FMr=r(jee,`Note:
Loading a model from its configuration file does `),A6e=n(jee,"STRONG",{});var OCt=s(A6e);TMr=r(OCt,"not"),OCt.forEach(t),MMr=r(jee,` load the model weights. It only affects the
model\u2019s configuration. Use `),TU=n(jee,"A",{href:!0});var VCt=s(TU);EMr=r(VCt,"from_pretrained()"),VCt.forEach(t),CMr=r(jee," to load the model weights."),jee.forEach(t),wMr=i(Ww),T(t4.$$.fragment,Ww),Ww.forEach(t),AMr=i(Ll),Sr=n(Ll,"DIV",{class:!0});var xl=s(Sr);T(e8.$$.fragment,xl),yMr=i(xl),y6e=n(xl,"P",{});var XCt=s(y6e);LMr=r(XCt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),XCt.forEach(t),xMr=i(xl),sn=n(xl,"P",{});var Qw=s(sn);$Mr=r(Qw,"The model class to instantiate is selected based on the "),L6e=n(Qw,"CODE",{});var zCt=s(L6e);kMr=r(zCt,"model_type"),zCt.forEach(t),SMr=r(Qw,` property of the config object (either
passed as an argument or loaded from `),x6e=n(Qw,"CODE",{});var WCt=s(x6e);RMr=r(WCt,"pretrained_model_name_or_path"),WCt.forEach(t),PMr=r(Qw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$6e=n(Qw,"CODE",{});var QCt=s($6e);BMr=r(QCt,"pretrained_model_name_or_path"),QCt.forEach(t),IMr=r(Qw,":"),Qw.forEach(t),NMr=i(xl),_e=n(xl,"UL",{});var ve=s(_e);a4=n(ve,"LI",{});var vBe=s(a4);k6e=n(vBe,"STRONG",{});var HCt=s(k6e);qMr=r(HCt,"albert"),HCt.forEach(t),jMr=r(vBe," \u2014 "),MU=n(vBe,"A",{href:!0});var UCt=s(MU);DMr=r(UCt,"TFAlbertForMultipleChoice"),UCt.forEach(t),GMr=r(vBe," (ALBERT model)"),vBe.forEach(t),OMr=i(ve),n4=n(ve,"LI",{});var FBe=s(n4);S6e=n(FBe,"STRONG",{});var JCt=s(S6e);VMr=r(JCt,"bert"),JCt.forEach(t),XMr=r(FBe," \u2014 "),EU=n(FBe,"A",{href:!0});var YCt=s(EU);zMr=r(YCt,"TFBertForMultipleChoice"),YCt.forEach(t),WMr=r(FBe," (BERT model)"),FBe.forEach(t),QMr=i(ve),s4=n(ve,"LI",{});var TBe=s(s4);R6e=n(TBe,"STRONG",{});var KCt=s(R6e);HMr=r(KCt,"camembert"),KCt.forEach(t),UMr=r(TBe," \u2014 "),CU=n(TBe,"A",{href:!0});var ZCt=s(CU);JMr=r(ZCt,"TFCamembertForMultipleChoice"),ZCt.forEach(t),YMr=r(TBe," (CamemBERT model)"),TBe.forEach(t),KMr=i(ve),l4=n(ve,"LI",{});var MBe=s(l4);P6e=n(MBe,"STRONG",{});var e5t=s(P6e);ZMr=r(e5t,"convbert"),e5t.forEach(t),e4r=r(MBe," \u2014 "),wU=n(MBe,"A",{href:!0});var o5t=s(wU);o4r=r(o5t,"TFConvBertForMultipleChoice"),o5t.forEach(t),r4r=r(MBe," (ConvBERT model)"),MBe.forEach(t),t4r=i(ve),i4=n(ve,"LI",{});var EBe=s(i4);B6e=n(EBe,"STRONG",{});var r5t=s(B6e);a4r=r(r5t,"distilbert"),r5t.forEach(t),n4r=r(EBe," \u2014 "),AU=n(EBe,"A",{href:!0});var t5t=s(AU);s4r=r(t5t,"TFDistilBertForMultipleChoice"),t5t.forEach(t),l4r=r(EBe," (DistilBERT model)"),EBe.forEach(t),i4r=i(ve),d4=n(ve,"LI",{});var CBe=s(d4);I6e=n(CBe,"STRONG",{});var a5t=s(I6e);d4r=r(a5t,"electra"),a5t.forEach(t),c4r=r(CBe," \u2014 "),yU=n(CBe,"A",{href:!0});var n5t=s(yU);f4r=r(n5t,"TFElectraForMultipleChoice"),n5t.forEach(t),m4r=r(CBe," (ELECTRA model)"),CBe.forEach(t),g4r=i(ve),c4=n(ve,"LI",{});var wBe=s(c4);N6e=n(wBe,"STRONG",{});var s5t=s(N6e);h4r=r(s5t,"flaubert"),s5t.forEach(t),p4r=r(wBe," \u2014 "),LU=n(wBe,"A",{href:!0});var l5t=s(LU);_4r=r(l5t,"TFFlaubertForMultipleChoice"),l5t.forEach(t),u4r=r(wBe," (FlauBERT model)"),wBe.forEach(t),b4r=i(ve),f4=n(ve,"LI",{});var ABe=s(f4);q6e=n(ABe,"STRONG",{});var i5t=s(q6e);v4r=r(i5t,"funnel"),i5t.forEach(t),F4r=r(ABe," \u2014 "),xU=n(ABe,"A",{href:!0});var d5t=s(xU);T4r=r(d5t,"TFFunnelForMultipleChoice"),d5t.forEach(t),M4r=r(ABe," (Funnel Transformer model)"),ABe.forEach(t),E4r=i(ve),m4=n(ve,"LI",{});var yBe=s(m4);j6e=n(yBe,"STRONG",{});var c5t=s(j6e);C4r=r(c5t,"longformer"),c5t.forEach(t),w4r=r(yBe," \u2014 "),$U=n(yBe,"A",{href:!0});var f5t=s($U);A4r=r(f5t,"TFLongformerForMultipleChoice"),f5t.forEach(t),y4r=r(yBe," (Longformer model)"),yBe.forEach(t),L4r=i(ve),g4=n(ve,"LI",{});var LBe=s(g4);D6e=n(LBe,"STRONG",{});var m5t=s(D6e);x4r=r(m5t,"mobilebert"),m5t.forEach(t),$4r=r(LBe," \u2014 "),kU=n(LBe,"A",{href:!0});var g5t=s(kU);k4r=r(g5t,"TFMobileBertForMultipleChoice"),g5t.forEach(t),S4r=r(LBe," (MobileBERT model)"),LBe.forEach(t),R4r=i(ve),h4=n(ve,"LI",{});var xBe=s(h4);G6e=n(xBe,"STRONG",{});var h5t=s(G6e);P4r=r(h5t,"mpnet"),h5t.forEach(t),B4r=r(xBe," \u2014 "),SU=n(xBe,"A",{href:!0});var p5t=s(SU);I4r=r(p5t,"TFMPNetForMultipleChoice"),p5t.forEach(t),N4r=r(xBe," (MPNet model)"),xBe.forEach(t),q4r=i(ve),p4=n(ve,"LI",{});var $Be=s(p4);O6e=n($Be,"STRONG",{});var _5t=s(O6e);j4r=r(_5t,"rembert"),_5t.forEach(t),D4r=r($Be," \u2014 "),RU=n($Be,"A",{href:!0});var u5t=s(RU);G4r=r(u5t,"TFRemBertForMultipleChoice"),u5t.forEach(t),O4r=r($Be," (RemBERT model)"),$Be.forEach(t),V4r=i(ve),_4=n(ve,"LI",{});var kBe=s(_4);V6e=n(kBe,"STRONG",{});var b5t=s(V6e);X4r=r(b5t,"roberta"),b5t.forEach(t),z4r=r(kBe," \u2014 "),PU=n(kBe,"A",{href:!0});var v5t=s(PU);W4r=r(v5t,"TFRobertaForMultipleChoice"),v5t.forEach(t),Q4r=r(kBe," (RoBERTa model)"),kBe.forEach(t),H4r=i(ve),u4=n(ve,"LI",{});var SBe=s(u4);X6e=n(SBe,"STRONG",{});var F5t=s(X6e);U4r=r(F5t,"roformer"),F5t.forEach(t),J4r=r(SBe," \u2014 "),BU=n(SBe,"A",{href:!0});var T5t=s(BU);Y4r=r(T5t,"TFRoFormerForMultipleChoice"),T5t.forEach(t),K4r=r(SBe," (RoFormer model)"),SBe.forEach(t),Z4r=i(ve),b4=n(ve,"LI",{});var RBe=s(b4);z6e=n(RBe,"STRONG",{});var M5t=s(z6e);eEr=r(M5t,"xlm"),M5t.forEach(t),oEr=r(RBe," \u2014 "),IU=n(RBe,"A",{href:!0});var E5t=s(IU);rEr=r(E5t,"TFXLMForMultipleChoice"),E5t.forEach(t),tEr=r(RBe," (XLM model)"),RBe.forEach(t),aEr=i(ve),v4=n(ve,"LI",{});var PBe=s(v4);W6e=n(PBe,"STRONG",{});var C5t=s(W6e);nEr=r(C5t,"xlm-roberta"),C5t.forEach(t),sEr=r(PBe," \u2014 "),NU=n(PBe,"A",{href:!0});var w5t=s(NU);lEr=r(w5t,"TFXLMRobertaForMultipleChoice"),w5t.forEach(t),iEr=r(PBe," (XLM-RoBERTa model)"),PBe.forEach(t),dEr=i(ve),F4=n(ve,"LI",{});var BBe=s(F4);Q6e=n(BBe,"STRONG",{});var A5t=s(Q6e);cEr=r(A5t,"xlnet"),A5t.forEach(t),fEr=r(BBe," \u2014 "),qU=n(BBe,"A",{href:!0});var y5t=s(qU);mEr=r(y5t,"TFXLNetForMultipleChoice"),y5t.forEach(t),gEr=r(BBe," (XLNet model)"),BBe.forEach(t),ve.forEach(t),hEr=i(xl),T(T4.$$.fragment,xl),xl.forEach(t),Ll.forEach(t),Hje=i(f),mc=n(f,"H2",{class:!0});var eOe=s(mc);M4=n(eOe,"A",{id:!0,class:!0,href:!0});var L5t=s(M4);H6e=n(L5t,"SPAN",{});var x5t=s(H6e);T(o8.$$.fragment,x5t),x5t.forEach(t),L5t.forEach(t),pEr=i(eOe),U6e=n(eOe,"SPAN",{});var $5t=s(U6e);_Er=r($5t,"TFAutoModelForNextSentencePrediction"),$5t.forEach(t),eOe.forEach(t),Uje=i(f),nr=n(f,"DIV",{class:!0});var $l=s(nr);T(r8.$$.fragment,$l),uEr=i($l),gc=n($l,"P",{});var Dee=s(gc);bEr=r(Dee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),jU=n(Dee,"A",{href:!0});var k5t=s(jU);vEr=r(k5t,"from_pretrained()"),k5t.forEach(t),FEr=r(Dee," class method or the "),DU=n(Dee,"A",{href:!0});var S5t=s(DU);TEr=r(S5t,"from_config()"),S5t.forEach(t),MEr=r(Dee,` class
method.`),Dee.forEach(t),EEr=i($l),t8=n($l,"P",{});var oOe=s(t8);CEr=r(oOe,"This class cannot be instantiated directly using "),J6e=n(oOe,"CODE",{});var R5t=s(J6e);wEr=r(R5t,"__init__()"),R5t.forEach(t),AEr=r(oOe," (throws an error)."),oOe.forEach(t),yEr=i($l),Bt=n($l,"DIV",{class:!0});var Hw=s(Bt);T(a8.$$.fragment,Hw),LEr=i(Hw),Y6e=n(Hw,"P",{});var P5t=s(Y6e);xEr=r(P5t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),P5t.forEach(t),$Er=i(Hw),hc=n(Hw,"P",{});var Gee=s(hc);kEr=r(Gee,`Note:
Loading a model from its configuration file does `),K6e=n(Gee,"STRONG",{});var B5t=s(K6e);SEr=r(B5t,"not"),B5t.forEach(t),REr=r(Gee,` load the model weights. It only affects the
model\u2019s configuration. Use `),GU=n(Gee,"A",{href:!0});var I5t=s(GU);PEr=r(I5t,"from_pretrained()"),I5t.forEach(t),BEr=r(Gee," to load the model weights."),Gee.forEach(t),IEr=i(Hw),T(E4.$$.fragment,Hw),Hw.forEach(t),NEr=i($l),Rr=n($l,"DIV",{class:!0});var kl=s(Rr);T(n8.$$.fragment,kl),qEr=i(kl),Z6e=n(kl,"P",{});var N5t=s(Z6e);jEr=r(N5t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),N5t.forEach(t),DEr=i(kl),ln=n(kl,"P",{});var Uw=s(ln);GEr=r(Uw,"The model class to instantiate is selected based on the "),eTe=n(Uw,"CODE",{});var q5t=s(eTe);OEr=r(q5t,"model_type"),q5t.forEach(t),VEr=r(Uw,` property of the config object (either
passed as an argument or loaded from `),oTe=n(Uw,"CODE",{});var j5t=s(oTe);XEr=r(j5t,"pretrained_model_name_or_path"),j5t.forEach(t),zEr=r(Uw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rTe=n(Uw,"CODE",{});var D5t=s(rTe);WEr=r(D5t,"pretrained_model_name_or_path"),D5t.forEach(t),QEr=r(Uw,":"),Uw.forEach(t),HEr=i(kl),s8=n(kl,"UL",{});var rOe=s(s8);C4=n(rOe,"LI",{});var IBe=s(C4);tTe=n(IBe,"STRONG",{});var G5t=s(tTe);UEr=r(G5t,"bert"),G5t.forEach(t),JEr=r(IBe," \u2014 "),OU=n(IBe,"A",{href:!0});var O5t=s(OU);YEr=r(O5t,"TFBertForNextSentencePrediction"),O5t.forEach(t),KEr=r(IBe," (BERT model)"),IBe.forEach(t),ZEr=i(rOe),w4=n(rOe,"LI",{});var NBe=s(w4);aTe=n(NBe,"STRONG",{});var V5t=s(aTe);eCr=r(V5t,"mobilebert"),V5t.forEach(t),oCr=r(NBe," \u2014 "),VU=n(NBe,"A",{href:!0});var X5t=s(VU);rCr=r(X5t,"TFMobileBertForNextSentencePrediction"),X5t.forEach(t),tCr=r(NBe," (MobileBERT model)"),NBe.forEach(t),rOe.forEach(t),aCr=i(kl),T(A4.$$.fragment,kl),kl.forEach(t),$l.forEach(t),Jje=i(f),pc=n(f,"H2",{class:!0});var tOe=s(pc);y4=n(tOe,"A",{id:!0,class:!0,href:!0});var z5t=s(y4);nTe=n(z5t,"SPAN",{});var W5t=s(nTe);T(l8.$$.fragment,W5t),W5t.forEach(t),z5t.forEach(t),nCr=i(tOe),sTe=n(tOe,"SPAN",{});var Q5t=s(sTe);sCr=r(Q5t,"TFAutoModelForTableQuestionAnswering"),Q5t.forEach(t),tOe.forEach(t),Yje=i(f),sr=n(f,"DIV",{class:!0});var Sl=s(sr);T(i8.$$.fragment,Sl),lCr=i(Sl),_c=n(Sl,"P",{});var Oee=s(_c);iCr=r(Oee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),XU=n(Oee,"A",{href:!0});var H5t=s(XU);dCr=r(H5t,"from_pretrained()"),H5t.forEach(t),cCr=r(Oee," class method or the "),zU=n(Oee,"A",{href:!0});var U5t=s(zU);fCr=r(U5t,"from_config()"),U5t.forEach(t),mCr=r(Oee,` class
method.`),Oee.forEach(t),gCr=i(Sl),d8=n(Sl,"P",{});var aOe=s(d8);hCr=r(aOe,"This class cannot be instantiated directly using "),lTe=n(aOe,"CODE",{});var J5t=s(lTe);pCr=r(J5t,"__init__()"),J5t.forEach(t),_Cr=r(aOe," (throws an error)."),aOe.forEach(t),uCr=i(Sl),It=n(Sl,"DIV",{class:!0});var Jw=s(It);T(c8.$$.fragment,Jw),bCr=i(Jw),iTe=n(Jw,"P",{});var Y5t=s(iTe);vCr=r(Y5t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Y5t.forEach(t),FCr=i(Jw),uc=n(Jw,"P",{});var Vee=s(uc);TCr=r(Vee,`Note:
Loading a model from its configuration file does `),dTe=n(Vee,"STRONG",{});var K5t=s(dTe);MCr=r(K5t,"not"),K5t.forEach(t),ECr=r(Vee,` load the model weights. It only affects the
model\u2019s configuration. Use `),WU=n(Vee,"A",{href:!0});var Z5t=s(WU);CCr=r(Z5t,"from_pretrained()"),Z5t.forEach(t),wCr=r(Vee," to load the model weights."),Vee.forEach(t),ACr=i(Jw),T(L4.$$.fragment,Jw),Jw.forEach(t),yCr=i(Sl),Pr=n(Sl,"DIV",{class:!0});var Rl=s(Pr);T(f8.$$.fragment,Rl),LCr=i(Rl),cTe=n(Rl,"P",{});var e3t=s(cTe);xCr=r(e3t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),e3t.forEach(t),$Cr=i(Rl),dn=n(Rl,"P",{});var Yw=s(dn);kCr=r(Yw,"The model class to instantiate is selected based on the "),fTe=n(Yw,"CODE",{});var o3t=s(fTe);SCr=r(o3t,"model_type"),o3t.forEach(t),RCr=r(Yw,` property of the config object (either
passed as an argument or loaded from `),mTe=n(Yw,"CODE",{});var r3t=s(mTe);PCr=r(r3t,"pretrained_model_name_or_path"),r3t.forEach(t),BCr=r(Yw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gTe=n(Yw,"CODE",{});var t3t=s(gTe);ICr=r(t3t,"pretrained_model_name_or_path"),t3t.forEach(t),NCr=r(Yw,":"),Yw.forEach(t),qCr=i(Rl),hTe=n(Rl,"UL",{});var a3t=s(hTe);x4=n(a3t,"LI",{});var qBe=s(x4);pTe=n(qBe,"STRONG",{});var n3t=s(pTe);jCr=r(n3t,"tapas"),n3t.forEach(t),DCr=r(qBe," \u2014 "),QU=n(qBe,"A",{href:!0});var s3t=s(QU);GCr=r(s3t,"TFTapasForQuestionAnswering"),s3t.forEach(t),OCr=r(qBe," (TAPAS model)"),qBe.forEach(t),a3t.forEach(t),VCr=i(Rl),T($4.$$.fragment,Rl),Rl.forEach(t),Sl.forEach(t),Kje=i(f),bc=n(f,"H2",{class:!0});var nOe=s(bc);k4=n(nOe,"A",{id:!0,class:!0,href:!0});var l3t=s(k4);_Te=n(l3t,"SPAN",{});var i3t=s(_Te);T(m8.$$.fragment,i3t),i3t.forEach(t),l3t.forEach(t),XCr=i(nOe),uTe=n(nOe,"SPAN",{});var d3t=s(uTe);zCr=r(d3t,"TFAutoModelForTokenClassification"),d3t.forEach(t),nOe.forEach(t),Zje=i(f),lr=n(f,"DIV",{class:!0});var Pl=s(lr);T(g8.$$.fragment,Pl),WCr=i(Pl),vc=n(Pl,"P",{});var Xee=s(vc);QCr=r(Xee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),HU=n(Xee,"A",{href:!0});var c3t=s(HU);HCr=r(c3t,"from_pretrained()"),c3t.forEach(t),UCr=r(Xee," class method or the "),UU=n(Xee,"A",{href:!0});var f3t=s(UU);JCr=r(f3t,"from_config()"),f3t.forEach(t),YCr=r(Xee,` class
method.`),Xee.forEach(t),KCr=i(Pl),h8=n(Pl,"P",{});var sOe=s(h8);ZCr=r(sOe,"This class cannot be instantiated directly using "),bTe=n(sOe,"CODE",{});var m3t=s(bTe);e5r=r(m3t,"__init__()"),m3t.forEach(t),o5r=r(sOe," (throws an error)."),sOe.forEach(t),r5r=i(Pl),Nt=n(Pl,"DIV",{class:!0});var Kw=s(Nt);T(p8.$$.fragment,Kw),t5r=i(Kw),vTe=n(Kw,"P",{});var g3t=s(vTe);a5r=r(g3t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),g3t.forEach(t),n5r=i(Kw),Fc=n(Kw,"P",{});var zee=s(Fc);s5r=r(zee,`Note:
Loading a model from its configuration file does `),FTe=n(zee,"STRONG",{});var h3t=s(FTe);l5r=r(h3t,"not"),h3t.forEach(t),i5r=r(zee,` load the model weights. It only affects the
model\u2019s configuration. Use `),JU=n(zee,"A",{href:!0});var p3t=s(JU);d5r=r(p3t,"from_pretrained()"),p3t.forEach(t),c5r=r(zee," to load the model weights."),zee.forEach(t),f5r=i(Kw),T(S4.$$.fragment,Kw),Kw.forEach(t),m5r=i(Pl),Br=n(Pl,"DIV",{class:!0});var Bl=s(Br);T(_8.$$.fragment,Bl),g5r=i(Bl),TTe=n(Bl,"P",{});var _3t=s(TTe);h5r=r(_3t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),_3t.forEach(t),p5r=i(Bl),cn=n(Bl,"P",{});var Zw=s(cn);_5r=r(Zw,"The model class to instantiate is selected based on the "),MTe=n(Zw,"CODE",{});var u3t=s(MTe);u5r=r(u3t,"model_type"),u3t.forEach(t),b5r=r(Zw,` property of the config object (either
passed as an argument or loaded from `),ETe=n(Zw,"CODE",{});var b3t=s(ETe);v5r=r(b3t,"pretrained_model_name_or_path"),b3t.forEach(t),F5r=r(Zw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),CTe=n(Zw,"CODE",{});var v3t=s(CTe);T5r=r(v3t,"pretrained_model_name_or_path"),v3t.forEach(t),M5r=r(Zw,":"),Zw.forEach(t),E5r=i(Bl),de=n(Bl,"UL",{});var me=s(de);R4=n(me,"LI",{});var jBe=s(R4);wTe=n(jBe,"STRONG",{});var F3t=s(wTe);C5r=r(F3t,"albert"),F3t.forEach(t),w5r=r(jBe," \u2014 "),YU=n(jBe,"A",{href:!0});var T3t=s(YU);A5r=r(T3t,"TFAlbertForTokenClassification"),T3t.forEach(t),y5r=r(jBe," (ALBERT model)"),jBe.forEach(t),L5r=i(me),P4=n(me,"LI",{});var DBe=s(P4);ATe=n(DBe,"STRONG",{});var M3t=s(ATe);x5r=r(M3t,"bert"),M3t.forEach(t),$5r=r(DBe," \u2014 "),KU=n(DBe,"A",{href:!0});var E3t=s(KU);k5r=r(E3t,"TFBertForTokenClassification"),E3t.forEach(t),S5r=r(DBe," (BERT model)"),DBe.forEach(t),R5r=i(me),B4=n(me,"LI",{});var GBe=s(B4);yTe=n(GBe,"STRONG",{});var C3t=s(yTe);P5r=r(C3t,"camembert"),C3t.forEach(t),B5r=r(GBe," \u2014 "),ZU=n(GBe,"A",{href:!0});var w3t=s(ZU);I5r=r(w3t,"TFCamembertForTokenClassification"),w3t.forEach(t),N5r=r(GBe," (CamemBERT model)"),GBe.forEach(t),q5r=i(me),I4=n(me,"LI",{});var OBe=s(I4);LTe=n(OBe,"STRONG",{});var A3t=s(LTe);j5r=r(A3t,"convbert"),A3t.forEach(t),D5r=r(OBe," \u2014 "),eJ=n(OBe,"A",{href:!0});var y3t=s(eJ);G5r=r(y3t,"TFConvBertForTokenClassification"),y3t.forEach(t),O5r=r(OBe," (ConvBERT model)"),OBe.forEach(t),V5r=i(me),N4=n(me,"LI",{});var VBe=s(N4);xTe=n(VBe,"STRONG",{});var L3t=s(xTe);X5r=r(L3t,"deberta"),L3t.forEach(t),z5r=r(VBe," \u2014 "),oJ=n(VBe,"A",{href:!0});var x3t=s(oJ);W5r=r(x3t,"TFDebertaForTokenClassification"),x3t.forEach(t),Q5r=r(VBe," (DeBERTa model)"),VBe.forEach(t),H5r=i(me),q4=n(me,"LI",{});var XBe=s(q4);$Te=n(XBe,"STRONG",{});var $3t=s($Te);U5r=r($3t,"deberta-v2"),$3t.forEach(t),J5r=r(XBe," \u2014 "),rJ=n(XBe,"A",{href:!0});var k3t=s(rJ);Y5r=r(k3t,"TFDebertaV2ForTokenClassification"),k3t.forEach(t),K5r=r(XBe," (DeBERTa-v2 model)"),XBe.forEach(t),Z5r=i(me),j4=n(me,"LI",{});var zBe=s(j4);kTe=n(zBe,"STRONG",{});var S3t=s(kTe);e3r=r(S3t,"distilbert"),S3t.forEach(t),o3r=r(zBe," \u2014 "),tJ=n(zBe,"A",{href:!0});var R3t=s(tJ);r3r=r(R3t,"TFDistilBertForTokenClassification"),R3t.forEach(t),t3r=r(zBe," (DistilBERT model)"),zBe.forEach(t),a3r=i(me),D4=n(me,"LI",{});var WBe=s(D4);STe=n(WBe,"STRONG",{});var P3t=s(STe);n3r=r(P3t,"electra"),P3t.forEach(t),s3r=r(WBe," \u2014 "),aJ=n(WBe,"A",{href:!0});var B3t=s(aJ);l3r=r(B3t,"TFElectraForTokenClassification"),B3t.forEach(t),i3r=r(WBe," (ELECTRA model)"),WBe.forEach(t),d3r=i(me),G4=n(me,"LI",{});var QBe=s(G4);RTe=n(QBe,"STRONG",{});var I3t=s(RTe);c3r=r(I3t,"flaubert"),I3t.forEach(t),f3r=r(QBe," \u2014 "),nJ=n(QBe,"A",{href:!0});var N3t=s(nJ);m3r=r(N3t,"TFFlaubertForTokenClassification"),N3t.forEach(t),g3r=r(QBe," (FlauBERT model)"),QBe.forEach(t),h3r=i(me),O4=n(me,"LI",{});var HBe=s(O4);PTe=n(HBe,"STRONG",{});var q3t=s(PTe);p3r=r(q3t,"funnel"),q3t.forEach(t),_3r=r(HBe," \u2014 "),sJ=n(HBe,"A",{href:!0});var j3t=s(sJ);u3r=r(j3t,"TFFunnelForTokenClassification"),j3t.forEach(t),b3r=r(HBe," (Funnel Transformer model)"),HBe.forEach(t),v3r=i(me),V4=n(me,"LI",{});var UBe=s(V4);BTe=n(UBe,"STRONG",{});var D3t=s(BTe);F3r=r(D3t,"layoutlm"),D3t.forEach(t),T3r=r(UBe," \u2014 "),lJ=n(UBe,"A",{href:!0});var G3t=s(lJ);M3r=r(G3t,"TFLayoutLMForTokenClassification"),G3t.forEach(t),E3r=r(UBe," (LayoutLM model)"),UBe.forEach(t),C3r=i(me),X4=n(me,"LI",{});var JBe=s(X4);ITe=n(JBe,"STRONG",{});var O3t=s(ITe);w3r=r(O3t,"longformer"),O3t.forEach(t),A3r=r(JBe," \u2014 "),iJ=n(JBe,"A",{href:!0});var V3t=s(iJ);y3r=r(V3t,"TFLongformerForTokenClassification"),V3t.forEach(t),L3r=r(JBe," (Longformer model)"),JBe.forEach(t),x3r=i(me),z4=n(me,"LI",{});var YBe=s(z4);NTe=n(YBe,"STRONG",{});var X3t=s(NTe);$3r=r(X3t,"mobilebert"),X3t.forEach(t),k3r=r(YBe," \u2014 "),dJ=n(YBe,"A",{href:!0});var z3t=s(dJ);S3r=r(z3t,"TFMobileBertForTokenClassification"),z3t.forEach(t),R3r=r(YBe," (MobileBERT model)"),YBe.forEach(t),P3r=i(me),W4=n(me,"LI",{});var KBe=s(W4);qTe=n(KBe,"STRONG",{});var W3t=s(qTe);B3r=r(W3t,"mpnet"),W3t.forEach(t),I3r=r(KBe," \u2014 "),cJ=n(KBe,"A",{href:!0});var Q3t=s(cJ);N3r=r(Q3t,"TFMPNetForTokenClassification"),Q3t.forEach(t),q3r=r(KBe," (MPNet model)"),KBe.forEach(t),j3r=i(me),Q4=n(me,"LI",{});var ZBe=s(Q4);jTe=n(ZBe,"STRONG",{});var H3t=s(jTe);D3r=r(H3t,"rembert"),H3t.forEach(t),G3r=r(ZBe," \u2014 "),fJ=n(ZBe,"A",{href:!0});var U3t=s(fJ);O3r=r(U3t,"TFRemBertForTokenClassification"),U3t.forEach(t),V3r=r(ZBe," (RemBERT model)"),ZBe.forEach(t),X3r=i(me),H4=n(me,"LI",{});var eIe=s(H4);DTe=n(eIe,"STRONG",{});var J3t=s(DTe);z3r=r(J3t,"roberta"),J3t.forEach(t),W3r=r(eIe," \u2014 "),mJ=n(eIe,"A",{href:!0});var Y3t=s(mJ);Q3r=r(Y3t,"TFRobertaForTokenClassification"),Y3t.forEach(t),H3r=r(eIe," (RoBERTa model)"),eIe.forEach(t),U3r=i(me),U4=n(me,"LI",{});var oIe=s(U4);GTe=n(oIe,"STRONG",{});var K3t=s(GTe);J3r=r(K3t,"roformer"),K3t.forEach(t),Y3r=r(oIe," \u2014 "),gJ=n(oIe,"A",{href:!0});var Z3t=s(gJ);K3r=r(Z3t,"TFRoFormerForTokenClassification"),Z3t.forEach(t),Z3r=r(oIe," (RoFormer model)"),oIe.forEach(t),ewr=i(me),J4=n(me,"LI",{});var rIe=s(J4);OTe=n(rIe,"STRONG",{});var ewt=s(OTe);owr=r(ewt,"xlm"),ewt.forEach(t),rwr=r(rIe," \u2014 "),hJ=n(rIe,"A",{href:!0});var owt=s(hJ);twr=r(owt,"TFXLMForTokenClassification"),owt.forEach(t),awr=r(rIe," (XLM model)"),rIe.forEach(t),nwr=i(me),Y4=n(me,"LI",{});var tIe=s(Y4);VTe=n(tIe,"STRONG",{});var rwt=s(VTe);swr=r(rwt,"xlm-roberta"),rwt.forEach(t),lwr=r(tIe," \u2014 "),pJ=n(tIe,"A",{href:!0});var twt=s(pJ);iwr=r(twt,"TFXLMRobertaForTokenClassification"),twt.forEach(t),dwr=r(tIe," (XLM-RoBERTa model)"),tIe.forEach(t),cwr=i(me),K4=n(me,"LI",{});var aIe=s(K4);XTe=n(aIe,"STRONG",{});var awt=s(XTe);fwr=r(awt,"xlnet"),awt.forEach(t),mwr=r(aIe," \u2014 "),_J=n(aIe,"A",{href:!0});var nwt=s(_J);gwr=r(nwt,"TFXLNetForTokenClassification"),nwt.forEach(t),hwr=r(aIe," (XLNet model)"),aIe.forEach(t),me.forEach(t),pwr=i(Bl),T(Z4.$$.fragment,Bl),Bl.forEach(t),Pl.forEach(t),eDe=i(f),Tc=n(f,"H2",{class:!0});var lOe=s(Tc);eE=n(lOe,"A",{id:!0,class:!0,href:!0});var swt=s(eE);zTe=n(swt,"SPAN",{});var lwt=s(zTe);T(u8.$$.fragment,lwt),lwt.forEach(t),swt.forEach(t),_wr=i(lOe),WTe=n(lOe,"SPAN",{});var iwt=s(WTe);uwr=r(iwt,"TFAutoModelForQuestionAnswering"),iwt.forEach(t),lOe.forEach(t),oDe=i(f),ir=n(f,"DIV",{class:!0});var Il=s(ir);T(b8.$$.fragment,Il),bwr=i(Il),Mc=n(Il,"P",{});var Wee=s(Mc);vwr=r(Wee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),uJ=n(Wee,"A",{href:!0});var dwt=s(uJ);Fwr=r(dwt,"from_pretrained()"),dwt.forEach(t),Twr=r(Wee," class method or the "),bJ=n(Wee,"A",{href:!0});var cwt=s(bJ);Mwr=r(cwt,"from_config()"),cwt.forEach(t),Ewr=r(Wee,` class
method.`),Wee.forEach(t),Cwr=i(Il),v8=n(Il,"P",{});var iOe=s(v8);wwr=r(iOe,"This class cannot be instantiated directly using "),QTe=n(iOe,"CODE",{});var fwt=s(QTe);Awr=r(fwt,"__init__()"),fwt.forEach(t),ywr=r(iOe," (throws an error)."),iOe.forEach(t),Lwr=i(Il),qt=n(Il,"DIV",{class:!0});var e0=s(qt);T(F8.$$.fragment,e0),xwr=i(e0),HTe=n(e0,"P",{});var mwt=s(HTe);$wr=r(mwt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),mwt.forEach(t),kwr=i(e0),Ec=n(e0,"P",{});var Qee=s(Ec);Swr=r(Qee,`Note:
Loading a model from its configuration file does `),UTe=n(Qee,"STRONG",{});var gwt=s(UTe);Rwr=r(gwt,"not"),gwt.forEach(t),Pwr=r(Qee,` load the model weights. It only affects the
model\u2019s configuration. Use `),vJ=n(Qee,"A",{href:!0});var hwt=s(vJ);Bwr=r(hwt,"from_pretrained()"),hwt.forEach(t),Iwr=r(Qee," to load the model weights."),Qee.forEach(t),Nwr=i(e0),T(oE.$$.fragment,e0),e0.forEach(t),qwr=i(Il),Ir=n(Il,"DIV",{class:!0});var Nl=s(Ir);T(T8.$$.fragment,Nl),jwr=i(Nl),JTe=n(Nl,"P",{});var pwt=s(JTe);Dwr=r(pwt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),pwt.forEach(t),Gwr=i(Nl),fn=n(Nl,"P",{});var o0=s(fn);Owr=r(o0,"The model class to instantiate is selected based on the "),YTe=n(o0,"CODE",{});var _wt=s(YTe);Vwr=r(_wt,"model_type"),_wt.forEach(t),Xwr=r(o0,` property of the config object (either
passed as an argument or loaded from `),KTe=n(o0,"CODE",{});var uwt=s(KTe);zwr=r(uwt,"pretrained_model_name_or_path"),uwt.forEach(t),Wwr=r(o0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ZTe=n(o0,"CODE",{});var bwt=s(ZTe);Qwr=r(bwt,"pretrained_model_name_or_path"),bwt.forEach(t),Hwr=r(o0,":"),o0.forEach(t),Uwr=i(Nl),ce=n(Nl,"UL",{});var ge=s(ce);rE=n(ge,"LI",{});var nIe=s(rE);e7e=n(nIe,"STRONG",{});var vwt=s(e7e);Jwr=r(vwt,"albert"),vwt.forEach(t),Ywr=r(nIe," \u2014 "),FJ=n(nIe,"A",{href:!0});var Fwt=s(FJ);Kwr=r(Fwt,"TFAlbertForQuestionAnswering"),Fwt.forEach(t),Zwr=r(nIe," (ALBERT model)"),nIe.forEach(t),e0r=i(ge),tE=n(ge,"LI",{});var sIe=s(tE);o7e=n(sIe,"STRONG",{});var Twt=s(o7e);o0r=r(Twt,"bert"),Twt.forEach(t),r0r=r(sIe," \u2014 "),TJ=n(sIe,"A",{href:!0});var Mwt=s(TJ);t0r=r(Mwt,"TFBertForQuestionAnswering"),Mwt.forEach(t),a0r=r(sIe," (BERT model)"),sIe.forEach(t),n0r=i(ge),aE=n(ge,"LI",{});var lIe=s(aE);r7e=n(lIe,"STRONG",{});var Ewt=s(r7e);s0r=r(Ewt,"camembert"),Ewt.forEach(t),l0r=r(lIe," \u2014 "),MJ=n(lIe,"A",{href:!0});var Cwt=s(MJ);i0r=r(Cwt,"TFCamembertForQuestionAnswering"),Cwt.forEach(t),d0r=r(lIe," (CamemBERT model)"),lIe.forEach(t),c0r=i(ge),nE=n(ge,"LI",{});var iIe=s(nE);t7e=n(iIe,"STRONG",{});var wwt=s(t7e);f0r=r(wwt,"convbert"),wwt.forEach(t),m0r=r(iIe," \u2014 "),EJ=n(iIe,"A",{href:!0});var Awt=s(EJ);g0r=r(Awt,"TFConvBertForQuestionAnswering"),Awt.forEach(t),h0r=r(iIe," (ConvBERT model)"),iIe.forEach(t),p0r=i(ge),sE=n(ge,"LI",{});var dIe=s(sE);a7e=n(dIe,"STRONG",{});var ywt=s(a7e);_0r=r(ywt,"deberta"),ywt.forEach(t),u0r=r(dIe," \u2014 "),CJ=n(dIe,"A",{href:!0});var Lwt=s(CJ);b0r=r(Lwt,"TFDebertaForQuestionAnswering"),Lwt.forEach(t),v0r=r(dIe," (DeBERTa model)"),dIe.forEach(t),F0r=i(ge),lE=n(ge,"LI",{});var cIe=s(lE);n7e=n(cIe,"STRONG",{});var xwt=s(n7e);T0r=r(xwt,"deberta-v2"),xwt.forEach(t),M0r=r(cIe," \u2014 "),wJ=n(cIe,"A",{href:!0});var $wt=s(wJ);E0r=r($wt,"TFDebertaV2ForQuestionAnswering"),$wt.forEach(t),C0r=r(cIe," (DeBERTa-v2 model)"),cIe.forEach(t),w0r=i(ge),iE=n(ge,"LI",{});var fIe=s(iE);s7e=n(fIe,"STRONG",{});var kwt=s(s7e);A0r=r(kwt,"distilbert"),kwt.forEach(t),y0r=r(fIe," \u2014 "),AJ=n(fIe,"A",{href:!0});var Swt=s(AJ);L0r=r(Swt,"TFDistilBertForQuestionAnswering"),Swt.forEach(t),x0r=r(fIe," (DistilBERT model)"),fIe.forEach(t),$0r=i(ge),dE=n(ge,"LI",{});var mIe=s(dE);l7e=n(mIe,"STRONG",{});var Rwt=s(l7e);k0r=r(Rwt,"electra"),Rwt.forEach(t),S0r=r(mIe," \u2014 "),yJ=n(mIe,"A",{href:!0});var Pwt=s(yJ);R0r=r(Pwt,"TFElectraForQuestionAnswering"),Pwt.forEach(t),P0r=r(mIe," (ELECTRA model)"),mIe.forEach(t),B0r=i(ge),cE=n(ge,"LI",{});var gIe=s(cE);i7e=n(gIe,"STRONG",{});var Bwt=s(i7e);I0r=r(Bwt,"flaubert"),Bwt.forEach(t),N0r=r(gIe," \u2014 "),LJ=n(gIe,"A",{href:!0});var Iwt=s(LJ);q0r=r(Iwt,"TFFlaubertForQuestionAnsweringSimple"),Iwt.forEach(t),j0r=r(gIe," (FlauBERT model)"),gIe.forEach(t),D0r=i(ge),fE=n(ge,"LI",{});var hIe=s(fE);d7e=n(hIe,"STRONG",{});var Nwt=s(d7e);G0r=r(Nwt,"funnel"),Nwt.forEach(t),O0r=r(hIe," \u2014 "),xJ=n(hIe,"A",{href:!0});var qwt=s(xJ);V0r=r(qwt,"TFFunnelForQuestionAnswering"),qwt.forEach(t),X0r=r(hIe," (Funnel Transformer model)"),hIe.forEach(t),z0r=i(ge),mE=n(ge,"LI",{});var pIe=s(mE);c7e=n(pIe,"STRONG",{});var jwt=s(c7e);W0r=r(jwt,"gptj"),jwt.forEach(t),Q0r=r(pIe," \u2014 "),$J=n(pIe,"A",{href:!0});var Dwt=s($J);H0r=r(Dwt,"TFGPTJForQuestionAnswering"),Dwt.forEach(t),U0r=r(pIe," (GPT-J model)"),pIe.forEach(t),J0r=i(ge),gE=n(ge,"LI",{});var _Ie=s(gE);f7e=n(_Ie,"STRONG",{});var Gwt=s(f7e);Y0r=r(Gwt,"longformer"),Gwt.forEach(t),K0r=r(_Ie," \u2014 "),kJ=n(_Ie,"A",{href:!0});var Owt=s(kJ);Z0r=r(Owt,"TFLongformerForQuestionAnswering"),Owt.forEach(t),eAr=r(_Ie," (Longformer model)"),_Ie.forEach(t),oAr=i(ge),hE=n(ge,"LI",{});var uIe=s(hE);m7e=n(uIe,"STRONG",{});var Vwt=s(m7e);rAr=r(Vwt,"mobilebert"),Vwt.forEach(t),tAr=r(uIe," \u2014 "),SJ=n(uIe,"A",{href:!0});var Xwt=s(SJ);aAr=r(Xwt,"TFMobileBertForQuestionAnswering"),Xwt.forEach(t),nAr=r(uIe," (MobileBERT model)"),uIe.forEach(t),sAr=i(ge),pE=n(ge,"LI",{});var bIe=s(pE);g7e=n(bIe,"STRONG",{});var zwt=s(g7e);lAr=r(zwt,"mpnet"),zwt.forEach(t),iAr=r(bIe," \u2014 "),RJ=n(bIe,"A",{href:!0});var Wwt=s(RJ);dAr=r(Wwt,"TFMPNetForQuestionAnswering"),Wwt.forEach(t),cAr=r(bIe," (MPNet model)"),bIe.forEach(t),fAr=i(ge),_E=n(ge,"LI",{});var vIe=s(_E);h7e=n(vIe,"STRONG",{});var Qwt=s(h7e);mAr=r(Qwt,"rembert"),Qwt.forEach(t),gAr=r(vIe," \u2014 "),PJ=n(vIe,"A",{href:!0});var Hwt=s(PJ);hAr=r(Hwt,"TFRemBertForQuestionAnswering"),Hwt.forEach(t),pAr=r(vIe," (RemBERT model)"),vIe.forEach(t),_Ar=i(ge),uE=n(ge,"LI",{});var FIe=s(uE);p7e=n(FIe,"STRONG",{});var Uwt=s(p7e);uAr=r(Uwt,"roberta"),Uwt.forEach(t),bAr=r(FIe," \u2014 "),BJ=n(FIe,"A",{href:!0});var Jwt=s(BJ);vAr=r(Jwt,"TFRobertaForQuestionAnswering"),Jwt.forEach(t),FAr=r(FIe," (RoBERTa model)"),FIe.forEach(t),TAr=i(ge),bE=n(ge,"LI",{});var TIe=s(bE);_7e=n(TIe,"STRONG",{});var Ywt=s(_7e);MAr=r(Ywt,"roformer"),Ywt.forEach(t),EAr=r(TIe," \u2014 "),IJ=n(TIe,"A",{href:!0});var Kwt=s(IJ);CAr=r(Kwt,"TFRoFormerForQuestionAnswering"),Kwt.forEach(t),wAr=r(TIe," (RoFormer model)"),TIe.forEach(t),AAr=i(ge),vE=n(ge,"LI",{});var MIe=s(vE);u7e=n(MIe,"STRONG",{});var Zwt=s(u7e);yAr=r(Zwt,"xlm"),Zwt.forEach(t),LAr=r(MIe," \u2014 "),NJ=n(MIe,"A",{href:!0});var e0t=s(NJ);xAr=r(e0t,"TFXLMForQuestionAnsweringSimple"),e0t.forEach(t),$Ar=r(MIe," (XLM model)"),MIe.forEach(t),kAr=i(ge),FE=n(ge,"LI",{});var EIe=s(FE);b7e=n(EIe,"STRONG",{});var o0t=s(b7e);SAr=r(o0t,"xlm-roberta"),o0t.forEach(t),RAr=r(EIe," \u2014 "),qJ=n(EIe,"A",{href:!0});var r0t=s(qJ);PAr=r(r0t,"TFXLMRobertaForQuestionAnswering"),r0t.forEach(t),BAr=r(EIe," (XLM-RoBERTa model)"),EIe.forEach(t),IAr=i(ge),TE=n(ge,"LI",{});var CIe=s(TE);v7e=n(CIe,"STRONG",{});var t0t=s(v7e);NAr=r(t0t,"xlnet"),t0t.forEach(t),qAr=r(CIe," \u2014 "),jJ=n(CIe,"A",{href:!0});var a0t=s(jJ);jAr=r(a0t,"TFXLNetForQuestionAnsweringSimple"),a0t.forEach(t),DAr=r(CIe," (XLNet model)"),CIe.forEach(t),ge.forEach(t),GAr=i(Nl),T(ME.$$.fragment,Nl),Nl.forEach(t),Il.forEach(t),rDe=i(f),Cc=n(f,"H2",{class:!0});var dOe=s(Cc);EE=n(dOe,"A",{id:!0,class:!0,href:!0});var n0t=s(EE);F7e=n(n0t,"SPAN",{});var s0t=s(F7e);T(M8.$$.fragment,s0t),s0t.forEach(t),n0t.forEach(t),OAr=i(dOe),T7e=n(dOe,"SPAN",{});var l0t=s(T7e);VAr=r(l0t,"TFAutoModelForVision2Seq"),l0t.forEach(t),dOe.forEach(t),tDe=i(f),dr=n(f,"DIV",{class:!0});var ql=s(dr);T(E8.$$.fragment,ql),XAr=i(ql),wc=n(ql,"P",{});var Hee=s(wc);zAr=r(Hee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),DJ=n(Hee,"A",{href:!0});var i0t=s(DJ);WAr=r(i0t,"from_pretrained()"),i0t.forEach(t),QAr=r(Hee," class method or the "),GJ=n(Hee,"A",{href:!0});var d0t=s(GJ);HAr=r(d0t,"from_config()"),d0t.forEach(t),UAr=r(Hee,` class
method.`),Hee.forEach(t),JAr=i(ql),C8=n(ql,"P",{});var cOe=s(C8);YAr=r(cOe,"This class cannot be instantiated directly using "),M7e=n(cOe,"CODE",{});var c0t=s(M7e);KAr=r(c0t,"__init__()"),c0t.forEach(t),ZAr=r(cOe," (throws an error)."),cOe.forEach(t),eyr=i(ql),jt=n(ql,"DIV",{class:!0});var r0=s(jt);T(w8.$$.fragment,r0),oyr=i(r0),E7e=n(r0,"P",{});var f0t=s(E7e);ryr=r(f0t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),f0t.forEach(t),tyr=i(r0),Ac=n(r0,"P",{});var Uee=s(Ac);ayr=r(Uee,`Note:
Loading a model from its configuration file does `),C7e=n(Uee,"STRONG",{});var m0t=s(C7e);nyr=r(m0t,"not"),m0t.forEach(t),syr=r(Uee,` load the model weights. It only affects the
model\u2019s configuration. Use `),OJ=n(Uee,"A",{href:!0});var g0t=s(OJ);lyr=r(g0t,"from_pretrained()"),g0t.forEach(t),iyr=r(Uee," to load the model weights."),Uee.forEach(t),dyr=i(r0),T(CE.$$.fragment,r0),r0.forEach(t),cyr=i(ql),Nr=n(ql,"DIV",{class:!0});var jl=s(Nr);T(A8.$$.fragment,jl),fyr=i(jl),w7e=n(jl,"P",{});var h0t=s(w7e);myr=r(h0t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),h0t.forEach(t),gyr=i(jl),mn=n(jl,"P",{});var t0=s(mn);hyr=r(t0,"The model class to instantiate is selected based on the "),A7e=n(t0,"CODE",{});var p0t=s(A7e);pyr=r(p0t,"model_type"),p0t.forEach(t),_yr=r(t0,` property of the config object (either
passed as an argument or loaded from `),y7e=n(t0,"CODE",{});var _0t=s(y7e);uyr=r(_0t,"pretrained_model_name_or_path"),_0t.forEach(t),byr=r(t0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L7e=n(t0,"CODE",{});var u0t=s(L7e);vyr=r(u0t,"pretrained_model_name_or_path"),u0t.forEach(t),Fyr=r(t0,":"),t0.forEach(t),Tyr=i(jl),x7e=n(jl,"UL",{});var b0t=s(x7e);wE=n(b0t,"LI",{});var wIe=s(wE);$7e=n(wIe,"STRONG",{});var v0t=s($7e);Myr=r(v0t,"vision-encoder-decoder"),v0t.forEach(t),Eyr=r(wIe," \u2014 "),VJ=n(wIe,"A",{href:!0});var F0t=s(VJ);Cyr=r(F0t,"TFVisionEncoderDecoderModel"),F0t.forEach(t),wyr=r(wIe," (Vision Encoder decoder model)"),wIe.forEach(t),b0t.forEach(t),Ayr=i(jl),T(AE.$$.fragment,jl),jl.forEach(t),ql.forEach(t),aDe=i(f),yc=n(f,"H2",{class:!0});var fOe=s(yc);yE=n(fOe,"A",{id:!0,class:!0,href:!0});var T0t=s(yE);k7e=n(T0t,"SPAN",{});var M0t=s(k7e);T(y8.$$.fragment,M0t),M0t.forEach(t),T0t.forEach(t),yyr=i(fOe),S7e=n(fOe,"SPAN",{});var E0t=s(S7e);Lyr=r(E0t,"TFAutoModelForSpeechSeq2Seq"),E0t.forEach(t),fOe.forEach(t),nDe=i(f),cr=n(f,"DIV",{class:!0});var Dl=s(cr);T(L8.$$.fragment,Dl),xyr=i(Dl),Lc=n(Dl,"P",{});var Jee=s(Lc);$yr=r(Jee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),XJ=n(Jee,"A",{href:!0});var C0t=s(XJ);kyr=r(C0t,"from_pretrained()"),C0t.forEach(t),Syr=r(Jee," class method or the "),zJ=n(Jee,"A",{href:!0});var w0t=s(zJ);Ryr=r(w0t,"from_config()"),w0t.forEach(t),Pyr=r(Jee,` class
method.`),Jee.forEach(t),Byr=i(Dl),x8=n(Dl,"P",{});var mOe=s(x8);Iyr=r(mOe,"This class cannot be instantiated directly using "),R7e=n(mOe,"CODE",{});var A0t=s(R7e);Nyr=r(A0t,"__init__()"),A0t.forEach(t),qyr=r(mOe," (throws an error)."),mOe.forEach(t),jyr=i(Dl),Dt=n(Dl,"DIV",{class:!0});var a0=s(Dt);T($8.$$.fragment,a0),Dyr=i(a0),P7e=n(a0,"P",{});var y0t=s(P7e);Gyr=r(y0t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),y0t.forEach(t),Oyr=i(a0),xc=n(a0,"P",{});var Yee=s(xc);Vyr=r(Yee,`Note:
Loading a model from its configuration file does `),B7e=n(Yee,"STRONG",{});var L0t=s(B7e);Xyr=r(L0t,"not"),L0t.forEach(t),zyr=r(Yee,` load the model weights. It only affects the
model\u2019s configuration. Use `),WJ=n(Yee,"A",{href:!0});var x0t=s(WJ);Wyr=r(x0t,"from_pretrained()"),x0t.forEach(t),Qyr=r(Yee," to load the model weights."),Yee.forEach(t),Hyr=i(a0),T(LE.$$.fragment,a0),a0.forEach(t),Uyr=i(Dl),qr=n(Dl,"DIV",{class:!0});var Gl=s(qr);T(k8.$$.fragment,Gl),Jyr=i(Gl),I7e=n(Gl,"P",{});var $0t=s(I7e);Yyr=r($0t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),$0t.forEach(t),Kyr=i(Gl),gn=n(Gl,"P",{});var n0=s(gn);Zyr=r(n0,"The model class to instantiate is selected based on the "),N7e=n(n0,"CODE",{});var k0t=s(N7e);eLr=r(k0t,"model_type"),k0t.forEach(t),oLr=r(n0,` property of the config object (either
passed as an argument or loaded from `),q7e=n(n0,"CODE",{});var S0t=s(q7e);rLr=r(S0t,"pretrained_model_name_or_path"),S0t.forEach(t),tLr=r(n0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j7e=n(n0,"CODE",{});var R0t=s(j7e);aLr=r(R0t,"pretrained_model_name_or_path"),R0t.forEach(t),nLr=r(n0,":"),n0.forEach(t),sLr=i(Gl),D7e=n(Gl,"UL",{});var P0t=s(D7e);xE=n(P0t,"LI",{});var AIe=s(xE);G7e=n(AIe,"STRONG",{});var B0t=s(G7e);lLr=r(B0t,"speech_to_text"),B0t.forEach(t),iLr=r(AIe," \u2014 "),QJ=n(AIe,"A",{href:!0});var I0t=s(QJ);dLr=r(I0t,"TFSpeech2TextForConditionalGeneration"),I0t.forEach(t),cLr=r(AIe," (Speech2Text model)"),AIe.forEach(t),P0t.forEach(t),fLr=i(Gl),T($E.$$.fragment,Gl),Gl.forEach(t),Dl.forEach(t),sDe=i(f),$c=n(f,"H2",{class:!0});var gOe=s($c);kE=n(gOe,"A",{id:!0,class:!0,href:!0});var N0t=s(kE);O7e=n(N0t,"SPAN",{});var q0t=s(O7e);T(S8.$$.fragment,q0t),q0t.forEach(t),N0t.forEach(t),mLr=i(gOe),V7e=n(gOe,"SPAN",{});var j0t=s(V7e);gLr=r(j0t,"FlaxAutoModel"),j0t.forEach(t),gOe.forEach(t),lDe=i(f),fr=n(f,"DIV",{class:!0});var Ol=s(fr);T(R8.$$.fragment,Ol),hLr=i(Ol),kc=n(Ol,"P",{});var Kee=s(kc);pLr=r(Kee,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),HJ=n(Kee,"A",{href:!0});var D0t=s(HJ);_Lr=r(D0t,"from_pretrained()"),D0t.forEach(t),uLr=r(Kee," class method or the "),UJ=n(Kee,"A",{href:!0});var G0t=s(UJ);bLr=r(G0t,"from_config()"),G0t.forEach(t),vLr=r(Kee,` class
method.`),Kee.forEach(t),FLr=i(Ol),P8=n(Ol,"P",{});var hOe=s(P8);TLr=r(hOe,"This class cannot be instantiated directly using "),X7e=n(hOe,"CODE",{});var O0t=s(X7e);MLr=r(O0t,"__init__()"),O0t.forEach(t),ELr=r(hOe," (throws an error)."),hOe.forEach(t),CLr=i(Ol),Gt=n(Ol,"DIV",{class:!0});var s0=s(Gt);T(B8.$$.fragment,s0),wLr=i(s0),z7e=n(s0,"P",{});var V0t=s(z7e);ALr=r(V0t,"Instantiates one of the base model classes of the library from a configuration."),V0t.forEach(t),yLr=i(s0),Sc=n(s0,"P",{});var Zee=s(Sc);LLr=r(Zee,`Note:
Loading a model from its configuration file does `),W7e=n(Zee,"STRONG",{});var X0t=s(W7e);xLr=r(X0t,"not"),X0t.forEach(t),$Lr=r(Zee,` load the model weights. It only affects the
model\u2019s configuration. Use `),JJ=n(Zee,"A",{href:!0});var z0t=s(JJ);kLr=r(z0t,"from_pretrained()"),z0t.forEach(t),SLr=r(Zee," to load the model weights."),Zee.forEach(t),RLr=i(s0),T(SE.$$.fragment,s0),s0.forEach(t),PLr=i(Ol),jr=n(Ol,"DIV",{class:!0});var Vl=s(jr);T(I8.$$.fragment,Vl),BLr=i(Vl),Q7e=n(Vl,"P",{});var W0t=s(Q7e);ILr=r(W0t,"Instantiate one of the base model classes of the library from a pretrained model."),W0t.forEach(t),NLr=i(Vl),hn=n(Vl,"P",{});var l0=s(hn);qLr=r(l0,"The model class to instantiate is selected based on the "),H7e=n(l0,"CODE",{});var Q0t=s(H7e);jLr=r(Q0t,"model_type"),Q0t.forEach(t),DLr=r(l0,` property of the config object (either
passed as an argument or loaded from `),U7e=n(l0,"CODE",{});var H0t=s(U7e);GLr=r(H0t,"pretrained_model_name_or_path"),H0t.forEach(t),OLr=r(l0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J7e=n(l0,"CODE",{});var U0t=s(J7e);VLr=r(U0t,"pretrained_model_name_or_path"),U0t.forEach(t),XLr=r(l0,":"),l0.forEach(t),zLr=i(Vl),re=n(Vl,"UL",{});var ne=s(re);RE=n(ne,"LI",{});var yIe=s(RE);Y7e=n(yIe,"STRONG",{});var J0t=s(Y7e);WLr=r(J0t,"albert"),J0t.forEach(t),QLr=r(yIe," \u2014 "),YJ=n(yIe,"A",{href:!0});var Y0t=s(YJ);HLr=r(Y0t,"FlaxAlbertModel"),Y0t.forEach(t),ULr=r(yIe," (ALBERT model)"),yIe.forEach(t),JLr=i(ne),PE=n(ne,"LI",{});var LIe=s(PE);K7e=n(LIe,"STRONG",{});var K0t=s(K7e);YLr=r(K0t,"bart"),K0t.forEach(t),KLr=r(LIe," \u2014 "),KJ=n(LIe,"A",{href:!0});var Z0t=s(KJ);ZLr=r(Z0t,"FlaxBartModel"),Z0t.forEach(t),e8r=r(LIe," (BART model)"),LIe.forEach(t),o8r=i(ne),BE=n(ne,"LI",{});var xIe=s(BE);Z7e=n(xIe,"STRONG",{});var eAt=s(Z7e);r8r=r(eAt,"beit"),eAt.forEach(t),t8r=r(xIe," \u2014 "),ZJ=n(xIe,"A",{href:!0});var oAt=s(ZJ);a8r=r(oAt,"FlaxBeitModel"),oAt.forEach(t),n8r=r(xIe," (BEiT model)"),xIe.forEach(t),s8r=i(ne),IE=n(ne,"LI",{});var $Ie=s(IE);e9e=n($Ie,"STRONG",{});var rAt=s(e9e);l8r=r(rAt,"bert"),rAt.forEach(t),i8r=r($Ie," \u2014 "),eY=n($Ie,"A",{href:!0});var tAt=s(eY);d8r=r(tAt,"FlaxBertModel"),tAt.forEach(t),c8r=r($Ie," (BERT model)"),$Ie.forEach(t),f8r=i(ne),NE=n(ne,"LI",{});var kIe=s(NE);o9e=n(kIe,"STRONG",{});var aAt=s(o9e);m8r=r(aAt,"big_bird"),aAt.forEach(t),g8r=r(kIe," \u2014 "),oY=n(kIe,"A",{href:!0});var nAt=s(oY);h8r=r(nAt,"FlaxBigBirdModel"),nAt.forEach(t),p8r=r(kIe," (BigBird model)"),kIe.forEach(t),_8r=i(ne),qE=n(ne,"LI",{});var SIe=s(qE);r9e=n(SIe,"STRONG",{});var sAt=s(r9e);u8r=r(sAt,"blenderbot"),sAt.forEach(t),b8r=r(SIe," \u2014 "),rY=n(SIe,"A",{href:!0});var lAt=s(rY);v8r=r(lAt,"FlaxBlenderbotModel"),lAt.forEach(t),F8r=r(SIe," (Blenderbot model)"),SIe.forEach(t),T8r=i(ne),jE=n(ne,"LI",{});var RIe=s(jE);t9e=n(RIe,"STRONG",{});var iAt=s(t9e);M8r=r(iAt,"blenderbot-small"),iAt.forEach(t),E8r=r(RIe," \u2014 "),tY=n(RIe,"A",{href:!0});var dAt=s(tY);C8r=r(dAt,"FlaxBlenderbotSmallModel"),dAt.forEach(t),w8r=r(RIe," (BlenderbotSmall model)"),RIe.forEach(t),A8r=i(ne),DE=n(ne,"LI",{});var PIe=s(DE);a9e=n(PIe,"STRONG",{});var cAt=s(a9e);y8r=r(cAt,"clip"),cAt.forEach(t),L8r=r(PIe," \u2014 "),aY=n(PIe,"A",{href:!0});var fAt=s(aY);x8r=r(fAt,"FlaxCLIPModel"),fAt.forEach(t),$8r=r(PIe," (CLIP model)"),PIe.forEach(t),k8r=i(ne),GE=n(ne,"LI",{});var BIe=s(GE);n9e=n(BIe,"STRONG",{});var mAt=s(n9e);S8r=r(mAt,"distilbert"),mAt.forEach(t),R8r=r(BIe," \u2014 "),nY=n(BIe,"A",{href:!0});var gAt=s(nY);P8r=r(gAt,"FlaxDistilBertModel"),gAt.forEach(t),B8r=r(BIe," (DistilBERT model)"),BIe.forEach(t),I8r=i(ne),OE=n(ne,"LI",{});var IIe=s(OE);s9e=n(IIe,"STRONG",{});var hAt=s(s9e);N8r=r(hAt,"electra"),hAt.forEach(t),q8r=r(IIe," \u2014 "),sY=n(IIe,"A",{href:!0});var pAt=s(sY);j8r=r(pAt,"FlaxElectraModel"),pAt.forEach(t),D8r=r(IIe," (ELECTRA model)"),IIe.forEach(t),G8r=i(ne),VE=n(ne,"LI",{});var NIe=s(VE);l9e=n(NIe,"STRONG",{});var _At=s(l9e);O8r=r(_At,"gpt2"),_At.forEach(t),V8r=r(NIe," \u2014 "),lY=n(NIe,"A",{href:!0});var uAt=s(lY);X8r=r(uAt,"FlaxGPT2Model"),uAt.forEach(t),z8r=r(NIe," (OpenAI GPT-2 model)"),NIe.forEach(t),W8r=i(ne),XE=n(ne,"LI",{});var qIe=s(XE);i9e=n(qIe,"STRONG",{});var bAt=s(i9e);Q8r=r(bAt,"gpt_neo"),bAt.forEach(t),H8r=r(qIe," \u2014 "),iY=n(qIe,"A",{href:!0});var vAt=s(iY);U8r=r(vAt,"FlaxGPTNeoModel"),vAt.forEach(t),J8r=r(qIe," (GPT Neo model)"),qIe.forEach(t),Y8r=i(ne),zE=n(ne,"LI",{});var jIe=s(zE);d9e=n(jIe,"STRONG",{});var FAt=s(d9e);K8r=r(FAt,"gptj"),FAt.forEach(t),Z8r=r(jIe," \u2014 "),dY=n(jIe,"A",{href:!0});var TAt=s(dY);exr=r(TAt,"FlaxGPTJModel"),TAt.forEach(t),oxr=r(jIe," (GPT-J model)"),jIe.forEach(t),rxr=i(ne),WE=n(ne,"LI",{});var DIe=s(WE);c9e=n(DIe,"STRONG",{});var MAt=s(c9e);txr=r(MAt,"longt5"),MAt.forEach(t),axr=r(DIe," \u2014 "),cY=n(DIe,"A",{href:!0});var EAt=s(cY);nxr=r(EAt,"FlaxLongT5Model"),EAt.forEach(t),sxr=r(DIe," (LongT5 model)"),DIe.forEach(t),lxr=i(ne),QE=n(ne,"LI",{});var GIe=s(QE);f9e=n(GIe,"STRONG",{});var CAt=s(f9e);ixr=r(CAt,"marian"),CAt.forEach(t),dxr=r(GIe," \u2014 "),fY=n(GIe,"A",{href:!0});var wAt=s(fY);cxr=r(wAt,"FlaxMarianModel"),wAt.forEach(t),fxr=r(GIe," (Marian model)"),GIe.forEach(t),mxr=i(ne),HE=n(ne,"LI",{});var OIe=s(HE);m9e=n(OIe,"STRONG",{});var AAt=s(m9e);gxr=r(AAt,"mbart"),AAt.forEach(t),hxr=r(OIe," \u2014 "),mY=n(OIe,"A",{href:!0});var yAt=s(mY);pxr=r(yAt,"FlaxMBartModel"),yAt.forEach(t),_xr=r(OIe," (mBART model)"),OIe.forEach(t),uxr=i(ne),UE=n(ne,"LI",{});var VIe=s(UE);g9e=n(VIe,"STRONG",{});var LAt=s(g9e);bxr=r(LAt,"mt5"),LAt.forEach(t),vxr=r(VIe," \u2014 "),gY=n(VIe,"A",{href:!0});var xAt=s(gY);Fxr=r(xAt,"FlaxMT5Model"),xAt.forEach(t),Txr=r(VIe," (mT5 model)"),VIe.forEach(t),Mxr=i(ne),JE=n(ne,"LI",{});var XIe=s(JE);h9e=n(XIe,"STRONG",{});var $At=s(h9e);Exr=r($At,"pegasus"),$At.forEach(t),Cxr=r(XIe," \u2014 "),hY=n(XIe,"A",{href:!0});var kAt=s(hY);wxr=r(kAt,"FlaxPegasusModel"),kAt.forEach(t),Axr=r(XIe," (Pegasus model)"),XIe.forEach(t),yxr=i(ne),YE=n(ne,"LI",{});var zIe=s(YE);p9e=n(zIe,"STRONG",{});var SAt=s(p9e);Lxr=r(SAt,"roberta"),SAt.forEach(t),xxr=r(zIe," \u2014 "),pY=n(zIe,"A",{href:!0});var RAt=s(pY);$xr=r(RAt,"FlaxRobertaModel"),RAt.forEach(t),kxr=r(zIe," (RoBERTa model)"),zIe.forEach(t),Sxr=i(ne),KE=n(ne,"LI",{});var WIe=s(KE);_9e=n(WIe,"STRONG",{});var PAt=s(_9e);Rxr=r(PAt,"roformer"),PAt.forEach(t),Pxr=r(WIe," \u2014 "),_Y=n(WIe,"A",{href:!0});var BAt=s(_Y);Bxr=r(BAt,"FlaxRoFormerModel"),BAt.forEach(t),Ixr=r(WIe," (RoFormer model)"),WIe.forEach(t),Nxr=i(ne),ZE=n(ne,"LI",{});var QIe=s(ZE);u9e=n(QIe,"STRONG",{});var IAt=s(u9e);qxr=r(IAt,"t5"),IAt.forEach(t),jxr=r(QIe," \u2014 "),uY=n(QIe,"A",{href:!0});var NAt=s(uY);Dxr=r(NAt,"FlaxT5Model"),NAt.forEach(t),Gxr=r(QIe," (T5 model)"),QIe.forEach(t),Oxr=i(ne),eC=n(ne,"LI",{});var HIe=s(eC);b9e=n(HIe,"STRONG",{});var qAt=s(b9e);Vxr=r(qAt,"vision-text-dual-encoder"),qAt.forEach(t),Xxr=r(HIe," \u2014 "),bY=n(HIe,"A",{href:!0});var jAt=s(bY);zxr=r(jAt,"FlaxVisionTextDualEncoderModel"),jAt.forEach(t),Wxr=r(HIe," (VisionTextDualEncoder model)"),HIe.forEach(t),Qxr=i(ne),oC=n(ne,"LI",{});var UIe=s(oC);v9e=n(UIe,"STRONG",{});var DAt=s(v9e);Hxr=r(DAt,"vit"),DAt.forEach(t),Uxr=r(UIe," \u2014 "),vY=n(UIe,"A",{href:!0});var GAt=s(vY);Jxr=r(GAt,"FlaxViTModel"),GAt.forEach(t),Yxr=r(UIe," (ViT model)"),UIe.forEach(t),Kxr=i(ne),rC=n(ne,"LI",{});var JIe=s(rC);F9e=n(JIe,"STRONG",{});var OAt=s(F9e);Zxr=r(OAt,"wav2vec2"),OAt.forEach(t),e$r=r(JIe," \u2014 "),FY=n(JIe,"A",{href:!0});var VAt=s(FY);o$r=r(VAt,"FlaxWav2Vec2Model"),VAt.forEach(t),r$r=r(JIe," (Wav2Vec2 model)"),JIe.forEach(t),t$r=i(ne),tC=n(ne,"LI",{});var YIe=s(tC);T9e=n(YIe,"STRONG",{});var XAt=s(T9e);a$r=r(XAt,"xglm"),XAt.forEach(t),n$r=r(YIe," \u2014 "),TY=n(YIe,"A",{href:!0});var zAt=s(TY);s$r=r(zAt,"FlaxXGLMModel"),zAt.forEach(t),l$r=r(YIe," (XGLM model)"),YIe.forEach(t),i$r=i(ne),aC=n(ne,"LI",{});var KIe=s(aC);M9e=n(KIe,"STRONG",{});var WAt=s(M9e);d$r=r(WAt,"xlm-roberta"),WAt.forEach(t),c$r=r(KIe," \u2014 "),MY=n(KIe,"A",{href:!0});var QAt=s(MY);f$r=r(QAt,"FlaxXLMRobertaModel"),QAt.forEach(t),m$r=r(KIe," (XLM-RoBERTa model)"),KIe.forEach(t),ne.forEach(t),g$r=i(Vl),T(nC.$$.fragment,Vl),Vl.forEach(t),Ol.forEach(t),iDe=i(f),Rc=n(f,"H2",{class:!0});var pOe=s(Rc);sC=n(pOe,"A",{id:!0,class:!0,href:!0});var HAt=s(sC);E9e=n(HAt,"SPAN",{});var UAt=s(E9e);T(N8.$$.fragment,UAt),UAt.forEach(t),HAt.forEach(t),h$r=i(pOe),C9e=n(pOe,"SPAN",{});var JAt=s(C9e);p$r=r(JAt,"FlaxAutoModelForCausalLM"),JAt.forEach(t),pOe.forEach(t),dDe=i(f),mr=n(f,"DIV",{class:!0});var Xl=s(mr);T(q8.$$.fragment,Xl),_$r=i(Xl),Pc=n(Xl,"P",{});var eoe=s(Pc);u$r=r(eoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),EY=n(eoe,"A",{href:!0});var YAt=s(EY);b$r=r(YAt,"from_pretrained()"),YAt.forEach(t),v$r=r(eoe," class method or the "),CY=n(eoe,"A",{href:!0});var KAt=s(CY);F$r=r(KAt,"from_config()"),KAt.forEach(t),T$r=r(eoe,` class
method.`),eoe.forEach(t),M$r=i(Xl),j8=n(Xl,"P",{});var _Oe=s(j8);E$r=r(_Oe,"This class cannot be instantiated directly using "),w9e=n(_Oe,"CODE",{});var ZAt=s(w9e);C$r=r(ZAt,"__init__()"),ZAt.forEach(t),w$r=r(_Oe," (throws an error)."),_Oe.forEach(t),A$r=i(Xl),Ot=n(Xl,"DIV",{class:!0});var i0=s(Ot);T(D8.$$.fragment,i0),y$r=i(i0),A9e=n(i0,"P",{});var eyt=s(A9e);L$r=r(eyt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),eyt.forEach(t),x$r=i(i0),Bc=n(i0,"P",{});var ooe=s(Bc);$$r=r(ooe,`Note:
Loading a model from its configuration file does `),y9e=n(ooe,"STRONG",{});var oyt=s(y9e);k$r=r(oyt,"not"),oyt.forEach(t),S$r=r(ooe,` load the model weights. It only affects the
model\u2019s configuration. Use `),wY=n(ooe,"A",{href:!0});var ryt=s(wY);R$r=r(ryt,"from_pretrained()"),ryt.forEach(t),P$r=r(ooe," to load the model weights."),ooe.forEach(t),B$r=i(i0),T(lC.$$.fragment,i0),i0.forEach(t),I$r=i(Xl),Dr=n(Xl,"DIV",{class:!0});var zl=s(Dr);T(G8.$$.fragment,zl),N$r=i(zl),L9e=n(zl,"P",{});var tyt=s(L9e);q$r=r(tyt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),tyt.forEach(t),j$r=i(zl),pn=n(zl,"P",{});var d0=s(pn);D$r=r(d0,"The model class to instantiate is selected based on the "),x9e=n(d0,"CODE",{});var ayt=s(x9e);G$r=r(ayt,"model_type"),ayt.forEach(t),O$r=r(d0,` property of the config object (either
passed as an argument or loaded from `),$9e=n(d0,"CODE",{});var nyt=s($9e);V$r=r(nyt,"pretrained_model_name_or_path"),nyt.forEach(t),X$r=r(d0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k9e=n(d0,"CODE",{});var syt=s(k9e);z$r=r(syt,"pretrained_model_name_or_path"),syt.forEach(t),W$r=r(d0,":"),d0.forEach(t),Q$r=i(zl),Pe=n(zl,"UL",{});var ze=s(Pe);iC=n(ze,"LI",{});var ZIe=s(iC);S9e=n(ZIe,"STRONG",{});var lyt=s(S9e);H$r=r(lyt,"bart"),lyt.forEach(t),U$r=r(ZIe," \u2014 "),AY=n(ZIe,"A",{href:!0});var iyt=s(AY);J$r=r(iyt,"FlaxBartForCausalLM"),iyt.forEach(t),Y$r=r(ZIe," (BART model)"),ZIe.forEach(t),K$r=i(ze),dC=n(ze,"LI",{});var eNe=s(dC);R9e=n(eNe,"STRONG",{});var dyt=s(R9e);Z$r=r(dyt,"bert"),dyt.forEach(t),ekr=r(eNe," \u2014 "),yY=n(eNe,"A",{href:!0});var cyt=s(yY);okr=r(cyt,"FlaxBertForCausalLM"),cyt.forEach(t),rkr=r(eNe," (BERT model)"),eNe.forEach(t),tkr=i(ze),cC=n(ze,"LI",{});var oNe=s(cC);P9e=n(oNe,"STRONG",{});var fyt=s(P9e);akr=r(fyt,"big_bird"),fyt.forEach(t),nkr=r(oNe," \u2014 "),LY=n(oNe,"A",{href:!0});var myt=s(LY);skr=r(myt,"FlaxBigBirdForCausalLM"),myt.forEach(t),lkr=r(oNe," (BigBird model)"),oNe.forEach(t),ikr=i(ze),fC=n(ze,"LI",{});var rNe=s(fC);B9e=n(rNe,"STRONG",{});var gyt=s(B9e);dkr=r(gyt,"electra"),gyt.forEach(t),ckr=r(rNe," \u2014 "),xY=n(rNe,"A",{href:!0});var hyt=s(xY);fkr=r(hyt,"FlaxElectraForCausalLM"),hyt.forEach(t),mkr=r(rNe," (ELECTRA model)"),rNe.forEach(t),gkr=i(ze),mC=n(ze,"LI",{});var tNe=s(mC);I9e=n(tNe,"STRONG",{});var pyt=s(I9e);hkr=r(pyt,"gpt2"),pyt.forEach(t),pkr=r(tNe," \u2014 "),$Y=n(tNe,"A",{href:!0});var _yt=s($Y);_kr=r(_yt,"FlaxGPT2LMHeadModel"),_yt.forEach(t),ukr=r(tNe," (OpenAI GPT-2 model)"),tNe.forEach(t),bkr=i(ze),gC=n(ze,"LI",{});var aNe=s(gC);N9e=n(aNe,"STRONG",{});var uyt=s(N9e);vkr=r(uyt,"gpt_neo"),uyt.forEach(t),Fkr=r(aNe," \u2014 "),kY=n(aNe,"A",{href:!0});var byt=s(kY);Tkr=r(byt,"FlaxGPTNeoForCausalLM"),byt.forEach(t),Mkr=r(aNe," (GPT Neo model)"),aNe.forEach(t),Ekr=i(ze),hC=n(ze,"LI",{});var nNe=s(hC);q9e=n(nNe,"STRONG",{});var vyt=s(q9e);Ckr=r(vyt,"gptj"),vyt.forEach(t),wkr=r(nNe," \u2014 "),SY=n(nNe,"A",{href:!0});var Fyt=s(SY);Akr=r(Fyt,"FlaxGPTJForCausalLM"),Fyt.forEach(t),ykr=r(nNe," (GPT-J model)"),nNe.forEach(t),Lkr=i(ze),pC=n(ze,"LI",{});var sNe=s(pC);j9e=n(sNe,"STRONG",{});var Tyt=s(j9e);xkr=r(Tyt,"roberta"),Tyt.forEach(t),$kr=r(sNe," \u2014 "),RY=n(sNe,"A",{href:!0});var Myt=s(RY);kkr=r(Myt,"FlaxRobertaForCausalLM"),Myt.forEach(t),Skr=r(sNe," (RoBERTa model)"),sNe.forEach(t),Rkr=i(ze),_C=n(ze,"LI",{});var lNe=s(_C);D9e=n(lNe,"STRONG",{});var Eyt=s(D9e);Pkr=r(Eyt,"xglm"),Eyt.forEach(t),Bkr=r(lNe," \u2014 "),PY=n(lNe,"A",{href:!0});var Cyt=s(PY);Ikr=r(Cyt,"FlaxXGLMForCausalLM"),Cyt.forEach(t),Nkr=r(lNe," (XGLM model)"),lNe.forEach(t),ze.forEach(t),qkr=i(zl),T(uC.$$.fragment,zl),zl.forEach(t),Xl.forEach(t),cDe=i(f),Ic=n(f,"H2",{class:!0});var uOe=s(Ic);bC=n(uOe,"A",{id:!0,class:!0,href:!0});var wyt=s(bC);G9e=n(wyt,"SPAN",{});var Ayt=s(G9e);T(O8.$$.fragment,Ayt),Ayt.forEach(t),wyt.forEach(t),jkr=i(uOe),O9e=n(uOe,"SPAN",{});var yyt=s(O9e);Dkr=r(yyt,"FlaxAutoModelForPreTraining"),yyt.forEach(t),uOe.forEach(t),fDe=i(f),gr=n(f,"DIV",{class:!0});var Wl=s(gr);T(V8.$$.fragment,Wl),Gkr=i(Wl),Nc=n(Wl,"P",{});var roe=s(Nc);Okr=r(roe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),BY=n(roe,"A",{href:!0});var Lyt=s(BY);Vkr=r(Lyt,"from_pretrained()"),Lyt.forEach(t),Xkr=r(roe," class method or the "),IY=n(roe,"A",{href:!0});var xyt=s(IY);zkr=r(xyt,"from_config()"),xyt.forEach(t),Wkr=r(roe,` class
method.`),roe.forEach(t),Qkr=i(Wl),X8=n(Wl,"P",{});var bOe=s(X8);Hkr=r(bOe,"This class cannot be instantiated directly using "),V9e=n(bOe,"CODE",{});var $yt=s(V9e);Ukr=r($yt,"__init__()"),$yt.forEach(t),Jkr=r(bOe," (throws an error)."),bOe.forEach(t),Ykr=i(Wl),Vt=n(Wl,"DIV",{class:!0});var c0=s(Vt);T(z8.$$.fragment,c0),Kkr=i(c0),X9e=n(c0,"P",{});var kyt=s(X9e);Zkr=r(kyt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),kyt.forEach(t),eSr=i(c0),qc=n(c0,"P",{});var toe=s(qc);oSr=r(toe,`Note:
Loading a model from its configuration file does `),z9e=n(toe,"STRONG",{});var Syt=s(z9e);rSr=r(Syt,"not"),Syt.forEach(t),tSr=r(toe,` load the model weights. It only affects the
model\u2019s configuration. Use `),NY=n(toe,"A",{href:!0});var Ryt=s(NY);aSr=r(Ryt,"from_pretrained()"),Ryt.forEach(t),nSr=r(toe," to load the model weights."),toe.forEach(t),sSr=i(c0),T(vC.$$.fragment,c0),c0.forEach(t),lSr=i(Wl),Gr=n(Wl,"DIV",{class:!0});var Ql=s(Gr);T(W8.$$.fragment,Ql),iSr=i(Ql),W9e=n(Ql,"P",{});var Pyt=s(W9e);dSr=r(Pyt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Pyt.forEach(t),cSr=i(Ql),_n=n(Ql,"P",{});var f0=s(_n);fSr=r(f0,"The model class to instantiate is selected based on the "),Q9e=n(f0,"CODE",{});var Byt=s(Q9e);mSr=r(Byt,"model_type"),Byt.forEach(t),gSr=r(f0,` property of the config object (either
passed as an argument or loaded from `),H9e=n(f0,"CODE",{});var Iyt=s(H9e);hSr=r(Iyt,"pretrained_model_name_or_path"),Iyt.forEach(t),pSr=r(f0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U9e=n(f0,"CODE",{});var Nyt=s(U9e);_Sr=r(Nyt,"pretrained_model_name_or_path"),Nyt.forEach(t),uSr=r(f0,":"),f0.forEach(t),bSr=i(Ql),Te=n(Ql,"UL",{});var Ce=s(Te);FC=n(Ce,"LI",{});var iNe=s(FC);J9e=n(iNe,"STRONG",{});var qyt=s(J9e);vSr=r(qyt,"albert"),qyt.forEach(t),FSr=r(iNe," \u2014 "),qY=n(iNe,"A",{href:!0});var jyt=s(qY);TSr=r(jyt,"FlaxAlbertForPreTraining"),jyt.forEach(t),MSr=r(iNe," (ALBERT model)"),iNe.forEach(t),ESr=i(Ce),TC=n(Ce,"LI",{});var dNe=s(TC);Y9e=n(dNe,"STRONG",{});var Dyt=s(Y9e);CSr=r(Dyt,"bart"),Dyt.forEach(t),wSr=r(dNe," \u2014 "),jY=n(dNe,"A",{href:!0});var Gyt=s(jY);ASr=r(Gyt,"FlaxBartForConditionalGeneration"),Gyt.forEach(t),ySr=r(dNe," (BART model)"),dNe.forEach(t),LSr=i(Ce),MC=n(Ce,"LI",{});var cNe=s(MC);K9e=n(cNe,"STRONG",{});var Oyt=s(K9e);xSr=r(Oyt,"bert"),Oyt.forEach(t),$Sr=r(cNe," \u2014 "),DY=n(cNe,"A",{href:!0});var Vyt=s(DY);kSr=r(Vyt,"FlaxBertForPreTraining"),Vyt.forEach(t),SSr=r(cNe," (BERT model)"),cNe.forEach(t),RSr=i(Ce),EC=n(Ce,"LI",{});var fNe=s(EC);Z9e=n(fNe,"STRONG",{});var Xyt=s(Z9e);PSr=r(Xyt,"big_bird"),Xyt.forEach(t),BSr=r(fNe," \u2014 "),GY=n(fNe,"A",{href:!0});var zyt=s(GY);ISr=r(zyt,"FlaxBigBirdForPreTraining"),zyt.forEach(t),NSr=r(fNe," (BigBird model)"),fNe.forEach(t),qSr=i(Ce),CC=n(Ce,"LI",{});var mNe=s(CC);eMe=n(mNe,"STRONG",{});var Wyt=s(eMe);jSr=r(Wyt,"electra"),Wyt.forEach(t),DSr=r(mNe," \u2014 "),OY=n(mNe,"A",{href:!0});var Qyt=s(OY);GSr=r(Qyt,"FlaxElectraForPreTraining"),Qyt.forEach(t),OSr=r(mNe," (ELECTRA model)"),mNe.forEach(t),VSr=i(Ce),wC=n(Ce,"LI",{});var gNe=s(wC);oMe=n(gNe,"STRONG",{});var Hyt=s(oMe);XSr=r(Hyt,"longt5"),Hyt.forEach(t),zSr=r(gNe," \u2014 "),VY=n(gNe,"A",{href:!0});var Uyt=s(VY);WSr=r(Uyt,"FlaxLongT5ForConditionalGeneration"),Uyt.forEach(t),QSr=r(gNe," (LongT5 model)"),gNe.forEach(t),HSr=i(Ce),AC=n(Ce,"LI",{});var hNe=s(AC);rMe=n(hNe,"STRONG",{});var Jyt=s(rMe);USr=r(Jyt,"mbart"),Jyt.forEach(t),JSr=r(hNe," \u2014 "),XY=n(hNe,"A",{href:!0});var Yyt=s(XY);YSr=r(Yyt,"FlaxMBartForConditionalGeneration"),Yyt.forEach(t),KSr=r(hNe," (mBART model)"),hNe.forEach(t),ZSr=i(Ce),yC=n(Ce,"LI",{});var pNe=s(yC);tMe=n(pNe,"STRONG",{});var Kyt=s(tMe);eRr=r(Kyt,"mt5"),Kyt.forEach(t),oRr=r(pNe," \u2014 "),zY=n(pNe,"A",{href:!0});var Zyt=s(zY);rRr=r(Zyt,"FlaxMT5ForConditionalGeneration"),Zyt.forEach(t),tRr=r(pNe," (mT5 model)"),pNe.forEach(t),aRr=i(Ce),LC=n(Ce,"LI",{});var _Ne=s(LC);aMe=n(_Ne,"STRONG",{});var eLt=s(aMe);nRr=r(eLt,"roberta"),eLt.forEach(t),sRr=r(_Ne," \u2014 "),WY=n(_Ne,"A",{href:!0});var oLt=s(WY);lRr=r(oLt,"FlaxRobertaForMaskedLM"),oLt.forEach(t),iRr=r(_Ne," (RoBERTa model)"),_Ne.forEach(t),dRr=i(Ce),xC=n(Ce,"LI",{});var uNe=s(xC);nMe=n(uNe,"STRONG",{});var rLt=s(nMe);cRr=r(rLt,"roformer"),rLt.forEach(t),fRr=r(uNe," \u2014 "),QY=n(uNe,"A",{href:!0});var tLt=s(QY);mRr=r(tLt,"FlaxRoFormerForMaskedLM"),tLt.forEach(t),gRr=r(uNe," (RoFormer model)"),uNe.forEach(t),hRr=i(Ce),$C=n(Ce,"LI",{});var bNe=s($C);sMe=n(bNe,"STRONG",{});var aLt=s(sMe);pRr=r(aLt,"t5"),aLt.forEach(t),_Rr=r(bNe," \u2014 "),HY=n(bNe,"A",{href:!0});var nLt=s(HY);uRr=r(nLt,"FlaxT5ForConditionalGeneration"),nLt.forEach(t),bRr=r(bNe," (T5 model)"),bNe.forEach(t),vRr=i(Ce),kC=n(Ce,"LI",{});var vNe=s(kC);lMe=n(vNe,"STRONG",{});var sLt=s(lMe);FRr=r(sLt,"wav2vec2"),sLt.forEach(t),TRr=r(vNe," \u2014 "),UY=n(vNe,"A",{href:!0});var lLt=s(UY);MRr=r(lLt,"FlaxWav2Vec2ForPreTraining"),lLt.forEach(t),ERr=r(vNe," (Wav2Vec2 model)"),vNe.forEach(t),CRr=i(Ce),SC=n(Ce,"LI",{});var FNe=s(SC);iMe=n(FNe,"STRONG",{});var iLt=s(iMe);wRr=r(iLt,"xlm-roberta"),iLt.forEach(t),ARr=r(FNe," \u2014 "),JY=n(FNe,"A",{href:!0});var dLt=s(JY);yRr=r(dLt,"FlaxXLMRobertaForMaskedLM"),dLt.forEach(t),LRr=r(FNe," (XLM-RoBERTa model)"),FNe.forEach(t),Ce.forEach(t),xRr=i(Ql),T(RC.$$.fragment,Ql),Ql.forEach(t),Wl.forEach(t),mDe=i(f),jc=n(f,"H2",{class:!0});var vOe=s(jc);PC=n(vOe,"A",{id:!0,class:!0,href:!0});var cLt=s(PC);dMe=n(cLt,"SPAN",{});var fLt=s(dMe);T(Q8.$$.fragment,fLt),fLt.forEach(t),cLt.forEach(t),$Rr=i(vOe),cMe=n(vOe,"SPAN",{});var mLt=s(cMe);kRr=r(mLt,"FlaxAutoModelForMaskedLM"),mLt.forEach(t),vOe.forEach(t),gDe=i(f),hr=n(f,"DIV",{class:!0});var Hl=s(hr);T(H8.$$.fragment,Hl),SRr=i(Hl),Dc=n(Hl,"P",{});var aoe=s(Dc);RRr=r(aoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),YY=n(aoe,"A",{href:!0});var gLt=s(YY);PRr=r(gLt,"from_pretrained()"),gLt.forEach(t),BRr=r(aoe," class method or the "),KY=n(aoe,"A",{href:!0});var hLt=s(KY);IRr=r(hLt,"from_config()"),hLt.forEach(t),NRr=r(aoe,` class
method.`),aoe.forEach(t),qRr=i(Hl),U8=n(Hl,"P",{});var FOe=s(U8);jRr=r(FOe,"This class cannot be instantiated directly using "),fMe=n(FOe,"CODE",{});var pLt=s(fMe);DRr=r(pLt,"__init__()"),pLt.forEach(t),GRr=r(FOe," (throws an error)."),FOe.forEach(t),ORr=i(Hl),Xt=n(Hl,"DIV",{class:!0});var m0=s(Xt);T(J8.$$.fragment,m0),VRr=i(m0),mMe=n(m0,"P",{});var _Lt=s(mMe);XRr=r(_Lt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),_Lt.forEach(t),zRr=i(m0),Gc=n(m0,"P",{});var noe=s(Gc);WRr=r(noe,`Note:
Loading a model from its configuration file does `),gMe=n(noe,"STRONG",{});var uLt=s(gMe);QRr=r(uLt,"not"),uLt.forEach(t),HRr=r(noe,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZY=n(noe,"A",{href:!0});var bLt=s(ZY);URr=r(bLt,"from_pretrained()"),bLt.forEach(t),JRr=r(noe," to load the model weights."),noe.forEach(t),YRr=i(m0),T(BC.$$.fragment,m0),m0.forEach(t),KRr=i(Hl),Or=n(Hl,"DIV",{class:!0});var Ul=s(Or);T(Y8.$$.fragment,Ul),ZRr=i(Ul),hMe=n(Ul,"P",{});var vLt=s(hMe);ePr=r(vLt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),vLt.forEach(t),oPr=i(Ul),un=n(Ul,"P",{});var g0=s(un);rPr=r(g0,"The model class to instantiate is selected based on the "),pMe=n(g0,"CODE",{});var FLt=s(pMe);tPr=r(FLt,"model_type"),FLt.forEach(t),aPr=r(g0,` property of the config object (either
passed as an argument or loaded from `),_Me=n(g0,"CODE",{});var TLt=s(_Me);nPr=r(TLt,"pretrained_model_name_or_path"),TLt.forEach(t),sPr=r(g0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uMe=n(g0,"CODE",{});var MLt=s(uMe);lPr=r(MLt,"pretrained_model_name_or_path"),MLt.forEach(t),iPr=r(g0,":"),g0.forEach(t),dPr=i(Ul),Le=n(Ul,"UL",{});var Ie=s(Le);IC=n(Ie,"LI",{});var TNe=s(IC);bMe=n(TNe,"STRONG",{});var ELt=s(bMe);cPr=r(ELt,"albert"),ELt.forEach(t),fPr=r(TNe," \u2014 "),eK=n(TNe,"A",{href:!0});var CLt=s(eK);mPr=r(CLt,"FlaxAlbertForMaskedLM"),CLt.forEach(t),gPr=r(TNe," (ALBERT model)"),TNe.forEach(t),hPr=i(Ie),NC=n(Ie,"LI",{});var MNe=s(NC);vMe=n(MNe,"STRONG",{});var wLt=s(vMe);pPr=r(wLt,"bart"),wLt.forEach(t),_Pr=r(MNe," \u2014 "),oK=n(MNe,"A",{href:!0});var ALt=s(oK);uPr=r(ALt,"FlaxBartForConditionalGeneration"),ALt.forEach(t),bPr=r(MNe," (BART model)"),MNe.forEach(t),vPr=i(Ie),qC=n(Ie,"LI",{});var ENe=s(qC);FMe=n(ENe,"STRONG",{});var yLt=s(FMe);FPr=r(yLt,"bert"),yLt.forEach(t),TPr=r(ENe," \u2014 "),rK=n(ENe,"A",{href:!0});var LLt=s(rK);MPr=r(LLt,"FlaxBertForMaskedLM"),LLt.forEach(t),EPr=r(ENe," (BERT model)"),ENe.forEach(t),CPr=i(Ie),jC=n(Ie,"LI",{});var CNe=s(jC);TMe=n(CNe,"STRONG",{});var xLt=s(TMe);wPr=r(xLt,"big_bird"),xLt.forEach(t),APr=r(CNe," \u2014 "),tK=n(CNe,"A",{href:!0});var $Lt=s(tK);yPr=r($Lt,"FlaxBigBirdForMaskedLM"),$Lt.forEach(t),LPr=r(CNe," (BigBird model)"),CNe.forEach(t),xPr=i(Ie),DC=n(Ie,"LI",{});var wNe=s(DC);MMe=n(wNe,"STRONG",{});var kLt=s(MMe);$Pr=r(kLt,"distilbert"),kLt.forEach(t),kPr=r(wNe," \u2014 "),aK=n(wNe,"A",{href:!0});var SLt=s(aK);SPr=r(SLt,"FlaxDistilBertForMaskedLM"),SLt.forEach(t),RPr=r(wNe," (DistilBERT model)"),wNe.forEach(t),PPr=i(Ie),GC=n(Ie,"LI",{});var ANe=s(GC);EMe=n(ANe,"STRONG",{});var RLt=s(EMe);BPr=r(RLt,"electra"),RLt.forEach(t),IPr=r(ANe," \u2014 "),nK=n(ANe,"A",{href:!0});var PLt=s(nK);NPr=r(PLt,"FlaxElectraForMaskedLM"),PLt.forEach(t),qPr=r(ANe," (ELECTRA model)"),ANe.forEach(t),jPr=i(Ie),OC=n(Ie,"LI",{});var yNe=s(OC);CMe=n(yNe,"STRONG",{});var BLt=s(CMe);DPr=r(BLt,"mbart"),BLt.forEach(t),GPr=r(yNe," \u2014 "),sK=n(yNe,"A",{href:!0});var ILt=s(sK);OPr=r(ILt,"FlaxMBartForConditionalGeneration"),ILt.forEach(t),VPr=r(yNe," (mBART model)"),yNe.forEach(t),XPr=i(Ie),VC=n(Ie,"LI",{});var LNe=s(VC);wMe=n(LNe,"STRONG",{});var NLt=s(wMe);zPr=r(NLt,"roberta"),NLt.forEach(t),WPr=r(LNe," \u2014 "),lK=n(LNe,"A",{href:!0});var qLt=s(lK);QPr=r(qLt,"FlaxRobertaForMaskedLM"),qLt.forEach(t),HPr=r(LNe," (RoBERTa model)"),LNe.forEach(t),UPr=i(Ie),XC=n(Ie,"LI",{});var xNe=s(XC);AMe=n(xNe,"STRONG",{});var jLt=s(AMe);JPr=r(jLt,"roformer"),jLt.forEach(t),YPr=r(xNe," \u2014 "),iK=n(xNe,"A",{href:!0});var DLt=s(iK);KPr=r(DLt,"FlaxRoFormerForMaskedLM"),DLt.forEach(t),ZPr=r(xNe," (RoFormer model)"),xNe.forEach(t),eBr=i(Ie),zC=n(Ie,"LI",{});var $Ne=s(zC);yMe=n($Ne,"STRONG",{});var GLt=s(yMe);oBr=r(GLt,"xlm-roberta"),GLt.forEach(t),rBr=r($Ne," \u2014 "),dK=n($Ne,"A",{href:!0});var OLt=s(dK);tBr=r(OLt,"FlaxXLMRobertaForMaskedLM"),OLt.forEach(t),aBr=r($Ne," (XLM-RoBERTa model)"),$Ne.forEach(t),Ie.forEach(t),nBr=i(Ul),T(WC.$$.fragment,Ul),Ul.forEach(t),Hl.forEach(t),hDe=i(f),Oc=n(f,"H2",{class:!0});var TOe=s(Oc);QC=n(TOe,"A",{id:!0,class:!0,href:!0});var VLt=s(QC);LMe=n(VLt,"SPAN",{});var XLt=s(LMe);T(K8.$$.fragment,XLt),XLt.forEach(t),VLt.forEach(t),sBr=i(TOe),xMe=n(TOe,"SPAN",{});var zLt=s(xMe);lBr=r(zLt,"FlaxAutoModelForSeq2SeqLM"),zLt.forEach(t),TOe.forEach(t),pDe=i(f),pr=n(f,"DIV",{class:!0});var Jl=s(pr);T(Z8.$$.fragment,Jl),iBr=i(Jl),Vc=n(Jl,"P",{});var soe=s(Vc);dBr=r(soe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),cK=n(soe,"A",{href:!0});var WLt=s(cK);cBr=r(WLt,"from_pretrained()"),WLt.forEach(t),fBr=r(soe," class method or the "),fK=n(soe,"A",{href:!0});var QLt=s(fK);mBr=r(QLt,"from_config()"),QLt.forEach(t),gBr=r(soe,` class
method.`),soe.forEach(t),hBr=i(Jl),ex=n(Jl,"P",{});var MOe=s(ex);pBr=r(MOe,"This class cannot be instantiated directly using "),$Me=n(MOe,"CODE",{});var HLt=s($Me);_Br=r(HLt,"__init__()"),HLt.forEach(t),uBr=r(MOe," (throws an error)."),MOe.forEach(t),bBr=i(Jl),zt=n(Jl,"DIV",{class:!0});var h0=s(zt);T(ox.$$.fragment,h0),vBr=i(h0),kMe=n(h0,"P",{});var ULt=s(kMe);FBr=r(ULt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),ULt.forEach(t),TBr=i(h0),Xc=n(h0,"P",{});var loe=s(Xc);MBr=r(loe,`Note:
Loading a model from its configuration file does `),SMe=n(loe,"STRONG",{});var JLt=s(SMe);EBr=r(JLt,"not"),JLt.forEach(t),CBr=r(loe,` load the model weights. It only affects the
model\u2019s configuration. Use `),mK=n(loe,"A",{href:!0});var YLt=s(mK);wBr=r(YLt,"from_pretrained()"),YLt.forEach(t),ABr=r(loe," to load the model weights."),loe.forEach(t),yBr=i(h0),T(HC.$$.fragment,h0),h0.forEach(t),LBr=i(Jl),Vr=n(Jl,"DIV",{class:!0});var Yl=s(Vr);T(rx.$$.fragment,Yl),xBr=i(Yl),RMe=n(Yl,"P",{});var KLt=s(RMe);$Br=r(KLt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),KLt.forEach(t),kBr=i(Yl),bn=n(Yl,"P",{});var p0=s(bn);SBr=r(p0,"The model class to instantiate is selected based on the "),PMe=n(p0,"CODE",{});var ZLt=s(PMe);RBr=r(ZLt,"model_type"),ZLt.forEach(t),PBr=r(p0,` property of the config object (either
passed as an argument or loaded from `),BMe=n(p0,"CODE",{});var e8t=s(BMe);BBr=r(e8t,"pretrained_model_name_or_path"),e8t.forEach(t),IBr=r(p0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),IMe=n(p0,"CODE",{});var o8t=s(IMe);NBr=r(o8t,"pretrained_model_name_or_path"),o8t.forEach(t),qBr=r(p0,":"),p0.forEach(t),jBr=i(Yl),xe=n(Yl,"UL",{});var Ne=s(xe);UC=n(Ne,"LI",{});var kNe=s(UC);NMe=n(kNe,"STRONG",{});var r8t=s(NMe);DBr=r(r8t,"bart"),r8t.forEach(t),GBr=r(kNe," \u2014 "),gK=n(kNe,"A",{href:!0});var t8t=s(gK);OBr=r(t8t,"FlaxBartForConditionalGeneration"),t8t.forEach(t),VBr=r(kNe," (BART model)"),kNe.forEach(t),XBr=i(Ne),JC=n(Ne,"LI",{});var SNe=s(JC);qMe=n(SNe,"STRONG",{});var a8t=s(qMe);zBr=r(a8t,"blenderbot"),a8t.forEach(t),WBr=r(SNe," \u2014 "),hK=n(SNe,"A",{href:!0});var n8t=s(hK);QBr=r(n8t,"FlaxBlenderbotForConditionalGeneration"),n8t.forEach(t),HBr=r(SNe," (Blenderbot model)"),SNe.forEach(t),UBr=i(Ne),YC=n(Ne,"LI",{});var RNe=s(YC);jMe=n(RNe,"STRONG",{});var s8t=s(jMe);JBr=r(s8t,"blenderbot-small"),s8t.forEach(t),YBr=r(RNe," \u2014 "),pK=n(RNe,"A",{href:!0});var l8t=s(pK);KBr=r(l8t,"FlaxBlenderbotSmallForConditionalGeneration"),l8t.forEach(t),ZBr=r(RNe," (BlenderbotSmall model)"),RNe.forEach(t),eIr=i(Ne),KC=n(Ne,"LI",{});var PNe=s(KC);DMe=n(PNe,"STRONG",{});var i8t=s(DMe);oIr=r(i8t,"encoder-decoder"),i8t.forEach(t),rIr=r(PNe," \u2014 "),_K=n(PNe,"A",{href:!0});var d8t=s(_K);tIr=r(d8t,"FlaxEncoderDecoderModel"),d8t.forEach(t),aIr=r(PNe," (Encoder decoder model)"),PNe.forEach(t),nIr=i(Ne),ZC=n(Ne,"LI",{});var BNe=s(ZC);GMe=n(BNe,"STRONG",{});var c8t=s(GMe);sIr=r(c8t,"longt5"),c8t.forEach(t),lIr=r(BNe," \u2014 "),uK=n(BNe,"A",{href:!0});var f8t=s(uK);iIr=r(f8t,"FlaxLongT5ForConditionalGeneration"),f8t.forEach(t),dIr=r(BNe," (LongT5 model)"),BNe.forEach(t),cIr=i(Ne),e5=n(Ne,"LI",{});var INe=s(e5);OMe=n(INe,"STRONG",{});var m8t=s(OMe);fIr=r(m8t,"marian"),m8t.forEach(t),mIr=r(INe," \u2014 "),bK=n(INe,"A",{href:!0});var g8t=s(bK);gIr=r(g8t,"FlaxMarianMTModel"),g8t.forEach(t),hIr=r(INe," (Marian model)"),INe.forEach(t),pIr=i(Ne),o5=n(Ne,"LI",{});var NNe=s(o5);VMe=n(NNe,"STRONG",{});var h8t=s(VMe);_Ir=r(h8t,"mbart"),h8t.forEach(t),uIr=r(NNe," \u2014 "),vK=n(NNe,"A",{href:!0});var p8t=s(vK);bIr=r(p8t,"FlaxMBartForConditionalGeneration"),p8t.forEach(t),vIr=r(NNe," (mBART model)"),NNe.forEach(t),FIr=i(Ne),r5=n(Ne,"LI",{});var qNe=s(r5);XMe=n(qNe,"STRONG",{});var _8t=s(XMe);TIr=r(_8t,"mt5"),_8t.forEach(t),MIr=r(qNe," \u2014 "),FK=n(qNe,"A",{href:!0});var u8t=s(FK);EIr=r(u8t,"FlaxMT5ForConditionalGeneration"),u8t.forEach(t),CIr=r(qNe," (mT5 model)"),qNe.forEach(t),wIr=i(Ne),t5=n(Ne,"LI",{});var jNe=s(t5);zMe=n(jNe,"STRONG",{});var b8t=s(zMe);AIr=r(b8t,"pegasus"),b8t.forEach(t),yIr=r(jNe," \u2014 "),TK=n(jNe,"A",{href:!0});var v8t=s(TK);LIr=r(v8t,"FlaxPegasusForConditionalGeneration"),v8t.forEach(t),xIr=r(jNe," (Pegasus model)"),jNe.forEach(t),$Ir=i(Ne),a5=n(Ne,"LI",{});var DNe=s(a5);WMe=n(DNe,"STRONG",{});var F8t=s(WMe);kIr=r(F8t,"t5"),F8t.forEach(t),SIr=r(DNe," \u2014 "),MK=n(DNe,"A",{href:!0});var T8t=s(MK);RIr=r(T8t,"FlaxT5ForConditionalGeneration"),T8t.forEach(t),PIr=r(DNe," (T5 model)"),DNe.forEach(t),Ne.forEach(t),BIr=i(Yl),T(n5.$$.fragment,Yl),Yl.forEach(t),Jl.forEach(t),_De=i(f),zc=n(f,"H2",{class:!0});var EOe=s(zc);s5=n(EOe,"A",{id:!0,class:!0,href:!0});var M8t=s(s5);QMe=n(M8t,"SPAN",{});var E8t=s(QMe);T(tx.$$.fragment,E8t),E8t.forEach(t),M8t.forEach(t),IIr=i(EOe),HMe=n(EOe,"SPAN",{});var C8t=s(HMe);NIr=r(C8t,"FlaxAutoModelForSequenceClassification"),C8t.forEach(t),EOe.forEach(t),uDe=i(f),_r=n(f,"DIV",{class:!0});var Kl=s(_r);T(ax.$$.fragment,Kl),qIr=i(Kl),Wc=n(Kl,"P",{});var ioe=s(Wc);jIr=r(ioe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),EK=n(ioe,"A",{href:!0});var w8t=s(EK);DIr=r(w8t,"from_pretrained()"),w8t.forEach(t),GIr=r(ioe," class method or the "),CK=n(ioe,"A",{href:!0});var A8t=s(CK);OIr=r(A8t,"from_config()"),A8t.forEach(t),VIr=r(ioe,` class
method.`),ioe.forEach(t),XIr=i(Kl),nx=n(Kl,"P",{});var COe=s(nx);zIr=r(COe,"This class cannot be instantiated directly using "),UMe=n(COe,"CODE",{});var y8t=s(UMe);WIr=r(y8t,"__init__()"),y8t.forEach(t),QIr=r(COe," (throws an error)."),COe.forEach(t),HIr=i(Kl),Wt=n(Kl,"DIV",{class:!0});var _0=s(Wt);T(sx.$$.fragment,_0),UIr=i(_0),JMe=n(_0,"P",{});var L8t=s(JMe);JIr=r(L8t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),L8t.forEach(t),YIr=i(_0),Qc=n(_0,"P",{});var doe=s(Qc);KIr=r(doe,`Note:
Loading a model from its configuration file does `),YMe=n(doe,"STRONG",{});var x8t=s(YMe);ZIr=r(x8t,"not"),x8t.forEach(t),eNr=r(doe,` load the model weights. It only affects the
model\u2019s configuration. Use `),wK=n(doe,"A",{href:!0});var $8t=s(wK);oNr=r($8t,"from_pretrained()"),$8t.forEach(t),rNr=r(doe," to load the model weights."),doe.forEach(t),tNr=i(_0),T(l5.$$.fragment,_0),_0.forEach(t),aNr=i(Kl),Xr=n(Kl,"DIV",{class:!0});var Zl=s(Xr);T(lx.$$.fragment,Zl),nNr=i(Zl),KMe=n(Zl,"P",{});var k8t=s(KMe);sNr=r(k8t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),k8t.forEach(t),lNr=i(Zl),vn=n(Zl,"P",{});var u0=s(vn);iNr=r(u0,"The model class to instantiate is selected based on the "),ZMe=n(u0,"CODE",{});var S8t=s(ZMe);dNr=r(S8t,"model_type"),S8t.forEach(t),cNr=r(u0,` property of the config object (either
passed as an argument or loaded from `),e4e=n(u0,"CODE",{});var R8t=s(e4e);fNr=r(R8t,"pretrained_model_name_or_path"),R8t.forEach(t),mNr=r(u0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o4e=n(u0,"CODE",{});var P8t=s(o4e);gNr=r(P8t,"pretrained_model_name_or_path"),P8t.forEach(t),hNr=r(u0,":"),u0.forEach(t),pNr=i(Zl),$e=n(Zl,"UL",{});var qe=s($e);i5=n(qe,"LI",{});var GNe=s(i5);r4e=n(GNe,"STRONG",{});var B8t=s(r4e);_Nr=r(B8t,"albert"),B8t.forEach(t),uNr=r(GNe," \u2014 "),AK=n(GNe,"A",{href:!0});var I8t=s(AK);bNr=r(I8t,"FlaxAlbertForSequenceClassification"),I8t.forEach(t),vNr=r(GNe," (ALBERT model)"),GNe.forEach(t),FNr=i(qe),d5=n(qe,"LI",{});var ONe=s(d5);t4e=n(ONe,"STRONG",{});var N8t=s(t4e);TNr=r(N8t,"bart"),N8t.forEach(t),MNr=r(ONe," \u2014 "),yK=n(ONe,"A",{href:!0});var q8t=s(yK);ENr=r(q8t,"FlaxBartForSequenceClassification"),q8t.forEach(t),CNr=r(ONe," (BART model)"),ONe.forEach(t),wNr=i(qe),c5=n(qe,"LI",{});var VNe=s(c5);a4e=n(VNe,"STRONG",{});var j8t=s(a4e);ANr=r(j8t,"bert"),j8t.forEach(t),yNr=r(VNe," \u2014 "),LK=n(VNe,"A",{href:!0});var D8t=s(LK);LNr=r(D8t,"FlaxBertForSequenceClassification"),D8t.forEach(t),xNr=r(VNe," (BERT model)"),VNe.forEach(t),$Nr=i(qe),f5=n(qe,"LI",{});var XNe=s(f5);n4e=n(XNe,"STRONG",{});var G8t=s(n4e);kNr=r(G8t,"big_bird"),G8t.forEach(t),SNr=r(XNe," \u2014 "),xK=n(XNe,"A",{href:!0});var O8t=s(xK);RNr=r(O8t,"FlaxBigBirdForSequenceClassification"),O8t.forEach(t),PNr=r(XNe," (BigBird model)"),XNe.forEach(t),BNr=i(qe),m5=n(qe,"LI",{});var zNe=s(m5);s4e=n(zNe,"STRONG",{});var V8t=s(s4e);INr=r(V8t,"distilbert"),V8t.forEach(t),NNr=r(zNe," \u2014 "),$K=n(zNe,"A",{href:!0});var X8t=s($K);qNr=r(X8t,"FlaxDistilBertForSequenceClassification"),X8t.forEach(t),jNr=r(zNe," (DistilBERT model)"),zNe.forEach(t),DNr=i(qe),g5=n(qe,"LI",{});var WNe=s(g5);l4e=n(WNe,"STRONG",{});var z8t=s(l4e);GNr=r(z8t,"electra"),z8t.forEach(t),ONr=r(WNe," \u2014 "),kK=n(WNe,"A",{href:!0});var W8t=s(kK);VNr=r(W8t,"FlaxElectraForSequenceClassification"),W8t.forEach(t),XNr=r(WNe," (ELECTRA model)"),WNe.forEach(t),zNr=i(qe),h5=n(qe,"LI",{});var QNe=s(h5);i4e=n(QNe,"STRONG",{});var Q8t=s(i4e);WNr=r(Q8t,"mbart"),Q8t.forEach(t),QNr=r(QNe," \u2014 "),SK=n(QNe,"A",{href:!0});var H8t=s(SK);HNr=r(H8t,"FlaxMBartForSequenceClassification"),H8t.forEach(t),UNr=r(QNe," (mBART model)"),QNe.forEach(t),JNr=i(qe),p5=n(qe,"LI",{});var HNe=s(p5);d4e=n(HNe,"STRONG",{});var U8t=s(d4e);YNr=r(U8t,"roberta"),U8t.forEach(t),KNr=r(HNe," \u2014 "),RK=n(HNe,"A",{href:!0});var J8t=s(RK);ZNr=r(J8t,"FlaxRobertaForSequenceClassification"),J8t.forEach(t),eqr=r(HNe," (RoBERTa model)"),HNe.forEach(t),oqr=i(qe),_5=n(qe,"LI",{});var UNe=s(_5);c4e=n(UNe,"STRONG",{});var Y8t=s(c4e);rqr=r(Y8t,"roformer"),Y8t.forEach(t),tqr=r(UNe," \u2014 "),PK=n(UNe,"A",{href:!0});var K8t=s(PK);aqr=r(K8t,"FlaxRoFormerForSequenceClassification"),K8t.forEach(t),nqr=r(UNe," (RoFormer model)"),UNe.forEach(t),sqr=i(qe),u5=n(qe,"LI",{});var JNe=s(u5);f4e=n(JNe,"STRONG",{});var Z8t=s(f4e);lqr=r(Z8t,"xlm-roberta"),Z8t.forEach(t),iqr=r(JNe," \u2014 "),BK=n(JNe,"A",{href:!0});var ext=s(BK);dqr=r(ext,"FlaxXLMRobertaForSequenceClassification"),ext.forEach(t),cqr=r(JNe," (XLM-RoBERTa model)"),JNe.forEach(t),qe.forEach(t),fqr=i(Zl),T(b5.$$.fragment,Zl),Zl.forEach(t),Kl.forEach(t),bDe=i(f),Hc=n(f,"H2",{class:!0});var wOe=s(Hc);v5=n(wOe,"A",{id:!0,class:!0,href:!0});var oxt=s(v5);m4e=n(oxt,"SPAN",{});var rxt=s(m4e);T(ix.$$.fragment,rxt),rxt.forEach(t),oxt.forEach(t),mqr=i(wOe),g4e=n(wOe,"SPAN",{});var txt=s(g4e);gqr=r(txt,"FlaxAutoModelForQuestionAnswering"),txt.forEach(t),wOe.forEach(t),vDe=i(f),ur=n(f,"DIV",{class:!0});var ei=s(ur);T(dx.$$.fragment,ei),hqr=i(ei),Uc=n(ei,"P",{});var coe=s(Uc);pqr=r(coe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),IK=n(coe,"A",{href:!0});var axt=s(IK);_qr=r(axt,"from_pretrained()"),axt.forEach(t),uqr=r(coe," class method or the "),NK=n(coe,"A",{href:!0});var nxt=s(NK);bqr=r(nxt,"from_config()"),nxt.forEach(t),vqr=r(coe,` class
method.`),coe.forEach(t),Fqr=i(ei),cx=n(ei,"P",{});var AOe=s(cx);Tqr=r(AOe,"This class cannot be instantiated directly using "),h4e=n(AOe,"CODE",{});var sxt=s(h4e);Mqr=r(sxt,"__init__()"),sxt.forEach(t),Eqr=r(AOe," (throws an error)."),AOe.forEach(t),Cqr=i(ei),Qt=n(ei,"DIV",{class:!0});var b0=s(Qt);T(fx.$$.fragment,b0),wqr=i(b0),p4e=n(b0,"P",{});var lxt=s(p4e);Aqr=r(lxt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),lxt.forEach(t),yqr=i(b0),Jc=n(b0,"P",{});var foe=s(Jc);Lqr=r(foe,`Note:
Loading a model from its configuration file does `),_4e=n(foe,"STRONG",{});var ixt=s(_4e);xqr=r(ixt,"not"),ixt.forEach(t),$qr=r(foe,` load the model weights. It only affects the
model\u2019s configuration. Use `),qK=n(foe,"A",{href:!0});var dxt=s(qK);kqr=r(dxt,"from_pretrained()"),dxt.forEach(t),Sqr=r(foe," to load the model weights."),foe.forEach(t),Rqr=i(b0),T(F5.$$.fragment,b0),b0.forEach(t),Pqr=i(ei),zr=n(ei,"DIV",{class:!0});var oi=s(zr);T(mx.$$.fragment,oi),Bqr=i(oi),u4e=n(oi,"P",{});var cxt=s(u4e);Iqr=r(cxt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),cxt.forEach(t),Nqr=i(oi),Fn=n(oi,"P",{});var v0=s(Fn);qqr=r(v0,"The model class to instantiate is selected based on the "),b4e=n(v0,"CODE",{});var fxt=s(b4e);jqr=r(fxt,"model_type"),fxt.forEach(t),Dqr=r(v0,` property of the config object (either
passed as an argument or loaded from `),v4e=n(v0,"CODE",{});var mxt=s(v4e);Gqr=r(mxt,"pretrained_model_name_or_path"),mxt.forEach(t),Oqr=r(v0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F4e=n(v0,"CODE",{});var gxt=s(F4e);Vqr=r(gxt,"pretrained_model_name_or_path"),gxt.forEach(t),Xqr=r(v0,":"),v0.forEach(t),zqr=i(oi),ke=n(oi,"UL",{});var je=s(ke);T5=n(je,"LI",{});var YNe=s(T5);T4e=n(YNe,"STRONG",{});var hxt=s(T4e);Wqr=r(hxt,"albert"),hxt.forEach(t),Qqr=r(YNe," \u2014 "),jK=n(YNe,"A",{href:!0});var pxt=s(jK);Hqr=r(pxt,"FlaxAlbertForQuestionAnswering"),pxt.forEach(t),Uqr=r(YNe," (ALBERT model)"),YNe.forEach(t),Jqr=i(je),M5=n(je,"LI",{});var KNe=s(M5);M4e=n(KNe,"STRONG",{});var _xt=s(M4e);Yqr=r(_xt,"bart"),_xt.forEach(t),Kqr=r(KNe," \u2014 "),DK=n(KNe,"A",{href:!0});var uxt=s(DK);Zqr=r(uxt,"FlaxBartForQuestionAnswering"),uxt.forEach(t),ejr=r(KNe," (BART model)"),KNe.forEach(t),ojr=i(je),E5=n(je,"LI",{});var ZNe=s(E5);E4e=n(ZNe,"STRONG",{});var bxt=s(E4e);rjr=r(bxt,"bert"),bxt.forEach(t),tjr=r(ZNe," \u2014 "),GK=n(ZNe,"A",{href:!0});var vxt=s(GK);ajr=r(vxt,"FlaxBertForQuestionAnswering"),vxt.forEach(t),njr=r(ZNe," (BERT model)"),ZNe.forEach(t),sjr=i(je),C5=n(je,"LI",{});var eqe=s(C5);C4e=n(eqe,"STRONG",{});var Fxt=s(C4e);ljr=r(Fxt,"big_bird"),Fxt.forEach(t),ijr=r(eqe," \u2014 "),OK=n(eqe,"A",{href:!0});var Txt=s(OK);djr=r(Txt,"FlaxBigBirdForQuestionAnswering"),Txt.forEach(t),cjr=r(eqe," (BigBird model)"),eqe.forEach(t),fjr=i(je),w5=n(je,"LI",{});var oqe=s(w5);w4e=n(oqe,"STRONG",{});var Mxt=s(w4e);mjr=r(Mxt,"distilbert"),Mxt.forEach(t),gjr=r(oqe," \u2014 "),VK=n(oqe,"A",{href:!0});var Ext=s(VK);hjr=r(Ext,"FlaxDistilBertForQuestionAnswering"),Ext.forEach(t),pjr=r(oqe," (DistilBERT model)"),oqe.forEach(t),_jr=i(je),A5=n(je,"LI",{});var rqe=s(A5);A4e=n(rqe,"STRONG",{});var Cxt=s(A4e);ujr=r(Cxt,"electra"),Cxt.forEach(t),bjr=r(rqe," \u2014 "),XK=n(rqe,"A",{href:!0});var wxt=s(XK);vjr=r(wxt,"FlaxElectraForQuestionAnswering"),wxt.forEach(t),Fjr=r(rqe," (ELECTRA model)"),rqe.forEach(t),Tjr=i(je),y5=n(je,"LI",{});var tqe=s(y5);y4e=n(tqe,"STRONG",{});var Axt=s(y4e);Mjr=r(Axt,"mbart"),Axt.forEach(t),Ejr=r(tqe," \u2014 "),zK=n(tqe,"A",{href:!0});var yxt=s(zK);Cjr=r(yxt,"FlaxMBartForQuestionAnswering"),yxt.forEach(t),wjr=r(tqe," (mBART model)"),tqe.forEach(t),Ajr=i(je),L5=n(je,"LI",{});var aqe=s(L5);L4e=n(aqe,"STRONG",{});var Lxt=s(L4e);yjr=r(Lxt,"roberta"),Lxt.forEach(t),Ljr=r(aqe," \u2014 "),WK=n(aqe,"A",{href:!0});var xxt=s(WK);xjr=r(xxt,"FlaxRobertaForQuestionAnswering"),xxt.forEach(t),$jr=r(aqe," (RoBERTa model)"),aqe.forEach(t),kjr=i(je),x5=n(je,"LI",{});var nqe=s(x5);x4e=n(nqe,"STRONG",{});var $xt=s(x4e);Sjr=r($xt,"roformer"),$xt.forEach(t),Rjr=r(nqe," \u2014 "),QK=n(nqe,"A",{href:!0});var kxt=s(QK);Pjr=r(kxt,"FlaxRoFormerForQuestionAnswering"),kxt.forEach(t),Bjr=r(nqe," (RoFormer model)"),nqe.forEach(t),Ijr=i(je),$5=n(je,"LI",{});var sqe=s($5);$4e=n(sqe,"STRONG",{});var Sxt=s($4e);Njr=r(Sxt,"xlm-roberta"),Sxt.forEach(t),qjr=r(sqe," \u2014 "),HK=n(sqe,"A",{href:!0});var Rxt=s(HK);jjr=r(Rxt,"FlaxXLMRobertaForQuestionAnswering"),Rxt.forEach(t),Djr=r(sqe," (XLM-RoBERTa model)"),sqe.forEach(t),je.forEach(t),Gjr=i(oi),T(k5.$$.fragment,oi),oi.forEach(t),ei.forEach(t),FDe=i(f),Yc=n(f,"H2",{class:!0});var yOe=s(Yc);S5=n(yOe,"A",{id:!0,class:!0,href:!0});var Pxt=s(S5);k4e=n(Pxt,"SPAN",{});var Bxt=s(k4e);T(gx.$$.fragment,Bxt),Bxt.forEach(t),Pxt.forEach(t),Ojr=i(yOe),S4e=n(yOe,"SPAN",{});var Ixt=s(S4e);Vjr=r(Ixt,"FlaxAutoModelForTokenClassification"),Ixt.forEach(t),yOe.forEach(t),TDe=i(f),br=n(f,"DIV",{class:!0});var ri=s(br);T(hx.$$.fragment,ri),Xjr=i(ri),Kc=n(ri,"P",{});var moe=s(Kc);zjr=r(moe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),UK=n(moe,"A",{href:!0});var Nxt=s(UK);Wjr=r(Nxt,"from_pretrained()"),Nxt.forEach(t),Qjr=r(moe," class method or the "),JK=n(moe,"A",{href:!0});var qxt=s(JK);Hjr=r(qxt,"from_config()"),qxt.forEach(t),Ujr=r(moe,` class
method.`),moe.forEach(t),Jjr=i(ri),px=n(ri,"P",{});var LOe=s(px);Yjr=r(LOe,"This class cannot be instantiated directly using "),R4e=n(LOe,"CODE",{});var jxt=s(R4e);Kjr=r(jxt,"__init__()"),jxt.forEach(t),Zjr=r(LOe," (throws an error)."),LOe.forEach(t),eDr=i(ri),Ht=n(ri,"DIV",{class:!0});var F0=s(Ht);T(_x.$$.fragment,F0),oDr=i(F0),P4e=n(F0,"P",{});var Dxt=s(P4e);rDr=r(Dxt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Dxt.forEach(t),tDr=i(F0),Zc=n(F0,"P",{});var goe=s(Zc);aDr=r(goe,`Note:
Loading a model from its configuration file does `),B4e=n(goe,"STRONG",{});var Gxt=s(B4e);nDr=r(Gxt,"not"),Gxt.forEach(t),sDr=r(goe,` load the model weights. It only affects the
model\u2019s configuration. Use `),YK=n(goe,"A",{href:!0});var Oxt=s(YK);lDr=r(Oxt,"from_pretrained()"),Oxt.forEach(t),iDr=r(goe," to load the model weights."),goe.forEach(t),dDr=i(F0),T(R5.$$.fragment,F0),F0.forEach(t),cDr=i(ri),Wr=n(ri,"DIV",{class:!0});var ti=s(Wr);T(ux.$$.fragment,ti),fDr=i(ti),I4e=n(ti,"P",{});var Vxt=s(I4e);mDr=r(Vxt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Vxt.forEach(t),gDr=i(ti),Tn=n(ti,"P",{});var T0=s(Tn);hDr=r(T0,"The model class to instantiate is selected based on the "),N4e=n(T0,"CODE",{});var Xxt=s(N4e);pDr=r(Xxt,"model_type"),Xxt.forEach(t),_Dr=r(T0,` property of the config object (either
passed as an argument or loaded from `),q4e=n(T0,"CODE",{});var zxt=s(q4e);uDr=r(zxt,"pretrained_model_name_or_path"),zxt.forEach(t),bDr=r(T0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j4e=n(T0,"CODE",{});var Wxt=s(j4e);vDr=r(Wxt,"pretrained_model_name_or_path"),Wxt.forEach(t),FDr=r(T0,":"),T0.forEach(t),TDr=i(ti),Ge=n(ti,"UL",{});var Fo=s(Ge);P5=n(Fo,"LI",{});var lqe=s(P5);D4e=n(lqe,"STRONG",{});var Qxt=s(D4e);MDr=r(Qxt,"albert"),Qxt.forEach(t),EDr=r(lqe," \u2014 "),KK=n(lqe,"A",{href:!0});var Hxt=s(KK);CDr=r(Hxt,"FlaxAlbertForTokenClassification"),Hxt.forEach(t),wDr=r(lqe," (ALBERT model)"),lqe.forEach(t),ADr=i(Fo),B5=n(Fo,"LI",{});var iqe=s(B5);G4e=n(iqe,"STRONG",{});var Uxt=s(G4e);yDr=r(Uxt,"bert"),Uxt.forEach(t),LDr=r(iqe," \u2014 "),ZK=n(iqe,"A",{href:!0});var Jxt=s(ZK);xDr=r(Jxt,"FlaxBertForTokenClassification"),Jxt.forEach(t),$Dr=r(iqe," (BERT model)"),iqe.forEach(t),kDr=i(Fo),I5=n(Fo,"LI",{});var dqe=s(I5);O4e=n(dqe,"STRONG",{});var Yxt=s(O4e);SDr=r(Yxt,"big_bird"),Yxt.forEach(t),RDr=r(dqe," \u2014 "),eZ=n(dqe,"A",{href:!0});var Kxt=s(eZ);PDr=r(Kxt,"FlaxBigBirdForTokenClassification"),Kxt.forEach(t),BDr=r(dqe," (BigBird model)"),dqe.forEach(t),IDr=i(Fo),N5=n(Fo,"LI",{});var cqe=s(N5);V4e=n(cqe,"STRONG",{});var Zxt=s(V4e);NDr=r(Zxt,"distilbert"),Zxt.forEach(t),qDr=r(cqe," \u2014 "),oZ=n(cqe,"A",{href:!0});var e$t=s(oZ);jDr=r(e$t,"FlaxDistilBertForTokenClassification"),e$t.forEach(t),DDr=r(cqe," (DistilBERT model)"),cqe.forEach(t),GDr=i(Fo),q5=n(Fo,"LI",{});var fqe=s(q5);X4e=n(fqe,"STRONG",{});var o$t=s(X4e);ODr=r(o$t,"electra"),o$t.forEach(t),VDr=r(fqe," \u2014 "),rZ=n(fqe,"A",{href:!0});var r$t=s(rZ);XDr=r(r$t,"FlaxElectraForTokenClassification"),r$t.forEach(t),zDr=r(fqe," (ELECTRA model)"),fqe.forEach(t),WDr=i(Fo),j5=n(Fo,"LI",{});var mqe=s(j5);z4e=n(mqe,"STRONG",{});var t$t=s(z4e);QDr=r(t$t,"roberta"),t$t.forEach(t),HDr=r(mqe," \u2014 "),tZ=n(mqe,"A",{href:!0});var a$t=s(tZ);UDr=r(a$t,"FlaxRobertaForTokenClassification"),a$t.forEach(t),JDr=r(mqe," (RoBERTa model)"),mqe.forEach(t),YDr=i(Fo),D5=n(Fo,"LI",{});var gqe=s(D5);W4e=n(gqe,"STRONG",{});var n$t=s(W4e);KDr=r(n$t,"roformer"),n$t.forEach(t),ZDr=r(gqe," \u2014 "),aZ=n(gqe,"A",{href:!0});var s$t=s(aZ);eGr=r(s$t,"FlaxRoFormerForTokenClassification"),s$t.forEach(t),oGr=r(gqe," (RoFormer model)"),gqe.forEach(t),rGr=i(Fo),G5=n(Fo,"LI",{});var hqe=s(G5);Q4e=n(hqe,"STRONG",{});var l$t=s(Q4e);tGr=r(l$t,"xlm-roberta"),l$t.forEach(t),aGr=r(hqe," \u2014 "),nZ=n(hqe,"A",{href:!0});var i$t=s(nZ);nGr=r(i$t,"FlaxXLMRobertaForTokenClassification"),i$t.forEach(t),sGr=r(hqe," (XLM-RoBERTa model)"),hqe.forEach(t),Fo.forEach(t),lGr=i(ti),T(O5.$$.fragment,ti),ti.forEach(t),ri.forEach(t),MDe=i(f),ef=n(f,"H2",{class:!0});var xOe=s(ef);V5=n(xOe,"A",{id:!0,class:!0,href:!0});var d$t=s(V5);H4e=n(d$t,"SPAN",{});var c$t=s(H4e);T(bx.$$.fragment,c$t),c$t.forEach(t),d$t.forEach(t),iGr=i(xOe),U4e=n(xOe,"SPAN",{});var f$t=s(U4e);dGr=r(f$t,"FlaxAutoModelForMultipleChoice"),f$t.forEach(t),xOe.forEach(t),EDe=i(f),vr=n(f,"DIV",{class:!0});var ai=s(vr);T(vx.$$.fragment,ai),cGr=i(ai),of=n(ai,"P",{});var hoe=s(of);fGr=r(hoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),sZ=n(hoe,"A",{href:!0});var m$t=s(sZ);mGr=r(m$t,"from_pretrained()"),m$t.forEach(t),gGr=r(hoe," class method or the "),lZ=n(hoe,"A",{href:!0});var g$t=s(lZ);hGr=r(g$t,"from_config()"),g$t.forEach(t),pGr=r(hoe,` class
method.`),hoe.forEach(t),_Gr=i(ai),Fx=n(ai,"P",{});var $Oe=s(Fx);uGr=r($Oe,"This class cannot be instantiated directly using "),J4e=n($Oe,"CODE",{});var h$t=s(J4e);bGr=r(h$t,"__init__()"),h$t.forEach(t),vGr=r($Oe," (throws an error)."),$Oe.forEach(t),FGr=i(ai),Ut=n(ai,"DIV",{class:!0});var M0=s(Ut);T(Tx.$$.fragment,M0),TGr=i(M0),Y4e=n(M0,"P",{});var p$t=s(Y4e);MGr=r(p$t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),p$t.forEach(t),EGr=i(M0),rf=n(M0,"P",{});var poe=s(rf);CGr=r(poe,`Note:
Loading a model from its configuration file does `),K4e=n(poe,"STRONG",{});var _$t=s(K4e);wGr=r(_$t,"not"),_$t.forEach(t),AGr=r(poe,` load the model weights. It only affects the
model\u2019s configuration. Use `),iZ=n(poe,"A",{href:!0});var u$t=s(iZ);yGr=r(u$t,"from_pretrained()"),u$t.forEach(t),LGr=r(poe," to load the model weights."),poe.forEach(t),xGr=i(M0),T(X5.$$.fragment,M0),M0.forEach(t),$Gr=i(ai),Qr=n(ai,"DIV",{class:!0});var ni=s(Qr);T(Mx.$$.fragment,ni),kGr=i(ni),Z4e=n(ni,"P",{});var b$t=s(Z4e);SGr=r(b$t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),b$t.forEach(t),RGr=i(ni),Mn=n(ni,"P",{});var E0=s(Mn);PGr=r(E0,"The model class to instantiate is selected based on the "),eEe=n(E0,"CODE",{});var v$t=s(eEe);BGr=r(v$t,"model_type"),v$t.forEach(t),IGr=r(E0,` property of the config object (either
passed as an argument or loaded from `),oEe=n(E0,"CODE",{});var F$t=s(oEe);NGr=r(F$t,"pretrained_model_name_or_path"),F$t.forEach(t),qGr=r(E0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rEe=n(E0,"CODE",{});var T$t=s(rEe);jGr=r(T$t,"pretrained_model_name_or_path"),T$t.forEach(t),DGr=r(E0,":"),E0.forEach(t),GGr=i(ni),Oe=n(ni,"UL",{});var To=s(Oe);z5=n(To,"LI",{});var pqe=s(z5);tEe=n(pqe,"STRONG",{});var M$t=s(tEe);OGr=r(M$t,"albert"),M$t.forEach(t),VGr=r(pqe," \u2014 "),dZ=n(pqe,"A",{href:!0});var E$t=s(dZ);XGr=r(E$t,"FlaxAlbertForMultipleChoice"),E$t.forEach(t),zGr=r(pqe," (ALBERT model)"),pqe.forEach(t),WGr=i(To),W5=n(To,"LI",{});var _qe=s(W5);aEe=n(_qe,"STRONG",{});var C$t=s(aEe);QGr=r(C$t,"bert"),C$t.forEach(t),HGr=r(_qe," \u2014 "),cZ=n(_qe,"A",{href:!0});var w$t=s(cZ);UGr=r(w$t,"FlaxBertForMultipleChoice"),w$t.forEach(t),JGr=r(_qe," (BERT model)"),_qe.forEach(t),YGr=i(To),Q5=n(To,"LI",{});var uqe=s(Q5);nEe=n(uqe,"STRONG",{});var A$t=s(nEe);KGr=r(A$t,"big_bird"),A$t.forEach(t),ZGr=r(uqe," \u2014 "),fZ=n(uqe,"A",{href:!0});var y$t=s(fZ);eOr=r(y$t,"FlaxBigBirdForMultipleChoice"),y$t.forEach(t),oOr=r(uqe," (BigBird model)"),uqe.forEach(t),rOr=i(To),H5=n(To,"LI",{});var bqe=s(H5);sEe=n(bqe,"STRONG",{});var L$t=s(sEe);tOr=r(L$t,"distilbert"),L$t.forEach(t),aOr=r(bqe," \u2014 "),mZ=n(bqe,"A",{href:!0});var x$t=s(mZ);nOr=r(x$t,"FlaxDistilBertForMultipleChoice"),x$t.forEach(t),sOr=r(bqe," (DistilBERT model)"),bqe.forEach(t),lOr=i(To),U5=n(To,"LI",{});var vqe=s(U5);lEe=n(vqe,"STRONG",{});var $$t=s(lEe);iOr=r($$t,"electra"),$$t.forEach(t),dOr=r(vqe," \u2014 "),gZ=n(vqe,"A",{href:!0});var k$t=s(gZ);cOr=r(k$t,"FlaxElectraForMultipleChoice"),k$t.forEach(t),fOr=r(vqe," (ELECTRA model)"),vqe.forEach(t),mOr=i(To),J5=n(To,"LI",{});var Fqe=s(J5);iEe=n(Fqe,"STRONG",{});var S$t=s(iEe);gOr=r(S$t,"roberta"),S$t.forEach(t),hOr=r(Fqe," \u2014 "),hZ=n(Fqe,"A",{href:!0});var R$t=s(hZ);pOr=r(R$t,"FlaxRobertaForMultipleChoice"),R$t.forEach(t),_Or=r(Fqe," (RoBERTa model)"),Fqe.forEach(t),uOr=i(To),Y5=n(To,"LI",{});var Tqe=s(Y5);dEe=n(Tqe,"STRONG",{});var P$t=s(dEe);bOr=r(P$t,"roformer"),P$t.forEach(t),vOr=r(Tqe," \u2014 "),pZ=n(Tqe,"A",{href:!0});var B$t=s(pZ);FOr=r(B$t,"FlaxRoFormerForMultipleChoice"),B$t.forEach(t),TOr=r(Tqe," (RoFormer model)"),Tqe.forEach(t),MOr=i(To),K5=n(To,"LI",{});var Mqe=s(K5);cEe=n(Mqe,"STRONG",{});var I$t=s(cEe);EOr=r(I$t,"xlm-roberta"),I$t.forEach(t),COr=r(Mqe," \u2014 "),_Z=n(Mqe,"A",{href:!0});var N$t=s(_Z);wOr=r(N$t,"FlaxXLMRobertaForMultipleChoice"),N$t.forEach(t),AOr=r(Mqe," (XLM-RoBERTa model)"),Mqe.forEach(t),To.forEach(t),yOr=i(ni),T(Z5.$$.fragment,ni),ni.forEach(t),ai.forEach(t),CDe=i(f),tf=n(f,"H2",{class:!0});var kOe=s(tf);e3=n(kOe,"A",{id:!0,class:!0,href:!0});var q$t=s(e3);fEe=n(q$t,"SPAN",{});var j$t=s(fEe);T(Ex.$$.fragment,j$t),j$t.forEach(t),q$t.forEach(t),LOr=i(kOe),mEe=n(kOe,"SPAN",{});var D$t=s(mEe);xOr=r(D$t,"FlaxAutoModelForNextSentencePrediction"),D$t.forEach(t),kOe.forEach(t),wDe=i(f),Fr=n(f,"DIV",{class:!0});var si=s(Fr);T(Cx.$$.fragment,si),$Or=i(si),af=n(si,"P",{});var _oe=s(af);kOr=r(_oe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),uZ=n(_oe,"A",{href:!0});var G$t=s(uZ);SOr=r(G$t,"from_pretrained()"),G$t.forEach(t),ROr=r(_oe," class method or the "),bZ=n(_oe,"A",{href:!0});var O$t=s(bZ);POr=r(O$t,"from_config()"),O$t.forEach(t),BOr=r(_oe,` class
method.`),_oe.forEach(t),IOr=i(si),wx=n(si,"P",{});var SOe=s(wx);NOr=r(SOe,"This class cannot be instantiated directly using "),gEe=n(SOe,"CODE",{});var V$t=s(gEe);qOr=r(V$t,"__init__()"),V$t.forEach(t),jOr=r(SOe," (throws an error)."),SOe.forEach(t),DOr=i(si),Jt=n(si,"DIV",{class:!0});var C0=s(Jt);T(Ax.$$.fragment,C0),GOr=i(C0),hEe=n(C0,"P",{});var X$t=s(hEe);OOr=r(X$t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),X$t.forEach(t),VOr=i(C0),nf=n(C0,"P",{});var uoe=s(nf);XOr=r(uoe,`Note:
Loading a model from its configuration file does `),pEe=n(uoe,"STRONG",{});var z$t=s(pEe);zOr=r(z$t,"not"),z$t.forEach(t),WOr=r(uoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),vZ=n(uoe,"A",{href:!0});var W$t=s(vZ);QOr=r(W$t,"from_pretrained()"),W$t.forEach(t),HOr=r(uoe," to load the model weights."),uoe.forEach(t),UOr=i(C0),T(o3.$$.fragment,C0),C0.forEach(t),JOr=i(si),Hr=n(si,"DIV",{class:!0});var li=s(Hr);T(yx.$$.fragment,li),YOr=i(li),_Ee=n(li,"P",{});var Q$t=s(_Ee);KOr=r(Q$t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Q$t.forEach(t),ZOr=i(li),En=n(li,"P",{});var w0=s(En);eVr=r(w0,"The model class to instantiate is selected based on the "),uEe=n(w0,"CODE",{});var H$t=s(uEe);oVr=r(H$t,"model_type"),H$t.forEach(t),rVr=r(w0,` property of the config object (either
passed as an argument or loaded from `),bEe=n(w0,"CODE",{});var U$t=s(bEe);tVr=r(U$t,"pretrained_model_name_or_path"),U$t.forEach(t),aVr=r(w0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vEe=n(w0,"CODE",{});var J$t=s(vEe);nVr=r(J$t,"pretrained_model_name_or_path"),J$t.forEach(t),sVr=r(w0,":"),w0.forEach(t),lVr=i(li),FEe=n(li,"UL",{});var Y$t=s(FEe);r3=n(Y$t,"LI",{});var Eqe=s(r3);TEe=n(Eqe,"STRONG",{});var K$t=s(TEe);iVr=r(K$t,"bert"),K$t.forEach(t),dVr=r(Eqe," \u2014 "),FZ=n(Eqe,"A",{href:!0});var Z$t=s(FZ);cVr=r(Z$t,"FlaxBertForNextSentencePrediction"),Z$t.forEach(t),fVr=r(Eqe," (BERT model)"),Eqe.forEach(t),Y$t.forEach(t),mVr=i(li),T(t3.$$.fragment,li),li.forEach(t),si.forEach(t),ADe=i(f),sf=n(f,"H2",{class:!0});var ROe=s(sf);a3=n(ROe,"A",{id:!0,class:!0,href:!0});var ekt=s(a3);MEe=n(ekt,"SPAN",{});var okt=s(MEe);T(Lx.$$.fragment,okt),okt.forEach(t),ekt.forEach(t),gVr=i(ROe),EEe=n(ROe,"SPAN",{});var rkt=s(EEe);hVr=r(rkt,"FlaxAutoModelForImageClassification"),rkt.forEach(t),ROe.forEach(t),yDe=i(f),Tr=n(f,"DIV",{class:!0});var ii=s(Tr);T(xx.$$.fragment,ii),pVr=i(ii),lf=n(ii,"P",{});var boe=s(lf);_Vr=r(boe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),TZ=n(boe,"A",{href:!0});var tkt=s(TZ);uVr=r(tkt,"from_pretrained()"),tkt.forEach(t),bVr=r(boe," class method or the "),MZ=n(boe,"A",{href:!0});var akt=s(MZ);vVr=r(akt,"from_config()"),akt.forEach(t),FVr=r(boe,` class
method.`),boe.forEach(t),TVr=i(ii),$x=n(ii,"P",{});var POe=s($x);MVr=r(POe,"This class cannot be instantiated directly using "),CEe=n(POe,"CODE",{});var nkt=s(CEe);EVr=r(nkt,"__init__()"),nkt.forEach(t),CVr=r(POe," (throws an error)."),POe.forEach(t),wVr=i(ii),Yt=n(ii,"DIV",{class:!0});var A0=s(Yt);T(kx.$$.fragment,A0),AVr=i(A0),wEe=n(A0,"P",{});var skt=s(wEe);yVr=r(skt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),skt.forEach(t),LVr=i(A0),df=n(A0,"P",{});var voe=s(df);xVr=r(voe,`Note:
Loading a model from its configuration file does `),AEe=n(voe,"STRONG",{});var lkt=s(AEe);$Vr=r(lkt,"not"),lkt.forEach(t),kVr=r(voe,` load the model weights. It only affects the
model\u2019s configuration. Use `),EZ=n(voe,"A",{href:!0});var ikt=s(EZ);SVr=r(ikt,"from_pretrained()"),ikt.forEach(t),RVr=r(voe," to load the model weights."),voe.forEach(t),PVr=i(A0),T(n3.$$.fragment,A0),A0.forEach(t),BVr=i(ii),Ur=n(ii,"DIV",{class:!0});var di=s(Ur);T(Sx.$$.fragment,di),IVr=i(di),yEe=n(di,"P",{});var dkt=s(yEe);NVr=r(dkt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),dkt.forEach(t),qVr=i(di),Cn=n(di,"P",{});var y0=s(Cn);jVr=r(y0,"The model class to instantiate is selected based on the "),LEe=n(y0,"CODE",{});var ckt=s(LEe);DVr=r(ckt,"model_type"),ckt.forEach(t),GVr=r(y0,` property of the config object (either
passed as an argument or loaded from `),xEe=n(y0,"CODE",{});var fkt=s(xEe);OVr=r(fkt,"pretrained_model_name_or_path"),fkt.forEach(t),VVr=r(y0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$Ee=n(y0,"CODE",{});var mkt=s($Ee);XVr=r(mkt,"pretrained_model_name_or_path"),mkt.forEach(t),zVr=r(y0,":"),y0.forEach(t),WVr=i(di),Rx=n(di,"UL",{});var BOe=s(Rx);s3=n(BOe,"LI",{});var Cqe=s(s3);kEe=n(Cqe,"STRONG",{});var gkt=s(kEe);QVr=r(gkt,"beit"),gkt.forEach(t),HVr=r(Cqe," \u2014 "),CZ=n(Cqe,"A",{href:!0});var hkt=s(CZ);UVr=r(hkt,"FlaxBeitForImageClassification"),hkt.forEach(t),JVr=r(Cqe," (BEiT model)"),Cqe.forEach(t),YVr=i(BOe),l3=n(BOe,"LI",{});var wqe=s(l3);SEe=n(wqe,"STRONG",{});var pkt=s(SEe);KVr=r(pkt,"vit"),pkt.forEach(t),ZVr=r(wqe," \u2014 "),wZ=n(wqe,"A",{href:!0});var _kt=s(wZ);eXr=r(_kt,"FlaxViTForImageClassification"),_kt.forEach(t),oXr=r(wqe," (ViT model)"),wqe.forEach(t),BOe.forEach(t),rXr=i(di),T(i3.$$.fragment,di),di.forEach(t),ii.forEach(t),LDe=i(f),cf=n(f,"H2",{class:!0});var IOe=s(cf);d3=n(IOe,"A",{id:!0,class:!0,href:!0});var ukt=s(d3);REe=n(ukt,"SPAN",{});var bkt=s(REe);T(Px.$$.fragment,bkt),bkt.forEach(t),ukt.forEach(t),tXr=i(IOe),PEe=n(IOe,"SPAN",{});var vkt=s(PEe);aXr=r(vkt,"FlaxAutoModelForVision2Seq"),vkt.forEach(t),IOe.forEach(t),xDe=i(f),Mr=n(f,"DIV",{class:!0});var ci=s(Mr);T(Bx.$$.fragment,ci),nXr=i(ci),ff=n(ci,"P",{});var Foe=s(ff);sXr=r(Foe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),AZ=n(Foe,"A",{href:!0});var Fkt=s(AZ);lXr=r(Fkt,"from_pretrained()"),Fkt.forEach(t),iXr=r(Foe," class method or the "),yZ=n(Foe,"A",{href:!0});var Tkt=s(yZ);dXr=r(Tkt,"from_config()"),Tkt.forEach(t),cXr=r(Foe,` class
method.`),Foe.forEach(t),fXr=i(ci),Ix=n(ci,"P",{});var NOe=s(Ix);mXr=r(NOe,"This class cannot be instantiated directly using "),BEe=n(NOe,"CODE",{});var Mkt=s(BEe);gXr=r(Mkt,"__init__()"),Mkt.forEach(t),hXr=r(NOe," (throws an error)."),NOe.forEach(t),pXr=i(ci),Kt=n(ci,"DIV",{class:!0});var L0=s(Kt);T(Nx.$$.fragment,L0),_Xr=i(L0),IEe=n(L0,"P",{});var Ekt=s(IEe);uXr=r(Ekt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Ekt.forEach(t),bXr=i(L0),mf=n(L0,"P",{});var Toe=s(mf);vXr=r(Toe,`Note:
Loading a model from its configuration file does `),NEe=n(Toe,"STRONG",{});var Ckt=s(NEe);FXr=r(Ckt,"not"),Ckt.forEach(t),TXr=r(Toe,` load the model weights. It only affects the
model\u2019s configuration. Use `),LZ=n(Toe,"A",{href:!0});var wkt=s(LZ);MXr=r(wkt,"from_pretrained()"),wkt.forEach(t),EXr=r(Toe," to load the model weights."),Toe.forEach(t),CXr=i(L0),T(c3.$$.fragment,L0),L0.forEach(t),wXr=i(ci),Jr=n(ci,"DIV",{class:!0});var fi=s(Jr);T(qx.$$.fragment,fi),AXr=i(fi),qEe=n(fi,"P",{});var Akt=s(qEe);yXr=r(Akt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Akt.forEach(t),LXr=i(fi),wn=n(fi,"P",{});var x0=s(wn);xXr=r(x0,"The model class to instantiate is selected based on the "),jEe=n(x0,"CODE",{});var ykt=s(jEe);$Xr=r(ykt,"model_type"),ykt.forEach(t),kXr=r(x0,` property of the config object (either
passed as an argument or loaded from `),DEe=n(x0,"CODE",{});var Lkt=s(DEe);SXr=r(Lkt,"pretrained_model_name_or_path"),Lkt.forEach(t),RXr=r(x0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),GEe=n(x0,"CODE",{});var xkt=s(GEe);PXr=r(xkt,"pretrained_model_name_or_path"),xkt.forEach(t),BXr=r(x0,":"),x0.forEach(t),IXr=i(fi),OEe=n(fi,"UL",{});var $kt=s(OEe);f3=n($kt,"LI",{});var Aqe=s(f3);VEe=n(Aqe,"STRONG",{});var kkt=s(VEe);NXr=r(kkt,"vision-encoder-decoder"),kkt.forEach(t),qXr=r(Aqe," \u2014 "),xZ=n(Aqe,"A",{href:!0});var Skt=s(xZ);jXr=r(Skt,"FlaxVisionEncoderDecoderModel"),Skt.forEach(t),DXr=r(Aqe," (Vision Encoder decoder model)"),Aqe.forEach(t),$kt.forEach(t),GXr=i(fi),T(m3.$$.fragment,fi),fi.forEach(t),ci.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(IRt)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(yn,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.AutoConfig"),c(xn,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.AutoModel"),c($n,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.AutoTokenizer"),c(bi,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertModel"),c(Ff,"id","extending-the-auto-classes"),c(Ff,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ff,"href","#extending-the-auto-classes"),c(vi,"class","relative group"),c(Mf,"id","transformers.AutoConfig"),c(Mf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Mf,"href","#transformers.AutoConfig"),c(Fi,"class","relative group"),c(nk,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(sk,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig"),c(lk,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig"),c(ik,"href","/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitConfig"),c(dk,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig"),c(ck,"href","/docs/transformers/pr_16792/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(fk,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig"),c(mk,"href","/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(gk,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(hk,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(pk,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig"),c(_k,"href","/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineConfig"),c(uk,"href","/docs/transformers/pr_16792/en/model_doc/clip#transformers.CLIPConfig"),c(bk,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertConfig"),c(vk,"href","/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextConfig"),c(Fk,"href","/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLConfig"),c(Tk,"href","/docs/transformers/pr_16792/en/model_doc/cvt#transformers.CvtConfig"),c(Mk,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(Ek,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(Ck,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(wk,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaConfig"),c(Ak,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(yk,"href","/docs/transformers/pr_16792/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(Lk,"href","/docs/transformers/pr_16792/en/model_doc/deit#transformers.DeiTConfig"),c(xk,"href","/docs/transformers/pr_16792/en/model_doc/detr#transformers.DetrConfig"),c($k,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig"),c(kk,"href","/docs/transformers/pr_16792/en/model_doc/dpr#transformers.DPRConfig"),c(Sk,"href","/docs/transformers/pr_16792/en/model_doc/dpt#transformers.DPTConfig"),c(Rk,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig"),c(Pk,"href","/docs/transformers/pr_16792/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(Bk,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig"),c(Ik,"href","/docs/transformers/pr_16792/en/model_doc/flava#transformers.FlavaConfig"),c(Nk,"href","/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetConfig"),c(qk,"href","/docs/transformers/pr_16792/en/model_doc/fsmt#transformers.FSMTConfig"),c(jk,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig"),c(Dk,"href","/docs/transformers/pr_16792/en/model_doc/glpn#transformers.GLPNConfig"),c(Gk,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Config"),c(Ok,"href","/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(Vk,"href","/docs/transformers/pr_16792/en/model_doc/gpt_neox#transformers.GPTNeoXConfig"),c(Xk,"href","/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJConfig"),c(zk,"href","/docs/transformers/pr_16792/en/model_doc/hubert#transformers.HubertConfig"),c(Wk,"href","/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertConfig"),c(Qk,"href","/docs/transformers/pr_16792/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(Hk,"href","/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(Uk,"href","/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(Jk,"href","/docs/transformers/pr_16792/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),c(Yk,"href","/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDConfig"),c(Kk,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig"),c(Zk,"href","/docs/transformers/pr_16792/en/model_doc/longt5#transformers.LongT5Config"),c(eS,"href","/docs/transformers/pr_16792/en/model_doc/luke#transformers.LukeConfig"),c(oS,"href","/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertConfig"),c(rS,"href","/docs/transformers/pr_16792/en/model_doc/m2m_100#transformers.M2M100Config"),c(tS,"href","/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianConfig"),c(aS,"href","/docs/transformers/pr_16792/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(nS,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig"),c(sS,"href","/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(lS,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(iS,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig"),c(dS,"href","/docs/transformers/pr_16792/en/model_doc/mt5#transformers.MT5Config"),c(cS,"href","/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(fS,"href","/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(mS,"href","/docs/transformers/pr_16792/en/model_doc/opt#transformers.OPTConfig"),c(gS,"href","/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusConfig"),c(hS,"href","/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverConfig"),c(pS,"href","/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartConfig"),c(_S,"href","/docs/transformers/pr_16792/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(uS,"href","/docs/transformers/pr_16792/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(bS,"href","/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(vS,"href","/docs/transformers/pr_16792/en/model_doc/rag#transformers.RagConfig"),c(FS,"href","/docs/transformers/pr_16792/en/model_doc/realm#transformers.RealmConfig"),c(TS,"href","/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerConfig"),c(MS,"href","/docs/transformers/pr_16792/en/model_doc/regnet#transformers.RegNetConfig"),c(ES,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig"),c(CS,"href","/docs/transformers/pr_16792/en/model_doc/resnet#transformers.ResNetConfig"),c(wS,"href","/docs/transformers/pr_16792/en/model_doc/retribert#transformers.RetriBertConfig"),c(AS,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig"),c(yS,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig"),c(LS,"href","/docs/transformers/pr_16792/en/model_doc/segformer#transformers.SegformerConfig"),c(xS,"href","/docs/transformers/pr_16792/en/model_doc/sew#transformers.SEWConfig"),c($S,"href","/docs/transformers/pr_16792/en/model_doc/sew-d#transformers.SEWDConfig"),c(kS,"href","/docs/transformers/pr_16792/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(SS,"href","/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(RS,"href","/docs/transformers/pr_16792/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(PS,"href","/docs/transformers/pr_16792/en/model_doc/splinter#transformers.SplinterConfig"),c(BS,"href","/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(IS,"href","/docs/transformers/pr_16792/en/model_doc/swin#transformers.SwinConfig"),c(NS,"href","/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Config"),c(qS,"href","/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasConfig"),c(jS,"href","/docs/transformers/pr_16792/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(DS,"href","/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(GS,"href","/docs/transformers/pr_16792/en/model_doc/trocr#transformers.TrOCRConfig"),c(OS,"href","/docs/transformers/pr_16792/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(VS,"href","/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(XS,"href","/docs/transformers/pr_16792/en/model_doc/van#transformers.VanConfig"),c(zS,"href","/docs/transformers/pr_16792/en/model_doc/vilt#transformers.ViltConfig"),c(WS,"href","/docs/transformers/pr_16792/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(QS,"href","/docs/transformers/pr_16792/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(HS,"href","/docs/transformers/pr_16792/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(US,"href","/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTConfig"),c(JS,"href","/docs/transformers/pr_16792/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(YS,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(KS,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(ZS,"href","/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMConfig"),c(eR,"href","/docs/transformers/pr_16792/en/model_doc/xglm#transformers.XGLMConfig"),c(oR,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig"),c(rR,"href","/docs/transformers/pr_16792/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(tR,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(aR,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(nR,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig"),c(sR,"href","/docs/transformers/pr_16792/en/model_doc/yolos#transformers.YolosConfig"),c(lR,"href","/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoConfig"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ag,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yg,"id","transformers.AutoTokenizer"),c(yg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yg,"href","#transformers.AutoTokenizer"),c(Mi,"class","relative group"),c(iR,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(dR,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertTokenizer"),c(cR,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(fR,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartTokenizer"),c(mR,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartTokenizerFast"),c(gR,"href","/docs/transformers/pr_16792/en/model_doc/barthez#transformers.BarthezTokenizer"),c(hR,"href","/docs/transformers/pr_16792/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(pR,"href","/docs/transformers/pr_16792/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(_R,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertTokenizer"),c(uR,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertTokenizerFast"),c(bR,"href","/docs/transformers/pr_16792/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(vR,"href","/docs/transformers/pr_16792/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(FR,"href","/docs/transformers/pr_16792/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(TR,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(MR,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(ER,"href","/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(CR,"href","/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(wR,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(AR,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(yR,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(LR,"href","/docs/transformers/pr_16792/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(xR,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertTokenizer"),c($R,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(kR,"href","/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineTokenizer"),c(SR,"href","/docs/transformers/pr_16792/en/model_doc/clip#transformers.CLIPTokenizer"),c(RR,"href","/docs/transformers/pr_16792/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(PR,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(BR,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(IR,"href","/docs/transformers/pr_16792/en/model_doc/cpm#transformers.CpmTokenizer"),c(NR,"href","/docs/transformers/pr_16792/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(qR,"href","/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(jR,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaTokenizer"),c(DR,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(GR,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaTokenizer"),c(OR,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(VR,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(XR,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(zR,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(WR,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(QR,"href","/docs/transformers/pr_16792/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(HR,"href","/docs/transformers/pr_16792/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(UR,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraTokenizer"),c(JR,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(YR,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(KR,"href","/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetTokenizer"),c(ZR,"href","/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(eP,"href","/docs/transformers/pr_16792/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(oP,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelTokenizer"),c(rP,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(tP,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(aP,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(nP,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(sP,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(lP,"href","/docs/transformers/pr_16792/en/model_doc/gpt_neox#transformers.GPTNeoXTokenizerFast"),c(iP,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(dP,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(cP,"href","/docs/transformers/pr_16792/en/model_doc/herbert#transformers.HerbertTokenizer"),c(fP,"href","/docs/transformers/pr_16792/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(mP,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(gP,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaTokenizer"),c(hP,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(pP,"href","/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(_P,"href","/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(uP,"href","/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(bP,"href","/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(vP,"href","/docs/transformers/pr_16792/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),c(FP,"href","/docs/transformers/pr_16792/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),c(TP,"href","/docs/transformers/pr_16792/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(MP,"href","/docs/transformers/pr_16792/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(EP,"href","/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDTokenizer"),c(CP,"href","/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDTokenizerFast"),c(wP,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerTokenizer"),c(AP,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(yP,"href","/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Tokenizer"),c(LP,"href","/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5TokenizerFast"),c(xP,"href","/docs/transformers/pr_16792/en/model_doc/luke#transformers.LukeTokenizer"),c($P,"href","/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(kP,"href","/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(SP,"href","/docs/transformers/pr_16792/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(RP,"href","/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianTokenizer"),c(PP,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartTokenizer"),c(BP,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(IP,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(NP,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(qP,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertTokenizer"),c(jP,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertTokenizerFast"),c(DP,"href","/docs/transformers/pr_16792/en/model_doc/mluke#transformers.MLukeTokenizer"),c(GP,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(OP,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(VP,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(XP,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(zP,"href","/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Tokenizer"),c(WP,"href","/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5TokenizerFast"),c(QP,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertTokenizer"),c(HP,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(UP,"href","/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(JP,"href","/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(YP,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(KP,"href","/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(ZP,"href","/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(eB,"href","/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(oB,"href","/docs/transformers/pr_16792/en/model_doc/phobert#transformers.PhobertTokenizer"),c(rB,"href","/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartTokenizer"),c(tB,"href","/docs/transformers/pr_16792/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(aB,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertTokenizer"),c(nB,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertTokenizerFast"),c(sB,"href","/docs/transformers/pr_16792/en/model_doc/rag#transformers.RagTokenizer"),c(lB,"href","/docs/transformers/pr_16792/en/model_doc/realm#transformers.RealmTokenizer"),c(iB,"href","/docs/transformers/pr_16792/en/model_doc/realm#transformers.RealmTokenizerFast"),c(dB,"href","/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerTokenizer"),c(cB,"href","/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(fB,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertTokenizer"),c(mB,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(gB,"href","/docs/transformers/pr_16792/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(hB,"href","/docs/transformers/pr_16792/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(pB,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaTokenizer"),c(_B,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(uB,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(bB,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(vB,"href","/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(FB,"href","/docs/transformers/pr_16792/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(TB,"href","/docs/transformers/pr_16792/en/model_doc/splinter#transformers.SplinterTokenizer"),c(MB,"href","/docs/transformers/pr_16792/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(EB,"href","/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(CB,"href","/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(wB,"href","/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Tokenizer"),c(AB,"href","/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5TokenizerFast"),c(yB,"href","/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasTokenizer"),c(LB,"href","/docs/transformers/pr_16792/en/model_doc/tapex#transformers.TapexTokenizer"),c(xB,"href","/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c($B,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertTokenizer"),c(kB,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertTokenizerFast"),c(SB,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(RB,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(PB,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(BB,"href","/docs/transformers/pr_16792/en/model_doc/xglm#transformers.XGLMTokenizer"),c(IB,"href","/docs/transformers/pr_16792/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(NB,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMTokenizer"),c(qB,"href","/docs/transformers/pr_16792/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(jB,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(DB,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(GB,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaTokenizer"),c(OB,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(VB,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(XB,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(zB,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertTokenizer"),c(WB,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ih,"id","transformers.AutoFeatureExtractor"),c(ih,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ih,"href","#transformers.AutoFeatureExtractor"),c(Ei,"class","relative group"),c(QB,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(HB,"href","/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(UB,"href","/docs/transformers/pr_16792/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(JB,"href","/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(YB,"href","/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(KB,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(ZB,"href","/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(eI,"href","/docs/transformers/pr_16792/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(oI,"href","/docs/transformers/pr_16792/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(rI,"href","/docs/transformers/pr_16792/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(tI,"href","/docs/transformers/pr_16792/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(aI,"href","/docs/transformers/pr_16792/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(nI,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(sI,"href","/docs/transformers/pr_16792/en/model_doc/imagegpt#transformers.ImageGPTFeatureExtractor"),c(lI,"href","/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(iI,"href","/docs/transformers/pr_16792/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),c(dI,"href","/docs/transformers/pr_16792/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(cI,"href","/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(fI,"href","/docs/transformers/pr_16792/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(mI,"href","/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(gI,"href","/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(hI,"href","/docs/transformers/pr_16792/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(pI,"href","/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(_I,"href","/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(uI,"href","/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(bI,"href","/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(vI,"href","/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(FI,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(TI,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(MI,"href","/docs/transformers/pr_16792/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Dh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Gh,"id","transformers.AutoProcessor"),c(Gh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Gh,"href","#transformers.AutoProcessor"),c(Ci,"class","relative group"),c(EI,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(CI,"href","/docs/transformers/pr_16792/en/model_doc/clip#transformers.CLIPProcessor"),c(wI,"href","/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(AI,"href","/docs/transformers/pr_16792/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),c(yI,"href","/docs/transformers/pr_16792/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(LI,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(xI,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c($I,"href","/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(kI,"href","/docs/transformers/pr_16792/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(SI,"href","/docs/transformers/pr_16792/en/model_doc/trocr#transformers.TrOCRProcessor"),c(RI,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(PI,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(BI,"href","/docs/transformers/pr_16792/en/model_doc/vilt#transformers.ViltProcessor"),c(II,"href","/docs/transformers/pr_16792/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(NI,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(qI,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(jI,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ip,"id","transformers.AutoModel"),c(ip,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ip,"href","#transformers.AutoModel"),c(Ai,"class","relative group"),c(DI,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GI,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OI,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VI,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertModel"),c(XI,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartModel"),c(zI,"href","/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitModel"),c(WI,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertModel"),c(QI,"href","/docs/transformers/pr_16792/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(HI,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdModel"),c(UI,"href","/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(JI,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(YI,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(KI,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertModel"),c(ZI,"href","/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineModel"),c(eN,"href","/docs/transformers/pr_16792/en/model_doc/clip#transformers.CLIPModel"),c(oN,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertModel"),c(rN,"href","/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextModel"),c(tN,"href","/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLModel"),c(aN,"href","/docs/transformers/pr_16792/en/model_doc/cvt#transformers.CvtModel"),c(nN,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(sN,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(lN,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(iN,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaModel"),c(dN,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(cN,"href","/docs/transformers/pr_16792/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(fN,"href","/docs/transformers/pr_16792/en/model_doc/deit#transformers.DeiTModel"),c(mN,"href","/docs/transformers/pr_16792/en/model_doc/detr#transformers.DetrModel"),c(gN,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertModel"),c(hN,"href","/docs/transformers/pr_16792/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(pN,"href","/docs/transformers/pr_16792/en/model_doc/dpt#transformers.DPTModel"),c(_N,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraModel"),c(uN,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertModel"),c(bN,"href","/docs/transformers/pr_16792/en/model_doc/flava#transformers.FlavaModel"),c(vN,"href","/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetModel"),c(FN,"href","/docs/transformers/pr_16792/en/model_doc/fsmt#transformers.FSMTModel"),c(TN,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelModel"),c(MN,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelBaseModel"),c(EN,"href","/docs/transformers/pr_16792/en/model_doc/glpn#transformers.GLPNModel"),c(CN,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Model"),c(wN,"href","/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(AN,"href","/docs/transformers/pr_16792/en/model_doc/gpt_neox#transformers.GPTNeoXModel"),c(yN,"href","/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJModel"),c(LN,"href","/docs/transformers/pr_16792/en/model_doc/hubert#transformers.HubertModel"),c(xN,"href","/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertModel"),c($N,"href","/docs/transformers/pr_16792/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(kN,"href","/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(SN,"href","/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(RN,"href","/docs/transformers/pr_16792/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),c(PN,"href","/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDModel"),c(BN,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerModel"),c(IN,"href","/docs/transformers/pr_16792/en/model_doc/longt5#transformers.LongT5Model"),c(NN,"href","/docs/transformers/pr_16792/en/model_doc/luke#transformers.LukeModel"),c(qN,"href","/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertModel"),c(jN,"href","/docs/transformers/pr_16792/en/model_doc/m2m_100#transformers.M2M100Model"),c(DN,"href","/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianModel"),c(GN,"href","/docs/transformers/pr_16792/en/model_doc/maskformer#transformers.MaskFormerModel"),c(ON,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartModel"),c(VN,"href","/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(XN,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertModel"),c(zN,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetModel"),c(WN,"href","/docs/transformers/pr_16792/en/model_doc/mt5#transformers.MT5Model"),c(QN,"href","/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerModel"),c(HN,"href","/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(UN,"href","/docs/transformers/pr_16792/en/model_doc/opt#transformers.OPTModel"),c(JN,"href","/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusModel"),c(YN,"href","/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverModel"),c(KN,"href","/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartModel"),c(ZN,"href","/docs/transformers/pr_16792/en/model_doc/poolformer#transformers.PoolFormerModel"),c(eq,"href","/docs/transformers/pr_16792/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(oq,"href","/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertModel"),c(rq,"href","/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerModel"),c(tq,"href","/docs/transformers/pr_16792/en/model_doc/regnet#transformers.RegNetModel"),c(aq,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertModel"),c(nq,"href","/docs/transformers/pr_16792/en/model_doc/resnet#transformers.ResNetModel"),c(sq,"href","/docs/transformers/pr_16792/en/model_doc/retribert#transformers.RetriBertModel"),c(lq,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaModel"),c(iq,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerModel"),c(dq,"href","/docs/transformers/pr_16792/en/model_doc/segformer#transformers.SegformerModel"),c(cq,"href","/docs/transformers/pr_16792/en/model_doc/sew#transformers.SEWModel"),c(fq,"href","/docs/transformers/pr_16792/en/model_doc/sew-d#transformers.SEWDModel"),c(mq,"href","/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(gq,"href","/docs/transformers/pr_16792/en/model_doc/splinter#transformers.SplinterModel"),c(hq,"href","/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(pq,"href","/docs/transformers/pr_16792/en/model_doc/swin#transformers.SwinModel"),c(_q,"href","/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Model"),c(uq,"href","/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasModel"),c(bq,"href","/docs/transformers/pr_16792/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(vq,"href","/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(Fq,"href","/docs/transformers/pr_16792/en/model_doc/unispeech#transformers.UniSpeechModel"),c(Tq,"href","/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(Mq,"href","/docs/transformers/pr_16792/en/model_doc/van#transformers.VanModel"),c(Eq,"href","/docs/transformers/pr_16792/en/model_doc/vilt#transformers.ViltModel"),c(Cq,"href","/docs/transformers/pr_16792/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(wq,"href","/docs/transformers/pr_16792/en/model_doc/visual_bert#transformers.VisualBertModel"),c(Aq,"href","/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTModel"),c(yq,"href","/docs/transformers/pr_16792/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(Lq,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(xq,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c($q,"href","/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMModel"),c(kq,"href","/docs/transformers/pr_16792/en/model_doc/xglm#transformers.XGLMModel"),c(Sq,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMModel"),c(Rq,"href","/docs/transformers/pr_16792/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(Pq,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(Bq,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(Iq,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetModel"),c(Nq,"href","/docs/transformers/pr_16792/en/model_doc/yolos#transformers.YolosModel"),c(qq,"href","/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(su,"id","transformers.AutoModelForPreTraining"),c(su,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(su,"href","#transformers.AutoModelForPreTraining"),c(xi,"class","relative group"),c(jq,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dq,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Gq,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oq,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertForPreTraining"),c(Vq,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(Xq,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForPreTraining"),c(zq,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(Wq,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(Qq,"href","/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(Hq,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(Uq,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(Jq,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(Yq,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(Kq,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForPreTraining"),c(Zq,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(ej,"href","/docs/transformers/pr_16792/en/model_doc/flava#transformers.FlavaForPreTraining"),c(oj,"href","/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForPreTraining"),c(rj,"href","/docs/transformers/pr_16792/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(tj,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(aj,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(nj,"href","/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(sj,"href","/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(lj,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(ij,"href","/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(dj,"href","/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(cj,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(fj,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(mj,"href","/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(gj,"href","/docs/transformers/pr_16792/en/model_doc/retribert#transformers.RetriBertModel"),c(hj,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(pj,"href","/docs/transformers/pr_16792/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(_j,"href","/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(uj,"href","/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(bj,"href","/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(vj,"href","/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(Fj,"href","/docs/transformers/pr_16792/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(Tj,"href","/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(Mj,"href","/docs/transformers/pr_16792/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(Ej,"href","/docs/transformers/pr_16792/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(Cj,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(wj,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(Aj,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(yj,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(Lj,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(xj,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ku,"id","transformers.AutoModelForCausalLM"),c(Ku,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ku,"href","#transformers.AutoModelForCausalLM"),c(Si,"class","relative group"),c($j,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kj,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Sj,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Rj,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartForCausalLM"),c(Pj,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertLMHeadModel"),c(Bj,"href","/docs/transformers/pr_16792/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(Ij,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(Nj,"href","/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(qj,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(jj,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(Dj,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(Gj,"href","/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(Oj,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(Vj,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForCausalLM"),c(Xj,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(zj,"href","/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(Wj,"href","/docs/transformers/pr_16792/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM"),c(Qj,"href","/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(Hj,"href","/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianForCausalLM"),c(Uj,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartForCausalLM"),c(Jj,"href","/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(Yj,"href","/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(Kj,"href","/docs/transformers/pr_16792/en/model_doc/opt#transformers.OPTForCausalLM"),c(Zj,"href","/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(eD,"href","/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(oD,"href","/docs/transformers/pr_16792/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(rD,"href","/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(tD,"href","/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(aD,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(nD,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(sD,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(lD,"href","/docs/transformers/pr_16792/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(iD,"href","/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(dD,"href","/docs/transformers/pr_16792/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(cD,"href","/docs/transformers/pr_16792/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(fD,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(mD,"href","/docs/transformers/pr_16792/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(gD,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(hD,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(pD,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(j2,"id","transformers.AutoModelForMaskedLM"),c(j2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(j2,"href","#transformers.AutoModelForMaskedLM"),c(Bi,"class","relative group"),c(_D,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uD,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bD,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vD,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(FD,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(TD,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForMaskedLM"),c(MD,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(ED,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(CD,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(wD,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(AD,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(yD,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(LD,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(xD,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForMaskedLM"),c($D,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(kD,"href","/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(SD,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(RD,"href","/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(PD,"href","/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(BD,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(ID,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(ND,"href","/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(qD,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(jD,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(DD,"href","/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(GD,"href","/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(OD,"href","/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(VD,"href","/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(XD,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(zD,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(WD,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(QD,"href","/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(HD,"href","/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(UD,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(JD,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(YD,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(KD,"href","/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(C1,"id","transformers.AutoModelForSeq2SeqLM"),c(C1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(C1,"href","#transformers.AutoModelForSeq2SeqLM"),c(qi,"class","relative group"),c(ZD,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eG,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oG,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rG,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(tG,"href","/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(aG,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(nG,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(sG,"href","/docs/transformers/pr_16792/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(lG,"href","/docs/transformers/pr_16792/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(iG,"href","/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(dG,"href","/docs/transformers/pr_16792/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration"),c(cG,"href","/docs/transformers/pr_16792/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(fG,"href","/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianMTModel"),c(mG,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(gG,"href","/docs/transformers/pr_16792/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(hG,"href","/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(pG,"href","/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(_G,"href","/docs/transformers/pr_16792/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(uG,"href","/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(bG,"href","/docs/transformers/pr_16792/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(z1,"id","transformers.AutoModelForSequenceClassification"),c(z1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(z1,"href","#transformers.AutoModelForSequenceClassification"),c(Gi,"class","relative group"),c(vG,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FG,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TG,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MG,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(EG,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartForSequenceClassification"),c(CG,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForSequenceClassification"),c(wG,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(AG,"href","/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(yG,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(LG,"href","/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(xG,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c($G,"href","/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(kG,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(SG,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(RG,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(PG,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(BG,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(IG,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(NG,"href","/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(qG,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(jG,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(DG,"href","/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(GG,"href","/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(OG,"href","/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(VG,"href","/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(XG,"href","/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(zG,"href","/docs/transformers/pr_16792/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),c(WG,"href","/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDForSequenceClassification"),c(QG,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(HG,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(UG,"href","/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(JG,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(YG,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(KG,"href","/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(ZG,"href","/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(eO,"href","/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(oO,"href","/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(rO,"href","/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(tO,"href","/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(aO,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(nO,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(sO,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(lO,"href","/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(iO,"href","/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(dO,"href","/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(cO,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(fO,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(mO,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(gO,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(hO,"href","/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ob,"id","transformers.AutoModelForMultipleChoice"),c(Ob,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ob,"href","#transformers.AutoModelForMultipleChoice"),c(Xi,"class","relative group"),c(pO,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_O,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uO,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bO,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(vO,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForMultipleChoice"),c(FO,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(TO,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(MO,"href","/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(EO,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(CO,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(wO,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(AO,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(yO,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(LO,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(xO,"href","/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c($O,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(kO,"href","/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(SO,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(RO,"href","/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(PO,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(BO,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(IO,"href","/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(NO,"href","/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(qO,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(jO,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(DO,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(GO,"href","/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(OO,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(VO,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(XO,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(zO,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(WO,"href","/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tv,"id","transformers.AutoModelForNextSentencePrediction"),c(Tv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Tv,"href","#transformers.AutoModelForNextSentencePrediction"),c(Qi,"class","relative group"),c(QO,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HO,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UO,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JO,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(YO,"href","/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(KO,"href","/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(ZO,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(eV,"href","/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($v,"id","transformers.AutoModelForTokenClassification"),c($v,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($v,"href","#transformers.AutoModelForTokenClassification"),c(Ji,"class","relative group"),c(oV,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rV,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tV,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aV,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(nV,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForTokenClassification"),c(sV,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(lV,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(iV,"href","/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineForTokenClassification"),c(dV,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(cV,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(fV,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(mV,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(gV,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(hV,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(pV,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(_V,"href","/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(uV,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(bV,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(vV,"href","/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(FV,"href","/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(TV,"href","/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(MV,"href","/docs/transformers/pr_16792/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),c(EV,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(CV,"href","/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(wV,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(AV,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(yV,"href","/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(LV,"href","/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(xV,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c($V,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(kV,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(SV,"href","/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(RV,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(PV,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(BV,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(IV,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(NV,"href","/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hF,"id","transformers.AutoModelForQuestionAnswering"),c(hF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(hF,"href","#transformers.AutoModelForQuestionAnswering"),c(Zi,"class","relative group"),c(qV,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jV,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DV,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GV,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(OV,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(VV,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(XV,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(zV,"href","/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(WV,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(QV,"href","/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(HV,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(UV,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(JV,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(YV,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(KV,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(ZV,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(eX,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(oX,"href","/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(rX,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(tX,"href","/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(aX,"href","/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(nX,"href","/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(sX,"href","/docs/transformers/pr_16792/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(lX,"href","/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(iX,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(dX,"href","/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(cX,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(fX,"href","/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(mX,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(gX,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(hX,"href","/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(pX,"href","/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(_X,"href","/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(uX,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(bX,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(vX,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(FX,"href","/docs/transformers/pr_16792/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(TX,"href","/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(MX,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(EX,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(CX,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(wX,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(AX,"href","/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(a6,"id","transformers.AutoModelForTableQuestionAnswering"),c(a6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(a6,"href","#transformers.AutoModelForTableQuestionAnswering"),c(rd,"class","relative group"),c(yX,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LX,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xX,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($X,"href","/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(d6,"id","transformers.AutoModelForImageClassification"),c(d6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(d6,"href","#transformers.AutoModelForImageClassification"),c(nd,"class","relative group"),c(kX,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SX,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RX,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PX,"href","/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitForImageClassification"),c(BX,"href","/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(IX,"href","/docs/transformers/pr_16792/en/model_doc/cvt#transformers.CvtForImageClassification"),c(NX,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(qX,"href","/docs/transformers/pr_16792/en/model_doc/deit#transformers.DeiTForImageClassification"),c(jX,"href","/docs/transformers/pr_16792/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(DX,"href","/docs/transformers/pr_16792/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(GX,"href","/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(OX,"href","/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(VX,"href","/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(XX,"href","/docs/transformers/pr_16792/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(zX,"href","/docs/transformers/pr_16792/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(WX,"href","/docs/transformers/pr_16792/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(QX,"href","/docs/transformers/pr_16792/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(HX,"href","/docs/transformers/pr_16792/en/model_doc/swin#transformers.SwinForImageClassification"),c(UX,"href","/docs/transformers/pr_16792/en/model_doc/van#transformers.VanForImageClassification"),c(JX,"href","/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTForImageClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(w6,"id","transformers.AutoModelForVision2Seq"),c(w6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(w6,"href","#transformers.AutoModelForVision2Seq"),c(id,"class","relative group"),c(YX,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KX,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZX,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ez,"href","/docs/transformers/pr_16792/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($6,"id","transformers.AutoModelForAudioClassification"),c($6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($6,"href","#transformers.AutoModelForAudioClassification"),c(fd,"class","relative group"),c(oz,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rz,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tz,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(az,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(nz,"href","/docs/transformers/pr_16792/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(sz,"href","/docs/transformers/pr_16792/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(lz,"href","/docs/transformers/pr_16792/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(iz,"href","/docs/transformers/pr_16792/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(dz,"href","/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(cz,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(fz,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(mz,"href","/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(V6,"id","transformers.AutoModelForAudioFrameClassification"),c(V6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(V6,"href","#transformers.AutoModelForAudioFrameClassification"),c(hd,"class","relative group"),c(gz,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hz,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pz,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_z,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(uz,"href","/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(bz,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(vz,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(Fz,"href","/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(K6,"id","transformers.AutoModelForCTC"),c(K6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(K6,"href","#transformers.AutoModelForCTC"),c(ud,"class","relative group"),c(Tz,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mz,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Ez,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cz,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(wz,"href","/docs/transformers/pr_16792/en/model_doc/hubert#transformers.HubertForCTC"),c(Az,"href","/docs/transformers/pr_16792/en/model_doc/sew#transformers.SEWForCTC"),c(yz,"href","/docs/transformers/pr_16792/en/model_doc/sew-d#transformers.SEWDForCTC"),c(Lz,"href","/docs/transformers/pr_16792/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(xz,"href","/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c($z,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(kz,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(Sz,"href","/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMForCTC"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fT,"id","transformers.AutoModelForSpeechSeq2Seq"),c(fT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fT,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(Fd,"class","relative group"),c(Rz,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pz,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Bz,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Iz,"href","/docs/transformers/pr_16792/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(Nz,"href","/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uT,"id","transformers.AutoModelForAudioXVector"),c(uT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(uT,"href","#transformers.AutoModelForAudioXVector"),c(Ed,"class","relative group"),c(qz,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jz,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Dz,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Gz,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(Oz,"href","/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(Vz,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(Xz,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(zz,"href","/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMForXVector"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AT,"id","transformers.AutoModelForMaskedImageModeling"),c(AT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(AT,"href","#transformers.AutoModelForMaskedImageModeling"),c(Ad,"class","relative group"),c(Wz,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qz,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Hz,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uz,"href","/docs/transformers/pr_16792/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(Jz,"href","/docs/transformers/pr_16792/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(Yz,"href","/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RT,"id","transformers.AutoModelForObjectDetection"),c(RT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(RT,"href","#transformers.AutoModelForObjectDetection"),c($d,"class","relative group"),c(Kz,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zz,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eW,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oW,"href","/docs/transformers/pr_16792/en/model_doc/detr#transformers.DetrForObjectDetection"),c(rW,"href","/docs/transformers/pr_16792/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jT,"id","transformers.AutoModelForImageSegmentation"),c(jT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jT,"href","#transformers.AutoModelForImageSegmentation"),c(Rd,"class","relative group"),c(tW,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aW,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nW,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sW,"href","/docs/transformers/pr_16792/en/model_doc/detr#transformers.DetrForSegmentation"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XT,"id","transformers.AutoModelForSemanticSegmentation"),c(XT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(XT,"href","#transformers.AutoModelForSemanticSegmentation"),c(Id,"class","relative group"),c(lW,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iW,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dW,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cW,"href","/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(fW,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(mW,"href","/docs/transformers/pr_16792/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(gW,"href","/docs/transformers/pr_16792/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KT,"id","transformers.AutoModelForInstanceSegmentation"),c(KT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(KT,"href","#transformers.AutoModelForInstanceSegmentation"),c(jd,"class","relative group"),c(hW,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pW,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_W,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uW,"href","/docs/transformers/pr_16792/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(t7,"id","transformers.TFAutoModel"),c(t7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(t7,"href","#transformers.TFAutoModel"),c(Od,"class","relative group"),c(bW,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vW,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FW,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TW,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertModel"),c(MW,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.TFBartModel"),c(EW,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertModel"),c(CW,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(wW,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(AW,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertModel"),c(yW,"href","/docs/transformers/pr_16792/en/model_doc/clip#transformers.TFCLIPModel"),c(LW,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.TFConvBertModel"),c(xW,"href","/docs/transformers/pr_16792/en/model_doc/convnext#transformers.TFConvNextModel"),c($W,"href","/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.TFCTRLModel"),c(kW,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(SW,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.TFDebertaModel"),c(RW,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(PW,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(BW,"href","/docs/transformers/pr_16792/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(IW,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraModel"),c(NW,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(qW,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelModel"),c(jW,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(DW,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.TFGPT2Model"),c(GW,"href","/docs/transformers/pr_16792/en/model_doc/gptj#transformers.TFGPTJModel"),c(OW,"href","/docs/transformers/pr_16792/en/model_doc/hubert#transformers.TFHubertModel"),c(VW,"href","/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(XW,"href","/docs/transformers/pr_16792/en/model_doc/led#transformers.TFLEDModel"),c(zW,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.TFLongformerModel"),c(WW,"href","/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.TFLxmertModel"),c(QW,"href","/docs/transformers/pr_16792/en/model_doc/marian#transformers.TFMarianModel"),c(HW,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.TFMBartModel"),c(UW,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(JW,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetModel"),c(YW,"href","/docs/transformers/pr_16792/en/model_doc/mt5#transformers.TFMT5Model"),c(KW,"href","/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(ZW,"href","/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.TFPegasusModel"),c(eQ,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertModel"),c(oQ,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaModel"),c(rQ,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerModel"),c(tQ,"href","/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(aQ,"href","/docs/transformers/pr_16792/en/model_doc/swin#transformers.TFSwinModel"),c(nQ,"href","/docs/transformers/pr_16792/en/model_doc/t5#transformers.TFT5Model"),c(sQ,"href","/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TFTapasModel"),c(lQ,"href","/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(iQ,"href","/docs/transformers/pr_16792/en/model_doc/vit#transformers.TFViTModel"),c(dQ,"href","/docs/transformers/pr_16792/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(cQ,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(fQ,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMModel"),c(mQ,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(gQ,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetModel"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Y7,"id","transformers.TFAutoModelForPreTraining"),c(Y7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Y7,"href","#transformers.TFAutoModelForPreTraining"),c(zd,"class","relative group"),c(hQ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pQ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_Q,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uQ,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(bQ,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(vQ,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertForPreTraining"),c(FQ,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(TQ,"href","/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(MQ,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(EQ,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(CQ,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(wQ,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(AQ,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(yQ,"href","/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(LQ,"href","/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(xQ,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c($Q,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(kQ,"href","/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(SQ,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(RQ,"href","/docs/transformers/pr_16792/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(PQ,"href","/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(BQ,"href","/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(IQ,"href","/docs/transformers/pr_16792/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(NQ,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(qQ,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(jQ,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(E9,"id","transformers.TFAutoModelForCausalLM"),c(E9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(E9,"href","#transformers.TFAutoModelForCausalLM"),c(Hd,"class","relative group"),c(DQ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GQ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OQ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VQ,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(XQ,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(zQ,"href","/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(WQ,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(QQ,"href","/docs/transformers/pr_16792/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(HQ,"href","/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(UQ,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(JQ,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(YQ,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(KQ,"href","/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(ZQ,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(eH,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(q9,"id","transformers.TFAutoModelForImageClassification"),c(q9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(q9,"href","#transformers.TFAutoModelForImageClassification"),c(Yd,"class","relative group"),c(oH,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rH,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tH,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aH,"href","/docs/transformers/pr_16792/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(nH,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(sH,"href","/docs/transformers/pr_16792/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(lH,"href","/docs/transformers/pr_16792/en/model_doc/vit#transformers.TFViTForImageClassification"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(z9,"id","transformers.TFAutoModelForMaskedLM"),c(z9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(z9,"href","#transformers.TFAutoModelForMaskedLM"),c(ec,"class","relative group"),c(iH,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dH,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cH,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fH,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(mH,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(gH,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(hH,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(pH,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(_H,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(uH,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(bH,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(vH,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(FH,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(TH,"href","/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(MH,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(EH,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(CH,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(wH,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(AH,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(yH,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(LH,"href","/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(xH,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c($H,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hM,"id","transformers.TFAutoModelForSeq2SeqLM"),c(hM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(hM,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(tc,"class","relative group"),c(kH,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SH,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RH,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PH,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(BH,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(IH,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(NH,"href","/docs/transformers/pr_16792/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(qH,"href","/docs/transformers/pr_16792/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(jH,"href","/docs/transformers/pr_16792/en/model_doc/marian#transformers.TFMarianMTModel"),c(DH,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(GH,"href","/docs/transformers/pr_16792/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(OH,"href","/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(VH,"href","/docs/transformers/pr_16792/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yM,"id","transformers.TFAutoModelForSequenceClassification"),c(yM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yM,"href","#transformers.TFAutoModelForSequenceClassification"),c(sc,"class","relative group"),c(XH,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zH,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WH,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QH,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(HH,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(UH,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(JH,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(YH,"href","/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(KH,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(ZH,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(eU,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(oU,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(rU,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(tU,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(aU,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(nU,"href","/docs/transformers/pr_16792/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(sU,"href","/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(lU,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(iU,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(dU,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(cU,"href","/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(fU,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(mU,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(gU,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(hU,"href","/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(pU,"href","/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(_U,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(uU,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(bU,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(r4,"id","transformers.TFAutoModelForMultipleChoice"),c(r4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(r4,"href","#transformers.TFAutoModelForMultipleChoice"),c(dc,"class","relative group"),c(vU,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FU,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TU,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MU,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(EU,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(CU,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(wU,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(AU,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(yU,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(LU,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(xU,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c($U,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(kU,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(SU,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(RU,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(PU,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(BU,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(IU,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(NU,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(qU,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(M4,"id","transformers.TFAutoModelForNextSentencePrediction"),c(M4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(M4,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(mc,"class","relative group"),c(jU,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DU,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GU,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OU,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(VU,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(y4,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(y4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(y4,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(pc,"class","relative group"),c(XU,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zU,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WU,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QU,"href","/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(k4,"id","transformers.TFAutoModelForTokenClassification"),c(k4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(k4,"href","#transformers.TFAutoModelForTokenClassification"),c(bc,"class","relative group"),c(HU,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UU,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JU,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YU,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(KU,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(ZU,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(eJ,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(oJ,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(rJ,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(tJ,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(aJ,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(nJ,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(sJ,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(lJ,"href","/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(iJ,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(dJ,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(cJ,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(fJ,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(mJ,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(gJ,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(hJ,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(pJ,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(_J,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eE,"id","transformers.TFAutoModelForQuestionAnswering"),c(eE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(eE,"href","#transformers.TFAutoModelForQuestionAnswering"),c(Tc,"class","relative group"),c(uJ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bJ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vJ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FJ,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(TJ,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(MJ,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(EJ,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(CJ,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(wJ,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(AJ,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(yJ,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(LJ,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(xJ,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c($J,"href","/docs/transformers/pr_16792/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(kJ,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(SJ,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(RJ,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(PJ,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(BJ,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(IJ,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(NJ,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(qJ,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(jJ,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EE,"id","transformers.TFAutoModelForVision2Seq"),c(EE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(EE,"href","#transformers.TFAutoModelForVision2Seq"),c(Cc,"class","relative group"),c(DJ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GJ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OJ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VJ,"href","/docs/transformers/pr_16792/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yE,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(yE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yE,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(yc,"class","relative group"),c(XJ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zJ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WJ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QJ,"href","/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kE,"id","transformers.FlaxAutoModel"),c(kE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(kE,"href","#transformers.FlaxAutoModel"),c($c,"class","relative group"),c(HJ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UJ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JJ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YJ,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertModel"),c(KJ,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartModel"),c(ZJ,"href","/docs/transformers/pr_16792/en/model_doc/beit#transformers.FlaxBeitModel"),c(eY,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertModel"),c(oY,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(rY,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(tY,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(aY,"href","/docs/transformers/pr_16792/en/model_doc/clip#transformers.FlaxCLIPModel"),c(nY,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(sY,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraModel"),c(lY,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(iY,"href","/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(dY,"href","/docs/transformers/pr_16792/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(cY,"href","/docs/transformers/pr_16792/en/model_doc/longt5#transformers.FlaxLongT5Model"),c(fY,"href","/docs/transformers/pr_16792/en/model_doc/marian#transformers.FlaxMarianModel"),c(mY,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.FlaxMBartModel"),c(gY,"href","/docs/transformers/pr_16792/en/model_doc/mt5#transformers.FlaxMT5Model"),c(hY,"href","/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(pY,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(_Y,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(uY,"href","/docs/transformers/pr_16792/en/model_doc/t5#transformers.FlaxT5Model"),c(bY,"href","/docs/transformers/pr_16792/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(vY,"href","/docs/transformers/pr_16792/en/model_doc/vit#transformers.FlaxViTModel"),c(FY,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(TY,"href","/docs/transformers/pr_16792/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(MY,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sC,"id","transformers.FlaxAutoModelForCausalLM"),c(sC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sC,"href","#transformers.FlaxAutoModelForCausalLM"),c(Rc,"class","relative group"),c(EY,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CY,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wY,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AY,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(yY,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(LY,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(xY,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c($Y,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(kY,"href","/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(SY,"href","/docs/transformers/pr_16792/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(RY,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(PY,"href","/docs/transformers/pr_16792/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bC,"id","transformers.FlaxAutoModelForPreTraining"),c(bC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bC,"href","#transformers.FlaxAutoModelForPreTraining"),c(Ic,"class","relative group"),c(BY,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IY,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NY,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qY,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(jY,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(DY,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(GY,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(OY,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(VY,"href","/docs/transformers/pr_16792/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(XY,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(zY,"href","/docs/transformers/pr_16792/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(WY,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(QY,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(HY,"href","/docs/transformers/pr_16792/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(UY,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(JY,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PC,"id","transformers.FlaxAutoModelForMaskedLM"),c(PC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(PC,"href","#transformers.FlaxAutoModelForMaskedLM"),c(jc,"class","relative group"),c(YY,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KY,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZY,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eK,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(oK,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(rK,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(tK,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(aK,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(nK,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(sK,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(lK,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(iK,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(dK,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QC,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(QC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(QC,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Oc,"class","relative group"),c(cK,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fK,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mK,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gK,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(hK,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(pK,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(_K,"href","/docs/transformers/pr_16792/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(uK,"href","/docs/transformers/pr_16792/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(bK,"href","/docs/transformers/pr_16792/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(vK,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(FK,"href","/docs/transformers/pr_16792/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(TK,"href","/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(MK,"href","/docs/transformers/pr_16792/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(s5,"id","transformers.FlaxAutoModelForSequenceClassification"),c(s5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(s5,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(zc,"class","relative group"),c(EK,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CK,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wK,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AK,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(yK,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(LK,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(xK,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c($K,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(kK,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(SK,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(RK,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(PK,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(BK,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(v5,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(v5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(v5,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(Hc,"class","relative group"),c(IK,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NK,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qK,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jK,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(DK,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(GK,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(OK,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(VK,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(XK,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(zK,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(WK,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(QK,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(HK,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(S5,"id","transformers.FlaxAutoModelForTokenClassification"),c(S5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(S5,"href","#transformers.FlaxAutoModelForTokenClassification"),c(Yc,"class","relative group"),c(UK,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JK,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YK,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KK,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(ZK,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(eZ,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(oZ,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(rZ,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(tZ,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(aZ,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(nZ,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(V5,"id","transformers.FlaxAutoModelForMultipleChoice"),c(V5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(V5,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(ef,"class","relative group"),c(sZ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lZ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iZ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dZ,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(cZ,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(fZ,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(mZ,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(gZ,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(hZ,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(pZ,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(_Z,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(e3,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(e3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(e3,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(tf,"class","relative group"),c(uZ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bZ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vZ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FZ,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(a3,"id","transformers.FlaxAutoModelForImageClassification"),c(a3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(a3,"href","#transformers.FlaxAutoModelForImageClassification"),c(sf,"class","relative group"),c(TZ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MZ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(EZ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CZ,"href","/docs/transformers/pr_16792/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(wZ,"href","/docs/transformers/pr_16792/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(d3,"id","transformers.FlaxAutoModelForVision2Seq"),c(d3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(d3,"href","#transformers.FlaxAutoModelForVision2Seq"),c(cf,"class","relative group"),c(AZ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yZ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(LZ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xZ,"href","/docs/transformers/pr_16792/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,u){e(document.head,g),b(f,v,u),b(f,p,u),e(p,m),e(m,_),M(d,_,null),e(p,h),e(p,Mo),e(Mo,mi),b(f,_f,u),b(f,rt,u),e(rt,gi),e(rt,hi),e(hi,$0),e(rt,uf),b(f,De,u),b(f,We,u),e(We,pi),e(We,yn),e(yn,k0),e(We,Ln),e(We,xn),e(xn,S0),e(We,_i),e(We,$n),e($n,R0),e(We,ui),b(f,bf,u),M(Ca,f,u),b(f,Qe,u),b(f,Ae,u),e(Ae,Z$),e(Ae,bi),e(bi,ek),e(Ae,ok),b(f,Eo,u),b(f,wa,u),e(wa,rk),e(wa,vf),e(vf,tk),e(wa,qOe),b(f,yqe,u),b(f,vi,u),e(vi,Ff),e(Ff,Moe),M(P0,Moe,null),e(vi,jOe),e(vi,Eoe),e(Eoe,DOe),b(f,Lqe,u),b(f,kn,u),e(kn,GOe),e(kn,Coe),e(Coe,OOe),e(kn,VOe),e(kn,woe),e(woe,XOe),e(kn,zOe),b(f,xqe,u),M(B0,f,u),b(f,$qe,u),b(f,ak,u),e(ak,WOe),b(f,kqe,u),M(Tf,f,u),b(f,Sqe,u),b(f,Fi,u),e(Fi,Mf),e(Mf,Aoe),M(I0,Aoe,null),e(Fi,QOe),e(Fi,yoe),e(yoe,HOe),b(f,Rqe,u),b(f,Co,u),M(N0,Co,null),e(Co,UOe),e(Co,q0),e(q0,JOe),e(q0,nk),e(nk,YOe),e(q0,KOe),e(Co,ZOe),e(Co,j0),e(j0,eVe),e(j0,Loe),e(Loe,oVe),e(j0,rVe),e(Co,tVe),e(Co,Er),M(D0,Er,null),e(Er,aVe),e(Er,xoe),e(xoe,nVe),e(Er,sVe),e(Er,Ti),e(Ti,lVe),e(Ti,$oe),e($oe,iVe),e(Ti,dVe),e(Ti,koe),e(koe,cVe),e(Ti,fVe),e(Er,mVe),e(Er,A),e(A,Ef),e(Ef,Soe),e(Soe,gVe),e(Ef,hVe),e(Ef,sk),e(sk,pVe),e(Ef,_Ve),e(A,uVe),e(A,Cf),e(Cf,Roe),e(Roe,bVe),e(Cf,vVe),e(Cf,lk),e(lk,FVe),e(Cf,TVe),e(A,MVe),e(A,wf),e(wf,Poe),e(Poe,EVe),e(wf,CVe),e(wf,ik),e(ik,wVe),e(wf,AVe),e(A,yVe),e(A,Af),e(Af,Boe),e(Boe,LVe),e(Af,xVe),e(Af,dk),e(dk,$Ve),e(Af,kVe),e(A,SVe),e(A,yf),e(yf,Ioe),e(Ioe,RVe),e(yf,PVe),e(yf,ck),e(ck,BVe),e(yf,IVe),e(A,NVe),e(A,Lf),e(Lf,Noe),e(Noe,qVe),e(Lf,jVe),e(Lf,fk),e(fk,DVe),e(Lf,GVe),e(A,OVe),e(A,xf),e(xf,qoe),e(qoe,VVe),e(xf,XVe),e(xf,mk),e(mk,zVe),e(xf,WVe),e(A,QVe),e(A,$f),e($f,joe),e(joe,HVe),e($f,UVe),e($f,gk),e(gk,JVe),e($f,YVe),e(A,KVe),e(A,kf),e(kf,Doe),e(Doe,ZVe),e(kf,eXe),e(kf,hk),e(hk,oXe),e(kf,rXe),e(A,tXe),e(A,Sf),e(Sf,Goe),e(Goe,aXe),e(Sf,nXe),e(Sf,pk),e(pk,sXe),e(Sf,lXe),e(A,iXe),e(A,Rf),e(Rf,Ooe),e(Ooe,dXe),e(Rf,cXe),e(Rf,_k),e(_k,fXe),e(Rf,mXe),e(A,gXe),e(A,Pf),e(Pf,Voe),e(Voe,hXe),e(Pf,pXe),e(Pf,uk),e(uk,_Xe),e(Pf,uXe),e(A,bXe),e(A,Bf),e(Bf,Xoe),e(Xoe,vXe),e(Bf,FXe),e(Bf,bk),e(bk,TXe),e(Bf,MXe),e(A,EXe),e(A,If),e(If,zoe),e(zoe,CXe),e(If,wXe),e(If,vk),e(vk,AXe),e(If,yXe),e(A,LXe),e(A,Nf),e(Nf,Woe),e(Woe,xXe),e(Nf,$Xe),e(Nf,Fk),e(Fk,kXe),e(Nf,SXe),e(A,RXe),e(A,qf),e(qf,Qoe),e(Qoe,PXe),e(qf,BXe),e(qf,Tk),e(Tk,IXe),e(qf,NXe),e(A,qXe),e(A,jf),e(jf,Hoe),e(Hoe,jXe),e(jf,DXe),e(jf,Mk),e(Mk,GXe),e(jf,OXe),e(A,VXe),e(A,Df),e(Df,Uoe),e(Uoe,XXe),e(Df,zXe),e(Df,Ek),e(Ek,WXe),e(Df,QXe),e(A,HXe),e(A,Gf),e(Gf,Joe),e(Joe,UXe),e(Gf,JXe),e(Gf,Ck),e(Ck,YXe),e(Gf,KXe),e(A,ZXe),e(A,Of),e(Of,Yoe),e(Yoe,eze),e(Of,oze),e(Of,wk),e(wk,rze),e(Of,tze),e(A,aze),e(A,Vf),e(Vf,Koe),e(Koe,nze),e(Vf,sze),e(Vf,Ak),e(Ak,lze),e(Vf,ize),e(A,dze),e(A,Xf),e(Xf,Zoe),e(Zoe,cze),e(Xf,fze),e(Xf,yk),e(yk,mze),e(Xf,gze),e(A,hze),e(A,zf),e(zf,ere),e(ere,pze),e(zf,_ze),e(zf,Lk),e(Lk,uze),e(zf,bze),e(A,vze),e(A,Wf),e(Wf,ore),e(ore,Fze),e(Wf,Tze),e(Wf,xk),e(xk,Mze),e(Wf,Eze),e(A,Cze),e(A,Qf),e(Qf,rre),e(rre,wze),e(Qf,Aze),e(Qf,$k),e($k,yze),e(Qf,Lze),e(A,xze),e(A,Hf),e(Hf,tre),e(tre,$ze),e(Hf,kze),e(Hf,kk),e(kk,Sze),e(Hf,Rze),e(A,Pze),e(A,Uf),e(Uf,are),e(are,Bze),e(Uf,Ize),e(Uf,Sk),e(Sk,Nze),e(Uf,qze),e(A,jze),e(A,Jf),e(Jf,nre),e(nre,Dze),e(Jf,Gze),e(Jf,Rk),e(Rk,Oze),e(Jf,Vze),e(A,Xze),e(A,Yf),e(Yf,sre),e(sre,zze),e(Yf,Wze),e(Yf,Pk),e(Pk,Qze),e(Yf,Hze),e(A,Uze),e(A,Kf),e(Kf,lre),e(lre,Jze),e(Kf,Yze),e(Kf,Bk),e(Bk,Kze),e(Kf,Zze),e(A,eWe),e(A,Zf),e(Zf,ire),e(ire,oWe),e(Zf,rWe),e(Zf,Ik),e(Ik,tWe),e(Zf,aWe),e(A,nWe),e(A,em),e(em,dre),e(dre,sWe),e(em,lWe),e(em,Nk),e(Nk,iWe),e(em,dWe),e(A,cWe),e(A,om),e(om,cre),e(cre,fWe),e(om,mWe),e(om,qk),e(qk,gWe),e(om,hWe),e(A,pWe),e(A,rm),e(rm,fre),e(fre,_We),e(rm,uWe),e(rm,jk),e(jk,bWe),e(rm,vWe),e(A,FWe),e(A,tm),e(tm,mre),e(mre,TWe),e(tm,MWe),e(tm,Dk),e(Dk,EWe),e(tm,CWe),e(A,wWe),e(A,am),e(am,gre),e(gre,AWe),e(am,yWe),e(am,Gk),e(Gk,LWe),e(am,xWe),e(A,$We),e(A,nm),e(nm,hre),e(hre,kWe),e(nm,SWe),e(nm,Ok),e(Ok,RWe),e(nm,PWe),e(A,BWe),e(A,sm),e(sm,pre),e(pre,IWe),e(sm,NWe),e(sm,Vk),e(Vk,qWe),e(sm,jWe),e(A,DWe),e(A,lm),e(lm,_re),e(_re,GWe),e(lm,OWe),e(lm,Xk),e(Xk,VWe),e(lm,XWe),e(A,zWe),e(A,im),e(im,ure),e(ure,WWe),e(im,QWe),e(im,zk),e(zk,HWe),e(im,UWe),e(A,JWe),e(A,dm),e(dm,bre),e(bre,YWe),e(dm,KWe),e(dm,Wk),e(Wk,ZWe),e(dm,eQe),e(A,oQe),e(A,cm),e(cm,vre),e(vre,rQe),e(cm,tQe),e(cm,Qk),e(Qk,aQe),e(cm,nQe),e(A,sQe),e(A,fm),e(fm,Fre),e(Fre,lQe),e(fm,iQe),e(fm,Hk),e(Hk,dQe),e(fm,cQe),e(A,fQe),e(A,mm),e(mm,Tre),e(Tre,mQe),e(mm,gQe),e(mm,Uk),e(Uk,hQe),e(mm,pQe),e(A,_Qe),e(A,gm),e(gm,Mre),e(Mre,uQe),e(gm,bQe),e(gm,Jk),e(Jk,vQe),e(gm,FQe),e(A,TQe),e(A,hm),e(hm,Ere),e(Ere,MQe),e(hm,EQe),e(hm,Yk),e(Yk,CQe),e(hm,wQe),e(A,AQe),e(A,pm),e(pm,Cre),e(Cre,yQe),e(pm,LQe),e(pm,Kk),e(Kk,xQe),e(pm,$Qe),e(A,kQe),e(A,_m),e(_m,wre),e(wre,SQe),e(_m,RQe),e(_m,Zk),e(Zk,PQe),e(_m,BQe),e(A,IQe),e(A,um),e(um,Are),e(Are,NQe),e(um,qQe),e(um,eS),e(eS,jQe),e(um,DQe),e(A,GQe),e(A,bm),e(bm,yre),e(yre,OQe),e(bm,VQe),e(bm,oS),e(oS,XQe),e(bm,zQe),e(A,WQe),e(A,vm),e(vm,Lre),e(Lre,QQe),e(vm,HQe),e(vm,rS),e(rS,UQe),e(vm,JQe),e(A,YQe),e(A,Fm),e(Fm,xre),e(xre,KQe),e(Fm,ZQe),e(Fm,tS),e(tS,eHe),e(Fm,oHe),e(A,rHe),e(A,Tm),e(Tm,$re),e($re,tHe),e(Tm,aHe),e(Tm,aS),e(aS,nHe),e(Tm,sHe),e(A,lHe),e(A,Mm),e(Mm,kre),e(kre,iHe),e(Mm,dHe),e(Mm,nS),e(nS,cHe),e(Mm,fHe),e(A,mHe),e(A,Em),e(Em,Sre),e(Sre,gHe),e(Em,hHe),e(Em,sS),e(sS,pHe),e(Em,_He),e(A,uHe),e(A,Cm),e(Cm,Rre),e(Rre,bHe),e(Cm,vHe),e(Cm,lS),e(lS,FHe),e(Cm,THe),e(A,MHe),e(A,wm),e(wm,Pre),e(Pre,EHe),e(wm,CHe),e(wm,iS),e(iS,wHe),e(wm,AHe),e(A,yHe),e(A,Am),e(Am,Bre),e(Bre,LHe),e(Am,xHe),e(Am,dS),e(dS,$He),e(Am,kHe),e(A,SHe),e(A,ym),e(ym,Ire),e(Ire,RHe),e(ym,PHe),e(ym,cS),e(cS,BHe),e(ym,IHe),e(A,NHe),e(A,Lm),e(Lm,Nre),e(Nre,qHe),e(Lm,jHe),e(Lm,fS),e(fS,DHe),e(Lm,GHe),e(A,OHe),e(A,xm),e(xm,qre),e(qre,VHe),e(xm,XHe),e(xm,mS),e(mS,zHe),e(xm,WHe),e(A,QHe),e(A,$m),e($m,jre),e(jre,HHe),e($m,UHe),e($m,gS),e(gS,JHe),e($m,YHe),e(A,KHe),e(A,km),e(km,Dre),e(Dre,ZHe),e(km,eUe),e(km,hS),e(hS,oUe),e(km,rUe),e(A,tUe),e(A,Sm),e(Sm,Gre),e(Gre,aUe),e(Sm,nUe),e(Sm,pS),e(pS,sUe),e(Sm,lUe),e(A,iUe),e(A,Rm),e(Rm,Ore),e(Ore,dUe),e(Rm,cUe),e(Rm,_S),e(_S,fUe),e(Rm,mUe),e(A,gUe),e(A,Pm),e(Pm,Vre),e(Vre,hUe),e(Pm,pUe),e(Pm,uS),e(uS,_Ue),e(Pm,uUe),e(A,bUe),e(A,Bm),e(Bm,Xre),e(Xre,vUe),e(Bm,FUe),e(Bm,bS),e(bS,TUe),e(Bm,MUe),e(A,EUe),e(A,Im),e(Im,zre),e(zre,CUe),e(Im,wUe),e(Im,vS),e(vS,AUe),e(Im,yUe),e(A,LUe),e(A,Nm),e(Nm,Wre),e(Wre,xUe),e(Nm,$Ue),e(Nm,FS),e(FS,kUe),e(Nm,SUe),e(A,RUe),e(A,qm),e(qm,Qre),e(Qre,PUe),e(qm,BUe),e(qm,TS),e(TS,IUe),e(qm,NUe),e(A,qUe),e(A,jm),e(jm,Hre),e(Hre,jUe),e(jm,DUe),e(jm,MS),e(MS,GUe),e(jm,OUe),e(A,VUe),e(A,Dm),e(Dm,Ure),e(Ure,XUe),e(Dm,zUe),e(Dm,ES),e(ES,WUe),e(Dm,QUe),e(A,HUe),e(A,Gm),e(Gm,Jre),e(Jre,UUe),e(Gm,JUe),e(Gm,CS),e(CS,YUe),e(Gm,KUe),e(A,ZUe),e(A,Om),e(Om,Yre),e(Yre,eJe),e(Om,oJe),e(Om,wS),e(wS,rJe),e(Om,tJe),e(A,aJe),e(A,Vm),e(Vm,Kre),e(Kre,nJe),e(Vm,sJe),e(Vm,AS),e(AS,lJe),e(Vm,iJe),e(A,dJe),e(A,Xm),e(Xm,Zre),e(Zre,cJe),e(Xm,fJe),e(Xm,yS),e(yS,mJe),e(Xm,gJe),e(A,hJe),e(A,zm),e(zm,ete),e(ete,pJe),e(zm,_Je),e(zm,LS),e(LS,uJe),e(zm,bJe),e(A,vJe),e(A,Wm),e(Wm,ote),e(ote,FJe),e(Wm,TJe),e(Wm,xS),e(xS,MJe),e(Wm,EJe),e(A,CJe),e(A,Qm),e(Qm,rte),e(rte,wJe),e(Qm,AJe),e(Qm,$S),e($S,yJe),e(Qm,LJe),e(A,xJe),e(A,Hm),e(Hm,tte),e(tte,$Je),e(Hm,kJe),e(Hm,kS),e(kS,SJe),e(Hm,RJe),e(A,PJe),e(A,Um),e(Um,ate),e(ate,BJe),e(Um,IJe),e(Um,SS),e(SS,NJe),e(Um,qJe),e(A,jJe),e(A,Jm),e(Jm,nte),e(nte,DJe),e(Jm,GJe),e(Jm,RS),e(RS,OJe),e(Jm,VJe),e(A,XJe),e(A,Ym),e(Ym,ste),e(ste,zJe),e(Ym,WJe),e(Ym,PS),e(PS,QJe),e(Ym,HJe),e(A,UJe),e(A,Km),e(Km,lte),e(lte,JJe),e(Km,YJe),e(Km,BS),e(BS,KJe),e(Km,ZJe),e(A,eYe),e(A,Zm),e(Zm,ite),e(ite,oYe),e(Zm,rYe),e(Zm,IS),e(IS,tYe),e(Zm,aYe),e(A,nYe),e(A,eg),e(eg,dte),e(dte,sYe),e(eg,lYe),e(eg,NS),e(NS,iYe),e(eg,dYe),e(A,cYe),e(A,og),e(og,cte),e(cte,fYe),e(og,mYe),e(og,qS),e(qS,gYe),e(og,hYe),e(A,pYe),e(A,rg),e(rg,fte),e(fte,_Ye),e(rg,uYe),e(rg,jS),e(jS,bYe),e(rg,vYe),e(A,FYe),e(A,tg),e(tg,mte),e(mte,TYe),e(tg,MYe),e(tg,DS),e(DS,EYe),e(tg,CYe),e(A,wYe),e(A,ag),e(ag,gte),e(gte,AYe),e(ag,yYe),e(ag,GS),e(GS,LYe),e(ag,xYe),e(A,$Ye),e(A,ng),e(ng,hte),e(hte,kYe),e(ng,SYe),e(ng,OS),e(OS,RYe),e(ng,PYe),e(A,BYe),e(A,sg),e(sg,pte),e(pte,IYe),e(sg,NYe),e(sg,VS),e(VS,qYe),e(sg,jYe),e(A,DYe),e(A,lg),e(lg,_te),e(_te,GYe),e(lg,OYe),e(lg,XS),e(XS,VYe),e(lg,XYe),e(A,zYe),e(A,ig),e(ig,ute),e(ute,WYe),e(ig,QYe),e(ig,zS),e(zS,HYe),e(ig,UYe),e(A,JYe),e(A,dg),e(dg,bte),e(bte,YYe),e(dg,KYe),e(dg,WS),e(WS,ZYe),e(dg,eKe),e(A,oKe),e(A,cg),e(cg,vte),e(vte,rKe),e(cg,tKe),e(cg,QS),e(QS,aKe),e(cg,nKe),e(A,sKe),e(A,fg),e(fg,Fte),e(Fte,lKe),e(fg,iKe),e(fg,HS),e(HS,dKe),e(fg,cKe),e(A,fKe),e(A,mg),e(mg,Tte),e(Tte,mKe),e(mg,gKe),e(mg,US),e(US,hKe),e(mg,pKe),e(A,_Ke),e(A,gg),e(gg,Mte),e(Mte,uKe),e(gg,bKe),e(gg,JS),e(JS,vKe),e(gg,FKe),e(A,TKe),e(A,hg),e(hg,Ete),e(Ete,MKe),e(hg,EKe),e(hg,YS),e(YS,CKe),e(hg,wKe),e(A,AKe),e(A,pg),e(pg,Cte),e(Cte,yKe),e(pg,LKe),e(pg,KS),e(KS,xKe),e(pg,$Ke),e(A,kKe),e(A,_g),e(_g,wte),e(wte,SKe),e(_g,RKe),e(_g,ZS),e(ZS,PKe),e(_g,BKe),e(A,IKe),e(A,ug),e(ug,Ate),e(Ate,NKe),e(ug,qKe),e(ug,eR),e(eR,jKe),e(ug,DKe),e(A,GKe),e(A,bg),e(bg,yte),e(yte,OKe),e(bg,VKe),e(bg,oR),e(oR,XKe),e(bg,zKe),e(A,WKe),e(A,vg),e(vg,Lte),e(Lte,QKe),e(vg,HKe),e(vg,rR),e(rR,UKe),e(vg,JKe),e(A,YKe),e(A,Fg),e(Fg,xte),e(xte,KKe),e(Fg,ZKe),e(Fg,tR),e(tR,eZe),e(Fg,oZe),e(A,rZe),e(A,Tg),e(Tg,$te),e($te,tZe),e(Tg,aZe),e(Tg,aR),e(aR,nZe),e(Tg,sZe),e(A,lZe),e(A,Mg),e(Mg,kte),e(kte,iZe),e(Mg,dZe),e(Mg,nR),e(nR,cZe),e(Mg,fZe),e(A,mZe),e(A,Eg),e(Eg,Ste),e(Ste,gZe),e(Eg,hZe),e(Eg,sR),e(sR,pZe),e(Eg,_Ze),e(A,uZe),e(A,Cg),e(Cg,Rte),e(Rte,bZe),e(Cg,vZe),e(Cg,lR),e(lR,FZe),e(Cg,TZe),e(Er,MZe),M(wg,Er,null),e(Co,EZe),e(Co,Ag),M(G0,Ag,null),e(Ag,CZe),e(Ag,Pte),e(Pte,wZe),b(f,Pqe,u),b(f,Mi,u),e(Mi,yg),e(yg,Bte),M(O0,Bte,null),e(Mi,AZe),e(Mi,Ite),e(Ite,yZe),b(f,Bqe,u),b(f,wo,u),M(V0,wo,null),e(wo,LZe),e(wo,X0),e(X0,xZe),e(X0,iR),e(iR,$Ze),e(X0,kZe),e(wo,SZe),e(wo,z0),e(z0,RZe),e(z0,Nte),e(Nte,PZe),e(z0,BZe),e(wo,IZe),e(wo,Cr),M(W0,Cr,null),e(Cr,NZe),e(Cr,qte),e(qte,qZe),e(Cr,jZe),e(Cr,Aa),e(Aa,DZe),e(Aa,jte),e(jte,GZe),e(Aa,OZe),e(Aa,Dte),e(Dte,VZe),e(Aa,XZe),e(Aa,Gte),e(Gte,zZe),e(Aa,WZe),e(Cr,QZe),e(Cr,k),e(k,Sn),e(Sn,Ote),e(Ote,HZe),e(Sn,UZe),e(Sn,dR),e(dR,JZe),e(Sn,YZe),e(Sn,cR),e(cR,KZe),e(Sn,ZZe),e(k,eeo),e(k,Rn),e(Rn,Vte),e(Vte,oeo),e(Rn,reo),e(Rn,fR),e(fR,teo),e(Rn,aeo),e(Rn,mR),e(mR,neo),e(Rn,seo),e(k,leo),e(k,Pn),e(Pn,Xte),e(Xte,ieo),e(Pn,deo),e(Pn,gR),e(gR,ceo),e(Pn,feo),e(Pn,hR),e(hR,meo),e(Pn,geo),e(k,heo),e(k,Lg),e(Lg,zte),e(zte,peo),e(Lg,_eo),e(Lg,pR),e(pR,ueo),e(Lg,beo),e(k,veo),e(k,Bn),e(Bn,Wte),e(Wte,Feo),e(Bn,Teo),e(Bn,_R),e(_R,Meo),e(Bn,Eeo),e(Bn,uR),e(uR,Ceo),e(Bn,weo),e(k,Aeo),e(k,xg),e(xg,Qte),e(Qte,yeo),e(xg,Leo),e(xg,bR),e(bR,xeo),e(xg,$eo),e(k,keo),e(k,$g),e($g,Hte),e(Hte,Seo),e($g,Reo),e($g,vR),e(vR,Peo),e($g,Beo),e(k,Ieo),e(k,kg),e(kg,Ute),e(Ute,Neo),e(kg,qeo),e(kg,FR),e(FR,jeo),e(kg,Deo),e(k,Geo),e(k,In),e(In,Jte),e(Jte,Oeo),e(In,Veo),e(In,TR),e(TR,Xeo),e(In,zeo),e(In,MR),e(MR,Weo),e(In,Qeo),e(k,Heo),e(k,Nn),e(Nn,Yte),e(Yte,Ueo),e(Nn,Jeo),e(Nn,ER),e(ER,Yeo),e(Nn,Keo),e(Nn,CR),e(CR,Zeo),e(Nn,eoo),e(k,ooo),e(k,qn),e(qn,Kte),e(Kte,roo),e(qn,too),e(qn,wR),e(wR,aoo),e(qn,noo),e(qn,AR),e(AR,soo),e(qn,loo),e(k,ioo),e(k,Sg),e(Sg,Zte),e(Zte,doo),e(Sg,coo),e(Sg,yR),e(yR,foo),e(Sg,moo),e(k,goo),e(k,Rg),e(Rg,eae),e(eae,hoo),e(Rg,poo),e(Rg,LR),e(LR,_oo),e(Rg,uoo),e(k,boo),e(k,jn),e(jn,oae),e(oae,voo),e(jn,Foo),e(jn,xR),e(xR,Too),e(jn,Moo),e(jn,$R),e($R,Eoo),e(jn,Coo),e(k,woo),e(k,Pg),e(Pg,rae),e(rae,Aoo),e(Pg,yoo),e(Pg,kR),e(kR,Loo),e(Pg,xoo),e(k,$oo),e(k,Dn),e(Dn,tae),e(tae,koo),e(Dn,Soo),e(Dn,SR),e(SR,Roo),e(Dn,Poo),e(Dn,RR),e(RR,Boo),e(Dn,Ioo),e(k,Noo),e(k,Gn),e(Gn,aae),e(aae,qoo),e(Gn,joo),e(Gn,PR),e(PR,Doo),e(Gn,Goo),e(Gn,BR),e(BR,Ooo),e(Gn,Voo),e(k,Xoo),e(k,On),e(On,nae),e(nae,zoo),e(On,Woo),e(On,IR),e(IR,Qoo),e(On,Hoo),e(On,NR),e(NR,Uoo),e(On,Joo),e(k,Yoo),e(k,Bg),e(Bg,sae),e(sae,Koo),e(Bg,Zoo),e(Bg,qR),e(qR,ero),e(Bg,oro),e(k,rro),e(k,Vn),e(Vn,lae),e(lae,tro),e(Vn,aro),e(Vn,jR),e(jR,nro),e(Vn,sro),e(Vn,DR),e(DR,lro),e(Vn,iro),e(k,dro),e(k,Xn),e(Xn,iae),e(iae,cro),e(Xn,fro),e(Xn,GR),e(GR,mro),e(Xn,gro),e(Xn,OR),e(OR,hro),e(Xn,pro),e(k,_ro),e(k,zn),e(zn,dae),e(dae,uro),e(zn,bro),e(zn,VR),e(VR,vro),e(zn,Fro),e(zn,XR),e(XR,Tro),e(zn,Mro),e(k,Ero),e(k,Wn),e(Wn,cae),e(cae,Cro),e(Wn,wro),e(Wn,zR),e(zR,Aro),e(Wn,yro),e(Wn,WR),e(WR,Lro),e(Wn,xro),e(k,$ro),e(k,Qn),e(Qn,fae),e(fae,kro),e(Qn,Sro),e(Qn,QR),e(QR,Rro),e(Qn,Pro),e(Qn,HR),e(HR,Bro),e(Qn,Iro),e(k,Nro),e(k,Hn),e(Hn,mae),e(mae,qro),e(Hn,jro),e(Hn,UR),e(UR,Dro),e(Hn,Gro),e(Hn,JR),e(JR,Oro),e(Hn,Vro),e(k,Xro),e(k,Ig),e(Ig,gae),e(gae,zro),e(Ig,Wro),e(Ig,YR),e(YR,Qro),e(Ig,Hro),e(k,Uro),e(k,Un),e(Un,hae),e(hae,Jro),e(Un,Yro),e(Un,KR),e(KR,Kro),e(Un,Zro),e(Un,ZR),e(ZR,eto),e(Un,oto),e(k,rto),e(k,Ng),e(Ng,pae),e(pae,tto),e(Ng,ato),e(Ng,eP),e(eP,nto),e(Ng,sto),e(k,lto),e(k,Jn),e(Jn,_ae),e(_ae,ito),e(Jn,dto),e(Jn,oP),e(oP,cto),e(Jn,fto),e(Jn,rP),e(rP,mto),e(Jn,gto),e(k,hto),e(k,Yn),e(Yn,uae),e(uae,pto),e(Yn,_to),e(Yn,tP),e(tP,uto),e(Yn,bto),e(Yn,aP),e(aP,vto),e(Yn,Fto),e(k,Tto),e(k,Kn),e(Kn,bae),e(bae,Mto),e(Kn,Eto),e(Kn,nP),e(nP,Cto),e(Kn,wto),e(Kn,sP),e(sP,Ato),e(Kn,yto),e(k,Lto),e(k,qg),e(qg,vae),e(vae,xto),e(qg,$to),e(qg,lP),e(lP,kto),e(qg,Sto),e(k,Rto),e(k,Zn),e(Zn,Fae),e(Fae,Pto),e(Zn,Bto),e(Zn,iP),e(iP,Ito),e(Zn,Nto),e(Zn,dP),e(dP,qto),e(Zn,jto),e(k,Dto),e(k,es),e(es,Tae),e(Tae,Gto),e(es,Oto),e(es,cP),e(cP,Vto),e(es,Xto),e(es,fP),e(fP,zto),e(es,Wto),e(k,Qto),e(k,jg),e(jg,Mae),e(Mae,Hto),e(jg,Uto),e(jg,mP),e(mP,Jto),e(jg,Yto),e(k,Kto),e(k,os),e(os,Eae),e(Eae,Zto),e(os,eao),e(os,gP),e(gP,oao),e(os,rao),e(os,hP),e(hP,tao),e(os,aao),e(k,nao),e(k,rs),e(rs,Cae),e(Cae,sao),e(rs,lao),e(rs,pP),e(pP,iao),e(rs,dao),e(rs,_P),e(_P,cao),e(rs,fao),e(k,mao),e(k,ts),e(ts,wae),e(wae,gao),e(ts,hao),e(ts,uP),e(uP,pao),e(ts,_ao),e(ts,bP),e(bP,uao),e(ts,bao),e(k,vao),e(k,as),e(as,Aae),e(Aae,Fao),e(as,Tao),e(as,vP),e(vP,Mao),e(as,Eao),e(as,FP),e(FP,Cao),e(as,wao),e(k,Aao),e(k,ns),e(ns,yae),e(yae,yao),e(ns,Lao),e(ns,TP),e(TP,xao),e(ns,$ao),e(ns,MP),e(MP,kao),e(ns,Sao),e(k,Rao),e(k,ss),e(ss,Lae),e(Lae,Pao),e(ss,Bao),e(ss,EP),e(EP,Iao),e(ss,Nao),e(ss,CP),e(CP,qao),e(ss,jao),e(k,Dao),e(k,ls),e(ls,xae),e(xae,Gao),e(ls,Oao),e(ls,wP),e(wP,Vao),e(ls,Xao),e(ls,AP),e(AP,zao),e(ls,Wao),e(k,Qao),e(k,is),e(is,$ae),e($ae,Hao),e(is,Uao),e(is,yP),e(yP,Jao),e(is,Yao),e(is,LP),e(LP,Kao),e(is,Zao),e(k,eno),e(k,Dg),e(Dg,kae),e(kae,ono),e(Dg,rno),e(Dg,xP),e(xP,tno),e(Dg,ano),e(k,nno),e(k,ds),e(ds,Sae),e(Sae,sno),e(ds,lno),e(ds,$P),e($P,ino),e(ds,dno),e(ds,kP),e(kP,cno),e(ds,fno),e(k,mno),e(k,Gg),e(Gg,Rae),e(Rae,gno),e(Gg,hno),e(Gg,SP),e(SP,pno),e(Gg,_no),e(k,uno),e(k,Og),e(Og,Pae),e(Pae,bno),e(Og,vno),e(Og,RP),e(RP,Fno),e(Og,Tno),e(k,Mno),e(k,cs),e(cs,Bae),e(Bae,Eno),e(cs,Cno),e(cs,PP),e(PP,wno),e(cs,Ano),e(cs,BP),e(BP,yno),e(cs,Lno),e(k,xno),e(k,fs),e(fs,Iae),e(Iae,$no),e(fs,kno),e(fs,IP),e(IP,Sno),e(fs,Rno),e(fs,NP),e(NP,Pno),e(fs,Bno),e(k,Ino),e(k,ms),e(ms,Nae),e(Nae,Nno),e(ms,qno),e(ms,qP),e(qP,jno),e(ms,Dno),e(ms,jP),e(jP,Gno),e(ms,Ono),e(k,Vno),e(k,Vg),e(Vg,qae),e(qae,Xno),e(Vg,zno),e(Vg,DP),e(DP,Wno),e(Vg,Qno),e(k,Hno),e(k,gs),e(gs,jae),e(jae,Uno),e(gs,Jno),e(gs,GP),e(GP,Yno),e(gs,Kno),e(gs,OP),e(OP,Zno),e(gs,eso),e(k,oso),e(k,hs),e(hs,Dae),e(Dae,rso),e(hs,tso),e(hs,VP),e(VP,aso),e(hs,nso),e(hs,XP),e(XP,sso),e(hs,lso),e(k,iso),e(k,ps),e(ps,Gae),e(Gae,dso),e(ps,cso),e(ps,zP),e(zP,fso),e(ps,mso),e(ps,WP),e(WP,gso),e(ps,hso),e(k,pso),e(k,_s),e(_s,Oae),e(Oae,_so),e(_s,uso),e(_s,QP),e(QP,bso),e(_s,vso),e(_s,HP),e(HP,Fso),e(_s,Tso),e(k,Mso),e(k,us),e(us,Vae),e(Vae,Eso),e(us,Cso),e(us,UP),e(UP,wso),e(us,Aso),e(us,JP),e(JP,yso),e(us,Lso),e(k,xso),e(k,Xg),e(Xg,Xae),e(Xae,$so),e(Xg,kso),e(Xg,YP),e(YP,Sso),e(Xg,Rso),e(k,Pso),e(k,bs),e(bs,zae),e(zae,Bso),e(bs,Iso),e(bs,KP),e(KP,Nso),e(bs,qso),e(bs,ZP),e(ZP,jso),e(bs,Dso),e(k,Gso),e(k,zg),e(zg,Wae),e(Wae,Oso),e(zg,Vso),e(zg,eB),e(eB,Xso),e(zg,zso),e(k,Wso),e(k,Wg),e(Wg,Qae),e(Qae,Qso),e(Wg,Hso),e(Wg,oB),e(oB,Uso),e(Wg,Jso),e(k,Yso),e(k,Qg),e(Qg,Hae),e(Hae,Kso),e(Qg,Zso),e(Qg,rB),e(rB,elo),e(Qg,olo),e(k,rlo),e(k,Hg),e(Hg,Uae),e(Uae,tlo),e(Hg,alo),e(Hg,tB),e(tB,nlo),e(Hg,slo),e(k,llo),e(k,vs),e(vs,Jae),e(Jae,ilo),e(vs,dlo),e(vs,aB),e(aB,clo),e(vs,flo),e(vs,nB),e(nB,mlo),e(vs,glo),e(k,hlo),e(k,Ug),e(Ug,Yae),e(Yae,plo),e(Ug,_lo),e(Ug,sB),e(sB,ulo),e(Ug,blo),e(k,vlo),e(k,Fs),e(Fs,Kae),e(Kae,Flo),e(Fs,Tlo),e(Fs,lB),e(lB,Mlo),e(Fs,Elo),e(Fs,iB),e(iB,Clo),e(Fs,wlo),e(k,Alo),e(k,Ts),e(Ts,Zae),e(Zae,ylo),e(Ts,Llo),e(Ts,dB),e(dB,xlo),e(Ts,$lo),e(Ts,cB),e(cB,klo),e(Ts,Slo),e(k,Rlo),e(k,Ms),e(Ms,ene),e(ene,Plo),e(Ms,Blo),e(Ms,fB),e(fB,Ilo),e(Ms,Nlo),e(Ms,mB),e(mB,qlo),e(Ms,jlo),e(k,Dlo),e(k,Es),e(Es,one),e(one,Glo),e(Es,Olo),e(Es,gB),e(gB,Vlo),e(Es,Xlo),e(Es,hB),e(hB,zlo),e(Es,Wlo),e(k,Qlo),e(k,Cs),e(Cs,rne),e(rne,Hlo),e(Cs,Ulo),e(Cs,pB),e(pB,Jlo),e(Cs,Ylo),e(Cs,_B),e(_B,Klo),e(Cs,Zlo),e(k,eio),e(k,ws),e(ws,tne),e(tne,oio),e(ws,rio),e(ws,uB),e(uB,tio),e(ws,aio),e(ws,bB),e(bB,nio),e(ws,sio),e(k,lio),e(k,Jg),e(Jg,ane),e(ane,iio),e(Jg,dio),e(Jg,vB),e(vB,cio),e(Jg,fio),e(k,mio),e(k,Yg),e(Yg,nne),e(nne,gio),e(Yg,hio),e(Yg,FB),e(FB,pio),e(Yg,_io),e(k,uio),e(k,As),e(As,sne),e(sne,bio),e(As,vio),e(As,TB),e(TB,Fio),e(As,Tio),e(As,MB),e(MB,Mio),e(As,Eio),e(k,Cio),e(k,ys),e(ys,lne),e(lne,wio),e(ys,Aio),e(ys,EB),e(EB,yio),e(ys,Lio),e(ys,CB),e(CB,xio),e(ys,$io),e(k,kio),e(k,Ls),e(Ls,ine),e(ine,Sio),e(Ls,Rio),e(Ls,wB),e(wB,Pio),e(Ls,Bio),e(Ls,AB),e(AB,Iio),e(Ls,Nio),e(k,qio),e(k,Kg),e(Kg,dne),e(dne,jio),e(Kg,Dio),e(Kg,yB),e(yB,Gio),e(Kg,Oio),e(k,Vio),e(k,Zg),e(Zg,cne),e(cne,Xio),e(Zg,zio),e(Zg,LB),e(LB,Wio),e(Zg,Qio),e(k,Hio),e(k,eh),e(eh,fne),e(fne,Uio),e(eh,Jio),e(eh,xB),e(xB,Yio),e(eh,Kio),e(k,Zio),e(k,xs),e(xs,mne),e(mne,edo),e(xs,odo),e(xs,$B),e($B,rdo),e(xs,tdo),e(xs,kB),e(kB,ado),e(xs,ndo),e(k,sdo),e(k,oh),e(oh,gne),e(gne,ldo),e(oh,ido),e(oh,SB),e(SB,ddo),e(oh,cdo),e(k,fdo),e(k,rh),e(rh,hne),e(hne,mdo),e(rh,gdo),e(rh,RB),e(RB,hdo),e(rh,pdo),e(k,_do),e(k,th),e(th,pne),e(pne,udo),e(th,bdo),e(th,PB),e(PB,vdo),e(th,Fdo),e(k,Tdo),e(k,$s),e($s,_ne),e(_ne,Mdo),e($s,Edo),e($s,BB),e(BB,Cdo),e($s,wdo),e($s,IB),e(IB,Ado),e($s,ydo),e(k,Ldo),e(k,ah),e(ah,une),e(une,xdo),e(ah,$do),e(ah,NB),e(NB,kdo),e(ah,Sdo),e(k,Rdo),e(k,nh),e(nh,bne),e(bne,Pdo),e(nh,Bdo),e(nh,qB),e(qB,Ido),e(nh,Ndo),e(k,qdo),e(k,ks),e(ks,vne),e(vne,jdo),e(ks,Ddo),e(ks,jB),e(jB,Gdo),e(ks,Odo),e(ks,DB),e(DB,Vdo),e(ks,Xdo),e(k,zdo),e(k,Ss),e(Ss,Fne),e(Fne,Wdo),e(Ss,Qdo),e(Ss,GB),e(GB,Hdo),e(Ss,Udo),e(Ss,OB),e(OB,Jdo),e(Ss,Ydo),e(k,Kdo),e(k,Rs),e(Rs,Tne),e(Tne,Zdo),e(Rs,eco),e(Rs,VB),e(VB,oco),e(Rs,rco),e(Rs,XB),e(XB,tco),e(Rs,aco),e(k,nco),e(k,Ps),e(Ps,Mne),e(Mne,sco),e(Ps,lco),e(Ps,zB),e(zB,ico),e(Ps,dco),e(Ps,WB),e(WB,cco),e(Ps,fco),e(Cr,mco),M(sh,Cr,null),e(wo,gco),e(wo,lh),M(Q0,lh,null),e(lh,hco),e(lh,Ene),e(Ene,pco),b(f,Iqe,u),b(f,Ei,u),e(Ei,ih),e(ih,Cne),M(H0,Cne,null),e(Ei,_co),e(Ei,wne),e(wne,uco),b(f,Nqe,u),b(f,Ao,u),M(U0,Ao,null),e(Ao,bco),e(Ao,J0),e(J0,vco),e(J0,QB),e(QB,Fco),e(J0,Tco),e(Ao,Mco),e(Ao,Y0),e(Y0,Eco),e(Y0,Ane),e(Ane,Cco),e(Y0,wco),e(Ao,Aco),e(Ao,He),M(K0,He,null),e(He,yco),e(He,yne),e(yne,Lco),e(He,xco),e(He,ya),e(ya,$co),e(ya,Lne),e(Lne,kco),e(ya,Sco),e(ya,xne),e(xne,Rco),e(ya,Pco),e(ya,$ne),e($ne,Bco),e(ya,Ico),e(He,Nco),e(He,Y),e(Y,dh),e(dh,kne),e(kne,qco),e(dh,jco),e(dh,HB),e(HB,Dco),e(dh,Gco),e(Y,Oco),e(Y,ch),e(ch,Sne),e(Sne,Vco),e(ch,Xco),e(ch,UB),e(UB,zco),e(ch,Wco),e(Y,Qco),e(Y,fh),e(fh,Rne),e(Rne,Hco),e(fh,Uco),e(fh,JB),e(JB,Jco),e(fh,Yco),e(Y,Kco),e(Y,mh),e(mh,Pne),e(Pne,Zco),e(mh,efo),e(mh,YB),e(YB,ofo),e(mh,rfo),e(Y,tfo),e(Y,gh),e(gh,Bne),e(Bne,afo),e(gh,nfo),e(gh,KB),e(KB,sfo),e(gh,lfo),e(Y,ifo),e(Y,hh),e(hh,Ine),e(Ine,dfo),e(hh,cfo),e(hh,ZB),e(ZB,ffo),e(hh,mfo),e(Y,gfo),e(Y,ph),e(ph,Nne),e(Nne,hfo),e(ph,pfo),e(ph,eI),e(eI,_fo),e(ph,ufo),e(Y,bfo),e(Y,_h),e(_h,qne),e(qne,vfo),e(_h,Ffo),e(_h,oI),e(oI,Tfo),e(_h,Mfo),e(Y,Efo),e(Y,uh),e(uh,jne),e(jne,Cfo),e(uh,wfo),e(uh,rI),e(rI,Afo),e(uh,yfo),e(Y,Lfo),e(Y,bh),e(bh,Dne),e(Dne,xfo),e(bh,$fo),e(bh,tI),e(tI,kfo),e(bh,Sfo),e(Y,Rfo),e(Y,vh),e(vh,Gne),e(Gne,Pfo),e(vh,Bfo),e(vh,aI),e(aI,Ifo),e(vh,Nfo),e(Y,qfo),e(Y,Fh),e(Fh,One),e(One,jfo),e(Fh,Dfo),e(Fh,nI),e(nI,Gfo),e(Fh,Ofo),e(Y,Vfo),e(Y,Th),e(Th,Vne),e(Vne,Xfo),e(Th,zfo),e(Th,sI),e(sI,Wfo),e(Th,Qfo),e(Y,Hfo),e(Y,Mh),e(Mh,Xne),e(Xne,Ufo),e(Mh,Jfo),e(Mh,lI),e(lI,Yfo),e(Mh,Kfo),e(Y,Zfo),e(Y,Eh),e(Eh,zne),e(zne,emo),e(Eh,omo),e(Eh,iI),e(iI,rmo),e(Eh,tmo),e(Y,amo),e(Y,Ch),e(Ch,Wne),e(Wne,nmo),e(Ch,smo),e(Ch,dI),e(dI,lmo),e(Ch,imo),e(Y,dmo),e(Y,wh),e(wh,Qne),e(Qne,cmo),e(wh,fmo),e(wh,cI),e(cI,mmo),e(wh,gmo),e(Y,hmo),e(Y,Ah),e(Ah,Hne),e(Hne,pmo),e(Ah,_mo),e(Ah,fI),e(fI,umo),e(Ah,bmo),e(Y,vmo),e(Y,yh),e(yh,Une),e(Une,Fmo),e(yh,Tmo),e(yh,mI),e(mI,Mmo),e(yh,Emo),e(Y,Cmo),e(Y,Lh),e(Lh,Jne),e(Jne,wmo),e(Lh,Amo),e(Lh,gI),e(gI,ymo),e(Lh,Lmo),e(Y,xmo),e(Y,xh),e(xh,Yne),e(Yne,$mo),e(xh,kmo),e(xh,hI),e(hI,Smo),e(xh,Rmo),e(Y,Pmo),e(Y,$h),e($h,Kne),e(Kne,Bmo),e($h,Imo),e($h,pI),e(pI,Nmo),e($h,qmo),e(Y,jmo),e(Y,kh),e(kh,Zne),e(Zne,Dmo),e(kh,Gmo),e(kh,_I),e(_I,Omo),e(kh,Vmo),e(Y,Xmo),e(Y,Sh),e(Sh,ese),e(ese,zmo),e(Sh,Wmo),e(Sh,uI),e(uI,Qmo),e(Sh,Hmo),e(Y,Umo),e(Y,Rh),e(Rh,ose),e(ose,Jmo),e(Rh,Ymo),e(Rh,bI),e(bI,Kmo),e(Rh,Zmo),e(Y,ego),e(Y,Ph),e(Ph,rse),e(rse,ogo),e(Ph,rgo),e(Ph,vI),e(vI,tgo),e(Ph,ago),e(Y,ngo),e(Y,Bh),e(Bh,tse),e(tse,sgo),e(Bh,lgo),e(Bh,FI),e(FI,igo),e(Bh,dgo),e(Y,cgo),e(Y,Ih),e(Ih,ase),e(ase,fgo),e(Ih,mgo),e(Ih,TI),e(TI,ggo),e(Ih,hgo),e(Y,pgo),e(Y,Nh),e(Nh,nse),e(nse,_go),e(Nh,ugo),e(Nh,MI),e(MI,bgo),e(Nh,vgo),e(He,Fgo),M(qh,He,null),e(He,Tgo),M(jh,He,null),e(Ao,Mgo),e(Ao,Dh),M(Z0,Dh,null),e(Dh,Ego),e(Dh,sse),e(sse,Cgo),b(f,qqe,u),b(f,Ci,u),e(Ci,Gh),e(Gh,lse),M(eA,lse,null),e(Ci,wgo),e(Ci,ise),e(ise,Ago),b(f,jqe,u),b(f,yo,u),M(oA,yo,null),e(yo,ygo),e(yo,rA),e(rA,Lgo),e(rA,EI),e(EI,xgo),e(rA,$go),e(yo,kgo),e(yo,tA),e(tA,Sgo),e(tA,dse),e(dse,Rgo),e(tA,Pgo),e(yo,Bgo),e(yo,Ue),M(aA,Ue,null),e(Ue,Igo),e(Ue,cse),e(cse,Ngo),e(Ue,qgo),e(Ue,wi),e(wi,jgo),e(wi,fse),e(fse,Dgo),e(wi,Ggo),e(wi,mse),e(mse,Ogo),e(wi,Vgo),e(Ue,Xgo),e(Ue,he),e(he,Oh),e(Oh,gse),e(gse,zgo),e(Oh,Wgo),e(Oh,CI),e(CI,Qgo),e(Oh,Hgo),e(he,Ugo),e(he,Vh),e(Vh,hse),e(hse,Jgo),e(Vh,Ygo),e(Vh,pse),e(pse,Kgo),e(Vh,Zgo),e(he,eho),e(he,Xh),e(Xh,_se),e(_se,oho),e(Xh,rho),e(Xh,wI),e(wI,tho),e(Xh,aho),e(he,nho),e(he,zh),e(zh,use),e(use,sho),e(zh,lho),e(zh,AI),e(AI,iho),e(zh,dho),e(he,cho),e(he,Wh),e(Wh,bse),e(bse,fho),e(Wh,mho),e(Wh,yI),e(yI,gho),e(Wh,hho),e(he,pho),e(he,Qh),e(Qh,vse),e(vse,_ho),e(Qh,uho),e(Qh,LI),e(LI,bho),e(Qh,vho),e(he,Fho),e(he,Hh),e(Hh,Fse),e(Fse,Tho),e(Hh,Mho),e(Hh,xI),e(xI,Eho),e(Hh,Cho),e(he,who),e(he,Uh),e(Uh,Tse),e(Tse,Aho),e(Uh,yho),e(Uh,$I),e($I,Lho),e(Uh,xho),e(he,$ho),e(he,Jh),e(Jh,Mse),e(Mse,kho),e(Jh,Sho),e(Jh,kI),e(kI,Rho),e(Jh,Pho),e(he,Bho),e(he,Yh),e(Yh,Ese),e(Ese,Iho),e(Yh,Nho),e(Yh,SI),e(SI,qho),e(Yh,jho),e(he,Dho),e(he,Kh),e(Kh,Cse),e(Cse,Gho),e(Kh,Oho),e(Kh,RI),e(RI,Vho),e(Kh,Xho),e(he,zho),e(he,Zh),e(Zh,wse),e(wse,Who),e(Zh,Qho),e(Zh,PI),e(PI,Hho),e(Zh,Uho),e(he,Jho),e(he,ep),e(ep,Ase),e(Ase,Yho),e(ep,Kho),e(ep,BI),e(BI,Zho),e(ep,epo),e(he,opo),e(he,op),e(op,yse),e(yse,rpo),e(op,tpo),e(op,II),e(II,apo),e(op,npo),e(he,spo),e(he,rp),e(rp,Lse),e(Lse,lpo),e(rp,ipo),e(rp,NI),e(NI,dpo),e(rp,cpo),e(he,fpo),e(he,tp),e(tp,xse),e(xse,mpo),e(tp,gpo),e(tp,qI),e(qI,hpo),e(tp,ppo),e(he,_po),e(he,ap),e(ap,$se),e($se,upo),e(ap,bpo),e(ap,jI),e(jI,vpo),e(ap,Fpo),e(Ue,Tpo),M(np,Ue,null),e(Ue,Mpo),M(sp,Ue,null),e(yo,Epo),e(yo,lp),M(nA,lp,null),e(lp,Cpo),e(lp,kse),e(kse,wpo),b(f,Dqe,u),b(f,Ai,u),e(Ai,ip),e(ip,Sse),M(sA,Sse,null),e(Ai,Apo),e(Ai,Rse),e(Rse,ypo),b(f,Gqe,u),b(f,Lo,u),M(lA,Lo,null),e(Lo,Lpo),e(Lo,yi),e(yi,xpo),e(yi,DI),e(DI,$po),e(yi,kpo),e(yi,GI),e(GI,Spo),e(yi,Rpo),e(Lo,Ppo),e(Lo,iA),e(iA,Bpo),e(iA,Pse),e(Pse,Ipo),e(iA,Npo),e(Lo,qpo),e(Lo,tt),M(dA,tt,null),e(tt,jpo),e(tt,Bse),e(Bse,Dpo),e(tt,Gpo),e(tt,Li),e(Li,Opo),e(Li,Ise),e(Ise,Vpo),e(Li,Xpo),e(Li,OI),e(OI,zpo),e(Li,Wpo),e(tt,Qpo),M(dp,tt,null),e(Lo,Hpo),e(Lo,Je),M(cA,Je,null),e(Je,Upo),e(Je,Nse),e(Nse,Jpo),e(Je,Ypo),e(Je,La),e(La,Kpo),e(La,qse),e(qse,Zpo),e(La,e_o),e(La,jse),e(jse,o_o),e(La,r_o),e(La,Dse),e(Dse,t_o),e(La,a_o),e(Je,n_o),e(Je,x),e(x,cp),e(cp,Gse),e(Gse,s_o),e(cp,l_o),e(cp,VI),e(VI,i_o),e(cp,d_o),e(x,c_o),e(x,fp),e(fp,Ose),e(Ose,f_o),e(fp,m_o),e(fp,XI),e(XI,g_o),e(fp,h_o),e(x,p_o),e(x,mp),e(mp,Vse),e(Vse,__o),e(mp,u_o),e(mp,zI),e(zI,b_o),e(mp,v_o),e(x,F_o),e(x,gp),e(gp,Xse),e(Xse,T_o),e(gp,M_o),e(gp,WI),e(WI,E_o),e(gp,C_o),e(x,w_o),e(x,hp),e(hp,zse),e(zse,A_o),e(hp,y_o),e(hp,QI),e(QI,L_o),e(hp,x_o),e(x,$_o),e(x,pp),e(pp,Wse),e(Wse,k_o),e(pp,S_o),e(pp,HI),e(HI,R_o),e(pp,P_o),e(x,B_o),e(x,_p),e(_p,Qse),e(Qse,I_o),e(_p,N_o),e(_p,UI),e(UI,q_o),e(_p,j_o),e(x,D_o),e(x,up),e(up,Hse),e(Hse,G_o),e(up,O_o),e(up,JI),e(JI,V_o),e(up,X_o),e(x,z_o),e(x,bp),e(bp,Use),e(Use,W_o),e(bp,Q_o),e(bp,YI),e(YI,H_o),e(bp,U_o),e(x,J_o),e(x,vp),e(vp,Jse),e(Jse,Y_o),e(vp,K_o),e(vp,KI),e(KI,Z_o),e(vp,euo),e(x,ouo),e(x,Fp),e(Fp,Yse),e(Yse,ruo),e(Fp,tuo),e(Fp,ZI),e(ZI,auo),e(Fp,nuo),e(x,suo),e(x,Tp),e(Tp,Kse),e(Kse,luo),e(Tp,iuo),e(Tp,eN),e(eN,duo),e(Tp,cuo),e(x,fuo),e(x,Mp),e(Mp,Zse),e(Zse,muo),e(Mp,guo),e(Mp,oN),e(oN,huo),e(Mp,puo),e(x,_uo),e(x,Ep),e(Ep,ele),e(ele,uuo),e(Ep,buo),e(Ep,rN),e(rN,vuo),e(Ep,Fuo),e(x,Tuo),e(x,Cp),e(Cp,ole),e(ole,Muo),e(Cp,Euo),e(Cp,tN),e(tN,Cuo),e(Cp,wuo),e(x,Auo),e(x,wp),e(wp,rle),e(rle,yuo),e(wp,Luo),e(wp,aN),e(aN,xuo),e(wp,$uo),e(x,kuo),e(x,Ap),e(Ap,tle),e(tle,Suo),e(Ap,Ruo),e(Ap,nN),e(nN,Puo),e(Ap,Buo),e(x,Iuo),e(x,yp),e(yp,ale),e(ale,Nuo),e(yp,quo),e(yp,sN),e(sN,juo),e(yp,Duo),e(x,Guo),e(x,Lp),e(Lp,nle),e(nle,Ouo),e(Lp,Vuo),e(Lp,lN),e(lN,Xuo),e(Lp,zuo),e(x,Wuo),e(x,xp),e(xp,sle),e(sle,Quo),e(xp,Huo),e(xp,iN),e(iN,Uuo),e(xp,Juo),e(x,Yuo),e(x,$p),e($p,lle),e(lle,Kuo),e($p,Zuo),e($p,dN),e(dN,e2o),e($p,o2o),e(x,r2o),e(x,kp),e(kp,ile),e(ile,t2o),e(kp,a2o),e(kp,cN),e(cN,n2o),e(kp,s2o),e(x,l2o),e(x,Sp),e(Sp,dle),e(dle,i2o),e(Sp,d2o),e(Sp,fN),e(fN,c2o),e(Sp,f2o),e(x,m2o),e(x,Rp),e(Rp,cle),e(cle,g2o),e(Rp,h2o),e(Rp,mN),e(mN,p2o),e(Rp,_2o),e(x,u2o),e(x,Pp),e(Pp,fle),e(fle,b2o),e(Pp,v2o),e(Pp,gN),e(gN,F2o),e(Pp,T2o),e(x,M2o),e(x,Bp),e(Bp,mle),e(mle,E2o),e(Bp,C2o),e(Bp,hN),e(hN,w2o),e(Bp,A2o),e(x,y2o),e(x,Ip),e(Ip,gle),e(gle,L2o),e(Ip,x2o),e(Ip,pN),e(pN,$2o),e(Ip,k2o),e(x,S2o),e(x,Np),e(Np,hle),e(hle,R2o),e(Np,P2o),e(Np,_N),e(_N,B2o),e(Np,I2o),e(x,N2o),e(x,qp),e(qp,ple),e(ple,q2o),e(qp,j2o),e(qp,uN),e(uN,D2o),e(qp,G2o),e(x,O2o),e(x,jp),e(jp,_le),e(_le,V2o),e(jp,X2o),e(jp,bN),e(bN,z2o),e(jp,W2o),e(x,Q2o),e(x,Dp),e(Dp,ule),e(ule,H2o),e(Dp,U2o),e(Dp,vN),e(vN,J2o),e(Dp,Y2o),e(x,K2o),e(x,Gp),e(Gp,ble),e(ble,Z2o),e(Gp,e1o),e(Gp,FN),e(FN,o1o),e(Gp,r1o),e(x,t1o),e(x,Bs),e(Bs,vle),e(vle,a1o),e(Bs,n1o),e(Bs,TN),e(TN,s1o),e(Bs,l1o),e(Bs,MN),e(MN,i1o),e(Bs,d1o),e(x,c1o),e(x,Op),e(Op,Fle),e(Fle,f1o),e(Op,m1o),e(Op,EN),e(EN,g1o),e(Op,h1o),e(x,p1o),e(x,Vp),e(Vp,Tle),e(Tle,_1o),e(Vp,u1o),e(Vp,CN),e(CN,b1o),e(Vp,v1o),e(x,F1o),e(x,Xp),e(Xp,Mle),e(Mle,T1o),e(Xp,M1o),e(Xp,wN),e(wN,E1o),e(Xp,C1o),e(x,w1o),e(x,zp),e(zp,Ele),e(Ele,A1o),e(zp,y1o),e(zp,AN),e(AN,L1o),e(zp,x1o),e(x,$1o),e(x,Wp),e(Wp,Cle),e(Cle,k1o),e(Wp,S1o),e(Wp,yN),e(yN,R1o),e(Wp,P1o),e(x,B1o),e(x,Qp),e(Qp,wle),e(wle,I1o),e(Qp,N1o),e(Qp,LN),e(LN,q1o),e(Qp,j1o),e(x,D1o),e(x,Hp),e(Hp,Ale),e(Ale,G1o),e(Hp,O1o),e(Hp,xN),e(xN,V1o),e(Hp,X1o),e(x,z1o),e(x,Up),e(Up,yle),e(yle,W1o),e(Up,Q1o),e(Up,$N),e($N,H1o),e(Up,U1o),e(x,J1o),e(x,Jp),e(Jp,Lle),e(Lle,Y1o),e(Jp,K1o),e(Jp,kN),e(kN,Z1o),e(Jp,ebo),e(x,obo),e(x,Yp),e(Yp,xle),e(xle,rbo),e(Yp,tbo),e(Yp,SN),e(SN,abo),e(Yp,nbo),e(x,sbo),e(x,Kp),e(Kp,$le),e($le,lbo),e(Kp,ibo),e(Kp,RN),e(RN,dbo),e(Kp,cbo),e(x,fbo),e(x,Zp),e(Zp,kle),e(kle,mbo),e(Zp,gbo),e(Zp,PN),e(PN,hbo),e(Zp,pbo),e(x,_bo),e(x,e_),e(e_,Sle),e(Sle,ubo),e(e_,bbo),e(e_,BN),e(BN,vbo),e(e_,Fbo),e(x,Tbo),e(x,o_),e(o_,Rle),e(Rle,Mbo),e(o_,Ebo),e(o_,IN),e(IN,Cbo),e(o_,wbo),e(x,Abo),e(x,r_),e(r_,Ple),e(Ple,ybo),e(r_,Lbo),e(r_,NN),e(NN,xbo),e(r_,$bo),e(x,kbo),e(x,t_),e(t_,Ble),e(Ble,Sbo),e(t_,Rbo),e(t_,qN),e(qN,Pbo),e(t_,Bbo),e(x,Ibo),e(x,a_),e(a_,Ile),e(Ile,Nbo),e(a_,qbo),e(a_,jN),e(jN,jbo),e(a_,Dbo),e(x,Gbo),e(x,n_),e(n_,Nle),e(Nle,Obo),e(n_,Vbo),e(n_,DN),e(DN,Xbo),e(n_,zbo),e(x,Wbo),e(x,s_),e(s_,qle),e(qle,Qbo),e(s_,Hbo),e(s_,GN),e(GN,Ubo),e(s_,Jbo),e(x,Ybo),e(x,l_),e(l_,jle),e(jle,Kbo),e(l_,Zbo),e(l_,ON),e(ON,evo),e(l_,ovo),e(x,rvo),e(x,i_),e(i_,Dle),e(Dle,tvo),e(i_,avo),e(i_,VN),e(VN,nvo),e(i_,svo),e(x,lvo),e(x,d_),e(d_,Gle),e(Gle,ivo),e(d_,dvo),e(d_,XN),e(XN,cvo),e(d_,fvo),e(x,mvo),e(x,c_),e(c_,Ole),e(Ole,gvo),e(c_,hvo),e(c_,zN),e(zN,pvo),e(c_,_vo),e(x,uvo),e(x,f_),e(f_,Vle),e(Vle,bvo),e(f_,vvo),e(f_,WN),e(WN,Fvo),e(f_,Tvo),e(x,Mvo),e(x,m_),e(m_,Xle),e(Xle,Evo),e(m_,Cvo),e(m_,QN),e(QN,wvo),e(m_,Avo),e(x,yvo),e(x,g_),e(g_,zle),e(zle,Lvo),e(g_,xvo),e(g_,HN),e(HN,$vo),e(g_,kvo),e(x,Svo),e(x,h_),e(h_,Wle),e(Wle,Rvo),e(h_,Pvo),e(h_,UN),e(UN,Bvo),e(h_,Ivo),e(x,Nvo),e(x,p_),e(p_,Qle),e(Qle,qvo),e(p_,jvo),e(p_,JN),e(JN,Dvo),e(p_,Gvo),e(x,Ovo),e(x,__),e(__,Hle),e(Hle,Vvo),e(__,Xvo),e(__,YN),e(YN,zvo),e(__,Wvo),e(x,Qvo),e(x,u_),e(u_,Ule),e(Ule,Hvo),e(u_,Uvo),e(u_,KN),e(KN,Jvo),e(u_,Yvo),e(x,Kvo),e(x,b_),e(b_,Jle),e(Jle,Zvo),e(b_,eFo),e(b_,ZN),e(ZN,oFo),e(b_,rFo),e(x,tFo),e(x,v_),e(v_,Yle),e(Yle,aFo),e(v_,nFo),e(v_,eq),e(eq,sFo),e(v_,lFo),e(x,iFo),e(x,F_),e(F_,Kle),e(Kle,dFo),e(F_,cFo),e(F_,oq),e(oq,fFo),e(F_,mFo),e(x,gFo),e(x,T_),e(T_,Zle),e(Zle,hFo),e(T_,pFo),e(T_,rq),e(rq,_Fo),e(T_,uFo),e(x,bFo),e(x,M_),e(M_,eie),e(eie,vFo),e(M_,FFo),e(M_,tq),e(tq,TFo),e(M_,MFo),e(x,EFo),e(x,E_),e(E_,oie),e(oie,CFo),e(E_,wFo),e(E_,aq),e(aq,AFo),e(E_,yFo),e(x,LFo),e(x,C_),e(C_,rie),e(rie,xFo),e(C_,$Fo),e(C_,nq),e(nq,kFo),e(C_,SFo),e(x,RFo),e(x,w_),e(w_,tie),e(tie,PFo),e(w_,BFo),e(w_,sq),e(sq,IFo),e(w_,NFo),e(x,qFo),e(x,A_),e(A_,aie),e(aie,jFo),e(A_,DFo),e(A_,lq),e(lq,GFo),e(A_,OFo),e(x,VFo),e(x,y_),e(y_,nie),e(nie,XFo),e(y_,zFo),e(y_,iq),e(iq,WFo),e(y_,QFo),e(x,HFo),e(x,L_),e(L_,sie),e(sie,UFo),e(L_,JFo),e(L_,dq),e(dq,YFo),e(L_,KFo),e(x,ZFo),e(x,x_),e(x_,lie),e(lie,e6o),e(x_,o6o),e(x_,cq),e(cq,r6o),e(x_,t6o),e(x,a6o),e(x,$_),e($_,iie),e(iie,n6o),e($_,s6o),e($_,fq),e(fq,l6o),e($_,i6o),e(x,d6o),e(x,k_),e(k_,die),e(die,c6o),e(k_,f6o),e(k_,mq),e(mq,m6o),e(k_,g6o),e(x,h6o),e(x,S_),e(S_,cie),e(cie,p6o),e(S_,_6o),e(S_,gq),e(gq,u6o),e(S_,b6o),e(x,v6o),e(x,R_),e(R_,fie),e(fie,F6o),e(R_,T6o),e(R_,hq),e(hq,M6o),e(R_,E6o),e(x,C6o),e(x,P_),e(P_,mie),e(mie,w6o),e(P_,A6o),e(P_,pq),e(pq,y6o),e(P_,L6o),e(x,x6o),e(x,B_),e(B_,gie),e(gie,$6o),e(B_,k6o),e(B_,_q),e(_q,S6o),e(B_,R6o),e(x,P6o),e(x,I_),e(I_,hie),e(hie,B6o),e(I_,I6o),e(I_,uq),e(uq,N6o),e(I_,q6o),e(x,j6o),e(x,N_),e(N_,pie),e(pie,D6o),e(N_,G6o),e(N_,bq),e(bq,O6o),e(N_,V6o),e(x,X6o),e(x,q_),e(q_,_ie),e(_ie,z6o),e(q_,W6o),e(q_,vq),e(vq,Q6o),e(q_,H6o),e(x,U6o),e(x,j_),e(j_,uie),e(uie,J6o),e(j_,Y6o),e(j_,Fq),e(Fq,K6o),e(j_,Z6o),e(x,eTo),e(x,D_),e(D_,bie),e(bie,oTo),e(D_,rTo),e(D_,Tq),e(Tq,tTo),e(D_,aTo),e(x,nTo),e(x,G_),e(G_,vie),e(vie,sTo),e(G_,lTo),e(G_,Mq),e(Mq,iTo),e(G_,dTo),e(x,cTo),e(x,O_),e(O_,Fie),e(Fie,fTo),e(O_,mTo),e(O_,Eq),e(Eq,gTo),e(O_,hTo),e(x,pTo),e(x,V_),e(V_,Tie),e(Tie,_To),e(V_,uTo),e(V_,Cq),e(Cq,bTo),e(V_,vTo),e(x,FTo),e(x,X_),e(X_,Mie),e(Mie,TTo),e(X_,MTo),e(X_,wq),e(wq,ETo),e(X_,CTo),e(x,wTo),e(x,z_),e(z_,Eie),e(Eie,ATo),e(z_,yTo),e(z_,Aq),e(Aq,LTo),e(z_,xTo),e(x,$To),e(x,W_),e(W_,Cie),e(Cie,kTo),e(W_,STo),e(W_,yq),e(yq,RTo),e(W_,PTo),e(x,BTo),e(x,Q_),e(Q_,wie),e(wie,ITo),e(Q_,NTo),e(Q_,Lq),e(Lq,qTo),e(Q_,jTo),e(x,DTo),e(x,H_),e(H_,Aie),e(Aie,GTo),e(H_,OTo),e(H_,xq),e(xq,VTo),e(H_,XTo),e(x,zTo),e(x,U_),e(U_,yie),e(yie,WTo),e(U_,QTo),e(U_,$q),e($q,HTo),e(U_,UTo),e(x,JTo),e(x,J_),e(J_,Lie),e(Lie,YTo),e(J_,KTo),e(J_,kq),e(kq,ZTo),e(J_,e7o),e(x,o7o),e(x,Y_),e(Y_,xie),e(xie,r7o),e(Y_,t7o),e(Y_,Sq),e(Sq,a7o),e(Y_,n7o),e(x,s7o),e(x,K_),e(K_,$ie),e($ie,l7o),e(K_,i7o),e(K_,Rq),e(Rq,d7o),e(K_,c7o),e(x,f7o),e(x,Z_),e(Z_,kie),e(kie,m7o),e(Z_,g7o),e(Z_,Pq),e(Pq,h7o),e(Z_,p7o),e(x,_7o),e(x,eu),e(eu,Sie),e(Sie,u7o),e(eu,b7o),e(eu,Bq),e(Bq,v7o),e(eu,F7o),e(x,T7o),e(x,ou),e(ou,Rie),e(Rie,M7o),e(ou,E7o),e(ou,Iq),e(Iq,C7o),e(ou,w7o),e(x,A7o),e(x,ru),e(ru,Pie),e(Pie,y7o),e(ru,L7o),e(ru,Nq),e(Nq,x7o),e(ru,$7o),e(x,k7o),e(x,tu),e(tu,Bie),e(Bie,S7o),e(tu,R7o),e(tu,qq),e(qq,P7o),e(tu,B7o),e(Je,I7o),e(Je,au),e(au,N7o),e(au,Iie),e(Iie,q7o),e(au,j7o),e(au,Nie),e(Nie,D7o),e(Je,G7o),M(nu,Je,null),b(f,Oqe,u),b(f,xi,u),e(xi,su),e(su,qie),M(fA,qie,null),e(xi,O7o),e(xi,jie),e(jie,V7o),b(f,Vqe,u),b(f,xo,u),M(mA,xo,null),e(xo,X7o),e(xo,$i),e($i,z7o),e($i,jq),e(jq,W7o),e($i,Q7o),e($i,Dq),e(Dq,H7o),e($i,U7o),e(xo,J7o),e(xo,gA),e(gA,Y7o),e(gA,Die),e(Die,K7o),e(gA,Z7o),e(xo,e9o),e(xo,at),M(hA,at,null),e(at,o9o),e(at,Gie),e(Gie,r9o),e(at,t9o),e(at,ki),e(ki,a9o),e(ki,Oie),e(Oie,n9o),e(ki,s9o),e(ki,Gq),e(Gq,l9o),e(ki,i9o),e(at,d9o),M(lu,at,null),e(xo,c9o),e(xo,Ye),M(pA,Ye,null),e(Ye,f9o),e(Ye,Vie),e(Vie,m9o),e(Ye,g9o),e(Ye,xa),e(xa,h9o),e(xa,Xie),e(Xie,p9o),e(xa,_9o),e(xa,zie),e(zie,u9o),e(xa,b9o),e(xa,Wie),e(Wie,v9o),e(xa,F9o),e(Ye,T9o),e(Ye,G),e(G,iu),e(iu,Qie),e(Qie,M9o),e(iu,E9o),e(iu,Oq),e(Oq,C9o),e(iu,w9o),e(G,A9o),e(G,du),e(du,Hie),e(Hie,y9o),e(du,L9o),e(du,Vq),e(Vq,x9o),e(du,$9o),e(G,k9o),e(G,cu),e(cu,Uie),e(Uie,S9o),e(cu,R9o),e(cu,Xq),e(Xq,P9o),e(cu,B9o),e(G,I9o),e(G,fu),e(fu,Jie),e(Jie,N9o),e(fu,q9o),e(fu,zq),e(zq,j9o),e(fu,D9o),e(G,G9o),e(G,mu),e(mu,Yie),e(Yie,O9o),e(mu,V9o),e(mu,Wq),e(Wq,X9o),e(mu,z9o),e(G,W9o),e(G,gu),e(gu,Kie),e(Kie,Q9o),e(gu,H9o),e(gu,Qq),e(Qq,U9o),e(gu,J9o),e(G,Y9o),e(G,hu),e(hu,Zie),e(Zie,K9o),e(hu,Z9o),e(hu,Hq),e(Hq,eMo),e(hu,oMo),e(G,rMo),e(G,pu),e(pu,ede),e(ede,tMo),e(pu,aMo),e(pu,Uq),e(Uq,nMo),e(pu,sMo),e(G,lMo),e(G,_u),e(_u,ode),e(ode,iMo),e(_u,dMo),e(_u,Jq),e(Jq,cMo),e(_u,fMo),e(G,mMo),e(G,uu),e(uu,rde),e(rde,gMo),e(uu,hMo),e(uu,Yq),e(Yq,pMo),e(uu,_Mo),e(G,uMo),e(G,bu),e(bu,tde),e(tde,bMo),e(bu,vMo),e(bu,Kq),e(Kq,FMo),e(bu,TMo),e(G,MMo),e(G,vu),e(vu,ade),e(ade,EMo),e(vu,CMo),e(vu,Zq),e(Zq,wMo),e(vu,AMo),e(G,yMo),e(G,Fu),e(Fu,nde),e(nde,LMo),e(Fu,xMo),e(Fu,ej),e(ej,$Mo),e(Fu,kMo),e(G,SMo),e(G,Tu),e(Tu,sde),e(sde,RMo),e(Tu,PMo),e(Tu,oj),e(oj,BMo),e(Tu,IMo),e(G,NMo),e(G,Mu),e(Mu,lde),e(lde,qMo),e(Mu,jMo),e(Mu,rj),e(rj,DMo),e(Mu,GMo),e(G,OMo),e(G,Eu),e(Eu,ide),e(ide,VMo),e(Eu,XMo),e(Eu,tj),e(tj,zMo),e(Eu,WMo),e(G,QMo),e(G,Cu),e(Cu,dde),e(dde,HMo),e(Cu,UMo),e(Cu,aj),e(aj,JMo),e(Cu,YMo),e(G,KMo),e(G,wu),e(wu,cde),e(cde,ZMo),e(wu,e4o),e(wu,nj),e(nj,o4o),e(wu,r4o),e(G,t4o),e(G,Au),e(Au,fde),e(fde,a4o),e(Au,n4o),e(Au,sj),e(sj,s4o),e(Au,l4o),e(G,i4o),e(G,yu),e(yu,mde),e(mde,d4o),e(yu,c4o),e(yu,lj),e(lj,f4o),e(yu,m4o),e(G,g4o),e(G,Lu),e(Lu,gde),e(gde,h4o),e(Lu,p4o),e(Lu,ij),e(ij,_4o),e(Lu,u4o),e(G,b4o),e(G,xu),e(xu,hde),e(hde,v4o),e(xu,F4o),e(xu,dj),e(dj,T4o),e(xu,M4o),e(G,E4o),e(G,$u),e($u,pde),e(pde,C4o),e($u,w4o),e($u,cj),e(cj,A4o),e($u,y4o),e(G,L4o),e(G,ku),e(ku,_de),e(_de,x4o),e(ku,$4o),e(ku,fj),e(fj,k4o),e(ku,S4o),e(G,R4o),e(G,Su),e(Su,ude),e(ude,P4o),e(Su,B4o),e(Su,mj),e(mj,I4o),e(Su,N4o),e(G,q4o),e(G,Ru),e(Ru,bde),e(bde,j4o),e(Ru,D4o),e(Ru,gj),e(gj,G4o),e(Ru,O4o),e(G,V4o),e(G,Pu),e(Pu,vde),e(vde,X4o),e(Pu,z4o),e(Pu,hj),e(hj,W4o),e(Pu,Q4o),e(G,H4o),e(G,Bu),e(Bu,Fde),e(Fde,U4o),e(Bu,J4o),e(Bu,pj),e(pj,Y4o),e(Bu,K4o),e(G,Z4o),e(G,Iu),e(Iu,Tde),e(Tde,eEo),e(Iu,oEo),e(Iu,_j),e(_j,rEo),e(Iu,tEo),e(G,aEo),e(G,Nu),e(Nu,Mde),e(Mde,nEo),e(Nu,sEo),e(Nu,uj),e(uj,lEo),e(Nu,iEo),e(G,dEo),e(G,qu),e(qu,Ede),e(Ede,cEo),e(qu,fEo),e(qu,bj),e(bj,mEo),e(qu,gEo),e(G,hEo),e(G,ju),e(ju,Cde),e(Cde,pEo),e(ju,_Eo),e(ju,vj),e(vj,uEo),e(ju,bEo),e(G,vEo),e(G,Du),e(Du,wde),e(wde,FEo),e(Du,TEo),e(Du,Fj),e(Fj,MEo),e(Du,EEo),e(G,CEo),e(G,Gu),e(Gu,Ade),e(Ade,wEo),e(Gu,AEo),e(Gu,Tj),e(Tj,yEo),e(Gu,LEo),e(G,xEo),e(G,Ou),e(Ou,yde),e(yde,$Eo),e(Ou,kEo),e(Ou,Mj),e(Mj,SEo),e(Ou,REo),e(G,PEo),e(G,Vu),e(Vu,Lde),e(Lde,BEo),e(Vu,IEo),e(Vu,Ej),e(Ej,NEo),e(Vu,qEo),e(G,jEo),e(G,Xu),e(Xu,xde),e(xde,DEo),e(Xu,GEo),e(Xu,Cj),e(Cj,OEo),e(Xu,VEo),e(G,XEo),e(G,zu),e(zu,$de),e($de,zEo),e(zu,WEo),e(zu,wj),e(wj,QEo),e(zu,HEo),e(G,UEo),e(G,Wu),e(Wu,kde),e(kde,JEo),e(Wu,YEo),e(Wu,Aj),e(Aj,KEo),e(Wu,ZEo),e(G,eCo),e(G,Qu),e(Qu,Sde),e(Sde,oCo),e(Qu,rCo),e(Qu,yj),e(yj,tCo),e(Qu,aCo),e(G,nCo),e(G,Hu),e(Hu,Rde),e(Rde,sCo),e(Hu,lCo),e(Hu,Lj),e(Lj,iCo),e(Hu,dCo),e(G,cCo),e(G,Uu),e(Uu,Pde),e(Pde,fCo),e(Uu,mCo),e(Uu,xj),e(xj,gCo),e(Uu,hCo),e(Ye,pCo),e(Ye,Ju),e(Ju,_Co),e(Ju,Bde),e(Bde,uCo),e(Ju,bCo),e(Ju,Ide),e(Ide,vCo),e(Ye,FCo),M(Yu,Ye,null),b(f,Xqe,u),b(f,Si,u),e(Si,Ku),e(Ku,Nde),M(_A,Nde,null),e(Si,TCo),e(Si,qde),e(qde,MCo),b(f,zqe,u),b(f,$o,u),M(uA,$o,null),e($o,ECo),e($o,Ri),e(Ri,CCo),e(Ri,$j),e($j,wCo),e(Ri,ACo),e(Ri,kj),e(kj,yCo),e(Ri,LCo),e($o,xCo),e($o,bA),e(bA,$Co),e(bA,jde),e(jde,kCo),e(bA,SCo),e($o,RCo),e($o,nt),M(vA,nt,null),e(nt,PCo),e(nt,Dde),e(Dde,BCo),e(nt,ICo),e(nt,Pi),e(Pi,NCo),e(Pi,Gde),e(Gde,qCo),e(Pi,jCo),e(Pi,Sj),e(Sj,DCo),e(Pi,GCo),e(nt,OCo),M(Zu,nt,null),e($o,VCo),e($o,Ke),M(FA,Ke,null),e(Ke,XCo),e(Ke,Ode),e(Ode,zCo),e(Ke,WCo),e(Ke,$a),e($a,QCo),e($a,Vde),e(Vde,HCo),e($a,UCo),e($a,Xde),e(Xde,JCo),e($a,YCo),e($a,zde),e(zde,KCo),e($a,ZCo),e(Ke,e5o),e(Ke,z),e(z,e2),e(e2,Wde),e(Wde,o5o),e(e2,r5o),e(e2,Rj),e(Rj,t5o),e(e2,a5o),e(z,n5o),e(z,o2),e(o2,Qde),e(Qde,s5o),e(o2,l5o),e(o2,Pj),e(Pj,i5o),e(o2,d5o),e(z,c5o),e(z,r2),e(r2,Hde),e(Hde,f5o),e(r2,m5o),e(r2,Bj),e(Bj,g5o),e(r2,h5o),e(z,p5o),e(z,t2),e(t2,Ude),e(Ude,_5o),e(t2,u5o),e(t2,Ij),e(Ij,b5o),e(t2,v5o),e(z,F5o),e(z,a2),e(a2,Jde),e(Jde,T5o),e(a2,M5o),e(a2,Nj),e(Nj,E5o),e(a2,C5o),e(z,w5o),e(z,n2),e(n2,Yde),e(Yde,A5o),e(n2,y5o),e(n2,qj),e(qj,L5o),e(n2,x5o),e(z,$5o),e(z,s2),e(s2,Kde),e(Kde,k5o),e(s2,S5o),e(s2,jj),e(jj,R5o),e(s2,P5o),e(z,B5o),e(z,l2),e(l2,Zde),e(Zde,I5o),e(l2,N5o),e(l2,Dj),e(Dj,q5o),e(l2,j5o),e(z,D5o),e(z,i2),e(i2,ece),e(ece,G5o),e(i2,O5o),e(i2,Gj),e(Gj,V5o),e(i2,X5o),e(z,z5o),e(z,d2),e(d2,oce),e(oce,W5o),e(d2,Q5o),e(d2,Oj),e(Oj,H5o),e(d2,U5o),e(z,J5o),e(z,c2),e(c2,rce),e(rce,Y5o),e(c2,K5o),e(c2,Vj),e(Vj,Z5o),e(c2,e3o),e(z,o3o),e(z,f2),e(f2,tce),e(tce,r3o),e(f2,t3o),e(f2,Xj),e(Xj,a3o),e(f2,n3o),e(z,s3o),e(z,m2),e(m2,ace),e(ace,l3o),e(m2,i3o),e(m2,zj),e(zj,d3o),e(m2,c3o),e(z,f3o),e(z,g2),e(g2,nce),e(nce,m3o),e(g2,g3o),e(g2,Wj),e(Wj,h3o),e(g2,p3o),e(z,_3o),e(z,h2),e(h2,sce),e(sce,u3o),e(h2,b3o),e(h2,Qj),e(Qj,v3o),e(h2,F3o),e(z,T3o),e(z,p2),e(p2,lce),e(lce,M3o),e(p2,E3o),e(p2,Hj),e(Hj,C3o),e(p2,w3o),e(z,A3o),e(z,_2),e(_2,ice),e(ice,y3o),e(_2,L3o),e(_2,Uj),e(Uj,x3o),e(_2,$3o),e(z,k3o),e(z,u2),e(u2,dce),e(dce,S3o),e(u2,R3o),e(u2,Jj),e(Jj,P3o),e(u2,B3o),e(z,I3o),e(z,b2),e(b2,cce),e(cce,N3o),e(b2,q3o),e(b2,Yj),e(Yj,j3o),e(b2,D3o),e(z,G3o),e(z,v2),e(v2,fce),e(fce,O3o),e(v2,V3o),e(v2,Kj),e(Kj,X3o),e(v2,z3o),e(z,W3o),e(z,F2),e(F2,mce),e(mce,Q3o),e(F2,H3o),e(F2,Zj),e(Zj,U3o),e(F2,J3o),e(z,Y3o),e(z,T2),e(T2,gce),e(gce,K3o),e(T2,Z3o),e(T2,eD),e(eD,ewo),e(T2,owo),e(z,rwo),e(z,M2),e(M2,hce),e(hce,two),e(M2,awo),e(M2,oD),e(oD,nwo),e(M2,swo),e(z,lwo),e(z,E2),e(E2,pce),e(pce,iwo),e(E2,dwo),e(E2,rD),e(rD,cwo),e(E2,fwo),e(z,mwo),e(z,C2),e(C2,_ce),e(_ce,gwo),e(C2,hwo),e(C2,tD),e(tD,pwo),e(C2,_wo),e(z,uwo),e(z,w2),e(w2,uce),e(uce,bwo),e(w2,vwo),e(w2,aD),e(aD,Fwo),e(w2,Two),e(z,Mwo),e(z,A2),e(A2,bce),e(bce,Ewo),e(A2,Cwo),e(A2,nD),e(nD,wwo),e(A2,Awo),e(z,ywo),e(z,y2),e(y2,vce),e(vce,Lwo),e(y2,xwo),e(y2,sD),e(sD,$wo),e(y2,kwo),e(z,Swo),e(z,L2),e(L2,Fce),e(Fce,Rwo),e(L2,Pwo),e(L2,lD),e(lD,Bwo),e(L2,Iwo),e(z,Nwo),e(z,x2),e(x2,Tce),e(Tce,qwo),e(x2,jwo),e(x2,iD),e(iD,Dwo),e(x2,Gwo),e(z,Owo),e(z,$2),e($2,Mce),e(Mce,Vwo),e($2,Xwo),e($2,dD),e(dD,zwo),e($2,Wwo),e(z,Qwo),e(z,k2),e(k2,Ece),e(Ece,Hwo),e(k2,Uwo),e(k2,cD),e(cD,Jwo),e(k2,Ywo),e(z,Kwo),e(z,S2),e(S2,Cce),e(Cce,Zwo),e(S2,e0o),e(S2,fD),e(fD,o0o),e(S2,r0o),e(z,t0o),e(z,R2),e(R2,wce),e(wce,a0o),e(R2,n0o),e(R2,mD),e(mD,s0o),e(R2,l0o),e(z,i0o),e(z,P2),e(P2,Ace),e(Ace,d0o),e(P2,c0o),e(P2,gD),e(gD,f0o),e(P2,m0o),e(z,g0o),e(z,B2),e(B2,yce),e(yce,h0o),e(B2,p0o),e(B2,hD),e(hD,_0o),e(B2,u0o),e(z,b0o),e(z,I2),e(I2,Lce),e(Lce,v0o),e(I2,F0o),e(I2,pD),e(pD,T0o),e(I2,M0o),e(Ke,E0o),e(Ke,N2),e(N2,C0o),e(N2,xce),e(xce,w0o),e(N2,A0o),e(N2,$ce),e($ce,y0o),e(Ke,L0o),M(q2,Ke,null),b(f,Wqe,u),b(f,Bi,u),e(Bi,j2),e(j2,kce),M(TA,kce,null),e(Bi,x0o),e(Bi,Sce),e(Sce,$0o),b(f,Qqe,u),b(f,ko,u),M(MA,ko,null),e(ko,k0o),e(ko,Ii),e(Ii,S0o),e(Ii,_D),e(_D,R0o),e(Ii,P0o),e(Ii,uD),e(uD,B0o),e(Ii,I0o),e(ko,N0o),e(ko,EA),e(EA,q0o),e(EA,Rce),e(Rce,j0o),e(EA,D0o),e(ko,G0o),e(ko,st),M(CA,st,null),e(st,O0o),e(st,Pce),e(Pce,V0o),e(st,X0o),e(st,Ni),e(Ni,z0o),e(Ni,Bce),e(Bce,W0o),e(Ni,Q0o),e(Ni,bD),e(bD,H0o),e(Ni,U0o),e(st,J0o),M(D2,st,null),e(ko,Y0o),e(ko,Ze),M(wA,Ze,null),e(Ze,K0o),e(Ze,Ice),e(Ice,Z0o),e(Ze,eAo),e(Ze,ka),e(ka,oAo),e(ka,Nce),e(Nce,rAo),e(ka,tAo),e(ka,qce),e(qce,aAo),e(ka,nAo),e(ka,jce),e(jce,sAo),e(ka,lAo),e(Ze,iAo),e(Ze,Q),e(Q,G2),e(G2,Dce),e(Dce,dAo),e(G2,cAo),e(G2,vD),e(vD,fAo),e(G2,mAo),e(Q,gAo),e(Q,O2),e(O2,Gce),e(Gce,hAo),e(O2,pAo),e(O2,FD),e(FD,_Ao),e(O2,uAo),e(Q,bAo),e(Q,V2),e(V2,Oce),e(Oce,vAo),e(V2,FAo),e(V2,TD),e(TD,TAo),e(V2,MAo),e(Q,EAo),e(Q,X2),e(X2,Vce),e(Vce,CAo),e(X2,wAo),e(X2,MD),e(MD,AAo),e(X2,yAo),e(Q,LAo),e(Q,z2),e(z2,Xce),e(Xce,xAo),e(z2,$Ao),e(z2,ED),e(ED,kAo),e(z2,SAo),e(Q,RAo),e(Q,W2),e(W2,zce),e(zce,PAo),e(W2,BAo),e(W2,CD),e(CD,IAo),e(W2,NAo),e(Q,qAo),e(Q,Q2),e(Q2,Wce),e(Wce,jAo),e(Q2,DAo),e(Q2,wD),e(wD,GAo),e(Q2,OAo),e(Q,VAo),e(Q,H2),e(H2,Qce),e(Qce,XAo),e(H2,zAo),e(H2,AD),e(AD,WAo),e(H2,QAo),e(Q,HAo),e(Q,U2),e(U2,Hce),e(Hce,UAo),e(U2,JAo),e(U2,yD),e(yD,YAo),e(U2,KAo),e(Q,ZAo),e(Q,J2),e(J2,Uce),e(Uce,eyo),e(J2,oyo),e(J2,LD),e(LD,ryo),e(J2,tyo),e(Q,ayo),e(Q,Y2),e(Y2,Jce),e(Jce,nyo),e(Y2,syo),e(Y2,xD),e(xD,lyo),e(Y2,iyo),e(Q,dyo),e(Q,K2),e(K2,Yce),e(Yce,cyo),e(K2,fyo),e(K2,$D),e($D,myo),e(K2,gyo),e(Q,hyo),e(Q,Z2),e(Z2,Kce),e(Kce,pyo),e(Z2,_yo),e(Z2,kD),e(kD,uyo),e(Z2,byo),e(Q,vyo),e(Q,e1),e(e1,Zce),e(Zce,Fyo),e(e1,Tyo),e(e1,SD),e(SD,Myo),e(e1,Eyo),e(Q,Cyo),e(Q,o1),e(o1,efe),e(efe,wyo),e(o1,Ayo),e(o1,RD),e(RD,yyo),e(o1,Lyo),e(Q,xyo),e(Q,r1),e(r1,ofe),e(ofe,$yo),e(r1,kyo),e(r1,PD),e(PD,Syo),e(r1,Ryo),e(Q,Pyo),e(Q,t1),e(t1,rfe),e(rfe,Byo),e(t1,Iyo),e(t1,BD),e(BD,Nyo),e(t1,qyo),e(Q,jyo),e(Q,a1),e(a1,tfe),e(tfe,Dyo),e(a1,Gyo),e(a1,ID),e(ID,Oyo),e(a1,Vyo),e(Q,Xyo),e(Q,n1),e(n1,afe),e(afe,zyo),e(n1,Wyo),e(n1,ND),e(ND,Qyo),e(n1,Hyo),e(Q,Uyo),e(Q,s1),e(s1,nfe),e(nfe,Jyo),e(s1,Yyo),e(s1,qD),e(qD,Kyo),e(s1,Zyo),e(Q,eLo),e(Q,l1),e(l1,sfe),e(sfe,oLo),e(l1,rLo),e(l1,jD),e(jD,tLo),e(l1,aLo),e(Q,nLo),e(Q,i1),e(i1,lfe),e(lfe,sLo),e(i1,lLo),e(i1,DD),e(DD,iLo),e(i1,dLo),e(Q,cLo),e(Q,d1),e(d1,ife),e(ife,fLo),e(d1,mLo),e(d1,GD),e(GD,gLo),e(d1,hLo),e(Q,pLo),e(Q,c1),e(c1,dfe),e(dfe,_Lo),e(c1,uLo),e(c1,OD),e(OD,bLo),e(c1,vLo),e(Q,FLo),e(Q,f1),e(f1,cfe),e(cfe,TLo),e(f1,MLo),e(f1,VD),e(VD,ELo),e(f1,CLo),e(Q,wLo),e(Q,m1),e(m1,ffe),e(ffe,ALo),e(m1,yLo),e(m1,XD),e(XD,LLo),e(m1,xLo),e(Q,$Lo),e(Q,g1),e(g1,mfe),e(mfe,kLo),e(g1,SLo),e(g1,zD),e(zD,RLo),e(g1,PLo),e(Q,BLo),e(Q,h1),e(h1,gfe),e(gfe,ILo),e(h1,NLo),e(h1,WD),e(WD,qLo),e(h1,jLo),e(Q,DLo),e(Q,p1),e(p1,hfe),e(hfe,GLo),e(p1,OLo),e(p1,QD),e(QD,VLo),e(p1,XLo),e(Q,zLo),e(Q,_1),e(_1,pfe),e(pfe,WLo),e(_1,QLo),e(_1,HD),e(HD,HLo),e(_1,ULo),e(Q,JLo),e(Q,u1),e(u1,_fe),e(_fe,YLo),e(u1,KLo),e(u1,ufe),e(ufe,ZLo),e(u1,e8o),e(Q,o8o),e(Q,b1),e(b1,bfe),e(bfe,r8o),e(b1,t8o),e(b1,UD),e(UD,a8o),e(b1,n8o),e(Q,s8o),e(Q,v1),e(v1,vfe),e(vfe,l8o),e(v1,i8o),e(v1,JD),e(JD,d8o),e(v1,c8o),e(Q,f8o),e(Q,F1),e(F1,Ffe),e(Ffe,m8o),e(F1,g8o),e(F1,YD),e(YD,h8o),e(F1,p8o),e(Q,_8o),e(Q,T1),e(T1,Tfe),e(Tfe,u8o),e(T1,b8o),e(T1,KD),e(KD,v8o),e(T1,F8o),e(Ze,T8o),e(Ze,M1),e(M1,M8o),e(M1,Mfe),e(Mfe,E8o),e(M1,C8o),e(M1,Efe),e(Efe,w8o),e(Ze,A8o),M(E1,Ze,null),b(f,Hqe,u),b(f,qi,u),e(qi,C1),e(C1,Cfe),M(AA,Cfe,null),e(qi,y8o),e(qi,wfe),e(wfe,L8o),b(f,Uqe,u),b(f,So,u),M(yA,So,null),e(So,x8o),e(So,ji),e(ji,$8o),e(ji,ZD),e(ZD,k8o),e(ji,S8o),e(ji,eG),e(eG,R8o),e(ji,P8o),e(So,B8o),e(So,LA),e(LA,I8o),e(LA,Afe),e(Afe,N8o),e(LA,q8o),e(So,j8o),e(So,lt),M(xA,lt,null),e(lt,D8o),e(lt,yfe),e(yfe,G8o),e(lt,O8o),e(lt,Di),e(Di,V8o),e(Di,Lfe),e(Lfe,X8o),e(Di,z8o),e(Di,oG),e(oG,W8o),e(Di,Q8o),e(lt,H8o),M(w1,lt,null),e(So,U8o),e(So,eo),M($A,eo,null),e(eo,J8o),e(eo,xfe),e(xfe,Y8o),e(eo,K8o),e(eo,Sa),e(Sa,Z8o),e(Sa,$fe),e($fe,exo),e(Sa,oxo),e(Sa,kfe),e(kfe,rxo),e(Sa,txo),e(Sa,Sfe),e(Sfe,axo),e(Sa,nxo),e(eo,sxo),e(eo,pe),e(pe,A1),e(A1,Rfe),e(Rfe,lxo),e(A1,ixo),e(A1,rG),e(rG,dxo),e(A1,cxo),e(pe,fxo),e(pe,y1),e(y1,Pfe),e(Pfe,mxo),e(y1,gxo),e(y1,tG),e(tG,hxo),e(y1,pxo),e(pe,_xo),e(pe,L1),e(L1,Bfe),e(Bfe,uxo),e(L1,bxo),e(L1,aG),e(aG,vxo),e(L1,Fxo),e(pe,Txo),e(pe,x1),e(x1,Ife),e(Ife,Mxo),e(x1,Exo),e(x1,nG),e(nG,Cxo),e(x1,wxo),e(pe,Axo),e(pe,$1),e($1,Nfe),e(Nfe,yxo),e($1,Lxo),e($1,sG),e(sG,xxo),e($1,$xo),e(pe,kxo),e(pe,k1),e(k1,qfe),e(qfe,Sxo),e(k1,Rxo),e(k1,lG),e(lG,Pxo),e(k1,Bxo),e(pe,Ixo),e(pe,S1),e(S1,jfe),e(jfe,Nxo),e(S1,qxo),e(S1,iG),e(iG,jxo),e(S1,Dxo),e(pe,Gxo),e(pe,R1),e(R1,Dfe),e(Dfe,Oxo),e(R1,Vxo),e(R1,dG),e(dG,Xxo),e(R1,zxo),e(pe,Wxo),e(pe,P1),e(P1,Gfe),e(Gfe,Qxo),e(P1,Hxo),e(P1,cG),e(cG,Uxo),e(P1,Jxo),e(pe,Yxo),e(pe,B1),e(B1,Ofe),e(Ofe,Kxo),e(B1,Zxo),e(B1,fG),e(fG,e$o),e(B1,o$o),e(pe,r$o),e(pe,I1),e(I1,Vfe),e(Vfe,t$o),e(I1,a$o),e(I1,mG),e(mG,n$o),e(I1,s$o),e(pe,l$o),e(pe,N1),e(N1,Xfe),e(Xfe,i$o),e(N1,d$o),e(N1,gG),e(gG,c$o),e(N1,f$o),e(pe,m$o),e(pe,q1),e(q1,zfe),e(zfe,g$o),e(q1,h$o),e(q1,hG),e(hG,p$o),e(q1,_$o),e(pe,u$o),e(pe,j1),e(j1,Wfe),e(Wfe,b$o),e(j1,v$o),e(j1,pG),e(pG,F$o),e(j1,T$o),e(pe,M$o),e(pe,D1),e(D1,Qfe),e(Qfe,E$o),e(D1,C$o),e(D1,_G),e(_G,w$o),e(D1,A$o),e(pe,y$o),e(pe,G1),e(G1,Hfe),e(Hfe,L$o),e(G1,x$o),e(G1,uG),e(uG,$$o),e(G1,k$o),e(pe,S$o),e(pe,O1),e(O1,Ufe),e(Ufe,R$o),e(O1,P$o),e(O1,bG),e(bG,B$o),e(O1,I$o),e(eo,N$o),e(eo,V1),e(V1,q$o),e(V1,Jfe),e(Jfe,j$o),e(V1,D$o),e(V1,Yfe),e(Yfe,G$o),e(eo,O$o),M(X1,eo,null),b(f,Jqe,u),b(f,Gi,u),e(Gi,z1),e(z1,Kfe),M(kA,Kfe,null),e(Gi,V$o),e(Gi,Zfe),e(Zfe,X$o),b(f,Yqe,u),b(f,Ro,u),M(SA,Ro,null),e(Ro,z$o),e(Ro,Oi),e(Oi,W$o),e(Oi,vG),e(vG,Q$o),e(Oi,H$o),e(Oi,FG),e(FG,U$o),e(Oi,J$o),e(Ro,Y$o),e(Ro,RA),e(RA,K$o),e(RA,eme),e(eme,Z$o),e(RA,eko),e(Ro,oko),e(Ro,it),M(PA,it,null),e(it,rko),e(it,ome),e(ome,tko),e(it,ako),e(it,Vi),e(Vi,nko),e(Vi,rme),e(rme,sko),e(Vi,lko),e(Vi,TG),e(TG,iko),e(Vi,dko),e(it,cko),M(W1,it,null),e(Ro,fko),e(Ro,oo),M(BA,oo,null),e(oo,mko),e(oo,tme),e(tme,gko),e(oo,hko),e(oo,Ra),e(Ra,pko),e(Ra,ame),e(ame,_ko),e(Ra,uko),e(Ra,nme),e(nme,bko),e(Ra,vko),e(Ra,sme),e(sme,Fko),e(Ra,Tko),e(oo,Mko),e(oo,N),e(N,Q1),e(Q1,lme),e(lme,Eko),e(Q1,Cko),e(Q1,MG),e(MG,wko),e(Q1,Ako),e(N,yko),e(N,H1),e(H1,ime),e(ime,Lko),e(H1,xko),e(H1,EG),e(EG,$ko),e(H1,kko),e(N,Sko),e(N,U1),e(U1,dme),e(dme,Rko),e(U1,Pko),e(U1,CG),e(CG,Bko),e(U1,Iko),e(N,Nko),e(N,J1),e(J1,cme),e(cme,qko),e(J1,jko),e(J1,wG),e(wG,Dko),e(J1,Gko),e(N,Oko),e(N,Y1),e(Y1,fme),e(fme,Vko),e(Y1,Xko),e(Y1,AG),e(AG,zko),e(Y1,Wko),e(N,Qko),e(N,K1),e(K1,mme),e(mme,Hko),e(K1,Uko),e(K1,yG),e(yG,Jko),e(K1,Yko),e(N,Kko),e(N,Z1),e(Z1,gme),e(gme,Zko),e(Z1,eSo),e(Z1,LG),e(LG,oSo),e(Z1,rSo),e(N,tSo),e(N,eb),e(eb,hme),e(hme,aSo),e(eb,nSo),e(eb,xG),e(xG,sSo),e(eb,lSo),e(N,iSo),e(N,ob),e(ob,pme),e(pme,dSo),e(ob,cSo),e(ob,$G),e($G,fSo),e(ob,mSo),e(N,gSo),e(N,rb),e(rb,_me),e(_me,hSo),e(rb,pSo),e(rb,kG),e(kG,_So),e(rb,uSo),e(N,bSo),e(N,tb),e(tb,ume),e(ume,vSo),e(tb,FSo),e(tb,SG),e(SG,TSo),e(tb,MSo),e(N,ESo),e(N,ab),e(ab,bme),e(bme,CSo),e(ab,wSo),e(ab,RG),e(RG,ASo),e(ab,ySo),e(N,LSo),e(N,nb),e(nb,vme),e(vme,xSo),e(nb,$So),e(nb,PG),e(PG,kSo),e(nb,SSo),e(N,RSo),e(N,sb),e(sb,Fme),e(Fme,PSo),e(sb,BSo),e(sb,BG),e(BG,ISo),e(sb,NSo),e(N,qSo),e(N,lb),e(lb,Tme),e(Tme,jSo),e(lb,DSo),e(lb,IG),e(IG,GSo),e(lb,OSo),e(N,VSo),e(N,ib),e(ib,Mme),e(Mme,XSo),e(ib,zSo),e(ib,NG),e(NG,WSo),e(ib,QSo),e(N,HSo),e(N,db),e(db,Eme),e(Eme,USo),e(db,JSo),e(db,qG),e(qG,YSo),e(db,KSo),e(N,ZSo),e(N,cb),e(cb,Cme),e(Cme,eRo),e(cb,oRo),e(cb,jG),e(jG,rRo),e(cb,tRo),e(N,aRo),e(N,fb),e(fb,wme),e(wme,nRo),e(fb,sRo),e(fb,DG),e(DG,lRo),e(fb,iRo),e(N,dRo),e(N,mb),e(mb,Ame),e(Ame,cRo),e(mb,fRo),e(mb,GG),e(GG,mRo),e(mb,gRo),e(N,hRo),e(N,gb),e(gb,yme),e(yme,pRo),e(gb,_Ro),e(gb,OG),e(OG,uRo),e(gb,bRo),e(N,vRo),e(N,hb),e(hb,Lme),e(Lme,FRo),e(hb,TRo),e(hb,VG),e(VG,MRo),e(hb,ERo),e(N,CRo),e(N,pb),e(pb,xme),e(xme,wRo),e(pb,ARo),e(pb,XG),e(XG,yRo),e(pb,LRo),e(N,xRo),e(N,_b),e(_b,$me),e($me,$Ro),e(_b,kRo),e(_b,zG),e(zG,SRo),e(_b,RRo),e(N,PRo),e(N,ub),e(ub,kme),e(kme,BRo),e(ub,IRo),e(ub,WG),e(WG,NRo),e(ub,qRo),e(N,jRo),e(N,bb),e(bb,Sme),e(Sme,DRo),e(bb,GRo),e(bb,QG),e(QG,ORo),e(bb,VRo),e(N,XRo),e(N,vb),e(vb,Rme),e(Rme,zRo),e(vb,WRo),e(vb,HG),e(HG,QRo),e(vb,HRo),e(N,URo),e(N,Fb),e(Fb,Pme),e(Pme,JRo),e(Fb,YRo),e(Fb,UG),e(UG,KRo),e(Fb,ZRo),e(N,ePo),e(N,Tb),e(Tb,Bme),e(Bme,oPo),e(Tb,rPo),e(Tb,JG),e(JG,tPo),e(Tb,aPo),e(N,nPo),e(N,Mb),e(Mb,Ime),e(Ime,sPo),e(Mb,lPo),e(Mb,YG),e(YG,iPo),e(Mb,dPo),e(N,cPo),e(N,Eb),e(Eb,Nme),e(Nme,fPo),e(Eb,mPo),e(Eb,KG),e(KG,gPo),e(Eb,hPo),e(N,pPo),e(N,Cb),e(Cb,qme),e(qme,_Po),e(Cb,uPo),e(Cb,ZG),e(ZG,bPo),e(Cb,vPo),e(N,FPo),e(N,wb),e(wb,jme),e(jme,TPo),e(wb,MPo),e(wb,eO),e(eO,EPo),e(wb,CPo),e(N,wPo),e(N,Ab),e(Ab,Dme),e(Dme,APo),e(Ab,yPo),e(Ab,oO),e(oO,LPo),e(Ab,xPo),e(N,$Po),e(N,yb),e(yb,Gme),e(Gme,kPo),e(yb,SPo),e(yb,rO),e(rO,RPo),e(yb,PPo),e(N,BPo),e(N,Lb),e(Lb,Ome),e(Ome,IPo),e(Lb,NPo),e(Lb,tO),e(tO,qPo),e(Lb,jPo),e(N,DPo),e(N,xb),e(xb,Vme),e(Vme,GPo),e(xb,OPo),e(xb,aO),e(aO,VPo),e(xb,XPo),e(N,zPo),e(N,$b),e($b,Xme),e(Xme,WPo),e($b,QPo),e($b,nO),e(nO,HPo),e($b,UPo),e(N,JPo),e(N,kb),e(kb,zme),e(zme,YPo),e(kb,KPo),e(kb,sO),e(sO,ZPo),e(kb,eBo),e(N,oBo),e(N,Sb),e(Sb,Wme),e(Wme,rBo),e(Sb,tBo),e(Sb,lO),e(lO,aBo),e(Sb,nBo),e(N,sBo),e(N,Rb),e(Rb,Qme),e(Qme,lBo),e(Rb,iBo),e(Rb,iO),e(iO,dBo),e(Rb,cBo),e(N,fBo),e(N,Pb),e(Pb,Hme),e(Hme,mBo),e(Pb,gBo),e(Pb,dO),e(dO,hBo),e(Pb,pBo),e(N,_Bo),e(N,Bb),e(Bb,Ume),e(Ume,uBo),e(Bb,bBo),e(Bb,cO),e(cO,vBo),e(Bb,FBo),e(N,TBo),e(N,Ib),e(Ib,Jme),e(Jme,MBo),e(Ib,EBo),e(Ib,fO),e(fO,CBo),e(Ib,wBo),e(N,ABo),e(N,Nb),e(Nb,Yme),e(Yme,yBo),e(Nb,LBo),e(Nb,mO),e(mO,xBo),e(Nb,$Bo),e(N,kBo),e(N,qb),e(qb,Kme),e(Kme,SBo),e(qb,RBo),e(qb,gO),e(gO,PBo),e(qb,BBo),e(N,IBo),e(N,jb),e(jb,Zme),e(Zme,NBo),e(jb,qBo),e(jb,hO),e(hO,jBo),e(jb,DBo),e(oo,GBo),e(oo,Db),e(Db,OBo),e(Db,ege),e(ege,VBo),e(Db,XBo),e(Db,oge),e(oge,zBo),e(oo,WBo),M(Gb,oo,null),b(f,Kqe,u),b(f,Xi,u),e(Xi,Ob),e(Ob,rge),M(IA,rge,null),e(Xi,QBo),e(Xi,tge),e(tge,HBo),b(f,Zqe,u),b(f,Po,u),M(NA,Po,null),e(Po,UBo),e(Po,zi),e(zi,JBo),e(zi,pO),e(pO,YBo),e(zi,KBo),e(zi,_O),e(_O,ZBo),e(zi,eIo),e(Po,oIo),e(Po,qA),e(qA,rIo),e(qA,age),e(age,tIo),e(qA,aIo),e(Po,nIo),e(Po,dt),M(jA,dt,null),e(dt,sIo),e(dt,nge),e(nge,lIo),e(dt,iIo),e(dt,Wi),e(Wi,dIo),e(Wi,sge),e(sge,cIo),e(Wi,fIo),e(Wi,uO),e(uO,mIo),e(Wi,gIo),e(dt,hIo),M(Vb,dt,null),e(Po,pIo),e(Po,ro),M(DA,ro,null),e(ro,_Io),e(ro,lge),e(lge,uIo),e(ro,bIo),e(ro,Pa),e(Pa,vIo),e(Pa,ige),e(ige,FIo),e(Pa,TIo),e(Pa,dge),e(dge,MIo),e(Pa,EIo),e(Pa,cge),e(cge,CIo),e(Pa,wIo),e(ro,AIo),e(ro,K),e(K,Xb),e(Xb,fge),e(fge,yIo),e(Xb,LIo),e(Xb,bO),e(bO,xIo),e(Xb,$Io),e(K,kIo),e(K,zb),e(zb,mge),e(mge,SIo),e(zb,RIo),e(zb,vO),e(vO,PIo),e(zb,BIo),e(K,IIo),e(K,Wb),e(Wb,gge),e(gge,NIo),e(Wb,qIo),e(Wb,FO),e(FO,jIo),e(Wb,DIo),e(K,GIo),e(K,Qb),e(Qb,hge),e(hge,OIo),e(Qb,VIo),e(Qb,TO),e(TO,XIo),e(Qb,zIo),e(K,WIo),e(K,Hb),e(Hb,pge),e(pge,QIo),e(Hb,HIo),e(Hb,MO),e(MO,UIo),e(Hb,JIo),e(K,YIo),e(K,Ub),e(Ub,_ge),e(_ge,KIo),e(Ub,ZIo),e(Ub,EO),e(EO,eNo),e(Ub,oNo),e(K,rNo),e(K,Jb),e(Jb,uge),e(uge,tNo),e(Jb,aNo),e(Jb,CO),e(CO,nNo),e(Jb,sNo),e(K,lNo),e(K,Yb),e(Yb,bge),e(bge,iNo),e(Yb,dNo),e(Yb,wO),e(wO,cNo),e(Yb,fNo),e(K,mNo),e(K,Kb),e(Kb,vge),e(vge,gNo),e(Kb,hNo),e(Kb,AO),e(AO,pNo),e(Kb,_No),e(K,uNo),e(K,Zb),e(Zb,Fge),e(Fge,bNo),e(Zb,vNo),e(Zb,yO),e(yO,FNo),e(Zb,TNo),e(K,MNo),e(K,ev),e(ev,Tge),e(Tge,ENo),e(ev,CNo),e(ev,LO),e(LO,wNo),e(ev,ANo),e(K,yNo),e(K,ov),e(ov,Mge),e(Mge,LNo),e(ov,xNo),e(ov,xO),e(xO,$No),e(ov,kNo),e(K,SNo),e(K,rv),e(rv,Ege),e(Ege,RNo),e(rv,PNo),e(rv,$O),e($O,BNo),e(rv,INo),e(K,NNo),e(K,tv),e(tv,Cge),e(Cge,qNo),e(tv,jNo),e(tv,kO),e(kO,DNo),e(tv,GNo),e(K,ONo),e(K,av),e(av,wge),e(wge,VNo),e(av,XNo),e(av,SO),e(SO,zNo),e(av,WNo),e(K,QNo),e(K,nv),e(nv,Age),e(Age,HNo),e(nv,UNo),e(nv,RO),e(RO,JNo),e(nv,YNo),e(K,KNo),e(K,sv),e(sv,yge),e(yge,ZNo),e(sv,eqo),e(sv,PO),e(PO,oqo),e(sv,rqo),e(K,tqo),e(K,lv),e(lv,Lge),e(Lge,aqo),e(lv,nqo),e(lv,BO),e(BO,sqo),e(lv,lqo),e(K,iqo),e(K,iv),e(iv,xge),e(xge,dqo),e(iv,cqo),e(iv,IO),e(IO,fqo),e(iv,mqo),e(K,gqo),e(K,dv),e(dv,$ge),e($ge,hqo),e(dv,pqo),e(dv,NO),e(NO,_qo),e(dv,uqo),e(K,bqo),e(K,cv),e(cv,kge),e(kge,vqo),e(cv,Fqo),e(cv,qO),e(qO,Tqo),e(cv,Mqo),e(K,Eqo),e(K,fv),e(fv,Sge),e(Sge,Cqo),e(fv,wqo),e(fv,jO),e(jO,Aqo),e(fv,yqo),e(K,Lqo),e(K,mv),e(mv,Rge),e(Rge,xqo),e(mv,$qo),e(mv,DO),e(DO,kqo),e(mv,Sqo),e(K,Rqo),e(K,gv),e(gv,Pge),e(Pge,Pqo),e(gv,Bqo),e(gv,GO),e(GO,Iqo),e(gv,Nqo),e(K,qqo),e(K,hv),e(hv,Bge),e(Bge,jqo),e(hv,Dqo),e(hv,OO),e(OO,Gqo),e(hv,Oqo),e(K,Vqo),e(K,pv),e(pv,Ige),e(Ige,Xqo),e(pv,zqo),e(pv,VO),e(VO,Wqo),e(pv,Qqo),e(K,Hqo),e(K,_v),e(_v,Nge),e(Nge,Uqo),e(_v,Jqo),e(_v,XO),e(XO,Yqo),e(_v,Kqo),e(K,Zqo),e(K,uv),e(uv,qge),e(qge,ejo),e(uv,ojo),e(uv,zO),e(zO,rjo),e(uv,tjo),e(K,ajo),e(K,bv),e(bv,jge),e(jge,njo),e(bv,sjo),e(bv,WO),e(WO,ljo),e(bv,ijo),e(ro,djo),e(ro,vv),e(vv,cjo),e(vv,Dge),e(Dge,fjo),e(vv,mjo),e(vv,Gge),e(Gge,gjo),e(ro,hjo),M(Fv,ro,null),b(f,eje,u),b(f,Qi,u),e(Qi,Tv),e(Tv,Oge),M(GA,Oge,null),e(Qi,pjo),e(Qi,Vge),e(Vge,_jo),b(f,oje,u),b(f,Bo,u),M(OA,Bo,null),e(Bo,ujo),e(Bo,Hi),e(Hi,bjo),e(Hi,QO),e(QO,vjo),e(Hi,Fjo),e(Hi,HO),e(HO,Tjo),e(Hi,Mjo),e(Bo,Ejo),e(Bo,VA),e(VA,Cjo),e(VA,Xge),e(Xge,wjo),e(VA,Ajo),e(Bo,yjo),e(Bo,ct),M(XA,ct,null),e(ct,Ljo),e(ct,zge),e(zge,xjo),e(ct,$jo),e(ct,Ui),e(Ui,kjo),e(Ui,Wge),e(Wge,Sjo),e(Ui,Rjo),e(Ui,UO),e(UO,Pjo),e(Ui,Bjo),e(ct,Ijo),M(Mv,ct,null),e(Bo,Njo),e(Bo,to),M(zA,to,null),e(to,qjo),e(to,Qge),e(Qge,jjo),e(to,Djo),e(to,Ba),e(Ba,Gjo),e(Ba,Hge),e(Hge,Ojo),e(Ba,Vjo),e(Ba,Uge),e(Uge,Xjo),e(Ba,zjo),e(Ba,Jge),e(Jge,Wjo),e(Ba,Qjo),e(to,Hjo),e(to,Yr),e(Yr,Ev),e(Ev,Yge),e(Yge,Ujo),e(Ev,Jjo),e(Ev,JO),e(JO,Yjo),e(Ev,Kjo),e(Yr,Zjo),e(Yr,Cv),e(Cv,Kge),e(Kge,eDo),e(Cv,oDo),e(Cv,YO),e(YO,rDo),e(Cv,tDo),e(Yr,aDo),e(Yr,wv),e(wv,Zge),e(Zge,nDo),e(wv,sDo),e(wv,KO),e(KO,lDo),e(wv,iDo),e(Yr,dDo),e(Yr,Av),e(Av,ehe),e(ehe,cDo),e(Av,fDo),e(Av,ZO),e(ZO,mDo),e(Av,gDo),e(Yr,hDo),e(Yr,yv),e(yv,ohe),e(ohe,pDo),e(yv,_Do),e(yv,eV),e(eV,uDo),e(yv,bDo),e(to,vDo),e(to,Lv),e(Lv,FDo),e(Lv,rhe),e(rhe,TDo),e(Lv,MDo),e(Lv,the),e(the,EDo),e(to,CDo),M(xv,to,null),b(f,rje,u),b(f,Ji,u),e(Ji,$v),e($v,ahe),M(WA,ahe,null),e(Ji,wDo),e(Ji,nhe),e(nhe,ADo),b(f,tje,u),b(f,Io,u),M(QA,Io,null),e(Io,yDo),e(Io,Yi),e(Yi,LDo),e(Yi,oV),e(oV,xDo),e(Yi,$Do),e(Yi,rV),e(rV,kDo),e(Yi,SDo),e(Io,RDo),e(Io,HA),e(HA,PDo),e(HA,she),e(she,BDo),e(HA,IDo),e(Io,NDo),e(Io,ft),M(UA,ft,null),e(ft,qDo),e(ft,lhe),e(lhe,jDo),e(ft,DDo),e(ft,Ki),e(Ki,GDo),e(Ki,ihe),e(ihe,ODo),e(Ki,VDo),e(Ki,tV),e(tV,XDo),e(Ki,zDo),e(ft,WDo),M(kv,ft,null),e(Io,QDo),e(Io,ao),M(JA,ao,null),e(ao,HDo),e(ao,dhe),e(dhe,UDo),e(ao,JDo),e(ao,Ia),e(Ia,YDo),e(Ia,che),e(che,KDo),e(Ia,ZDo),e(Ia,fhe),e(fhe,eGo),e(Ia,oGo),e(Ia,mhe),e(mhe,rGo),e(Ia,tGo),e(ao,aGo),e(ao,H),e(H,Sv),e(Sv,ghe),e(ghe,nGo),e(Sv,sGo),e(Sv,aV),e(aV,lGo),e(Sv,iGo),e(H,dGo),e(H,Rv),e(Rv,hhe),e(hhe,cGo),e(Rv,fGo),e(Rv,nV),e(nV,mGo),e(Rv,gGo),e(H,hGo),e(H,Pv),e(Pv,phe),e(phe,pGo),e(Pv,_Go),e(Pv,sV),e(sV,uGo),e(Pv,bGo),e(H,vGo),e(H,Bv),e(Bv,_he),e(_he,FGo),e(Bv,TGo),e(Bv,lV),e(lV,MGo),e(Bv,EGo),e(H,CGo),e(H,Iv),e(Iv,uhe),e(uhe,wGo),e(Iv,AGo),e(Iv,iV),e(iV,yGo),e(Iv,LGo),e(H,xGo),e(H,Nv),e(Nv,bhe),e(bhe,$Go),e(Nv,kGo),e(Nv,dV),e(dV,SGo),e(Nv,RGo),e(H,PGo),e(H,qv),e(qv,vhe),e(vhe,BGo),e(qv,IGo),e(qv,cV),e(cV,NGo),e(qv,qGo),e(H,jGo),e(H,jv),e(jv,Fhe),e(Fhe,DGo),e(jv,GGo),e(jv,fV),e(fV,OGo),e(jv,VGo),e(H,XGo),e(H,Dv),e(Dv,The),e(The,zGo),e(Dv,WGo),e(Dv,mV),e(mV,QGo),e(Dv,HGo),e(H,UGo),e(H,Gv),e(Gv,Mhe),e(Mhe,JGo),e(Gv,YGo),e(Gv,gV),e(gV,KGo),e(Gv,ZGo),e(H,eOo),e(H,Ov),e(Ov,Ehe),e(Ehe,oOo),e(Ov,rOo),e(Ov,hV),e(hV,tOo),e(Ov,aOo),e(H,nOo),e(H,Vv),e(Vv,Che),e(Che,sOo),e(Vv,lOo),e(Vv,pV),e(pV,iOo),e(Vv,dOo),e(H,cOo),e(H,Xv),e(Xv,whe),e(whe,fOo),e(Xv,mOo),e(Xv,_V),e(_V,gOo),e(Xv,hOo),e(H,pOo),e(H,zv),e(zv,Ahe),e(Ahe,_Oo),e(zv,uOo),e(zv,uV),e(uV,bOo),e(zv,vOo),e(H,FOo),e(H,Wv),e(Wv,yhe),e(yhe,TOo),e(Wv,MOo),e(Wv,bV),e(bV,EOo),e(Wv,COo),e(H,wOo),e(H,Qv),e(Qv,Lhe),e(Lhe,AOo),e(Qv,yOo),e(Qv,vV),e(vV,LOo),e(Qv,xOo),e(H,$Oo),e(H,Hv),e(Hv,xhe),e(xhe,kOo),e(Hv,SOo),e(Hv,FV),e(FV,ROo),e(Hv,POo),e(H,BOo),e(H,Uv),e(Uv,$he),e($he,IOo),e(Uv,NOo),e(Uv,TV),e(TV,qOo),e(Uv,jOo),e(H,DOo),e(H,Jv),e(Jv,khe),e(khe,GOo),e(Jv,OOo),e(Jv,MV),e(MV,VOo),e(Jv,XOo),e(H,zOo),e(H,Yv),e(Yv,She),e(She,WOo),e(Yv,QOo),e(Yv,EV),e(EV,HOo),e(Yv,UOo),e(H,JOo),e(H,Kv),e(Kv,Rhe),e(Rhe,YOo),e(Kv,KOo),e(Kv,CV),e(CV,ZOo),e(Kv,eVo),e(H,oVo),e(H,Zv),e(Zv,Phe),e(Phe,rVo),e(Zv,tVo),e(Zv,wV),e(wV,aVo),e(Zv,nVo),e(H,sVo),e(H,eF),e(eF,Bhe),e(Bhe,lVo),e(eF,iVo),e(eF,AV),e(AV,dVo),e(eF,cVo),e(H,fVo),e(H,oF),e(oF,Ihe),e(Ihe,mVo),e(oF,gVo),e(oF,yV),e(yV,hVo),e(oF,pVo),e(H,_Vo),e(H,rF),e(rF,Nhe),e(Nhe,uVo),e(rF,bVo),e(rF,LV),e(LV,vVo),e(rF,FVo),e(H,TVo),e(H,tF),e(tF,qhe),e(qhe,MVo),e(tF,EVo),e(tF,xV),e(xV,CVo),e(tF,wVo),e(H,AVo),e(H,aF),e(aF,jhe),e(jhe,yVo),e(aF,LVo),e(aF,$V),e($V,xVo),e(aF,$Vo),e(H,kVo),e(H,nF),e(nF,Dhe),e(Dhe,SVo),e(nF,RVo),e(nF,kV),e(kV,PVo),e(nF,BVo),e(H,IVo),e(H,sF),e(sF,Ghe),e(Ghe,NVo),e(sF,qVo),e(sF,SV),e(SV,jVo),e(sF,DVo),e(H,GVo),e(H,lF),e(lF,Ohe),e(Ohe,OVo),e(lF,VVo),e(lF,RV),e(RV,XVo),e(lF,zVo),e(H,WVo),e(H,iF),e(iF,Vhe),e(Vhe,QVo),e(iF,HVo),e(iF,PV),e(PV,UVo),e(iF,JVo),e(H,YVo),e(H,dF),e(dF,Xhe),e(Xhe,KVo),e(dF,ZVo),e(dF,BV),e(BV,eXo),e(dF,oXo),e(H,rXo),e(H,cF),e(cF,zhe),e(zhe,tXo),e(cF,aXo),e(cF,IV),e(IV,nXo),e(cF,sXo),e(H,lXo),e(H,fF),e(fF,Whe),e(Whe,iXo),e(fF,dXo),e(fF,NV),e(NV,cXo),e(fF,fXo),e(ao,mXo),e(ao,mF),e(mF,gXo),e(mF,Qhe),e(Qhe,hXo),e(mF,pXo),e(mF,Hhe),e(Hhe,_Xo),e(ao,uXo),M(gF,ao,null),b(f,aje,u),b(f,Zi,u),e(Zi,hF),e(hF,Uhe),M(YA,Uhe,null),e(Zi,bXo),e(Zi,Jhe),e(Jhe,vXo),b(f,nje,u),b(f,No,u),M(KA,No,null),e(No,FXo),e(No,ed),e(ed,TXo),e(ed,qV),e(qV,MXo),e(ed,EXo),e(ed,jV),e(jV,CXo),e(ed,wXo),e(No,AXo),e(No,ZA),e(ZA,yXo),e(ZA,Yhe),e(Yhe,LXo),e(ZA,xXo),e(No,$Xo),e(No,mt),M(ey,mt,null),e(mt,kXo),e(mt,Khe),e(Khe,SXo),e(mt,RXo),e(mt,od),e(od,PXo),e(od,Zhe),e(Zhe,BXo),e(od,IXo),e(od,DV),e(DV,NXo),e(od,qXo),e(mt,jXo),M(pF,mt,null),e(No,DXo),e(No,no),M(oy,no,null),e(no,GXo),e(no,epe),e(epe,OXo),e(no,VXo),e(no,Na),e(Na,XXo),e(Na,ope),e(ope,zXo),e(Na,WXo),e(Na,rpe),e(rpe,QXo),e(Na,HXo),e(Na,tpe),e(tpe,UXo),e(Na,JXo),e(no,YXo),e(no,V),e(V,_F),e(_F,ape),e(ape,KXo),e(_F,ZXo),e(_F,GV),e(GV,ezo),e(_F,ozo),e(V,rzo),e(V,uF),e(uF,npe),e(npe,tzo),e(uF,azo),e(uF,OV),e(OV,nzo),e(uF,szo),e(V,lzo),e(V,bF),e(bF,spe),e(spe,izo),e(bF,dzo),e(bF,VV),e(VV,czo),e(bF,fzo),e(V,mzo),e(V,vF),e(vF,lpe),e(lpe,gzo),e(vF,hzo),e(vF,XV),e(XV,pzo),e(vF,_zo),e(V,uzo),e(V,FF),e(FF,ipe),e(ipe,bzo),e(FF,vzo),e(FF,zV),e(zV,Fzo),e(FF,Tzo),e(V,Mzo),e(V,TF),e(TF,dpe),e(dpe,Ezo),e(TF,Czo),e(TF,WV),e(WV,wzo),e(TF,Azo),e(V,yzo),e(V,MF),e(MF,cpe),e(cpe,Lzo),e(MF,xzo),e(MF,QV),e(QV,$zo),e(MF,kzo),e(V,Szo),e(V,EF),e(EF,fpe),e(fpe,Rzo),e(EF,Pzo),e(EF,HV),e(HV,Bzo),e(EF,Izo),e(V,Nzo),e(V,CF),e(CF,mpe),e(mpe,qzo),e(CF,jzo),e(CF,UV),e(UV,Dzo),e(CF,Gzo),e(V,Ozo),e(V,wF),e(wF,gpe),e(gpe,Vzo),e(wF,Xzo),e(wF,JV),e(JV,zzo),e(wF,Wzo),e(V,Qzo),e(V,AF),e(AF,hpe),e(hpe,Hzo),e(AF,Uzo),e(AF,YV),e(YV,Jzo),e(AF,Yzo),e(V,Kzo),e(V,yF),e(yF,ppe),e(ppe,Zzo),e(yF,eWo),e(yF,KV),e(KV,oWo),e(yF,rWo),e(V,tWo),e(V,LF),e(LF,_pe),e(_pe,aWo),e(LF,nWo),e(LF,ZV),e(ZV,sWo),e(LF,lWo),e(V,iWo),e(V,xF),e(xF,upe),e(upe,dWo),e(xF,cWo),e(xF,eX),e(eX,fWo),e(xF,mWo),e(V,gWo),e(V,$F),e($F,bpe),e(bpe,hWo),e($F,pWo),e($F,oX),e(oX,_Wo),e($F,uWo),e(V,bWo),e(V,kF),e(kF,vpe),e(vpe,vWo),e(kF,FWo),e(kF,rX),e(rX,TWo),e(kF,MWo),e(V,EWo),e(V,SF),e(SF,Fpe),e(Fpe,CWo),e(SF,wWo),e(SF,tX),e(tX,AWo),e(SF,yWo),e(V,LWo),e(V,RF),e(RF,Tpe),e(Tpe,xWo),e(RF,$Wo),e(RF,aX),e(aX,kWo),e(RF,SWo),e(V,RWo),e(V,PF),e(PF,Mpe),e(Mpe,PWo),e(PF,BWo),e(PF,nX),e(nX,IWo),e(PF,NWo),e(V,qWo),e(V,BF),e(BF,Epe),e(Epe,jWo),e(BF,DWo),e(BF,sX),e(sX,GWo),e(BF,OWo),e(V,VWo),e(V,IF),e(IF,Cpe),e(Cpe,XWo),e(IF,zWo),e(IF,lX),e(lX,WWo),e(IF,QWo),e(V,HWo),e(V,NF),e(NF,wpe),e(wpe,UWo),e(NF,JWo),e(NF,iX),e(iX,YWo),e(NF,KWo),e(V,ZWo),e(V,qF),e(qF,Ape),e(Ape,eQo),e(qF,oQo),e(qF,dX),e(dX,rQo),e(qF,tQo),e(V,aQo),e(V,jF),e(jF,ype),e(ype,nQo),e(jF,sQo),e(jF,cX),e(cX,lQo),e(jF,iQo),e(V,dQo),e(V,DF),e(DF,Lpe),e(Lpe,cQo),e(DF,fQo),e(DF,fX),e(fX,mQo),e(DF,gQo),e(V,hQo),e(V,GF),e(GF,xpe),e(xpe,pQo),e(GF,_Qo),e(GF,mX),e(mX,uQo),e(GF,bQo),e(V,vQo),e(V,OF),e(OF,$pe),e($pe,FQo),e(OF,TQo),e(OF,gX),e(gX,MQo),e(OF,EQo),e(V,CQo),e(V,VF),e(VF,kpe),e(kpe,wQo),e(VF,AQo),e(VF,hX),e(hX,yQo),e(VF,LQo),e(V,xQo),e(V,XF),e(XF,Spe),e(Spe,$Qo),e(XF,kQo),e(XF,pX),e(pX,SQo),e(XF,RQo),e(V,PQo),e(V,zF),e(zF,Rpe),e(Rpe,BQo),e(zF,IQo),e(zF,_X),e(_X,NQo),e(zF,qQo),e(V,jQo),e(V,WF),e(WF,Ppe),e(Ppe,DQo),e(WF,GQo),e(WF,uX),e(uX,OQo),e(WF,VQo),e(V,XQo),e(V,QF),e(QF,Bpe),e(Bpe,zQo),e(QF,WQo),e(QF,bX),e(bX,QQo),e(QF,HQo),e(V,UQo),e(V,HF),e(HF,Ipe),e(Ipe,JQo),e(HF,YQo),e(HF,vX),e(vX,KQo),e(HF,ZQo),e(V,eHo),e(V,UF),e(UF,Npe),e(Npe,oHo),e(UF,rHo),e(UF,FX),e(FX,tHo),e(UF,aHo),e(V,nHo),e(V,JF),e(JF,qpe),e(qpe,sHo),e(JF,lHo),e(JF,TX),e(TX,iHo),e(JF,dHo),e(V,cHo),e(V,YF),e(YF,jpe),e(jpe,fHo),e(YF,mHo),e(YF,MX),e(MX,gHo),e(YF,hHo),e(V,pHo),e(V,KF),e(KF,Dpe),e(Dpe,_Ho),e(KF,uHo),e(KF,EX),e(EX,bHo),e(KF,vHo),e(V,FHo),e(V,ZF),e(ZF,Gpe),e(Gpe,THo),e(ZF,MHo),e(ZF,CX),e(CX,EHo),e(ZF,CHo),e(V,wHo),e(V,e6),e(e6,Ope),e(Ope,AHo),e(e6,yHo),e(e6,wX),e(wX,LHo),e(e6,xHo),e(V,$Ho),e(V,o6),e(o6,Vpe),e(Vpe,kHo),e(o6,SHo),e(o6,AX),e(AX,RHo),e(o6,PHo),e(no,BHo),e(no,r6),e(r6,IHo),e(r6,Xpe),e(Xpe,NHo),e(r6,qHo),e(r6,zpe),e(zpe,jHo),e(no,DHo),M(t6,no,null),b(f,sje,u),b(f,rd,u),e(rd,a6),e(a6,Wpe),M(ry,Wpe,null),e(rd,GHo),e(rd,Qpe),e(Qpe,OHo),b(f,lje,u),b(f,qo,u),M(ty,qo,null),e(qo,VHo),e(qo,td),e(td,XHo),e(td,yX),e(yX,zHo),e(td,WHo),e(td,LX),e(LX,QHo),e(td,HHo),e(qo,UHo),e(qo,ay),e(ay,JHo),e(ay,Hpe),e(Hpe,YHo),e(ay,KHo),e(qo,ZHo),e(qo,gt),M(ny,gt,null),e(gt,eUo),e(gt,Upe),e(Upe,oUo),e(gt,rUo),e(gt,ad),e(ad,tUo),e(ad,Jpe),e(Jpe,aUo),e(ad,nUo),e(ad,xX),e(xX,sUo),e(ad,lUo),e(gt,iUo),M(n6,gt,null),e(qo,dUo),e(qo,so),M(sy,so,null),e(so,cUo),e(so,Ype),e(Ype,fUo),e(so,mUo),e(so,qa),e(qa,gUo),e(qa,Kpe),e(Kpe,hUo),e(qa,pUo),e(qa,Zpe),e(Zpe,_Uo),e(qa,uUo),e(qa,e_e),e(e_e,bUo),e(qa,vUo),e(so,FUo),e(so,o_e),e(o_e,s6),e(s6,r_e),e(r_e,TUo),e(s6,MUo),e(s6,$X),e($X,EUo),e(s6,CUo),e(so,wUo),e(so,l6),e(l6,AUo),e(l6,t_e),e(t_e,yUo),e(l6,LUo),e(l6,a_e),e(a_e,xUo),e(so,$Uo),M(i6,so,null),b(f,ije,u),b(f,nd,u),e(nd,d6),e(d6,n_e),M(ly,n_e,null),e(nd,kUo),e(nd,s_e),e(s_e,SUo),b(f,dje,u),b(f,jo,u),M(iy,jo,null),e(jo,RUo),e(jo,sd),e(sd,PUo),e(sd,kX),e(kX,BUo),e(sd,IUo),e(sd,SX),e(SX,NUo),e(sd,qUo),e(jo,jUo),e(jo,dy),e(dy,DUo),e(dy,l_e),e(l_e,GUo),e(dy,OUo),e(jo,VUo),e(jo,ht),M(cy,ht,null),e(ht,XUo),e(ht,i_e),e(i_e,zUo),e(ht,WUo),e(ht,ld),e(ld,QUo),e(ld,d_e),e(d_e,HUo),e(ld,UUo),e(ld,RX),e(RX,JUo),e(ld,YUo),e(ht,KUo),M(c6,ht,null),e(jo,ZUo),e(jo,lo),M(fy,lo,null),e(lo,eJo),e(lo,c_e),e(c_e,oJo),e(lo,rJo),e(lo,ja),e(ja,tJo),e(ja,f_e),e(f_e,aJo),e(ja,nJo),e(ja,m_e),e(m_e,sJo),e(ja,lJo),e(ja,g_e),e(g_e,iJo),e(ja,dJo),e(lo,cJo),e(lo,Fe),e(Fe,f6),e(f6,h_e),e(h_e,fJo),e(f6,mJo),e(f6,PX),e(PX,gJo),e(f6,hJo),e(Fe,pJo),e(Fe,m6),e(m6,p_e),e(p_e,_Jo),e(m6,uJo),e(m6,BX),e(BX,bJo),e(m6,vJo),e(Fe,FJo),e(Fe,g6),e(g6,__e),e(__e,TJo),e(g6,MJo),e(g6,IX),e(IX,EJo),e(g6,CJo),e(Fe,wJo),e(Fe,h6),e(h6,u_e),e(u_e,AJo),e(h6,yJo),e(h6,NX),e(NX,LJo),e(h6,xJo),e(Fe,$Jo),e(Fe,Is),e(Is,b_e),e(b_e,kJo),e(Is,SJo),e(Is,qX),e(qX,RJo),e(Is,PJo),e(Is,jX),e(jX,BJo),e(Is,IJo),e(Fe,NJo),e(Fe,p6),e(p6,v_e),e(v_e,qJo),e(p6,jJo),e(p6,DX),e(DX,DJo),e(p6,GJo),e(Fe,OJo),e(Fe,pt),e(pt,F_e),e(F_e,VJo),e(pt,XJo),e(pt,GX),e(GX,zJo),e(pt,WJo),e(pt,OX),e(OX,QJo),e(pt,HJo),e(pt,VX),e(VX,UJo),e(pt,JJo),e(Fe,YJo),e(Fe,_6),e(_6,T_e),e(T_e,KJo),e(_6,ZJo),e(_6,XX),e(XX,eYo),e(_6,oYo),e(Fe,rYo),e(Fe,u6),e(u6,M_e),e(M_e,tYo),e(u6,aYo),e(u6,zX),e(zX,nYo),e(u6,sYo),e(Fe,lYo),e(Fe,b6),e(b6,E_e),e(E_e,iYo),e(b6,dYo),e(b6,WX),e(WX,cYo),e(b6,fYo),e(Fe,mYo),e(Fe,v6),e(v6,C_e),e(C_e,gYo),e(v6,hYo),e(v6,QX),e(QX,pYo),e(v6,_Yo),e(Fe,uYo),e(Fe,F6),e(F6,w_e),e(w_e,bYo),e(F6,vYo),e(F6,HX),e(HX,FYo),e(F6,TYo),e(Fe,MYo),e(Fe,T6),e(T6,A_e),e(A_e,EYo),e(T6,CYo),e(T6,UX),e(UX,wYo),e(T6,AYo),e(Fe,yYo),e(Fe,M6),e(M6,y_e),e(y_e,LYo),e(M6,xYo),e(M6,JX),e(JX,$Yo),e(M6,kYo),e(lo,SYo),e(lo,E6),e(E6,RYo),e(E6,L_e),e(L_e,PYo),e(E6,BYo),e(E6,x_e),e(x_e,IYo),e(lo,NYo),M(C6,lo,null),b(f,cje,u),b(f,id,u),e(id,w6),e(w6,$_e),M(my,$_e,null),e(id,qYo),e(id,k_e),e(k_e,jYo),b(f,fje,u),b(f,Do,u),M(gy,Do,null),e(Do,DYo),e(Do,dd),e(dd,GYo),e(dd,YX),e(YX,OYo),e(dd,VYo),e(dd,KX),e(KX,XYo),e(dd,zYo),e(Do,WYo),e(Do,hy),e(hy,QYo),e(hy,S_e),e(S_e,HYo),e(hy,UYo),e(Do,JYo),e(Do,_t),M(py,_t,null),e(_t,YYo),e(_t,R_e),e(R_e,KYo),e(_t,ZYo),e(_t,cd),e(cd,eKo),e(cd,P_e),e(P_e,oKo),e(cd,rKo),e(cd,ZX),e(ZX,tKo),e(cd,aKo),e(_t,nKo),M(A6,_t,null),e(Do,sKo),e(Do,io),M(_y,io,null),e(io,lKo),e(io,B_e),e(B_e,iKo),e(io,dKo),e(io,Da),e(Da,cKo),e(Da,I_e),e(I_e,fKo),e(Da,mKo),e(Da,N_e),e(N_e,gKo),e(Da,hKo),e(Da,q_e),e(q_e,pKo),e(Da,_Ko),e(io,uKo),e(io,j_e),e(j_e,y6),e(y6,D_e),e(D_e,bKo),e(y6,vKo),e(y6,ez),e(ez,FKo),e(y6,TKo),e(io,MKo),e(io,L6),e(L6,EKo),e(L6,G_e),e(G_e,CKo),e(L6,wKo),e(L6,O_e),e(O_e,AKo),e(io,yKo),M(x6,io,null),b(f,mje,u),b(f,fd,u),e(fd,$6),e($6,V_e),M(uy,V_e,null),e(fd,LKo),e(fd,X_e),e(X_e,xKo),b(f,gje,u),b(f,Go,u),M(by,Go,null),e(Go,$Ko),e(Go,md),e(md,kKo),e(md,oz),e(oz,SKo),e(md,RKo),e(md,rz),e(rz,PKo),e(md,BKo),e(Go,IKo),e(Go,vy),e(vy,NKo),e(vy,z_e),e(z_e,qKo),e(vy,jKo),e(Go,DKo),e(Go,ut),M(Fy,ut,null),e(ut,GKo),e(ut,W_e),e(W_e,OKo),e(ut,VKo),e(ut,gd),e(gd,XKo),e(gd,Q_e),e(Q_e,zKo),e(gd,WKo),e(gd,tz),e(tz,QKo),e(gd,HKo),e(ut,UKo),M(k6,ut,null),e(Go,JKo),e(Go,co),M(Ty,co,null),e(co,YKo),e(co,H_e),e(H_e,KKo),e(co,ZKo),e(co,Ga),e(Ga,eZo),e(Ga,U_e),e(U_e,oZo),e(Ga,rZo),e(Ga,J_e),e(J_e,tZo),e(Ga,aZo),e(Ga,Y_e),e(Y_e,nZo),e(Ga,sZo),e(co,lZo),e(co,Se),e(Se,S6),e(S6,K_e),e(K_e,iZo),e(S6,dZo),e(S6,az),e(az,cZo),e(S6,fZo),e(Se,mZo),e(Se,R6),e(R6,Z_e),e(Z_e,gZo),e(R6,hZo),e(R6,nz),e(nz,pZo),e(R6,_Zo),e(Se,uZo),e(Se,P6),e(P6,eue),e(eue,bZo),e(P6,vZo),e(P6,sz),e(sz,FZo),e(P6,TZo),e(Se,MZo),e(Se,B6),e(B6,oue),e(oue,EZo),e(B6,CZo),e(B6,lz),e(lz,wZo),e(B6,AZo),e(Se,yZo),e(Se,I6),e(I6,rue),e(rue,LZo),e(I6,xZo),e(I6,iz),e(iz,$Zo),e(I6,kZo),e(Se,SZo),e(Se,N6),e(N6,tue),e(tue,RZo),e(N6,PZo),e(N6,dz),e(dz,BZo),e(N6,IZo),e(Se,NZo),e(Se,q6),e(q6,aue),e(aue,qZo),e(q6,jZo),e(q6,cz),e(cz,DZo),e(q6,GZo),e(Se,OZo),e(Se,j6),e(j6,nue),e(nue,VZo),e(j6,XZo),e(j6,fz),e(fz,zZo),e(j6,WZo),e(Se,QZo),e(Se,D6),e(D6,sue),e(sue,HZo),e(D6,UZo),e(D6,mz),e(mz,JZo),e(D6,YZo),e(co,KZo),e(co,G6),e(G6,ZZo),e(G6,lue),e(lue,eer),e(G6,oer),e(G6,iue),e(iue,rer),e(co,ter),M(O6,co,null),b(f,hje,u),b(f,hd,u),e(hd,V6),e(V6,due),M(My,due,null),e(hd,aer),e(hd,cue),e(cue,ner),b(f,pje,u),b(f,Oo,u),M(Ey,Oo,null),e(Oo,ser),e(Oo,pd),e(pd,ler),e(pd,gz),e(gz,ier),e(pd,der),e(pd,hz),e(hz,cer),e(pd,fer),e(Oo,mer),e(Oo,Cy),e(Cy,ger),e(Cy,fue),e(fue,her),e(Cy,per),e(Oo,_er),e(Oo,bt),M(wy,bt,null),e(bt,uer),e(bt,mue),e(mue,ber),e(bt,ver),e(bt,_d),e(_d,Fer),e(_d,gue),e(gue,Ter),e(_d,Mer),e(_d,pz),e(pz,Eer),e(_d,Cer),e(bt,wer),M(X6,bt,null),e(Oo,Aer),e(Oo,fo),M(Ay,fo,null),e(fo,yer),e(fo,hue),e(hue,Ler),e(fo,xer),e(fo,Oa),e(Oa,$er),e(Oa,pue),e(pue,ker),e(Oa,Ser),e(Oa,_ue),e(_ue,Rer),e(Oa,Per),e(Oa,uue),e(uue,Ber),e(Oa,Ier),e(fo,Ner),e(fo,Kr),e(Kr,z6),e(z6,bue),e(bue,qer),e(z6,jer),e(z6,_z),e(_z,Der),e(z6,Ger),e(Kr,Oer),e(Kr,W6),e(W6,vue),e(vue,Ver),e(W6,Xer),e(W6,uz),e(uz,zer),e(W6,Wer),e(Kr,Qer),e(Kr,Q6),e(Q6,Fue),e(Fue,Her),e(Q6,Uer),e(Q6,bz),e(bz,Jer),e(Q6,Yer),e(Kr,Ker),e(Kr,H6),e(H6,Tue),e(Tue,Zer),e(H6,eor),e(H6,vz),e(vz,oor),e(H6,ror),e(Kr,tor),e(Kr,U6),e(U6,Mue),e(Mue,aor),e(U6,nor),e(U6,Fz),e(Fz,sor),e(U6,lor),e(fo,ior),e(fo,J6),e(J6,dor),e(J6,Eue),e(Eue,cor),e(J6,mor),e(J6,Cue),e(Cue,gor),e(fo,hor),M(Y6,fo,null),b(f,_je,u),b(f,ud,u),e(ud,K6),e(K6,wue),M(yy,wue,null),e(ud,por),e(ud,Aue),e(Aue,_or),b(f,uje,u),b(f,Vo,u),M(Ly,Vo,null),e(Vo,uor),e(Vo,bd),e(bd,bor),e(bd,Tz),e(Tz,vor),e(bd,For),e(bd,Mz),e(Mz,Tor),e(bd,Mor),e(Vo,Eor),e(Vo,xy),e(xy,Cor),e(xy,yue),e(yue,wor),e(xy,Aor),e(Vo,yor),e(Vo,vt),M($y,vt,null),e(vt,Lor),e(vt,Lue),e(Lue,xor),e(vt,$or),e(vt,vd),e(vd,kor),e(vd,xue),e(xue,Sor),e(vd,Ror),e(vd,Ez),e(Ez,Por),e(vd,Bor),e(vt,Ior),M(Z6,vt,null),e(Vo,Nor),e(Vo,mo),M(ky,mo,null),e(mo,qor),e(mo,$ue),e($ue,jor),e(mo,Dor),e(mo,Va),e(Va,Gor),e(Va,kue),e(kue,Oor),e(Va,Vor),e(Va,Sue),e(Sue,Xor),e(Va,zor),e(Va,Rue),e(Rue,Wor),e(Va,Qor),e(mo,Hor),e(mo,Re),e(Re,eT),e(eT,Pue),e(Pue,Uor),e(eT,Jor),e(eT,Cz),e(Cz,Yor),e(eT,Kor),e(Re,Zor),e(Re,oT),e(oT,Bue),e(Bue,err),e(oT,orr),e(oT,wz),e(wz,rrr),e(oT,trr),e(Re,arr),e(Re,rT),e(rT,Iue),e(Iue,nrr),e(rT,srr),e(rT,Az),e(Az,lrr),e(rT,irr),e(Re,drr),e(Re,tT),e(tT,Nue),e(Nue,crr),e(tT,frr),e(tT,yz),e(yz,mrr),e(tT,grr),e(Re,hrr),e(Re,aT),e(aT,que),e(que,prr),e(aT,_rr),e(aT,Lz),e(Lz,urr),e(aT,brr),e(Re,vrr),e(Re,nT),e(nT,jue),e(jue,Frr),e(nT,Trr),e(nT,xz),e(xz,Mrr),e(nT,Err),e(Re,Crr),e(Re,sT),e(sT,Due),e(Due,wrr),e(sT,Arr),e(sT,$z),e($z,yrr),e(sT,Lrr),e(Re,xrr),e(Re,lT),e(lT,Gue),e(Gue,$rr),e(lT,krr),e(lT,kz),e(kz,Srr),e(lT,Rrr),e(Re,Prr),e(Re,iT),e(iT,Oue),e(Oue,Brr),e(iT,Irr),e(iT,Sz),e(Sz,Nrr),e(iT,qrr),e(mo,jrr),e(mo,dT),e(dT,Drr),e(dT,Vue),e(Vue,Grr),e(dT,Orr),e(dT,Xue),e(Xue,Vrr),e(mo,Xrr),M(cT,mo,null),b(f,bje,u),b(f,Fd,u),e(Fd,fT),e(fT,zue),M(Sy,zue,null),e(Fd,zrr),e(Fd,Wue),e(Wue,Wrr),b(f,vje,u),b(f,Xo,u),M(Ry,Xo,null),e(Xo,Qrr),e(Xo,Td),e(Td,Hrr),e(Td,Rz),e(Rz,Urr),e(Td,Jrr),e(Td,Pz),e(Pz,Yrr),e(Td,Krr),e(Xo,Zrr),e(Xo,Py),e(Py,etr),e(Py,Que),e(Que,otr),e(Py,rtr),e(Xo,ttr),e(Xo,Ft),M(By,Ft,null),e(Ft,atr),e(Ft,Hue),e(Hue,ntr),e(Ft,str),e(Ft,Md),e(Md,ltr),e(Md,Uue),e(Uue,itr),e(Md,dtr),e(Md,Bz),e(Bz,ctr),e(Md,ftr),e(Ft,mtr),M(mT,Ft,null),e(Xo,gtr),e(Xo,go),M(Iy,go,null),e(go,htr),e(go,Jue),e(Jue,ptr),e(go,_tr),e(go,Xa),e(Xa,utr),e(Xa,Yue),e(Yue,btr),e(Xa,vtr),e(Xa,Kue),e(Kue,Ftr),e(Xa,Ttr),e(Xa,Zue),e(Zue,Mtr),e(Xa,Etr),e(go,Ctr),e(go,Ny),e(Ny,gT),e(gT,e2e),e(e2e,wtr),e(gT,Atr),e(gT,Iz),e(Iz,ytr),e(gT,Ltr),e(Ny,xtr),e(Ny,hT),e(hT,o2e),e(o2e,$tr),e(hT,ktr),e(hT,Nz),e(Nz,Str),e(hT,Rtr),e(go,Ptr),e(go,pT),e(pT,Btr),e(pT,r2e),e(r2e,Itr),e(pT,Ntr),e(pT,t2e),e(t2e,qtr),e(go,jtr),M(_T,go,null),b(f,Fje,u),b(f,Ed,u),e(Ed,uT),e(uT,a2e),M(qy,a2e,null),e(Ed,Dtr),e(Ed,n2e),e(n2e,Gtr),b(f,Tje,u),b(f,zo,u),M(jy,zo,null),e(zo,Otr),e(zo,Cd),e(Cd,Vtr),e(Cd,qz),e(qz,Xtr),e(Cd,ztr),e(Cd,jz),e(jz,Wtr),e(Cd,Qtr),e(zo,Htr),e(zo,Dy),e(Dy,Utr),e(Dy,s2e),e(s2e,Jtr),e(Dy,Ytr),e(zo,Ktr),e(zo,Tt),M(Gy,Tt,null),e(Tt,Ztr),e(Tt,l2e),e(l2e,ear),e(Tt,oar),e(Tt,wd),e(wd,rar),e(wd,i2e),e(i2e,tar),e(wd,aar),e(wd,Dz),e(Dz,nar),e(wd,sar),e(Tt,lar),M(bT,Tt,null),e(zo,iar),e(zo,ho),M(Oy,ho,null),e(ho,dar),e(ho,d2e),e(d2e,car),e(ho,far),e(ho,za),e(za,mar),e(za,c2e),e(c2e,gar),e(za,har),e(za,f2e),e(f2e,par),e(za,_ar),e(za,m2e),e(m2e,uar),e(za,bar),e(ho,Far),e(ho,Zr),e(Zr,vT),e(vT,g2e),e(g2e,Tar),e(vT,Mar),e(vT,Gz),e(Gz,Ear),e(vT,Car),e(Zr,war),e(Zr,FT),e(FT,h2e),e(h2e,Aar),e(FT,yar),e(FT,Oz),e(Oz,Lar),e(FT,xar),e(Zr,$ar),e(Zr,TT),e(TT,p2e),e(p2e,kar),e(TT,Sar),e(TT,Vz),e(Vz,Rar),e(TT,Par),e(Zr,Bar),e(Zr,MT),e(MT,_2e),e(_2e,Iar),e(MT,Nar),e(MT,Xz),e(Xz,qar),e(MT,jar),e(Zr,Dar),e(Zr,ET),e(ET,u2e),e(u2e,Gar),e(ET,Oar),e(ET,zz),e(zz,Var),e(ET,Xar),e(ho,zar),e(ho,CT),e(CT,War),e(CT,b2e),e(b2e,Qar),e(CT,Har),e(CT,v2e),e(v2e,Uar),e(ho,Jar),M(wT,ho,null),b(f,Mje,u),b(f,Ad,u),e(Ad,AT),e(AT,F2e),M(Vy,F2e,null),e(Ad,Yar),e(Ad,T2e),e(T2e,Kar),b(f,Eje,u),b(f,Wo,u),M(Xy,Wo,null),e(Wo,Zar),e(Wo,yd),e(yd,enr),e(yd,Wz),e(Wz,onr),e(yd,rnr),e(yd,Qz),e(Qz,tnr),e(yd,anr),e(Wo,nnr),e(Wo,zy),e(zy,snr),e(zy,M2e),e(M2e,lnr),e(zy,inr),e(Wo,dnr),e(Wo,Mt),M(Wy,Mt,null),e(Mt,cnr),e(Mt,E2e),e(E2e,fnr),e(Mt,mnr),e(Mt,Ld),e(Ld,gnr),e(Ld,C2e),e(C2e,hnr),e(Ld,pnr),e(Ld,Hz),e(Hz,_nr),e(Ld,unr),e(Mt,bnr),M(yT,Mt,null),e(Wo,vnr),e(Wo,po),M(Qy,po,null),e(po,Fnr),e(po,w2e),e(w2e,Tnr),e(po,Mnr),e(po,Wa),e(Wa,Enr),e(Wa,A2e),e(A2e,Cnr),e(Wa,wnr),e(Wa,y2e),e(y2e,Anr),e(Wa,ynr),e(Wa,L2e),e(L2e,Lnr),e(Wa,xnr),e(po,$nr),e(po,xd),e(xd,LT),e(LT,x2e),e(x2e,knr),e(LT,Snr),e(LT,Uz),e(Uz,Rnr),e(LT,Pnr),e(xd,Bnr),e(xd,xT),e(xT,$2e),e($2e,Inr),e(xT,Nnr),e(xT,Jz),e(Jz,qnr),e(xT,jnr),e(xd,Dnr),e(xd,$T),e($T,k2e),e(k2e,Gnr),e($T,Onr),e($T,Yz),e(Yz,Vnr),e($T,Xnr),e(po,znr),e(po,kT),e(kT,Wnr),e(kT,S2e),e(S2e,Qnr),e(kT,Hnr),e(kT,R2e),e(R2e,Unr),e(po,Jnr),M(ST,po,null),b(f,Cje,u),b(f,$d,u),e($d,RT),e(RT,P2e),M(Hy,P2e,null),e($d,Ynr),e($d,B2e),e(B2e,Knr),b(f,wje,u),b(f,Qo,u),M(Uy,Qo,null),e(Qo,Znr),e(Qo,kd),e(kd,esr),e(kd,Kz),e(Kz,osr),e(kd,rsr),e(kd,Zz),e(Zz,tsr),e(kd,asr),e(Qo,nsr),e(Qo,Jy),e(Jy,ssr),e(Jy,I2e),e(I2e,lsr),e(Jy,isr),e(Qo,dsr),e(Qo,Et),M(Yy,Et,null),e(Et,csr),e(Et,N2e),e(N2e,fsr),e(Et,msr),e(Et,Sd),e(Sd,gsr),e(Sd,q2e),e(q2e,hsr),e(Sd,psr),e(Sd,eW),e(eW,_sr),e(Sd,usr),e(Et,bsr),M(PT,Et,null),e(Qo,vsr),e(Qo,_o),M(Ky,_o,null),e(_o,Fsr),e(_o,j2e),e(j2e,Tsr),e(_o,Msr),e(_o,Qa),e(Qa,Esr),e(Qa,D2e),e(D2e,Csr),e(Qa,wsr),e(Qa,G2e),e(G2e,Asr),e(Qa,ysr),e(Qa,O2e),e(O2e,Lsr),e(Qa,xsr),e(_o,$sr),e(_o,Zy),e(Zy,BT),e(BT,V2e),e(V2e,ksr),e(BT,Ssr),e(BT,oW),e(oW,Rsr),e(BT,Psr),e(Zy,Bsr),e(Zy,IT),e(IT,X2e),e(X2e,Isr),e(IT,Nsr),e(IT,rW),e(rW,qsr),e(IT,jsr),e(_o,Dsr),e(_o,NT),e(NT,Gsr),e(NT,z2e),e(z2e,Osr),e(NT,Vsr),e(NT,W2e),e(W2e,Xsr),e(_o,zsr),M(qT,_o,null),b(f,Aje,u),b(f,Rd,u),e(Rd,jT),e(jT,Q2e),M(eL,Q2e,null),e(Rd,Wsr),e(Rd,H2e),e(H2e,Qsr),b(f,yje,u),b(f,Ho,u),M(oL,Ho,null),e(Ho,Hsr),e(Ho,Pd),e(Pd,Usr),e(Pd,tW),e(tW,Jsr),e(Pd,Ysr),e(Pd,aW),e(aW,Ksr),e(Pd,Zsr),e(Ho,elr),e(Ho,rL),e(rL,olr),e(rL,U2e),e(U2e,rlr),e(rL,tlr),e(Ho,alr),e(Ho,Ct),M(tL,Ct,null),e(Ct,nlr),e(Ct,J2e),e(J2e,slr),e(Ct,llr),e(Ct,Bd),e(Bd,ilr),e(Bd,Y2e),e(Y2e,dlr),e(Bd,clr),e(Bd,nW),e(nW,flr),e(Bd,mlr),e(Ct,glr),M(DT,Ct,null),e(Ho,hlr),e(Ho,uo),M(aL,uo,null),e(uo,plr),e(uo,K2e),e(K2e,_lr),e(uo,ulr),e(uo,Ha),e(Ha,blr),e(Ha,Z2e),e(Z2e,vlr),e(Ha,Flr),e(Ha,e1e),e(e1e,Tlr),e(Ha,Mlr),e(Ha,o1e),e(o1e,Elr),e(Ha,Clr),e(uo,wlr),e(uo,r1e),e(r1e,GT),e(GT,t1e),e(t1e,Alr),e(GT,ylr),e(GT,sW),e(sW,Llr),e(GT,xlr),e(uo,$lr),e(uo,OT),e(OT,klr),e(OT,a1e),e(a1e,Slr),e(OT,Rlr),e(OT,n1e),e(n1e,Plr),e(uo,Blr),M(VT,uo,null),b(f,Lje,u),b(f,Id,u),e(Id,XT),e(XT,s1e),M(nL,s1e,null),e(Id,Ilr),e(Id,l1e),e(l1e,Nlr),b(f,xje,u),b(f,Uo,u),M(sL,Uo,null),e(Uo,qlr),e(Uo,Nd),e(Nd,jlr),e(Nd,lW),e(lW,Dlr),e(Nd,Glr),e(Nd,iW),e(iW,Olr),e(Nd,Vlr),e(Uo,Xlr),e(Uo,lL),e(lL,zlr),e(lL,i1e),e(i1e,Wlr),e(lL,Qlr),e(Uo,Hlr),e(Uo,wt),M(iL,wt,null),e(wt,Ulr),e(wt,d1e),e(d1e,Jlr),e(wt,Ylr),e(wt,qd),e(qd,Klr),e(qd,c1e),e(c1e,Zlr),e(qd,eir),e(qd,dW),e(dW,oir),e(qd,rir),e(wt,tir),M(zT,wt,null),e(Uo,air),e(Uo,bo),M(dL,bo,null),e(bo,nir),e(bo,f1e),e(f1e,sir),e(bo,lir),e(bo,Ua),e(Ua,iir),e(Ua,m1e),e(m1e,dir),e(Ua,cir),e(Ua,g1e),e(g1e,fir),e(Ua,mir),e(Ua,h1e),e(h1e,gir),e(Ua,hir),e(bo,pir),e(bo,Ja),e(Ja,WT),e(WT,p1e),e(p1e,_ir),e(WT,uir),e(WT,cW),e(cW,bir),e(WT,vir),e(Ja,Fir),e(Ja,QT),e(QT,_1e),e(_1e,Tir),e(QT,Mir),e(QT,fW),e(fW,Eir),e(QT,Cir),e(Ja,wir),e(Ja,HT),e(HT,u1e),e(u1e,Air),e(HT,yir),e(HT,mW),e(mW,Lir),e(HT,xir),e(Ja,$ir),e(Ja,UT),e(UT,b1e),e(b1e,kir),e(UT,Sir),e(UT,gW),e(gW,Rir),e(UT,Pir),e(bo,Bir),e(bo,JT),e(JT,Iir),e(JT,v1e),e(v1e,Nir),e(JT,qir),e(JT,F1e),e(F1e,jir),e(bo,Dir),M(YT,bo,null),b(f,$je,u),b(f,jd,u),e(jd,KT),e(KT,T1e),M(cL,T1e,null),e(jd,Gir),e(jd,M1e),e(M1e,Oir),b(f,kje,u),b(f,Jo,u),M(fL,Jo,null),e(Jo,Vir),e(Jo,Dd),e(Dd,Xir),e(Dd,hW),e(hW,zir),e(Dd,Wir),e(Dd,pW),e(pW,Qir),e(Dd,Hir),e(Jo,Uir),e(Jo,mL),e(mL,Jir),e(mL,E1e),e(E1e,Yir),e(mL,Kir),e(Jo,Zir),e(Jo,At),M(gL,At,null),e(At,edr),e(At,C1e),e(C1e,odr),e(At,rdr),e(At,Gd),e(Gd,tdr),e(Gd,w1e),e(w1e,adr),e(Gd,ndr),e(Gd,_W),e(_W,sdr),e(Gd,ldr),e(At,idr),M(ZT,At,null),e(Jo,ddr),e(Jo,vo),M(hL,vo,null),e(vo,cdr),e(vo,A1e),e(A1e,fdr),e(vo,mdr),e(vo,Ya),e(Ya,gdr),e(Ya,y1e),e(y1e,hdr),e(Ya,pdr),e(Ya,L1e),e(L1e,_dr),e(Ya,udr),e(Ya,x1e),e(x1e,bdr),e(Ya,vdr),e(vo,Fdr),e(vo,$1e),e($1e,e7),e(e7,k1e),e(k1e,Tdr),e(e7,Mdr),e(e7,uW),e(uW,Edr),e(e7,Cdr),e(vo,wdr),e(vo,o7),e(o7,Adr),e(o7,S1e),e(S1e,ydr),e(o7,Ldr),e(o7,R1e),e(R1e,xdr),e(vo,$dr),M(r7,vo,null),b(f,Sje,u),b(f,Od,u),e(Od,t7),e(t7,P1e),M(pL,P1e,null),e(Od,kdr),e(Od,B1e),e(B1e,Sdr),b(f,Rje,u),b(f,Yo,u),M(_L,Yo,null),e(Yo,Rdr),e(Yo,Vd),e(Vd,Pdr),e(Vd,bW),e(bW,Bdr),e(Vd,Idr),e(Vd,vW),e(vW,Ndr),e(Vd,qdr),e(Yo,jdr),e(Yo,uL),e(uL,Ddr),e(uL,I1e),e(I1e,Gdr),e(uL,Odr),e(Yo,Vdr),e(Yo,yt),M(bL,yt,null),e(yt,Xdr),e(yt,N1e),e(N1e,zdr),e(yt,Wdr),e(yt,Xd),e(Xd,Qdr),e(Xd,q1e),e(q1e,Hdr),e(Xd,Udr),e(Xd,FW),e(FW,Jdr),e(Xd,Ydr),e(yt,Kdr),M(a7,yt,null),e(Yo,Zdr),e(Yo,wr),M(vL,wr,null),e(wr,ecr),e(wr,j1e),e(j1e,ocr),e(wr,rcr),e(wr,Ka),e(Ka,tcr),e(Ka,D1e),e(D1e,acr),e(Ka,ncr),e(Ka,G1e),e(G1e,scr),e(Ka,lcr),e(Ka,O1e),e(O1e,icr),e(Ka,dcr),e(wr,ccr),e(wr,q),e(q,n7),e(n7,V1e),e(V1e,fcr),e(n7,mcr),e(n7,TW),e(TW,gcr),e(n7,hcr),e(q,pcr),e(q,s7),e(s7,X1e),e(X1e,_cr),e(s7,ucr),e(s7,MW),e(MW,bcr),e(s7,vcr),e(q,Fcr),e(q,l7),e(l7,z1e),e(z1e,Tcr),e(l7,Mcr),e(l7,EW),e(EW,Ecr),e(l7,Ccr),e(q,wcr),e(q,i7),e(i7,W1e),e(W1e,Acr),e(i7,ycr),e(i7,CW),e(CW,Lcr),e(i7,xcr),e(q,$cr),e(q,d7),e(d7,Q1e),e(Q1e,kcr),e(d7,Scr),e(d7,wW),e(wW,Rcr),e(d7,Pcr),e(q,Bcr),e(q,c7),e(c7,H1e),e(H1e,Icr),e(c7,Ncr),e(c7,AW),e(AW,qcr),e(c7,jcr),e(q,Dcr),e(q,f7),e(f7,U1e),e(U1e,Gcr),e(f7,Ocr),e(f7,yW),e(yW,Vcr),e(f7,Xcr),e(q,zcr),e(q,m7),e(m7,J1e),e(J1e,Wcr),e(m7,Qcr),e(m7,LW),e(LW,Hcr),e(m7,Ucr),e(q,Jcr),e(q,g7),e(g7,Y1e),e(Y1e,Ycr),e(g7,Kcr),e(g7,xW),e(xW,Zcr),e(g7,efr),e(q,ofr),e(q,h7),e(h7,K1e),e(K1e,rfr),e(h7,tfr),e(h7,$W),e($W,afr),e(h7,nfr),e(q,sfr),e(q,p7),e(p7,Z1e),e(Z1e,lfr),e(p7,ifr),e(p7,kW),e(kW,dfr),e(p7,cfr),e(q,ffr),e(q,_7),e(_7,ebe),e(ebe,mfr),e(_7,gfr),e(_7,SW),e(SW,hfr),e(_7,pfr),e(q,_fr),e(q,u7),e(u7,obe),e(obe,ufr),e(u7,bfr),e(u7,RW),e(RW,vfr),e(u7,Ffr),e(q,Tfr),e(q,b7),e(b7,rbe),e(rbe,Mfr),e(b7,Efr),e(b7,PW),e(PW,Cfr),e(b7,wfr),e(q,Afr),e(q,v7),e(v7,tbe),e(tbe,yfr),e(v7,Lfr),e(v7,BW),e(BW,xfr),e(v7,$fr),e(q,kfr),e(q,F7),e(F7,abe),e(abe,Sfr),e(F7,Rfr),e(F7,IW),e(IW,Pfr),e(F7,Bfr),e(q,Ifr),e(q,T7),e(T7,nbe),e(nbe,Nfr),e(T7,qfr),e(T7,NW),e(NW,jfr),e(T7,Dfr),e(q,Gfr),e(q,Ns),e(Ns,sbe),e(sbe,Ofr),e(Ns,Vfr),e(Ns,qW),e(qW,Xfr),e(Ns,zfr),e(Ns,jW),e(jW,Wfr),e(Ns,Qfr),e(q,Hfr),e(q,M7),e(M7,lbe),e(lbe,Ufr),e(M7,Jfr),e(M7,DW),e(DW,Yfr),e(M7,Kfr),e(q,Zfr),e(q,E7),e(E7,ibe),e(ibe,emr),e(E7,omr),e(E7,GW),e(GW,rmr),e(E7,tmr),e(q,amr),e(q,C7),e(C7,dbe),e(dbe,nmr),e(C7,smr),e(C7,OW),e(OW,lmr),e(C7,imr),e(q,dmr),e(q,w7),e(w7,cbe),e(cbe,cmr),e(w7,fmr),e(w7,VW),e(VW,mmr),e(w7,gmr),e(q,hmr),e(q,A7),e(A7,fbe),e(fbe,pmr),e(A7,_mr),e(A7,XW),e(XW,umr),e(A7,bmr),e(q,vmr),e(q,y7),e(y7,mbe),e(mbe,Fmr),e(y7,Tmr),e(y7,zW),e(zW,Mmr),e(y7,Emr),e(q,Cmr),e(q,L7),e(L7,gbe),e(gbe,wmr),e(L7,Amr),e(L7,WW),e(WW,ymr),e(L7,Lmr),e(q,xmr),e(q,x7),e(x7,hbe),e(hbe,$mr),e(x7,kmr),e(x7,QW),e(QW,Smr),e(x7,Rmr),e(q,Pmr),e(q,$7),e($7,pbe),e(pbe,Bmr),e($7,Imr),e($7,HW),e(HW,Nmr),e($7,qmr),e(q,jmr),e(q,k7),e(k7,_be),e(_be,Dmr),e(k7,Gmr),e(k7,UW),e(UW,Omr),e(k7,Vmr),e(q,Xmr),e(q,S7),e(S7,ube),e(ube,zmr),e(S7,Wmr),e(S7,JW),e(JW,Qmr),e(S7,Hmr),e(q,Umr),e(q,R7),e(R7,bbe),e(bbe,Jmr),e(R7,Ymr),e(R7,YW),e(YW,Kmr),e(R7,Zmr),e(q,egr),e(q,P7),e(P7,vbe),e(vbe,ogr),e(P7,rgr),e(P7,KW),e(KW,tgr),e(P7,agr),e(q,ngr),e(q,B7),e(B7,Fbe),e(Fbe,sgr),e(B7,lgr),e(B7,ZW),e(ZW,igr),e(B7,dgr),e(q,cgr),e(q,I7),e(I7,Tbe),e(Tbe,fgr),e(I7,mgr),e(I7,eQ),e(eQ,ggr),e(I7,hgr),e(q,pgr),e(q,N7),e(N7,Mbe),e(Mbe,_gr),e(N7,ugr),e(N7,oQ),e(oQ,bgr),e(N7,vgr),e(q,Fgr),e(q,q7),e(q7,Ebe),e(Ebe,Tgr),e(q7,Mgr),e(q7,rQ),e(rQ,Egr),e(q7,Cgr),e(q,wgr),e(q,j7),e(j7,Cbe),e(Cbe,Agr),e(j7,ygr),e(j7,tQ),e(tQ,Lgr),e(j7,xgr),e(q,$gr),e(q,D7),e(D7,wbe),e(wbe,kgr),e(D7,Sgr),e(D7,aQ),e(aQ,Rgr),e(D7,Pgr),e(q,Bgr),e(q,G7),e(G7,Abe),e(Abe,Igr),e(G7,Ngr),e(G7,nQ),e(nQ,qgr),e(G7,jgr),e(q,Dgr),e(q,O7),e(O7,ybe),e(ybe,Ggr),e(O7,Ogr),e(O7,sQ),e(sQ,Vgr),e(O7,Xgr),e(q,zgr),e(q,V7),e(V7,Lbe),e(Lbe,Wgr),e(V7,Qgr),e(V7,lQ),e(lQ,Hgr),e(V7,Ugr),e(q,Jgr),e(q,X7),e(X7,xbe),e(xbe,Ygr),e(X7,Kgr),e(X7,iQ),e(iQ,Zgr),e(X7,ehr),e(q,ohr),e(q,z7),e(z7,$be),e($be,rhr),e(z7,thr),e(z7,dQ),e(dQ,ahr),e(z7,nhr),e(q,shr),e(q,W7),e(W7,kbe),e(kbe,lhr),e(W7,ihr),e(W7,cQ),e(cQ,dhr),e(W7,chr),e(q,fhr),e(q,Q7),e(Q7,Sbe),e(Sbe,mhr),e(Q7,ghr),e(Q7,fQ),e(fQ,hhr),e(Q7,phr),e(q,_hr),e(q,H7),e(H7,Rbe),e(Rbe,uhr),e(H7,bhr),e(H7,mQ),e(mQ,vhr),e(H7,Fhr),e(q,Thr),e(q,U7),e(U7,Pbe),e(Pbe,Mhr),e(U7,Ehr),e(U7,gQ),e(gQ,Chr),e(U7,whr),e(wr,Ahr),M(J7,wr,null),b(f,Pje,u),b(f,zd,u),e(zd,Y7),e(Y7,Bbe),M(FL,Bbe,null),e(zd,yhr),e(zd,Ibe),e(Ibe,Lhr),b(f,Bje,u),b(f,Ko,u),M(TL,Ko,null),e(Ko,xhr),e(Ko,Wd),e(Wd,$hr),e(Wd,hQ),e(hQ,khr),e(Wd,Shr),e(Wd,pQ),e(pQ,Rhr),e(Wd,Phr),e(Ko,Bhr),e(Ko,ML),e(ML,Ihr),e(ML,Nbe),e(Nbe,Nhr),e(ML,qhr),e(Ko,jhr),e(Ko,Lt),M(EL,Lt,null),e(Lt,Dhr),e(Lt,qbe),e(qbe,Ghr),e(Lt,Ohr),e(Lt,Qd),e(Qd,Vhr),e(Qd,jbe),e(jbe,Xhr),e(Qd,zhr),e(Qd,_Q),e(_Q,Whr),e(Qd,Qhr),e(Lt,Hhr),M(K7,Lt,null),e(Ko,Uhr),e(Ko,Ar),M(CL,Ar,null),e(Ar,Jhr),e(Ar,Dbe),e(Dbe,Yhr),e(Ar,Khr),e(Ar,Za),e(Za,Zhr),e(Za,Gbe),e(Gbe,epr),e(Za,opr),e(Za,Obe),e(Obe,rpr),e(Za,tpr),e(Za,Vbe),e(Vbe,apr),e(Za,npr),e(Ar,spr),e(Ar,se),e(se,Z7),e(Z7,Xbe),e(Xbe,lpr),e(Z7,ipr),e(Z7,uQ),e(uQ,dpr),e(Z7,cpr),e(se,fpr),e(se,e9),e(e9,zbe),e(zbe,mpr),e(e9,gpr),e(e9,bQ),e(bQ,hpr),e(e9,ppr),e(se,_pr),e(se,o9),e(o9,Wbe),e(Wbe,upr),e(o9,bpr),e(o9,vQ),e(vQ,vpr),e(o9,Fpr),e(se,Tpr),e(se,r9),e(r9,Qbe),e(Qbe,Mpr),e(r9,Epr),e(r9,FQ),e(FQ,Cpr),e(r9,wpr),e(se,Apr),e(se,t9),e(t9,Hbe),e(Hbe,ypr),e(t9,Lpr),e(t9,TQ),e(TQ,xpr),e(t9,$pr),e(se,kpr),e(se,a9),e(a9,Ube),e(Ube,Spr),e(a9,Rpr),e(a9,MQ),e(MQ,Ppr),e(a9,Bpr),e(se,Ipr),e(se,n9),e(n9,Jbe),e(Jbe,Npr),e(n9,qpr),e(n9,EQ),e(EQ,jpr),e(n9,Dpr),e(se,Gpr),e(se,s9),e(s9,Ybe),e(Ybe,Opr),e(s9,Vpr),e(s9,CQ),e(CQ,Xpr),e(s9,zpr),e(se,Wpr),e(se,l9),e(l9,Kbe),e(Kbe,Qpr),e(l9,Hpr),e(l9,wQ),e(wQ,Upr),e(l9,Jpr),e(se,Ypr),e(se,i9),e(i9,Zbe),e(Zbe,Kpr),e(i9,Zpr),e(i9,AQ),e(AQ,e_r),e(i9,o_r),e(se,r_r),e(se,d9),e(d9,eve),e(eve,t_r),e(d9,a_r),e(d9,yQ),e(yQ,n_r),e(d9,s_r),e(se,l_r),e(se,c9),e(c9,ove),e(ove,i_r),e(c9,d_r),e(c9,LQ),e(LQ,c_r),e(c9,f_r),e(se,m_r),e(se,f9),e(f9,rve),e(rve,g_r),e(f9,h_r),e(f9,xQ),e(xQ,p_r),e(f9,__r),e(se,u_r),e(se,m9),e(m9,tve),e(tve,b_r),e(m9,v_r),e(m9,$Q),e($Q,F_r),e(m9,T_r),e(se,M_r),e(se,g9),e(g9,ave),e(ave,E_r),e(g9,C_r),e(g9,kQ),e(kQ,w_r),e(g9,A_r),e(se,y_r),e(se,h9),e(h9,nve),e(nve,L_r),e(h9,x_r),e(h9,SQ),e(SQ,$_r),e(h9,k_r),e(se,S_r),e(se,p9),e(p9,sve),e(sve,R_r),e(p9,P_r),e(p9,RQ),e(RQ,B_r),e(p9,I_r),e(se,N_r),e(se,_9),e(_9,lve),e(lve,q_r),e(_9,j_r),e(_9,PQ),e(PQ,D_r),e(_9,G_r),e(se,O_r),e(se,u9),e(u9,ive),e(ive,V_r),e(u9,X_r),e(u9,BQ),e(BQ,z_r),e(u9,W_r),e(se,Q_r),e(se,b9),e(b9,dve),e(dve,H_r),e(b9,U_r),e(b9,IQ),e(IQ,J_r),e(b9,Y_r),e(se,K_r),e(se,v9),e(v9,cve),e(cve,Z_r),e(v9,eur),e(v9,NQ),e(NQ,our),e(v9,rur),e(se,tur),e(se,F9),e(F9,fve),e(fve,aur),e(F9,nur),e(F9,qQ),e(qQ,sur),e(F9,lur),e(se,iur),e(se,T9),e(T9,mve),e(mve,dur),e(T9,cur),e(T9,jQ),e(jQ,fur),e(T9,mur),e(Ar,gur),M(M9,Ar,null),b(f,Ije,u),b(f,Hd,u),e(Hd,E9),e(E9,gve),M(wL,gve,null),e(Hd,hur),e(Hd,hve),e(hve,pur),b(f,Nje,u),b(f,Zo,u),M(AL,Zo,null),e(Zo,_ur),e(Zo,Ud),e(Ud,uur),e(Ud,DQ),e(DQ,bur),e(Ud,vur),e(Ud,GQ),e(GQ,Fur),e(Ud,Tur),e(Zo,Mur),e(Zo,yL),e(yL,Eur),e(yL,pve),e(pve,Cur),e(yL,wur),e(Zo,Aur),e(Zo,xt),M(LL,xt,null),e(xt,yur),e(xt,_ve),e(_ve,Lur),e(xt,xur),e(xt,Jd),e(Jd,$ur),e(Jd,uve),e(uve,kur),e(Jd,Sur),e(Jd,OQ),e(OQ,Rur),e(Jd,Pur),e(xt,Bur),M(C9,xt,null),e(Zo,Iur),e(Zo,yr),M(xL,yr,null),e(yr,Nur),e(yr,bve),e(bve,qur),e(yr,jur),e(yr,en),e(en,Dur),e(en,vve),e(vve,Gur),e(en,Our),e(en,Fve),e(Fve,Vur),e(en,Xur),e(en,Tve),e(Tve,zur),e(en,Wur),e(yr,Qur),e(yr,Ee),e(Ee,w9),e(w9,Mve),e(Mve,Hur),e(w9,Uur),e(w9,VQ),e(VQ,Jur),e(w9,Yur),e(Ee,Kur),e(Ee,A9),e(A9,Eve),e(Eve,Zur),e(A9,e2r),e(A9,XQ),e(XQ,o2r),e(A9,r2r),e(Ee,t2r),e(Ee,y9),e(y9,Cve),e(Cve,a2r),e(y9,n2r),e(y9,zQ),e(zQ,s2r),e(y9,l2r),e(Ee,i2r),e(Ee,L9),e(L9,wve),e(wve,d2r),e(L9,c2r),e(L9,WQ),e(WQ,f2r),e(L9,m2r),e(Ee,g2r),e(Ee,x9),e(x9,Ave),e(Ave,h2r),e(x9,p2r),e(x9,QQ),e(QQ,_2r),e(x9,u2r),e(Ee,b2r),e(Ee,$9),e($9,yve),e(yve,v2r),e($9,F2r),e($9,HQ),e(HQ,T2r),e($9,M2r),e(Ee,E2r),e(Ee,k9),e(k9,Lve),e(Lve,C2r),e(k9,w2r),e(k9,UQ),e(UQ,A2r),e(k9,y2r),e(Ee,L2r),e(Ee,S9),e(S9,xve),e(xve,x2r),e(S9,$2r),e(S9,JQ),e(JQ,k2r),e(S9,S2r),e(Ee,R2r),e(Ee,R9),e(R9,$ve),e($ve,P2r),e(R9,B2r),e(R9,YQ),e(YQ,I2r),e(R9,N2r),e(Ee,q2r),e(Ee,P9),e(P9,kve),e(kve,j2r),e(P9,D2r),e(P9,KQ),e(KQ,G2r),e(P9,O2r),e(Ee,V2r),e(Ee,B9),e(B9,Sve),e(Sve,X2r),e(B9,z2r),e(B9,ZQ),e(ZQ,W2r),e(B9,Q2r),e(Ee,H2r),e(Ee,I9),e(I9,Rve),e(Rve,U2r),e(I9,J2r),e(I9,eH),e(eH,Y2r),e(I9,K2r),e(yr,Z2r),M(N9,yr,null),b(f,qje,u),b(f,Yd,u),e(Yd,q9),e(q9,Pve),M($L,Pve,null),e(Yd,e1r),e(Yd,Bve),e(Bve,o1r),b(f,jje,u),b(f,er,u),M(kL,er,null),e(er,r1r),e(er,Kd),e(Kd,t1r),e(Kd,oH),e(oH,a1r),e(Kd,n1r),e(Kd,rH),e(rH,s1r),e(Kd,l1r),e(er,i1r),e(er,SL),e(SL,d1r),e(SL,Ive),e(Ive,c1r),e(SL,f1r),e(er,m1r),e(er,$t),M(RL,$t,null),e($t,g1r),e($t,Nve),e(Nve,h1r),e($t,p1r),e($t,Zd),e(Zd,_1r),e(Zd,qve),e(qve,u1r),e(Zd,b1r),e(Zd,tH),e(tH,v1r),e(Zd,F1r),e($t,T1r),M(j9,$t,null),e(er,M1r),e(er,Lr),M(PL,Lr,null),e(Lr,E1r),e(Lr,jve),e(jve,C1r),e(Lr,w1r),e(Lr,on),e(on,A1r),e(on,Dve),e(Dve,y1r),e(on,L1r),e(on,Gve),e(Gve,x1r),e(on,$1r),e(on,Ove),e(Ove,k1r),e(on,S1r),e(Lr,R1r),e(Lr,rn),e(rn,D9),e(D9,Vve),e(Vve,P1r),e(D9,B1r),e(D9,aH),e(aH,I1r),e(D9,N1r),e(rn,q1r),e(rn,G9),e(G9,Xve),e(Xve,j1r),e(G9,D1r),e(G9,nH),e(nH,G1r),e(G9,O1r),e(rn,V1r),e(rn,O9),e(O9,zve),e(zve,X1r),e(O9,z1r),e(O9,sH),e(sH,W1r),e(O9,Q1r),e(rn,H1r),e(rn,V9),e(V9,Wve),e(Wve,U1r),e(V9,J1r),e(V9,lH),e(lH,Y1r),e(V9,K1r),e(Lr,Z1r),M(X9,Lr,null),b(f,Dje,u),b(f,ec,u),e(ec,z9),e(z9,Qve),M(BL,Qve,null),e(ec,ebr),e(ec,Hve),e(Hve,obr),b(f,Gje,u),b(f,or,u),M(IL,or,null),e(or,rbr),e(or,oc),e(oc,tbr),e(oc,iH),e(iH,abr),e(oc,nbr),e(oc,dH),e(dH,sbr),e(oc,lbr),e(or,ibr),e(or,NL),e(NL,dbr),e(NL,Uve),e(Uve,cbr),e(NL,fbr),e(or,mbr),e(or,kt),M(qL,kt,null),e(kt,gbr),e(kt,Jve),e(Jve,hbr),e(kt,pbr),e(kt,rc),e(rc,_br),e(rc,Yve),e(Yve,ubr),e(rc,bbr),e(rc,cH),e(cH,vbr),e(rc,Fbr),e(kt,Tbr),M(W9,kt,null),e(or,Mbr),e(or,xr),M(jL,xr,null),e(xr,Ebr),e(xr,Kve),e(Kve,Cbr),e(xr,wbr),e(xr,tn),e(tn,Abr),e(tn,Zve),e(Zve,ybr),e(tn,Lbr),e(tn,eFe),e(eFe,xbr),e(tn,$br),e(tn,oFe),e(oFe,kbr),e(tn,Sbr),e(xr,Rbr),e(xr,ie),e(ie,Q9),e(Q9,rFe),e(rFe,Pbr),e(Q9,Bbr),e(Q9,fH),e(fH,Ibr),e(Q9,Nbr),e(ie,qbr),e(ie,H9),e(H9,tFe),e(tFe,jbr),e(H9,Dbr),e(H9,mH),e(mH,Gbr),e(H9,Obr),e(ie,Vbr),e(ie,U9),e(U9,aFe),e(aFe,Xbr),e(U9,zbr),e(U9,gH),e(gH,Wbr),e(U9,Qbr),e(ie,Hbr),e(ie,J9),e(J9,nFe),e(nFe,Ubr),e(J9,Jbr),e(J9,hH),e(hH,Ybr),e(J9,Kbr),e(ie,Zbr),e(ie,Y9),e(Y9,sFe),e(sFe,evr),e(Y9,ovr),e(Y9,pH),e(pH,rvr),e(Y9,tvr),e(ie,avr),e(ie,K9),e(K9,lFe),e(lFe,nvr),e(K9,svr),e(K9,_H),e(_H,lvr),e(K9,ivr),e(ie,dvr),e(ie,Z9),e(Z9,iFe),e(iFe,cvr),e(Z9,fvr),e(Z9,uH),e(uH,mvr),e(Z9,gvr),e(ie,hvr),e(ie,eM),e(eM,dFe),e(dFe,pvr),e(eM,_vr),e(eM,bH),e(bH,uvr),e(eM,bvr),e(ie,vvr),e(ie,oM),e(oM,cFe),e(cFe,Fvr),e(oM,Tvr),e(oM,vH),e(vH,Mvr),e(oM,Evr),e(ie,Cvr),e(ie,rM),e(rM,fFe),e(fFe,wvr),e(rM,Avr),e(rM,FH),e(FH,yvr),e(rM,Lvr),e(ie,xvr),e(ie,tM),e(tM,mFe),e(mFe,$vr),e(tM,kvr),e(tM,TH),e(TH,Svr),e(tM,Rvr),e(ie,Pvr),e(ie,aM),e(aM,gFe),e(gFe,Bvr),e(aM,Ivr),e(aM,MH),e(MH,Nvr),e(aM,qvr),e(ie,jvr),e(ie,nM),e(nM,hFe),e(hFe,Dvr),e(nM,Gvr),e(nM,EH),e(EH,Ovr),e(nM,Vvr),e(ie,Xvr),e(ie,sM),e(sM,pFe),e(pFe,zvr),e(sM,Wvr),e(sM,CH),e(CH,Qvr),e(sM,Hvr),e(ie,Uvr),e(ie,lM),e(lM,_Fe),e(_Fe,Jvr),e(lM,Yvr),e(lM,wH),e(wH,Kvr),e(lM,Zvr),e(ie,eFr),e(ie,iM),e(iM,uFe),e(uFe,oFr),e(iM,rFr),e(iM,AH),e(AH,tFr),e(iM,aFr),e(ie,nFr),e(ie,dM),e(dM,bFe),e(bFe,sFr),e(dM,lFr),e(dM,yH),e(yH,iFr),e(dM,dFr),e(ie,cFr),e(ie,cM),e(cM,vFe),e(vFe,fFr),e(cM,mFr),e(cM,LH),e(LH,gFr),e(cM,hFr),e(ie,pFr),e(ie,fM),e(fM,FFe),e(FFe,_Fr),e(fM,uFr),e(fM,xH),e(xH,bFr),e(fM,vFr),e(ie,FFr),e(ie,mM),e(mM,TFe),e(TFe,TFr),e(mM,MFr),e(mM,$H),e($H,EFr),e(mM,CFr),e(xr,wFr),M(gM,xr,null),b(f,Oje,u),b(f,tc,u),e(tc,hM),e(hM,MFe),M(DL,MFe,null),e(tc,AFr),e(tc,EFe),e(EFe,yFr),b(f,Vje,u),b(f,rr,u),M(GL,rr,null),e(rr,LFr),e(rr,ac),e(ac,xFr),e(ac,kH),e(kH,$Fr),e(ac,kFr),e(ac,SH),e(SH,SFr),e(ac,RFr),e(rr,PFr),e(rr,OL),e(OL,BFr),e(OL,CFe),e(CFe,IFr),e(OL,NFr),e(rr,qFr),e(rr,St),M(VL,St,null),e(St,jFr),e(St,wFe),e(wFe,DFr),e(St,GFr),e(St,nc),e(nc,OFr),e(nc,AFe),e(AFe,VFr),e(nc,XFr),e(nc,RH),e(RH,zFr),e(nc,WFr),e(St,QFr),M(pM,St,null),e(rr,HFr),e(rr,$r),M(XL,$r,null),e($r,UFr),e($r,yFe),e(yFe,JFr),e($r,YFr),e($r,an),e(an,KFr),e(an,LFe),e(LFe,ZFr),e(an,e6r),e(an,xFe),e(xFe,o6r),e(an,r6r),e(an,$Fe),e($Fe,t6r),e(an,a6r),e($r,n6r),e($r,ye),e(ye,_M),e(_M,kFe),e(kFe,s6r),e(_M,l6r),e(_M,PH),e(PH,i6r),e(_M,d6r),e(ye,c6r),e(ye,uM),e(uM,SFe),e(SFe,f6r),e(uM,m6r),e(uM,BH),e(BH,g6r),e(uM,h6r),e(ye,p6r),e(ye,bM),e(bM,RFe),e(RFe,_6r),e(bM,u6r),e(bM,IH),e(IH,b6r),e(bM,v6r),e(ye,F6r),e(ye,vM),e(vM,PFe),e(PFe,T6r),e(vM,M6r),e(vM,NH),e(NH,E6r),e(vM,C6r),e(ye,w6r),e(ye,FM),e(FM,BFe),e(BFe,A6r),e(FM,y6r),e(FM,qH),e(qH,L6r),e(FM,x6r),e(ye,$6r),e(ye,TM),e(TM,IFe),e(IFe,k6r),e(TM,S6r),e(TM,jH),e(jH,R6r),e(TM,P6r),e(ye,B6r),e(ye,MM),e(MM,NFe),e(NFe,I6r),e(MM,N6r),e(MM,DH),e(DH,q6r),e(MM,j6r),e(ye,D6r),e(ye,EM),e(EM,qFe),e(qFe,G6r),e(EM,O6r),e(EM,GH),e(GH,V6r),e(EM,X6r),e(ye,z6r),e(ye,CM),e(CM,jFe),e(jFe,W6r),e(CM,Q6r),e(CM,OH),e(OH,H6r),e(CM,U6r),e(ye,J6r),e(ye,wM),e(wM,DFe),e(DFe,Y6r),e(wM,K6r),e(wM,VH),e(VH,Z6r),e(wM,eTr),e($r,oTr),M(AM,$r,null),b(f,Xje,u),b(f,sc,u),e(sc,yM),e(yM,GFe),M(zL,GFe,null),e(sc,rTr),e(sc,OFe),e(OFe,tTr),b(f,zje,u),b(f,tr,u),M(WL,tr,null),e(tr,aTr),e(tr,lc),e(lc,nTr),e(lc,XH),e(XH,sTr),e(lc,lTr),e(lc,zH),e(zH,iTr),e(lc,dTr),e(tr,cTr),e(tr,QL),e(QL,fTr),e(QL,VFe),e(VFe,mTr),e(QL,gTr),e(tr,hTr),e(tr,Rt),M(HL,Rt,null),e(Rt,pTr),e(Rt,XFe),e(XFe,_Tr),e(Rt,uTr),e(Rt,ic),e(ic,bTr),e(ic,zFe),e(zFe,vTr),e(ic,FTr),e(ic,WH),e(WH,TTr),e(ic,MTr),e(Rt,ETr),M(LM,Rt,null),e(tr,CTr),e(tr,kr),M(UL,kr,null),e(kr,wTr),e(kr,WFe),e(WFe,ATr),e(kr,yTr),e(kr,nn),e(nn,LTr),e(nn,QFe),e(QFe,xTr),e(nn,$Tr),e(nn,HFe),e(HFe,kTr),e(nn,STr),e(nn,UFe),e(UFe,RTr),e(nn,PTr),e(kr,BTr),e(kr,oe),e(oe,xM),e(xM,JFe),e(JFe,ITr),e(xM,NTr),e(xM,QH),e(QH,qTr),e(xM,jTr),e(oe,DTr),e(oe,$M),e($M,YFe),e(YFe,GTr),e($M,OTr),e($M,HH),e(HH,VTr),e($M,XTr),e(oe,zTr),e(oe,kM),e(kM,KFe),e(KFe,WTr),e(kM,QTr),e(kM,UH),e(UH,HTr),e(kM,UTr),e(oe,JTr),e(oe,SM),e(SM,ZFe),e(ZFe,YTr),e(SM,KTr),e(SM,JH),e(JH,ZTr),e(SM,e7r),e(oe,o7r),e(oe,RM),e(RM,e6e),e(e6e,r7r),e(RM,t7r),e(RM,YH),e(YH,a7r),e(RM,n7r),e(oe,s7r),e(oe,PM),e(PM,o6e),e(o6e,l7r),e(PM,i7r),e(PM,KH),e(KH,d7r),e(PM,c7r),e(oe,f7r),e(oe,BM),e(BM,r6e),e(r6e,m7r),e(BM,g7r),e(BM,ZH),e(ZH,h7r),e(BM,p7r),e(oe,_7r),e(oe,IM),e(IM,t6e),e(t6e,u7r),e(IM,b7r),e(IM,eU),e(eU,v7r),e(IM,F7r),e(oe,T7r),e(oe,NM),e(NM,a6e),e(a6e,M7r),e(NM,E7r),e(NM,oU),e(oU,C7r),e(NM,w7r),e(oe,A7r),e(oe,qM),e(qM,n6e),e(n6e,y7r),e(qM,L7r),e(qM,rU),e(rU,x7r),e(qM,$7r),e(oe,k7r),e(oe,jM),e(jM,s6e),e(s6e,S7r),e(jM,R7r),e(jM,tU),e(tU,P7r),e(jM,B7r),e(oe,I7r),e(oe,DM),e(DM,l6e),e(l6e,N7r),e(DM,q7r),e(DM,aU),e(aU,j7r),e(DM,D7r),e(oe,G7r),e(oe,GM),e(GM,i6e),e(i6e,O7r),e(GM,V7r),e(GM,nU),e(nU,X7r),e(GM,z7r),e(oe,W7r),e(oe,OM),e(OM,d6e),e(d6e,Q7r),e(OM,H7r),e(OM,sU),e(sU,U7r),e(OM,J7r),e(oe,Y7r),e(oe,VM),e(VM,c6e),e(c6e,K7r),e(VM,Z7r),e(VM,lU),e(lU,e9r),e(VM,o9r),e(oe,r9r),e(oe,XM),e(XM,f6e),e(f6e,t9r),e(XM,a9r),e(XM,iU),e(iU,n9r),e(XM,s9r),e(oe,l9r),e(oe,zM),e(zM,m6e),e(m6e,i9r),e(zM,d9r),e(zM,dU),e(dU,c9r),e(zM,f9r),e(oe,m9r),e(oe,WM),e(WM,g6e),e(g6e,g9r),e(WM,h9r),e(WM,cU),e(cU,p9r),e(WM,_9r),e(oe,u9r),e(oe,QM),e(QM,h6e),e(h6e,b9r),e(QM,v9r),e(QM,fU),e(fU,F9r),e(QM,T9r),e(oe,M9r),e(oe,HM),e(HM,p6e),e(p6e,E9r),e(HM,C9r),e(HM,mU),e(mU,w9r),e(HM,A9r),e(oe,y9r),e(oe,UM),e(UM,_6e),e(_6e,L9r),e(UM,x9r),e(UM,gU),e(gU,$9r),e(UM,k9r),e(oe,S9r),e(oe,JM),e(JM,u6e),e(u6e,R9r),e(JM,P9r),e(JM,hU),e(hU,B9r),e(JM,I9r),e(oe,N9r),e(oe,YM),e(YM,b6e),e(b6e,q9r),e(YM,j9r),e(YM,pU),e(pU,D9r),e(YM,G9r),e(oe,O9r),e(oe,KM),e(KM,v6e),e(v6e,V9r),e(KM,X9r),e(KM,_U),e(_U,z9r),e(KM,W9r),e(oe,Q9r),e(oe,ZM),e(ZM,F6e),e(F6e,H9r),e(ZM,U9r),e(ZM,uU),e(uU,J9r),e(ZM,Y9r),e(oe,K9r),e(oe,e4),e(e4,T6e),e(T6e,Z9r),e(e4,eMr),e(e4,bU),e(bU,oMr),e(e4,rMr),e(kr,tMr),M(o4,kr,null),b(f,Wje,u),b(f,dc,u),e(dc,r4),e(r4,M6e),M(JL,M6e,null),e(dc,aMr),e(dc,E6e),e(E6e,nMr),b(f,Qje,u),b(f,ar,u),M(YL,ar,null),e(ar,sMr),e(ar,cc),e(cc,lMr),e(cc,vU),e(vU,iMr),e(cc,dMr),e(cc,FU),e(FU,cMr),e(cc,fMr),e(ar,mMr),e(ar,KL),e(KL,gMr),e(KL,C6e),e(C6e,hMr),e(KL,pMr),e(ar,_Mr),e(ar,Pt),M(ZL,Pt,null),e(Pt,uMr),e(Pt,w6e),e(w6e,bMr),e(Pt,vMr),e(Pt,fc),e(fc,FMr),e(fc,A6e),e(A6e,TMr),e(fc,MMr),e(fc,TU),e(TU,EMr),e(fc,CMr),e(Pt,wMr),M(t4,Pt,null),e(ar,AMr),e(ar,Sr),M(e8,Sr,null),e(Sr,yMr),e(Sr,y6e),e(y6e,LMr),e(Sr,xMr),e(Sr,sn),e(sn,$Mr),e(sn,L6e),e(L6e,kMr),e(sn,SMr),e(sn,x6e),e(x6e,RMr),e(sn,PMr),e(sn,$6e),e($6e,BMr),e(sn,IMr),e(Sr,NMr),e(Sr,_e),e(_e,a4),e(a4,k6e),e(k6e,qMr),e(a4,jMr),e(a4,MU),e(MU,DMr),e(a4,GMr),e(_e,OMr),e(_e,n4),e(n4,S6e),e(S6e,VMr),e(n4,XMr),e(n4,EU),e(EU,zMr),e(n4,WMr),e(_e,QMr),e(_e,s4),e(s4,R6e),e(R6e,HMr),e(s4,UMr),e(s4,CU),e(CU,JMr),e(s4,YMr),e(_e,KMr),e(_e,l4),e(l4,P6e),e(P6e,ZMr),e(l4,e4r),e(l4,wU),e(wU,o4r),e(l4,r4r),e(_e,t4r),e(_e,i4),e(i4,B6e),e(B6e,a4r),e(i4,n4r),e(i4,AU),e(AU,s4r),e(i4,l4r),e(_e,i4r),e(_e,d4),e(d4,I6e),e(I6e,d4r),e(d4,c4r),e(d4,yU),e(yU,f4r),e(d4,m4r),e(_e,g4r),e(_e,c4),e(c4,N6e),e(N6e,h4r),e(c4,p4r),e(c4,LU),e(LU,_4r),e(c4,u4r),e(_e,b4r),e(_e,f4),e(f4,q6e),e(q6e,v4r),e(f4,F4r),e(f4,xU),e(xU,T4r),e(f4,M4r),e(_e,E4r),e(_e,m4),e(m4,j6e),e(j6e,C4r),e(m4,w4r),e(m4,$U),e($U,A4r),e(m4,y4r),e(_e,L4r),e(_e,g4),e(g4,D6e),e(D6e,x4r),e(g4,$4r),e(g4,kU),e(kU,k4r),e(g4,S4r),e(_e,R4r),e(_e,h4),e(h4,G6e),e(G6e,P4r),e(h4,B4r),e(h4,SU),e(SU,I4r),e(h4,N4r),e(_e,q4r),e(_e,p4),e(p4,O6e),e(O6e,j4r),e(p4,D4r),e(p4,RU),e(RU,G4r),e(p4,O4r),e(_e,V4r),e(_e,_4),e(_4,V6e),e(V6e,X4r),e(_4,z4r),e(_4,PU),e(PU,W4r),e(_4,Q4r),e(_e,H4r),e(_e,u4),e(u4,X6e),e(X6e,U4r),e(u4,J4r),e(u4,BU),e(BU,Y4r),e(u4,K4r),e(_e,Z4r),e(_e,b4),e(b4,z6e),e(z6e,eEr),e(b4,oEr),e(b4,IU),e(IU,rEr),e(b4,tEr),e(_e,aEr),e(_e,v4),e(v4,W6e),e(W6e,nEr),e(v4,sEr),e(v4,NU),e(NU,lEr),e(v4,iEr),e(_e,dEr),e(_e,F4),e(F4,Q6e),e(Q6e,cEr),e(F4,fEr),e(F4,qU),e(qU,mEr),e(F4,gEr),e(Sr,hEr),M(T4,Sr,null),b(f,Hje,u),b(f,mc,u),e(mc,M4),e(M4,H6e),M(o8,H6e,null),e(mc,pEr),e(mc,U6e),e(U6e,_Er),b(f,Uje,u),b(f,nr,u),M(r8,nr,null),e(nr,uEr),e(nr,gc),e(gc,bEr),e(gc,jU),e(jU,vEr),e(gc,FEr),e(gc,DU),e(DU,TEr),e(gc,MEr),e(nr,EEr),e(nr,t8),e(t8,CEr),e(t8,J6e),e(J6e,wEr),e(t8,AEr),e(nr,yEr),e(nr,Bt),M(a8,Bt,null),e(Bt,LEr),e(Bt,Y6e),e(Y6e,xEr),e(Bt,$Er),e(Bt,hc),e(hc,kEr),e(hc,K6e),e(K6e,SEr),e(hc,REr),e(hc,GU),e(GU,PEr),e(hc,BEr),e(Bt,IEr),M(E4,Bt,null),e(nr,NEr),e(nr,Rr),M(n8,Rr,null),e(Rr,qEr),e(Rr,Z6e),e(Z6e,jEr),e(Rr,DEr),e(Rr,ln),e(ln,GEr),e(ln,eTe),e(eTe,OEr),e(ln,VEr),e(ln,oTe),e(oTe,XEr),e(ln,zEr),e(ln,rTe),e(rTe,WEr),e(ln,QEr),e(Rr,HEr),e(Rr,s8),e(s8,C4),e(C4,tTe),e(tTe,UEr),e(C4,JEr),e(C4,OU),e(OU,YEr),e(C4,KEr),e(s8,ZEr),e(s8,w4),e(w4,aTe),e(aTe,eCr),e(w4,oCr),e(w4,VU),e(VU,rCr),e(w4,tCr),e(Rr,aCr),M(A4,Rr,null),b(f,Jje,u),b(f,pc,u),e(pc,y4),e(y4,nTe),M(l8,nTe,null),e(pc,nCr),e(pc,sTe),e(sTe,sCr),b(f,Yje,u),b(f,sr,u),M(i8,sr,null),e(sr,lCr),e(sr,_c),e(_c,iCr),e(_c,XU),e(XU,dCr),e(_c,cCr),e(_c,zU),e(zU,fCr),e(_c,mCr),e(sr,gCr),e(sr,d8),e(d8,hCr),e(d8,lTe),e(lTe,pCr),e(d8,_Cr),e(sr,uCr),e(sr,It),M(c8,It,null),e(It,bCr),e(It,iTe),e(iTe,vCr),e(It,FCr),e(It,uc),e(uc,TCr),e(uc,dTe),e(dTe,MCr),e(uc,ECr),e(uc,WU),e(WU,CCr),e(uc,wCr),e(It,ACr),M(L4,It,null),e(sr,yCr),e(sr,Pr),M(f8,Pr,null),e(Pr,LCr),e(Pr,cTe),e(cTe,xCr),e(Pr,$Cr),e(Pr,dn),e(dn,kCr),e(dn,fTe),e(fTe,SCr),e(dn,RCr),e(dn,mTe),e(mTe,PCr),e(dn,BCr),e(dn,gTe),e(gTe,ICr),e(dn,NCr),e(Pr,qCr),e(Pr,hTe),e(hTe,x4),e(x4,pTe),e(pTe,jCr),e(x4,DCr),e(x4,QU),e(QU,GCr),e(x4,OCr),e(Pr,VCr),M($4,Pr,null),b(f,Kje,u),b(f,bc,u),e(bc,k4),e(k4,_Te),M(m8,_Te,null),e(bc,XCr),e(bc,uTe),e(uTe,zCr),b(f,Zje,u),b(f,lr,u),M(g8,lr,null),e(lr,WCr),e(lr,vc),e(vc,QCr),e(vc,HU),e(HU,HCr),e(vc,UCr),e(vc,UU),e(UU,JCr),e(vc,YCr),e(lr,KCr),e(lr,h8),e(h8,ZCr),e(h8,bTe),e(bTe,e5r),e(h8,o5r),e(lr,r5r),e(lr,Nt),M(p8,Nt,null),e(Nt,t5r),e(Nt,vTe),e(vTe,a5r),e(Nt,n5r),e(Nt,Fc),e(Fc,s5r),e(Fc,FTe),e(FTe,l5r),e(Fc,i5r),e(Fc,JU),e(JU,d5r),e(Fc,c5r),e(Nt,f5r),M(S4,Nt,null),e(lr,m5r),e(lr,Br),M(_8,Br,null),e(Br,g5r),e(Br,TTe),e(TTe,h5r),e(Br,p5r),e(Br,cn),e(cn,_5r),e(cn,MTe),e(MTe,u5r),e(cn,b5r),e(cn,ETe),e(ETe,v5r),e(cn,F5r),e(cn,CTe),e(CTe,T5r),e(cn,M5r),e(Br,E5r),e(Br,de),e(de,R4),e(R4,wTe),e(wTe,C5r),e(R4,w5r),e(R4,YU),e(YU,A5r),e(R4,y5r),e(de,L5r),e(de,P4),e(P4,ATe),e(ATe,x5r),e(P4,$5r),e(P4,KU),e(KU,k5r),e(P4,S5r),e(de,R5r),e(de,B4),e(B4,yTe),e(yTe,P5r),e(B4,B5r),e(B4,ZU),e(ZU,I5r),e(B4,N5r),e(de,q5r),e(de,I4),e(I4,LTe),e(LTe,j5r),e(I4,D5r),e(I4,eJ),e(eJ,G5r),e(I4,O5r),e(de,V5r),e(de,N4),e(N4,xTe),e(xTe,X5r),e(N4,z5r),e(N4,oJ),e(oJ,W5r),e(N4,Q5r),e(de,H5r),e(de,q4),e(q4,$Te),e($Te,U5r),e(q4,J5r),e(q4,rJ),e(rJ,Y5r),e(q4,K5r),e(de,Z5r),e(de,j4),e(j4,kTe),e(kTe,e3r),e(j4,o3r),e(j4,tJ),e(tJ,r3r),e(j4,t3r),e(de,a3r),e(de,D4),e(D4,STe),e(STe,n3r),e(D4,s3r),e(D4,aJ),e(aJ,l3r),e(D4,i3r),e(de,d3r),e(de,G4),e(G4,RTe),e(RTe,c3r),e(G4,f3r),e(G4,nJ),e(nJ,m3r),e(G4,g3r),e(de,h3r),e(de,O4),e(O4,PTe),e(PTe,p3r),e(O4,_3r),e(O4,sJ),e(sJ,u3r),e(O4,b3r),e(de,v3r),e(de,V4),e(V4,BTe),e(BTe,F3r),e(V4,T3r),e(V4,lJ),e(lJ,M3r),e(V4,E3r),e(de,C3r),e(de,X4),e(X4,ITe),e(ITe,w3r),e(X4,A3r),e(X4,iJ),e(iJ,y3r),e(X4,L3r),e(de,x3r),e(de,z4),e(z4,NTe),e(NTe,$3r),e(z4,k3r),e(z4,dJ),e(dJ,S3r),e(z4,R3r),e(de,P3r),e(de,W4),e(W4,qTe),e(qTe,B3r),e(W4,I3r),e(W4,cJ),e(cJ,N3r),e(W4,q3r),e(de,j3r),e(de,Q4),e(Q4,jTe),e(jTe,D3r),e(Q4,G3r),e(Q4,fJ),e(fJ,O3r),e(Q4,V3r),e(de,X3r),e(de,H4),e(H4,DTe),e(DTe,z3r),e(H4,W3r),e(H4,mJ),e(mJ,Q3r),e(H4,H3r),e(de,U3r),e(de,U4),e(U4,GTe),e(GTe,J3r),e(U4,Y3r),e(U4,gJ),e(gJ,K3r),e(U4,Z3r),e(de,ewr),e(de,J4),e(J4,OTe),e(OTe,owr),e(J4,rwr),e(J4,hJ),e(hJ,twr),e(J4,awr),e(de,nwr),e(de,Y4),e(Y4,VTe),e(VTe,swr),e(Y4,lwr),e(Y4,pJ),e(pJ,iwr),e(Y4,dwr),e(de,cwr),e(de,K4),e(K4,XTe),e(XTe,fwr),e(K4,mwr),e(K4,_J),e(_J,gwr),e(K4,hwr),e(Br,pwr),M(Z4,Br,null),b(f,eDe,u),b(f,Tc,u),e(Tc,eE),e(eE,zTe),M(u8,zTe,null),e(Tc,_wr),e(Tc,WTe),e(WTe,uwr),b(f,oDe,u),b(f,ir,u),M(b8,ir,null),e(ir,bwr),e(ir,Mc),e(Mc,vwr),e(Mc,uJ),e(uJ,Fwr),e(Mc,Twr),e(Mc,bJ),e(bJ,Mwr),e(Mc,Ewr),e(ir,Cwr),e(ir,v8),e(v8,wwr),e(v8,QTe),e(QTe,Awr),e(v8,ywr),e(ir,Lwr),e(ir,qt),M(F8,qt,null),e(qt,xwr),e(qt,HTe),e(HTe,$wr),e(qt,kwr),e(qt,Ec),e(Ec,Swr),e(Ec,UTe),e(UTe,Rwr),e(Ec,Pwr),e(Ec,vJ),e(vJ,Bwr),e(Ec,Iwr),e(qt,Nwr),M(oE,qt,null),e(ir,qwr),e(ir,Ir),M(T8,Ir,null),e(Ir,jwr),e(Ir,JTe),e(JTe,Dwr),e(Ir,Gwr),e(Ir,fn),e(fn,Owr),e(fn,YTe),e(YTe,Vwr),e(fn,Xwr),e(fn,KTe),e(KTe,zwr),e(fn,Wwr),e(fn,ZTe),e(ZTe,Qwr),e(fn,Hwr),e(Ir,Uwr),e(Ir,ce),e(ce,rE),e(rE,e7e),e(e7e,Jwr),e(rE,Ywr),e(rE,FJ),e(FJ,Kwr),e(rE,Zwr),e(ce,e0r),e(ce,tE),e(tE,o7e),e(o7e,o0r),e(tE,r0r),e(tE,TJ),e(TJ,t0r),e(tE,a0r),e(ce,n0r),e(ce,aE),e(aE,r7e),e(r7e,s0r),e(aE,l0r),e(aE,MJ),e(MJ,i0r),e(aE,d0r),e(ce,c0r),e(ce,nE),e(nE,t7e),e(t7e,f0r),e(nE,m0r),e(nE,EJ),e(EJ,g0r),e(nE,h0r),e(ce,p0r),e(ce,sE),e(sE,a7e),e(a7e,_0r),e(sE,u0r),e(sE,CJ),e(CJ,b0r),e(sE,v0r),e(ce,F0r),e(ce,lE),e(lE,n7e),e(n7e,T0r),e(lE,M0r),e(lE,wJ),e(wJ,E0r),e(lE,C0r),e(ce,w0r),e(ce,iE),e(iE,s7e),e(s7e,A0r),e(iE,y0r),e(iE,AJ),e(AJ,L0r),e(iE,x0r),e(ce,$0r),e(ce,dE),e(dE,l7e),e(l7e,k0r),e(dE,S0r),e(dE,yJ),e(yJ,R0r),e(dE,P0r),e(ce,B0r),e(ce,cE),e(cE,i7e),e(i7e,I0r),e(cE,N0r),e(cE,LJ),e(LJ,q0r),e(cE,j0r),e(ce,D0r),e(ce,fE),e(fE,d7e),e(d7e,G0r),e(fE,O0r),e(fE,xJ),e(xJ,V0r),e(fE,X0r),e(ce,z0r),e(ce,mE),e(mE,c7e),e(c7e,W0r),e(mE,Q0r),e(mE,$J),e($J,H0r),e(mE,U0r),e(ce,J0r),e(ce,gE),e(gE,f7e),e(f7e,Y0r),e(gE,K0r),e(gE,kJ),e(kJ,Z0r),e(gE,eAr),e(ce,oAr),e(ce,hE),e(hE,m7e),e(m7e,rAr),e(hE,tAr),e(hE,SJ),e(SJ,aAr),e(hE,nAr),e(ce,sAr),e(ce,pE),e(pE,g7e),e(g7e,lAr),e(pE,iAr),e(pE,RJ),e(RJ,dAr),e(pE,cAr),e(ce,fAr),e(ce,_E),e(_E,h7e),e(h7e,mAr),e(_E,gAr),e(_E,PJ),e(PJ,hAr),e(_E,pAr),e(ce,_Ar),e(ce,uE),e(uE,p7e),e(p7e,uAr),e(uE,bAr),e(uE,BJ),e(BJ,vAr),e(uE,FAr),e(ce,TAr),e(ce,bE),e(bE,_7e),e(_7e,MAr),e(bE,EAr),e(bE,IJ),e(IJ,CAr),e(bE,wAr),e(ce,AAr),e(ce,vE),e(vE,u7e),e(u7e,yAr),e(vE,LAr),e(vE,NJ),e(NJ,xAr),e(vE,$Ar),e(ce,kAr),e(ce,FE),e(FE,b7e),e(b7e,SAr),e(FE,RAr),e(FE,qJ),e(qJ,PAr),e(FE,BAr),e(ce,IAr),e(ce,TE),e(TE,v7e),e(v7e,NAr),e(TE,qAr),e(TE,jJ),e(jJ,jAr),e(TE,DAr),e(Ir,GAr),M(ME,Ir,null),b(f,rDe,u),b(f,Cc,u),e(Cc,EE),e(EE,F7e),M(M8,F7e,null),e(Cc,OAr),e(Cc,T7e),e(T7e,VAr),b(f,tDe,u),b(f,dr,u),M(E8,dr,null),e(dr,XAr),e(dr,wc),e(wc,zAr),e(wc,DJ),e(DJ,WAr),e(wc,QAr),e(wc,GJ),e(GJ,HAr),e(wc,UAr),e(dr,JAr),e(dr,C8),e(C8,YAr),e(C8,M7e),e(M7e,KAr),e(C8,ZAr),e(dr,eyr),e(dr,jt),M(w8,jt,null),e(jt,oyr),e(jt,E7e),e(E7e,ryr),e(jt,tyr),e(jt,Ac),e(Ac,ayr),e(Ac,C7e),e(C7e,nyr),e(Ac,syr),e(Ac,OJ),e(OJ,lyr),e(Ac,iyr),e(jt,dyr),M(CE,jt,null),e(dr,cyr),e(dr,Nr),M(A8,Nr,null),e(Nr,fyr),e(Nr,w7e),e(w7e,myr),e(Nr,gyr),e(Nr,mn),e(mn,hyr),e(mn,A7e),e(A7e,pyr),e(mn,_yr),e(mn,y7e),e(y7e,uyr),e(mn,byr),e(mn,L7e),e(L7e,vyr),e(mn,Fyr),e(Nr,Tyr),e(Nr,x7e),e(x7e,wE),e(wE,$7e),e($7e,Myr),e(wE,Eyr),e(wE,VJ),e(VJ,Cyr),e(wE,wyr),e(Nr,Ayr),M(AE,Nr,null),b(f,aDe,u),b(f,yc,u),e(yc,yE),e(yE,k7e),M(y8,k7e,null),e(yc,yyr),e(yc,S7e),e(S7e,Lyr),b(f,nDe,u),b(f,cr,u),M(L8,cr,null),e(cr,xyr),e(cr,Lc),e(Lc,$yr),e(Lc,XJ),e(XJ,kyr),e(Lc,Syr),e(Lc,zJ),e(zJ,Ryr),e(Lc,Pyr),e(cr,Byr),e(cr,x8),e(x8,Iyr),e(x8,R7e),e(R7e,Nyr),e(x8,qyr),e(cr,jyr),e(cr,Dt),M($8,Dt,null),e(Dt,Dyr),e(Dt,P7e),e(P7e,Gyr),e(Dt,Oyr),e(Dt,xc),e(xc,Vyr),e(xc,B7e),e(B7e,Xyr),e(xc,zyr),e(xc,WJ),e(WJ,Wyr),e(xc,Qyr),e(Dt,Hyr),M(LE,Dt,null),e(cr,Uyr),e(cr,qr),M(k8,qr,null),e(qr,Jyr),e(qr,I7e),e(I7e,Yyr),e(qr,Kyr),e(qr,gn),e(gn,Zyr),e(gn,N7e),e(N7e,eLr),e(gn,oLr),e(gn,q7e),e(q7e,rLr),e(gn,tLr),e(gn,j7e),e(j7e,aLr),e(gn,nLr),e(qr,sLr),e(qr,D7e),e(D7e,xE),e(xE,G7e),e(G7e,lLr),e(xE,iLr),e(xE,QJ),e(QJ,dLr),e(xE,cLr),e(qr,fLr),M($E,qr,null),b(f,sDe,u),b(f,$c,u),e($c,kE),e(kE,O7e),M(S8,O7e,null),e($c,mLr),e($c,V7e),e(V7e,gLr),b(f,lDe,u),b(f,fr,u),M(R8,fr,null),e(fr,hLr),e(fr,kc),e(kc,pLr),e(kc,HJ),e(HJ,_Lr),e(kc,uLr),e(kc,UJ),e(UJ,bLr),e(kc,vLr),e(fr,FLr),e(fr,P8),e(P8,TLr),e(P8,X7e),e(X7e,MLr),e(P8,ELr),e(fr,CLr),e(fr,Gt),M(B8,Gt,null),e(Gt,wLr),e(Gt,z7e),e(z7e,ALr),e(Gt,yLr),e(Gt,Sc),e(Sc,LLr),e(Sc,W7e),e(W7e,xLr),e(Sc,$Lr),e(Sc,JJ),e(JJ,kLr),e(Sc,SLr),e(Gt,RLr),M(SE,Gt,null),e(fr,PLr),e(fr,jr),M(I8,jr,null),e(jr,BLr),e(jr,Q7e),e(Q7e,ILr),e(jr,NLr),e(jr,hn),e(hn,qLr),e(hn,H7e),e(H7e,jLr),e(hn,DLr),e(hn,U7e),e(U7e,GLr),e(hn,OLr),e(hn,J7e),e(J7e,VLr),e(hn,XLr),e(jr,zLr),e(jr,re),e(re,RE),e(RE,Y7e),e(Y7e,WLr),e(RE,QLr),e(RE,YJ),e(YJ,HLr),e(RE,ULr),e(re,JLr),e(re,PE),e(PE,K7e),e(K7e,YLr),e(PE,KLr),e(PE,KJ),e(KJ,ZLr),e(PE,e8r),e(re,o8r),e(re,BE),e(BE,Z7e),e(Z7e,r8r),e(BE,t8r),e(BE,ZJ),e(ZJ,a8r),e(BE,n8r),e(re,s8r),e(re,IE),e(IE,e9e),e(e9e,l8r),e(IE,i8r),e(IE,eY),e(eY,d8r),e(IE,c8r),e(re,f8r),e(re,NE),e(NE,o9e),e(o9e,m8r),e(NE,g8r),e(NE,oY),e(oY,h8r),e(NE,p8r),e(re,_8r),e(re,qE),e(qE,r9e),e(r9e,u8r),e(qE,b8r),e(qE,rY),e(rY,v8r),e(qE,F8r),e(re,T8r),e(re,jE),e(jE,t9e),e(t9e,M8r),e(jE,E8r),e(jE,tY),e(tY,C8r),e(jE,w8r),e(re,A8r),e(re,DE),e(DE,a9e),e(a9e,y8r),e(DE,L8r),e(DE,aY),e(aY,x8r),e(DE,$8r),e(re,k8r),e(re,GE),e(GE,n9e),e(n9e,S8r),e(GE,R8r),e(GE,nY),e(nY,P8r),e(GE,B8r),e(re,I8r),e(re,OE),e(OE,s9e),e(s9e,N8r),e(OE,q8r),e(OE,sY),e(sY,j8r),e(OE,D8r),e(re,G8r),e(re,VE),e(VE,l9e),e(l9e,O8r),e(VE,V8r),e(VE,lY),e(lY,X8r),e(VE,z8r),e(re,W8r),e(re,XE),e(XE,i9e),e(i9e,Q8r),e(XE,H8r),e(XE,iY),e(iY,U8r),e(XE,J8r),e(re,Y8r),e(re,zE),e(zE,d9e),e(d9e,K8r),e(zE,Z8r),e(zE,dY),e(dY,exr),e(zE,oxr),e(re,rxr),e(re,WE),e(WE,c9e),e(c9e,txr),e(WE,axr),e(WE,cY),e(cY,nxr),e(WE,sxr),e(re,lxr),e(re,QE),e(QE,f9e),e(f9e,ixr),e(QE,dxr),e(QE,fY),e(fY,cxr),e(QE,fxr),e(re,mxr),e(re,HE),e(HE,m9e),e(m9e,gxr),e(HE,hxr),e(HE,mY),e(mY,pxr),e(HE,_xr),e(re,uxr),e(re,UE),e(UE,g9e),e(g9e,bxr),e(UE,vxr),e(UE,gY),e(gY,Fxr),e(UE,Txr),e(re,Mxr),e(re,JE),e(JE,h9e),e(h9e,Exr),e(JE,Cxr),e(JE,hY),e(hY,wxr),e(JE,Axr),e(re,yxr),e(re,YE),e(YE,p9e),e(p9e,Lxr),e(YE,xxr),e(YE,pY),e(pY,$xr),e(YE,kxr),e(re,Sxr),e(re,KE),e(KE,_9e),e(_9e,Rxr),e(KE,Pxr),e(KE,_Y),e(_Y,Bxr),e(KE,Ixr),e(re,Nxr),e(re,ZE),e(ZE,u9e),e(u9e,qxr),e(ZE,jxr),e(ZE,uY),e(uY,Dxr),e(ZE,Gxr),e(re,Oxr),e(re,eC),e(eC,b9e),e(b9e,Vxr),e(eC,Xxr),e(eC,bY),e(bY,zxr),e(eC,Wxr),e(re,Qxr),e(re,oC),e(oC,v9e),e(v9e,Hxr),e(oC,Uxr),e(oC,vY),e(vY,Jxr),e(oC,Yxr),e(re,Kxr),e(re,rC),e(rC,F9e),e(F9e,Zxr),e(rC,e$r),e(rC,FY),e(FY,o$r),e(rC,r$r),e(re,t$r),e(re,tC),e(tC,T9e),e(T9e,a$r),e(tC,n$r),e(tC,TY),e(TY,s$r),e(tC,l$r),e(re,i$r),e(re,aC),e(aC,M9e),e(M9e,d$r),e(aC,c$r),e(aC,MY),e(MY,f$r),e(aC,m$r),e(jr,g$r),M(nC,jr,null),b(f,iDe,u),b(f,Rc,u),e(Rc,sC),e(sC,E9e),M(N8,E9e,null),e(Rc,h$r),e(Rc,C9e),e(C9e,p$r),b(f,dDe,u),b(f,mr,u),M(q8,mr,null),e(mr,_$r),e(mr,Pc),e(Pc,u$r),e(Pc,EY),e(EY,b$r),e(Pc,v$r),e(Pc,CY),e(CY,F$r),e(Pc,T$r),e(mr,M$r),e(mr,j8),e(j8,E$r),e(j8,w9e),e(w9e,C$r),e(j8,w$r),e(mr,A$r),e(mr,Ot),M(D8,Ot,null),e(Ot,y$r),e(Ot,A9e),e(A9e,L$r),e(Ot,x$r),e(Ot,Bc),e(Bc,$$r),e(Bc,y9e),e(y9e,k$r),e(Bc,S$r),e(Bc,wY),e(wY,R$r),e(Bc,P$r),e(Ot,B$r),M(lC,Ot,null),e(mr,I$r),e(mr,Dr),M(G8,Dr,null),e(Dr,N$r),e(Dr,L9e),e(L9e,q$r),e(Dr,j$r),e(Dr,pn),e(pn,D$r),e(pn,x9e),e(x9e,G$r),e(pn,O$r),e(pn,$9e),e($9e,V$r),e(pn,X$r),e(pn,k9e),e(k9e,z$r),e(pn,W$r),e(Dr,Q$r),e(Dr,Pe),e(Pe,iC),e(iC,S9e),e(S9e,H$r),e(iC,U$r),e(iC,AY),e(AY,J$r),e(iC,Y$r),e(Pe,K$r),e(Pe,dC),e(dC,R9e),e(R9e,Z$r),e(dC,ekr),e(dC,yY),e(yY,okr),e(dC,rkr),e(Pe,tkr),e(Pe,cC),e(cC,P9e),e(P9e,akr),e(cC,nkr),e(cC,LY),e(LY,skr),e(cC,lkr),e(Pe,ikr),e(Pe,fC),e(fC,B9e),e(B9e,dkr),e(fC,ckr),e(fC,xY),e(xY,fkr),e(fC,mkr),e(Pe,gkr),e(Pe,mC),e(mC,I9e),e(I9e,hkr),e(mC,pkr),e(mC,$Y),e($Y,_kr),e(mC,ukr),e(Pe,bkr),e(Pe,gC),e(gC,N9e),e(N9e,vkr),e(gC,Fkr),e(gC,kY),e(kY,Tkr),e(gC,Mkr),e(Pe,Ekr),e(Pe,hC),e(hC,q9e),e(q9e,Ckr),e(hC,wkr),e(hC,SY),e(SY,Akr),e(hC,ykr),e(Pe,Lkr),e(Pe,pC),e(pC,j9e),e(j9e,xkr),e(pC,$kr),e(pC,RY),e(RY,kkr),e(pC,Skr),e(Pe,Rkr),e(Pe,_C),e(_C,D9e),e(D9e,Pkr),e(_C,Bkr),e(_C,PY),e(PY,Ikr),e(_C,Nkr),e(Dr,qkr),M(uC,Dr,null),b(f,cDe,u),b(f,Ic,u),e(Ic,bC),e(bC,G9e),M(O8,G9e,null),e(Ic,jkr),e(Ic,O9e),e(O9e,Dkr),b(f,fDe,u),b(f,gr,u),M(V8,gr,null),e(gr,Gkr),e(gr,Nc),e(Nc,Okr),e(Nc,BY),e(BY,Vkr),e(Nc,Xkr),e(Nc,IY),e(IY,zkr),e(Nc,Wkr),e(gr,Qkr),e(gr,X8),e(X8,Hkr),e(X8,V9e),e(V9e,Ukr),e(X8,Jkr),e(gr,Ykr),e(gr,Vt),M(z8,Vt,null),e(Vt,Kkr),e(Vt,X9e),e(X9e,Zkr),e(Vt,eSr),e(Vt,qc),e(qc,oSr),e(qc,z9e),e(z9e,rSr),e(qc,tSr),e(qc,NY),e(NY,aSr),e(qc,nSr),e(Vt,sSr),M(vC,Vt,null),e(gr,lSr),e(gr,Gr),M(W8,Gr,null),e(Gr,iSr),e(Gr,W9e),e(W9e,dSr),e(Gr,cSr),e(Gr,_n),e(_n,fSr),e(_n,Q9e),e(Q9e,mSr),e(_n,gSr),e(_n,H9e),e(H9e,hSr),e(_n,pSr),e(_n,U9e),e(U9e,_Sr),e(_n,uSr),e(Gr,bSr),e(Gr,Te),e(Te,FC),e(FC,J9e),e(J9e,vSr),e(FC,FSr),e(FC,qY),e(qY,TSr),e(FC,MSr),e(Te,ESr),e(Te,TC),e(TC,Y9e),e(Y9e,CSr),e(TC,wSr),e(TC,jY),e(jY,ASr),e(TC,ySr),e(Te,LSr),e(Te,MC),e(MC,K9e),e(K9e,xSr),e(MC,$Sr),e(MC,DY),e(DY,kSr),e(MC,SSr),e(Te,RSr),e(Te,EC),e(EC,Z9e),e(Z9e,PSr),e(EC,BSr),e(EC,GY),e(GY,ISr),e(EC,NSr),e(Te,qSr),e(Te,CC),e(CC,eMe),e(eMe,jSr),e(CC,DSr),e(CC,OY),e(OY,GSr),e(CC,OSr),e(Te,VSr),e(Te,wC),e(wC,oMe),e(oMe,XSr),e(wC,zSr),e(wC,VY),e(VY,WSr),e(wC,QSr),e(Te,HSr),e(Te,AC),e(AC,rMe),e(rMe,USr),e(AC,JSr),e(AC,XY),e(XY,YSr),e(AC,KSr),e(Te,ZSr),e(Te,yC),e(yC,tMe),e(tMe,eRr),e(yC,oRr),e(yC,zY),e(zY,rRr),e(yC,tRr),e(Te,aRr),e(Te,LC),e(LC,aMe),e(aMe,nRr),e(LC,sRr),e(LC,WY),e(WY,lRr),e(LC,iRr),e(Te,dRr),e(Te,xC),e(xC,nMe),e(nMe,cRr),e(xC,fRr),e(xC,QY),e(QY,mRr),e(xC,gRr),e(Te,hRr),e(Te,$C),e($C,sMe),e(sMe,pRr),e($C,_Rr),e($C,HY),e(HY,uRr),e($C,bRr),e(Te,vRr),e(Te,kC),e(kC,lMe),e(lMe,FRr),e(kC,TRr),e(kC,UY),e(UY,MRr),e(kC,ERr),e(Te,CRr),e(Te,SC),e(SC,iMe),e(iMe,wRr),e(SC,ARr),e(SC,JY),e(JY,yRr),e(SC,LRr),e(Gr,xRr),M(RC,Gr,null),b(f,mDe,u),b(f,jc,u),e(jc,PC),e(PC,dMe),M(Q8,dMe,null),e(jc,$Rr),e(jc,cMe),e(cMe,kRr),b(f,gDe,u),b(f,hr,u),M(H8,hr,null),e(hr,SRr),e(hr,Dc),e(Dc,RRr),e(Dc,YY),e(YY,PRr),e(Dc,BRr),e(Dc,KY),e(KY,IRr),e(Dc,NRr),e(hr,qRr),e(hr,U8),e(U8,jRr),e(U8,fMe),e(fMe,DRr),e(U8,GRr),e(hr,ORr),e(hr,Xt),M(J8,Xt,null),e(Xt,VRr),e(Xt,mMe),e(mMe,XRr),e(Xt,zRr),e(Xt,Gc),e(Gc,WRr),e(Gc,gMe),e(gMe,QRr),e(Gc,HRr),e(Gc,ZY),e(ZY,URr),e(Gc,JRr),e(Xt,YRr),M(BC,Xt,null),e(hr,KRr),e(hr,Or),M(Y8,Or,null),e(Or,ZRr),e(Or,hMe),e(hMe,ePr),e(Or,oPr),e(Or,un),e(un,rPr),e(un,pMe),e(pMe,tPr),e(un,aPr),e(un,_Me),e(_Me,nPr),e(un,sPr),e(un,uMe),e(uMe,lPr),e(un,iPr),e(Or,dPr),e(Or,Le),e(Le,IC),e(IC,bMe),e(bMe,cPr),e(IC,fPr),e(IC,eK),e(eK,mPr),e(IC,gPr),e(Le,hPr),e(Le,NC),e(NC,vMe),e(vMe,pPr),e(NC,_Pr),e(NC,oK),e(oK,uPr),e(NC,bPr),e(Le,vPr),e(Le,qC),e(qC,FMe),e(FMe,FPr),e(qC,TPr),e(qC,rK),e(rK,MPr),e(qC,EPr),e(Le,CPr),e(Le,jC),e(jC,TMe),e(TMe,wPr),e(jC,APr),e(jC,tK),e(tK,yPr),e(jC,LPr),e(Le,xPr),e(Le,DC),e(DC,MMe),e(MMe,$Pr),e(DC,kPr),e(DC,aK),e(aK,SPr),e(DC,RPr),e(Le,PPr),e(Le,GC),e(GC,EMe),e(EMe,BPr),e(GC,IPr),e(GC,nK),e(nK,NPr),e(GC,qPr),e(Le,jPr),e(Le,OC),e(OC,CMe),e(CMe,DPr),e(OC,GPr),e(OC,sK),e(sK,OPr),e(OC,VPr),e(Le,XPr),e(Le,VC),e(VC,wMe),e(wMe,zPr),e(VC,WPr),e(VC,lK),e(lK,QPr),e(VC,HPr),e(Le,UPr),e(Le,XC),e(XC,AMe),e(AMe,JPr),e(XC,YPr),e(XC,iK),e(iK,KPr),e(XC,ZPr),e(Le,eBr),e(Le,zC),e(zC,yMe),e(yMe,oBr),e(zC,rBr),e(zC,dK),e(dK,tBr),e(zC,aBr),e(Or,nBr),M(WC,Or,null),b(f,hDe,u),b(f,Oc,u),e(Oc,QC),e(QC,LMe),M(K8,LMe,null),e(Oc,sBr),e(Oc,xMe),e(xMe,lBr),b(f,pDe,u),b(f,pr,u),M(Z8,pr,null),e(pr,iBr),e(pr,Vc),e(Vc,dBr),e(Vc,cK),e(cK,cBr),e(Vc,fBr),e(Vc,fK),e(fK,mBr),e(Vc,gBr),e(pr,hBr),e(pr,ex),e(ex,pBr),e(ex,$Me),e($Me,_Br),e(ex,uBr),e(pr,bBr),e(pr,zt),M(ox,zt,null),e(zt,vBr),e(zt,kMe),e(kMe,FBr),e(zt,TBr),e(zt,Xc),e(Xc,MBr),e(Xc,SMe),e(SMe,EBr),e(Xc,CBr),e(Xc,mK),e(mK,wBr),e(Xc,ABr),e(zt,yBr),M(HC,zt,null),e(pr,LBr),e(pr,Vr),M(rx,Vr,null),e(Vr,xBr),e(Vr,RMe),e(RMe,$Br),e(Vr,kBr),e(Vr,bn),e(bn,SBr),e(bn,PMe),e(PMe,RBr),e(bn,PBr),e(bn,BMe),e(BMe,BBr),e(bn,IBr),e(bn,IMe),e(IMe,NBr),e(bn,qBr),e(Vr,jBr),e(Vr,xe),e(xe,UC),e(UC,NMe),e(NMe,DBr),e(UC,GBr),e(UC,gK),e(gK,OBr),e(UC,VBr),e(xe,XBr),e(xe,JC),e(JC,qMe),e(qMe,zBr),e(JC,WBr),e(JC,hK),e(hK,QBr),e(JC,HBr),e(xe,UBr),e(xe,YC),e(YC,jMe),e(jMe,JBr),e(YC,YBr),e(YC,pK),e(pK,KBr),e(YC,ZBr),e(xe,eIr),e(xe,KC),e(KC,DMe),e(DMe,oIr),e(KC,rIr),e(KC,_K),e(_K,tIr),e(KC,aIr),e(xe,nIr),e(xe,ZC),e(ZC,GMe),e(GMe,sIr),e(ZC,lIr),e(ZC,uK),e(uK,iIr),e(ZC,dIr),e(xe,cIr),e(xe,e5),e(e5,OMe),e(OMe,fIr),e(e5,mIr),e(e5,bK),e(bK,gIr),e(e5,hIr),e(xe,pIr),e(xe,o5),e(o5,VMe),e(VMe,_Ir),e(o5,uIr),e(o5,vK),e(vK,bIr),e(o5,vIr),e(xe,FIr),e(xe,r5),e(r5,XMe),e(XMe,TIr),e(r5,MIr),e(r5,FK),e(FK,EIr),e(r5,CIr),e(xe,wIr),e(xe,t5),e(t5,zMe),e(zMe,AIr),e(t5,yIr),e(t5,TK),e(TK,LIr),e(t5,xIr),e(xe,$Ir),e(xe,a5),e(a5,WMe),e(WMe,kIr),e(a5,SIr),e(a5,MK),e(MK,RIr),e(a5,PIr),e(Vr,BIr),M(n5,Vr,null),b(f,_De,u),b(f,zc,u),e(zc,s5),e(s5,QMe),M(tx,QMe,null),e(zc,IIr),e(zc,HMe),e(HMe,NIr),b(f,uDe,u),b(f,_r,u),M(ax,_r,null),e(_r,qIr),e(_r,Wc),e(Wc,jIr),e(Wc,EK),e(EK,DIr),e(Wc,GIr),e(Wc,CK),e(CK,OIr),e(Wc,VIr),e(_r,XIr),e(_r,nx),e(nx,zIr),e(nx,UMe),e(UMe,WIr),e(nx,QIr),e(_r,HIr),e(_r,Wt),M(sx,Wt,null),e(Wt,UIr),e(Wt,JMe),e(JMe,JIr),e(Wt,YIr),e(Wt,Qc),e(Qc,KIr),e(Qc,YMe),e(YMe,ZIr),e(Qc,eNr),e(Qc,wK),e(wK,oNr),e(Qc,rNr),e(Wt,tNr),M(l5,Wt,null),e(_r,aNr),e(_r,Xr),M(lx,Xr,null),e(Xr,nNr),e(Xr,KMe),e(KMe,sNr),e(Xr,lNr),e(Xr,vn),e(vn,iNr),e(vn,ZMe),e(ZMe,dNr),e(vn,cNr),e(vn,e4e),e(e4e,fNr),e(vn,mNr),e(vn,o4e),e(o4e,gNr),e(vn,hNr),e(Xr,pNr),e(Xr,$e),e($e,i5),e(i5,r4e),e(r4e,_Nr),e(i5,uNr),e(i5,AK),e(AK,bNr),e(i5,vNr),e($e,FNr),e($e,d5),e(d5,t4e),e(t4e,TNr),e(d5,MNr),e(d5,yK),e(yK,ENr),e(d5,CNr),e($e,wNr),e($e,c5),e(c5,a4e),e(a4e,ANr),e(c5,yNr),e(c5,LK),e(LK,LNr),e(c5,xNr),e($e,$Nr),e($e,f5),e(f5,n4e),e(n4e,kNr),e(f5,SNr),e(f5,xK),e(xK,RNr),e(f5,PNr),e($e,BNr),e($e,m5),e(m5,s4e),e(s4e,INr),e(m5,NNr),e(m5,$K),e($K,qNr),e(m5,jNr),e($e,DNr),e($e,g5),e(g5,l4e),e(l4e,GNr),e(g5,ONr),e(g5,kK),e(kK,VNr),e(g5,XNr),e($e,zNr),e($e,h5),e(h5,i4e),e(i4e,WNr),e(h5,QNr),e(h5,SK),e(SK,HNr),e(h5,UNr),e($e,JNr),e($e,p5),e(p5,d4e),e(d4e,YNr),e(p5,KNr),e(p5,RK),e(RK,ZNr),e(p5,eqr),e($e,oqr),e($e,_5),e(_5,c4e),e(c4e,rqr),e(_5,tqr),e(_5,PK),e(PK,aqr),e(_5,nqr),e($e,sqr),e($e,u5),e(u5,f4e),e(f4e,lqr),e(u5,iqr),e(u5,BK),e(BK,dqr),e(u5,cqr),e(Xr,fqr),M(b5,Xr,null),b(f,bDe,u),b(f,Hc,u),e(Hc,v5),e(v5,m4e),M(ix,m4e,null),e(Hc,mqr),e(Hc,g4e),e(g4e,gqr),b(f,vDe,u),b(f,ur,u),M(dx,ur,null),e(ur,hqr),e(ur,Uc),e(Uc,pqr),e(Uc,IK),e(IK,_qr),e(Uc,uqr),e(Uc,NK),e(NK,bqr),e(Uc,vqr),e(ur,Fqr),e(ur,cx),e(cx,Tqr),e(cx,h4e),e(h4e,Mqr),e(cx,Eqr),e(ur,Cqr),e(ur,Qt),M(fx,Qt,null),e(Qt,wqr),e(Qt,p4e),e(p4e,Aqr),e(Qt,yqr),e(Qt,Jc),e(Jc,Lqr),e(Jc,_4e),e(_4e,xqr),e(Jc,$qr),e(Jc,qK),e(qK,kqr),e(Jc,Sqr),e(Qt,Rqr),M(F5,Qt,null),e(ur,Pqr),e(ur,zr),M(mx,zr,null),e(zr,Bqr),e(zr,u4e),e(u4e,Iqr),e(zr,Nqr),e(zr,Fn),e(Fn,qqr),e(Fn,b4e),e(b4e,jqr),e(Fn,Dqr),e(Fn,v4e),e(v4e,Gqr),e(Fn,Oqr),e(Fn,F4e),e(F4e,Vqr),e(Fn,Xqr),e(zr,zqr),e(zr,ke),e(ke,T5),e(T5,T4e),e(T4e,Wqr),e(T5,Qqr),e(T5,jK),e(jK,Hqr),e(T5,Uqr),e(ke,Jqr),e(ke,M5),e(M5,M4e),e(M4e,Yqr),e(M5,Kqr),e(M5,DK),e(DK,Zqr),e(M5,ejr),e(ke,ojr),e(ke,E5),e(E5,E4e),e(E4e,rjr),e(E5,tjr),e(E5,GK),e(GK,ajr),e(E5,njr),e(ke,sjr),e(ke,C5),e(C5,C4e),e(C4e,ljr),e(C5,ijr),e(C5,OK),e(OK,djr),e(C5,cjr),e(ke,fjr),e(ke,w5),e(w5,w4e),e(w4e,mjr),e(w5,gjr),e(w5,VK),e(VK,hjr),e(w5,pjr),e(ke,_jr),e(ke,A5),e(A5,A4e),e(A4e,ujr),e(A5,bjr),e(A5,XK),e(XK,vjr),e(A5,Fjr),e(ke,Tjr),e(ke,y5),e(y5,y4e),e(y4e,Mjr),e(y5,Ejr),e(y5,zK),e(zK,Cjr),e(y5,wjr),e(ke,Ajr),e(ke,L5),e(L5,L4e),e(L4e,yjr),e(L5,Ljr),e(L5,WK),e(WK,xjr),e(L5,$jr),e(ke,kjr),e(ke,x5),e(x5,x4e),e(x4e,Sjr),e(x5,Rjr),e(x5,QK),e(QK,Pjr),e(x5,Bjr),e(ke,Ijr),e(ke,$5),e($5,$4e),e($4e,Njr),e($5,qjr),e($5,HK),e(HK,jjr),e($5,Djr),e(zr,Gjr),M(k5,zr,null),b(f,FDe,u),b(f,Yc,u),e(Yc,S5),e(S5,k4e),M(gx,k4e,null),e(Yc,Ojr),e(Yc,S4e),e(S4e,Vjr),b(f,TDe,u),b(f,br,u),M(hx,br,null),e(br,Xjr),e(br,Kc),e(Kc,zjr),e(Kc,UK),e(UK,Wjr),e(Kc,Qjr),e(Kc,JK),e(JK,Hjr),e(Kc,Ujr),e(br,Jjr),e(br,px),e(px,Yjr),e(px,R4e),e(R4e,Kjr),e(px,Zjr),e(br,eDr),e(br,Ht),M(_x,Ht,null),e(Ht,oDr),e(Ht,P4e),e(P4e,rDr),e(Ht,tDr),e(Ht,Zc),e(Zc,aDr),e(Zc,B4e),e(B4e,nDr),e(Zc,sDr),e(Zc,YK),e(YK,lDr),e(Zc,iDr),e(Ht,dDr),M(R5,Ht,null),e(br,cDr),e(br,Wr),M(ux,Wr,null),e(Wr,fDr),e(Wr,I4e),e(I4e,mDr),e(Wr,gDr),e(Wr,Tn),e(Tn,hDr),e(Tn,N4e),e(N4e,pDr),e(Tn,_Dr),e(Tn,q4e),e(q4e,uDr),e(Tn,bDr),e(Tn,j4e),e(j4e,vDr),e(Tn,FDr),e(Wr,TDr),e(Wr,Ge),e(Ge,P5),e(P5,D4e),e(D4e,MDr),e(P5,EDr),e(P5,KK),e(KK,CDr),e(P5,wDr),e(Ge,ADr),e(Ge,B5),e(B5,G4e),e(G4e,yDr),e(B5,LDr),e(B5,ZK),e(ZK,xDr),e(B5,$Dr),e(Ge,kDr),e(Ge,I5),e(I5,O4e),e(O4e,SDr),e(I5,RDr),e(I5,eZ),e(eZ,PDr),e(I5,BDr),e(Ge,IDr),e(Ge,N5),e(N5,V4e),e(V4e,NDr),e(N5,qDr),e(N5,oZ),e(oZ,jDr),e(N5,DDr),e(Ge,GDr),e(Ge,q5),e(q5,X4e),e(X4e,ODr),e(q5,VDr),e(q5,rZ),e(rZ,XDr),e(q5,zDr),e(Ge,WDr),e(Ge,j5),e(j5,z4e),e(z4e,QDr),e(j5,HDr),e(j5,tZ),e(tZ,UDr),e(j5,JDr),e(Ge,YDr),e(Ge,D5),e(D5,W4e),e(W4e,KDr),e(D5,ZDr),e(D5,aZ),e(aZ,eGr),e(D5,oGr),e(Ge,rGr),e(Ge,G5),e(G5,Q4e),e(Q4e,tGr),e(G5,aGr),e(G5,nZ),e(nZ,nGr),e(G5,sGr),e(Wr,lGr),M(O5,Wr,null),b(f,MDe,u),b(f,ef,u),e(ef,V5),e(V5,H4e),M(bx,H4e,null),e(ef,iGr),e(ef,U4e),e(U4e,dGr),b(f,EDe,u),b(f,vr,u),M(vx,vr,null),e(vr,cGr),e(vr,of),e(of,fGr),e(of,sZ),e(sZ,mGr),e(of,gGr),e(of,lZ),e(lZ,hGr),e(of,pGr),e(vr,_Gr),e(vr,Fx),e(Fx,uGr),e(Fx,J4e),e(J4e,bGr),e(Fx,vGr),e(vr,FGr),e(vr,Ut),M(Tx,Ut,null),e(Ut,TGr),e(Ut,Y4e),e(Y4e,MGr),e(Ut,EGr),e(Ut,rf),e(rf,CGr),e(rf,K4e),e(K4e,wGr),e(rf,AGr),e(rf,iZ),e(iZ,yGr),e(rf,LGr),e(Ut,xGr),M(X5,Ut,null),e(vr,$Gr),e(vr,Qr),M(Mx,Qr,null),e(Qr,kGr),e(Qr,Z4e),e(Z4e,SGr),e(Qr,RGr),e(Qr,Mn),e(Mn,PGr),e(Mn,eEe),e(eEe,BGr),e(Mn,IGr),e(Mn,oEe),e(oEe,NGr),e(Mn,qGr),e(Mn,rEe),e(rEe,jGr),e(Mn,DGr),e(Qr,GGr),e(Qr,Oe),e(Oe,z5),e(z5,tEe),e(tEe,OGr),e(z5,VGr),e(z5,dZ),e(dZ,XGr),e(z5,zGr),e(Oe,WGr),e(Oe,W5),e(W5,aEe),e(aEe,QGr),e(W5,HGr),e(W5,cZ),e(cZ,UGr),e(W5,JGr),e(Oe,YGr),e(Oe,Q5),e(Q5,nEe),e(nEe,KGr),e(Q5,ZGr),e(Q5,fZ),e(fZ,eOr),e(Q5,oOr),e(Oe,rOr),e(Oe,H5),e(H5,sEe),e(sEe,tOr),e(H5,aOr),e(H5,mZ),e(mZ,nOr),e(H5,sOr),e(Oe,lOr),e(Oe,U5),e(U5,lEe),e(lEe,iOr),e(U5,dOr),e(U5,gZ),e(gZ,cOr),e(U5,fOr),e(Oe,mOr),e(Oe,J5),e(J5,iEe),e(iEe,gOr),e(J5,hOr),e(J5,hZ),e(hZ,pOr),e(J5,_Or),e(Oe,uOr),e(Oe,Y5),e(Y5,dEe),e(dEe,bOr),e(Y5,vOr),e(Y5,pZ),e(pZ,FOr),e(Y5,TOr),e(Oe,MOr),e(Oe,K5),e(K5,cEe),e(cEe,EOr),e(K5,COr),e(K5,_Z),e(_Z,wOr),e(K5,AOr),e(Qr,yOr),M(Z5,Qr,null),b(f,CDe,u),b(f,tf,u),e(tf,e3),e(e3,fEe),M(Ex,fEe,null),e(tf,LOr),e(tf,mEe),e(mEe,xOr),b(f,wDe,u),b(f,Fr,u),M(Cx,Fr,null),e(Fr,$Or),e(Fr,af),e(af,kOr),e(af,uZ),e(uZ,SOr),e(af,ROr),e(af,bZ),e(bZ,POr),e(af,BOr),e(Fr,IOr),e(Fr,wx),e(wx,NOr),e(wx,gEe),e(gEe,qOr),e(wx,jOr),e(Fr,DOr),e(Fr,Jt),M(Ax,Jt,null),e(Jt,GOr),e(Jt,hEe),e(hEe,OOr),e(Jt,VOr),e(Jt,nf),e(nf,XOr),e(nf,pEe),e(pEe,zOr),e(nf,WOr),e(nf,vZ),e(vZ,QOr),e(nf,HOr),e(Jt,UOr),M(o3,Jt,null),e(Fr,JOr),e(Fr,Hr),M(yx,Hr,null),e(Hr,YOr),e(Hr,_Ee),e(_Ee,KOr),e(Hr,ZOr),e(Hr,En),e(En,eVr),e(En,uEe),e(uEe,oVr),e(En,rVr),e(En,bEe),e(bEe,tVr),e(En,aVr),e(En,vEe),e(vEe,nVr),e(En,sVr),e(Hr,lVr),e(Hr,FEe),e(FEe,r3),e(r3,TEe),e(TEe,iVr),e(r3,dVr),e(r3,FZ),e(FZ,cVr),e(r3,fVr),e(Hr,mVr),M(t3,Hr,null),b(f,ADe,u),b(f,sf,u),e(sf,a3),e(a3,MEe),M(Lx,MEe,null),e(sf,gVr),e(sf,EEe),e(EEe,hVr),b(f,yDe,u),b(f,Tr,u),M(xx,Tr,null),e(Tr,pVr),e(Tr,lf),e(lf,_Vr),e(lf,TZ),e(TZ,uVr),e(lf,bVr),e(lf,MZ),e(MZ,vVr),e(lf,FVr),e(Tr,TVr),e(Tr,$x),e($x,MVr),e($x,CEe),e(CEe,EVr),e($x,CVr),e(Tr,wVr),e(Tr,Yt),M(kx,Yt,null),e(Yt,AVr),e(Yt,wEe),e(wEe,yVr),e(Yt,LVr),e(Yt,df),e(df,xVr),e(df,AEe),e(AEe,$Vr),e(df,kVr),e(df,EZ),e(EZ,SVr),e(df,RVr),e(Yt,PVr),M(n3,Yt,null),e(Tr,BVr),e(Tr,Ur),M(Sx,Ur,null),e(Ur,IVr),e(Ur,yEe),e(yEe,NVr),e(Ur,qVr),e(Ur,Cn),e(Cn,jVr),e(Cn,LEe),e(LEe,DVr),e(Cn,GVr),e(Cn,xEe),e(xEe,OVr),e(Cn,VVr),e(Cn,$Ee),e($Ee,XVr),e(Cn,zVr),e(Ur,WVr),e(Ur,Rx),e(Rx,s3),e(s3,kEe),e(kEe,QVr),e(s3,HVr),e(s3,CZ),e(CZ,UVr),e(s3,JVr),e(Rx,YVr),e(Rx,l3),e(l3,SEe),e(SEe,KVr),e(l3,ZVr),e(l3,wZ),e(wZ,eXr),e(l3,oXr),e(Ur,rXr),M(i3,Ur,null),b(f,LDe,u),b(f,cf,u),e(cf,d3),e(d3,REe),M(Px,REe,null),e(cf,tXr),e(cf,PEe),e(PEe,aXr),b(f,xDe,u),b(f,Mr,u),M(Bx,Mr,null),e(Mr,nXr),e(Mr,ff),e(ff,sXr),e(ff,AZ),e(AZ,lXr),e(ff,iXr),e(ff,yZ),e(yZ,dXr),e(ff,cXr),e(Mr,fXr),e(Mr,Ix),e(Ix,mXr),e(Ix,BEe),e(BEe,gXr),e(Ix,hXr),e(Mr,pXr),e(Mr,Kt),M(Nx,Kt,null),e(Kt,_Xr),e(Kt,IEe),e(IEe,uXr),e(Kt,bXr),e(Kt,mf),e(mf,vXr),e(mf,NEe),e(NEe,FXr),e(mf,TXr),e(mf,LZ),e(LZ,MXr),e(mf,EXr),e(Kt,CXr),M(c3,Kt,null),e(Mr,wXr),e(Mr,Jr),M(qx,Jr,null),e(Jr,AXr),e(Jr,qEe),e(qEe,yXr),e(Jr,LXr),e(Jr,wn),e(wn,xXr),e(wn,jEe),e(jEe,$Xr),e(wn,kXr),e(wn,DEe),e(DEe,SXr),e(wn,RXr),e(wn,GEe),e(GEe,PXr),e(wn,BXr),e(Jr,IXr),e(Jr,OEe),e(OEe,f3),e(f3,VEe),e(VEe,NXr),e(f3,qXr),e(f3,xZ),e(xZ,jXr),e(f3,DXr),e(Jr,GXr),M(m3,Jr,null),$De=!0},p(f,[u]){const jx={};u&2&&(jx.$$scope={dirty:u,ctx:f}),Tf.$set(jx);const XEe={};u&2&&(XEe.$$scope={dirty:u,ctx:f}),wg.$set(XEe);const zEe={};u&2&&(zEe.$$scope={dirty:u,ctx:f}),sh.$set(zEe);const WEe={};u&2&&(WEe.$$scope={dirty:u,ctx:f}),qh.$set(WEe);const Dx={};u&2&&(Dx.$$scope={dirty:u,ctx:f}),jh.$set(Dx);const QEe={};u&2&&(QEe.$$scope={dirty:u,ctx:f}),np.$set(QEe);const An={};u&2&&(An.$$scope={dirty:u,ctx:f}),sp.$set(An);const HEe={};u&2&&(HEe.$$scope={dirty:u,ctx:f}),dp.$set(HEe);const UEe={};u&2&&(UEe.$$scope={dirty:u,ctx:f}),nu.$set(UEe);const JEe={};u&2&&(JEe.$$scope={dirty:u,ctx:f}),lu.$set(JEe);const Gx={};u&2&&(Gx.$$scope={dirty:u,ctx:f}),Yu.$set(Gx);const YEe={};u&2&&(YEe.$$scope={dirty:u,ctx:f}),Zu.$set(YEe);const Ox={};u&2&&(Ox.$$scope={dirty:u,ctx:f}),q2.$set(Ox);const KEe={};u&2&&(KEe.$$scope={dirty:u,ctx:f}),D2.$set(KEe);const Vx={};u&2&&(Vx.$$scope={dirty:u,ctx:f}),E1.$set(Vx);const ZEe={};u&2&&(ZEe.$$scope={dirty:u,ctx:f}),w1.$set(ZEe);const eCe={};u&2&&(eCe.$$scope={dirty:u,ctx:f}),X1.$set(eCe);const oCe={};u&2&&(oCe.$$scope={dirty:u,ctx:f}),W1.$set(oCe);const gf={};u&2&&(gf.$$scope={dirty:u,ctx:f}),Gb.$set(gf);const rCe={};u&2&&(rCe.$$scope={dirty:u,ctx:f}),Vb.$set(rCe);const tCe={};u&2&&(tCe.$$scope={dirty:u,ctx:f}),Fv.$set(tCe);const aCe={};u&2&&(aCe.$$scope={dirty:u,ctx:f}),Mv.$set(aCe);const Xx={};u&2&&(Xx.$$scope={dirty:u,ctx:f}),xv.$set(Xx);const nCe={};u&2&&(nCe.$$scope={dirty:u,ctx:f}),kv.$set(nCe);const sCe={};u&2&&(sCe.$$scope={dirty:u,ctx:f}),gF.$set(sCe);const lCe={};u&2&&(lCe.$$scope={dirty:u,ctx:f}),pF.$set(lCe);const et={};u&2&&(et.$$scope={dirty:u,ctx:f}),t6.$set(et);const zx={};u&2&&(zx.$$scope={dirty:u,ctx:f}),n6.$set(zx);const iCe={};u&2&&(iCe.$$scope={dirty:u,ctx:f}),i6.$set(iCe);const Wx={};u&2&&(Wx.$$scope={dirty:u,ctx:f}),c6.$set(Wx);const dCe={};u&2&&(dCe.$$scope={dirty:u,ctx:f}),C6.$set(dCe);const ot={};u&2&&(ot.$$scope={dirty:u,ctx:f}),A6.$set(ot);const cCe={};u&2&&(cCe.$$scope={dirty:u,ctx:f}),x6.$set(cCe);const hf={};u&2&&(hf.$$scope={dirty:u,ctx:f}),k6.$set(hf);const fCe={};u&2&&(fCe.$$scope={dirty:u,ctx:f}),O6.$set(fCe);const mCe={};u&2&&(mCe.$$scope={dirty:u,ctx:f}),X6.$set(mCe);const y={};u&2&&(y.$$scope={dirty:u,ctx:f}),Y6.$set(y);const g3={};u&2&&(g3.$$scope={dirty:u,ctx:f}),Z6.$set(g3);const gCe={};u&2&&(gCe.$$scope={dirty:u,ctx:f}),cT.$set(gCe);const hCe={};u&2&&(hCe.$$scope={dirty:u,ctx:f}),mT.$set(hCe);const h3={};u&2&&(h3.$$scope={dirty:u,ctx:f}),_T.$set(h3);const pCe={};u&2&&(pCe.$$scope={dirty:u,ctx:f}),bT.$set(pCe);const _Ce={};u&2&&(_Ce.$$scope={dirty:u,ctx:f}),wT.$set(_Ce);const p3={};u&2&&(p3.$$scope={dirty:u,ctx:f}),yT.$set(p3);const uCe={};u&2&&(uCe.$$scope={dirty:u,ctx:f}),ST.$set(uCe);const bCe={};u&2&&(bCe.$$scope={dirty:u,ctx:f}),PT.$set(bCe);const _3={};u&2&&(_3.$$scope={dirty:u,ctx:f}),qT.$set(_3);const vCe={};u&2&&(vCe.$$scope={dirty:u,ctx:f}),DT.$set(vCe);const FCe={};u&2&&(FCe.$$scope={dirty:u,ctx:f}),VT.$set(FCe);const u3={};u&2&&(u3.$$scope={dirty:u,ctx:f}),zT.$set(u3);const TCe={};u&2&&(TCe.$$scope={dirty:u,ctx:f}),YT.$set(TCe);const MCe={};u&2&&(MCe.$$scope={dirty:u,ctx:f}),ZT.$set(MCe);const b3={};u&2&&(b3.$$scope={dirty:u,ctx:f}),r7.$set(b3);const ECe={};u&2&&(ECe.$$scope={dirty:u,ctx:f}),a7.$set(ECe);const CCe={};u&2&&(CCe.$$scope={dirty:u,ctx:f}),J7.$set(CCe);const v3={};u&2&&(v3.$$scope={dirty:u,ctx:f}),K7.$set(v3);const wCe={};u&2&&(wCe.$$scope={dirty:u,ctx:f}),M9.$set(wCe);const ACe={};u&2&&(ACe.$$scope={dirty:u,ctx:f}),C9.$set(ACe);const F3={};u&2&&(F3.$$scope={dirty:u,ctx:f}),N9.$set(F3);const yCe={};u&2&&(yCe.$$scope={dirty:u,ctx:f}),j9.$set(yCe);const LCe={};u&2&&(LCe.$$scope={dirty:u,ctx:f}),X9.$set(LCe);const T3={};u&2&&(T3.$$scope={dirty:u,ctx:f}),W9.$set(T3);const xCe={};u&2&&(xCe.$$scope={dirty:u,ctx:f}),gM.$set(xCe);const $Ce={};u&2&&($Ce.$$scope={dirty:u,ctx:f}),pM.$set($Ce);const M3={};u&2&&(M3.$$scope={dirty:u,ctx:f}),AM.$set(M3);const kCe={};u&2&&(kCe.$$scope={dirty:u,ctx:f}),LM.$set(kCe);const SCe={};u&2&&(SCe.$$scope={dirty:u,ctx:f}),o4.$set(SCe);const E3={};u&2&&(E3.$$scope={dirty:u,ctx:f}),t4.$set(E3);const RCe={};u&2&&(RCe.$$scope={dirty:u,ctx:f}),T4.$set(RCe);const PCe={};u&2&&(PCe.$$scope={dirty:u,ctx:f}),E4.$set(PCe);const C3={};u&2&&(C3.$$scope={dirty:u,ctx:f}),A4.$set(C3);const BCe={};u&2&&(BCe.$$scope={dirty:u,ctx:f}),L4.$set(BCe);const ICe={};u&2&&(ICe.$$scope={dirty:u,ctx:f}),$4.$set(ICe);const w3={};u&2&&(w3.$$scope={dirty:u,ctx:f}),S4.$set(w3);const NCe={};u&2&&(NCe.$$scope={dirty:u,ctx:f}),Z4.$set(NCe);const qCe={};u&2&&(qCe.$$scope={dirty:u,ctx:f}),oE.$set(qCe);const A3={};u&2&&(A3.$$scope={dirty:u,ctx:f}),ME.$set(A3);const jCe={};u&2&&(jCe.$$scope={dirty:u,ctx:f}),CE.$set(jCe);const DCe={};u&2&&(DCe.$$scope={dirty:u,ctx:f}),AE.$set(DCe);const y3={};u&2&&(y3.$$scope={dirty:u,ctx:f}),LE.$set(y3);const GCe={};u&2&&(GCe.$$scope={dirty:u,ctx:f}),$E.$set(GCe);const OCe={};u&2&&(OCe.$$scope={dirty:u,ctx:f}),SE.$set(OCe);const L3={};u&2&&(L3.$$scope={dirty:u,ctx:f}),nC.$set(L3);const VCe={};u&2&&(VCe.$$scope={dirty:u,ctx:f}),lC.$set(VCe);const XCe={};u&2&&(XCe.$$scope={dirty:u,ctx:f}),uC.$set(XCe);const x3={};u&2&&(x3.$$scope={dirty:u,ctx:f}),vC.$set(x3);const zCe={};u&2&&(zCe.$$scope={dirty:u,ctx:f}),RC.$set(zCe);const WCe={};u&2&&(WCe.$$scope={dirty:u,ctx:f}),BC.$set(WCe);const $3={};u&2&&($3.$$scope={dirty:u,ctx:f}),WC.$set($3);const QCe={};u&2&&(QCe.$$scope={dirty:u,ctx:f}),HC.$set(QCe);const HCe={};u&2&&(HCe.$$scope={dirty:u,ctx:f}),n5.$set(HCe);const k3={};u&2&&(k3.$$scope={dirty:u,ctx:f}),l5.$set(k3);const UCe={};u&2&&(UCe.$$scope={dirty:u,ctx:f}),b5.$set(UCe);const JCe={};u&2&&(JCe.$$scope={dirty:u,ctx:f}),F5.$set(JCe);const S3={};u&2&&(S3.$$scope={dirty:u,ctx:f}),k5.$set(S3);const YCe={};u&2&&(YCe.$$scope={dirty:u,ctx:f}),R5.$set(YCe);const KCe={};u&2&&(KCe.$$scope={dirty:u,ctx:f}),O5.$set(KCe);const R3={};u&2&&(R3.$$scope={dirty:u,ctx:f}),X5.$set(R3);const ZCe={};u&2&&(ZCe.$$scope={dirty:u,ctx:f}),Z5.$set(ZCe);const e5e={};u&2&&(e5e.$$scope={dirty:u,ctx:f}),o3.$set(e5e);const P3={};u&2&&(P3.$$scope={dirty:u,ctx:f}),t3.$set(P3);const o5e={};u&2&&(o5e.$$scope={dirty:u,ctx:f}),n3.$set(o5e);const r5e={};u&2&&(r5e.$$scope={dirty:u,ctx:f}),i3.$set(r5e);const B3={};u&2&&(B3.$$scope={dirty:u,ctx:f}),c3.$set(B3);const t5e={};u&2&&(t5e.$$scope={dirty:u,ctx:f}),m3.$set(t5e)},i(f){$De||(E(d.$$.fragment,f),E(Ca.$$.fragment,f),E(P0.$$.fragment,f),E(B0.$$.fragment,f),E(Tf.$$.fragment,f),E(I0.$$.fragment,f),E(N0.$$.fragment,f),E(D0.$$.fragment,f),E(wg.$$.fragment,f),E(G0.$$.fragment,f),E(O0.$$.fragment,f),E(V0.$$.fragment,f),E(W0.$$.fragment,f),E(sh.$$.fragment,f),E(Q0.$$.fragment,f),E(H0.$$.fragment,f),E(U0.$$.fragment,f),E(K0.$$.fragment,f),E(qh.$$.fragment,f),E(jh.$$.fragment,f),E(Z0.$$.fragment,f),E(eA.$$.fragment,f),E(oA.$$.fragment,f),E(aA.$$.fragment,f),E(np.$$.fragment,f),E(sp.$$.fragment,f),E(nA.$$.fragment,f),E(sA.$$.fragment,f),E(lA.$$.fragment,f),E(dA.$$.fragment,f),E(dp.$$.fragment,f),E(cA.$$.fragment,f),E(nu.$$.fragment,f),E(fA.$$.fragment,f),E(mA.$$.fragment,f),E(hA.$$.fragment,f),E(lu.$$.fragment,f),E(pA.$$.fragment,f),E(Yu.$$.fragment,f),E(_A.$$.fragment,f),E(uA.$$.fragment,f),E(vA.$$.fragment,f),E(Zu.$$.fragment,f),E(FA.$$.fragment,f),E(q2.$$.fragment,f),E(TA.$$.fragment,f),E(MA.$$.fragment,f),E(CA.$$.fragment,f),E(D2.$$.fragment,f),E(wA.$$.fragment,f),E(E1.$$.fragment,f),E(AA.$$.fragment,f),E(yA.$$.fragment,f),E(xA.$$.fragment,f),E(w1.$$.fragment,f),E($A.$$.fragment,f),E(X1.$$.fragment,f),E(kA.$$.fragment,f),E(SA.$$.fragment,f),E(PA.$$.fragment,f),E(W1.$$.fragment,f),E(BA.$$.fragment,f),E(Gb.$$.fragment,f),E(IA.$$.fragment,f),E(NA.$$.fragment,f),E(jA.$$.fragment,f),E(Vb.$$.fragment,f),E(DA.$$.fragment,f),E(Fv.$$.fragment,f),E(GA.$$.fragment,f),E(OA.$$.fragment,f),E(XA.$$.fragment,f),E(Mv.$$.fragment,f),E(zA.$$.fragment,f),E(xv.$$.fragment,f),E(WA.$$.fragment,f),E(QA.$$.fragment,f),E(UA.$$.fragment,f),E(kv.$$.fragment,f),E(JA.$$.fragment,f),E(gF.$$.fragment,f),E(YA.$$.fragment,f),E(KA.$$.fragment,f),E(ey.$$.fragment,f),E(pF.$$.fragment,f),E(oy.$$.fragment,f),E(t6.$$.fragment,f),E(ry.$$.fragment,f),E(ty.$$.fragment,f),E(ny.$$.fragment,f),E(n6.$$.fragment,f),E(sy.$$.fragment,f),E(i6.$$.fragment,f),E(ly.$$.fragment,f),E(iy.$$.fragment,f),E(cy.$$.fragment,f),E(c6.$$.fragment,f),E(fy.$$.fragment,f),E(C6.$$.fragment,f),E(my.$$.fragment,f),E(gy.$$.fragment,f),E(py.$$.fragment,f),E(A6.$$.fragment,f),E(_y.$$.fragment,f),E(x6.$$.fragment,f),E(uy.$$.fragment,f),E(by.$$.fragment,f),E(Fy.$$.fragment,f),E(k6.$$.fragment,f),E(Ty.$$.fragment,f),E(O6.$$.fragment,f),E(My.$$.fragment,f),E(Ey.$$.fragment,f),E(wy.$$.fragment,f),E(X6.$$.fragment,f),E(Ay.$$.fragment,f),E(Y6.$$.fragment,f),E(yy.$$.fragment,f),E(Ly.$$.fragment,f),E($y.$$.fragment,f),E(Z6.$$.fragment,f),E(ky.$$.fragment,f),E(cT.$$.fragment,f),E(Sy.$$.fragment,f),E(Ry.$$.fragment,f),E(By.$$.fragment,f),E(mT.$$.fragment,f),E(Iy.$$.fragment,f),E(_T.$$.fragment,f),E(qy.$$.fragment,f),E(jy.$$.fragment,f),E(Gy.$$.fragment,f),E(bT.$$.fragment,f),E(Oy.$$.fragment,f),E(wT.$$.fragment,f),E(Vy.$$.fragment,f),E(Xy.$$.fragment,f),E(Wy.$$.fragment,f),E(yT.$$.fragment,f),E(Qy.$$.fragment,f),E(ST.$$.fragment,f),E(Hy.$$.fragment,f),E(Uy.$$.fragment,f),E(Yy.$$.fragment,f),E(PT.$$.fragment,f),E(Ky.$$.fragment,f),E(qT.$$.fragment,f),E(eL.$$.fragment,f),E(oL.$$.fragment,f),E(tL.$$.fragment,f),E(DT.$$.fragment,f),E(aL.$$.fragment,f),E(VT.$$.fragment,f),E(nL.$$.fragment,f),E(sL.$$.fragment,f),E(iL.$$.fragment,f),E(zT.$$.fragment,f),E(dL.$$.fragment,f),E(YT.$$.fragment,f),E(cL.$$.fragment,f),E(fL.$$.fragment,f),E(gL.$$.fragment,f),E(ZT.$$.fragment,f),E(hL.$$.fragment,f),E(r7.$$.fragment,f),E(pL.$$.fragment,f),E(_L.$$.fragment,f),E(bL.$$.fragment,f),E(a7.$$.fragment,f),E(vL.$$.fragment,f),E(J7.$$.fragment,f),E(FL.$$.fragment,f),E(TL.$$.fragment,f),E(EL.$$.fragment,f),E(K7.$$.fragment,f),E(CL.$$.fragment,f),E(M9.$$.fragment,f),E(wL.$$.fragment,f),E(AL.$$.fragment,f),E(LL.$$.fragment,f),E(C9.$$.fragment,f),E(xL.$$.fragment,f),E(N9.$$.fragment,f),E($L.$$.fragment,f),E(kL.$$.fragment,f),E(RL.$$.fragment,f),E(j9.$$.fragment,f),E(PL.$$.fragment,f),E(X9.$$.fragment,f),E(BL.$$.fragment,f),E(IL.$$.fragment,f),E(qL.$$.fragment,f),E(W9.$$.fragment,f),E(jL.$$.fragment,f),E(gM.$$.fragment,f),E(DL.$$.fragment,f),E(GL.$$.fragment,f),E(VL.$$.fragment,f),E(pM.$$.fragment,f),E(XL.$$.fragment,f),E(AM.$$.fragment,f),E(zL.$$.fragment,f),E(WL.$$.fragment,f),E(HL.$$.fragment,f),E(LM.$$.fragment,f),E(UL.$$.fragment,f),E(o4.$$.fragment,f),E(JL.$$.fragment,f),E(YL.$$.fragment,f),E(ZL.$$.fragment,f),E(t4.$$.fragment,f),E(e8.$$.fragment,f),E(T4.$$.fragment,f),E(o8.$$.fragment,f),E(r8.$$.fragment,f),E(a8.$$.fragment,f),E(E4.$$.fragment,f),E(n8.$$.fragment,f),E(A4.$$.fragment,f),E(l8.$$.fragment,f),E(i8.$$.fragment,f),E(c8.$$.fragment,f),E(L4.$$.fragment,f),E(f8.$$.fragment,f),E($4.$$.fragment,f),E(m8.$$.fragment,f),E(g8.$$.fragment,f),E(p8.$$.fragment,f),E(S4.$$.fragment,f),E(_8.$$.fragment,f),E(Z4.$$.fragment,f),E(u8.$$.fragment,f),E(b8.$$.fragment,f),E(F8.$$.fragment,f),E(oE.$$.fragment,f),E(T8.$$.fragment,f),E(ME.$$.fragment,f),E(M8.$$.fragment,f),E(E8.$$.fragment,f),E(w8.$$.fragment,f),E(CE.$$.fragment,f),E(A8.$$.fragment,f),E(AE.$$.fragment,f),E(y8.$$.fragment,f),E(L8.$$.fragment,f),E($8.$$.fragment,f),E(LE.$$.fragment,f),E(k8.$$.fragment,f),E($E.$$.fragment,f),E(S8.$$.fragment,f),E(R8.$$.fragment,f),E(B8.$$.fragment,f),E(SE.$$.fragment,f),E(I8.$$.fragment,f),E(nC.$$.fragment,f),E(N8.$$.fragment,f),E(q8.$$.fragment,f),E(D8.$$.fragment,f),E(lC.$$.fragment,f),E(G8.$$.fragment,f),E(uC.$$.fragment,f),E(O8.$$.fragment,f),E(V8.$$.fragment,f),E(z8.$$.fragment,f),E(vC.$$.fragment,f),E(W8.$$.fragment,f),E(RC.$$.fragment,f),E(Q8.$$.fragment,f),E(H8.$$.fragment,f),E(J8.$$.fragment,f),E(BC.$$.fragment,f),E(Y8.$$.fragment,f),E(WC.$$.fragment,f),E(K8.$$.fragment,f),E(Z8.$$.fragment,f),E(ox.$$.fragment,f),E(HC.$$.fragment,f),E(rx.$$.fragment,f),E(n5.$$.fragment,f),E(tx.$$.fragment,f),E(ax.$$.fragment,f),E(sx.$$.fragment,f),E(l5.$$.fragment,f),E(lx.$$.fragment,f),E(b5.$$.fragment,f),E(ix.$$.fragment,f),E(dx.$$.fragment,f),E(fx.$$.fragment,f),E(F5.$$.fragment,f),E(mx.$$.fragment,f),E(k5.$$.fragment,f),E(gx.$$.fragment,f),E(hx.$$.fragment,f),E(_x.$$.fragment,f),E(R5.$$.fragment,f),E(ux.$$.fragment,f),E(O5.$$.fragment,f),E(bx.$$.fragment,f),E(vx.$$.fragment,f),E(Tx.$$.fragment,f),E(X5.$$.fragment,f),E(Mx.$$.fragment,f),E(Z5.$$.fragment,f),E(Ex.$$.fragment,f),E(Cx.$$.fragment,f),E(Ax.$$.fragment,f),E(o3.$$.fragment,f),E(yx.$$.fragment,f),E(t3.$$.fragment,f),E(Lx.$$.fragment,f),E(xx.$$.fragment,f),E(kx.$$.fragment,f),E(n3.$$.fragment,f),E(Sx.$$.fragment,f),E(i3.$$.fragment,f),E(Px.$$.fragment,f),E(Bx.$$.fragment,f),E(Nx.$$.fragment,f),E(c3.$$.fragment,f),E(qx.$$.fragment,f),E(m3.$$.fragment,f),$De=!0)},o(f){C(d.$$.fragment,f),C(Ca.$$.fragment,f),C(P0.$$.fragment,f),C(B0.$$.fragment,f),C(Tf.$$.fragment,f),C(I0.$$.fragment,f),C(N0.$$.fragment,f),C(D0.$$.fragment,f),C(wg.$$.fragment,f),C(G0.$$.fragment,f),C(O0.$$.fragment,f),C(V0.$$.fragment,f),C(W0.$$.fragment,f),C(sh.$$.fragment,f),C(Q0.$$.fragment,f),C(H0.$$.fragment,f),C(U0.$$.fragment,f),C(K0.$$.fragment,f),C(qh.$$.fragment,f),C(jh.$$.fragment,f),C(Z0.$$.fragment,f),C(eA.$$.fragment,f),C(oA.$$.fragment,f),C(aA.$$.fragment,f),C(np.$$.fragment,f),C(sp.$$.fragment,f),C(nA.$$.fragment,f),C(sA.$$.fragment,f),C(lA.$$.fragment,f),C(dA.$$.fragment,f),C(dp.$$.fragment,f),C(cA.$$.fragment,f),C(nu.$$.fragment,f),C(fA.$$.fragment,f),C(mA.$$.fragment,f),C(hA.$$.fragment,f),C(lu.$$.fragment,f),C(pA.$$.fragment,f),C(Yu.$$.fragment,f),C(_A.$$.fragment,f),C(uA.$$.fragment,f),C(vA.$$.fragment,f),C(Zu.$$.fragment,f),C(FA.$$.fragment,f),C(q2.$$.fragment,f),C(TA.$$.fragment,f),C(MA.$$.fragment,f),C(CA.$$.fragment,f),C(D2.$$.fragment,f),C(wA.$$.fragment,f),C(E1.$$.fragment,f),C(AA.$$.fragment,f),C(yA.$$.fragment,f),C(xA.$$.fragment,f),C(w1.$$.fragment,f),C($A.$$.fragment,f),C(X1.$$.fragment,f),C(kA.$$.fragment,f),C(SA.$$.fragment,f),C(PA.$$.fragment,f),C(W1.$$.fragment,f),C(BA.$$.fragment,f),C(Gb.$$.fragment,f),C(IA.$$.fragment,f),C(NA.$$.fragment,f),C(jA.$$.fragment,f),C(Vb.$$.fragment,f),C(DA.$$.fragment,f),C(Fv.$$.fragment,f),C(GA.$$.fragment,f),C(OA.$$.fragment,f),C(XA.$$.fragment,f),C(Mv.$$.fragment,f),C(zA.$$.fragment,f),C(xv.$$.fragment,f),C(WA.$$.fragment,f),C(QA.$$.fragment,f),C(UA.$$.fragment,f),C(kv.$$.fragment,f),C(JA.$$.fragment,f),C(gF.$$.fragment,f),C(YA.$$.fragment,f),C(KA.$$.fragment,f),C(ey.$$.fragment,f),C(pF.$$.fragment,f),C(oy.$$.fragment,f),C(t6.$$.fragment,f),C(ry.$$.fragment,f),C(ty.$$.fragment,f),C(ny.$$.fragment,f),C(n6.$$.fragment,f),C(sy.$$.fragment,f),C(i6.$$.fragment,f),C(ly.$$.fragment,f),C(iy.$$.fragment,f),C(cy.$$.fragment,f),C(c6.$$.fragment,f),C(fy.$$.fragment,f),C(C6.$$.fragment,f),C(my.$$.fragment,f),C(gy.$$.fragment,f),C(py.$$.fragment,f),C(A6.$$.fragment,f),C(_y.$$.fragment,f),C(x6.$$.fragment,f),C(uy.$$.fragment,f),C(by.$$.fragment,f),C(Fy.$$.fragment,f),C(k6.$$.fragment,f),C(Ty.$$.fragment,f),C(O6.$$.fragment,f),C(My.$$.fragment,f),C(Ey.$$.fragment,f),C(wy.$$.fragment,f),C(X6.$$.fragment,f),C(Ay.$$.fragment,f),C(Y6.$$.fragment,f),C(yy.$$.fragment,f),C(Ly.$$.fragment,f),C($y.$$.fragment,f),C(Z6.$$.fragment,f),C(ky.$$.fragment,f),C(cT.$$.fragment,f),C(Sy.$$.fragment,f),C(Ry.$$.fragment,f),C(By.$$.fragment,f),C(mT.$$.fragment,f),C(Iy.$$.fragment,f),C(_T.$$.fragment,f),C(qy.$$.fragment,f),C(jy.$$.fragment,f),C(Gy.$$.fragment,f),C(bT.$$.fragment,f),C(Oy.$$.fragment,f),C(wT.$$.fragment,f),C(Vy.$$.fragment,f),C(Xy.$$.fragment,f),C(Wy.$$.fragment,f),C(yT.$$.fragment,f),C(Qy.$$.fragment,f),C(ST.$$.fragment,f),C(Hy.$$.fragment,f),C(Uy.$$.fragment,f),C(Yy.$$.fragment,f),C(PT.$$.fragment,f),C(Ky.$$.fragment,f),C(qT.$$.fragment,f),C(eL.$$.fragment,f),C(oL.$$.fragment,f),C(tL.$$.fragment,f),C(DT.$$.fragment,f),C(aL.$$.fragment,f),C(VT.$$.fragment,f),C(nL.$$.fragment,f),C(sL.$$.fragment,f),C(iL.$$.fragment,f),C(zT.$$.fragment,f),C(dL.$$.fragment,f),C(YT.$$.fragment,f),C(cL.$$.fragment,f),C(fL.$$.fragment,f),C(gL.$$.fragment,f),C(ZT.$$.fragment,f),C(hL.$$.fragment,f),C(r7.$$.fragment,f),C(pL.$$.fragment,f),C(_L.$$.fragment,f),C(bL.$$.fragment,f),C(a7.$$.fragment,f),C(vL.$$.fragment,f),C(J7.$$.fragment,f),C(FL.$$.fragment,f),C(TL.$$.fragment,f),C(EL.$$.fragment,f),C(K7.$$.fragment,f),C(CL.$$.fragment,f),C(M9.$$.fragment,f),C(wL.$$.fragment,f),C(AL.$$.fragment,f),C(LL.$$.fragment,f),C(C9.$$.fragment,f),C(xL.$$.fragment,f),C(N9.$$.fragment,f),C($L.$$.fragment,f),C(kL.$$.fragment,f),C(RL.$$.fragment,f),C(j9.$$.fragment,f),C(PL.$$.fragment,f),C(X9.$$.fragment,f),C(BL.$$.fragment,f),C(IL.$$.fragment,f),C(qL.$$.fragment,f),C(W9.$$.fragment,f),C(jL.$$.fragment,f),C(gM.$$.fragment,f),C(DL.$$.fragment,f),C(GL.$$.fragment,f),C(VL.$$.fragment,f),C(pM.$$.fragment,f),C(XL.$$.fragment,f),C(AM.$$.fragment,f),C(zL.$$.fragment,f),C(WL.$$.fragment,f),C(HL.$$.fragment,f),C(LM.$$.fragment,f),C(UL.$$.fragment,f),C(o4.$$.fragment,f),C(JL.$$.fragment,f),C(YL.$$.fragment,f),C(ZL.$$.fragment,f),C(t4.$$.fragment,f),C(e8.$$.fragment,f),C(T4.$$.fragment,f),C(o8.$$.fragment,f),C(r8.$$.fragment,f),C(a8.$$.fragment,f),C(E4.$$.fragment,f),C(n8.$$.fragment,f),C(A4.$$.fragment,f),C(l8.$$.fragment,f),C(i8.$$.fragment,f),C(c8.$$.fragment,f),C(L4.$$.fragment,f),C(f8.$$.fragment,f),C($4.$$.fragment,f),C(m8.$$.fragment,f),C(g8.$$.fragment,f),C(p8.$$.fragment,f),C(S4.$$.fragment,f),C(_8.$$.fragment,f),C(Z4.$$.fragment,f),C(u8.$$.fragment,f),C(b8.$$.fragment,f),C(F8.$$.fragment,f),C(oE.$$.fragment,f),C(T8.$$.fragment,f),C(ME.$$.fragment,f),C(M8.$$.fragment,f),C(E8.$$.fragment,f),C(w8.$$.fragment,f),C(CE.$$.fragment,f),C(A8.$$.fragment,f),C(AE.$$.fragment,f),C(y8.$$.fragment,f),C(L8.$$.fragment,f),C($8.$$.fragment,f),C(LE.$$.fragment,f),C(k8.$$.fragment,f),C($E.$$.fragment,f),C(S8.$$.fragment,f),C(R8.$$.fragment,f),C(B8.$$.fragment,f),C(SE.$$.fragment,f),C(I8.$$.fragment,f),C(nC.$$.fragment,f),C(N8.$$.fragment,f),C(q8.$$.fragment,f),C(D8.$$.fragment,f),C(lC.$$.fragment,f),C(G8.$$.fragment,f),C(uC.$$.fragment,f),C(O8.$$.fragment,f),C(V8.$$.fragment,f),C(z8.$$.fragment,f),C(vC.$$.fragment,f),C(W8.$$.fragment,f),C(RC.$$.fragment,f),C(Q8.$$.fragment,f),C(H8.$$.fragment,f),C(J8.$$.fragment,f),C(BC.$$.fragment,f),C(Y8.$$.fragment,f),C(WC.$$.fragment,f),C(K8.$$.fragment,f),C(Z8.$$.fragment,f),C(ox.$$.fragment,f),C(HC.$$.fragment,f),C(rx.$$.fragment,f),C(n5.$$.fragment,f),C(tx.$$.fragment,f),C(ax.$$.fragment,f),C(sx.$$.fragment,f),C(l5.$$.fragment,f),C(lx.$$.fragment,f),C(b5.$$.fragment,f),C(ix.$$.fragment,f),C(dx.$$.fragment,f),C(fx.$$.fragment,f),C(F5.$$.fragment,f),C(mx.$$.fragment,f),C(k5.$$.fragment,f),C(gx.$$.fragment,f),C(hx.$$.fragment,f),C(_x.$$.fragment,f),C(R5.$$.fragment,f),C(ux.$$.fragment,f),C(O5.$$.fragment,f),C(bx.$$.fragment,f),C(vx.$$.fragment,f),C(Tx.$$.fragment,f),C(X5.$$.fragment,f),C(Mx.$$.fragment,f),C(Z5.$$.fragment,f),C(Ex.$$.fragment,f),C(Cx.$$.fragment,f),C(Ax.$$.fragment,f),C(o3.$$.fragment,f),C(yx.$$.fragment,f),C(t3.$$.fragment,f),C(Lx.$$.fragment,f),C(xx.$$.fragment,f),C(kx.$$.fragment,f),C(n3.$$.fragment,f),C(Sx.$$.fragment,f),C(i3.$$.fragment,f),C(Px.$$.fragment,f),C(Bx.$$.fragment,f),C(Nx.$$.fragment,f),C(c3.$$.fragment,f),C(qx.$$.fragment,f),C(m3.$$.fragment,f),$De=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(_f),f&&t(rt),f&&t(De),f&&t(We),f&&t(bf),w(Ca,f),f&&t(Qe),f&&t(Ae),f&&t(Eo),f&&t(wa),f&&t(yqe),f&&t(vi),w(P0),f&&t(Lqe),f&&t(kn),f&&t(xqe),w(B0,f),f&&t($qe),f&&t(ak),f&&t(kqe),w(Tf,f),f&&t(Sqe),f&&t(Fi),w(I0),f&&t(Rqe),f&&t(Co),w(N0),w(D0),w(wg),w(G0),f&&t(Pqe),f&&t(Mi),w(O0),f&&t(Bqe),f&&t(wo),w(V0),w(W0),w(sh),w(Q0),f&&t(Iqe),f&&t(Ei),w(H0),f&&t(Nqe),f&&t(Ao),w(U0),w(K0),w(qh),w(jh),w(Z0),f&&t(qqe),f&&t(Ci),w(eA),f&&t(jqe),f&&t(yo),w(oA),w(aA),w(np),w(sp),w(nA),f&&t(Dqe),f&&t(Ai),w(sA),f&&t(Gqe),f&&t(Lo),w(lA),w(dA),w(dp),w(cA),w(nu),f&&t(Oqe),f&&t(xi),w(fA),f&&t(Vqe),f&&t(xo),w(mA),w(hA),w(lu),w(pA),w(Yu),f&&t(Xqe),f&&t(Si),w(_A),f&&t(zqe),f&&t($o),w(uA),w(vA),w(Zu),w(FA),w(q2),f&&t(Wqe),f&&t(Bi),w(TA),f&&t(Qqe),f&&t(ko),w(MA),w(CA),w(D2),w(wA),w(E1),f&&t(Hqe),f&&t(qi),w(AA),f&&t(Uqe),f&&t(So),w(yA),w(xA),w(w1),w($A),w(X1),f&&t(Jqe),f&&t(Gi),w(kA),f&&t(Yqe),f&&t(Ro),w(SA),w(PA),w(W1),w(BA),w(Gb),f&&t(Kqe),f&&t(Xi),w(IA),f&&t(Zqe),f&&t(Po),w(NA),w(jA),w(Vb),w(DA),w(Fv),f&&t(eje),f&&t(Qi),w(GA),f&&t(oje),f&&t(Bo),w(OA),w(XA),w(Mv),w(zA),w(xv),f&&t(rje),f&&t(Ji),w(WA),f&&t(tje),f&&t(Io),w(QA),w(UA),w(kv),w(JA),w(gF),f&&t(aje),f&&t(Zi),w(YA),f&&t(nje),f&&t(No),w(KA),w(ey),w(pF),w(oy),w(t6),f&&t(sje),f&&t(rd),w(ry),f&&t(lje),f&&t(qo),w(ty),w(ny),w(n6),w(sy),w(i6),f&&t(ije),f&&t(nd),w(ly),f&&t(dje),f&&t(jo),w(iy),w(cy),w(c6),w(fy),w(C6),f&&t(cje),f&&t(id),w(my),f&&t(fje),f&&t(Do),w(gy),w(py),w(A6),w(_y),w(x6),f&&t(mje),f&&t(fd),w(uy),f&&t(gje),f&&t(Go),w(by),w(Fy),w(k6),w(Ty),w(O6),f&&t(hje),f&&t(hd),w(My),f&&t(pje),f&&t(Oo),w(Ey),w(wy),w(X6),w(Ay),w(Y6),f&&t(_je),f&&t(ud),w(yy),f&&t(uje),f&&t(Vo),w(Ly),w($y),w(Z6),w(ky),w(cT),f&&t(bje),f&&t(Fd),w(Sy),f&&t(vje),f&&t(Xo),w(Ry),w(By),w(mT),w(Iy),w(_T),f&&t(Fje),f&&t(Ed),w(qy),f&&t(Tje),f&&t(zo),w(jy),w(Gy),w(bT),w(Oy),w(wT),f&&t(Mje),f&&t(Ad),w(Vy),f&&t(Eje),f&&t(Wo),w(Xy),w(Wy),w(yT),w(Qy),w(ST),f&&t(Cje),f&&t($d),w(Hy),f&&t(wje),f&&t(Qo),w(Uy),w(Yy),w(PT),w(Ky),w(qT),f&&t(Aje),f&&t(Rd),w(eL),f&&t(yje),f&&t(Ho),w(oL),w(tL),w(DT),w(aL),w(VT),f&&t(Lje),f&&t(Id),w(nL),f&&t(xje),f&&t(Uo),w(sL),w(iL),w(zT),w(dL),w(YT),f&&t($je),f&&t(jd),w(cL),f&&t(kje),f&&t(Jo),w(fL),w(gL),w(ZT),w(hL),w(r7),f&&t(Sje),f&&t(Od),w(pL),f&&t(Rje),f&&t(Yo),w(_L),w(bL),w(a7),w(vL),w(J7),f&&t(Pje),f&&t(zd),w(FL),f&&t(Bje),f&&t(Ko),w(TL),w(EL),w(K7),w(CL),w(M9),f&&t(Ije),f&&t(Hd),w(wL),f&&t(Nje),f&&t(Zo),w(AL),w(LL),w(C9),w(xL),w(N9),f&&t(qje),f&&t(Yd),w($L),f&&t(jje),f&&t(er),w(kL),w(RL),w(j9),w(PL),w(X9),f&&t(Dje),f&&t(ec),w(BL),f&&t(Gje),f&&t(or),w(IL),w(qL),w(W9),w(jL),w(gM),f&&t(Oje),f&&t(tc),w(DL),f&&t(Vje),f&&t(rr),w(GL),w(VL),w(pM),w(XL),w(AM),f&&t(Xje),f&&t(sc),w(zL),f&&t(zje),f&&t(tr),w(WL),w(HL),w(LM),w(UL),w(o4),f&&t(Wje),f&&t(dc),w(JL),f&&t(Qje),f&&t(ar),w(YL),w(ZL),w(t4),w(e8),w(T4),f&&t(Hje),f&&t(mc),w(o8),f&&t(Uje),f&&t(nr),w(r8),w(a8),w(E4),w(n8),w(A4),f&&t(Jje),f&&t(pc),w(l8),f&&t(Yje),f&&t(sr),w(i8),w(c8),w(L4),w(f8),w($4),f&&t(Kje),f&&t(bc),w(m8),f&&t(Zje),f&&t(lr),w(g8),w(p8),w(S4),w(_8),w(Z4),f&&t(eDe),f&&t(Tc),w(u8),f&&t(oDe),f&&t(ir),w(b8),w(F8),w(oE),w(T8),w(ME),f&&t(rDe),f&&t(Cc),w(M8),f&&t(tDe),f&&t(dr),w(E8),w(w8),w(CE),w(A8),w(AE),f&&t(aDe),f&&t(yc),w(y8),f&&t(nDe),f&&t(cr),w(L8),w($8),w(LE),w(k8),w($E),f&&t(sDe),f&&t($c),w(S8),f&&t(lDe),f&&t(fr),w(R8),w(B8),w(SE),w(I8),w(nC),f&&t(iDe),f&&t(Rc),w(N8),f&&t(dDe),f&&t(mr),w(q8),w(D8),w(lC),w(G8),w(uC),f&&t(cDe),f&&t(Ic),w(O8),f&&t(fDe),f&&t(gr),w(V8),w(z8),w(vC),w(W8),w(RC),f&&t(mDe),f&&t(jc),w(Q8),f&&t(gDe),f&&t(hr),w(H8),w(J8),w(BC),w(Y8),w(WC),f&&t(hDe),f&&t(Oc),w(K8),f&&t(pDe),f&&t(pr),w(Z8),w(ox),w(HC),w(rx),w(n5),f&&t(_De),f&&t(zc),w(tx),f&&t(uDe),f&&t(_r),w(ax),w(sx),w(l5),w(lx),w(b5),f&&t(bDe),f&&t(Hc),w(ix),f&&t(vDe),f&&t(ur),w(dx),w(fx),w(F5),w(mx),w(k5),f&&t(FDe),f&&t(Yc),w(gx),f&&t(TDe),f&&t(br),w(hx),w(_x),w(R5),w(ux),w(O5),f&&t(MDe),f&&t(ef),w(bx),f&&t(EDe),f&&t(vr),w(vx),w(Tx),w(X5),w(Mx),w(Z5),f&&t(CDe),f&&t(tf),w(Ex),f&&t(wDe),f&&t(Fr),w(Cx),w(Ax),w(o3),w(yx),w(t3),f&&t(ADe),f&&t(sf),w(Lx),f&&t(yDe),f&&t(Tr),w(xx),w(kx),w(n3),w(Sx),w(i3),f&&t(LDe),f&&t(cf),w(Px),f&&t(xDe),f&&t(Mr),w(Bx),w(Nx),w(c3),w(qx),w(m3)}}}const IRt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function NRt(L){return Nkt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class XRt extends Rkt{constructor(g){super();Pkt(this,g,NRt,BRt,Bkt,{})}}export{XRt as default,IRt as metadata};
