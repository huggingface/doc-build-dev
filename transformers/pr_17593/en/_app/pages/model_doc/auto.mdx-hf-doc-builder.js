import{S as oSt,i as rSt,s as tSt,e as a,k as l,w as F,t as o,M as aSt,c as n,d as t,m as i,a as s,x as T,h as r,b as c,G as e,g as b,y as M,q as E,o as C,B as w,v as nSt,L as I}from"../../chunks/vendor-hf-doc-builder.js";import{T as szr}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as P}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as te}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as B}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function sSt(L){let g,v,p,m,_,d,h,Mo,mi,_f,rt,gi,hi,SA,uf,De,We,pi,yn,RA,Ln,xn,PA,_i,$n,BA,ui,bf,Ca;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),_=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Mo=o(`, make sure its
`),mi=a("code"),_f=o("model_type"),rt=o(" attribute is set to the same key you use when registering the config (here "),gi=a("code"),hi=o('"new-model"'),SA=o(")."),uf=l(),De=a("p"),We=o("Likewise, if your "),pi=a("code"),yn=o("NewModel"),RA=o(" is a subclass of "),Ln=a("a"),xn=o("PreTrainedModel"),PA=o(`, make sure its
`),_i=a("code"),$n=o("config_class"),BA=o(` attribute is set to the same class you use when registering the model (here
`),ui=a("code"),bf=o("NewModelConfig"),Ca=o(")."),this.h()},l(Qe){g=n(Qe,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var ok=s(p);m=r(ok,"NewModelConfig"),ok.forEach(t),_=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var bi=s(d);h=r(bi,"PretrainedConfig"),bi.forEach(t),Mo=r(Ae,`, make sure its
`),mi=n(Ae,"CODE",{});var rk=s(mi);_f=r(rk,"model_type"),rk.forEach(t),rt=r(Ae," attribute is set to the same key you use when registering the config (here "),gi=n(Ae,"CODE",{});var tk=s(gi);hi=r(tk,'"new-model"'),tk.forEach(t),SA=r(Ae,")."),Ae.forEach(t),uf=i(Qe),De=n(Qe,"P",{});var Eo=s(De);We=r(Eo,"Likewise, if your "),pi=n(Eo,"CODE",{});var wa=s(pi);yn=r(wa,"NewModel"),wa.forEach(t),RA=r(Eo," is a subclass of "),Ln=n(Eo,"A",{href:!0});var ak=s(Ln);xn=r(ak,"PreTrainedModel"),ak.forEach(t),PA=r(Eo,`, make sure its
`),_i=n(Eo,"CODE",{});var vf=s(_i);$n=r(vf,"config_class"),vf.forEach(t),BA=r(Eo,` attribute is set to the same class you use when registering the model (here
`),ui=n(Eo,"CODE",{});var nk=s(ui);bf=r(nk,"NewModelConfig"),nk.forEach(t),Ca=r(Eo,")."),Eo.forEach(t),this.h()},h(){c(Ln,"href","/docs/transformers/pr_17593/en/main_classes/model#transformers.PreTrainedModel")},m(Qe,Ae){b(Qe,g,Ae),e(g,v),e(g,p),e(p,m),e(g,_),e(g,d),e(d,h),e(g,Mo),e(g,mi),e(mi,_f),e(g,rt),e(g,gi),e(gi,hi),e(g,SA),b(Qe,uf,Ae),b(Qe,De,Ae),e(De,We),e(De,pi),e(pi,yn),e(De,RA),e(De,Ln),e(Ln,xn),e(De,PA),e(De,_i),e(_i,$n),e(De,BA),e(De,ui),e(ui,bf),e(De,Ca)},d(Qe){Qe&&t(g),Qe&&t(uf),Qe&&t(De)}}}function lSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")

# Download vocabulary from huggingface.co and define model-specific arguments
tokenizer = AutoTokenizer.from_pretrained("roberta-base", add_prefix_space=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and define model-specific arguments</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;roberta-base&quot;</span>, add_prefix_space=<span class="hljs-literal">True</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dSt(L){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function cSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fSt(L){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function mSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _St(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ESt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ASt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ySt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $St(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ISt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function USt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Rt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ERt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ARt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $Rt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function IRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ORt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function URt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ePt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oPt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rPt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tPt(L){let g,v,p,m,_,d,h,Mo,mi,_f,rt,gi,hi,SA,uf,De,We,pi,yn,RA,Ln,xn,PA,_i,$n,BA,ui,bf,Ca,Qe,Ae,ok,bi,rk,tk,Eo,wa,ak,vf,nk,WOe,Bqe,vi,Ff,Aoe,IA,QOe,yoe,HOe,Iqe,kn,UOe,Loe,JOe,YOe,xoe,KOe,ZOe,Nqe,NA,qqe,sk,eVe,jqe,Tf,Dqe,Fi,Mf,$oe,qA,oVe,koe,rVe,Gqe,Co,jA,tVe,DA,aVe,lk,nVe,sVe,lVe,GA,iVe,Soe,dVe,cVe,fVe,Er,OA,mVe,Roe,gVe,hVe,Ti,pVe,Poe,_Ve,uVe,Boe,bVe,vVe,FVe,A,Ef,Ioe,TVe,MVe,ik,EVe,CVe,wVe,Cf,Noe,AVe,yVe,dk,LVe,xVe,$Ve,wf,qoe,kVe,SVe,ck,RVe,PVe,BVe,Af,joe,IVe,NVe,fk,qVe,jVe,DVe,yf,Doe,GVe,OVe,mk,VVe,XVe,zVe,Lf,Goe,WVe,QVe,gk,HVe,UVe,JVe,xf,Ooe,YVe,KVe,hk,ZVe,eXe,oXe,$f,Voe,rXe,tXe,pk,aXe,nXe,sXe,kf,Xoe,lXe,iXe,_k,dXe,cXe,fXe,Sf,zoe,mXe,gXe,uk,hXe,pXe,_Xe,Rf,Woe,uXe,bXe,bk,vXe,FXe,TXe,Pf,Qoe,MXe,EXe,vk,CXe,wXe,AXe,Bf,Hoe,yXe,LXe,Fk,xXe,$Xe,kXe,If,Uoe,SXe,RXe,Tk,PXe,BXe,IXe,Nf,Joe,NXe,qXe,Mk,jXe,DXe,GXe,qf,Yoe,OXe,VXe,Ek,XXe,zXe,WXe,jf,Koe,QXe,HXe,Ck,UXe,JXe,YXe,Df,Zoe,KXe,ZXe,wk,eze,oze,rze,Gf,ere,tze,aze,Ak,nze,sze,lze,Of,ore,ize,dze,yk,cze,fze,mze,Vf,rre,gze,hze,Lk,pze,_ze,uze,Xf,tre,bze,vze,xk,Fze,Tze,Mze,zf,are,Eze,Cze,$k,wze,Aze,yze,Wf,nre,Lze,xze,kk,$ze,kze,Sze,Qf,sre,Rze,Pze,Sk,Bze,Ize,Nze,Hf,lre,qze,jze,Rk,Dze,Gze,Oze,Uf,ire,Vze,Xze,Pk,zze,Wze,Qze,Jf,dre,Hze,Uze,Bk,Jze,Yze,Kze,Yf,cre,Zze,eWe,Ik,oWe,rWe,tWe,Kf,fre,aWe,nWe,Nk,sWe,lWe,iWe,Zf,mre,dWe,cWe,qk,fWe,mWe,gWe,em,gre,hWe,pWe,jk,_We,uWe,bWe,om,hre,vWe,FWe,Dk,TWe,MWe,EWe,rm,pre,CWe,wWe,Gk,AWe,yWe,LWe,tm,_re,xWe,$We,Ok,kWe,SWe,RWe,am,ure,PWe,BWe,Vk,IWe,NWe,qWe,nm,bre,jWe,DWe,Xk,GWe,OWe,VWe,sm,vre,XWe,zWe,zk,WWe,QWe,HWe,lm,Fre,UWe,JWe,Wk,YWe,KWe,ZWe,im,Tre,eQe,oQe,Qk,rQe,tQe,aQe,dm,Mre,nQe,sQe,Hk,lQe,iQe,dQe,cm,Ere,cQe,fQe,Uk,mQe,gQe,hQe,fm,Cre,pQe,_Qe,Jk,uQe,bQe,vQe,mm,wre,FQe,TQe,Yk,MQe,EQe,CQe,gm,Are,wQe,AQe,Kk,yQe,LQe,xQe,hm,yre,$Qe,kQe,Zk,SQe,RQe,PQe,pm,Lre,BQe,IQe,eS,NQe,qQe,jQe,_m,xre,DQe,GQe,oS,OQe,VQe,XQe,um,$re,zQe,WQe,rS,QQe,HQe,UQe,bm,kre,JQe,YQe,tS,KQe,ZQe,eHe,vm,Sre,oHe,rHe,aS,tHe,aHe,nHe,Fm,Rre,sHe,lHe,nS,iHe,dHe,cHe,Tm,Pre,fHe,mHe,sS,gHe,hHe,pHe,Mm,Bre,_He,uHe,lS,bHe,vHe,FHe,Em,Ire,THe,MHe,iS,EHe,CHe,wHe,Cm,Nre,AHe,yHe,dS,LHe,xHe,$He,wm,qre,kHe,SHe,cS,RHe,PHe,BHe,Am,jre,IHe,NHe,fS,qHe,jHe,DHe,ym,Dre,GHe,OHe,mS,VHe,XHe,zHe,Lm,Gre,WHe,QHe,gS,HHe,UHe,JHe,xm,Ore,YHe,KHe,hS,ZHe,eUe,oUe,$m,Vre,rUe,tUe,pS,aUe,nUe,sUe,km,Xre,lUe,iUe,_S,dUe,cUe,fUe,Sm,zre,mUe,gUe,uS,hUe,pUe,_Ue,Rm,Wre,uUe,bUe,bS,vUe,FUe,TUe,Pm,Qre,MUe,EUe,vS,CUe,wUe,AUe,Bm,Hre,yUe,LUe,FS,xUe,$Ue,kUe,Im,Ure,SUe,RUe,TS,PUe,BUe,IUe,Nm,Jre,NUe,qUe,MS,jUe,DUe,GUe,qm,Yre,OUe,VUe,ES,XUe,zUe,WUe,jm,Kre,QUe,HUe,CS,UUe,JUe,YUe,Dm,Zre,KUe,ZUe,wS,eJe,oJe,rJe,Gm,ete,tJe,aJe,AS,nJe,sJe,lJe,Om,ote,iJe,dJe,yS,cJe,fJe,mJe,Vm,rte,gJe,hJe,LS,pJe,_Je,uJe,Xm,tte,bJe,vJe,xS,FJe,TJe,MJe,zm,ate,EJe,CJe,$S,wJe,AJe,yJe,Wm,nte,LJe,xJe,kS,$Je,kJe,SJe,Qm,ste,RJe,PJe,SS,BJe,IJe,NJe,Hm,lte,qJe,jJe,RS,DJe,GJe,OJe,Um,ite,VJe,XJe,PS,zJe,WJe,QJe,Jm,dte,HJe,UJe,BS,JJe,YJe,KJe,Ym,cte,ZJe,eYe,IS,oYe,rYe,tYe,Km,fte,aYe,nYe,NS,sYe,lYe,iYe,Zm,mte,dYe,cYe,qS,fYe,mYe,gYe,eg,gte,hYe,pYe,jS,_Ye,uYe,bYe,og,hte,vYe,FYe,DS,TYe,MYe,EYe,rg,pte,CYe,wYe,GS,AYe,yYe,LYe,tg,_te,xYe,$Ye,OS,kYe,SYe,RYe,ag,ute,PYe,BYe,VS,IYe,NYe,qYe,ng,bte,jYe,DYe,XS,GYe,OYe,VYe,sg,vte,XYe,zYe,zS,WYe,QYe,HYe,lg,Fte,UYe,JYe,WS,YYe,KYe,ZYe,ig,Tte,eKe,oKe,QS,rKe,tKe,aKe,dg,Mte,nKe,sKe,HS,lKe,iKe,dKe,cg,Ete,cKe,fKe,US,mKe,gKe,hKe,fg,Cte,pKe,_Ke,JS,uKe,bKe,vKe,mg,wte,FKe,TKe,YS,MKe,EKe,CKe,gg,Ate,wKe,AKe,KS,yKe,LKe,xKe,hg,yte,$Ke,kKe,ZS,SKe,RKe,PKe,pg,Lte,BKe,IKe,eR,NKe,qKe,jKe,_g,xte,DKe,GKe,oR,OKe,VKe,XKe,ug,$te,zKe,WKe,rR,QKe,HKe,UKe,bg,kte,JKe,YKe,tR,KKe,ZKe,eZe,vg,Ste,oZe,rZe,aR,tZe,aZe,nZe,Fg,Rte,sZe,lZe,nR,iZe,dZe,cZe,Tg,Pte,fZe,mZe,sR,gZe,hZe,pZe,Mg,Bte,_Ze,uZe,lR,bZe,vZe,FZe,Eg,Ite,TZe,MZe,iR,EZe,CZe,wZe,Cg,Nte,AZe,yZe,dR,LZe,xZe,$Ze,wg,kZe,Ag,VA,SZe,qte,RZe,Oqe,Mi,yg,jte,XA,PZe,Dte,BZe,Vqe,wo,zA,IZe,WA,NZe,cR,qZe,jZe,DZe,QA,GZe,Gte,OZe,VZe,XZe,Cr,HA,zZe,Ote,WZe,QZe,Aa,HZe,Vte,UZe,JZe,Xte,YZe,KZe,zte,ZZe,eeo,oeo,k,Sn,Wte,reo,teo,fR,aeo,neo,mR,seo,leo,ieo,Rn,Qte,deo,ceo,gR,feo,meo,hR,geo,heo,peo,Pn,Hte,_eo,ueo,pR,beo,veo,_R,Feo,Teo,Meo,Lg,Ute,Eeo,Ceo,uR,weo,Aeo,yeo,Bn,Jte,Leo,xeo,bR,$eo,keo,vR,Seo,Reo,Peo,xg,Yte,Beo,Ieo,FR,Neo,qeo,jeo,$g,Kte,Deo,Geo,TR,Oeo,Veo,Xeo,kg,Zte,zeo,Weo,MR,Qeo,Heo,Ueo,In,eae,Jeo,Yeo,ER,Keo,Zeo,CR,eoo,ooo,roo,Nn,oae,too,aoo,wR,noo,soo,AR,loo,ioo,doo,qn,rae,coo,foo,yR,moo,goo,LR,hoo,poo,_oo,Sg,tae,uoo,boo,xR,voo,Foo,Too,Rg,aae,Moo,Eoo,$R,Coo,woo,Aoo,jn,nae,yoo,Loo,kR,xoo,$oo,SR,koo,Soo,Roo,Pg,sae,Poo,Boo,RR,Ioo,Noo,qoo,Dn,lae,joo,Doo,PR,Goo,Ooo,BR,Voo,Xoo,zoo,Gn,iae,Woo,Qoo,IR,Hoo,Uoo,NR,Joo,Yoo,Koo,On,dae,Zoo,ero,qR,oro,rro,jR,tro,aro,nro,Bg,cae,sro,lro,DR,iro,dro,cro,Vn,fae,fro,mro,GR,gro,hro,OR,pro,_ro,uro,Xn,mae,bro,vro,VR,Fro,Tro,XR,Mro,Ero,Cro,zn,gae,wro,Aro,zR,yro,Lro,WR,xro,$ro,kro,Wn,hae,Sro,Rro,QR,Pro,Bro,HR,Iro,Nro,qro,Qn,pae,jro,Dro,UR,Gro,Oro,JR,Vro,Xro,zro,Hn,_ae,Wro,Qro,YR,Hro,Uro,KR,Jro,Yro,Kro,Ig,uae,Zro,eto,ZR,oto,rto,tto,Un,bae,ato,nto,eP,sto,lto,oP,ito,dto,cto,Ng,vae,fto,mto,rP,gto,hto,pto,Jn,Fae,_to,uto,tP,bto,vto,aP,Fto,Tto,Mto,Yn,Tae,Eto,Cto,nP,wto,Ato,sP,yto,Lto,xto,Kn,Mae,$to,kto,lP,Sto,Rto,iP,Pto,Bto,Ito,qg,Eae,Nto,qto,dP,jto,Dto,Gto,Zn,Cae,Oto,Vto,cP,Xto,zto,fP,Wto,Qto,Hto,es,wae,Uto,Jto,mP,Yto,Kto,gP,Zto,eao,oao,jg,Aae,rao,tao,hP,aao,nao,sao,os,yae,lao,iao,pP,dao,cao,_P,fao,mao,gao,rs,Lae,hao,pao,uP,_ao,uao,bP,bao,vao,Fao,ts,xae,Tao,Mao,vP,Eao,Cao,FP,wao,Aao,yao,as,$ae,Lao,xao,TP,$ao,kao,MP,Sao,Rao,Pao,ns,kae,Bao,Iao,EP,Nao,qao,CP,jao,Dao,Gao,ss,Sae,Oao,Vao,wP,Xao,zao,AP,Wao,Qao,Hao,ls,Rae,Uao,Jao,yP,Yao,Kao,LP,Zao,eno,ono,Dg,Pae,rno,tno,xP,ano,nno,sno,is,Bae,lno,ino,$P,dno,cno,kP,fno,mno,gno,Gg,Iae,hno,pno,SP,_no,uno,bno,Og,Nae,vno,Fno,RP,Tno,Mno,Eno,ds,qae,Cno,wno,PP,Ano,yno,BP,Lno,xno,$no,cs,jae,kno,Sno,IP,Rno,Pno,NP,Bno,Ino,Nno,fs,Dae,qno,jno,qP,Dno,Gno,jP,Ono,Vno,Xno,Vg,Gae,zno,Wno,DP,Qno,Hno,Uno,ms,Oae,Jno,Yno,GP,Kno,Zno,OP,eso,oso,rso,gs,Vae,tso,aso,VP,nso,sso,XP,lso,iso,dso,hs,Xae,cso,fso,zP,mso,gso,WP,hso,pso,_so,ps,zae,uso,bso,QP,vso,Fso,HP,Tso,Mso,Eso,_s,Wae,Cso,wso,UP,Aso,yso,JP,Lso,xso,$so,Xg,Qae,kso,Sso,YP,Rso,Pso,Bso,us,Hae,Iso,Nso,KP,qso,jso,ZP,Dso,Gso,Oso,zg,Uae,Vso,Xso,eB,zso,Wso,Qso,Wg,Jae,Hso,Uso,oB,Jso,Yso,Kso,Qg,Yae,Zso,elo,rB,olo,rlo,tlo,Hg,Kae,alo,nlo,tB,slo,llo,ilo,bs,Zae,dlo,clo,aB,flo,mlo,nB,glo,hlo,plo,Ug,ene,_lo,ulo,sB,blo,vlo,Flo,vs,one,Tlo,Mlo,lB,Elo,Clo,iB,wlo,Alo,ylo,Fs,rne,Llo,xlo,dB,$lo,klo,cB,Slo,Rlo,Plo,Ts,tne,Blo,Ilo,fB,Nlo,qlo,mB,jlo,Dlo,Glo,Ms,ane,Olo,Vlo,gB,Xlo,zlo,hB,Wlo,Qlo,Hlo,Es,nne,Ulo,Jlo,pB,Ylo,Klo,_B,Zlo,eio,oio,Cs,sne,rio,tio,uB,aio,nio,bB,sio,lio,iio,Jg,lne,dio,cio,vB,fio,mio,gio,Yg,ine,hio,pio,FB,_io,uio,bio,ws,dne,vio,Fio,TB,Tio,Mio,MB,Eio,Cio,wio,As,cne,Aio,yio,EB,Lio,xio,CB,$io,kio,Sio,ys,fne,Rio,Pio,wB,Bio,Iio,AB,Nio,qio,jio,Kg,mne,Dio,Gio,yB,Oio,Vio,Xio,Zg,gne,zio,Wio,LB,Qio,Hio,Uio,eh,hne,Jio,Yio,xB,Kio,Zio,edo,Ls,pne,odo,rdo,$B,tdo,ado,kB,ndo,sdo,ldo,oh,_ne,ido,ddo,SB,cdo,fdo,mdo,rh,une,gdo,hdo,RB,pdo,_do,udo,th,bne,bdo,vdo,PB,Fdo,Tdo,Mdo,xs,vne,Edo,Cdo,BB,wdo,Ado,IB,ydo,Ldo,xdo,ah,Fne,$do,kdo,NB,Sdo,Rdo,Pdo,nh,Tne,Bdo,Ido,qB,Ndo,qdo,jdo,$s,Mne,Ddo,Gdo,jB,Odo,Vdo,DB,Xdo,zdo,Wdo,ks,Ene,Qdo,Hdo,GB,Udo,Jdo,OB,Ydo,Kdo,Zdo,Ss,Cne,eco,oco,VB,rco,tco,XB,aco,nco,sco,Rs,wne,lco,ico,zB,dco,cco,WB,fco,mco,gco,sh,hco,lh,UA,pco,Ane,_co,Xqe,Ei,ih,yne,JA,uco,Lne,bco,zqe,Ao,YA,vco,KA,Fco,QB,Tco,Mco,Eco,ZA,Cco,xne,wco,Aco,yco,He,e6,Lco,$ne,xco,$co,ya,kco,kne,Sco,Rco,Sne,Pco,Bco,Rne,Ico,Nco,qco,Y,dh,Pne,jco,Dco,HB,Gco,Oco,Vco,ch,Bne,Xco,zco,UB,Wco,Qco,Hco,fh,Ine,Uco,Jco,JB,Yco,Kco,Zco,mh,Nne,efo,ofo,YB,rfo,tfo,afo,gh,qne,nfo,sfo,KB,lfo,ifo,dfo,hh,jne,cfo,ffo,ZB,mfo,gfo,hfo,ph,Dne,pfo,_fo,eI,ufo,bfo,vfo,_h,Gne,Ffo,Tfo,oI,Mfo,Efo,Cfo,uh,One,wfo,Afo,rI,yfo,Lfo,xfo,bh,Vne,$fo,kfo,tI,Sfo,Rfo,Pfo,vh,Xne,Bfo,Ifo,aI,Nfo,qfo,jfo,Fh,zne,Dfo,Gfo,nI,Ofo,Vfo,Xfo,Th,Wne,zfo,Wfo,sI,Qfo,Hfo,Ufo,Mh,Qne,Jfo,Yfo,lI,Kfo,Zfo,emo,Eh,Hne,omo,rmo,iI,tmo,amo,nmo,Ch,Une,smo,lmo,dI,imo,dmo,cmo,wh,Jne,fmo,mmo,cI,gmo,hmo,pmo,Ah,Yne,_mo,umo,fI,bmo,vmo,Fmo,yh,Kne,Tmo,Mmo,mI,Emo,Cmo,wmo,Lh,Zne,Amo,ymo,gI,Lmo,xmo,$mo,xh,ese,kmo,Smo,hI,Rmo,Pmo,Bmo,$h,ose,Imo,Nmo,pI,qmo,jmo,Dmo,kh,rse,Gmo,Omo,_I,Vmo,Xmo,zmo,Sh,tse,Wmo,Qmo,uI,Hmo,Umo,Jmo,Rh,ase,Ymo,Kmo,bI,Zmo,ego,ogo,Ph,nse,rgo,tgo,vI,ago,ngo,sgo,Bh,sse,lgo,igo,FI,dgo,cgo,fgo,Ih,lse,mgo,ggo,TI,hgo,pgo,_go,Nh,ise,ugo,bgo,MI,vgo,Fgo,Tgo,qh,dse,Mgo,Ego,EI,Cgo,wgo,Ago,jh,ygo,Dh,Lgo,Gh,o6,xgo,cse,$go,Wqe,Ci,Oh,fse,r6,kgo,mse,Sgo,Qqe,yo,t6,Rgo,a6,Pgo,CI,Bgo,Igo,Ngo,n6,qgo,gse,jgo,Dgo,Ggo,Ue,s6,Ogo,hse,Vgo,Xgo,wi,zgo,pse,Wgo,Qgo,_se,Hgo,Ugo,Jgo,he,Vh,use,Ygo,Kgo,wI,Zgo,eho,oho,Xh,bse,rho,tho,vse,aho,nho,sho,zh,Fse,lho,iho,AI,dho,cho,fho,Wh,Tse,mho,gho,yI,hho,pho,_ho,Qh,Mse,uho,bho,LI,vho,Fho,Tho,Hh,Ese,Mho,Eho,xI,Cho,who,Aho,Uh,Cse,yho,Lho,$I,xho,$ho,kho,Jh,wse,Sho,Rho,kI,Pho,Bho,Iho,Yh,Ase,Nho,qho,SI,jho,Dho,Gho,Kh,yse,Oho,Vho,RI,Xho,zho,Who,Zh,Lse,Qho,Hho,PI,Uho,Jho,Yho,ep,xse,Kho,Zho,BI,epo,opo,rpo,op,$se,tpo,apo,II,npo,spo,lpo,rp,kse,ipo,dpo,NI,cpo,fpo,mpo,tp,Sse,gpo,hpo,qI,ppo,_po,upo,ap,Rse,bpo,vpo,jI,Fpo,Tpo,Mpo,np,Pse,Epo,Cpo,DI,wpo,Apo,ypo,sp,Lpo,lp,xpo,ip,l6,$po,Bse,kpo,Hqe,Ai,dp,Ise,i6,Spo,Nse,Rpo,Uqe,Lo,d6,Ppo,yi,Bpo,GI,Ipo,Npo,OI,qpo,jpo,Dpo,c6,Gpo,qse,Opo,Vpo,Xpo,tt,f6,zpo,jse,Wpo,Qpo,Li,Hpo,Dse,Upo,Jpo,VI,Ypo,Kpo,Zpo,cp,e_o,Je,m6,o_o,Gse,r_o,t_o,La,a_o,Ose,n_o,s_o,Vse,l_o,i_o,Xse,d_o,c_o,f_o,x,fp,zse,m_o,g_o,XI,h_o,p_o,__o,mp,Wse,u_o,b_o,zI,v_o,F_o,T_o,gp,Qse,M_o,E_o,WI,C_o,w_o,A_o,hp,Hse,y_o,L_o,QI,x_o,$_o,k_o,pp,Use,S_o,R_o,HI,P_o,B_o,I_o,_p,Jse,N_o,q_o,UI,j_o,D_o,G_o,up,Yse,O_o,V_o,JI,X_o,z_o,W_o,bp,Kse,Q_o,H_o,YI,U_o,J_o,Y_o,vp,Zse,K_o,Z_o,KI,euo,ouo,ruo,Fp,ele,tuo,auo,ZI,nuo,suo,luo,Tp,ole,iuo,duo,eN,cuo,fuo,muo,Mp,rle,guo,huo,oN,puo,_uo,uuo,Ep,tle,buo,vuo,rN,Fuo,Tuo,Muo,Cp,ale,Euo,Cuo,tN,wuo,Auo,yuo,wp,nle,Luo,xuo,aN,$uo,kuo,Suo,Ap,sle,Ruo,Puo,nN,Buo,Iuo,Nuo,yp,lle,quo,juo,sN,Duo,Guo,Ouo,Lp,ile,Vuo,Xuo,lN,zuo,Wuo,Quo,xp,dle,Huo,Uuo,iN,Juo,Yuo,Kuo,$p,cle,Zuo,e1o,dN,o1o,r1o,t1o,kp,fle,a1o,n1o,cN,s1o,l1o,i1o,Sp,mle,d1o,c1o,fN,f1o,m1o,g1o,Rp,gle,h1o,p1o,mN,_1o,u1o,b1o,Pp,hle,v1o,F1o,gN,T1o,M1o,E1o,Bp,ple,C1o,w1o,hN,A1o,y1o,L1o,Ip,_le,x1o,$1o,pN,k1o,S1o,R1o,Np,ule,P1o,B1o,_N,I1o,N1o,q1o,qp,ble,j1o,D1o,uN,G1o,O1o,V1o,jp,vle,X1o,z1o,bN,W1o,Q1o,H1o,Dp,Fle,U1o,J1o,vN,Y1o,K1o,Z1o,Gp,Tle,ebo,obo,FN,rbo,tbo,abo,Op,Mle,nbo,sbo,TN,lbo,ibo,dbo,Ps,Ele,cbo,fbo,MN,mbo,gbo,EN,hbo,pbo,_bo,Vp,Cle,ubo,bbo,CN,vbo,Fbo,Tbo,Xp,wle,Mbo,Ebo,wN,Cbo,wbo,Abo,zp,Ale,ybo,Lbo,AN,xbo,$bo,kbo,Wp,yle,Sbo,Rbo,yN,Pbo,Bbo,Ibo,Qp,Lle,Nbo,qbo,LN,jbo,Dbo,Gbo,Hp,xle,Obo,Vbo,xN,Xbo,zbo,Wbo,Up,$le,Qbo,Hbo,$N,Ubo,Jbo,Ybo,Jp,kle,Kbo,Zbo,kN,e2o,o2o,r2o,Yp,Sle,t2o,a2o,SN,n2o,s2o,l2o,Kp,Rle,i2o,d2o,RN,c2o,f2o,m2o,Zp,Ple,g2o,h2o,PN,p2o,_2o,u2o,e_,Ble,b2o,v2o,BN,F2o,T2o,M2o,o_,Ile,E2o,C2o,IN,w2o,A2o,y2o,r_,Nle,L2o,x2o,NN,$2o,k2o,S2o,t_,qle,R2o,P2o,qN,B2o,I2o,N2o,a_,jle,q2o,j2o,jN,D2o,G2o,O2o,n_,Dle,V2o,X2o,DN,z2o,W2o,Q2o,s_,Gle,H2o,U2o,GN,J2o,Y2o,K2o,l_,Ole,Z2o,evo,ON,ovo,rvo,tvo,i_,Vle,avo,nvo,VN,svo,lvo,ivo,d_,Xle,dvo,cvo,XN,fvo,mvo,gvo,c_,zle,hvo,pvo,zN,_vo,uvo,bvo,f_,Wle,vvo,Fvo,WN,Tvo,Mvo,Evo,m_,Qle,Cvo,wvo,QN,Avo,yvo,Lvo,g_,Hle,xvo,$vo,HN,kvo,Svo,Rvo,h_,Ule,Pvo,Bvo,UN,Ivo,Nvo,qvo,p_,Jle,jvo,Dvo,JN,Gvo,Ovo,Vvo,__,Yle,Xvo,zvo,YN,Wvo,Qvo,Hvo,u_,Kle,Uvo,Jvo,KN,Yvo,Kvo,Zvo,b_,Zle,e5o,o5o,ZN,r5o,t5o,a5o,v_,eie,n5o,s5o,eq,l5o,i5o,d5o,F_,oie,c5o,f5o,oq,m5o,g5o,h5o,T_,rie,p5o,_5o,rq,u5o,b5o,v5o,M_,tie,F5o,T5o,tq,M5o,E5o,C5o,E_,aie,w5o,A5o,aq,y5o,L5o,x5o,C_,nie,$5o,k5o,nq,S5o,R5o,P5o,w_,sie,B5o,I5o,sq,N5o,q5o,j5o,A_,lie,D5o,G5o,lq,O5o,V5o,X5o,y_,iie,z5o,W5o,iq,Q5o,H5o,U5o,L_,die,J5o,Y5o,dq,K5o,Z5o,e3o,x_,cie,o3o,r3o,cq,t3o,a3o,n3o,$_,fie,s3o,l3o,fq,i3o,d3o,c3o,k_,mie,f3o,m3o,mq,g3o,h3o,p3o,S_,gie,_3o,u3o,gq,b3o,v3o,F3o,R_,hie,T3o,M3o,hq,E3o,C3o,w3o,P_,pie,A3o,y3o,pq,L3o,x3o,$3o,B_,_ie,k3o,S3o,_q,R3o,P3o,B3o,I_,uie,I3o,N3o,uq,q3o,j3o,D3o,N_,bie,G3o,O3o,bq,V3o,X3o,z3o,q_,vie,W3o,Q3o,vq,H3o,U3o,J3o,j_,Fie,Y3o,K3o,Fq,Z3o,eFo,oFo,D_,Tie,rFo,tFo,Tq,aFo,nFo,sFo,G_,Mie,lFo,iFo,Mq,dFo,cFo,fFo,O_,Eie,mFo,gFo,Eq,hFo,pFo,_Fo,V_,Cie,uFo,bFo,Cq,vFo,FFo,TFo,X_,wie,MFo,EFo,wq,CFo,wFo,AFo,z_,Aie,yFo,LFo,Aq,xFo,$Fo,kFo,W_,yie,SFo,RFo,yq,PFo,BFo,IFo,Q_,Lie,NFo,qFo,Lq,jFo,DFo,GFo,H_,xie,OFo,VFo,xq,XFo,zFo,WFo,U_,$ie,QFo,HFo,$q,UFo,JFo,YFo,J_,kie,KFo,ZFo,kq,eTo,oTo,rTo,Y_,Sie,tTo,aTo,Sq,nTo,sTo,lTo,K_,Rie,iTo,dTo,Rq,cTo,fTo,mTo,Z_,Pie,gTo,hTo,Pq,pTo,_To,uTo,eu,Bie,bTo,vTo,Bq,FTo,TTo,MTo,ou,Iie,ETo,CTo,Iq,wTo,ATo,yTo,ru,Nie,LTo,xTo,Nq,$To,kTo,STo,tu,qie,RTo,PTo,qq,BTo,ITo,NTo,au,jie,qTo,jTo,jq,DTo,GTo,OTo,nu,VTo,Die,XTo,zTo,Gie,WTo,QTo,su,Jqe,xi,lu,Oie,g6,HTo,Vie,UTo,Yqe,xo,h6,JTo,$i,YTo,Dq,KTo,ZTo,Gq,e7o,o7o,r7o,p6,t7o,Xie,a7o,n7o,s7o,at,_6,l7o,zie,i7o,d7o,ki,c7o,Wie,f7o,m7o,Oq,g7o,h7o,p7o,iu,_7o,Ye,u6,u7o,Qie,b7o,v7o,xa,F7o,Hie,T7o,M7o,Uie,E7o,C7o,Jie,w7o,A7o,y7o,G,du,Yie,L7o,x7o,Vq,$7o,k7o,S7o,cu,Kie,R7o,P7o,Xq,B7o,I7o,N7o,fu,Zie,q7o,j7o,zq,D7o,G7o,O7o,mu,ede,V7o,X7o,Wq,z7o,W7o,Q7o,gu,ode,H7o,U7o,Qq,J7o,Y7o,K7o,hu,rde,Z7o,e9o,Hq,o9o,r9o,t9o,pu,tde,a9o,n9o,Uq,s9o,l9o,i9o,_u,ade,d9o,c9o,Jq,f9o,m9o,g9o,uu,nde,h9o,p9o,Yq,_9o,u9o,b9o,bu,sde,v9o,F9o,Kq,T9o,M9o,E9o,vu,lde,C9o,w9o,Zq,A9o,y9o,L9o,Fu,ide,x9o,$9o,ej,k9o,S9o,R9o,Tu,dde,P9o,B9o,oj,I9o,N9o,q9o,Mu,cde,j9o,D9o,rj,G9o,O9o,V9o,Eu,fde,X9o,z9o,tj,W9o,Q9o,H9o,Cu,mde,U9o,J9o,aj,Y9o,K9o,Z9o,wu,gde,eMo,oMo,nj,rMo,tMo,aMo,Au,hde,nMo,sMo,sj,lMo,iMo,dMo,yu,pde,cMo,fMo,lj,mMo,gMo,hMo,Lu,_de,pMo,_Mo,ij,uMo,bMo,vMo,xu,ude,FMo,TMo,dj,MMo,EMo,CMo,$u,bde,wMo,AMo,cj,yMo,LMo,xMo,ku,vde,$Mo,kMo,fj,SMo,RMo,PMo,Su,Fde,BMo,IMo,mj,NMo,qMo,jMo,Ru,Tde,DMo,GMo,gj,OMo,VMo,XMo,Pu,Mde,zMo,WMo,hj,QMo,HMo,UMo,Bu,Ede,JMo,YMo,pj,KMo,ZMo,e4o,Iu,Cde,o4o,r4o,_j,t4o,a4o,n4o,Nu,wde,s4o,l4o,uj,i4o,d4o,c4o,qu,Ade,f4o,m4o,bj,g4o,h4o,p4o,ju,yde,_4o,u4o,vj,b4o,v4o,F4o,Du,Lde,T4o,M4o,Fj,E4o,C4o,w4o,Gu,xde,A4o,y4o,Tj,L4o,x4o,$4o,Ou,$de,k4o,S4o,Mj,R4o,P4o,B4o,Vu,kde,I4o,N4o,Ej,q4o,j4o,D4o,Xu,Sde,G4o,O4o,Cj,V4o,X4o,z4o,zu,Rde,W4o,Q4o,wj,H4o,U4o,J4o,Wu,Pde,Y4o,K4o,Aj,Z4o,eEo,oEo,Qu,Bde,rEo,tEo,yj,aEo,nEo,sEo,Hu,Ide,lEo,iEo,Lj,dEo,cEo,fEo,Uu,Nde,mEo,gEo,xj,hEo,pEo,_Eo,Ju,qde,uEo,bEo,$j,vEo,FEo,TEo,Yu,MEo,jde,EEo,CEo,Dde,wEo,AEo,Ku,Kqe,Si,Zu,Gde,b6,yEo,Ode,LEo,Zqe,$o,v6,xEo,Ri,$Eo,kj,kEo,SEo,Sj,REo,PEo,BEo,F6,IEo,Vde,NEo,qEo,jEo,nt,T6,DEo,Xde,GEo,OEo,Pi,VEo,zde,XEo,zEo,Rj,WEo,QEo,HEo,e1,UEo,Ke,M6,JEo,Wde,YEo,KEo,$a,ZEo,Qde,eCo,oCo,Hde,rCo,tCo,Ude,aCo,nCo,sCo,z,o1,Jde,lCo,iCo,Pj,dCo,cCo,fCo,r1,Yde,mCo,gCo,Bj,hCo,pCo,_Co,t1,Kde,uCo,bCo,Ij,vCo,FCo,TCo,a1,Zde,MCo,ECo,Nj,CCo,wCo,ACo,n1,ece,yCo,LCo,qj,xCo,$Co,kCo,s1,oce,SCo,RCo,jj,PCo,BCo,ICo,l1,rce,NCo,qCo,Dj,jCo,DCo,GCo,i1,tce,OCo,VCo,Gj,XCo,zCo,WCo,d1,ace,QCo,HCo,Oj,UCo,JCo,YCo,c1,nce,KCo,ZCo,Vj,e0o,o0o,r0o,f1,sce,t0o,a0o,Xj,n0o,s0o,l0o,m1,lce,i0o,d0o,zj,c0o,f0o,m0o,g1,ice,g0o,h0o,Wj,p0o,_0o,u0o,h1,dce,b0o,v0o,Qj,F0o,T0o,M0o,p1,cce,E0o,C0o,Hj,w0o,A0o,y0o,_1,fce,L0o,x0o,Uj,$0o,k0o,S0o,u1,mce,R0o,P0o,Jj,B0o,I0o,N0o,b1,gce,q0o,j0o,Yj,D0o,G0o,O0o,v1,hce,V0o,X0o,Kj,z0o,W0o,Q0o,F1,pce,H0o,U0o,Zj,J0o,Y0o,K0o,T1,_ce,Z0o,ewo,eD,owo,rwo,two,M1,uce,awo,nwo,oD,swo,lwo,iwo,E1,bce,dwo,cwo,rD,fwo,mwo,gwo,C1,vce,hwo,pwo,tD,_wo,uwo,bwo,w1,Fce,vwo,Fwo,aD,Two,Mwo,Ewo,A1,Tce,Cwo,wwo,nD,Awo,ywo,Lwo,y1,Mce,xwo,$wo,sD,kwo,Swo,Rwo,L1,Ece,Pwo,Bwo,lD,Iwo,Nwo,qwo,x1,Cce,jwo,Dwo,iD,Gwo,Owo,Vwo,$1,wce,Xwo,zwo,dD,Wwo,Qwo,Hwo,k1,Ace,Uwo,Jwo,cD,Ywo,Kwo,Zwo,S1,yce,eAo,oAo,fD,rAo,tAo,aAo,R1,Lce,nAo,sAo,mD,lAo,iAo,dAo,P1,xce,cAo,fAo,gD,mAo,gAo,hAo,B1,$ce,pAo,_Ao,hD,uAo,bAo,vAo,I1,kce,FAo,TAo,pD,MAo,EAo,CAo,N1,Sce,wAo,AAo,_D,yAo,LAo,xAo,q1,$Ao,Rce,kAo,SAo,Pce,RAo,PAo,j1,eje,Bi,D1,Bce,E6,BAo,Ice,IAo,oje,ko,C6,NAo,Ii,qAo,uD,jAo,DAo,bD,GAo,OAo,VAo,w6,XAo,Nce,zAo,WAo,QAo,st,A6,HAo,qce,UAo,JAo,Ni,YAo,jce,KAo,ZAo,vD,e6o,o6o,r6o,G1,t6o,Ze,y6,a6o,Dce,n6o,s6o,ka,l6o,Gce,i6o,d6o,Oce,c6o,f6o,Vce,m6o,g6o,h6o,W,O1,Xce,p6o,_6o,FD,u6o,b6o,v6o,V1,zce,F6o,T6o,TD,M6o,E6o,C6o,X1,Wce,w6o,A6o,MD,y6o,L6o,x6o,z1,Qce,$6o,k6o,ED,S6o,R6o,P6o,W1,Hce,B6o,I6o,CD,N6o,q6o,j6o,Q1,Uce,D6o,G6o,wD,O6o,V6o,X6o,H1,Jce,z6o,W6o,AD,Q6o,H6o,U6o,U1,Yce,J6o,Y6o,yD,K6o,Z6o,eyo,J1,Kce,oyo,ryo,LD,tyo,ayo,nyo,Y1,Zce,syo,lyo,xD,iyo,dyo,cyo,K1,efe,fyo,myo,$D,gyo,hyo,pyo,Z1,ofe,_yo,uyo,kD,byo,vyo,Fyo,eb,rfe,Tyo,Myo,SD,Eyo,Cyo,wyo,ob,tfe,Ayo,yyo,RD,Lyo,xyo,$yo,rb,afe,kyo,Syo,PD,Ryo,Pyo,Byo,tb,nfe,Iyo,Nyo,BD,qyo,jyo,Dyo,ab,sfe,Gyo,Oyo,ID,Vyo,Xyo,zyo,nb,lfe,Wyo,Qyo,ND,Hyo,Uyo,Jyo,sb,ife,Yyo,Kyo,qD,Zyo,eLo,oLo,lb,dfe,rLo,tLo,jD,aLo,nLo,sLo,ib,cfe,lLo,iLo,DD,dLo,cLo,fLo,db,ffe,mLo,gLo,GD,hLo,pLo,_Lo,cb,mfe,uLo,bLo,OD,vLo,FLo,TLo,fb,gfe,MLo,ELo,VD,CLo,wLo,ALo,mb,hfe,yLo,LLo,XD,xLo,$Lo,kLo,gb,pfe,SLo,RLo,zD,PLo,BLo,ILo,hb,_fe,NLo,qLo,WD,jLo,DLo,GLo,pb,ufe,OLo,VLo,QD,XLo,zLo,WLo,_b,bfe,QLo,HLo,HD,ULo,JLo,YLo,ub,vfe,KLo,ZLo,UD,e8o,o8o,r8o,bb,Ffe,t8o,a8o,JD,n8o,s8o,l8o,vb,Tfe,i8o,d8o,Mfe,c8o,f8o,m8o,Fb,Efe,g8o,h8o,YD,p8o,_8o,u8o,Tb,Cfe,b8o,v8o,KD,F8o,T8o,M8o,Mb,wfe,E8o,C8o,ZD,w8o,A8o,y8o,Eb,Afe,L8o,x8o,eG,$8o,k8o,S8o,Cb,R8o,yfe,P8o,B8o,Lfe,I8o,N8o,wb,rje,qi,Ab,xfe,L6,q8o,$fe,j8o,tje,So,x6,D8o,ji,G8o,oG,O8o,V8o,rG,X8o,z8o,W8o,$6,Q8o,kfe,H8o,U8o,J8o,lt,k6,Y8o,Sfe,K8o,Z8o,Di,exo,Rfe,oxo,rxo,tG,txo,axo,nxo,yb,sxo,eo,S6,lxo,Pfe,ixo,dxo,Sa,cxo,Bfe,fxo,mxo,Ife,gxo,hxo,Nfe,pxo,_xo,uxo,_e,Lb,qfe,bxo,vxo,aG,Fxo,Txo,Mxo,xb,jfe,Exo,Cxo,nG,wxo,Axo,yxo,$b,Dfe,Lxo,xxo,sG,$xo,kxo,Sxo,kb,Gfe,Rxo,Pxo,lG,Bxo,Ixo,Nxo,Sb,Ofe,qxo,jxo,iG,Dxo,Gxo,Oxo,Rb,Vfe,Vxo,Xxo,dG,zxo,Wxo,Qxo,Pb,Xfe,Hxo,Uxo,cG,Jxo,Yxo,Kxo,Bb,zfe,Zxo,e$o,fG,o$o,r$o,t$o,Ib,Wfe,a$o,n$o,mG,s$o,l$o,i$o,Nb,Qfe,d$o,c$o,gG,f$o,m$o,g$o,qb,Hfe,h$o,p$o,hG,_$o,u$o,b$o,jb,Ufe,v$o,F$o,pG,T$o,M$o,E$o,Db,Jfe,C$o,w$o,_G,A$o,y$o,L$o,Gb,Yfe,x$o,$$o,uG,k$o,S$o,R$o,Ob,Kfe,P$o,B$o,bG,I$o,N$o,q$o,Vb,Zfe,j$o,D$o,vG,G$o,O$o,V$o,Xb,X$o,eme,z$o,W$o,ome,Q$o,H$o,zb,aje,Gi,Wb,rme,R6,U$o,tme,J$o,nje,Ro,P6,Y$o,Oi,K$o,FG,Z$o,eko,TG,oko,rko,tko,B6,ako,ame,nko,sko,lko,it,I6,iko,nme,dko,cko,Vi,fko,sme,mko,gko,MG,hko,pko,_ko,Qb,uko,oo,N6,bko,lme,vko,Fko,Ra,Tko,ime,Mko,Eko,dme,Cko,wko,cme,Ako,yko,Lko,N,Hb,fme,xko,$ko,EG,kko,Sko,Rko,Ub,mme,Pko,Bko,CG,Iko,Nko,qko,Jb,gme,jko,Dko,wG,Gko,Oko,Vko,Yb,hme,Xko,zko,AG,Wko,Qko,Hko,Kb,pme,Uko,Jko,yG,Yko,Kko,Zko,Zb,_me,eSo,oSo,LG,rSo,tSo,aSo,e2,ume,nSo,sSo,xG,lSo,iSo,dSo,o2,bme,cSo,fSo,$G,mSo,gSo,hSo,r2,vme,pSo,_So,kG,uSo,bSo,vSo,t2,Fme,FSo,TSo,SG,MSo,ESo,CSo,a2,Tme,wSo,ASo,RG,ySo,LSo,xSo,n2,Mme,$So,kSo,PG,SSo,RSo,PSo,s2,Eme,BSo,ISo,BG,NSo,qSo,jSo,l2,Cme,DSo,GSo,IG,OSo,VSo,XSo,i2,wme,zSo,WSo,NG,QSo,HSo,USo,d2,Ame,JSo,YSo,qG,KSo,ZSo,eRo,c2,yme,oRo,rRo,jG,tRo,aRo,nRo,f2,Lme,sRo,lRo,DG,iRo,dRo,cRo,m2,xme,fRo,mRo,GG,gRo,hRo,pRo,g2,$me,_Ro,uRo,OG,bRo,vRo,FRo,h2,kme,TRo,MRo,VG,ERo,CRo,wRo,p2,Sme,ARo,yRo,XG,LRo,xRo,$Ro,_2,Rme,kRo,SRo,zG,RRo,PRo,BRo,u2,Pme,IRo,NRo,WG,qRo,jRo,DRo,b2,Bme,GRo,ORo,QG,VRo,XRo,zRo,v2,Ime,WRo,QRo,HG,HRo,URo,JRo,F2,Nme,YRo,KRo,UG,ZRo,ePo,oPo,T2,qme,rPo,tPo,JG,aPo,nPo,sPo,M2,jme,lPo,iPo,YG,dPo,cPo,fPo,E2,Dme,mPo,gPo,KG,hPo,pPo,_Po,C2,Gme,uPo,bPo,ZG,vPo,FPo,TPo,w2,Ome,MPo,EPo,eO,CPo,wPo,APo,A2,Vme,yPo,LPo,oO,xPo,$Po,kPo,y2,Xme,SPo,RPo,rO,PPo,BPo,IPo,L2,zme,NPo,qPo,tO,jPo,DPo,GPo,x2,Wme,OPo,VPo,aO,XPo,zPo,WPo,$2,Qme,QPo,HPo,nO,UPo,JPo,YPo,k2,Hme,KPo,ZPo,sO,eBo,oBo,rBo,S2,Ume,tBo,aBo,lO,nBo,sBo,lBo,R2,Jme,iBo,dBo,iO,cBo,fBo,mBo,P2,Yme,gBo,hBo,dO,pBo,_Bo,uBo,B2,Kme,bBo,vBo,cO,FBo,TBo,MBo,I2,Zme,EBo,CBo,fO,wBo,ABo,yBo,N2,ege,LBo,xBo,mO,$Bo,kBo,SBo,q2,oge,RBo,PBo,gO,BBo,IBo,NBo,j2,rge,qBo,jBo,hO,DBo,GBo,OBo,D2,tge,VBo,XBo,pO,zBo,WBo,QBo,G2,HBo,age,UBo,JBo,nge,YBo,KBo,O2,sje,Xi,V2,sge,q6,ZBo,lge,eIo,lje,Po,j6,oIo,zi,rIo,_O,tIo,aIo,uO,nIo,sIo,lIo,D6,iIo,ige,dIo,cIo,fIo,dt,G6,mIo,dge,gIo,hIo,Wi,pIo,cge,_Io,uIo,bO,bIo,vIo,FIo,X2,TIo,ro,O6,MIo,fge,EIo,CIo,Pa,wIo,mge,AIo,yIo,gge,LIo,xIo,hge,$Io,kIo,SIo,K,z2,pge,RIo,PIo,vO,BIo,IIo,NIo,W2,_ge,qIo,jIo,FO,DIo,GIo,OIo,Q2,uge,VIo,XIo,TO,zIo,WIo,QIo,H2,bge,HIo,UIo,MO,JIo,YIo,KIo,U2,vge,ZIo,eNo,EO,oNo,rNo,tNo,J2,Fge,aNo,nNo,CO,sNo,lNo,iNo,Y2,Tge,dNo,cNo,wO,fNo,mNo,gNo,K2,Mge,hNo,pNo,AO,_No,uNo,bNo,Z2,Ege,vNo,FNo,yO,TNo,MNo,ENo,ev,Cge,CNo,wNo,LO,ANo,yNo,LNo,ov,wge,xNo,$No,xO,kNo,SNo,RNo,rv,Age,PNo,BNo,$O,INo,NNo,qNo,tv,yge,jNo,DNo,kO,GNo,ONo,VNo,av,Lge,XNo,zNo,SO,WNo,QNo,HNo,nv,xge,UNo,JNo,RO,YNo,KNo,ZNo,sv,$ge,eqo,oqo,PO,rqo,tqo,aqo,lv,kge,nqo,sqo,BO,lqo,iqo,dqo,iv,Sge,cqo,fqo,IO,mqo,gqo,hqo,dv,Rge,pqo,_qo,NO,uqo,bqo,vqo,cv,Pge,Fqo,Tqo,qO,Mqo,Eqo,Cqo,fv,Bge,wqo,Aqo,jO,yqo,Lqo,xqo,mv,Ige,$qo,kqo,DO,Sqo,Rqo,Pqo,gv,Nge,Bqo,Iqo,GO,Nqo,qqo,jqo,hv,qge,Dqo,Gqo,OO,Oqo,Vqo,Xqo,pv,jge,zqo,Wqo,VO,Qqo,Hqo,Uqo,_v,Dge,Jqo,Yqo,XO,Kqo,Zqo,ejo,uv,Gge,ojo,rjo,zO,tjo,ajo,njo,bv,Oge,sjo,ljo,WO,ijo,djo,cjo,vv,Vge,fjo,mjo,QO,gjo,hjo,pjo,Fv,_jo,Xge,ujo,bjo,zge,vjo,Fjo,Tv,ije,Qi,Mv,Wge,V6,Tjo,Qge,Mjo,dje,Bo,X6,Ejo,Hi,Cjo,HO,wjo,Ajo,UO,yjo,Ljo,xjo,z6,$jo,Hge,kjo,Sjo,Rjo,ct,W6,Pjo,Uge,Bjo,Ijo,Ui,Njo,Jge,qjo,jjo,JO,Djo,Gjo,Ojo,Ev,Vjo,to,Q6,Xjo,Yge,zjo,Wjo,Ba,Qjo,Kge,Hjo,Ujo,Zge,Jjo,Yjo,ehe,Kjo,Zjo,eDo,Yr,Cv,ohe,oDo,rDo,YO,tDo,aDo,nDo,wv,rhe,sDo,lDo,KO,iDo,dDo,cDo,Av,the,fDo,mDo,ZO,gDo,hDo,pDo,yv,ahe,_Do,uDo,eV,bDo,vDo,FDo,Lv,nhe,TDo,MDo,oV,EDo,CDo,wDo,xv,ADo,she,yDo,LDo,lhe,xDo,$Do,$v,cje,Ji,kv,ihe,H6,kDo,dhe,SDo,fje,Io,U6,RDo,Yi,PDo,rV,BDo,IDo,tV,NDo,qDo,jDo,J6,DDo,che,GDo,ODo,VDo,ft,Y6,XDo,fhe,zDo,WDo,Ki,QDo,mhe,HDo,UDo,aV,JDo,YDo,KDo,Sv,ZDo,ao,K6,eGo,ghe,oGo,rGo,Ia,tGo,hhe,aGo,nGo,phe,sGo,lGo,_he,iGo,dGo,cGo,U,Rv,uhe,fGo,mGo,nV,gGo,hGo,pGo,Pv,bhe,_Go,uGo,sV,bGo,vGo,FGo,Bv,vhe,TGo,MGo,lV,EGo,CGo,wGo,Iv,Fhe,AGo,yGo,iV,LGo,xGo,$Go,Nv,The,kGo,SGo,dV,RGo,PGo,BGo,qv,Mhe,IGo,NGo,cV,qGo,jGo,DGo,jv,Ehe,GGo,OGo,fV,VGo,XGo,zGo,Dv,Che,WGo,QGo,mV,HGo,UGo,JGo,Gv,whe,YGo,KGo,gV,ZGo,eOo,oOo,Ov,Ahe,rOo,tOo,hV,aOo,nOo,sOo,Vv,yhe,lOo,iOo,pV,dOo,cOo,fOo,Xv,Lhe,mOo,gOo,_V,hOo,pOo,_Oo,zv,xhe,uOo,bOo,uV,vOo,FOo,TOo,Wv,$he,MOo,EOo,bV,COo,wOo,AOo,Qv,khe,yOo,LOo,vV,xOo,$Oo,kOo,Hv,She,SOo,ROo,FV,POo,BOo,IOo,Uv,Rhe,NOo,qOo,TV,jOo,DOo,GOo,Jv,Phe,OOo,VOo,MV,XOo,zOo,WOo,Yv,Bhe,QOo,HOo,EV,UOo,JOo,YOo,Kv,Ihe,KOo,ZOo,CV,eVo,oVo,rVo,Zv,Nhe,tVo,aVo,wV,nVo,sVo,lVo,e5,qhe,iVo,dVo,AV,cVo,fVo,mVo,o5,jhe,gVo,hVo,yV,pVo,_Vo,uVo,r5,Dhe,bVo,vVo,LV,FVo,TVo,MVo,t5,Ghe,EVo,CVo,xV,wVo,AVo,yVo,a5,Ohe,LVo,xVo,$V,$Vo,kVo,SVo,n5,Vhe,RVo,PVo,kV,BVo,IVo,NVo,s5,Xhe,qVo,jVo,SV,DVo,GVo,OVo,l5,zhe,VVo,XVo,RV,zVo,WVo,QVo,i5,Whe,HVo,UVo,PV,JVo,YVo,KVo,d5,Qhe,ZVo,eXo,BV,oXo,rXo,tXo,c5,Hhe,aXo,nXo,IV,sXo,lXo,iXo,f5,Uhe,dXo,cXo,NV,fXo,mXo,gXo,m5,Jhe,hXo,pXo,qV,_Xo,uXo,bXo,g5,vXo,Yhe,FXo,TXo,Khe,MXo,EXo,h5,mje,Zi,p5,Zhe,Z6,CXo,epe,wXo,gje,No,ey,AXo,ed,yXo,jV,LXo,xXo,DV,$Xo,kXo,SXo,oy,RXo,ope,PXo,BXo,IXo,mt,ry,NXo,rpe,qXo,jXo,od,DXo,tpe,GXo,OXo,GV,VXo,XXo,zXo,_5,WXo,no,ty,QXo,ape,HXo,UXo,Na,JXo,npe,YXo,KXo,spe,ZXo,ezo,lpe,ozo,rzo,tzo,V,u5,ipe,azo,nzo,OV,szo,lzo,izo,b5,dpe,dzo,czo,VV,fzo,mzo,gzo,v5,cpe,hzo,pzo,XV,_zo,uzo,bzo,F5,fpe,vzo,Fzo,zV,Tzo,Mzo,Ezo,T5,mpe,Czo,wzo,WV,Azo,yzo,Lzo,M5,gpe,xzo,$zo,QV,kzo,Szo,Rzo,E5,hpe,Pzo,Bzo,HV,Izo,Nzo,qzo,C5,ppe,jzo,Dzo,UV,Gzo,Ozo,Vzo,w5,_pe,Xzo,zzo,JV,Wzo,Qzo,Hzo,A5,upe,Uzo,Jzo,YV,Yzo,Kzo,Zzo,y5,bpe,eWo,oWo,KV,rWo,tWo,aWo,L5,vpe,nWo,sWo,ZV,lWo,iWo,dWo,x5,Fpe,cWo,fWo,eX,mWo,gWo,hWo,$5,Tpe,pWo,_Wo,oX,uWo,bWo,vWo,k5,Mpe,FWo,TWo,rX,MWo,EWo,CWo,S5,Epe,wWo,AWo,tX,yWo,LWo,xWo,R5,Cpe,$Wo,kWo,aX,SWo,RWo,PWo,P5,wpe,BWo,IWo,nX,NWo,qWo,jWo,B5,Ape,DWo,GWo,sX,OWo,VWo,XWo,I5,ype,zWo,WWo,lX,QWo,HWo,UWo,N5,Lpe,JWo,YWo,iX,KWo,ZWo,eQo,q5,xpe,oQo,rQo,dX,tQo,aQo,nQo,j5,$pe,sQo,lQo,cX,iQo,dQo,cQo,D5,kpe,fQo,mQo,fX,gQo,hQo,pQo,G5,Spe,_Qo,uQo,mX,bQo,vQo,FQo,O5,Rpe,TQo,MQo,gX,EQo,CQo,wQo,V5,Ppe,AQo,yQo,hX,LQo,xQo,$Qo,X5,Bpe,kQo,SQo,pX,RQo,PQo,BQo,z5,Ipe,IQo,NQo,_X,qQo,jQo,DQo,W5,Npe,GQo,OQo,uX,VQo,XQo,zQo,Q5,qpe,WQo,QQo,bX,HQo,UQo,JQo,H5,jpe,YQo,KQo,vX,ZQo,eHo,oHo,U5,Dpe,rHo,tHo,FX,aHo,nHo,sHo,J5,Gpe,lHo,iHo,TX,dHo,cHo,fHo,Y5,Ope,mHo,gHo,MX,hHo,pHo,_Ho,K5,Vpe,uHo,bHo,EX,vHo,FHo,THo,Z5,Xpe,MHo,EHo,CX,CHo,wHo,AHo,e3,zpe,yHo,LHo,wX,xHo,$Ho,kHo,o3,Wpe,SHo,RHo,AX,PHo,BHo,IHo,r3,Qpe,NHo,qHo,yX,jHo,DHo,GHo,t3,OHo,Hpe,VHo,XHo,Upe,zHo,WHo,a3,hje,rd,n3,Jpe,ay,QHo,Ype,HHo,pje,qo,ny,UHo,td,JHo,LX,YHo,KHo,xX,ZHo,eUo,oUo,sy,rUo,Kpe,tUo,aUo,nUo,gt,ly,sUo,Zpe,lUo,iUo,ad,dUo,e_e,cUo,fUo,$X,mUo,gUo,hUo,s3,pUo,so,iy,_Uo,o_e,uUo,bUo,qa,vUo,r_e,FUo,TUo,t_e,MUo,EUo,a_e,CUo,wUo,AUo,n_e,l3,s_e,yUo,LUo,kX,xUo,$Uo,kUo,i3,SUo,l_e,RUo,PUo,i_e,BUo,IUo,d3,_je,nd,c3,d_e,dy,NUo,c_e,qUo,uje,jo,cy,jUo,sd,DUo,SX,GUo,OUo,RX,VUo,XUo,zUo,fy,WUo,f_e,QUo,HUo,UUo,ht,my,JUo,m_e,YUo,KUo,ld,ZUo,g_e,eJo,oJo,PX,rJo,tJo,aJo,f3,nJo,lo,gy,sJo,h_e,lJo,iJo,ja,dJo,p_e,cJo,fJo,__e,mJo,gJo,u_e,hJo,pJo,_Jo,ve,m3,b_e,uJo,bJo,BX,vJo,FJo,TJo,g3,v_e,MJo,EJo,IX,CJo,wJo,AJo,h3,F_e,yJo,LJo,NX,xJo,$Jo,kJo,p3,T_e,SJo,RJo,qX,PJo,BJo,IJo,Bs,M_e,NJo,qJo,jX,jJo,DJo,DX,GJo,OJo,VJo,_3,E_e,XJo,zJo,GX,WJo,QJo,HJo,Is,C_e,UJo,JJo,OX,YJo,KJo,VX,ZJo,eYo,oYo,pt,w_e,rYo,tYo,XX,aYo,nYo,zX,sYo,lYo,WX,iYo,dYo,cYo,u3,A_e,fYo,mYo,QX,gYo,hYo,pYo,b3,y_e,_Yo,uYo,HX,bYo,vYo,FYo,v3,L_e,TYo,MYo,UX,EYo,CYo,wYo,F3,x_e,AYo,yYo,JX,LYo,xYo,$Yo,T3,$_e,kYo,SYo,YX,RYo,PYo,BYo,M3,k_e,IYo,NYo,KX,qYo,jYo,DYo,E3,S_e,GYo,OYo,ZX,VYo,XYo,zYo,C3,WYo,R_e,QYo,HYo,P_e,UYo,JYo,w3,bje,id,A3,B_e,hy,YYo,I_e,KYo,vje,Do,py,ZYo,dd,eKo,ez,oKo,rKo,oz,tKo,aKo,nKo,_y,sKo,N_e,lKo,iKo,dKo,_t,uy,cKo,q_e,fKo,mKo,cd,gKo,j_e,hKo,pKo,rz,_Ko,uKo,bKo,y3,vKo,io,by,FKo,D_e,TKo,MKo,Da,EKo,G_e,CKo,wKo,O_e,AKo,yKo,V_e,LKo,xKo,$Ko,X_e,L3,z_e,kKo,SKo,tz,RKo,PKo,BKo,x3,IKo,W_e,NKo,qKo,Q_e,jKo,DKo,$3,Fje,fd,k3,H_e,vy,GKo,U_e,OKo,Tje,Go,Fy,VKo,md,XKo,az,zKo,WKo,nz,QKo,HKo,UKo,Ty,JKo,J_e,YKo,KKo,ZKo,ut,My,eZo,Y_e,oZo,rZo,gd,tZo,K_e,aZo,nZo,sz,sZo,lZo,iZo,S3,dZo,co,Ey,cZo,Z_e,fZo,mZo,Ga,gZo,eue,hZo,pZo,oue,_Zo,uZo,rue,bZo,vZo,FZo,Se,R3,tue,TZo,MZo,lz,EZo,CZo,wZo,P3,aue,AZo,yZo,iz,LZo,xZo,$Zo,B3,nue,kZo,SZo,dz,RZo,PZo,BZo,I3,sue,IZo,NZo,cz,qZo,jZo,DZo,N3,lue,GZo,OZo,fz,VZo,XZo,zZo,q3,iue,WZo,QZo,mz,HZo,UZo,JZo,j3,due,YZo,KZo,gz,ZZo,eer,oer,D3,cue,rer,ter,hz,aer,ner,ser,G3,fue,ler,ier,pz,der,cer,fer,O3,mer,mue,ger,her,gue,per,_er,V3,Mje,hd,X3,hue,Cy,uer,pue,ber,Eje,Oo,wy,ver,pd,Fer,_z,Ter,Mer,uz,Eer,Cer,wer,Ay,Aer,_ue,yer,Ler,xer,bt,yy,$er,uue,ker,Ser,_d,Rer,bue,Per,Ber,bz,Ier,Ner,qer,z3,jer,fo,Ly,Der,vue,Ger,Oer,Oa,Ver,Fue,Xer,zer,Tue,Wer,Qer,Mue,Her,Uer,Jer,Kr,W3,Eue,Yer,Ker,vz,Zer,eor,oor,Q3,Cue,ror,tor,Fz,aor,nor,sor,H3,wue,lor,ior,Tz,dor,cor,mor,U3,Aue,gor,hor,Mz,por,_or,uor,J3,yue,bor,vor,Ez,For,Tor,Mor,Y3,Eor,Lue,Cor,wor,xue,Aor,yor,K3,Cje,ud,Z3,$ue,xy,Lor,kue,xor,wje,Vo,$y,$or,bd,kor,Cz,Sor,Ror,wz,Por,Bor,Ior,ky,Nor,Sue,qor,jor,Dor,vt,Sy,Gor,Rue,Oor,Vor,vd,Xor,Pue,zor,Wor,Az,Qor,Hor,Uor,eF,Jor,mo,Ry,Yor,Bue,Kor,Zor,Va,err,Iue,orr,rrr,Nue,trr,arr,que,nrr,srr,lrr,Re,oF,jue,irr,drr,yz,crr,frr,mrr,rF,Due,grr,hrr,Lz,prr,_rr,urr,tF,Gue,brr,vrr,xz,Frr,Trr,Mrr,aF,Oue,Err,Crr,$z,wrr,Arr,yrr,nF,Vue,Lrr,xrr,kz,$rr,krr,Srr,sF,Xue,Rrr,Prr,Sz,Brr,Irr,Nrr,lF,zue,qrr,jrr,Rz,Drr,Grr,Orr,iF,Wue,Vrr,Xrr,Pz,zrr,Wrr,Qrr,dF,Que,Hrr,Urr,Bz,Jrr,Yrr,Krr,cF,Zrr,Hue,etr,otr,Uue,rtr,ttr,fF,Aje,Fd,mF,Jue,Py,atr,Yue,ntr,yje,Xo,By,str,Td,ltr,Iz,itr,dtr,Nz,ctr,ftr,mtr,Iy,gtr,Kue,htr,ptr,_tr,Ft,Ny,utr,Zue,btr,vtr,Md,Ftr,e1e,Ttr,Mtr,qz,Etr,Ctr,wtr,gF,Atr,go,qy,ytr,o1e,Ltr,xtr,Xa,$tr,r1e,ktr,Str,t1e,Rtr,Ptr,a1e,Btr,Itr,Ntr,jy,hF,n1e,qtr,jtr,jz,Dtr,Gtr,Otr,pF,s1e,Vtr,Xtr,Dz,ztr,Wtr,Qtr,_F,Htr,l1e,Utr,Jtr,i1e,Ytr,Ktr,uF,Lje,Ed,bF,d1e,Dy,Ztr,c1e,ear,xje,zo,Gy,oar,Cd,rar,Gz,tar,aar,Oz,nar,sar,lar,Oy,iar,f1e,dar,car,far,Tt,Vy,mar,m1e,gar,har,wd,par,g1e,_ar,uar,Vz,bar,Far,Tar,vF,Mar,ho,Xy,Ear,h1e,Car,war,za,Aar,p1e,yar,Lar,_1e,xar,$ar,u1e,kar,Sar,Rar,Zr,FF,b1e,Par,Bar,Xz,Iar,Nar,qar,TF,v1e,jar,Dar,zz,Gar,Oar,Var,MF,F1e,Xar,zar,Wz,War,Qar,Har,EF,T1e,Uar,Jar,Qz,Yar,Kar,Zar,CF,M1e,enr,onr,Hz,rnr,tnr,anr,wF,nnr,E1e,snr,lnr,C1e,inr,dnr,AF,$je,Ad,yF,w1e,zy,cnr,A1e,fnr,kje,Wo,Wy,mnr,yd,gnr,Uz,hnr,pnr,Jz,_nr,unr,bnr,Qy,vnr,y1e,Fnr,Tnr,Mnr,Mt,Hy,Enr,L1e,Cnr,wnr,Ld,Anr,x1e,ynr,Lnr,Yz,xnr,$nr,knr,LF,Snr,po,Uy,Rnr,$1e,Pnr,Bnr,Wa,Inr,k1e,Nnr,qnr,S1e,jnr,Dnr,R1e,Gnr,Onr,Vnr,xd,xF,P1e,Xnr,znr,Kz,Wnr,Qnr,Hnr,$F,B1e,Unr,Jnr,Zz,Ynr,Knr,Znr,kF,I1e,esr,osr,eW,rsr,tsr,asr,SF,nsr,N1e,ssr,lsr,q1e,isr,dsr,RF,Sje,$d,PF,j1e,Jy,csr,D1e,fsr,Rje,Qo,Yy,msr,kd,gsr,oW,hsr,psr,rW,_sr,usr,bsr,Ky,vsr,G1e,Fsr,Tsr,Msr,Et,Zy,Esr,O1e,Csr,wsr,Sd,Asr,V1e,ysr,Lsr,tW,xsr,$sr,ksr,BF,Ssr,_o,eL,Rsr,X1e,Psr,Bsr,Qa,Isr,z1e,Nsr,qsr,W1e,jsr,Dsr,Q1e,Gsr,Osr,Vsr,oL,IF,H1e,Xsr,zsr,aW,Wsr,Qsr,Hsr,NF,U1e,Usr,Jsr,nW,Ysr,Ksr,Zsr,qF,elr,J1e,olr,rlr,Y1e,tlr,alr,jF,Pje,Rd,DF,K1e,rL,nlr,Z1e,slr,Bje,Ho,tL,llr,Pd,ilr,sW,dlr,clr,lW,flr,mlr,glr,aL,hlr,ebe,plr,_lr,ulr,Ct,nL,blr,obe,vlr,Flr,Bd,Tlr,rbe,Mlr,Elr,iW,Clr,wlr,Alr,GF,ylr,uo,sL,Llr,tbe,xlr,$lr,Ha,klr,abe,Slr,Rlr,nbe,Plr,Blr,sbe,Ilr,Nlr,qlr,lbe,OF,ibe,jlr,Dlr,dW,Glr,Olr,Vlr,VF,Xlr,dbe,zlr,Wlr,cbe,Qlr,Hlr,XF,Ije,Id,zF,fbe,lL,Ulr,mbe,Jlr,Nje,Uo,iL,Ylr,Nd,Klr,cW,Zlr,eir,fW,oir,rir,tir,dL,air,gbe,nir,sir,lir,wt,cL,iir,hbe,dir,cir,qd,fir,pbe,mir,gir,mW,hir,pir,_ir,WF,uir,bo,fL,bir,_be,vir,Fir,Ua,Tir,ube,Mir,Eir,bbe,Cir,wir,vbe,Air,yir,Lir,Ja,QF,Fbe,xir,$ir,gW,kir,Sir,Rir,HF,Tbe,Pir,Bir,hW,Iir,Nir,qir,UF,Mbe,jir,Dir,pW,Gir,Oir,Vir,JF,Ebe,Xir,zir,_W,Wir,Qir,Hir,YF,Uir,Cbe,Jir,Yir,wbe,Kir,Zir,KF,qje,jd,ZF,Abe,mL,edr,ybe,odr,jje,Jo,gL,rdr,Dd,tdr,uW,adr,ndr,bW,sdr,ldr,idr,hL,ddr,Lbe,cdr,fdr,mdr,At,pL,gdr,xbe,hdr,pdr,Gd,_dr,$be,udr,bdr,vW,vdr,Fdr,Tdr,eT,Mdr,vo,_L,Edr,kbe,Cdr,wdr,Ya,Adr,Sbe,ydr,Ldr,Rbe,xdr,$dr,Pbe,kdr,Sdr,Rdr,Bbe,oT,Ibe,Pdr,Bdr,FW,Idr,Ndr,qdr,rT,jdr,Nbe,Ddr,Gdr,qbe,Odr,Vdr,tT,Dje,Od,aT,jbe,uL,Xdr,Dbe,zdr,Gje,Yo,bL,Wdr,Vd,Qdr,TW,Hdr,Udr,MW,Jdr,Ydr,Kdr,vL,Zdr,Gbe,ecr,ocr,rcr,yt,FL,tcr,Obe,acr,ncr,Xd,scr,Vbe,lcr,icr,EW,dcr,ccr,fcr,nT,mcr,wr,TL,gcr,Xbe,hcr,pcr,Ka,_cr,zbe,ucr,bcr,Wbe,vcr,Fcr,Qbe,Tcr,Mcr,Ecr,q,sT,Hbe,Ccr,wcr,CW,Acr,ycr,Lcr,lT,Ube,xcr,$cr,wW,kcr,Scr,Rcr,iT,Jbe,Pcr,Bcr,AW,Icr,Ncr,qcr,dT,Ybe,jcr,Dcr,yW,Gcr,Ocr,Vcr,cT,Kbe,Xcr,zcr,LW,Wcr,Qcr,Hcr,fT,Zbe,Ucr,Jcr,xW,Ycr,Kcr,Zcr,mT,e2e,efr,ofr,$W,rfr,tfr,afr,gT,o2e,nfr,sfr,kW,lfr,ifr,dfr,hT,r2e,cfr,ffr,SW,mfr,gfr,hfr,pT,t2e,pfr,_fr,RW,ufr,bfr,vfr,_T,a2e,Ffr,Tfr,PW,Mfr,Efr,Cfr,uT,n2e,wfr,Afr,BW,yfr,Lfr,xfr,bT,s2e,$fr,kfr,IW,Sfr,Rfr,Pfr,vT,l2e,Bfr,Ifr,NW,Nfr,qfr,jfr,FT,i2e,Dfr,Gfr,qW,Ofr,Vfr,Xfr,TT,d2e,zfr,Wfr,jW,Qfr,Hfr,Ufr,MT,c2e,Jfr,Yfr,DW,Kfr,Zfr,emr,Ns,f2e,omr,rmr,GW,tmr,amr,OW,nmr,smr,lmr,ET,m2e,imr,dmr,VW,cmr,fmr,mmr,CT,g2e,gmr,hmr,XW,pmr,_mr,umr,wT,h2e,bmr,vmr,zW,Fmr,Tmr,Mmr,AT,p2e,Emr,Cmr,WW,wmr,Amr,ymr,yT,_2e,Lmr,xmr,QW,$mr,kmr,Smr,LT,u2e,Rmr,Pmr,HW,Bmr,Imr,Nmr,xT,b2e,qmr,jmr,UW,Dmr,Gmr,Omr,$T,v2e,Vmr,Xmr,JW,zmr,Wmr,Qmr,kT,F2e,Hmr,Umr,YW,Jmr,Ymr,Kmr,ST,T2e,Zmr,egr,KW,ogr,rgr,tgr,RT,M2e,agr,ngr,ZW,sgr,lgr,igr,PT,E2e,dgr,cgr,eQ,fgr,mgr,ggr,BT,C2e,hgr,pgr,oQ,_gr,ugr,bgr,IT,w2e,vgr,Fgr,rQ,Tgr,Mgr,Egr,NT,A2e,Cgr,wgr,tQ,Agr,ygr,Lgr,qT,y2e,xgr,$gr,aQ,kgr,Sgr,Rgr,jT,L2e,Pgr,Bgr,nQ,Igr,Ngr,qgr,DT,x2e,jgr,Dgr,sQ,Ggr,Ogr,Vgr,GT,$2e,Xgr,zgr,lQ,Wgr,Qgr,Hgr,OT,k2e,Ugr,Jgr,iQ,Ygr,Kgr,Zgr,VT,S2e,ehr,ohr,dQ,rhr,thr,ahr,XT,R2e,nhr,shr,cQ,lhr,ihr,dhr,zT,P2e,chr,fhr,fQ,mhr,ghr,hhr,WT,B2e,phr,_hr,mQ,uhr,bhr,vhr,QT,I2e,Fhr,Thr,gQ,Mhr,Ehr,Chr,HT,N2e,whr,Ahr,hQ,yhr,Lhr,xhr,UT,q2e,$hr,khr,pQ,Shr,Rhr,Phr,JT,j2e,Bhr,Ihr,_Q,Nhr,qhr,jhr,YT,D2e,Dhr,Ghr,uQ,Ohr,Vhr,Xhr,KT,Oje,zd,ZT,G2e,ML,zhr,O2e,Whr,Vje,Ko,EL,Qhr,Wd,Hhr,bQ,Uhr,Jhr,vQ,Yhr,Khr,Zhr,CL,epr,V2e,opr,rpr,tpr,Lt,wL,apr,X2e,npr,spr,Qd,lpr,z2e,ipr,dpr,FQ,cpr,fpr,mpr,e7,gpr,Ar,AL,hpr,W2e,ppr,_pr,Za,upr,Q2e,bpr,vpr,H2e,Fpr,Tpr,U2e,Mpr,Epr,Cpr,se,o7,J2e,wpr,Apr,TQ,ypr,Lpr,xpr,r7,Y2e,$pr,kpr,MQ,Spr,Rpr,Ppr,t7,K2e,Bpr,Ipr,EQ,Npr,qpr,jpr,a7,Z2e,Dpr,Gpr,CQ,Opr,Vpr,Xpr,n7,eve,zpr,Wpr,wQ,Qpr,Hpr,Upr,s7,ove,Jpr,Ypr,AQ,Kpr,Zpr,e_r,l7,rve,o_r,r_r,yQ,t_r,a_r,n_r,i7,tve,s_r,l_r,LQ,i_r,d_r,c_r,d7,ave,f_r,m_r,xQ,g_r,h_r,p_r,c7,nve,__r,u_r,$Q,b_r,v_r,F_r,f7,sve,T_r,M_r,kQ,E_r,C_r,w_r,m7,lve,A_r,y_r,SQ,L_r,x_r,$_r,g7,ive,k_r,S_r,RQ,R_r,P_r,B_r,h7,dve,I_r,N_r,PQ,q_r,j_r,D_r,p7,cve,G_r,O_r,BQ,V_r,X_r,z_r,_7,fve,W_r,Q_r,IQ,H_r,U_r,J_r,u7,mve,Y_r,K_r,NQ,Z_r,eur,our,b7,gve,rur,tur,qQ,aur,nur,sur,v7,hve,lur,iur,jQ,dur,cur,fur,F7,pve,mur,gur,DQ,hur,pur,_ur,T7,_ve,uur,bur,GQ,vur,Fur,Tur,M7,uve,Mur,Eur,OQ,Cur,wur,Aur,E7,bve,yur,Lur,VQ,xur,$ur,kur,C7,Xje,Hd,w7,vve,yL,Sur,Fve,Rur,zje,Zo,LL,Pur,Ud,Bur,XQ,Iur,Nur,zQ,qur,jur,Dur,xL,Gur,Tve,Our,Vur,Xur,xt,$L,zur,Mve,Wur,Qur,Jd,Hur,Eve,Uur,Jur,WQ,Yur,Kur,Zur,A7,e1r,yr,kL,o1r,Cve,r1r,t1r,en,a1r,wve,n1r,s1r,Ave,l1r,i1r,yve,d1r,c1r,f1r,Me,y7,Lve,m1r,g1r,QQ,h1r,p1r,_1r,L7,xve,u1r,b1r,HQ,v1r,F1r,T1r,x7,$ve,M1r,E1r,UQ,C1r,w1r,A1r,$7,kve,y1r,L1r,JQ,x1r,$1r,k1r,k7,Sve,S1r,R1r,YQ,P1r,B1r,I1r,S7,Rve,N1r,q1r,KQ,j1r,D1r,G1r,R7,Pve,O1r,V1r,ZQ,X1r,z1r,W1r,P7,Bve,Q1r,H1r,eH,U1r,J1r,Y1r,B7,Ive,K1r,Z1r,oH,ebr,obr,rbr,I7,Nve,tbr,abr,rH,nbr,sbr,lbr,N7,qve,ibr,dbr,tH,cbr,fbr,mbr,q7,jve,gbr,hbr,aH,pbr,_br,ubr,j7,Dve,bbr,vbr,nH,Fbr,Tbr,Mbr,D7,Wje,Yd,G7,Gve,SL,Ebr,Ove,Cbr,Qje,er,RL,wbr,Kd,Abr,sH,ybr,Lbr,lH,xbr,$br,kbr,PL,Sbr,Vve,Rbr,Pbr,Bbr,$t,BL,Ibr,Xve,Nbr,qbr,Zd,jbr,zve,Dbr,Gbr,iH,Obr,Vbr,Xbr,O7,zbr,Lr,IL,Wbr,Wve,Qbr,Hbr,on,Ubr,Qve,Jbr,Ybr,Hve,Kbr,Zbr,Uve,e2r,o2r,r2r,rn,V7,Jve,t2r,a2r,dH,n2r,s2r,l2r,X7,Yve,i2r,d2r,cH,c2r,f2r,m2r,z7,Kve,g2r,h2r,fH,p2r,_2r,u2r,W7,Zve,b2r,v2r,mH,F2r,T2r,M2r,Q7,Hje,ec,H7,e5e,NL,E2r,o5e,C2r,Uje,or,qL,w2r,oc,A2r,gH,y2r,L2r,hH,x2r,$2r,k2r,jL,S2r,r5e,R2r,P2r,B2r,kt,DL,I2r,t5e,N2r,q2r,rc,j2r,a5e,D2r,G2r,pH,O2r,V2r,X2r,U7,z2r,xr,GL,W2r,n5e,Q2r,H2r,tn,U2r,s5e,J2r,Y2r,l5e,K2r,Z2r,i5e,evr,ovr,rvr,ie,J7,d5e,tvr,avr,_H,nvr,svr,lvr,Y7,c5e,ivr,dvr,uH,cvr,fvr,mvr,K7,f5e,gvr,hvr,bH,pvr,_vr,uvr,Z7,m5e,bvr,vvr,vH,Fvr,Tvr,Mvr,e9,g5e,Evr,Cvr,FH,wvr,Avr,yvr,o9,h5e,Lvr,xvr,TH,$vr,kvr,Svr,r9,p5e,Rvr,Pvr,MH,Bvr,Ivr,Nvr,t9,_5e,qvr,jvr,EH,Dvr,Gvr,Ovr,a9,u5e,Vvr,Xvr,CH,zvr,Wvr,Qvr,n9,b5e,Hvr,Uvr,wH,Jvr,Yvr,Kvr,s9,v5e,Zvr,e5r,AH,o5r,r5r,t5r,l9,F5e,a5r,n5r,yH,s5r,l5r,i5r,i9,T5e,d5r,c5r,LH,f5r,m5r,g5r,d9,M5e,h5r,p5r,xH,_5r,u5r,b5r,c9,E5e,v5r,F5r,$H,T5r,M5r,E5r,f9,C5e,C5r,w5r,kH,A5r,y5r,L5r,m9,w5e,x5r,$5r,SH,k5r,S5r,R5r,g9,A5e,P5r,B5r,RH,I5r,N5r,q5r,h9,y5e,j5r,D5r,PH,G5r,O5r,V5r,p9,L5e,X5r,z5r,BH,W5r,Q5r,H5r,_9,Jje,tc,u9,x5e,OL,U5r,$5e,J5r,Yje,rr,VL,Y5r,ac,K5r,IH,Z5r,e3r,NH,o3r,r3r,t3r,XL,a3r,k5e,n3r,s3r,l3r,St,zL,i3r,S5e,d3r,c3r,nc,f3r,R5e,m3r,g3r,qH,h3r,p3r,_3r,b9,u3r,$r,WL,b3r,P5e,v3r,F3r,an,T3r,B5e,M3r,E3r,I5e,C3r,w3r,N5e,A3r,y3r,L3r,ye,v9,q5e,x3r,$3r,jH,k3r,S3r,R3r,F9,j5e,P3r,B3r,DH,I3r,N3r,q3r,T9,D5e,j3r,D3r,GH,G3r,O3r,V3r,M9,G5e,X3r,z3r,OH,W3r,Q3r,H3r,E9,O5e,U3r,J3r,VH,Y3r,K3r,Z3r,C9,V5e,eFr,oFr,XH,rFr,tFr,aFr,w9,X5e,nFr,sFr,zH,lFr,iFr,dFr,A9,z5e,cFr,fFr,WH,mFr,gFr,hFr,y9,W5e,pFr,_Fr,QH,uFr,bFr,vFr,L9,Q5e,FFr,TFr,HH,MFr,EFr,CFr,x9,Kje,sc,$9,H5e,QL,wFr,U5e,AFr,Zje,tr,HL,yFr,lc,LFr,UH,xFr,$Fr,JH,kFr,SFr,RFr,UL,PFr,J5e,BFr,IFr,NFr,Rt,JL,qFr,Y5e,jFr,DFr,ic,GFr,K5e,OFr,VFr,YH,XFr,zFr,WFr,k9,QFr,kr,YL,HFr,Z5e,UFr,JFr,nn,YFr,e3e,KFr,ZFr,o3e,eTr,oTr,r3e,rTr,tTr,aTr,oe,S9,t3e,nTr,sTr,KH,lTr,iTr,dTr,R9,a3e,cTr,fTr,ZH,mTr,gTr,hTr,P9,n3e,pTr,_Tr,eU,uTr,bTr,vTr,B9,s3e,FTr,TTr,oU,MTr,ETr,CTr,I9,l3e,wTr,ATr,rU,yTr,LTr,xTr,N9,i3e,$Tr,kTr,tU,STr,RTr,PTr,q9,d3e,BTr,ITr,aU,NTr,qTr,jTr,j9,c3e,DTr,GTr,nU,OTr,VTr,XTr,D9,f3e,zTr,WTr,sU,QTr,HTr,UTr,G9,m3e,JTr,YTr,lU,KTr,ZTr,e7r,O9,g3e,o7r,r7r,iU,t7r,a7r,n7r,V9,h3e,s7r,l7r,dU,i7r,d7r,c7r,X9,p3e,f7r,m7r,cU,g7r,h7r,p7r,z9,_3e,_7r,u7r,fU,b7r,v7r,F7r,W9,u3e,T7r,M7r,mU,E7r,C7r,w7r,Q9,b3e,A7r,y7r,gU,L7r,x7r,$7r,H9,v3e,k7r,S7r,hU,R7r,P7r,B7r,U9,F3e,I7r,N7r,pU,q7r,j7r,D7r,J9,T3e,G7r,O7r,_U,V7r,X7r,z7r,Y9,M3e,W7r,Q7r,uU,H7r,U7r,J7r,K9,E3e,Y7r,K7r,bU,Z7r,e9r,o9r,Z9,C3e,r9r,t9r,vU,a9r,n9r,s9r,eM,w3e,l9r,i9r,FU,d9r,c9r,f9r,oM,A3e,m9r,g9r,TU,h9r,p9r,_9r,rM,y3e,u9r,b9r,MU,v9r,F9r,T9r,tM,L3e,M9r,E9r,EU,C9r,w9r,A9r,aM,eDe,dc,nM,x3e,KL,y9r,$3e,L9r,oDe,ar,ZL,x9r,cc,$9r,CU,k9r,S9r,wU,R9r,P9r,B9r,e8,I9r,k3e,N9r,q9r,j9r,Pt,o8,D9r,S3e,G9r,O9r,fc,V9r,R3e,X9r,z9r,AU,W9r,Q9r,H9r,sM,U9r,Sr,r8,J9r,P3e,Y9r,K9r,sn,Z9r,B3e,eMr,oMr,I3e,rMr,tMr,N3e,aMr,nMr,sMr,pe,lM,q3e,lMr,iMr,yU,dMr,cMr,fMr,iM,j3e,mMr,gMr,LU,hMr,pMr,_Mr,dM,D3e,uMr,bMr,xU,vMr,FMr,TMr,cM,G3e,MMr,EMr,$U,CMr,wMr,AMr,fM,O3e,yMr,LMr,kU,xMr,$Mr,kMr,mM,V3e,SMr,RMr,SU,PMr,BMr,IMr,gM,X3e,NMr,qMr,RU,jMr,DMr,GMr,hM,z3e,OMr,VMr,PU,XMr,zMr,WMr,pM,W3e,QMr,HMr,BU,UMr,JMr,YMr,_M,Q3e,KMr,ZMr,IU,e4r,o4r,r4r,uM,H3e,t4r,a4r,NU,n4r,s4r,l4r,bM,U3e,i4r,d4r,qU,c4r,f4r,m4r,vM,J3e,g4r,h4r,jU,p4r,_4r,u4r,FM,Y3e,b4r,v4r,DU,F4r,T4r,M4r,TM,K3e,E4r,C4r,GU,w4r,A4r,y4r,MM,Z3e,L4r,x4r,OU,$4r,k4r,S4r,EM,eFe,R4r,P4r,VU,B4r,I4r,N4r,CM,rDe,mc,wM,oFe,t8,q4r,rFe,j4r,tDe,nr,a8,D4r,gc,G4r,XU,O4r,V4r,zU,X4r,z4r,W4r,n8,Q4r,tFe,H4r,U4r,J4r,Bt,s8,Y4r,aFe,K4r,Z4r,hc,eEr,nFe,oEr,rEr,WU,tEr,aEr,nEr,AM,sEr,Rr,l8,lEr,sFe,iEr,dEr,ln,cEr,lFe,fEr,mEr,iFe,gEr,hEr,dFe,pEr,_Er,uEr,i8,yM,cFe,bEr,vEr,QU,FEr,TEr,MEr,LM,fFe,EEr,CEr,HU,wEr,AEr,yEr,xM,aDe,pc,$M,mFe,d8,LEr,gFe,xEr,nDe,sr,c8,$Er,_c,kEr,UU,SEr,REr,JU,PEr,BEr,IEr,f8,NEr,hFe,qEr,jEr,DEr,It,m8,GEr,pFe,OEr,VEr,uc,XEr,_Fe,zEr,WEr,YU,QEr,HEr,UEr,kM,JEr,Pr,g8,YEr,uFe,KEr,ZEr,dn,eCr,bFe,oCr,rCr,vFe,tCr,aCr,FFe,nCr,sCr,lCr,TFe,SM,MFe,iCr,dCr,KU,cCr,fCr,mCr,RM,sDe,bc,PM,EFe,h8,gCr,CFe,hCr,lDe,lr,p8,pCr,vc,_Cr,ZU,uCr,bCr,eJ,vCr,FCr,TCr,_8,MCr,wFe,ECr,CCr,wCr,Nt,u8,ACr,AFe,yCr,LCr,Fc,xCr,yFe,$Cr,kCr,oJ,SCr,RCr,PCr,BM,BCr,Br,b8,ICr,LFe,NCr,qCr,cn,jCr,xFe,DCr,GCr,$Fe,OCr,VCr,kFe,XCr,zCr,WCr,de,IM,SFe,QCr,HCr,rJ,UCr,JCr,YCr,NM,RFe,KCr,ZCr,tJ,e0r,o0r,r0r,qM,PFe,t0r,a0r,aJ,n0r,s0r,l0r,jM,BFe,i0r,d0r,nJ,c0r,f0r,m0r,DM,IFe,g0r,h0r,sJ,p0r,_0r,u0r,GM,NFe,b0r,v0r,lJ,F0r,T0r,M0r,OM,qFe,E0r,C0r,iJ,w0r,A0r,y0r,VM,jFe,L0r,x0r,dJ,$0r,k0r,S0r,XM,DFe,R0r,P0r,cJ,B0r,I0r,N0r,zM,GFe,q0r,j0r,fJ,D0r,G0r,O0r,WM,OFe,V0r,X0r,mJ,z0r,W0r,Q0r,QM,VFe,H0r,U0r,gJ,J0r,Y0r,K0r,HM,XFe,Z0r,ewr,hJ,owr,rwr,twr,UM,zFe,awr,nwr,pJ,swr,lwr,iwr,JM,WFe,dwr,cwr,_J,fwr,mwr,gwr,YM,QFe,hwr,pwr,uJ,_wr,uwr,bwr,KM,HFe,vwr,Fwr,bJ,Twr,Mwr,Ewr,ZM,UFe,Cwr,wwr,vJ,Awr,ywr,Lwr,e4,JFe,xwr,$wr,FJ,kwr,Swr,Rwr,o4,YFe,Pwr,Bwr,TJ,Iwr,Nwr,qwr,r4,iDe,Tc,t4,KFe,v8,jwr,ZFe,Dwr,dDe,ir,F8,Gwr,Mc,Owr,MJ,Vwr,Xwr,EJ,zwr,Wwr,Qwr,T8,Hwr,eTe,Uwr,Jwr,Ywr,qt,M8,Kwr,oTe,Zwr,eAr,Ec,oAr,rTe,rAr,tAr,CJ,aAr,nAr,sAr,a4,lAr,Ir,E8,iAr,tTe,dAr,cAr,fn,fAr,aTe,mAr,gAr,nTe,hAr,pAr,sTe,_Ar,uAr,bAr,ce,n4,lTe,vAr,FAr,wJ,TAr,MAr,EAr,s4,iTe,CAr,wAr,AJ,AAr,yAr,LAr,l4,dTe,xAr,$Ar,yJ,kAr,SAr,RAr,i4,cTe,PAr,BAr,LJ,IAr,NAr,qAr,d4,fTe,jAr,DAr,xJ,GAr,OAr,VAr,c4,mTe,XAr,zAr,$J,WAr,QAr,HAr,f4,gTe,UAr,JAr,kJ,YAr,KAr,ZAr,m4,hTe,e6r,o6r,SJ,r6r,t6r,a6r,g4,pTe,n6r,s6r,RJ,l6r,i6r,d6r,h4,_Te,c6r,f6r,PJ,m6r,g6r,h6r,p4,uTe,p6r,_6r,BJ,u6r,b6r,v6r,_4,bTe,F6r,T6r,IJ,M6r,E6r,C6r,u4,vTe,w6r,A6r,NJ,y6r,L6r,x6r,b4,FTe,$6r,k6r,qJ,S6r,R6r,P6r,v4,TTe,B6r,I6r,jJ,N6r,q6r,j6r,F4,MTe,D6r,G6r,DJ,O6r,V6r,X6r,T4,ETe,z6r,W6r,GJ,Q6r,H6r,U6r,M4,CTe,J6r,Y6r,OJ,K6r,Z6r,eyr,E4,wTe,oyr,ryr,VJ,tyr,ayr,nyr,C4,ATe,syr,lyr,XJ,iyr,dyr,cyr,w4,cDe,Cc,A4,yTe,C8,fyr,LTe,myr,fDe,dr,w8,gyr,wc,hyr,zJ,pyr,_yr,WJ,uyr,byr,vyr,A8,Fyr,xTe,Tyr,Myr,Eyr,jt,y8,Cyr,$Te,wyr,Ayr,Ac,yyr,kTe,Lyr,xyr,QJ,$yr,kyr,Syr,y4,Ryr,Nr,L8,Pyr,STe,Byr,Iyr,mn,Nyr,RTe,qyr,jyr,PTe,Dyr,Gyr,BTe,Oyr,Vyr,Xyr,ITe,L4,NTe,zyr,Wyr,HJ,Qyr,Hyr,Uyr,x4,mDe,yc,$4,qTe,x8,Jyr,jTe,Yyr,gDe,cr,$8,Kyr,Lc,Zyr,UJ,eLr,oLr,JJ,rLr,tLr,aLr,k8,nLr,DTe,sLr,lLr,iLr,Dt,S8,dLr,GTe,cLr,fLr,xc,mLr,OTe,gLr,hLr,YJ,pLr,_Lr,uLr,k4,bLr,qr,R8,vLr,VTe,FLr,TLr,gn,MLr,XTe,ELr,CLr,zTe,wLr,ALr,WTe,yLr,LLr,xLr,QTe,S4,HTe,$Lr,kLr,KJ,SLr,RLr,PLr,R4,hDe,$c,P4,UTe,P8,BLr,JTe,ILr,pDe,fr,B8,NLr,kc,qLr,ZJ,jLr,DLr,eY,GLr,OLr,VLr,I8,XLr,YTe,zLr,WLr,QLr,Gt,N8,HLr,KTe,ULr,JLr,Sc,YLr,ZTe,KLr,ZLr,oY,e8r,o8r,r8r,B4,t8r,jr,q8,a8r,e7e,n8r,s8r,hn,l8r,o7e,i8r,d8r,r7e,c8r,f8r,t7e,m8r,g8r,h8r,re,I4,a7e,p8r,_8r,rY,u8r,b8r,v8r,N4,n7e,F8r,T8r,tY,M8r,E8r,C8r,q4,s7e,w8r,A8r,aY,y8r,L8r,x8r,j4,l7e,$8r,k8r,nY,S8r,R8r,P8r,D4,i7e,B8r,I8r,sY,N8r,q8r,j8r,G4,d7e,D8r,G8r,lY,O8r,V8r,X8r,O4,c7e,z8r,W8r,iY,Q8r,H8r,U8r,V4,f7e,J8r,Y8r,dY,K8r,Z8r,exr,X4,m7e,oxr,rxr,cY,txr,axr,nxr,z4,g7e,sxr,lxr,fY,ixr,dxr,cxr,W4,h7e,fxr,mxr,mY,gxr,hxr,pxr,Q4,p7e,_xr,uxr,gY,bxr,vxr,Fxr,H4,_7e,Txr,Mxr,hY,Exr,Cxr,wxr,U4,u7e,Axr,yxr,pY,Lxr,xxr,$xr,J4,b7e,kxr,Sxr,_Y,Rxr,Pxr,Bxr,Y4,v7e,Ixr,Nxr,uY,qxr,jxr,Dxr,K4,F7e,Gxr,Oxr,bY,Vxr,Xxr,zxr,Z4,T7e,Wxr,Qxr,vY,Hxr,Uxr,Jxr,eE,M7e,Yxr,Kxr,FY,Zxr,e$r,o$r,oE,E7e,r$r,t$r,TY,a$r,n$r,s$r,rE,C7e,l$r,i$r,MY,d$r,c$r,f$r,tE,w7e,m$r,g$r,EY,h$r,p$r,_$r,aE,A7e,u$r,b$r,CY,v$r,F$r,T$r,nE,y7e,M$r,E$r,wY,C$r,w$r,A$r,sE,L7e,y$r,L$r,AY,x$r,$$r,k$r,lE,x7e,S$r,R$r,yY,P$r,B$r,I$r,iE,_De,Rc,dE,$7e,j8,N$r,k7e,q$r,uDe,mr,D8,j$r,Pc,D$r,LY,G$r,O$r,xY,V$r,X$r,z$r,G8,W$r,S7e,Q$r,H$r,U$r,Ot,O8,J$r,R7e,Y$r,K$r,Bc,Z$r,P7e,ekr,okr,$Y,rkr,tkr,akr,cE,nkr,Dr,V8,skr,B7e,lkr,ikr,pn,dkr,I7e,ckr,fkr,N7e,mkr,gkr,q7e,hkr,pkr,_kr,Le,fE,j7e,ukr,bkr,kY,vkr,Fkr,Tkr,mE,D7e,Mkr,Ekr,SY,Ckr,wkr,Akr,gE,G7e,ykr,Lkr,RY,xkr,$kr,kkr,hE,O7e,Skr,Rkr,PY,Pkr,Bkr,Ikr,pE,V7e,Nkr,qkr,BY,jkr,Dkr,Gkr,_E,X7e,Okr,Vkr,IY,Xkr,zkr,Wkr,uE,z7e,Qkr,Hkr,NY,Ukr,Jkr,Ykr,bE,W7e,Kkr,Zkr,qY,eSr,oSr,rSr,vE,Q7e,tSr,aSr,jY,nSr,sSr,lSr,FE,H7e,iSr,dSr,DY,cSr,fSr,mSr,TE,bDe,Ic,ME,U7e,X8,gSr,J7e,hSr,vDe,gr,z8,pSr,Nc,_Sr,GY,uSr,bSr,OY,vSr,FSr,TSr,W8,MSr,Y7e,ESr,CSr,wSr,Vt,Q8,ASr,K7e,ySr,LSr,qc,xSr,Z7e,$Sr,kSr,VY,SSr,RSr,PSr,EE,BSr,Gr,H8,ISr,e9e,NSr,qSr,_n,jSr,o9e,DSr,GSr,r9e,OSr,VSr,t9e,XSr,zSr,WSr,Ee,CE,a9e,QSr,HSr,XY,USr,JSr,YSr,wE,n9e,KSr,ZSr,zY,eRr,oRr,rRr,AE,s9e,tRr,aRr,WY,nRr,sRr,lRr,yE,l9e,iRr,dRr,QY,cRr,fRr,mRr,LE,i9e,gRr,hRr,HY,pRr,_Rr,uRr,xE,d9e,bRr,vRr,UY,FRr,TRr,MRr,$E,c9e,ERr,CRr,JY,wRr,ARr,yRr,kE,f9e,LRr,xRr,YY,$Rr,kRr,SRr,SE,m9e,RRr,PRr,KY,BRr,IRr,NRr,RE,g9e,qRr,jRr,ZY,DRr,GRr,ORr,PE,h9e,VRr,XRr,eK,zRr,WRr,QRr,BE,p9e,HRr,URr,oK,JRr,YRr,KRr,IE,FDe,jc,NE,_9e,U8,ZRr,u9e,ePr,TDe,hr,J8,oPr,Dc,rPr,rK,tPr,aPr,tK,nPr,sPr,lPr,Y8,iPr,b9e,dPr,cPr,fPr,Xt,K8,mPr,v9e,gPr,hPr,Gc,pPr,F9e,_Pr,uPr,aK,bPr,vPr,FPr,qE,TPr,Or,Z8,MPr,T9e,EPr,CPr,un,wPr,M9e,APr,yPr,E9e,LPr,xPr,C9e,$Pr,kPr,SPr,xe,jE,w9e,RPr,PPr,nK,BPr,IPr,NPr,DE,A9e,qPr,jPr,sK,DPr,GPr,OPr,GE,y9e,VPr,XPr,lK,zPr,WPr,QPr,OE,L9e,HPr,UPr,iK,JPr,YPr,KPr,VE,x9e,ZPr,eBr,dK,oBr,rBr,tBr,XE,$9e,aBr,nBr,cK,sBr,lBr,iBr,zE,k9e,dBr,cBr,fK,fBr,mBr,gBr,WE,S9e,hBr,pBr,mK,_Br,uBr,bBr,QE,R9e,vBr,FBr,gK,TBr,MBr,EBr,HE,P9e,CBr,wBr,hK,ABr,yBr,LBr,UE,MDe,Oc,JE,B9e,ex,xBr,I9e,$Br,EDe,pr,ox,kBr,Vc,SBr,pK,RBr,PBr,_K,BBr,IBr,NBr,rx,qBr,N9e,jBr,DBr,GBr,zt,tx,OBr,q9e,VBr,XBr,Xc,zBr,j9e,WBr,QBr,uK,HBr,UBr,JBr,YE,YBr,Vr,ax,KBr,D9e,ZBr,eIr,bn,oIr,G9e,rIr,tIr,O9e,aIr,nIr,V9e,sIr,lIr,iIr,Pe,KE,X9e,dIr,cIr,bK,fIr,mIr,gIr,ZE,z9e,hIr,pIr,vK,_Ir,uIr,bIr,eC,W9e,vIr,FIr,FK,TIr,MIr,EIr,oC,Q9e,CIr,wIr,TK,AIr,yIr,LIr,rC,H9e,xIr,$Ir,MK,kIr,SIr,RIr,tC,U9e,PIr,BIr,EK,IIr,NIr,qIr,aC,J9e,jIr,DIr,CK,GIr,OIr,VIr,nC,Y9e,XIr,zIr,wK,WIr,QIr,HIr,sC,K9e,UIr,JIr,AK,YIr,KIr,ZIr,lC,CDe,zc,iC,Z9e,nx,eNr,eMe,oNr,wDe,_r,sx,rNr,Wc,tNr,yK,aNr,nNr,LK,sNr,lNr,iNr,lx,dNr,oMe,cNr,fNr,mNr,Wt,ix,gNr,rMe,hNr,pNr,Qc,_Nr,tMe,uNr,bNr,xK,vNr,FNr,TNr,dC,MNr,Xr,dx,ENr,aMe,CNr,wNr,vn,ANr,nMe,yNr,LNr,sMe,xNr,$Nr,lMe,kNr,SNr,RNr,$e,cC,iMe,PNr,BNr,$K,INr,NNr,qNr,fC,dMe,jNr,DNr,kK,GNr,ONr,VNr,mC,cMe,XNr,zNr,SK,WNr,QNr,HNr,gC,fMe,UNr,JNr,RK,YNr,KNr,ZNr,hC,mMe,eqr,oqr,PK,rqr,tqr,aqr,pC,gMe,nqr,sqr,BK,lqr,iqr,dqr,_C,hMe,cqr,fqr,IK,mqr,gqr,hqr,uC,pMe,pqr,_qr,NK,uqr,bqr,vqr,bC,_Me,Fqr,Tqr,qK,Mqr,Eqr,Cqr,vC,uMe,wqr,Aqr,jK,yqr,Lqr,xqr,FC,ADe,Hc,TC,bMe,cx,$qr,vMe,kqr,yDe,ur,fx,Sqr,Uc,Rqr,DK,Pqr,Bqr,GK,Iqr,Nqr,qqr,mx,jqr,FMe,Dqr,Gqr,Oqr,Qt,gx,Vqr,TMe,Xqr,zqr,Jc,Wqr,MMe,Qqr,Hqr,OK,Uqr,Jqr,Yqr,MC,Kqr,zr,hx,Zqr,EMe,ejr,ojr,Fn,rjr,CMe,tjr,ajr,wMe,njr,sjr,AMe,ljr,ijr,djr,ke,EC,yMe,cjr,fjr,VK,mjr,gjr,hjr,CC,LMe,pjr,_jr,XK,ujr,bjr,vjr,wC,xMe,Fjr,Tjr,zK,Mjr,Ejr,Cjr,AC,$Me,wjr,Ajr,WK,yjr,Ljr,xjr,yC,kMe,$jr,kjr,QK,Sjr,Rjr,Pjr,LC,SMe,Bjr,Ijr,HK,Njr,qjr,jjr,xC,RMe,Djr,Gjr,UK,Ojr,Vjr,Xjr,$C,PMe,zjr,Wjr,JK,Qjr,Hjr,Ujr,kC,BMe,Jjr,Yjr,YK,Kjr,Zjr,eDr,SC,IMe,oDr,rDr,KK,tDr,aDr,nDr,RC,LDe,Yc,PC,NMe,px,sDr,qMe,lDr,xDe,br,_x,iDr,Kc,dDr,ZK,cDr,fDr,eZ,mDr,gDr,hDr,ux,pDr,jMe,_Dr,uDr,bDr,Ht,bx,vDr,DMe,FDr,TDr,Zc,MDr,GMe,EDr,CDr,oZ,wDr,ADr,yDr,BC,LDr,Wr,vx,xDr,OMe,$Dr,kDr,Tn,SDr,VMe,RDr,PDr,XMe,BDr,IDr,zMe,NDr,qDr,jDr,Ge,IC,WMe,DDr,GDr,rZ,ODr,VDr,XDr,NC,QMe,zDr,WDr,tZ,QDr,HDr,UDr,qC,HMe,JDr,YDr,aZ,KDr,ZDr,eGr,jC,UMe,oGr,rGr,nZ,tGr,aGr,nGr,DC,JMe,sGr,lGr,sZ,iGr,dGr,cGr,GC,YMe,fGr,mGr,lZ,gGr,hGr,pGr,OC,KMe,_Gr,uGr,iZ,bGr,vGr,FGr,VC,ZMe,TGr,MGr,dZ,EGr,CGr,wGr,XC,$De,ef,zC,e4e,Fx,AGr,o4e,yGr,kDe,vr,Tx,LGr,of,xGr,cZ,$Gr,kGr,fZ,SGr,RGr,PGr,Mx,BGr,r4e,IGr,NGr,qGr,Ut,Ex,jGr,t4e,DGr,GGr,rf,OGr,a4e,VGr,XGr,mZ,zGr,WGr,QGr,WC,HGr,Qr,Cx,UGr,n4e,JGr,YGr,Mn,KGr,s4e,ZGr,eOr,l4e,oOr,rOr,i4e,tOr,aOr,nOr,Oe,QC,d4e,sOr,lOr,gZ,iOr,dOr,cOr,HC,c4e,fOr,mOr,hZ,gOr,hOr,pOr,UC,f4e,_Or,uOr,pZ,bOr,vOr,FOr,JC,m4e,TOr,MOr,_Z,EOr,COr,wOr,YC,g4e,AOr,yOr,uZ,LOr,xOr,$Or,KC,h4e,kOr,SOr,bZ,ROr,POr,BOr,ZC,p4e,IOr,NOr,vZ,qOr,jOr,DOr,e0,_4e,GOr,OOr,FZ,VOr,XOr,zOr,o0,SDe,tf,r0,u4e,wx,WOr,b4e,QOr,RDe,Fr,Ax,HOr,af,UOr,TZ,JOr,YOr,MZ,KOr,ZOr,eVr,yx,oVr,v4e,rVr,tVr,aVr,Jt,Lx,nVr,F4e,sVr,lVr,nf,iVr,T4e,dVr,cVr,EZ,fVr,mVr,gVr,t0,hVr,Hr,xx,pVr,M4e,_Vr,uVr,En,bVr,E4e,vVr,FVr,C4e,TVr,MVr,w4e,EVr,CVr,wVr,A4e,a0,y4e,AVr,yVr,CZ,LVr,xVr,$Vr,n0,PDe,sf,s0,L4e,$x,kVr,x4e,SVr,BDe,Tr,kx,RVr,lf,PVr,wZ,BVr,IVr,AZ,NVr,qVr,jVr,Sx,DVr,$4e,GVr,OVr,VVr,Yt,Rx,XVr,k4e,zVr,WVr,df,QVr,S4e,HVr,UVr,yZ,JVr,YVr,KVr,l0,ZVr,Ur,Px,eXr,R4e,oXr,rXr,Cn,tXr,P4e,aXr,nXr,B4e,sXr,lXr,I4e,iXr,dXr,cXr,Bx,i0,N4e,fXr,mXr,LZ,gXr,hXr,pXr,d0,q4e,_Xr,uXr,xZ,bXr,vXr,FXr,c0,IDe,cf,f0,j4e,Ix,TXr,D4e,MXr,NDe,Mr,Nx,EXr,ff,CXr,$Z,wXr,AXr,kZ,yXr,LXr,xXr,qx,$Xr,G4e,kXr,SXr,RXr,Kt,jx,PXr,O4e,BXr,IXr,mf,NXr,V4e,qXr,jXr,SZ,DXr,GXr,OXr,m0,VXr,Jr,Dx,XXr,X4e,zXr,WXr,wn,QXr,z4e,HXr,UXr,W4e,JXr,YXr,Q4e,KXr,ZXr,ezr,H4e,g0,U4e,ozr,rzr,RZ,tzr,azr,nzr,h0,qDe;return d=new te({}),Ca=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),IA=new te({}),NA=new P({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Tf=new szr({props:{warning:!0,$$slots:{default:[sSt]},$$scope:{ctx:L}}}),qA=new te({}),jA=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17593/src/transformers/models/auto/configuration_auto.py#L587"}}),OA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_17593/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_17593/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_17593/src/transformers/models/auto/configuration_auto.py#L610"}}),wg=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[lSt]},$$scope:{ctx:L}}}),VA=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_17593/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17593/src/transformers/models/auto/configuration_auto.py#L733"}}),XA=new te({}),zA=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17593/src/transformers/models/auto/tokenization_auto.py#L390"}}),HA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_17593/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17593/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17593/src/transformers/models/auto/tokenization_auto.py#L404"}}),sh=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[iSt]},$$scope:{ctx:L}}}),UA=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17593/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17593/src/transformers/models/auto/tokenization_auto.py#L603"}}),JA=new te({}),YA=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17593/src/transformers/models/auto/feature_extraction_auto.py#L191"}}),e6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_17593/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17593/src/transformers/models/auto/feature_extraction_auto.py#L205"}}),jh=new szr({props:{$$slots:{default:[dSt]},$$scope:{ctx:L}}}),Dh=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[cSt]},$$scope:{ctx:L}}}),o6=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17593/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17593/src/transformers/models/auto/feature_extraction_auto.py#L332"}}),r6=new te({}),t6=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17593/src/transformers/models/auto/processing_auto.py#L88"}}),s6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17593/src/transformers/models/auto/processing_auto.py#L102"}}),sp=new szr({props:{$$slots:{default:[fSt]},$$scope:{ctx:L}}}),lp=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[mSt]},$$scope:{ctx:L}}}),l6=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17593/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17593/src/transformers/models/auto/processing_auto.py#L255"}}),i6=new te({}),d6=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17593/src/transformers/models/auto/modeling_auto.py#L739"}}),f6=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17593/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17593/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_17593/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/gpt_neox#transformers.GPTNeoXModel">GPTNeoXModel</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/levit#transformers.LevitModel">LevitModel</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17593/src/transformers/models/auto/auto_factory.py#L389"}}),cp=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[gSt]},$$scope:{ctx:L}}}),m6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17593/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17593/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17593/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17593/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17593/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17593/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17593/src/transformers/models/auto/auto_factory.py#L417"}}),su=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[hSt]},$$scope:{ctx:L}}}),g6=new te({}),h6=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17593/src/transformers/models/auto/modeling_auto.py#L746"}}),_6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17593/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17593/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17593/src/transformers/models/auto/auto_factory.py#L389"}}),iu=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[pSt]},$$scope:{ctx:L}}}),u6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17593/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17593/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17593/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17593/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17593/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17593/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17593/src/transformers/models/auto/auto_factory.py#L417"}}),Ku=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[_St]},$$scope:{ctx:L}}}),b6=new te({}),v6=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17593/src/transformers/models/auto/modeling_auto.py#L761"}}),T6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17593/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17593/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM">GPTNeoXForCausalLM</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17593/src/transformers/models/auto/auto_factory.py#L389"}}),e1=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[uSt]},$$scope:{ctx:L}}}),M6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17593/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17593/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17593/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17593/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17593/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17593/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17593/src/transformers/models/auto/auto_factory.py#L417"}}),j1=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[bSt]},$$scope:{ctx:L}}}),E6=new te({}),C6=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17593/src/transformers/models/auto/modeling_auto.py#L768"}}),A6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17593/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17593/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17593/src/transformers/models/auto/auto_factory.py#L389"}}),G1=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[vSt]},$$scope:{ctx:L}}}),y6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17593/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17593/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17593/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17593/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17593/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17593/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17593/src/transformers/models/auto/auto_factory.py#L417"}}),wb=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[FSt]},$$scope:{ctx:L}}}),L6=new te({}),x6=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17593/src/transformers/models/auto/modeling_auto.py#L775"}}),k6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17593/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17593/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLM-ProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17593/src/transformers/models/auto/auto_factory.py#L389"}}),yb=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[TSt]},$$scope:{ctx:L}}}),S6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17593/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17593/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17593/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17593/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17593/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17593/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17593/src/transformers/models/auto/auto_factory.py#L417"}}),zb=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[MSt]},$$scope:{ctx:L}}}),R6=new te({}),P6=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17593/src/transformers/models/auto/modeling_auto.py#L784"}}),I6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17593/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17593/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17593/src/transformers/models/auto/auto_factory.py#L389"}}),Qb=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[ESt]},$$scope:{ctx:L}}}),N6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17593/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17593/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17593/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17593/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17593/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17593/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17593/src/transformers/models/auto/auto_factory.py#L417"}}),O2=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[CSt]},$$scope:{ctx:L}}}),q6=new te({}),j6=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17593/src/transformers/models/auto/modeling_auto.py#L818"}}),G6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17593/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17593/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17593/src/transformers/models/auto/auto_factory.py#L389"}}),X2=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[wSt]},$$scope:{ctx:L}}}),O6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17593/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17593/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17593/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17593/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17593/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17593/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17593/src/transformers/models/auto/auto_factory.py#L417"}}),Tv=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[ASt]},$$scope:{ctx:L}}}),V6=new te({}),X6=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17593/src/transformers/models/auto/modeling_auto.py#L825"}}),W6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17593/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17593/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17593/src/transformers/models/auto/auto_factory.py#L389"}}),Ev=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[ySt]},$$scope:{ctx:L}}}),Q6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17593/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17593/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17593/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17593/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17593/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17593/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17593/src/transformers/models/auto/auto_factory.py#L417"}}),$v=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[LSt]},$$scope:{ctx:L}}}),H6=new te({}),U6=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17593/src/transformers/models/auto/modeling_auto.py#L811"}}),Y6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17593/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17593/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17593/src/transformers/models/auto/auto_factory.py#L389"}}),Sv=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[xSt]},$$scope:{ctx:L}}}),K6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17593/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17593/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17593/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17593/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17593/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17593/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17593/src/transformers/models/auto/auto_factory.py#L417"}}),h5=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[$St]},$$scope:{ctx:L}}}),Z6=new te({}),ey=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17593/src/transformers/models/auto/modeling_auto.py#L793"}}),ry=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17593/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17593/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17593/src/transformers/models/auto/auto_factory.py#L389"}}),_5=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[kSt]},$$scope:{ctx:L}}}),ty=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17593/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17593/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17593/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17593/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17593/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17593/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17593/src/transformers/models/auto/auto_factory.py#L417"}}),a3=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[SSt]},$$scope:{ctx:L}}}),ay=new te({}),ny=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17593/src/transformers/models/auto/modeling_auto.py#L800"}}),ly=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17593/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17593/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17593/src/transformers/models/auto/auto_factory.py#L389"}}),s3=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[RSt]},$$scope:{ctx:L}}}),iy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17593/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17593/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17593/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17593/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17593/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17593/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17593/src/transformers/models/auto/auto_factory.py#L417"}}),d3=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[PSt]},$$scope:{ctx:L}}}),dy=new te({}),cy=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17593/src/transformers/models/auto/modeling_auto.py#L834"}}),my=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17593/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17593/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_17593/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/levit#transformers.LevitForImageClassification">LevitForImageClassification</a> or <a href="/docs/transformers/pr_17593/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher">LevitForImageClassificationWithTeacher</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_17593/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_17593/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17593/src/transformers/models/auto/auto_factory.py#L389"}}),f3=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[BSt]},$$scope:{ctx:L}}}),gy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17593/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17593/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17593/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17593/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17593/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17593/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17593/src/transformers/models/auto/auto_factory.py#L417"}}),w3=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[ISt]},$$scope:{ctx:L}}}),hy=new te({}),py=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17593/src/transformers/models/auto/modeling_auto.py#L873"}}),uy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17593/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17593/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17593/src/transformers/models/auto/auto_factory.py#L389"}}),y3=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[NSt]},$$scope:{ctx:L}}}),by=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17593/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17593/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17593/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17593/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17593/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17593/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17593/src/transformers/models/auto/auto_factory.py#L417"}}),$3=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[qSt]},$$scope:{ctx:L}}}),vy=new te({}),Fy=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17593/src/transformers/models/auto/modeling_auto.py#L880"}}),My=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17593/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17593/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17593/src/transformers/models/auto/auto_factory.py#L389"}}),S3=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[jSt]},$$scope:{ctx:L}}}),Ey=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17593/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17593/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17593/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17593/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17593/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17593/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17593/src/transformers/models/auto/auto_factory.py#L417"}}),V3=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[DSt]},$$scope:{ctx:L}}}),Cy=new te({}),wy=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17593/src/transformers/models/auto/modeling_auto.py#L903"}}),yy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17593/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17593/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17593/src/transformers/models/auto/auto_factory.py#L389"}}),z3=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[GSt]},$$scope:{ctx:L}}}),Ly=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17593/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17593/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17593/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17593/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17593/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17593/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17593/src/transformers/models/auto/auto_factory.py#L417"}}),K3=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[OSt]},$$scope:{ctx:L}}}),xy=new te({}),$y=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17593/src/transformers/models/auto/modeling_auto.py#L887"}}),Sy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17593/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17593/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17593/src/transformers/models/auto/auto_factory.py#L389"}}),eF=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[VSt]},$$scope:{ctx:L}}}),Ry=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17593/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17593/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17593/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17593/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17593/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17593/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17593/src/transformers/models/auto/auto_factory.py#L417"}}),fF=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[XSt]},$$scope:{ctx:L}}}),Py=new te({}),By=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17593/src/transformers/models/auto/modeling_auto.py#L894"}}),Ny=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17593/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17593/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17593/src/transformers/models/auto/auto_factory.py#L389"}}),gF=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[zSt]},$$scope:{ctx:L}}}),qy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17593/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17593/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17593/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17593/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17593/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17593/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17593/src/transformers/models/auto/auto_factory.py#L417"}}),uF=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[WSt]},$$scope:{ctx:L}}}),Dy=new te({}),Gy=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17593/src/transformers/models/auto/modeling_auto.py#L912"}}),Vy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17593/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17593/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17593/src/transformers/models/auto/auto_factory.py#L389"}}),vF=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[QSt]},$$scope:{ctx:L}}}),Xy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17593/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17593/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17593/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17593/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17593/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17593/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17593/src/transformers/models/auto/auto_factory.py#L417"}}),AF=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[HSt]},$$scope:{ctx:L}}}),zy=new te({}),Wy=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17593/src/transformers/models/auto/modeling_auto.py#L919"}}),Hy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17593/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17593/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17593/src/transformers/models/auto/auto_factory.py#L389"}}),LF=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[USt]},$$scope:{ctx:L}}}),Uy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17593/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17593/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17593/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17593/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17593/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17593/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17593/src/transformers/models/auto/auto_factory.py#L417"}}),RF=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[JSt]},$$scope:{ctx:L}}}),Jy=new te({}),Yy=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17593/src/transformers/models/auto/modeling_auto.py#L866"}}),Zy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17593/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17593/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17593/src/transformers/models/auto/auto_factory.py#L389"}}),BF=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[YSt]},$$scope:{ctx:L}}}),eL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17593/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17593/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17593/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17593/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17593/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17593/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17593/src/transformers/models/auto/auto_factory.py#L417"}}),jF=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[KSt]},$$scope:{ctx:L}}}),rL=new te({}),tL=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17593/src/transformers/models/auto/modeling_auto.py#L841"}}),nL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17593/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17593/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17593/src/transformers/models/auto/auto_factory.py#L389"}}),GF=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[ZSt]},$$scope:{ctx:L}}}),sL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17593/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17593/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17593/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17593/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17593/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17593/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17593/src/transformers/models/auto/auto_factory.py#L417"}}),XF=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[eRt]},$$scope:{ctx:L}}}),lL=new te({}),iL=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17593/src/transformers/models/auto/modeling_auto.py#L848"}}),cL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17593/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17593/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17593/src/transformers/models/auto/auto_factory.py#L389"}}),WF=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[oRt]},$$scope:{ctx:L}}}),fL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17593/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17593/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17593/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17593/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17593/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17593/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17593/src/transformers/models/auto/auto_factory.py#L417"}}),KF=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[rRt]},$$scope:{ctx:L}}}),mL=new te({}),gL=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17593/src/transformers/models/auto/modeling_auto.py#L857"}}),pL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17593/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17593/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17593/src/transformers/models/auto/auto_factory.py#L389"}}),eT=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[tRt]},$$scope:{ctx:L}}}),_L=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17593/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17593/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17593/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17593/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17593/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17593/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17593/src/transformers/models/auto/auto_factory.py#L417"}}),tT=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[aRt]},$$scope:{ctx:L}}}),uL=new te({}),bL=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17593/src/transformers/models/auto/modeling_tf_auto.py#L396"}}),FL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17593/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17593/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_17593/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/opt#transformers.TFOPTModel">TFOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17593/src/transformers/models/auto/auto_factory.py#L389"}}),nT=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[nRt]},$$scope:{ctx:L}}}),TL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17593/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17593/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17593/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17593/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17593/src/transformers/models/auto/auto_factory.py#L417"}}),KT=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[sRt]},$$scope:{ctx:L}}}),ML=new te({}),EL=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17593/src/transformers/models/auto/modeling_tf_auto.py#L403"}}),wL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17593/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17593/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17593/src/transformers/models/auto/auto_factory.py#L389"}}),e7=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[lRt]},$$scope:{ctx:L}}}),AL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17593/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17593/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17593/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17593/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17593/src/transformers/models/auto/auto_factory.py#L417"}}),C7=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[iRt]},$$scope:{ctx:L}}}),yL=new te({}),LL=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17593/src/transformers/models/auto/modeling_tf_auto.py#L418"}}),$L=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17593/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17593/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/opt#transformers.TFOPTForCausalLM">TFOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17593/src/transformers/models/auto/auto_factory.py#L389"}}),A7=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[dRt]},$$scope:{ctx:L}}}),kL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17593/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17593/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17593/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17593/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17593/src/transformers/models/auto/auto_factory.py#L417"}}),D7=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[cRt]},$$scope:{ctx:L}}}),SL=new te({}),RL=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17593/src/transformers/models/auto/modeling_tf_auto.py#L434"}}),BL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17593/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17593/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17593/src/transformers/models/auto/auto_factory.py#L389"}}),O7=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[fRt]},$$scope:{ctx:L}}}),IL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17593/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17593/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17593/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17593/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17593/src/transformers/models/auto/auto_factory.py#L417"}}),Q7=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[mRt]},$$scope:{ctx:L}}}),NL=new te({}),qL=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17593/src/transformers/models/auto/modeling_tf_auto.py#L450"}}),DL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17593/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17593/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17593/src/transformers/models/auto/auto_factory.py#L389"}}),U7=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[gRt]},$$scope:{ctx:L}}}),GL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17593/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17593/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17593/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17593/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17593/src/transformers/models/auto/auto_factory.py#L417"}}),_9=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[hRt]},$$scope:{ctx:L}}}),OL=new te({}),VL=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17593/src/transformers/models/auto/modeling_tf_auto.py#L457"}}),zL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17593/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17593/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17593/src/transformers/models/auto/auto_factory.py#L389"}}),b9=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[pRt]},$$scope:{ctx:L}}}),WL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17593/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17593/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17593/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17593/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17593/src/transformers/models/auto/auto_factory.py#L417"}}),x9=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[_Rt]},$$scope:{ctx:L}}}),QL=new te({}),HL=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17593/src/transformers/models/auto/modeling_tf_auto.py#L466"}}),JL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17593/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17593/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17593/src/transformers/models/auto/auto_factory.py#L389"}}),k9=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[uRt]},$$scope:{ctx:L}}}),YL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17593/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17593/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17593/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17593/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17593/src/transformers/models/auto/auto_factory.py#L417"}}),aM=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[bRt]},$$scope:{ctx:L}}}),KL=new te({}),ZL=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17593/src/transformers/models/auto/modeling_tf_auto.py#L502"}}),o8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17593/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17593/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17593/src/transformers/models/auto/auto_factory.py#L389"}}),sM=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[vRt]},$$scope:{ctx:L}}}),r8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17593/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17593/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17593/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17593/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17593/src/transformers/models/auto/auto_factory.py#L417"}}),CM=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[FRt]},$$scope:{ctx:L}}}),t8=new te({}),a8=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17593/src/transformers/models/auto/modeling_tf_auto.py#L509"}}),s8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17593/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17593/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17593/src/transformers/models/auto/auto_factory.py#L389"}}),AM=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[TRt]},$$scope:{ctx:L}}}),l8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17593/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17593/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17593/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17593/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17593/src/transformers/models/auto/auto_factory.py#L417"}}),xM=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[MRt]},$$scope:{ctx:L}}}),d8=new te({}),c8=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17593/src/transformers/models/auto/modeling_tf_auto.py#L482"}}),m8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17593/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17593/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17593/src/transformers/models/auto/auto_factory.py#L389"}}),kM=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[ERt]},$$scope:{ctx:L}}}),g8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17593/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17593/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17593/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17593/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17593/src/transformers/models/auto/auto_factory.py#L417"}}),RM=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[CRt]},$$scope:{ctx:L}}}),h8=new te({}),p8=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17593/src/transformers/models/auto/modeling_tf_auto.py#L493"}}),u8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17593/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17593/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17593/src/transformers/models/auto/auto_factory.py#L389"}}),BM=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[wRt]},$$scope:{ctx:L}}}),b8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17593/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17593/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17593/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17593/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17593/src/transformers/models/auto/auto_factory.py#L417"}}),r4=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[ARt]},$$scope:{ctx:L}}}),v8=new te({}),F8=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17593/src/transformers/models/auto/modeling_tf_auto.py#L475"}}),M8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17593/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17593/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17593/src/transformers/models/auto/auto_factory.py#L389"}}),a4=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[yRt]},$$scope:{ctx:L}}}),E8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17593/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17593/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17593/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17593/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17593/src/transformers/models/auto/auto_factory.py#L417"}}),w4=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[LRt]},$$scope:{ctx:L}}}),C8=new te({}),w8=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17593/src/transformers/models/auto/modeling_tf_auto.py#L443"}}),y8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17593/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17593/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17593/src/transformers/models/auto/auto_factory.py#L389"}}),y4=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[xRt]},$$scope:{ctx:L}}}),L8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17593/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17593/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17593/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17593/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17593/src/transformers/models/auto/auto_factory.py#L417"}}),x4=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[$Rt]},$$scope:{ctx:L}}}),x8=new te({}),$8=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17593/src/transformers/models/auto/modeling_tf_auto.py#L518"}}),S8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17593/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17593/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17593/src/transformers/models/auto/auto_factory.py#L389"}}),k4=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[kRt]},$$scope:{ctx:L}}}),R8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17593/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17593/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17593/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17593/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17593/src/transformers/models/auto/auto_factory.py#L417"}}),R4=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[SRt]},$$scope:{ctx:L}}}),P8=new te({}),B8=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17593/src/transformers/models/auto/modeling_flax_auto.py#L243"}}),N8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17593/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17593/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/opt#transformers.FlaxOPTModel">FlaxOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17593/src/transformers/models/auto/auto_factory.py#L389"}}),B4=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[RRt]},$$scope:{ctx:L}}}),q8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17593/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17593/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17593/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17593/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17593/src/transformers/models/auto/auto_factory.py#L417"}}),iE=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[PRt]},$$scope:{ctx:L}}}),j8=new te({}),D8=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17593/src/transformers/models/auto/modeling_flax_auto.py#L257"}}),O8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17593/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17593/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/opt#transformers.FlaxOPTForCausalLM">FlaxOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17593/src/transformers/models/auto/auto_factory.py#L389"}}),cE=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[BRt]},$$scope:{ctx:L}}}),V8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17593/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17593/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17593/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17593/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17593/src/transformers/models/auto/auto_factory.py#L417"}}),TE=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[IRt]},$$scope:{ctx:L}}}),X8=new te({}),z8=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17593/src/transformers/models/auto/modeling_flax_auto.py#L250"}}),Q8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17593/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17593/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17593/src/transformers/models/auto/auto_factory.py#L389"}}),EE=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[NRt]},$$scope:{ctx:L}}}),H8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17593/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17593/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17593/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17593/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17593/src/transformers/models/auto/auto_factory.py#L417"}}),IE=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[qRt]},$$scope:{ctx:L}}}),U8=new te({}),J8=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17593/src/transformers/models/auto/modeling_flax_auto.py#L264"}}),K8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17593/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17593/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17593/src/transformers/models/auto/auto_factory.py#L389"}}),qE=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[jRt]},$$scope:{ctx:L}}}),Z8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17593/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17593/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17593/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17593/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17593/src/transformers/models/auto/auto_factory.py#L417"}}),UE=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[DRt]},$$scope:{ctx:L}}}),ex=new te({}),ox=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17593/src/transformers/models/auto/modeling_flax_auto.py#L271"}}),tx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17593/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17593/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17593/src/transformers/models/auto/auto_factory.py#L389"}}),YE=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[GRt]},$$scope:{ctx:L}}}),ax=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17593/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17593/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17593/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17593/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17593/src/transformers/models/auto/auto_factory.py#L417"}}),lC=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[ORt]},$$scope:{ctx:L}}}),nx=new te({}),sx=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17593/src/transformers/models/auto/modeling_flax_auto.py#L280"}}),ix=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17593/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17593/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17593/src/transformers/models/auto/auto_factory.py#L389"}}),dC=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[VRt]},$$scope:{ctx:L}}}),dx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17593/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17593/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17593/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17593/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17593/src/transformers/models/auto/auto_factory.py#L417"}}),FC=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[XRt]},$$scope:{ctx:L}}}),cx=new te({}),fx=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17593/src/transformers/models/auto/modeling_flax_auto.py#L289"}}),gx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17593/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17593/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17593/src/transformers/models/auto/auto_factory.py#L389"}}),MC=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[zRt]},$$scope:{ctx:L}}}),hx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17593/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17593/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17593/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17593/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17593/src/transformers/models/auto/auto_factory.py#L417"}}),RC=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[WRt]},$$scope:{ctx:L}}}),px=new te({}),_x=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17593/src/transformers/models/auto/modeling_flax_auto.py#L296"}}),bx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17593/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17593/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17593/src/transformers/models/auto/auto_factory.py#L389"}}),BC=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[QRt]},$$scope:{ctx:L}}}),vx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17593/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17593/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17593/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17593/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17593/src/transformers/models/auto/auto_factory.py#L417"}}),XC=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[HRt]},$$scope:{ctx:L}}}),Fx=new te({}),Tx=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17593/src/transformers/models/auto/modeling_flax_auto.py#L305"}}),Ex=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17593/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17593/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17593/src/transformers/models/auto/auto_factory.py#L389"}}),WC=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[URt]},$$scope:{ctx:L}}}),Cx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17593/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17593/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17593/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17593/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17593/src/transformers/models/auto/auto_factory.py#L417"}}),o0=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[JRt]},$$scope:{ctx:L}}}),wx=new te({}),Ax=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17593/src/transformers/models/auto/modeling_flax_auto.py#L312"}}),Lx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17593/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17593/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17593/src/transformers/models/auto/auto_factory.py#L389"}}),t0=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[YRt]},$$scope:{ctx:L}}}),xx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17593/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17593/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17593/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17593/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17593/src/transformers/models/auto/auto_factory.py#L417"}}),n0=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[KRt]},$$scope:{ctx:L}}}),$x=new te({}),kx=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17593/src/transformers/models/auto/modeling_flax_auto.py#L321"}}),Rx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17593/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17593/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17593/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17593/src/transformers/models/auto/auto_factory.py#L389"}}),l0=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[ZRt]},$$scope:{ctx:L}}}),Px=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17593/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17593/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17593/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17593/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17593/src/transformers/models/auto/auto_factory.py#L417"}}),c0=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[ePt]},$$scope:{ctx:L}}}),Ix=new te({}),Nx=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17593/src/transformers/models/auto/modeling_flax_auto.py#L330"}}),jx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17593/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17593/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17593/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17593/src/transformers/models/auto/auto_factory.py#L389"}}),m0=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[oPt]},$$scope:{ctx:L}}}),Dx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17593/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17593/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17593/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17593/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17593/src/transformers/models/auto/auto_factory.py#L417"}}),h0=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[rPt]},$$scope:{ctx:L}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),_=a("span"),F(d.$$.fragment),h=l(),Mo=a("span"),mi=o("Auto Classes"),_f=l(),rt=a("p"),gi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),hi=a("code"),SA=o("from_pretrained()"),uf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),De=l(),We=a("p"),pi=o("Instantiating one of "),yn=a("a"),RA=o("AutoConfig"),Ln=o(", "),xn=a("a"),PA=o("AutoModel"),_i=o(`, and
`),$n=a("a"),BA=o("AutoTokenizer"),ui=o(" will directly create a class of the relevant architecture. For instance"),bf=l(),F(Ca.$$.fragment),Qe=l(),Ae=a("p"),ok=o("will create a model that is an instance of "),bi=a("a"),rk=o("BertModel"),tk=o("."),Eo=l(),wa=a("p"),ak=o("There is one class of "),vf=a("code"),nk=o("AutoModel"),WOe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),Bqe=l(),vi=a("h2"),Ff=a("a"),Aoe=a("span"),F(IA.$$.fragment),QOe=l(),yoe=a("span"),HOe=o("Extending the Auto Classes"),Iqe=l(),kn=a("p"),UOe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Loe=a("code"),JOe=o("NewModel"),YOe=o(", make sure you have a "),xoe=a("code"),KOe=o("NewModelConfig"),ZOe=o(` then you can add those to the auto
classes like this:`),Nqe=l(),F(NA.$$.fragment),qqe=l(),sk=a("p"),eVe=o("You will then be able to use the auto classes like you would usually do!"),jqe=l(),F(Tf.$$.fragment),Dqe=l(),Fi=a("h2"),Mf=a("a"),$oe=a("span"),F(qA.$$.fragment),oVe=l(),koe=a("span"),rVe=o("AutoConfig"),Gqe=l(),Co=a("div"),F(jA.$$.fragment),tVe=l(),DA=a("p"),aVe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),lk=a("a"),nVe=o("from_pretrained()"),sVe=o(" class method."),lVe=l(),GA=a("p"),iVe=o("This class cannot be instantiated directly using "),Soe=a("code"),dVe=o("__init__()"),cVe=o(" (throws an error)."),fVe=l(),Er=a("div"),F(OA.$$.fragment),mVe=l(),Roe=a("p"),gVe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),hVe=l(),Ti=a("p"),pVe=o("The configuration class to instantiate is selected based on the "),Poe=a("code"),_Ve=o("model_type"),uVe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Boe=a("code"),bVe=o("pretrained_model_name_or_path"),vVe=o(":"),FVe=l(),A=a("ul"),Ef=a("li"),Ioe=a("strong"),TVe=o("albert"),MVe=o(" \u2014 "),ik=a("a"),EVe=o("AlbertConfig"),CVe=o(" (ALBERT model)"),wVe=l(),Cf=a("li"),Noe=a("strong"),AVe=o("bart"),yVe=o(" \u2014 "),dk=a("a"),LVe=o("BartConfig"),xVe=o(" (BART model)"),$Ve=l(),wf=a("li"),qoe=a("strong"),kVe=o("beit"),SVe=o(" \u2014 "),ck=a("a"),RVe=o("BeitConfig"),PVe=o(" (BEiT model)"),BVe=l(),Af=a("li"),joe=a("strong"),IVe=o("bert"),NVe=o(" \u2014 "),fk=a("a"),qVe=o("BertConfig"),jVe=o(" (BERT model)"),DVe=l(),yf=a("li"),Doe=a("strong"),GVe=o("bert-generation"),OVe=o(" \u2014 "),mk=a("a"),VVe=o("BertGenerationConfig"),XVe=o(" (Bert Generation model)"),zVe=l(),Lf=a("li"),Goe=a("strong"),WVe=o("big_bird"),QVe=o(" \u2014 "),gk=a("a"),HVe=o("BigBirdConfig"),UVe=o(" (BigBird model)"),JVe=l(),xf=a("li"),Ooe=a("strong"),YVe=o("bigbird_pegasus"),KVe=o(" \u2014 "),hk=a("a"),ZVe=o("BigBirdPegasusConfig"),eXe=o(" (BigBird-Pegasus model)"),oXe=l(),$f=a("li"),Voe=a("strong"),rXe=o("blenderbot"),tXe=o(" \u2014 "),pk=a("a"),aXe=o("BlenderbotConfig"),nXe=o(" (Blenderbot model)"),sXe=l(),kf=a("li"),Xoe=a("strong"),lXe=o("blenderbot-small"),iXe=o(" \u2014 "),_k=a("a"),dXe=o("BlenderbotSmallConfig"),cXe=o(" (BlenderbotSmall model)"),fXe=l(),Sf=a("li"),zoe=a("strong"),mXe=o("camembert"),gXe=o(" \u2014 "),uk=a("a"),hXe=o("CamembertConfig"),pXe=o(" (CamemBERT model)"),_Xe=l(),Rf=a("li"),Woe=a("strong"),uXe=o("canine"),bXe=o(" \u2014 "),bk=a("a"),vXe=o("CanineConfig"),FXe=o(" (CANINE model)"),TXe=l(),Pf=a("li"),Qoe=a("strong"),MXe=o("clip"),EXe=o(" \u2014 "),vk=a("a"),CXe=o("CLIPConfig"),wXe=o(" (CLIP model)"),AXe=l(),Bf=a("li"),Hoe=a("strong"),yXe=o("convbert"),LXe=o(" \u2014 "),Fk=a("a"),xXe=o("ConvBertConfig"),$Xe=o(" (ConvBERT model)"),kXe=l(),If=a("li"),Uoe=a("strong"),SXe=o("convnext"),RXe=o(" \u2014 "),Tk=a("a"),PXe=o("ConvNextConfig"),BXe=o(" (ConvNeXT model)"),IXe=l(),Nf=a("li"),Joe=a("strong"),NXe=o("ctrl"),qXe=o(" \u2014 "),Mk=a("a"),jXe=o("CTRLConfig"),DXe=o(" (CTRL model)"),GXe=l(),qf=a("li"),Yoe=a("strong"),OXe=o("cvt"),VXe=o(" \u2014 "),Ek=a("a"),XXe=o("CvtConfig"),zXe=o(" (CvT model)"),WXe=l(),jf=a("li"),Koe=a("strong"),QXe=o("data2vec-audio"),HXe=o(" \u2014 "),Ck=a("a"),UXe=o("Data2VecAudioConfig"),JXe=o(" (Data2VecAudio model)"),YXe=l(),Df=a("li"),Zoe=a("strong"),KXe=o("data2vec-text"),ZXe=o(" \u2014 "),wk=a("a"),eze=o("Data2VecTextConfig"),oze=o(" (Data2VecText model)"),rze=l(),Gf=a("li"),ere=a("strong"),tze=o("data2vec-vision"),aze=o(" \u2014 "),Ak=a("a"),nze=o("Data2VecVisionConfig"),sze=o(" (Data2VecVision model)"),lze=l(),Of=a("li"),ore=a("strong"),ize=o("deberta"),dze=o(" \u2014 "),yk=a("a"),cze=o("DebertaConfig"),fze=o(" (DeBERTa model)"),mze=l(),Vf=a("li"),rre=a("strong"),gze=o("deberta-v2"),hze=o(" \u2014 "),Lk=a("a"),pze=o("DebertaV2Config"),_ze=o(" (DeBERTa-v2 model)"),uze=l(),Xf=a("li"),tre=a("strong"),bze=o("decision_transformer"),vze=o(" \u2014 "),xk=a("a"),Fze=o("DecisionTransformerConfig"),Tze=o(" (Decision Transformer model)"),Mze=l(),zf=a("li"),are=a("strong"),Eze=o("deit"),Cze=o(" \u2014 "),$k=a("a"),wze=o("DeiTConfig"),Aze=o(" (DeiT model)"),yze=l(),Wf=a("li"),nre=a("strong"),Lze=o("detr"),xze=o(" \u2014 "),kk=a("a"),$ze=o("DetrConfig"),kze=o(" (DETR model)"),Sze=l(),Qf=a("li"),sre=a("strong"),Rze=o("distilbert"),Pze=o(" \u2014 "),Sk=a("a"),Bze=o("DistilBertConfig"),Ize=o(" (DistilBERT model)"),Nze=l(),Hf=a("li"),lre=a("strong"),qze=o("dpr"),jze=o(" \u2014 "),Rk=a("a"),Dze=o("DPRConfig"),Gze=o(" (DPR model)"),Oze=l(),Uf=a("li"),ire=a("strong"),Vze=o("dpt"),Xze=o(" \u2014 "),Pk=a("a"),zze=o("DPTConfig"),Wze=o(" (DPT model)"),Qze=l(),Jf=a("li"),dre=a("strong"),Hze=o("electra"),Uze=o(" \u2014 "),Bk=a("a"),Jze=o("ElectraConfig"),Yze=o(" (ELECTRA model)"),Kze=l(),Yf=a("li"),cre=a("strong"),Zze=o("encoder-decoder"),eWe=o(" \u2014 "),Ik=a("a"),oWe=o("EncoderDecoderConfig"),rWe=o(" (Encoder decoder model)"),tWe=l(),Kf=a("li"),fre=a("strong"),aWe=o("flaubert"),nWe=o(" \u2014 "),Nk=a("a"),sWe=o("FlaubertConfig"),lWe=o(" (FlauBERT model)"),iWe=l(),Zf=a("li"),mre=a("strong"),dWe=o("flava"),cWe=o(" \u2014 "),qk=a("a"),fWe=o("FlavaConfig"),mWe=o(" (FLAVA model)"),gWe=l(),em=a("li"),gre=a("strong"),hWe=o("fnet"),pWe=o(" \u2014 "),jk=a("a"),_We=o("FNetConfig"),uWe=o(" (FNet model)"),bWe=l(),om=a("li"),hre=a("strong"),vWe=o("fsmt"),FWe=o(" \u2014 "),Dk=a("a"),TWe=o("FSMTConfig"),MWe=o(" (FairSeq Machine-Translation model)"),EWe=l(),rm=a("li"),pre=a("strong"),CWe=o("funnel"),wWe=o(" \u2014 "),Gk=a("a"),AWe=o("FunnelConfig"),yWe=o(" (Funnel Transformer model)"),LWe=l(),tm=a("li"),_re=a("strong"),xWe=o("glpn"),$We=o(" \u2014 "),Ok=a("a"),kWe=o("GLPNConfig"),SWe=o(" (GLPN model)"),RWe=l(),am=a("li"),ure=a("strong"),PWe=o("gpt2"),BWe=o(" \u2014 "),Vk=a("a"),IWe=o("GPT2Config"),NWe=o(" (OpenAI GPT-2 model)"),qWe=l(),nm=a("li"),bre=a("strong"),jWe=o("gpt_neo"),DWe=o(" \u2014 "),Xk=a("a"),GWe=o("GPTNeoConfig"),OWe=o(" (GPT Neo model)"),VWe=l(),sm=a("li"),vre=a("strong"),XWe=o("gpt_neox"),zWe=o(" \u2014 "),zk=a("a"),WWe=o("GPTNeoXConfig"),QWe=o(" (GPT NeoX model)"),HWe=l(),lm=a("li"),Fre=a("strong"),UWe=o("gptj"),JWe=o(" \u2014 "),Wk=a("a"),YWe=o("GPTJConfig"),KWe=o(" (GPT-J model)"),ZWe=l(),im=a("li"),Tre=a("strong"),eQe=o("hubert"),oQe=o(" \u2014 "),Qk=a("a"),rQe=o("HubertConfig"),tQe=o(" (Hubert model)"),aQe=l(),dm=a("li"),Mre=a("strong"),nQe=o("ibert"),sQe=o(" \u2014 "),Hk=a("a"),lQe=o("IBertConfig"),iQe=o(" (I-BERT model)"),dQe=l(),cm=a("li"),Ere=a("strong"),cQe=o("imagegpt"),fQe=o(" \u2014 "),Uk=a("a"),mQe=o("ImageGPTConfig"),gQe=o(" (ImageGPT model)"),hQe=l(),fm=a("li"),Cre=a("strong"),pQe=o("layoutlm"),_Qe=o(" \u2014 "),Jk=a("a"),uQe=o("LayoutLMConfig"),bQe=o(" (LayoutLM model)"),vQe=l(),mm=a("li"),wre=a("strong"),FQe=o("layoutlmv2"),TQe=o(" \u2014 "),Yk=a("a"),MQe=o("LayoutLMv2Config"),EQe=o(" (LayoutLMv2 model)"),CQe=l(),gm=a("li"),Are=a("strong"),wQe=o("layoutlmv3"),AQe=o(" \u2014 "),Kk=a("a"),yQe=o("LayoutLMv3Config"),LQe=o(" (LayoutLMv3 model)"),xQe=l(),hm=a("li"),yre=a("strong"),$Qe=o("led"),kQe=o(" \u2014 "),Zk=a("a"),SQe=o("LEDConfig"),RQe=o(" (LED model)"),PQe=l(),pm=a("li"),Lre=a("strong"),BQe=o("levit"),IQe=o(" \u2014 "),eS=a("a"),NQe=o("LevitConfig"),qQe=o(" (LeViT model)"),jQe=l(),_m=a("li"),xre=a("strong"),DQe=o("longformer"),GQe=o(" \u2014 "),oS=a("a"),OQe=o("LongformerConfig"),VQe=o(" (Longformer model)"),XQe=l(),um=a("li"),$re=a("strong"),zQe=o("luke"),WQe=o(" \u2014 "),rS=a("a"),QQe=o("LukeConfig"),HQe=o(" (LUKE model)"),UQe=l(),bm=a("li"),kre=a("strong"),JQe=o("lxmert"),YQe=o(" \u2014 "),tS=a("a"),KQe=o("LxmertConfig"),ZQe=o(" (LXMERT model)"),eHe=l(),vm=a("li"),Sre=a("strong"),oHe=o("m2m_100"),rHe=o(" \u2014 "),aS=a("a"),tHe=o("M2M100Config"),aHe=o(" (M2M100 model)"),nHe=l(),Fm=a("li"),Rre=a("strong"),sHe=o("marian"),lHe=o(" \u2014 "),nS=a("a"),iHe=o("MarianConfig"),dHe=o(" (Marian model)"),cHe=l(),Tm=a("li"),Pre=a("strong"),fHe=o("maskformer"),mHe=o(" \u2014 "),sS=a("a"),gHe=o("MaskFormerConfig"),hHe=o(" (MaskFormer model)"),pHe=l(),Mm=a("li"),Bre=a("strong"),_He=o("mbart"),uHe=o(" \u2014 "),lS=a("a"),bHe=o("MBartConfig"),vHe=o(" (mBART model)"),FHe=l(),Em=a("li"),Ire=a("strong"),THe=o("megatron-bert"),MHe=o(" \u2014 "),iS=a("a"),EHe=o("MegatronBertConfig"),CHe=o(" (Megatron-BERT model)"),wHe=l(),Cm=a("li"),Nre=a("strong"),AHe=o("mobilebert"),yHe=o(" \u2014 "),dS=a("a"),LHe=o("MobileBertConfig"),xHe=o(" (MobileBERT model)"),$He=l(),wm=a("li"),qre=a("strong"),kHe=o("mpnet"),SHe=o(" \u2014 "),cS=a("a"),RHe=o("MPNetConfig"),PHe=o(" (MPNet model)"),BHe=l(),Am=a("li"),jre=a("strong"),IHe=o("mt5"),NHe=o(" \u2014 "),fS=a("a"),qHe=o("MT5Config"),jHe=o(" (MT5 model)"),DHe=l(),ym=a("li"),Dre=a("strong"),GHe=o("nystromformer"),OHe=o(" \u2014 "),mS=a("a"),VHe=o("NystromformerConfig"),XHe=o(" (Nystr\xF6mformer model)"),zHe=l(),Lm=a("li"),Gre=a("strong"),WHe=o("openai-gpt"),QHe=o(" \u2014 "),gS=a("a"),HHe=o("OpenAIGPTConfig"),UHe=o(" (OpenAI GPT model)"),JHe=l(),xm=a("li"),Ore=a("strong"),YHe=o("opt"),KHe=o(" \u2014 "),hS=a("a"),ZHe=o("OPTConfig"),eUe=o(" (OPT model)"),oUe=l(),$m=a("li"),Vre=a("strong"),rUe=o("pegasus"),tUe=o(" \u2014 "),pS=a("a"),aUe=o("PegasusConfig"),nUe=o(" (Pegasus model)"),sUe=l(),km=a("li"),Xre=a("strong"),lUe=o("perceiver"),iUe=o(" \u2014 "),_S=a("a"),dUe=o("PerceiverConfig"),cUe=o(" (Perceiver model)"),fUe=l(),Sm=a("li"),zre=a("strong"),mUe=o("plbart"),gUe=o(" \u2014 "),uS=a("a"),hUe=o("PLBartConfig"),pUe=o(" (PLBart model)"),_Ue=l(),Rm=a("li"),Wre=a("strong"),uUe=o("poolformer"),bUe=o(" \u2014 "),bS=a("a"),vUe=o("PoolFormerConfig"),FUe=o(" (PoolFormer model)"),TUe=l(),Pm=a("li"),Qre=a("strong"),MUe=o("prophetnet"),EUe=o(" \u2014 "),vS=a("a"),CUe=o("ProphetNetConfig"),wUe=o(" (ProphetNet model)"),AUe=l(),Bm=a("li"),Hre=a("strong"),yUe=o("qdqbert"),LUe=o(" \u2014 "),FS=a("a"),xUe=o("QDQBertConfig"),$Ue=o(" (QDQBert model)"),kUe=l(),Im=a("li"),Ure=a("strong"),SUe=o("rag"),RUe=o(" \u2014 "),TS=a("a"),PUe=o("RagConfig"),BUe=o(" (RAG model)"),IUe=l(),Nm=a("li"),Jre=a("strong"),NUe=o("realm"),qUe=o(" \u2014 "),MS=a("a"),jUe=o("RealmConfig"),DUe=o(" (REALM model)"),GUe=l(),qm=a("li"),Yre=a("strong"),OUe=o("reformer"),VUe=o(" \u2014 "),ES=a("a"),XUe=o("ReformerConfig"),zUe=o(" (Reformer model)"),WUe=l(),jm=a("li"),Kre=a("strong"),QUe=o("regnet"),HUe=o(" \u2014 "),CS=a("a"),UUe=o("RegNetConfig"),JUe=o(" (RegNet model)"),YUe=l(),Dm=a("li"),Zre=a("strong"),KUe=o("rembert"),ZUe=o(" \u2014 "),wS=a("a"),eJe=o("RemBertConfig"),oJe=o(" (RemBERT model)"),rJe=l(),Gm=a("li"),ete=a("strong"),tJe=o("resnet"),aJe=o(" \u2014 "),AS=a("a"),nJe=o("ResNetConfig"),sJe=o(" (ResNet model)"),lJe=l(),Om=a("li"),ote=a("strong"),iJe=o("retribert"),dJe=o(" \u2014 "),yS=a("a"),cJe=o("RetriBertConfig"),fJe=o(" (RetriBERT model)"),mJe=l(),Vm=a("li"),rte=a("strong"),gJe=o("roberta"),hJe=o(" \u2014 "),LS=a("a"),pJe=o("RobertaConfig"),_Je=o(" (RoBERTa model)"),uJe=l(),Xm=a("li"),tte=a("strong"),bJe=o("roformer"),vJe=o(" \u2014 "),xS=a("a"),FJe=o("RoFormerConfig"),TJe=o(" (RoFormer model)"),MJe=l(),zm=a("li"),ate=a("strong"),EJe=o("segformer"),CJe=o(" \u2014 "),$S=a("a"),wJe=o("SegformerConfig"),AJe=o(" (SegFormer model)"),yJe=l(),Wm=a("li"),nte=a("strong"),LJe=o("sew"),xJe=o(" \u2014 "),kS=a("a"),$Je=o("SEWConfig"),kJe=o(" (SEW model)"),SJe=l(),Qm=a("li"),ste=a("strong"),RJe=o("sew-d"),PJe=o(" \u2014 "),SS=a("a"),BJe=o("SEWDConfig"),IJe=o(" (SEW-D model)"),NJe=l(),Hm=a("li"),lte=a("strong"),qJe=o("speech-encoder-decoder"),jJe=o(" \u2014 "),RS=a("a"),DJe=o("SpeechEncoderDecoderConfig"),GJe=o(" (Speech Encoder decoder model)"),OJe=l(),Um=a("li"),ite=a("strong"),VJe=o("speech_to_text"),XJe=o(" \u2014 "),PS=a("a"),zJe=o("Speech2TextConfig"),WJe=o(" (Speech2Text model)"),QJe=l(),Jm=a("li"),dte=a("strong"),HJe=o("speech_to_text_2"),UJe=o(" \u2014 "),BS=a("a"),JJe=o("Speech2Text2Config"),YJe=o(" (Speech2Text2 model)"),KJe=l(),Ym=a("li"),cte=a("strong"),ZJe=o("splinter"),eYe=o(" \u2014 "),IS=a("a"),oYe=o("SplinterConfig"),rYe=o(" (Splinter model)"),tYe=l(),Km=a("li"),fte=a("strong"),aYe=o("squeezebert"),nYe=o(" \u2014 "),NS=a("a"),sYe=o("SqueezeBertConfig"),lYe=o(" (SqueezeBERT model)"),iYe=l(),Zm=a("li"),mte=a("strong"),dYe=o("swin"),cYe=o(" \u2014 "),qS=a("a"),fYe=o("SwinConfig"),mYe=o(" (Swin Transformer model)"),gYe=l(),eg=a("li"),gte=a("strong"),hYe=o("t5"),pYe=o(" \u2014 "),jS=a("a"),_Ye=o("T5Config"),uYe=o(" (T5 model)"),bYe=l(),og=a("li"),hte=a("strong"),vYe=o("tapas"),FYe=o(" \u2014 "),DS=a("a"),TYe=o("TapasConfig"),MYe=o(" (TAPAS model)"),EYe=l(),rg=a("li"),pte=a("strong"),CYe=o("trajectory_transformer"),wYe=o(" \u2014 "),GS=a("a"),AYe=o("TrajectoryTransformerConfig"),yYe=o(" (Trajectory Transformer model)"),LYe=l(),tg=a("li"),_te=a("strong"),xYe=o("transfo-xl"),$Ye=o(" \u2014 "),OS=a("a"),kYe=o("TransfoXLConfig"),SYe=o(" (Transformer-XL model)"),RYe=l(),ag=a("li"),ute=a("strong"),PYe=o("trocr"),BYe=o(" \u2014 "),VS=a("a"),IYe=o("TrOCRConfig"),NYe=o(" (TrOCR model)"),qYe=l(),ng=a("li"),bte=a("strong"),jYe=o("unispeech"),DYe=o(" \u2014 "),XS=a("a"),GYe=o("UniSpeechConfig"),OYe=o(" (UniSpeech model)"),VYe=l(),sg=a("li"),vte=a("strong"),XYe=o("unispeech-sat"),zYe=o(" \u2014 "),zS=a("a"),WYe=o("UniSpeechSatConfig"),QYe=o(" (UniSpeechSat model)"),HYe=l(),lg=a("li"),Fte=a("strong"),UYe=o("van"),JYe=o(" \u2014 "),WS=a("a"),YYe=o("VanConfig"),KYe=o(" (VAN model)"),ZYe=l(),ig=a("li"),Tte=a("strong"),eKe=o("vilt"),oKe=o(" \u2014 "),QS=a("a"),rKe=o("ViltConfig"),tKe=o(" (ViLT model)"),aKe=l(),dg=a("li"),Mte=a("strong"),nKe=o("vision-encoder-decoder"),sKe=o(" \u2014 "),HS=a("a"),lKe=o("VisionEncoderDecoderConfig"),iKe=o(" (Vision Encoder decoder model)"),dKe=l(),cg=a("li"),Ete=a("strong"),cKe=o("vision-text-dual-encoder"),fKe=o(" \u2014 "),US=a("a"),mKe=o("VisionTextDualEncoderConfig"),gKe=o(" (VisionTextDualEncoder model)"),hKe=l(),fg=a("li"),Cte=a("strong"),pKe=o("visual_bert"),_Ke=o(" \u2014 "),JS=a("a"),uKe=o("VisualBertConfig"),bKe=o(" (VisualBERT model)"),vKe=l(),mg=a("li"),wte=a("strong"),FKe=o("vit"),TKe=o(" \u2014 "),YS=a("a"),MKe=o("ViTConfig"),EKe=o(" (ViT model)"),CKe=l(),gg=a("li"),Ate=a("strong"),wKe=o("vit_mae"),AKe=o(" \u2014 "),KS=a("a"),yKe=o("ViTMAEConfig"),LKe=o(" (ViTMAE model)"),xKe=l(),hg=a("li"),yte=a("strong"),$Ke=o("wav2vec2"),kKe=o(" \u2014 "),ZS=a("a"),SKe=o("Wav2Vec2Config"),RKe=o(" (Wav2Vec2 model)"),PKe=l(),pg=a("li"),Lte=a("strong"),BKe=o("wav2vec2-conformer"),IKe=o(" \u2014 "),eR=a("a"),NKe=o("Wav2Vec2ConformerConfig"),qKe=o(" (Wav2Vec2-Conformer model)"),jKe=l(),_g=a("li"),xte=a("strong"),DKe=o("wavlm"),GKe=o(" \u2014 "),oR=a("a"),OKe=o("WavLMConfig"),VKe=o(" (WavLM model)"),XKe=l(),ug=a("li"),$te=a("strong"),zKe=o("xglm"),WKe=o(" \u2014 "),rR=a("a"),QKe=o("XGLMConfig"),HKe=o(" (XGLM model)"),UKe=l(),bg=a("li"),kte=a("strong"),JKe=o("xlm"),YKe=o(" \u2014 "),tR=a("a"),KKe=o("XLMConfig"),ZKe=o(" (XLM model)"),eZe=l(),vg=a("li"),Ste=a("strong"),oZe=o("xlm-prophetnet"),rZe=o(" \u2014 "),aR=a("a"),tZe=o("XLMProphetNetConfig"),aZe=o(" (XLM-ProphetNet model)"),nZe=l(),Fg=a("li"),Rte=a("strong"),sZe=o("xlm-roberta"),lZe=o(" \u2014 "),nR=a("a"),iZe=o("XLMRobertaConfig"),dZe=o(" (XLM-RoBERTa model)"),cZe=l(),Tg=a("li"),Pte=a("strong"),fZe=o("xlm-roberta-xl"),mZe=o(" \u2014 "),sR=a("a"),gZe=o("XLMRobertaXLConfig"),hZe=o(" (XLM-RoBERTa-XL model)"),pZe=l(),Mg=a("li"),Bte=a("strong"),_Ze=o("xlnet"),uZe=o(" \u2014 "),lR=a("a"),bZe=o("XLNetConfig"),vZe=o(" (XLNet model)"),FZe=l(),Eg=a("li"),Ite=a("strong"),TZe=o("yolos"),MZe=o(" \u2014 "),iR=a("a"),EZe=o("YolosConfig"),CZe=o(" (YOLOS model)"),wZe=l(),Cg=a("li"),Nte=a("strong"),AZe=o("yoso"),yZe=o(" \u2014 "),dR=a("a"),LZe=o("YosoConfig"),xZe=o(" (YOSO model)"),$Ze=l(),F(wg.$$.fragment),kZe=l(),Ag=a("div"),F(VA.$$.fragment),SZe=l(),qte=a("p"),RZe=o("Register a new configuration for this class."),Oqe=l(),Mi=a("h2"),yg=a("a"),jte=a("span"),F(XA.$$.fragment),PZe=l(),Dte=a("span"),BZe=o("AutoTokenizer"),Vqe=l(),wo=a("div"),F(zA.$$.fragment),IZe=l(),WA=a("p"),NZe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),cR=a("a"),qZe=o("AutoTokenizer.from_pretrained()"),jZe=o(" class method."),DZe=l(),QA=a("p"),GZe=o("This class cannot be instantiated directly using "),Gte=a("code"),OZe=o("__init__()"),VZe=o(" (throws an error)."),XZe=l(),Cr=a("div"),F(HA.$$.fragment),zZe=l(),Ote=a("p"),WZe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),QZe=l(),Aa=a("p"),HZe=o("The tokenizer class to instantiate is selected based on the "),Vte=a("code"),UZe=o("model_type"),JZe=o(` property of the config object (either
passed as an argument or loaded from `),Xte=a("code"),YZe=o("pretrained_model_name_or_path"),KZe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zte=a("code"),ZZe=o("pretrained_model_name_or_path"),eeo=o(":"),oeo=l(),k=a("ul"),Sn=a("li"),Wte=a("strong"),reo=o("albert"),teo=o(" \u2014 "),fR=a("a"),aeo=o("AlbertTokenizer"),neo=o(" or "),mR=a("a"),seo=o("AlbertTokenizerFast"),leo=o(" (ALBERT model)"),ieo=l(),Rn=a("li"),Qte=a("strong"),deo=o("bart"),ceo=o(" \u2014 "),gR=a("a"),feo=o("BartTokenizer"),meo=o(" or "),hR=a("a"),geo=o("BartTokenizerFast"),heo=o(" (BART model)"),peo=l(),Pn=a("li"),Hte=a("strong"),_eo=o("barthez"),ueo=o(" \u2014 "),pR=a("a"),beo=o("BarthezTokenizer"),veo=o(" or "),_R=a("a"),Feo=o("BarthezTokenizerFast"),Teo=o(" (BARThez model)"),Meo=l(),Lg=a("li"),Ute=a("strong"),Eeo=o("bartpho"),Ceo=o(" \u2014 "),uR=a("a"),weo=o("BartphoTokenizer"),Aeo=o(" (BARTpho model)"),yeo=l(),Bn=a("li"),Jte=a("strong"),Leo=o("bert"),xeo=o(" \u2014 "),bR=a("a"),$eo=o("BertTokenizer"),keo=o(" or "),vR=a("a"),Seo=o("BertTokenizerFast"),Reo=o(" (BERT model)"),Peo=l(),xg=a("li"),Yte=a("strong"),Beo=o("bert-generation"),Ieo=o(" \u2014 "),FR=a("a"),Neo=o("BertGenerationTokenizer"),qeo=o(" (Bert Generation model)"),jeo=l(),$g=a("li"),Kte=a("strong"),Deo=o("bert-japanese"),Geo=o(" \u2014 "),TR=a("a"),Oeo=o("BertJapaneseTokenizer"),Veo=o(" (BertJapanese model)"),Xeo=l(),kg=a("li"),Zte=a("strong"),zeo=o("bertweet"),Weo=o(" \u2014 "),MR=a("a"),Qeo=o("BertweetTokenizer"),Heo=o(" (BERTweet model)"),Ueo=l(),In=a("li"),eae=a("strong"),Jeo=o("big_bird"),Yeo=o(" \u2014 "),ER=a("a"),Keo=o("BigBirdTokenizer"),Zeo=o(" or "),CR=a("a"),eoo=o("BigBirdTokenizerFast"),ooo=o(" (BigBird model)"),roo=l(),Nn=a("li"),oae=a("strong"),too=o("bigbird_pegasus"),aoo=o(" \u2014 "),wR=a("a"),noo=o("PegasusTokenizer"),soo=o(" or "),AR=a("a"),loo=o("PegasusTokenizerFast"),ioo=o(" (BigBird-Pegasus model)"),doo=l(),qn=a("li"),rae=a("strong"),coo=o("blenderbot"),foo=o(" \u2014 "),yR=a("a"),moo=o("BlenderbotTokenizer"),goo=o(" or "),LR=a("a"),hoo=o("BlenderbotTokenizerFast"),poo=o(" (Blenderbot model)"),_oo=l(),Sg=a("li"),tae=a("strong"),uoo=o("blenderbot-small"),boo=o(" \u2014 "),xR=a("a"),voo=o("BlenderbotSmallTokenizer"),Foo=o(" (BlenderbotSmall model)"),Too=l(),Rg=a("li"),aae=a("strong"),Moo=o("byt5"),Eoo=o(" \u2014 "),$R=a("a"),Coo=o("ByT5Tokenizer"),woo=o(" (ByT5 model)"),Aoo=l(),jn=a("li"),nae=a("strong"),yoo=o("camembert"),Loo=o(" \u2014 "),kR=a("a"),xoo=o("CamembertTokenizer"),$oo=o(" or "),SR=a("a"),koo=o("CamembertTokenizerFast"),Soo=o(" (CamemBERT model)"),Roo=l(),Pg=a("li"),sae=a("strong"),Poo=o("canine"),Boo=o(" \u2014 "),RR=a("a"),Ioo=o("CanineTokenizer"),Noo=o(" (CANINE model)"),qoo=l(),Dn=a("li"),lae=a("strong"),joo=o("clip"),Doo=o(" \u2014 "),PR=a("a"),Goo=o("CLIPTokenizer"),Ooo=o(" or "),BR=a("a"),Voo=o("CLIPTokenizerFast"),Xoo=o(" (CLIP model)"),zoo=l(),Gn=a("li"),iae=a("strong"),Woo=o("convbert"),Qoo=o(" \u2014 "),IR=a("a"),Hoo=o("ConvBertTokenizer"),Uoo=o(" or "),NR=a("a"),Joo=o("ConvBertTokenizerFast"),Yoo=o(" (ConvBERT model)"),Koo=l(),On=a("li"),dae=a("strong"),Zoo=o("cpm"),ero=o(" \u2014 "),qR=a("a"),oro=o("CpmTokenizer"),rro=o(" or "),jR=a("a"),tro=o("CpmTokenizerFast"),aro=o(" (CPM model)"),nro=l(),Bg=a("li"),cae=a("strong"),sro=o("ctrl"),lro=o(" \u2014 "),DR=a("a"),iro=o("CTRLTokenizer"),dro=o(" (CTRL model)"),cro=l(),Vn=a("li"),fae=a("strong"),fro=o("data2vec-text"),mro=o(" \u2014 "),GR=a("a"),gro=o("RobertaTokenizer"),hro=o(" or "),OR=a("a"),pro=o("RobertaTokenizerFast"),_ro=o(" (Data2VecText model)"),uro=l(),Xn=a("li"),mae=a("strong"),bro=o("deberta"),vro=o(" \u2014 "),VR=a("a"),Fro=o("DebertaTokenizer"),Tro=o(" or "),XR=a("a"),Mro=o("DebertaTokenizerFast"),Ero=o(" (DeBERTa model)"),Cro=l(),zn=a("li"),gae=a("strong"),wro=o("deberta-v2"),Aro=o(" \u2014 "),zR=a("a"),yro=o("DebertaV2Tokenizer"),Lro=o(" or "),WR=a("a"),xro=o("DebertaV2TokenizerFast"),$ro=o(" (DeBERTa-v2 model)"),kro=l(),Wn=a("li"),hae=a("strong"),Sro=o("distilbert"),Rro=o(" \u2014 "),QR=a("a"),Pro=o("DistilBertTokenizer"),Bro=o(" or "),HR=a("a"),Iro=o("DistilBertTokenizerFast"),Nro=o(" (DistilBERT model)"),qro=l(),Qn=a("li"),pae=a("strong"),jro=o("dpr"),Dro=o(" \u2014 "),UR=a("a"),Gro=o("DPRQuestionEncoderTokenizer"),Oro=o(" or "),JR=a("a"),Vro=o("DPRQuestionEncoderTokenizerFast"),Xro=o(" (DPR model)"),zro=l(),Hn=a("li"),_ae=a("strong"),Wro=o("electra"),Qro=o(" \u2014 "),YR=a("a"),Hro=o("ElectraTokenizer"),Uro=o(" or "),KR=a("a"),Jro=o("ElectraTokenizerFast"),Yro=o(" (ELECTRA model)"),Kro=l(),Ig=a("li"),uae=a("strong"),Zro=o("flaubert"),eto=o(" \u2014 "),ZR=a("a"),oto=o("FlaubertTokenizer"),rto=o(" (FlauBERT model)"),tto=l(),Un=a("li"),bae=a("strong"),ato=o("fnet"),nto=o(" \u2014 "),eP=a("a"),sto=o("FNetTokenizer"),lto=o(" or "),oP=a("a"),ito=o("FNetTokenizerFast"),dto=o(" (FNet model)"),cto=l(),Ng=a("li"),vae=a("strong"),fto=o("fsmt"),mto=o(" \u2014 "),rP=a("a"),gto=o("FSMTTokenizer"),hto=o(" (FairSeq Machine-Translation model)"),pto=l(),Jn=a("li"),Fae=a("strong"),_to=o("funnel"),uto=o(" \u2014 "),tP=a("a"),bto=o("FunnelTokenizer"),vto=o(" or "),aP=a("a"),Fto=o("FunnelTokenizerFast"),Tto=o(" (Funnel Transformer model)"),Mto=l(),Yn=a("li"),Tae=a("strong"),Eto=o("gpt2"),Cto=o(" \u2014 "),nP=a("a"),wto=o("GPT2Tokenizer"),Ato=o(" or "),sP=a("a"),yto=o("GPT2TokenizerFast"),Lto=o(" (OpenAI GPT-2 model)"),xto=l(),Kn=a("li"),Mae=a("strong"),$to=o("gpt_neo"),kto=o(" \u2014 "),lP=a("a"),Sto=o("GPT2Tokenizer"),Rto=o(" or "),iP=a("a"),Pto=o("GPT2TokenizerFast"),Bto=o(" (GPT Neo model)"),Ito=l(),qg=a("li"),Eae=a("strong"),Nto=o("gpt_neox"),qto=o(" \u2014 "),dP=a("a"),jto=o("GPTNeoXTokenizerFast"),Dto=o(" (GPT NeoX model)"),Gto=l(),Zn=a("li"),Cae=a("strong"),Oto=o("gptj"),Vto=o(" \u2014 "),cP=a("a"),Xto=o("GPT2Tokenizer"),zto=o(" or "),fP=a("a"),Wto=o("GPT2TokenizerFast"),Qto=o(" (GPT-J model)"),Hto=l(),es=a("li"),wae=a("strong"),Uto=o("herbert"),Jto=o(" \u2014 "),mP=a("a"),Yto=o("HerbertTokenizer"),Kto=o(" or "),gP=a("a"),Zto=o("HerbertTokenizerFast"),eao=o(" (HerBERT model)"),oao=l(),jg=a("li"),Aae=a("strong"),rao=o("hubert"),tao=o(" \u2014 "),hP=a("a"),aao=o("Wav2Vec2CTCTokenizer"),nao=o(" (Hubert model)"),sao=l(),os=a("li"),yae=a("strong"),lao=o("ibert"),iao=o(" \u2014 "),pP=a("a"),dao=o("RobertaTokenizer"),cao=o(" or "),_P=a("a"),fao=o("RobertaTokenizerFast"),mao=o(" (I-BERT model)"),gao=l(),rs=a("li"),Lae=a("strong"),hao=o("layoutlm"),pao=o(" \u2014 "),uP=a("a"),_ao=o("LayoutLMTokenizer"),uao=o(" or "),bP=a("a"),bao=o("LayoutLMTokenizerFast"),vao=o(" (LayoutLM model)"),Fao=l(),ts=a("li"),xae=a("strong"),Tao=o("layoutlmv2"),Mao=o(" \u2014 "),vP=a("a"),Eao=o("LayoutLMv2Tokenizer"),Cao=o(" or "),FP=a("a"),wao=o("LayoutLMv2TokenizerFast"),Aao=o(" (LayoutLMv2 model)"),yao=l(),as=a("li"),$ae=a("strong"),Lao=o("layoutlmv3"),xao=o(" \u2014 "),TP=a("a"),$ao=o("LayoutLMv3Tokenizer"),kao=o(" or "),MP=a("a"),Sao=o("LayoutLMv3TokenizerFast"),Rao=o(" (LayoutLMv3 model)"),Pao=l(),ns=a("li"),kae=a("strong"),Bao=o("layoutxlm"),Iao=o(" \u2014 "),EP=a("a"),Nao=o("LayoutXLMTokenizer"),qao=o(" or "),CP=a("a"),jao=o("LayoutXLMTokenizerFast"),Dao=o(" (LayoutXLM model)"),Gao=l(),ss=a("li"),Sae=a("strong"),Oao=o("led"),Vao=o(" \u2014 "),wP=a("a"),Xao=o("LEDTokenizer"),zao=o(" or "),AP=a("a"),Wao=o("LEDTokenizerFast"),Qao=o(" (LED model)"),Hao=l(),ls=a("li"),Rae=a("strong"),Uao=o("longformer"),Jao=o(" \u2014 "),yP=a("a"),Yao=o("LongformerTokenizer"),Kao=o(" or "),LP=a("a"),Zao=o("LongformerTokenizerFast"),eno=o(" (Longformer model)"),ono=l(),Dg=a("li"),Pae=a("strong"),rno=o("luke"),tno=o(" \u2014 "),xP=a("a"),ano=o("LukeTokenizer"),nno=o(" (LUKE model)"),sno=l(),is=a("li"),Bae=a("strong"),lno=o("lxmert"),ino=o(" \u2014 "),$P=a("a"),dno=o("LxmertTokenizer"),cno=o(" or "),kP=a("a"),fno=o("LxmertTokenizerFast"),mno=o(" (LXMERT model)"),gno=l(),Gg=a("li"),Iae=a("strong"),hno=o("m2m_100"),pno=o(" \u2014 "),SP=a("a"),_no=o("M2M100Tokenizer"),uno=o(" (M2M100 model)"),bno=l(),Og=a("li"),Nae=a("strong"),vno=o("marian"),Fno=o(" \u2014 "),RP=a("a"),Tno=o("MarianTokenizer"),Mno=o(" (Marian model)"),Eno=l(),ds=a("li"),qae=a("strong"),Cno=o("mbart"),wno=o(" \u2014 "),PP=a("a"),Ano=o("MBartTokenizer"),yno=o(" or "),BP=a("a"),Lno=o("MBartTokenizerFast"),xno=o(" (mBART model)"),$no=l(),cs=a("li"),jae=a("strong"),kno=o("mbart50"),Sno=o(" \u2014 "),IP=a("a"),Rno=o("MBart50Tokenizer"),Pno=o(" or "),NP=a("a"),Bno=o("MBart50TokenizerFast"),Ino=o(" (mBART-50 model)"),Nno=l(),fs=a("li"),Dae=a("strong"),qno=o("megatron-bert"),jno=o(" \u2014 "),qP=a("a"),Dno=o("BertTokenizer"),Gno=o(" or "),jP=a("a"),Ono=o("BertTokenizerFast"),Vno=o(" (Megatron-BERT model)"),Xno=l(),Vg=a("li"),Gae=a("strong"),zno=o("mluke"),Wno=o(" \u2014 "),DP=a("a"),Qno=o("MLukeTokenizer"),Hno=o(" (mLUKE model)"),Uno=l(),ms=a("li"),Oae=a("strong"),Jno=o("mobilebert"),Yno=o(" \u2014 "),GP=a("a"),Kno=o("MobileBertTokenizer"),Zno=o(" or "),OP=a("a"),eso=o("MobileBertTokenizerFast"),oso=o(" (MobileBERT model)"),rso=l(),gs=a("li"),Vae=a("strong"),tso=o("mpnet"),aso=o(" \u2014 "),VP=a("a"),nso=o("MPNetTokenizer"),sso=o(" or "),XP=a("a"),lso=o("MPNetTokenizerFast"),iso=o(" (MPNet model)"),dso=l(),hs=a("li"),Xae=a("strong"),cso=o("mt5"),fso=o(" \u2014 "),zP=a("a"),mso=o("MT5Tokenizer"),gso=o(" or "),WP=a("a"),hso=o("MT5TokenizerFast"),pso=o(" (MT5 model)"),_so=l(),ps=a("li"),zae=a("strong"),uso=o("nystromformer"),bso=o(" \u2014 "),QP=a("a"),vso=o("AlbertTokenizer"),Fso=o(" or "),HP=a("a"),Tso=o("AlbertTokenizerFast"),Mso=o(" (Nystr\xF6mformer model)"),Eso=l(),_s=a("li"),Wae=a("strong"),Cso=o("openai-gpt"),wso=o(" \u2014 "),UP=a("a"),Aso=o("OpenAIGPTTokenizer"),yso=o(" or "),JP=a("a"),Lso=o("OpenAIGPTTokenizerFast"),xso=o(" (OpenAI GPT model)"),$so=l(),Xg=a("li"),Qae=a("strong"),kso=o("opt"),Sso=o(" \u2014 "),YP=a("a"),Rso=o("GPT2Tokenizer"),Pso=o(" (OPT model)"),Bso=l(),us=a("li"),Hae=a("strong"),Iso=o("pegasus"),Nso=o(" \u2014 "),KP=a("a"),qso=o("PegasusTokenizer"),jso=o(" or "),ZP=a("a"),Dso=o("PegasusTokenizerFast"),Gso=o(" (Pegasus model)"),Oso=l(),zg=a("li"),Uae=a("strong"),Vso=o("perceiver"),Xso=o(" \u2014 "),eB=a("a"),zso=o("PerceiverTokenizer"),Wso=o(" (Perceiver model)"),Qso=l(),Wg=a("li"),Jae=a("strong"),Hso=o("phobert"),Uso=o(" \u2014 "),oB=a("a"),Jso=o("PhobertTokenizer"),Yso=o(" (PhoBERT model)"),Kso=l(),Qg=a("li"),Yae=a("strong"),Zso=o("plbart"),elo=o(" \u2014 "),rB=a("a"),olo=o("PLBartTokenizer"),rlo=o(" (PLBart model)"),tlo=l(),Hg=a("li"),Kae=a("strong"),alo=o("prophetnet"),nlo=o(" \u2014 "),tB=a("a"),slo=o("ProphetNetTokenizer"),llo=o(" (ProphetNet model)"),ilo=l(),bs=a("li"),Zae=a("strong"),dlo=o("qdqbert"),clo=o(" \u2014 "),aB=a("a"),flo=o("BertTokenizer"),mlo=o(" or "),nB=a("a"),glo=o("BertTokenizerFast"),hlo=o(" (QDQBert model)"),plo=l(),Ug=a("li"),ene=a("strong"),_lo=o("rag"),ulo=o(" \u2014 "),sB=a("a"),blo=o("RagTokenizer"),vlo=o(" (RAG model)"),Flo=l(),vs=a("li"),one=a("strong"),Tlo=o("realm"),Mlo=o(" \u2014 "),lB=a("a"),Elo=o("RealmTokenizer"),Clo=o(" or "),iB=a("a"),wlo=o("RealmTokenizerFast"),Alo=o(" (REALM model)"),ylo=l(),Fs=a("li"),rne=a("strong"),Llo=o("reformer"),xlo=o(" \u2014 "),dB=a("a"),$lo=o("ReformerTokenizer"),klo=o(" or "),cB=a("a"),Slo=o("ReformerTokenizerFast"),Rlo=o(" (Reformer model)"),Plo=l(),Ts=a("li"),tne=a("strong"),Blo=o("rembert"),Ilo=o(" \u2014 "),fB=a("a"),Nlo=o("RemBertTokenizer"),qlo=o(" or "),mB=a("a"),jlo=o("RemBertTokenizerFast"),Dlo=o(" (RemBERT model)"),Glo=l(),Ms=a("li"),ane=a("strong"),Olo=o("retribert"),Vlo=o(" \u2014 "),gB=a("a"),Xlo=o("RetriBertTokenizer"),zlo=o(" or "),hB=a("a"),Wlo=o("RetriBertTokenizerFast"),Qlo=o(" (RetriBERT model)"),Hlo=l(),Es=a("li"),nne=a("strong"),Ulo=o("roberta"),Jlo=o(" \u2014 "),pB=a("a"),Ylo=o("RobertaTokenizer"),Klo=o(" or "),_B=a("a"),Zlo=o("RobertaTokenizerFast"),eio=o(" (RoBERTa model)"),oio=l(),Cs=a("li"),sne=a("strong"),rio=o("roformer"),tio=o(" \u2014 "),uB=a("a"),aio=o("RoFormerTokenizer"),nio=o(" or "),bB=a("a"),sio=o("RoFormerTokenizerFast"),lio=o(" (RoFormer model)"),iio=l(),Jg=a("li"),lne=a("strong"),dio=o("speech_to_text"),cio=o(" \u2014 "),vB=a("a"),fio=o("Speech2TextTokenizer"),mio=o(" (Speech2Text model)"),gio=l(),Yg=a("li"),ine=a("strong"),hio=o("speech_to_text_2"),pio=o(" \u2014 "),FB=a("a"),_io=o("Speech2Text2Tokenizer"),uio=o(" (Speech2Text2 model)"),bio=l(),ws=a("li"),dne=a("strong"),vio=o("splinter"),Fio=o(" \u2014 "),TB=a("a"),Tio=o("SplinterTokenizer"),Mio=o(" or "),MB=a("a"),Eio=o("SplinterTokenizerFast"),Cio=o(" (Splinter model)"),wio=l(),As=a("li"),cne=a("strong"),Aio=o("squeezebert"),yio=o(" \u2014 "),EB=a("a"),Lio=o("SqueezeBertTokenizer"),xio=o(" or "),CB=a("a"),$io=o("SqueezeBertTokenizerFast"),kio=o(" (SqueezeBERT model)"),Sio=l(),ys=a("li"),fne=a("strong"),Rio=o("t5"),Pio=o(" \u2014 "),wB=a("a"),Bio=o("T5Tokenizer"),Iio=o(" or "),AB=a("a"),Nio=o("T5TokenizerFast"),qio=o(" (T5 model)"),jio=l(),Kg=a("li"),mne=a("strong"),Dio=o("tapas"),Gio=o(" \u2014 "),yB=a("a"),Oio=o("TapasTokenizer"),Vio=o(" (TAPAS model)"),Xio=l(),Zg=a("li"),gne=a("strong"),zio=o("tapex"),Wio=o(" \u2014 "),LB=a("a"),Qio=o("TapexTokenizer"),Hio=o(" (TAPEX model)"),Uio=l(),eh=a("li"),hne=a("strong"),Jio=o("transfo-xl"),Yio=o(" \u2014 "),xB=a("a"),Kio=o("TransfoXLTokenizer"),Zio=o(" (Transformer-XL model)"),edo=l(),Ls=a("li"),pne=a("strong"),odo=o("visual_bert"),rdo=o(" \u2014 "),$B=a("a"),tdo=o("BertTokenizer"),ado=o(" or "),kB=a("a"),ndo=o("BertTokenizerFast"),sdo=o(" (VisualBERT model)"),ldo=l(),oh=a("li"),_ne=a("strong"),ido=o("wav2vec2"),ddo=o(" \u2014 "),SB=a("a"),cdo=o("Wav2Vec2CTCTokenizer"),fdo=o(" (Wav2Vec2 model)"),mdo=l(),rh=a("li"),une=a("strong"),gdo=o("wav2vec2-conformer"),hdo=o(" \u2014 "),RB=a("a"),pdo=o("Wav2Vec2CTCTokenizer"),_do=o(" (Wav2Vec2-Conformer model)"),udo=l(),th=a("li"),bne=a("strong"),bdo=o("wav2vec2_phoneme"),vdo=o(" \u2014 "),PB=a("a"),Fdo=o("Wav2Vec2PhonemeCTCTokenizer"),Tdo=o(" (Wav2Vec2Phoneme model)"),Mdo=l(),xs=a("li"),vne=a("strong"),Edo=o("xglm"),Cdo=o(" \u2014 "),BB=a("a"),wdo=o("XGLMTokenizer"),Ado=o(" or "),IB=a("a"),ydo=o("XGLMTokenizerFast"),Ldo=o(" (XGLM model)"),xdo=l(),ah=a("li"),Fne=a("strong"),$do=o("xlm"),kdo=o(" \u2014 "),NB=a("a"),Sdo=o("XLMTokenizer"),Rdo=o(" (XLM model)"),Pdo=l(),nh=a("li"),Tne=a("strong"),Bdo=o("xlm-prophetnet"),Ido=o(" \u2014 "),qB=a("a"),Ndo=o("XLMProphetNetTokenizer"),qdo=o(" (XLM-ProphetNet model)"),jdo=l(),$s=a("li"),Mne=a("strong"),Ddo=o("xlm-roberta"),Gdo=o(" \u2014 "),jB=a("a"),Odo=o("XLMRobertaTokenizer"),Vdo=o(" or "),DB=a("a"),Xdo=o("XLMRobertaTokenizerFast"),zdo=o(" (XLM-RoBERTa model)"),Wdo=l(),ks=a("li"),Ene=a("strong"),Qdo=o("xlm-roberta-xl"),Hdo=o(" \u2014 "),GB=a("a"),Udo=o("RobertaTokenizer"),Jdo=o(" or "),OB=a("a"),Ydo=o("RobertaTokenizerFast"),Kdo=o(" (XLM-RoBERTa-XL model)"),Zdo=l(),Ss=a("li"),Cne=a("strong"),eco=o("xlnet"),oco=o(" \u2014 "),VB=a("a"),rco=o("XLNetTokenizer"),tco=o(" or "),XB=a("a"),aco=o("XLNetTokenizerFast"),nco=o(" (XLNet model)"),sco=l(),Rs=a("li"),wne=a("strong"),lco=o("yoso"),ico=o(" \u2014 "),zB=a("a"),dco=o("AlbertTokenizer"),cco=o(" or "),WB=a("a"),fco=o("AlbertTokenizerFast"),mco=o(" (YOSO model)"),gco=l(),F(sh.$$.fragment),hco=l(),lh=a("div"),F(UA.$$.fragment),pco=l(),Ane=a("p"),_co=o("Register a new tokenizer in this mapping."),Xqe=l(),Ei=a("h2"),ih=a("a"),yne=a("span"),F(JA.$$.fragment),uco=l(),Lne=a("span"),bco=o("AutoFeatureExtractor"),zqe=l(),Ao=a("div"),F(YA.$$.fragment),vco=l(),KA=a("p"),Fco=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),QB=a("a"),Tco=o("AutoFeatureExtractor.from_pretrained()"),Mco=o(" class method."),Eco=l(),ZA=a("p"),Cco=o("This class cannot be instantiated directly using "),xne=a("code"),wco=o("__init__()"),Aco=o(" (throws an error)."),yco=l(),He=a("div"),F(e6.$$.fragment),Lco=l(),$ne=a("p"),xco=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),$co=l(),ya=a("p"),kco=o("The feature extractor class to instantiate is selected based on the "),kne=a("code"),Sco=o("model_type"),Rco=o(` property of the config object
(either passed as an argument or loaded from `),Sne=a("code"),Pco=o("pretrained_model_name_or_path"),Bco=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Rne=a("code"),Ico=o("pretrained_model_name_or_path"),Nco=o(":"),qco=l(),Y=a("ul"),dh=a("li"),Pne=a("strong"),jco=o("beit"),Dco=o(" \u2014 "),HB=a("a"),Gco=o("BeitFeatureExtractor"),Oco=o(" (BEiT model)"),Vco=l(),ch=a("li"),Bne=a("strong"),Xco=o("clip"),zco=o(" \u2014 "),UB=a("a"),Wco=o("CLIPFeatureExtractor"),Qco=o(" (CLIP model)"),Hco=l(),fh=a("li"),Ine=a("strong"),Uco=o("convnext"),Jco=o(" \u2014 "),JB=a("a"),Yco=o("ConvNextFeatureExtractor"),Kco=o(" (ConvNeXT model)"),Zco=l(),mh=a("li"),Nne=a("strong"),efo=o("cvt"),ofo=o(" \u2014 "),YB=a("a"),rfo=o("ConvNextFeatureExtractor"),tfo=o(" (CvT model)"),afo=l(),gh=a("li"),qne=a("strong"),nfo=o("data2vec-audio"),sfo=o(" \u2014 "),KB=a("a"),lfo=o("Wav2Vec2FeatureExtractor"),ifo=o(" (Data2VecAudio model)"),dfo=l(),hh=a("li"),jne=a("strong"),cfo=o("data2vec-vision"),ffo=o(" \u2014 "),ZB=a("a"),mfo=o("BeitFeatureExtractor"),gfo=o(" (Data2VecVision model)"),hfo=l(),ph=a("li"),Dne=a("strong"),pfo=o("deit"),_fo=o(" \u2014 "),eI=a("a"),ufo=o("DeiTFeatureExtractor"),bfo=o(" (DeiT model)"),vfo=l(),_h=a("li"),Gne=a("strong"),Ffo=o("detr"),Tfo=o(" \u2014 "),oI=a("a"),Mfo=o("DetrFeatureExtractor"),Efo=o(" (DETR model)"),Cfo=l(),uh=a("li"),One=a("strong"),wfo=o("dpt"),Afo=o(" \u2014 "),rI=a("a"),yfo=o("DPTFeatureExtractor"),Lfo=o(" (DPT model)"),xfo=l(),bh=a("li"),Vne=a("strong"),$fo=o("flava"),kfo=o(" \u2014 "),tI=a("a"),Sfo=o("FlavaFeatureExtractor"),Rfo=o(" (FLAVA model)"),Pfo=l(),vh=a("li"),Xne=a("strong"),Bfo=o("glpn"),Ifo=o(" \u2014 "),aI=a("a"),Nfo=o("GLPNFeatureExtractor"),qfo=o(" (GLPN model)"),jfo=l(),Fh=a("li"),zne=a("strong"),Dfo=o("hubert"),Gfo=o(" \u2014 "),nI=a("a"),Ofo=o("Wav2Vec2FeatureExtractor"),Vfo=o(" (Hubert model)"),Xfo=l(),Th=a("li"),Wne=a("strong"),zfo=o("imagegpt"),Wfo=o(" \u2014 "),sI=a("a"),Qfo=o("ImageGPTFeatureExtractor"),Hfo=o(" (ImageGPT model)"),Ufo=l(),Mh=a("li"),Qne=a("strong"),Jfo=o("layoutlmv2"),Yfo=o(" \u2014 "),lI=a("a"),Kfo=o("LayoutLMv2FeatureExtractor"),Zfo=o(" (LayoutLMv2 model)"),emo=l(),Eh=a("li"),Hne=a("strong"),omo=o("layoutlmv3"),rmo=o(" \u2014 "),iI=a("a"),tmo=o("LayoutLMv3FeatureExtractor"),amo=o(" (LayoutLMv3 model)"),nmo=l(),Ch=a("li"),Une=a("strong"),smo=o("levit"),lmo=o(" \u2014 "),dI=a("a"),imo=o("LevitFeatureExtractor"),dmo=o(" (LeViT model)"),cmo=l(),wh=a("li"),Jne=a("strong"),fmo=o("maskformer"),mmo=o(" \u2014 "),cI=a("a"),gmo=o("MaskFormerFeatureExtractor"),hmo=o(" (MaskFormer model)"),pmo=l(),Ah=a("li"),Yne=a("strong"),_mo=o("perceiver"),umo=o(" \u2014 "),fI=a("a"),bmo=o("PerceiverFeatureExtractor"),vmo=o(" (Perceiver model)"),Fmo=l(),yh=a("li"),Kne=a("strong"),Tmo=o("poolformer"),Mmo=o(" \u2014 "),mI=a("a"),Emo=o("PoolFormerFeatureExtractor"),Cmo=o(" (PoolFormer model)"),wmo=l(),Lh=a("li"),Zne=a("strong"),Amo=o("regnet"),ymo=o(" \u2014 "),gI=a("a"),Lmo=o("ConvNextFeatureExtractor"),xmo=o(" (RegNet model)"),$mo=l(),xh=a("li"),ese=a("strong"),kmo=o("resnet"),Smo=o(" \u2014 "),hI=a("a"),Rmo=o("ConvNextFeatureExtractor"),Pmo=o(" (ResNet model)"),Bmo=l(),$h=a("li"),ose=a("strong"),Imo=o("segformer"),Nmo=o(" \u2014 "),pI=a("a"),qmo=o("SegformerFeatureExtractor"),jmo=o(" (SegFormer model)"),Dmo=l(),kh=a("li"),rse=a("strong"),Gmo=o("speech_to_text"),Omo=o(" \u2014 "),_I=a("a"),Vmo=o("Speech2TextFeatureExtractor"),Xmo=o(" (Speech2Text model)"),zmo=l(),Sh=a("li"),tse=a("strong"),Wmo=o("swin"),Qmo=o(" \u2014 "),uI=a("a"),Hmo=o("ViTFeatureExtractor"),Umo=o(" (Swin Transformer model)"),Jmo=l(),Rh=a("li"),ase=a("strong"),Ymo=o("van"),Kmo=o(" \u2014 "),bI=a("a"),Zmo=o("ConvNextFeatureExtractor"),ego=o(" (VAN model)"),ogo=l(),Ph=a("li"),nse=a("strong"),rgo=o("vit"),tgo=o(" \u2014 "),vI=a("a"),ago=o("ViTFeatureExtractor"),ngo=o(" (ViT model)"),sgo=l(),Bh=a("li"),sse=a("strong"),lgo=o("vit_mae"),igo=o(" \u2014 "),FI=a("a"),dgo=o("ViTFeatureExtractor"),cgo=o(" (ViTMAE model)"),fgo=l(),Ih=a("li"),lse=a("strong"),mgo=o("wav2vec2"),ggo=o(" \u2014 "),TI=a("a"),hgo=o("Wav2Vec2FeatureExtractor"),pgo=o(" (Wav2Vec2 model)"),_go=l(),Nh=a("li"),ise=a("strong"),ugo=o("wav2vec2-conformer"),bgo=o(" \u2014 "),MI=a("a"),vgo=o("Wav2Vec2FeatureExtractor"),Fgo=o(" (Wav2Vec2-Conformer model)"),Tgo=l(),qh=a("li"),dse=a("strong"),Mgo=o("yolos"),Ego=o(" \u2014 "),EI=a("a"),Cgo=o("YolosFeatureExtractor"),wgo=o(" (YOLOS model)"),Ago=l(),F(jh.$$.fragment),ygo=l(),F(Dh.$$.fragment),Lgo=l(),Gh=a("div"),F(o6.$$.fragment),xgo=l(),cse=a("p"),$go=o("Register a new feature extractor for this class."),Wqe=l(),Ci=a("h2"),Oh=a("a"),fse=a("span"),F(r6.$$.fragment),kgo=l(),mse=a("span"),Sgo=o("AutoProcessor"),Qqe=l(),yo=a("div"),F(t6.$$.fragment),Rgo=l(),a6=a("p"),Pgo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),CI=a("a"),Bgo=o("AutoProcessor.from_pretrained()"),Igo=o(" class method."),Ngo=l(),n6=a("p"),qgo=o("This class cannot be instantiated directly using "),gse=a("code"),jgo=o("__init__()"),Dgo=o(" (throws an error)."),Ggo=l(),Ue=a("div"),F(s6.$$.fragment),Ogo=l(),hse=a("p"),Vgo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Xgo=l(),wi=a("p"),zgo=o("The processor class to instantiate is selected based on the "),pse=a("code"),Wgo=o("model_type"),Qgo=o(` property of the config object (either
passed as an argument or loaded from `),_se=a("code"),Hgo=o("pretrained_model_name_or_path"),Ugo=o(" if possible):"),Jgo=l(),he=a("ul"),Vh=a("li"),use=a("strong"),Ygo=o("clip"),Kgo=o(" \u2014 "),wI=a("a"),Zgo=o("CLIPProcessor"),eho=o(" (CLIP model)"),oho=l(),Xh=a("li"),bse=a("strong"),rho=o("flava"),tho=o(" \u2014 "),vse=a("code"),aho=o("FLAVAProcessor"),nho=o(" (FLAVA model)"),sho=l(),zh=a("li"),Fse=a("strong"),lho=o("layoutlmv2"),iho=o(" \u2014 "),AI=a("a"),dho=o("LayoutLMv2Processor"),cho=o(" (LayoutLMv2 model)"),fho=l(),Wh=a("li"),Tse=a("strong"),mho=o("layoutlmv3"),gho=o(" \u2014 "),yI=a("a"),hho=o("LayoutLMv3Processor"),pho=o(" (LayoutLMv3 model)"),_ho=l(),Qh=a("li"),Mse=a("strong"),uho=o("layoutxlm"),bho=o(" \u2014 "),LI=a("a"),vho=o("LayoutXLMProcessor"),Fho=o(" (LayoutXLM model)"),Tho=l(),Hh=a("li"),Ese=a("strong"),Mho=o("sew"),Eho=o(" \u2014 "),xI=a("a"),Cho=o("Wav2Vec2Processor"),who=o(" (SEW model)"),Aho=l(),Uh=a("li"),Cse=a("strong"),yho=o("sew-d"),Lho=o(" \u2014 "),$I=a("a"),xho=o("Wav2Vec2Processor"),$ho=o(" (SEW-D model)"),kho=l(),Jh=a("li"),wse=a("strong"),Sho=o("speech_to_text"),Rho=o(" \u2014 "),kI=a("a"),Pho=o("Speech2TextProcessor"),Bho=o(" (Speech2Text model)"),Iho=l(),Yh=a("li"),Ase=a("strong"),Nho=o("speech_to_text_2"),qho=o(" \u2014 "),SI=a("a"),jho=o("Speech2Text2Processor"),Dho=o(" (Speech2Text2 model)"),Gho=l(),Kh=a("li"),yse=a("strong"),Oho=o("trocr"),Vho=o(" \u2014 "),RI=a("a"),Xho=o("TrOCRProcessor"),zho=o(" (TrOCR model)"),Who=l(),Zh=a("li"),Lse=a("strong"),Qho=o("unispeech"),Hho=o(" \u2014 "),PI=a("a"),Uho=o("Wav2Vec2Processor"),Jho=o(" (UniSpeech model)"),Yho=l(),ep=a("li"),xse=a("strong"),Kho=o("unispeech-sat"),Zho=o(" \u2014 "),BI=a("a"),epo=o("Wav2Vec2Processor"),opo=o(" (UniSpeechSat model)"),rpo=l(),op=a("li"),$se=a("strong"),tpo=o("vilt"),apo=o(" \u2014 "),II=a("a"),npo=o("ViltProcessor"),spo=o(" (ViLT model)"),lpo=l(),rp=a("li"),kse=a("strong"),ipo=o("vision-text-dual-encoder"),dpo=o(" \u2014 "),NI=a("a"),cpo=o("VisionTextDualEncoderProcessor"),fpo=o(" (VisionTextDualEncoder model)"),mpo=l(),tp=a("li"),Sse=a("strong"),gpo=o("wav2vec2"),hpo=o(" \u2014 "),qI=a("a"),ppo=o("Wav2Vec2Processor"),_po=o(" (Wav2Vec2 model)"),upo=l(),ap=a("li"),Rse=a("strong"),bpo=o("wav2vec2-conformer"),vpo=o(" \u2014 "),jI=a("a"),Fpo=o("Wav2Vec2Processor"),Tpo=o(" (Wav2Vec2-Conformer model)"),Mpo=l(),np=a("li"),Pse=a("strong"),Epo=o("wavlm"),Cpo=o(" \u2014 "),DI=a("a"),wpo=o("Wav2Vec2Processor"),Apo=o(" (WavLM model)"),ypo=l(),F(sp.$$.fragment),Lpo=l(),F(lp.$$.fragment),xpo=l(),ip=a("div"),F(l6.$$.fragment),$po=l(),Bse=a("p"),kpo=o("Register a new processor for this class."),Hqe=l(),Ai=a("h2"),dp=a("a"),Ise=a("span"),F(i6.$$.fragment),Spo=l(),Nse=a("span"),Rpo=o("AutoModel"),Uqe=l(),Lo=a("div"),F(d6.$$.fragment),Ppo=l(),yi=a("p"),Bpo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),GI=a("a"),Ipo=o("from_pretrained()"),Npo=o(" class method or the "),OI=a("a"),qpo=o("from_config()"),jpo=o(` class
method.`),Dpo=l(),c6=a("p"),Gpo=o("This class cannot be instantiated directly using "),qse=a("code"),Opo=o("__init__()"),Vpo=o(" (throws an error)."),Xpo=l(),tt=a("div"),F(f6.$$.fragment),zpo=l(),jse=a("p"),Wpo=o("Instantiates one of the base model classes of the library from a configuration."),Qpo=l(),Li=a("p"),Hpo=o(`Note:
Loading a model from its configuration file does `),Dse=a("strong"),Upo=o("not"),Jpo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VI=a("a"),Ypo=o("from_pretrained()"),Kpo=o(" to load the model weights."),Zpo=l(),F(cp.$$.fragment),e_o=l(),Je=a("div"),F(m6.$$.fragment),o_o=l(),Gse=a("p"),r_o=o("Instantiate one of the base model classes of the library from a pretrained model."),t_o=l(),La=a("p"),a_o=o("The model class to instantiate is selected based on the "),Ose=a("code"),n_o=o("model_type"),s_o=o(` property of the config object (either
passed as an argument or loaded from `),Vse=a("code"),l_o=o("pretrained_model_name_or_path"),i_o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xse=a("code"),d_o=o("pretrained_model_name_or_path"),c_o=o(":"),f_o=l(),x=a("ul"),fp=a("li"),zse=a("strong"),m_o=o("albert"),g_o=o(" \u2014 "),XI=a("a"),h_o=o("AlbertModel"),p_o=o(" (ALBERT model)"),__o=l(),mp=a("li"),Wse=a("strong"),u_o=o("bart"),b_o=o(" \u2014 "),zI=a("a"),v_o=o("BartModel"),F_o=o(" (BART model)"),T_o=l(),gp=a("li"),Qse=a("strong"),M_o=o("beit"),E_o=o(" \u2014 "),WI=a("a"),C_o=o("BeitModel"),w_o=o(" (BEiT model)"),A_o=l(),hp=a("li"),Hse=a("strong"),y_o=o("bert"),L_o=o(" \u2014 "),QI=a("a"),x_o=o("BertModel"),$_o=o(" (BERT model)"),k_o=l(),pp=a("li"),Use=a("strong"),S_o=o("bert-generation"),R_o=o(" \u2014 "),HI=a("a"),P_o=o("BertGenerationEncoder"),B_o=o(" (Bert Generation model)"),I_o=l(),_p=a("li"),Jse=a("strong"),N_o=o("big_bird"),q_o=o(" \u2014 "),UI=a("a"),j_o=o("BigBirdModel"),D_o=o(" (BigBird model)"),G_o=l(),up=a("li"),Yse=a("strong"),O_o=o("bigbird_pegasus"),V_o=o(" \u2014 "),JI=a("a"),X_o=o("BigBirdPegasusModel"),z_o=o(" (BigBird-Pegasus model)"),W_o=l(),bp=a("li"),Kse=a("strong"),Q_o=o("blenderbot"),H_o=o(" \u2014 "),YI=a("a"),U_o=o("BlenderbotModel"),J_o=o(" (Blenderbot model)"),Y_o=l(),vp=a("li"),Zse=a("strong"),K_o=o("blenderbot-small"),Z_o=o(" \u2014 "),KI=a("a"),euo=o("BlenderbotSmallModel"),ouo=o(" (BlenderbotSmall model)"),ruo=l(),Fp=a("li"),ele=a("strong"),tuo=o("camembert"),auo=o(" \u2014 "),ZI=a("a"),nuo=o("CamembertModel"),suo=o(" (CamemBERT model)"),luo=l(),Tp=a("li"),ole=a("strong"),iuo=o("canine"),duo=o(" \u2014 "),eN=a("a"),cuo=o("CanineModel"),fuo=o(" (CANINE model)"),muo=l(),Mp=a("li"),rle=a("strong"),guo=o("clip"),huo=o(" \u2014 "),oN=a("a"),puo=o("CLIPModel"),_uo=o(" (CLIP model)"),uuo=l(),Ep=a("li"),tle=a("strong"),buo=o("convbert"),vuo=o(" \u2014 "),rN=a("a"),Fuo=o("ConvBertModel"),Tuo=o(" (ConvBERT model)"),Muo=l(),Cp=a("li"),ale=a("strong"),Euo=o("convnext"),Cuo=o(" \u2014 "),tN=a("a"),wuo=o("ConvNextModel"),Auo=o(" (ConvNeXT model)"),yuo=l(),wp=a("li"),nle=a("strong"),Luo=o("ctrl"),xuo=o(" \u2014 "),aN=a("a"),$uo=o("CTRLModel"),kuo=o(" (CTRL model)"),Suo=l(),Ap=a("li"),sle=a("strong"),Ruo=o("cvt"),Puo=o(" \u2014 "),nN=a("a"),Buo=o("CvtModel"),Iuo=o(" (CvT model)"),Nuo=l(),yp=a("li"),lle=a("strong"),quo=o("data2vec-audio"),juo=o(" \u2014 "),sN=a("a"),Duo=o("Data2VecAudioModel"),Guo=o(" (Data2VecAudio model)"),Ouo=l(),Lp=a("li"),ile=a("strong"),Vuo=o("data2vec-text"),Xuo=o(" \u2014 "),lN=a("a"),zuo=o("Data2VecTextModel"),Wuo=o(" (Data2VecText model)"),Quo=l(),xp=a("li"),dle=a("strong"),Huo=o("data2vec-vision"),Uuo=o(" \u2014 "),iN=a("a"),Juo=o("Data2VecVisionModel"),Yuo=o(" (Data2VecVision model)"),Kuo=l(),$p=a("li"),cle=a("strong"),Zuo=o("deberta"),e1o=o(" \u2014 "),dN=a("a"),o1o=o("DebertaModel"),r1o=o(" (DeBERTa model)"),t1o=l(),kp=a("li"),fle=a("strong"),a1o=o("deberta-v2"),n1o=o(" \u2014 "),cN=a("a"),s1o=o("DebertaV2Model"),l1o=o(" (DeBERTa-v2 model)"),i1o=l(),Sp=a("li"),mle=a("strong"),d1o=o("decision_transformer"),c1o=o(" \u2014 "),fN=a("a"),f1o=o("DecisionTransformerModel"),m1o=o(" (Decision Transformer model)"),g1o=l(),Rp=a("li"),gle=a("strong"),h1o=o("deit"),p1o=o(" \u2014 "),mN=a("a"),_1o=o("DeiTModel"),u1o=o(" (DeiT model)"),b1o=l(),Pp=a("li"),hle=a("strong"),v1o=o("detr"),F1o=o(" \u2014 "),gN=a("a"),T1o=o("DetrModel"),M1o=o(" (DETR model)"),E1o=l(),Bp=a("li"),ple=a("strong"),C1o=o("distilbert"),w1o=o(" \u2014 "),hN=a("a"),A1o=o("DistilBertModel"),y1o=o(" (DistilBERT model)"),L1o=l(),Ip=a("li"),_le=a("strong"),x1o=o("dpr"),$1o=o(" \u2014 "),pN=a("a"),k1o=o("DPRQuestionEncoder"),S1o=o(" (DPR model)"),R1o=l(),Np=a("li"),ule=a("strong"),P1o=o("dpt"),B1o=o(" \u2014 "),_N=a("a"),I1o=o("DPTModel"),N1o=o(" (DPT model)"),q1o=l(),qp=a("li"),ble=a("strong"),j1o=o("electra"),D1o=o(" \u2014 "),uN=a("a"),G1o=o("ElectraModel"),O1o=o(" (ELECTRA model)"),V1o=l(),jp=a("li"),vle=a("strong"),X1o=o("flaubert"),z1o=o(" \u2014 "),bN=a("a"),W1o=o("FlaubertModel"),Q1o=o(" (FlauBERT model)"),H1o=l(),Dp=a("li"),Fle=a("strong"),U1o=o("flava"),J1o=o(" \u2014 "),vN=a("a"),Y1o=o("FlavaModel"),K1o=o(" (FLAVA model)"),Z1o=l(),Gp=a("li"),Tle=a("strong"),ebo=o("fnet"),obo=o(" \u2014 "),FN=a("a"),rbo=o("FNetModel"),tbo=o(" (FNet model)"),abo=l(),Op=a("li"),Mle=a("strong"),nbo=o("fsmt"),sbo=o(" \u2014 "),TN=a("a"),lbo=o("FSMTModel"),ibo=o(" (FairSeq Machine-Translation model)"),dbo=l(),Ps=a("li"),Ele=a("strong"),cbo=o("funnel"),fbo=o(" \u2014 "),MN=a("a"),mbo=o("FunnelModel"),gbo=o(" or "),EN=a("a"),hbo=o("FunnelBaseModel"),pbo=o(" (Funnel Transformer model)"),_bo=l(),Vp=a("li"),Cle=a("strong"),ubo=o("glpn"),bbo=o(" \u2014 "),CN=a("a"),vbo=o("GLPNModel"),Fbo=o(" (GLPN model)"),Tbo=l(),Xp=a("li"),wle=a("strong"),Mbo=o("gpt2"),Ebo=o(" \u2014 "),wN=a("a"),Cbo=o("GPT2Model"),wbo=o(" (OpenAI GPT-2 model)"),Abo=l(),zp=a("li"),Ale=a("strong"),ybo=o("gpt_neo"),Lbo=o(" \u2014 "),AN=a("a"),xbo=o("GPTNeoModel"),$bo=o(" (GPT Neo model)"),kbo=l(),Wp=a("li"),yle=a("strong"),Sbo=o("gpt_neox"),Rbo=o(" \u2014 "),yN=a("a"),Pbo=o("GPTNeoXModel"),Bbo=o(" (GPT NeoX model)"),Ibo=l(),Qp=a("li"),Lle=a("strong"),Nbo=o("gptj"),qbo=o(" \u2014 "),LN=a("a"),jbo=o("GPTJModel"),Dbo=o(" (GPT-J model)"),Gbo=l(),Hp=a("li"),xle=a("strong"),Obo=o("hubert"),Vbo=o(" \u2014 "),xN=a("a"),Xbo=o("HubertModel"),zbo=o(" (Hubert model)"),Wbo=l(),Up=a("li"),$le=a("strong"),Qbo=o("ibert"),Hbo=o(" \u2014 "),$N=a("a"),Ubo=o("IBertModel"),Jbo=o(" (I-BERT model)"),Ybo=l(),Jp=a("li"),kle=a("strong"),Kbo=o("imagegpt"),Zbo=o(" \u2014 "),kN=a("a"),e2o=o("ImageGPTModel"),o2o=o(" (ImageGPT model)"),r2o=l(),Yp=a("li"),Sle=a("strong"),t2o=o("layoutlm"),a2o=o(" \u2014 "),SN=a("a"),n2o=o("LayoutLMModel"),s2o=o(" (LayoutLM model)"),l2o=l(),Kp=a("li"),Rle=a("strong"),i2o=o("layoutlmv2"),d2o=o(" \u2014 "),RN=a("a"),c2o=o("LayoutLMv2Model"),f2o=o(" (LayoutLMv2 model)"),m2o=l(),Zp=a("li"),Ple=a("strong"),g2o=o("layoutlmv3"),h2o=o(" \u2014 "),PN=a("a"),p2o=o("LayoutLMv3Model"),_2o=o(" (LayoutLMv3 model)"),u2o=l(),e_=a("li"),Ble=a("strong"),b2o=o("led"),v2o=o(" \u2014 "),BN=a("a"),F2o=o("LEDModel"),T2o=o(" (LED model)"),M2o=l(),o_=a("li"),Ile=a("strong"),E2o=o("levit"),C2o=o(" \u2014 "),IN=a("a"),w2o=o("LevitModel"),A2o=o(" (LeViT model)"),y2o=l(),r_=a("li"),Nle=a("strong"),L2o=o("longformer"),x2o=o(" \u2014 "),NN=a("a"),$2o=o("LongformerModel"),k2o=o(" (Longformer model)"),S2o=l(),t_=a("li"),qle=a("strong"),R2o=o("luke"),P2o=o(" \u2014 "),qN=a("a"),B2o=o("LukeModel"),I2o=o(" (LUKE model)"),N2o=l(),a_=a("li"),jle=a("strong"),q2o=o("lxmert"),j2o=o(" \u2014 "),jN=a("a"),D2o=o("LxmertModel"),G2o=o(" (LXMERT model)"),O2o=l(),n_=a("li"),Dle=a("strong"),V2o=o("m2m_100"),X2o=o(" \u2014 "),DN=a("a"),z2o=o("M2M100Model"),W2o=o(" (M2M100 model)"),Q2o=l(),s_=a("li"),Gle=a("strong"),H2o=o("marian"),U2o=o(" \u2014 "),GN=a("a"),J2o=o("MarianModel"),Y2o=o(" (Marian model)"),K2o=l(),l_=a("li"),Ole=a("strong"),Z2o=o("maskformer"),evo=o(" \u2014 "),ON=a("a"),ovo=o("MaskFormerModel"),rvo=o(" (MaskFormer model)"),tvo=l(),i_=a("li"),Vle=a("strong"),avo=o("mbart"),nvo=o(" \u2014 "),VN=a("a"),svo=o("MBartModel"),lvo=o(" (mBART model)"),ivo=l(),d_=a("li"),Xle=a("strong"),dvo=o("megatron-bert"),cvo=o(" \u2014 "),XN=a("a"),fvo=o("MegatronBertModel"),mvo=o(" (Megatron-BERT model)"),gvo=l(),c_=a("li"),zle=a("strong"),hvo=o("mobilebert"),pvo=o(" \u2014 "),zN=a("a"),_vo=o("MobileBertModel"),uvo=o(" (MobileBERT model)"),bvo=l(),f_=a("li"),Wle=a("strong"),vvo=o("mpnet"),Fvo=o(" \u2014 "),WN=a("a"),Tvo=o("MPNetModel"),Mvo=o(" (MPNet model)"),Evo=l(),m_=a("li"),Qle=a("strong"),Cvo=o("mt5"),wvo=o(" \u2014 "),QN=a("a"),Avo=o("MT5Model"),yvo=o(" (MT5 model)"),Lvo=l(),g_=a("li"),Hle=a("strong"),xvo=o("nystromformer"),$vo=o(" \u2014 "),HN=a("a"),kvo=o("NystromformerModel"),Svo=o(" (Nystr\xF6mformer model)"),Rvo=l(),h_=a("li"),Ule=a("strong"),Pvo=o("openai-gpt"),Bvo=o(" \u2014 "),UN=a("a"),Ivo=o("OpenAIGPTModel"),Nvo=o(" (OpenAI GPT model)"),qvo=l(),p_=a("li"),Jle=a("strong"),jvo=o("opt"),Dvo=o(" \u2014 "),JN=a("a"),Gvo=o("OPTModel"),Ovo=o(" (OPT model)"),Vvo=l(),__=a("li"),Yle=a("strong"),Xvo=o("pegasus"),zvo=o(" \u2014 "),YN=a("a"),Wvo=o("PegasusModel"),Qvo=o(" (Pegasus model)"),Hvo=l(),u_=a("li"),Kle=a("strong"),Uvo=o("perceiver"),Jvo=o(" \u2014 "),KN=a("a"),Yvo=o("PerceiverModel"),Kvo=o(" (Perceiver model)"),Zvo=l(),b_=a("li"),Zle=a("strong"),e5o=o("plbart"),o5o=o(" \u2014 "),ZN=a("a"),r5o=o("PLBartModel"),t5o=o(" (PLBart model)"),a5o=l(),v_=a("li"),eie=a("strong"),n5o=o("poolformer"),s5o=o(" \u2014 "),eq=a("a"),l5o=o("PoolFormerModel"),i5o=o(" (PoolFormer model)"),d5o=l(),F_=a("li"),oie=a("strong"),c5o=o("prophetnet"),f5o=o(" \u2014 "),oq=a("a"),m5o=o("ProphetNetModel"),g5o=o(" (ProphetNet model)"),h5o=l(),T_=a("li"),rie=a("strong"),p5o=o("qdqbert"),_5o=o(" \u2014 "),rq=a("a"),u5o=o("QDQBertModel"),b5o=o(" (QDQBert model)"),v5o=l(),M_=a("li"),tie=a("strong"),F5o=o("reformer"),T5o=o(" \u2014 "),tq=a("a"),M5o=o("ReformerModel"),E5o=o(" (Reformer model)"),C5o=l(),E_=a("li"),aie=a("strong"),w5o=o("regnet"),A5o=o(" \u2014 "),aq=a("a"),y5o=o("RegNetModel"),L5o=o(" (RegNet model)"),x5o=l(),C_=a("li"),nie=a("strong"),$5o=o("rembert"),k5o=o(" \u2014 "),nq=a("a"),S5o=o("RemBertModel"),R5o=o(" (RemBERT model)"),P5o=l(),w_=a("li"),sie=a("strong"),B5o=o("resnet"),I5o=o(" \u2014 "),sq=a("a"),N5o=o("ResNetModel"),q5o=o(" (ResNet model)"),j5o=l(),A_=a("li"),lie=a("strong"),D5o=o("retribert"),G5o=o(" \u2014 "),lq=a("a"),O5o=o("RetriBertModel"),V5o=o(" (RetriBERT model)"),X5o=l(),y_=a("li"),iie=a("strong"),z5o=o("roberta"),W5o=o(" \u2014 "),iq=a("a"),Q5o=o("RobertaModel"),H5o=o(" (RoBERTa model)"),U5o=l(),L_=a("li"),die=a("strong"),J5o=o("roformer"),Y5o=o(" \u2014 "),dq=a("a"),K5o=o("RoFormerModel"),Z5o=o(" (RoFormer model)"),e3o=l(),x_=a("li"),cie=a("strong"),o3o=o("segformer"),r3o=o(" \u2014 "),cq=a("a"),t3o=o("SegformerModel"),a3o=o(" (SegFormer model)"),n3o=l(),$_=a("li"),fie=a("strong"),s3o=o("sew"),l3o=o(" \u2014 "),fq=a("a"),i3o=o("SEWModel"),d3o=o(" (SEW model)"),c3o=l(),k_=a("li"),mie=a("strong"),f3o=o("sew-d"),m3o=o(" \u2014 "),mq=a("a"),g3o=o("SEWDModel"),h3o=o(" (SEW-D model)"),p3o=l(),S_=a("li"),gie=a("strong"),_3o=o("speech_to_text"),u3o=o(" \u2014 "),gq=a("a"),b3o=o("Speech2TextModel"),v3o=o(" (Speech2Text model)"),F3o=l(),R_=a("li"),hie=a("strong"),T3o=o("splinter"),M3o=o(" \u2014 "),hq=a("a"),E3o=o("SplinterModel"),C3o=o(" (Splinter model)"),w3o=l(),P_=a("li"),pie=a("strong"),A3o=o("squeezebert"),y3o=o(" \u2014 "),pq=a("a"),L3o=o("SqueezeBertModel"),x3o=o(" (SqueezeBERT model)"),$3o=l(),B_=a("li"),_ie=a("strong"),k3o=o("swin"),S3o=o(" \u2014 "),_q=a("a"),R3o=o("SwinModel"),P3o=o(" (Swin Transformer model)"),B3o=l(),I_=a("li"),uie=a("strong"),I3o=o("t5"),N3o=o(" \u2014 "),uq=a("a"),q3o=o("T5Model"),j3o=o(" (T5 model)"),D3o=l(),N_=a("li"),bie=a("strong"),G3o=o("tapas"),O3o=o(" \u2014 "),bq=a("a"),V3o=o("TapasModel"),X3o=o(" (TAPAS model)"),z3o=l(),q_=a("li"),vie=a("strong"),W3o=o("trajectory_transformer"),Q3o=o(" \u2014 "),vq=a("a"),H3o=o("TrajectoryTransformerModel"),U3o=o(" (Trajectory Transformer model)"),J3o=l(),j_=a("li"),Fie=a("strong"),Y3o=o("transfo-xl"),K3o=o(" \u2014 "),Fq=a("a"),Z3o=o("TransfoXLModel"),eFo=o(" (Transformer-XL model)"),oFo=l(),D_=a("li"),Tie=a("strong"),rFo=o("unispeech"),tFo=o(" \u2014 "),Tq=a("a"),aFo=o("UniSpeechModel"),nFo=o(" (UniSpeech model)"),sFo=l(),G_=a("li"),Mie=a("strong"),lFo=o("unispeech-sat"),iFo=o(" \u2014 "),Mq=a("a"),dFo=o("UniSpeechSatModel"),cFo=o(" (UniSpeechSat model)"),fFo=l(),O_=a("li"),Eie=a("strong"),mFo=o("van"),gFo=o(" \u2014 "),Eq=a("a"),hFo=o("VanModel"),pFo=o(" (VAN model)"),_Fo=l(),V_=a("li"),Cie=a("strong"),uFo=o("vilt"),bFo=o(" \u2014 "),Cq=a("a"),vFo=o("ViltModel"),FFo=o(" (ViLT model)"),TFo=l(),X_=a("li"),wie=a("strong"),MFo=o("vision-text-dual-encoder"),EFo=o(" \u2014 "),wq=a("a"),CFo=o("VisionTextDualEncoderModel"),wFo=o(" (VisionTextDualEncoder model)"),AFo=l(),z_=a("li"),Aie=a("strong"),yFo=o("visual_bert"),LFo=o(" \u2014 "),Aq=a("a"),xFo=o("VisualBertModel"),$Fo=o(" (VisualBERT model)"),kFo=l(),W_=a("li"),yie=a("strong"),SFo=o("vit"),RFo=o(" \u2014 "),yq=a("a"),PFo=o("ViTModel"),BFo=o(" (ViT model)"),IFo=l(),Q_=a("li"),Lie=a("strong"),NFo=o("vit_mae"),qFo=o(" \u2014 "),Lq=a("a"),jFo=o("ViTMAEModel"),DFo=o(" (ViTMAE model)"),GFo=l(),H_=a("li"),xie=a("strong"),OFo=o("wav2vec2"),VFo=o(" \u2014 "),xq=a("a"),XFo=o("Wav2Vec2Model"),zFo=o(" (Wav2Vec2 model)"),WFo=l(),U_=a("li"),$ie=a("strong"),QFo=o("wav2vec2-conformer"),HFo=o(" \u2014 "),$q=a("a"),UFo=o("Wav2Vec2ConformerModel"),JFo=o(" (Wav2Vec2-Conformer model)"),YFo=l(),J_=a("li"),kie=a("strong"),KFo=o("wavlm"),ZFo=o(" \u2014 "),kq=a("a"),eTo=o("WavLMModel"),oTo=o(" (WavLM model)"),rTo=l(),Y_=a("li"),Sie=a("strong"),tTo=o("xglm"),aTo=o(" \u2014 "),Sq=a("a"),nTo=o("XGLMModel"),sTo=o(" (XGLM model)"),lTo=l(),K_=a("li"),Rie=a("strong"),iTo=o("xlm"),dTo=o(" \u2014 "),Rq=a("a"),cTo=o("XLMModel"),fTo=o(" (XLM model)"),mTo=l(),Z_=a("li"),Pie=a("strong"),gTo=o("xlm-prophetnet"),hTo=o(" \u2014 "),Pq=a("a"),pTo=o("XLMProphetNetModel"),_To=o(" (XLM-ProphetNet model)"),uTo=l(),eu=a("li"),Bie=a("strong"),bTo=o("xlm-roberta"),vTo=o(" \u2014 "),Bq=a("a"),FTo=o("XLMRobertaModel"),TTo=o(" (XLM-RoBERTa model)"),MTo=l(),ou=a("li"),Iie=a("strong"),ETo=o("xlm-roberta-xl"),CTo=o(" \u2014 "),Iq=a("a"),wTo=o("XLMRobertaXLModel"),ATo=o(" (XLM-RoBERTa-XL model)"),yTo=l(),ru=a("li"),Nie=a("strong"),LTo=o("xlnet"),xTo=o(" \u2014 "),Nq=a("a"),$To=o("XLNetModel"),kTo=o(" (XLNet model)"),STo=l(),tu=a("li"),qie=a("strong"),RTo=o("yolos"),PTo=o(" \u2014 "),qq=a("a"),BTo=o("YolosModel"),ITo=o(" (YOLOS model)"),NTo=l(),au=a("li"),jie=a("strong"),qTo=o("yoso"),jTo=o(" \u2014 "),jq=a("a"),DTo=o("YosoModel"),GTo=o(" (YOSO model)"),OTo=l(),nu=a("p"),VTo=o("The model is set in evaluation mode by default using "),Die=a("code"),XTo=o("model.eval()"),zTo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gie=a("code"),WTo=o("model.train()"),QTo=l(),F(su.$$.fragment),Jqe=l(),xi=a("h2"),lu=a("a"),Oie=a("span"),F(g6.$$.fragment),HTo=l(),Vie=a("span"),UTo=o("AutoModelForPreTraining"),Yqe=l(),xo=a("div"),F(h6.$$.fragment),JTo=l(),$i=a("p"),YTo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Dq=a("a"),KTo=o("from_pretrained()"),ZTo=o(" class method or the "),Gq=a("a"),e7o=o("from_config()"),o7o=o(` class
method.`),r7o=l(),p6=a("p"),t7o=o("This class cannot be instantiated directly using "),Xie=a("code"),a7o=o("__init__()"),n7o=o(" (throws an error)."),s7o=l(),at=a("div"),F(_6.$$.fragment),l7o=l(),zie=a("p"),i7o=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),d7o=l(),ki=a("p"),c7o=o(`Note:
Loading a model from its configuration file does `),Wie=a("strong"),f7o=o("not"),m7o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Oq=a("a"),g7o=o("from_pretrained()"),h7o=o(" to load the model weights."),p7o=l(),F(iu.$$.fragment),_7o=l(),Ye=a("div"),F(u6.$$.fragment),u7o=l(),Qie=a("p"),b7o=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),v7o=l(),xa=a("p"),F7o=o("The model class to instantiate is selected based on the "),Hie=a("code"),T7o=o("model_type"),M7o=o(` property of the config object (either
passed as an argument or loaded from `),Uie=a("code"),E7o=o("pretrained_model_name_or_path"),C7o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jie=a("code"),w7o=o("pretrained_model_name_or_path"),A7o=o(":"),y7o=l(),G=a("ul"),du=a("li"),Yie=a("strong"),L7o=o("albert"),x7o=o(" \u2014 "),Vq=a("a"),$7o=o("AlbertForPreTraining"),k7o=o(" (ALBERT model)"),S7o=l(),cu=a("li"),Kie=a("strong"),R7o=o("bart"),P7o=o(" \u2014 "),Xq=a("a"),B7o=o("BartForConditionalGeneration"),I7o=o(" (BART model)"),N7o=l(),fu=a("li"),Zie=a("strong"),q7o=o("bert"),j7o=o(" \u2014 "),zq=a("a"),D7o=o("BertForPreTraining"),G7o=o(" (BERT model)"),O7o=l(),mu=a("li"),ede=a("strong"),V7o=o("big_bird"),X7o=o(" \u2014 "),Wq=a("a"),z7o=o("BigBirdForPreTraining"),W7o=o(" (BigBird model)"),Q7o=l(),gu=a("li"),ode=a("strong"),H7o=o("camembert"),U7o=o(" \u2014 "),Qq=a("a"),J7o=o("CamembertForMaskedLM"),Y7o=o(" (CamemBERT model)"),K7o=l(),hu=a("li"),rde=a("strong"),Z7o=o("ctrl"),e9o=o(" \u2014 "),Hq=a("a"),o9o=o("CTRLLMHeadModel"),r9o=o(" (CTRL model)"),t9o=l(),pu=a("li"),tde=a("strong"),a9o=o("data2vec-text"),n9o=o(" \u2014 "),Uq=a("a"),s9o=o("Data2VecTextForMaskedLM"),l9o=o(" (Data2VecText model)"),i9o=l(),_u=a("li"),ade=a("strong"),d9o=o("deberta"),c9o=o(" \u2014 "),Jq=a("a"),f9o=o("DebertaForMaskedLM"),m9o=o(" (DeBERTa model)"),g9o=l(),uu=a("li"),nde=a("strong"),h9o=o("deberta-v2"),p9o=o(" \u2014 "),Yq=a("a"),_9o=o("DebertaV2ForMaskedLM"),u9o=o(" (DeBERTa-v2 model)"),b9o=l(),bu=a("li"),sde=a("strong"),v9o=o("distilbert"),F9o=o(" \u2014 "),Kq=a("a"),T9o=o("DistilBertForMaskedLM"),M9o=o(" (DistilBERT model)"),E9o=l(),vu=a("li"),lde=a("strong"),C9o=o("electra"),w9o=o(" \u2014 "),Zq=a("a"),A9o=o("ElectraForPreTraining"),y9o=o(" (ELECTRA model)"),L9o=l(),Fu=a("li"),ide=a("strong"),x9o=o("flaubert"),$9o=o(" \u2014 "),ej=a("a"),k9o=o("FlaubertWithLMHeadModel"),S9o=o(" (FlauBERT model)"),R9o=l(),Tu=a("li"),dde=a("strong"),P9o=o("flava"),B9o=o(" \u2014 "),oj=a("a"),I9o=o("FlavaForPreTraining"),N9o=o(" (FLAVA model)"),q9o=l(),Mu=a("li"),cde=a("strong"),j9o=o("fnet"),D9o=o(" \u2014 "),rj=a("a"),G9o=o("FNetForPreTraining"),O9o=o(" (FNet model)"),V9o=l(),Eu=a("li"),fde=a("strong"),X9o=o("fsmt"),z9o=o(" \u2014 "),tj=a("a"),W9o=o("FSMTForConditionalGeneration"),Q9o=o(" (FairSeq Machine-Translation model)"),H9o=l(),Cu=a("li"),mde=a("strong"),U9o=o("funnel"),J9o=o(" \u2014 "),aj=a("a"),Y9o=o("FunnelForPreTraining"),K9o=o(" (Funnel Transformer model)"),Z9o=l(),wu=a("li"),gde=a("strong"),eMo=o("gpt2"),oMo=o(" \u2014 "),nj=a("a"),rMo=o("GPT2LMHeadModel"),tMo=o(" (OpenAI GPT-2 model)"),aMo=l(),Au=a("li"),hde=a("strong"),nMo=o("ibert"),sMo=o(" \u2014 "),sj=a("a"),lMo=o("IBertForMaskedLM"),iMo=o(" (I-BERT model)"),dMo=l(),yu=a("li"),pde=a("strong"),cMo=o("layoutlm"),fMo=o(" \u2014 "),lj=a("a"),mMo=o("LayoutLMForMaskedLM"),gMo=o(" (LayoutLM model)"),hMo=l(),Lu=a("li"),_de=a("strong"),pMo=o("longformer"),_Mo=o(" \u2014 "),ij=a("a"),uMo=o("LongformerForMaskedLM"),bMo=o(" (Longformer model)"),vMo=l(),xu=a("li"),ude=a("strong"),FMo=o("lxmert"),TMo=o(" \u2014 "),dj=a("a"),MMo=o("LxmertForPreTraining"),EMo=o(" (LXMERT model)"),CMo=l(),$u=a("li"),bde=a("strong"),wMo=o("megatron-bert"),AMo=o(" \u2014 "),cj=a("a"),yMo=o("MegatronBertForPreTraining"),LMo=o(" (Megatron-BERT model)"),xMo=l(),ku=a("li"),vde=a("strong"),$Mo=o("mobilebert"),kMo=o(" \u2014 "),fj=a("a"),SMo=o("MobileBertForPreTraining"),RMo=o(" (MobileBERT model)"),PMo=l(),Su=a("li"),Fde=a("strong"),BMo=o("mpnet"),IMo=o(" \u2014 "),mj=a("a"),NMo=o("MPNetForMaskedLM"),qMo=o(" (MPNet model)"),jMo=l(),Ru=a("li"),Tde=a("strong"),DMo=o("openai-gpt"),GMo=o(" \u2014 "),gj=a("a"),OMo=o("OpenAIGPTLMHeadModel"),VMo=o(" (OpenAI GPT model)"),XMo=l(),Pu=a("li"),Mde=a("strong"),zMo=o("retribert"),WMo=o(" \u2014 "),hj=a("a"),QMo=o("RetriBertModel"),HMo=o(" (RetriBERT model)"),UMo=l(),Bu=a("li"),Ede=a("strong"),JMo=o("roberta"),YMo=o(" \u2014 "),pj=a("a"),KMo=o("RobertaForMaskedLM"),ZMo=o(" (RoBERTa model)"),e4o=l(),Iu=a("li"),Cde=a("strong"),o4o=o("splinter"),r4o=o(" \u2014 "),_j=a("a"),t4o=o("SplinterForPreTraining"),a4o=o(" (Splinter model)"),n4o=l(),Nu=a("li"),wde=a("strong"),s4o=o("squeezebert"),l4o=o(" \u2014 "),uj=a("a"),i4o=o("SqueezeBertForMaskedLM"),d4o=o(" (SqueezeBERT model)"),c4o=l(),qu=a("li"),Ade=a("strong"),f4o=o("t5"),m4o=o(" \u2014 "),bj=a("a"),g4o=o("T5ForConditionalGeneration"),h4o=o(" (T5 model)"),p4o=l(),ju=a("li"),yde=a("strong"),_4o=o("tapas"),u4o=o(" \u2014 "),vj=a("a"),b4o=o("TapasForMaskedLM"),v4o=o(" (TAPAS model)"),F4o=l(),Du=a("li"),Lde=a("strong"),T4o=o("transfo-xl"),M4o=o(" \u2014 "),Fj=a("a"),E4o=o("TransfoXLLMHeadModel"),C4o=o(" (Transformer-XL model)"),w4o=l(),Gu=a("li"),xde=a("strong"),A4o=o("unispeech"),y4o=o(" \u2014 "),Tj=a("a"),L4o=o("UniSpeechForPreTraining"),x4o=o(" (UniSpeech model)"),$4o=l(),Ou=a("li"),$de=a("strong"),k4o=o("unispeech-sat"),S4o=o(" \u2014 "),Mj=a("a"),R4o=o("UniSpeechSatForPreTraining"),P4o=o(" (UniSpeechSat model)"),B4o=l(),Vu=a("li"),kde=a("strong"),I4o=o("visual_bert"),N4o=o(" \u2014 "),Ej=a("a"),q4o=o("VisualBertForPreTraining"),j4o=o(" (VisualBERT model)"),D4o=l(),Xu=a("li"),Sde=a("strong"),G4o=o("vit_mae"),O4o=o(" \u2014 "),Cj=a("a"),V4o=o("ViTMAEForPreTraining"),X4o=o(" (ViTMAE model)"),z4o=l(),zu=a("li"),Rde=a("strong"),W4o=o("wav2vec2"),Q4o=o(" \u2014 "),wj=a("a"),H4o=o("Wav2Vec2ForPreTraining"),U4o=o(" (Wav2Vec2 model)"),J4o=l(),Wu=a("li"),Pde=a("strong"),Y4o=o("wav2vec2-conformer"),K4o=o(" \u2014 "),Aj=a("a"),Z4o=o("Wav2Vec2ConformerForPreTraining"),eEo=o(" (Wav2Vec2-Conformer model)"),oEo=l(),Qu=a("li"),Bde=a("strong"),rEo=o("xlm"),tEo=o(" \u2014 "),yj=a("a"),aEo=o("XLMWithLMHeadModel"),nEo=o(" (XLM model)"),sEo=l(),Hu=a("li"),Ide=a("strong"),lEo=o("xlm-roberta"),iEo=o(" \u2014 "),Lj=a("a"),dEo=o("XLMRobertaForMaskedLM"),cEo=o(" (XLM-RoBERTa model)"),fEo=l(),Uu=a("li"),Nde=a("strong"),mEo=o("xlm-roberta-xl"),gEo=o(" \u2014 "),xj=a("a"),hEo=o("XLMRobertaXLForMaskedLM"),pEo=o(" (XLM-RoBERTa-XL model)"),_Eo=l(),Ju=a("li"),qde=a("strong"),uEo=o("xlnet"),bEo=o(" \u2014 "),$j=a("a"),vEo=o("XLNetLMHeadModel"),FEo=o(" (XLNet model)"),TEo=l(),Yu=a("p"),MEo=o("The model is set in evaluation mode by default using "),jde=a("code"),EEo=o("model.eval()"),CEo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dde=a("code"),wEo=o("model.train()"),AEo=l(),F(Ku.$$.fragment),Kqe=l(),Si=a("h2"),Zu=a("a"),Gde=a("span"),F(b6.$$.fragment),yEo=l(),Ode=a("span"),LEo=o("AutoModelForCausalLM"),Zqe=l(),$o=a("div"),F(v6.$$.fragment),xEo=l(),Ri=a("p"),$Eo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),kj=a("a"),kEo=o("from_pretrained()"),SEo=o(" class method or the "),Sj=a("a"),REo=o("from_config()"),PEo=o(` class
method.`),BEo=l(),F6=a("p"),IEo=o("This class cannot be instantiated directly using "),Vde=a("code"),NEo=o("__init__()"),qEo=o(" (throws an error)."),jEo=l(),nt=a("div"),F(T6.$$.fragment),DEo=l(),Xde=a("p"),GEo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),OEo=l(),Pi=a("p"),VEo=o(`Note:
Loading a model from its configuration file does `),zde=a("strong"),XEo=o("not"),zEo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Rj=a("a"),WEo=o("from_pretrained()"),QEo=o(" to load the model weights."),HEo=l(),F(e1.$$.fragment),UEo=l(),Ke=a("div"),F(M6.$$.fragment),JEo=l(),Wde=a("p"),YEo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),KEo=l(),$a=a("p"),ZEo=o("The model class to instantiate is selected based on the "),Qde=a("code"),eCo=o("model_type"),oCo=o(` property of the config object (either
passed as an argument or loaded from `),Hde=a("code"),rCo=o("pretrained_model_name_or_path"),tCo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ude=a("code"),aCo=o("pretrained_model_name_or_path"),nCo=o(":"),sCo=l(),z=a("ul"),o1=a("li"),Jde=a("strong"),lCo=o("bart"),iCo=o(" \u2014 "),Pj=a("a"),dCo=o("BartForCausalLM"),cCo=o(" (BART model)"),fCo=l(),r1=a("li"),Yde=a("strong"),mCo=o("bert"),gCo=o(" \u2014 "),Bj=a("a"),hCo=o("BertLMHeadModel"),pCo=o(" (BERT model)"),_Co=l(),t1=a("li"),Kde=a("strong"),uCo=o("bert-generation"),bCo=o(" \u2014 "),Ij=a("a"),vCo=o("BertGenerationDecoder"),FCo=o(" (Bert Generation model)"),TCo=l(),a1=a("li"),Zde=a("strong"),MCo=o("big_bird"),ECo=o(" \u2014 "),Nj=a("a"),CCo=o("BigBirdForCausalLM"),wCo=o(" (BigBird model)"),ACo=l(),n1=a("li"),ece=a("strong"),yCo=o("bigbird_pegasus"),LCo=o(" \u2014 "),qj=a("a"),xCo=o("BigBirdPegasusForCausalLM"),$Co=o(" (BigBird-Pegasus model)"),kCo=l(),s1=a("li"),oce=a("strong"),SCo=o("blenderbot"),RCo=o(" \u2014 "),jj=a("a"),PCo=o("BlenderbotForCausalLM"),BCo=o(" (Blenderbot model)"),ICo=l(),l1=a("li"),rce=a("strong"),NCo=o("blenderbot-small"),qCo=o(" \u2014 "),Dj=a("a"),jCo=o("BlenderbotSmallForCausalLM"),DCo=o(" (BlenderbotSmall model)"),GCo=l(),i1=a("li"),tce=a("strong"),OCo=o("camembert"),VCo=o(" \u2014 "),Gj=a("a"),XCo=o("CamembertForCausalLM"),zCo=o(" (CamemBERT model)"),WCo=l(),d1=a("li"),ace=a("strong"),QCo=o("ctrl"),HCo=o(" \u2014 "),Oj=a("a"),UCo=o("CTRLLMHeadModel"),JCo=o(" (CTRL model)"),YCo=l(),c1=a("li"),nce=a("strong"),KCo=o("data2vec-text"),ZCo=o(" \u2014 "),Vj=a("a"),e0o=o("Data2VecTextForCausalLM"),o0o=o(" (Data2VecText model)"),r0o=l(),f1=a("li"),sce=a("strong"),t0o=o("electra"),a0o=o(" \u2014 "),Xj=a("a"),n0o=o("ElectraForCausalLM"),s0o=o(" (ELECTRA model)"),l0o=l(),m1=a("li"),lce=a("strong"),i0o=o("gpt2"),d0o=o(" \u2014 "),zj=a("a"),c0o=o("GPT2LMHeadModel"),f0o=o(" (OpenAI GPT-2 model)"),m0o=l(),g1=a("li"),ice=a("strong"),g0o=o("gpt_neo"),h0o=o(" \u2014 "),Wj=a("a"),p0o=o("GPTNeoForCausalLM"),_0o=o(" (GPT Neo model)"),u0o=l(),h1=a("li"),dce=a("strong"),b0o=o("gpt_neox"),v0o=o(" \u2014 "),Qj=a("a"),F0o=o("GPTNeoXForCausalLM"),T0o=o(" (GPT NeoX model)"),M0o=l(),p1=a("li"),cce=a("strong"),E0o=o("gptj"),C0o=o(" \u2014 "),Hj=a("a"),w0o=o("GPTJForCausalLM"),A0o=o(" (GPT-J model)"),y0o=l(),_1=a("li"),fce=a("strong"),L0o=o("marian"),x0o=o(" \u2014 "),Uj=a("a"),$0o=o("MarianForCausalLM"),k0o=o(" (Marian model)"),S0o=l(),u1=a("li"),mce=a("strong"),R0o=o("mbart"),P0o=o(" \u2014 "),Jj=a("a"),B0o=o("MBartForCausalLM"),I0o=o(" (mBART model)"),N0o=l(),b1=a("li"),gce=a("strong"),q0o=o("megatron-bert"),j0o=o(" \u2014 "),Yj=a("a"),D0o=o("MegatronBertForCausalLM"),G0o=o(" (Megatron-BERT model)"),O0o=l(),v1=a("li"),hce=a("strong"),V0o=o("openai-gpt"),X0o=o(" \u2014 "),Kj=a("a"),z0o=o("OpenAIGPTLMHeadModel"),W0o=o(" (OpenAI GPT model)"),Q0o=l(),F1=a("li"),pce=a("strong"),H0o=o("opt"),U0o=o(" \u2014 "),Zj=a("a"),J0o=o("OPTForCausalLM"),Y0o=o(" (OPT model)"),K0o=l(),T1=a("li"),_ce=a("strong"),Z0o=o("pegasus"),ewo=o(" \u2014 "),eD=a("a"),owo=o("PegasusForCausalLM"),rwo=o(" (Pegasus model)"),two=l(),M1=a("li"),uce=a("strong"),awo=o("plbart"),nwo=o(" \u2014 "),oD=a("a"),swo=o("PLBartForCausalLM"),lwo=o(" (PLBart model)"),iwo=l(),E1=a("li"),bce=a("strong"),dwo=o("prophetnet"),cwo=o(" \u2014 "),rD=a("a"),fwo=o("ProphetNetForCausalLM"),mwo=o(" (ProphetNet model)"),gwo=l(),C1=a("li"),vce=a("strong"),hwo=o("qdqbert"),pwo=o(" \u2014 "),tD=a("a"),_wo=o("QDQBertLMHeadModel"),uwo=o(" (QDQBert model)"),bwo=l(),w1=a("li"),Fce=a("strong"),vwo=o("reformer"),Fwo=o(" \u2014 "),aD=a("a"),Two=o("ReformerModelWithLMHead"),Mwo=o(" (Reformer model)"),Ewo=l(),A1=a("li"),Tce=a("strong"),Cwo=o("rembert"),wwo=o(" \u2014 "),nD=a("a"),Awo=o("RemBertForCausalLM"),ywo=o(" (RemBERT model)"),Lwo=l(),y1=a("li"),Mce=a("strong"),xwo=o("roberta"),$wo=o(" \u2014 "),sD=a("a"),kwo=o("RobertaForCausalLM"),Swo=o(" (RoBERTa model)"),Rwo=l(),L1=a("li"),Ece=a("strong"),Pwo=o("roformer"),Bwo=o(" \u2014 "),lD=a("a"),Iwo=o("RoFormerForCausalLM"),Nwo=o(" (RoFormer model)"),qwo=l(),x1=a("li"),Cce=a("strong"),jwo=o("speech_to_text_2"),Dwo=o(" \u2014 "),iD=a("a"),Gwo=o("Speech2Text2ForCausalLM"),Owo=o(" (Speech2Text2 model)"),Vwo=l(),$1=a("li"),wce=a("strong"),Xwo=o("transfo-xl"),zwo=o(" \u2014 "),dD=a("a"),Wwo=o("TransfoXLLMHeadModel"),Qwo=o(" (Transformer-XL model)"),Hwo=l(),k1=a("li"),Ace=a("strong"),Uwo=o("trocr"),Jwo=o(" \u2014 "),cD=a("a"),Ywo=o("TrOCRForCausalLM"),Kwo=o(" (TrOCR model)"),Zwo=l(),S1=a("li"),yce=a("strong"),eAo=o("xglm"),oAo=o(" \u2014 "),fD=a("a"),rAo=o("XGLMForCausalLM"),tAo=o(" (XGLM model)"),aAo=l(),R1=a("li"),Lce=a("strong"),nAo=o("xlm"),sAo=o(" \u2014 "),mD=a("a"),lAo=o("XLMWithLMHeadModel"),iAo=o(" (XLM model)"),dAo=l(),P1=a("li"),xce=a("strong"),cAo=o("xlm-prophetnet"),fAo=o(" \u2014 "),gD=a("a"),mAo=o("XLMProphetNetForCausalLM"),gAo=o(" (XLM-ProphetNet model)"),hAo=l(),B1=a("li"),$ce=a("strong"),pAo=o("xlm-roberta"),_Ao=o(" \u2014 "),hD=a("a"),uAo=o("XLMRobertaForCausalLM"),bAo=o(" (XLM-RoBERTa model)"),vAo=l(),I1=a("li"),kce=a("strong"),FAo=o("xlm-roberta-xl"),TAo=o(" \u2014 "),pD=a("a"),MAo=o("XLMRobertaXLForCausalLM"),EAo=o(" (XLM-RoBERTa-XL model)"),CAo=l(),N1=a("li"),Sce=a("strong"),wAo=o("xlnet"),AAo=o(" \u2014 "),_D=a("a"),yAo=o("XLNetLMHeadModel"),LAo=o(" (XLNet model)"),xAo=l(),q1=a("p"),$Ao=o("The model is set in evaluation mode by default using "),Rce=a("code"),kAo=o("model.eval()"),SAo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pce=a("code"),RAo=o("model.train()"),PAo=l(),F(j1.$$.fragment),eje=l(),Bi=a("h2"),D1=a("a"),Bce=a("span"),F(E6.$$.fragment),BAo=l(),Ice=a("span"),IAo=o("AutoModelForMaskedLM"),oje=l(),ko=a("div"),F(C6.$$.fragment),NAo=l(),Ii=a("p"),qAo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),uD=a("a"),jAo=o("from_pretrained()"),DAo=o(" class method or the "),bD=a("a"),GAo=o("from_config()"),OAo=o(` class
method.`),VAo=l(),w6=a("p"),XAo=o("This class cannot be instantiated directly using "),Nce=a("code"),zAo=o("__init__()"),WAo=o(" (throws an error)."),QAo=l(),st=a("div"),F(A6.$$.fragment),HAo=l(),qce=a("p"),UAo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),JAo=l(),Ni=a("p"),YAo=o(`Note:
Loading a model from its configuration file does `),jce=a("strong"),KAo=o("not"),ZAo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vD=a("a"),e6o=o("from_pretrained()"),o6o=o(" to load the model weights."),r6o=l(),F(G1.$$.fragment),t6o=l(),Ze=a("div"),F(y6.$$.fragment),a6o=l(),Dce=a("p"),n6o=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),s6o=l(),ka=a("p"),l6o=o("The model class to instantiate is selected based on the "),Gce=a("code"),i6o=o("model_type"),d6o=o(` property of the config object (either
passed as an argument or loaded from `),Oce=a("code"),c6o=o("pretrained_model_name_or_path"),f6o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vce=a("code"),m6o=o("pretrained_model_name_or_path"),g6o=o(":"),h6o=l(),W=a("ul"),O1=a("li"),Xce=a("strong"),p6o=o("albert"),_6o=o(" \u2014 "),FD=a("a"),u6o=o("AlbertForMaskedLM"),b6o=o(" (ALBERT model)"),v6o=l(),V1=a("li"),zce=a("strong"),F6o=o("bart"),T6o=o(" \u2014 "),TD=a("a"),M6o=o("BartForConditionalGeneration"),E6o=o(" (BART model)"),C6o=l(),X1=a("li"),Wce=a("strong"),w6o=o("bert"),A6o=o(" \u2014 "),MD=a("a"),y6o=o("BertForMaskedLM"),L6o=o(" (BERT model)"),x6o=l(),z1=a("li"),Qce=a("strong"),$6o=o("big_bird"),k6o=o(" \u2014 "),ED=a("a"),S6o=o("BigBirdForMaskedLM"),R6o=o(" (BigBird model)"),P6o=l(),W1=a("li"),Hce=a("strong"),B6o=o("camembert"),I6o=o(" \u2014 "),CD=a("a"),N6o=o("CamembertForMaskedLM"),q6o=o(" (CamemBERT model)"),j6o=l(),Q1=a("li"),Uce=a("strong"),D6o=o("convbert"),G6o=o(" \u2014 "),wD=a("a"),O6o=o("ConvBertForMaskedLM"),V6o=o(" (ConvBERT model)"),X6o=l(),H1=a("li"),Jce=a("strong"),z6o=o("data2vec-text"),W6o=o(" \u2014 "),AD=a("a"),Q6o=o("Data2VecTextForMaskedLM"),H6o=o(" (Data2VecText model)"),U6o=l(),U1=a("li"),Yce=a("strong"),J6o=o("deberta"),Y6o=o(" \u2014 "),yD=a("a"),K6o=o("DebertaForMaskedLM"),Z6o=o(" (DeBERTa model)"),eyo=l(),J1=a("li"),Kce=a("strong"),oyo=o("deberta-v2"),ryo=o(" \u2014 "),LD=a("a"),tyo=o("DebertaV2ForMaskedLM"),ayo=o(" (DeBERTa-v2 model)"),nyo=l(),Y1=a("li"),Zce=a("strong"),syo=o("distilbert"),lyo=o(" \u2014 "),xD=a("a"),iyo=o("DistilBertForMaskedLM"),dyo=o(" (DistilBERT model)"),cyo=l(),K1=a("li"),efe=a("strong"),fyo=o("electra"),myo=o(" \u2014 "),$D=a("a"),gyo=o("ElectraForMaskedLM"),hyo=o(" (ELECTRA model)"),pyo=l(),Z1=a("li"),ofe=a("strong"),_yo=o("flaubert"),uyo=o(" \u2014 "),kD=a("a"),byo=o("FlaubertWithLMHeadModel"),vyo=o(" (FlauBERT model)"),Fyo=l(),eb=a("li"),rfe=a("strong"),Tyo=o("fnet"),Myo=o(" \u2014 "),SD=a("a"),Eyo=o("FNetForMaskedLM"),Cyo=o(" (FNet model)"),wyo=l(),ob=a("li"),tfe=a("strong"),Ayo=o("funnel"),yyo=o(" \u2014 "),RD=a("a"),Lyo=o("FunnelForMaskedLM"),xyo=o(" (Funnel Transformer model)"),$yo=l(),rb=a("li"),afe=a("strong"),kyo=o("ibert"),Syo=o(" \u2014 "),PD=a("a"),Ryo=o("IBertForMaskedLM"),Pyo=o(" (I-BERT model)"),Byo=l(),tb=a("li"),nfe=a("strong"),Iyo=o("layoutlm"),Nyo=o(" \u2014 "),BD=a("a"),qyo=o("LayoutLMForMaskedLM"),jyo=o(" (LayoutLM model)"),Dyo=l(),ab=a("li"),sfe=a("strong"),Gyo=o("longformer"),Oyo=o(" \u2014 "),ID=a("a"),Vyo=o("LongformerForMaskedLM"),Xyo=o(" (Longformer model)"),zyo=l(),nb=a("li"),lfe=a("strong"),Wyo=o("luke"),Qyo=o(" \u2014 "),ND=a("a"),Hyo=o("LukeForMaskedLM"),Uyo=o(" (LUKE model)"),Jyo=l(),sb=a("li"),ife=a("strong"),Yyo=o("mbart"),Kyo=o(" \u2014 "),qD=a("a"),Zyo=o("MBartForConditionalGeneration"),eLo=o(" (mBART model)"),oLo=l(),lb=a("li"),dfe=a("strong"),rLo=o("megatron-bert"),tLo=o(" \u2014 "),jD=a("a"),aLo=o("MegatronBertForMaskedLM"),nLo=o(" (Megatron-BERT model)"),sLo=l(),ib=a("li"),cfe=a("strong"),lLo=o("mobilebert"),iLo=o(" \u2014 "),DD=a("a"),dLo=o("MobileBertForMaskedLM"),cLo=o(" (MobileBERT model)"),fLo=l(),db=a("li"),ffe=a("strong"),mLo=o("mpnet"),gLo=o(" \u2014 "),GD=a("a"),hLo=o("MPNetForMaskedLM"),pLo=o(" (MPNet model)"),_Lo=l(),cb=a("li"),mfe=a("strong"),uLo=o("nystromformer"),bLo=o(" \u2014 "),OD=a("a"),vLo=o("NystromformerForMaskedLM"),FLo=o(" (Nystr\xF6mformer model)"),TLo=l(),fb=a("li"),gfe=a("strong"),MLo=o("perceiver"),ELo=o(" \u2014 "),VD=a("a"),CLo=o("PerceiverForMaskedLM"),wLo=o(" (Perceiver model)"),ALo=l(),mb=a("li"),hfe=a("strong"),yLo=o("qdqbert"),LLo=o(" \u2014 "),XD=a("a"),xLo=o("QDQBertForMaskedLM"),$Lo=o(" (QDQBert model)"),kLo=l(),gb=a("li"),pfe=a("strong"),SLo=o("reformer"),RLo=o(" \u2014 "),zD=a("a"),PLo=o("ReformerForMaskedLM"),BLo=o(" (Reformer model)"),ILo=l(),hb=a("li"),_fe=a("strong"),NLo=o("rembert"),qLo=o(" \u2014 "),WD=a("a"),jLo=o("RemBertForMaskedLM"),DLo=o(" (RemBERT model)"),GLo=l(),pb=a("li"),ufe=a("strong"),OLo=o("roberta"),VLo=o(" \u2014 "),QD=a("a"),XLo=o("RobertaForMaskedLM"),zLo=o(" (RoBERTa model)"),WLo=l(),_b=a("li"),bfe=a("strong"),QLo=o("roformer"),HLo=o(" \u2014 "),HD=a("a"),ULo=o("RoFormerForMaskedLM"),JLo=o(" (RoFormer model)"),YLo=l(),ub=a("li"),vfe=a("strong"),KLo=o("squeezebert"),ZLo=o(" \u2014 "),UD=a("a"),e8o=o("SqueezeBertForMaskedLM"),o8o=o(" (SqueezeBERT model)"),r8o=l(),bb=a("li"),Ffe=a("strong"),t8o=o("tapas"),a8o=o(" \u2014 "),JD=a("a"),n8o=o("TapasForMaskedLM"),s8o=o(" (TAPAS model)"),l8o=l(),vb=a("li"),Tfe=a("strong"),i8o=o("wav2vec2"),d8o=o(" \u2014 "),Mfe=a("code"),c8o=o("Wav2Vec2ForMaskedLM"),f8o=o(" (Wav2Vec2 model)"),m8o=l(),Fb=a("li"),Efe=a("strong"),g8o=o("xlm"),h8o=o(" \u2014 "),YD=a("a"),p8o=o("XLMWithLMHeadModel"),_8o=o(" (XLM model)"),u8o=l(),Tb=a("li"),Cfe=a("strong"),b8o=o("xlm-roberta"),v8o=o(" \u2014 "),KD=a("a"),F8o=o("XLMRobertaForMaskedLM"),T8o=o(" (XLM-RoBERTa model)"),M8o=l(),Mb=a("li"),wfe=a("strong"),E8o=o("xlm-roberta-xl"),C8o=o(" \u2014 "),ZD=a("a"),w8o=o("XLMRobertaXLForMaskedLM"),A8o=o(" (XLM-RoBERTa-XL model)"),y8o=l(),Eb=a("li"),Afe=a("strong"),L8o=o("yoso"),x8o=o(" \u2014 "),eG=a("a"),$8o=o("YosoForMaskedLM"),k8o=o(" (YOSO model)"),S8o=l(),Cb=a("p"),R8o=o("The model is set in evaluation mode by default using "),yfe=a("code"),P8o=o("model.eval()"),B8o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lfe=a("code"),I8o=o("model.train()"),N8o=l(),F(wb.$$.fragment),rje=l(),qi=a("h2"),Ab=a("a"),xfe=a("span"),F(L6.$$.fragment),q8o=l(),$fe=a("span"),j8o=o("AutoModelForSeq2SeqLM"),tje=l(),So=a("div"),F(x6.$$.fragment),D8o=l(),ji=a("p"),G8o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),oG=a("a"),O8o=o("from_pretrained()"),V8o=o(" class method or the "),rG=a("a"),X8o=o("from_config()"),z8o=o(` class
method.`),W8o=l(),$6=a("p"),Q8o=o("This class cannot be instantiated directly using "),kfe=a("code"),H8o=o("__init__()"),U8o=o(" (throws an error)."),J8o=l(),lt=a("div"),F(k6.$$.fragment),Y8o=l(),Sfe=a("p"),K8o=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Z8o=l(),Di=a("p"),exo=o(`Note:
Loading a model from its configuration file does `),Rfe=a("strong"),oxo=o("not"),rxo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tG=a("a"),txo=o("from_pretrained()"),axo=o(" to load the model weights."),nxo=l(),F(yb.$$.fragment),sxo=l(),eo=a("div"),F(S6.$$.fragment),lxo=l(),Pfe=a("p"),ixo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),dxo=l(),Sa=a("p"),cxo=o("The model class to instantiate is selected based on the "),Bfe=a("code"),fxo=o("model_type"),mxo=o(` property of the config object (either
passed as an argument or loaded from `),Ife=a("code"),gxo=o("pretrained_model_name_or_path"),hxo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nfe=a("code"),pxo=o("pretrained_model_name_or_path"),_xo=o(":"),uxo=l(),_e=a("ul"),Lb=a("li"),qfe=a("strong"),bxo=o("bart"),vxo=o(" \u2014 "),aG=a("a"),Fxo=o("BartForConditionalGeneration"),Txo=o(" (BART model)"),Mxo=l(),xb=a("li"),jfe=a("strong"),Exo=o("bigbird_pegasus"),Cxo=o(" \u2014 "),nG=a("a"),wxo=o("BigBirdPegasusForConditionalGeneration"),Axo=o(" (BigBird-Pegasus model)"),yxo=l(),$b=a("li"),Dfe=a("strong"),Lxo=o("blenderbot"),xxo=o(" \u2014 "),sG=a("a"),$xo=o("BlenderbotForConditionalGeneration"),kxo=o(" (Blenderbot model)"),Sxo=l(),kb=a("li"),Gfe=a("strong"),Rxo=o("blenderbot-small"),Pxo=o(" \u2014 "),lG=a("a"),Bxo=o("BlenderbotSmallForConditionalGeneration"),Ixo=o(" (BlenderbotSmall model)"),Nxo=l(),Sb=a("li"),Ofe=a("strong"),qxo=o("encoder-decoder"),jxo=o(" \u2014 "),iG=a("a"),Dxo=o("EncoderDecoderModel"),Gxo=o(" (Encoder decoder model)"),Oxo=l(),Rb=a("li"),Vfe=a("strong"),Vxo=o("fsmt"),Xxo=o(" \u2014 "),dG=a("a"),zxo=o("FSMTForConditionalGeneration"),Wxo=o(" (FairSeq Machine-Translation model)"),Qxo=l(),Pb=a("li"),Xfe=a("strong"),Hxo=o("led"),Uxo=o(" \u2014 "),cG=a("a"),Jxo=o("LEDForConditionalGeneration"),Yxo=o(" (LED model)"),Kxo=l(),Bb=a("li"),zfe=a("strong"),Zxo=o("m2m_100"),e$o=o(" \u2014 "),fG=a("a"),o$o=o("M2M100ForConditionalGeneration"),r$o=o(" (M2M100 model)"),t$o=l(),Ib=a("li"),Wfe=a("strong"),a$o=o("marian"),n$o=o(" \u2014 "),mG=a("a"),s$o=o("MarianMTModel"),l$o=o(" (Marian model)"),i$o=l(),Nb=a("li"),Qfe=a("strong"),d$o=o("mbart"),c$o=o(" \u2014 "),gG=a("a"),f$o=o("MBartForConditionalGeneration"),m$o=o(" (mBART model)"),g$o=l(),qb=a("li"),Hfe=a("strong"),h$o=o("mt5"),p$o=o(" \u2014 "),hG=a("a"),_$o=o("MT5ForConditionalGeneration"),u$o=o(" (MT5 model)"),b$o=l(),jb=a("li"),Ufe=a("strong"),v$o=o("pegasus"),F$o=o(" \u2014 "),pG=a("a"),T$o=o("PegasusForConditionalGeneration"),M$o=o(" (Pegasus model)"),E$o=l(),Db=a("li"),Jfe=a("strong"),C$o=o("plbart"),w$o=o(" \u2014 "),_G=a("a"),A$o=o("PLBartForConditionalGeneration"),y$o=o(" (PLBart model)"),L$o=l(),Gb=a("li"),Yfe=a("strong"),x$o=o("prophetnet"),$$o=o(" \u2014 "),uG=a("a"),k$o=o("ProphetNetForConditionalGeneration"),S$o=o(" (ProphetNet model)"),R$o=l(),Ob=a("li"),Kfe=a("strong"),P$o=o("t5"),B$o=o(" \u2014 "),bG=a("a"),I$o=o("T5ForConditionalGeneration"),N$o=o(" (T5 model)"),q$o=l(),Vb=a("li"),Zfe=a("strong"),j$o=o("xlm-prophetnet"),D$o=o(" \u2014 "),vG=a("a"),G$o=o("XLMProphetNetForConditionalGeneration"),O$o=o(" (XLM-ProphetNet model)"),V$o=l(),Xb=a("p"),X$o=o("The model is set in evaluation mode by default using "),eme=a("code"),z$o=o("model.eval()"),W$o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ome=a("code"),Q$o=o("model.train()"),H$o=l(),F(zb.$$.fragment),aje=l(),Gi=a("h2"),Wb=a("a"),rme=a("span"),F(R6.$$.fragment),U$o=l(),tme=a("span"),J$o=o("AutoModelForSequenceClassification"),nje=l(),Ro=a("div"),F(P6.$$.fragment),Y$o=l(),Oi=a("p"),K$o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),FG=a("a"),Z$o=o("from_pretrained()"),eko=o(" class method or the "),TG=a("a"),oko=o("from_config()"),rko=o(` class
method.`),tko=l(),B6=a("p"),ako=o("This class cannot be instantiated directly using "),ame=a("code"),nko=o("__init__()"),sko=o(" (throws an error)."),lko=l(),it=a("div"),F(I6.$$.fragment),iko=l(),nme=a("p"),dko=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),cko=l(),Vi=a("p"),fko=o(`Note:
Loading a model from its configuration file does `),sme=a("strong"),mko=o("not"),gko=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MG=a("a"),hko=o("from_pretrained()"),pko=o(" to load the model weights."),_ko=l(),F(Qb.$$.fragment),uko=l(),oo=a("div"),F(N6.$$.fragment),bko=l(),lme=a("p"),vko=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Fko=l(),Ra=a("p"),Tko=o("The model class to instantiate is selected based on the "),ime=a("code"),Mko=o("model_type"),Eko=o(` property of the config object (either
passed as an argument or loaded from `),dme=a("code"),Cko=o("pretrained_model_name_or_path"),wko=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cme=a("code"),Ako=o("pretrained_model_name_or_path"),yko=o(":"),Lko=l(),N=a("ul"),Hb=a("li"),fme=a("strong"),xko=o("albert"),$ko=o(" \u2014 "),EG=a("a"),kko=o("AlbertForSequenceClassification"),Sko=o(" (ALBERT model)"),Rko=l(),Ub=a("li"),mme=a("strong"),Pko=o("bart"),Bko=o(" \u2014 "),CG=a("a"),Iko=o("BartForSequenceClassification"),Nko=o(" (BART model)"),qko=l(),Jb=a("li"),gme=a("strong"),jko=o("bert"),Dko=o(" \u2014 "),wG=a("a"),Gko=o("BertForSequenceClassification"),Oko=o(" (BERT model)"),Vko=l(),Yb=a("li"),hme=a("strong"),Xko=o("big_bird"),zko=o(" \u2014 "),AG=a("a"),Wko=o("BigBirdForSequenceClassification"),Qko=o(" (BigBird model)"),Hko=l(),Kb=a("li"),pme=a("strong"),Uko=o("bigbird_pegasus"),Jko=o(" \u2014 "),yG=a("a"),Yko=o("BigBirdPegasusForSequenceClassification"),Kko=o(" (BigBird-Pegasus model)"),Zko=l(),Zb=a("li"),_me=a("strong"),eSo=o("camembert"),oSo=o(" \u2014 "),LG=a("a"),rSo=o("CamembertForSequenceClassification"),tSo=o(" (CamemBERT model)"),aSo=l(),e2=a("li"),ume=a("strong"),nSo=o("canine"),sSo=o(" \u2014 "),xG=a("a"),lSo=o("CanineForSequenceClassification"),iSo=o(" (CANINE model)"),dSo=l(),o2=a("li"),bme=a("strong"),cSo=o("convbert"),fSo=o(" \u2014 "),$G=a("a"),mSo=o("ConvBertForSequenceClassification"),gSo=o(" (ConvBERT model)"),hSo=l(),r2=a("li"),vme=a("strong"),pSo=o("ctrl"),_So=o(" \u2014 "),kG=a("a"),uSo=o("CTRLForSequenceClassification"),bSo=o(" (CTRL model)"),vSo=l(),t2=a("li"),Fme=a("strong"),FSo=o("data2vec-text"),TSo=o(" \u2014 "),SG=a("a"),MSo=o("Data2VecTextForSequenceClassification"),ESo=o(" (Data2VecText model)"),CSo=l(),a2=a("li"),Tme=a("strong"),wSo=o("deberta"),ASo=o(" \u2014 "),RG=a("a"),ySo=o("DebertaForSequenceClassification"),LSo=o(" (DeBERTa model)"),xSo=l(),n2=a("li"),Mme=a("strong"),$So=o("deberta-v2"),kSo=o(" \u2014 "),PG=a("a"),SSo=o("DebertaV2ForSequenceClassification"),RSo=o(" (DeBERTa-v2 model)"),PSo=l(),s2=a("li"),Eme=a("strong"),BSo=o("distilbert"),ISo=o(" \u2014 "),BG=a("a"),NSo=o("DistilBertForSequenceClassification"),qSo=o(" (DistilBERT model)"),jSo=l(),l2=a("li"),Cme=a("strong"),DSo=o("electra"),GSo=o(" \u2014 "),IG=a("a"),OSo=o("ElectraForSequenceClassification"),VSo=o(" (ELECTRA model)"),XSo=l(),i2=a("li"),wme=a("strong"),zSo=o("flaubert"),WSo=o(" \u2014 "),NG=a("a"),QSo=o("FlaubertForSequenceClassification"),HSo=o(" (FlauBERT model)"),USo=l(),d2=a("li"),Ame=a("strong"),JSo=o("fnet"),YSo=o(" \u2014 "),qG=a("a"),KSo=o("FNetForSequenceClassification"),ZSo=o(" (FNet model)"),eRo=l(),c2=a("li"),yme=a("strong"),oRo=o("funnel"),rRo=o(" \u2014 "),jG=a("a"),tRo=o("FunnelForSequenceClassification"),aRo=o(" (Funnel Transformer model)"),nRo=l(),f2=a("li"),Lme=a("strong"),sRo=o("gpt2"),lRo=o(" \u2014 "),DG=a("a"),iRo=o("GPT2ForSequenceClassification"),dRo=o(" (OpenAI GPT-2 model)"),cRo=l(),m2=a("li"),xme=a("strong"),fRo=o("gpt_neo"),mRo=o(" \u2014 "),GG=a("a"),gRo=o("GPTNeoForSequenceClassification"),hRo=o(" (GPT Neo model)"),pRo=l(),g2=a("li"),$me=a("strong"),_Ro=o("gptj"),uRo=o(" \u2014 "),OG=a("a"),bRo=o("GPTJForSequenceClassification"),vRo=o(" (GPT-J model)"),FRo=l(),h2=a("li"),kme=a("strong"),TRo=o("ibert"),MRo=o(" \u2014 "),VG=a("a"),ERo=o("IBertForSequenceClassification"),CRo=o(" (I-BERT model)"),wRo=l(),p2=a("li"),Sme=a("strong"),ARo=o("layoutlm"),yRo=o(" \u2014 "),XG=a("a"),LRo=o("LayoutLMForSequenceClassification"),xRo=o(" (LayoutLM model)"),$Ro=l(),_2=a("li"),Rme=a("strong"),kRo=o("layoutlmv2"),SRo=o(" \u2014 "),zG=a("a"),RRo=o("LayoutLMv2ForSequenceClassification"),PRo=o(" (LayoutLMv2 model)"),BRo=l(),u2=a("li"),Pme=a("strong"),IRo=o("layoutlmv3"),NRo=o(" \u2014 "),WG=a("a"),qRo=o("LayoutLMv3ForSequenceClassification"),jRo=o(" (LayoutLMv3 model)"),DRo=l(),b2=a("li"),Bme=a("strong"),GRo=o("led"),ORo=o(" \u2014 "),QG=a("a"),VRo=o("LEDForSequenceClassification"),XRo=o(" (LED model)"),zRo=l(),v2=a("li"),Ime=a("strong"),WRo=o("longformer"),QRo=o(" \u2014 "),HG=a("a"),HRo=o("LongformerForSequenceClassification"),URo=o(" (Longformer model)"),JRo=l(),F2=a("li"),Nme=a("strong"),YRo=o("mbart"),KRo=o(" \u2014 "),UG=a("a"),ZRo=o("MBartForSequenceClassification"),ePo=o(" (mBART model)"),oPo=l(),T2=a("li"),qme=a("strong"),rPo=o("megatron-bert"),tPo=o(" \u2014 "),JG=a("a"),aPo=o("MegatronBertForSequenceClassification"),nPo=o(" (Megatron-BERT model)"),sPo=l(),M2=a("li"),jme=a("strong"),lPo=o("mobilebert"),iPo=o(" \u2014 "),YG=a("a"),dPo=o("MobileBertForSequenceClassification"),cPo=o(" (MobileBERT model)"),fPo=l(),E2=a("li"),Dme=a("strong"),mPo=o("mpnet"),gPo=o(" \u2014 "),KG=a("a"),hPo=o("MPNetForSequenceClassification"),pPo=o(" (MPNet model)"),_Po=l(),C2=a("li"),Gme=a("strong"),uPo=o("nystromformer"),bPo=o(" \u2014 "),ZG=a("a"),vPo=o("NystromformerForSequenceClassification"),FPo=o(" (Nystr\xF6mformer model)"),TPo=l(),w2=a("li"),Ome=a("strong"),MPo=o("openai-gpt"),EPo=o(" \u2014 "),eO=a("a"),CPo=o("OpenAIGPTForSequenceClassification"),wPo=o(" (OpenAI GPT model)"),APo=l(),A2=a("li"),Vme=a("strong"),yPo=o("perceiver"),LPo=o(" \u2014 "),oO=a("a"),xPo=o("PerceiverForSequenceClassification"),$Po=o(" (Perceiver model)"),kPo=l(),y2=a("li"),Xme=a("strong"),SPo=o("plbart"),RPo=o(" \u2014 "),rO=a("a"),PPo=o("PLBartForSequenceClassification"),BPo=o(" (PLBart model)"),IPo=l(),L2=a("li"),zme=a("strong"),NPo=o("qdqbert"),qPo=o(" \u2014 "),tO=a("a"),jPo=o("QDQBertForSequenceClassification"),DPo=o(" (QDQBert model)"),GPo=l(),x2=a("li"),Wme=a("strong"),OPo=o("reformer"),VPo=o(" \u2014 "),aO=a("a"),XPo=o("ReformerForSequenceClassification"),zPo=o(" (Reformer model)"),WPo=l(),$2=a("li"),Qme=a("strong"),QPo=o("rembert"),HPo=o(" \u2014 "),nO=a("a"),UPo=o("RemBertForSequenceClassification"),JPo=o(" (RemBERT model)"),YPo=l(),k2=a("li"),Hme=a("strong"),KPo=o("roberta"),ZPo=o(" \u2014 "),sO=a("a"),eBo=o("RobertaForSequenceClassification"),oBo=o(" (RoBERTa model)"),rBo=l(),S2=a("li"),Ume=a("strong"),tBo=o("roformer"),aBo=o(" \u2014 "),lO=a("a"),nBo=o("RoFormerForSequenceClassification"),sBo=o(" (RoFormer model)"),lBo=l(),R2=a("li"),Jme=a("strong"),iBo=o("squeezebert"),dBo=o(" \u2014 "),iO=a("a"),cBo=o("SqueezeBertForSequenceClassification"),fBo=o(" (SqueezeBERT model)"),mBo=l(),P2=a("li"),Yme=a("strong"),gBo=o("tapas"),hBo=o(" \u2014 "),dO=a("a"),pBo=o("TapasForSequenceClassification"),_Bo=o(" (TAPAS model)"),uBo=l(),B2=a("li"),Kme=a("strong"),bBo=o("transfo-xl"),vBo=o(" \u2014 "),cO=a("a"),FBo=o("TransfoXLForSequenceClassification"),TBo=o(" (Transformer-XL model)"),MBo=l(),I2=a("li"),Zme=a("strong"),EBo=o("xlm"),CBo=o(" \u2014 "),fO=a("a"),wBo=o("XLMForSequenceClassification"),ABo=o(" (XLM model)"),yBo=l(),N2=a("li"),ege=a("strong"),LBo=o("xlm-roberta"),xBo=o(" \u2014 "),mO=a("a"),$Bo=o("XLMRobertaForSequenceClassification"),kBo=o(" (XLM-RoBERTa model)"),SBo=l(),q2=a("li"),oge=a("strong"),RBo=o("xlm-roberta-xl"),PBo=o(" \u2014 "),gO=a("a"),BBo=o("XLMRobertaXLForSequenceClassification"),IBo=o(" (XLM-RoBERTa-XL model)"),NBo=l(),j2=a("li"),rge=a("strong"),qBo=o("xlnet"),jBo=o(" \u2014 "),hO=a("a"),DBo=o("XLNetForSequenceClassification"),GBo=o(" (XLNet model)"),OBo=l(),D2=a("li"),tge=a("strong"),VBo=o("yoso"),XBo=o(" \u2014 "),pO=a("a"),zBo=o("YosoForSequenceClassification"),WBo=o(" (YOSO model)"),QBo=l(),G2=a("p"),HBo=o("The model is set in evaluation mode by default using "),age=a("code"),UBo=o("model.eval()"),JBo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nge=a("code"),YBo=o("model.train()"),KBo=l(),F(O2.$$.fragment),sje=l(),Xi=a("h2"),V2=a("a"),sge=a("span"),F(q6.$$.fragment),ZBo=l(),lge=a("span"),eIo=o("AutoModelForMultipleChoice"),lje=l(),Po=a("div"),F(j6.$$.fragment),oIo=l(),zi=a("p"),rIo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),_O=a("a"),tIo=o("from_pretrained()"),aIo=o(" class method or the "),uO=a("a"),nIo=o("from_config()"),sIo=o(` class
method.`),lIo=l(),D6=a("p"),iIo=o("This class cannot be instantiated directly using "),ige=a("code"),dIo=o("__init__()"),cIo=o(" (throws an error)."),fIo=l(),dt=a("div"),F(G6.$$.fragment),mIo=l(),dge=a("p"),gIo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),hIo=l(),Wi=a("p"),pIo=o(`Note:
Loading a model from its configuration file does `),cge=a("strong"),_Io=o("not"),uIo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bO=a("a"),bIo=o("from_pretrained()"),vIo=o(" to load the model weights."),FIo=l(),F(X2.$$.fragment),TIo=l(),ro=a("div"),F(O6.$$.fragment),MIo=l(),fge=a("p"),EIo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),CIo=l(),Pa=a("p"),wIo=o("The model class to instantiate is selected based on the "),mge=a("code"),AIo=o("model_type"),yIo=o(` property of the config object (either
passed as an argument or loaded from `),gge=a("code"),LIo=o("pretrained_model_name_or_path"),xIo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hge=a("code"),$Io=o("pretrained_model_name_or_path"),kIo=o(":"),SIo=l(),K=a("ul"),z2=a("li"),pge=a("strong"),RIo=o("albert"),PIo=o(" \u2014 "),vO=a("a"),BIo=o("AlbertForMultipleChoice"),IIo=o(" (ALBERT model)"),NIo=l(),W2=a("li"),_ge=a("strong"),qIo=o("bert"),jIo=o(" \u2014 "),FO=a("a"),DIo=o("BertForMultipleChoice"),GIo=o(" (BERT model)"),OIo=l(),Q2=a("li"),uge=a("strong"),VIo=o("big_bird"),XIo=o(" \u2014 "),TO=a("a"),zIo=o("BigBirdForMultipleChoice"),WIo=o(" (BigBird model)"),QIo=l(),H2=a("li"),bge=a("strong"),HIo=o("camembert"),UIo=o(" \u2014 "),MO=a("a"),JIo=o("CamembertForMultipleChoice"),YIo=o(" (CamemBERT model)"),KIo=l(),U2=a("li"),vge=a("strong"),ZIo=o("canine"),eNo=o(" \u2014 "),EO=a("a"),oNo=o("CanineForMultipleChoice"),rNo=o(" (CANINE model)"),tNo=l(),J2=a("li"),Fge=a("strong"),aNo=o("convbert"),nNo=o(" \u2014 "),CO=a("a"),sNo=o("ConvBertForMultipleChoice"),lNo=o(" (ConvBERT model)"),iNo=l(),Y2=a("li"),Tge=a("strong"),dNo=o("data2vec-text"),cNo=o(" \u2014 "),wO=a("a"),fNo=o("Data2VecTextForMultipleChoice"),mNo=o(" (Data2VecText model)"),gNo=l(),K2=a("li"),Mge=a("strong"),hNo=o("deberta-v2"),pNo=o(" \u2014 "),AO=a("a"),_No=o("DebertaV2ForMultipleChoice"),uNo=o(" (DeBERTa-v2 model)"),bNo=l(),Z2=a("li"),Ege=a("strong"),vNo=o("distilbert"),FNo=o(" \u2014 "),yO=a("a"),TNo=o("DistilBertForMultipleChoice"),MNo=o(" (DistilBERT model)"),ENo=l(),ev=a("li"),Cge=a("strong"),CNo=o("electra"),wNo=o(" \u2014 "),LO=a("a"),ANo=o("ElectraForMultipleChoice"),yNo=o(" (ELECTRA model)"),LNo=l(),ov=a("li"),wge=a("strong"),xNo=o("flaubert"),$No=o(" \u2014 "),xO=a("a"),kNo=o("FlaubertForMultipleChoice"),SNo=o(" (FlauBERT model)"),RNo=l(),rv=a("li"),Age=a("strong"),PNo=o("fnet"),BNo=o(" \u2014 "),$O=a("a"),INo=o("FNetForMultipleChoice"),NNo=o(" (FNet model)"),qNo=l(),tv=a("li"),yge=a("strong"),jNo=o("funnel"),DNo=o(" \u2014 "),kO=a("a"),GNo=o("FunnelForMultipleChoice"),ONo=o(" (Funnel Transformer model)"),VNo=l(),av=a("li"),Lge=a("strong"),XNo=o("ibert"),zNo=o(" \u2014 "),SO=a("a"),WNo=o("IBertForMultipleChoice"),QNo=o(" (I-BERT model)"),HNo=l(),nv=a("li"),xge=a("strong"),UNo=o("longformer"),JNo=o(" \u2014 "),RO=a("a"),YNo=o("LongformerForMultipleChoice"),KNo=o(" (Longformer model)"),ZNo=l(),sv=a("li"),$ge=a("strong"),eqo=o("megatron-bert"),oqo=o(" \u2014 "),PO=a("a"),rqo=o("MegatronBertForMultipleChoice"),tqo=o(" (Megatron-BERT model)"),aqo=l(),lv=a("li"),kge=a("strong"),nqo=o("mobilebert"),sqo=o(" \u2014 "),BO=a("a"),lqo=o("MobileBertForMultipleChoice"),iqo=o(" (MobileBERT model)"),dqo=l(),iv=a("li"),Sge=a("strong"),cqo=o("mpnet"),fqo=o(" \u2014 "),IO=a("a"),mqo=o("MPNetForMultipleChoice"),gqo=o(" (MPNet model)"),hqo=l(),dv=a("li"),Rge=a("strong"),pqo=o("nystromformer"),_qo=o(" \u2014 "),NO=a("a"),uqo=o("NystromformerForMultipleChoice"),bqo=o(" (Nystr\xF6mformer model)"),vqo=l(),cv=a("li"),Pge=a("strong"),Fqo=o("qdqbert"),Tqo=o(" \u2014 "),qO=a("a"),Mqo=o("QDQBertForMultipleChoice"),Eqo=o(" (QDQBert model)"),Cqo=l(),fv=a("li"),Bge=a("strong"),wqo=o("rembert"),Aqo=o(" \u2014 "),jO=a("a"),yqo=o("RemBertForMultipleChoice"),Lqo=o(" (RemBERT model)"),xqo=l(),mv=a("li"),Ige=a("strong"),$qo=o("roberta"),kqo=o(" \u2014 "),DO=a("a"),Sqo=o("RobertaForMultipleChoice"),Rqo=o(" (RoBERTa model)"),Pqo=l(),gv=a("li"),Nge=a("strong"),Bqo=o("roformer"),Iqo=o(" \u2014 "),GO=a("a"),Nqo=o("RoFormerForMultipleChoice"),qqo=o(" (RoFormer model)"),jqo=l(),hv=a("li"),qge=a("strong"),Dqo=o("squeezebert"),Gqo=o(" \u2014 "),OO=a("a"),Oqo=o("SqueezeBertForMultipleChoice"),Vqo=o(" (SqueezeBERT model)"),Xqo=l(),pv=a("li"),jge=a("strong"),zqo=o("xlm"),Wqo=o(" \u2014 "),VO=a("a"),Qqo=o("XLMForMultipleChoice"),Hqo=o(" (XLM model)"),Uqo=l(),_v=a("li"),Dge=a("strong"),Jqo=o("xlm-roberta"),Yqo=o(" \u2014 "),XO=a("a"),Kqo=o("XLMRobertaForMultipleChoice"),Zqo=o(" (XLM-RoBERTa model)"),ejo=l(),uv=a("li"),Gge=a("strong"),ojo=o("xlm-roberta-xl"),rjo=o(" \u2014 "),zO=a("a"),tjo=o("XLMRobertaXLForMultipleChoice"),ajo=o(" (XLM-RoBERTa-XL model)"),njo=l(),bv=a("li"),Oge=a("strong"),sjo=o("xlnet"),ljo=o(" \u2014 "),WO=a("a"),ijo=o("XLNetForMultipleChoice"),djo=o(" (XLNet model)"),cjo=l(),vv=a("li"),Vge=a("strong"),fjo=o("yoso"),mjo=o(" \u2014 "),QO=a("a"),gjo=o("YosoForMultipleChoice"),hjo=o(" (YOSO model)"),pjo=l(),Fv=a("p"),_jo=o("The model is set in evaluation mode by default using "),Xge=a("code"),ujo=o("model.eval()"),bjo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zge=a("code"),vjo=o("model.train()"),Fjo=l(),F(Tv.$$.fragment),ije=l(),Qi=a("h2"),Mv=a("a"),Wge=a("span"),F(V6.$$.fragment),Tjo=l(),Qge=a("span"),Mjo=o("AutoModelForNextSentencePrediction"),dje=l(),Bo=a("div"),F(X6.$$.fragment),Ejo=l(),Hi=a("p"),Cjo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),HO=a("a"),wjo=o("from_pretrained()"),Ajo=o(" class method or the "),UO=a("a"),yjo=o("from_config()"),Ljo=o(` class
method.`),xjo=l(),z6=a("p"),$jo=o("This class cannot be instantiated directly using "),Hge=a("code"),kjo=o("__init__()"),Sjo=o(" (throws an error)."),Rjo=l(),ct=a("div"),F(W6.$$.fragment),Pjo=l(),Uge=a("p"),Bjo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Ijo=l(),Ui=a("p"),Njo=o(`Note:
Loading a model from its configuration file does `),Jge=a("strong"),qjo=o("not"),jjo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JO=a("a"),Djo=o("from_pretrained()"),Gjo=o(" to load the model weights."),Ojo=l(),F(Ev.$$.fragment),Vjo=l(),to=a("div"),F(Q6.$$.fragment),Xjo=l(),Yge=a("p"),zjo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Wjo=l(),Ba=a("p"),Qjo=o("The model class to instantiate is selected based on the "),Kge=a("code"),Hjo=o("model_type"),Ujo=o(` property of the config object (either
passed as an argument or loaded from `),Zge=a("code"),Jjo=o("pretrained_model_name_or_path"),Yjo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ehe=a("code"),Kjo=o("pretrained_model_name_or_path"),Zjo=o(":"),eDo=l(),Yr=a("ul"),Cv=a("li"),ohe=a("strong"),oDo=o("bert"),rDo=o(" \u2014 "),YO=a("a"),tDo=o("BertForNextSentencePrediction"),aDo=o(" (BERT model)"),nDo=l(),wv=a("li"),rhe=a("strong"),sDo=o("fnet"),lDo=o(" \u2014 "),KO=a("a"),iDo=o("FNetForNextSentencePrediction"),dDo=o(" (FNet model)"),cDo=l(),Av=a("li"),the=a("strong"),fDo=o("megatron-bert"),mDo=o(" \u2014 "),ZO=a("a"),gDo=o("MegatronBertForNextSentencePrediction"),hDo=o(" (Megatron-BERT model)"),pDo=l(),yv=a("li"),ahe=a("strong"),_Do=o("mobilebert"),uDo=o(" \u2014 "),eV=a("a"),bDo=o("MobileBertForNextSentencePrediction"),vDo=o(" (MobileBERT model)"),FDo=l(),Lv=a("li"),nhe=a("strong"),TDo=o("qdqbert"),MDo=o(" \u2014 "),oV=a("a"),EDo=o("QDQBertForNextSentencePrediction"),CDo=o(" (QDQBert model)"),wDo=l(),xv=a("p"),ADo=o("The model is set in evaluation mode by default using "),she=a("code"),yDo=o("model.eval()"),LDo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lhe=a("code"),xDo=o("model.train()"),$Do=l(),F($v.$$.fragment),cje=l(),Ji=a("h2"),kv=a("a"),ihe=a("span"),F(H6.$$.fragment),kDo=l(),dhe=a("span"),SDo=o("AutoModelForTokenClassification"),fje=l(),Io=a("div"),F(U6.$$.fragment),RDo=l(),Yi=a("p"),PDo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),rV=a("a"),BDo=o("from_pretrained()"),IDo=o(" class method or the "),tV=a("a"),NDo=o("from_config()"),qDo=o(` class
method.`),jDo=l(),J6=a("p"),DDo=o("This class cannot be instantiated directly using "),che=a("code"),GDo=o("__init__()"),ODo=o(" (throws an error)."),VDo=l(),ft=a("div"),F(Y6.$$.fragment),XDo=l(),fhe=a("p"),zDo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),WDo=l(),Ki=a("p"),QDo=o(`Note:
Loading a model from its configuration file does `),mhe=a("strong"),HDo=o("not"),UDo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aV=a("a"),JDo=o("from_pretrained()"),YDo=o(" to load the model weights."),KDo=l(),F(Sv.$$.fragment),ZDo=l(),ao=a("div"),F(K6.$$.fragment),eGo=l(),ghe=a("p"),oGo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),rGo=l(),Ia=a("p"),tGo=o("The model class to instantiate is selected based on the "),hhe=a("code"),aGo=o("model_type"),nGo=o(` property of the config object (either
passed as an argument or loaded from `),phe=a("code"),sGo=o("pretrained_model_name_or_path"),lGo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_he=a("code"),iGo=o("pretrained_model_name_or_path"),dGo=o(":"),cGo=l(),U=a("ul"),Rv=a("li"),uhe=a("strong"),fGo=o("albert"),mGo=o(" \u2014 "),nV=a("a"),gGo=o("AlbertForTokenClassification"),hGo=o(" (ALBERT model)"),pGo=l(),Pv=a("li"),bhe=a("strong"),_Go=o("bert"),uGo=o(" \u2014 "),sV=a("a"),bGo=o("BertForTokenClassification"),vGo=o(" (BERT model)"),FGo=l(),Bv=a("li"),vhe=a("strong"),TGo=o("big_bird"),MGo=o(" \u2014 "),lV=a("a"),EGo=o("BigBirdForTokenClassification"),CGo=o(" (BigBird model)"),wGo=l(),Iv=a("li"),Fhe=a("strong"),AGo=o("camembert"),yGo=o(" \u2014 "),iV=a("a"),LGo=o("CamembertForTokenClassification"),xGo=o(" (CamemBERT model)"),$Go=l(),Nv=a("li"),The=a("strong"),kGo=o("canine"),SGo=o(" \u2014 "),dV=a("a"),RGo=o("CanineForTokenClassification"),PGo=o(" (CANINE model)"),BGo=l(),qv=a("li"),Mhe=a("strong"),IGo=o("convbert"),NGo=o(" \u2014 "),cV=a("a"),qGo=o("ConvBertForTokenClassification"),jGo=o(" (ConvBERT model)"),DGo=l(),jv=a("li"),Ehe=a("strong"),GGo=o("data2vec-text"),OGo=o(" \u2014 "),fV=a("a"),VGo=o("Data2VecTextForTokenClassification"),XGo=o(" (Data2VecText model)"),zGo=l(),Dv=a("li"),Che=a("strong"),WGo=o("deberta"),QGo=o(" \u2014 "),mV=a("a"),HGo=o("DebertaForTokenClassification"),UGo=o(" (DeBERTa model)"),JGo=l(),Gv=a("li"),whe=a("strong"),YGo=o("deberta-v2"),KGo=o(" \u2014 "),gV=a("a"),ZGo=o("DebertaV2ForTokenClassification"),eOo=o(" (DeBERTa-v2 model)"),oOo=l(),Ov=a("li"),Ahe=a("strong"),rOo=o("distilbert"),tOo=o(" \u2014 "),hV=a("a"),aOo=o("DistilBertForTokenClassification"),nOo=o(" (DistilBERT model)"),sOo=l(),Vv=a("li"),yhe=a("strong"),lOo=o("electra"),iOo=o(" \u2014 "),pV=a("a"),dOo=o("ElectraForTokenClassification"),cOo=o(" (ELECTRA model)"),fOo=l(),Xv=a("li"),Lhe=a("strong"),mOo=o("flaubert"),gOo=o(" \u2014 "),_V=a("a"),hOo=o("FlaubertForTokenClassification"),pOo=o(" (FlauBERT model)"),_Oo=l(),zv=a("li"),xhe=a("strong"),uOo=o("fnet"),bOo=o(" \u2014 "),uV=a("a"),vOo=o("FNetForTokenClassification"),FOo=o(" (FNet model)"),TOo=l(),Wv=a("li"),$he=a("strong"),MOo=o("funnel"),EOo=o(" \u2014 "),bV=a("a"),COo=o("FunnelForTokenClassification"),wOo=o(" (Funnel Transformer model)"),AOo=l(),Qv=a("li"),khe=a("strong"),yOo=o("gpt2"),LOo=o(" \u2014 "),vV=a("a"),xOo=o("GPT2ForTokenClassification"),$Oo=o(" (OpenAI GPT-2 model)"),kOo=l(),Hv=a("li"),She=a("strong"),SOo=o("ibert"),ROo=o(" \u2014 "),FV=a("a"),POo=o("IBertForTokenClassification"),BOo=o(" (I-BERT model)"),IOo=l(),Uv=a("li"),Rhe=a("strong"),NOo=o("layoutlm"),qOo=o(" \u2014 "),TV=a("a"),jOo=o("LayoutLMForTokenClassification"),DOo=o(" (LayoutLM model)"),GOo=l(),Jv=a("li"),Phe=a("strong"),OOo=o("layoutlmv2"),VOo=o(" \u2014 "),MV=a("a"),XOo=o("LayoutLMv2ForTokenClassification"),zOo=o(" (LayoutLMv2 model)"),WOo=l(),Yv=a("li"),Bhe=a("strong"),QOo=o("layoutlmv3"),HOo=o(" \u2014 "),EV=a("a"),UOo=o("LayoutLMv3ForTokenClassification"),JOo=o(" (LayoutLMv3 model)"),YOo=l(),Kv=a("li"),Ihe=a("strong"),KOo=o("longformer"),ZOo=o(" \u2014 "),CV=a("a"),eVo=o("LongformerForTokenClassification"),oVo=o(" (Longformer model)"),rVo=l(),Zv=a("li"),Nhe=a("strong"),tVo=o("megatron-bert"),aVo=o(" \u2014 "),wV=a("a"),nVo=o("MegatronBertForTokenClassification"),sVo=o(" (Megatron-BERT model)"),lVo=l(),e5=a("li"),qhe=a("strong"),iVo=o("mobilebert"),dVo=o(" \u2014 "),AV=a("a"),cVo=o("MobileBertForTokenClassification"),fVo=o(" (MobileBERT model)"),mVo=l(),o5=a("li"),jhe=a("strong"),gVo=o("mpnet"),hVo=o(" \u2014 "),yV=a("a"),pVo=o("MPNetForTokenClassification"),_Vo=o(" (MPNet model)"),uVo=l(),r5=a("li"),Dhe=a("strong"),bVo=o("nystromformer"),vVo=o(" \u2014 "),LV=a("a"),FVo=o("NystromformerForTokenClassification"),TVo=o(" (Nystr\xF6mformer model)"),MVo=l(),t5=a("li"),Ghe=a("strong"),EVo=o("qdqbert"),CVo=o(" \u2014 "),xV=a("a"),wVo=o("QDQBertForTokenClassification"),AVo=o(" (QDQBert model)"),yVo=l(),a5=a("li"),Ohe=a("strong"),LVo=o("rembert"),xVo=o(" \u2014 "),$V=a("a"),$Vo=o("RemBertForTokenClassification"),kVo=o(" (RemBERT model)"),SVo=l(),n5=a("li"),Vhe=a("strong"),RVo=o("roberta"),PVo=o(" \u2014 "),kV=a("a"),BVo=o("RobertaForTokenClassification"),IVo=o(" (RoBERTa model)"),NVo=l(),s5=a("li"),Xhe=a("strong"),qVo=o("roformer"),jVo=o(" \u2014 "),SV=a("a"),DVo=o("RoFormerForTokenClassification"),GVo=o(" (RoFormer model)"),OVo=l(),l5=a("li"),zhe=a("strong"),VVo=o("squeezebert"),XVo=o(" \u2014 "),RV=a("a"),zVo=o("SqueezeBertForTokenClassification"),WVo=o(" (SqueezeBERT model)"),QVo=l(),i5=a("li"),Whe=a("strong"),HVo=o("xlm"),UVo=o(" \u2014 "),PV=a("a"),JVo=o("XLMForTokenClassification"),YVo=o(" (XLM model)"),KVo=l(),d5=a("li"),Qhe=a("strong"),ZVo=o("xlm-roberta"),eXo=o(" \u2014 "),BV=a("a"),oXo=o("XLMRobertaForTokenClassification"),rXo=o(" (XLM-RoBERTa model)"),tXo=l(),c5=a("li"),Hhe=a("strong"),aXo=o("xlm-roberta-xl"),nXo=o(" \u2014 "),IV=a("a"),sXo=o("XLMRobertaXLForTokenClassification"),lXo=o(" (XLM-RoBERTa-XL model)"),iXo=l(),f5=a("li"),Uhe=a("strong"),dXo=o("xlnet"),cXo=o(" \u2014 "),NV=a("a"),fXo=o("XLNetForTokenClassification"),mXo=o(" (XLNet model)"),gXo=l(),m5=a("li"),Jhe=a("strong"),hXo=o("yoso"),pXo=o(" \u2014 "),qV=a("a"),_Xo=o("YosoForTokenClassification"),uXo=o(" (YOSO model)"),bXo=l(),g5=a("p"),vXo=o("The model is set in evaluation mode by default using "),Yhe=a("code"),FXo=o("model.eval()"),TXo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Khe=a("code"),MXo=o("model.train()"),EXo=l(),F(h5.$$.fragment),mje=l(),Zi=a("h2"),p5=a("a"),Zhe=a("span"),F(Z6.$$.fragment),CXo=l(),epe=a("span"),wXo=o("AutoModelForQuestionAnswering"),gje=l(),No=a("div"),F(ey.$$.fragment),AXo=l(),ed=a("p"),yXo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),jV=a("a"),LXo=o("from_pretrained()"),xXo=o(" class method or the "),DV=a("a"),$Xo=o("from_config()"),kXo=o(` class
method.`),SXo=l(),oy=a("p"),RXo=o("This class cannot be instantiated directly using "),ope=a("code"),PXo=o("__init__()"),BXo=o(" (throws an error)."),IXo=l(),mt=a("div"),F(ry.$$.fragment),NXo=l(),rpe=a("p"),qXo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),jXo=l(),od=a("p"),DXo=o(`Note:
Loading a model from its configuration file does `),tpe=a("strong"),GXo=o("not"),OXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GV=a("a"),VXo=o("from_pretrained()"),XXo=o(" to load the model weights."),zXo=l(),F(_5.$$.fragment),WXo=l(),no=a("div"),F(ty.$$.fragment),QXo=l(),ape=a("p"),HXo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),UXo=l(),Na=a("p"),JXo=o("The model class to instantiate is selected based on the "),npe=a("code"),YXo=o("model_type"),KXo=o(` property of the config object (either
passed as an argument or loaded from `),spe=a("code"),ZXo=o("pretrained_model_name_or_path"),ezo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lpe=a("code"),ozo=o("pretrained_model_name_or_path"),rzo=o(":"),tzo=l(),V=a("ul"),u5=a("li"),ipe=a("strong"),azo=o("albert"),nzo=o(" \u2014 "),OV=a("a"),szo=o("AlbertForQuestionAnswering"),lzo=o(" (ALBERT model)"),izo=l(),b5=a("li"),dpe=a("strong"),dzo=o("bart"),czo=o(" \u2014 "),VV=a("a"),fzo=o("BartForQuestionAnswering"),mzo=o(" (BART model)"),gzo=l(),v5=a("li"),cpe=a("strong"),hzo=o("bert"),pzo=o(" \u2014 "),XV=a("a"),_zo=o("BertForQuestionAnswering"),uzo=o(" (BERT model)"),bzo=l(),F5=a("li"),fpe=a("strong"),vzo=o("big_bird"),Fzo=o(" \u2014 "),zV=a("a"),Tzo=o("BigBirdForQuestionAnswering"),Mzo=o(" (BigBird model)"),Ezo=l(),T5=a("li"),mpe=a("strong"),Czo=o("bigbird_pegasus"),wzo=o(" \u2014 "),WV=a("a"),Azo=o("BigBirdPegasusForQuestionAnswering"),yzo=o(" (BigBird-Pegasus model)"),Lzo=l(),M5=a("li"),gpe=a("strong"),xzo=o("camembert"),$zo=o(" \u2014 "),QV=a("a"),kzo=o("CamembertForQuestionAnswering"),Szo=o(" (CamemBERT model)"),Rzo=l(),E5=a("li"),hpe=a("strong"),Pzo=o("canine"),Bzo=o(" \u2014 "),HV=a("a"),Izo=o("CanineForQuestionAnswering"),Nzo=o(" (CANINE model)"),qzo=l(),C5=a("li"),ppe=a("strong"),jzo=o("convbert"),Dzo=o(" \u2014 "),UV=a("a"),Gzo=o("ConvBertForQuestionAnswering"),Ozo=o(" (ConvBERT model)"),Vzo=l(),w5=a("li"),_pe=a("strong"),Xzo=o("data2vec-text"),zzo=o(" \u2014 "),JV=a("a"),Wzo=o("Data2VecTextForQuestionAnswering"),Qzo=o(" (Data2VecText model)"),Hzo=l(),A5=a("li"),upe=a("strong"),Uzo=o("deberta"),Jzo=o(" \u2014 "),YV=a("a"),Yzo=o("DebertaForQuestionAnswering"),Kzo=o(" (DeBERTa model)"),Zzo=l(),y5=a("li"),bpe=a("strong"),eWo=o("deberta-v2"),oWo=o(" \u2014 "),KV=a("a"),rWo=o("DebertaV2ForQuestionAnswering"),tWo=o(" (DeBERTa-v2 model)"),aWo=l(),L5=a("li"),vpe=a("strong"),nWo=o("distilbert"),sWo=o(" \u2014 "),ZV=a("a"),lWo=o("DistilBertForQuestionAnswering"),iWo=o(" (DistilBERT model)"),dWo=l(),x5=a("li"),Fpe=a("strong"),cWo=o("electra"),fWo=o(" \u2014 "),eX=a("a"),mWo=o("ElectraForQuestionAnswering"),gWo=o(" (ELECTRA model)"),hWo=l(),$5=a("li"),Tpe=a("strong"),pWo=o("flaubert"),_Wo=o(" \u2014 "),oX=a("a"),uWo=o("FlaubertForQuestionAnsweringSimple"),bWo=o(" (FlauBERT model)"),vWo=l(),k5=a("li"),Mpe=a("strong"),FWo=o("fnet"),TWo=o(" \u2014 "),rX=a("a"),MWo=o("FNetForQuestionAnswering"),EWo=o(" (FNet model)"),CWo=l(),S5=a("li"),Epe=a("strong"),wWo=o("funnel"),AWo=o(" \u2014 "),tX=a("a"),yWo=o("FunnelForQuestionAnswering"),LWo=o(" (Funnel Transformer model)"),xWo=l(),R5=a("li"),Cpe=a("strong"),$Wo=o("gptj"),kWo=o(" \u2014 "),aX=a("a"),SWo=o("GPTJForQuestionAnswering"),RWo=o(" (GPT-J model)"),PWo=l(),P5=a("li"),wpe=a("strong"),BWo=o("ibert"),IWo=o(" \u2014 "),nX=a("a"),NWo=o("IBertForQuestionAnswering"),qWo=o(" (I-BERT model)"),jWo=l(),B5=a("li"),Ape=a("strong"),DWo=o("layoutlmv2"),GWo=o(" \u2014 "),sX=a("a"),OWo=o("LayoutLMv2ForQuestionAnswering"),VWo=o(" (LayoutLMv2 model)"),XWo=l(),I5=a("li"),ype=a("strong"),zWo=o("layoutlmv3"),WWo=o(" \u2014 "),lX=a("a"),QWo=o("LayoutLMv3ForQuestionAnswering"),HWo=o(" (LayoutLMv3 model)"),UWo=l(),N5=a("li"),Lpe=a("strong"),JWo=o("led"),YWo=o(" \u2014 "),iX=a("a"),KWo=o("LEDForQuestionAnswering"),ZWo=o(" (LED model)"),eQo=l(),q5=a("li"),xpe=a("strong"),oQo=o("longformer"),rQo=o(" \u2014 "),dX=a("a"),tQo=o("LongformerForQuestionAnswering"),aQo=o(" (Longformer model)"),nQo=l(),j5=a("li"),$pe=a("strong"),sQo=o("lxmert"),lQo=o(" \u2014 "),cX=a("a"),iQo=o("LxmertForQuestionAnswering"),dQo=o(" (LXMERT model)"),cQo=l(),D5=a("li"),kpe=a("strong"),fQo=o("mbart"),mQo=o(" \u2014 "),fX=a("a"),gQo=o("MBartForQuestionAnswering"),hQo=o(" (mBART model)"),pQo=l(),G5=a("li"),Spe=a("strong"),_Qo=o("megatron-bert"),uQo=o(" \u2014 "),mX=a("a"),bQo=o("MegatronBertForQuestionAnswering"),vQo=o(" (Megatron-BERT model)"),FQo=l(),O5=a("li"),Rpe=a("strong"),TQo=o("mobilebert"),MQo=o(" \u2014 "),gX=a("a"),EQo=o("MobileBertForQuestionAnswering"),CQo=o(" (MobileBERT model)"),wQo=l(),V5=a("li"),Ppe=a("strong"),AQo=o("mpnet"),yQo=o(" \u2014 "),hX=a("a"),LQo=o("MPNetForQuestionAnswering"),xQo=o(" (MPNet model)"),$Qo=l(),X5=a("li"),Bpe=a("strong"),kQo=o("nystromformer"),SQo=o(" \u2014 "),pX=a("a"),RQo=o("NystromformerForQuestionAnswering"),PQo=o(" (Nystr\xF6mformer model)"),BQo=l(),z5=a("li"),Ipe=a("strong"),IQo=o("qdqbert"),NQo=o(" \u2014 "),_X=a("a"),qQo=o("QDQBertForQuestionAnswering"),jQo=o(" (QDQBert model)"),DQo=l(),W5=a("li"),Npe=a("strong"),GQo=o("reformer"),OQo=o(" \u2014 "),uX=a("a"),VQo=o("ReformerForQuestionAnswering"),XQo=o(" (Reformer model)"),zQo=l(),Q5=a("li"),qpe=a("strong"),WQo=o("rembert"),QQo=o(" \u2014 "),bX=a("a"),HQo=o("RemBertForQuestionAnswering"),UQo=o(" (RemBERT model)"),JQo=l(),H5=a("li"),jpe=a("strong"),YQo=o("roberta"),KQo=o(" \u2014 "),vX=a("a"),ZQo=o("RobertaForQuestionAnswering"),eHo=o(" (RoBERTa model)"),oHo=l(),U5=a("li"),Dpe=a("strong"),rHo=o("roformer"),tHo=o(" \u2014 "),FX=a("a"),aHo=o("RoFormerForQuestionAnswering"),nHo=o(" (RoFormer model)"),sHo=l(),J5=a("li"),Gpe=a("strong"),lHo=o("splinter"),iHo=o(" \u2014 "),TX=a("a"),dHo=o("SplinterForQuestionAnswering"),cHo=o(" (Splinter model)"),fHo=l(),Y5=a("li"),Ope=a("strong"),mHo=o("squeezebert"),gHo=o(" \u2014 "),MX=a("a"),hHo=o("SqueezeBertForQuestionAnswering"),pHo=o(" (SqueezeBERT model)"),_Ho=l(),K5=a("li"),Vpe=a("strong"),uHo=o("xlm"),bHo=o(" \u2014 "),EX=a("a"),vHo=o("XLMForQuestionAnsweringSimple"),FHo=o(" (XLM model)"),THo=l(),Z5=a("li"),Xpe=a("strong"),MHo=o("xlm-roberta"),EHo=o(" \u2014 "),CX=a("a"),CHo=o("XLMRobertaForQuestionAnswering"),wHo=o(" (XLM-RoBERTa model)"),AHo=l(),e3=a("li"),zpe=a("strong"),yHo=o("xlm-roberta-xl"),LHo=o(" \u2014 "),wX=a("a"),xHo=o("XLMRobertaXLForQuestionAnswering"),$Ho=o(" (XLM-RoBERTa-XL model)"),kHo=l(),o3=a("li"),Wpe=a("strong"),SHo=o("xlnet"),RHo=o(" \u2014 "),AX=a("a"),PHo=o("XLNetForQuestionAnsweringSimple"),BHo=o(" (XLNet model)"),IHo=l(),r3=a("li"),Qpe=a("strong"),NHo=o("yoso"),qHo=o(" \u2014 "),yX=a("a"),jHo=o("YosoForQuestionAnswering"),DHo=o(" (YOSO model)"),GHo=l(),t3=a("p"),OHo=o("The model is set in evaluation mode by default using "),Hpe=a("code"),VHo=o("model.eval()"),XHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Upe=a("code"),zHo=o("model.train()"),WHo=l(),F(a3.$$.fragment),hje=l(),rd=a("h2"),n3=a("a"),Jpe=a("span"),F(ay.$$.fragment),QHo=l(),Ype=a("span"),HHo=o("AutoModelForTableQuestionAnswering"),pje=l(),qo=a("div"),F(ny.$$.fragment),UHo=l(),td=a("p"),JHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),LX=a("a"),YHo=o("from_pretrained()"),KHo=o(" class method or the "),xX=a("a"),ZHo=o("from_config()"),eUo=o(` class
method.`),oUo=l(),sy=a("p"),rUo=o("This class cannot be instantiated directly using "),Kpe=a("code"),tUo=o("__init__()"),aUo=o(" (throws an error)."),nUo=l(),gt=a("div"),F(ly.$$.fragment),sUo=l(),Zpe=a("p"),lUo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),iUo=l(),ad=a("p"),dUo=o(`Note:
Loading a model from its configuration file does `),e_e=a("strong"),cUo=o("not"),fUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$X=a("a"),mUo=o("from_pretrained()"),gUo=o(" to load the model weights."),hUo=l(),F(s3.$$.fragment),pUo=l(),so=a("div"),F(iy.$$.fragment),_Uo=l(),o_e=a("p"),uUo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),bUo=l(),qa=a("p"),vUo=o("The model class to instantiate is selected based on the "),r_e=a("code"),FUo=o("model_type"),TUo=o(` property of the config object (either
passed as an argument or loaded from `),t_e=a("code"),MUo=o("pretrained_model_name_or_path"),EUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a_e=a("code"),CUo=o("pretrained_model_name_or_path"),wUo=o(":"),AUo=l(),n_e=a("ul"),l3=a("li"),s_e=a("strong"),yUo=o("tapas"),LUo=o(" \u2014 "),kX=a("a"),xUo=o("TapasForQuestionAnswering"),$Uo=o(" (TAPAS model)"),kUo=l(),i3=a("p"),SUo=o("The model is set in evaluation mode by default using "),l_e=a("code"),RUo=o("model.eval()"),PUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),i_e=a("code"),BUo=o("model.train()"),IUo=l(),F(d3.$$.fragment),_je=l(),nd=a("h2"),c3=a("a"),d_e=a("span"),F(dy.$$.fragment),NUo=l(),c_e=a("span"),qUo=o("AutoModelForImageClassification"),uje=l(),jo=a("div"),F(cy.$$.fragment),jUo=l(),sd=a("p"),DUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),SX=a("a"),GUo=o("from_pretrained()"),OUo=o(" class method or the "),RX=a("a"),VUo=o("from_config()"),XUo=o(` class
method.`),zUo=l(),fy=a("p"),WUo=o("This class cannot be instantiated directly using "),f_e=a("code"),QUo=o("__init__()"),HUo=o(" (throws an error)."),UUo=l(),ht=a("div"),F(my.$$.fragment),JUo=l(),m_e=a("p"),YUo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),KUo=l(),ld=a("p"),ZUo=o(`Note:
Loading a model from its configuration file does `),g_e=a("strong"),eJo=o("not"),oJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PX=a("a"),rJo=o("from_pretrained()"),tJo=o(" to load the model weights."),aJo=l(),F(f3.$$.fragment),nJo=l(),lo=a("div"),F(gy.$$.fragment),sJo=l(),h_e=a("p"),lJo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),iJo=l(),ja=a("p"),dJo=o("The model class to instantiate is selected based on the "),p_e=a("code"),cJo=o("model_type"),fJo=o(` property of the config object (either
passed as an argument or loaded from `),__e=a("code"),mJo=o("pretrained_model_name_or_path"),gJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u_e=a("code"),hJo=o("pretrained_model_name_or_path"),pJo=o(":"),_Jo=l(),ve=a("ul"),m3=a("li"),b_e=a("strong"),uJo=o("beit"),bJo=o(" \u2014 "),BX=a("a"),vJo=o("BeitForImageClassification"),FJo=o(" (BEiT model)"),TJo=l(),g3=a("li"),v_e=a("strong"),MJo=o("convnext"),EJo=o(" \u2014 "),IX=a("a"),CJo=o("ConvNextForImageClassification"),wJo=o(" (ConvNeXT model)"),AJo=l(),h3=a("li"),F_e=a("strong"),yJo=o("cvt"),LJo=o(" \u2014 "),NX=a("a"),xJo=o("CvtForImageClassification"),$Jo=o(" (CvT model)"),kJo=l(),p3=a("li"),T_e=a("strong"),SJo=o("data2vec-vision"),RJo=o(" \u2014 "),qX=a("a"),PJo=o("Data2VecVisionForImageClassification"),BJo=o(" (Data2VecVision model)"),IJo=l(),Bs=a("li"),M_e=a("strong"),NJo=o("deit"),qJo=o(" \u2014 "),jX=a("a"),jJo=o("DeiTForImageClassification"),DJo=o(" or "),DX=a("a"),GJo=o("DeiTForImageClassificationWithTeacher"),OJo=o(" (DeiT model)"),VJo=l(),_3=a("li"),E_e=a("strong"),XJo=o("imagegpt"),zJo=o(" \u2014 "),GX=a("a"),WJo=o("ImageGPTForImageClassification"),QJo=o(" (ImageGPT model)"),HJo=l(),Is=a("li"),C_e=a("strong"),UJo=o("levit"),JJo=o(" \u2014 "),OX=a("a"),YJo=o("LevitForImageClassification"),KJo=o(" or "),VX=a("a"),ZJo=o("LevitForImageClassificationWithTeacher"),eYo=o(" (LeViT model)"),oYo=l(),pt=a("li"),w_e=a("strong"),rYo=o("perceiver"),tYo=o(" \u2014 "),XX=a("a"),aYo=o("PerceiverForImageClassificationLearned"),nYo=o(" or "),zX=a("a"),sYo=o("PerceiverForImageClassificationFourier"),lYo=o(" or "),WX=a("a"),iYo=o("PerceiverForImageClassificationConvProcessing"),dYo=o(" (Perceiver model)"),cYo=l(),u3=a("li"),A_e=a("strong"),fYo=o("poolformer"),mYo=o(" \u2014 "),QX=a("a"),gYo=o("PoolFormerForImageClassification"),hYo=o(" (PoolFormer model)"),pYo=l(),b3=a("li"),y_e=a("strong"),_Yo=o("regnet"),uYo=o(" \u2014 "),HX=a("a"),bYo=o("RegNetForImageClassification"),vYo=o(" (RegNet model)"),FYo=l(),v3=a("li"),L_e=a("strong"),TYo=o("resnet"),MYo=o(" \u2014 "),UX=a("a"),EYo=o("ResNetForImageClassification"),CYo=o(" (ResNet model)"),wYo=l(),F3=a("li"),x_e=a("strong"),AYo=o("segformer"),yYo=o(" \u2014 "),JX=a("a"),LYo=o("SegformerForImageClassification"),xYo=o(" (SegFormer model)"),$Yo=l(),T3=a("li"),$_e=a("strong"),kYo=o("swin"),SYo=o(" \u2014 "),YX=a("a"),RYo=o("SwinForImageClassification"),PYo=o(" (Swin Transformer model)"),BYo=l(),M3=a("li"),k_e=a("strong"),IYo=o("van"),NYo=o(" \u2014 "),KX=a("a"),qYo=o("VanForImageClassification"),jYo=o(" (VAN model)"),DYo=l(),E3=a("li"),S_e=a("strong"),GYo=o("vit"),OYo=o(" \u2014 "),ZX=a("a"),VYo=o("ViTForImageClassification"),XYo=o(" (ViT model)"),zYo=l(),C3=a("p"),WYo=o("The model is set in evaluation mode by default using "),R_e=a("code"),QYo=o("model.eval()"),HYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),P_e=a("code"),UYo=o("model.train()"),JYo=l(),F(w3.$$.fragment),bje=l(),id=a("h2"),A3=a("a"),B_e=a("span"),F(hy.$$.fragment),YYo=l(),I_e=a("span"),KYo=o("AutoModelForVision2Seq"),vje=l(),Do=a("div"),F(py.$$.fragment),ZYo=l(),dd=a("p"),eKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),ez=a("a"),oKo=o("from_pretrained()"),rKo=o(" class method or the "),oz=a("a"),tKo=o("from_config()"),aKo=o(` class
method.`),nKo=l(),_y=a("p"),sKo=o("This class cannot be instantiated directly using "),N_e=a("code"),lKo=o("__init__()"),iKo=o(" (throws an error)."),dKo=l(),_t=a("div"),F(uy.$$.fragment),cKo=l(),q_e=a("p"),fKo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),mKo=l(),cd=a("p"),gKo=o(`Note:
Loading a model from its configuration file does `),j_e=a("strong"),hKo=o("not"),pKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rz=a("a"),_Ko=o("from_pretrained()"),uKo=o(" to load the model weights."),bKo=l(),F(y3.$$.fragment),vKo=l(),io=a("div"),F(by.$$.fragment),FKo=l(),D_e=a("p"),TKo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),MKo=l(),Da=a("p"),EKo=o("The model class to instantiate is selected based on the "),G_e=a("code"),CKo=o("model_type"),wKo=o(` property of the config object (either
passed as an argument or loaded from `),O_e=a("code"),AKo=o("pretrained_model_name_or_path"),yKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V_e=a("code"),LKo=o("pretrained_model_name_or_path"),xKo=o(":"),$Ko=l(),X_e=a("ul"),L3=a("li"),z_e=a("strong"),kKo=o("vision-encoder-decoder"),SKo=o(" \u2014 "),tz=a("a"),RKo=o("VisionEncoderDecoderModel"),PKo=o(" (Vision Encoder decoder model)"),BKo=l(),x3=a("p"),IKo=o("The model is set in evaluation mode by default using "),W_e=a("code"),NKo=o("model.eval()"),qKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Q_e=a("code"),jKo=o("model.train()"),DKo=l(),F($3.$$.fragment),Fje=l(),fd=a("h2"),k3=a("a"),H_e=a("span"),F(vy.$$.fragment),GKo=l(),U_e=a("span"),OKo=o("AutoModelForAudioClassification"),Tje=l(),Go=a("div"),F(Fy.$$.fragment),VKo=l(),md=a("p"),XKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),az=a("a"),zKo=o("from_pretrained()"),WKo=o(" class method or the "),nz=a("a"),QKo=o("from_config()"),HKo=o(` class
method.`),UKo=l(),Ty=a("p"),JKo=o("This class cannot be instantiated directly using "),J_e=a("code"),YKo=o("__init__()"),KKo=o(" (throws an error)."),ZKo=l(),ut=a("div"),F(My.$$.fragment),eZo=l(),Y_e=a("p"),oZo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),rZo=l(),gd=a("p"),tZo=o(`Note:
Loading a model from its configuration file does `),K_e=a("strong"),aZo=o("not"),nZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sz=a("a"),sZo=o("from_pretrained()"),lZo=o(" to load the model weights."),iZo=l(),F(S3.$$.fragment),dZo=l(),co=a("div"),F(Ey.$$.fragment),cZo=l(),Z_e=a("p"),fZo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),mZo=l(),Ga=a("p"),gZo=o("The model class to instantiate is selected based on the "),eue=a("code"),hZo=o("model_type"),pZo=o(` property of the config object (either
passed as an argument or loaded from `),oue=a("code"),_Zo=o("pretrained_model_name_or_path"),uZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rue=a("code"),bZo=o("pretrained_model_name_or_path"),vZo=o(":"),FZo=l(),Se=a("ul"),R3=a("li"),tue=a("strong"),TZo=o("data2vec-audio"),MZo=o(" \u2014 "),lz=a("a"),EZo=o("Data2VecAudioForSequenceClassification"),CZo=o(" (Data2VecAudio model)"),wZo=l(),P3=a("li"),aue=a("strong"),AZo=o("hubert"),yZo=o(" \u2014 "),iz=a("a"),LZo=o("HubertForSequenceClassification"),xZo=o(" (Hubert model)"),$Zo=l(),B3=a("li"),nue=a("strong"),kZo=o("sew"),SZo=o(" \u2014 "),dz=a("a"),RZo=o("SEWForSequenceClassification"),PZo=o(" (SEW model)"),BZo=l(),I3=a("li"),sue=a("strong"),IZo=o("sew-d"),NZo=o(" \u2014 "),cz=a("a"),qZo=o("SEWDForSequenceClassification"),jZo=o(" (SEW-D model)"),DZo=l(),N3=a("li"),lue=a("strong"),GZo=o("unispeech"),OZo=o(" \u2014 "),fz=a("a"),VZo=o("UniSpeechForSequenceClassification"),XZo=o(" (UniSpeech model)"),zZo=l(),q3=a("li"),iue=a("strong"),WZo=o("unispeech-sat"),QZo=o(" \u2014 "),mz=a("a"),HZo=o("UniSpeechSatForSequenceClassification"),UZo=o(" (UniSpeechSat model)"),JZo=l(),j3=a("li"),due=a("strong"),YZo=o("wav2vec2"),KZo=o(" \u2014 "),gz=a("a"),ZZo=o("Wav2Vec2ForSequenceClassification"),eer=o(" (Wav2Vec2 model)"),oer=l(),D3=a("li"),cue=a("strong"),rer=o("wav2vec2-conformer"),ter=o(" \u2014 "),hz=a("a"),aer=o("Wav2Vec2ConformerForSequenceClassification"),ner=o(" (Wav2Vec2-Conformer model)"),ser=l(),G3=a("li"),fue=a("strong"),ler=o("wavlm"),ier=o(" \u2014 "),pz=a("a"),der=o("WavLMForSequenceClassification"),cer=o(" (WavLM model)"),fer=l(),O3=a("p"),mer=o("The model is set in evaluation mode by default using "),mue=a("code"),ger=o("model.eval()"),her=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gue=a("code"),per=o("model.train()"),_er=l(),F(V3.$$.fragment),Mje=l(),hd=a("h2"),X3=a("a"),hue=a("span"),F(Cy.$$.fragment),uer=l(),pue=a("span"),ber=o("AutoModelForAudioFrameClassification"),Eje=l(),Oo=a("div"),F(wy.$$.fragment),ver=l(),pd=a("p"),Fer=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),_z=a("a"),Ter=o("from_pretrained()"),Mer=o(" class method or the "),uz=a("a"),Eer=o("from_config()"),Cer=o(` class
method.`),wer=l(),Ay=a("p"),Aer=o("This class cannot be instantiated directly using "),_ue=a("code"),yer=o("__init__()"),Ler=o(" (throws an error)."),xer=l(),bt=a("div"),F(yy.$$.fragment),$er=l(),uue=a("p"),ker=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),Ser=l(),_d=a("p"),Rer=o(`Note:
Loading a model from its configuration file does `),bue=a("strong"),Per=o("not"),Ber=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bz=a("a"),Ier=o("from_pretrained()"),Ner=o(" to load the model weights."),qer=l(),F(z3.$$.fragment),jer=l(),fo=a("div"),F(Ly.$$.fragment),Der=l(),vue=a("p"),Ger=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Oer=l(),Oa=a("p"),Ver=o("The model class to instantiate is selected based on the "),Fue=a("code"),Xer=o("model_type"),zer=o(` property of the config object (either
passed as an argument or loaded from `),Tue=a("code"),Wer=o("pretrained_model_name_or_path"),Qer=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mue=a("code"),Her=o("pretrained_model_name_or_path"),Uer=o(":"),Jer=l(),Kr=a("ul"),W3=a("li"),Eue=a("strong"),Yer=o("data2vec-audio"),Ker=o(" \u2014 "),vz=a("a"),Zer=o("Data2VecAudioForAudioFrameClassification"),eor=o(" (Data2VecAudio model)"),oor=l(),Q3=a("li"),Cue=a("strong"),ror=o("unispeech-sat"),tor=o(" \u2014 "),Fz=a("a"),aor=o("UniSpeechSatForAudioFrameClassification"),nor=o(" (UniSpeechSat model)"),sor=l(),H3=a("li"),wue=a("strong"),lor=o("wav2vec2"),ior=o(" \u2014 "),Tz=a("a"),dor=o("Wav2Vec2ForAudioFrameClassification"),cor=o(" (Wav2Vec2 model)"),mor=l(),U3=a("li"),Aue=a("strong"),gor=o("wav2vec2-conformer"),hor=o(" \u2014 "),Mz=a("a"),por=o("Wav2Vec2ConformerForAudioFrameClassification"),_or=o(" (Wav2Vec2-Conformer model)"),uor=l(),J3=a("li"),yue=a("strong"),bor=o("wavlm"),vor=o(" \u2014 "),Ez=a("a"),For=o("WavLMForAudioFrameClassification"),Tor=o(" (WavLM model)"),Mor=l(),Y3=a("p"),Eor=o("The model is set in evaluation mode by default using "),Lue=a("code"),Cor=o("model.eval()"),wor=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xue=a("code"),Aor=o("model.train()"),yor=l(),F(K3.$$.fragment),Cje=l(),ud=a("h2"),Z3=a("a"),$ue=a("span"),F(xy.$$.fragment),Lor=l(),kue=a("span"),xor=o("AutoModelForCTC"),wje=l(),Vo=a("div"),F($y.$$.fragment),$or=l(),bd=a("p"),kor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),Cz=a("a"),Sor=o("from_pretrained()"),Ror=o(" class method or the "),wz=a("a"),Por=o("from_config()"),Bor=o(` class
method.`),Ior=l(),ky=a("p"),Nor=o("This class cannot be instantiated directly using "),Sue=a("code"),qor=o("__init__()"),jor=o(" (throws an error)."),Dor=l(),vt=a("div"),F(Sy.$$.fragment),Gor=l(),Rue=a("p"),Oor=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Vor=l(),vd=a("p"),Xor=o(`Note:
Loading a model from its configuration file does `),Pue=a("strong"),zor=o("not"),Wor=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Az=a("a"),Qor=o("from_pretrained()"),Hor=o(" to load the model weights."),Uor=l(),F(eF.$$.fragment),Jor=l(),mo=a("div"),F(Ry.$$.fragment),Yor=l(),Bue=a("p"),Kor=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Zor=l(),Va=a("p"),err=o("The model class to instantiate is selected based on the "),Iue=a("code"),orr=o("model_type"),rrr=o(` property of the config object (either
passed as an argument or loaded from `),Nue=a("code"),trr=o("pretrained_model_name_or_path"),arr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),que=a("code"),nrr=o("pretrained_model_name_or_path"),srr=o(":"),lrr=l(),Re=a("ul"),oF=a("li"),jue=a("strong"),irr=o("data2vec-audio"),drr=o(" \u2014 "),yz=a("a"),crr=o("Data2VecAudioForCTC"),frr=o(" (Data2VecAudio model)"),mrr=l(),rF=a("li"),Due=a("strong"),grr=o("hubert"),hrr=o(" \u2014 "),Lz=a("a"),prr=o("HubertForCTC"),_rr=o(" (Hubert model)"),urr=l(),tF=a("li"),Gue=a("strong"),brr=o("sew"),vrr=o(" \u2014 "),xz=a("a"),Frr=o("SEWForCTC"),Trr=o(" (SEW model)"),Mrr=l(),aF=a("li"),Oue=a("strong"),Err=o("sew-d"),Crr=o(" \u2014 "),$z=a("a"),wrr=o("SEWDForCTC"),Arr=o(" (SEW-D model)"),yrr=l(),nF=a("li"),Vue=a("strong"),Lrr=o("unispeech"),xrr=o(" \u2014 "),kz=a("a"),$rr=o("UniSpeechForCTC"),krr=o(" (UniSpeech model)"),Srr=l(),sF=a("li"),Xue=a("strong"),Rrr=o("unispeech-sat"),Prr=o(" \u2014 "),Sz=a("a"),Brr=o("UniSpeechSatForCTC"),Irr=o(" (UniSpeechSat model)"),Nrr=l(),lF=a("li"),zue=a("strong"),qrr=o("wav2vec2"),jrr=o(" \u2014 "),Rz=a("a"),Drr=o("Wav2Vec2ForCTC"),Grr=o(" (Wav2Vec2 model)"),Orr=l(),iF=a("li"),Wue=a("strong"),Vrr=o("wav2vec2-conformer"),Xrr=o(" \u2014 "),Pz=a("a"),zrr=o("Wav2Vec2ConformerForCTC"),Wrr=o(" (Wav2Vec2-Conformer model)"),Qrr=l(),dF=a("li"),Que=a("strong"),Hrr=o("wavlm"),Urr=o(" \u2014 "),Bz=a("a"),Jrr=o("WavLMForCTC"),Yrr=o(" (WavLM model)"),Krr=l(),cF=a("p"),Zrr=o("The model is set in evaluation mode by default using "),Hue=a("code"),etr=o("model.eval()"),otr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Uue=a("code"),rtr=o("model.train()"),ttr=l(),F(fF.$$.fragment),Aje=l(),Fd=a("h2"),mF=a("a"),Jue=a("span"),F(Py.$$.fragment),atr=l(),Yue=a("span"),ntr=o("AutoModelForSpeechSeq2Seq"),yje=l(),Xo=a("div"),F(By.$$.fragment),str=l(),Td=a("p"),ltr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Iz=a("a"),itr=o("from_pretrained()"),dtr=o(" class method or the "),Nz=a("a"),ctr=o("from_config()"),ftr=o(` class
method.`),mtr=l(),Iy=a("p"),gtr=o("This class cannot be instantiated directly using "),Kue=a("code"),htr=o("__init__()"),ptr=o(" (throws an error)."),_tr=l(),Ft=a("div"),F(Ny.$$.fragment),utr=l(),Zue=a("p"),btr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),vtr=l(),Md=a("p"),Ftr=o(`Note:
Loading a model from its configuration file does `),e1e=a("strong"),Ttr=o("not"),Mtr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qz=a("a"),Etr=o("from_pretrained()"),Ctr=o(" to load the model weights."),wtr=l(),F(gF.$$.fragment),Atr=l(),go=a("div"),F(qy.$$.fragment),ytr=l(),o1e=a("p"),Ltr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),xtr=l(),Xa=a("p"),$tr=o("The model class to instantiate is selected based on the "),r1e=a("code"),ktr=o("model_type"),Str=o(` property of the config object (either
passed as an argument or loaded from `),t1e=a("code"),Rtr=o("pretrained_model_name_or_path"),Ptr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a1e=a("code"),Btr=o("pretrained_model_name_or_path"),Itr=o(":"),Ntr=l(),jy=a("ul"),hF=a("li"),n1e=a("strong"),qtr=o("speech-encoder-decoder"),jtr=o(" \u2014 "),jz=a("a"),Dtr=o("SpeechEncoderDecoderModel"),Gtr=o(" (Speech Encoder decoder model)"),Otr=l(),pF=a("li"),s1e=a("strong"),Vtr=o("speech_to_text"),Xtr=o(" \u2014 "),Dz=a("a"),ztr=o("Speech2TextForConditionalGeneration"),Wtr=o(" (Speech2Text model)"),Qtr=l(),_F=a("p"),Htr=o("The model is set in evaluation mode by default using "),l1e=a("code"),Utr=o("model.eval()"),Jtr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),i1e=a("code"),Ytr=o("model.train()"),Ktr=l(),F(uF.$$.fragment),Lje=l(),Ed=a("h2"),bF=a("a"),d1e=a("span"),F(Dy.$$.fragment),Ztr=l(),c1e=a("span"),ear=o("AutoModelForAudioXVector"),xje=l(),zo=a("div"),F(Gy.$$.fragment),oar=l(),Cd=a("p"),rar=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),Gz=a("a"),tar=o("from_pretrained()"),aar=o(" class method or the "),Oz=a("a"),nar=o("from_config()"),sar=o(` class
method.`),lar=l(),Oy=a("p"),iar=o("This class cannot be instantiated directly using "),f1e=a("code"),dar=o("__init__()"),car=o(" (throws an error)."),far=l(),Tt=a("div"),F(Vy.$$.fragment),mar=l(),m1e=a("p"),gar=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),har=l(),wd=a("p"),par=o(`Note:
Loading a model from its configuration file does `),g1e=a("strong"),_ar=o("not"),uar=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Vz=a("a"),bar=o("from_pretrained()"),Far=o(" to load the model weights."),Tar=l(),F(vF.$$.fragment),Mar=l(),ho=a("div"),F(Xy.$$.fragment),Ear=l(),h1e=a("p"),Car=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),war=l(),za=a("p"),Aar=o("The model class to instantiate is selected based on the "),p1e=a("code"),yar=o("model_type"),Lar=o(` property of the config object (either
passed as an argument or loaded from `),_1e=a("code"),xar=o("pretrained_model_name_or_path"),$ar=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u1e=a("code"),kar=o("pretrained_model_name_or_path"),Sar=o(":"),Rar=l(),Zr=a("ul"),FF=a("li"),b1e=a("strong"),Par=o("data2vec-audio"),Bar=o(" \u2014 "),Xz=a("a"),Iar=o("Data2VecAudioForXVector"),Nar=o(" (Data2VecAudio model)"),qar=l(),TF=a("li"),v1e=a("strong"),jar=o("unispeech-sat"),Dar=o(" \u2014 "),zz=a("a"),Gar=o("UniSpeechSatForXVector"),Oar=o(" (UniSpeechSat model)"),Var=l(),MF=a("li"),F1e=a("strong"),Xar=o("wav2vec2"),zar=o(" \u2014 "),Wz=a("a"),War=o("Wav2Vec2ForXVector"),Qar=o(" (Wav2Vec2 model)"),Har=l(),EF=a("li"),T1e=a("strong"),Uar=o("wav2vec2-conformer"),Jar=o(" \u2014 "),Qz=a("a"),Yar=o("Wav2Vec2ConformerForXVector"),Kar=o(" (Wav2Vec2-Conformer model)"),Zar=l(),CF=a("li"),M1e=a("strong"),enr=o("wavlm"),onr=o(" \u2014 "),Hz=a("a"),rnr=o("WavLMForXVector"),tnr=o(" (WavLM model)"),anr=l(),wF=a("p"),nnr=o("The model is set in evaluation mode by default using "),E1e=a("code"),snr=o("model.eval()"),lnr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),C1e=a("code"),inr=o("model.train()"),dnr=l(),F(AF.$$.fragment),$je=l(),Ad=a("h2"),yF=a("a"),w1e=a("span"),F(zy.$$.fragment),cnr=l(),A1e=a("span"),fnr=o("AutoModelForMaskedImageModeling"),kje=l(),Wo=a("div"),F(Wy.$$.fragment),mnr=l(),yd=a("p"),gnr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),Uz=a("a"),hnr=o("from_pretrained()"),pnr=o(" class method or the "),Jz=a("a"),_nr=o("from_config()"),unr=o(` class
method.`),bnr=l(),Qy=a("p"),vnr=o("This class cannot be instantiated directly using "),y1e=a("code"),Fnr=o("__init__()"),Tnr=o(" (throws an error)."),Mnr=l(),Mt=a("div"),F(Hy.$$.fragment),Enr=l(),L1e=a("p"),Cnr=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),wnr=l(),Ld=a("p"),Anr=o(`Note:
Loading a model from its configuration file does `),x1e=a("strong"),ynr=o("not"),Lnr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Yz=a("a"),xnr=o("from_pretrained()"),$nr=o(" to load the model weights."),knr=l(),F(LF.$$.fragment),Snr=l(),po=a("div"),F(Uy.$$.fragment),Rnr=l(),$1e=a("p"),Pnr=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Bnr=l(),Wa=a("p"),Inr=o("The model class to instantiate is selected based on the "),k1e=a("code"),Nnr=o("model_type"),qnr=o(` property of the config object (either
passed as an argument or loaded from `),S1e=a("code"),jnr=o("pretrained_model_name_or_path"),Dnr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R1e=a("code"),Gnr=o("pretrained_model_name_or_path"),Onr=o(":"),Vnr=l(),xd=a("ul"),xF=a("li"),P1e=a("strong"),Xnr=o("deit"),znr=o(" \u2014 "),Kz=a("a"),Wnr=o("DeiTForMaskedImageModeling"),Qnr=o(" (DeiT model)"),Hnr=l(),$F=a("li"),B1e=a("strong"),Unr=o("swin"),Jnr=o(" \u2014 "),Zz=a("a"),Ynr=o("SwinForMaskedImageModeling"),Knr=o(" (Swin Transformer model)"),Znr=l(),kF=a("li"),I1e=a("strong"),esr=o("vit"),osr=o(" \u2014 "),eW=a("a"),rsr=o("ViTForMaskedImageModeling"),tsr=o(" (ViT model)"),asr=l(),SF=a("p"),nsr=o("The model is set in evaluation mode by default using "),N1e=a("code"),ssr=o("model.eval()"),lsr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),q1e=a("code"),isr=o("model.train()"),dsr=l(),F(RF.$$.fragment),Sje=l(),$d=a("h2"),PF=a("a"),j1e=a("span"),F(Jy.$$.fragment),csr=l(),D1e=a("span"),fsr=o("AutoModelForObjectDetection"),Rje=l(),Qo=a("div"),F(Yy.$$.fragment),msr=l(),kd=a("p"),gsr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),oW=a("a"),hsr=o("from_pretrained()"),psr=o(" class method or the "),rW=a("a"),_sr=o("from_config()"),usr=o(` class
method.`),bsr=l(),Ky=a("p"),vsr=o("This class cannot be instantiated directly using "),G1e=a("code"),Fsr=o("__init__()"),Tsr=o(" (throws an error)."),Msr=l(),Et=a("div"),F(Zy.$$.fragment),Esr=l(),O1e=a("p"),Csr=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),wsr=l(),Sd=a("p"),Asr=o(`Note:
Loading a model from its configuration file does `),V1e=a("strong"),ysr=o("not"),Lsr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tW=a("a"),xsr=o("from_pretrained()"),$sr=o(" to load the model weights."),ksr=l(),F(BF.$$.fragment),Ssr=l(),_o=a("div"),F(eL.$$.fragment),Rsr=l(),X1e=a("p"),Psr=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Bsr=l(),Qa=a("p"),Isr=o("The model class to instantiate is selected based on the "),z1e=a("code"),Nsr=o("model_type"),qsr=o(` property of the config object (either
passed as an argument or loaded from `),W1e=a("code"),jsr=o("pretrained_model_name_or_path"),Dsr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q1e=a("code"),Gsr=o("pretrained_model_name_or_path"),Osr=o(":"),Vsr=l(),oL=a("ul"),IF=a("li"),H1e=a("strong"),Xsr=o("detr"),zsr=o(" \u2014 "),aW=a("a"),Wsr=o("DetrForObjectDetection"),Qsr=o(" (DETR model)"),Hsr=l(),NF=a("li"),U1e=a("strong"),Usr=o("yolos"),Jsr=o(" \u2014 "),nW=a("a"),Ysr=o("YolosForObjectDetection"),Ksr=o(" (YOLOS model)"),Zsr=l(),qF=a("p"),elr=o("The model is set in evaluation mode by default using "),J1e=a("code"),olr=o("model.eval()"),rlr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Y1e=a("code"),tlr=o("model.train()"),alr=l(),F(jF.$$.fragment),Pje=l(),Rd=a("h2"),DF=a("a"),K1e=a("span"),F(rL.$$.fragment),nlr=l(),Z1e=a("span"),slr=o("AutoModelForImageSegmentation"),Bje=l(),Ho=a("div"),F(tL.$$.fragment),llr=l(),Pd=a("p"),ilr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),sW=a("a"),dlr=o("from_pretrained()"),clr=o(" class method or the "),lW=a("a"),flr=o("from_config()"),mlr=o(` class
method.`),glr=l(),aL=a("p"),hlr=o("This class cannot be instantiated directly using "),ebe=a("code"),plr=o("__init__()"),_lr=o(" (throws an error)."),ulr=l(),Ct=a("div"),F(nL.$$.fragment),blr=l(),obe=a("p"),vlr=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Flr=l(),Bd=a("p"),Tlr=o(`Note:
Loading a model from its configuration file does `),rbe=a("strong"),Mlr=o("not"),Elr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iW=a("a"),Clr=o("from_pretrained()"),wlr=o(" to load the model weights."),Alr=l(),F(GF.$$.fragment),ylr=l(),uo=a("div"),F(sL.$$.fragment),Llr=l(),tbe=a("p"),xlr=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),$lr=l(),Ha=a("p"),klr=o("The model class to instantiate is selected based on the "),abe=a("code"),Slr=o("model_type"),Rlr=o(` property of the config object (either
passed as an argument or loaded from `),nbe=a("code"),Plr=o("pretrained_model_name_or_path"),Blr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sbe=a("code"),Ilr=o("pretrained_model_name_or_path"),Nlr=o(":"),qlr=l(),lbe=a("ul"),OF=a("li"),ibe=a("strong"),jlr=o("detr"),Dlr=o(" \u2014 "),dW=a("a"),Glr=o("DetrForSegmentation"),Olr=o(" (DETR model)"),Vlr=l(),VF=a("p"),Xlr=o("The model is set in evaluation mode by default using "),dbe=a("code"),zlr=o("model.eval()"),Wlr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cbe=a("code"),Qlr=o("model.train()"),Hlr=l(),F(XF.$$.fragment),Ije=l(),Id=a("h2"),zF=a("a"),fbe=a("span"),F(lL.$$.fragment),Ulr=l(),mbe=a("span"),Jlr=o("AutoModelForSemanticSegmentation"),Nje=l(),Uo=a("div"),F(iL.$$.fragment),Ylr=l(),Nd=a("p"),Klr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),cW=a("a"),Zlr=o("from_pretrained()"),eir=o(" class method or the "),fW=a("a"),oir=o("from_config()"),rir=o(` class
method.`),tir=l(),dL=a("p"),air=o("This class cannot be instantiated directly using "),gbe=a("code"),nir=o("__init__()"),sir=o(" (throws an error)."),lir=l(),wt=a("div"),F(cL.$$.fragment),iir=l(),hbe=a("p"),dir=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),cir=l(),qd=a("p"),fir=o(`Note:
Loading a model from its configuration file does `),pbe=a("strong"),mir=o("not"),gir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mW=a("a"),hir=o("from_pretrained()"),pir=o(" to load the model weights."),_ir=l(),F(WF.$$.fragment),uir=l(),bo=a("div"),F(fL.$$.fragment),bir=l(),_be=a("p"),vir=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Fir=l(),Ua=a("p"),Tir=o("The model class to instantiate is selected based on the "),ube=a("code"),Mir=o("model_type"),Eir=o(` property of the config object (either
passed as an argument or loaded from `),bbe=a("code"),Cir=o("pretrained_model_name_or_path"),wir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vbe=a("code"),Air=o("pretrained_model_name_or_path"),yir=o(":"),Lir=l(),Ja=a("ul"),QF=a("li"),Fbe=a("strong"),xir=o("beit"),$ir=o(" \u2014 "),gW=a("a"),kir=o("BeitForSemanticSegmentation"),Sir=o(" (BEiT model)"),Rir=l(),HF=a("li"),Tbe=a("strong"),Pir=o("data2vec-vision"),Bir=o(" \u2014 "),hW=a("a"),Iir=o("Data2VecVisionForSemanticSegmentation"),Nir=o(" (Data2VecVision model)"),qir=l(),UF=a("li"),Mbe=a("strong"),jir=o("dpt"),Dir=o(" \u2014 "),pW=a("a"),Gir=o("DPTForSemanticSegmentation"),Oir=o(" (DPT model)"),Vir=l(),JF=a("li"),Ebe=a("strong"),Xir=o("segformer"),zir=o(" \u2014 "),_W=a("a"),Wir=o("SegformerForSemanticSegmentation"),Qir=o(" (SegFormer model)"),Hir=l(),YF=a("p"),Uir=o("The model is set in evaluation mode by default using "),Cbe=a("code"),Jir=o("model.eval()"),Yir=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wbe=a("code"),Kir=o("model.train()"),Zir=l(),F(KF.$$.fragment),qje=l(),jd=a("h2"),ZF=a("a"),Abe=a("span"),F(mL.$$.fragment),edr=l(),ybe=a("span"),odr=o("AutoModelForInstanceSegmentation"),jje=l(),Jo=a("div"),F(gL.$$.fragment),rdr=l(),Dd=a("p"),tdr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),uW=a("a"),adr=o("from_pretrained()"),ndr=o(" class method or the "),bW=a("a"),sdr=o("from_config()"),ldr=o(` class
method.`),idr=l(),hL=a("p"),ddr=o("This class cannot be instantiated directly using "),Lbe=a("code"),cdr=o("__init__()"),fdr=o(" (throws an error)."),mdr=l(),At=a("div"),F(pL.$$.fragment),gdr=l(),xbe=a("p"),hdr=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),pdr=l(),Gd=a("p"),_dr=o(`Note:
Loading a model from its configuration file does `),$be=a("strong"),udr=o("not"),bdr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vW=a("a"),vdr=o("from_pretrained()"),Fdr=o(" to load the model weights."),Tdr=l(),F(eT.$$.fragment),Mdr=l(),vo=a("div"),F(_L.$$.fragment),Edr=l(),kbe=a("p"),Cdr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),wdr=l(),Ya=a("p"),Adr=o("The model class to instantiate is selected based on the "),Sbe=a("code"),ydr=o("model_type"),Ldr=o(` property of the config object (either
passed as an argument or loaded from `),Rbe=a("code"),xdr=o("pretrained_model_name_or_path"),$dr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pbe=a("code"),kdr=o("pretrained_model_name_or_path"),Sdr=o(":"),Rdr=l(),Bbe=a("ul"),oT=a("li"),Ibe=a("strong"),Pdr=o("maskformer"),Bdr=o(" \u2014 "),FW=a("a"),Idr=o("MaskFormerForInstanceSegmentation"),Ndr=o(" (MaskFormer model)"),qdr=l(),rT=a("p"),jdr=o("The model is set in evaluation mode by default using "),Nbe=a("code"),Ddr=o("model.eval()"),Gdr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qbe=a("code"),Odr=o("model.train()"),Vdr=l(),F(tT.$$.fragment),Dje=l(),Od=a("h2"),aT=a("a"),jbe=a("span"),F(uL.$$.fragment),Xdr=l(),Dbe=a("span"),zdr=o("TFAutoModel"),Gje=l(),Yo=a("div"),F(bL.$$.fragment),Wdr=l(),Vd=a("p"),Qdr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),TW=a("a"),Hdr=o("from_pretrained()"),Udr=o(" class method or the "),MW=a("a"),Jdr=o("from_config()"),Ydr=o(` class
method.`),Kdr=l(),vL=a("p"),Zdr=o("This class cannot be instantiated directly using "),Gbe=a("code"),ecr=o("__init__()"),ocr=o(" (throws an error)."),rcr=l(),yt=a("div"),F(FL.$$.fragment),tcr=l(),Obe=a("p"),acr=o("Instantiates one of the base model classes of the library from a configuration."),ncr=l(),Xd=a("p"),scr=o(`Note:
Loading a model from its configuration file does `),Vbe=a("strong"),lcr=o("not"),icr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EW=a("a"),dcr=o("from_pretrained()"),ccr=o(" to load the model weights."),fcr=l(),F(nT.$$.fragment),mcr=l(),wr=a("div"),F(TL.$$.fragment),gcr=l(),Xbe=a("p"),hcr=o("Instantiate one of the base model classes of the library from a pretrained model."),pcr=l(),Ka=a("p"),_cr=o("The model class to instantiate is selected based on the "),zbe=a("code"),ucr=o("model_type"),bcr=o(` property of the config object (either
passed as an argument or loaded from `),Wbe=a("code"),vcr=o("pretrained_model_name_or_path"),Fcr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qbe=a("code"),Tcr=o("pretrained_model_name_or_path"),Mcr=o(":"),Ecr=l(),q=a("ul"),sT=a("li"),Hbe=a("strong"),Ccr=o("albert"),wcr=o(" \u2014 "),CW=a("a"),Acr=o("TFAlbertModel"),ycr=o(" (ALBERT model)"),Lcr=l(),lT=a("li"),Ube=a("strong"),xcr=o("bart"),$cr=o(" \u2014 "),wW=a("a"),kcr=o("TFBartModel"),Scr=o(" (BART model)"),Rcr=l(),iT=a("li"),Jbe=a("strong"),Pcr=o("bert"),Bcr=o(" \u2014 "),AW=a("a"),Icr=o("TFBertModel"),Ncr=o(" (BERT model)"),qcr=l(),dT=a("li"),Ybe=a("strong"),jcr=o("blenderbot"),Dcr=o(" \u2014 "),yW=a("a"),Gcr=o("TFBlenderbotModel"),Ocr=o(" (Blenderbot model)"),Vcr=l(),cT=a("li"),Kbe=a("strong"),Xcr=o("blenderbot-small"),zcr=o(" \u2014 "),LW=a("a"),Wcr=o("TFBlenderbotSmallModel"),Qcr=o(" (BlenderbotSmall model)"),Hcr=l(),fT=a("li"),Zbe=a("strong"),Ucr=o("camembert"),Jcr=o(" \u2014 "),xW=a("a"),Ycr=o("TFCamembertModel"),Kcr=o(" (CamemBERT model)"),Zcr=l(),mT=a("li"),e2e=a("strong"),efr=o("clip"),ofr=o(" \u2014 "),$W=a("a"),rfr=o("TFCLIPModel"),tfr=o(" (CLIP model)"),afr=l(),gT=a("li"),o2e=a("strong"),nfr=o("convbert"),sfr=o(" \u2014 "),kW=a("a"),lfr=o("TFConvBertModel"),ifr=o(" (ConvBERT model)"),dfr=l(),hT=a("li"),r2e=a("strong"),cfr=o("convnext"),ffr=o(" \u2014 "),SW=a("a"),mfr=o("TFConvNextModel"),gfr=o(" (ConvNeXT model)"),hfr=l(),pT=a("li"),t2e=a("strong"),pfr=o("ctrl"),_fr=o(" \u2014 "),RW=a("a"),ufr=o("TFCTRLModel"),bfr=o(" (CTRL model)"),vfr=l(),_T=a("li"),a2e=a("strong"),Ffr=o("data2vec-vision"),Tfr=o(" \u2014 "),PW=a("a"),Mfr=o("TFData2VecVisionModel"),Efr=o(" (Data2VecVision model)"),Cfr=l(),uT=a("li"),n2e=a("strong"),wfr=o("deberta"),Afr=o(" \u2014 "),BW=a("a"),yfr=o("TFDebertaModel"),Lfr=o(" (DeBERTa model)"),xfr=l(),bT=a("li"),s2e=a("strong"),$fr=o("deberta-v2"),kfr=o(" \u2014 "),IW=a("a"),Sfr=o("TFDebertaV2Model"),Rfr=o(" (DeBERTa-v2 model)"),Pfr=l(),vT=a("li"),l2e=a("strong"),Bfr=o("distilbert"),Ifr=o(" \u2014 "),NW=a("a"),Nfr=o("TFDistilBertModel"),qfr=o(" (DistilBERT model)"),jfr=l(),FT=a("li"),i2e=a("strong"),Dfr=o("dpr"),Gfr=o(" \u2014 "),qW=a("a"),Ofr=o("TFDPRQuestionEncoder"),Vfr=o(" (DPR model)"),Xfr=l(),TT=a("li"),d2e=a("strong"),zfr=o("electra"),Wfr=o(" \u2014 "),jW=a("a"),Qfr=o("TFElectraModel"),Hfr=o(" (ELECTRA model)"),Ufr=l(),MT=a("li"),c2e=a("strong"),Jfr=o("flaubert"),Yfr=o(" \u2014 "),DW=a("a"),Kfr=o("TFFlaubertModel"),Zfr=o(" (FlauBERT model)"),emr=l(),Ns=a("li"),f2e=a("strong"),omr=o("funnel"),rmr=o(" \u2014 "),GW=a("a"),tmr=o("TFFunnelModel"),amr=o(" or "),OW=a("a"),nmr=o("TFFunnelBaseModel"),smr=o(" (Funnel Transformer model)"),lmr=l(),ET=a("li"),m2e=a("strong"),imr=o("gpt2"),dmr=o(" \u2014 "),VW=a("a"),cmr=o("TFGPT2Model"),fmr=o(" (OpenAI GPT-2 model)"),mmr=l(),CT=a("li"),g2e=a("strong"),gmr=o("gptj"),hmr=o(" \u2014 "),XW=a("a"),pmr=o("TFGPTJModel"),_mr=o(" (GPT-J model)"),umr=l(),wT=a("li"),h2e=a("strong"),bmr=o("hubert"),vmr=o(" \u2014 "),zW=a("a"),Fmr=o("TFHubertModel"),Tmr=o(" (Hubert model)"),Mmr=l(),AT=a("li"),p2e=a("strong"),Emr=o("layoutlm"),Cmr=o(" \u2014 "),WW=a("a"),wmr=o("TFLayoutLMModel"),Amr=o(" (LayoutLM model)"),ymr=l(),yT=a("li"),_2e=a("strong"),Lmr=o("led"),xmr=o(" \u2014 "),QW=a("a"),$mr=o("TFLEDModel"),kmr=o(" (LED model)"),Smr=l(),LT=a("li"),u2e=a("strong"),Rmr=o("longformer"),Pmr=o(" \u2014 "),HW=a("a"),Bmr=o("TFLongformerModel"),Imr=o(" (Longformer model)"),Nmr=l(),xT=a("li"),b2e=a("strong"),qmr=o("lxmert"),jmr=o(" \u2014 "),UW=a("a"),Dmr=o("TFLxmertModel"),Gmr=o(" (LXMERT model)"),Omr=l(),$T=a("li"),v2e=a("strong"),Vmr=o("marian"),Xmr=o(" \u2014 "),JW=a("a"),zmr=o("TFMarianModel"),Wmr=o(" (Marian model)"),Qmr=l(),kT=a("li"),F2e=a("strong"),Hmr=o("mbart"),Umr=o(" \u2014 "),YW=a("a"),Jmr=o("TFMBartModel"),Ymr=o(" (mBART model)"),Kmr=l(),ST=a("li"),T2e=a("strong"),Zmr=o("mobilebert"),egr=o(" \u2014 "),KW=a("a"),ogr=o("TFMobileBertModel"),rgr=o(" (MobileBERT model)"),tgr=l(),RT=a("li"),M2e=a("strong"),agr=o("mpnet"),ngr=o(" \u2014 "),ZW=a("a"),sgr=o("TFMPNetModel"),lgr=o(" (MPNet model)"),igr=l(),PT=a("li"),E2e=a("strong"),dgr=o("mt5"),cgr=o(" \u2014 "),eQ=a("a"),fgr=o("TFMT5Model"),mgr=o(" (MT5 model)"),ggr=l(),BT=a("li"),C2e=a("strong"),hgr=o("openai-gpt"),pgr=o(" \u2014 "),oQ=a("a"),_gr=o("TFOpenAIGPTModel"),ugr=o(" (OpenAI GPT model)"),bgr=l(),IT=a("li"),w2e=a("strong"),vgr=o("opt"),Fgr=o(" \u2014 "),rQ=a("a"),Tgr=o("TFOPTModel"),Mgr=o(" (OPT model)"),Egr=l(),NT=a("li"),A2e=a("strong"),Cgr=o("pegasus"),wgr=o(" \u2014 "),tQ=a("a"),Agr=o("TFPegasusModel"),ygr=o(" (Pegasus model)"),Lgr=l(),qT=a("li"),y2e=a("strong"),xgr=o("rembert"),$gr=o(" \u2014 "),aQ=a("a"),kgr=o("TFRemBertModel"),Sgr=o(" (RemBERT model)"),Rgr=l(),jT=a("li"),L2e=a("strong"),Pgr=o("roberta"),Bgr=o(" \u2014 "),nQ=a("a"),Igr=o("TFRobertaModel"),Ngr=o(" (RoBERTa model)"),qgr=l(),DT=a("li"),x2e=a("strong"),jgr=o("roformer"),Dgr=o(" \u2014 "),sQ=a("a"),Ggr=o("TFRoFormerModel"),Ogr=o(" (RoFormer model)"),Vgr=l(),GT=a("li"),$2e=a("strong"),Xgr=o("speech_to_text"),zgr=o(" \u2014 "),lQ=a("a"),Wgr=o("TFSpeech2TextModel"),Qgr=o(" (Speech2Text model)"),Hgr=l(),OT=a("li"),k2e=a("strong"),Ugr=o("swin"),Jgr=o(" \u2014 "),iQ=a("a"),Ygr=o("TFSwinModel"),Kgr=o(" (Swin Transformer model)"),Zgr=l(),VT=a("li"),S2e=a("strong"),ehr=o("t5"),ohr=o(" \u2014 "),dQ=a("a"),rhr=o("TFT5Model"),thr=o(" (T5 model)"),ahr=l(),XT=a("li"),R2e=a("strong"),nhr=o("tapas"),shr=o(" \u2014 "),cQ=a("a"),lhr=o("TFTapasModel"),ihr=o(" (TAPAS model)"),dhr=l(),zT=a("li"),P2e=a("strong"),chr=o("transfo-xl"),fhr=o(" \u2014 "),fQ=a("a"),mhr=o("TFTransfoXLModel"),ghr=o(" (Transformer-XL model)"),hhr=l(),WT=a("li"),B2e=a("strong"),phr=o("vit"),_hr=o(" \u2014 "),mQ=a("a"),uhr=o("TFViTModel"),bhr=o(" (ViT model)"),vhr=l(),QT=a("li"),I2e=a("strong"),Fhr=o("vit_mae"),Thr=o(" \u2014 "),gQ=a("a"),Mhr=o("TFViTMAEModel"),Ehr=o(" (ViTMAE model)"),Chr=l(),HT=a("li"),N2e=a("strong"),whr=o("wav2vec2"),Ahr=o(" \u2014 "),hQ=a("a"),yhr=o("TFWav2Vec2Model"),Lhr=o(" (Wav2Vec2 model)"),xhr=l(),UT=a("li"),q2e=a("strong"),$hr=o("xlm"),khr=o(" \u2014 "),pQ=a("a"),Shr=o("TFXLMModel"),Rhr=o(" (XLM model)"),Phr=l(),JT=a("li"),j2e=a("strong"),Bhr=o("xlm-roberta"),Ihr=o(" \u2014 "),_Q=a("a"),Nhr=o("TFXLMRobertaModel"),qhr=o(" (XLM-RoBERTa model)"),jhr=l(),YT=a("li"),D2e=a("strong"),Dhr=o("xlnet"),Ghr=o(" \u2014 "),uQ=a("a"),Ohr=o("TFXLNetModel"),Vhr=o(" (XLNet model)"),Xhr=l(),F(KT.$$.fragment),Oje=l(),zd=a("h2"),ZT=a("a"),G2e=a("span"),F(ML.$$.fragment),zhr=l(),O2e=a("span"),Whr=o("TFAutoModelForPreTraining"),Vje=l(),Ko=a("div"),F(EL.$$.fragment),Qhr=l(),Wd=a("p"),Hhr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),bQ=a("a"),Uhr=o("from_pretrained()"),Jhr=o(" class method or the "),vQ=a("a"),Yhr=o("from_config()"),Khr=o(` class
method.`),Zhr=l(),CL=a("p"),epr=o("This class cannot be instantiated directly using "),V2e=a("code"),opr=o("__init__()"),rpr=o(" (throws an error)."),tpr=l(),Lt=a("div"),F(wL.$$.fragment),apr=l(),X2e=a("p"),npr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),spr=l(),Qd=a("p"),lpr=o(`Note:
Loading a model from its configuration file does `),z2e=a("strong"),ipr=o("not"),dpr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FQ=a("a"),cpr=o("from_pretrained()"),fpr=o(" to load the model weights."),mpr=l(),F(e7.$$.fragment),gpr=l(),Ar=a("div"),F(AL.$$.fragment),hpr=l(),W2e=a("p"),ppr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),_pr=l(),Za=a("p"),upr=o("The model class to instantiate is selected based on the "),Q2e=a("code"),bpr=o("model_type"),vpr=o(` property of the config object (either
passed as an argument or loaded from `),H2e=a("code"),Fpr=o("pretrained_model_name_or_path"),Tpr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U2e=a("code"),Mpr=o("pretrained_model_name_or_path"),Epr=o(":"),Cpr=l(),se=a("ul"),o7=a("li"),J2e=a("strong"),wpr=o("albert"),Apr=o(" \u2014 "),TQ=a("a"),ypr=o("TFAlbertForPreTraining"),Lpr=o(" (ALBERT model)"),xpr=l(),r7=a("li"),Y2e=a("strong"),$pr=o("bart"),kpr=o(" \u2014 "),MQ=a("a"),Spr=o("TFBartForConditionalGeneration"),Rpr=o(" (BART model)"),Ppr=l(),t7=a("li"),K2e=a("strong"),Bpr=o("bert"),Ipr=o(" \u2014 "),EQ=a("a"),Npr=o("TFBertForPreTraining"),qpr=o(" (BERT model)"),jpr=l(),a7=a("li"),Z2e=a("strong"),Dpr=o("camembert"),Gpr=o(" \u2014 "),CQ=a("a"),Opr=o("TFCamembertForMaskedLM"),Vpr=o(" (CamemBERT model)"),Xpr=l(),n7=a("li"),eve=a("strong"),zpr=o("ctrl"),Wpr=o(" \u2014 "),wQ=a("a"),Qpr=o("TFCTRLLMHeadModel"),Hpr=o(" (CTRL model)"),Upr=l(),s7=a("li"),ove=a("strong"),Jpr=o("distilbert"),Ypr=o(" \u2014 "),AQ=a("a"),Kpr=o("TFDistilBertForMaskedLM"),Zpr=o(" (DistilBERT model)"),e_r=l(),l7=a("li"),rve=a("strong"),o_r=o("electra"),r_r=o(" \u2014 "),yQ=a("a"),t_r=o("TFElectraForPreTraining"),a_r=o(" (ELECTRA model)"),n_r=l(),i7=a("li"),tve=a("strong"),s_r=o("flaubert"),l_r=o(" \u2014 "),LQ=a("a"),i_r=o("TFFlaubertWithLMHeadModel"),d_r=o(" (FlauBERT model)"),c_r=l(),d7=a("li"),ave=a("strong"),f_r=o("funnel"),m_r=o(" \u2014 "),xQ=a("a"),g_r=o("TFFunnelForPreTraining"),h_r=o(" (Funnel Transformer model)"),p_r=l(),c7=a("li"),nve=a("strong"),__r=o("gpt2"),u_r=o(" \u2014 "),$Q=a("a"),b_r=o("TFGPT2LMHeadModel"),v_r=o(" (OpenAI GPT-2 model)"),F_r=l(),f7=a("li"),sve=a("strong"),T_r=o("layoutlm"),M_r=o(" \u2014 "),kQ=a("a"),E_r=o("TFLayoutLMForMaskedLM"),C_r=o(" (LayoutLM model)"),w_r=l(),m7=a("li"),lve=a("strong"),A_r=o("lxmert"),y_r=o(" \u2014 "),SQ=a("a"),L_r=o("TFLxmertForPreTraining"),x_r=o(" (LXMERT model)"),$_r=l(),g7=a("li"),ive=a("strong"),k_r=o("mobilebert"),S_r=o(" \u2014 "),RQ=a("a"),R_r=o("TFMobileBertForPreTraining"),P_r=o(" (MobileBERT model)"),B_r=l(),h7=a("li"),dve=a("strong"),I_r=o("mpnet"),N_r=o(" \u2014 "),PQ=a("a"),q_r=o("TFMPNetForMaskedLM"),j_r=o(" (MPNet model)"),D_r=l(),p7=a("li"),cve=a("strong"),G_r=o("openai-gpt"),O_r=o(" \u2014 "),BQ=a("a"),V_r=o("TFOpenAIGPTLMHeadModel"),X_r=o(" (OpenAI GPT model)"),z_r=l(),_7=a("li"),fve=a("strong"),W_r=o("roberta"),Q_r=o(" \u2014 "),IQ=a("a"),H_r=o("TFRobertaForMaskedLM"),U_r=o(" (RoBERTa model)"),J_r=l(),u7=a("li"),mve=a("strong"),Y_r=o("t5"),K_r=o(" \u2014 "),NQ=a("a"),Z_r=o("TFT5ForConditionalGeneration"),eur=o(" (T5 model)"),our=l(),b7=a("li"),gve=a("strong"),rur=o("tapas"),tur=o(" \u2014 "),qQ=a("a"),aur=o("TFTapasForMaskedLM"),nur=o(" (TAPAS model)"),sur=l(),v7=a("li"),hve=a("strong"),lur=o("transfo-xl"),iur=o(" \u2014 "),jQ=a("a"),dur=o("TFTransfoXLLMHeadModel"),cur=o(" (Transformer-XL model)"),fur=l(),F7=a("li"),pve=a("strong"),mur=o("vit_mae"),gur=o(" \u2014 "),DQ=a("a"),hur=o("TFViTMAEForPreTraining"),pur=o(" (ViTMAE model)"),_ur=l(),T7=a("li"),_ve=a("strong"),uur=o("xlm"),bur=o(" \u2014 "),GQ=a("a"),vur=o("TFXLMWithLMHeadModel"),Fur=o(" (XLM model)"),Tur=l(),M7=a("li"),uve=a("strong"),Mur=o("xlm-roberta"),Eur=o(" \u2014 "),OQ=a("a"),Cur=o("TFXLMRobertaForMaskedLM"),wur=o(" (XLM-RoBERTa model)"),Aur=l(),E7=a("li"),bve=a("strong"),yur=o("xlnet"),Lur=o(" \u2014 "),VQ=a("a"),xur=o("TFXLNetLMHeadModel"),$ur=o(" (XLNet model)"),kur=l(),F(C7.$$.fragment),Xje=l(),Hd=a("h2"),w7=a("a"),vve=a("span"),F(yL.$$.fragment),Sur=l(),Fve=a("span"),Rur=o("TFAutoModelForCausalLM"),zje=l(),Zo=a("div"),F(LL.$$.fragment),Pur=l(),Ud=a("p"),Bur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),XQ=a("a"),Iur=o("from_pretrained()"),Nur=o(" class method or the "),zQ=a("a"),qur=o("from_config()"),jur=o(` class
method.`),Dur=l(),xL=a("p"),Gur=o("This class cannot be instantiated directly using "),Tve=a("code"),Our=o("__init__()"),Vur=o(" (throws an error)."),Xur=l(),xt=a("div"),F($L.$$.fragment),zur=l(),Mve=a("p"),Wur=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Qur=l(),Jd=a("p"),Hur=o(`Note:
Loading a model from its configuration file does `),Eve=a("strong"),Uur=o("not"),Jur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WQ=a("a"),Yur=o("from_pretrained()"),Kur=o(" to load the model weights."),Zur=l(),F(A7.$$.fragment),e1r=l(),yr=a("div"),F(kL.$$.fragment),o1r=l(),Cve=a("p"),r1r=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),t1r=l(),en=a("p"),a1r=o("The model class to instantiate is selected based on the "),wve=a("code"),n1r=o("model_type"),s1r=o(` property of the config object (either
passed as an argument or loaded from `),Ave=a("code"),l1r=o("pretrained_model_name_or_path"),i1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yve=a("code"),d1r=o("pretrained_model_name_or_path"),c1r=o(":"),f1r=l(),Me=a("ul"),y7=a("li"),Lve=a("strong"),m1r=o("bert"),g1r=o(" \u2014 "),QQ=a("a"),h1r=o("TFBertLMHeadModel"),p1r=o(" (BERT model)"),_1r=l(),L7=a("li"),xve=a("strong"),u1r=o("camembert"),b1r=o(" \u2014 "),HQ=a("a"),v1r=o("TFCamembertForCausalLM"),F1r=o(" (CamemBERT model)"),T1r=l(),x7=a("li"),$ve=a("strong"),M1r=o("ctrl"),E1r=o(" \u2014 "),UQ=a("a"),C1r=o("TFCTRLLMHeadModel"),w1r=o(" (CTRL model)"),A1r=l(),$7=a("li"),kve=a("strong"),y1r=o("gpt2"),L1r=o(" \u2014 "),JQ=a("a"),x1r=o("TFGPT2LMHeadModel"),$1r=o(" (OpenAI GPT-2 model)"),k1r=l(),k7=a("li"),Sve=a("strong"),S1r=o("gptj"),R1r=o(" \u2014 "),YQ=a("a"),P1r=o("TFGPTJForCausalLM"),B1r=o(" (GPT-J model)"),I1r=l(),S7=a("li"),Rve=a("strong"),N1r=o("openai-gpt"),q1r=o(" \u2014 "),KQ=a("a"),j1r=o("TFOpenAIGPTLMHeadModel"),D1r=o(" (OpenAI GPT model)"),G1r=l(),R7=a("li"),Pve=a("strong"),O1r=o("opt"),V1r=o(" \u2014 "),ZQ=a("a"),X1r=o("TFOPTForCausalLM"),z1r=o(" (OPT model)"),W1r=l(),P7=a("li"),Bve=a("strong"),Q1r=o("rembert"),H1r=o(" \u2014 "),eH=a("a"),U1r=o("TFRemBertForCausalLM"),J1r=o(" (RemBERT model)"),Y1r=l(),B7=a("li"),Ive=a("strong"),K1r=o("roberta"),Z1r=o(" \u2014 "),oH=a("a"),ebr=o("TFRobertaForCausalLM"),obr=o(" (RoBERTa model)"),rbr=l(),I7=a("li"),Nve=a("strong"),tbr=o("roformer"),abr=o(" \u2014 "),rH=a("a"),nbr=o("TFRoFormerForCausalLM"),sbr=o(" (RoFormer model)"),lbr=l(),N7=a("li"),qve=a("strong"),ibr=o("transfo-xl"),dbr=o(" \u2014 "),tH=a("a"),cbr=o("TFTransfoXLLMHeadModel"),fbr=o(" (Transformer-XL model)"),mbr=l(),q7=a("li"),jve=a("strong"),gbr=o("xlm"),hbr=o(" \u2014 "),aH=a("a"),pbr=o("TFXLMWithLMHeadModel"),_br=o(" (XLM model)"),ubr=l(),j7=a("li"),Dve=a("strong"),bbr=o("xlnet"),vbr=o(" \u2014 "),nH=a("a"),Fbr=o("TFXLNetLMHeadModel"),Tbr=o(" (XLNet model)"),Mbr=l(),F(D7.$$.fragment),Wje=l(),Yd=a("h2"),G7=a("a"),Gve=a("span"),F(SL.$$.fragment),Ebr=l(),Ove=a("span"),Cbr=o("TFAutoModelForImageClassification"),Qje=l(),er=a("div"),F(RL.$$.fragment),wbr=l(),Kd=a("p"),Abr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),sH=a("a"),ybr=o("from_pretrained()"),Lbr=o(" class method or the "),lH=a("a"),xbr=o("from_config()"),$br=o(` class
method.`),kbr=l(),PL=a("p"),Sbr=o("This class cannot be instantiated directly using "),Vve=a("code"),Rbr=o("__init__()"),Pbr=o(" (throws an error)."),Bbr=l(),$t=a("div"),F(BL.$$.fragment),Ibr=l(),Xve=a("p"),Nbr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),qbr=l(),Zd=a("p"),jbr=o(`Note:
Loading a model from its configuration file does `),zve=a("strong"),Dbr=o("not"),Gbr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iH=a("a"),Obr=o("from_pretrained()"),Vbr=o(" to load the model weights."),Xbr=l(),F(O7.$$.fragment),zbr=l(),Lr=a("div"),F(IL.$$.fragment),Wbr=l(),Wve=a("p"),Qbr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Hbr=l(),on=a("p"),Ubr=o("The model class to instantiate is selected based on the "),Qve=a("code"),Jbr=o("model_type"),Ybr=o(` property of the config object (either
passed as an argument or loaded from `),Hve=a("code"),Kbr=o("pretrained_model_name_or_path"),Zbr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uve=a("code"),e2r=o("pretrained_model_name_or_path"),o2r=o(":"),r2r=l(),rn=a("ul"),V7=a("li"),Jve=a("strong"),t2r=o("convnext"),a2r=o(" \u2014 "),dH=a("a"),n2r=o("TFConvNextForImageClassification"),s2r=o(" (ConvNeXT model)"),l2r=l(),X7=a("li"),Yve=a("strong"),i2r=o("data2vec-vision"),d2r=o(" \u2014 "),cH=a("a"),c2r=o("TFData2VecVisionForImageClassification"),f2r=o(" (Data2VecVision model)"),m2r=l(),z7=a("li"),Kve=a("strong"),g2r=o("swin"),h2r=o(" \u2014 "),fH=a("a"),p2r=o("TFSwinForImageClassification"),_2r=o(" (Swin Transformer model)"),u2r=l(),W7=a("li"),Zve=a("strong"),b2r=o("vit"),v2r=o(" \u2014 "),mH=a("a"),F2r=o("TFViTForImageClassification"),T2r=o(" (ViT model)"),M2r=l(),F(Q7.$$.fragment),Hje=l(),ec=a("h2"),H7=a("a"),e5e=a("span"),F(NL.$$.fragment),E2r=l(),o5e=a("span"),C2r=o("TFAutoModelForMaskedLM"),Uje=l(),or=a("div"),F(qL.$$.fragment),w2r=l(),oc=a("p"),A2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),gH=a("a"),y2r=o("from_pretrained()"),L2r=o(" class method or the "),hH=a("a"),x2r=o("from_config()"),$2r=o(` class
method.`),k2r=l(),jL=a("p"),S2r=o("This class cannot be instantiated directly using "),r5e=a("code"),R2r=o("__init__()"),P2r=o(" (throws an error)."),B2r=l(),kt=a("div"),F(DL.$$.fragment),I2r=l(),t5e=a("p"),N2r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),q2r=l(),rc=a("p"),j2r=o(`Note:
Loading a model from its configuration file does `),a5e=a("strong"),D2r=o("not"),G2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pH=a("a"),O2r=o("from_pretrained()"),V2r=o(" to load the model weights."),X2r=l(),F(U7.$$.fragment),z2r=l(),xr=a("div"),F(GL.$$.fragment),W2r=l(),n5e=a("p"),Q2r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),H2r=l(),tn=a("p"),U2r=o("The model class to instantiate is selected based on the "),s5e=a("code"),J2r=o("model_type"),Y2r=o(` property of the config object (either
passed as an argument or loaded from `),l5e=a("code"),K2r=o("pretrained_model_name_or_path"),Z2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i5e=a("code"),evr=o("pretrained_model_name_or_path"),ovr=o(":"),rvr=l(),ie=a("ul"),J7=a("li"),d5e=a("strong"),tvr=o("albert"),avr=o(" \u2014 "),_H=a("a"),nvr=o("TFAlbertForMaskedLM"),svr=o(" (ALBERT model)"),lvr=l(),Y7=a("li"),c5e=a("strong"),ivr=o("bert"),dvr=o(" \u2014 "),uH=a("a"),cvr=o("TFBertForMaskedLM"),fvr=o(" (BERT model)"),mvr=l(),K7=a("li"),f5e=a("strong"),gvr=o("camembert"),hvr=o(" \u2014 "),bH=a("a"),pvr=o("TFCamembertForMaskedLM"),_vr=o(" (CamemBERT model)"),uvr=l(),Z7=a("li"),m5e=a("strong"),bvr=o("convbert"),vvr=o(" \u2014 "),vH=a("a"),Fvr=o("TFConvBertForMaskedLM"),Tvr=o(" (ConvBERT model)"),Mvr=l(),e9=a("li"),g5e=a("strong"),Evr=o("deberta"),Cvr=o(" \u2014 "),FH=a("a"),wvr=o("TFDebertaForMaskedLM"),Avr=o(" (DeBERTa model)"),yvr=l(),o9=a("li"),h5e=a("strong"),Lvr=o("deberta-v2"),xvr=o(" \u2014 "),TH=a("a"),$vr=o("TFDebertaV2ForMaskedLM"),kvr=o(" (DeBERTa-v2 model)"),Svr=l(),r9=a("li"),p5e=a("strong"),Rvr=o("distilbert"),Pvr=o(" \u2014 "),MH=a("a"),Bvr=o("TFDistilBertForMaskedLM"),Ivr=o(" (DistilBERT model)"),Nvr=l(),t9=a("li"),_5e=a("strong"),qvr=o("electra"),jvr=o(" \u2014 "),EH=a("a"),Dvr=o("TFElectraForMaskedLM"),Gvr=o(" (ELECTRA model)"),Ovr=l(),a9=a("li"),u5e=a("strong"),Vvr=o("flaubert"),Xvr=o(" \u2014 "),CH=a("a"),zvr=o("TFFlaubertWithLMHeadModel"),Wvr=o(" (FlauBERT model)"),Qvr=l(),n9=a("li"),b5e=a("strong"),Hvr=o("funnel"),Uvr=o(" \u2014 "),wH=a("a"),Jvr=o("TFFunnelForMaskedLM"),Yvr=o(" (Funnel Transformer model)"),Kvr=l(),s9=a("li"),v5e=a("strong"),Zvr=o("layoutlm"),e5r=o(" \u2014 "),AH=a("a"),o5r=o("TFLayoutLMForMaskedLM"),r5r=o(" (LayoutLM model)"),t5r=l(),l9=a("li"),F5e=a("strong"),a5r=o("longformer"),n5r=o(" \u2014 "),yH=a("a"),s5r=o("TFLongformerForMaskedLM"),l5r=o(" (Longformer model)"),i5r=l(),i9=a("li"),T5e=a("strong"),d5r=o("mobilebert"),c5r=o(" \u2014 "),LH=a("a"),f5r=o("TFMobileBertForMaskedLM"),m5r=o(" (MobileBERT model)"),g5r=l(),d9=a("li"),M5e=a("strong"),h5r=o("mpnet"),p5r=o(" \u2014 "),xH=a("a"),_5r=o("TFMPNetForMaskedLM"),u5r=o(" (MPNet model)"),b5r=l(),c9=a("li"),E5e=a("strong"),v5r=o("rembert"),F5r=o(" \u2014 "),$H=a("a"),T5r=o("TFRemBertForMaskedLM"),M5r=o(" (RemBERT model)"),E5r=l(),f9=a("li"),C5e=a("strong"),C5r=o("roberta"),w5r=o(" \u2014 "),kH=a("a"),A5r=o("TFRobertaForMaskedLM"),y5r=o(" (RoBERTa model)"),L5r=l(),m9=a("li"),w5e=a("strong"),x5r=o("roformer"),$5r=o(" \u2014 "),SH=a("a"),k5r=o("TFRoFormerForMaskedLM"),S5r=o(" (RoFormer model)"),R5r=l(),g9=a("li"),A5e=a("strong"),P5r=o("tapas"),B5r=o(" \u2014 "),RH=a("a"),I5r=o("TFTapasForMaskedLM"),N5r=o(" (TAPAS model)"),q5r=l(),h9=a("li"),y5e=a("strong"),j5r=o("xlm"),D5r=o(" \u2014 "),PH=a("a"),G5r=o("TFXLMWithLMHeadModel"),O5r=o(" (XLM model)"),V5r=l(),p9=a("li"),L5e=a("strong"),X5r=o("xlm-roberta"),z5r=o(" \u2014 "),BH=a("a"),W5r=o("TFXLMRobertaForMaskedLM"),Q5r=o(" (XLM-RoBERTa model)"),H5r=l(),F(_9.$$.fragment),Jje=l(),tc=a("h2"),u9=a("a"),x5e=a("span"),F(OL.$$.fragment),U5r=l(),$5e=a("span"),J5r=o("TFAutoModelForSeq2SeqLM"),Yje=l(),rr=a("div"),F(VL.$$.fragment),Y5r=l(),ac=a("p"),K5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),IH=a("a"),Z5r=o("from_pretrained()"),e3r=o(" class method or the "),NH=a("a"),o3r=o("from_config()"),r3r=o(` class
method.`),t3r=l(),XL=a("p"),a3r=o("This class cannot be instantiated directly using "),k5e=a("code"),n3r=o("__init__()"),s3r=o(" (throws an error)."),l3r=l(),St=a("div"),F(zL.$$.fragment),i3r=l(),S5e=a("p"),d3r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),c3r=l(),nc=a("p"),f3r=o(`Note:
Loading a model from its configuration file does `),R5e=a("strong"),m3r=o("not"),g3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qH=a("a"),h3r=o("from_pretrained()"),p3r=o(" to load the model weights."),_3r=l(),F(b9.$$.fragment),u3r=l(),$r=a("div"),F(WL.$$.fragment),b3r=l(),P5e=a("p"),v3r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),F3r=l(),an=a("p"),T3r=o("The model class to instantiate is selected based on the "),B5e=a("code"),M3r=o("model_type"),E3r=o(` property of the config object (either
passed as an argument or loaded from `),I5e=a("code"),C3r=o("pretrained_model_name_or_path"),w3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N5e=a("code"),A3r=o("pretrained_model_name_or_path"),y3r=o(":"),L3r=l(),ye=a("ul"),v9=a("li"),q5e=a("strong"),x3r=o("bart"),$3r=o(" \u2014 "),jH=a("a"),k3r=o("TFBartForConditionalGeneration"),S3r=o(" (BART model)"),R3r=l(),F9=a("li"),j5e=a("strong"),P3r=o("blenderbot"),B3r=o(" \u2014 "),DH=a("a"),I3r=o("TFBlenderbotForConditionalGeneration"),N3r=o(" (Blenderbot model)"),q3r=l(),T9=a("li"),D5e=a("strong"),j3r=o("blenderbot-small"),D3r=o(" \u2014 "),GH=a("a"),G3r=o("TFBlenderbotSmallForConditionalGeneration"),O3r=o(" (BlenderbotSmall model)"),V3r=l(),M9=a("li"),G5e=a("strong"),X3r=o("encoder-decoder"),z3r=o(" \u2014 "),OH=a("a"),W3r=o("TFEncoderDecoderModel"),Q3r=o(" (Encoder decoder model)"),H3r=l(),E9=a("li"),O5e=a("strong"),U3r=o("led"),J3r=o(" \u2014 "),VH=a("a"),Y3r=o("TFLEDForConditionalGeneration"),K3r=o(" (LED model)"),Z3r=l(),C9=a("li"),V5e=a("strong"),eFr=o("marian"),oFr=o(" \u2014 "),XH=a("a"),rFr=o("TFMarianMTModel"),tFr=o(" (Marian model)"),aFr=l(),w9=a("li"),X5e=a("strong"),nFr=o("mbart"),sFr=o(" \u2014 "),zH=a("a"),lFr=o("TFMBartForConditionalGeneration"),iFr=o(" (mBART model)"),dFr=l(),A9=a("li"),z5e=a("strong"),cFr=o("mt5"),fFr=o(" \u2014 "),WH=a("a"),mFr=o("TFMT5ForConditionalGeneration"),gFr=o(" (MT5 model)"),hFr=l(),y9=a("li"),W5e=a("strong"),pFr=o("pegasus"),_Fr=o(" \u2014 "),QH=a("a"),uFr=o("TFPegasusForConditionalGeneration"),bFr=o(" (Pegasus model)"),vFr=l(),L9=a("li"),Q5e=a("strong"),FFr=o("t5"),TFr=o(" \u2014 "),HH=a("a"),MFr=o("TFT5ForConditionalGeneration"),EFr=o(" (T5 model)"),CFr=l(),F(x9.$$.fragment),Kje=l(),sc=a("h2"),$9=a("a"),H5e=a("span"),F(QL.$$.fragment),wFr=l(),U5e=a("span"),AFr=o("TFAutoModelForSequenceClassification"),Zje=l(),tr=a("div"),F(HL.$$.fragment),yFr=l(),lc=a("p"),LFr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),UH=a("a"),xFr=o("from_pretrained()"),$Fr=o(" class method or the "),JH=a("a"),kFr=o("from_config()"),SFr=o(` class
method.`),RFr=l(),UL=a("p"),PFr=o("This class cannot be instantiated directly using "),J5e=a("code"),BFr=o("__init__()"),IFr=o(" (throws an error)."),NFr=l(),Rt=a("div"),F(JL.$$.fragment),qFr=l(),Y5e=a("p"),jFr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),DFr=l(),ic=a("p"),GFr=o(`Note:
Loading a model from its configuration file does `),K5e=a("strong"),OFr=o("not"),VFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YH=a("a"),XFr=o("from_pretrained()"),zFr=o(" to load the model weights."),WFr=l(),F(k9.$$.fragment),QFr=l(),kr=a("div"),F(YL.$$.fragment),HFr=l(),Z5e=a("p"),UFr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),JFr=l(),nn=a("p"),YFr=o("The model class to instantiate is selected based on the "),e3e=a("code"),KFr=o("model_type"),ZFr=o(` property of the config object (either
passed as an argument or loaded from `),o3e=a("code"),eTr=o("pretrained_model_name_or_path"),oTr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r3e=a("code"),rTr=o("pretrained_model_name_or_path"),tTr=o(":"),aTr=l(),oe=a("ul"),S9=a("li"),t3e=a("strong"),nTr=o("albert"),sTr=o(" \u2014 "),KH=a("a"),lTr=o("TFAlbertForSequenceClassification"),iTr=o(" (ALBERT model)"),dTr=l(),R9=a("li"),a3e=a("strong"),cTr=o("bert"),fTr=o(" \u2014 "),ZH=a("a"),mTr=o("TFBertForSequenceClassification"),gTr=o(" (BERT model)"),hTr=l(),P9=a("li"),n3e=a("strong"),pTr=o("camembert"),_Tr=o(" \u2014 "),eU=a("a"),uTr=o("TFCamembertForSequenceClassification"),bTr=o(" (CamemBERT model)"),vTr=l(),B9=a("li"),s3e=a("strong"),FTr=o("convbert"),TTr=o(" \u2014 "),oU=a("a"),MTr=o("TFConvBertForSequenceClassification"),ETr=o(" (ConvBERT model)"),CTr=l(),I9=a("li"),l3e=a("strong"),wTr=o("ctrl"),ATr=o(" \u2014 "),rU=a("a"),yTr=o("TFCTRLForSequenceClassification"),LTr=o(" (CTRL model)"),xTr=l(),N9=a("li"),i3e=a("strong"),$Tr=o("deberta"),kTr=o(" \u2014 "),tU=a("a"),STr=o("TFDebertaForSequenceClassification"),RTr=o(" (DeBERTa model)"),PTr=l(),q9=a("li"),d3e=a("strong"),BTr=o("deberta-v2"),ITr=o(" \u2014 "),aU=a("a"),NTr=o("TFDebertaV2ForSequenceClassification"),qTr=o(" (DeBERTa-v2 model)"),jTr=l(),j9=a("li"),c3e=a("strong"),DTr=o("distilbert"),GTr=o(" \u2014 "),nU=a("a"),OTr=o("TFDistilBertForSequenceClassification"),VTr=o(" (DistilBERT model)"),XTr=l(),D9=a("li"),f3e=a("strong"),zTr=o("electra"),WTr=o(" \u2014 "),sU=a("a"),QTr=o("TFElectraForSequenceClassification"),HTr=o(" (ELECTRA model)"),UTr=l(),G9=a("li"),m3e=a("strong"),JTr=o("flaubert"),YTr=o(" \u2014 "),lU=a("a"),KTr=o("TFFlaubertForSequenceClassification"),ZTr=o(" (FlauBERT model)"),e7r=l(),O9=a("li"),g3e=a("strong"),o7r=o("funnel"),r7r=o(" \u2014 "),iU=a("a"),t7r=o("TFFunnelForSequenceClassification"),a7r=o(" (Funnel Transformer model)"),n7r=l(),V9=a("li"),h3e=a("strong"),s7r=o("gpt2"),l7r=o(" \u2014 "),dU=a("a"),i7r=o("TFGPT2ForSequenceClassification"),d7r=o(" (OpenAI GPT-2 model)"),c7r=l(),X9=a("li"),p3e=a("strong"),f7r=o("gptj"),m7r=o(" \u2014 "),cU=a("a"),g7r=o("TFGPTJForSequenceClassification"),h7r=o(" (GPT-J model)"),p7r=l(),z9=a("li"),_3e=a("strong"),_7r=o("layoutlm"),u7r=o(" \u2014 "),fU=a("a"),b7r=o("TFLayoutLMForSequenceClassification"),v7r=o(" (LayoutLM model)"),F7r=l(),W9=a("li"),u3e=a("strong"),T7r=o("longformer"),M7r=o(" \u2014 "),mU=a("a"),E7r=o("TFLongformerForSequenceClassification"),C7r=o(" (Longformer model)"),w7r=l(),Q9=a("li"),b3e=a("strong"),A7r=o("mobilebert"),y7r=o(" \u2014 "),gU=a("a"),L7r=o("TFMobileBertForSequenceClassification"),x7r=o(" (MobileBERT model)"),$7r=l(),H9=a("li"),v3e=a("strong"),k7r=o("mpnet"),S7r=o(" \u2014 "),hU=a("a"),R7r=o("TFMPNetForSequenceClassification"),P7r=o(" (MPNet model)"),B7r=l(),U9=a("li"),F3e=a("strong"),I7r=o("openai-gpt"),N7r=o(" \u2014 "),pU=a("a"),q7r=o("TFOpenAIGPTForSequenceClassification"),j7r=o(" (OpenAI GPT model)"),D7r=l(),J9=a("li"),T3e=a("strong"),G7r=o("rembert"),O7r=o(" \u2014 "),_U=a("a"),V7r=o("TFRemBertForSequenceClassification"),X7r=o(" (RemBERT model)"),z7r=l(),Y9=a("li"),M3e=a("strong"),W7r=o("roberta"),Q7r=o(" \u2014 "),uU=a("a"),H7r=o("TFRobertaForSequenceClassification"),U7r=o(" (RoBERTa model)"),J7r=l(),K9=a("li"),E3e=a("strong"),Y7r=o("roformer"),K7r=o(" \u2014 "),bU=a("a"),Z7r=o("TFRoFormerForSequenceClassification"),e9r=o(" (RoFormer model)"),o9r=l(),Z9=a("li"),C3e=a("strong"),r9r=o("tapas"),t9r=o(" \u2014 "),vU=a("a"),a9r=o("TFTapasForSequenceClassification"),n9r=o(" (TAPAS model)"),s9r=l(),eM=a("li"),w3e=a("strong"),l9r=o("transfo-xl"),i9r=o(" \u2014 "),FU=a("a"),d9r=o("TFTransfoXLForSequenceClassification"),c9r=o(" (Transformer-XL model)"),f9r=l(),oM=a("li"),A3e=a("strong"),m9r=o("xlm"),g9r=o(" \u2014 "),TU=a("a"),h9r=o("TFXLMForSequenceClassification"),p9r=o(" (XLM model)"),_9r=l(),rM=a("li"),y3e=a("strong"),u9r=o("xlm-roberta"),b9r=o(" \u2014 "),MU=a("a"),v9r=o("TFXLMRobertaForSequenceClassification"),F9r=o(" (XLM-RoBERTa model)"),T9r=l(),tM=a("li"),L3e=a("strong"),M9r=o("xlnet"),E9r=o(" \u2014 "),EU=a("a"),C9r=o("TFXLNetForSequenceClassification"),w9r=o(" (XLNet model)"),A9r=l(),F(aM.$$.fragment),eDe=l(),dc=a("h2"),nM=a("a"),x3e=a("span"),F(KL.$$.fragment),y9r=l(),$3e=a("span"),L9r=o("TFAutoModelForMultipleChoice"),oDe=l(),ar=a("div"),F(ZL.$$.fragment),x9r=l(),cc=a("p"),$9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),CU=a("a"),k9r=o("from_pretrained()"),S9r=o(" class method or the "),wU=a("a"),R9r=o("from_config()"),P9r=o(` class
method.`),B9r=l(),e8=a("p"),I9r=o("This class cannot be instantiated directly using "),k3e=a("code"),N9r=o("__init__()"),q9r=o(" (throws an error)."),j9r=l(),Pt=a("div"),F(o8.$$.fragment),D9r=l(),S3e=a("p"),G9r=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),O9r=l(),fc=a("p"),V9r=o(`Note:
Loading a model from its configuration file does `),R3e=a("strong"),X9r=o("not"),z9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AU=a("a"),W9r=o("from_pretrained()"),Q9r=o(" to load the model weights."),H9r=l(),F(sM.$$.fragment),U9r=l(),Sr=a("div"),F(r8.$$.fragment),J9r=l(),P3e=a("p"),Y9r=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),K9r=l(),sn=a("p"),Z9r=o("The model class to instantiate is selected based on the "),B3e=a("code"),eMr=o("model_type"),oMr=o(` property of the config object (either
passed as an argument or loaded from `),I3e=a("code"),rMr=o("pretrained_model_name_or_path"),tMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N3e=a("code"),aMr=o("pretrained_model_name_or_path"),nMr=o(":"),sMr=l(),pe=a("ul"),lM=a("li"),q3e=a("strong"),lMr=o("albert"),iMr=o(" \u2014 "),yU=a("a"),dMr=o("TFAlbertForMultipleChoice"),cMr=o(" (ALBERT model)"),fMr=l(),iM=a("li"),j3e=a("strong"),mMr=o("bert"),gMr=o(" \u2014 "),LU=a("a"),hMr=o("TFBertForMultipleChoice"),pMr=o(" (BERT model)"),_Mr=l(),dM=a("li"),D3e=a("strong"),uMr=o("camembert"),bMr=o(" \u2014 "),xU=a("a"),vMr=o("TFCamembertForMultipleChoice"),FMr=o(" (CamemBERT model)"),TMr=l(),cM=a("li"),G3e=a("strong"),MMr=o("convbert"),EMr=o(" \u2014 "),$U=a("a"),CMr=o("TFConvBertForMultipleChoice"),wMr=o(" (ConvBERT model)"),AMr=l(),fM=a("li"),O3e=a("strong"),yMr=o("distilbert"),LMr=o(" \u2014 "),kU=a("a"),xMr=o("TFDistilBertForMultipleChoice"),$Mr=o(" (DistilBERT model)"),kMr=l(),mM=a("li"),V3e=a("strong"),SMr=o("electra"),RMr=o(" \u2014 "),SU=a("a"),PMr=o("TFElectraForMultipleChoice"),BMr=o(" (ELECTRA model)"),IMr=l(),gM=a("li"),X3e=a("strong"),NMr=o("flaubert"),qMr=o(" \u2014 "),RU=a("a"),jMr=o("TFFlaubertForMultipleChoice"),DMr=o(" (FlauBERT model)"),GMr=l(),hM=a("li"),z3e=a("strong"),OMr=o("funnel"),VMr=o(" \u2014 "),PU=a("a"),XMr=o("TFFunnelForMultipleChoice"),zMr=o(" (Funnel Transformer model)"),WMr=l(),pM=a("li"),W3e=a("strong"),QMr=o("longformer"),HMr=o(" \u2014 "),BU=a("a"),UMr=o("TFLongformerForMultipleChoice"),JMr=o(" (Longformer model)"),YMr=l(),_M=a("li"),Q3e=a("strong"),KMr=o("mobilebert"),ZMr=o(" \u2014 "),IU=a("a"),e4r=o("TFMobileBertForMultipleChoice"),o4r=o(" (MobileBERT model)"),r4r=l(),uM=a("li"),H3e=a("strong"),t4r=o("mpnet"),a4r=o(" \u2014 "),NU=a("a"),n4r=o("TFMPNetForMultipleChoice"),s4r=o(" (MPNet model)"),l4r=l(),bM=a("li"),U3e=a("strong"),i4r=o("rembert"),d4r=o(" \u2014 "),qU=a("a"),c4r=o("TFRemBertForMultipleChoice"),f4r=o(" (RemBERT model)"),m4r=l(),vM=a("li"),J3e=a("strong"),g4r=o("roberta"),h4r=o(" \u2014 "),jU=a("a"),p4r=o("TFRobertaForMultipleChoice"),_4r=o(" (RoBERTa model)"),u4r=l(),FM=a("li"),Y3e=a("strong"),b4r=o("roformer"),v4r=o(" \u2014 "),DU=a("a"),F4r=o("TFRoFormerForMultipleChoice"),T4r=o(" (RoFormer model)"),M4r=l(),TM=a("li"),K3e=a("strong"),E4r=o("xlm"),C4r=o(" \u2014 "),GU=a("a"),w4r=o("TFXLMForMultipleChoice"),A4r=o(" (XLM model)"),y4r=l(),MM=a("li"),Z3e=a("strong"),L4r=o("xlm-roberta"),x4r=o(" \u2014 "),OU=a("a"),$4r=o("TFXLMRobertaForMultipleChoice"),k4r=o(" (XLM-RoBERTa model)"),S4r=l(),EM=a("li"),eFe=a("strong"),R4r=o("xlnet"),P4r=o(" \u2014 "),VU=a("a"),B4r=o("TFXLNetForMultipleChoice"),I4r=o(" (XLNet model)"),N4r=l(),F(CM.$$.fragment),rDe=l(),mc=a("h2"),wM=a("a"),oFe=a("span"),F(t8.$$.fragment),q4r=l(),rFe=a("span"),j4r=o("TFAutoModelForNextSentencePrediction"),tDe=l(),nr=a("div"),F(a8.$$.fragment),D4r=l(),gc=a("p"),G4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),XU=a("a"),O4r=o("from_pretrained()"),V4r=o(" class method or the "),zU=a("a"),X4r=o("from_config()"),z4r=o(` class
method.`),W4r=l(),n8=a("p"),Q4r=o("This class cannot be instantiated directly using "),tFe=a("code"),H4r=o("__init__()"),U4r=o(" (throws an error)."),J4r=l(),Bt=a("div"),F(s8.$$.fragment),Y4r=l(),aFe=a("p"),K4r=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Z4r=l(),hc=a("p"),eEr=o(`Note:
Loading a model from its configuration file does `),nFe=a("strong"),oEr=o("not"),rEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WU=a("a"),tEr=o("from_pretrained()"),aEr=o(" to load the model weights."),nEr=l(),F(AM.$$.fragment),sEr=l(),Rr=a("div"),F(l8.$$.fragment),lEr=l(),sFe=a("p"),iEr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),dEr=l(),ln=a("p"),cEr=o("The model class to instantiate is selected based on the "),lFe=a("code"),fEr=o("model_type"),mEr=o(` property of the config object (either
passed as an argument or loaded from `),iFe=a("code"),gEr=o("pretrained_model_name_or_path"),hEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dFe=a("code"),pEr=o("pretrained_model_name_or_path"),_Er=o(":"),uEr=l(),i8=a("ul"),yM=a("li"),cFe=a("strong"),bEr=o("bert"),vEr=o(" \u2014 "),QU=a("a"),FEr=o("TFBertForNextSentencePrediction"),TEr=o(" (BERT model)"),MEr=l(),LM=a("li"),fFe=a("strong"),EEr=o("mobilebert"),CEr=o(" \u2014 "),HU=a("a"),wEr=o("TFMobileBertForNextSentencePrediction"),AEr=o(" (MobileBERT model)"),yEr=l(),F(xM.$$.fragment),aDe=l(),pc=a("h2"),$M=a("a"),mFe=a("span"),F(d8.$$.fragment),LEr=l(),gFe=a("span"),xEr=o("TFAutoModelForTableQuestionAnswering"),nDe=l(),sr=a("div"),F(c8.$$.fragment),$Er=l(),_c=a("p"),kEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),UU=a("a"),SEr=o("from_pretrained()"),REr=o(" class method or the "),JU=a("a"),PEr=o("from_config()"),BEr=o(` class
method.`),IEr=l(),f8=a("p"),NEr=o("This class cannot be instantiated directly using "),hFe=a("code"),qEr=o("__init__()"),jEr=o(" (throws an error)."),DEr=l(),It=a("div"),F(m8.$$.fragment),GEr=l(),pFe=a("p"),OEr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),VEr=l(),uc=a("p"),XEr=o(`Note:
Loading a model from its configuration file does `),_Fe=a("strong"),zEr=o("not"),WEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YU=a("a"),QEr=o("from_pretrained()"),HEr=o(" to load the model weights."),UEr=l(),F(kM.$$.fragment),JEr=l(),Pr=a("div"),F(g8.$$.fragment),YEr=l(),uFe=a("p"),KEr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),ZEr=l(),dn=a("p"),eCr=o("The model class to instantiate is selected based on the "),bFe=a("code"),oCr=o("model_type"),rCr=o(` property of the config object (either
passed as an argument or loaded from `),vFe=a("code"),tCr=o("pretrained_model_name_or_path"),aCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),FFe=a("code"),nCr=o("pretrained_model_name_or_path"),sCr=o(":"),lCr=l(),TFe=a("ul"),SM=a("li"),MFe=a("strong"),iCr=o("tapas"),dCr=o(" \u2014 "),KU=a("a"),cCr=o("TFTapasForQuestionAnswering"),fCr=o(" (TAPAS model)"),mCr=l(),F(RM.$$.fragment),sDe=l(),bc=a("h2"),PM=a("a"),EFe=a("span"),F(h8.$$.fragment),gCr=l(),CFe=a("span"),hCr=o("TFAutoModelForTokenClassification"),lDe=l(),lr=a("div"),F(p8.$$.fragment),pCr=l(),vc=a("p"),_Cr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),ZU=a("a"),uCr=o("from_pretrained()"),bCr=o(" class method or the "),eJ=a("a"),vCr=o("from_config()"),FCr=o(` class
method.`),TCr=l(),_8=a("p"),MCr=o("This class cannot be instantiated directly using "),wFe=a("code"),ECr=o("__init__()"),CCr=o(" (throws an error)."),wCr=l(),Nt=a("div"),F(u8.$$.fragment),ACr=l(),AFe=a("p"),yCr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),LCr=l(),Fc=a("p"),xCr=o(`Note:
Loading a model from its configuration file does `),yFe=a("strong"),$Cr=o("not"),kCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oJ=a("a"),SCr=o("from_pretrained()"),RCr=o(" to load the model weights."),PCr=l(),F(BM.$$.fragment),BCr=l(),Br=a("div"),F(b8.$$.fragment),ICr=l(),LFe=a("p"),NCr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),qCr=l(),cn=a("p"),jCr=o("The model class to instantiate is selected based on the "),xFe=a("code"),DCr=o("model_type"),GCr=o(` property of the config object (either
passed as an argument or loaded from `),$Fe=a("code"),OCr=o("pretrained_model_name_or_path"),VCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kFe=a("code"),XCr=o("pretrained_model_name_or_path"),zCr=o(":"),WCr=l(),de=a("ul"),IM=a("li"),SFe=a("strong"),QCr=o("albert"),HCr=o(" \u2014 "),rJ=a("a"),UCr=o("TFAlbertForTokenClassification"),JCr=o(" (ALBERT model)"),YCr=l(),NM=a("li"),RFe=a("strong"),KCr=o("bert"),ZCr=o(" \u2014 "),tJ=a("a"),e0r=o("TFBertForTokenClassification"),o0r=o(" (BERT model)"),r0r=l(),qM=a("li"),PFe=a("strong"),t0r=o("camembert"),a0r=o(" \u2014 "),aJ=a("a"),n0r=o("TFCamembertForTokenClassification"),s0r=o(" (CamemBERT model)"),l0r=l(),jM=a("li"),BFe=a("strong"),i0r=o("convbert"),d0r=o(" \u2014 "),nJ=a("a"),c0r=o("TFConvBertForTokenClassification"),f0r=o(" (ConvBERT model)"),m0r=l(),DM=a("li"),IFe=a("strong"),g0r=o("deberta"),h0r=o(" \u2014 "),sJ=a("a"),p0r=o("TFDebertaForTokenClassification"),_0r=o(" (DeBERTa model)"),u0r=l(),GM=a("li"),NFe=a("strong"),b0r=o("deberta-v2"),v0r=o(" \u2014 "),lJ=a("a"),F0r=o("TFDebertaV2ForTokenClassification"),T0r=o(" (DeBERTa-v2 model)"),M0r=l(),OM=a("li"),qFe=a("strong"),E0r=o("distilbert"),C0r=o(" \u2014 "),iJ=a("a"),w0r=o("TFDistilBertForTokenClassification"),A0r=o(" (DistilBERT model)"),y0r=l(),VM=a("li"),jFe=a("strong"),L0r=o("electra"),x0r=o(" \u2014 "),dJ=a("a"),$0r=o("TFElectraForTokenClassification"),k0r=o(" (ELECTRA model)"),S0r=l(),XM=a("li"),DFe=a("strong"),R0r=o("flaubert"),P0r=o(" \u2014 "),cJ=a("a"),B0r=o("TFFlaubertForTokenClassification"),I0r=o(" (FlauBERT model)"),N0r=l(),zM=a("li"),GFe=a("strong"),q0r=o("funnel"),j0r=o(" \u2014 "),fJ=a("a"),D0r=o("TFFunnelForTokenClassification"),G0r=o(" (Funnel Transformer model)"),O0r=l(),WM=a("li"),OFe=a("strong"),V0r=o("layoutlm"),X0r=o(" \u2014 "),mJ=a("a"),z0r=o("TFLayoutLMForTokenClassification"),W0r=o(" (LayoutLM model)"),Q0r=l(),QM=a("li"),VFe=a("strong"),H0r=o("longformer"),U0r=o(" \u2014 "),gJ=a("a"),J0r=o("TFLongformerForTokenClassification"),Y0r=o(" (Longformer model)"),K0r=l(),HM=a("li"),XFe=a("strong"),Z0r=o("mobilebert"),ewr=o(" \u2014 "),hJ=a("a"),owr=o("TFMobileBertForTokenClassification"),rwr=o(" (MobileBERT model)"),twr=l(),UM=a("li"),zFe=a("strong"),awr=o("mpnet"),nwr=o(" \u2014 "),pJ=a("a"),swr=o("TFMPNetForTokenClassification"),lwr=o(" (MPNet model)"),iwr=l(),JM=a("li"),WFe=a("strong"),dwr=o("rembert"),cwr=o(" \u2014 "),_J=a("a"),fwr=o("TFRemBertForTokenClassification"),mwr=o(" (RemBERT model)"),gwr=l(),YM=a("li"),QFe=a("strong"),hwr=o("roberta"),pwr=o(" \u2014 "),uJ=a("a"),_wr=o("TFRobertaForTokenClassification"),uwr=o(" (RoBERTa model)"),bwr=l(),KM=a("li"),HFe=a("strong"),vwr=o("roformer"),Fwr=o(" \u2014 "),bJ=a("a"),Twr=o("TFRoFormerForTokenClassification"),Mwr=o(" (RoFormer model)"),Ewr=l(),ZM=a("li"),UFe=a("strong"),Cwr=o("xlm"),wwr=o(" \u2014 "),vJ=a("a"),Awr=o("TFXLMForTokenClassification"),ywr=o(" (XLM model)"),Lwr=l(),e4=a("li"),JFe=a("strong"),xwr=o("xlm-roberta"),$wr=o(" \u2014 "),FJ=a("a"),kwr=o("TFXLMRobertaForTokenClassification"),Swr=o(" (XLM-RoBERTa model)"),Rwr=l(),o4=a("li"),YFe=a("strong"),Pwr=o("xlnet"),Bwr=o(" \u2014 "),TJ=a("a"),Iwr=o("TFXLNetForTokenClassification"),Nwr=o(" (XLNet model)"),qwr=l(),F(r4.$$.fragment),iDe=l(),Tc=a("h2"),t4=a("a"),KFe=a("span"),F(v8.$$.fragment),jwr=l(),ZFe=a("span"),Dwr=o("TFAutoModelForQuestionAnswering"),dDe=l(),ir=a("div"),F(F8.$$.fragment),Gwr=l(),Mc=a("p"),Owr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),MJ=a("a"),Vwr=o("from_pretrained()"),Xwr=o(" class method or the "),EJ=a("a"),zwr=o("from_config()"),Wwr=o(` class
method.`),Qwr=l(),T8=a("p"),Hwr=o("This class cannot be instantiated directly using "),eTe=a("code"),Uwr=o("__init__()"),Jwr=o(" (throws an error)."),Ywr=l(),qt=a("div"),F(M8.$$.fragment),Kwr=l(),oTe=a("p"),Zwr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),eAr=l(),Ec=a("p"),oAr=o(`Note:
Loading a model from its configuration file does `),rTe=a("strong"),rAr=o("not"),tAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CJ=a("a"),aAr=o("from_pretrained()"),nAr=o(" to load the model weights."),sAr=l(),F(a4.$$.fragment),lAr=l(),Ir=a("div"),F(E8.$$.fragment),iAr=l(),tTe=a("p"),dAr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),cAr=l(),fn=a("p"),fAr=o("The model class to instantiate is selected based on the "),aTe=a("code"),mAr=o("model_type"),gAr=o(` property of the config object (either
passed as an argument or loaded from `),nTe=a("code"),hAr=o("pretrained_model_name_or_path"),pAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sTe=a("code"),_Ar=o("pretrained_model_name_or_path"),uAr=o(":"),bAr=l(),ce=a("ul"),n4=a("li"),lTe=a("strong"),vAr=o("albert"),FAr=o(" \u2014 "),wJ=a("a"),TAr=o("TFAlbertForQuestionAnswering"),MAr=o(" (ALBERT model)"),EAr=l(),s4=a("li"),iTe=a("strong"),CAr=o("bert"),wAr=o(" \u2014 "),AJ=a("a"),AAr=o("TFBertForQuestionAnswering"),yAr=o(" (BERT model)"),LAr=l(),l4=a("li"),dTe=a("strong"),xAr=o("camembert"),$Ar=o(" \u2014 "),yJ=a("a"),kAr=o("TFCamembertForQuestionAnswering"),SAr=o(" (CamemBERT model)"),RAr=l(),i4=a("li"),cTe=a("strong"),PAr=o("convbert"),BAr=o(" \u2014 "),LJ=a("a"),IAr=o("TFConvBertForQuestionAnswering"),NAr=o(" (ConvBERT model)"),qAr=l(),d4=a("li"),fTe=a("strong"),jAr=o("deberta"),DAr=o(" \u2014 "),xJ=a("a"),GAr=o("TFDebertaForQuestionAnswering"),OAr=o(" (DeBERTa model)"),VAr=l(),c4=a("li"),mTe=a("strong"),XAr=o("deberta-v2"),zAr=o(" \u2014 "),$J=a("a"),WAr=o("TFDebertaV2ForQuestionAnswering"),QAr=o(" (DeBERTa-v2 model)"),HAr=l(),f4=a("li"),gTe=a("strong"),UAr=o("distilbert"),JAr=o(" \u2014 "),kJ=a("a"),YAr=o("TFDistilBertForQuestionAnswering"),KAr=o(" (DistilBERT model)"),ZAr=l(),m4=a("li"),hTe=a("strong"),e6r=o("electra"),o6r=o(" \u2014 "),SJ=a("a"),r6r=o("TFElectraForQuestionAnswering"),t6r=o(" (ELECTRA model)"),a6r=l(),g4=a("li"),pTe=a("strong"),n6r=o("flaubert"),s6r=o(" \u2014 "),RJ=a("a"),l6r=o("TFFlaubertForQuestionAnsweringSimple"),i6r=o(" (FlauBERT model)"),d6r=l(),h4=a("li"),_Te=a("strong"),c6r=o("funnel"),f6r=o(" \u2014 "),PJ=a("a"),m6r=o("TFFunnelForQuestionAnswering"),g6r=o(" (Funnel Transformer model)"),h6r=l(),p4=a("li"),uTe=a("strong"),p6r=o("gptj"),_6r=o(" \u2014 "),BJ=a("a"),u6r=o("TFGPTJForQuestionAnswering"),b6r=o(" (GPT-J model)"),v6r=l(),_4=a("li"),bTe=a("strong"),F6r=o("longformer"),T6r=o(" \u2014 "),IJ=a("a"),M6r=o("TFLongformerForQuestionAnswering"),E6r=o(" (Longformer model)"),C6r=l(),u4=a("li"),vTe=a("strong"),w6r=o("mobilebert"),A6r=o(" \u2014 "),NJ=a("a"),y6r=o("TFMobileBertForQuestionAnswering"),L6r=o(" (MobileBERT model)"),x6r=l(),b4=a("li"),FTe=a("strong"),$6r=o("mpnet"),k6r=o(" \u2014 "),qJ=a("a"),S6r=o("TFMPNetForQuestionAnswering"),R6r=o(" (MPNet model)"),P6r=l(),v4=a("li"),TTe=a("strong"),B6r=o("rembert"),I6r=o(" \u2014 "),jJ=a("a"),N6r=o("TFRemBertForQuestionAnswering"),q6r=o(" (RemBERT model)"),j6r=l(),F4=a("li"),MTe=a("strong"),D6r=o("roberta"),G6r=o(" \u2014 "),DJ=a("a"),O6r=o("TFRobertaForQuestionAnswering"),V6r=o(" (RoBERTa model)"),X6r=l(),T4=a("li"),ETe=a("strong"),z6r=o("roformer"),W6r=o(" \u2014 "),GJ=a("a"),Q6r=o("TFRoFormerForQuestionAnswering"),H6r=o(" (RoFormer model)"),U6r=l(),M4=a("li"),CTe=a("strong"),J6r=o("xlm"),Y6r=o(" \u2014 "),OJ=a("a"),K6r=o("TFXLMForQuestionAnsweringSimple"),Z6r=o(" (XLM model)"),eyr=l(),E4=a("li"),wTe=a("strong"),oyr=o("xlm-roberta"),ryr=o(" \u2014 "),VJ=a("a"),tyr=o("TFXLMRobertaForQuestionAnswering"),ayr=o(" (XLM-RoBERTa model)"),nyr=l(),C4=a("li"),ATe=a("strong"),syr=o("xlnet"),lyr=o(" \u2014 "),XJ=a("a"),iyr=o("TFXLNetForQuestionAnsweringSimple"),dyr=o(" (XLNet model)"),cyr=l(),F(w4.$$.fragment),cDe=l(),Cc=a("h2"),A4=a("a"),yTe=a("span"),F(C8.$$.fragment),fyr=l(),LTe=a("span"),myr=o("TFAutoModelForVision2Seq"),fDe=l(),dr=a("div"),F(w8.$$.fragment),gyr=l(),wc=a("p"),hyr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),zJ=a("a"),pyr=o("from_pretrained()"),_yr=o(" class method or the "),WJ=a("a"),uyr=o("from_config()"),byr=o(` class
method.`),vyr=l(),A8=a("p"),Fyr=o("This class cannot be instantiated directly using "),xTe=a("code"),Tyr=o("__init__()"),Myr=o(" (throws an error)."),Eyr=l(),jt=a("div"),F(y8.$$.fragment),Cyr=l(),$Te=a("p"),wyr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Ayr=l(),Ac=a("p"),yyr=o(`Note:
Loading a model from its configuration file does `),kTe=a("strong"),Lyr=o("not"),xyr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QJ=a("a"),$yr=o("from_pretrained()"),kyr=o(" to load the model weights."),Syr=l(),F(y4.$$.fragment),Ryr=l(),Nr=a("div"),F(L8.$$.fragment),Pyr=l(),STe=a("p"),Byr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Iyr=l(),mn=a("p"),Nyr=o("The model class to instantiate is selected based on the "),RTe=a("code"),qyr=o("model_type"),jyr=o(` property of the config object (either
passed as an argument or loaded from `),PTe=a("code"),Dyr=o("pretrained_model_name_or_path"),Gyr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),BTe=a("code"),Oyr=o("pretrained_model_name_or_path"),Vyr=o(":"),Xyr=l(),ITe=a("ul"),L4=a("li"),NTe=a("strong"),zyr=o("vision-encoder-decoder"),Wyr=o(" \u2014 "),HJ=a("a"),Qyr=o("TFVisionEncoderDecoderModel"),Hyr=o(" (Vision Encoder decoder model)"),Uyr=l(),F(x4.$$.fragment),mDe=l(),yc=a("h2"),$4=a("a"),qTe=a("span"),F(x8.$$.fragment),Jyr=l(),jTe=a("span"),Yyr=o("TFAutoModelForSpeechSeq2Seq"),gDe=l(),cr=a("div"),F($8.$$.fragment),Kyr=l(),Lc=a("p"),Zyr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),UJ=a("a"),eLr=o("from_pretrained()"),oLr=o(" class method or the "),JJ=a("a"),rLr=o("from_config()"),tLr=o(` class
method.`),aLr=l(),k8=a("p"),nLr=o("This class cannot be instantiated directly using "),DTe=a("code"),sLr=o("__init__()"),lLr=o(" (throws an error)."),iLr=l(),Dt=a("div"),F(S8.$$.fragment),dLr=l(),GTe=a("p"),cLr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),fLr=l(),xc=a("p"),mLr=o(`Note:
Loading a model from its configuration file does `),OTe=a("strong"),gLr=o("not"),hLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YJ=a("a"),pLr=o("from_pretrained()"),_Lr=o(" to load the model weights."),uLr=l(),F(k4.$$.fragment),bLr=l(),qr=a("div"),F(R8.$$.fragment),vLr=l(),VTe=a("p"),FLr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),TLr=l(),gn=a("p"),MLr=o("The model class to instantiate is selected based on the "),XTe=a("code"),ELr=o("model_type"),CLr=o(` property of the config object (either
passed as an argument or loaded from `),zTe=a("code"),wLr=o("pretrained_model_name_or_path"),ALr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),WTe=a("code"),yLr=o("pretrained_model_name_or_path"),LLr=o(":"),xLr=l(),QTe=a("ul"),S4=a("li"),HTe=a("strong"),$Lr=o("speech_to_text"),kLr=o(" \u2014 "),KJ=a("a"),SLr=o("TFSpeech2TextForConditionalGeneration"),RLr=o(" (Speech2Text model)"),PLr=l(),F(R4.$$.fragment),hDe=l(),$c=a("h2"),P4=a("a"),UTe=a("span"),F(P8.$$.fragment),BLr=l(),JTe=a("span"),ILr=o("FlaxAutoModel"),pDe=l(),fr=a("div"),F(B8.$$.fragment),NLr=l(),kc=a("p"),qLr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),ZJ=a("a"),jLr=o("from_pretrained()"),DLr=o(" class method or the "),eY=a("a"),GLr=o("from_config()"),OLr=o(` class
method.`),VLr=l(),I8=a("p"),XLr=o("This class cannot be instantiated directly using "),YTe=a("code"),zLr=o("__init__()"),WLr=o(" (throws an error)."),QLr=l(),Gt=a("div"),F(N8.$$.fragment),HLr=l(),KTe=a("p"),ULr=o("Instantiates one of the base model classes of the library from a configuration."),JLr=l(),Sc=a("p"),YLr=o(`Note:
Loading a model from its configuration file does `),ZTe=a("strong"),KLr=o("not"),ZLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oY=a("a"),e8r=o("from_pretrained()"),o8r=o(" to load the model weights."),r8r=l(),F(B4.$$.fragment),t8r=l(),jr=a("div"),F(q8.$$.fragment),a8r=l(),e7e=a("p"),n8r=o("Instantiate one of the base model classes of the library from a pretrained model."),s8r=l(),hn=a("p"),l8r=o("The model class to instantiate is selected based on the "),o7e=a("code"),i8r=o("model_type"),d8r=o(` property of the config object (either
passed as an argument or loaded from `),r7e=a("code"),c8r=o("pretrained_model_name_or_path"),f8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t7e=a("code"),m8r=o("pretrained_model_name_or_path"),g8r=o(":"),h8r=l(),re=a("ul"),I4=a("li"),a7e=a("strong"),p8r=o("albert"),_8r=o(" \u2014 "),rY=a("a"),u8r=o("FlaxAlbertModel"),b8r=o(" (ALBERT model)"),v8r=l(),N4=a("li"),n7e=a("strong"),F8r=o("bart"),T8r=o(" \u2014 "),tY=a("a"),M8r=o("FlaxBartModel"),E8r=o(" (BART model)"),C8r=l(),q4=a("li"),s7e=a("strong"),w8r=o("beit"),A8r=o(" \u2014 "),aY=a("a"),y8r=o("FlaxBeitModel"),L8r=o(" (BEiT model)"),x8r=l(),j4=a("li"),l7e=a("strong"),$8r=o("bert"),k8r=o(" \u2014 "),nY=a("a"),S8r=o("FlaxBertModel"),R8r=o(" (BERT model)"),P8r=l(),D4=a("li"),i7e=a("strong"),B8r=o("big_bird"),I8r=o(" \u2014 "),sY=a("a"),N8r=o("FlaxBigBirdModel"),q8r=o(" (BigBird model)"),j8r=l(),G4=a("li"),d7e=a("strong"),D8r=o("blenderbot"),G8r=o(" \u2014 "),lY=a("a"),O8r=o("FlaxBlenderbotModel"),V8r=o(" (Blenderbot model)"),X8r=l(),O4=a("li"),c7e=a("strong"),z8r=o("blenderbot-small"),W8r=o(" \u2014 "),iY=a("a"),Q8r=o("FlaxBlenderbotSmallModel"),H8r=o(" (BlenderbotSmall model)"),U8r=l(),V4=a("li"),f7e=a("strong"),J8r=o("clip"),Y8r=o(" \u2014 "),dY=a("a"),K8r=o("FlaxCLIPModel"),Z8r=o(" (CLIP model)"),exr=l(),X4=a("li"),m7e=a("strong"),oxr=o("distilbert"),rxr=o(" \u2014 "),cY=a("a"),txr=o("FlaxDistilBertModel"),axr=o(" (DistilBERT model)"),nxr=l(),z4=a("li"),g7e=a("strong"),sxr=o("electra"),lxr=o(" \u2014 "),fY=a("a"),ixr=o("FlaxElectraModel"),dxr=o(" (ELECTRA model)"),cxr=l(),W4=a("li"),h7e=a("strong"),fxr=o("gpt2"),mxr=o(" \u2014 "),mY=a("a"),gxr=o("FlaxGPT2Model"),hxr=o(" (OpenAI GPT-2 model)"),pxr=l(),Q4=a("li"),p7e=a("strong"),_xr=o("gpt_neo"),uxr=o(" \u2014 "),gY=a("a"),bxr=o("FlaxGPTNeoModel"),vxr=o(" (GPT Neo model)"),Fxr=l(),H4=a("li"),_7e=a("strong"),Txr=o("gptj"),Mxr=o(" \u2014 "),hY=a("a"),Exr=o("FlaxGPTJModel"),Cxr=o(" (GPT-J model)"),wxr=l(),U4=a("li"),u7e=a("strong"),Axr=o("marian"),yxr=o(" \u2014 "),pY=a("a"),Lxr=o("FlaxMarianModel"),xxr=o(" (Marian model)"),$xr=l(),J4=a("li"),b7e=a("strong"),kxr=o("mbart"),Sxr=o(" \u2014 "),_Y=a("a"),Rxr=o("FlaxMBartModel"),Pxr=o(" (mBART model)"),Bxr=l(),Y4=a("li"),v7e=a("strong"),Ixr=o("mt5"),Nxr=o(" \u2014 "),uY=a("a"),qxr=o("FlaxMT5Model"),jxr=o(" (MT5 model)"),Dxr=l(),K4=a("li"),F7e=a("strong"),Gxr=o("opt"),Oxr=o(" \u2014 "),bY=a("a"),Vxr=o("FlaxOPTModel"),Xxr=o(" (OPT model)"),zxr=l(),Z4=a("li"),T7e=a("strong"),Wxr=o("pegasus"),Qxr=o(" \u2014 "),vY=a("a"),Hxr=o("FlaxPegasusModel"),Uxr=o(" (Pegasus model)"),Jxr=l(),eE=a("li"),M7e=a("strong"),Yxr=o("roberta"),Kxr=o(" \u2014 "),FY=a("a"),Zxr=o("FlaxRobertaModel"),e$r=o(" (RoBERTa model)"),o$r=l(),oE=a("li"),E7e=a("strong"),r$r=o("roformer"),t$r=o(" \u2014 "),TY=a("a"),a$r=o("FlaxRoFormerModel"),n$r=o(" (RoFormer model)"),s$r=l(),rE=a("li"),C7e=a("strong"),l$r=o("t5"),i$r=o(" \u2014 "),MY=a("a"),d$r=o("FlaxT5Model"),c$r=o(" (T5 model)"),f$r=l(),tE=a("li"),w7e=a("strong"),m$r=o("vision-text-dual-encoder"),g$r=o(" \u2014 "),EY=a("a"),h$r=o("FlaxVisionTextDualEncoderModel"),p$r=o(" (VisionTextDualEncoder model)"),_$r=l(),aE=a("li"),A7e=a("strong"),u$r=o("vit"),b$r=o(" \u2014 "),CY=a("a"),v$r=o("FlaxViTModel"),F$r=o(" (ViT model)"),T$r=l(),nE=a("li"),y7e=a("strong"),M$r=o("wav2vec2"),E$r=o(" \u2014 "),wY=a("a"),C$r=o("FlaxWav2Vec2Model"),w$r=o(" (Wav2Vec2 model)"),A$r=l(),sE=a("li"),L7e=a("strong"),y$r=o("xglm"),L$r=o(" \u2014 "),AY=a("a"),x$r=o("FlaxXGLMModel"),$$r=o(" (XGLM model)"),k$r=l(),lE=a("li"),x7e=a("strong"),S$r=o("xlm-roberta"),R$r=o(" \u2014 "),yY=a("a"),P$r=o("FlaxXLMRobertaModel"),B$r=o(" (XLM-RoBERTa model)"),I$r=l(),F(iE.$$.fragment),_De=l(),Rc=a("h2"),dE=a("a"),$7e=a("span"),F(j8.$$.fragment),N$r=l(),k7e=a("span"),q$r=o("FlaxAutoModelForCausalLM"),uDe=l(),mr=a("div"),F(D8.$$.fragment),j$r=l(),Pc=a("p"),D$r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),LY=a("a"),G$r=o("from_pretrained()"),O$r=o(" class method or the "),xY=a("a"),V$r=o("from_config()"),X$r=o(` class
method.`),z$r=l(),G8=a("p"),W$r=o("This class cannot be instantiated directly using "),S7e=a("code"),Q$r=o("__init__()"),H$r=o(" (throws an error)."),U$r=l(),Ot=a("div"),F(O8.$$.fragment),J$r=l(),R7e=a("p"),Y$r=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),K$r=l(),Bc=a("p"),Z$r=o(`Note:
Loading a model from its configuration file does `),P7e=a("strong"),ekr=o("not"),okr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$Y=a("a"),rkr=o("from_pretrained()"),tkr=o(" to load the model weights."),akr=l(),F(cE.$$.fragment),nkr=l(),Dr=a("div"),F(V8.$$.fragment),skr=l(),B7e=a("p"),lkr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),ikr=l(),pn=a("p"),dkr=o("The model class to instantiate is selected based on the "),I7e=a("code"),ckr=o("model_type"),fkr=o(` property of the config object (either
passed as an argument or loaded from `),N7e=a("code"),mkr=o("pretrained_model_name_or_path"),gkr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q7e=a("code"),hkr=o("pretrained_model_name_or_path"),pkr=o(":"),_kr=l(),Le=a("ul"),fE=a("li"),j7e=a("strong"),ukr=o("bart"),bkr=o(" \u2014 "),kY=a("a"),vkr=o("FlaxBartForCausalLM"),Fkr=o(" (BART model)"),Tkr=l(),mE=a("li"),D7e=a("strong"),Mkr=o("bert"),Ekr=o(" \u2014 "),SY=a("a"),Ckr=o("FlaxBertForCausalLM"),wkr=o(" (BERT model)"),Akr=l(),gE=a("li"),G7e=a("strong"),ykr=o("big_bird"),Lkr=o(" \u2014 "),RY=a("a"),xkr=o("FlaxBigBirdForCausalLM"),$kr=o(" (BigBird model)"),kkr=l(),hE=a("li"),O7e=a("strong"),Skr=o("electra"),Rkr=o(" \u2014 "),PY=a("a"),Pkr=o("FlaxElectraForCausalLM"),Bkr=o(" (ELECTRA model)"),Ikr=l(),pE=a("li"),V7e=a("strong"),Nkr=o("gpt2"),qkr=o(" \u2014 "),BY=a("a"),jkr=o("FlaxGPT2LMHeadModel"),Dkr=o(" (OpenAI GPT-2 model)"),Gkr=l(),_E=a("li"),X7e=a("strong"),Okr=o("gpt_neo"),Vkr=o(" \u2014 "),IY=a("a"),Xkr=o("FlaxGPTNeoForCausalLM"),zkr=o(" (GPT Neo model)"),Wkr=l(),uE=a("li"),z7e=a("strong"),Qkr=o("gptj"),Hkr=o(" \u2014 "),NY=a("a"),Ukr=o("FlaxGPTJForCausalLM"),Jkr=o(" (GPT-J model)"),Ykr=l(),bE=a("li"),W7e=a("strong"),Kkr=o("opt"),Zkr=o(" \u2014 "),qY=a("a"),eSr=o("FlaxOPTForCausalLM"),oSr=o(" (OPT model)"),rSr=l(),vE=a("li"),Q7e=a("strong"),tSr=o("roberta"),aSr=o(" \u2014 "),jY=a("a"),nSr=o("FlaxRobertaForCausalLM"),sSr=o(" (RoBERTa model)"),lSr=l(),FE=a("li"),H7e=a("strong"),iSr=o("xglm"),dSr=o(" \u2014 "),DY=a("a"),cSr=o("FlaxXGLMForCausalLM"),fSr=o(" (XGLM model)"),mSr=l(),F(TE.$$.fragment),bDe=l(),Ic=a("h2"),ME=a("a"),U7e=a("span"),F(X8.$$.fragment),gSr=l(),J7e=a("span"),hSr=o("FlaxAutoModelForPreTraining"),vDe=l(),gr=a("div"),F(z8.$$.fragment),pSr=l(),Nc=a("p"),_Sr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),GY=a("a"),uSr=o("from_pretrained()"),bSr=o(" class method or the "),OY=a("a"),vSr=o("from_config()"),FSr=o(` class
method.`),TSr=l(),W8=a("p"),MSr=o("This class cannot be instantiated directly using "),Y7e=a("code"),ESr=o("__init__()"),CSr=o(" (throws an error)."),wSr=l(),Vt=a("div"),F(Q8.$$.fragment),ASr=l(),K7e=a("p"),ySr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),LSr=l(),qc=a("p"),xSr=o(`Note:
Loading a model from its configuration file does `),Z7e=a("strong"),$Sr=o("not"),kSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VY=a("a"),SSr=o("from_pretrained()"),RSr=o(" to load the model weights."),PSr=l(),F(EE.$$.fragment),BSr=l(),Gr=a("div"),F(H8.$$.fragment),ISr=l(),e9e=a("p"),NSr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),qSr=l(),_n=a("p"),jSr=o("The model class to instantiate is selected based on the "),o9e=a("code"),DSr=o("model_type"),GSr=o(` property of the config object (either
passed as an argument or loaded from `),r9e=a("code"),OSr=o("pretrained_model_name_or_path"),VSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t9e=a("code"),XSr=o("pretrained_model_name_or_path"),zSr=o(":"),WSr=l(),Ee=a("ul"),CE=a("li"),a9e=a("strong"),QSr=o("albert"),HSr=o(" \u2014 "),XY=a("a"),USr=o("FlaxAlbertForPreTraining"),JSr=o(" (ALBERT model)"),YSr=l(),wE=a("li"),n9e=a("strong"),KSr=o("bart"),ZSr=o(" \u2014 "),zY=a("a"),eRr=o("FlaxBartForConditionalGeneration"),oRr=o(" (BART model)"),rRr=l(),AE=a("li"),s9e=a("strong"),tRr=o("bert"),aRr=o(" \u2014 "),WY=a("a"),nRr=o("FlaxBertForPreTraining"),sRr=o(" (BERT model)"),lRr=l(),yE=a("li"),l9e=a("strong"),iRr=o("big_bird"),dRr=o(" \u2014 "),QY=a("a"),cRr=o("FlaxBigBirdForPreTraining"),fRr=o(" (BigBird model)"),mRr=l(),LE=a("li"),i9e=a("strong"),gRr=o("electra"),hRr=o(" \u2014 "),HY=a("a"),pRr=o("FlaxElectraForPreTraining"),_Rr=o(" (ELECTRA model)"),uRr=l(),xE=a("li"),d9e=a("strong"),bRr=o("mbart"),vRr=o(" \u2014 "),UY=a("a"),FRr=o("FlaxMBartForConditionalGeneration"),TRr=o(" (mBART model)"),MRr=l(),$E=a("li"),c9e=a("strong"),ERr=o("mt5"),CRr=o(" \u2014 "),JY=a("a"),wRr=o("FlaxMT5ForConditionalGeneration"),ARr=o(" (MT5 model)"),yRr=l(),kE=a("li"),f9e=a("strong"),LRr=o("roberta"),xRr=o(" \u2014 "),YY=a("a"),$Rr=o("FlaxRobertaForMaskedLM"),kRr=o(" (RoBERTa model)"),SRr=l(),SE=a("li"),m9e=a("strong"),RRr=o("roformer"),PRr=o(" \u2014 "),KY=a("a"),BRr=o("FlaxRoFormerForMaskedLM"),IRr=o(" (RoFormer model)"),NRr=l(),RE=a("li"),g9e=a("strong"),qRr=o("t5"),jRr=o(" \u2014 "),ZY=a("a"),DRr=o("FlaxT5ForConditionalGeneration"),GRr=o(" (T5 model)"),ORr=l(),PE=a("li"),h9e=a("strong"),VRr=o("wav2vec2"),XRr=o(" \u2014 "),eK=a("a"),zRr=o("FlaxWav2Vec2ForPreTraining"),WRr=o(" (Wav2Vec2 model)"),QRr=l(),BE=a("li"),p9e=a("strong"),HRr=o("xlm-roberta"),URr=o(" \u2014 "),oK=a("a"),JRr=o("FlaxXLMRobertaForMaskedLM"),YRr=o(" (XLM-RoBERTa model)"),KRr=l(),F(IE.$$.fragment),FDe=l(),jc=a("h2"),NE=a("a"),_9e=a("span"),F(U8.$$.fragment),ZRr=l(),u9e=a("span"),ePr=o("FlaxAutoModelForMaskedLM"),TDe=l(),hr=a("div"),F(J8.$$.fragment),oPr=l(),Dc=a("p"),rPr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),rK=a("a"),tPr=o("from_pretrained()"),aPr=o(" class method or the "),tK=a("a"),nPr=o("from_config()"),sPr=o(` class
method.`),lPr=l(),Y8=a("p"),iPr=o("This class cannot be instantiated directly using "),b9e=a("code"),dPr=o("__init__()"),cPr=o(" (throws an error)."),fPr=l(),Xt=a("div"),F(K8.$$.fragment),mPr=l(),v9e=a("p"),gPr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),hPr=l(),Gc=a("p"),pPr=o(`Note:
Loading a model from its configuration file does `),F9e=a("strong"),_Pr=o("not"),uPr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aK=a("a"),bPr=o("from_pretrained()"),vPr=o(" to load the model weights."),FPr=l(),F(qE.$$.fragment),TPr=l(),Or=a("div"),F(Z8.$$.fragment),MPr=l(),T9e=a("p"),EPr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),CPr=l(),un=a("p"),wPr=o("The model class to instantiate is selected based on the "),M9e=a("code"),APr=o("model_type"),yPr=o(` property of the config object (either
passed as an argument or loaded from `),E9e=a("code"),LPr=o("pretrained_model_name_or_path"),xPr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C9e=a("code"),$Pr=o("pretrained_model_name_or_path"),kPr=o(":"),SPr=l(),xe=a("ul"),jE=a("li"),w9e=a("strong"),RPr=o("albert"),PPr=o(" \u2014 "),nK=a("a"),BPr=o("FlaxAlbertForMaskedLM"),IPr=o(" (ALBERT model)"),NPr=l(),DE=a("li"),A9e=a("strong"),qPr=o("bart"),jPr=o(" \u2014 "),sK=a("a"),DPr=o("FlaxBartForConditionalGeneration"),GPr=o(" (BART model)"),OPr=l(),GE=a("li"),y9e=a("strong"),VPr=o("bert"),XPr=o(" \u2014 "),lK=a("a"),zPr=o("FlaxBertForMaskedLM"),WPr=o(" (BERT model)"),QPr=l(),OE=a("li"),L9e=a("strong"),HPr=o("big_bird"),UPr=o(" \u2014 "),iK=a("a"),JPr=o("FlaxBigBirdForMaskedLM"),YPr=o(" (BigBird model)"),KPr=l(),VE=a("li"),x9e=a("strong"),ZPr=o("distilbert"),eBr=o(" \u2014 "),dK=a("a"),oBr=o("FlaxDistilBertForMaskedLM"),rBr=o(" (DistilBERT model)"),tBr=l(),XE=a("li"),$9e=a("strong"),aBr=o("electra"),nBr=o(" \u2014 "),cK=a("a"),sBr=o("FlaxElectraForMaskedLM"),lBr=o(" (ELECTRA model)"),iBr=l(),zE=a("li"),k9e=a("strong"),dBr=o("mbart"),cBr=o(" \u2014 "),fK=a("a"),fBr=o("FlaxMBartForConditionalGeneration"),mBr=o(" (mBART model)"),gBr=l(),WE=a("li"),S9e=a("strong"),hBr=o("roberta"),pBr=o(" \u2014 "),mK=a("a"),_Br=o("FlaxRobertaForMaskedLM"),uBr=o(" (RoBERTa model)"),bBr=l(),QE=a("li"),R9e=a("strong"),vBr=o("roformer"),FBr=o(" \u2014 "),gK=a("a"),TBr=o("FlaxRoFormerForMaskedLM"),MBr=o(" (RoFormer model)"),EBr=l(),HE=a("li"),P9e=a("strong"),CBr=o("xlm-roberta"),wBr=o(" \u2014 "),hK=a("a"),ABr=o("FlaxXLMRobertaForMaskedLM"),yBr=o(" (XLM-RoBERTa model)"),LBr=l(),F(UE.$$.fragment),MDe=l(),Oc=a("h2"),JE=a("a"),B9e=a("span"),F(ex.$$.fragment),xBr=l(),I9e=a("span"),$Br=o("FlaxAutoModelForSeq2SeqLM"),EDe=l(),pr=a("div"),F(ox.$$.fragment),kBr=l(),Vc=a("p"),SBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),pK=a("a"),RBr=o("from_pretrained()"),PBr=o(" class method or the "),_K=a("a"),BBr=o("from_config()"),IBr=o(` class
method.`),NBr=l(),rx=a("p"),qBr=o("This class cannot be instantiated directly using "),N9e=a("code"),jBr=o("__init__()"),DBr=o(" (throws an error)."),GBr=l(),zt=a("div"),F(tx.$$.fragment),OBr=l(),q9e=a("p"),VBr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),XBr=l(),Xc=a("p"),zBr=o(`Note:
Loading a model from its configuration file does `),j9e=a("strong"),WBr=o("not"),QBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uK=a("a"),HBr=o("from_pretrained()"),UBr=o(" to load the model weights."),JBr=l(),F(YE.$$.fragment),YBr=l(),Vr=a("div"),F(ax.$$.fragment),KBr=l(),D9e=a("p"),ZBr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),eIr=l(),bn=a("p"),oIr=o("The model class to instantiate is selected based on the "),G9e=a("code"),rIr=o("model_type"),tIr=o(` property of the config object (either
passed as an argument or loaded from `),O9e=a("code"),aIr=o("pretrained_model_name_or_path"),nIr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V9e=a("code"),sIr=o("pretrained_model_name_or_path"),lIr=o(":"),iIr=l(),Pe=a("ul"),KE=a("li"),X9e=a("strong"),dIr=o("bart"),cIr=o(" \u2014 "),bK=a("a"),fIr=o("FlaxBartForConditionalGeneration"),mIr=o(" (BART model)"),gIr=l(),ZE=a("li"),z9e=a("strong"),hIr=o("blenderbot"),pIr=o(" \u2014 "),vK=a("a"),_Ir=o("FlaxBlenderbotForConditionalGeneration"),uIr=o(" (Blenderbot model)"),bIr=l(),eC=a("li"),W9e=a("strong"),vIr=o("blenderbot-small"),FIr=o(" \u2014 "),FK=a("a"),TIr=o("FlaxBlenderbotSmallForConditionalGeneration"),MIr=o(" (BlenderbotSmall model)"),EIr=l(),oC=a("li"),Q9e=a("strong"),CIr=o("encoder-decoder"),wIr=o(" \u2014 "),TK=a("a"),AIr=o("FlaxEncoderDecoderModel"),yIr=o(" (Encoder decoder model)"),LIr=l(),rC=a("li"),H9e=a("strong"),xIr=o("marian"),$Ir=o(" \u2014 "),MK=a("a"),kIr=o("FlaxMarianMTModel"),SIr=o(" (Marian model)"),RIr=l(),tC=a("li"),U9e=a("strong"),PIr=o("mbart"),BIr=o(" \u2014 "),EK=a("a"),IIr=o("FlaxMBartForConditionalGeneration"),NIr=o(" (mBART model)"),qIr=l(),aC=a("li"),J9e=a("strong"),jIr=o("mt5"),DIr=o(" \u2014 "),CK=a("a"),GIr=o("FlaxMT5ForConditionalGeneration"),OIr=o(" (MT5 model)"),VIr=l(),nC=a("li"),Y9e=a("strong"),XIr=o("pegasus"),zIr=o(" \u2014 "),wK=a("a"),WIr=o("FlaxPegasusForConditionalGeneration"),QIr=o(" (Pegasus model)"),HIr=l(),sC=a("li"),K9e=a("strong"),UIr=o("t5"),JIr=o(" \u2014 "),AK=a("a"),YIr=o("FlaxT5ForConditionalGeneration"),KIr=o(" (T5 model)"),ZIr=l(),F(lC.$$.fragment),CDe=l(),zc=a("h2"),iC=a("a"),Z9e=a("span"),F(nx.$$.fragment),eNr=l(),eMe=a("span"),oNr=o("FlaxAutoModelForSequenceClassification"),wDe=l(),_r=a("div"),F(sx.$$.fragment),rNr=l(),Wc=a("p"),tNr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),yK=a("a"),aNr=o("from_pretrained()"),nNr=o(" class method or the "),LK=a("a"),sNr=o("from_config()"),lNr=o(` class
method.`),iNr=l(),lx=a("p"),dNr=o("This class cannot be instantiated directly using "),oMe=a("code"),cNr=o("__init__()"),fNr=o(" (throws an error)."),mNr=l(),Wt=a("div"),F(ix.$$.fragment),gNr=l(),rMe=a("p"),hNr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),pNr=l(),Qc=a("p"),_Nr=o(`Note:
Loading a model from its configuration file does `),tMe=a("strong"),uNr=o("not"),bNr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xK=a("a"),vNr=o("from_pretrained()"),FNr=o(" to load the model weights."),TNr=l(),F(dC.$$.fragment),MNr=l(),Xr=a("div"),F(dx.$$.fragment),ENr=l(),aMe=a("p"),CNr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),wNr=l(),vn=a("p"),ANr=o("The model class to instantiate is selected based on the "),nMe=a("code"),yNr=o("model_type"),LNr=o(` property of the config object (either
passed as an argument or loaded from `),sMe=a("code"),xNr=o("pretrained_model_name_or_path"),$Nr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lMe=a("code"),kNr=o("pretrained_model_name_or_path"),SNr=o(":"),RNr=l(),$e=a("ul"),cC=a("li"),iMe=a("strong"),PNr=o("albert"),BNr=o(" \u2014 "),$K=a("a"),INr=o("FlaxAlbertForSequenceClassification"),NNr=o(" (ALBERT model)"),qNr=l(),fC=a("li"),dMe=a("strong"),jNr=o("bart"),DNr=o(" \u2014 "),kK=a("a"),GNr=o("FlaxBartForSequenceClassification"),ONr=o(" (BART model)"),VNr=l(),mC=a("li"),cMe=a("strong"),XNr=o("bert"),zNr=o(" \u2014 "),SK=a("a"),WNr=o("FlaxBertForSequenceClassification"),QNr=o(" (BERT model)"),HNr=l(),gC=a("li"),fMe=a("strong"),UNr=o("big_bird"),JNr=o(" \u2014 "),RK=a("a"),YNr=o("FlaxBigBirdForSequenceClassification"),KNr=o(" (BigBird model)"),ZNr=l(),hC=a("li"),mMe=a("strong"),eqr=o("distilbert"),oqr=o(" \u2014 "),PK=a("a"),rqr=o("FlaxDistilBertForSequenceClassification"),tqr=o(" (DistilBERT model)"),aqr=l(),pC=a("li"),gMe=a("strong"),nqr=o("electra"),sqr=o(" \u2014 "),BK=a("a"),lqr=o("FlaxElectraForSequenceClassification"),iqr=o(" (ELECTRA model)"),dqr=l(),_C=a("li"),hMe=a("strong"),cqr=o("mbart"),fqr=o(" \u2014 "),IK=a("a"),mqr=o("FlaxMBartForSequenceClassification"),gqr=o(" (mBART model)"),hqr=l(),uC=a("li"),pMe=a("strong"),pqr=o("roberta"),_qr=o(" \u2014 "),NK=a("a"),uqr=o("FlaxRobertaForSequenceClassification"),bqr=o(" (RoBERTa model)"),vqr=l(),bC=a("li"),_Me=a("strong"),Fqr=o("roformer"),Tqr=o(" \u2014 "),qK=a("a"),Mqr=o("FlaxRoFormerForSequenceClassification"),Eqr=o(" (RoFormer model)"),Cqr=l(),vC=a("li"),uMe=a("strong"),wqr=o("xlm-roberta"),Aqr=o(" \u2014 "),jK=a("a"),yqr=o("FlaxXLMRobertaForSequenceClassification"),Lqr=o(" (XLM-RoBERTa model)"),xqr=l(),F(FC.$$.fragment),ADe=l(),Hc=a("h2"),TC=a("a"),bMe=a("span"),F(cx.$$.fragment),$qr=l(),vMe=a("span"),kqr=o("FlaxAutoModelForQuestionAnswering"),yDe=l(),ur=a("div"),F(fx.$$.fragment),Sqr=l(),Uc=a("p"),Rqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),DK=a("a"),Pqr=o("from_pretrained()"),Bqr=o(" class method or the "),GK=a("a"),Iqr=o("from_config()"),Nqr=o(` class
method.`),qqr=l(),mx=a("p"),jqr=o("This class cannot be instantiated directly using "),FMe=a("code"),Dqr=o("__init__()"),Gqr=o(" (throws an error)."),Oqr=l(),Qt=a("div"),F(gx.$$.fragment),Vqr=l(),TMe=a("p"),Xqr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),zqr=l(),Jc=a("p"),Wqr=o(`Note:
Loading a model from its configuration file does `),MMe=a("strong"),Qqr=o("not"),Hqr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OK=a("a"),Uqr=o("from_pretrained()"),Jqr=o(" to load the model weights."),Yqr=l(),F(MC.$$.fragment),Kqr=l(),zr=a("div"),F(hx.$$.fragment),Zqr=l(),EMe=a("p"),ejr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),ojr=l(),Fn=a("p"),rjr=o("The model class to instantiate is selected based on the "),CMe=a("code"),tjr=o("model_type"),ajr=o(` property of the config object (either
passed as an argument or loaded from `),wMe=a("code"),njr=o("pretrained_model_name_or_path"),sjr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),AMe=a("code"),ljr=o("pretrained_model_name_or_path"),ijr=o(":"),djr=l(),ke=a("ul"),EC=a("li"),yMe=a("strong"),cjr=o("albert"),fjr=o(" \u2014 "),VK=a("a"),mjr=o("FlaxAlbertForQuestionAnswering"),gjr=o(" (ALBERT model)"),hjr=l(),CC=a("li"),LMe=a("strong"),pjr=o("bart"),_jr=o(" \u2014 "),XK=a("a"),ujr=o("FlaxBartForQuestionAnswering"),bjr=o(" (BART model)"),vjr=l(),wC=a("li"),xMe=a("strong"),Fjr=o("bert"),Tjr=o(" \u2014 "),zK=a("a"),Mjr=o("FlaxBertForQuestionAnswering"),Ejr=o(" (BERT model)"),Cjr=l(),AC=a("li"),$Me=a("strong"),wjr=o("big_bird"),Ajr=o(" \u2014 "),WK=a("a"),yjr=o("FlaxBigBirdForQuestionAnswering"),Ljr=o(" (BigBird model)"),xjr=l(),yC=a("li"),kMe=a("strong"),$jr=o("distilbert"),kjr=o(" \u2014 "),QK=a("a"),Sjr=o("FlaxDistilBertForQuestionAnswering"),Rjr=o(" (DistilBERT model)"),Pjr=l(),LC=a("li"),SMe=a("strong"),Bjr=o("electra"),Ijr=o(" \u2014 "),HK=a("a"),Njr=o("FlaxElectraForQuestionAnswering"),qjr=o(" (ELECTRA model)"),jjr=l(),xC=a("li"),RMe=a("strong"),Djr=o("mbart"),Gjr=o(" \u2014 "),UK=a("a"),Ojr=o("FlaxMBartForQuestionAnswering"),Vjr=o(" (mBART model)"),Xjr=l(),$C=a("li"),PMe=a("strong"),zjr=o("roberta"),Wjr=o(" \u2014 "),JK=a("a"),Qjr=o("FlaxRobertaForQuestionAnswering"),Hjr=o(" (RoBERTa model)"),Ujr=l(),kC=a("li"),BMe=a("strong"),Jjr=o("roformer"),Yjr=o(" \u2014 "),YK=a("a"),Kjr=o("FlaxRoFormerForQuestionAnswering"),Zjr=o(" (RoFormer model)"),eDr=l(),SC=a("li"),IMe=a("strong"),oDr=o("xlm-roberta"),rDr=o(" \u2014 "),KK=a("a"),tDr=o("FlaxXLMRobertaForQuestionAnswering"),aDr=o(" (XLM-RoBERTa model)"),nDr=l(),F(RC.$$.fragment),LDe=l(),Yc=a("h2"),PC=a("a"),NMe=a("span"),F(px.$$.fragment),sDr=l(),qMe=a("span"),lDr=o("FlaxAutoModelForTokenClassification"),xDe=l(),br=a("div"),F(_x.$$.fragment),iDr=l(),Kc=a("p"),dDr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),ZK=a("a"),cDr=o("from_pretrained()"),fDr=o(" class method or the "),eZ=a("a"),mDr=o("from_config()"),gDr=o(` class
method.`),hDr=l(),ux=a("p"),pDr=o("This class cannot be instantiated directly using "),jMe=a("code"),_Dr=o("__init__()"),uDr=o(" (throws an error)."),bDr=l(),Ht=a("div"),F(bx.$$.fragment),vDr=l(),DMe=a("p"),FDr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),TDr=l(),Zc=a("p"),MDr=o(`Note:
Loading a model from its configuration file does `),GMe=a("strong"),EDr=o("not"),CDr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oZ=a("a"),wDr=o("from_pretrained()"),ADr=o(" to load the model weights."),yDr=l(),F(BC.$$.fragment),LDr=l(),Wr=a("div"),F(vx.$$.fragment),xDr=l(),OMe=a("p"),$Dr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),kDr=l(),Tn=a("p"),SDr=o("The model class to instantiate is selected based on the "),VMe=a("code"),RDr=o("model_type"),PDr=o(` property of the config object (either
passed as an argument or loaded from `),XMe=a("code"),BDr=o("pretrained_model_name_or_path"),IDr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zMe=a("code"),NDr=o("pretrained_model_name_or_path"),qDr=o(":"),jDr=l(),Ge=a("ul"),IC=a("li"),WMe=a("strong"),DDr=o("albert"),GDr=o(" \u2014 "),rZ=a("a"),ODr=o("FlaxAlbertForTokenClassification"),VDr=o(" (ALBERT model)"),XDr=l(),NC=a("li"),QMe=a("strong"),zDr=o("bert"),WDr=o(" \u2014 "),tZ=a("a"),QDr=o("FlaxBertForTokenClassification"),HDr=o(" (BERT model)"),UDr=l(),qC=a("li"),HMe=a("strong"),JDr=o("big_bird"),YDr=o(" \u2014 "),aZ=a("a"),KDr=o("FlaxBigBirdForTokenClassification"),ZDr=o(" (BigBird model)"),eGr=l(),jC=a("li"),UMe=a("strong"),oGr=o("distilbert"),rGr=o(" \u2014 "),nZ=a("a"),tGr=o("FlaxDistilBertForTokenClassification"),aGr=o(" (DistilBERT model)"),nGr=l(),DC=a("li"),JMe=a("strong"),sGr=o("electra"),lGr=o(" \u2014 "),sZ=a("a"),iGr=o("FlaxElectraForTokenClassification"),dGr=o(" (ELECTRA model)"),cGr=l(),GC=a("li"),YMe=a("strong"),fGr=o("roberta"),mGr=o(" \u2014 "),lZ=a("a"),gGr=o("FlaxRobertaForTokenClassification"),hGr=o(" (RoBERTa model)"),pGr=l(),OC=a("li"),KMe=a("strong"),_Gr=o("roformer"),uGr=o(" \u2014 "),iZ=a("a"),bGr=o("FlaxRoFormerForTokenClassification"),vGr=o(" (RoFormer model)"),FGr=l(),VC=a("li"),ZMe=a("strong"),TGr=o("xlm-roberta"),MGr=o(" \u2014 "),dZ=a("a"),EGr=o("FlaxXLMRobertaForTokenClassification"),CGr=o(" (XLM-RoBERTa model)"),wGr=l(),F(XC.$$.fragment),$De=l(),ef=a("h2"),zC=a("a"),e4e=a("span"),F(Fx.$$.fragment),AGr=l(),o4e=a("span"),yGr=o("FlaxAutoModelForMultipleChoice"),kDe=l(),vr=a("div"),F(Tx.$$.fragment),LGr=l(),of=a("p"),xGr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),cZ=a("a"),$Gr=o("from_pretrained()"),kGr=o(" class method or the "),fZ=a("a"),SGr=o("from_config()"),RGr=o(` class
method.`),PGr=l(),Mx=a("p"),BGr=o("This class cannot be instantiated directly using "),r4e=a("code"),IGr=o("__init__()"),NGr=o(" (throws an error)."),qGr=l(),Ut=a("div"),F(Ex.$$.fragment),jGr=l(),t4e=a("p"),DGr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),GGr=l(),rf=a("p"),OGr=o(`Note:
Loading a model from its configuration file does `),a4e=a("strong"),VGr=o("not"),XGr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mZ=a("a"),zGr=o("from_pretrained()"),WGr=o(" to load the model weights."),QGr=l(),F(WC.$$.fragment),HGr=l(),Qr=a("div"),F(Cx.$$.fragment),UGr=l(),n4e=a("p"),JGr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),YGr=l(),Mn=a("p"),KGr=o("The model class to instantiate is selected based on the "),s4e=a("code"),ZGr=o("model_type"),eOr=o(` property of the config object (either
passed as an argument or loaded from `),l4e=a("code"),oOr=o("pretrained_model_name_or_path"),rOr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i4e=a("code"),tOr=o("pretrained_model_name_or_path"),aOr=o(":"),nOr=l(),Oe=a("ul"),QC=a("li"),d4e=a("strong"),sOr=o("albert"),lOr=o(" \u2014 "),gZ=a("a"),iOr=o("FlaxAlbertForMultipleChoice"),dOr=o(" (ALBERT model)"),cOr=l(),HC=a("li"),c4e=a("strong"),fOr=o("bert"),mOr=o(" \u2014 "),hZ=a("a"),gOr=o("FlaxBertForMultipleChoice"),hOr=o(" (BERT model)"),pOr=l(),UC=a("li"),f4e=a("strong"),_Or=o("big_bird"),uOr=o(" \u2014 "),pZ=a("a"),bOr=o("FlaxBigBirdForMultipleChoice"),vOr=o(" (BigBird model)"),FOr=l(),JC=a("li"),m4e=a("strong"),TOr=o("distilbert"),MOr=o(" \u2014 "),_Z=a("a"),EOr=o("FlaxDistilBertForMultipleChoice"),COr=o(" (DistilBERT model)"),wOr=l(),YC=a("li"),g4e=a("strong"),AOr=o("electra"),yOr=o(" \u2014 "),uZ=a("a"),LOr=o("FlaxElectraForMultipleChoice"),xOr=o(" (ELECTRA model)"),$Or=l(),KC=a("li"),h4e=a("strong"),kOr=o("roberta"),SOr=o(" \u2014 "),bZ=a("a"),ROr=o("FlaxRobertaForMultipleChoice"),POr=o(" (RoBERTa model)"),BOr=l(),ZC=a("li"),p4e=a("strong"),IOr=o("roformer"),NOr=o(" \u2014 "),vZ=a("a"),qOr=o("FlaxRoFormerForMultipleChoice"),jOr=o(" (RoFormer model)"),DOr=l(),e0=a("li"),_4e=a("strong"),GOr=o("xlm-roberta"),OOr=o(" \u2014 "),FZ=a("a"),VOr=o("FlaxXLMRobertaForMultipleChoice"),XOr=o(" (XLM-RoBERTa model)"),zOr=l(),F(o0.$$.fragment),SDe=l(),tf=a("h2"),r0=a("a"),u4e=a("span"),F(wx.$$.fragment),WOr=l(),b4e=a("span"),QOr=o("FlaxAutoModelForNextSentencePrediction"),RDe=l(),Fr=a("div"),F(Ax.$$.fragment),HOr=l(),af=a("p"),UOr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),TZ=a("a"),JOr=o("from_pretrained()"),YOr=o(" class method or the "),MZ=a("a"),KOr=o("from_config()"),ZOr=o(` class
method.`),eVr=l(),yx=a("p"),oVr=o("This class cannot be instantiated directly using "),v4e=a("code"),rVr=o("__init__()"),tVr=o(" (throws an error)."),aVr=l(),Jt=a("div"),F(Lx.$$.fragment),nVr=l(),F4e=a("p"),sVr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),lVr=l(),nf=a("p"),iVr=o(`Note:
Loading a model from its configuration file does `),T4e=a("strong"),dVr=o("not"),cVr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EZ=a("a"),fVr=o("from_pretrained()"),mVr=o(" to load the model weights."),gVr=l(),F(t0.$$.fragment),hVr=l(),Hr=a("div"),F(xx.$$.fragment),pVr=l(),M4e=a("p"),_Vr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),uVr=l(),En=a("p"),bVr=o("The model class to instantiate is selected based on the "),E4e=a("code"),vVr=o("model_type"),FVr=o(` property of the config object (either
passed as an argument or loaded from `),C4e=a("code"),TVr=o("pretrained_model_name_or_path"),MVr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w4e=a("code"),EVr=o("pretrained_model_name_or_path"),CVr=o(":"),wVr=l(),A4e=a("ul"),a0=a("li"),y4e=a("strong"),AVr=o("bert"),yVr=o(" \u2014 "),CZ=a("a"),LVr=o("FlaxBertForNextSentencePrediction"),xVr=o(" (BERT model)"),$Vr=l(),F(n0.$$.fragment),PDe=l(),sf=a("h2"),s0=a("a"),L4e=a("span"),F($x.$$.fragment),kVr=l(),x4e=a("span"),SVr=o("FlaxAutoModelForImageClassification"),BDe=l(),Tr=a("div"),F(kx.$$.fragment),RVr=l(),lf=a("p"),PVr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),wZ=a("a"),BVr=o("from_pretrained()"),IVr=o(" class method or the "),AZ=a("a"),NVr=o("from_config()"),qVr=o(` class
method.`),jVr=l(),Sx=a("p"),DVr=o("This class cannot be instantiated directly using "),$4e=a("code"),GVr=o("__init__()"),OVr=o(" (throws an error)."),VVr=l(),Yt=a("div"),F(Rx.$$.fragment),XVr=l(),k4e=a("p"),zVr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),WVr=l(),df=a("p"),QVr=o(`Note:
Loading a model from its configuration file does `),S4e=a("strong"),HVr=o("not"),UVr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yZ=a("a"),JVr=o("from_pretrained()"),YVr=o(" to load the model weights."),KVr=l(),F(l0.$$.fragment),ZVr=l(),Ur=a("div"),F(Px.$$.fragment),eXr=l(),R4e=a("p"),oXr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),rXr=l(),Cn=a("p"),tXr=o("The model class to instantiate is selected based on the "),P4e=a("code"),aXr=o("model_type"),nXr=o(` property of the config object (either
passed as an argument or loaded from `),B4e=a("code"),sXr=o("pretrained_model_name_or_path"),lXr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I4e=a("code"),iXr=o("pretrained_model_name_or_path"),dXr=o(":"),cXr=l(),Bx=a("ul"),i0=a("li"),N4e=a("strong"),fXr=o("beit"),mXr=o(" \u2014 "),LZ=a("a"),gXr=o("FlaxBeitForImageClassification"),hXr=o(" (BEiT model)"),pXr=l(),d0=a("li"),q4e=a("strong"),_Xr=o("vit"),uXr=o(" \u2014 "),xZ=a("a"),bXr=o("FlaxViTForImageClassification"),vXr=o(" (ViT model)"),FXr=l(),F(c0.$$.fragment),IDe=l(),cf=a("h2"),f0=a("a"),j4e=a("span"),F(Ix.$$.fragment),TXr=l(),D4e=a("span"),MXr=o("FlaxAutoModelForVision2Seq"),NDe=l(),Mr=a("div"),F(Nx.$$.fragment),EXr=l(),ff=a("p"),CXr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),$Z=a("a"),wXr=o("from_pretrained()"),AXr=o(" class method or the "),kZ=a("a"),yXr=o("from_config()"),LXr=o(` class
method.`),xXr=l(),qx=a("p"),$Xr=o("This class cannot be instantiated directly using "),G4e=a("code"),kXr=o("__init__()"),SXr=o(" (throws an error)."),RXr=l(),Kt=a("div"),F(jx.$$.fragment),PXr=l(),O4e=a("p"),BXr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),IXr=l(),mf=a("p"),NXr=o(`Note:
Loading a model from its configuration file does `),V4e=a("strong"),qXr=o("not"),jXr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SZ=a("a"),DXr=o("from_pretrained()"),GXr=o(" to load the model weights."),OXr=l(),F(m0.$$.fragment),VXr=l(),Jr=a("div"),F(Dx.$$.fragment),XXr=l(),X4e=a("p"),zXr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),WXr=l(),wn=a("p"),QXr=o("The model class to instantiate is selected based on the "),z4e=a("code"),HXr=o("model_type"),UXr=o(` property of the config object (either
passed as an argument or loaded from `),W4e=a("code"),JXr=o("pretrained_model_name_or_path"),YXr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q4e=a("code"),KXr=o("pretrained_model_name_or_path"),ZXr=o(":"),ezr=l(),H4e=a("ul"),g0=a("li"),U4e=a("strong"),ozr=o("vision-encoder-decoder"),rzr=o(" \u2014 "),RZ=a("a"),tzr=o("FlaxVisionEncoderDecoderModel"),azr=o(" (Vision Encoder decoder model)"),nzr=l(),F(h0.$$.fragment),this.h()},l(f){const u=aSt('[data-svelte="svelte-1phssyn"]',document.head);g=n(u,"META",{name:!0,content:!0}),u.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var Gx=s(p);m=n(Gx,"A",{id:!0,class:!0,href:!0});var J4e=s(m);_=n(J4e,"SPAN",{});var Y4e=s(_);T(d.$$.fragment,Y4e),Y4e.forEach(t),J4e.forEach(t),h=i(Gx),Mo=n(Gx,"SPAN",{});var K4e=s(Mo);mi=r(K4e,"Auto Classes"),K4e.forEach(t),Gx.forEach(t),_f=i(f),rt=n(f,"P",{});var Ox=s(rt);gi=r(Ox,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),hi=n(Ox,"CODE",{});var Z4e=s(hi);SA=r(Z4e,"from_pretrained()"),Z4e.forEach(t),uf=r(Ox,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Ox.forEach(t),De=i(f),We=n(f,"P",{});var An=s(We);pi=r(An,"Instantiating one of "),yn=n(An,"A",{href:!0});var eEe=s(yn);RA=r(eEe,"AutoConfig"),eEe.forEach(t),Ln=r(An,", "),xn=n(An,"A",{href:!0});var oEe=s(xn);PA=r(oEe,"AutoModel"),oEe.forEach(t),_i=r(An,`, and
`),$n=n(An,"A",{href:!0});var rEe=s($n);BA=r(rEe,"AutoTokenizer"),rEe.forEach(t),ui=r(An," will directly create a class of the relevant architecture. For instance"),An.forEach(t),bf=i(f),T(Ca.$$.fragment,f),Qe=i(f),Ae=n(f,"P",{});var Vx=s(Ae);ok=r(Vx,"will create a model that is an instance of "),bi=n(Vx,"A",{href:!0});var tEe=s(bi);rk=r(tEe,"BertModel"),tEe.forEach(t),tk=r(Vx,"."),Vx.forEach(t),Eo=i(f),wa=n(f,"P",{});var Xx=s(wa);ak=r(Xx,"There is one class of "),vf=n(Xx,"CODE",{});var aEe=s(vf);nk=r(aEe,"AutoModel"),aEe.forEach(t),WOe=r(Xx," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),Xx.forEach(t),Bqe=i(f),vi=n(f,"H2",{class:!0});var zx=s(vi);Ff=n(zx,"A",{id:!0,class:!0,href:!0});var nEe=s(Ff);Aoe=n(nEe,"SPAN",{});var sEe=s(Aoe);T(IA.$$.fragment,sEe),sEe.forEach(t),nEe.forEach(t),QOe=i(zx),yoe=n(zx,"SPAN",{});var lEe=s(yoe);HOe=r(lEe,"Extending the Auto Classes"),lEe.forEach(t),zx.forEach(t),Iqe=i(f),kn=n(f,"P",{});var gf=s(kn);UOe=r(gf,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Loe=n(gf,"CODE",{});var iEe=s(Loe);JOe=r(iEe,"NewModel"),iEe.forEach(t),YOe=r(gf,", make sure you have a "),xoe=n(gf,"CODE",{});var dEe=s(xoe);KOe=r(dEe,"NewModelConfig"),dEe.forEach(t),ZOe=r(gf,` then you can add those to the auto
classes like this:`),gf.forEach(t),Nqe=i(f),T(NA.$$.fragment,f),qqe=i(f),sk=n(f,"P",{});var cEe=s(sk);eVe=r(cEe,"You will then be able to use the auto classes like you would usually do!"),cEe.forEach(t),jqe=i(f),T(Tf.$$.fragment,f),Dqe=i(f),Fi=n(f,"H2",{class:!0});var Wx=s(Fi);Mf=n(Wx,"A",{id:!0,class:!0,href:!0});var fEe=s(Mf);$oe=n(fEe,"SPAN",{});var mEe=s($oe);T(qA.$$.fragment,mEe),mEe.forEach(t),fEe.forEach(t),oVe=i(Wx),koe=n(Wx,"SPAN",{});var gEe=s(koe);rVe=r(gEe,"AutoConfig"),gEe.forEach(t),Wx.forEach(t),Gqe=i(f),Co=n(f,"DIV",{class:!0});var et=s(Co);T(jA.$$.fragment,et),tVe=i(et),DA=n(et,"P",{});var Qx=s(DA);aVe=r(Qx,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),lk=n(Qx,"A",{href:!0});var hEe=s(lk);nVe=r(hEe,"from_pretrained()"),hEe.forEach(t),sVe=r(Qx," class method."),Qx.forEach(t),lVe=i(et),GA=n(et,"P",{});var Hx=s(GA);iVe=r(Hx,"This class cannot be instantiated directly using "),Soe=n(Hx,"CODE",{});var pEe=s(Soe);dVe=r(pEe,"__init__()"),pEe.forEach(t),cVe=r(Hx," (throws an error)."),Hx.forEach(t),fVe=i(et),Er=n(et,"DIV",{class:!0});var ot=s(Er);T(OA.$$.fragment,ot),mVe=i(ot),Roe=n(ot,"P",{});var _Ee=s(Roe);gVe=r(_Ee,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),_Ee.forEach(t),hVe=i(ot),Ti=n(ot,"P",{});var hf=s(Ti);pVe=r(hf,"The configuration class to instantiate is selected based on the "),Poe=n(hf,"CODE",{});var uEe=s(Poe);_Ve=r(uEe,"model_type"),uEe.forEach(t),uVe=r(hf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Boe=n(hf,"CODE",{});var bEe=s(Boe);bVe=r(bEe,"pretrained_model_name_or_path"),bEe.forEach(t),vVe=r(hf,":"),hf.forEach(t),FVe=i(ot),A=n(ot,"UL",{});var y=s(A);Ef=n(y,"LI",{});var p0=s(Ef);Ioe=n(p0,"STRONG",{});var vEe=s(Ioe);TVe=r(vEe,"albert"),vEe.forEach(t),MVe=r(p0," \u2014 "),ik=n(p0,"A",{href:!0});var FEe=s(ik);EVe=r(FEe,"AlbertConfig"),FEe.forEach(t),CVe=r(p0," (ALBERT model)"),p0.forEach(t),wVe=i(y),Cf=n(y,"LI",{});var _0=s(Cf);Noe=n(_0,"STRONG",{});var TEe=s(Noe);AVe=r(TEe,"bart"),TEe.forEach(t),yVe=r(_0," \u2014 "),dk=n(_0,"A",{href:!0});var MEe=s(dk);LVe=r(MEe,"BartConfig"),MEe.forEach(t),xVe=r(_0," (BART model)"),_0.forEach(t),$Ve=i(y),wf=n(y,"LI",{});var u0=s(wf);qoe=n(u0,"STRONG",{});var EEe=s(qoe);kVe=r(EEe,"beit"),EEe.forEach(t),SVe=r(u0," \u2014 "),ck=n(u0,"A",{href:!0});var CEe=s(ck);RVe=r(CEe,"BeitConfig"),CEe.forEach(t),PVe=r(u0," (BEiT model)"),u0.forEach(t),BVe=i(y),Af=n(y,"LI",{});var b0=s(Af);joe=n(b0,"STRONG",{});var wEe=s(joe);IVe=r(wEe,"bert"),wEe.forEach(t),NVe=r(b0," \u2014 "),fk=n(b0,"A",{href:!0});var AEe=s(fk);qVe=r(AEe,"BertConfig"),AEe.forEach(t),jVe=r(b0," (BERT model)"),b0.forEach(t),DVe=i(y),yf=n(y,"LI",{});var v0=s(yf);Doe=n(v0,"STRONG",{});var yEe=s(Doe);GVe=r(yEe,"bert-generation"),yEe.forEach(t),OVe=r(v0," \u2014 "),mk=n(v0,"A",{href:!0});var LEe=s(mk);VVe=r(LEe,"BertGenerationConfig"),LEe.forEach(t),XVe=r(v0," (Bert Generation model)"),v0.forEach(t),zVe=i(y),Lf=n(y,"LI",{});var F0=s(Lf);Goe=n(F0,"STRONG",{});var xEe=s(Goe);WVe=r(xEe,"big_bird"),xEe.forEach(t),QVe=r(F0," \u2014 "),gk=n(F0,"A",{href:!0});var $Ee=s(gk);HVe=r($Ee,"BigBirdConfig"),$Ee.forEach(t),UVe=r(F0," (BigBird model)"),F0.forEach(t),JVe=i(y),xf=n(y,"LI",{});var T0=s(xf);Ooe=n(T0,"STRONG",{});var kEe=s(Ooe);YVe=r(kEe,"bigbird_pegasus"),kEe.forEach(t),KVe=r(T0," \u2014 "),hk=n(T0,"A",{href:!0});var SEe=s(hk);ZVe=r(SEe,"BigBirdPegasusConfig"),SEe.forEach(t),eXe=r(T0," (BigBird-Pegasus model)"),T0.forEach(t),oXe=i(y),$f=n(y,"LI",{});var M0=s($f);Voe=n(M0,"STRONG",{});var REe=s(Voe);rXe=r(REe,"blenderbot"),REe.forEach(t),tXe=r(M0," \u2014 "),pk=n(M0,"A",{href:!0});var PEe=s(pk);aXe=r(PEe,"BlenderbotConfig"),PEe.forEach(t),nXe=r(M0," (Blenderbot model)"),M0.forEach(t),sXe=i(y),kf=n(y,"LI",{});var E0=s(kf);Xoe=n(E0,"STRONG",{});var BEe=s(Xoe);lXe=r(BEe,"blenderbot-small"),BEe.forEach(t),iXe=r(E0," \u2014 "),_k=n(E0,"A",{href:!0});var IEe=s(_k);dXe=r(IEe,"BlenderbotSmallConfig"),IEe.forEach(t),cXe=r(E0," (BlenderbotSmall model)"),E0.forEach(t),fXe=i(y),Sf=n(y,"LI",{});var C0=s(Sf);zoe=n(C0,"STRONG",{});var NEe=s(zoe);mXe=r(NEe,"camembert"),NEe.forEach(t),gXe=r(C0," \u2014 "),uk=n(C0,"A",{href:!0});var qEe=s(uk);hXe=r(qEe,"CamembertConfig"),qEe.forEach(t),pXe=r(C0," (CamemBERT model)"),C0.forEach(t),_Xe=i(y),Rf=n(y,"LI",{});var w0=s(Rf);Woe=n(w0,"STRONG",{});var jEe=s(Woe);uXe=r(jEe,"canine"),jEe.forEach(t),bXe=r(w0," \u2014 "),bk=n(w0,"A",{href:!0});var DEe=s(bk);vXe=r(DEe,"CanineConfig"),DEe.forEach(t),FXe=r(w0," (CANINE model)"),w0.forEach(t),TXe=i(y),Pf=n(y,"LI",{});var A0=s(Pf);Qoe=n(A0,"STRONG",{});var GEe=s(Qoe);MXe=r(GEe,"clip"),GEe.forEach(t),EXe=r(A0," \u2014 "),vk=n(A0,"A",{href:!0});var OEe=s(vk);CXe=r(OEe,"CLIPConfig"),OEe.forEach(t),wXe=r(A0," (CLIP model)"),A0.forEach(t),AXe=i(y),Bf=n(y,"LI",{});var y0=s(Bf);Hoe=n(y0,"STRONG",{});var VEe=s(Hoe);yXe=r(VEe,"convbert"),VEe.forEach(t),LXe=r(y0," \u2014 "),Fk=n(y0,"A",{href:!0});var XEe=s(Fk);xXe=r(XEe,"ConvBertConfig"),XEe.forEach(t),$Xe=r(y0," (ConvBERT model)"),y0.forEach(t),kXe=i(y),If=n(y,"LI",{});var L0=s(If);Uoe=n(L0,"STRONG",{});var zEe=s(Uoe);SXe=r(zEe,"convnext"),zEe.forEach(t),RXe=r(L0," \u2014 "),Tk=n(L0,"A",{href:!0});var WEe=s(Tk);PXe=r(WEe,"ConvNextConfig"),WEe.forEach(t),BXe=r(L0," (ConvNeXT model)"),L0.forEach(t),IXe=i(y),Nf=n(y,"LI",{});var x0=s(Nf);Joe=n(x0,"STRONG",{});var QEe=s(Joe);NXe=r(QEe,"ctrl"),QEe.forEach(t),qXe=r(x0," \u2014 "),Mk=n(x0,"A",{href:!0});var HEe=s(Mk);jXe=r(HEe,"CTRLConfig"),HEe.forEach(t),DXe=r(x0," (CTRL model)"),x0.forEach(t),GXe=i(y),qf=n(y,"LI",{});var $0=s(qf);Yoe=n($0,"STRONG",{});var UEe=s(Yoe);OXe=r(UEe,"cvt"),UEe.forEach(t),VXe=r($0," \u2014 "),Ek=n($0,"A",{href:!0});var JEe=s(Ek);XXe=r(JEe,"CvtConfig"),JEe.forEach(t),zXe=r($0," (CvT model)"),$0.forEach(t),WXe=i(y),jf=n(y,"LI",{});var k0=s(jf);Koe=n(k0,"STRONG",{});var YEe=s(Koe);QXe=r(YEe,"data2vec-audio"),YEe.forEach(t),HXe=r(k0," \u2014 "),Ck=n(k0,"A",{href:!0});var KEe=s(Ck);UXe=r(KEe,"Data2VecAudioConfig"),KEe.forEach(t),JXe=r(k0," (Data2VecAudio model)"),k0.forEach(t),YXe=i(y),Df=n(y,"LI",{});var S0=s(Df);Zoe=n(S0,"STRONG",{});var ZEe=s(Zoe);KXe=r(ZEe,"data2vec-text"),ZEe.forEach(t),ZXe=r(S0," \u2014 "),wk=n(S0,"A",{href:!0});var eCe=s(wk);eze=r(eCe,"Data2VecTextConfig"),eCe.forEach(t),oze=r(S0," (Data2VecText model)"),S0.forEach(t),rze=i(y),Gf=n(y,"LI",{});var R0=s(Gf);ere=n(R0,"STRONG",{});var oCe=s(ere);tze=r(oCe,"data2vec-vision"),oCe.forEach(t),aze=r(R0," \u2014 "),Ak=n(R0,"A",{href:!0});var rCe=s(Ak);nze=r(rCe,"Data2VecVisionConfig"),rCe.forEach(t),sze=r(R0," (Data2VecVision model)"),R0.forEach(t),lze=i(y),Of=n(y,"LI",{});var P0=s(Of);ore=n(P0,"STRONG",{});var tCe=s(ore);ize=r(tCe,"deberta"),tCe.forEach(t),dze=r(P0," \u2014 "),yk=n(P0,"A",{href:!0});var aCe=s(yk);cze=r(aCe,"DebertaConfig"),aCe.forEach(t),fze=r(P0," (DeBERTa model)"),P0.forEach(t),mze=i(y),Vf=n(y,"LI",{});var B0=s(Vf);rre=n(B0,"STRONG",{});var nCe=s(rre);gze=r(nCe,"deberta-v2"),nCe.forEach(t),hze=r(B0," \u2014 "),Lk=n(B0,"A",{href:!0});var sCe=s(Lk);pze=r(sCe,"DebertaV2Config"),sCe.forEach(t),_ze=r(B0," (DeBERTa-v2 model)"),B0.forEach(t),uze=i(y),Xf=n(y,"LI",{});var I0=s(Xf);tre=n(I0,"STRONG",{});var lCe=s(tre);bze=r(lCe,"decision_transformer"),lCe.forEach(t),vze=r(I0," \u2014 "),xk=n(I0,"A",{href:!0});var iCe=s(xk);Fze=r(iCe,"DecisionTransformerConfig"),iCe.forEach(t),Tze=r(I0," (Decision Transformer model)"),I0.forEach(t),Mze=i(y),zf=n(y,"LI",{});var N0=s(zf);are=n(N0,"STRONG",{});var dCe=s(are);Eze=r(dCe,"deit"),dCe.forEach(t),Cze=r(N0," \u2014 "),$k=n(N0,"A",{href:!0});var lzr=s($k);wze=r(lzr,"DeiTConfig"),lzr.forEach(t),Aze=r(N0," (DeiT model)"),N0.forEach(t),yze=i(y),Wf=n(y,"LI",{});var cCe=s(Wf);nre=n(cCe,"STRONG",{});var izr=s(nre);Lze=r(izr,"detr"),izr.forEach(t),xze=r(cCe," \u2014 "),kk=n(cCe,"A",{href:!0});var dzr=s(kk);$ze=r(dzr,"DetrConfig"),dzr.forEach(t),kze=r(cCe," (DETR model)"),cCe.forEach(t),Sze=i(y),Qf=n(y,"LI",{});var fCe=s(Qf);sre=n(fCe,"STRONG",{});var czr=s(sre);Rze=r(czr,"distilbert"),czr.forEach(t),Pze=r(fCe," \u2014 "),Sk=n(fCe,"A",{href:!0});var fzr=s(Sk);Bze=r(fzr,"DistilBertConfig"),fzr.forEach(t),Ize=r(fCe," (DistilBERT model)"),fCe.forEach(t),Nze=i(y),Hf=n(y,"LI",{});var mCe=s(Hf);lre=n(mCe,"STRONG",{});var mzr=s(lre);qze=r(mzr,"dpr"),mzr.forEach(t),jze=r(mCe," \u2014 "),Rk=n(mCe,"A",{href:!0});var gzr=s(Rk);Dze=r(gzr,"DPRConfig"),gzr.forEach(t),Gze=r(mCe," (DPR model)"),mCe.forEach(t),Oze=i(y),Uf=n(y,"LI",{});var gCe=s(Uf);ire=n(gCe,"STRONG",{});var hzr=s(ire);Vze=r(hzr,"dpt"),hzr.forEach(t),Xze=r(gCe," \u2014 "),Pk=n(gCe,"A",{href:!0});var pzr=s(Pk);zze=r(pzr,"DPTConfig"),pzr.forEach(t),Wze=r(gCe," (DPT model)"),gCe.forEach(t),Qze=i(y),Jf=n(y,"LI",{});var hCe=s(Jf);dre=n(hCe,"STRONG",{});var _zr=s(dre);Hze=r(_zr,"electra"),_zr.forEach(t),Uze=r(hCe," \u2014 "),Bk=n(hCe,"A",{href:!0});var uzr=s(Bk);Jze=r(uzr,"ElectraConfig"),uzr.forEach(t),Yze=r(hCe," (ELECTRA model)"),hCe.forEach(t),Kze=i(y),Yf=n(y,"LI",{});var pCe=s(Yf);cre=n(pCe,"STRONG",{});var bzr=s(cre);Zze=r(bzr,"encoder-decoder"),bzr.forEach(t),eWe=r(pCe," \u2014 "),Ik=n(pCe,"A",{href:!0});var vzr=s(Ik);oWe=r(vzr,"EncoderDecoderConfig"),vzr.forEach(t),rWe=r(pCe," (Encoder decoder model)"),pCe.forEach(t),tWe=i(y),Kf=n(y,"LI",{});var _Ce=s(Kf);fre=n(_Ce,"STRONG",{});var Fzr=s(fre);aWe=r(Fzr,"flaubert"),Fzr.forEach(t),nWe=r(_Ce," \u2014 "),Nk=n(_Ce,"A",{href:!0});var Tzr=s(Nk);sWe=r(Tzr,"FlaubertConfig"),Tzr.forEach(t),lWe=r(_Ce," (FlauBERT model)"),_Ce.forEach(t),iWe=i(y),Zf=n(y,"LI",{});var uCe=s(Zf);mre=n(uCe,"STRONG",{});var Mzr=s(mre);dWe=r(Mzr,"flava"),Mzr.forEach(t),cWe=r(uCe," \u2014 "),qk=n(uCe,"A",{href:!0});var Ezr=s(qk);fWe=r(Ezr,"FlavaConfig"),Ezr.forEach(t),mWe=r(uCe," (FLAVA model)"),uCe.forEach(t),gWe=i(y),em=n(y,"LI",{});var bCe=s(em);gre=n(bCe,"STRONG",{});var Czr=s(gre);hWe=r(Czr,"fnet"),Czr.forEach(t),pWe=r(bCe," \u2014 "),jk=n(bCe,"A",{href:!0});var wzr=s(jk);_We=r(wzr,"FNetConfig"),wzr.forEach(t),uWe=r(bCe," (FNet model)"),bCe.forEach(t),bWe=i(y),om=n(y,"LI",{});var vCe=s(om);hre=n(vCe,"STRONG",{});var Azr=s(hre);vWe=r(Azr,"fsmt"),Azr.forEach(t),FWe=r(vCe," \u2014 "),Dk=n(vCe,"A",{href:!0});var yzr=s(Dk);TWe=r(yzr,"FSMTConfig"),yzr.forEach(t),MWe=r(vCe," (FairSeq Machine-Translation model)"),vCe.forEach(t),EWe=i(y),rm=n(y,"LI",{});var FCe=s(rm);pre=n(FCe,"STRONG",{});var Lzr=s(pre);CWe=r(Lzr,"funnel"),Lzr.forEach(t),wWe=r(FCe," \u2014 "),Gk=n(FCe,"A",{href:!0});var xzr=s(Gk);AWe=r(xzr,"FunnelConfig"),xzr.forEach(t),yWe=r(FCe," (Funnel Transformer model)"),FCe.forEach(t),LWe=i(y),tm=n(y,"LI",{});var TCe=s(tm);_re=n(TCe,"STRONG",{});var $zr=s(_re);xWe=r($zr,"glpn"),$zr.forEach(t),$We=r(TCe," \u2014 "),Ok=n(TCe,"A",{href:!0});var kzr=s(Ok);kWe=r(kzr,"GLPNConfig"),kzr.forEach(t),SWe=r(TCe," (GLPN model)"),TCe.forEach(t),RWe=i(y),am=n(y,"LI",{});var MCe=s(am);ure=n(MCe,"STRONG",{});var Szr=s(ure);PWe=r(Szr,"gpt2"),Szr.forEach(t),BWe=r(MCe," \u2014 "),Vk=n(MCe,"A",{href:!0});var Rzr=s(Vk);IWe=r(Rzr,"GPT2Config"),Rzr.forEach(t),NWe=r(MCe," (OpenAI GPT-2 model)"),MCe.forEach(t),qWe=i(y),nm=n(y,"LI",{});var ECe=s(nm);bre=n(ECe,"STRONG",{});var Pzr=s(bre);jWe=r(Pzr,"gpt_neo"),Pzr.forEach(t),DWe=r(ECe," \u2014 "),Xk=n(ECe,"A",{href:!0});var Bzr=s(Xk);GWe=r(Bzr,"GPTNeoConfig"),Bzr.forEach(t),OWe=r(ECe," (GPT Neo model)"),ECe.forEach(t),VWe=i(y),sm=n(y,"LI",{});var CCe=s(sm);vre=n(CCe,"STRONG",{});var Izr=s(vre);XWe=r(Izr,"gpt_neox"),Izr.forEach(t),zWe=r(CCe," \u2014 "),zk=n(CCe,"A",{href:!0});var Nzr=s(zk);WWe=r(Nzr,"GPTNeoXConfig"),Nzr.forEach(t),QWe=r(CCe," (GPT NeoX model)"),CCe.forEach(t),HWe=i(y),lm=n(y,"LI",{});var wCe=s(lm);Fre=n(wCe,"STRONG",{});var qzr=s(Fre);UWe=r(qzr,"gptj"),qzr.forEach(t),JWe=r(wCe," \u2014 "),Wk=n(wCe,"A",{href:!0});var jzr=s(Wk);YWe=r(jzr,"GPTJConfig"),jzr.forEach(t),KWe=r(wCe," (GPT-J model)"),wCe.forEach(t),ZWe=i(y),im=n(y,"LI",{});var ACe=s(im);Tre=n(ACe,"STRONG",{});var Dzr=s(Tre);eQe=r(Dzr,"hubert"),Dzr.forEach(t),oQe=r(ACe," \u2014 "),Qk=n(ACe,"A",{href:!0});var Gzr=s(Qk);rQe=r(Gzr,"HubertConfig"),Gzr.forEach(t),tQe=r(ACe," (Hubert model)"),ACe.forEach(t),aQe=i(y),dm=n(y,"LI",{});var yCe=s(dm);Mre=n(yCe,"STRONG",{});var Ozr=s(Mre);nQe=r(Ozr,"ibert"),Ozr.forEach(t),sQe=r(yCe," \u2014 "),Hk=n(yCe,"A",{href:!0});var Vzr=s(Hk);lQe=r(Vzr,"IBertConfig"),Vzr.forEach(t),iQe=r(yCe," (I-BERT model)"),yCe.forEach(t),dQe=i(y),cm=n(y,"LI",{});var LCe=s(cm);Ere=n(LCe,"STRONG",{});var Xzr=s(Ere);cQe=r(Xzr,"imagegpt"),Xzr.forEach(t),fQe=r(LCe," \u2014 "),Uk=n(LCe,"A",{href:!0});var zzr=s(Uk);mQe=r(zzr,"ImageGPTConfig"),zzr.forEach(t),gQe=r(LCe," (ImageGPT model)"),LCe.forEach(t),hQe=i(y),fm=n(y,"LI",{});var xCe=s(fm);Cre=n(xCe,"STRONG",{});var Wzr=s(Cre);pQe=r(Wzr,"layoutlm"),Wzr.forEach(t),_Qe=r(xCe," \u2014 "),Jk=n(xCe,"A",{href:!0});var Qzr=s(Jk);uQe=r(Qzr,"LayoutLMConfig"),Qzr.forEach(t),bQe=r(xCe," (LayoutLM model)"),xCe.forEach(t),vQe=i(y),mm=n(y,"LI",{});var $Ce=s(mm);wre=n($Ce,"STRONG",{});var Hzr=s(wre);FQe=r(Hzr,"layoutlmv2"),Hzr.forEach(t),TQe=r($Ce," \u2014 "),Yk=n($Ce,"A",{href:!0});var Uzr=s(Yk);MQe=r(Uzr,"LayoutLMv2Config"),Uzr.forEach(t),EQe=r($Ce," (LayoutLMv2 model)"),$Ce.forEach(t),CQe=i(y),gm=n(y,"LI",{});var kCe=s(gm);Are=n(kCe,"STRONG",{});var Jzr=s(Are);wQe=r(Jzr,"layoutlmv3"),Jzr.forEach(t),AQe=r(kCe," \u2014 "),Kk=n(kCe,"A",{href:!0});var Yzr=s(Kk);yQe=r(Yzr,"LayoutLMv3Config"),Yzr.forEach(t),LQe=r(kCe," (LayoutLMv3 model)"),kCe.forEach(t),xQe=i(y),hm=n(y,"LI",{});var SCe=s(hm);yre=n(SCe,"STRONG",{});var Kzr=s(yre);$Qe=r(Kzr,"led"),Kzr.forEach(t),kQe=r(SCe," \u2014 "),Zk=n(SCe,"A",{href:!0});var Zzr=s(Zk);SQe=r(Zzr,"LEDConfig"),Zzr.forEach(t),RQe=r(SCe," (LED model)"),SCe.forEach(t),PQe=i(y),pm=n(y,"LI",{});var RCe=s(pm);Lre=n(RCe,"STRONG",{});var eWr=s(Lre);BQe=r(eWr,"levit"),eWr.forEach(t),IQe=r(RCe," \u2014 "),eS=n(RCe,"A",{href:!0});var oWr=s(eS);NQe=r(oWr,"LevitConfig"),oWr.forEach(t),qQe=r(RCe," (LeViT model)"),RCe.forEach(t),jQe=i(y),_m=n(y,"LI",{});var PCe=s(_m);xre=n(PCe,"STRONG",{});var rWr=s(xre);DQe=r(rWr,"longformer"),rWr.forEach(t),GQe=r(PCe," \u2014 "),oS=n(PCe,"A",{href:!0});var tWr=s(oS);OQe=r(tWr,"LongformerConfig"),tWr.forEach(t),VQe=r(PCe," (Longformer model)"),PCe.forEach(t),XQe=i(y),um=n(y,"LI",{});var BCe=s(um);$re=n(BCe,"STRONG",{});var aWr=s($re);zQe=r(aWr,"luke"),aWr.forEach(t),WQe=r(BCe," \u2014 "),rS=n(BCe,"A",{href:!0});var nWr=s(rS);QQe=r(nWr,"LukeConfig"),nWr.forEach(t),HQe=r(BCe," (LUKE model)"),BCe.forEach(t),UQe=i(y),bm=n(y,"LI",{});var ICe=s(bm);kre=n(ICe,"STRONG",{});var sWr=s(kre);JQe=r(sWr,"lxmert"),sWr.forEach(t),YQe=r(ICe," \u2014 "),tS=n(ICe,"A",{href:!0});var lWr=s(tS);KQe=r(lWr,"LxmertConfig"),lWr.forEach(t),ZQe=r(ICe," (LXMERT model)"),ICe.forEach(t),eHe=i(y),vm=n(y,"LI",{});var NCe=s(vm);Sre=n(NCe,"STRONG",{});var iWr=s(Sre);oHe=r(iWr,"m2m_100"),iWr.forEach(t),rHe=r(NCe," \u2014 "),aS=n(NCe,"A",{href:!0});var dWr=s(aS);tHe=r(dWr,"M2M100Config"),dWr.forEach(t),aHe=r(NCe," (M2M100 model)"),NCe.forEach(t),nHe=i(y),Fm=n(y,"LI",{});var qCe=s(Fm);Rre=n(qCe,"STRONG",{});var cWr=s(Rre);sHe=r(cWr,"marian"),cWr.forEach(t),lHe=r(qCe," \u2014 "),nS=n(qCe,"A",{href:!0});var fWr=s(nS);iHe=r(fWr,"MarianConfig"),fWr.forEach(t),dHe=r(qCe," (Marian model)"),qCe.forEach(t),cHe=i(y),Tm=n(y,"LI",{});var jCe=s(Tm);Pre=n(jCe,"STRONG",{});var mWr=s(Pre);fHe=r(mWr,"maskformer"),mWr.forEach(t),mHe=r(jCe," \u2014 "),sS=n(jCe,"A",{href:!0});var gWr=s(sS);gHe=r(gWr,"MaskFormerConfig"),gWr.forEach(t),hHe=r(jCe," (MaskFormer model)"),jCe.forEach(t),pHe=i(y),Mm=n(y,"LI",{});var DCe=s(Mm);Bre=n(DCe,"STRONG",{});var hWr=s(Bre);_He=r(hWr,"mbart"),hWr.forEach(t),uHe=r(DCe," \u2014 "),lS=n(DCe,"A",{href:!0});var pWr=s(lS);bHe=r(pWr,"MBartConfig"),pWr.forEach(t),vHe=r(DCe," (mBART model)"),DCe.forEach(t),FHe=i(y),Em=n(y,"LI",{});var GCe=s(Em);Ire=n(GCe,"STRONG",{});var _Wr=s(Ire);THe=r(_Wr,"megatron-bert"),_Wr.forEach(t),MHe=r(GCe," \u2014 "),iS=n(GCe,"A",{href:!0});var uWr=s(iS);EHe=r(uWr,"MegatronBertConfig"),uWr.forEach(t),CHe=r(GCe," (Megatron-BERT model)"),GCe.forEach(t),wHe=i(y),Cm=n(y,"LI",{});var OCe=s(Cm);Nre=n(OCe,"STRONG",{});var bWr=s(Nre);AHe=r(bWr,"mobilebert"),bWr.forEach(t),yHe=r(OCe," \u2014 "),dS=n(OCe,"A",{href:!0});var vWr=s(dS);LHe=r(vWr,"MobileBertConfig"),vWr.forEach(t),xHe=r(OCe," (MobileBERT model)"),OCe.forEach(t),$He=i(y),wm=n(y,"LI",{});var VCe=s(wm);qre=n(VCe,"STRONG",{});var FWr=s(qre);kHe=r(FWr,"mpnet"),FWr.forEach(t),SHe=r(VCe," \u2014 "),cS=n(VCe,"A",{href:!0});var TWr=s(cS);RHe=r(TWr,"MPNetConfig"),TWr.forEach(t),PHe=r(VCe," (MPNet model)"),VCe.forEach(t),BHe=i(y),Am=n(y,"LI",{});var XCe=s(Am);jre=n(XCe,"STRONG",{});var MWr=s(jre);IHe=r(MWr,"mt5"),MWr.forEach(t),NHe=r(XCe," \u2014 "),fS=n(XCe,"A",{href:!0});var EWr=s(fS);qHe=r(EWr,"MT5Config"),EWr.forEach(t),jHe=r(XCe," (MT5 model)"),XCe.forEach(t),DHe=i(y),ym=n(y,"LI",{});var zCe=s(ym);Dre=n(zCe,"STRONG",{});var CWr=s(Dre);GHe=r(CWr,"nystromformer"),CWr.forEach(t),OHe=r(zCe," \u2014 "),mS=n(zCe,"A",{href:!0});var wWr=s(mS);VHe=r(wWr,"NystromformerConfig"),wWr.forEach(t),XHe=r(zCe," (Nystr\xF6mformer model)"),zCe.forEach(t),zHe=i(y),Lm=n(y,"LI",{});var WCe=s(Lm);Gre=n(WCe,"STRONG",{});var AWr=s(Gre);WHe=r(AWr,"openai-gpt"),AWr.forEach(t),QHe=r(WCe," \u2014 "),gS=n(WCe,"A",{href:!0});var yWr=s(gS);HHe=r(yWr,"OpenAIGPTConfig"),yWr.forEach(t),UHe=r(WCe," (OpenAI GPT model)"),WCe.forEach(t),JHe=i(y),xm=n(y,"LI",{});var QCe=s(xm);Ore=n(QCe,"STRONG",{});var LWr=s(Ore);YHe=r(LWr,"opt"),LWr.forEach(t),KHe=r(QCe," \u2014 "),hS=n(QCe,"A",{href:!0});var xWr=s(hS);ZHe=r(xWr,"OPTConfig"),xWr.forEach(t),eUe=r(QCe," (OPT model)"),QCe.forEach(t),oUe=i(y),$m=n(y,"LI",{});var HCe=s($m);Vre=n(HCe,"STRONG",{});var $Wr=s(Vre);rUe=r($Wr,"pegasus"),$Wr.forEach(t),tUe=r(HCe," \u2014 "),pS=n(HCe,"A",{href:!0});var kWr=s(pS);aUe=r(kWr,"PegasusConfig"),kWr.forEach(t),nUe=r(HCe," (Pegasus model)"),HCe.forEach(t),sUe=i(y),km=n(y,"LI",{});var UCe=s(km);Xre=n(UCe,"STRONG",{});var SWr=s(Xre);lUe=r(SWr,"perceiver"),SWr.forEach(t),iUe=r(UCe," \u2014 "),_S=n(UCe,"A",{href:!0});var RWr=s(_S);dUe=r(RWr,"PerceiverConfig"),RWr.forEach(t),cUe=r(UCe," (Perceiver model)"),UCe.forEach(t),fUe=i(y),Sm=n(y,"LI",{});var JCe=s(Sm);zre=n(JCe,"STRONG",{});var PWr=s(zre);mUe=r(PWr,"plbart"),PWr.forEach(t),gUe=r(JCe," \u2014 "),uS=n(JCe,"A",{href:!0});var BWr=s(uS);hUe=r(BWr,"PLBartConfig"),BWr.forEach(t),pUe=r(JCe," (PLBart model)"),JCe.forEach(t),_Ue=i(y),Rm=n(y,"LI",{});var YCe=s(Rm);Wre=n(YCe,"STRONG",{});var IWr=s(Wre);uUe=r(IWr,"poolformer"),IWr.forEach(t),bUe=r(YCe," \u2014 "),bS=n(YCe,"A",{href:!0});var NWr=s(bS);vUe=r(NWr,"PoolFormerConfig"),NWr.forEach(t),FUe=r(YCe," (PoolFormer model)"),YCe.forEach(t),TUe=i(y),Pm=n(y,"LI",{});var KCe=s(Pm);Qre=n(KCe,"STRONG",{});var qWr=s(Qre);MUe=r(qWr,"prophetnet"),qWr.forEach(t),EUe=r(KCe," \u2014 "),vS=n(KCe,"A",{href:!0});var jWr=s(vS);CUe=r(jWr,"ProphetNetConfig"),jWr.forEach(t),wUe=r(KCe," (ProphetNet model)"),KCe.forEach(t),AUe=i(y),Bm=n(y,"LI",{});var ZCe=s(Bm);Hre=n(ZCe,"STRONG",{});var DWr=s(Hre);yUe=r(DWr,"qdqbert"),DWr.forEach(t),LUe=r(ZCe," \u2014 "),FS=n(ZCe,"A",{href:!0});var GWr=s(FS);xUe=r(GWr,"QDQBertConfig"),GWr.forEach(t),$Ue=r(ZCe," (QDQBert model)"),ZCe.forEach(t),kUe=i(y),Im=n(y,"LI",{});var e0e=s(Im);Ure=n(e0e,"STRONG",{});var OWr=s(Ure);SUe=r(OWr,"rag"),OWr.forEach(t),RUe=r(e0e," \u2014 "),TS=n(e0e,"A",{href:!0});var VWr=s(TS);PUe=r(VWr,"RagConfig"),VWr.forEach(t),BUe=r(e0e," (RAG model)"),e0e.forEach(t),IUe=i(y),Nm=n(y,"LI",{});var o0e=s(Nm);Jre=n(o0e,"STRONG",{});var XWr=s(Jre);NUe=r(XWr,"realm"),XWr.forEach(t),qUe=r(o0e," \u2014 "),MS=n(o0e,"A",{href:!0});var zWr=s(MS);jUe=r(zWr,"RealmConfig"),zWr.forEach(t),DUe=r(o0e," (REALM model)"),o0e.forEach(t),GUe=i(y),qm=n(y,"LI",{});var r0e=s(qm);Yre=n(r0e,"STRONG",{});var WWr=s(Yre);OUe=r(WWr,"reformer"),WWr.forEach(t),VUe=r(r0e," \u2014 "),ES=n(r0e,"A",{href:!0});var QWr=s(ES);XUe=r(QWr,"ReformerConfig"),QWr.forEach(t),zUe=r(r0e," (Reformer model)"),r0e.forEach(t),WUe=i(y),jm=n(y,"LI",{});var t0e=s(jm);Kre=n(t0e,"STRONG",{});var HWr=s(Kre);QUe=r(HWr,"regnet"),HWr.forEach(t),HUe=r(t0e," \u2014 "),CS=n(t0e,"A",{href:!0});var UWr=s(CS);UUe=r(UWr,"RegNetConfig"),UWr.forEach(t),JUe=r(t0e," (RegNet model)"),t0e.forEach(t),YUe=i(y),Dm=n(y,"LI",{});var a0e=s(Dm);Zre=n(a0e,"STRONG",{});var JWr=s(Zre);KUe=r(JWr,"rembert"),JWr.forEach(t),ZUe=r(a0e," \u2014 "),wS=n(a0e,"A",{href:!0});var YWr=s(wS);eJe=r(YWr,"RemBertConfig"),YWr.forEach(t),oJe=r(a0e," (RemBERT model)"),a0e.forEach(t),rJe=i(y),Gm=n(y,"LI",{});var n0e=s(Gm);ete=n(n0e,"STRONG",{});var KWr=s(ete);tJe=r(KWr,"resnet"),KWr.forEach(t),aJe=r(n0e," \u2014 "),AS=n(n0e,"A",{href:!0});var ZWr=s(AS);nJe=r(ZWr,"ResNetConfig"),ZWr.forEach(t),sJe=r(n0e," (ResNet model)"),n0e.forEach(t),lJe=i(y),Om=n(y,"LI",{});var s0e=s(Om);ote=n(s0e,"STRONG",{});var eQr=s(ote);iJe=r(eQr,"retribert"),eQr.forEach(t),dJe=r(s0e," \u2014 "),yS=n(s0e,"A",{href:!0});var oQr=s(yS);cJe=r(oQr,"RetriBertConfig"),oQr.forEach(t),fJe=r(s0e," (RetriBERT model)"),s0e.forEach(t),mJe=i(y),Vm=n(y,"LI",{});var l0e=s(Vm);rte=n(l0e,"STRONG",{});var rQr=s(rte);gJe=r(rQr,"roberta"),rQr.forEach(t),hJe=r(l0e," \u2014 "),LS=n(l0e,"A",{href:!0});var tQr=s(LS);pJe=r(tQr,"RobertaConfig"),tQr.forEach(t),_Je=r(l0e," (RoBERTa model)"),l0e.forEach(t),uJe=i(y),Xm=n(y,"LI",{});var i0e=s(Xm);tte=n(i0e,"STRONG",{});var aQr=s(tte);bJe=r(aQr,"roformer"),aQr.forEach(t),vJe=r(i0e," \u2014 "),xS=n(i0e,"A",{href:!0});var nQr=s(xS);FJe=r(nQr,"RoFormerConfig"),nQr.forEach(t),TJe=r(i0e," (RoFormer model)"),i0e.forEach(t),MJe=i(y),zm=n(y,"LI",{});var d0e=s(zm);ate=n(d0e,"STRONG",{});var sQr=s(ate);EJe=r(sQr,"segformer"),sQr.forEach(t),CJe=r(d0e," \u2014 "),$S=n(d0e,"A",{href:!0});var lQr=s($S);wJe=r(lQr,"SegformerConfig"),lQr.forEach(t),AJe=r(d0e," (SegFormer model)"),d0e.forEach(t),yJe=i(y),Wm=n(y,"LI",{});var c0e=s(Wm);nte=n(c0e,"STRONG",{});var iQr=s(nte);LJe=r(iQr,"sew"),iQr.forEach(t),xJe=r(c0e," \u2014 "),kS=n(c0e,"A",{href:!0});var dQr=s(kS);$Je=r(dQr,"SEWConfig"),dQr.forEach(t),kJe=r(c0e," (SEW model)"),c0e.forEach(t),SJe=i(y),Qm=n(y,"LI",{});var f0e=s(Qm);ste=n(f0e,"STRONG",{});var cQr=s(ste);RJe=r(cQr,"sew-d"),cQr.forEach(t),PJe=r(f0e," \u2014 "),SS=n(f0e,"A",{href:!0});var fQr=s(SS);BJe=r(fQr,"SEWDConfig"),fQr.forEach(t),IJe=r(f0e," (SEW-D model)"),f0e.forEach(t),NJe=i(y),Hm=n(y,"LI",{});var m0e=s(Hm);lte=n(m0e,"STRONG",{});var mQr=s(lte);qJe=r(mQr,"speech-encoder-decoder"),mQr.forEach(t),jJe=r(m0e," \u2014 "),RS=n(m0e,"A",{href:!0});var gQr=s(RS);DJe=r(gQr,"SpeechEncoderDecoderConfig"),gQr.forEach(t),GJe=r(m0e," (Speech Encoder decoder model)"),m0e.forEach(t),OJe=i(y),Um=n(y,"LI",{});var g0e=s(Um);ite=n(g0e,"STRONG",{});var hQr=s(ite);VJe=r(hQr,"speech_to_text"),hQr.forEach(t),XJe=r(g0e," \u2014 "),PS=n(g0e,"A",{href:!0});var pQr=s(PS);zJe=r(pQr,"Speech2TextConfig"),pQr.forEach(t),WJe=r(g0e," (Speech2Text model)"),g0e.forEach(t),QJe=i(y),Jm=n(y,"LI",{});var h0e=s(Jm);dte=n(h0e,"STRONG",{});var _Qr=s(dte);HJe=r(_Qr,"speech_to_text_2"),_Qr.forEach(t),UJe=r(h0e," \u2014 "),BS=n(h0e,"A",{href:!0});var uQr=s(BS);JJe=r(uQr,"Speech2Text2Config"),uQr.forEach(t),YJe=r(h0e," (Speech2Text2 model)"),h0e.forEach(t),KJe=i(y),Ym=n(y,"LI",{});var p0e=s(Ym);cte=n(p0e,"STRONG",{});var bQr=s(cte);ZJe=r(bQr,"splinter"),bQr.forEach(t),eYe=r(p0e," \u2014 "),IS=n(p0e,"A",{href:!0});var vQr=s(IS);oYe=r(vQr,"SplinterConfig"),vQr.forEach(t),rYe=r(p0e," (Splinter model)"),p0e.forEach(t),tYe=i(y),Km=n(y,"LI",{});var _0e=s(Km);fte=n(_0e,"STRONG",{});var FQr=s(fte);aYe=r(FQr,"squeezebert"),FQr.forEach(t),nYe=r(_0e," \u2014 "),NS=n(_0e,"A",{href:!0});var TQr=s(NS);sYe=r(TQr,"SqueezeBertConfig"),TQr.forEach(t),lYe=r(_0e," (SqueezeBERT model)"),_0e.forEach(t),iYe=i(y),Zm=n(y,"LI",{});var u0e=s(Zm);mte=n(u0e,"STRONG",{});var MQr=s(mte);dYe=r(MQr,"swin"),MQr.forEach(t),cYe=r(u0e," \u2014 "),qS=n(u0e,"A",{href:!0});var EQr=s(qS);fYe=r(EQr,"SwinConfig"),EQr.forEach(t),mYe=r(u0e," (Swin Transformer model)"),u0e.forEach(t),gYe=i(y),eg=n(y,"LI",{});var b0e=s(eg);gte=n(b0e,"STRONG",{});var CQr=s(gte);hYe=r(CQr,"t5"),CQr.forEach(t),pYe=r(b0e," \u2014 "),jS=n(b0e,"A",{href:!0});var wQr=s(jS);_Ye=r(wQr,"T5Config"),wQr.forEach(t),uYe=r(b0e," (T5 model)"),b0e.forEach(t),bYe=i(y),og=n(y,"LI",{});var v0e=s(og);hte=n(v0e,"STRONG",{});var AQr=s(hte);vYe=r(AQr,"tapas"),AQr.forEach(t),FYe=r(v0e," \u2014 "),DS=n(v0e,"A",{href:!0});var yQr=s(DS);TYe=r(yQr,"TapasConfig"),yQr.forEach(t),MYe=r(v0e," (TAPAS model)"),v0e.forEach(t),EYe=i(y),rg=n(y,"LI",{});var F0e=s(rg);pte=n(F0e,"STRONG",{});var LQr=s(pte);CYe=r(LQr,"trajectory_transformer"),LQr.forEach(t),wYe=r(F0e," \u2014 "),GS=n(F0e,"A",{href:!0});var xQr=s(GS);AYe=r(xQr,"TrajectoryTransformerConfig"),xQr.forEach(t),yYe=r(F0e," (Trajectory Transformer model)"),F0e.forEach(t),LYe=i(y),tg=n(y,"LI",{});var T0e=s(tg);_te=n(T0e,"STRONG",{});var $Qr=s(_te);xYe=r($Qr,"transfo-xl"),$Qr.forEach(t),$Ye=r(T0e," \u2014 "),OS=n(T0e,"A",{href:!0});var kQr=s(OS);kYe=r(kQr,"TransfoXLConfig"),kQr.forEach(t),SYe=r(T0e," (Transformer-XL model)"),T0e.forEach(t),RYe=i(y),ag=n(y,"LI",{});var M0e=s(ag);ute=n(M0e,"STRONG",{});var SQr=s(ute);PYe=r(SQr,"trocr"),SQr.forEach(t),BYe=r(M0e," \u2014 "),VS=n(M0e,"A",{href:!0});var RQr=s(VS);IYe=r(RQr,"TrOCRConfig"),RQr.forEach(t),NYe=r(M0e," (TrOCR model)"),M0e.forEach(t),qYe=i(y),ng=n(y,"LI",{});var E0e=s(ng);bte=n(E0e,"STRONG",{});var PQr=s(bte);jYe=r(PQr,"unispeech"),PQr.forEach(t),DYe=r(E0e," \u2014 "),XS=n(E0e,"A",{href:!0});var BQr=s(XS);GYe=r(BQr,"UniSpeechConfig"),BQr.forEach(t),OYe=r(E0e," (UniSpeech model)"),E0e.forEach(t),VYe=i(y),sg=n(y,"LI",{});var C0e=s(sg);vte=n(C0e,"STRONG",{});var IQr=s(vte);XYe=r(IQr,"unispeech-sat"),IQr.forEach(t),zYe=r(C0e," \u2014 "),zS=n(C0e,"A",{href:!0});var NQr=s(zS);WYe=r(NQr,"UniSpeechSatConfig"),NQr.forEach(t),QYe=r(C0e," (UniSpeechSat model)"),C0e.forEach(t),HYe=i(y),lg=n(y,"LI",{});var w0e=s(lg);Fte=n(w0e,"STRONG",{});var qQr=s(Fte);UYe=r(qQr,"van"),qQr.forEach(t),JYe=r(w0e," \u2014 "),WS=n(w0e,"A",{href:!0});var jQr=s(WS);YYe=r(jQr,"VanConfig"),jQr.forEach(t),KYe=r(w0e," (VAN model)"),w0e.forEach(t),ZYe=i(y),ig=n(y,"LI",{});var A0e=s(ig);Tte=n(A0e,"STRONG",{});var DQr=s(Tte);eKe=r(DQr,"vilt"),DQr.forEach(t),oKe=r(A0e," \u2014 "),QS=n(A0e,"A",{href:!0});var GQr=s(QS);rKe=r(GQr,"ViltConfig"),GQr.forEach(t),tKe=r(A0e," (ViLT model)"),A0e.forEach(t),aKe=i(y),dg=n(y,"LI",{});var y0e=s(dg);Mte=n(y0e,"STRONG",{});var OQr=s(Mte);nKe=r(OQr,"vision-encoder-decoder"),OQr.forEach(t),sKe=r(y0e," \u2014 "),HS=n(y0e,"A",{href:!0});var VQr=s(HS);lKe=r(VQr,"VisionEncoderDecoderConfig"),VQr.forEach(t),iKe=r(y0e," (Vision Encoder decoder model)"),y0e.forEach(t),dKe=i(y),cg=n(y,"LI",{});var L0e=s(cg);Ete=n(L0e,"STRONG",{});var XQr=s(Ete);cKe=r(XQr,"vision-text-dual-encoder"),XQr.forEach(t),fKe=r(L0e," \u2014 "),US=n(L0e,"A",{href:!0});var zQr=s(US);mKe=r(zQr,"VisionTextDualEncoderConfig"),zQr.forEach(t),gKe=r(L0e," (VisionTextDualEncoder model)"),L0e.forEach(t),hKe=i(y),fg=n(y,"LI",{});var x0e=s(fg);Cte=n(x0e,"STRONG",{});var WQr=s(Cte);pKe=r(WQr,"visual_bert"),WQr.forEach(t),_Ke=r(x0e," \u2014 "),JS=n(x0e,"A",{href:!0});var QQr=s(JS);uKe=r(QQr,"VisualBertConfig"),QQr.forEach(t),bKe=r(x0e," (VisualBERT model)"),x0e.forEach(t),vKe=i(y),mg=n(y,"LI",{});var $0e=s(mg);wte=n($0e,"STRONG",{});var HQr=s(wte);FKe=r(HQr,"vit"),HQr.forEach(t),TKe=r($0e," \u2014 "),YS=n($0e,"A",{href:!0});var UQr=s(YS);MKe=r(UQr,"ViTConfig"),UQr.forEach(t),EKe=r($0e," (ViT model)"),$0e.forEach(t),CKe=i(y),gg=n(y,"LI",{});var k0e=s(gg);Ate=n(k0e,"STRONG",{});var JQr=s(Ate);wKe=r(JQr,"vit_mae"),JQr.forEach(t),AKe=r(k0e," \u2014 "),KS=n(k0e,"A",{href:!0});var YQr=s(KS);yKe=r(YQr,"ViTMAEConfig"),YQr.forEach(t),LKe=r(k0e," (ViTMAE model)"),k0e.forEach(t),xKe=i(y),hg=n(y,"LI",{});var S0e=s(hg);yte=n(S0e,"STRONG",{});var KQr=s(yte);$Ke=r(KQr,"wav2vec2"),KQr.forEach(t),kKe=r(S0e," \u2014 "),ZS=n(S0e,"A",{href:!0});var ZQr=s(ZS);SKe=r(ZQr,"Wav2Vec2Config"),ZQr.forEach(t),RKe=r(S0e," (Wav2Vec2 model)"),S0e.forEach(t),PKe=i(y),pg=n(y,"LI",{});var R0e=s(pg);Lte=n(R0e,"STRONG",{});var eHr=s(Lte);BKe=r(eHr,"wav2vec2-conformer"),eHr.forEach(t),IKe=r(R0e," \u2014 "),eR=n(R0e,"A",{href:!0});var oHr=s(eR);NKe=r(oHr,"Wav2Vec2ConformerConfig"),oHr.forEach(t),qKe=r(R0e," (Wav2Vec2-Conformer model)"),R0e.forEach(t),jKe=i(y),_g=n(y,"LI",{});var P0e=s(_g);xte=n(P0e,"STRONG",{});var rHr=s(xte);DKe=r(rHr,"wavlm"),rHr.forEach(t),GKe=r(P0e," \u2014 "),oR=n(P0e,"A",{href:!0});var tHr=s(oR);OKe=r(tHr,"WavLMConfig"),tHr.forEach(t),VKe=r(P0e," (WavLM model)"),P0e.forEach(t),XKe=i(y),ug=n(y,"LI",{});var B0e=s(ug);$te=n(B0e,"STRONG",{});var aHr=s($te);zKe=r(aHr,"xglm"),aHr.forEach(t),WKe=r(B0e," \u2014 "),rR=n(B0e,"A",{href:!0});var nHr=s(rR);QKe=r(nHr,"XGLMConfig"),nHr.forEach(t),HKe=r(B0e," (XGLM model)"),B0e.forEach(t),UKe=i(y),bg=n(y,"LI",{});var I0e=s(bg);kte=n(I0e,"STRONG",{});var sHr=s(kte);JKe=r(sHr,"xlm"),sHr.forEach(t),YKe=r(I0e," \u2014 "),tR=n(I0e,"A",{href:!0});var lHr=s(tR);KKe=r(lHr,"XLMConfig"),lHr.forEach(t),ZKe=r(I0e," (XLM model)"),I0e.forEach(t),eZe=i(y),vg=n(y,"LI",{});var N0e=s(vg);Ste=n(N0e,"STRONG",{});var iHr=s(Ste);oZe=r(iHr,"xlm-prophetnet"),iHr.forEach(t),rZe=r(N0e," \u2014 "),aR=n(N0e,"A",{href:!0});var dHr=s(aR);tZe=r(dHr,"XLMProphetNetConfig"),dHr.forEach(t),aZe=r(N0e," (XLM-ProphetNet model)"),N0e.forEach(t),nZe=i(y),Fg=n(y,"LI",{});var q0e=s(Fg);Rte=n(q0e,"STRONG",{});var cHr=s(Rte);sZe=r(cHr,"xlm-roberta"),cHr.forEach(t),lZe=r(q0e," \u2014 "),nR=n(q0e,"A",{href:!0});var fHr=s(nR);iZe=r(fHr,"XLMRobertaConfig"),fHr.forEach(t),dZe=r(q0e," (XLM-RoBERTa model)"),q0e.forEach(t),cZe=i(y),Tg=n(y,"LI",{});var j0e=s(Tg);Pte=n(j0e,"STRONG",{});var mHr=s(Pte);fZe=r(mHr,"xlm-roberta-xl"),mHr.forEach(t),mZe=r(j0e," \u2014 "),sR=n(j0e,"A",{href:!0});var gHr=s(sR);gZe=r(gHr,"XLMRobertaXLConfig"),gHr.forEach(t),hZe=r(j0e," (XLM-RoBERTa-XL model)"),j0e.forEach(t),pZe=i(y),Mg=n(y,"LI",{});var D0e=s(Mg);Bte=n(D0e,"STRONG",{});var hHr=s(Bte);_Ze=r(hHr,"xlnet"),hHr.forEach(t),uZe=r(D0e," \u2014 "),lR=n(D0e,"A",{href:!0});var pHr=s(lR);bZe=r(pHr,"XLNetConfig"),pHr.forEach(t),vZe=r(D0e," (XLNet model)"),D0e.forEach(t),FZe=i(y),Eg=n(y,"LI",{});var G0e=s(Eg);Ite=n(G0e,"STRONG",{});var _Hr=s(Ite);TZe=r(_Hr,"yolos"),_Hr.forEach(t),MZe=r(G0e," \u2014 "),iR=n(G0e,"A",{href:!0});var uHr=s(iR);EZe=r(uHr,"YolosConfig"),uHr.forEach(t),CZe=r(G0e," (YOLOS model)"),G0e.forEach(t),wZe=i(y),Cg=n(y,"LI",{});var O0e=s(Cg);Nte=n(O0e,"STRONG",{});var bHr=s(Nte);AZe=r(bHr,"yoso"),bHr.forEach(t),yZe=r(O0e," \u2014 "),dR=n(O0e,"A",{href:!0});var vHr=s(dR);LZe=r(vHr,"YosoConfig"),vHr.forEach(t),xZe=r(O0e," (YOSO model)"),O0e.forEach(t),y.forEach(t),$Ze=i(ot),T(wg.$$.fragment,ot),ot.forEach(t),kZe=i(et),Ag=n(et,"DIV",{class:!0});var jDe=s(Ag);T(VA.$$.fragment,jDe),SZe=i(jDe),qte=n(jDe,"P",{});var FHr=s(qte);RZe=r(FHr,"Register a new configuration for this class."),FHr.forEach(t),jDe.forEach(t),et.forEach(t),Oqe=i(f),Mi=n(f,"H2",{class:!0});var DDe=s(Mi);yg=n(DDe,"A",{id:!0,class:!0,href:!0});var THr=s(yg);jte=n(THr,"SPAN",{});var MHr=s(jte);T(XA.$$.fragment,MHr),MHr.forEach(t),THr.forEach(t),PZe=i(DDe),Dte=n(DDe,"SPAN",{});var EHr=s(Dte);BZe=r(EHr,"AutoTokenizer"),EHr.forEach(t),DDe.forEach(t),Vqe=i(f),wo=n(f,"DIV",{class:!0});var qs=s(wo);T(zA.$$.fragment,qs),IZe=i(qs),WA=n(qs,"P",{});var GDe=s(WA);NZe=r(GDe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),cR=n(GDe,"A",{href:!0});var CHr=s(cR);qZe=r(CHr,"AutoTokenizer.from_pretrained()"),CHr.forEach(t),jZe=r(GDe," class method."),GDe.forEach(t),DZe=i(qs),QA=n(qs,"P",{});var ODe=s(QA);GZe=r(ODe,"This class cannot be instantiated directly using "),Gte=n(ODe,"CODE",{});var wHr=s(Gte);OZe=r(wHr,"__init__()"),wHr.forEach(t),VZe=r(ODe," (throws an error)."),ODe.forEach(t),XZe=i(qs),Cr=n(qs,"DIV",{class:!0});var js=s(Cr);T(HA.$$.fragment,js),zZe=i(js),Ote=n(js,"P",{});var AHr=s(Ote);WZe=r(AHr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),AHr.forEach(t),QZe=i(js),Aa=n(js,"P",{});var q0=s(Aa);HZe=r(q0,"The tokenizer class to instantiate is selected based on the "),Vte=n(q0,"CODE",{});var yHr=s(Vte);UZe=r(yHr,"model_type"),yHr.forEach(t),JZe=r(q0,` property of the config object (either
passed as an argument or loaded from `),Xte=n(q0,"CODE",{});var LHr=s(Xte);YZe=r(LHr,"pretrained_model_name_or_path"),LHr.forEach(t),KZe=r(q0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zte=n(q0,"CODE",{});var xHr=s(zte);ZZe=r(xHr,"pretrained_model_name_or_path"),xHr.forEach(t),eeo=r(q0,":"),q0.forEach(t),oeo=i(js),k=n(js,"UL",{});var S=s(k);Sn=n(S,"LI",{});var Ux=s(Sn);Wte=n(Ux,"STRONG",{});var $Hr=s(Wte);reo=r($Hr,"albert"),$Hr.forEach(t),teo=r(Ux," \u2014 "),fR=n(Ux,"A",{href:!0});var kHr=s(fR);aeo=r(kHr,"AlbertTokenizer"),kHr.forEach(t),neo=r(Ux," or "),mR=n(Ux,"A",{href:!0});var SHr=s(mR);seo=r(SHr,"AlbertTokenizerFast"),SHr.forEach(t),leo=r(Ux," (ALBERT model)"),Ux.forEach(t),ieo=i(S),Rn=n(S,"LI",{});var Jx=s(Rn);Qte=n(Jx,"STRONG",{});var RHr=s(Qte);deo=r(RHr,"bart"),RHr.forEach(t),ceo=r(Jx," \u2014 "),gR=n(Jx,"A",{href:!0});var PHr=s(gR);feo=r(PHr,"BartTokenizer"),PHr.forEach(t),meo=r(Jx," or "),hR=n(Jx,"A",{href:!0});var BHr=s(hR);geo=r(BHr,"BartTokenizerFast"),BHr.forEach(t),heo=r(Jx," (BART model)"),Jx.forEach(t),peo=i(S),Pn=n(S,"LI",{});var Yx=s(Pn);Hte=n(Yx,"STRONG",{});var IHr=s(Hte);_eo=r(IHr,"barthez"),IHr.forEach(t),ueo=r(Yx," \u2014 "),pR=n(Yx,"A",{href:!0});var NHr=s(pR);beo=r(NHr,"BarthezTokenizer"),NHr.forEach(t),veo=r(Yx," or "),_R=n(Yx,"A",{href:!0});var qHr=s(_R);Feo=r(qHr,"BarthezTokenizerFast"),qHr.forEach(t),Teo=r(Yx," (BARThez model)"),Yx.forEach(t),Meo=i(S),Lg=n(S,"LI",{});var V0e=s(Lg);Ute=n(V0e,"STRONG",{});var jHr=s(Ute);Eeo=r(jHr,"bartpho"),jHr.forEach(t),Ceo=r(V0e," \u2014 "),uR=n(V0e,"A",{href:!0});var DHr=s(uR);weo=r(DHr,"BartphoTokenizer"),DHr.forEach(t),Aeo=r(V0e," (BARTpho model)"),V0e.forEach(t),yeo=i(S),Bn=n(S,"LI",{});var Kx=s(Bn);Jte=n(Kx,"STRONG",{});var GHr=s(Jte);Leo=r(GHr,"bert"),GHr.forEach(t),xeo=r(Kx," \u2014 "),bR=n(Kx,"A",{href:!0});var OHr=s(bR);$eo=r(OHr,"BertTokenizer"),OHr.forEach(t),keo=r(Kx," or "),vR=n(Kx,"A",{href:!0});var VHr=s(vR);Seo=r(VHr,"BertTokenizerFast"),VHr.forEach(t),Reo=r(Kx," (BERT model)"),Kx.forEach(t),Peo=i(S),xg=n(S,"LI",{});var X0e=s(xg);Yte=n(X0e,"STRONG",{});var XHr=s(Yte);Beo=r(XHr,"bert-generation"),XHr.forEach(t),Ieo=r(X0e," \u2014 "),FR=n(X0e,"A",{href:!0});var zHr=s(FR);Neo=r(zHr,"BertGenerationTokenizer"),zHr.forEach(t),qeo=r(X0e," (Bert Generation model)"),X0e.forEach(t),jeo=i(S),$g=n(S,"LI",{});var z0e=s($g);Kte=n(z0e,"STRONG",{});var WHr=s(Kte);Deo=r(WHr,"bert-japanese"),WHr.forEach(t),Geo=r(z0e," \u2014 "),TR=n(z0e,"A",{href:!0});var QHr=s(TR);Oeo=r(QHr,"BertJapaneseTokenizer"),QHr.forEach(t),Veo=r(z0e," (BertJapanese model)"),z0e.forEach(t),Xeo=i(S),kg=n(S,"LI",{});var W0e=s(kg);Zte=n(W0e,"STRONG",{});var HHr=s(Zte);zeo=r(HHr,"bertweet"),HHr.forEach(t),Weo=r(W0e," \u2014 "),MR=n(W0e,"A",{href:!0});var UHr=s(MR);Qeo=r(UHr,"BertweetTokenizer"),UHr.forEach(t),Heo=r(W0e," (BERTweet model)"),W0e.forEach(t),Ueo=i(S),In=n(S,"LI",{});var Zx=s(In);eae=n(Zx,"STRONG",{});var JHr=s(eae);Jeo=r(JHr,"big_bird"),JHr.forEach(t),Yeo=r(Zx," \u2014 "),ER=n(Zx,"A",{href:!0});var YHr=s(ER);Keo=r(YHr,"BigBirdTokenizer"),YHr.forEach(t),Zeo=r(Zx," or "),CR=n(Zx,"A",{href:!0});var KHr=s(CR);eoo=r(KHr,"BigBirdTokenizerFast"),KHr.forEach(t),ooo=r(Zx," (BigBird model)"),Zx.forEach(t),roo=i(S),Nn=n(S,"LI",{});var e$=s(Nn);oae=n(e$,"STRONG",{});var ZHr=s(oae);too=r(ZHr,"bigbird_pegasus"),ZHr.forEach(t),aoo=r(e$," \u2014 "),wR=n(e$,"A",{href:!0});var eUr=s(wR);noo=r(eUr,"PegasusTokenizer"),eUr.forEach(t),soo=r(e$," or "),AR=n(e$,"A",{href:!0});var oUr=s(AR);loo=r(oUr,"PegasusTokenizerFast"),oUr.forEach(t),ioo=r(e$," (BigBird-Pegasus model)"),e$.forEach(t),doo=i(S),qn=n(S,"LI",{});var o$=s(qn);rae=n(o$,"STRONG",{});var rUr=s(rae);coo=r(rUr,"blenderbot"),rUr.forEach(t),foo=r(o$," \u2014 "),yR=n(o$,"A",{href:!0});var tUr=s(yR);moo=r(tUr,"BlenderbotTokenizer"),tUr.forEach(t),goo=r(o$," or "),LR=n(o$,"A",{href:!0});var aUr=s(LR);hoo=r(aUr,"BlenderbotTokenizerFast"),aUr.forEach(t),poo=r(o$," (Blenderbot model)"),o$.forEach(t),_oo=i(S),Sg=n(S,"LI",{});var Q0e=s(Sg);tae=n(Q0e,"STRONG",{});var nUr=s(tae);uoo=r(nUr,"blenderbot-small"),nUr.forEach(t),boo=r(Q0e," \u2014 "),xR=n(Q0e,"A",{href:!0});var sUr=s(xR);voo=r(sUr,"BlenderbotSmallTokenizer"),sUr.forEach(t),Foo=r(Q0e," (BlenderbotSmall model)"),Q0e.forEach(t),Too=i(S),Rg=n(S,"LI",{});var H0e=s(Rg);aae=n(H0e,"STRONG",{});var lUr=s(aae);Moo=r(lUr,"byt5"),lUr.forEach(t),Eoo=r(H0e," \u2014 "),$R=n(H0e,"A",{href:!0});var iUr=s($R);Coo=r(iUr,"ByT5Tokenizer"),iUr.forEach(t),woo=r(H0e," (ByT5 model)"),H0e.forEach(t),Aoo=i(S),jn=n(S,"LI",{});var r$=s(jn);nae=n(r$,"STRONG",{});var dUr=s(nae);yoo=r(dUr,"camembert"),dUr.forEach(t),Loo=r(r$," \u2014 "),kR=n(r$,"A",{href:!0});var cUr=s(kR);xoo=r(cUr,"CamembertTokenizer"),cUr.forEach(t),$oo=r(r$," or "),SR=n(r$,"A",{href:!0});var fUr=s(SR);koo=r(fUr,"CamembertTokenizerFast"),fUr.forEach(t),Soo=r(r$," (CamemBERT model)"),r$.forEach(t),Roo=i(S),Pg=n(S,"LI",{});var U0e=s(Pg);sae=n(U0e,"STRONG",{});var mUr=s(sae);Poo=r(mUr,"canine"),mUr.forEach(t),Boo=r(U0e," \u2014 "),RR=n(U0e,"A",{href:!0});var gUr=s(RR);Ioo=r(gUr,"CanineTokenizer"),gUr.forEach(t),Noo=r(U0e," (CANINE model)"),U0e.forEach(t),qoo=i(S),Dn=n(S,"LI",{});var t$=s(Dn);lae=n(t$,"STRONG",{});var hUr=s(lae);joo=r(hUr,"clip"),hUr.forEach(t),Doo=r(t$," \u2014 "),PR=n(t$,"A",{href:!0});var pUr=s(PR);Goo=r(pUr,"CLIPTokenizer"),pUr.forEach(t),Ooo=r(t$," or "),BR=n(t$,"A",{href:!0});var _Ur=s(BR);Voo=r(_Ur,"CLIPTokenizerFast"),_Ur.forEach(t),Xoo=r(t$," (CLIP model)"),t$.forEach(t),zoo=i(S),Gn=n(S,"LI",{});var a$=s(Gn);iae=n(a$,"STRONG",{});var uUr=s(iae);Woo=r(uUr,"convbert"),uUr.forEach(t),Qoo=r(a$," \u2014 "),IR=n(a$,"A",{href:!0});var bUr=s(IR);Hoo=r(bUr,"ConvBertTokenizer"),bUr.forEach(t),Uoo=r(a$," or "),NR=n(a$,"A",{href:!0});var vUr=s(NR);Joo=r(vUr,"ConvBertTokenizerFast"),vUr.forEach(t),Yoo=r(a$," (ConvBERT model)"),a$.forEach(t),Koo=i(S),On=n(S,"LI",{});var n$=s(On);dae=n(n$,"STRONG",{});var FUr=s(dae);Zoo=r(FUr,"cpm"),FUr.forEach(t),ero=r(n$," \u2014 "),qR=n(n$,"A",{href:!0});var TUr=s(qR);oro=r(TUr,"CpmTokenizer"),TUr.forEach(t),rro=r(n$," or "),jR=n(n$,"A",{href:!0});var MUr=s(jR);tro=r(MUr,"CpmTokenizerFast"),MUr.forEach(t),aro=r(n$," (CPM model)"),n$.forEach(t),nro=i(S),Bg=n(S,"LI",{});var J0e=s(Bg);cae=n(J0e,"STRONG",{});var EUr=s(cae);sro=r(EUr,"ctrl"),EUr.forEach(t),lro=r(J0e," \u2014 "),DR=n(J0e,"A",{href:!0});var CUr=s(DR);iro=r(CUr,"CTRLTokenizer"),CUr.forEach(t),dro=r(J0e," (CTRL model)"),J0e.forEach(t),cro=i(S),Vn=n(S,"LI",{});var s$=s(Vn);fae=n(s$,"STRONG",{});var wUr=s(fae);fro=r(wUr,"data2vec-text"),wUr.forEach(t),mro=r(s$," \u2014 "),GR=n(s$,"A",{href:!0});var AUr=s(GR);gro=r(AUr,"RobertaTokenizer"),AUr.forEach(t),hro=r(s$," or "),OR=n(s$,"A",{href:!0});var yUr=s(OR);pro=r(yUr,"RobertaTokenizerFast"),yUr.forEach(t),_ro=r(s$," (Data2VecText model)"),s$.forEach(t),uro=i(S),Xn=n(S,"LI",{});var l$=s(Xn);mae=n(l$,"STRONG",{});var LUr=s(mae);bro=r(LUr,"deberta"),LUr.forEach(t),vro=r(l$," \u2014 "),VR=n(l$,"A",{href:!0});var xUr=s(VR);Fro=r(xUr,"DebertaTokenizer"),xUr.forEach(t),Tro=r(l$," or "),XR=n(l$,"A",{href:!0});var $Ur=s(XR);Mro=r($Ur,"DebertaTokenizerFast"),$Ur.forEach(t),Ero=r(l$," (DeBERTa model)"),l$.forEach(t),Cro=i(S),zn=n(S,"LI",{});var i$=s(zn);gae=n(i$,"STRONG",{});var kUr=s(gae);wro=r(kUr,"deberta-v2"),kUr.forEach(t),Aro=r(i$," \u2014 "),zR=n(i$,"A",{href:!0});var SUr=s(zR);yro=r(SUr,"DebertaV2Tokenizer"),SUr.forEach(t),Lro=r(i$," or "),WR=n(i$,"A",{href:!0});var RUr=s(WR);xro=r(RUr,"DebertaV2TokenizerFast"),RUr.forEach(t),$ro=r(i$," (DeBERTa-v2 model)"),i$.forEach(t),kro=i(S),Wn=n(S,"LI",{});var d$=s(Wn);hae=n(d$,"STRONG",{});var PUr=s(hae);Sro=r(PUr,"distilbert"),PUr.forEach(t),Rro=r(d$," \u2014 "),QR=n(d$,"A",{href:!0});var BUr=s(QR);Pro=r(BUr,"DistilBertTokenizer"),BUr.forEach(t),Bro=r(d$," or "),HR=n(d$,"A",{href:!0});var IUr=s(HR);Iro=r(IUr,"DistilBertTokenizerFast"),IUr.forEach(t),Nro=r(d$," (DistilBERT model)"),d$.forEach(t),qro=i(S),Qn=n(S,"LI",{});var c$=s(Qn);pae=n(c$,"STRONG",{});var NUr=s(pae);jro=r(NUr,"dpr"),NUr.forEach(t),Dro=r(c$," \u2014 "),UR=n(c$,"A",{href:!0});var qUr=s(UR);Gro=r(qUr,"DPRQuestionEncoderTokenizer"),qUr.forEach(t),Oro=r(c$," or "),JR=n(c$,"A",{href:!0});var jUr=s(JR);Vro=r(jUr,"DPRQuestionEncoderTokenizerFast"),jUr.forEach(t),Xro=r(c$," (DPR model)"),c$.forEach(t),zro=i(S),Hn=n(S,"LI",{});var f$=s(Hn);_ae=n(f$,"STRONG",{});var DUr=s(_ae);Wro=r(DUr,"electra"),DUr.forEach(t),Qro=r(f$," \u2014 "),YR=n(f$,"A",{href:!0});var GUr=s(YR);Hro=r(GUr,"ElectraTokenizer"),GUr.forEach(t),Uro=r(f$," or "),KR=n(f$,"A",{href:!0});var OUr=s(KR);Jro=r(OUr,"ElectraTokenizerFast"),OUr.forEach(t),Yro=r(f$," (ELECTRA model)"),f$.forEach(t),Kro=i(S),Ig=n(S,"LI",{});var Y0e=s(Ig);uae=n(Y0e,"STRONG",{});var VUr=s(uae);Zro=r(VUr,"flaubert"),VUr.forEach(t),eto=r(Y0e," \u2014 "),ZR=n(Y0e,"A",{href:!0});var XUr=s(ZR);oto=r(XUr,"FlaubertTokenizer"),XUr.forEach(t),rto=r(Y0e," (FlauBERT model)"),Y0e.forEach(t),tto=i(S),Un=n(S,"LI",{});var m$=s(Un);bae=n(m$,"STRONG",{});var zUr=s(bae);ato=r(zUr,"fnet"),zUr.forEach(t),nto=r(m$," \u2014 "),eP=n(m$,"A",{href:!0});var WUr=s(eP);sto=r(WUr,"FNetTokenizer"),WUr.forEach(t),lto=r(m$," or "),oP=n(m$,"A",{href:!0});var QUr=s(oP);ito=r(QUr,"FNetTokenizerFast"),QUr.forEach(t),dto=r(m$," (FNet model)"),m$.forEach(t),cto=i(S),Ng=n(S,"LI",{});var K0e=s(Ng);vae=n(K0e,"STRONG",{});var HUr=s(vae);fto=r(HUr,"fsmt"),HUr.forEach(t),mto=r(K0e," \u2014 "),rP=n(K0e,"A",{href:!0});var UUr=s(rP);gto=r(UUr,"FSMTTokenizer"),UUr.forEach(t),hto=r(K0e," (FairSeq Machine-Translation model)"),K0e.forEach(t),pto=i(S),Jn=n(S,"LI",{});var g$=s(Jn);Fae=n(g$,"STRONG",{});var JUr=s(Fae);_to=r(JUr,"funnel"),JUr.forEach(t),uto=r(g$," \u2014 "),tP=n(g$,"A",{href:!0});var YUr=s(tP);bto=r(YUr,"FunnelTokenizer"),YUr.forEach(t),vto=r(g$," or "),aP=n(g$,"A",{href:!0});var KUr=s(aP);Fto=r(KUr,"FunnelTokenizerFast"),KUr.forEach(t),Tto=r(g$," (Funnel Transformer model)"),g$.forEach(t),Mto=i(S),Yn=n(S,"LI",{});var h$=s(Yn);Tae=n(h$,"STRONG",{});var ZUr=s(Tae);Eto=r(ZUr,"gpt2"),ZUr.forEach(t),Cto=r(h$," \u2014 "),nP=n(h$,"A",{href:!0});var eJr=s(nP);wto=r(eJr,"GPT2Tokenizer"),eJr.forEach(t),Ato=r(h$," or "),sP=n(h$,"A",{href:!0});var oJr=s(sP);yto=r(oJr,"GPT2TokenizerFast"),oJr.forEach(t),Lto=r(h$," (OpenAI GPT-2 model)"),h$.forEach(t),xto=i(S),Kn=n(S,"LI",{});var p$=s(Kn);Mae=n(p$,"STRONG",{});var rJr=s(Mae);$to=r(rJr,"gpt_neo"),rJr.forEach(t),kto=r(p$," \u2014 "),lP=n(p$,"A",{href:!0});var tJr=s(lP);Sto=r(tJr,"GPT2Tokenizer"),tJr.forEach(t),Rto=r(p$," or "),iP=n(p$,"A",{href:!0});var aJr=s(iP);Pto=r(aJr,"GPT2TokenizerFast"),aJr.forEach(t),Bto=r(p$," (GPT Neo model)"),p$.forEach(t),Ito=i(S),qg=n(S,"LI",{});var Z0e=s(qg);Eae=n(Z0e,"STRONG",{});var nJr=s(Eae);Nto=r(nJr,"gpt_neox"),nJr.forEach(t),qto=r(Z0e," \u2014 "),dP=n(Z0e,"A",{href:!0});var sJr=s(dP);jto=r(sJr,"GPTNeoXTokenizerFast"),sJr.forEach(t),Dto=r(Z0e," (GPT NeoX model)"),Z0e.forEach(t),Gto=i(S),Zn=n(S,"LI",{});var _$=s(Zn);Cae=n(_$,"STRONG",{});var lJr=s(Cae);Oto=r(lJr,"gptj"),lJr.forEach(t),Vto=r(_$," \u2014 "),cP=n(_$,"A",{href:!0});var iJr=s(cP);Xto=r(iJr,"GPT2Tokenizer"),iJr.forEach(t),zto=r(_$," or "),fP=n(_$,"A",{href:!0});var dJr=s(fP);Wto=r(dJr,"GPT2TokenizerFast"),dJr.forEach(t),Qto=r(_$," (GPT-J model)"),_$.forEach(t),Hto=i(S),es=n(S,"LI",{});var u$=s(es);wae=n(u$,"STRONG",{});var cJr=s(wae);Uto=r(cJr,"herbert"),cJr.forEach(t),Jto=r(u$," \u2014 "),mP=n(u$,"A",{href:!0});var fJr=s(mP);Yto=r(fJr,"HerbertTokenizer"),fJr.forEach(t),Kto=r(u$," or "),gP=n(u$,"A",{href:!0});var mJr=s(gP);Zto=r(mJr,"HerbertTokenizerFast"),mJr.forEach(t),eao=r(u$," (HerBERT model)"),u$.forEach(t),oao=i(S),jg=n(S,"LI",{});var ewe=s(jg);Aae=n(ewe,"STRONG",{});var gJr=s(Aae);rao=r(gJr,"hubert"),gJr.forEach(t),tao=r(ewe," \u2014 "),hP=n(ewe,"A",{href:!0});var hJr=s(hP);aao=r(hJr,"Wav2Vec2CTCTokenizer"),hJr.forEach(t),nao=r(ewe," (Hubert model)"),ewe.forEach(t),sao=i(S),os=n(S,"LI",{});var b$=s(os);yae=n(b$,"STRONG",{});var pJr=s(yae);lao=r(pJr,"ibert"),pJr.forEach(t),iao=r(b$," \u2014 "),pP=n(b$,"A",{href:!0});var _Jr=s(pP);dao=r(_Jr,"RobertaTokenizer"),_Jr.forEach(t),cao=r(b$," or "),_P=n(b$,"A",{href:!0});var uJr=s(_P);fao=r(uJr,"RobertaTokenizerFast"),uJr.forEach(t),mao=r(b$," (I-BERT model)"),b$.forEach(t),gao=i(S),rs=n(S,"LI",{});var v$=s(rs);Lae=n(v$,"STRONG",{});var bJr=s(Lae);hao=r(bJr,"layoutlm"),bJr.forEach(t),pao=r(v$," \u2014 "),uP=n(v$,"A",{href:!0});var vJr=s(uP);_ao=r(vJr,"LayoutLMTokenizer"),vJr.forEach(t),uao=r(v$," or "),bP=n(v$,"A",{href:!0});var FJr=s(bP);bao=r(FJr,"LayoutLMTokenizerFast"),FJr.forEach(t),vao=r(v$," (LayoutLM model)"),v$.forEach(t),Fao=i(S),ts=n(S,"LI",{});var F$=s(ts);xae=n(F$,"STRONG",{});var TJr=s(xae);Tao=r(TJr,"layoutlmv2"),TJr.forEach(t),Mao=r(F$," \u2014 "),vP=n(F$,"A",{href:!0});var MJr=s(vP);Eao=r(MJr,"LayoutLMv2Tokenizer"),MJr.forEach(t),Cao=r(F$," or "),FP=n(F$,"A",{href:!0});var EJr=s(FP);wao=r(EJr,"LayoutLMv2TokenizerFast"),EJr.forEach(t),Aao=r(F$," (LayoutLMv2 model)"),F$.forEach(t),yao=i(S),as=n(S,"LI",{});var T$=s(as);$ae=n(T$,"STRONG",{});var CJr=s($ae);Lao=r(CJr,"layoutlmv3"),CJr.forEach(t),xao=r(T$," \u2014 "),TP=n(T$,"A",{href:!0});var wJr=s(TP);$ao=r(wJr,"LayoutLMv3Tokenizer"),wJr.forEach(t),kao=r(T$," or "),MP=n(T$,"A",{href:!0});var AJr=s(MP);Sao=r(AJr,"LayoutLMv3TokenizerFast"),AJr.forEach(t),Rao=r(T$," (LayoutLMv3 model)"),T$.forEach(t),Pao=i(S),ns=n(S,"LI",{});var M$=s(ns);kae=n(M$,"STRONG",{});var yJr=s(kae);Bao=r(yJr,"layoutxlm"),yJr.forEach(t),Iao=r(M$," \u2014 "),EP=n(M$,"A",{href:!0});var LJr=s(EP);Nao=r(LJr,"LayoutXLMTokenizer"),LJr.forEach(t),qao=r(M$," or "),CP=n(M$,"A",{href:!0});var xJr=s(CP);jao=r(xJr,"LayoutXLMTokenizerFast"),xJr.forEach(t),Dao=r(M$," (LayoutXLM model)"),M$.forEach(t),Gao=i(S),ss=n(S,"LI",{});var E$=s(ss);Sae=n(E$,"STRONG",{});var $Jr=s(Sae);Oao=r($Jr,"led"),$Jr.forEach(t),Vao=r(E$," \u2014 "),wP=n(E$,"A",{href:!0});var kJr=s(wP);Xao=r(kJr,"LEDTokenizer"),kJr.forEach(t),zao=r(E$," or "),AP=n(E$,"A",{href:!0});var SJr=s(AP);Wao=r(SJr,"LEDTokenizerFast"),SJr.forEach(t),Qao=r(E$," (LED model)"),E$.forEach(t),Hao=i(S),ls=n(S,"LI",{});var C$=s(ls);Rae=n(C$,"STRONG",{});var RJr=s(Rae);Uao=r(RJr,"longformer"),RJr.forEach(t),Jao=r(C$," \u2014 "),yP=n(C$,"A",{href:!0});var PJr=s(yP);Yao=r(PJr,"LongformerTokenizer"),PJr.forEach(t),Kao=r(C$," or "),LP=n(C$,"A",{href:!0});var BJr=s(LP);Zao=r(BJr,"LongformerTokenizerFast"),BJr.forEach(t),eno=r(C$," (Longformer model)"),C$.forEach(t),ono=i(S),Dg=n(S,"LI",{});var owe=s(Dg);Pae=n(owe,"STRONG",{});var IJr=s(Pae);rno=r(IJr,"luke"),IJr.forEach(t),tno=r(owe," \u2014 "),xP=n(owe,"A",{href:!0});var NJr=s(xP);ano=r(NJr,"LukeTokenizer"),NJr.forEach(t),nno=r(owe," (LUKE model)"),owe.forEach(t),sno=i(S),is=n(S,"LI",{});var w$=s(is);Bae=n(w$,"STRONG",{});var qJr=s(Bae);lno=r(qJr,"lxmert"),qJr.forEach(t),ino=r(w$," \u2014 "),$P=n(w$,"A",{href:!0});var jJr=s($P);dno=r(jJr,"LxmertTokenizer"),jJr.forEach(t),cno=r(w$," or "),kP=n(w$,"A",{href:!0});var DJr=s(kP);fno=r(DJr,"LxmertTokenizerFast"),DJr.forEach(t),mno=r(w$," (LXMERT model)"),w$.forEach(t),gno=i(S),Gg=n(S,"LI",{});var rwe=s(Gg);Iae=n(rwe,"STRONG",{});var GJr=s(Iae);hno=r(GJr,"m2m_100"),GJr.forEach(t),pno=r(rwe," \u2014 "),SP=n(rwe,"A",{href:!0});var OJr=s(SP);_no=r(OJr,"M2M100Tokenizer"),OJr.forEach(t),uno=r(rwe," (M2M100 model)"),rwe.forEach(t),bno=i(S),Og=n(S,"LI",{});var twe=s(Og);Nae=n(twe,"STRONG",{});var VJr=s(Nae);vno=r(VJr,"marian"),VJr.forEach(t),Fno=r(twe," \u2014 "),RP=n(twe,"A",{href:!0});var XJr=s(RP);Tno=r(XJr,"MarianTokenizer"),XJr.forEach(t),Mno=r(twe," (Marian model)"),twe.forEach(t),Eno=i(S),ds=n(S,"LI",{});var A$=s(ds);qae=n(A$,"STRONG",{});var zJr=s(qae);Cno=r(zJr,"mbart"),zJr.forEach(t),wno=r(A$," \u2014 "),PP=n(A$,"A",{href:!0});var WJr=s(PP);Ano=r(WJr,"MBartTokenizer"),WJr.forEach(t),yno=r(A$," or "),BP=n(A$,"A",{href:!0});var QJr=s(BP);Lno=r(QJr,"MBartTokenizerFast"),QJr.forEach(t),xno=r(A$," (mBART model)"),A$.forEach(t),$no=i(S),cs=n(S,"LI",{});var y$=s(cs);jae=n(y$,"STRONG",{});var HJr=s(jae);kno=r(HJr,"mbart50"),HJr.forEach(t),Sno=r(y$," \u2014 "),IP=n(y$,"A",{href:!0});var UJr=s(IP);Rno=r(UJr,"MBart50Tokenizer"),UJr.forEach(t),Pno=r(y$," or "),NP=n(y$,"A",{href:!0});var JJr=s(NP);Bno=r(JJr,"MBart50TokenizerFast"),JJr.forEach(t),Ino=r(y$," (mBART-50 model)"),y$.forEach(t),Nno=i(S),fs=n(S,"LI",{});var L$=s(fs);Dae=n(L$,"STRONG",{});var YJr=s(Dae);qno=r(YJr,"megatron-bert"),YJr.forEach(t),jno=r(L$," \u2014 "),qP=n(L$,"A",{href:!0});var KJr=s(qP);Dno=r(KJr,"BertTokenizer"),KJr.forEach(t),Gno=r(L$," or "),jP=n(L$,"A",{href:!0});var ZJr=s(jP);Ono=r(ZJr,"BertTokenizerFast"),ZJr.forEach(t),Vno=r(L$," (Megatron-BERT model)"),L$.forEach(t),Xno=i(S),Vg=n(S,"LI",{});var awe=s(Vg);Gae=n(awe,"STRONG",{});var eYr=s(Gae);zno=r(eYr,"mluke"),eYr.forEach(t),Wno=r(awe," \u2014 "),DP=n(awe,"A",{href:!0});var oYr=s(DP);Qno=r(oYr,"MLukeTokenizer"),oYr.forEach(t),Hno=r(awe," (mLUKE model)"),awe.forEach(t),Uno=i(S),ms=n(S,"LI",{});var x$=s(ms);Oae=n(x$,"STRONG",{});var rYr=s(Oae);Jno=r(rYr,"mobilebert"),rYr.forEach(t),Yno=r(x$," \u2014 "),GP=n(x$,"A",{href:!0});var tYr=s(GP);Kno=r(tYr,"MobileBertTokenizer"),tYr.forEach(t),Zno=r(x$," or "),OP=n(x$,"A",{href:!0});var aYr=s(OP);eso=r(aYr,"MobileBertTokenizerFast"),aYr.forEach(t),oso=r(x$," (MobileBERT model)"),x$.forEach(t),rso=i(S),gs=n(S,"LI",{});var $$=s(gs);Vae=n($$,"STRONG",{});var nYr=s(Vae);tso=r(nYr,"mpnet"),nYr.forEach(t),aso=r($$," \u2014 "),VP=n($$,"A",{href:!0});var sYr=s(VP);nso=r(sYr,"MPNetTokenizer"),sYr.forEach(t),sso=r($$," or "),XP=n($$,"A",{href:!0});var lYr=s(XP);lso=r(lYr,"MPNetTokenizerFast"),lYr.forEach(t),iso=r($$," (MPNet model)"),$$.forEach(t),dso=i(S),hs=n(S,"LI",{});var k$=s(hs);Xae=n(k$,"STRONG",{});var iYr=s(Xae);cso=r(iYr,"mt5"),iYr.forEach(t),fso=r(k$," \u2014 "),zP=n(k$,"A",{href:!0});var dYr=s(zP);mso=r(dYr,"MT5Tokenizer"),dYr.forEach(t),gso=r(k$," or "),WP=n(k$,"A",{href:!0});var cYr=s(WP);hso=r(cYr,"MT5TokenizerFast"),cYr.forEach(t),pso=r(k$," (MT5 model)"),k$.forEach(t),_so=i(S),ps=n(S,"LI",{});var S$=s(ps);zae=n(S$,"STRONG",{});var fYr=s(zae);uso=r(fYr,"nystromformer"),fYr.forEach(t),bso=r(S$," \u2014 "),QP=n(S$,"A",{href:!0});var mYr=s(QP);vso=r(mYr,"AlbertTokenizer"),mYr.forEach(t),Fso=r(S$," or "),HP=n(S$,"A",{href:!0});var gYr=s(HP);Tso=r(gYr,"AlbertTokenizerFast"),gYr.forEach(t),Mso=r(S$," (Nystr\xF6mformer model)"),S$.forEach(t),Eso=i(S),_s=n(S,"LI",{});var R$=s(_s);Wae=n(R$,"STRONG",{});var hYr=s(Wae);Cso=r(hYr,"openai-gpt"),hYr.forEach(t),wso=r(R$," \u2014 "),UP=n(R$,"A",{href:!0});var pYr=s(UP);Aso=r(pYr,"OpenAIGPTTokenizer"),pYr.forEach(t),yso=r(R$," or "),JP=n(R$,"A",{href:!0});var _Yr=s(JP);Lso=r(_Yr,"OpenAIGPTTokenizerFast"),_Yr.forEach(t),xso=r(R$," (OpenAI GPT model)"),R$.forEach(t),$so=i(S),Xg=n(S,"LI",{});var nwe=s(Xg);Qae=n(nwe,"STRONG",{});var uYr=s(Qae);kso=r(uYr,"opt"),uYr.forEach(t),Sso=r(nwe," \u2014 "),YP=n(nwe,"A",{href:!0});var bYr=s(YP);Rso=r(bYr,"GPT2Tokenizer"),bYr.forEach(t),Pso=r(nwe," (OPT model)"),nwe.forEach(t),Bso=i(S),us=n(S,"LI",{});var P$=s(us);Hae=n(P$,"STRONG",{});var vYr=s(Hae);Iso=r(vYr,"pegasus"),vYr.forEach(t),Nso=r(P$," \u2014 "),KP=n(P$,"A",{href:!0});var FYr=s(KP);qso=r(FYr,"PegasusTokenizer"),FYr.forEach(t),jso=r(P$," or "),ZP=n(P$,"A",{href:!0});var TYr=s(ZP);Dso=r(TYr,"PegasusTokenizerFast"),TYr.forEach(t),Gso=r(P$," (Pegasus model)"),P$.forEach(t),Oso=i(S),zg=n(S,"LI",{});var swe=s(zg);Uae=n(swe,"STRONG",{});var MYr=s(Uae);Vso=r(MYr,"perceiver"),MYr.forEach(t),Xso=r(swe," \u2014 "),eB=n(swe,"A",{href:!0});var EYr=s(eB);zso=r(EYr,"PerceiverTokenizer"),EYr.forEach(t),Wso=r(swe," (Perceiver model)"),swe.forEach(t),Qso=i(S),Wg=n(S,"LI",{});var lwe=s(Wg);Jae=n(lwe,"STRONG",{});var CYr=s(Jae);Hso=r(CYr,"phobert"),CYr.forEach(t),Uso=r(lwe," \u2014 "),oB=n(lwe,"A",{href:!0});var wYr=s(oB);Jso=r(wYr,"PhobertTokenizer"),wYr.forEach(t),Yso=r(lwe," (PhoBERT model)"),lwe.forEach(t),Kso=i(S),Qg=n(S,"LI",{});var iwe=s(Qg);Yae=n(iwe,"STRONG",{});var AYr=s(Yae);Zso=r(AYr,"plbart"),AYr.forEach(t),elo=r(iwe," \u2014 "),rB=n(iwe,"A",{href:!0});var yYr=s(rB);olo=r(yYr,"PLBartTokenizer"),yYr.forEach(t),rlo=r(iwe," (PLBart model)"),iwe.forEach(t),tlo=i(S),Hg=n(S,"LI",{});var dwe=s(Hg);Kae=n(dwe,"STRONG",{});var LYr=s(Kae);alo=r(LYr,"prophetnet"),LYr.forEach(t),nlo=r(dwe," \u2014 "),tB=n(dwe,"A",{href:!0});var xYr=s(tB);slo=r(xYr,"ProphetNetTokenizer"),xYr.forEach(t),llo=r(dwe," (ProphetNet model)"),dwe.forEach(t),ilo=i(S),bs=n(S,"LI",{});var B$=s(bs);Zae=n(B$,"STRONG",{});var $Yr=s(Zae);dlo=r($Yr,"qdqbert"),$Yr.forEach(t),clo=r(B$," \u2014 "),aB=n(B$,"A",{href:!0});var kYr=s(aB);flo=r(kYr,"BertTokenizer"),kYr.forEach(t),mlo=r(B$," or "),nB=n(B$,"A",{href:!0});var SYr=s(nB);glo=r(SYr,"BertTokenizerFast"),SYr.forEach(t),hlo=r(B$," (QDQBert model)"),B$.forEach(t),plo=i(S),Ug=n(S,"LI",{});var cwe=s(Ug);ene=n(cwe,"STRONG",{});var RYr=s(ene);_lo=r(RYr,"rag"),RYr.forEach(t),ulo=r(cwe," \u2014 "),sB=n(cwe,"A",{href:!0});var PYr=s(sB);blo=r(PYr,"RagTokenizer"),PYr.forEach(t),vlo=r(cwe," (RAG model)"),cwe.forEach(t),Flo=i(S),vs=n(S,"LI",{});var I$=s(vs);one=n(I$,"STRONG",{});var BYr=s(one);Tlo=r(BYr,"realm"),BYr.forEach(t),Mlo=r(I$," \u2014 "),lB=n(I$,"A",{href:!0});var IYr=s(lB);Elo=r(IYr,"RealmTokenizer"),IYr.forEach(t),Clo=r(I$," or "),iB=n(I$,"A",{href:!0});var NYr=s(iB);wlo=r(NYr,"RealmTokenizerFast"),NYr.forEach(t),Alo=r(I$," (REALM model)"),I$.forEach(t),ylo=i(S),Fs=n(S,"LI",{});var N$=s(Fs);rne=n(N$,"STRONG",{});var qYr=s(rne);Llo=r(qYr,"reformer"),qYr.forEach(t),xlo=r(N$," \u2014 "),dB=n(N$,"A",{href:!0});var jYr=s(dB);$lo=r(jYr,"ReformerTokenizer"),jYr.forEach(t),klo=r(N$," or "),cB=n(N$,"A",{href:!0});var DYr=s(cB);Slo=r(DYr,"ReformerTokenizerFast"),DYr.forEach(t),Rlo=r(N$," (Reformer model)"),N$.forEach(t),Plo=i(S),Ts=n(S,"LI",{});var q$=s(Ts);tne=n(q$,"STRONG",{});var GYr=s(tne);Blo=r(GYr,"rembert"),GYr.forEach(t),Ilo=r(q$," \u2014 "),fB=n(q$,"A",{href:!0});var OYr=s(fB);Nlo=r(OYr,"RemBertTokenizer"),OYr.forEach(t),qlo=r(q$," or "),mB=n(q$,"A",{href:!0});var VYr=s(mB);jlo=r(VYr,"RemBertTokenizerFast"),VYr.forEach(t),Dlo=r(q$," (RemBERT model)"),q$.forEach(t),Glo=i(S),Ms=n(S,"LI",{});var j$=s(Ms);ane=n(j$,"STRONG",{});var XYr=s(ane);Olo=r(XYr,"retribert"),XYr.forEach(t),Vlo=r(j$," \u2014 "),gB=n(j$,"A",{href:!0});var zYr=s(gB);Xlo=r(zYr,"RetriBertTokenizer"),zYr.forEach(t),zlo=r(j$," or "),hB=n(j$,"A",{href:!0});var WYr=s(hB);Wlo=r(WYr,"RetriBertTokenizerFast"),WYr.forEach(t),Qlo=r(j$," (RetriBERT model)"),j$.forEach(t),Hlo=i(S),Es=n(S,"LI",{});var D$=s(Es);nne=n(D$,"STRONG",{});var QYr=s(nne);Ulo=r(QYr,"roberta"),QYr.forEach(t),Jlo=r(D$," \u2014 "),pB=n(D$,"A",{href:!0});var HYr=s(pB);Ylo=r(HYr,"RobertaTokenizer"),HYr.forEach(t),Klo=r(D$," or "),_B=n(D$,"A",{href:!0});var UYr=s(_B);Zlo=r(UYr,"RobertaTokenizerFast"),UYr.forEach(t),eio=r(D$," (RoBERTa model)"),D$.forEach(t),oio=i(S),Cs=n(S,"LI",{});var G$=s(Cs);sne=n(G$,"STRONG",{});var JYr=s(sne);rio=r(JYr,"roformer"),JYr.forEach(t),tio=r(G$," \u2014 "),uB=n(G$,"A",{href:!0});var YYr=s(uB);aio=r(YYr,"RoFormerTokenizer"),YYr.forEach(t),nio=r(G$," or "),bB=n(G$,"A",{href:!0});var KYr=s(bB);sio=r(KYr,"RoFormerTokenizerFast"),KYr.forEach(t),lio=r(G$," (RoFormer model)"),G$.forEach(t),iio=i(S),Jg=n(S,"LI",{});var fwe=s(Jg);lne=n(fwe,"STRONG",{});var ZYr=s(lne);dio=r(ZYr,"speech_to_text"),ZYr.forEach(t),cio=r(fwe," \u2014 "),vB=n(fwe,"A",{href:!0});var eKr=s(vB);fio=r(eKr,"Speech2TextTokenizer"),eKr.forEach(t),mio=r(fwe," (Speech2Text model)"),fwe.forEach(t),gio=i(S),Yg=n(S,"LI",{});var mwe=s(Yg);ine=n(mwe,"STRONG",{});var oKr=s(ine);hio=r(oKr,"speech_to_text_2"),oKr.forEach(t),pio=r(mwe," \u2014 "),FB=n(mwe,"A",{href:!0});var rKr=s(FB);_io=r(rKr,"Speech2Text2Tokenizer"),rKr.forEach(t),uio=r(mwe," (Speech2Text2 model)"),mwe.forEach(t),bio=i(S),ws=n(S,"LI",{});var O$=s(ws);dne=n(O$,"STRONG",{});var tKr=s(dne);vio=r(tKr,"splinter"),tKr.forEach(t),Fio=r(O$," \u2014 "),TB=n(O$,"A",{href:!0});var aKr=s(TB);Tio=r(aKr,"SplinterTokenizer"),aKr.forEach(t),Mio=r(O$," or "),MB=n(O$,"A",{href:!0});var nKr=s(MB);Eio=r(nKr,"SplinterTokenizerFast"),nKr.forEach(t),Cio=r(O$," (Splinter model)"),O$.forEach(t),wio=i(S),As=n(S,"LI",{});var V$=s(As);cne=n(V$,"STRONG",{});var sKr=s(cne);Aio=r(sKr,"squeezebert"),sKr.forEach(t),yio=r(V$," \u2014 "),EB=n(V$,"A",{href:!0});var lKr=s(EB);Lio=r(lKr,"SqueezeBertTokenizer"),lKr.forEach(t),xio=r(V$," or "),CB=n(V$,"A",{href:!0});var iKr=s(CB);$io=r(iKr,"SqueezeBertTokenizerFast"),iKr.forEach(t),kio=r(V$," (SqueezeBERT model)"),V$.forEach(t),Sio=i(S),ys=n(S,"LI",{});var X$=s(ys);fne=n(X$,"STRONG",{});var dKr=s(fne);Rio=r(dKr,"t5"),dKr.forEach(t),Pio=r(X$," \u2014 "),wB=n(X$,"A",{href:!0});var cKr=s(wB);Bio=r(cKr,"T5Tokenizer"),cKr.forEach(t),Iio=r(X$," or "),AB=n(X$,"A",{href:!0});var fKr=s(AB);Nio=r(fKr,"T5TokenizerFast"),fKr.forEach(t),qio=r(X$," (T5 model)"),X$.forEach(t),jio=i(S),Kg=n(S,"LI",{});var gwe=s(Kg);mne=n(gwe,"STRONG",{});var mKr=s(mne);Dio=r(mKr,"tapas"),mKr.forEach(t),Gio=r(gwe," \u2014 "),yB=n(gwe,"A",{href:!0});var gKr=s(yB);Oio=r(gKr,"TapasTokenizer"),gKr.forEach(t),Vio=r(gwe," (TAPAS model)"),gwe.forEach(t),Xio=i(S),Zg=n(S,"LI",{});var hwe=s(Zg);gne=n(hwe,"STRONG",{});var hKr=s(gne);zio=r(hKr,"tapex"),hKr.forEach(t),Wio=r(hwe," \u2014 "),LB=n(hwe,"A",{href:!0});var pKr=s(LB);Qio=r(pKr,"TapexTokenizer"),pKr.forEach(t),Hio=r(hwe," (TAPEX model)"),hwe.forEach(t),Uio=i(S),eh=n(S,"LI",{});var pwe=s(eh);hne=n(pwe,"STRONG",{});var _Kr=s(hne);Jio=r(_Kr,"transfo-xl"),_Kr.forEach(t),Yio=r(pwe," \u2014 "),xB=n(pwe,"A",{href:!0});var uKr=s(xB);Kio=r(uKr,"TransfoXLTokenizer"),uKr.forEach(t),Zio=r(pwe," (Transformer-XL model)"),pwe.forEach(t),edo=i(S),Ls=n(S,"LI",{});var z$=s(Ls);pne=n(z$,"STRONG",{});var bKr=s(pne);odo=r(bKr,"visual_bert"),bKr.forEach(t),rdo=r(z$," \u2014 "),$B=n(z$,"A",{href:!0});var vKr=s($B);tdo=r(vKr,"BertTokenizer"),vKr.forEach(t),ado=r(z$," or "),kB=n(z$,"A",{href:!0});var FKr=s(kB);ndo=r(FKr,"BertTokenizerFast"),FKr.forEach(t),sdo=r(z$," (VisualBERT model)"),z$.forEach(t),ldo=i(S),oh=n(S,"LI",{});var _we=s(oh);_ne=n(_we,"STRONG",{});var TKr=s(_ne);ido=r(TKr,"wav2vec2"),TKr.forEach(t),ddo=r(_we," \u2014 "),SB=n(_we,"A",{href:!0});var MKr=s(SB);cdo=r(MKr,"Wav2Vec2CTCTokenizer"),MKr.forEach(t),fdo=r(_we," (Wav2Vec2 model)"),_we.forEach(t),mdo=i(S),rh=n(S,"LI",{});var uwe=s(rh);une=n(uwe,"STRONG",{});var EKr=s(une);gdo=r(EKr,"wav2vec2-conformer"),EKr.forEach(t),hdo=r(uwe," \u2014 "),RB=n(uwe,"A",{href:!0});var CKr=s(RB);pdo=r(CKr,"Wav2Vec2CTCTokenizer"),CKr.forEach(t),_do=r(uwe," (Wav2Vec2-Conformer model)"),uwe.forEach(t),udo=i(S),th=n(S,"LI",{});var bwe=s(th);bne=n(bwe,"STRONG",{});var wKr=s(bne);bdo=r(wKr,"wav2vec2_phoneme"),wKr.forEach(t),vdo=r(bwe," \u2014 "),PB=n(bwe,"A",{href:!0});var AKr=s(PB);Fdo=r(AKr,"Wav2Vec2PhonemeCTCTokenizer"),AKr.forEach(t),Tdo=r(bwe," (Wav2Vec2Phoneme model)"),bwe.forEach(t),Mdo=i(S),xs=n(S,"LI",{});var W$=s(xs);vne=n(W$,"STRONG",{});var yKr=s(vne);Edo=r(yKr,"xglm"),yKr.forEach(t),Cdo=r(W$," \u2014 "),BB=n(W$,"A",{href:!0});var LKr=s(BB);wdo=r(LKr,"XGLMTokenizer"),LKr.forEach(t),Ado=r(W$," or "),IB=n(W$,"A",{href:!0});var xKr=s(IB);ydo=r(xKr,"XGLMTokenizerFast"),xKr.forEach(t),Ldo=r(W$," (XGLM model)"),W$.forEach(t),xdo=i(S),ah=n(S,"LI",{});var vwe=s(ah);Fne=n(vwe,"STRONG",{});var $Kr=s(Fne);$do=r($Kr,"xlm"),$Kr.forEach(t),kdo=r(vwe," \u2014 "),NB=n(vwe,"A",{href:!0});var kKr=s(NB);Sdo=r(kKr,"XLMTokenizer"),kKr.forEach(t),Rdo=r(vwe," (XLM model)"),vwe.forEach(t),Pdo=i(S),nh=n(S,"LI",{});var Fwe=s(nh);Tne=n(Fwe,"STRONG",{});var SKr=s(Tne);Bdo=r(SKr,"xlm-prophetnet"),SKr.forEach(t),Ido=r(Fwe," \u2014 "),qB=n(Fwe,"A",{href:!0});var RKr=s(qB);Ndo=r(RKr,"XLMProphetNetTokenizer"),RKr.forEach(t),qdo=r(Fwe," (XLM-ProphetNet model)"),Fwe.forEach(t),jdo=i(S),$s=n(S,"LI",{});var Q$=s($s);Mne=n(Q$,"STRONG",{});var PKr=s(Mne);Ddo=r(PKr,"xlm-roberta"),PKr.forEach(t),Gdo=r(Q$," \u2014 "),jB=n(Q$,"A",{href:!0});var BKr=s(jB);Odo=r(BKr,"XLMRobertaTokenizer"),BKr.forEach(t),Vdo=r(Q$," or "),DB=n(Q$,"A",{href:!0});var IKr=s(DB);Xdo=r(IKr,"XLMRobertaTokenizerFast"),IKr.forEach(t),zdo=r(Q$," (XLM-RoBERTa model)"),Q$.forEach(t),Wdo=i(S),ks=n(S,"LI",{});var H$=s(ks);Ene=n(H$,"STRONG",{});var NKr=s(Ene);Qdo=r(NKr,"xlm-roberta-xl"),NKr.forEach(t),Hdo=r(H$," \u2014 "),GB=n(H$,"A",{href:!0});var qKr=s(GB);Udo=r(qKr,"RobertaTokenizer"),qKr.forEach(t),Jdo=r(H$," or "),OB=n(H$,"A",{href:!0});var jKr=s(OB);Ydo=r(jKr,"RobertaTokenizerFast"),jKr.forEach(t),Kdo=r(H$," (XLM-RoBERTa-XL model)"),H$.forEach(t),Zdo=i(S),Ss=n(S,"LI",{});var U$=s(Ss);Cne=n(U$,"STRONG",{});var DKr=s(Cne);eco=r(DKr,"xlnet"),DKr.forEach(t),oco=r(U$," \u2014 "),VB=n(U$,"A",{href:!0});var GKr=s(VB);rco=r(GKr,"XLNetTokenizer"),GKr.forEach(t),tco=r(U$," or "),XB=n(U$,"A",{href:!0});var OKr=s(XB);aco=r(OKr,"XLNetTokenizerFast"),OKr.forEach(t),nco=r(U$," (XLNet model)"),U$.forEach(t),sco=i(S),Rs=n(S,"LI",{});var J$=s(Rs);wne=n(J$,"STRONG",{});var VKr=s(wne);lco=r(VKr,"yoso"),VKr.forEach(t),ico=r(J$," \u2014 "),zB=n(J$,"A",{href:!0});var XKr=s(zB);dco=r(XKr,"AlbertTokenizer"),XKr.forEach(t),cco=r(J$," or "),WB=n(J$,"A",{href:!0});var zKr=s(WB);fco=r(zKr,"AlbertTokenizerFast"),zKr.forEach(t),mco=r(J$," (YOSO model)"),J$.forEach(t),S.forEach(t),gco=i(js),T(sh.$$.fragment,js),js.forEach(t),hco=i(qs),lh=n(qs,"DIV",{class:!0});var VDe=s(lh);T(UA.$$.fragment,VDe),pco=i(VDe),Ane=n(VDe,"P",{});var WKr=s(Ane);_co=r(WKr,"Register a new tokenizer in this mapping."),WKr.forEach(t),VDe.forEach(t),qs.forEach(t),Xqe=i(f),Ei=n(f,"H2",{class:!0});var XDe=s(Ei);ih=n(XDe,"A",{id:!0,class:!0,href:!0});var QKr=s(ih);yne=n(QKr,"SPAN",{});var HKr=s(yne);T(JA.$$.fragment,HKr),HKr.forEach(t),QKr.forEach(t),uco=i(XDe),Lne=n(XDe,"SPAN",{});var UKr=s(Lne);bco=r(UKr,"AutoFeatureExtractor"),UKr.forEach(t),XDe.forEach(t),zqe=i(f),Ao=n(f,"DIV",{class:!0});var Ds=s(Ao);T(YA.$$.fragment,Ds),vco=i(Ds),KA=n(Ds,"P",{});var zDe=s(KA);Fco=r(zDe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),QB=n(zDe,"A",{href:!0});var JKr=s(QB);Tco=r(JKr,"AutoFeatureExtractor.from_pretrained()"),JKr.forEach(t),Mco=r(zDe," class method."),zDe.forEach(t),Eco=i(Ds),ZA=n(Ds,"P",{});var WDe=s(ZA);Cco=r(WDe,"This class cannot be instantiated directly using "),xne=n(WDe,"CODE",{});var YKr=s(xne);wco=r(YKr,"__init__()"),YKr.forEach(t),Aco=r(WDe," (throws an error)."),WDe.forEach(t),yco=i(Ds),He=n(Ds,"DIV",{class:!0});var Zt=s(He);T(e6.$$.fragment,Zt),Lco=i(Zt),$ne=n(Zt,"P",{});var KKr=s($ne);xco=r(KKr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),KKr.forEach(t),$co=i(Zt),ya=n(Zt,"P",{});var j0=s(ya);kco=r(j0,"The feature extractor class to instantiate is selected based on the "),kne=n(j0,"CODE",{});var ZKr=s(kne);Sco=r(ZKr,"model_type"),ZKr.forEach(t),Rco=r(j0,` property of the config object
(either passed as an argument or loaded from `),Sne=n(j0,"CODE",{});var eZr=s(Sne);Pco=r(eZr,"pretrained_model_name_or_path"),eZr.forEach(t),Bco=r(j0,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Rne=n(j0,"CODE",{});var oZr=s(Rne);Ico=r(oZr,"pretrained_model_name_or_path"),oZr.forEach(t),Nco=r(j0,":"),j0.forEach(t),qco=i(Zt),Y=n(Zt,"UL",{});var Z=s(Y);dh=n(Z,"LI",{});var Twe=s(dh);Pne=n(Twe,"STRONG",{});var rZr=s(Pne);jco=r(rZr,"beit"),rZr.forEach(t),Dco=r(Twe," \u2014 "),HB=n(Twe,"A",{href:!0});var tZr=s(HB);Gco=r(tZr,"BeitFeatureExtractor"),tZr.forEach(t),Oco=r(Twe," (BEiT model)"),Twe.forEach(t),Vco=i(Z),ch=n(Z,"LI",{});var Mwe=s(ch);Bne=n(Mwe,"STRONG",{});var aZr=s(Bne);Xco=r(aZr,"clip"),aZr.forEach(t),zco=r(Mwe," \u2014 "),UB=n(Mwe,"A",{href:!0});var nZr=s(UB);Wco=r(nZr,"CLIPFeatureExtractor"),nZr.forEach(t),Qco=r(Mwe," (CLIP model)"),Mwe.forEach(t),Hco=i(Z),fh=n(Z,"LI",{});var Ewe=s(fh);Ine=n(Ewe,"STRONG",{});var sZr=s(Ine);Uco=r(sZr,"convnext"),sZr.forEach(t),Jco=r(Ewe," \u2014 "),JB=n(Ewe,"A",{href:!0});var lZr=s(JB);Yco=r(lZr,"ConvNextFeatureExtractor"),lZr.forEach(t),Kco=r(Ewe," (ConvNeXT model)"),Ewe.forEach(t),Zco=i(Z),mh=n(Z,"LI",{});var Cwe=s(mh);Nne=n(Cwe,"STRONG",{});var iZr=s(Nne);efo=r(iZr,"cvt"),iZr.forEach(t),ofo=r(Cwe," \u2014 "),YB=n(Cwe,"A",{href:!0});var dZr=s(YB);rfo=r(dZr,"ConvNextFeatureExtractor"),dZr.forEach(t),tfo=r(Cwe," (CvT model)"),Cwe.forEach(t),afo=i(Z),gh=n(Z,"LI",{});var wwe=s(gh);qne=n(wwe,"STRONG",{});var cZr=s(qne);nfo=r(cZr,"data2vec-audio"),cZr.forEach(t),sfo=r(wwe," \u2014 "),KB=n(wwe,"A",{href:!0});var fZr=s(KB);lfo=r(fZr,"Wav2Vec2FeatureExtractor"),fZr.forEach(t),ifo=r(wwe," (Data2VecAudio model)"),wwe.forEach(t),dfo=i(Z),hh=n(Z,"LI",{});var Awe=s(hh);jne=n(Awe,"STRONG",{});var mZr=s(jne);cfo=r(mZr,"data2vec-vision"),mZr.forEach(t),ffo=r(Awe," \u2014 "),ZB=n(Awe,"A",{href:!0});var gZr=s(ZB);mfo=r(gZr,"BeitFeatureExtractor"),gZr.forEach(t),gfo=r(Awe," (Data2VecVision model)"),Awe.forEach(t),hfo=i(Z),ph=n(Z,"LI",{});var ywe=s(ph);Dne=n(ywe,"STRONG",{});var hZr=s(Dne);pfo=r(hZr,"deit"),hZr.forEach(t),_fo=r(ywe," \u2014 "),eI=n(ywe,"A",{href:!0});var pZr=s(eI);ufo=r(pZr,"DeiTFeatureExtractor"),pZr.forEach(t),bfo=r(ywe," (DeiT model)"),ywe.forEach(t),vfo=i(Z),_h=n(Z,"LI",{});var Lwe=s(_h);Gne=n(Lwe,"STRONG",{});var _Zr=s(Gne);Ffo=r(_Zr,"detr"),_Zr.forEach(t),Tfo=r(Lwe," \u2014 "),oI=n(Lwe,"A",{href:!0});var uZr=s(oI);Mfo=r(uZr,"DetrFeatureExtractor"),uZr.forEach(t),Efo=r(Lwe," (DETR model)"),Lwe.forEach(t),Cfo=i(Z),uh=n(Z,"LI",{});var xwe=s(uh);One=n(xwe,"STRONG",{});var bZr=s(One);wfo=r(bZr,"dpt"),bZr.forEach(t),Afo=r(xwe," \u2014 "),rI=n(xwe,"A",{href:!0});var vZr=s(rI);yfo=r(vZr,"DPTFeatureExtractor"),vZr.forEach(t),Lfo=r(xwe," (DPT model)"),xwe.forEach(t),xfo=i(Z),bh=n(Z,"LI",{});var $we=s(bh);Vne=n($we,"STRONG",{});var FZr=s(Vne);$fo=r(FZr,"flava"),FZr.forEach(t),kfo=r($we," \u2014 "),tI=n($we,"A",{href:!0});var TZr=s(tI);Sfo=r(TZr,"FlavaFeatureExtractor"),TZr.forEach(t),Rfo=r($we," (FLAVA model)"),$we.forEach(t),Pfo=i(Z),vh=n(Z,"LI",{});var kwe=s(vh);Xne=n(kwe,"STRONG",{});var MZr=s(Xne);Bfo=r(MZr,"glpn"),MZr.forEach(t),Ifo=r(kwe," \u2014 "),aI=n(kwe,"A",{href:!0});var EZr=s(aI);Nfo=r(EZr,"GLPNFeatureExtractor"),EZr.forEach(t),qfo=r(kwe," (GLPN model)"),kwe.forEach(t),jfo=i(Z),Fh=n(Z,"LI",{});var Swe=s(Fh);zne=n(Swe,"STRONG",{});var CZr=s(zne);Dfo=r(CZr,"hubert"),CZr.forEach(t),Gfo=r(Swe," \u2014 "),nI=n(Swe,"A",{href:!0});var wZr=s(nI);Ofo=r(wZr,"Wav2Vec2FeatureExtractor"),wZr.forEach(t),Vfo=r(Swe," (Hubert model)"),Swe.forEach(t),Xfo=i(Z),Th=n(Z,"LI",{});var Rwe=s(Th);Wne=n(Rwe,"STRONG",{});var AZr=s(Wne);zfo=r(AZr,"imagegpt"),AZr.forEach(t),Wfo=r(Rwe," \u2014 "),sI=n(Rwe,"A",{href:!0});var yZr=s(sI);Qfo=r(yZr,"ImageGPTFeatureExtractor"),yZr.forEach(t),Hfo=r(Rwe," (ImageGPT model)"),Rwe.forEach(t),Ufo=i(Z),Mh=n(Z,"LI",{});var Pwe=s(Mh);Qne=n(Pwe,"STRONG",{});var LZr=s(Qne);Jfo=r(LZr,"layoutlmv2"),LZr.forEach(t),Yfo=r(Pwe," \u2014 "),lI=n(Pwe,"A",{href:!0});var xZr=s(lI);Kfo=r(xZr,"LayoutLMv2FeatureExtractor"),xZr.forEach(t),Zfo=r(Pwe," (LayoutLMv2 model)"),Pwe.forEach(t),emo=i(Z),Eh=n(Z,"LI",{});var Bwe=s(Eh);Hne=n(Bwe,"STRONG",{});var $Zr=s(Hne);omo=r($Zr,"layoutlmv3"),$Zr.forEach(t),rmo=r(Bwe," \u2014 "),iI=n(Bwe,"A",{href:!0});var kZr=s(iI);tmo=r(kZr,"LayoutLMv3FeatureExtractor"),kZr.forEach(t),amo=r(Bwe," (LayoutLMv3 model)"),Bwe.forEach(t),nmo=i(Z),Ch=n(Z,"LI",{});var Iwe=s(Ch);Une=n(Iwe,"STRONG",{});var SZr=s(Une);smo=r(SZr,"levit"),SZr.forEach(t),lmo=r(Iwe," \u2014 "),dI=n(Iwe,"A",{href:!0});var RZr=s(dI);imo=r(RZr,"LevitFeatureExtractor"),RZr.forEach(t),dmo=r(Iwe," (LeViT model)"),Iwe.forEach(t),cmo=i(Z),wh=n(Z,"LI",{});var Nwe=s(wh);Jne=n(Nwe,"STRONG",{});var PZr=s(Jne);fmo=r(PZr,"maskformer"),PZr.forEach(t),mmo=r(Nwe," \u2014 "),cI=n(Nwe,"A",{href:!0});var BZr=s(cI);gmo=r(BZr,"MaskFormerFeatureExtractor"),BZr.forEach(t),hmo=r(Nwe," (MaskFormer model)"),Nwe.forEach(t),pmo=i(Z),Ah=n(Z,"LI",{});var qwe=s(Ah);Yne=n(qwe,"STRONG",{});var IZr=s(Yne);_mo=r(IZr,"perceiver"),IZr.forEach(t),umo=r(qwe," \u2014 "),fI=n(qwe,"A",{href:!0});var NZr=s(fI);bmo=r(NZr,"PerceiverFeatureExtractor"),NZr.forEach(t),vmo=r(qwe," (Perceiver model)"),qwe.forEach(t),Fmo=i(Z),yh=n(Z,"LI",{});var jwe=s(yh);Kne=n(jwe,"STRONG",{});var qZr=s(Kne);Tmo=r(qZr,"poolformer"),qZr.forEach(t),Mmo=r(jwe," \u2014 "),mI=n(jwe,"A",{href:!0});var jZr=s(mI);Emo=r(jZr,"PoolFormerFeatureExtractor"),jZr.forEach(t),Cmo=r(jwe," (PoolFormer model)"),jwe.forEach(t),wmo=i(Z),Lh=n(Z,"LI",{});var Dwe=s(Lh);Zne=n(Dwe,"STRONG",{});var DZr=s(Zne);Amo=r(DZr,"regnet"),DZr.forEach(t),ymo=r(Dwe," \u2014 "),gI=n(Dwe,"A",{href:!0});var GZr=s(gI);Lmo=r(GZr,"ConvNextFeatureExtractor"),GZr.forEach(t),xmo=r(Dwe," (RegNet model)"),Dwe.forEach(t),$mo=i(Z),xh=n(Z,"LI",{});var Gwe=s(xh);ese=n(Gwe,"STRONG",{});var OZr=s(ese);kmo=r(OZr,"resnet"),OZr.forEach(t),Smo=r(Gwe," \u2014 "),hI=n(Gwe,"A",{href:!0});var VZr=s(hI);Rmo=r(VZr,"ConvNextFeatureExtractor"),VZr.forEach(t),Pmo=r(Gwe," (ResNet model)"),Gwe.forEach(t),Bmo=i(Z),$h=n(Z,"LI",{});var Owe=s($h);ose=n(Owe,"STRONG",{});var XZr=s(ose);Imo=r(XZr,"segformer"),XZr.forEach(t),Nmo=r(Owe," \u2014 "),pI=n(Owe,"A",{href:!0});var zZr=s(pI);qmo=r(zZr,"SegformerFeatureExtractor"),zZr.forEach(t),jmo=r(Owe," (SegFormer model)"),Owe.forEach(t),Dmo=i(Z),kh=n(Z,"LI",{});var Vwe=s(kh);rse=n(Vwe,"STRONG",{});var WZr=s(rse);Gmo=r(WZr,"speech_to_text"),WZr.forEach(t),Omo=r(Vwe," \u2014 "),_I=n(Vwe,"A",{href:!0});var QZr=s(_I);Vmo=r(QZr,"Speech2TextFeatureExtractor"),QZr.forEach(t),Xmo=r(Vwe," (Speech2Text model)"),Vwe.forEach(t),zmo=i(Z),Sh=n(Z,"LI",{});var Xwe=s(Sh);tse=n(Xwe,"STRONG",{});var HZr=s(tse);Wmo=r(HZr,"swin"),HZr.forEach(t),Qmo=r(Xwe," \u2014 "),uI=n(Xwe,"A",{href:!0});var UZr=s(uI);Hmo=r(UZr,"ViTFeatureExtractor"),UZr.forEach(t),Umo=r(Xwe," (Swin Transformer model)"),Xwe.forEach(t),Jmo=i(Z),Rh=n(Z,"LI",{});var zwe=s(Rh);ase=n(zwe,"STRONG",{});var JZr=s(ase);Ymo=r(JZr,"van"),JZr.forEach(t),Kmo=r(zwe," \u2014 "),bI=n(zwe,"A",{href:!0});var YZr=s(bI);Zmo=r(YZr,"ConvNextFeatureExtractor"),YZr.forEach(t),ego=r(zwe," (VAN model)"),zwe.forEach(t),ogo=i(Z),Ph=n(Z,"LI",{});var Wwe=s(Ph);nse=n(Wwe,"STRONG",{});var KZr=s(nse);rgo=r(KZr,"vit"),KZr.forEach(t),tgo=r(Wwe," \u2014 "),vI=n(Wwe,"A",{href:!0});var ZZr=s(vI);ago=r(ZZr,"ViTFeatureExtractor"),ZZr.forEach(t),ngo=r(Wwe," (ViT model)"),Wwe.forEach(t),sgo=i(Z),Bh=n(Z,"LI",{});var Qwe=s(Bh);sse=n(Qwe,"STRONG",{});var eet=s(sse);lgo=r(eet,"vit_mae"),eet.forEach(t),igo=r(Qwe," \u2014 "),FI=n(Qwe,"A",{href:!0});var oet=s(FI);dgo=r(oet,"ViTFeatureExtractor"),oet.forEach(t),cgo=r(Qwe," (ViTMAE model)"),Qwe.forEach(t),fgo=i(Z),Ih=n(Z,"LI",{});var Hwe=s(Ih);lse=n(Hwe,"STRONG",{});var ret=s(lse);mgo=r(ret,"wav2vec2"),ret.forEach(t),ggo=r(Hwe," \u2014 "),TI=n(Hwe,"A",{href:!0});var tet=s(TI);hgo=r(tet,"Wav2Vec2FeatureExtractor"),tet.forEach(t),pgo=r(Hwe," (Wav2Vec2 model)"),Hwe.forEach(t),_go=i(Z),Nh=n(Z,"LI",{});var Uwe=s(Nh);ise=n(Uwe,"STRONG",{});var aet=s(ise);ugo=r(aet,"wav2vec2-conformer"),aet.forEach(t),bgo=r(Uwe," \u2014 "),MI=n(Uwe,"A",{href:!0});var net=s(MI);vgo=r(net,"Wav2Vec2FeatureExtractor"),net.forEach(t),Fgo=r(Uwe," (Wav2Vec2-Conformer model)"),Uwe.forEach(t),Tgo=i(Z),qh=n(Z,"LI",{});var Jwe=s(qh);dse=n(Jwe,"STRONG",{});var set=s(dse);Mgo=r(set,"yolos"),set.forEach(t),Ego=r(Jwe," \u2014 "),EI=n(Jwe,"A",{href:!0});var iet=s(EI);Cgo=r(iet,"YolosFeatureExtractor"),iet.forEach(t),wgo=r(Jwe," (YOLOS model)"),Jwe.forEach(t),Z.forEach(t),Ago=i(Zt),T(jh.$$.fragment,Zt),ygo=i(Zt),T(Dh.$$.fragment,Zt),Zt.forEach(t),Lgo=i(Ds),Gh=n(Ds,"DIV",{class:!0});var QDe=s(Gh);T(o6.$$.fragment,QDe),xgo=i(QDe),cse=n(QDe,"P",{});var det=s(cse);$go=r(det,"Register a new feature extractor for this class."),det.forEach(t),QDe.forEach(t),Ds.forEach(t),Wqe=i(f),Ci=n(f,"H2",{class:!0});var HDe=s(Ci);Oh=n(HDe,"A",{id:!0,class:!0,href:!0});var cet=s(Oh);fse=n(cet,"SPAN",{});var fet=s(fse);T(r6.$$.fragment,fet),fet.forEach(t),cet.forEach(t),kgo=i(HDe),mse=n(HDe,"SPAN",{});var met=s(mse);Sgo=r(met,"AutoProcessor"),met.forEach(t),HDe.forEach(t),Qqe=i(f),yo=n(f,"DIV",{class:!0});var Gs=s(yo);T(t6.$$.fragment,Gs),Rgo=i(Gs),a6=n(Gs,"P",{});var UDe=s(a6);Pgo=r(UDe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),CI=n(UDe,"A",{href:!0});var get=s(CI);Bgo=r(get,"AutoProcessor.from_pretrained()"),get.forEach(t),Igo=r(UDe," class method."),UDe.forEach(t),Ngo=i(Gs),n6=n(Gs,"P",{});var JDe=s(n6);qgo=r(JDe,"This class cannot be instantiated directly using "),gse=n(JDe,"CODE",{});var het=s(gse);jgo=r(het,"__init__()"),het.forEach(t),Dgo=r(JDe," (throws an error)."),JDe.forEach(t),Ggo=i(Gs),Ue=n(Gs,"DIV",{class:!0});var ea=s(Ue);T(s6.$$.fragment,ea),Ogo=i(ea),hse=n(ea,"P",{});var pet=s(hse);Vgo=r(pet,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),pet.forEach(t),Xgo=i(ea),wi=n(ea,"P",{});var PZ=s(wi);zgo=r(PZ,"The processor class to instantiate is selected based on the "),pse=n(PZ,"CODE",{});var _et=s(pse);Wgo=r(_et,"model_type"),_et.forEach(t),Qgo=r(PZ,` property of the config object (either
passed as an argument or loaded from `),_se=n(PZ,"CODE",{});var uet=s(_se);Hgo=r(uet,"pretrained_model_name_or_path"),uet.forEach(t),Ugo=r(PZ," if possible):"),PZ.forEach(t),Jgo=i(ea),he=n(ea,"UL",{});var ue=s(he);Vh=n(ue,"LI",{});var Ywe=s(Vh);use=n(Ywe,"STRONG",{});var bet=s(use);Ygo=r(bet,"clip"),bet.forEach(t),Kgo=r(Ywe," \u2014 "),wI=n(Ywe,"A",{href:!0});var vet=s(wI);Zgo=r(vet,"CLIPProcessor"),vet.forEach(t),eho=r(Ywe," (CLIP model)"),Ywe.forEach(t),oho=i(ue),Xh=n(ue,"LI",{});var Kwe=s(Xh);bse=n(Kwe,"STRONG",{});var Fet=s(bse);rho=r(Fet,"flava"),Fet.forEach(t),tho=r(Kwe," \u2014 "),vse=n(Kwe,"CODE",{});var Tet=s(vse);aho=r(Tet,"FLAVAProcessor"),Tet.forEach(t),nho=r(Kwe," (FLAVA model)"),Kwe.forEach(t),sho=i(ue),zh=n(ue,"LI",{});var Zwe=s(zh);Fse=n(Zwe,"STRONG",{});var Met=s(Fse);lho=r(Met,"layoutlmv2"),Met.forEach(t),iho=r(Zwe," \u2014 "),AI=n(Zwe,"A",{href:!0});var Eet=s(AI);dho=r(Eet,"LayoutLMv2Processor"),Eet.forEach(t),cho=r(Zwe," (LayoutLMv2 model)"),Zwe.forEach(t),fho=i(ue),Wh=n(ue,"LI",{});var eAe=s(Wh);Tse=n(eAe,"STRONG",{});var Cet=s(Tse);mho=r(Cet,"layoutlmv3"),Cet.forEach(t),gho=r(eAe," \u2014 "),yI=n(eAe,"A",{href:!0});var wet=s(yI);hho=r(wet,"LayoutLMv3Processor"),wet.forEach(t),pho=r(eAe," (LayoutLMv3 model)"),eAe.forEach(t),_ho=i(ue),Qh=n(ue,"LI",{});var oAe=s(Qh);Mse=n(oAe,"STRONG",{});var Aet=s(Mse);uho=r(Aet,"layoutxlm"),Aet.forEach(t),bho=r(oAe," \u2014 "),LI=n(oAe,"A",{href:!0});var yet=s(LI);vho=r(yet,"LayoutXLMProcessor"),yet.forEach(t),Fho=r(oAe," (LayoutXLM model)"),oAe.forEach(t),Tho=i(ue),Hh=n(ue,"LI",{});var rAe=s(Hh);Ese=n(rAe,"STRONG",{});var Let=s(Ese);Mho=r(Let,"sew"),Let.forEach(t),Eho=r(rAe," \u2014 "),xI=n(rAe,"A",{href:!0});var xet=s(xI);Cho=r(xet,"Wav2Vec2Processor"),xet.forEach(t),who=r(rAe," (SEW model)"),rAe.forEach(t),Aho=i(ue),Uh=n(ue,"LI",{});var tAe=s(Uh);Cse=n(tAe,"STRONG",{});var $et=s(Cse);yho=r($et,"sew-d"),$et.forEach(t),Lho=r(tAe," \u2014 "),$I=n(tAe,"A",{href:!0});var ket=s($I);xho=r(ket,"Wav2Vec2Processor"),ket.forEach(t),$ho=r(tAe," (SEW-D model)"),tAe.forEach(t),kho=i(ue),Jh=n(ue,"LI",{});var aAe=s(Jh);wse=n(aAe,"STRONG",{});var Set=s(wse);Sho=r(Set,"speech_to_text"),Set.forEach(t),Rho=r(aAe," \u2014 "),kI=n(aAe,"A",{href:!0});var Ret=s(kI);Pho=r(Ret,"Speech2TextProcessor"),Ret.forEach(t),Bho=r(aAe," (Speech2Text model)"),aAe.forEach(t),Iho=i(ue),Yh=n(ue,"LI",{});var nAe=s(Yh);Ase=n(nAe,"STRONG",{});var Pet=s(Ase);Nho=r(Pet,"speech_to_text_2"),Pet.forEach(t),qho=r(nAe," \u2014 "),SI=n(nAe,"A",{href:!0});var Bet=s(SI);jho=r(Bet,"Speech2Text2Processor"),Bet.forEach(t),Dho=r(nAe," (Speech2Text2 model)"),nAe.forEach(t),Gho=i(ue),Kh=n(ue,"LI",{});var sAe=s(Kh);yse=n(sAe,"STRONG",{});var Iet=s(yse);Oho=r(Iet,"trocr"),Iet.forEach(t),Vho=r(sAe," \u2014 "),RI=n(sAe,"A",{href:!0});var Net=s(RI);Xho=r(Net,"TrOCRProcessor"),Net.forEach(t),zho=r(sAe," (TrOCR model)"),sAe.forEach(t),Who=i(ue),Zh=n(ue,"LI",{});var lAe=s(Zh);Lse=n(lAe,"STRONG",{});var qet=s(Lse);Qho=r(qet,"unispeech"),qet.forEach(t),Hho=r(lAe," \u2014 "),PI=n(lAe,"A",{href:!0});var jet=s(PI);Uho=r(jet,"Wav2Vec2Processor"),jet.forEach(t),Jho=r(lAe," (UniSpeech model)"),lAe.forEach(t),Yho=i(ue),ep=n(ue,"LI",{});var iAe=s(ep);xse=n(iAe,"STRONG",{});var Det=s(xse);Kho=r(Det,"unispeech-sat"),Det.forEach(t),Zho=r(iAe," \u2014 "),BI=n(iAe,"A",{href:!0});var Get=s(BI);epo=r(Get,"Wav2Vec2Processor"),Get.forEach(t),opo=r(iAe," (UniSpeechSat model)"),iAe.forEach(t),rpo=i(ue),op=n(ue,"LI",{});var dAe=s(op);$se=n(dAe,"STRONG",{});var Oet=s($se);tpo=r(Oet,"vilt"),Oet.forEach(t),apo=r(dAe," \u2014 "),II=n(dAe,"A",{href:!0});var Vet=s(II);npo=r(Vet,"ViltProcessor"),Vet.forEach(t),spo=r(dAe," (ViLT model)"),dAe.forEach(t),lpo=i(ue),rp=n(ue,"LI",{});var cAe=s(rp);kse=n(cAe,"STRONG",{});var Xet=s(kse);ipo=r(Xet,"vision-text-dual-encoder"),Xet.forEach(t),dpo=r(cAe," \u2014 "),NI=n(cAe,"A",{href:!0});var zet=s(NI);cpo=r(zet,"VisionTextDualEncoderProcessor"),zet.forEach(t),fpo=r(cAe," (VisionTextDualEncoder model)"),cAe.forEach(t),mpo=i(ue),tp=n(ue,"LI",{});var fAe=s(tp);Sse=n(fAe,"STRONG",{});var Wet=s(Sse);gpo=r(Wet,"wav2vec2"),Wet.forEach(t),hpo=r(fAe," \u2014 "),qI=n(fAe,"A",{href:!0});var Qet=s(qI);ppo=r(Qet,"Wav2Vec2Processor"),Qet.forEach(t),_po=r(fAe," (Wav2Vec2 model)"),fAe.forEach(t),upo=i(ue),ap=n(ue,"LI",{});var mAe=s(ap);Rse=n(mAe,"STRONG",{});var Het=s(Rse);bpo=r(Het,"wav2vec2-conformer"),Het.forEach(t),vpo=r(mAe," \u2014 "),jI=n(mAe,"A",{href:!0});var Uet=s(jI);Fpo=r(Uet,"Wav2Vec2Processor"),Uet.forEach(t),Tpo=r(mAe," (Wav2Vec2-Conformer model)"),mAe.forEach(t),Mpo=i(ue),np=n(ue,"LI",{});var gAe=s(np);Pse=n(gAe,"STRONG",{});var Jet=s(Pse);Epo=r(Jet,"wavlm"),Jet.forEach(t),Cpo=r(gAe," \u2014 "),DI=n(gAe,"A",{href:!0});var Yet=s(DI);wpo=r(Yet,"Wav2Vec2Processor"),Yet.forEach(t),Apo=r(gAe," (WavLM model)"),gAe.forEach(t),ue.forEach(t),ypo=i(ea),T(sp.$$.fragment,ea),Lpo=i(ea),T(lp.$$.fragment,ea),ea.forEach(t),xpo=i(Gs),ip=n(Gs,"DIV",{class:!0});var YDe=s(ip);T(l6.$$.fragment,YDe),$po=i(YDe),Bse=n(YDe,"P",{});var Ket=s(Bse);kpo=r(Ket,"Register a new processor for this class."),Ket.forEach(t),YDe.forEach(t),Gs.forEach(t),Hqe=i(f),Ai=n(f,"H2",{class:!0});var KDe=s(Ai);dp=n(KDe,"A",{id:!0,class:!0,href:!0});var Zet=s(dp);Ise=n(Zet,"SPAN",{});var eot=s(Ise);T(i6.$$.fragment,eot),eot.forEach(t),Zet.forEach(t),Spo=i(KDe),Nse=n(KDe,"SPAN",{});var oot=s(Nse);Rpo=r(oot,"AutoModel"),oot.forEach(t),KDe.forEach(t),Uqe=i(f),Lo=n(f,"DIV",{class:!0});var Os=s(Lo);T(d6.$$.fragment,Os),Ppo=i(Os),yi=n(Os,"P",{});var BZ=s(yi);Bpo=r(BZ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),GI=n(BZ,"A",{href:!0});var rot=s(GI);Ipo=r(rot,"from_pretrained()"),rot.forEach(t),Npo=r(BZ," class method or the "),OI=n(BZ,"A",{href:!0});var tot=s(OI);qpo=r(tot,"from_config()"),tot.forEach(t),jpo=r(BZ,` class
method.`),BZ.forEach(t),Dpo=i(Os),c6=n(Os,"P",{});var ZDe=s(c6);Gpo=r(ZDe,"This class cannot be instantiated directly using "),qse=n(ZDe,"CODE",{});var aot=s(qse);Opo=r(aot,"__init__()"),aot.forEach(t),Vpo=r(ZDe," (throws an error)."),ZDe.forEach(t),Xpo=i(Os),tt=n(Os,"DIV",{class:!0});var D0=s(tt);T(f6.$$.fragment,D0),zpo=i(D0),jse=n(D0,"P",{});var not=s(jse);Wpo=r(not,"Instantiates one of the base model classes of the library from a configuration."),not.forEach(t),Qpo=i(D0),Li=n(D0,"P",{});var IZ=s(Li);Hpo=r(IZ,`Note:
Loading a model from its configuration file does `),Dse=n(IZ,"STRONG",{});var sot=s(Dse);Upo=r(sot,"not"),sot.forEach(t),Jpo=r(IZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),VI=n(IZ,"A",{href:!0});var lot=s(VI);Ypo=r(lot,"from_pretrained()"),lot.forEach(t),Kpo=r(IZ," to load the model weights."),IZ.forEach(t),Zpo=i(D0),T(cp.$$.fragment,D0),D0.forEach(t),e_o=i(Os),Je=n(Os,"DIV",{class:!0});var oa=s(Je);T(m6.$$.fragment,oa),o_o=i(oa),Gse=n(oa,"P",{});var iot=s(Gse);r_o=r(iot,"Instantiate one of the base model classes of the library from a pretrained model."),iot.forEach(t),t_o=i(oa),La=n(oa,"P",{});var G0=s(La);a_o=r(G0,"The model class to instantiate is selected based on the "),Ose=n(G0,"CODE",{});var dot=s(Ose);n_o=r(dot,"model_type"),dot.forEach(t),s_o=r(G0,` property of the config object (either
passed as an argument or loaded from `),Vse=n(G0,"CODE",{});var cot=s(Vse);l_o=r(cot,"pretrained_model_name_or_path"),cot.forEach(t),i_o=r(G0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xse=n(G0,"CODE",{});var fot=s(Xse);d_o=r(fot,"pretrained_model_name_or_path"),fot.forEach(t),c_o=r(G0,":"),G0.forEach(t),f_o=i(oa),x=n(oa,"UL",{});var $=s(x);fp=n($,"LI",{});var hAe=s(fp);zse=n(hAe,"STRONG",{});var mot=s(zse);m_o=r(mot,"albert"),mot.forEach(t),g_o=r(hAe," \u2014 "),XI=n(hAe,"A",{href:!0});var got=s(XI);h_o=r(got,"AlbertModel"),got.forEach(t),p_o=r(hAe," (ALBERT model)"),hAe.forEach(t),__o=i($),mp=n($,"LI",{});var pAe=s(mp);Wse=n(pAe,"STRONG",{});var hot=s(Wse);u_o=r(hot,"bart"),hot.forEach(t),b_o=r(pAe," \u2014 "),zI=n(pAe,"A",{href:!0});var pot=s(zI);v_o=r(pot,"BartModel"),pot.forEach(t),F_o=r(pAe," (BART model)"),pAe.forEach(t),T_o=i($),gp=n($,"LI",{});var _Ae=s(gp);Qse=n(_Ae,"STRONG",{});var _ot=s(Qse);M_o=r(_ot,"beit"),_ot.forEach(t),E_o=r(_Ae," \u2014 "),WI=n(_Ae,"A",{href:!0});var uot=s(WI);C_o=r(uot,"BeitModel"),uot.forEach(t),w_o=r(_Ae," (BEiT model)"),_Ae.forEach(t),A_o=i($),hp=n($,"LI",{});var uAe=s(hp);Hse=n(uAe,"STRONG",{});var bot=s(Hse);y_o=r(bot,"bert"),bot.forEach(t),L_o=r(uAe," \u2014 "),QI=n(uAe,"A",{href:!0});var vot=s(QI);x_o=r(vot,"BertModel"),vot.forEach(t),$_o=r(uAe," (BERT model)"),uAe.forEach(t),k_o=i($),pp=n($,"LI",{});var bAe=s(pp);Use=n(bAe,"STRONG",{});var Fot=s(Use);S_o=r(Fot,"bert-generation"),Fot.forEach(t),R_o=r(bAe," \u2014 "),HI=n(bAe,"A",{href:!0});var Tot=s(HI);P_o=r(Tot,"BertGenerationEncoder"),Tot.forEach(t),B_o=r(bAe," (Bert Generation model)"),bAe.forEach(t),I_o=i($),_p=n($,"LI",{});var vAe=s(_p);Jse=n(vAe,"STRONG",{});var Mot=s(Jse);N_o=r(Mot,"big_bird"),Mot.forEach(t),q_o=r(vAe," \u2014 "),UI=n(vAe,"A",{href:!0});var Eot=s(UI);j_o=r(Eot,"BigBirdModel"),Eot.forEach(t),D_o=r(vAe," (BigBird model)"),vAe.forEach(t),G_o=i($),up=n($,"LI",{});var FAe=s(up);Yse=n(FAe,"STRONG",{});var Cot=s(Yse);O_o=r(Cot,"bigbird_pegasus"),Cot.forEach(t),V_o=r(FAe," \u2014 "),JI=n(FAe,"A",{href:!0});var wot=s(JI);X_o=r(wot,"BigBirdPegasusModel"),wot.forEach(t),z_o=r(FAe," (BigBird-Pegasus model)"),FAe.forEach(t),W_o=i($),bp=n($,"LI",{});var TAe=s(bp);Kse=n(TAe,"STRONG",{});var Aot=s(Kse);Q_o=r(Aot,"blenderbot"),Aot.forEach(t),H_o=r(TAe," \u2014 "),YI=n(TAe,"A",{href:!0});var yot=s(YI);U_o=r(yot,"BlenderbotModel"),yot.forEach(t),J_o=r(TAe," (Blenderbot model)"),TAe.forEach(t),Y_o=i($),vp=n($,"LI",{});var MAe=s(vp);Zse=n(MAe,"STRONG",{});var Lot=s(Zse);K_o=r(Lot,"blenderbot-small"),Lot.forEach(t),Z_o=r(MAe," \u2014 "),KI=n(MAe,"A",{href:!0});var xot=s(KI);euo=r(xot,"BlenderbotSmallModel"),xot.forEach(t),ouo=r(MAe," (BlenderbotSmall model)"),MAe.forEach(t),ruo=i($),Fp=n($,"LI",{});var EAe=s(Fp);ele=n(EAe,"STRONG",{});var $ot=s(ele);tuo=r($ot,"camembert"),$ot.forEach(t),auo=r(EAe," \u2014 "),ZI=n(EAe,"A",{href:!0});var kot=s(ZI);nuo=r(kot,"CamembertModel"),kot.forEach(t),suo=r(EAe," (CamemBERT model)"),EAe.forEach(t),luo=i($),Tp=n($,"LI",{});var CAe=s(Tp);ole=n(CAe,"STRONG",{});var Sot=s(ole);iuo=r(Sot,"canine"),Sot.forEach(t),duo=r(CAe," \u2014 "),eN=n(CAe,"A",{href:!0});var Rot=s(eN);cuo=r(Rot,"CanineModel"),Rot.forEach(t),fuo=r(CAe," (CANINE model)"),CAe.forEach(t),muo=i($),Mp=n($,"LI",{});var wAe=s(Mp);rle=n(wAe,"STRONG",{});var Pot=s(rle);guo=r(Pot,"clip"),Pot.forEach(t),huo=r(wAe," \u2014 "),oN=n(wAe,"A",{href:!0});var Bot=s(oN);puo=r(Bot,"CLIPModel"),Bot.forEach(t),_uo=r(wAe," (CLIP model)"),wAe.forEach(t),uuo=i($),Ep=n($,"LI",{});var AAe=s(Ep);tle=n(AAe,"STRONG",{});var Iot=s(tle);buo=r(Iot,"convbert"),Iot.forEach(t),vuo=r(AAe," \u2014 "),rN=n(AAe,"A",{href:!0});var Not=s(rN);Fuo=r(Not,"ConvBertModel"),Not.forEach(t),Tuo=r(AAe," (ConvBERT model)"),AAe.forEach(t),Muo=i($),Cp=n($,"LI",{});var yAe=s(Cp);ale=n(yAe,"STRONG",{});var qot=s(ale);Euo=r(qot,"convnext"),qot.forEach(t),Cuo=r(yAe," \u2014 "),tN=n(yAe,"A",{href:!0});var jot=s(tN);wuo=r(jot,"ConvNextModel"),jot.forEach(t),Auo=r(yAe," (ConvNeXT model)"),yAe.forEach(t),yuo=i($),wp=n($,"LI",{});var LAe=s(wp);nle=n(LAe,"STRONG",{});var Dot=s(nle);Luo=r(Dot,"ctrl"),Dot.forEach(t),xuo=r(LAe," \u2014 "),aN=n(LAe,"A",{href:!0});var Got=s(aN);$uo=r(Got,"CTRLModel"),Got.forEach(t),kuo=r(LAe," (CTRL model)"),LAe.forEach(t),Suo=i($),Ap=n($,"LI",{});var xAe=s(Ap);sle=n(xAe,"STRONG",{});var Oot=s(sle);Ruo=r(Oot,"cvt"),Oot.forEach(t),Puo=r(xAe," \u2014 "),nN=n(xAe,"A",{href:!0});var Vot=s(nN);Buo=r(Vot,"CvtModel"),Vot.forEach(t),Iuo=r(xAe," (CvT model)"),xAe.forEach(t),Nuo=i($),yp=n($,"LI",{});var $Ae=s(yp);lle=n($Ae,"STRONG",{});var Xot=s(lle);quo=r(Xot,"data2vec-audio"),Xot.forEach(t),juo=r($Ae," \u2014 "),sN=n($Ae,"A",{href:!0});var zot=s(sN);Duo=r(zot,"Data2VecAudioModel"),zot.forEach(t),Guo=r($Ae," (Data2VecAudio model)"),$Ae.forEach(t),Ouo=i($),Lp=n($,"LI",{});var kAe=s(Lp);ile=n(kAe,"STRONG",{});var Wot=s(ile);Vuo=r(Wot,"data2vec-text"),Wot.forEach(t),Xuo=r(kAe," \u2014 "),lN=n(kAe,"A",{href:!0});var Qot=s(lN);zuo=r(Qot,"Data2VecTextModel"),Qot.forEach(t),Wuo=r(kAe," (Data2VecText model)"),kAe.forEach(t),Quo=i($),xp=n($,"LI",{});var SAe=s(xp);dle=n(SAe,"STRONG",{});var Hot=s(dle);Huo=r(Hot,"data2vec-vision"),Hot.forEach(t),Uuo=r(SAe," \u2014 "),iN=n(SAe,"A",{href:!0});var Uot=s(iN);Juo=r(Uot,"Data2VecVisionModel"),Uot.forEach(t),Yuo=r(SAe," (Data2VecVision model)"),SAe.forEach(t),Kuo=i($),$p=n($,"LI",{});var RAe=s($p);cle=n(RAe,"STRONG",{});var Jot=s(cle);Zuo=r(Jot,"deberta"),Jot.forEach(t),e1o=r(RAe," \u2014 "),dN=n(RAe,"A",{href:!0});var Yot=s(dN);o1o=r(Yot,"DebertaModel"),Yot.forEach(t),r1o=r(RAe," (DeBERTa model)"),RAe.forEach(t),t1o=i($),kp=n($,"LI",{});var PAe=s(kp);fle=n(PAe,"STRONG",{});var Kot=s(fle);a1o=r(Kot,"deberta-v2"),Kot.forEach(t),n1o=r(PAe," \u2014 "),cN=n(PAe,"A",{href:!0});var Zot=s(cN);s1o=r(Zot,"DebertaV2Model"),Zot.forEach(t),l1o=r(PAe," (DeBERTa-v2 model)"),PAe.forEach(t),i1o=i($),Sp=n($,"LI",{});var BAe=s(Sp);mle=n(BAe,"STRONG",{});var ert=s(mle);d1o=r(ert,"decision_transformer"),ert.forEach(t),c1o=r(BAe," \u2014 "),fN=n(BAe,"A",{href:!0});var ort=s(fN);f1o=r(ort,"DecisionTransformerModel"),ort.forEach(t),m1o=r(BAe," (Decision Transformer model)"),BAe.forEach(t),g1o=i($),Rp=n($,"LI",{});var IAe=s(Rp);gle=n(IAe,"STRONG",{});var rrt=s(gle);h1o=r(rrt,"deit"),rrt.forEach(t),p1o=r(IAe," \u2014 "),mN=n(IAe,"A",{href:!0});var trt=s(mN);_1o=r(trt,"DeiTModel"),trt.forEach(t),u1o=r(IAe," (DeiT model)"),IAe.forEach(t),b1o=i($),Pp=n($,"LI",{});var NAe=s(Pp);hle=n(NAe,"STRONG",{});var art=s(hle);v1o=r(art,"detr"),art.forEach(t),F1o=r(NAe," \u2014 "),gN=n(NAe,"A",{href:!0});var nrt=s(gN);T1o=r(nrt,"DetrModel"),nrt.forEach(t),M1o=r(NAe," (DETR model)"),NAe.forEach(t),E1o=i($),Bp=n($,"LI",{});var qAe=s(Bp);ple=n(qAe,"STRONG",{});var srt=s(ple);C1o=r(srt,"distilbert"),srt.forEach(t),w1o=r(qAe," \u2014 "),hN=n(qAe,"A",{href:!0});var lrt=s(hN);A1o=r(lrt,"DistilBertModel"),lrt.forEach(t),y1o=r(qAe," (DistilBERT model)"),qAe.forEach(t),L1o=i($),Ip=n($,"LI",{});var jAe=s(Ip);_le=n(jAe,"STRONG",{});var irt=s(_le);x1o=r(irt,"dpr"),irt.forEach(t),$1o=r(jAe," \u2014 "),pN=n(jAe,"A",{href:!0});var drt=s(pN);k1o=r(drt,"DPRQuestionEncoder"),drt.forEach(t),S1o=r(jAe," (DPR model)"),jAe.forEach(t),R1o=i($),Np=n($,"LI",{});var DAe=s(Np);ule=n(DAe,"STRONG",{});var crt=s(ule);P1o=r(crt,"dpt"),crt.forEach(t),B1o=r(DAe," \u2014 "),_N=n(DAe,"A",{href:!0});var frt=s(_N);I1o=r(frt,"DPTModel"),frt.forEach(t),N1o=r(DAe," (DPT model)"),DAe.forEach(t),q1o=i($),qp=n($,"LI",{});var GAe=s(qp);ble=n(GAe,"STRONG",{});var mrt=s(ble);j1o=r(mrt,"electra"),mrt.forEach(t),D1o=r(GAe," \u2014 "),uN=n(GAe,"A",{href:!0});var grt=s(uN);G1o=r(grt,"ElectraModel"),grt.forEach(t),O1o=r(GAe," (ELECTRA model)"),GAe.forEach(t),V1o=i($),jp=n($,"LI",{});var OAe=s(jp);vle=n(OAe,"STRONG",{});var hrt=s(vle);X1o=r(hrt,"flaubert"),hrt.forEach(t),z1o=r(OAe," \u2014 "),bN=n(OAe,"A",{href:!0});var prt=s(bN);W1o=r(prt,"FlaubertModel"),prt.forEach(t),Q1o=r(OAe," (FlauBERT model)"),OAe.forEach(t),H1o=i($),Dp=n($,"LI",{});var VAe=s(Dp);Fle=n(VAe,"STRONG",{});var _rt=s(Fle);U1o=r(_rt,"flava"),_rt.forEach(t),J1o=r(VAe," \u2014 "),vN=n(VAe,"A",{href:!0});var urt=s(vN);Y1o=r(urt,"FlavaModel"),urt.forEach(t),K1o=r(VAe," (FLAVA model)"),VAe.forEach(t),Z1o=i($),Gp=n($,"LI",{});var XAe=s(Gp);Tle=n(XAe,"STRONG",{});var brt=s(Tle);ebo=r(brt,"fnet"),brt.forEach(t),obo=r(XAe," \u2014 "),FN=n(XAe,"A",{href:!0});var vrt=s(FN);rbo=r(vrt,"FNetModel"),vrt.forEach(t),tbo=r(XAe," (FNet model)"),XAe.forEach(t),abo=i($),Op=n($,"LI",{});var zAe=s(Op);Mle=n(zAe,"STRONG",{});var Frt=s(Mle);nbo=r(Frt,"fsmt"),Frt.forEach(t),sbo=r(zAe," \u2014 "),TN=n(zAe,"A",{href:!0});var Trt=s(TN);lbo=r(Trt,"FSMTModel"),Trt.forEach(t),ibo=r(zAe," (FairSeq Machine-Translation model)"),zAe.forEach(t),dbo=i($),Ps=n($,"LI",{});var Y$=s(Ps);Ele=n(Y$,"STRONG",{});var Mrt=s(Ele);cbo=r(Mrt,"funnel"),Mrt.forEach(t),fbo=r(Y$," \u2014 "),MN=n(Y$,"A",{href:!0});var Ert=s(MN);mbo=r(Ert,"FunnelModel"),Ert.forEach(t),gbo=r(Y$," or "),EN=n(Y$,"A",{href:!0});var Crt=s(EN);hbo=r(Crt,"FunnelBaseModel"),Crt.forEach(t),pbo=r(Y$," (Funnel Transformer model)"),Y$.forEach(t),_bo=i($),Vp=n($,"LI",{});var WAe=s(Vp);Cle=n(WAe,"STRONG",{});var wrt=s(Cle);ubo=r(wrt,"glpn"),wrt.forEach(t),bbo=r(WAe," \u2014 "),CN=n(WAe,"A",{href:!0});var Art=s(CN);vbo=r(Art,"GLPNModel"),Art.forEach(t),Fbo=r(WAe," (GLPN model)"),WAe.forEach(t),Tbo=i($),Xp=n($,"LI",{});var QAe=s(Xp);wle=n(QAe,"STRONG",{});var yrt=s(wle);Mbo=r(yrt,"gpt2"),yrt.forEach(t),Ebo=r(QAe," \u2014 "),wN=n(QAe,"A",{href:!0});var Lrt=s(wN);Cbo=r(Lrt,"GPT2Model"),Lrt.forEach(t),wbo=r(QAe," (OpenAI GPT-2 model)"),QAe.forEach(t),Abo=i($),zp=n($,"LI",{});var HAe=s(zp);Ale=n(HAe,"STRONG",{});var xrt=s(Ale);ybo=r(xrt,"gpt_neo"),xrt.forEach(t),Lbo=r(HAe," \u2014 "),AN=n(HAe,"A",{href:!0});var $rt=s(AN);xbo=r($rt,"GPTNeoModel"),$rt.forEach(t),$bo=r(HAe," (GPT Neo model)"),HAe.forEach(t),kbo=i($),Wp=n($,"LI",{});var UAe=s(Wp);yle=n(UAe,"STRONG",{});var krt=s(yle);Sbo=r(krt,"gpt_neox"),krt.forEach(t),Rbo=r(UAe," \u2014 "),yN=n(UAe,"A",{href:!0});var Srt=s(yN);Pbo=r(Srt,"GPTNeoXModel"),Srt.forEach(t),Bbo=r(UAe," (GPT NeoX model)"),UAe.forEach(t),Ibo=i($),Qp=n($,"LI",{});var JAe=s(Qp);Lle=n(JAe,"STRONG",{});var Rrt=s(Lle);Nbo=r(Rrt,"gptj"),Rrt.forEach(t),qbo=r(JAe," \u2014 "),LN=n(JAe,"A",{href:!0});var Prt=s(LN);jbo=r(Prt,"GPTJModel"),Prt.forEach(t),Dbo=r(JAe," (GPT-J model)"),JAe.forEach(t),Gbo=i($),Hp=n($,"LI",{});var YAe=s(Hp);xle=n(YAe,"STRONG",{});var Brt=s(xle);Obo=r(Brt,"hubert"),Brt.forEach(t),Vbo=r(YAe," \u2014 "),xN=n(YAe,"A",{href:!0});var Irt=s(xN);Xbo=r(Irt,"HubertModel"),Irt.forEach(t),zbo=r(YAe," (Hubert model)"),YAe.forEach(t),Wbo=i($),Up=n($,"LI",{});var KAe=s(Up);$le=n(KAe,"STRONG",{});var Nrt=s($le);Qbo=r(Nrt,"ibert"),Nrt.forEach(t),Hbo=r(KAe," \u2014 "),$N=n(KAe,"A",{href:!0});var qrt=s($N);Ubo=r(qrt,"IBertModel"),qrt.forEach(t),Jbo=r(KAe," (I-BERT model)"),KAe.forEach(t),Ybo=i($),Jp=n($,"LI",{});var ZAe=s(Jp);kle=n(ZAe,"STRONG",{});var jrt=s(kle);Kbo=r(jrt,"imagegpt"),jrt.forEach(t),Zbo=r(ZAe," \u2014 "),kN=n(ZAe,"A",{href:!0});var Drt=s(kN);e2o=r(Drt,"ImageGPTModel"),Drt.forEach(t),o2o=r(ZAe," (ImageGPT model)"),ZAe.forEach(t),r2o=i($),Yp=n($,"LI",{});var e6e=s(Yp);Sle=n(e6e,"STRONG",{});var Grt=s(Sle);t2o=r(Grt,"layoutlm"),Grt.forEach(t),a2o=r(e6e," \u2014 "),SN=n(e6e,"A",{href:!0});var Ort=s(SN);n2o=r(Ort,"LayoutLMModel"),Ort.forEach(t),s2o=r(e6e," (LayoutLM model)"),e6e.forEach(t),l2o=i($),Kp=n($,"LI",{});var o6e=s(Kp);Rle=n(o6e,"STRONG",{});var Vrt=s(Rle);i2o=r(Vrt,"layoutlmv2"),Vrt.forEach(t),d2o=r(o6e," \u2014 "),RN=n(o6e,"A",{href:!0});var Xrt=s(RN);c2o=r(Xrt,"LayoutLMv2Model"),Xrt.forEach(t),f2o=r(o6e," (LayoutLMv2 model)"),o6e.forEach(t),m2o=i($),Zp=n($,"LI",{});var r6e=s(Zp);Ple=n(r6e,"STRONG",{});var zrt=s(Ple);g2o=r(zrt,"layoutlmv3"),zrt.forEach(t),h2o=r(r6e," \u2014 "),PN=n(r6e,"A",{href:!0});var Wrt=s(PN);p2o=r(Wrt,"LayoutLMv3Model"),Wrt.forEach(t),_2o=r(r6e," (LayoutLMv3 model)"),r6e.forEach(t),u2o=i($),e_=n($,"LI",{});var t6e=s(e_);Ble=n(t6e,"STRONG",{});var Qrt=s(Ble);b2o=r(Qrt,"led"),Qrt.forEach(t),v2o=r(t6e," \u2014 "),BN=n(t6e,"A",{href:!0});var Hrt=s(BN);F2o=r(Hrt,"LEDModel"),Hrt.forEach(t),T2o=r(t6e," (LED model)"),t6e.forEach(t),M2o=i($),o_=n($,"LI",{});var a6e=s(o_);Ile=n(a6e,"STRONG",{});var Urt=s(Ile);E2o=r(Urt,"levit"),Urt.forEach(t),C2o=r(a6e," \u2014 "),IN=n(a6e,"A",{href:!0});var Jrt=s(IN);w2o=r(Jrt,"LevitModel"),Jrt.forEach(t),A2o=r(a6e," (LeViT model)"),a6e.forEach(t),y2o=i($),r_=n($,"LI",{});var n6e=s(r_);Nle=n(n6e,"STRONG",{});var Yrt=s(Nle);L2o=r(Yrt,"longformer"),Yrt.forEach(t),x2o=r(n6e," \u2014 "),NN=n(n6e,"A",{href:!0});var Krt=s(NN);$2o=r(Krt,"LongformerModel"),Krt.forEach(t),k2o=r(n6e," (Longformer model)"),n6e.forEach(t),S2o=i($),t_=n($,"LI",{});var s6e=s(t_);qle=n(s6e,"STRONG",{});var Zrt=s(qle);R2o=r(Zrt,"luke"),Zrt.forEach(t),P2o=r(s6e," \u2014 "),qN=n(s6e,"A",{href:!0});var ett=s(qN);B2o=r(ett,"LukeModel"),ett.forEach(t),I2o=r(s6e," (LUKE model)"),s6e.forEach(t),N2o=i($),a_=n($,"LI",{});var l6e=s(a_);jle=n(l6e,"STRONG",{});var ott=s(jle);q2o=r(ott,"lxmert"),ott.forEach(t),j2o=r(l6e," \u2014 "),jN=n(l6e,"A",{href:!0});var rtt=s(jN);D2o=r(rtt,"LxmertModel"),rtt.forEach(t),G2o=r(l6e," (LXMERT model)"),l6e.forEach(t),O2o=i($),n_=n($,"LI",{});var i6e=s(n_);Dle=n(i6e,"STRONG",{});var ttt=s(Dle);V2o=r(ttt,"m2m_100"),ttt.forEach(t),X2o=r(i6e," \u2014 "),DN=n(i6e,"A",{href:!0});var att=s(DN);z2o=r(att,"M2M100Model"),att.forEach(t),W2o=r(i6e," (M2M100 model)"),i6e.forEach(t),Q2o=i($),s_=n($,"LI",{});var d6e=s(s_);Gle=n(d6e,"STRONG",{});var ntt=s(Gle);H2o=r(ntt,"marian"),ntt.forEach(t),U2o=r(d6e," \u2014 "),GN=n(d6e,"A",{href:!0});var stt=s(GN);J2o=r(stt,"MarianModel"),stt.forEach(t),Y2o=r(d6e," (Marian model)"),d6e.forEach(t),K2o=i($),l_=n($,"LI",{});var c6e=s(l_);Ole=n(c6e,"STRONG",{});var ltt=s(Ole);Z2o=r(ltt,"maskformer"),ltt.forEach(t),evo=r(c6e," \u2014 "),ON=n(c6e,"A",{href:!0});var itt=s(ON);ovo=r(itt,"MaskFormerModel"),itt.forEach(t),rvo=r(c6e," (MaskFormer model)"),c6e.forEach(t),tvo=i($),i_=n($,"LI",{});var f6e=s(i_);Vle=n(f6e,"STRONG",{});var dtt=s(Vle);avo=r(dtt,"mbart"),dtt.forEach(t),nvo=r(f6e," \u2014 "),VN=n(f6e,"A",{href:!0});var ctt=s(VN);svo=r(ctt,"MBartModel"),ctt.forEach(t),lvo=r(f6e," (mBART model)"),f6e.forEach(t),ivo=i($),d_=n($,"LI",{});var m6e=s(d_);Xle=n(m6e,"STRONG",{});var ftt=s(Xle);dvo=r(ftt,"megatron-bert"),ftt.forEach(t),cvo=r(m6e," \u2014 "),XN=n(m6e,"A",{href:!0});var mtt=s(XN);fvo=r(mtt,"MegatronBertModel"),mtt.forEach(t),mvo=r(m6e," (Megatron-BERT model)"),m6e.forEach(t),gvo=i($),c_=n($,"LI",{});var g6e=s(c_);zle=n(g6e,"STRONG",{});var gtt=s(zle);hvo=r(gtt,"mobilebert"),gtt.forEach(t),pvo=r(g6e," \u2014 "),zN=n(g6e,"A",{href:!0});var htt=s(zN);_vo=r(htt,"MobileBertModel"),htt.forEach(t),uvo=r(g6e," (MobileBERT model)"),g6e.forEach(t),bvo=i($),f_=n($,"LI",{});var h6e=s(f_);Wle=n(h6e,"STRONG",{});var ptt=s(Wle);vvo=r(ptt,"mpnet"),ptt.forEach(t),Fvo=r(h6e," \u2014 "),WN=n(h6e,"A",{href:!0});var _tt=s(WN);Tvo=r(_tt,"MPNetModel"),_tt.forEach(t),Mvo=r(h6e," (MPNet model)"),h6e.forEach(t),Evo=i($),m_=n($,"LI",{});var p6e=s(m_);Qle=n(p6e,"STRONG",{});var utt=s(Qle);Cvo=r(utt,"mt5"),utt.forEach(t),wvo=r(p6e," \u2014 "),QN=n(p6e,"A",{href:!0});var btt=s(QN);Avo=r(btt,"MT5Model"),btt.forEach(t),yvo=r(p6e," (MT5 model)"),p6e.forEach(t),Lvo=i($),g_=n($,"LI",{});var _6e=s(g_);Hle=n(_6e,"STRONG",{});var vtt=s(Hle);xvo=r(vtt,"nystromformer"),vtt.forEach(t),$vo=r(_6e," \u2014 "),HN=n(_6e,"A",{href:!0});var Ftt=s(HN);kvo=r(Ftt,"NystromformerModel"),Ftt.forEach(t),Svo=r(_6e," (Nystr\xF6mformer model)"),_6e.forEach(t),Rvo=i($),h_=n($,"LI",{});var u6e=s(h_);Ule=n(u6e,"STRONG",{});var Ttt=s(Ule);Pvo=r(Ttt,"openai-gpt"),Ttt.forEach(t),Bvo=r(u6e," \u2014 "),UN=n(u6e,"A",{href:!0});var Mtt=s(UN);Ivo=r(Mtt,"OpenAIGPTModel"),Mtt.forEach(t),Nvo=r(u6e," (OpenAI GPT model)"),u6e.forEach(t),qvo=i($),p_=n($,"LI",{});var b6e=s(p_);Jle=n(b6e,"STRONG",{});var Ett=s(Jle);jvo=r(Ett,"opt"),Ett.forEach(t),Dvo=r(b6e," \u2014 "),JN=n(b6e,"A",{href:!0});var Ctt=s(JN);Gvo=r(Ctt,"OPTModel"),Ctt.forEach(t),Ovo=r(b6e," (OPT model)"),b6e.forEach(t),Vvo=i($),__=n($,"LI",{});var v6e=s(__);Yle=n(v6e,"STRONG",{});var wtt=s(Yle);Xvo=r(wtt,"pegasus"),wtt.forEach(t),zvo=r(v6e," \u2014 "),YN=n(v6e,"A",{href:!0});var Att=s(YN);Wvo=r(Att,"PegasusModel"),Att.forEach(t),Qvo=r(v6e," (Pegasus model)"),v6e.forEach(t),Hvo=i($),u_=n($,"LI",{});var F6e=s(u_);Kle=n(F6e,"STRONG",{});var ytt=s(Kle);Uvo=r(ytt,"perceiver"),ytt.forEach(t),Jvo=r(F6e," \u2014 "),KN=n(F6e,"A",{href:!0});var Ltt=s(KN);Yvo=r(Ltt,"PerceiverModel"),Ltt.forEach(t),Kvo=r(F6e," (Perceiver model)"),F6e.forEach(t),Zvo=i($),b_=n($,"LI",{});var T6e=s(b_);Zle=n(T6e,"STRONG",{});var xtt=s(Zle);e5o=r(xtt,"plbart"),xtt.forEach(t),o5o=r(T6e," \u2014 "),ZN=n(T6e,"A",{href:!0});var $tt=s(ZN);r5o=r($tt,"PLBartModel"),$tt.forEach(t),t5o=r(T6e," (PLBart model)"),T6e.forEach(t),a5o=i($),v_=n($,"LI",{});var M6e=s(v_);eie=n(M6e,"STRONG",{});var ktt=s(eie);n5o=r(ktt,"poolformer"),ktt.forEach(t),s5o=r(M6e," \u2014 "),eq=n(M6e,"A",{href:!0});var Stt=s(eq);l5o=r(Stt,"PoolFormerModel"),Stt.forEach(t),i5o=r(M6e," (PoolFormer model)"),M6e.forEach(t),d5o=i($),F_=n($,"LI",{});var E6e=s(F_);oie=n(E6e,"STRONG",{});var Rtt=s(oie);c5o=r(Rtt,"prophetnet"),Rtt.forEach(t),f5o=r(E6e," \u2014 "),oq=n(E6e,"A",{href:!0});var Ptt=s(oq);m5o=r(Ptt,"ProphetNetModel"),Ptt.forEach(t),g5o=r(E6e," (ProphetNet model)"),E6e.forEach(t),h5o=i($),T_=n($,"LI",{});var C6e=s(T_);rie=n(C6e,"STRONG",{});var Btt=s(rie);p5o=r(Btt,"qdqbert"),Btt.forEach(t),_5o=r(C6e," \u2014 "),rq=n(C6e,"A",{href:!0});var Itt=s(rq);u5o=r(Itt,"QDQBertModel"),Itt.forEach(t),b5o=r(C6e," (QDQBert model)"),C6e.forEach(t),v5o=i($),M_=n($,"LI",{});var w6e=s(M_);tie=n(w6e,"STRONG",{});var Ntt=s(tie);F5o=r(Ntt,"reformer"),Ntt.forEach(t),T5o=r(w6e," \u2014 "),tq=n(w6e,"A",{href:!0});var qtt=s(tq);M5o=r(qtt,"ReformerModel"),qtt.forEach(t),E5o=r(w6e," (Reformer model)"),w6e.forEach(t),C5o=i($),E_=n($,"LI",{});var A6e=s(E_);aie=n(A6e,"STRONG",{});var jtt=s(aie);w5o=r(jtt,"regnet"),jtt.forEach(t),A5o=r(A6e," \u2014 "),aq=n(A6e,"A",{href:!0});var Dtt=s(aq);y5o=r(Dtt,"RegNetModel"),Dtt.forEach(t),L5o=r(A6e," (RegNet model)"),A6e.forEach(t),x5o=i($),C_=n($,"LI",{});var y6e=s(C_);nie=n(y6e,"STRONG",{});var Gtt=s(nie);$5o=r(Gtt,"rembert"),Gtt.forEach(t),k5o=r(y6e," \u2014 "),nq=n(y6e,"A",{href:!0});var Ott=s(nq);S5o=r(Ott,"RemBertModel"),Ott.forEach(t),R5o=r(y6e," (RemBERT model)"),y6e.forEach(t),P5o=i($),w_=n($,"LI",{});var L6e=s(w_);sie=n(L6e,"STRONG",{});var Vtt=s(sie);B5o=r(Vtt,"resnet"),Vtt.forEach(t),I5o=r(L6e," \u2014 "),sq=n(L6e,"A",{href:!0});var Xtt=s(sq);N5o=r(Xtt,"ResNetModel"),Xtt.forEach(t),q5o=r(L6e," (ResNet model)"),L6e.forEach(t),j5o=i($),A_=n($,"LI",{});var x6e=s(A_);lie=n(x6e,"STRONG",{});var ztt=s(lie);D5o=r(ztt,"retribert"),ztt.forEach(t),G5o=r(x6e," \u2014 "),lq=n(x6e,"A",{href:!0});var Wtt=s(lq);O5o=r(Wtt,"RetriBertModel"),Wtt.forEach(t),V5o=r(x6e," (RetriBERT model)"),x6e.forEach(t),X5o=i($),y_=n($,"LI",{});var $6e=s(y_);iie=n($6e,"STRONG",{});var Qtt=s(iie);z5o=r(Qtt,"roberta"),Qtt.forEach(t),W5o=r($6e," \u2014 "),iq=n($6e,"A",{href:!0});var Htt=s(iq);Q5o=r(Htt,"RobertaModel"),Htt.forEach(t),H5o=r($6e," (RoBERTa model)"),$6e.forEach(t),U5o=i($),L_=n($,"LI",{});var k6e=s(L_);die=n(k6e,"STRONG",{});var Utt=s(die);J5o=r(Utt,"roformer"),Utt.forEach(t),Y5o=r(k6e," \u2014 "),dq=n(k6e,"A",{href:!0});var Jtt=s(dq);K5o=r(Jtt,"RoFormerModel"),Jtt.forEach(t),Z5o=r(k6e," (RoFormer model)"),k6e.forEach(t),e3o=i($),x_=n($,"LI",{});var S6e=s(x_);cie=n(S6e,"STRONG",{});var Ytt=s(cie);o3o=r(Ytt,"segformer"),Ytt.forEach(t),r3o=r(S6e," \u2014 "),cq=n(S6e,"A",{href:!0});var Ktt=s(cq);t3o=r(Ktt,"SegformerModel"),Ktt.forEach(t),a3o=r(S6e," (SegFormer model)"),S6e.forEach(t),n3o=i($),$_=n($,"LI",{});var R6e=s($_);fie=n(R6e,"STRONG",{});var Ztt=s(fie);s3o=r(Ztt,"sew"),Ztt.forEach(t),l3o=r(R6e," \u2014 "),fq=n(R6e,"A",{href:!0});var eat=s(fq);i3o=r(eat,"SEWModel"),eat.forEach(t),d3o=r(R6e," (SEW model)"),R6e.forEach(t),c3o=i($),k_=n($,"LI",{});var P6e=s(k_);mie=n(P6e,"STRONG",{});var oat=s(mie);f3o=r(oat,"sew-d"),oat.forEach(t),m3o=r(P6e," \u2014 "),mq=n(P6e,"A",{href:!0});var rat=s(mq);g3o=r(rat,"SEWDModel"),rat.forEach(t),h3o=r(P6e," (SEW-D model)"),P6e.forEach(t),p3o=i($),S_=n($,"LI",{});var B6e=s(S_);gie=n(B6e,"STRONG",{});var tat=s(gie);_3o=r(tat,"speech_to_text"),tat.forEach(t),u3o=r(B6e," \u2014 "),gq=n(B6e,"A",{href:!0});var aat=s(gq);b3o=r(aat,"Speech2TextModel"),aat.forEach(t),v3o=r(B6e," (Speech2Text model)"),B6e.forEach(t),F3o=i($),R_=n($,"LI",{});var I6e=s(R_);hie=n(I6e,"STRONG",{});var nat=s(hie);T3o=r(nat,"splinter"),nat.forEach(t),M3o=r(I6e," \u2014 "),hq=n(I6e,"A",{href:!0});var sat=s(hq);E3o=r(sat,"SplinterModel"),sat.forEach(t),C3o=r(I6e," (Splinter model)"),I6e.forEach(t),w3o=i($),P_=n($,"LI",{});var N6e=s(P_);pie=n(N6e,"STRONG",{});var lat=s(pie);A3o=r(lat,"squeezebert"),lat.forEach(t),y3o=r(N6e," \u2014 "),pq=n(N6e,"A",{href:!0});var iat=s(pq);L3o=r(iat,"SqueezeBertModel"),iat.forEach(t),x3o=r(N6e," (SqueezeBERT model)"),N6e.forEach(t),$3o=i($),B_=n($,"LI",{});var q6e=s(B_);_ie=n(q6e,"STRONG",{});var dat=s(_ie);k3o=r(dat,"swin"),dat.forEach(t),S3o=r(q6e," \u2014 "),_q=n(q6e,"A",{href:!0});var cat=s(_q);R3o=r(cat,"SwinModel"),cat.forEach(t),P3o=r(q6e," (Swin Transformer model)"),q6e.forEach(t),B3o=i($),I_=n($,"LI",{});var j6e=s(I_);uie=n(j6e,"STRONG",{});var fat=s(uie);I3o=r(fat,"t5"),fat.forEach(t),N3o=r(j6e," \u2014 "),uq=n(j6e,"A",{href:!0});var mat=s(uq);q3o=r(mat,"T5Model"),mat.forEach(t),j3o=r(j6e," (T5 model)"),j6e.forEach(t),D3o=i($),N_=n($,"LI",{});var D6e=s(N_);bie=n(D6e,"STRONG",{});var gat=s(bie);G3o=r(gat,"tapas"),gat.forEach(t),O3o=r(D6e," \u2014 "),bq=n(D6e,"A",{href:!0});var hat=s(bq);V3o=r(hat,"TapasModel"),hat.forEach(t),X3o=r(D6e," (TAPAS model)"),D6e.forEach(t),z3o=i($),q_=n($,"LI",{});var G6e=s(q_);vie=n(G6e,"STRONG",{});var pat=s(vie);W3o=r(pat,"trajectory_transformer"),pat.forEach(t),Q3o=r(G6e," \u2014 "),vq=n(G6e,"A",{href:!0});var _at=s(vq);H3o=r(_at,"TrajectoryTransformerModel"),_at.forEach(t),U3o=r(G6e," (Trajectory Transformer model)"),G6e.forEach(t),J3o=i($),j_=n($,"LI",{});var O6e=s(j_);Fie=n(O6e,"STRONG",{});var uat=s(Fie);Y3o=r(uat,"transfo-xl"),uat.forEach(t),K3o=r(O6e," \u2014 "),Fq=n(O6e,"A",{href:!0});var bat=s(Fq);Z3o=r(bat,"TransfoXLModel"),bat.forEach(t),eFo=r(O6e," (Transformer-XL model)"),O6e.forEach(t),oFo=i($),D_=n($,"LI",{});var V6e=s(D_);Tie=n(V6e,"STRONG",{});var vat=s(Tie);rFo=r(vat,"unispeech"),vat.forEach(t),tFo=r(V6e," \u2014 "),Tq=n(V6e,"A",{href:!0});var Fat=s(Tq);aFo=r(Fat,"UniSpeechModel"),Fat.forEach(t),nFo=r(V6e," (UniSpeech model)"),V6e.forEach(t),sFo=i($),G_=n($,"LI",{});var X6e=s(G_);Mie=n(X6e,"STRONG",{});var Tat=s(Mie);lFo=r(Tat,"unispeech-sat"),Tat.forEach(t),iFo=r(X6e," \u2014 "),Mq=n(X6e,"A",{href:!0});var Mat=s(Mq);dFo=r(Mat,"UniSpeechSatModel"),Mat.forEach(t),cFo=r(X6e," (UniSpeechSat model)"),X6e.forEach(t),fFo=i($),O_=n($,"LI",{});var z6e=s(O_);Eie=n(z6e,"STRONG",{});var Eat=s(Eie);mFo=r(Eat,"van"),Eat.forEach(t),gFo=r(z6e," \u2014 "),Eq=n(z6e,"A",{href:!0});var Cat=s(Eq);hFo=r(Cat,"VanModel"),Cat.forEach(t),pFo=r(z6e," (VAN model)"),z6e.forEach(t),_Fo=i($),V_=n($,"LI",{});var W6e=s(V_);Cie=n(W6e,"STRONG",{});var wat=s(Cie);uFo=r(wat,"vilt"),wat.forEach(t),bFo=r(W6e," \u2014 "),Cq=n(W6e,"A",{href:!0});var Aat=s(Cq);vFo=r(Aat,"ViltModel"),Aat.forEach(t),FFo=r(W6e," (ViLT model)"),W6e.forEach(t),TFo=i($),X_=n($,"LI",{});var Q6e=s(X_);wie=n(Q6e,"STRONG",{});var yat=s(wie);MFo=r(yat,"vision-text-dual-encoder"),yat.forEach(t),EFo=r(Q6e," \u2014 "),wq=n(Q6e,"A",{href:!0});var Lat=s(wq);CFo=r(Lat,"VisionTextDualEncoderModel"),Lat.forEach(t),wFo=r(Q6e," (VisionTextDualEncoder model)"),Q6e.forEach(t),AFo=i($),z_=n($,"LI",{});var H6e=s(z_);Aie=n(H6e,"STRONG",{});var xat=s(Aie);yFo=r(xat,"visual_bert"),xat.forEach(t),LFo=r(H6e," \u2014 "),Aq=n(H6e,"A",{href:!0});var $at=s(Aq);xFo=r($at,"VisualBertModel"),$at.forEach(t),$Fo=r(H6e," (VisualBERT model)"),H6e.forEach(t),kFo=i($),W_=n($,"LI",{});var U6e=s(W_);yie=n(U6e,"STRONG",{});var kat=s(yie);SFo=r(kat,"vit"),kat.forEach(t),RFo=r(U6e," \u2014 "),yq=n(U6e,"A",{href:!0});var Sat=s(yq);PFo=r(Sat,"ViTModel"),Sat.forEach(t),BFo=r(U6e," (ViT model)"),U6e.forEach(t),IFo=i($),Q_=n($,"LI",{});var J6e=s(Q_);Lie=n(J6e,"STRONG",{});var Rat=s(Lie);NFo=r(Rat,"vit_mae"),Rat.forEach(t),qFo=r(J6e," \u2014 "),Lq=n(J6e,"A",{href:!0});var Pat=s(Lq);jFo=r(Pat,"ViTMAEModel"),Pat.forEach(t),DFo=r(J6e," (ViTMAE model)"),J6e.forEach(t),GFo=i($),H_=n($,"LI",{});var Y6e=s(H_);xie=n(Y6e,"STRONG",{});var Bat=s(xie);OFo=r(Bat,"wav2vec2"),Bat.forEach(t),VFo=r(Y6e," \u2014 "),xq=n(Y6e,"A",{href:!0});var Iat=s(xq);XFo=r(Iat,"Wav2Vec2Model"),Iat.forEach(t),zFo=r(Y6e," (Wav2Vec2 model)"),Y6e.forEach(t),WFo=i($),U_=n($,"LI",{});var K6e=s(U_);$ie=n(K6e,"STRONG",{});var Nat=s($ie);QFo=r(Nat,"wav2vec2-conformer"),Nat.forEach(t),HFo=r(K6e," \u2014 "),$q=n(K6e,"A",{href:!0});var qat=s($q);UFo=r(qat,"Wav2Vec2ConformerModel"),qat.forEach(t),JFo=r(K6e," (Wav2Vec2-Conformer model)"),K6e.forEach(t),YFo=i($),J_=n($,"LI",{});var Z6e=s(J_);kie=n(Z6e,"STRONG",{});var jat=s(kie);KFo=r(jat,"wavlm"),jat.forEach(t),ZFo=r(Z6e," \u2014 "),kq=n(Z6e,"A",{href:!0});var Dat=s(kq);eTo=r(Dat,"WavLMModel"),Dat.forEach(t),oTo=r(Z6e," (WavLM model)"),Z6e.forEach(t),rTo=i($),Y_=n($,"LI",{});var eye=s(Y_);Sie=n(eye,"STRONG",{});var Gat=s(Sie);tTo=r(Gat,"xglm"),Gat.forEach(t),aTo=r(eye," \u2014 "),Sq=n(eye,"A",{href:!0});var Oat=s(Sq);nTo=r(Oat,"XGLMModel"),Oat.forEach(t),sTo=r(eye," (XGLM model)"),eye.forEach(t),lTo=i($),K_=n($,"LI",{});var oye=s(K_);Rie=n(oye,"STRONG",{});var Vat=s(Rie);iTo=r(Vat,"xlm"),Vat.forEach(t),dTo=r(oye," \u2014 "),Rq=n(oye,"A",{href:!0});var Xat=s(Rq);cTo=r(Xat,"XLMModel"),Xat.forEach(t),fTo=r(oye," (XLM model)"),oye.forEach(t),mTo=i($),Z_=n($,"LI",{});var rye=s(Z_);Pie=n(rye,"STRONG",{});var zat=s(Pie);gTo=r(zat,"xlm-prophetnet"),zat.forEach(t),hTo=r(rye," \u2014 "),Pq=n(rye,"A",{href:!0});var Wat=s(Pq);pTo=r(Wat,"XLMProphetNetModel"),Wat.forEach(t),_To=r(rye," (XLM-ProphetNet model)"),rye.forEach(t),uTo=i($),eu=n($,"LI",{});var tye=s(eu);Bie=n(tye,"STRONG",{});var Qat=s(Bie);bTo=r(Qat,"xlm-roberta"),Qat.forEach(t),vTo=r(tye," \u2014 "),Bq=n(tye,"A",{href:!0});var Hat=s(Bq);FTo=r(Hat,"XLMRobertaModel"),Hat.forEach(t),TTo=r(tye," (XLM-RoBERTa model)"),tye.forEach(t),MTo=i($),ou=n($,"LI",{});var aye=s(ou);Iie=n(aye,"STRONG",{});var Uat=s(Iie);ETo=r(Uat,"xlm-roberta-xl"),Uat.forEach(t),CTo=r(aye," \u2014 "),Iq=n(aye,"A",{href:!0});var Jat=s(Iq);wTo=r(Jat,"XLMRobertaXLModel"),Jat.forEach(t),ATo=r(aye," (XLM-RoBERTa-XL model)"),aye.forEach(t),yTo=i($),ru=n($,"LI",{});var nye=s(ru);Nie=n(nye,"STRONG",{});var Yat=s(Nie);LTo=r(Yat,"xlnet"),Yat.forEach(t),xTo=r(nye," \u2014 "),Nq=n(nye,"A",{href:!0});var Kat=s(Nq);$To=r(Kat,"XLNetModel"),Kat.forEach(t),kTo=r(nye," (XLNet model)"),nye.forEach(t),STo=i($),tu=n($,"LI",{});var sye=s(tu);qie=n(sye,"STRONG",{});var Zat=s(qie);RTo=r(Zat,"yolos"),Zat.forEach(t),PTo=r(sye," \u2014 "),qq=n(sye,"A",{href:!0});var ent=s(qq);BTo=r(ent,"YolosModel"),ent.forEach(t),ITo=r(sye," (YOLOS model)"),sye.forEach(t),NTo=i($),au=n($,"LI",{});var lye=s(au);jie=n(lye,"STRONG",{});var ont=s(jie);qTo=r(ont,"yoso"),ont.forEach(t),jTo=r(lye," \u2014 "),jq=n(lye,"A",{href:!0});var rnt=s(jq);DTo=r(rnt,"YosoModel"),rnt.forEach(t),GTo=r(lye," (YOSO model)"),lye.forEach(t),$.forEach(t),OTo=i(oa),nu=n(oa,"P",{});var iye=s(nu);VTo=r(iye,"The model is set in evaluation mode by default using "),Die=n(iye,"CODE",{});var tnt=s(Die);XTo=r(tnt,"model.eval()"),tnt.forEach(t),zTo=r(iye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gie=n(iye,"CODE",{});var ant=s(Gie);WTo=r(ant,"model.train()"),ant.forEach(t),iye.forEach(t),QTo=i(oa),T(su.$$.fragment,oa),oa.forEach(t),Os.forEach(t),Jqe=i(f),xi=n(f,"H2",{class:!0});var eGe=s(xi);lu=n(eGe,"A",{id:!0,class:!0,href:!0});var nnt=s(lu);Oie=n(nnt,"SPAN",{});var snt=s(Oie);T(g6.$$.fragment,snt),snt.forEach(t),nnt.forEach(t),HTo=i(eGe),Vie=n(eGe,"SPAN",{});var lnt=s(Vie);UTo=r(lnt,"AutoModelForPreTraining"),lnt.forEach(t),eGe.forEach(t),Yqe=i(f),xo=n(f,"DIV",{class:!0});var Vs=s(xo);T(h6.$$.fragment,Vs),JTo=i(Vs),$i=n(Vs,"P",{});var NZ=s($i);YTo=r(NZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Dq=n(NZ,"A",{href:!0});var int=s(Dq);KTo=r(int,"from_pretrained()"),int.forEach(t),ZTo=r(NZ," class method or the "),Gq=n(NZ,"A",{href:!0});var dnt=s(Gq);e7o=r(dnt,"from_config()"),dnt.forEach(t),o7o=r(NZ,` class
method.`),NZ.forEach(t),r7o=i(Vs),p6=n(Vs,"P",{});var oGe=s(p6);t7o=r(oGe,"This class cannot be instantiated directly using "),Xie=n(oGe,"CODE",{});var cnt=s(Xie);a7o=r(cnt,"__init__()"),cnt.forEach(t),n7o=r(oGe," (throws an error)."),oGe.forEach(t),s7o=i(Vs),at=n(Vs,"DIV",{class:!0});var O0=s(at);T(_6.$$.fragment,O0),l7o=i(O0),zie=n(O0,"P",{});var fnt=s(zie);i7o=r(fnt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),fnt.forEach(t),d7o=i(O0),ki=n(O0,"P",{});var qZ=s(ki);c7o=r(qZ,`Note:
Loading a model from its configuration file does `),Wie=n(qZ,"STRONG",{});var mnt=s(Wie);f7o=r(mnt,"not"),mnt.forEach(t),m7o=r(qZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Oq=n(qZ,"A",{href:!0});var gnt=s(Oq);g7o=r(gnt,"from_pretrained()"),gnt.forEach(t),h7o=r(qZ," to load the model weights."),qZ.forEach(t),p7o=i(O0),T(iu.$$.fragment,O0),O0.forEach(t),_7o=i(Vs),Ye=n(Vs,"DIV",{class:!0});var ra=s(Ye);T(u6.$$.fragment,ra),u7o=i(ra),Qie=n(ra,"P",{});var hnt=s(Qie);b7o=r(hnt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),hnt.forEach(t),v7o=i(ra),xa=n(ra,"P",{});var V0=s(xa);F7o=r(V0,"The model class to instantiate is selected based on the "),Hie=n(V0,"CODE",{});var pnt=s(Hie);T7o=r(pnt,"model_type"),pnt.forEach(t),M7o=r(V0,` property of the config object (either
passed as an argument or loaded from `),Uie=n(V0,"CODE",{});var _nt=s(Uie);E7o=r(_nt,"pretrained_model_name_or_path"),_nt.forEach(t),C7o=r(V0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jie=n(V0,"CODE",{});var unt=s(Jie);w7o=r(unt,"pretrained_model_name_or_path"),unt.forEach(t),A7o=r(V0,":"),V0.forEach(t),y7o=i(ra),G=n(ra,"UL",{});var O=s(G);du=n(O,"LI",{});var dye=s(du);Yie=n(dye,"STRONG",{});var bnt=s(Yie);L7o=r(bnt,"albert"),bnt.forEach(t),x7o=r(dye," \u2014 "),Vq=n(dye,"A",{href:!0});var vnt=s(Vq);$7o=r(vnt,"AlbertForPreTraining"),vnt.forEach(t),k7o=r(dye," (ALBERT model)"),dye.forEach(t),S7o=i(O),cu=n(O,"LI",{});var cye=s(cu);Kie=n(cye,"STRONG",{});var Fnt=s(Kie);R7o=r(Fnt,"bart"),Fnt.forEach(t),P7o=r(cye," \u2014 "),Xq=n(cye,"A",{href:!0});var Tnt=s(Xq);B7o=r(Tnt,"BartForConditionalGeneration"),Tnt.forEach(t),I7o=r(cye," (BART model)"),cye.forEach(t),N7o=i(O),fu=n(O,"LI",{});var fye=s(fu);Zie=n(fye,"STRONG",{});var Mnt=s(Zie);q7o=r(Mnt,"bert"),Mnt.forEach(t),j7o=r(fye," \u2014 "),zq=n(fye,"A",{href:!0});var Ent=s(zq);D7o=r(Ent,"BertForPreTraining"),Ent.forEach(t),G7o=r(fye," (BERT model)"),fye.forEach(t),O7o=i(O),mu=n(O,"LI",{});var mye=s(mu);ede=n(mye,"STRONG",{});var Cnt=s(ede);V7o=r(Cnt,"big_bird"),Cnt.forEach(t),X7o=r(mye," \u2014 "),Wq=n(mye,"A",{href:!0});var wnt=s(Wq);z7o=r(wnt,"BigBirdForPreTraining"),wnt.forEach(t),W7o=r(mye," (BigBird model)"),mye.forEach(t),Q7o=i(O),gu=n(O,"LI",{});var gye=s(gu);ode=n(gye,"STRONG",{});var Ant=s(ode);H7o=r(Ant,"camembert"),Ant.forEach(t),U7o=r(gye," \u2014 "),Qq=n(gye,"A",{href:!0});var ynt=s(Qq);J7o=r(ynt,"CamembertForMaskedLM"),ynt.forEach(t),Y7o=r(gye," (CamemBERT model)"),gye.forEach(t),K7o=i(O),hu=n(O,"LI",{});var hye=s(hu);rde=n(hye,"STRONG",{});var Lnt=s(rde);Z7o=r(Lnt,"ctrl"),Lnt.forEach(t),e9o=r(hye," \u2014 "),Hq=n(hye,"A",{href:!0});var xnt=s(Hq);o9o=r(xnt,"CTRLLMHeadModel"),xnt.forEach(t),r9o=r(hye," (CTRL model)"),hye.forEach(t),t9o=i(O),pu=n(O,"LI",{});var pye=s(pu);tde=n(pye,"STRONG",{});var $nt=s(tde);a9o=r($nt,"data2vec-text"),$nt.forEach(t),n9o=r(pye," \u2014 "),Uq=n(pye,"A",{href:!0});var knt=s(Uq);s9o=r(knt,"Data2VecTextForMaskedLM"),knt.forEach(t),l9o=r(pye," (Data2VecText model)"),pye.forEach(t),i9o=i(O),_u=n(O,"LI",{});var _ye=s(_u);ade=n(_ye,"STRONG",{});var Snt=s(ade);d9o=r(Snt,"deberta"),Snt.forEach(t),c9o=r(_ye," \u2014 "),Jq=n(_ye,"A",{href:!0});var Rnt=s(Jq);f9o=r(Rnt,"DebertaForMaskedLM"),Rnt.forEach(t),m9o=r(_ye," (DeBERTa model)"),_ye.forEach(t),g9o=i(O),uu=n(O,"LI",{});var uye=s(uu);nde=n(uye,"STRONG",{});var Pnt=s(nde);h9o=r(Pnt,"deberta-v2"),Pnt.forEach(t),p9o=r(uye," \u2014 "),Yq=n(uye,"A",{href:!0});var Bnt=s(Yq);_9o=r(Bnt,"DebertaV2ForMaskedLM"),Bnt.forEach(t),u9o=r(uye," (DeBERTa-v2 model)"),uye.forEach(t),b9o=i(O),bu=n(O,"LI",{});var bye=s(bu);sde=n(bye,"STRONG",{});var Int=s(sde);v9o=r(Int,"distilbert"),Int.forEach(t),F9o=r(bye," \u2014 "),Kq=n(bye,"A",{href:!0});var Nnt=s(Kq);T9o=r(Nnt,"DistilBertForMaskedLM"),Nnt.forEach(t),M9o=r(bye," (DistilBERT model)"),bye.forEach(t),E9o=i(O),vu=n(O,"LI",{});var vye=s(vu);lde=n(vye,"STRONG",{});var qnt=s(lde);C9o=r(qnt,"electra"),qnt.forEach(t),w9o=r(vye," \u2014 "),Zq=n(vye,"A",{href:!0});var jnt=s(Zq);A9o=r(jnt,"ElectraForPreTraining"),jnt.forEach(t),y9o=r(vye," (ELECTRA model)"),vye.forEach(t),L9o=i(O),Fu=n(O,"LI",{});var Fye=s(Fu);ide=n(Fye,"STRONG",{});var Dnt=s(ide);x9o=r(Dnt,"flaubert"),Dnt.forEach(t),$9o=r(Fye," \u2014 "),ej=n(Fye,"A",{href:!0});var Gnt=s(ej);k9o=r(Gnt,"FlaubertWithLMHeadModel"),Gnt.forEach(t),S9o=r(Fye," (FlauBERT model)"),Fye.forEach(t),R9o=i(O),Tu=n(O,"LI",{});var Tye=s(Tu);dde=n(Tye,"STRONG",{});var Ont=s(dde);P9o=r(Ont,"flava"),Ont.forEach(t),B9o=r(Tye," \u2014 "),oj=n(Tye,"A",{href:!0});var Vnt=s(oj);I9o=r(Vnt,"FlavaForPreTraining"),Vnt.forEach(t),N9o=r(Tye," (FLAVA model)"),Tye.forEach(t),q9o=i(O),Mu=n(O,"LI",{});var Mye=s(Mu);cde=n(Mye,"STRONG",{});var Xnt=s(cde);j9o=r(Xnt,"fnet"),Xnt.forEach(t),D9o=r(Mye," \u2014 "),rj=n(Mye,"A",{href:!0});var znt=s(rj);G9o=r(znt,"FNetForPreTraining"),znt.forEach(t),O9o=r(Mye," (FNet model)"),Mye.forEach(t),V9o=i(O),Eu=n(O,"LI",{});var Eye=s(Eu);fde=n(Eye,"STRONG",{});var Wnt=s(fde);X9o=r(Wnt,"fsmt"),Wnt.forEach(t),z9o=r(Eye," \u2014 "),tj=n(Eye,"A",{href:!0});var Qnt=s(tj);W9o=r(Qnt,"FSMTForConditionalGeneration"),Qnt.forEach(t),Q9o=r(Eye," (FairSeq Machine-Translation model)"),Eye.forEach(t),H9o=i(O),Cu=n(O,"LI",{});var Cye=s(Cu);mde=n(Cye,"STRONG",{});var Hnt=s(mde);U9o=r(Hnt,"funnel"),Hnt.forEach(t),J9o=r(Cye," \u2014 "),aj=n(Cye,"A",{href:!0});var Unt=s(aj);Y9o=r(Unt,"FunnelForPreTraining"),Unt.forEach(t),K9o=r(Cye," (Funnel Transformer model)"),Cye.forEach(t),Z9o=i(O),wu=n(O,"LI",{});var wye=s(wu);gde=n(wye,"STRONG",{});var Jnt=s(gde);eMo=r(Jnt,"gpt2"),Jnt.forEach(t),oMo=r(wye," \u2014 "),nj=n(wye,"A",{href:!0});var Ynt=s(nj);rMo=r(Ynt,"GPT2LMHeadModel"),Ynt.forEach(t),tMo=r(wye," (OpenAI GPT-2 model)"),wye.forEach(t),aMo=i(O),Au=n(O,"LI",{});var Aye=s(Au);hde=n(Aye,"STRONG",{});var Knt=s(hde);nMo=r(Knt,"ibert"),Knt.forEach(t),sMo=r(Aye," \u2014 "),sj=n(Aye,"A",{href:!0});var Znt=s(sj);lMo=r(Znt,"IBertForMaskedLM"),Znt.forEach(t),iMo=r(Aye," (I-BERT model)"),Aye.forEach(t),dMo=i(O),yu=n(O,"LI",{});var yye=s(yu);pde=n(yye,"STRONG",{});var est=s(pde);cMo=r(est,"layoutlm"),est.forEach(t),fMo=r(yye," \u2014 "),lj=n(yye,"A",{href:!0});var ost=s(lj);mMo=r(ost,"LayoutLMForMaskedLM"),ost.forEach(t),gMo=r(yye," (LayoutLM model)"),yye.forEach(t),hMo=i(O),Lu=n(O,"LI",{});var Lye=s(Lu);_de=n(Lye,"STRONG",{});var rst=s(_de);pMo=r(rst,"longformer"),rst.forEach(t),_Mo=r(Lye," \u2014 "),ij=n(Lye,"A",{href:!0});var tst=s(ij);uMo=r(tst,"LongformerForMaskedLM"),tst.forEach(t),bMo=r(Lye," (Longformer model)"),Lye.forEach(t),vMo=i(O),xu=n(O,"LI",{});var xye=s(xu);ude=n(xye,"STRONG",{});var ast=s(ude);FMo=r(ast,"lxmert"),ast.forEach(t),TMo=r(xye," \u2014 "),dj=n(xye,"A",{href:!0});var nst=s(dj);MMo=r(nst,"LxmertForPreTraining"),nst.forEach(t),EMo=r(xye," (LXMERT model)"),xye.forEach(t),CMo=i(O),$u=n(O,"LI",{});var $ye=s($u);bde=n($ye,"STRONG",{});var sst=s(bde);wMo=r(sst,"megatron-bert"),sst.forEach(t),AMo=r($ye," \u2014 "),cj=n($ye,"A",{href:!0});var lst=s(cj);yMo=r(lst,"MegatronBertForPreTraining"),lst.forEach(t),LMo=r($ye," (Megatron-BERT model)"),$ye.forEach(t),xMo=i(O),ku=n(O,"LI",{});var kye=s(ku);vde=n(kye,"STRONG",{});var ist=s(vde);$Mo=r(ist,"mobilebert"),ist.forEach(t),kMo=r(kye," \u2014 "),fj=n(kye,"A",{href:!0});var dst=s(fj);SMo=r(dst,"MobileBertForPreTraining"),dst.forEach(t),RMo=r(kye," (MobileBERT model)"),kye.forEach(t),PMo=i(O),Su=n(O,"LI",{});var Sye=s(Su);Fde=n(Sye,"STRONG",{});var cst=s(Fde);BMo=r(cst,"mpnet"),cst.forEach(t),IMo=r(Sye," \u2014 "),mj=n(Sye,"A",{href:!0});var fst=s(mj);NMo=r(fst,"MPNetForMaskedLM"),fst.forEach(t),qMo=r(Sye," (MPNet model)"),Sye.forEach(t),jMo=i(O),Ru=n(O,"LI",{});var Rye=s(Ru);Tde=n(Rye,"STRONG",{});var mst=s(Tde);DMo=r(mst,"openai-gpt"),mst.forEach(t),GMo=r(Rye," \u2014 "),gj=n(Rye,"A",{href:!0});var gst=s(gj);OMo=r(gst,"OpenAIGPTLMHeadModel"),gst.forEach(t),VMo=r(Rye," (OpenAI GPT model)"),Rye.forEach(t),XMo=i(O),Pu=n(O,"LI",{});var Pye=s(Pu);Mde=n(Pye,"STRONG",{});var hst=s(Mde);zMo=r(hst,"retribert"),hst.forEach(t),WMo=r(Pye," \u2014 "),hj=n(Pye,"A",{href:!0});var pst=s(hj);QMo=r(pst,"RetriBertModel"),pst.forEach(t),HMo=r(Pye," (RetriBERT model)"),Pye.forEach(t),UMo=i(O),Bu=n(O,"LI",{});var Bye=s(Bu);Ede=n(Bye,"STRONG",{});var _st=s(Ede);JMo=r(_st,"roberta"),_st.forEach(t),YMo=r(Bye," \u2014 "),pj=n(Bye,"A",{href:!0});var ust=s(pj);KMo=r(ust,"RobertaForMaskedLM"),ust.forEach(t),ZMo=r(Bye," (RoBERTa model)"),Bye.forEach(t),e4o=i(O),Iu=n(O,"LI",{});var Iye=s(Iu);Cde=n(Iye,"STRONG",{});var bst=s(Cde);o4o=r(bst,"splinter"),bst.forEach(t),r4o=r(Iye," \u2014 "),_j=n(Iye,"A",{href:!0});var vst=s(_j);t4o=r(vst,"SplinterForPreTraining"),vst.forEach(t),a4o=r(Iye," (Splinter model)"),Iye.forEach(t),n4o=i(O),Nu=n(O,"LI",{});var Nye=s(Nu);wde=n(Nye,"STRONG",{});var Fst=s(wde);s4o=r(Fst,"squeezebert"),Fst.forEach(t),l4o=r(Nye," \u2014 "),uj=n(Nye,"A",{href:!0});var Tst=s(uj);i4o=r(Tst,"SqueezeBertForMaskedLM"),Tst.forEach(t),d4o=r(Nye," (SqueezeBERT model)"),Nye.forEach(t),c4o=i(O),qu=n(O,"LI",{});var qye=s(qu);Ade=n(qye,"STRONG",{});var Mst=s(Ade);f4o=r(Mst,"t5"),Mst.forEach(t),m4o=r(qye," \u2014 "),bj=n(qye,"A",{href:!0});var Est=s(bj);g4o=r(Est,"T5ForConditionalGeneration"),Est.forEach(t),h4o=r(qye," (T5 model)"),qye.forEach(t),p4o=i(O),ju=n(O,"LI",{});var jye=s(ju);yde=n(jye,"STRONG",{});var Cst=s(yde);_4o=r(Cst,"tapas"),Cst.forEach(t),u4o=r(jye," \u2014 "),vj=n(jye,"A",{href:!0});var wst=s(vj);b4o=r(wst,"TapasForMaskedLM"),wst.forEach(t),v4o=r(jye," (TAPAS model)"),jye.forEach(t),F4o=i(O),Du=n(O,"LI",{});var Dye=s(Du);Lde=n(Dye,"STRONG",{});var Ast=s(Lde);T4o=r(Ast,"transfo-xl"),Ast.forEach(t),M4o=r(Dye," \u2014 "),Fj=n(Dye,"A",{href:!0});var yst=s(Fj);E4o=r(yst,"TransfoXLLMHeadModel"),yst.forEach(t),C4o=r(Dye," (Transformer-XL model)"),Dye.forEach(t),w4o=i(O),Gu=n(O,"LI",{});var Gye=s(Gu);xde=n(Gye,"STRONG",{});var Lst=s(xde);A4o=r(Lst,"unispeech"),Lst.forEach(t),y4o=r(Gye," \u2014 "),Tj=n(Gye,"A",{href:!0});var xst=s(Tj);L4o=r(xst,"UniSpeechForPreTraining"),xst.forEach(t),x4o=r(Gye," (UniSpeech model)"),Gye.forEach(t),$4o=i(O),Ou=n(O,"LI",{});var Oye=s(Ou);$de=n(Oye,"STRONG",{});var $st=s($de);k4o=r($st,"unispeech-sat"),$st.forEach(t),S4o=r(Oye," \u2014 "),Mj=n(Oye,"A",{href:!0});var kst=s(Mj);R4o=r(kst,"UniSpeechSatForPreTraining"),kst.forEach(t),P4o=r(Oye," (UniSpeechSat model)"),Oye.forEach(t),B4o=i(O),Vu=n(O,"LI",{});var Vye=s(Vu);kde=n(Vye,"STRONG",{});var Sst=s(kde);I4o=r(Sst,"visual_bert"),Sst.forEach(t),N4o=r(Vye," \u2014 "),Ej=n(Vye,"A",{href:!0});var Rst=s(Ej);q4o=r(Rst,"VisualBertForPreTraining"),Rst.forEach(t),j4o=r(Vye," (VisualBERT model)"),Vye.forEach(t),D4o=i(O),Xu=n(O,"LI",{});var Xye=s(Xu);Sde=n(Xye,"STRONG",{});var Pst=s(Sde);G4o=r(Pst,"vit_mae"),Pst.forEach(t),O4o=r(Xye," \u2014 "),Cj=n(Xye,"A",{href:!0});var Bst=s(Cj);V4o=r(Bst,"ViTMAEForPreTraining"),Bst.forEach(t),X4o=r(Xye," (ViTMAE model)"),Xye.forEach(t),z4o=i(O),zu=n(O,"LI",{});var zye=s(zu);Rde=n(zye,"STRONG",{});var Ist=s(Rde);W4o=r(Ist,"wav2vec2"),Ist.forEach(t),Q4o=r(zye," \u2014 "),wj=n(zye,"A",{href:!0});var Nst=s(wj);H4o=r(Nst,"Wav2Vec2ForPreTraining"),Nst.forEach(t),U4o=r(zye," (Wav2Vec2 model)"),zye.forEach(t),J4o=i(O),Wu=n(O,"LI",{});var Wye=s(Wu);Pde=n(Wye,"STRONG",{});var qst=s(Pde);Y4o=r(qst,"wav2vec2-conformer"),qst.forEach(t),K4o=r(Wye," \u2014 "),Aj=n(Wye,"A",{href:!0});var jst=s(Aj);Z4o=r(jst,"Wav2Vec2ConformerForPreTraining"),jst.forEach(t),eEo=r(Wye," (Wav2Vec2-Conformer model)"),Wye.forEach(t),oEo=i(O),Qu=n(O,"LI",{});var Qye=s(Qu);Bde=n(Qye,"STRONG",{});var Dst=s(Bde);rEo=r(Dst,"xlm"),Dst.forEach(t),tEo=r(Qye," \u2014 "),yj=n(Qye,"A",{href:!0});var Gst=s(yj);aEo=r(Gst,"XLMWithLMHeadModel"),Gst.forEach(t),nEo=r(Qye," (XLM model)"),Qye.forEach(t),sEo=i(O),Hu=n(O,"LI",{});var Hye=s(Hu);Ide=n(Hye,"STRONG",{});var Ost=s(Ide);lEo=r(Ost,"xlm-roberta"),Ost.forEach(t),iEo=r(Hye," \u2014 "),Lj=n(Hye,"A",{href:!0});var Vst=s(Lj);dEo=r(Vst,"XLMRobertaForMaskedLM"),Vst.forEach(t),cEo=r(Hye," (XLM-RoBERTa model)"),Hye.forEach(t),fEo=i(O),Uu=n(O,"LI",{});var Uye=s(Uu);Nde=n(Uye,"STRONG",{});var Xst=s(Nde);mEo=r(Xst,"xlm-roberta-xl"),Xst.forEach(t),gEo=r(Uye," \u2014 "),xj=n(Uye,"A",{href:!0});var zst=s(xj);hEo=r(zst,"XLMRobertaXLForMaskedLM"),zst.forEach(t),pEo=r(Uye," (XLM-RoBERTa-XL model)"),Uye.forEach(t),_Eo=i(O),Ju=n(O,"LI",{});var Jye=s(Ju);qde=n(Jye,"STRONG",{});var Wst=s(qde);uEo=r(Wst,"xlnet"),Wst.forEach(t),bEo=r(Jye," \u2014 "),$j=n(Jye,"A",{href:!0});var Qst=s($j);vEo=r(Qst,"XLNetLMHeadModel"),Qst.forEach(t),FEo=r(Jye," (XLNet model)"),Jye.forEach(t),O.forEach(t),TEo=i(ra),Yu=n(ra,"P",{});var Yye=s(Yu);MEo=r(Yye,"The model is set in evaluation mode by default using "),jde=n(Yye,"CODE",{});var Hst=s(jde);EEo=r(Hst,"model.eval()"),Hst.forEach(t),CEo=r(Yye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dde=n(Yye,"CODE",{});var Ust=s(Dde);wEo=r(Ust,"model.train()"),Ust.forEach(t),Yye.forEach(t),AEo=i(ra),T(Ku.$$.fragment,ra),ra.forEach(t),Vs.forEach(t),Kqe=i(f),Si=n(f,"H2",{class:!0});var rGe=s(Si);Zu=n(rGe,"A",{id:!0,class:!0,href:!0});var Jst=s(Zu);Gde=n(Jst,"SPAN",{});var Yst=s(Gde);T(b6.$$.fragment,Yst),Yst.forEach(t),Jst.forEach(t),yEo=i(rGe),Ode=n(rGe,"SPAN",{});var Kst=s(Ode);LEo=r(Kst,"AutoModelForCausalLM"),Kst.forEach(t),rGe.forEach(t),Zqe=i(f),$o=n(f,"DIV",{class:!0});var Xs=s($o);T(v6.$$.fragment,Xs),xEo=i(Xs),Ri=n(Xs,"P",{});var jZ=s(Ri);$Eo=r(jZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),kj=n(jZ,"A",{href:!0});var Zst=s(kj);kEo=r(Zst,"from_pretrained()"),Zst.forEach(t),SEo=r(jZ," class method or the "),Sj=n(jZ,"A",{href:!0});var elt=s(Sj);REo=r(elt,"from_config()"),elt.forEach(t),PEo=r(jZ,` class
method.`),jZ.forEach(t),BEo=i(Xs),F6=n(Xs,"P",{});var tGe=s(F6);IEo=r(tGe,"This class cannot be instantiated directly using "),Vde=n(tGe,"CODE",{});var olt=s(Vde);NEo=r(olt,"__init__()"),olt.forEach(t),qEo=r(tGe," (throws an error)."),tGe.forEach(t),jEo=i(Xs),nt=n(Xs,"DIV",{class:!0});var X0=s(nt);T(T6.$$.fragment,X0),DEo=i(X0),Xde=n(X0,"P",{});var rlt=s(Xde);GEo=r(rlt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),rlt.forEach(t),OEo=i(X0),Pi=n(X0,"P",{});var DZ=s(Pi);VEo=r(DZ,`Note:
Loading a model from its configuration file does `),zde=n(DZ,"STRONG",{});var tlt=s(zde);XEo=r(tlt,"not"),tlt.forEach(t),zEo=r(DZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Rj=n(DZ,"A",{href:!0});var alt=s(Rj);WEo=r(alt,"from_pretrained()"),alt.forEach(t),QEo=r(DZ," to load the model weights."),DZ.forEach(t),HEo=i(X0),T(e1.$$.fragment,X0),X0.forEach(t),UEo=i(Xs),Ke=n(Xs,"DIV",{class:!0});var ta=s(Ke);T(M6.$$.fragment,ta),JEo=i(ta),Wde=n(ta,"P",{});var nlt=s(Wde);YEo=r(nlt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),nlt.forEach(t),KEo=i(ta),$a=n(ta,"P",{});var z0=s($a);ZEo=r(z0,"The model class to instantiate is selected based on the "),Qde=n(z0,"CODE",{});var slt=s(Qde);eCo=r(slt,"model_type"),slt.forEach(t),oCo=r(z0,` property of the config object (either
passed as an argument or loaded from `),Hde=n(z0,"CODE",{});var llt=s(Hde);rCo=r(llt,"pretrained_model_name_or_path"),llt.forEach(t),tCo=r(z0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ude=n(z0,"CODE",{});var ilt=s(Ude);aCo=r(ilt,"pretrained_model_name_or_path"),ilt.forEach(t),nCo=r(z0,":"),z0.forEach(t),sCo=i(ta),z=n(ta,"UL",{});var Q=s(z);o1=n(Q,"LI",{});var Kye=s(o1);Jde=n(Kye,"STRONG",{});var dlt=s(Jde);lCo=r(dlt,"bart"),dlt.forEach(t),iCo=r(Kye," \u2014 "),Pj=n(Kye,"A",{href:!0});var clt=s(Pj);dCo=r(clt,"BartForCausalLM"),clt.forEach(t),cCo=r(Kye," (BART model)"),Kye.forEach(t),fCo=i(Q),r1=n(Q,"LI",{});var Zye=s(r1);Yde=n(Zye,"STRONG",{});var flt=s(Yde);mCo=r(flt,"bert"),flt.forEach(t),gCo=r(Zye," \u2014 "),Bj=n(Zye,"A",{href:!0});var mlt=s(Bj);hCo=r(mlt,"BertLMHeadModel"),mlt.forEach(t),pCo=r(Zye," (BERT model)"),Zye.forEach(t),_Co=i(Q),t1=n(Q,"LI",{});var eLe=s(t1);Kde=n(eLe,"STRONG",{});var glt=s(Kde);uCo=r(glt,"bert-generation"),glt.forEach(t),bCo=r(eLe," \u2014 "),Ij=n(eLe,"A",{href:!0});var hlt=s(Ij);vCo=r(hlt,"BertGenerationDecoder"),hlt.forEach(t),FCo=r(eLe," (Bert Generation model)"),eLe.forEach(t),TCo=i(Q),a1=n(Q,"LI",{});var oLe=s(a1);Zde=n(oLe,"STRONG",{});var plt=s(Zde);MCo=r(plt,"big_bird"),plt.forEach(t),ECo=r(oLe," \u2014 "),Nj=n(oLe,"A",{href:!0});var _lt=s(Nj);CCo=r(_lt,"BigBirdForCausalLM"),_lt.forEach(t),wCo=r(oLe," (BigBird model)"),oLe.forEach(t),ACo=i(Q),n1=n(Q,"LI",{});var rLe=s(n1);ece=n(rLe,"STRONG",{});var ult=s(ece);yCo=r(ult,"bigbird_pegasus"),ult.forEach(t),LCo=r(rLe," \u2014 "),qj=n(rLe,"A",{href:!0});var blt=s(qj);xCo=r(blt,"BigBirdPegasusForCausalLM"),blt.forEach(t),$Co=r(rLe," (BigBird-Pegasus model)"),rLe.forEach(t),kCo=i(Q),s1=n(Q,"LI",{});var tLe=s(s1);oce=n(tLe,"STRONG",{});var vlt=s(oce);SCo=r(vlt,"blenderbot"),vlt.forEach(t),RCo=r(tLe," \u2014 "),jj=n(tLe,"A",{href:!0});var Flt=s(jj);PCo=r(Flt,"BlenderbotForCausalLM"),Flt.forEach(t),BCo=r(tLe," (Blenderbot model)"),tLe.forEach(t),ICo=i(Q),l1=n(Q,"LI",{});var aLe=s(l1);rce=n(aLe,"STRONG",{});var Tlt=s(rce);NCo=r(Tlt,"blenderbot-small"),Tlt.forEach(t),qCo=r(aLe," \u2014 "),Dj=n(aLe,"A",{href:!0});var Mlt=s(Dj);jCo=r(Mlt,"BlenderbotSmallForCausalLM"),Mlt.forEach(t),DCo=r(aLe," (BlenderbotSmall model)"),aLe.forEach(t),GCo=i(Q),i1=n(Q,"LI",{});var nLe=s(i1);tce=n(nLe,"STRONG",{});var Elt=s(tce);OCo=r(Elt,"camembert"),Elt.forEach(t),VCo=r(nLe," \u2014 "),Gj=n(nLe,"A",{href:!0});var Clt=s(Gj);XCo=r(Clt,"CamembertForCausalLM"),Clt.forEach(t),zCo=r(nLe," (CamemBERT model)"),nLe.forEach(t),WCo=i(Q),d1=n(Q,"LI",{});var sLe=s(d1);ace=n(sLe,"STRONG",{});var wlt=s(ace);QCo=r(wlt,"ctrl"),wlt.forEach(t),HCo=r(sLe," \u2014 "),Oj=n(sLe,"A",{href:!0});var Alt=s(Oj);UCo=r(Alt,"CTRLLMHeadModel"),Alt.forEach(t),JCo=r(sLe," (CTRL model)"),sLe.forEach(t),YCo=i(Q),c1=n(Q,"LI",{});var lLe=s(c1);nce=n(lLe,"STRONG",{});var ylt=s(nce);KCo=r(ylt,"data2vec-text"),ylt.forEach(t),ZCo=r(lLe," \u2014 "),Vj=n(lLe,"A",{href:!0});var Llt=s(Vj);e0o=r(Llt,"Data2VecTextForCausalLM"),Llt.forEach(t),o0o=r(lLe," (Data2VecText model)"),lLe.forEach(t),r0o=i(Q),f1=n(Q,"LI",{});var iLe=s(f1);sce=n(iLe,"STRONG",{});var xlt=s(sce);t0o=r(xlt,"electra"),xlt.forEach(t),a0o=r(iLe," \u2014 "),Xj=n(iLe,"A",{href:!0});var $lt=s(Xj);n0o=r($lt,"ElectraForCausalLM"),$lt.forEach(t),s0o=r(iLe," (ELECTRA model)"),iLe.forEach(t),l0o=i(Q),m1=n(Q,"LI",{});var dLe=s(m1);lce=n(dLe,"STRONG",{});var klt=s(lce);i0o=r(klt,"gpt2"),klt.forEach(t),d0o=r(dLe," \u2014 "),zj=n(dLe,"A",{href:!0});var Slt=s(zj);c0o=r(Slt,"GPT2LMHeadModel"),Slt.forEach(t),f0o=r(dLe," (OpenAI GPT-2 model)"),dLe.forEach(t),m0o=i(Q),g1=n(Q,"LI",{});var cLe=s(g1);ice=n(cLe,"STRONG",{});var Rlt=s(ice);g0o=r(Rlt,"gpt_neo"),Rlt.forEach(t),h0o=r(cLe," \u2014 "),Wj=n(cLe,"A",{href:!0});var Plt=s(Wj);p0o=r(Plt,"GPTNeoForCausalLM"),Plt.forEach(t),_0o=r(cLe," (GPT Neo model)"),cLe.forEach(t),u0o=i(Q),h1=n(Q,"LI",{});var fLe=s(h1);dce=n(fLe,"STRONG",{});var Blt=s(dce);b0o=r(Blt,"gpt_neox"),Blt.forEach(t),v0o=r(fLe," \u2014 "),Qj=n(fLe,"A",{href:!0});var Ilt=s(Qj);F0o=r(Ilt,"GPTNeoXForCausalLM"),Ilt.forEach(t),T0o=r(fLe," (GPT NeoX model)"),fLe.forEach(t),M0o=i(Q),p1=n(Q,"LI",{});var mLe=s(p1);cce=n(mLe,"STRONG",{});var Nlt=s(cce);E0o=r(Nlt,"gptj"),Nlt.forEach(t),C0o=r(mLe," \u2014 "),Hj=n(mLe,"A",{href:!0});var qlt=s(Hj);w0o=r(qlt,"GPTJForCausalLM"),qlt.forEach(t),A0o=r(mLe," (GPT-J model)"),mLe.forEach(t),y0o=i(Q),_1=n(Q,"LI",{});var gLe=s(_1);fce=n(gLe,"STRONG",{});var jlt=s(fce);L0o=r(jlt,"marian"),jlt.forEach(t),x0o=r(gLe," \u2014 "),Uj=n(gLe,"A",{href:!0});var Dlt=s(Uj);$0o=r(Dlt,"MarianForCausalLM"),Dlt.forEach(t),k0o=r(gLe," (Marian model)"),gLe.forEach(t),S0o=i(Q),u1=n(Q,"LI",{});var hLe=s(u1);mce=n(hLe,"STRONG",{});var Glt=s(mce);R0o=r(Glt,"mbart"),Glt.forEach(t),P0o=r(hLe," \u2014 "),Jj=n(hLe,"A",{href:!0});var Olt=s(Jj);B0o=r(Olt,"MBartForCausalLM"),Olt.forEach(t),I0o=r(hLe," (mBART model)"),hLe.forEach(t),N0o=i(Q),b1=n(Q,"LI",{});var pLe=s(b1);gce=n(pLe,"STRONG",{});var Vlt=s(gce);q0o=r(Vlt,"megatron-bert"),Vlt.forEach(t),j0o=r(pLe," \u2014 "),Yj=n(pLe,"A",{href:!0});var Xlt=s(Yj);D0o=r(Xlt,"MegatronBertForCausalLM"),Xlt.forEach(t),G0o=r(pLe," (Megatron-BERT model)"),pLe.forEach(t),O0o=i(Q),v1=n(Q,"LI",{});var _Le=s(v1);hce=n(_Le,"STRONG",{});var zlt=s(hce);V0o=r(zlt,"openai-gpt"),zlt.forEach(t),X0o=r(_Le," \u2014 "),Kj=n(_Le,"A",{href:!0});var Wlt=s(Kj);z0o=r(Wlt,"OpenAIGPTLMHeadModel"),Wlt.forEach(t),W0o=r(_Le," (OpenAI GPT model)"),_Le.forEach(t),Q0o=i(Q),F1=n(Q,"LI",{});var uLe=s(F1);pce=n(uLe,"STRONG",{});var Qlt=s(pce);H0o=r(Qlt,"opt"),Qlt.forEach(t),U0o=r(uLe," \u2014 "),Zj=n(uLe,"A",{href:!0});var Hlt=s(Zj);J0o=r(Hlt,"OPTForCausalLM"),Hlt.forEach(t),Y0o=r(uLe," (OPT model)"),uLe.forEach(t),K0o=i(Q),T1=n(Q,"LI",{});var bLe=s(T1);_ce=n(bLe,"STRONG",{});var Ult=s(_ce);Z0o=r(Ult,"pegasus"),Ult.forEach(t),ewo=r(bLe," \u2014 "),eD=n(bLe,"A",{href:!0});var Jlt=s(eD);owo=r(Jlt,"PegasusForCausalLM"),Jlt.forEach(t),rwo=r(bLe," (Pegasus model)"),bLe.forEach(t),two=i(Q),M1=n(Q,"LI",{});var vLe=s(M1);uce=n(vLe,"STRONG",{});var Ylt=s(uce);awo=r(Ylt,"plbart"),Ylt.forEach(t),nwo=r(vLe," \u2014 "),oD=n(vLe,"A",{href:!0});var Klt=s(oD);swo=r(Klt,"PLBartForCausalLM"),Klt.forEach(t),lwo=r(vLe," (PLBart model)"),vLe.forEach(t),iwo=i(Q),E1=n(Q,"LI",{});var FLe=s(E1);bce=n(FLe,"STRONG",{});var Zlt=s(bce);dwo=r(Zlt,"prophetnet"),Zlt.forEach(t),cwo=r(FLe," \u2014 "),rD=n(FLe,"A",{href:!0});var eit=s(rD);fwo=r(eit,"ProphetNetForCausalLM"),eit.forEach(t),mwo=r(FLe," (ProphetNet model)"),FLe.forEach(t),gwo=i(Q),C1=n(Q,"LI",{});var TLe=s(C1);vce=n(TLe,"STRONG",{});var oit=s(vce);hwo=r(oit,"qdqbert"),oit.forEach(t),pwo=r(TLe," \u2014 "),tD=n(TLe,"A",{href:!0});var rit=s(tD);_wo=r(rit,"QDQBertLMHeadModel"),rit.forEach(t),uwo=r(TLe," (QDQBert model)"),TLe.forEach(t),bwo=i(Q),w1=n(Q,"LI",{});var MLe=s(w1);Fce=n(MLe,"STRONG",{});var tit=s(Fce);vwo=r(tit,"reformer"),tit.forEach(t),Fwo=r(MLe," \u2014 "),aD=n(MLe,"A",{href:!0});var ait=s(aD);Two=r(ait,"ReformerModelWithLMHead"),ait.forEach(t),Mwo=r(MLe," (Reformer model)"),MLe.forEach(t),Ewo=i(Q),A1=n(Q,"LI",{});var ELe=s(A1);Tce=n(ELe,"STRONG",{});var nit=s(Tce);Cwo=r(nit,"rembert"),nit.forEach(t),wwo=r(ELe," \u2014 "),nD=n(ELe,"A",{href:!0});var sit=s(nD);Awo=r(sit,"RemBertForCausalLM"),sit.forEach(t),ywo=r(ELe," (RemBERT model)"),ELe.forEach(t),Lwo=i(Q),y1=n(Q,"LI",{});var CLe=s(y1);Mce=n(CLe,"STRONG",{});var lit=s(Mce);xwo=r(lit,"roberta"),lit.forEach(t),$wo=r(CLe," \u2014 "),sD=n(CLe,"A",{href:!0});var iit=s(sD);kwo=r(iit,"RobertaForCausalLM"),iit.forEach(t),Swo=r(CLe," (RoBERTa model)"),CLe.forEach(t),Rwo=i(Q),L1=n(Q,"LI",{});var wLe=s(L1);Ece=n(wLe,"STRONG",{});var dit=s(Ece);Pwo=r(dit,"roformer"),dit.forEach(t),Bwo=r(wLe," \u2014 "),lD=n(wLe,"A",{href:!0});var cit=s(lD);Iwo=r(cit,"RoFormerForCausalLM"),cit.forEach(t),Nwo=r(wLe," (RoFormer model)"),wLe.forEach(t),qwo=i(Q),x1=n(Q,"LI",{});var ALe=s(x1);Cce=n(ALe,"STRONG",{});var fit=s(Cce);jwo=r(fit,"speech_to_text_2"),fit.forEach(t),Dwo=r(ALe," \u2014 "),iD=n(ALe,"A",{href:!0});var mit=s(iD);Gwo=r(mit,"Speech2Text2ForCausalLM"),mit.forEach(t),Owo=r(ALe," (Speech2Text2 model)"),ALe.forEach(t),Vwo=i(Q),$1=n(Q,"LI",{});var yLe=s($1);wce=n(yLe,"STRONG",{});var git=s(wce);Xwo=r(git,"transfo-xl"),git.forEach(t),zwo=r(yLe," \u2014 "),dD=n(yLe,"A",{href:!0});var hit=s(dD);Wwo=r(hit,"TransfoXLLMHeadModel"),hit.forEach(t),Qwo=r(yLe," (Transformer-XL model)"),yLe.forEach(t),Hwo=i(Q),k1=n(Q,"LI",{});var LLe=s(k1);Ace=n(LLe,"STRONG",{});var pit=s(Ace);Uwo=r(pit,"trocr"),pit.forEach(t),Jwo=r(LLe," \u2014 "),cD=n(LLe,"A",{href:!0});var _it=s(cD);Ywo=r(_it,"TrOCRForCausalLM"),_it.forEach(t),Kwo=r(LLe," (TrOCR model)"),LLe.forEach(t),Zwo=i(Q),S1=n(Q,"LI",{});var xLe=s(S1);yce=n(xLe,"STRONG",{});var uit=s(yce);eAo=r(uit,"xglm"),uit.forEach(t),oAo=r(xLe," \u2014 "),fD=n(xLe,"A",{href:!0});var bit=s(fD);rAo=r(bit,"XGLMForCausalLM"),bit.forEach(t),tAo=r(xLe," (XGLM model)"),xLe.forEach(t),aAo=i(Q),R1=n(Q,"LI",{});var $Le=s(R1);Lce=n($Le,"STRONG",{});var vit=s(Lce);nAo=r(vit,"xlm"),vit.forEach(t),sAo=r($Le," \u2014 "),mD=n($Le,"A",{href:!0});var Fit=s(mD);lAo=r(Fit,"XLMWithLMHeadModel"),Fit.forEach(t),iAo=r($Le," (XLM model)"),$Le.forEach(t),dAo=i(Q),P1=n(Q,"LI",{});var kLe=s(P1);xce=n(kLe,"STRONG",{});var Tit=s(xce);cAo=r(Tit,"xlm-prophetnet"),Tit.forEach(t),fAo=r(kLe," \u2014 "),gD=n(kLe,"A",{href:!0});var Mit=s(gD);mAo=r(Mit,"XLMProphetNetForCausalLM"),Mit.forEach(t),gAo=r(kLe," (XLM-ProphetNet model)"),kLe.forEach(t),hAo=i(Q),B1=n(Q,"LI",{});var SLe=s(B1);$ce=n(SLe,"STRONG",{});var Eit=s($ce);pAo=r(Eit,"xlm-roberta"),Eit.forEach(t),_Ao=r(SLe," \u2014 "),hD=n(SLe,"A",{href:!0});var Cit=s(hD);uAo=r(Cit,"XLMRobertaForCausalLM"),Cit.forEach(t),bAo=r(SLe," (XLM-RoBERTa model)"),SLe.forEach(t),vAo=i(Q),I1=n(Q,"LI",{});var RLe=s(I1);kce=n(RLe,"STRONG",{});var wit=s(kce);FAo=r(wit,"xlm-roberta-xl"),wit.forEach(t),TAo=r(RLe," \u2014 "),pD=n(RLe,"A",{href:!0});var Ait=s(pD);MAo=r(Ait,"XLMRobertaXLForCausalLM"),Ait.forEach(t),EAo=r(RLe," (XLM-RoBERTa-XL model)"),RLe.forEach(t),CAo=i(Q),N1=n(Q,"LI",{});var PLe=s(N1);Sce=n(PLe,"STRONG",{});var yit=s(Sce);wAo=r(yit,"xlnet"),yit.forEach(t),AAo=r(PLe," \u2014 "),_D=n(PLe,"A",{href:!0});var Lit=s(_D);yAo=r(Lit,"XLNetLMHeadModel"),Lit.forEach(t),LAo=r(PLe," (XLNet model)"),PLe.forEach(t),Q.forEach(t),xAo=i(ta),q1=n(ta,"P",{});var BLe=s(q1);$Ao=r(BLe,"The model is set in evaluation mode by default using "),Rce=n(BLe,"CODE",{});var xit=s(Rce);kAo=r(xit,"model.eval()"),xit.forEach(t),SAo=r(BLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pce=n(BLe,"CODE",{});var $it=s(Pce);RAo=r($it,"model.train()"),$it.forEach(t),BLe.forEach(t),PAo=i(ta),T(j1.$$.fragment,ta),ta.forEach(t),Xs.forEach(t),eje=i(f),Bi=n(f,"H2",{class:!0});var aGe=s(Bi);D1=n(aGe,"A",{id:!0,class:!0,href:!0});var kit=s(D1);Bce=n(kit,"SPAN",{});var Sit=s(Bce);T(E6.$$.fragment,Sit),Sit.forEach(t),kit.forEach(t),BAo=i(aGe),Ice=n(aGe,"SPAN",{});var Rit=s(Ice);IAo=r(Rit,"AutoModelForMaskedLM"),Rit.forEach(t),aGe.forEach(t),oje=i(f),ko=n(f,"DIV",{class:!0});var zs=s(ko);T(C6.$$.fragment,zs),NAo=i(zs),Ii=n(zs,"P",{});var GZ=s(Ii);qAo=r(GZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),uD=n(GZ,"A",{href:!0});var Pit=s(uD);jAo=r(Pit,"from_pretrained()"),Pit.forEach(t),DAo=r(GZ," class method or the "),bD=n(GZ,"A",{href:!0});var Bit=s(bD);GAo=r(Bit,"from_config()"),Bit.forEach(t),OAo=r(GZ,` class
method.`),GZ.forEach(t),VAo=i(zs),w6=n(zs,"P",{});var nGe=s(w6);XAo=r(nGe,"This class cannot be instantiated directly using "),Nce=n(nGe,"CODE",{});var Iit=s(Nce);zAo=r(Iit,"__init__()"),Iit.forEach(t),WAo=r(nGe," (throws an error)."),nGe.forEach(t),QAo=i(zs),st=n(zs,"DIV",{class:!0});var W0=s(st);T(A6.$$.fragment,W0),HAo=i(W0),qce=n(W0,"P",{});var Nit=s(qce);UAo=r(Nit,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Nit.forEach(t),JAo=i(W0),Ni=n(W0,"P",{});var OZ=s(Ni);YAo=r(OZ,`Note:
Loading a model from its configuration file does `),jce=n(OZ,"STRONG",{});var qit=s(jce);KAo=r(qit,"not"),qit.forEach(t),ZAo=r(OZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),vD=n(OZ,"A",{href:!0});var jit=s(vD);e6o=r(jit,"from_pretrained()"),jit.forEach(t),o6o=r(OZ," to load the model weights."),OZ.forEach(t),r6o=i(W0),T(G1.$$.fragment,W0),W0.forEach(t),t6o=i(zs),Ze=n(zs,"DIV",{class:!0});var aa=s(Ze);T(y6.$$.fragment,aa),a6o=i(aa),Dce=n(aa,"P",{});var Dit=s(Dce);n6o=r(Dit,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Dit.forEach(t),s6o=i(aa),ka=n(aa,"P",{});var Q0=s(ka);l6o=r(Q0,"The model class to instantiate is selected based on the "),Gce=n(Q0,"CODE",{});var Git=s(Gce);i6o=r(Git,"model_type"),Git.forEach(t),d6o=r(Q0,` property of the config object (either
passed as an argument or loaded from `),Oce=n(Q0,"CODE",{});var Oit=s(Oce);c6o=r(Oit,"pretrained_model_name_or_path"),Oit.forEach(t),f6o=r(Q0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vce=n(Q0,"CODE",{});var Vit=s(Vce);m6o=r(Vit,"pretrained_model_name_or_path"),Vit.forEach(t),g6o=r(Q0,":"),Q0.forEach(t),h6o=i(aa),W=n(aa,"UL",{});var H=s(W);O1=n(H,"LI",{});var ILe=s(O1);Xce=n(ILe,"STRONG",{});var Xit=s(Xce);p6o=r(Xit,"albert"),Xit.forEach(t),_6o=r(ILe," \u2014 "),FD=n(ILe,"A",{href:!0});var zit=s(FD);u6o=r(zit,"AlbertForMaskedLM"),zit.forEach(t),b6o=r(ILe," (ALBERT model)"),ILe.forEach(t),v6o=i(H),V1=n(H,"LI",{});var NLe=s(V1);zce=n(NLe,"STRONG",{});var Wit=s(zce);F6o=r(Wit,"bart"),Wit.forEach(t),T6o=r(NLe," \u2014 "),TD=n(NLe,"A",{href:!0});var Qit=s(TD);M6o=r(Qit,"BartForConditionalGeneration"),Qit.forEach(t),E6o=r(NLe," (BART model)"),NLe.forEach(t),C6o=i(H),X1=n(H,"LI",{});var qLe=s(X1);Wce=n(qLe,"STRONG",{});var Hit=s(Wce);w6o=r(Hit,"bert"),Hit.forEach(t),A6o=r(qLe," \u2014 "),MD=n(qLe,"A",{href:!0});var Uit=s(MD);y6o=r(Uit,"BertForMaskedLM"),Uit.forEach(t),L6o=r(qLe," (BERT model)"),qLe.forEach(t),x6o=i(H),z1=n(H,"LI",{});var jLe=s(z1);Qce=n(jLe,"STRONG",{});var Jit=s(Qce);$6o=r(Jit,"big_bird"),Jit.forEach(t),k6o=r(jLe," \u2014 "),ED=n(jLe,"A",{href:!0});var Yit=s(ED);S6o=r(Yit,"BigBirdForMaskedLM"),Yit.forEach(t),R6o=r(jLe," (BigBird model)"),jLe.forEach(t),P6o=i(H),W1=n(H,"LI",{});var DLe=s(W1);Hce=n(DLe,"STRONG",{});var Kit=s(Hce);B6o=r(Kit,"camembert"),Kit.forEach(t),I6o=r(DLe," \u2014 "),CD=n(DLe,"A",{href:!0});var Zit=s(CD);N6o=r(Zit,"CamembertForMaskedLM"),Zit.forEach(t),q6o=r(DLe," (CamemBERT model)"),DLe.forEach(t),j6o=i(H),Q1=n(H,"LI",{});var GLe=s(Q1);Uce=n(GLe,"STRONG",{});var edt=s(Uce);D6o=r(edt,"convbert"),edt.forEach(t),G6o=r(GLe," \u2014 "),wD=n(GLe,"A",{href:!0});var odt=s(wD);O6o=r(odt,"ConvBertForMaskedLM"),odt.forEach(t),V6o=r(GLe," (ConvBERT model)"),GLe.forEach(t),X6o=i(H),H1=n(H,"LI",{});var OLe=s(H1);Jce=n(OLe,"STRONG",{});var rdt=s(Jce);z6o=r(rdt,"data2vec-text"),rdt.forEach(t),W6o=r(OLe," \u2014 "),AD=n(OLe,"A",{href:!0});var tdt=s(AD);Q6o=r(tdt,"Data2VecTextForMaskedLM"),tdt.forEach(t),H6o=r(OLe," (Data2VecText model)"),OLe.forEach(t),U6o=i(H),U1=n(H,"LI",{});var VLe=s(U1);Yce=n(VLe,"STRONG",{});var adt=s(Yce);J6o=r(adt,"deberta"),adt.forEach(t),Y6o=r(VLe," \u2014 "),yD=n(VLe,"A",{href:!0});var ndt=s(yD);K6o=r(ndt,"DebertaForMaskedLM"),ndt.forEach(t),Z6o=r(VLe," (DeBERTa model)"),VLe.forEach(t),eyo=i(H),J1=n(H,"LI",{});var XLe=s(J1);Kce=n(XLe,"STRONG",{});var sdt=s(Kce);oyo=r(sdt,"deberta-v2"),sdt.forEach(t),ryo=r(XLe," \u2014 "),LD=n(XLe,"A",{href:!0});var ldt=s(LD);tyo=r(ldt,"DebertaV2ForMaskedLM"),ldt.forEach(t),ayo=r(XLe," (DeBERTa-v2 model)"),XLe.forEach(t),nyo=i(H),Y1=n(H,"LI",{});var zLe=s(Y1);Zce=n(zLe,"STRONG",{});var idt=s(Zce);syo=r(idt,"distilbert"),idt.forEach(t),lyo=r(zLe," \u2014 "),xD=n(zLe,"A",{href:!0});var ddt=s(xD);iyo=r(ddt,"DistilBertForMaskedLM"),ddt.forEach(t),dyo=r(zLe," (DistilBERT model)"),zLe.forEach(t),cyo=i(H),K1=n(H,"LI",{});var WLe=s(K1);efe=n(WLe,"STRONG",{});var cdt=s(efe);fyo=r(cdt,"electra"),cdt.forEach(t),myo=r(WLe," \u2014 "),$D=n(WLe,"A",{href:!0});var fdt=s($D);gyo=r(fdt,"ElectraForMaskedLM"),fdt.forEach(t),hyo=r(WLe," (ELECTRA model)"),WLe.forEach(t),pyo=i(H),Z1=n(H,"LI",{});var QLe=s(Z1);ofe=n(QLe,"STRONG",{});var mdt=s(ofe);_yo=r(mdt,"flaubert"),mdt.forEach(t),uyo=r(QLe," \u2014 "),kD=n(QLe,"A",{href:!0});var gdt=s(kD);byo=r(gdt,"FlaubertWithLMHeadModel"),gdt.forEach(t),vyo=r(QLe," (FlauBERT model)"),QLe.forEach(t),Fyo=i(H),eb=n(H,"LI",{});var HLe=s(eb);rfe=n(HLe,"STRONG",{});var hdt=s(rfe);Tyo=r(hdt,"fnet"),hdt.forEach(t),Myo=r(HLe," \u2014 "),SD=n(HLe,"A",{href:!0});var pdt=s(SD);Eyo=r(pdt,"FNetForMaskedLM"),pdt.forEach(t),Cyo=r(HLe," (FNet model)"),HLe.forEach(t),wyo=i(H),ob=n(H,"LI",{});var ULe=s(ob);tfe=n(ULe,"STRONG",{});var _dt=s(tfe);Ayo=r(_dt,"funnel"),_dt.forEach(t),yyo=r(ULe," \u2014 "),RD=n(ULe,"A",{href:!0});var udt=s(RD);Lyo=r(udt,"FunnelForMaskedLM"),udt.forEach(t),xyo=r(ULe," (Funnel Transformer model)"),ULe.forEach(t),$yo=i(H),rb=n(H,"LI",{});var JLe=s(rb);afe=n(JLe,"STRONG",{});var bdt=s(afe);kyo=r(bdt,"ibert"),bdt.forEach(t),Syo=r(JLe," \u2014 "),PD=n(JLe,"A",{href:!0});var vdt=s(PD);Ryo=r(vdt,"IBertForMaskedLM"),vdt.forEach(t),Pyo=r(JLe," (I-BERT model)"),JLe.forEach(t),Byo=i(H),tb=n(H,"LI",{});var YLe=s(tb);nfe=n(YLe,"STRONG",{});var Fdt=s(nfe);Iyo=r(Fdt,"layoutlm"),Fdt.forEach(t),Nyo=r(YLe," \u2014 "),BD=n(YLe,"A",{href:!0});var Tdt=s(BD);qyo=r(Tdt,"LayoutLMForMaskedLM"),Tdt.forEach(t),jyo=r(YLe," (LayoutLM model)"),YLe.forEach(t),Dyo=i(H),ab=n(H,"LI",{});var KLe=s(ab);sfe=n(KLe,"STRONG",{});var Mdt=s(sfe);Gyo=r(Mdt,"longformer"),Mdt.forEach(t),Oyo=r(KLe," \u2014 "),ID=n(KLe,"A",{href:!0});var Edt=s(ID);Vyo=r(Edt,"LongformerForMaskedLM"),Edt.forEach(t),Xyo=r(KLe," (Longformer model)"),KLe.forEach(t),zyo=i(H),nb=n(H,"LI",{});var ZLe=s(nb);lfe=n(ZLe,"STRONG",{});var Cdt=s(lfe);Wyo=r(Cdt,"luke"),Cdt.forEach(t),Qyo=r(ZLe," \u2014 "),ND=n(ZLe,"A",{href:!0});var wdt=s(ND);Hyo=r(wdt,"LukeForMaskedLM"),wdt.forEach(t),Uyo=r(ZLe," (LUKE model)"),ZLe.forEach(t),Jyo=i(H),sb=n(H,"LI",{});var e8e=s(sb);ife=n(e8e,"STRONG",{});var Adt=s(ife);Yyo=r(Adt,"mbart"),Adt.forEach(t),Kyo=r(e8e," \u2014 "),qD=n(e8e,"A",{href:!0});var ydt=s(qD);Zyo=r(ydt,"MBartForConditionalGeneration"),ydt.forEach(t),eLo=r(e8e," (mBART model)"),e8e.forEach(t),oLo=i(H),lb=n(H,"LI",{});var o8e=s(lb);dfe=n(o8e,"STRONG",{});var Ldt=s(dfe);rLo=r(Ldt,"megatron-bert"),Ldt.forEach(t),tLo=r(o8e," \u2014 "),jD=n(o8e,"A",{href:!0});var xdt=s(jD);aLo=r(xdt,"MegatronBertForMaskedLM"),xdt.forEach(t),nLo=r(o8e," (Megatron-BERT model)"),o8e.forEach(t),sLo=i(H),ib=n(H,"LI",{});var r8e=s(ib);cfe=n(r8e,"STRONG",{});var $dt=s(cfe);lLo=r($dt,"mobilebert"),$dt.forEach(t),iLo=r(r8e," \u2014 "),DD=n(r8e,"A",{href:!0});var kdt=s(DD);dLo=r(kdt,"MobileBertForMaskedLM"),kdt.forEach(t),cLo=r(r8e," (MobileBERT model)"),r8e.forEach(t),fLo=i(H),db=n(H,"LI",{});var t8e=s(db);ffe=n(t8e,"STRONG",{});var Sdt=s(ffe);mLo=r(Sdt,"mpnet"),Sdt.forEach(t),gLo=r(t8e," \u2014 "),GD=n(t8e,"A",{href:!0});var Rdt=s(GD);hLo=r(Rdt,"MPNetForMaskedLM"),Rdt.forEach(t),pLo=r(t8e," (MPNet model)"),t8e.forEach(t),_Lo=i(H),cb=n(H,"LI",{});var a8e=s(cb);mfe=n(a8e,"STRONG",{});var Pdt=s(mfe);uLo=r(Pdt,"nystromformer"),Pdt.forEach(t),bLo=r(a8e," \u2014 "),OD=n(a8e,"A",{href:!0});var Bdt=s(OD);vLo=r(Bdt,"NystromformerForMaskedLM"),Bdt.forEach(t),FLo=r(a8e," (Nystr\xF6mformer model)"),a8e.forEach(t),TLo=i(H),fb=n(H,"LI",{});var n8e=s(fb);gfe=n(n8e,"STRONG",{});var Idt=s(gfe);MLo=r(Idt,"perceiver"),Idt.forEach(t),ELo=r(n8e," \u2014 "),VD=n(n8e,"A",{href:!0});var Ndt=s(VD);CLo=r(Ndt,"PerceiverForMaskedLM"),Ndt.forEach(t),wLo=r(n8e," (Perceiver model)"),n8e.forEach(t),ALo=i(H),mb=n(H,"LI",{});var s8e=s(mb);hfe=n(s8e,"STRONG",{});var qdt=s(hfe);yLo=r(qdt,"qdqbert"),qdt.forEach(t),LLo=r(s8e," \u2014 "),XD=n(s8e,"A",{href:!0});var jdt=s(XD);xLo=r(jdt,"QDQBertForMaskedLM"),jdt.forEach(t),$Lo=r(s8e," (QDQBert model)"),s8e.forEach(t),kLo=i(H),gb=n(H,"LI",{});var l8e=s(gb);pfe=n(l8e,"STRONG",{});var Ddt=s(pfe);SLo=r(Ddt,"reformer"),Ddt.forEach(t),RLo=r(l8e," \u2014 "),zD=n(l8e,"A",{href:!0});var Gdt=s(zD);PLo=r(Gdt,"ReformerForMaskedLM"),Gdt.forEach(t),BLo=r(l8e," (Reformer model)"),l8e.forEach(t),ILo=i(H),hb=n(H,"LI",{});var i8e=s(hb);_fe=n(i8e,"STRONG",{});var Odt=s(_fe);NLo=r(Odt,"rembert"),Odt.forEach(t),qLo=r(i8e," \u2014 "),WD=n(i8e,"A",{href:!0});var Vdt=s(WD);jLo=r(Vdt,"RemBertForMaskedLM"),Vdt.forEach(t),DLo=r(i8e," (RemBERT model)"),i8e.forEach(t),GLo=i(H),pb=n(H,"LI",{});var d8e=s(pb);ufe=n(d8e,"STRONG",{});var Xdt=s(ufe);OLo=r(Xdt,"roberta"),Xdt.forEach(t),VLo=r(d8e," \u2014 "),QD=n(d8e,"A",{href:!0});var zdt=s(QD);XLo=r(zdt,"RobertaForMaskedLM"),zdt.forEach(t),zLo=r(d8e," (RoBERTa model)"),d8e.forEach(t),WLo=i(H),_b=n(H,"LI",{});var c8e=s(_b);bfe=n(c8e,"STRONG",{});var Wdt=s(bfe);QLo=r(Wdt,"roformer"),Wdt.forEach(t),HLo=r(c8e," \u2014 "),HD=n(c8e,"A",{href:!0});var Qdt=s(HD);ULo=r(Qdt,"RoFormerForMaskedLM"),Qdt.forEach(t),JLo=r(c8e," (RoFormer model)"),c8e.forEach(t),YLo=i(H),ub=n(H,"LI",{});var f8e=s(ub);vfe=n(f8e,"STRONG",{});var Hdt=s(vfe);KLo=r(Hdt,"squeezebert"),Hdt.forEach(t),ZLo=r(f8e," \u2014 "),UD=n(f8e,"A",{href:!0});var Udt=s(UD);e8o=r(Udt,"SqueezeBertForMaskedLM"),Udt.forEach(t),o8o=r(f8e," (SqueezeBERT model)"),f8e.forEach(t),r8o=i(H),bb=n(H,"LI",{});var m8e=s(bb);Ffe=n(m8e,"STRONG",{});var Jdt=s(Ffe);t8o=r(Jdt,"tapas"),Jdt.forEach(t),a8o=r(m8e," \u2014 "),JD=n(m8e,"A",{href:!0});var Ydt=s(JD);n8o=r(Ydt,"TapasForMaskedLM"),Ydt.forEach(t),s8o=r(m8e," (TAPAS model)"),m8e.forEach(t),l8o=i(H),vb=n(H,"LI",{});var g8e=s(vb);Tfe=n(g8e,"STRONG",{});var Kdt=s(Tfe);i8o=r(Kdt,"wav2vec2"),Kdt.forEach(t),d8o=r(g8e," \u2014 "),Mfe=n(g8e,"CODE",{});var Zdt=s(Mfe);c8o=r(Zdt,"Wav2Vec2ForMaskedLM"),Zdt.forEach(t),f8o=r(g8e," (Wav2Vec2 model)"),g8e.forEach(t),m8o=i(H),Fb=n(H,"LI",{});var h8e=s(Fb);Efe=n(h8e,"STRONG",{});var ect=s(Efe);g8o=r(ect,"xlm"),ect.forEach(t),h8o=r(h8e," \u2014 "),YD=n(h8e,"A",{href:!0});var oct=s(YD);p8o=r(oct,"XLMWithLMHeadModel"),oct.forEach(t),_8o=r(h8e," (XLM model)"),h8e.forEach(t),u8o=i(H),Tb=n(H,"LI",{});var p8e=s(Tb);Cfe=n(p8e,"STRONG",{});var rct=s(Cfe);b8o=r(rct,"xlm-roberta"),rct.forEach(t),v8o=r(p8e," \u2014 "),KD=n(p8e,"A",{href:!0});var tct=s(KD);F8o=r(tct,"XLMRobertaForMaskedLM"),tct.forEach(t),T8o=r(p8e," (XLM-RoBERTa model)"),p8e.forEach(t),M8o=i(H),Mb=n(H,"LI",{});var _8e=s(Mb);wfe=n(_8e,"STRONG",{});var act=s(wfe);E8o=r(act,"xlm-roberta-xl"),act.forEach(t),C8o=r(_8e," \u2014 "),ZD=n(_8e,"A",{href:!0});var nct=s(ZD);w8o=r(nct,"XLMRobertaXLForMaskedLM"),nct.forEach(t),A8o=r(_8e," (XLM-RoBERTa-XL model)"),_8e.forEach(t),y8o=i(H),Eb=n(H,"LI",{});var u8e=s(Eb);Afe=n(u8e,"STRONG",{});var sct=s(Afe);L8o=r(sct,"yoso"),sct.forEach(t),x8o=r(u8e," \u2014 "),eG=n(u8e,"A",{href:!0});var lct=s(eG);$8o=r(lct,"YosoForMaskedLM"),lct.forEach(t),k8o=r(u8e," (YOSO model)"),u8e.forEach(t),H.forEach(t),S8o=i(aa),Cb=n(aa,"P",{});var b8e=s(Cb);R8o=r(b8e,"The model is set in evaluation mode by default using "),yfe=n(b8e,"CODE",{});var ict=s(yfe);P8o=r(ict,"model.eval()"),ict.forEach(t),B8o=r(b8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lfe=n(b8e,"CODE",{});var dct=s(Lfe);I8o=r(dct,"model.train()"),dct.forEach(t),b8e.forEach(t),N8o=i(aa),T(wb.$$.fragment,aa),aa.forEach(t),zs.forEach(t),rje=i(f),qi=n(f,"H2",{class:!0});var sGe=s(qi);Ab=n(sGe,"A",{id:!0,class:!0,href:!0});var cct=s(Ab);xfe=n(cct,"SPAN",{});var fct=s(xfe);T(L6.$$.fragment,fct),fct.forEach(t),cct.forEach(t),q8o=i(sGe),$fe=n(sGe,"SPAN",{});var mct=s($fe);j8o=r(mct,"AutoModelForSeq2SeqLM"),mct.forEach(t),sGe.forEach(t),tje=i(f),So=n(f,"DIV",{class:!0});var Ws=s(So);T(x6.$$.fragment,Ws),D8o=i(Ws),ji=n(Ws,"P",{});var VZ=s(ji);G8o=r(VZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),oG=n(VZ,"A",{href:!0});var gct=s(oG);O8o=r(gct,"from_pretrained()"),gct.forEach(t),V8o=r(VZ," class method or the "),rG=n(VZ,"A",{href:!0});var hct=s(rG);X8o=r(hct,"from_config()"),hct.forEach(t),z8o=r(VZ,` class
method.`),VZ.forEach(t),W8o=i(Ws),$6=n(Ws,"P",{});var lGe=s($6);Q8o=r(lGe,"This class cannot be instantiated directly using "),kfe=n(lGe,"CODE",{});var pct=s(kfe);H8o=r(pct,"__init__()"),pct.forEach(t),U8o=r(lGe," (throws an error)."),lGe.forEach(t),J8o=i(Ws),lt=n(Ws,"DIV",{class:!0});var H0=s(lt);T(k6.$$.fragment,H0),Y8o=i(H0),Sfe=n(H0,"P",{});var _ct=s(Sfe);K8o=r(_ct,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),_ct.forEach(t),Z8o=i(H0),Di=n(H0,"P",{});var XZ=s(Di);exo=r(XZ,`Note:
Loading a model from its configuration file does `),Rfe=n(XZ,"STRONG",{});var uct=s(Rfe);oxo=r(uct,"not"),uct.forEach(t),rxo=r(XZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),tG=n(XZ,"A",{href:!0});var bct=s(tG);txo=r(bct,"from_pretrained()"),bct.forEach(t),axo=r(XZ," to load the model weights."),XZ.forEach(t),nxo=i(H0),T(yb.$$.fragment,H0),H0.forEach(t),sxo=i(Ws),eo=n(Ws,"DIV",{class:!0});var na=s(eo);T(S6.$$.fragment,na),lxo=i(na),Pfe=n(na,"P",{});var vct=s(Pfe);ixo=r(vct,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),vct.forEach(t),dxo=i(na),Sa=n(na,"P",{});var U0=s(Sa);cxo=r(U0,"The model class to instantiate is selected based on the "),Bfe=n(U0,"CODE",{});var Fct=s(Bfe);fxo=r(Fct,"model_type"),Fct.forEach(t),mxo=r(U0,` property of the config object (either
passed as an argument or loaded from `),Ife=n(U0,"CODE",{});var Tct=s(Ife);gxo=r(Tct,"pretrained_model_name_or_path"),Tct.forEach(t),hxo=r(U0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nfe=n(U0,"CODE",{});var Mct=s(Nfe);pxo=r(Mct,"pretrained_model_name_or_path"),Mct.forEach(t),_xo=r(U0,":"),U0.forEach(t),uxo=i(na),_e=n(na,"UL",{});var Fe=s(_e);Lb=n(Fe,"LI",{});var v8e=s(Lb);qfe=n(v8e,"STRONG",{});var Ect=s(qfe);bxo=r(Ect,"bart"),Ect.forEach(t),vxo=r(v8e," \u2014 "),aG=n(v8e,"A",{href:!0});var Cct=s(aG);Fxo=r(Cct,"BartForConditionalGeneration"),Cct.forEach(t),Txo=r(v8e," (BART model)"),v8e.forEach(t),Mxo=i(Fe),xb=n(Fe,"LI",{});var F8e=s(xb);jfe=n(F8e,"STRONG",{});var wct=s(jfe);Exo=r(wct,"bigbird_pegasus"),wct.forEach(t),Cxo=r(F8e," \u2014 "),nG=n(F8e,"A",{href:!0});var Act=s(nG);wxo=r(Act,"BigBirdPegasusForConditionalGeneration"),Act.forEach(t),Axo=r(F8e," (BigBird-Pegasus model)"),F8e.forEach(t),yxo=i(Fe),$b=n(Fe,"LI",{});var T8e=s($b);Dfe=n(T8e,"STRONG",{});var yct=s(Dfe);Lxo=r(yct,"blenderbot"),yct.forEach(t),xxo=r(T8e," \u2014 "),sG=n(T8e,"A",{href:!0});var Lct=s(sG);$xo=r(Lct,"BlenderbotForConditionalGeneration"),Lct.forEach(t),kxo=r(T8e," (Blenderbot model)"),T8e.forEach(t),Sxo=i(Fe),kb=n(Fe,"LI",{});var M8e=s(kb);Gfe=n(M8e,"STRONG",{});var xct=s(Gfe);Rxo=r(xct,"blenderbot-small"),xct.forEach(t),Pxo=r(M8e," \u2014 "),lG=n(M8e,"A",{href:!0});var $ct=s(lG);Bxo=r($ct,"BlenderbotSmallForConditionalGeneration"),$ct.forEach(t),Ixo=r(M8e," (BlenderbotSmall model)"),M8e.forEach(t),Nxo=i(Fe),Sb=n(Fe,"LI",{});var E8e=s(Sb);Ofe=n(E8e,"STRONG",{});var kct=s(Ofe);qxo=r(kct,"encoder-decoder"),kct.forEach(t),jxo=r(E8e," \u2014 "),iG=n(E8e,"A",{href:!0});var Sct=s(iG);Dxo=r(Sct,"EncoderDecoderModel"),Sct.forEach(t),Gxo=r(E8e," (Encoder decoder model)"),E8e.forEach(t),Oxo=i(Fe),Rb=n(Fe,"LI",{});var C8e=s(Rb);Vfe=n(C8e,"STRONG",{});var Rct=s(Vfe);Vxo=r(Rct,"fsmt"),Rct.forEach(t),Xxo=r(C8e," \u2014 "),dG=n(C8e,"A",{href:!0});var Pct=s(dG);zxo=r(Pct,"FSMTForConditionalGeneration"),Pct.forEach(t),Wxo=r(C8e," (FairSeq Machine-Translation model)"),C8e.forEach(t),Qxo=i(Fe),Pb=n(Fe,"LI",{});var w8e=s(Pb);Xfe=n(w8e,"STRONG",{});var Bct=s(Xfe);Hxo=r(Bct,"led"),Bct.forEach(t),Uxo=r(w8e," \u2014 "),cG=n(w8e,"A",{href:!0});var Ict=s(cG);Jxo=r(Ict,"LEDForConditionalGeneration"),Ict.forEach(t),Yxo=r(w8e," (LED model)"),w8e.forEach(t),Kxo=i(Fe),Bb=n(Fe,"LI",{});var A8e=s(Bb);zfe=n(A8e,"STRONG",{});var Nct=s(zfe);Zxo=r(Nct,"m2m_100"),Nct.forEach(t),e$o=r(A8e," \u2014 "),fG=n(A8e,"A",{href:!0});var qct=s(fG);o$o=r(qct,"M2M100ForConditionalGeneration"),qct.forEach(t),r$o=r(A8e," (M2M100 model)"),A8e.forEach(t),t$o=i(Fe),Ib=n(Fe,"LI",{});var y8e=s(Ib);Wfe=n(y8e,"STRONG",{});var jct=s(Wfe);a$o=r(jct,"marian"),jct.forEach(t),n$o=r(y8e," \u2014 "),mG=n(y8e,"A",{href:!0});var Dct=s(mG);s$o=r(Dct,"MarianMTModel"),Dct.forEach(t),l$o=r(y8e," (Marian model)"),y8e.forEach(t),i$o=i(Fe),Nb=n(Fe,"LI",{});var L8e=s(Nb);Qfe=n(L8e,"STRONG",{});var Gct=s(Qfe);d$o=r(Gct,"mbart"),Gct.forEach(t),c$o=r(L8e," \u2014 "),gG=n(L8e,"A",{href:!0});var Oct=s(gG);f$o=r(Oct,"MBartForConditionalGeneration"),Oct.forEach(t),m$o=r(L8e," (mBART model)"),L8e.forEach(t),g$o=i(Fe),qb=n(Fe,"LI",{});var x8e=s(qb);Hfe=n(x8e,"STRONG",{});var Vct=s(Hfe);h$o=r(Vct,"mt5"),Vct.forEach(t),p$o=r(x8e," \u2014 "),hG=n(x8e,"A",{href:!0});var Xct=s(hG);_$o=r(Xct,"MT5ForConditionalGeneration"),Xct.forEach(t),u$o=r(x8e," (MT5 model)"),x8e.forEach(t),b$o=i(Fe),jb=n(Fe,"LI",{});var $8e=s(jb);Ufe=n($8e,"STRONG",{});var zct=s(Ufe);v$o=r(zct,"pegasus"),zct.forEach(t),F$o=r($8e," \u2014 "),pG=n($8e,"A",{href:!0});var Wct=s(pG);T$o=r(Wct,"PegasusForConditionalGeneration"),Wct.forEach(t),M$o=r($8e," (Pegasus model)"),$8e.forEach(t),E$o=i(Fe),Db=n(Fe,"LI",{});var k8e=s(Db);Jfe=n(k8e,"STRONG",{});var Qct=s(Jfe);C$o=r(Qct,"plbart"),Qct.forEach(t),w$o=r(k8e," \u2014 "),_G=n(k8e,"A",{href:!0});var Hct=s(_G);A$o=r(Hct,"PLBartForConditionalGeneration"),Hct.forEach(t),y$o=r(k8e," (PLBart model)"),k8e.forEach(t),L$o=i(Fe),Gb=n(Fe,"LI",{});var S8e=s(Gb);Yfe=n(S8e,"STRONG",{});var Uct=s(Yfe);x$o=r(Uct,"prophetnet"),Uct.forEach(t),$$o=r(S8e," \u2014 "),uG=n(S8e,"A",{href:!0});var Jct=s(uG);k$o=r(Jct,"ProphetNetForConditionalGeneration"),Jct.forEach(t),S$o=r(S8e," (ProphetNet model)"),S8e.forEach(t),R$o=i(Fe),Ob=n(Fe,"LI",{});var R8e=s(Ob);Kfe=n(R8e,"STRONG",{});var Yct=s(Kfe);P$o=r(Yct,"t5"),Yct.forEach(t),B$o=r(R8e," \u2014 "),bG=n(R8e,"A",{href:!0});var Kct=s(bG);I$o=r(Kct,"T5ForConditionalGeneration"),Kct.forEach(t),N$o=r(R8e," (T5 model)"),R8e.forEach(t),q$o=i(Fe),Vb=n(Fe,"LI",{});var P8e=s(Vb);Zfe=n(P8e,"STRONG",{});var Zct=s(Zfe);j$o=r(Zct,"xlm-prophetnet"),Zct.forEach(t),D$o=r(P8e," \u2014 "),vG=n(P8e,"A",{href:!0});var eft=s(vG);G$o=r(eft,"XLMProphetNetForConditionalGeneration"),eft.forEach(t),O$o=r(P8e," (XLM-ProphetNet model)"),P8e.forEach(t),Fe.forEach(t),V$o=i(na),Xb=n(na,"P",{});var B8e=s(Xb);X$o=r(B8e,"The model is set in evaluation mode by default using "),eme=n(B8e,"CODE",{});var oft=s(eme);z$o=r(oft,"model.eval()"),oft.forEach(t),W$o=r(B8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ome=n(B8e,"CODE",{});var rft=s(ome);Q$o=r(rft,"model.train()"),rft.forEach(t),B8e.forEach(t),H$o=i(na),T(zb.$$.fragment,na),na.forEach(t),Ws.forEach(t),aje=i(f),Gi=n(f,"H2",{class:!0});var iGe=s(Gi);Wb=n(iGe,"A",{id:!0,class:!0,href:!0});var tft=s(Wb);rme=n(tft,"SPAN",{});var aft=s(rme);T(R6.$$.fragment,aft),aft.forEach(t),tft.forEach(t),U$o=i(iGe),tme=n(iGe,"SPAN",{});var nft=s(tme);J$o=r(nft,"AutoModelForSequenceClassification"),nft.forEach(t),iGe.forEach(t),nje=i(f),Ro=n(f,"DIV",{class:!0});var Qs=s(Ro);T(P6.$$.fragment,Qs),Y$o=i(Qs),Oi=n(Qs,"P",{});var zZ=s(Oi);K$o=r(zZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),FG=n(zZ,"A",{href:!0});var sft=s(FG);Z$o=r(sft,"from_pretrained()"),sft.forEach(t),eko=r(zZ," class method or the "),TG=n(zZ,"A",{href:!0});var lft=s(TG);oko=r(lft,"from_config()"),lft.forEach(t),rko=r(zZ,` class
method.`),zZ.forEach(t),tko=i(Qs),B6=n(Qs,"P",{});var dGe=s(B6);ako=r(dGe,"This class cannot be instantiated directly using "),ame=n(dGe,"CODE",{});var ift=s(ame);nko=r(ift,"__init__()"),ift.forEach(t),sko=r(dGe," (throws an error)."),dGe.forEach(t),lko=i(Qs),it=n(Qs,"DIV",{class:!0});var J0=s(it);T(I6.$$.fragment,J0),iko=i(J0),nme=n(J0,"P",{});var dft=s(nme);dko=r(dft,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),dft.forEach(t),cko=i(J0),Vi=n(J0,"P",{});var WZ=s(Vi);fko=r(WZ,`Note:
Loading a model from its configuration file does `),sme=n(WZ,"STRONG",{});var cft=s(sme);mko=r(cft,"not"),cft.forEach(t),gko=r(WZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),MG=n(WZ,"A",{href:!0});var fft=s(MG);hko=r(fft,"from_pretrained()"),fft.forEach(t),pko=r(WZ," to load the model weights."),WZ.forEach(t),_ko=i(J0),T(Qb.$$.fragment,J0),J0.forEach(t),uko=i(Qs),oo=n(Qs,"DIV",{class:!0});var sa=s(oo);T(N6.$$.fragment,sa),bko=i(sa),lme=n(sa,"P",{});var mft=s(lme);vko=r(mft,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),mft.forEach(t),Fko=i(sa),Ra=n(sa,"P",{});var Y0=s(Ra);Tko=r(Y0,"The model class to instantiate is selected based on the "),ime=n(Y0,"CODE",{});var gft=s(ime);Mko=r(gft,"model_type"),gft.forEach(t),Eko=r(Y0,` property of the config object (either
passed as an argument or loaded from `),dme=n(Y0,"CODE",{});var hft=s(dme);Cko=r(hft,"pretrained_model_name_or_path"),hft.forEach(t),wko=r(Y0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cme=n(Y0,"CODE",{});var pft=s(cme);Ako=r(pft,"pretrained_model_name_or_path"),pft.forEach(t),yko=r(Y0,":"),Y0.forEach(t),Lko=i(sa),N=n(sa,"UL",{});var j=s(N);Hb=n(j,"LI",{});var I8e=s(Hb);fme=n(I8e,"STRONG",{});var _ft=s(fme);xko=r(_ft,"albert"),_ft.forEach(t),$ko=r(I8e," \u2014 "),EG=n(I8e,"A",{href:!0});var uft=s(EG);kko=r(uft,"AlbertForSequenceClassification"),uft.forEach(t),Sko=r(I8e," (ALBERT model)"),I8e.forEach(t),Rko=i(j),Ub=n(j,"LI",{});var N8e=s(Ub);mme=n(N8e,"STRONG",{});var bft=s(mme);Pko=r(bft,"bart"),bft.forEach(t),Bko=r(N8e," \u2014 "),CG=n(N8e,"A",{href:!0});var vft=s(CG);Iko=r(vft,"BartForSequenceClassification"),vft.forEach(t),Nko=r(N8e," (BART model)"),N8e.forEach(t),qko=i(j),Jb=n(j,"LI",{});var q8e=s(Jb);gme=n(q8e,"STRONG",{});var Fft=s(gme);jko=r(Fft,"bert"),Fft.forEach(t),Dko=r(q8e," \u2014 "),wG=n(q8e,"A",{href:!0});var Tft=s(wG);Gko=r(Tft,"BertForSequenceClassification"),Tft.forEach(t),Oko=r(q8e," (BERT model)"),q8e.forEach(t),Vko=i(j),Yb=n(j,"LI",{});var j8e=s(Yb);hme=n(j8e,"STRONG",{});var Mft=s(hme);Xko=r(Mft,"big_bird"),Mft.forEach(t),zko=r(j8e," \u2014 "),AG=n(j8e,"A",{href:!0});var Eft=s(AG);Wko=r(Eft,"BigBirdForSequenceClassification"),Eft.forEach(t),Qko=r(j8e," (BigBird model)"),j8e.forEach(t),Hko=i(j),Kb=n(j,"LI",{});var D8e=s(Kb);pme=n(D8e,"STRONG",{});var Cft=s(pme);Uko=r(Cft,"bigbird_pegasus"),Cft.forEach(t),Jko=r(D8e," \u2014 "),yG=n(D8e,"A",{href:!0});var wft=s(yG);Yko=r(wft,"BigBirdPegasusForSequenceClassification"),wft.forEach(t),Kko=r(D8e," (BigBird-Pegasus model)"),D8e.forEach(t),Zko=i(j),Zb=n(j,"LI",{});var G8e=s(Zb);_me=n(G8e,"STRONG",{});var Aft=s(_me);eSo=r(Aft,"camembert"),Aft.forEach(t),oSo=r(G8e," \u2014 "),LG=n(G8e,"A",{href:!0});var yft=s(LG);rSo=r(yft,"CamembertForSequenceClassification"),yft.forEach(t),tSo=r(G8e," (CamemBERT model)"),G8e.forEach(t),aSo=i(j),e2=n(j,"LI",{});var O8e=s(e2);ume=n(O8e,"STRONG",{});var Lft=s(ume);nSo=r(Lft,"canine"),Lft.forEach(t),sSo=r(O8e," \u2014 "),xG=n(O8e,"A",{href:!0});var xft=s(xG);lSo=r(xft,"CanineForSequenceClassification"),xft.forEach(t),iSo=r(O8e," (CANINE model)"),O8e.forEach(t),dSo=i(j),o2=n(j,"LI",{});var V8e=s(o2);bme=n(V8e,"STRONG",{});var $ft=s(bme);cSo=r($ft,"convbert"),$ft.forEach(t),fSo=r(V8e," \u2014 "),$G=n(V8e,"A",{href:!0});var kft=s($G);mSo=r(kft,"ConvBertForSequenceClassification"),kft.forEach(t),gSo=r(V8e," (ConvBERT model)"),V8e.forEach(t),hSo=i(j),r2=n(j,"LI",{});var X8e=s(r2);vme=n(X8e,"STRONG",{});var Sft=s(vme);pSo=r(Sft,"ctrl"),Sft.forEach(t),_So=r(X8e," \u2014 "),kG=n(X8e,"A",{href:!0});var Rft=s(kG);uSo=r(Rft,"CTRLForSequenceClassification"),Rft.forEach(t),bSo=r(X8e," (CTRL model)"),X8e.forEach(t),vSo=i(j),t2=n(j,"LI",{});var z8e=s(t2);Fme=n(z8e,"STRONG",{});var Pft=s(Fme);FSo=r(Pft,"data2vec-text"),Pft.forEach(t),TSo=r(z8e," \u2014 "),SG=n(z8e,"A",{href:!0});var Bft=s(SG);MSo=r(Bft,"Data2VecTextForSequenceClassification"),Bft.forEach(t),ESo=r(z8e," (Data2VecText model)"),z8e.forEach(t),CSo=i(j),a2=n(j,"LI",{});var W8e=s(a2);Tme=n(W8e,"STRONG",{});var Ift=s(Tme);wSo=r(Ift,"deberta"),Ift.forEach(t),ASo=r(W8e," \u2014 "),RG=n(W8e,"A",{href:!0});var Nft=s(RG);ySo=r(Nft,"DebertaForSequenceClassification"),Nft.forEach(t),LSo=r(W8e," (DeBERTa model)"),W8e.forEach(t),xSo=i(j),n2=n(j,"LI",{});var Q8e=s(n2);Mme=n(Q8e,"STRONG",{});var qft=s(Mme);$So=r(qft,"deberta-v2"),qft.forEach(t),kSo=r(Q8e," \u2014 "),PG=n(Q8e,"A",{href:!0});var jft=s(PG);SSo=r(jft,"DebertaV2ForSequenceClassification"),jft.forEach(t),RSo=r(Q8e," (DeBERTa-v2 model)"),Q8e.forEach(t),PSo=i(j),s2=n(j,"LI",{});var H8e=s(s2);Eme=n(H8e,"STRONG",{});var Dft=s(Eme);BSo=r(Dft,"distilbert"),Dft.forEach(t),ISo=r(H8e," \u2014 "),BG=n(H8e,"A",{href:!0});var Gft=s(BG);NSo=r(Gft,"DistilBertForSequenceClassification"),Gft.forEach(t),qSo=r(H8e," (DistilBERT model)"),H8e.forEach(t),jSo=i(j),l2=n(j,"LI",{});var U8e=s(l2);Cme=n(U8e,"STRONG",{});var Oft=s(Cme);DSo=r(Oft,"electra"),Oft.forEach(t),GSo=r(U8e," \u2014 "),IG=n(U8e,"A",{href:!0});var Vft=s(IG);OSo=r(Vft,"ElectraForSequenceClassification"),Vft.forEach(t),VSo=r(U8e," (ELECTRA model)"),U8e.forEach(t),XSo=i(j),i2=n(j,"LI",{});var J8e=s(i2);wme=n(J8e,"STRONG",{});var Xft=s(wme);zSo=r(Xft,"flaubert"),Xft.forEach(t),WSo=r(J8e," \u2014 "),NG=n(J8e,"A",{href:!0});var zft=s(NG);QSo=r(zft,"FlaubertForSequenceClassification"),zft.forEach(t),HSo=r(J8e," (FlauBERT model)"),J8e.forEach(t),USo=i(j),d2=n(j,"LI",{});var Y8e=s(d2);Ame=n(Y8e,"STRONG",{});var Wft=s(Ame);JSo=r(Wft,"fnet"),Wft.forEach(t),YSo=r(Y8e," \u2014 "),qG=n(Y8e,"A",{href:!0});var Qft=s(qG);KSo=r(Qft,"FNetForSequenceClassification"),Qft.forEach(t),ZSo=r(Y8e," (FNet model)"),Y8e.forEach(t),eRo=i(j),c2=n(j,"LI",{});var K8e=s(c2);yme=n(K8e,"STRONG",{});var Hft=s(yme);oRo=r(Hft,"funnel"),Hft.forEach(t),rRo=r(K8e," \u2014 "),jG=n(K8e,"A",{href:!0});var Uft=s(jG);tRo=r(Uft,"FunnelForSequenceClassification"),Uft.forEach(t),aRo=r(K8e," (Funnel Transformer model)"),K8e.forEach(t),nRo=i(j),f2=n(j,"LI",{});var Z8e=s(f2);Lme=n(Z8e,"STRONG",{});var Jft=s(Lme);sRo=r(Jft,"gpt2"),Jft.forEach(t),lRo=r(Z8e," \u2014 "),DG=n(Z8e,"A",{href:!0});var Yft=s(DG);iRo=r(Yft,"GPT2ForSequenceClassification"),Yft.forEach(t),dRo=r(Z8e," (OpenAI GPT-2 model)"),Z8e.forEach(t),cRo=i(j),m2=n(j,"LI",{});var exe=s(m2);xme=n(exe,"STRONG",{});var Kft=s(xme);fRo=r(Kft,"gpt_neo"),Kft.forEach(t),mRo=r(exe," \u2014 "),GG=n(exe,"A",{href:!0});var Zft=s(GG);gRo=r(Zft,"GPTNeoForSequenceClassification"),Zft.forEach(t),hRo=r(exe," (GPT Neo model)"),exe.forEach(t),pRo=i(j),g2=n(j,"LI",{});var oxe=s(g2);$me=n(oxe,"STRONG",{});var emt=s($me);_Ro=r(emt,"gptj"),emt.forEach(t),uRo=r(oxe," \u2014 "),OG=n(oxe,"A",{href:!0});var omt=s(OG);bRo=r(omt,"GPTJForSequenceClassification"),omt.forEach(t),vRo=r(oxe," (GPT-J model)"),oxe.forEach(t),FRo=i(j),h2=n(j,"LI",{});var rxe=s(h2);kme=n(rxe,"STRONG",{});var rmt=s(kme);TRo=r(rmt,"ibert"),rmt.forEach(t),MRo=r(rxe," \u2014 "),VG=n(rxe,"A",{href:!0});var tmt=s(VG);ERo=r(tmt,"IBertForSequenceClassification"),tmt.forEach(t),CRo=r(rxe," (I-BERT model)"),rxe.forEach(t),wRo=i(j),p2=n(j,"LI",{});var txe=s(p2);Sme=n(txe,"STRONG",{});var amt=s(Sme);ARo=r(amt,"layoutlm"),amt.forEach(t),yRo=r(txe," \u2014 "),XG=n(txe,"A",{href:!0});var nmt=s(XG);LRo=r(nmt,"LayoutLMForSequenceClassification"),nmt.forEach(t),xRo=r(txe," (LayoutLM model)"),txe.forEach(t),$Ro=i(j),_2=n(j,"LI",{});var axe=s(_2);Rme=n(axe,"STRONG",{});var smt=s(Rme);kRo=r(smt,"layoutlmv2"),smt.forEach(t),SRo=r(axe," \u2014 "),zG=n(axe,"A",{href:!0});var lmt=s(zG);RRo=r(lmt,"LayoutLMv2ForSequenceClassification"),lmt.forEach(t),PRo=r(axe," (LayoutLMv2 model)"),axe.forEach(t),BRo=i(j),u2=n(j,"LI",{});var nxe=s(u2);Pme=n(nxe,"STRONG",{});var imt=s(Pme);IRo=r(imt,"layoutlmv3"),imt.forEach(t),NRo=r(nxe," \u2014 "),WG=n(nxe,"A",{href:!0});var dmt=s(WG);qRo=r(dmt,"LayoutLMv3ForSequenceClassification"),dmt.forEach(t),jRo=r(nxe," (LayoutLMv3 model)"),nxe.forEach(t),DRo=i(j),b2=n(j,"LI",{});var sxe=s(b2);Bme=n(sxe,"STRONG",{});var cmt=s(Bme);GRo=r(cmt,"led"),cmt.forEach(t),ORo=r(sxe," \u2014 "),QG=n(sxe,"A",{href:!0});var fmt=s(QG);VRo=r(fmt,"LEDForSequenceClassification"),fmt.forEach(t),XRo=r(sxe," (LED model)"),sxe.forEach(t),zRo=i(j),v2=n(j,"LI",{});var lxe=s(v2);Ime=n(lxe,"STRONG",{});var mmt=s(Ime);WRo=r(mmt,"longformer"),mmt.forEach(t),QRo=r(lxe," \u2014 "),HG=n(lxe,"A",{href:!0});var gmt=s(HG);HRo=r(gmt,"LongformerForSequenceClassification"),gmt.forEach(t),URo=r(lxe," (Longformer model)"),lxe.forEach(t),JRo=i(j),F2=n(j,"LI",{});var ixe=s(F2);Nme=n(ixe,"STRONG",{});var hmt=s(Nme);YRo=r(hmt,"mbart"),hmt.forEach(t),KRo=r(ixe," \u2014 "),UG=n(ixe,"A",{href:!0});var pmt=s(UG);ZRo=r(pmt,"MBartForSequenceClassification"),pmt.forEach(t),ePo=r(ixe," (mBART model)"),ixe.forEach(t),oPo=i(j),T2=n(j,"LI",{});var dxe=s(T2);qme=n(dxe,"STRONG",{});var _mt=s(qme);rPo=r(_mt,"megatron-bert"),_mt.forEach(t),tPo=r(dxe," \u2014 "),JG=n(dxe,"A",{href:!0});var umt=s(JG);aPo=r(umt,"MegatronBertForSequenceClassification"),umt.forEach(t),nPo=r(dxe," (Megatron-BERT model)"),dxe.forEach(t),sPo=i(j),M2=n(j,"LI",{});var cxe=s(M2);jme=n(cxe,"STRONG",{});var bmt=s(jme);lPo=r(bmt,"mobilebert"),bmt.forEach(t),iPo=r(cxe," \u2014 "),YG=n(cxe,"A",{href:!0});var vmt=s(YG);dPo=r(vmt,"MobileBertForSequenceClassification"),vmt.forEach(t),cPo=r(cxe," (MobileBERT model)"),cxe.forEach(t),fPo=i(j),E2=n(j,"LI",{});var fxe=s(E2);Dme=n(fxe,"STRONG",{});var Fmt=s(Dme);mPo=r(Fmt,"mpnet"),Fmt.forEach(t),gPo=r(fxe," \u2014 "),KG=n(fxe,"A",{href:!0});var Tmt=s(KG);hPo=r(Tmt,"MPNetForSequenceClassification"),Tmt.forEach(t),pPo=r(fxe," (MPNet model)"),fxe.forEach(t),_Po=i(j),C2=n(j,"LI",{});var mxe=s(C2);Gme=n(mxe,"STRONG",{});var Mmt=s(Gme);uPo=r(Mmt,"nystromformer"),Mmt.forEach(t),bPo=r(mxe," \u2014 "),ZG=n(mxe,"A",{href:!0});var Emt=s(ZG);vPo=r(Emt,"NystromformerForSequenceClassification"),Emt.forEach(t),FPo=r(mxe," (Nystr\xF6mformer model)"),mxe.forEach(t),TPo=i(j),w2=n(j,"LI",{});var gxe=s(w2);Ome=n(gxe,"STRONG",{});var Cmt=s(Ome);MPo=r(Cmt,"openai-gpt"),Cmt.forEach(t),EPo=r(gxe," \u2014 "),eO=n(gxe,"A",{href:!0});var wmt=s(eO);CPo=r(wmt,"OpenAIGPTForSequenceClassification"),wmt.forEach(t),wPo=r(gxe," (OpenAI GPT model)"),gxe.forEach(t),APo=i(j),A2=n(j,"LI",{});var hxe=s(A2);Vme=n(hxe,"STRONG",{});var Amt=s(Vme);yPo=r(Amt,"perceiver"),Amt.forEach(t),LPo=r(hxe," \u2014 "),oO=n(hxe,"A",{href:!0});var ymt=s(oO);xPo=r(ymt,"PerceiverForSequenceClassification"),ymt.forEach(t),$Po=r(hxe," (Perceiver model)"),hxe.forEach(t),kPo=i(j),y2=n(j,"LI",{});var pxe=s(y2);Xme=n(pxe,"STRONG",{});var Lmt=s(Xme);SPo=r(Lmt,"plbart"),Lmt.forEach(t),RPo=r(pxe," \u2014 "),rO=n(pxe,"A",{href:!0});var xmt=s(rO);PPo=r(xmt,"PLBartForSequenceClassification"),xmt.forEach(t),BPo=r(pxe," (PLBart model)"),pxe.forEach(t),IPo=i(j),L2=n(j,"LI",{});var _xe=s(L2);zme=n(_xe,"STRONG",{});var $mt=s(zme);NPo=r($mt,"qdqbert"),$mt.forEach(t),qPo=r(_xe," \u2014 "),tO=n(_xe,"A",{href:!0});var kmt=s(tO);jPo=r(kmt,"QDQBertForSequenceClassification"),kmt.forEach(t),DPo=r(_xe," (QDQBert model)"),_xe.forEach(t),GPo=i(j),x2=n(j,"LI",{});var uxe=s(x2);Wme=n(uxe,"STRONG",{});var Smt=s(Wme);OPo=r(Smt,"reformer"),Smt.forEach(t),VPo=r(uxe," \u2014 "),aO=n(uxe,"A",{href:!0});var Rmt=s(aO);XPo=r(Rmt,"ReformerForSequenceClassification"),Rmt.forEach(t),zPo=r(uxe," (Reformer model)"),uxe.forEach(t),WPo=i(j),$2=n(j,"LI",{});var bxe=s($2);Qme=n(bxe,"STRONG",{});var Pmt=s(Qme);QPo=r(Pmt,"rembert"),Pmt.forEach(t),HPo=r(bxe," \u2014 "),nO=n(bxe,"A",{href:!0});var Bmt=s(nO);UPo=r(Bmt,"RemBertForSequenceClassification"),Bmt.forEach(t),JPo=r(bxe," (RemBERT model)"),bxe.forEach(t),YPo=i(j),k2=n(j,"LI",{});var vxe=s(k2);Hme=n(vxe,"STRONG",{});var Imt=s(Hme);KPo=r(Imt,"roberta"),Imt.forEach(t),ZPo=r(vxe," \u2014 "),sO=n(vxe,"A",{href:!0});var Nmt=s(sO);eBo=r(Nmt,"RobertaForSequenceClassification"),Nmt.forEach(t),oBo=r(vxe," (RoBERTa model)"),vxe.forEach(t),rBo=i(j),S2=n(j,"LI",{});var Fxe=s(S2);Ume=n(Fxe,"STRONG",{});var qmt=s(Ume);tBo=r(qmt,"roformer"),qmt.forEach(t),aBo=r(Fxe," \u2014 "),lO=n(Fxe,"A",{href:!0});var jmt=s(lO);nBo=r(jmt,"RoFormerForSequenceClassification"),jmt.forEach(t),sBo=r(Fxe," (RoFormer model)"),Fxe.forEach(t),lBo=i(j),R2=n(j,"LI",{});var Txe=s(R2);Jme=n(Txe,"STRONG",{});var Dmt=s(Jme);iBo=r(Dmt,"squeezebert"),Dmt.forEach(t),dBo=r(Txe," \u2014 "),iO=n(Txe,"A",{href:!0});var Gmt=s(iO);cBo=r(Gmt,"SqueezeBertForSequenceClassification"),Gmt.forEach(t),fBo=r(Txe," (SqueezeBERT model)"),Txe.forEach(t),mBo=i(j),P2=n(j,"LI",{});var Mxe=s(P2);Yme=n(Mxe,"STRONG",{});var Omt=s(Yme);gBo=r(Omt,"tapas"),Omt.forEach(t),hBo=r(Mxe," \u2014 "),dO=n(Mxe,"A",{href:!0});var Vmt=s(dO);pBo=r(Vmt,"TapasForSequenceClassification"),Vmt.forEach(t),_Bo=r(Mxe," (TAPAS model)"),Mxe.forEach(t),uBo=i(j),B2=n(j,"LI",{});var Exe=s(B2);Kme=n(Exe,"STRONG",{});var Xmt=s(Kme);bBo=r(Xmt,"transfo-xl"),Xmt.forEach(t),vBo=r(Exe," \u2014 "),cO=n(Exe,"A",{href:!0});var zmt=s(cO);FBo=r(zmt,"TransfoXLForSequenceClassification"),zmt.forEach(t),TBo=r(Exe," (Transformer-XL model)"),Exe.forEach(t),MBo=i(j),I2=n(j,"LI",{});var Cxe=s(I2);Zme=n(Cxe,"STRONG",{});var Wmt=s(Zme);EBo=r(Wmt,"xlm"),Wmt.forEach(t),CBo=r(Cxe," \u2014 "),fO=n(Cxe,"A",{href:!0});var Qmt=s(fO);wBo=r(Qmt,"XLMForSequenceClassification"),Qmt.forEach(t),ABo=r(Cxe," (XLM model)"),Cxe.forEach(t),yBo=i(j),N2=n(j,"LI",{});var wxe=s(N2);ege=n(wxe,"STRONG",{});var Hmt=s(ege);LBo=r(Hmt,"xlm-roberta"),Hmt.forEach(t),xBo=r(wxe," \u2014 "),mO=n(wxe,"A",{href:!0});var Umt=s(mO);$Bo=r(Umt,"XLMRobertaForSequenceClassification"),Umt.forEach(t),kBo=r(wxe," (XLM-RoBERTa model)"),wxe.forEach(t),SBo=i(j),q2=n(j,"LI",{});var Axe=s(q2);oge=n(Axe,"STRONG",{});var Jmt=s(oge);RBo=r(Jmt,"xlm-roberta-xl"),Jmt.forEach(t),PBo=r(Axe," \u2014 "),gO=n(Axe,"A",{href:!0});var Ymt=s(gO);BBo=r(Ymt,"XLMRobertaXLForSequenceClassification"),Ymt.forEach(t),IBo=r(Axe," (XLM-RoBERTa-XL model)"),Axe.forEach(t),NBo=i(j),j2=n(j,"LI",{});var yxe=s(j2);rge=n(yxe,"STRONG",{});var Kmt=s(rge);qBo=r(Kmt,"xlnet"),Kmt.forEach(t),jBo=r(yxe," \u2014 "),hO=n(yxe,"A",{href:!0});var Zmt=s(hO);DBo=r(Zmt,"XLNetForSequenceClassification"),Zmt.forEach(t),GBo=r(yxe," (XLNet model)"),yxe.forEach(t),OBo=i(j),D2=n(j,"LI",{});var Lxe=s(D2);tge=n(Lxe,"STRONG",{});var egt=s(tge);VBo=r(egt,"yoso"),egt.forEach(t),XBo=r(Lxe," \u2014 "),pO=n(Lxe,"A",{href:!0});var ogt=s(pO);zBo=r(ogt,"YosoForSequenceClassification"),ogt.forEach(t),WBo=r(Lxe," (YOSO model)"),Lxe.forEach(t),j.forEach(t),QBo=i(sa),G2=n(sa,"P",{});var xxe=s(G2);HBo=r(xxe,"The model is set in evaluation mode by default using "),age=n(xxe,"CODE",{});var rgt=s(age);UBo=r(rgt,"model.eval()"),rgt.forEach(t),JBo=r(xxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nge=n(xxe,"CODE",{});var tgt=s(nge);YBo=r(tgt,"model.train()"),tgt.forEach(t),xxe.forEach(t),KBo=i(sa),T(O2.$$.fragment,sa),sa.forEach(t),Qs.forEach(t),sje=i(f),Xi=n(f,"H2",{class:!0});var cGe=s(Xi);V2=n(cGe,"A",{id:!0,class:!0,href:!0});var agt=s(V2);sge=n(agt,"SPAN",{});var ngt=s(sge);T(q6.$$.fragment,ngt),ngt.forEach(t),agt.forEach(t),ZBo=i(cGe),lge=n(cGe,"SPAN",{});var sgt=s(lge);eIo=r(sgt,"AutoModelForMultipleChoice"),sgt.forEach(t),cGe.forEach(t),lje=i(f),Po=n(f,"DIV",{class:!0});var Hs=s(Po);T(j6.$$.fragment,Hs),oIo=i(Hs),zi=n(Hs,"P",{});var QZ=s(zi);rIo=r(QZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),_O=n(QZ,"A",{href:!0});var lgt=s(_O);tIo=r(lgt,"from_pretrained()"),lgt.forEach(t),aIo=r(QZ," class method or the "),uO=n(QZ,"A",{href:!0});var igt=s(uO);nIo=r(igt,"from_config()"),igt.forEach(t),sIo=r(QZ,` class
method.`),QZ.forEach(t),lIo=i(Hs),D6=n(Hs,"P",{});var fGe=s(D6);iIo=r(fGe,"This class cannot be instantiated directly using "),ige=n(fGe,"CODE",{});var dgt=s(ige);dIo=r(dgt,"__init__()"),dgt.forEach(t),cIo=r(fGe," (throws an error)."),fGe.forEach(t),fIo=i(Hs),dt=n(Hs,"DIV",{class:!0});var K0=s(dt);T(G6.$$.fragment,K0),mIo=i(K0),dge=n(K0,"P",{});var cgt=s(dge);gIo=r(cgt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),cgt.forEach(t),hIo=i(K0),Wi=n(K0,"P",{});var HZ=s(Wi);pIo=r(HZ,`Note:
Loading a model from its configuration file does `),cge=n(HZ,"STRONG",{});var fgt=s(cge);_Io=r(fgt,"not"),fgt.forEach(t),uIo=r(HZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),bO=n(HZ,"A",{href:!0});var mgt=s(bO);bIo=r(mgt,"from_pretrained()"),mgt.forEach(t),vIo=r(HZ," to load the model weights."),HZ.forEach(t),FIo=i(K0),T(X2.$$.fragment,K0),K0.forEach(t),TIo=i(Hs),ro=n(Hs,"DIV",{class:!0});var la=s(ro);T(O6.$$.fragment,la),MIo=i(la),fge=n(la,"P",{});var ggt=s(fge);EIo=r(ggt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),ggt.forEach(t),CIo=i(la),Pa=n(la,"P",{});var Z0=s(Pa);wIo=r(Z0,"The model class to instantiate is selected based on the "),mge=n(Z0,"CODE",{});var hgt=s(mge);AIo=r(hgt,"model_type"),hgt.forEach(t),yIo=r(Z0,` property of the config object (either
passed as an argument or loaded from `),gge=n(Z0,"CODE",{});var pgt=s(gge);LIo=r(pgt,"pretrained_model_name_or_path"),pgt.forEach(t),xIo=r(Z0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hge=n(Z0,"CODE",{});var _gt=s(hge);$Io=r(_gt,"pretrained_model_name_or_path"),_gt.forEach(t),kIo=r(Z0,":"),Z0.forEach(t),SIo=i(la),K=n(la,"UL",{});var ee=s(K);z2=n(ee,"LI",{});var $xe=s(z2);pge=n($xe,"STRONG",{});var ugt=s(pge);RIo=r(ugt,"albert"),ugt.forEach(t),PIo=r($xe," \u2014 "),vO=n($xe,"A",{href:!0});var bgt=s(vO);BIo=r(bgt,"AlbertForMultipleChoice"),bgt.forEach(t),IIo=r($xe," (ALBERT model)"),$xe.forEach(t),NIo=i(ee),W2=n(ee,"LI",{});var kxe=s(W2);_ge=n(kxe,"STRONG",{});var vgt=s(_ge);qIo=r(vgt,"bert"),vgt.forEach(t),jIo=r(kxe," \u2014 "),FO=n(kxe,"A",{href:!0});var Fgt=s(FO);DIo=r(Fgt,"BertForMultipleChoice"),Fgt.forEach(t),GIo=r(kxe," (BERT model)"),kxe.forEach(t),OIo=i(ee),Q2=n(ee,"LI",{});var Sxe=s(Q2);uge=n(Sxe,"STRONG",{});var Tgt=s(uge);VIo=r(Tgt,"big_bird"),Tgt.forEach(t),XIo=r(Sxe," \u2014 "),TO=n(Sxe,"A",{href:!0});var Mgt=s(TO);zIo=r(Mgt,"BigBirdForMultipleChoice"),Mgt.forEach(t),WIo=r(Sxe," (BigBird model)"),Sxe.forEach(t),QIo=i(ee),H2=n(ee,"LI",{});var Rxe=s(H2);bge=n(Rxe,"STRONG",{});var Egt=s(bge);HIo=r(Egt,"camembert"),Egt.forEach(t),UIo=r(Rxe," \u2014 "),MO=n(Rxe,"A",{href:!0});var Cgt=s(MO);JIo=r(Cgt,"CamembertForMultipleChoice"),Cgt.forEach(t),YIo=r(Rxe," (CamemBERT model)"),Rxe.forEach(t),KIo=i(ee),U2=n(ee,"LI",{});var Pxe=s(U2);vge=n(Pxe,"STRONG",{});var wgt=s(vge);ZIo=r(wgt,"canine"),wgt.forEach(t),eNo=r(Pxe," \u2014 "),EO=n(Pxe,"A",{href:!0});var Agt=s(EO);oNo=r(Agt,"CanineForMultipleChoice"),Agt.forEach(t),rNo=r(Pxe," (CANINE model)"),Pxe.forEach(t),tNo=i(ee),J2=n(ee,"LI",{});var Bxe=s(J2);Fge=n(Bxe,"STRONG",{});var ygt=s(Fge);aNo=r(ygt,"convbert"),ygt.forEach(t),nNo=r(Bxe," \u2014 "),CO=n(Bxe,"A",{href:!0});var Lgt=s(CO);sNo=r(Lgt,"ConvBertForMultipleChoice"),Lgt.forEach(t),lNo=r(Bxe," (ConvBERT model)"),Bxe.forEach(t),iNo=i(ee),Y2=n(ee,"LI",{});var Ixe=s(Y2);Tge=n(Ixe,"STRONG",{});var xgt=s(Tge);dNo=r(xgt,"data2vec-text"),xgt.forEach(t),cNo=r(Ixe," \u2014 "),wO=n(Ixe,"A",{href:!0});var $gt=s(wO);fNo=r($gt,"Data2VecTextForMultipleChoice"),$gt.forEach(t),mNo=r(Ixe," (Data2VecText model)"),Ixe.forEach(t),gNo=i(ee),K2=n(ee,"LI",{});var Nxe=s(K2);Mge=n(Nxe,"STRONG",{});var kgt=s(Mge);hNo=r(kgt,"deberta-v2"),kgt.forEach(t),pNo=r(Nxe," \u2014 "),AO=n(Nxe,"A",{href:!0});var Sgt=s(AO);_No=r(Sgt,"DebertaV2ForMultipleChoice"),Sgt.forEach(t),uNo=r(Nxe," (DeBERTa-v2 model)"),Nxe.forEach(t),bNo=i(ee),Z2=n(ee,"LI",{});var qxe=s(Z2);Ege=n(qxe,"STRONG",{});var Rgt=s(Ege);vNo=r(Rgt,"distilbert"),Rgt.forEach(t),FNo=r(qxe," \u2014 "),yO=n(qxe,"A",{href:!0});var Pgt=s(yO);TNo=r(Pgt,"DistilBertForMultipleChoice"),Pgt.forEach(t),MNo=r(qxe," (DistilBERT model)"),qxe.forEach(t),ENo=i(ee),ev=n(ee,"LI",{});var jxe=s(ev);Cge=n(jxe,"STRONG",{});var Bgt=s(Cge);CNo=r(Bgt,"electra"),Bgt.forEach(t),wNo=r(jxe," \u2014 "),LO=n(jxe,"A",{href:!0});var Igt=s(LO);ANo=r(Igt,"ElectraForMultipleChoice"),Igt.forEach(t),yNo=r(jxe," (ELECTRA model)"),jxe.forEach(t),LNo=i(ee),ov=n(ee,"LI",{});var Dxe=s(ov);wge=n(Dxe,"STRONG",{});var Ngt=s(wge);xNo=r(Ngt,"flaubert"),Ngt.forEach(t),$No=r(Dxe," \u2014 "),xO=n(Dxe,"A",{href:!0});var qgt=s(xO);kNo=r(qgt,"FlaubertForMultipleChoice"),qgt.forEach(t),SNo=r(Dxe," (FlauBERT model)"),Dxe.forEach(t),RNo=i(ee),rv=n(ee,"LI",{});var Gxe=s(rv);Age=n(Gxe,"STRONG",{});var jgt=s(Age);PNo=r(jgt,"fnet"),jgt.forEach(t),BNo=r(Gxe," \u2014 "),$O=n(Gxe,"A",{href:!0});var Dgt=s($O);INo=r(Dgt,"FNetForMultipleChoice"),Dgt.forEach(t),NNo=r(Gxe," (FNet model)"),Gxe.forEach(t),qNo=i(ee),tv=n(ee,"LI",{});var Oxe=s(tv);yge=n(Oxe,"STRONG",{});var Ggt=s(yge);jNo=r(Ggt,"funnel"),Ggt.forEach(t),DNo=r(Oxe," \u2014 "),kO=n(Oxe,"A",{href:!0});var Ogt=s(kO);GNo=r(Ogt,"FunnelForMultipleChoice"),Ogt.forEach(t),ONo=r(Oxe," (Funnel Transformer model)"),Oxe.forEach(t),VNo=i(ee),av=n(ee,"LI",{});var Vxe=s(av);Lge=n(Vxe,"STRONG",{});var Vgt=s(Lge);XNo=r(Vgt,"ibert"),Vgt.forEach(t),zNo=r(Vxe," \u2014 "),SO=n(Vxe,"A",{href:!0});var Xgt=s(SO);WNo=r(Xgt,"IBertForMultipleChoice"),Xgt.forEach(t),QNo=r(Vxe," (I-BERT model)"),Vxe.forEach(t),HNo=i(ee),nv=n(ee,"LI",{});var Xxe=s(nv);xge=n(Xxe,"STRONG",{});var zgt=s(xge);UNo=r(zgt,"longformer"),zgt.forEach(t),JNo=r(Xxe," \u2014 "),RO=n(Xxe,"A",{href:!0});var Wgt=s(RO);YNo=r(Wgt,"LongformerForMultipleChoice"),Wgt.forEach(t),KNo=r(Xxe," (Longformer model)"),Xxe.forEach(t),ZNo=i(ee),sv=n(ee,"LI",{});var zxe=s(sv);$ge=n(zxe,"STRONG",{});var Qgt=s($ge);eqo=r(Qgt,"megatron-bert"),Qgt.forEach(t),oqo=r(zxe," \u2014 "),PO=n(zxe,"A",{href:!0});var Hgt=s(PO);rqo=r(Hgt,"MegatronBertForMultipleChoice"),Hgt.forEach(t),tqo=r(zxe," (Megatron-BERT model)"),zxe.forEach(t),aqo=i(ee),lv=n(ee,"LI",{});var Wxe=s(lv);kge=n(Wxe,"STRONG",{});var Ugt=s(kge);nqo=r(Ugt,"mobilebert"),Ugt.forEach(t),sqo=r(Wxe," \u2014 "),BO=n(Wxe,"A",{href:!0});var Jgt=s(BO);lqo=r(Jgt,"MobileBertForMultipleChoice"),Jgt.forEach(t),iqo=r(Wxe," (MobileBERT model)"),Wxe.forEach(t),dqo=i(ee),iv=n(ee,"LI",{});var Qxe=s(iv);Sge=n(Qxe,"STRONG",{});var Ygt=s(Sge);cqo=r(Ygt,"mpnet"),Ygt.forEach(t),fqo=r(Qxe," \u2014 "),IO=n(Qxe,"A",{href:!0});var Kgt=s(IO);mqo=r(Kgt,"MPNetForMultipleChoice"),Kgt.forEach(t),gqo=r(Qxe," (MPNet model)"),Qxe.forEach(t),hqo=i(ee),dv=n(ee,"LI",{});var Hxe=s(dv);Rge=n(Hxe,"STRONG",{});var Zgt=s(Rge);pqo=r(Zgt,"nystromformer"),Zgt.forEach(t),_qo=r(Hxe," \u2014 "),NO=n(Hxe,"A",{href:!0});var eht=s(NO);uqo=r(eht,"NystromformerForMultipleChoice"),eht.forEach(t),bqo=r(Hxe," (Nystr\xF6mformer model)"),Hxe.forEach(t),vqo=i(ee),cv=n(ee,"LI",{});var Uxe=s(cv);Pge=n(Uxe,"STRONG",{});var oht=s(Pge);Fqo=r(oht,"qdqbert"),oht.forEach(t),Tqo=r(Uxe," \u2014 "),qO=n(Uxe,"A",{href:!0});var rht=s(qO);Mqo=r(rht,"QDQBertForMultipleChoice"),rht.forEach(t),Eqo=r(Uxe," (QDQBert model)"),Uxe.forEach(t),Cqo=i(ee),fv=n(ee,"LI",{});var Jxe=s(fv);Bge=n(Jxe,"STRONG",{});var tht=s(Bge);wqo=r(tht,"rembert"),tht.forEach(t),Aqo=r(Jxe," \u2014 "),jO=n(Jxe,"A",{href:!0});var aht=s(jO);yqo=r(aht,"RemBertForMultipleChoice"),aht.forEach(t),Lqo=r(Jxe," (RemBERT model)"),Jxe.forEach(t),xqo=i(ee),mv=n(ee,"LI",{});var Yxe=s(mv);Ige=n(Yxe,"STRONG",{});var nht=s(Ige);$qo=r(nht,"roberta"),nht.forEach(t),kqo=r(Yxe," \u2014 "),DO=n(Yxe,"A",{href:!0});var sht=s(DO);Sqo=r(sht,"RobertaForMultipleChoice"),sht.forEach(t),Rqo=r(Yxe," (RoBERTa model)"),Yxe.forEach(t),Pqo=i(ee),gv=n(ee,"LI",{});var Kxe=s(gv);Nge=n(Kxe,"STRONG",{});var lht=s(Nge);Bqo=r(lht,"roformer"),lht.forEach(t),Iqo=r(Kxe," \u2014 "),GO=n(Kxe,"A",{href:!0});var iht=s(GO);Nqo=r(iht,"RoFormerForMultipleChoice"),iht.forEach(t),qqo=r(Kxe," (RoFormer model)"),Kxe.forEach(t),jqo=i(ee),hv=n(ee,"LI",{});var Zxe=s(hv);qge=n(Zxe,"STRONG",{});var dht=s(qge);Dqo=r(dht,"squeezebert"),dht.forEach(t),Gqo=r(Zxe," \u2014 "),OO=n(Zxe,"A",{href:!0});var cht=s(OO);Oqo=r(cht,"SqueezeBertForMultipleChoice"),cht.forEach(t),Vqo=r(Zxe," (SqueezeBERT model)"),Zxe.forEach(t),Xqo=i(ee),pv=n(ee,"LI",{});var e$e=s(pv);jge=n(e$e,"STRONG",{});var fht=s(jge);zqo=r(fht,"xlm"),fht.forEach(t),Wqo=r(e$e," \u2014 "),VO=n(e$e,"A",{href:!0});var mht=s(VO);Qqo=r(mht,"XLMForMultipleChoice"),mht.forEach(t),Hqo=r(e$e," (XLM model)"),e$e.forEach(t),Uqo=i(ee),_v=n(ee,"LI",{});var o$e=s(_v);Dge=n(o$e,"STRONG",{});var ght=s(Dge);Jqo=r(ght,"xlm-roberta"),ght.forEach(t),Yqo=r(o$e," \u2014 "),XO=n(o$e,"A",{href:!0});var hht=s(XO);Kqo=r(hht,"XLMRobertaForMultipleChoice"),hht.forEach(t),Zqo=r(o$e," (XLM-RoBERTa model)"),o$e.forEach(t),ejo=i(ee),uv=n(ee,"LI",{});var r$e=s(uv);Gge=n(r$e,"STRONG",{});var pht=s(Gge);ojo=r(pht,"xlm-roberta-xl"),pht.forEach(t),rjo=r(r$e," \u2014 "),zO=n(r$e,"A",{href:!0});var _ht=s(zO);tjo=r(_ht,"XLMRobertaXLForMultipleChoice"),_ht.forEach(t),ajo=r(r$e," (XLM-RoBERTa-XL model)"),r$e.forEach(t),njo=i(ee),bv=n(ee,"LI",{});var t$e=s(bv);Oge=n(t$e,"STRONG",{});var uht=s(Oge);sjo=r(uht,"xlnet"),uht.forEach(t),ljo=r(t$e," \u2014 "),WO=n(t$e,"A",{href:!0});var bht=s(WO);ijo=r(bht,"XLNetForMultipleChoice"),bht.forEach(t),djo=r(t$e," (XLNet model)"),t$e.forEach(t),cjo=i(ee),vv=n(ee,"LI",{});var a$e=s(vv);Vge=n(a$e,"STRONG",{});var vht=s(Vge);fjo=r(vht,"yoso"),vht.forEach(t),mjo=r(a$e," \u2014 "),QO=n(a$e,"A",{href:!0});var Fht=s(QO);gjo=r(Fht,"YosoForMultipleChoice"),Fht.forEach(t),hjo=r(a$e," (YOSO model)"),a$e.forEach(t),ee.forEach(t),pjo=i(la),Fv=n(la,"P",{});var n$e=s(Fv);_jo=r(n$e,"The model is set in evaluation mode by default using "),Xge=n(n$e,"CODE",{});var Tht=s(Xge);ujo=r(Tht,"model.eval()"),Tht.forEach(t),bjo=r(n$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zge=n(n$e,"CODE",{});var Mht=s(zge);vjo=r(Mht,"model.train()"),Mht.forEach(t),n$e.forEach(t),Fjo=i(la),T(Tv.$$.fragment,la),la.forEach(t),Hs.forEach(t),ije=i(f),Qi=n(f,"H2",{class:!0});var mGe=s(Qi);Mv=n(mGe,"A",{id:!0,class:!0,href:!0});var Eht=s(Mv);Wge=n(Eht,"SPAN",{});var Cht=s(Wge);T(V6.$$.fragment,Cht),Cht.forEach(t),Eht.forEach(t),Tjo=i(mGe),Qge=n(mGe,"SPAN",{});var wht=s(Qge);Mjo=r(wht,"AutoModelForNextSentencePrediction"),wht.forEach(t),mGe.forEach(t),dje=i(f),Bo=n(f,"DIV",{class:!0});var Us=s(Bo);T(X6.$$.fragment,Us),Ejo=i(Us),Hi=n(Us,"P",{});var UZ=s(Hi);Cjo=r(UZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),HO=n(UZ,"A",{href:!0});var Aht=s(HO);wjo=r(Aht,"from_pretrained()"),Aht.forEach(t),Ajo=r(UZ," class method or the "),UO=n(UZ,"A",{href:!0});var yht=s(UO);yjo=r(yht,"from_config()"),yht.forEach(t),Ljo=r(UZ,` class
method.`),UZ.forEach(t),xjo=i(Us),z6=n(Us,"P",{});var gGe=s(z6);$jo=r(gGe,"This class cannot be instantiated directly using "),Hge=n(gGe,"CODE",{});var Lht=s(Hge);kjo=r(Lht,"__init__()"),Lht.forEach(t),Sjo=r(gGe," (throws an error)."),gGe.forEach(t),Rjo=i(Us),ct=n(Us,"DIV",{class:!0});var ew=s(ct);T(W6.$$.fragment,ew),Pjo=i(ew),Uge=n(ew,"P",{});var xht=s(Uge);Bjo=r(xht,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),xht.forEach(t),Ijo=i(ew),Ui=n(ew,"P",{});var JZ=s(Ui);Njo=r(JZ,`Note:
Loading a model from its configuration file does `),Jge=n(JZ,"STRONG",{});var $ht=s(Jge);qjo=r($ht,"not"),$ht.forEach(t),jjo=r(JZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),JO=n(JZ,"A",{href:!0});var kht=s(JO);Djo=r(kht,"from_pretrained()"),kht.forEach(t),Gjo=r(JZ," to load the model weights."),JZ.forEach(t),Ojo=i(ew),T(Ev.$$.fragment,ew),ew.forEach(t),Vjo=i(Us),to=n(Us,"DIV",{class:!0});var ia=s(to);T(Q6.$$.fragment,ia),Xjo=i(ia),Yge=n(ia,"P",{});var Sht=s(Yge);zjo=r(Sht,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Sht.forEach(t),Wjo=i(ia),Ba=n(ia,"P",{});var ow=s(Ba);Qjo=r(ow,"The model class to instantiate is selected based on the "),Kge=n(ow,"CODE",{});var Rht=s(Kge);Hjo=r(Rht,"model_type"),Rht.forEach(t),Ujo=r(ow,` property of the config object (either
passed as an argument or loaded from `),Zge=n(ow,"CODE",{});var Pht=s(Zge);Jjo=r(Pht,"pretrained_model_name_or_path"),Pht.forEach(t),Yjo=r(ow,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ehe=n(ow,"CODE",{});var Bht=s(ehe);Kjo=r(Bht,"pretrained_model_name_or_path"),Bht.forEach(t),Zjo=r(ow,":"),ow.forEach(t),eDo=i(ia),Yr=n(ia,"UL",{});var Js=s(Yr);Cv=n(Js,"LI",{});var s$e=s(Cv);ohe=n(s$e,"STRONG",{});var Iht=s(ohe);oDo=r(Iht,"bert"),Iht.forEach(t),rDo=r(s$e," \u2014 "),YO=n(s$e,"A",{href:!0});var Nht=s(YO);tDo=r(Nht,"BertForNextSentencePrediction"),Nht.forEach(t),aDo=r(s$e," (BERT model)"),s$e.forEach(t),nDo=i(Js),wv=n(Js,"LI",{});var l$e=s(wv);rhe=n(l$e,"STRONG",{});var qht=s(rhe);sDo=r(qht,"fnet"),qht.forEach(t),lDo=r(l$e," \u2014 "),KO=n(l$e,"A",{href:!0});var jht=s(KO);iDo=r(jht,"FNetForNextSentencePrediction"),jht.forEach(t),dDo=r(l$e," (FNet model)"),l$e.forEach(t),cDo=i(Js),Av=n(Js,"LI",{});var i$e=s(Av);the=n(i$e,"STRONG",{});var Dht=s(the);fDo=r(Dht,"megatron-bert"),Dht.forEach(t),mDo=r(i$e," \u2014 "),ZO=n(i$e,"A",{href:!0});var Ght=s(ZO);gDo=r(Ght,"MegatronBertForNextSentencePrediction"),Ght.forEach(t),hDo=r(i$e," (Megatron-BERT model)"),i$e.forEach(t),pDo=i(Js),yv=n(Js,"LI",{});var d$e=s(yv);ahe=n(d$e,"STRONG",{});var Oht=s(ahe);_Do=r(Oht,"mobilebert"),Oht.forEach(t),uDo=r(d$e," \u2014 "),eV=n(d$e,"A",{href:!0});var Vht=s(eV);bDo=r(Vht,"MobileBertForNextSentencePrediction"),Vht.forEach(t),vDo=r(d$e," (MobileBERT model)"),d$e.forEach(t),FDo=i(Js),Lv=n(Js,"LI",{});var c$e=s(Lv);nhe=n(c$e,"STRONG",{});var Xht=s(nhe);TDo=r(Xht,"qdqbert"),Xht.forEach(t),MDo=r(c$e," \u2014 "),oV=n(c$e,"A",{href:!0});var zht=s(oV);EDo=r(zht,"QDQBertForNextSentencePrediction"),zht.forEach(t),CDo=r(c$e," (QDQBert model)"),c$e.forEach(t),Js.forEach(t),wDo=i(ia),xv=n(ia,"P",{});var f$e=s(xv);ADo=r(f$e,"The model is set in evaluation mode by default using "),she=n(f$e,"CODE",{});var Wht=s(she);yDo=r(Wht,"model.eval()"),Wht.forEach(t),LDo=r(f$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lhe=n(f$e,"CODE",{});var Qht=s(lhe);xDo=r(Qht,"model.train()"),Qht.forEach(t),f$e.forEach(t),$Do=i(ia),T($v.$$.fragment,ia),ia.forEach(t),Us.forEach(t),cje=i(f),Ji=n(f,"H2",{class:!0});var hGe=s(Ji);kv=n(hGe,"A",{id:!0,class:!0,href:!0});var Hht=s(kv);ihe=n(Hht,"SPAN",{});var Uht=s(ihe);T(H6.$$.fragment,Uht),Uht.forEach(t),Hht.forEach(t),kDo=i(hGe),dhe=n(hGe,"SPAN",{});var Jht=s(dhe);SDo=r(Jht,"AutoModelForTokenClassification"),Jht.forEach(t),hGe.forEach(t),fje=i(f),Io=n(f,"DIV",{class:!0});var Ys=s(Io);T(U6.$$.fragment,Ys),RDo=i(Ys),Yi=n(Ys,"P",{});var YZ=s(Yi);PDo=r(YZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),rV=n(YZ,"A",{href:!0});var Yht=s(rV);BDo=r(Yht,"from_pretrained()"),Yht.forEach(t),IDo=r(YZ," class method or the "),tV=n(YZ,"A",{href:!0});var Kht=s(tV);NDo=r(Kht,"from_config()"),Kht.forEach(t),qDo=r(YZ,` class
method.`),YZ.forEach(t),jDo=i(Ys),J6=n(Ys,"P",{});var pGe=s(J6);DDo=r(pGe,"This class cannot be instantiated directly using "),che=n(pGe,"CODE",{});var Zht=s(che);GDo=r(Zht,"__init__()"),Zht.forEach(t),ODo=r(pGe," (throws an error)."),pGe.forEach(t),VDo=i(Ys),ft=n(Ys,"DIV",{class:!0});var rw=s(ft);T(Y6.$$.fragment,rw),XDo=i(rw),fhe=n(rw,"P",{});var ept=s(fhe);zDo=r(ept,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),ept.forEach(t),WDo=i(rw),Ki=n(rw,"P",{});var KZ=s(Ki);QDo=r(KZ,`Note:
Loading a model from its configuration file does `),mhe=n(KZ,"STRONG",{});var opt=s(mhe);HDo=r(opt,"not"),opt.forEach(t),UDo=r(KZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),aV=n(KZ,"A",{href:!0});var rpt=s(aV);JDo=r(rpt,"from_pretrained()"),rpt.forEach(t),YDo=r(KZ," to load the model weights."),KZ.forEach(t),KDo=i(rw),T(Sv.$$.fragment,rw),rw.forEach(t),ZDo=i(Ys),ao=n(Ys,"DIV",{class:!0});var da=s(ao);T(K6.$$.fragment,da),eGo=i(da),ghe=n(da,"P",{});var tpt=s(ghe);oGo=r(tpt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),tpt.forEach(t),rGo=i(da),Ia=n(da,"P",{});var tw=s(Ia);tGo=r(tw,"The model class to instantiate is selected based on the "),hhe=n(tw,"CODE",{});var apt=s(hhe);aGo=r(apt,"model_type"),apt.forEach(t),nGo=r(tw,` property of the config object (either
passed as an argument or loaded from `),phe=n(tw,"CODE",{});var npt=s(phe);sGo=r(npt,"pretrained_model_name_or_path"),npt.forEach(t),lGo=r(tw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_he=n(tw,"CODE",{});var spt=s(_he);iGo=r(spt,"pretrained_model_name_or_path"),spt.forEach(t),dGo=r(tw,":"),tw.forEach(t),cGo=i(da),U=n(da,"UL",{});var J=s(U);Rv=n(J,"LI",{});var m$e=s(Rv);uhe=n(m$e,"STRONG",{});var lpt=s(uhe);fGo=r(lpt,"albert"),lpt.forEach(t),mGo=r(m$e," \u2014 "),nV=n(m$e,"A",{href:!0});var ipt=s(nV);gGo=r(ipt,"AlbertForTokenClassification"),ipt.forEach(t),hGo=r(m$e," (ALBERT model)"),m$e.forEach(t),pGo=i(J),Pv=n(J,"LI",{});var g$e=s(Pv);bhe=n(g$e,"STRONG",{});var dpt=s(bhe);_Go=r(dpt,"bert"),dpt.forEach(t),uGo=r(g$e," \u2014 "),sV=n(g$e,"A",{href:!0});var cpt=s(sV);bGo=r(cpt,"BertForTokenClassification"),cpt.forEach(t),vGo=r(g$e," (BERT model)"),g$e.forEach(t),FGo=i(J),Bv=n(J,"LI",{});var h$e=s(Bv);vhe=n(h$e,"STRONG",{});var fpt=s(vhe);TGo=r(fpt,"big_bird"),fpt.forEach(t),MGo=r(h$e," \u2014 "),lV=n(h$e,"A",{href:!0});var mpt=s(lV);EGo=r(mpt,"BigBirdForTokenClassification"),mpt.forEach(t),CGo=r(h$e," (BigBird model)"),h$e.forEach(t),wGo=i(J),Iv=n(J,"LI",{});var p$e=s(Iv);Fhe=n(p$e,"STRONG",{});var gpt=s(Fhe);AGo=r(gpt,"camembert"),gpt.forEach(t),yGo=r(p$e," \u2014 "),iV=n(p$e,"A",{href:!0});var hpt=s(iV);LGo=r(hpt,"CamembertForTokenClassification"),hpt.forEach(t),xGo=r(p$e," (CamemBERT model)"),p$e.forEach(t),$Go=i(J),Nv=n(J,"LI",{});var _$e=s(Nv);The=n(_$e,"STRONG",{});var ppt=s(The);kGo=r(ppt,"canine"),ppt.forEach(t),SGo=r(_$e," \u2014 "),dV=n(_$e,"A",{href:!0});var _pt=s(dV);RGo=r(_pt,"CanineForTokenClassification"),_pt.forEach(t),PGo=r(_$e," (CANINE model)"),_$e.forEach(t),BGo=i(J),qv=n(J,"LI",{});var u$e=s(qv);Mhe=n(u$e,"STRONG",{});var upt=s(Mhe);IGo=r(upt,"convbert"),upt.forEach(t),NGo=r(u$e," \u2014 "),cV=n(u$e,"A",{href:!0});var bpt=s(cV);qGo=r(bpt,"ConvBertForTokenClassification"),bpt.forEach(t),jGo=r(u$e," (ConvBERT model)"),u$e.forEach(t),DGo=i(J),jv=n(J,"LI",{});var b$e=s(jv);Ehe=n(b$e,"STRONG",{});var vpt=s(Ehe);GGo=r(vpt,"data2vec-text"),vpt.forEach(t),OGo=r(b$e," \u2014 "),fV=n(b$e,"A",{href:!0});var Fpt=s(fV);VGo=r(Fpt,"Data2VecTextForTokenClassification"),Fpt.forEach(t),XGo=r(b$e," (Data2VecText model)"),b$e.forEach(t),zGo=i(J),Dv=n(J,"LI",{});var v$e=s(Dv);Che=n(v$e,"STRONG",{});var Tpt=s(Che);WGo=r(Tpt,"deberta"),Tpt.forEach(t),QGo=r(v$e," \u2014 "),mV=n(v$e,"A",{href:!0});var Mpt=s(mV);HGo=r(Mpt,"DebertaForTokenClassification"),Mpt.forEach(t),UGo=r(v$e," (DeBERTa model)"),v$e.forEach(t),JGo=i(J),Gv=n(J,"LI",{});var F$e=s(Gv);whe=n(F$e,"STRONG",{});var Ept=s(whe);YGo=r(Ept,"deberta-v2"),Ept.forEach(t),KGo=r(F$e," \u2014 "),gV=n(F$e,"A",{href:!0});var Cpt=s(gV);ZGo=r(Cpt,"DebertaV2ForTokenClassification"),Cpt.forEach(t),eOo=r(F$e," (DeBERTa-v2 model)"),F$e.forEach(t),oOo=i(J),Ov=n(J,"LI",{});var T$e=s(Ov);Ahe=n(T$e,"STRONG",{});var wpt=s(Ahe);rOo=r(wpt,"distilbert"),wpt.forEach(t),tOo=r(T$e," \u2014 "),hV=n(T$e,"A",{href:!0});var Apt=s(hV);aOo=r(Apt,"DistilBertForTokenClassification"),Apt.forEach(t),nOo=r(T$e," (DistilBERT model)"),T$e.forEach(t),sOo=i(J),Vv=n(J,"LI",{});var M$e=s(Vv);yhe=n(M$e,"STRONG",{});var ypt=s(yhe);lOo=r(ypt,"electra"),ypt.forEach(t),iOo=r(M$e," \u2014 "),pV=n(M$e,"A",{href:!0});var Lpt=s(pV);dOo=r(Lpt,"ElectraForTokenClassification"),Lpt.forEach(t),cOo=r(M$e," (ELECTRA model)"),M$e.forEach(t),fOo=i(J),Xv=n(J,"LI",{});var E$e=s(Xv);Lhe=n(E$e,"STRONG",{});var xpt=s(Lhe);mOo=r(xpt,"flaubert"),xpt.forEach(t),gOo=r(E$e," \u2014 "),_V=n(E$e,"A",{href:!0});var $pt=s(_V);hOo=r($pt,"FlaubertForTokenClassification"),$pt.forEach(t),pOo=r(E$e," (FlauBERT model)"),E$e.forEach(t),_Oo=i(J),zv=n(J,"LI",{});var C$e=s(zv);xhe=n(C$e,"STRONG",{});var kpt=s(xhe);uOo=r(kpt,"fnet"),kpt.forEach(t),bOo=r(C$e," \u2014 "),uV=n(C$e,"A",{href:!0});var Spt=s(uV);vOo=r(Spt,"FNetForTokenClassification"),Spt.forEach(t),FOo=r(C$e," (FNet model)"),C$e.forEach(t),TOo=i(J),Wv=n(J,"LI",{});var w$e=s(Wv);$he=n(w$e,"STRONG",{});var Rpt=s($he);MOo=r(Rpt,"funnel"),Rpt.forEach(t),EOo=r(w$e," \u2014 "),bV=n(w$e,"A",{href:!0});var Ppt=s(bV);COo=r(Ppt,"FunnelForTokenClassification"),Ppt.forEach(t),wOo=r(w$e," (Funnel Transformer model)"),w$e.forEach(t),AOo=i(J),Qv=n(J,"LI",{});var A$e=s(Qv);khe=n(A$e,"STRONG",{});var Bpt=s(khe);yOo=r(Bpt,"gpt2"),Bpt.forEach(t),LOo=r(A$e," \u2014 "),vV=n(A$e,"A",{href:!0});var Ipt=s(vV);xOo=r(Ipt,"GPT2ForTokenClassification"),Ipt.forEach(t),$Oo=r(A$e," (OpenAI GPT-2 model)"),A$e.forEach(t),kOo=i(J),Hv=n(J,"LI",{});var y$e=s(Hv);She=n(y$e,"STRONG",{});var Npt=s(She);SOo=r(Npt,"ibert"),Npt.forEach(t),ROo=r(y$e," \u2014 "),FV=n(y$e,"A",{href:!0});var qpt=s(FV);POo=r(qpt,"IBertForTokenClassification"),qpt.forEach(t),BOo=r(y$e," (I-BERT model)"),y$e.forEach(t),IOo=i(J),Uv=n(J,"LI",{});var L$e=s(Uv);Rhe=n(L$e,"STRONG",{});var jpt=s(Rhe);NOo=r(jpt,"layoutlm"),jpt.forEach(t),qOo=r(L$e," \u2014 "),TV=n(L$e,"A",{href:!0});var Dpt=s(TV);jOo=r(Dpt,"LayoutLMForTokenClassification"),Dpt.forEach(t),DOo=r(L$e," (LayoutLM model)"),L$e.forEach(t),GOo=i(J),Jv=n(J,"LI",{});var x$e=s(Jv);Phe=n(x$e,"STRONG",{});var Gpt=s(Phe);OOo=r(Gpt,"layoutlmv2"),Gpt.forEach(t),VOo=r(x$e," \u2014 "),MV=n(x$e,"A",{href:!0});var Opt=s(MV);XOo=r(Opt,"LayoutLMv2ForTokenClassification"),Opt.forEach(t),zOo=r(x$e," (LayoutLMv2 model)"),x$e.forEach(t),WOo=i(J),Yv=n(J,"LI",{});var $$e=s(Yv);Bhe=n($$e,"STRONG",{});var Vpt=s(Bhe);QOo=r(Vpt,"layoutlmv3"),Vpt.forEach(t),HOo=r($$e," \u2014 "),EV=n($$e,"A",{href:!0});var Xpt=s(EV);UOo=r(Xpt,"LayoutLMv3ForTokenClassification"),Xpt.forEach(t),JOo=r($$e," (LayoutLMv3 model)"),$$e.forEach(t),YOo=i(J),Kv=n(J,"LI",{});var k$e=s(Kv);Ihe=n(k$e,"STRONG",{});var zpt=s(Ihe);KOo=r(zpt,"longformer"),zpt.forEach(t),ZOo=r(k$e," \u2014 "),CV=n(k$e,"A",{href:!0});var Wpt=s(CV);eVo=r(Wpt,"LongformerForTokenClassification"),Wpt.forEach(t),oVo=r(k$e," (Longformer model)"),k$e.forEach(t),rVo=i(J),Zv=n(J,"LI",{});var S$e=s(Zv);Nhe=n(S$e,"STRONG",{});var Qpt=s(Nhe);tVo=r(Qpt,"megatron-bert"),Qpt.forEach(t),aVo=r(S$e," \u2014 "),wV=n(S$e,"A",{href:!0});var Hpt=s(wV);nVo=r(Hpt,"MegatronBertForTokenClassification"),Hpt.forEach(t),sVo=r(S$e," (Megatron-BERT model)"),S$e.forEach(t),lVo=i(J),e5=n(J,"LI",{});var R$e=s(e5);qhe=n(R$e,"STRONG",{});var Upt=s(qhe);iVo=r(Upt,"mobilebert"),Upt.forEach(t),dVo=r(R$e," \u2014 "),AV=n(R$e,"A",{href:!0});var Jpt=s(AV);cVo=r(Jpt,"MobileBertForTokenClassification"),Jpt.forEach(t),fVo=r(R$e," (MobileBERT model)"),R$e.forEach(t),mVo=i(J),o5=n(J,"LI",{});var P$e=s(o5);jhe=n(P$e,"STRONG",{});var Ypt=s(jhe);gVo=r(Ypt,"mpnet"),Ypt.forEach(t),hVo=r(P$e," \u2014 "),yV=n(P$e,"A",{href:!0});var Kpt=s(yV);pVo=r(Kpt,"MPNetForTokenClassification"),Kpt.forEach(t),_Vo=r(P$e," (MPNet model)"),P$e.forEach(t),uVo=i(J),r5=n(J,"LI",{});var B$e=s(r5);Dhe=n(B$e,"STRONG",{});var Zpt=s(Dhe);bVo=r(Zpt,"nystromformer"),Zpt.forEach(t),vVo=r(B$e," \u2014 "),LV=n(B$e,"A",{href:!0});var e_t=s(LV);FVo=r(e_t,"NystromformerForTokenClassification"),e_t.forEach(t),TVo=r(B$e," (Nystr\xF6mformer model)"),B$e.forEach(t),MVo=i(J),t5=n(J,"LI",{});var I$e=s(t5);Ghe=n(I$e,"STRONG",{});var o_t=s(Ghe);EVo=r(o_t,"qdqbert"),o_t.forEach(t),CVo=r(I$e," \u2014 "),xV=n(I$e,"A",{href:!0});var r_t=s(xV);wVo=r(r_t,"QDQBertForTokenClassification"),r_t.forEach(t),AVo=r(I$e," (QDQBert model)"),I$e.forEach(t),yVo=i(J),a5=n(J,"LI",{});var N$e=s(a5);Ohe=n(N$e,"STRONG",{});var t_t=s(Ohe);LVo=r(t_t,"rembert"),t_t.forEach(t),xVo=r(N$e," \u2014 "),$V=n(N$e,"A",{href:!0});var a_t=s($V);$Vo=r(a_t,"RemBertForTokenClassification"),a_t.forEach(t),kVo=r(N$e," (RemBERT model)"),N$e.forEach(t),SVo=i(J),n5=n(J,"LI",{});var q$e=s(n5);Vhe=n(q$e,"STRONG",{});var n_t=s(Vhe);RVo=r(n_t,"roberta"),n_t.forEach(t),PVo=r(q$e," \u2014 "),kV=n(q$e,"A",{href:!0});var s_t=s(kV);BVo=r(s_t,"RobertaForTokenClassification"),s_t.forEach(t),IVo=r(q$e," (RoBERTa model)"),q$e.forEach(t),NVo=i(J),s5=n(J,"LI",{});var j$e=s(s5);Xhe=n(j$e,"STRONG",{});var l_t=s(Xhe);qVo=r(l_t,"roformer"),l_t.forEach(t),jVo=r(j$e," \u2014 "),SV=n(j$e,"A",{href:!0});var i_t=s(SV);DVo=r(i_t,"RoFormerForTokenClassification"),i_t.forEach(t),GVo=r(j$e," (RoFormer model)"),j$e.forEach(t),OVo=i(J),l5=n(J,"LI",{});var D$e=s(l5);zhe=n(D$e,"STRONG",{});var d_t=s(zhe);VVo=r(d_t,"squeezebert"),d_t.forEach(t),XVo=r(D$e," \u2014 "),RV=n(D$e,"A",{href:!0});var c_t=s(RV);zVo=r(c_t,"SqueezeBertForTokenClassification"),c_t.forEach(t),WVo=r(D$e," (SqueezeBERT model)"),D$e.forEach(t),QVo=i(J),i5=n(J,"LI",{});var G$e=s(i5);Whe=n(G$e,"STRONG",{});var f_t=s(Whe);HVo=r(f_t,"xlm"),f_t.forEach(t),UVo=r(G$e," \u2014 "),PV=n(G$e,"A",{href:!0});var m_t=s(PV);JVo=r(m_t,"XLMForTokenClassification"),m_t.forEach(t),YVo=r(G$e," (XLM model)"),G$e.forEach(t),KVo=i(J),d5=n(J,"LI",{});var O$e=s(d5);Qhe=n(O$e,"STRONG",{});var g_t=s(Qhe);ZVo=r(g_t,"xlm-roberta"),g_t.forEach(t),eXo=r(O$e," \u2014 "),BV=n(O$e,"A",{href:!0});var h_t=s(BV);oXo=r(h_t,"XLMRobertaForTokenClassification"),h_t.forEach(t),rXo=r(O$e," (XLM-RoBERTa model)"),O$e.forEach(t),tXo=i(J),c5=n(J,"LI",{});var V$e=s(c5);Hhe=n(V$e,"STRONG",{});var p_t=s(Hhe);aXo=r(p_t,"xlm-roberta-xl"),p_t.forEach(t),nXo=r(V$e," \u2014 "),IV=n(V$e,"A",{href:!0});var __t=s(IV);sXo=r(__t,"XLMRobertaXLForTokenClassification"),__t.forEach(t),lXo=r(V$e," (XLM-RoBERTa-XL model)"),V$e.forEach(t),iXo=i(J),f5=n(J,"LI",{});var X$e=s(f5);Uhe=n(X$e,"STRONG",{});var u_t=s(Uhe);dXo=r(u_t,"xlnet"),u_t.forEach(t),cXo=r(X$e," \u2014 "),NV=n(X$e,"A",{href:!0});var b_t=s(NV);fXo=r(b_t,"XLNetForTokenClassification"),b_t.forEach(t),mXo=r(X$e," (XLNet model)"),X$e.forEach(t),gXo=i(J),m5=n(J,"LI",{});var z$e=s(m5);Jhe=n(z$e,"STRONG",{});var v_t=s(Jhe);hXo=r(v_t,"yoso"),v_t.forEach(t),pXo=r(z$e," \u2014 "),qV=n(z$e,"A",{href:!0});var F_t=s(qV);_Xo=r(F_t,"YosoForTokenClassification"),F_t.forEach(t),uXo=r(z$e," (YOSO model)"),z$e.forEach(t),J.forEach(t),bXo=i(da),g5=n(da,"P",{});var W$e=s(g5);vXo=r(W$e,"The model is set in evaluation mode by default using "),Yhe=n(W$e,"CODE",{});var T_t=s(Yhe);FXo=r(T_t,"model.eval()"),T_t.forEach(t),TXo=r(W$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Khe=n(W$e,"CODE",{});var M_t=s(Khe);MXo=r(M_t,"model.train()"),M_t.forEach(t),W$e.forEach(t),EXo=i(da),T(h5.$$.fragment,da),da.forEach(t),Ys.forEach(t),mje=i(f),Zi=n(f,"H2",{class:!0});var _Ge=s(Zi);p5=n(_Ge,"A",{id:!0,class:!0,href:!0});var E_t=s(p5);Zhe=n(E_t,"SPAN",{});var C_t=s(Zhe);T(Z6.$$.fragment,C_t),C_t.forEach(t),E_t.forEach(t),CXo=i(_Ge),epe=n(_Ge,"SPAN",{});var w_t=s(epe);wXo=r(w_t,"AutoModelForQuestionAnswering"),w_t.forEach(t),_Ge.forEach(t),gje=i(f),No=n(f,"DIV",{class:!0});var Ks=s(No);T(ey.$$.fragment,Ks),AXo=i(Ks),ed=n(Ks,"P",{});var ZZ=s(ed);yXo=r(ZZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),jV=n(ZZ,"A",{href:!0});var A_t=s(jV);LXo=r(A_t,"from_pretrained()"),A_t.forEach(t),xXo=r(ZZ," class method or the "),DV=n(ZZ,"A",{href:!0});var y_t=s(DV);$Xo=r(y_t,"from_config()"),y_t.forEach(t),kXo=r(ZZ,` class
method.`),ZZ.forEach(t),SXo=i(Ks),oy=n(Ks,"P",{});var uGe=s(oy);RXo=r(uGe,"This class cannot be instantiated directly using "),ope=n(uGe,"CODE",{});var L_t=s(ope);PXo=r(L_t,"__init__()"),L_t.forEach(t),BXo=r(uGe," (throws an error)."),uGe.forEach(t),IXo=i(Ks),mt=n(Ks,"DIV",{class:!0});var aw=s(mt);T(ry.$$.fragment,aw),NXo=i(aw),rpe=n(aw,"P",{});var x_t=s(rpe);qXo=r(x_t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),x_t.forEach(t),jXo=i(aw),od=n(aw,"P",{});var eee=s(od);DXo=r(eee,`Note:
Loading a model from its configuration file does `),tpe=n(eee,"STRONG",{});var $_t=s(tpe);GXo=r($_t,"not"),$_t.forEach(t),OXo=r(eee,` load the model weights. It only affects the
model\u2019s configuration. Use `),GV=n(eee,"A",{href:!0});var k_t=s(GV);VXo=r(k_t,"from_pretrained()"),k_t.forEach(t),XXo=r(eee," to load the model weights."),eee.forEach(t),zXo=i(aw),T(_5.$$.fragment,aw),aw.forEach(t),WXo=i(Ks),no=n(Ks,"DIV",{class:!0});var ca=s(no);T(ty.$$.fragment,ca),QXo=i(ca),ape=n(ca,"P",{});var S_t=s(ape);HXo=r(S_t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),S_t.forEach(t),UXo=i(ca),Na=n(ca,"P",{});var nw=s(Na);JXo=r(nw,"The model class to instantiate is selected based on the "),npe=n(nw,"CODE",{});var R_t=s(npe);YXo=r(R_t,"model_type"),R_t.forEach(t),KXo=r(nw,` property of the config object (either
passed as an argument or loaded from `),spe=n(nw,"CODE",{});var P_t=s(spe);ZXo=r(P_t,"pretrained_model_name_or_path"),P_t.forEach(t),ezo=r(nw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lpe=n(nw,"CODE",{});var B_t=s(lpe);ozo=r(B_t,"pretrained_model_name_or_path"),B_t.forEach(t),rzo=r(nw,":"),nw.forEach(t),tzo=i(ca),V=n(ca,"UL",{});var X=s(V);u5=n(X,"LI",{});var Q$e=s(u5);ipe=n(Q$e,"STRONG",{});var I_t=s(ipe);azo=r(I_t,"albert"),I_t.forEach(t),nzo=r(Q$e," \u2014 "),OV=n(Q$e,"A",{href:!0});var N_t=s(OV);szo=r(N_t,"AlbertForQuestionAnswering"),N_t.forEach(t),lzo=r(Q$e," (ALBERT model)"),Q$e.forEach(t),izo=i(X),b5=n(X,"LI",{});var H$e=s(b5);dpe=n(H$e,"STRONG",{});var q_t=s(dpe);dzo=r(q_t,"bart"),q_t.forEach(t),czo=r(H$e," \u2014 "),VV=n(H$e,"A",{href:!0});var j_t=s(VV);fzo=r(j_t,"BartForQuestionAnswering"),j_t.forEach(t),mzo=r(H$e," (BART model)"),H$e.forEach(t),gzo=i(X),v5=n(X,"LI",{});var U$e=s(v5);cpe=n(U$e,"STRONG",{});var D_t=s(cpe);hzo=r(D_t,"bert"),D_t.forEach(t),pzo=r(U$e," \u2014 "),XV=n(U$e,"A",{href:!0});var G_t=s(XV);_zo=r(G_t,"BertForQuestionAnswering"),G_t.forEach(t),uzo=r(U$e," (BERT model)"),U$e.forEach(t),bzo=i(X),F5=n(X,"LI",{});var J$e=s(F5);fpe=n(J$e,"STRONG",{});var O_t=s(fpe);vzo=r(O_t,"big_bird"),O_t.forEach(t),Fzo=r(J$e," \u2014 "),zV=n(J$e,"A",{href:!0});var V_t=s(zV);Tzo=r(V_t,"BigBirdForQuestionAnswering"),V_t.forEach(t),Mzo=r(J$e," (BigBird model)"),J$e.forEach(t),Ezo=i(X),T5=n(X,"LI",{});var Y$e=s(T5);mpe=n(Y$e,"STRONG",{});var X_t=s(mpe);Czo=r(X_t,"bigbird_pegasus"),X_t.forEach(t),wzo=r(Y$e," \u2014 "),WV=n(Y$e,"A",{href:!0});var z_t=s(WV);Azo=r(z_t,"BigBirdPegasusForQuestionAnswering"),z_t.forEach(t),yzo=r(Y$e," (BigBird-Pegasus model)"),Y$e.forEach(t),Lzo=i(X),M5=n(X,"LI",{});var K$e=s(M5);gpe=n(K$e,"STRONG",{});var W_t=s(gpe);xzo=r(W_t,"camembert"),W_t.forEach(t),$zo=r(K$e," \u2014 "),QV=n(K$e,"A",{href:!0});var Q_t=s(QV);kzo=r(Q_t,"CamembertForQuestionAnswering"),Q_t.forEach(t),Szo=r(K$e," (CamemBERT model)"),K$e.forEach(t),Rzo=i(X),E5=n(X,"LI",{});var Z$e=s(E5);hpe=n(Z$e,"STRONG",{});var H_t=s(hpe);Pzo=r(H_t,"canine"),H_t.forEach(t),Bzo=r(Z$e," \u2014 "),HV=n(Z$e,"A",{href:!0});var U_t=s(HV);Izo=r(U_t,"CanineForQuestionAnswering"),U_t.forEach(t),Nzo=r(Z$e," (CANINE model)"),Z$e.forEach(t),qzo=i(X),C5=n(X,"LI",{});var eke=s(C5);ppe=n(eke,"STRONG",{});var J_t=s(ppe);jzo=r(J_t,"convbert"),J_t.forEach(t),Dzo=r(eke," \u2014 "),UV=n(eke,"A",{href:!0});var Y_t=s(UV);Gzo=r(Y_t,"ConvBertForQuestionAnswering"),Y_t.forEach(t),Ozo=r(eke," (ConvBERT model)"),eke.forEach(t),Vzo=i(X),w5=n(X,"LI",{});var oke=s(w5);_pe=n(oke,"STRONG",{});var K_t=s(_pe);Xzo=r(K_t,"data2vec-text"),K_t.forEach(t),zzo=r(oke," \u2014 "),JV=n(oke,"A",{href:!0});var Z_t=s(JV);Wzo=r(Z_t,"Data2VecTextForQuestionAnswering"),Z_t.forEach(t),Qzo=r(oke," (Data2VecText model)"),oke.forEach(t),Hzo=i(X),A5=n(X,"LI",{});var rke=s(A5);upe=n(rke,"STRONG",{});var eut=s(upe);Uzo=r(eut,"deberta"),eut.forEach(t),Jzo=r(rke," \u2014 "),YV=n(rke,"A",{href:!0});var out=s(YV);Yzo=r(out,"DebertaForQuestionAnswering"),out.forEach(t),Kzo=r(rke," (DeBERTa model)"),rke.forEach(t),Zzo=i(X),y5=n(X,"LI",{});var tke=s(y5);bpe=n(tke,"STRONG",{});var rut=s(bpe);eWo=r(rut,"deberta-v2"),rut.forEach(t),oWo=r(tke," \u2014 "),KV=n(tke,"A",{href:!0});var tut=s(KV);rWo=r(tut,"DebertaV2ForQuestionAnswering"),tut.forEach(t),tWo=r(tke," (DeBERTa-v2 model)"),tke.forEach(t),aWo=i(X),L5=n(X,"LI",{});var ake=s(L5);vpe=n(ake,"STRONG",{});var aut=s(vpe);nWo=r(aut,"distilbert"),aut.forEach(t),sWo=r(ake," \u2014 "),ZV=n(ake,"A",{href:!0});var nut=s(ZV);lWo=r(nut,"DistilBertForQuestionAnswering"),nut.forEach(t),iWo=r(ake," (DistilBERT model)"),ake.forEach(t),dWo=i(X),x5=n(X,"LI",{});var nke=s(x5);Fpe=n(nke,"STRONG",{});var sut=s(Fpe);cWo=r(sut,"electra"),sut.forEach(t),fWo=r(nke," \u2014 "),eX=n(nke,"A",{href:!0});var lut=s(eX);mWo=r(lut,"ElectraForQuestionAnswering"),lut.forEach(t),gWo=r(nke," (ELECTRA model)"),nke.forEach(t),hWo=i(X),$5=n(X,"LI",{});var ske=s($5);Tpe=n(ske,"STRONG",{});var iut=s(Tpe);pWo=r(iut,"flaubert"),iut.forEach(t),_Wo=r(ske," \u2014 "),oX=n(ske,"A",{href:!0});var dut=s(oX);uWo=r(dut,"FlaubertForQuestionAnsweringSimple"),dut.forEach(t),bWo=r(ske," (FlauBERT model)"),ske.forEach(t),vWo=i(X),k5=n(X,"LI",{});var lke=s(k5);Mpe=n(lke,"STRONG",{});var cut=s(Mpe);FWo=r(cut,"fnet"),cut.forEach(t),TWo=r(lke," \u2014 "),rX=n(lke,"A",{href:!0});var fut=s(rX);MWo=r(fut,"FNetForQuestionAnswering"),fut.forEach(t),EWo=r(lke," (FNet model)"),lke.forEach(t),CWo=i(X),S5=n(X,"LI",{});var ike=s(S5);Epe=n(ike,"STRONG",{});var mut=s(Epe);wWo=r(mut,"funnel"),mut.forEach(t),AWo=r(ike," \u2014 "),tX=n(ike,"A",{href:!0});var gut=s(tX);yWo=r(gut,"FunnelForQuestionAnswering"),gut.forEach(t),LWo=r(ike," (Funnel Transformer model)"),ike.forEach(t),xWo=i(X),R5=n(X,"LI",{});var dke=s(R5);Cpe=n(dke,"STRONG",{});var hut=s(Cpe);$Wo=r(hut,"gptj"),hut.forEach(t),kWo=r(dke," \u2014 "),aX=n(dke,"A",{href:!0});var put=s(aX);SWo=r(put,"GPTJForQuestionAnswering"),put.forEach(t),RWo=r(dke," (GPT-J model)"),dke.forEach(t),PWo=i(X),P5=n(X,"LI",{});var cke=s(P5);wpe=n(cke,"STRONG",{});var _ut=s(wpe);BWo=r(_ut,"ibert"),_ut.forEach(t),IWo=r(cke," \u2014 "),nX=n(cke,"A",{href:!0});var uut=s(nX);NWo=r(uut,"IBertForQuestionAnswering"),uut.forEach(t),qWo=r(cke," (I-BERT model)"),cke.forEach(t),jWo=i(X),B5=n(X,"LI",{});var fke=s(B5);Ape=n(fke,"STRONG",{});var but=s(Ape);DWo=r(but,"layoutlmv2"),but.forEach(t),GWo=r(fke," \u2014 "),sX=n(fke,"A",{href:!0});var vut=s(sX);OWo=r(vut,"LayoutLMv2ForQuestionAnswering"),vut.forEach(t),VWo=r(fke," (LayoutLMv2 model)"),fke.forEach(t),XWo=i(X),I5=n(X,"LI",{});var mke=s(I5);ype=n(mke,"STRONG",{});var Fut=s(ype);zWo=r(Fut,"layoutlmv3"),Fut.forEach(t),WWo=r(mke," \u2014 "),lX=n(mke,"A",{href:!0});var Tut=s(lX);QWo=r(Tut,"LayoutLMv3ForQuestionAnswering"),Tut.forEach(t),HWo=r(mke," (LayoutLMv3 model)"),mke.forEach(t),UWo=i(X),N5=n(X,"LI",{});var gke=s(N5);Lpe=n(gke,"STRONG",{});var Mut=s(Lpe);JWo=r(Mut,"led"),Mut.forEach(t),YWo=r(gke," \u2014 "),iX=n(gke,"A",{href:!0});var Eut=s(iX);KWo=r(Eut,"LEDForQuestionAnswering"),Eut.forEach(t),ZWo=r(gke," (LED model)"),gke.forEach(t),eQo=i(X),q5=n(X,"LI",{});var hke=s(q5);xpe=n(hke,"STRONG",{});var Cut=s(xpe);oQo=r(Cut,"longformer"),Cut.forEach(t),rQo=r(hke," \u2014 "),dX=n(hke,"A",{href:!0});var wut=s(dX);tQo=r(wut,"LongformerForQuestionAnswering"),wut.forEach(t),aQo=r(hke," (Longformer model)"),hke.forEach(t),nQo=i(X),j5=n(X,"LI",{});var pke=s(j5);$pe=n(pke,"STRONG",{});var Aut=s($pe);sQo=r(Aut,"lxmert"),Aut.forEach(t),lQo=r(pke," \u2014 "),cX=n(pke,"A",{href:!0});var yut=s(cX);iQo=r(yut,"LxmertForQuestionAnswering"),yut.forEach(t),dQo=r(pke," (LXMERT model)"),pke.forEach(t),cQo=i(X),D5=n(X,"LI",{});var _ke=s(D5);kpe=n(_ke,"STRONG",{});var Lut=s(kpe);fQo=r(Lut,"mbart"),Lut.forEach(t),mQo=r(_ke," \u2014 "),fX=n(_ke,"A",{href:!0});var xut=s(fX);gQo=r(xut,"MBartForQuestionAnswering"),xut.forEach(t),hQo=r(_ke," (mBART model)"),_ke.forEach(t),pQo=i(X),G5=n(X,"LI",{});var uke=s(G5);Spe=n(uke,"STRONG",{});var $ut=s(Spe);_Qo=r($ut,"megatron-bert"),$ut.forEach(t),uQo=r(uke," \u2014 "),mX=n(uke,"A",{href:!0});var kut=s(mX);bQo=r(kut,"MegatronBertForQuestionAnswering"),kut.forEach(t),vQo=r(uke," (Megatron-BERT model)"),uke.forEach(t),FQo=i(X),O5=n(X,"LI",{});var bke=s(O5);Rpe=n(bke,"STRONG",{});var Sut=s(Rpe);TQo=r(Sut,"mobilebert"),Sut.forEach(t),MQo=r(bke," \u2014 "),gX=n(bke,"A",{href:!0});var Rut=s(gX);EQo=r(Rut,"MobileBertForQuestionAnswering"),Rut.forEach(t),CQo=r(bke," (MobileBERT model)"),bke.forEach(t),wQo=i(X),V5=n(X,"LI",{});var vke=s(V5);Ppe=n(vke,"STRONG",{});var Put=s(Ppe);AQo=r(Put,"mpnet"),Put.forEach(t),yQo=r(vke," \u2014 "),hX=n(vke,"A",{href:!0});var But=s(hX);LQo=r(But,"MPNetForQuestionAnswering"),But.forEach(t),xQo=r(vke," (MPNet model)"),vke.forEach(t),$Qo=i(X),X5=n(X,"LI",{});var Fke=s(X5);Bpe=n(Fke,"STRONG",{});var Iut=s(Bpe);kQo=r(Iut,"nystromformer"),Iut.forEach(t),SQo=r(Fke," \u2014 "),pX=n(Fke,"A",{href:!0});var Nut=s(pX);RQo=r(Nut,"NystromformerForQuestionAnswering"),Nut.forEach(t),PQo=r(Fke," (Nystr\xF6mformer model)"),Fke.forEach(t),BQo=i(X),z5=n(X,"LI",{});var Tke=s(z5);Ipe=n(Tke,"STRONG",{});var qut=s(Ipe);IQo=r(qut,"qdqbert"),qut.forEach(t),NQo=r(Tke," \u2014 "),_X=n(Tke,"A",{href:!0});var jut=s(_X);qQo=r(jut,"QDQBertForQuestionAnswering"),jut.forEach(t),jQo=r(Tke," (QDQBert model)"),Tke.forEach(t),DQo=i(X),W5=n(X,"LI",{});var Mke=s(W5);Npe=n(Mke,"STRONG",{});var Dut=s(Npe);GQo=r(Dut,"reformer"),Dut.forEach(t),OQo=r(Mke," \u2014 "),uX=n(Mke,"A",{href:!0});var Gut=s(uX);VQo=r(Gut,"ReformerForQuestionAnswering"),Gut.forEach(t),XQo=r(Mke," (Reformer model)"),Mke.forEach(t),zQo=i(X),Q5=n(X,"LI",{});var Eke=s(Q5);qpe=n(Eke,"STRONG",{});var Out=s(qpe);WQo=r(Out,"rembert"),Out.forEach(t),QQo=r(Eke," \u2014 "),bX=n(Eke,"A",{href:!0});var Vut=s(bX);HQo=r(Vut,"RemBertForQuestionAnswering"),Vut.forEach(t),UQo=r(Eke," (RemBERT model)"),Eke.forEach(t),JQo=i(X),H5=n(X,"LI",{});var Cke=s(H5);jpe=n(Cke,"STRONG",{});var Xut=s(jpe);YQo=r(Xut,"roberta"),Xut.forEach(t),KQo=r(Cke," \u2014 "),vX=n(Cke,"A",{href:!0});var zut=s(vX);ZQo=r(zut,"RobertaForQuestionAnswering"),zut.forEach(t),eHo=r(Cke," (RoBERTa model)"),Cke.forEach(t),oHo=i(X),U5=n(X,"LI",{});var wke=s(U5);Dpe=n(wke,"STRONG",{});var Wut=s(Dpe);rHo=r(Wut,"roformer"),Wut.forEach(t),tHo=r(wke," \u2014 "),FX=n(wke,"A",{href:!0});var Qut=s(FX);aHo=r(Qut,"RoFormerForQuestionAnswering"),Qut.forEach(t),nHo=r(wke," (RoFormer model)"),wke.forEach(t),sHo=i(X),J5=n(X,"LI",{});var Ake=s(J5);Gpe=n(Ake,"STRONG",{});var Hut=s(Gpe);lHo=r(Hut,"splinter"),Hut.forEach(t),iHo=r(Ake," \u2014 "),TX=n(Ake,"A",{href:!0});var Uut=s(TX);dHo=r(Uut,"SplinterForQuestionAnswering"),Uut.forEach(t),cHo=r(Ake," (Splinter model)"),Ake.forEach(t),fHo=i(X),Y5=n(X,"LI",{});var yke=s(Y5);Ope=n(yke,"STRONG",{});var Jut=s(Ope);mHo=r(Jut,"squeezebert"),Jut.forEach(t),gHo=r(yke," \u2014 "),MX=n(yke,"A",{href:!0});var Yut=s(MX);hHo=r(Yut,"SqueezeBertForQuestionAnswering"),Yut.forEach(t),pHo=r(yke," (SqueezeBERT model)"),yke.forEach(t),_Ho=i(X),K5=n(X,"LI",{});var Lke=s(K5);Vpe=n(Lke,"STRONG",{});var Kut=s(Vpe);uHo=r(Kut,"xlm"),Kut.forEach(t),bHo=r(Lke," \u2014 "),EX=n(Lke,"A",{href:!0});var Zut=s(EX);vHo=r(Zut,"XLMForQuestionAnsweringSimple"),Zut.forEach(t),FHo=r(Lke," (XLM model)"),Lke.forEach(t),THo=i(X),Z5=n(X,"LI",{});var xke=s(Z5);Xpe=n(xke,"STRONG",{});var e1t=s(Xpe);MHo=r(e1t,"xlm-roberta"),e1t.forEach(t),EHo=r(xke," \u2014 "),CX=n(xke,"A",{href:!0});var o1t=s(CX);CHo=r(o1t,"XLMRobertaForQuestionAnswering"),o1t.forEach(t),wHo=r(xke," (XLM-RoBERTa model)"),xke.forEach(t),AHo=i(X),e3=n(X,"LI",{});var $ke=s(e3);zpe=n($ke,"STRONG",{});var r1t=s(zpe);yHo=r(r1t,"xlm-roberta-xl"),r1t.forEach(t),LHo=r($ke," \u2014 "),wX=n($ke,"A",{href:!0});var t1t=s(wX);xHo=r(t1t,"XLMRobertaXLForQuestionAnswering"),t1t.forEach(t),$Ho=r($ke," (XLM-RoBERTa-XL model)"),$ke.forEach(t),kHo=i(X),o3=n(X,"LI",{});var kke=s(o3);Wpe=n(kke,"STRONG",{});var a1t=s(Wpe);SHo=r(a1t,"xlnet"),a1t.forEach(t),RHo=r(kke," \u2014 "),AX=n(kke,"A",{href:!0});var n1t=s(AX);PHo=r(n1t,"XLNetForQuestionAnsweringSimple"),n1t.forEach(t),BHo=r(kke," (XLNet model)"),kke.forEach(t),IHo=i(X),r3=n(X,"LI",{});var Ske=s(r3);Qpe=n(Ske,"STRONG",{});var s1t=s(Qpe);NHo=r(s1t,"yoso"),s1t.forEach(t),qHo=r(Ske," \u2014 "),yX=n(Ske,"A",{href:!0});var l1t=s(yX);jHo=r(l1t,"YosoForQuestionAnswering"),l1t.forEach(t),DHo=r(Ske," (YOSO model)"),Ske.forEach(t),X.forEach(t),GHo=i(ca),t3=n(ca,"P",{});var Rke=s(t3);OHo=r(Rke,"The model is set in evaluation mode by default using "),Hpe=n(Rke,"CODE",{});var i1t=s(Hpe);VHo=r(i1t,"model.eval()"),i1t.forEach(t),XHo=r(Rke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Upe=n(Rke,"CODE",{});var d1t=s(Upe);zHo=r(d1t,"model.train()"),d1t.forEach(t),Rke.forEach(t),WHo=i(ca),T(a3.$$.fragment,ca),ca.forEach(t),Ks.forEach(t),hje=i(f),rd=n(f,"H2",{class:!0});var bGe=s(rd);n3=n(bGe,"A",{id:!0,class:!0,href:!0});var c1t=s(n3);Jpe=n(c1t,"SPAN",{});var f1t=s(Jpe);T(ay.$$.fragment,f1t),f1t.forEach(t),c1t.forEach(t),QHo=i(bGe),Ype=n(bGe,"SPAN",{});var m1t=s(Ype);HHo=r(m1t,"AutoModelForTableQuestionAnswering"),m1t.forEach(t),bGe.forEach(t),pje=i(f),qo=n(f,"DIV",{class:!0});var Zs=s(qo);T(ny.$$.fragment,Zs),UHo=i(Zs),td=n(Zs,"P",{});var oee=s(td);JHo=r(oee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),LX=n(oee,"A",{href:!0});var g1t=s(LX);YHo=r(g1t,"from_pretrained()"),g1t.forEach(t),KHo=r(oee," class method or the "),xX=n(oee,"A",{href:!0});var h1t=s(xX);ZHo=r(h1t,"from_config()"),h1t.forEach(t),eUo=r(oee,` class
method.`),oee.forEach(t),oUo=i(Zs),sy=n(Zs,"P",{});var vGe=s(sy);rUo=r(vGe,"This class cannot be instantiated directly using "),Kpe=n(vGe,"CODE",{});var p1t=s(Kpe);tUo=r(p1t,"__init__()"),p1t.forEach(t),aUo=r(vGe," (throws an error)."),vGe.forEach(t),nUo=i(Zs),gt=n(Zs,"DIV",{class:!0});var sw=s(gt);T(ly.$$.fragment,sw),sUo=i(sw),Zpe=n(sw,"P",{});var _1t=s(Zpe);lUo=r(_1t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),_1t.forEach(t),iUo=i(sw),ad=n(sw,"P",{});var ree=s(ad);dUo=r(ree,`Note:
Loading a model from its configuration file does `),e_e=n(ree,"STRONG",{});var u1t=s(e_e);cUo=r(u1t,"not"),u1t.forEach(t),fUo=r(ree,` load the model weights. It only affects the
model\u2019s configuration. Use `),$X=n(ree,"A",{href:!0});var b1t=s($X);mUo=r(b1t,"from_pretrained()"),b1t.forEach(t),gUo=r(ree," to load the model weights."),ree.forEach(t),hUo=i(sw),T(s3.$$.fragment,sw),sw.forEach(t),pUo=i(Zs),so=n(Zs,"DIV",{class:!0});var fa=s(so);T(iy.$$.fragment,fa),_Uo=i(fa),o_e=n(fa,"P",{});var v1t=s(o_e);uUo=r(v1t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),v1t.forEach(t),bUo=i(fa),qa=n(fa,"P",{});var lw=s(qa);vUo=r(lw,"The model class to instantiate is selected based on the "),r_e=n(lw,"CODE",{});var F1t=s(r_e);FUo=r(F1t,"model_type"),F1t.forEach(t),TUo=r(lw,` property of the config object (either
passed as an argument or loaded from `),t_e=n(lw,"CODE",{});var T1t=s(t_e);MUo=r(T1t,"pretrained_model_name_or_path"),T1t.forEach(t),EUo=r(lw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a_e=n(lw,"CODE",{});var M1t=s(a_e);CUo=r(M1t,"pretrained_model_name_or_path"),M1t.forEach(t),wUo=r(lw,":"),lw.forEach(t),AUo=i(fa),n_e=n(fa,"UL",{});var E1t=s(n_e);l3=n(E1t,"LI",{});var Pke=s(l3);s_e=n(Pke,"STRONG",{});var C1t=s(s_e);yUo=r(C1t,"tapas"),C1t.forEach(t),LUo=r(Pke," \u2014 "),kX=n(Pke,"A",{href:!0});var w1t=s(kX);xUo=r(w1t,"TapasForQuestionAnswering"),w1t.forEach(t),$Uo=r(Pke," (TAPAS model)"),Pke.forEach(t),E1t.forEach(t),kUo=i(fa),i3=n(fa,"P",{});var Bke=s(i3);SUo=r(Bke,"The model is set in evaluation mode by default using "),l_e=n(Bke,"CODE",{});var A1t=s(l_e);RUo=r(A1t,"model.eval()"),A1t.forEach(t),PUo=r(Bke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),i_e=n(Bke,"CODE",{});var y1t=s(i_e);BUo=r(y1t,"model.train()"),y1t.forEach(t),Bke.forEach(t),IUo=i(fa),T(d3.$$.fragment,fa),fa.forEach(t),Zs.forEach(t),_je=i(f),nd=n(f,"H2",{class:!0});var FGe=s(nd);c3=n(FGe,"A",{id:!0,class:!0,href:!0});var L1t=s(c3);d_e=n(L1t,"SPAN",{});var x1t=s(d_e);T(dy.$$.fragment,x1t),x1t.forEach(t),L1t.forEach(t),NUo=i(FGe),c_e=n(FGe,"SPAN",{});var $1t=s(c_e);qUo=r($1t,"AutoModelForImageClassification"),$1t.forEach(t),FGe.forEach(t),uje=i(f),jo=n(f,"DIV",{class:!0});var el=s(jo);T(cy.$$.fragment,el),jUo=i(el),sd=n(el,"P",{});var tee=s(sd);DUo=r(tee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),SX=n(tee,"A",{href:!0});var k1t=s(SX);GUo=r(k1t,"from_pretrained()"),k1t.forEach(t),OUo=r(tee," class method or the "),RX=n(tee,"A",{href:!0});var S1t=s(RX);VUo=r(S1t,"from_config()"),S1t.forEach(t),XUo=r(tee,` class
method.`),tee.forEach(t),zUo=i(el),fy=n(el,"P",{});var TGe=s(fy);WUo=r(TGe,"This class cannot be instantiated directly using "),f_e=n(TGe,"CODE",{});var R1t=s(f_e);QUo=r(R1t,"__init__()"),R1t.forEach(t),HUo=r(TGe," (throws an error)."),TGe.forEach(t),UUo=i(el),ht=n(el,"DIV",{class:!0});var iw=s(ht);T(my.$$.fragment,iw),JUo=i(iw),m_e=n(iw,"P",{});var P1t=s(m_e);YUo=r(P1t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),P1t.forEach(t),KUo=i(iw),ld=n(iw,"P",{});var aee=s(ld);ZUo=r(aee,`Note:
Loading a model from its configuration file does `),g_e=n(aee,"STRONG",{});var B1t=s(g_e);eJo=r(B1t,"not"),B1t.forEach(t),oJo=r(aee,` load the model weights. It only affects the
model\u2019s configuration. Use `),PX=n(aee,"A",{href:!0});var I1t=s(PX);rJo=r(I1t,"from_pretrained()"),I1t.forEach(t),tJo=r(aee," to load the model weights."),aee.forEach(t),aJo=i(iw),T(f3.$$.fragment,iw),iw.forEach(t),nJo=i(el),lo=n(el,"DIV",{class:!0});var ma=s(lo);T(gy.$$.fragment,ma),sJo=i(ma),h_e=n(ma,"P",{});var N1t=s(h_e);lJo=r(N1t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),N1t.forEach(t),iJo=i(ma),ja=n(ma,"P",{});var dw=s(ja);dJo=r(dw,"The model class to instantiate is selected based on the "),p_e=n(dw,"CODE",{});var q1t=s(p_e);cJo=r(q1t,"model_type"),q1t.forEach(t),fJo=r(dw,` property of the config object (either
passed as an argument or loaded from `),__e=n(dw,"CODE",{});var j1t=s(__e);mJo=r(j1t,"pretrained_model_name_or_path"),j1t.forEach(t),gJo=r(dw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u_e=n(dw,"CODE",{});var D1t=s(u_e);hJo=r(D1t,"pretrained_model_name_or_path"),D1t.forEach(t),pJo=r(dw,":"),dw.forEach(t),_Jo=i(ma),ve=n(ma,"UL",{});var Te=s(ve);m3=n(Te,"LI",{});var Ike=s(m3);b_e=n(Ike,"STRONG",{});var G1t=s(b_e);uJo=r(G1t,"beit"),G1t.forEach(t),bJo=r(Ike," \u2014 "),BX=n(Ike,"A",{href:!0});var O1t=s(BX);vJo=r(O1t,"BeitForImageClassification"),O1t.forEach(t),FJo=r(Ike," (BEiT model)"),Ike.forEach(t),TJo=i(Te),g3=n(Te,"LI",{});var Nke=s(g3);v_e=n(Nke,"STRONG",{});var V1t=s(v_e);MJo=r(V1t,"convnext"),V1t.forEach(t),EJo=r(Nke," \u2014 "),IX=n(Nke,"A",{href:!0});var X1t=s(IX);CJo=r(X1t,"ConvNextForImageClassification"),X1t.forEach(t),wJo=r(Nke," (ConvNeXT model)"),Nke.forEach(t),AJo=i(Te),h3=n(Te,"LI",{});var qke=s(h3);F_e=n(qke,"STRONG",{});var z1t=s(F_e);yJo=r(z1t,"cvt"),z1t.forEach(t),LJo=r(qke," \u2014 "),NX=n(qke,"A",{href:!0});var W1t=s(NX);xJo=r(W1t,"CvtForImageClassification"),W1t.forEach(t),$Jo=r(qke," (CvT model)"),qke.forEach(t),kJo=i(Te),p3=n(Te,"LI",{});var jke=s(p3);T_e=n(jke,"STRONG",{});var Q1t=s(T_e);SJo=r(Q1t,"data2vec-vision"),Q1t.forEach(t),RJo=r(jke," \u2014 "),qX=n(jke,"A",{href:!0});var H1t=s(qX);PJo=r(H1t,"Data2VecVisionForImageClassification"),H1t.forEach(t),BJo=r(jke," (Data2VecVision model)"),jke.forEach(t),IJo=i(Te),Bs=n(Te,"LI",{});var K$=s(Bs);M_e=n(K$,"STRONG",{});var U1t=s(M_e);NJo=r(U1t,"deit"),U1t.forEach(t),qJo=r(K$," \u2014 "),jX=n(K$,"A",{href:!0});var J1t=s(jX);jJo=r(J1t,"DeiTForImageClassification"),J1t.forEach(t),DJo=r(K$," or "),DX=n(K$,"A",{href:!0});var Y1t=s(DX);GJo=r(Y1t,"DeiTForImageClassificationWithTeacher"),Y1t.forEach(t),OJo=r(K$," (DeiT model)"),K$.forEach(t),VJo=i(Te),_3=n(Te,"LI",{});var Dke=s(_3);E_e=n(Dke,"STRONG",{});var K1t=s(E_e);XJo=r(K1t,"imagegpt"),K1t.forEach(t),zJo=r(Dke," \u2014 "),GX=n(Dke,"A",{href:!0});var Z1t=s(GX);WJo=r(Z1t,"ImageGPTForImageClassification"),Z1t.forEach(t),QJo=r(Dke," (ImageGPT model)"),Dke.forEach(t),HJo=i(Te),Is=n(Te,"LI",{});var Z$=s(Is);C_e=n(Z$,"STRONG",{});var ebt=s(C_e);UJo=r(ebt,"levit"),ebt.forEach(t),JJo=r(Z$," \u2014 "),OX=n(Z$,"A",{href:!0});var obt=s(OX);YJo=r(obt,"LevitForImageClassification"),obt.forEach(t),KJo=r(Z$," or "),VX=n(Z$,"A",{href:!0});var rbt=s(VX);ZJo=r(rbt,"LevitForImageClassificationWithTeacher"),rbt.forEach(t),eYo=r(Z$," (LeViT model)"),Z$.forEach(t),oYo=i(Te),pt=n(Te,"LI",{});var pf=s(pt);w_e=n(pf,"STRONG",{});var tbt=s(w_e);rYo=r(tbt,"perceiver"),tbt.forEach(t),tYo=r(pf," \u2014 "),XX=n(pf,"A",{href:!0});var abt=s(XX);aYo=r(abt,"PerceiverForImageClassificationLearned"),abt.forEach(t),nYo=r(pf," or "),zX=n(pf,"A",{href:!0});var nbt=s(zX);sYo=r(nbt,"PerceiverForImageClassificationFourier"),nbt.forEach(t),lYo=r(pf," or "),WX=n(pf,"A",{href:!0});var sbt=s(WX);iYo=r(sbt,"PerceiverForImageClassificationConvProcessing"),sbt.forEach(t),dYo=r(pf," (Perceiver model)"),pf.forEach(t),cYo=i(Te),u3=n(Te,"LI",{});var Gke=s(u3);A_e=n(Gke,"STRONG",{});var lbt=s(A_e);fYo=r(lbt,"poolformer"),lbt.forEach(t),mYo=r(Gke," \u2014 "),QX=n(Gke,"A",{href:!0});var ibt=s(QX);gYo=r(ibt,"PoolFormerForImageClassification"),ibt.forEach(t),hYo=r(Gke," (PoolFormer model)"),Gke.forEach(t),pYo=i(Te),b3=n(Te,"LI",{});var Oke=s(b3);y_e=n(Oke,"STRONG",{});var dbt=s(y_e);_Yo=r(dbt,"regnet"),dbt.forEach(t),uYo=r(Oke," \u2014 "),HX=n(Oke,"A",{href:!0});var cbt=s(HX);bYo=r(cbt,"RegNetForImageClassification"),cbt.forEach(t),vYo=r(Oke," (RegNet model)"),Oke.forEach(t),FYo=i(Te),v3=n(Te,"LI",{});var Vke=s(v3);L_e=n(Vke,"STRONG",{});var fbt=s(L_e);TYo=r(fbt,"resnet"),fbt.forEach(t),MYo=r(Vke," \u2014 "),UX=n(Vke,"A",{href:!0});var mbt=s(UX);EYo=r(mbt,"ResNetForImageClassification"),mbt.forEach(t),CYo=r(Vke," (ResNet model)"),Vke.forEach(t),wYo=i(Te),F3=n(Te,"LI",{});var Xke=s(F3);x_e=n(Xke,"STRONG",{});var gbt=s(x_e);AYo=r(gbt,"segformer"),gbt.forEach(t),yYo=r(Xke," \u2014 "),JX=n(Xke,"A",{href:!0});var hbt=s(JX);LYo=r(hbt,"SegformerForImageClassification"),hbt.forEach(t),xYo=r(Xke," (SegFormer model)"),Xke.forEach(t),$Yo=i(Te),T3=n(Te,"LI",{});var zke=s(T3);$_e=n(zke,"STRONG",{});var pbt=s($_e);kYo=r(pbt,"swin"),pbt.forEach(t),SYo=r(zke," \u2014 "),YX=n(zke,"A",{href:!0});var _bt=s(YX);RYo=r(_bt,"SwinForImageClassification"),_bt.forEach(t),PYo=r(zke," (Swin Transformer model)"),zke.forEach(t),BYo=i(Te),M3=n(Te,"LI",{});var Wke=s(M3);k_e=n(Wke,"STRONG",{});var ubt=s(k_e);IYo=r(ubt,"van"),ubt.forEach(t),NYo=r(Wke," \u2014 "),KX=n(Wke,"A",{href:!0});var bbt=s(KX);qYo=r(bbt,"VanForImageClassification"),bbt.forEach(t),jYo=r(Wke," (VAN model)"),Wke.forEach(t),DYo=i(Te),E3=n(Te,"LI",{});var Qke=s(E3);S_e=n(Qke,"STRONG",{});var vbt=s(S_e);GYo=r(vbt,"vit"),vbt.forEach(t),OYo=r(Qke," \u2014 "),ZX=n(Qke,"A",{href:!0});var Fbt=s(ZX);VYo=r(Fbt,"ViTForImageClassification"),Fbt.forEach(t),XYo=r(Qke," (ViT model)"),Qke.forEach(t),Te.forEach(t),zYo=i(ma),C3=n(ma,"P",{});var Hke=s(C3);WYo=r(Hke,"The model is set in evaluation mode by default using "),R_e=n(Hke,"CODE",{});var Tbt=s(R_e);QYo=r(Tbt,"model.eval()"),Tbt.forEach(t),HYo=r(Hke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),P_e=n(Hke,"CODE",{});var Mbt=s(P_e);UYo=r(Mbt,"model.train()"),Mbt.forEach(t),Hke.forEach(t),JYo=i(ma),T(w3.$$.fragment,ma),ma.forEach(t),el.forEach(t),bje=i(f),id=n(f,"H2",{class:!0});var MGe=s(id);A3=n(MGe,"A",{id:!0,class:!0,href:!0});var Ebt=s(A3);B_e=n(Ebt,"SPAN",{});var Cbt=s(B_e);T(hy.$$.fragment,Cbt),Cbt.forEach(t),Ebt.forEach(t),YYo=i(MGe),I_e=n(MGe,"SPAN",{});var wbt=s(I_e);KYo=r(wbt,"AutoModelForVision2Seq"),wbt.forEach(t),MGe.forEach(t),vje=i(f),Do=n(f,"DIV",{class:!0});var ol=s(Do);T(py.$$.fragment,ol),ZYo=i(ol),dd=n(ol,"P",{});var nee=s(dd);eKo=r(nee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),ez=n(nee,"A",{href:!0});var Abt=s(ez);oKo=r(Abt,"from_pretrained()"),Abt.forEach(t),rKo=r(nee," class method or the "),oz=n(nee,"A",{href:!0});var ybt=s(oz);tKo=r(ybt,"from_config()"),ybt.forEach(t),aKo=r(nee,` class
method.`),nee.forEach(t),nKo=i(ol),_y=n(ol,"P",{});var EGe=s(_y);sKo=r(EGe,"This class cannot be instantiated directly using "),N_e=n(EGe,"CODE",{});var Lbt=s(N_e);lKo=r(Lbt,"__init__()"),Lbt.forEach(t),iKo=r(EGe," (throws an error)."),EGe.forEach(t),dKo=i(ol),_t=n(ol,"DIV",{class:!0});var cw=s(_t);T(uy.$$.fragment,cw),cKo=i(cw),q_e=n(cw,"P",{});var xbt=s(q_e);fKo=r(xbt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),xbt.forEach(t),mKo=i(cw),cd=n(cw,"P",{});var see=s(cd);gKo=r(see,`Note:
Loading a model from its configuration file does `),j_e=n(see,"STRONG",{});var $bt=s(j_e);hKo=r($bt,"not"),$bt.forEach(t),pKo=r(see,` load the model weights. It only affects the
model\u2019s configuration. Use `),rz=n(see,"A",{href:!0});var kbt=s(rz);_Ko=r(kbt,"from_pretrained()"),kbt.forEach(t),uKo=r(see," to load the model weights."),see.forEach(t),bKo=i(cw),T(y3.$$.fragment,cw),cw.forEach(t),vKo=i(ol),io=n(ol,"DIV",{class:!0});var ga=s(io);T(by.$$.fragment,ga),FKo=i(ga),D_e=n(ga,"P",{});var Sbt=s(D_e);TKo=r(Sbt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Sbt.forEach(t),MKo=i(ga),Da=n(ga,"P",{});var fw=s(Da);EKo=r(fw,"The model class to instantiate is selected based on the "),G_e=n(fw,"CODE",{});var Rbt=s(G_e);CKo=r(Rbt,"model_type"),Rbt.forEach(t),wKo=r(fw,` property of the config object (either
passed as an argument or loaded from `),O_e=n(fw,"CODE",{});var Pbt=s(O_e);AKo=r(Pbt,"pretrained_model_name_or_path"),Pbt.forEach(t),yKo=r(fw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V_e=n(fw,"CODE",{});var Bbt=s(V_e);LKo=r(Bbt,"pretrained_model_name_or_path"),Bbt.forEach(t),xKo=r(fw,":"),fw.forEach(t),$Ko=i(ga),X_e=n(ga,"UL",{});var Ibt=s(X_e);L3=n(Ibt,"LI",{});var Uke=s(L3);z_e=n(Uke,"STRONG",{});var Nbt=s(z_e);kKo=r(Nbt,"vision-encoder-decoder"),Nbt.forEach(t),SKo=r(Uke," \u2014 "),tz=n(Uke,"A",{href:!0});var qbt=s(tz);RKo=r(qbt,"VisionEncoderDecoderModel"),qbt.forEach(t),PKo=r(Uke," (Vision Encoder decoder model)"),Uke.forEach(t),Ibt.forEach(t),BKo=i(ga),x3=n(ga,"P",{});var Jke=s(x3);IKo=r(Jke,"The model is set in evaluation mode by default using "),W_e=n(Jke,"CODE",{});var jbt=s(W_e);NKo=r(jbt,"model.eval()"),jbt.forEach(t),qKo=r(Jke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Q_e=n(Jke,"CODE",{});var Dbt=s(Q_e);jKo=r(Dbt,"model.train()"),Dbt.forEach(t),Jke.forEach(t),DKo=i(ga),T($3.$$.fragment,ga),ga.forEach(t),ol.forEach(t),Fje=i(f),fd=n(f,"H2",{class:!0});var CGe=s(fd);k3=n(CGe,"A",{id:!0,class:!0,href:!0});var Gbt=s(k3);H_e=n(Gbt,"SPAN",{});var Obt=s(H_e);T(vy.$$.fragment,Obt),Obt.forEach(t),Gbt.forEach(t),GKo=i(CGe),U_e=n(CGe,"SPAN",{});var Vbt=s(U_e);OKo=r(Vbt,"AutoModelForAudioClassification"),Vbt.forEach(t),CGe.forEach(t),Tje=i(f),Go=n(f,"DIV",{class:!0});var rl=s(Go);T(Fy.$$.fragment,rl),VKo=i(rl),md=n(rl,"P",{});var lee=s(md);XKo=r(lee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),az=n(lee,"A",{href:!0});var Xbt=s(az);zKo=r(Xbt,"from_pretrained()"),Xbt.forEach(t),WKo=r(lee," class method or the "),nz=n(lee,"A",{href:!0});var zbt=s(nz);QKo=r(zbt,"from_config()"),zbt.forEach(t),HKo=r(lee,` class
method.`),lee.forEach(t),UKo=i(rl),Ty=n(rl,"P",{});var wGe=s(Ty);JKo=r(wGe,"This class cannot be instantiated directly using "),J_e=n(wGe,"CODE",{});var Wbt=s(J_e);YKo=r(Wbt,"__init__()"),Wbt.forEach(t),KKo=r(wGe," (throws an error)."),wGe.forEach(t),ZKo=i(rl),ut=n(rl,"DIV",{class:!0});var mw=s(ut);T(My.$$.fragment,mw),eZo=i(mw),Y_e=n(mw,"P",{});var Qbt=s(Y_e);oZo=r(Qbt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Qbt.forEach(t),rZo=i(mw),gd=n(mw,"P",{});var iee=s(gd);tZo=r(iee,`Note:
Loading a model from its configuration file does `),K_e=n(iee,"STRONG",{});var Hbt=s(K_e);aZo=r(Hbt,"not"),Hbt.forEach(t),nZo=r(iee,` load the model weights. It only affects the
model\u2019s configuration. Use `),sz=n(iee,"A",{href:!0});var Ubt=s(sz);sZo=r(Ubt,"from_pretrained()"),Ubt.forEach(t),lZo=r(iee," to load the model weights."),iee.forEach(t),iZo=i(mw),T(S3.$$.fragment,mw),mw.forEach(t),dZo=i(rl),co=n(rl,"DIV",{class:!0});var ha=s(co);T(Ey.$$.fragment,ha),cZo=i(ha),Z_e=n(ha,"P",{});var Jbt=s(Z_e);fZo=r(Jbt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),Jbt.forEach(t),mZo=i(ha),Ga=n(ha,"P",{});var gw=s(Ga);gZo=r(gw,"The model class to instantiate is selected based on the "),eue=n(gw,"CODE",{});var Ybt=s(eue);hZo=r(Ybt,"model_type"),Ybt.forEach(t),pZo=r(gw,` property of the config object (either
passed as an argument or loaded from `),oue=n(gw,"CODE",{});var Kbt=s(oue);_Zo=r(Kbt,"pretrained_model_name_or_path"),Kbt.forEach(t),uZo=r(gw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rue=n(gw,"CODE",{});var Zbt=s(rue);bZo=r(Zbt,"pretrained_model_name_or_path"),Zbt.forEach(t),vZo=r(gw,":"),gw.forEach(t),FZo=i(ha),Se=n(ha,"UL",{});var Ve=s(Se);R3=n(Ve,"LI",{});var Yke=s(R3);tue=n(Yke,"STRONG",{});var e2t=s(tue);TZo=r(e2t,"data2vec-audio"),e2t.forEach(t),MZo=r(Yke," \u2014 "),lz=n(Yke,"A",{href:!0});var o2t=s(lz);EZo=r(o2t,"Data2VecAudioForSequenceClassification"),o2t.forEach(t),CZo=r(Yke," (Data2VecAudio model)"),Yke.forEach(t),wZo=i(Ve),P3=n(Ve,"LI",{});var Kke=s(P3);aue=n(Kke,"STRONG",{});var r2t=s(aue);AZo=r(r2t,"hubert"),r2t.forEach(t),yZo=r(Kke," \u2014 "),iz=n(Kke,"A",{href:!0});var t2t=s(iz);LZo=r(t2t,"HubertForSequenceClassification"),t2t.forEach(t),xZo=r(Kke," (Hubert model)"),Kke.forEach(t),$Zo=i(Ve),B3=n(Ve,"LI",{});var Zke=s(B3);nue=n(Zke,"STRONG",{});var a2t=s(nue);kZo=r(a2t,"sew"),a2t.forEach(t),SZo=r(Zke," \u2014 "),dz=n(Zke,"A",{href:!0});var n2t=s(dz);RZo=r(n2t,"SEWForSequenceClassification"),n2t.forEach(t),PZo=r(Zke," (SEW model)"),Zke.forEach(t),BZo=i(Ve),I3=n(Ve,"LI",{});var eSe=s(I3);sue=n(eSe,"STRONG",{});var s2t=s(sue);IZo=r(s2t,"sew-d"),s2t.forEach(t),NZo=r(eSe," \u2014 "),cz=n(eSe,"A",{href:!0});var l2t=s(cz);qZo=r(l2t,"SEWDForSequenceClassification"),l2t.forEach(t),jZo=r(eSe," (SEW-D model)"),eSe.forEach(t),DZo=i(Ve),N3=n(Ve,"LI",{});var oSe=s(N3);lue=n(oSe,"STRONG",{});var i2t=s(lue);GZo=r(i2t,"unispeech"),i2t.forEach(t),OZo=r(oSe," \u2014 "),fz=n(oSe,"A",{href:!0});var d2t=s(fz);VZo=r(d2t,"UniSpeechForSequenceClassification"),d2t.forEach(t),XZo=r(oSe," (UniSpeech model)"),oSe.forEach(t),zZo=i(Ve),q3=n(Ve,"LI",{});var rSe=s(q3);iue=n(rSe,"STRONG",{});var c2t=s(iue);WZo=r(c2t,"unispeech-sat"),c2t.forEach(t),QZo=r(rSe," \u2014 "),mz=n(rSe,"A",{href:!0});var f2t=s(mz);HZo=r(f2t,"UniSpeechSatForSequenceClassification"),f2t.forEach(t),UZo=r(rSe," (UniSpeechSat model)"),rSe.forEach(t),JZo=i(Ve),j3=n(Ve,"LI",{});var tSe=s(j3);due=n(tSe,"STRONG",{});var m2t=s(due);YZo=r(m2t,"wav2vec2"),m2t.forEach(t),KZo=r(tSe," \u2014 "),gz=n(tSe,"A",{href:!0});var g2t=s(gz);ZZo=r(g2t,"Wav2Vec2ForSequenceClassification"),g2t.forEach(t),eer=r(tSe," (Wav2Vec2 model)"),tSe.forEach(t),oer=i(Ve),D3=n(Ve,"LI",{});var aSe=s(D3);cue=n(aSe,"STRONG",{});var h2t=s(cue);rer=r(h2t,"wav2vec2-conformer"),h2t.forEach(t),ter=r(aSe," \u2014 "),hz=n(aSe,"A",{href:!0});var p2t=s(hz);aer=r(p2t,"Wav2Vec2ConformerForSequenceClassification"),p2t.forEach(t),ner=r(aSe," (Wav2Vec2-Conformer model)"),aSe.forEach(t),ser=i(Ve),G3=n(Ve,"LI",{});var nSe=s(G3);fue=n(nSe,"STRONG",{});var _2t=s(fue);ler=r(_2t,"wavlm"),_2t.forEach(t),ier=r(nSe," \u2014 "),pz=n(nSe,"A",{href:!0});var u2t=s(pz);der=r(u2t,"WavLMForSequenceClassification"),u2t.forEach(t),cer=r(nSe," (WavLM model)"),nSe.forEach(t),Ve.forEach(t),fer=i(ha),O3=n(ha,"P",{});var sSe=s(O3);mer=r(sSe,"The model is set in evaluation mode by default using "),mue=n(sSe,"CODE",{});var b2t=s(mue);ger=r(b2t,"model.eval()"),b2t.forEach(t),her=r(sSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gue=n(sSe,"CODE",{});var v2t=s(gue);per=r(v2t,"model.train()"),v2t.forEach(t),sSe.forEach(t),_er=i(ha),T(V3.$$.fragment,ha),ha.forEach(t),rl.forEach(t),Mje=i(f),hd=n(f,"H2",{class:!0});var AGe=s(hd);X3=n(AGe,"A",{id:!0,class:!0,href:!0});var F2t=s(X3);hue=n(F2t,"SPAN",{});var T2t=s(hue);T(Cy.$$.fragment,T2t),T2t.forEach(t),F2t.forEach(t),uer=i(AGe),pue=n(AGe,"SPAN",{});var M2t=s(pue);ber=r(M2t,"AutoModelForAudioFrameClassification"),M2t.forEach(t),AGe.forEach(t),Eje=i(f),Oo=n(f,"DIV",{class:!0});var tl=s(Oo);T(wy.$$.fragment,tl),ver=i(tl),pd=n(tl,"P",{});var dee=s(pd);Fer=r(dee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),_z=n(dee,"A",{href:!0});var E2t=s(_z);Ter=r(E2t,"from_pretrained()"),E2t.forEach(t),Mer=r(dee," class method or the "),uz=n(dee,"A",{href:!0});var C2t=s(uz);Eer=r(C2t,"from_config()"),C2t.forEach(t),Cer=r(dee,` class
method.`),dee.forEach(t),wer=i(tl),Ay=n(tl,"P",{});var yGe=s(Ay);Aer=r(yGe,"This class cannot be instantiated directly using "),_ue=n(yGe,"CODE",{});var w2t=s(_ue);yer=r(w2t,"__init__()"),w2t.forEach(t),Ler=r(yGe," (throws an error)."),yGe.forEach(t),xer=i(tl),bt=n(tl,"DIV",{class:!0});var hw=s(bt);T(yy.$$.fragment,hw),$er=i(hw),uue=n(hw,"P",{});var A2t=s(uue);ker=r(A2t,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),A2t.forEach(t),Ser=i(hw),_d=n(hw,"P",{});var cee=s(_d);Rer=r(cee,`Note:
Loading a model from its configuration file does `),bue=n(cee,"STRONG",{});var y2t=s(bue);Per=r(y2t,"not"),y2t.forEach(t),Ber=r(cee,` load the model weights. It only affects the
model\u2019s configuration. Use `),bz=n(cee,"A",{href:!0});var L2t=s(bz);Ier=r(L2t,"from_pretrained()"),L2t.forEach(t),Ner=r(cee," to load the model weights."),cee.forEach(t),qer=i(hw),T(z3.$$.fragment,hw),hw.forEach(t),jer=i(tl),fo=n(tl,"DIV",{class:!0});var pa=s(fo);T(Ly.$$.fragment,pa),Der=i(pa),vue=n(pa,"P",{});var x2t=s(vue);Ger=r(x2t,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),x2t.forEach(t),Oer=i(pa),Oa=n(pa,"P",{});var pw=s(Oa);Ver=r(pw,"The model class to instantiate is selected based on the "),Fue=n(pw,"CODE",{});var $2t=s(Fue);Xer=r($2t,"model_type"),$2t.forEach(t),zer=r(pw,` property of the config object (either
passed as an argument or loaded from `),Tue=n(pw,"CODE",{});var k2t=s(Tue);Wer=r(k2t,"pretrained_model_name_or_path"),k2t.forEach(t),Qer=r(pw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mue=n(pw,"CODE",{});var S2t=s(Mue);Her=r(S2t,"pretrained_model_name_or_path"),S2t.forEach(t),Uer=r(pw,":"),pw.forEach(t),Jer=i(pa),Kr=n(pa,"UL",{});var al=s(Kr);W3=n(al,"LI",{});var lSe=s(W3);Eue=n(lSe,"STRONG",{});var R2t=s(Eue);Yer=r(R2t,"data2vec-audio"),R2t.forEach(t),Ker=r(lSe," \u2014 "),vz=n(lSe,"A",{href:!0});var P2t=s(vz);Zer=r(P2t,"Data2VecAudioForAudioFrameClassification"),P2t.forEach(t),eor=r(lSe," (Data2VecAudio model)"),lSe.forEach(t),oor=i(al),Q3=n(al,"LI",{});var iSe=s(Q3);Cue=n(iSe,"STRONG",{});var B2t=s(Cue);ror=r(B2t,"unispeech-sat"),B2t.forEach(t),tor=r(iSe," \u2014 "),Fz=n(iSe,"A",{href:!0});var I2t=s(Fz);aor=r(I2t,"UniSpeechSatForAudioFrameClassification"),I2t.forEach(t),nor=r(iSe," (UniSpeechSat model)"),iSe.forEach(t),sor=i(al),H3=n(al,"LI",{});var dSe=s(H3);wue=n(dSe,"STRONG",{});var N2t=s(wue);lor=r(N2t,"wav2vec2"),N2t.forEach(t),ior=r(dSe," \u2014 "),Tz=n(dSe,"A",{href:!0});var q2t=s(Tz);dor=r(q2t,"Wav2Vec2ForAudioFrameClassification"),q2t.forEach(t),cor=r(dSe," (Wav2Vec2 model)"),dSe.forEach(t),mor=i(al),U3=n(al,"LI",{});var cSe=s(U3);Aue=n(cSe,"STRONG",{});var j2t=s(Aue);gor=r(j2t,"wav2vec2-conformer"),j2t.forEach(t),hor=r(cSe," \u2014 "),Mz=n(cSe,"A",{href:!0});var D2t=s(Mz);por=r(D2t,"Wav2Vec2ConformerForAudioFrameClassification"),D2t.forEach(t),_or=r(cSe," (Wav2Vec2-Conformer model)"),cSe.forEach(t),uor=i(al),J3=n(al,"LI",{});var fSe=s(J3);yue=n(fSe,"STRONG",{});var G2t=s(yue);bor=r(G2t,"wavlm"),G2t.forEach(t),vor=r(fSe," \u2014 "),Ez=n(fSe,"A",{href:!0});var O2t=s(Ez);For=r(O2t,"WavLMForAudioFrameClassification"),O2t.forEach(t),Tor=r(fSe," (WavLM model)"),fSe.forEach(t),al.forEach(t),Mor=i(pa),Y3=n(pa,"P",{});var mSe=s(Y3);Eor=r(mSe,"The model is set in evaluation mode by default using "),Lue=n(mSe,"CODE",{});var V2t=s(Lue);Cor=r(V2t,"model.eval()"),V2t.forEach(t),wor=r(mSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xue=n(mSe,"CODE",{});var X2t=s(xue);Aor=r(X2t,"model.train()"),X2t.forEach(t),mSe.forEach(t),yor=i(pa),T(K3.$$.fragment,pa),pa.forEach(t),tl.forEach(t),Cje=i(f),ud=n(f,"H2",{class:!0});var LGe=s(ud);Z3=n(LGe,"A",{id:!0,class:!0,href:!0});var z2t=s(Z3);$ue=n(z2t,"SPAN",{});var W2t=s($ue);T(xy.$$.fragment,W2t),W2t.forEach(t),z2t.forEach(t),Lor=i(LGe),kue=n(LGe,"SPAN",{});var Q2t=s(kue);xor=r(Q2t,"AutoModelForCTC"),Q2t.forEach(t),LGe.forEach(t),wje=i(f),Vo=n(f,"DIV",{class:!0});var nl=s(Vo);T($y.$$.fragment,nl),$or=i(nl),bd=n(nl,"P",{});var fee=s(bd);kor=r(fee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),Cz=n(fee,"A",{href:!0});var H2t=s(Cz);Sor=r(H2t,"from_pretrained()"),H2t.forEach(t),Ror=r(fee," class method or the "),wz=n(fee,"A",{href:!0});var U2t=s(wz);Por=r(U2t,"from_config()"),U2t.forEach(t),Bor=r(fee,` class
method.`),fee.forEach(t),Ior=i(nl),ky=n(nl,"P",{});var xGe=s(ky);Nor=r(xGe,"This class cannot be instantiated directly using "),Sue=n(xGe,"CODE",{});var J2t=s(Sue);qor=r(J2t,"__init__()"),J2t.forEach(t),jor=r(xGe," (throws an error)."),xGe.forEach(t),Dor=i(nl),vt=n(nl,"DIV",{class:!0});var _w=s(vt);T(Sy.$$.fragment,_w),Gor=i(_w),Rue=n(_w,"P",{});var Y2t=s(Rue);Oor=r(Y2t,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Y2t.forEach(t),Vor=i(_w),vd=n(_w,"P",{});var mee=s(vd);Xor=r(mee,`Note:
Loading a model from its configuration file does `),Pue=n(mee,"STRONG",{});var K2t=s(Pue);zor=r(K2t,"not"),K2t.forEach(t),Wor=r(mee,` load the model weights. It only affects the
model\u2019s configuration. Use `),Az=n(mee,"A",{href:!0});var Z2t=s(Az);Qor=r(Z2t,"from_pretrained()"),Z2t.forEach(t),Hor=r(mee," to load the model weights."),mee.forEach(t),Uor=i(_w),T(eF.$$.fragment,_w),_w.forEach(t),Jor=i(nl),mo=n(nl,"DIV",{class:!0});var _a=s(mo);T(Ry.$$.fragment,_a),Yor=i(_a),Bue=n(_a,"P",{});var evt=s(Bue);Kor=r(evt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),evt.forEach(t),Zor=i(_a),Va=n(_a,"P",{});var uw=s(Va);err=r(uw,"The model class to instantiate is selected based on the "),Iue=n(uw,"CODE",{});var ovt=s(Iue);orr=r(ovt,"model_type"),ovt.forEach(t),rrr=r(uw,` property of the config object (either
passed as an argument or loaded from `),Nue=n(uw,"CODE",{});var rvt=s(Nue);trr=r(rvt,"pretrained_model_name_or_path"),rvt.forEach(t),arr=r(uw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),que=n(uw,"CODE",{});var tvt=s(que);nrr=r(tvt,"pretrained_model_name_or_path"),tvt.forEach(t),srr=r(uw,":"),uw.forEach(t),lrr=i(_a),Re=n(_a,"UL",{});var Xe=s(Re);oF=n(Xe,"LI",{});var gSe=s(oF);jue=n(gSe,"STRONG",{});var avt=s(jue);irr=r(avt,"data2vec-audio"),avt.forEach(t),drr=r(gSe," \u2014 "),yz=n(gSe,"A",{href:!0});var nvt=s(yz);crr=r(nvt,"Data2VecAudioForCTC"),nvt.forEach(t),frr=r(gSe," (Data2VecAudio model)"),gSe.forEach(t),mrr=i(Xe),rF=n(Xe,"LI",{});var hSe=s(rF);Due=n(hSe,"STRONG",{});var svt=s(Due);grr=r(svt,"hubert"),svt.forEach(t),hrr=r(hSe," \u2014 "),Lz=n(hSe,"A",{href:!0});var lvt=s(Lz);prr=r(lvt,"HubertForCTC"),lvt.forEach(t),_rr=r(hSe," (Hubert model)"),hSe.forEach(t),urr=i(Xe),tF=n(Xe,"LI",{});var pSe=s(tF);Gue=n(pSe,"STRONG",{});var ivt=s(Gue);brr=r(ivt,"sew"),ivt.forEach(t),vrr=r(pSe," \u2014 "),xz=n(pSe,"A",{href:!0});var dvt=s(xz);Frr=r(dvt,"SEWForCTC"),dvt.forEach(t),Trr=r(pSe," (SEW model)"),pSe.forEach(t),Mrr=i(Xe),aF=n(Xe,"LI",{});var _Se=s(aF);Oue=n(_Se,"STRONG",{});var cvt=s(Oue);Err=r(cvt,"sew-d"),cvt.forEach(t),Crr=r(_Se," \u2014 "),$z=n(_Se,"A",{href:!0});var fvt=s($z);wrr=r(fvt,"SEWDForCTC"),fvt.forEach(t),Arr=r(_Se," (SEW-D model)"),_Se.forEach(t),yrr=i(Xe),nF=n(Xe,"LI",{});var uSe=s(nF);Vue=n(uSe,"STRONG",{});var mvt=s(Vue);Lrr=r(mvt,"unispeech"),mvt.forEach(t),xrr=r(uSe," \u2014 "),kz=n(uSe,"A",{href:!0});var gvt=s(kz);$rr=r(gvt,"UniSpeechForCTC"),gvt.forEach(t),krr=r(uSe," (UniSpeech model)"),uSe.forEach(t),Srr=i(Xe),sF=n(Xe,"LI",{});var bSe=s(sF);Xue=n(bSe,"STRONG",{});var hvt=s(Xue);Rrr=r(hvt,"unispeech-sat"),hvt.forEach(t),Prr=r(bSe," \u2014 "),Sz=n(bSe,"A",{href:!0});var pvt=s(Sz);Brr=r(pvt,"UniSpeechSatForCTC"),pvt.forEach(t),Irr=r(bSe," (UniSpeechSat model)"),bSe.forEach(t),Nrr=i(Xe),lF=n(Xe,"LI",{});var vSe=s(lF);zue=n(vSe,"STRONG",{});var _vt=s(zue);qrr=r(_vt,"wav2vec2"),_vt.forEach(t),jrr=r(vSe," \u2014 "),Rz=n(vSe,"A",{href:!0});var uvt=s(Rz);Drr=r(uvt,"Wav2Vec2ForCTC"),uvt.forEach(t),Grr=r(vSe," (Wav2Vec2 model)"),vSe.forEach(t),Orr=i(Xe),iF=n(Xe,"LI",{});var FSe=s(iF);Wue=n(FSe,"STRONG",{});var bvt=s(Wue);Vrr=r(bvt,"wav2vec2-conformer"),bvt.forEach(t),Xrr=r(FSe," \u2014 "),Pz=n(FSe,"A",{href:!0});var vvt=s(Pz);zrr=r(vvt,"Wav2Vec2ConformerForCTC"),vvt.forEach(t),Wrr=r(FSe," (Wav2Vec2-Conformer model)"),FSe.forEach(t),Qrr=i(Xe),dF=n(Xe,"LI",{});var TSe=s(dF);Que=n(TSe,"STRONG",{});var Fvt=s(Que);Hrr=r(Fvt,"wavlm"),Fvt.forEach(t),Urr=r(TSe," \u2014 "),Bz=n(TSe,"A",{href:!0});var Tvt=s(Bz);Jrr=r(Tvt,"WavLMForCTC"),Tvt.forEach(t),Yrr=r(TSe," (WavLM model)"),TSe.forEach(t),Xe.forEach(t),Krr=i(_a),cF=n(_a,"P",{});var MSe=s(cF);Zrr=r(MSe,"The model is set in evaluation mode by default using "),Hue=n(MSe,"CODE",{});var Mvt=s(Hue);etr=r(Mvt,"model.eval()"),Mvt.forEach(t),otr=r(MSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Uue=n(MSe,"CODE",{});var Evt=s(Uue);rtr=r(Evt,"model.train()"),Evt.forEach(t),MSe.forEach(t),ttr=i(_a),T(fF.$$.fragment,_a),_a.forEach(t),nl.forEach(t),Aje=i(f),Fd=n(f,"H2",{class:!0});var $Ge=s(Fd);mF=n($Ge,"A",{id:!0,class:!0,href:!0});var Cvt=s(mF);Jue=n(Cvt,"SPAN",{});var wvt=s(Jue);T(Py.$$.fragment,wvt),wvt.forEach(t),Cvt.forEach(t),atr=i($Ge),Yue=n($Ge,"SPAN",{});var Avt=s(Yue);ntr=r(Avt,"AutoModelForSpeechSeq2Seq"),Avt.forEach(t),$Ge.forEach(t),yje=i(f),Xo=n(f,"DIV",{class:!0});var sl=s(Xo);T(By.$$.fragment,sl),str=i(sl),Td=n(sl,"P",{});var gee=s(Td);ltr=r(gee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Iz=n(gee,"A",{href:!0});var yvt=s(Iz);itr=r(yvt,"from_pretrained()"),yvt.forEach(t),dtr=r(gee," class method or the "),Nz=n(gee,"A",{href:!0});var Lvt=s(Nz);ctr=r(Lvt,"from_config()"),Lvt.forEach(t),ftr=r(gee,` class
method.`),gee.forEach(t),mtr=i(sl),Iy=n(sl,"P",{});var kGe=s(Iy);gtr=r(kGe,"This class cannot be instantiated directly using "),Kue=n(kGe,"CODE",{});var xvt=s(Kue);htr=r(xvt,"__init__()"),xvt.forEach(t),ptr=r(kGe," (throws an error)."),kGe.forEach(t),_tr=i(sl),Ft=n(sl,"DIV",{class:!0});var bw=s(Ft);T(Ny.$$.fragment,bw),utr=i(bw),Zue=n(bw,"P",{});var $vt=s(Zue);btr=r($vt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),$vt.forEach(t),vtr=i(bw),Md=n(bw,"P",{});var hee=s(Md);Ftr=r(hee,`Note:
Loading a model from its configuration file does `),e1e=n(hee,"STRONG",{});var kvt=s(e1e);Ttr=r(kvt,"not"),kvt.forEach(t),Mtr=r(hee,` load the model weights. It only affects the
model\u2019s configuration. Use `),qz=n(hee,"A",{href:!0});var Svt=s(qz);Etr=r(Svt,"from_pretrained()"),Svt.forEach(t),Ctr=r(hee," to load the model weights."),hee.forEach(t),wtr=i(bw),T(gF.$$.fragment,bw),bw.forEach(t),Atr=i(sl),go=n(sl,"DIV",{class:!0});var ua=s(go);T(qy.$$.fragment,ua),ytr=i(ua),o1e=n(ua,"P",{});var Rvt=s(o1e);Ltr=r(Rvt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Rvt.forEach(t),xtr=i(ua),Xa=n(ua,"P",{});var vw=s(Xa);$tr=r(vw,"The model class to instantiate is selected based on the "),r1e=n(vw,"CODE",{});var Pvt=s(r1e);ktr=r(Pvt,"model_type"),Pvt.forEach(t),Str=r(vw,` property of the config object (either
passed as an argument or loaded from `),t1e=n(vw,"CODE",{});var Bvt=s(t1e);Rtr=r(Bvt,"pretrained_model_name_or_path"),Bvt.forEach(t),Ptr=r(vw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a1e=n(vw,"CODE",{});var Ivt=s(a1e);Btr=r(Ivt,"pretrained_model_name_or_path"),Ivt.forEach(t),Itr=r(vw,":"),vw.forEach(t),Ntr=i(ua),jy=n(ua,"UL",{});var SGe=s(jy);hF=n(SGe,"LI",{});var ESe=s(hF);n1e=n(ESe,"STRONG",{});var Nvt=s(n1e);qtr=r(Nvt,"speech-encoder-decoder"),Nvt.forEach(t),jtr=r(ESe," \u2014 "),jz=n(ESe,"A",{href:!0});var qvt=s(jz);Dtr=r(qvt,"SpeechEncoderDecoderModel"),qvt.forEach(t),Gtr=r(ESe," (Speech Encoder decoder model)"),ESe.forEach(t),Otr=i(SGe),pF=n(SGe,"LI",{});var CSe=s(pF);s1e=n(CSe,"STRONG",{});var jvt=s(s1e);Vtr=r(jvt,"speech_to_text"),jvt.forEach(t),Xtr=r(CSe," \u2014 "),Dz=n(CSe,"A",{href:!0});var Dvt=s(Dz);ztr=r(Dvt,"Speech2TextForConditionalGeneration"),Dvt.forEach(t),Wtr=r(CSe," (Speech2Text model)"),CSe.forEach(t),SGe.forEach(t),Qtr=i(ua),_F=n(ua,"P",{});var wSe=s(_F);Htr=r(wSe,"The model is set in evaluation mode by default using "),l1e=n(wSe,"CODE",{});var Gvt=s(l1e);Utr=r(Gvt,"model.eval()"),Gvt.forEach(t),Jtr=r(wSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),i1e=n(wSe,"CODE",{});var Ovt=s(i1e);Ytr=r(Ovt,"model.train()"),Ovt.forEach(t),wSe.forEach(t),Ktr=i(ua),T(uF.$$.fragment,ua),ua.forEach(t),sl.forEach(t),Lje=i(f),Ed=n(f,"H2",{class:!0});var RGe=s(Ed);bF=n(RGe,"A",{id:!0,class:!0,href:!0});var Vvt=s(bF);d1e=n(Vvt,"SPAN",{});var Xvt=s(d1e);T(Dy.$$.fragment,Xvt),Xvt.forEach(t),Vvt.forEach(t),Ztr=i(RGe),c1e=n(RGe,"SPAN",{});var zvt=s(c1e);ear=r(zvt,"AutoModelForAudioXVector"),zvt.forEach(t),RGe.forEach(t),xje=i(f),zo=n(f,"DIV",{class:!0});var ll=s(zo);T(Gy.$$.fragment,ll),oar=i(ll),Cd=n(ll,"P",{});var pee=s(Cd);rar=r(pee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),Gz=n(pee,"A",{href:!0});var Wvt=s(Gz);tar=r(Wvt,"from_pretrained()"),Wvt.forEach(t),aar=r(pee," class method or the "),Oz=n(pee,"A",{href:!0});var Qvt=s(Oz);nar=r(Qvt,"from_config()"),Qvt.forEach(t),sar=r(pee,` class
method.`),pee.forEach(t),lar=i(ll),Oy=n(ll,"P",{});var PGe=s(Oy);iar=r(PGe,"This class cannot be instantiated directly using "),f1e=n(PGe,"CODE",{});var Hvt=s(f1e);dar=r(Hvt,"__init__()"),Hvt.forEach(t),car=r(PGe," (throws an error)."),PGe.forEach(t),far=i(ll),Tt=n(ll,"DIV",{class:!0});var Fw=s(Tt);T(Vy.$$.fragment,Fw),mar=i(Fw),m1e=n(Fw,"P",{});var Uvt=s(m1e);gar=r(Uvt,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),Uvt.forEach(t),har=i(Fw),wd=n(Fw,"P",{});var _ee=s(wd);par=r(_ee,`Note:
Loading a model from its configuration file does `),g1e=n(_ee,"STRONG",{});var Jvt=s(g1e);_ar=r(Jvt,"not"),Jvt.forEach(t),uar=r(_ee,` load the model weights. It only affects the
model\u2019s configuration. Use `),Vz=n(_ee,"A",{href:!0});var Yvt=s(Vz);bar=r(Yvt,"from_pretrained()"),Yvt.forEach(t),Far=r(_ee," to load the model weights."),_ee.forEach(t),Tar=i(Fw),T(vF.$$.fragment,Fw),Fw.forEach(t),Mar=i(ll),ho=n(ll,"DIV",{class:!0});var ba=s(ho);T(Xy.$$.fragment,ba),Ear=i(ba),h1e=n(ba,"P",{});var Kvt=s(h1e);Car=r(Kvt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Kvt.forEach(t),war=i(ba),za=n(ba,"P",{});var Tw=s(za);Aar=r(Tw,"The model class to instantiate is selected based on the "),p1e=n(Tw,"CODE",{});var Zvt=s(p1e);yar=r(Zvt,"model_type"),Zvt.forEach(t),Lar=r(Tw,` property of the config object (either
passed as an argument or loaded from `),_1e=n(Tw,"CODE",{});var e5t=s(_1e);xar=r(e5t,"pretrained_model_name_or_path"),e5t.forEach(t),$ar=r(Tw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u1e=n(Tw,"CODE",{});var o5t=s(u1e);kar=r(o5t,"pretrained_model_name_or_path"),o5t.forEach(t),Sar=r(Tw,":"),Tw.forEach(t),Rar=i(ba),Zr=n(ba,"UL",{});var il=s(Zr);FF=n(il,"LI",{});var ASe=s(FF);b1e=n(ASe,"STRONG",{});var r5t=s(b1e);Par=r(r5t,"data2vec-audio"),r5t.forEach(t),Bar=r(ASe," \u2014 "),Xz=n(ASe,"A",{href:!0});var t5t=s(Xz);Iar=r(t5t,"Data2VecAudioForXVector"),t5t.forEach(t),Nar=r(ASe," (Data2VecAudio model)"),ASe.forEach(t),qar=i(il),TF=n(il,"LI",{});var ySe=s(TF);v1e=n(ySe,"STRONG",{});var a5t=s(v1e);jar=r(a5t,"unispeech-sat"),a5t.forEach(t),Dar=r(ySe," \u2014 "),zz=n(ySe,"A",{href:!0});var n5t=s(zz);Gar=r(n5t,"UniSpeechSatForXVector"),n5t.forEach(t),Oar=r(ySe," (UniSpeechSat model)"),ySe.forEach(t),Var=i(il),MF=n(il,"LI",{});var LSe=s(MF);F1e=n(LSe,"STRONG",{});var s5t=s(F1e);Xar=r(s5t,"wav2vec2"),s5t.forEach(t),zar=r(LSe," \u2014 "),Wz=n(LSe,"A",{href:!0});var l5t=s(Wz);War=r(l5t,"Wav2Vec2ForXVector"),l5t.forEach(t),Qar=r(LSe," (Wav2Vec2 model)"),LSe.forEach(t),Har=i(il),EF=n(il,"LI",{});var xSe=s(EF);T1e=n(xSe,"STRONG",{});var i5t=s(T1e);Uar=r(i5t,"wav2vec2-conformer"),i5t.forEach(t),Jar=r(xSe," \u2014 "),Qz=n(xSe,"A",{href:!0});var d5t=s(Qz);Yar=r(d5t,"Wav2Vec2ConformerForXVector"),d5t.forEach(t),Kar=r(xSe," (Wav2Vec2-Conformer model)"),xSe.forEach(t),Zar=i(il),CF=n(il,"LI",{});var $Se=s(CF);M1e=n($Se,"STRONG",{});var c5t=s(M1e);enr=r(c5t,"wavlm"),c5t.forEach(t),onr=r($Se," \u2014 "),Hz=n($Se,"A",{href:!0});var f5t=s(Hz);rnr=r(f5t,"WavLMForXVector"),f5t.forEach(t),tnr=r($Se," (WavLM model)"),$Se.forEach(t),il.forEach(t),anr=i(ba),wF=n(ba,"P",{});var kSe=s(wF);nnr=r(kSe,"The model is set in evaluation mode by default using "),E1e=n(kSe,"CODE",{});var m5t=s(E1e);snr=r(m5t,"model.eval()"),m5t.forEach(t),lnr=r(kSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),C1e=n(kSe,"CODE",{});var g5t=s(C1e);inr=r(g5t,"model.train()"),g5t.forEach(t),kSe.forEach(t),dnr=i(ba),T(AF.$$.fragment,ba),ba.forEach(t),ll.forEach(t),$je=i(f),Ad=n(f,"H2",{class:!0});var BGe=s(Ad);yF=n(BGe,"A",{id:!0,class:!0,href:!0});var h5t=s(yF);w1e=n(h5t,"SPAN",{});var p5t=s(w1e);T(zy.$$.fragment,p5t),p5t.forEach(t),h5t.forEach(t),cnr=i(BGe),A1e=n(BGe,"SPAN",{});var _5t=s(A1e);fnr=r(_5t,"AutoModelForMaskedImageModeling"),_5t.forEach(t),BGe.forEach(t),kje=i(f),Wo=n(f,"DIV",{class:!0});var dl=s(Wo);T(Wy.$$.fragment,dl),mnr=i(dl),yd=n(dl,"P",{});var uee=s(yd);gnr=r(uee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),Uz=n(uee,"A",{href:!0});var u5t=s(Uz);hnr=r(u5t,"from_pretrained()"),u5t.forEach(t),pnr=r(uee," class method or the "),Jz=n(uee,"A",{href:!0});var b5t=s(Jz);_nr=r(b5t,"from_config()"),b5t.forEach(t),unr=r(uee,` class
method.`),uee.forEach(t),bnr=i(dl),Qy=n(dl,"P",{});var IGe=s(Qy);vnr=r(IGe,"This class cannot be instantiated directly using "),y1e=n(IGe,"CODE",{});var v5t=s(y1e);Fnr=r(v5t,"__init__()"),v5t.forEach(t),Tnr=r(IGe," (throws an error)."),IGe.forEach(t),Mnr=i(dl),Mt=n(dl,"DIV",{class:!0});var Mw=s(Mt);T(Hy.$$.fragment,Mw),Enr=i(Mw),L1e=n(Mw,"P",{});var F5t=s(L1e);Cnr=r(F5t,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),F5t.forEach(t),wnr=i(Mw),Ld=n(Mw,"P",{});var bee=s(Ld);Anr=r(bee,`Note:
Loading a model from its configuration file does `),x1e=n(bee,"STRONG",{});var T5t=s(x1e);ynr=r(T5t,"not"),T5t.forEach(t),Lnr=r(bee,` load the model weights. It only affects the
model\u2019s configuration. Use `),Yz=n(bee,"A",{href:!0});var M5t=s(Yz);xnr=r(M5t,"from_pretrained()"),M5t.forEach(t),$nr=r(bee," to load the model weights."),bee.forEach(t),knr=i(Mw),T(LF.$$.fragment,Mw),Mw.forEach(t),Snr=i(dl),po=n(dl,"DIV",{class:!0});var va=s(po);T(Uy.$$.fragment,va),Rnr=i(va),$1e=n(va,"P",{});var E5t=s($1e);Pnr=r(E5t,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),E5t.forEach(t),Bnr=i(va),Wa=n(va,"P",{});var Ew=s(Wa);Inr=r(Ew,"The model class to instantiate is selected based on the "),k1e=n(Ew,"CODE",{});var C5t=s(k1e);Nnr=r(C5t,"model_type"),C5t.forEach(t),qnr=r(Ew,` property of the config object (either
passed as an argument or loaded from `),S1e=n(Ew,"CODE",{});var w5t=s(S1e);jnr=r(w5t,"pretrained_model_name_or_path"),w5t.forEach(t),Dnr=r(Ew,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R1e=n(Ew,"CODE",{});var A5t=s(R1e);Gnr=r(A5t,"pretrained_model_name_or_path"),A5t.forEach(t),Onr=r(Ew,":"),Ew.forEach(t),Vnr=i(va),xd=n(va,"UL",{});var vee=s(xd);xF=n(vee,"LI",{});var SSe=s(xF);P1e=n(SSe,"STRONG",{});var y5t=s(P1e);Xnr=r(y5t,"deit"),y5t.forEach(t),znr=r(SSe," \u2014 "),Kz=n(SSe,"A",{href:!0});var L5t=s(Kz);Wnr=r(L5t,"DeiTForMaskedImageModeling"),L5t.forEach(t),Qnr=r(SSe," (DeiT model)"),SSe.forEach(t),Hnr=i(vee),$F=n(vee,"LI",{});var RSe=s($F);B1e=n(RSe,"STRONG",{});var x5t=s(B1e);Unr=r(x5t,"swin"),x5t.forEach(t),Jnr=r(RSe," \u2014 "),Zz=n(RSe,"A",{href:!0});var $5t=s(Zz);Ynr=r($5t,"SwinForMaskedImageModeling"),$5t.forEach(t),Knr=r(RSe," (Swin Transformer model)"),RSe.forEach(t),Znr=i(vee),kF=n(vee,"LI",{});var PSe=s(kF);I1e=n(PSe,"STRONG",{});var k5t=s(I1e);esr=r(k5t,"vit"),k5t.forEach(t),osr=r(PSe," \u2014 "),eW=n(PSe,"A",{href:!0});var S5t=s(eW);rsr=r(S5t,"ViTForMaskedImageModeling"),S5t.forEach(t),tsr=r(PSe," (ViT model)"),PSe.forEach(t),vee.forEach(t),asr=i(va),SF=n(va,"P",{});var BSe=s(SF);nsr=r(BSe,"The model is set in evaluation mode by default using "),N1e=n(BSe,"CODE",{});var R5t=s(N1e);ssr=r(R5t,"model.eval()"),R5t.forEach(t),lsr=r(BSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),q1e=n(BSe,"CODE",{});var P5t=s(q1e);isr=r(P5t,"model.train()"),P5t.forEach(t),BSe.forEach(t),dsr=i(va),T(RF.$$.fragment,va),va.forEach(t),dl.forEach(t),Sje=i(f),$d=n(f,"H2",{class:!0});var NGe=s($d);PF=n(NGe,"A",{id:!0,class:!0,href:!0});var B5t=s(PF);j1e=n(B5t,"SPAN",{});var I5t=s(j1e);T(Jy.$$.fragment,I5t),I5t.forEach(t),B5t.forEach(t),csr=i(NGe),D1e=n(NGe,"SPAN",{});var N5t=s(D1e);fsr=r(N5t,"AutoModelForObjectDetection"),N5t.forEach(t),NGe.forEach(t),Rje=i(f),Qo=n(f,"DIV",{class:!0});var cl=s(Qo);T(Yy.$$.fragment,cl),msr=i(cl),kd=n(cl,"P",{});var Fee=s(kd);gsr=r(Fee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),oW=n(Fee,"A",{href:!0});var q5t=s(oW);hsr=r(q5t,"from_pretrained()"),q5t.forEach(t),psr=r(Fee," class method or the "),rW=n(Fee,"A",{href:!0});var j5t=s(rW);_sr=r(j5t,"from_config()"),j5t.forEach(t),usr=r(Fee,` class
method.`),Fee.forEach(t),bsr=i(cl),Ky=n(cl,"P",{});var qGe=s(Ky);vsr=r(qGe,"This class cannot be instantiated directly using "),G1e=n(qGe,"CODE",{});var D5t=s(G1e);Fsr=r(D5t,"__init__()"),D5t.forEach(t),Tsr=r(qGe," (throws an error)."),qGe.forEach(t),Msr=i(cl),Et=n(cl,"DIV",{class:!0});var Cw=s(Et);T(Zy.$$.fragment,Cw),Esr=i(Cw),O1e=n(Cw,"P",{});var G5t=s(O1e);Csr=r(G5t,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),G5t.forEach(t),wsr=i(Cw),Sd=n(Cw,"P",{});var Tee=s(Sd);Asr=r(Tee,`Note:
Loading a model from its configuration file does `),V1e=n(Tee,"STRONG",{});var O5t=s(V1e);ysr=r(O5t,"not"),O5t.forEach(t),Lsr=r(Tee,` load the model weights. It only affects the
model\u2019s configuration. Use `),tW=n(Tee,"A",{href:!0});var V5t=s(tW);xsr=r(V5t,"from_pretrained()"),V5t.forEach(t),$sr=r(Tee," to load the model weights."),Tee.forEach(t),ksr=i(Cw),T(BF.$$.fragment,Cw),Cw.forEach(t),Ssr=i(cl),_o=n(cl,"DIV",{class:!0});var Fa=s(_o);T(eL.$$.fragment,Fa),Rsr=i(Fa),X1e=n(Fa,"P",{});var X5t=s(X1e);Psr=r(X5t,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),X5t.forEach(t),Bsr=i(Fa),Qa=n(Fa,"P",{});var ww=s(Qa);Isr=r(ww,"The model class to instantiate is selected based on the "),z1e=n(ww,"CODE",{});var z5t=s(z1e);Nsr=r(z5t,"model_type"),z5t.forEach(t),qsr=r(ww,` property of the config object (either
passed as an argument or loaded from `),W1e=n(ww,"CODE",{});var W5t=s(W1e);jsr=r(W5t,"pretrained_model_name_or_path"),W5t.forEach(t),Dsr=r(ww,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q1e=n(ww,"CODE",{});var Q5t=s(Q1e);Gsr=r(Q5t,"pretrained_model_name_or_path"),Q5t.forEach(t),Osr=r(ww,":"),ww.forEach(t),Vsr=i(Fa),oL=n(Fa,"UL",{});var jGe=s(oL);IF=n(jGe,"LI",{});var ISe=s(IF);H1e=n(ISe,"STRONG",{});var H5t=s(H1e);Xsr=r(H5t,"detr"),H5t.forEach(t),zsr=r(ISe," \u2014 "),aW=n(ISe,"A",{href:!0});var U5t=s(aW);Wsr=r(U5t,"DetrForObjectDetection"),U5t.forEach(t),Qsr=r(ISe," (DETR model)"),ISe.forEach(t),Hsr=i(jGe),NF=n(jGe,"LI",{});var NSe=s(NF);U1e=n(NSe,"STRONG",{});var J5t=s(U1e);Usr=r(J5t,"yolos"),J5t.forEach(t),Jsr=r(NSe," \u2014 "),nW=n(NSe,"A",{href:!0});var Y5t=s(nW);Ysr=r(Y5t,"YolosForObjectDetection"),Y5t.forEach(t),Ksr=r(NSe," (YOLOS model)"),NSe.forEach(t),jGe.forEach(t),Zsr=i(Fa),qF=n(Fa,"P",{});var qSe=s(qF);elr=r(qSe,"The model is set in evaluation mode by default using "),J1e=n(qSe,"CODE",{});var K5t=s(J1e);olr=r(K5t,"model.eval()"),K5t.forEach(t),rlr=r(qSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Y1e=n(qSe,"CODE",{});var Z5t=s(Y1e);tlr=r(Z5t,"model.train()"),Z5t.forEach(t),qSe.forEach(t),alr=i(Fa),T(jF.$$.fragment,Fa),Fa.forEach(t),cl.forEach(t),Pje=i(f),Rd=n(f,"H2",{class:!0});var DGe=s(Rd);DF=n(DGe,"A",{id:!0,class:!0,href:!0});var e3t=s(DF);K1e=n(e3t,"SPAN",{});var o3t=s(K1e);T(rL.$$.fragment,o3t),o3t.forEach(t),e3t.forEach(t),nlr=i(DGe),Z1e=n(DGe,"SPAN",{});var r3t=s(Z1e);slr=r(r3t,"AutoModelForImageSegmentation"),r3t.forEach(t),DGe.forEach(t),Bje=i(f),Ho=n(f,"DIV",{class:!0});var fl=s(Ho);T(tL.$$.fragment,fl),llr=i(fl),Pd=n(fl,"P",{});var Mee=s(Pd);ilr=r(Mee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),sW=n(Mee,"A",{href:!0});var t3t=s(sW);dlr=r(t3t,"from_pretrained()"),t3t.forEach(t),clr=r(Mee," class method or the "),lW=n(Mee,"A",{href:!0});var a3t=s(lW);flr=r(a3t,"from_config()"),a3t.forEach(t),mlr=r(Mee,` class
method.`),Mee.forEach(t),glr=i(fl),aL=n(fl,"P",{});var GGe=s(aL);hlr=r(GGe,"This class cannot be instantiated directly using "),ebe=n(GGe,"CODE",{});var n3t=s(ebe);plr=r(n3t,"__init__()"),n3t.forEach(t),_lr=r(GGe," (throws an error)."),GGe.forEach(t),ulr=i(fl),Ct=n(fl,"DIV",{class:!0});var Aw=s(Ct);T(nL.$$.fragment,Aw),blr=i(Aw),obe=n(Aw,"P",{});var s3t=s(obe);vlr=r(s3t,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),s3t.forEach(t),Flr=i(Aw),Bd=n(Aw,"P",{});var Eee=s(Bd);Tlr=r(Eee,`Note:
Loading a model from its configuration file does `),rbe=n(Eee,"STRONG",{});var l3t=s(rbe);Mlr=r(l3t,"not"),l3t.forEach(t),Elr=r(Eee,` load the model weights. It only affects the
model\u2019s configuration. Use `),iW=n(Eee,"A",{href:!0});var i3t=s(iW);Clr=r(i3t,"from_pretrained()"),i3t.forEach(t),wlr=r(Eee," to load the model weights."),Eee.forEach(t),Alr=i(Aw),T(GF.$$.fragment,Aw),Aw.forEach(t),ylr=i(fl),uo=n(fl,"DIV",{class:!0});var Ta=s(uo);T(sL.$$.fragment,Ta),Llr=i(Ta),tbe=n(Ta,"P",{});var d3t=s(tbe);xlr=r(d3t,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),d3t.forEach(t),$lr=i(Ta),Ha=n(Ta,"P",{});var yw=s(Ha);klr=r(yw,"The model class to instantiate is selected based on the "),abe=n(yw,"CODE",{});var c3t=s(abe);Slr=r(c3t,"model_type"),c3t.forEach(t),Rlr=r(yw,` property of the config object (either
passed as an argument or loaded from `),nbe=n(yw,"CODE",{});var f3t=s(nbe);Plr=r(f3t,"pretrained_model_name_or_path"),f3t.forEach(t),Blr=r(yw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sbe=n(yw,"CODE",{});var m3t=s(sbe);Ilr=r(m3t,"pretrained_model_name_or_path"),m3t.forEach(t),Nlr=r(yw,":"),yw.forEach(t),qlr=i(Ta),lbe=n(Ta,"UL",{});var g3t=s(lbe);OF=n(g3t,"LI",{});var jSe=s(OF);ibe=n(jSe,"STRONG",{});var h3t=s(ibe);jlr=r(h3t,"detr"),h3t.forEach(t),Dlr=r(jSe," \u2014 "),dW=n(jSe,"A",{href:!0});var p3t=s(dW);Glr=r(p3t,"DetrForSegmentation"),p3t.forEach(t),Olr=r(jSe," (DETR model)"),jSe.forEach(t),g3t.forEach(t),Vlr=i(Ta),VF=n(Ta,"P",{});var DSe=s(VF);Xlr=r(DSe,"The model is set in evaluation mode by default using "),dbe=n(DSe,"CODE",{});var _3t=s(dbe);zlr=r(_3t,"model.eval()"),_3t.forEach(t),Wlr=r(DSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cbe=n(DSe,"CODE",{});var u3t=s(cbe);Qlr=r(u3t,"model.train()"),u3t.forEach(t),DSe.forEach(t),Hlr=i(Ta),T(XF.$$.fragment,Ta),Ta.forEach(t),fl.forEach(t),Ije=i(f),Id=n(f,"H2",{class:!0});var OGe=s(Id);zF=n(OGe,"A",{id:!0,class:!0,href:!0});var b3t=s(zF);fbe=n(b3t,"SPAN",{});var v3t=s(fbe);T(lL.$$.fragment,v3t),v3t.forEach(t),b3t.forEach(t),Ulr=i(OGe),mbe=n(OGe,"SPAN",{});var F3t=s(mbe);Jlr=r(F3t,"AutoModelForSemanticSegmentation"),F3t.forEach(t),OGe.forEach(t),Nje=i(f),Uo=n(f,"DIV",{class:!0});var ml=s(Uo);T(iL.$$.fragment,ml),Ylr=i(ml),Nd=n(ml,"P",{});var Cee=s(Nd);Klr=r(Cee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),cW=n(Cee,"A",{href:!0});var T3t=s(cW);Zlr=r(T3t,"from_pretrained()"),T3t.forEach(t),eir=r(Cee," class method or the "),fW=n(Cee,"A",{href:!0});var M3t=s(fW);oir=r(M3t,"from_config()"),M3t.forEach(t),rir=r(Cee,` class
method.`),Cee.forEach(t),tir=i(ml),dL=n(ml,"P",{});var VGe=s(dL);air=r(VGe,"This class cannot be instantiated directly using "),gbe=n(VGe,"CODE",{});var E3t=s(gbe);nir=r(E3t,"__init__()"),E3t.forEach(t),sir=r(VGe," (throws an error)."),VGe.forEach(t),lir=i(ml),wt=n(ml,"DIV",{class:!0});var Lw=s(wt);T(cL.$$.fragment,Lw),iir=i(Lw),hbe=n(Lw,"P",{});var C3t=s(hbe);dir=r(C3t,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),C3t.forEach(t),cir=i(Lw),qd=n(Lw,"P",{});var wee=s(qd);fir=r(wee,`Note:
Loading a model from its configuration file does `),pbe=n(wee,"STRONG",{});var w3t=s(pbe);mir=r(w3t,"not"),w3t.forEach(t),gir=r(wee,` load the model weights. It only affects the
model\u2019s configuration. Use `),mW=n(wee,"A",{href:!0});var A3t=s(mW);hir=r(A3t,"from_pretrained()"),A3t.forEach(t),pir=r(wee," to load the model weights."),wee.forEach(t),_ir=i(Lw),T(WF.$$.fragment,Lw),Lw.forEach(t),uir=i(ml),bo=n(ml,"DIV",{class:!0});var Ma=s(bo);T(fL.$$.fragment,Ma),bir=i(Ma),_be=n(Ma,"P",{});var y3t=s(_be);vir=r(y3t,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),y3t.forEach(t),Fir=i(Ma),Ua=n(Ma,"P",{});var xw=s(Ua);Tir=r(xw,"The model class to instantiate is selected based on the "),ube=n(xw,"CODE",{});var L3t=s(ube);Mir=r(L3t,"model_type"),L3t.forEach(t),Eir=r(xw,` property of the config object (either
passed as an argument or loaded from `),bbe=n(xw,"CODE",{});var x3t=s(bbe);Cir=r(x3t,"pretrained_model_name_or_path"),x3t.forEach(t),wir=r(xw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vbe=n(xw,"CODE",{});var $3t=s(vbe);Air=r($3t,"pretrained_model_name_or_path"),$3t.forEach(t),yir=r(xw,":"),xw.forEach(t),Lir=i(Ma),Ja=n(Ma,"UL",{});var $w=s(Ja);QF=n($w,"LI",{});var GSe=s(QF);Fbe=n(GSe,"STRONG",{});var k3t=s(Fbe);xir=r(k3t,"beit"),k3t.forEach(t),$ir=r(GSe," \u2014 "),gW=n(GSe,"A",{href:!0});var S3t=s(gW);kir=r(S3t,"BeitForSemanticSegmentation"),S3t.forEach(t),Sir=r(GSe," (BEiT model)"),GSe.forEach(t),Rir=i($w),HF=n($w,"LI",{});var OSe=s(HF);Tbe=n(OSe,"STRONG",{});var R3t=s(Tbe);Pir=r(R3t,"data2vec-vision"),R3t.forEach(t),Bir=r(OSe," \u2014 "),hW=n(OSe,"A",{href:!0});var P3t=s(hW);Iir=r(P3t,"Data2VecVisionForSemanticSegmentation"),P3t.forEach(t),Nir=r(OSe," (Data2VecVision model)"),OSe.forEach(t),qir=i($w),UF=n($w,"LI",{});var VSe=s(UF);Mbe=n(VSe,"STRONG",{});var B3t=s(Mbe);jir=r(B3t,"dpt"),B3t.forEach(t),Dir=r(VSe," \u2014 "),pW=n(VSe,"A",{href:!0});var I3t=s(pW);Gir=r(I3t,"DPTForSemanticSegmentation"),I3t.forEach(t),Oir=r(VSe," (DPT model)"),VSe.forEach(t),Vir=i($w),JF=n($w,"LI",{});var XSe=s(JF);Ebe=n(XSe,"STRONG",{});var N3t=s(Ebe);Xir=r(N3t,"segformer"),N3t.forEach(t),zir=r(XSe," \u2014 "),_W=n(XSe,"A",{href:!0});var q3t=s(_W);Wir=r(q3t,"SegformerForSemanticSegmentation"),q3t.forEach(t),Qir=r(XSe," (SegFormer model)"),XSe.forEach(t),$w.forEach(t),Hir=i(Ma),YF=n(Ma,"P",{});var zSe=s(YF);Uir=r(zSe,"The model is set in evaluation mode by default using "),Cbe=n(zSe,"CODE",{});var j3t=s(Cbe);Jir=r(j3t,"model.eval()"),j3t.forEach(t),Yir=r(zSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wbe=n(zSe,"CODE",{});var D3t=s(wbe);Kir=r(D3t,"model.train()"),D3t.forEach(t),zSe.forEach(t),Zir=i(Ma),T(KF.$$.fragment,Ma),Ma.forEach(t),ml.forEach(t),qje=i(f),jd=n(f,"H2",{class:!0});var XGe=s(jd);ZF=n(XGe,"A",{id:!0,class:!0,href:!0});var G3t=s(ZF);Abe=n(G3t,"SPAN",{});var O3t=s(Abe);T(mL.$$.fragment,O3t),O3t.forEach(t),G3t.forEach(t),edr=i(XGe),ybe=n(XGe,"SPAN",{});var V3t=s(ybe);odr=r(V3t,"AutoModelForInstanceSegmentation"),V3t.forEach(t),XGe.forEach(t),jje=i(f),Jo=n(f,"DIV",{class:!0});var gl=s(Jo);T(gL.$$.fragment,gl),rdr=i(gl),Dd=n(gl,"P",{});var Aee=s(Dd);tdr=r(Aee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),uW=n(Aee,"A",{href:!0});var X3t=s(uW);adr=r(X3t,"from_pretrained()"),X3t.forEach(t),ndr=r(Aee," class method or the "),bW=n(Aee,"A",{href:!0});var z3t=s(bW);sdr=r(z3t,"from_config()"),z3t.forEach(t),ldr=r(Aee,` class
method.`),Aee.forEach(t),idr=i(gl),hL=n(gl,"P",{});var zGe=s(hL);ddr=r(zGe,"This class cannot be instantiated directly using "),Lbe=n(zGe,"CODE",{});var W3t=s(Lbe);cdr=r(W3t,"__init__()"),W3t.forEach(t),fdr=r(zGe," (throws an error)."),zGe.forEach(t),mdr=i(gl),At=n(gl,"DIV",{class:!0});var kw=s(At);T(pL.$$.fragment,kw),gdr=i(kw),xbe=n(kw,"P",{});var Q3t=s(xbe);hdr=r(Q3t,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Q3t.forEach(t),pdr=i(kw),Gd=n(kw,"P",{});var yee=s(Gd);_dr=r(yee,`Note:
Loading a model from its configuration file does `),$be=n(yee,"STRONG",{});var H3t=s($be);udr=r(H3t,"not"),H3t.forEach(t),bdr=r(yee,` load the model weights. It only affects the
model\u2019s configuration. Use `),vW=n(yee,"A",{href:!0});var U3t=s(vW);vdr=r(U3t,"from_pretrained()"),U3t.forEach(t),Fdr=r(yee," to load the model weights."),yee.forEach(t),Tdr=i(kw),T(eT.$$.fragment,kw),kw.forEach(t),Mdr=i(gl),vo=n(gl,"DIV",{class:!0});var Ea=s(vo);T(_L.$$.fragment,Ea),Edr=i(Ea),kbe=n(Ea,"P",{});var J3t=s(kbe);Cdr=r(J3t,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),J3t.forEach(t),wdr=i(Ea),Ya=n(Ea,"P",{});var Sw=s(Ya);Adr=r(Sw,"The model class to instantiate is selected based on the "),Sbe=n(Sw,"CODE",{});var Y3t=s(Sbe);ydr=r(Y3t,"model_type"),Y3t.forEach(t),Ldr=r(Sw,` property of the config object (either
passed as an argument or loaded from `),Rbe=n(Sw,"CODE",{});var K3t=s(Rbe);xdr=r(K3t,"pretrained_model_name_or_path"),K3t.forEach(t),$dr=r(Sw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pbe=n(Sw,"CODE",{});var Z3t=s(Pbe);kdr=r(Z3t,"pretrained_model_name_or_path"),Z3t.forEach(t),Sdr=r(Sw,":"),Sw.forEach(t),Rdr=i(Ea),Bbe=n(Ea,"UL",{});var eFt=s(Bbe);oT=n(eFt,"LI",{});var WSe=s(oT);Ibe=n(WSe,"STRONG",{});var oFt=s(Ibe);Pdr=r(oFt,"maskformer"),oFt.forEach(t),Bdr=r(WSe," \u2014 "),FW=n(WSe,"A",{href:!0});var rFt=s(FW);Idr=r(rFt,"MaskFormerForInstanceSegmentation"),rFt.forEach(t),Ndr=r(WSe," (MaskFormer model)"),WSe.forEach(t),eFt.forEach(t),qdr=i(Ea),rT=n(Ea,"P",{});var QSe=s(rT);jdr=r(QSe,"The model is set in evaluation mode by default using "),Nbe=n(QSe,"CODE",{});var tFt=s(Nbe);Ddr=r(tFt,"model.eval()"),tFt.forEach(t),Gdr=r(QSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qbe=n(QSe,"CODE",{});var aFt=s(qbe);Odr=r(aFt,"model.train()"),aFt.forEach(t),QSe.forEach(t),Vdr=i(Ea),T(tT.$$.fragment,Ea),Ea.forEach(t),gl.forEach(t),Dje=i(f),Od=n(f,"H2",{class:!0});var WGe=s(Od);aT=n(WGe,"A",{id:!0,class:!0,href:!0});var nFt=s(aT);jbe=n(nFt,"SPAN",{});var sFt=s(jbe);T(uL.$$.fragment,sFt),sFt.forEach(t),nFt.forEach(t),Xdr=i(WGe),Dbe=n(WGe,"SPAN",{});var lFt=s(Dbe);zdr=r(lFt,"TFAutoModel"),lFt.forEach(t),WGe.forEach(t),Gje=i(f),Yo=n(f,"DIV",{class:!0});var hl=s(Yo);T(bL.$$.fragment,hl),Wdr=i(hl),Vd=n(hl,"P",{});var Lee=s(Vd);Qdr=r(Lee,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),TW=n(Lee,"A",{href:!0});var iFt=s(TW);Hdr=r(iFt,"from_pretrained()"),iFt.forEach(t),Udr=r(Lee," class method or the "),MW=n(Lee,"A",{href:!0});var dFt=s(MW);Jdr=r(dFt,"from_config()"),dFt.forEach(t),Ydr=r(Lee,` class
method.`),Lee.forEach(t),Kdr=i(hl),vL=n(hl,"P",{});var QGe=s(vL);Zdr=r(QGe,"This class cannot be instantiated directly using "),Gbe=n(QGe,"CODE",{});var cFt=s(Gbe);ecr=r(cFt,"__init__()"),cFt.forEach(t),ocr=r(QGe," (throws an error)."),QGe.forEach(t),rcr=i(hl),yt=n(hl,"DIV",{class:!0});var Rw=s(yt);T(FL.$$.fragment,Rw),tcr=i(Rw),Obe=n(Rw,"P",{});var fFt=s(Obe);acr=r(fFt,"Instantiates one of the base model classes of the library from a configuration."),fFt.forEach(t),ncr=i(Rw),Xd=n(Rw,"P",{});var xee=s(Xd);scr=r(xee,`Note:
Loading a model from its configuration file does `),Vbe=n(xee,"STRONG",{});var mFt=s(Vbe);lcr=r(mFt,"not"),mFt.forEach(t),icr=r(xee,` load the model weights. It only affects the
model\u2019s configuration. Use `),EW=n(xee,"A",{href:!0});var gFt=s(EW);dcr=r(gFt,"from_pretrained()"),gFt.forEach(t),ccr=r(xee," to load the model weights."),xee.forEach(t),fcr=i(Rw),T(nT.$$.fragment,Rw),Rw.forEach(t),mcr=i(hl),wr=n(hl,"DIV",{class:!0});var pl=s(wr);T(TL.$$.fragment,pl),gcr=i(pl),Xbe=n(pl,"P",{});var hFt=s(Xbe);hcr=r(hFt,"Instantiate one of the base model classes of the library from a pretrained model."),hFt.forEach(t),pcr=i(pl),Ka=n(pl,"P",{});var Pw=s(Ka);_cr=r(Pw,"The model class to instantiate is selected based on the "),zbe=n(Pw,"CODE",{});var pFt=s(zbe);ucr=r(pFt,"model_type"),pFt.forEach(t),bcr=r(Pw,` property of the config object (either
passed as an argument or loaded from `),Wbe=n(Pw,"CODE",{});var _Ft=s(Wbe);vcr=r(_Ft,"pretrained_model_name_or_path"),_Ft.forEach(t),Fcr=r(Pw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qbe=n(Pw,"CODE",{});var uFt=s(Qbe);Tcr=r(uFt,"pretrained_model_name_or_path"),uFt.forEach(t),Mcr=r(Pw,":"),Pw.forEach(t),Ecr=i(pl),q=n(pl,"UL",{});var D=s(q);sT=n(D,"LI",{});var HSe=s(sT);Hbe=n(HSe,"STRONG",{});var bFt=s(Hbe);Ccr=r(bFt,"albert"),bFt.forEach(t),wcr=r(HSe," \u2014 "),CW=n(HSe,"A",{href:!0});var vFt=s(CW);Acr=r(vFt,"TFAlbertModel"),vFt.forEach(t),ycr=r(HSe," (ALBERT model)"),HSe.forEach(t),Lcr=i(D),lT=n(D,"LI",{});var USe=s(lT);Ube=n(USe,"STRONG",{});var FFt=s(Ube);xcr=r(FFt,"bart"),FFt.forEach(t),$cr=r(USe," \u2014 "),wW=n(USe,"A",{href:!0});var TFt=s(wW);kcr=r(TFt,"TFBartModel"),TFt.forEach(t),Scr=r(USe," (BART model)"),USe.forEach(t),Rcr=i(D),iT=n(D,"LI",{});var JSe=s(iT);Jbe=n(JSe,"STRONG",{});var MFt=s(Jbe);Pcr=r(MFt,"bert"),MFt.forEach(t),Bcr=r(JSe," \u2014 "),AW=n(JSe,"A",{href:!0});var EFt=s(AW);Icr=r(EFt,"TFBertModel"),EFt.forEach(t),Ncr=r(JSe," (BERT model)"),JSe.forEach(t),qcr=i(D),dT=n(D,"LI",{});var YSe=s(dT);Ybe=n(YSe,"STRONG",{});var CFt=s(Ybe);jcr=r(CFt,"blenderbot"),CFt.forEach(t),Dcr=r(YSe," \u2014 "),yW=n(YSe,"A",{href:!0});var wFt=s(yW);Gcr=r(wFt,"TFBlenderbotModel"),wFt.forEach(t),Ocr=r(YSe," (Blenderbot model)"),YSe.forEach(t),Vcr=i(D),cT=n(D,"LI",{});var KSe=s(cT);Kbe=n(KSe,"STRONG",{});var AFt=s(Kbe);Xcr=r(AFt,"blenderbot-small"),AFt.forEach(t),zcr=r(KSe," \u2014 "),LW=n(KSe,"A",{href:!0});var yFt=s(LW);Wcr=r(yFt,"TFBlenderbotSmallModel"),yFt.forEach(t),Qcr=r(KSe," (BlenderbotSmall model)"),KSe.forEach(t),Hcr=i(D),fT=n(D,"LI",{});var ZSe=s(fT);Zbe=n(ZSe,"STRONG",{});var LFt=s(Zbe);Ucr=r(LFt,"camembert"),LFt.forEach(t),Jcr=r(ZSe," \u2014 "),xW=n(ZSe,"A",{href:!0});var xFt=s(xW);Ycr=r(xFt,"TFCamembertModel"),xFt.forEach(t),Kcr=r(ZSe," (CamemBERT model)"),ZSe.forEach(t),Zcr=i(D),mT=n(D,"LI",{});var eRe=s(mT);e2e=n(eRe,"STRONG",{});var $Ft=s(e2e);efr=r($Ft,"clip"),$Ft.forEach(t),ofr=r(eRe," \u2014 "),$W=n(eRe,"A",{href:!0});var kFt=s($W);rfr=r(kFt,"TFCLIPModel"),kFt.forEach(t),tfr=r(eRe," (CLIP model)"),eRe.forEach(t),afr=i(D),gT=n(D,"LI",{});var oRe=s(gT);o2e=n(oRe,"STRONG",{});var SFt=s(o2e);nfr=r(SFt,"convbert"),SFt.forEach(t),sfr=r(oRe," \u2014 "),kW=n(oRe,"A",{href:!0});var RFt=s(kW);lfr=r(RFt,"TFConvBertModel"),RFt.forEach(t),ifr=r(oRe," (ConvBERT model)"),oRe.forEach(t),dfr=i(D),hT=n(D,"LI",{});var rRe=s(hT);r2e=n(rRe,"STRONG",{});var PFt=s(r2e);cfr=r(PFt,"convnext"),PFt.forEach(t),ffr=r(rRe," \u2014 "),SW=n(rRe,"A",{href:!0});var BFt=s(SW);mfr=r(BFt,"TFConvNextModel"),BFt.forEach(t),gfr=r(rRe," (ConvNeXT model)"),rRe.forEach(t),hfr=i(D),pT=n(D,"LI",{});var tRe=s(pT);t2e=n(tRe,"STRONG",{});var IFt=s(t2e);pfr=r(IFt,"ctrl"),IFt.forEach(t),_fr=r(tRe," \u2014 "),RW=n(tRe,"A",{href:!0});var NFt=s(RW);ufr=r(NFt,"TFCTRLModel"),NFt.forEach(t),bfr=r(tRe," (CTRL model)"),tRe.forEach(t),vfr=i(D),_T=n(D,"LI",{});var aRe=s(_T);a2e=n(aRe,"STRONG",{});var qFt=s(a2e);Ffr=r(qFt,"data2vec-vision"),qFt.forEach(t),Tfr=r(aRe," \u2014 "),PW=n(aRe,"A",{href:!0});var jFt=s(PW);Mfr=r(jFt,"TFData2VecVisionModel"),jFt.forEach(t),Efr=r(aRe," (Data2VecVision model)"),aRe.forEach(t),Cfr=i(D),uT=n(D,"LI",{});var nRe=s(uT);n2e=n(nRe,"STRONG",{});var DFt=s(n2e);wfr=r(DFt,"deberta"),DFt.forEach(t),Afr=r(nRe," \u2014 "),BW=n(nRe,"A",{href:!0});var GFt=s(BW);yfr=r(GFt,"TFDebertaModel"),GFt.forEach(t),Lfr=r(nRe," (DeBERTa model)"),nRe.forEach(t),xfr=i(D),bT=n(D,"LI",{});var sRe=s(bT);s2e=n(sRe,"STRONG",{});var OFt=s(s2e);$fr=r(OFt,"deberta-v2"),OFt.forEach(t),kfr=r(sRe," \u2014 "),IW=n(sRe,"A",{href:!0});var VFt=s(IW);Sfr=r(VFt,"TFDebertaV2Model"),VFt.forEach(t),Rfr=r(sRe," (DeBERTa-v2 model)"),sRe.forEach(t),Pfr=i(D),vT=n(D,"LI",{});var lRe=s(vT);l2e=n(lRe,"STRONG",{});var XFt=s(l2e);Bfr=r(XFt,"distilbert"),XFt.forEach(t),Ifr=r(lRe," \u2014 "),NW=n(lRe,"A",{href:!0});var zFt=s(NW);Nfr=r(zFt,"TFDistilBertModel"),zFt.forEach(t),qfr=r(lRe," (DistilBERT model)"),lRe.forEach(t),jfr=i(D),FT=n(D,"LI",{});var iRe=s(FT);i2e=n(iRe,"STRONG",{});var WFt=s(i2e);Dfr=r(WFt,"dpr"),WFt.forEach(t),Gfr=r(iRe," \u2014 "),qW=n(iRe,"A",{href:!0});var QFt=s(qW);Ofr=r(QFt,"TFDPRQuestionEncoder"),QFt.forEach(t),Vfr=r(iRe," (DPR model)"),iRe.forEach(t),Xfr=i(D),TT=n(D,"LI",{});var dRe=s(TT);d2e=n(dRe,"STRONG",{});var HFt=s(d2e);zfr=r(HFt,"electra"),HFt.forEach(t),Wfr=r(dRe," \u2014 "),jW=n(dRe,"A",{href:!0});var UFt=s(jW);Qfr=r(UFt,"TFElectraModel"),UFt.forEach(t),Hfr=r(dRe," (ELECTRA model)"),dRe.forEach(t),Ufr=i(D),MT=n(D,"LI",{});var cRe=s(MT);c2e=n(cRe,"STRONG",{});var JFt=s(c2e);Jfr=r(JFt,"flaubert"),JFt.forEach(t),Yfr=r(cRe," \u2014 "),DW=n(cRe,"A",{href:!0});var YFt=s(DW);Kfr=r(YFt,"TFFlaubertModel"),YFt.forEach(t),Zfr=r(cRe," (FlauBERT model)"),cRe.forEach(t),emr=i(D),Ns=n(D,"LI",{});var ek=s(Ns);f2e=n(ek,"STRONG",{});var KFt=s(f2e);omr=r(KFt,"funnel"),KFt.forEach(t),rmr=r(ek," \u2014 "),GW=n(ek,"A",{href:!0});var ZFt=s(GW);tmr=r(ZFt,"TFFunnelModel"),ZFt.forEach(t),amr=r(ek," or "),OW=n(ek,"A",{href:!0});var eTt=s(OW);nmr=r(eTt,"TFFunnelBaseModel"),eTt.forEach(t),smr=r(ek," (Funnel Transformer model)"),ek.forEach(t),lmr=i(D),ET=n(D,"LI",{});var fRe=s(ET);m2e=n(fRe,"STRONG",{});var oTt=s(m2e);imr=r(oTt,"gpt2"),oTt.forEach(t),dmr=r(fRe," \u2014 "),VW=n(fRe,"A",{href:!0});var rTt=s(VW);cmr=r(rTt,"TFGPT2Model"),rTt.forEach(t),fmr=r(fRe," (OpenAI GPT-2 model)"),fRe.forEach(t),mmr=i(D),CT=n(D,"LI",{});var mRe=s(CT);g2e=n(mRe,"STRONG",{});var tTt=s(g2e);gmr=r(tTt,"gptj"),tTt.forEach(t),hmr=r(mRe," \u2014 "),XW=n(mRe,"A",{href:!0});var aTt=s(XW);pmr=r(aTt,"TFGPTJModel"),aTt.forEach(t),_mr=r(mRe," (GPT-J model)"),mRe.forEach(t),umr=i(D),wT=n(D,"LI",{});var gRe=s(wT);h2e=n(gRe,"STRONG",{});var nTt=s(h2e);bmr=r(nTt,"hubert"),nTt.forEach(t),vmr=r(gRe," \u2014 "),zW=n(gRe,"A",{href:!0});var sTt=s(zW);Fmr=r(sTt,"TFHubertModel"),sTt.forEach(t),Tmr=r(gRe," (Hubert model)"),gRe.forEach(t),Mmr=i(D),AT=n(D,"LI",{});var hRe=s(AT);p2e=n(hRe,"STRONG",{});var lTt=s(p2e);Emr=r(lTt,"layoutlm"),lTt.forEach(t),Cmr=r(hRe," \u2014 "),WW=n(hRe,"A",{href:!0});var iTt=s(WW);wmr=r(iTt,"TFLayoutLMModel"),iTt.forEach(t),Amr=r(hRe," (LayoutLM model)"),hRe.forEach(t),ymr=i(D),yT=n(D,"LI",{});var pRe=s(yT);_2e=n(pRe,"STRONG",{});var dTt=s(_2e);Lmr=r(dTt,"led"),dTt.forEach(t),xmr=r(pRe," \u2014 "),QW=n(pRe,"A",{href:!0});var cTt=s(QW);$mr=r(cTt,"TFLEDModel"),cTt.forEach(t),kmr=r(pRe," (LED model)"),pRe.forEach(t),Smr=i(D),LT=n(D,"LI",{});var _Re=s(LT);u2e=n(_Re,"STRONG",{});var fTt=s(u2e);Rmr=r(fTt,"longformer"),fTt.forEach(t),Pmr=r(_Re," \u2014 "),HW=n(_Re,"A",{href:!0});var mTt=s(HW);Bmr=r(mTt,"TFLongformerModel"),mTt.forEach(t),Imr=r(_Re," (Longformer model)"),_Re.forEach(t),Nmr=i(D),xT=n(D,"LI",{});var uRe=s(xT);b2e=n(uRe,"STRONG",{});var gTt=s(b2e);qmr=r(gTt,"lxmert"),gTt.forEach(t),jmr=r(uRe," \u2014 "),UW=n(uRe,"A",{href:!0});var hTt=s(UW);Dmr=r(hTt,"TFLxmertModel"),hTt.forEach(t),Gmr=r(uRe," (LXMERT model)"),uRe.forEach(t),Omr=i(D),$T=n(D,"LI",{});var bRe=s($T);v2e=n(bRe,"STRONG",{});var pTt=s(v2e);Vmr=r(pTt,"marian"),pTt.forEach(t),Xmr=r(bRe," \u2014 "),JW=n(bRe,"A",{href:!0});var _Tt=s(JW);zmr=r(_Tt,"TFMarianModel"),_Tt.forEach(t),Wmr=r(bRe," (Marian model)"),bRe.forEach(t),Qmr=i(D),kT=n(D,"LI",{});var vRe=s(kT);F2e=n(vRe,"STRONG",{});var uTt=s(F2e);Hmr=r(uTt,"mbart"),uTt.forEach(t),Umr=r(vRe," \u2014 "),YW=n(vRe,"A",{href:!0});var bTt=s(YW);Jmr=r(bTt,"TFMBartModel"),bTt.forEach(t),Ymr=r(vRe," (mBART model)"),vRe.forEach(t),Kmr=i(D),ST=n(D,"LI",{});var FRe=s(ST);T2e=n(FRe,"STRONG",{});var vTt=s(T2e);Zmr=r(vTt,"mobilebert"),vTt.forEach(t),egr=r(FRe," \u2014 "),KW=n(FRe,"A",{href:!0});var FTt=s(KW);ogr=r(FTt,"TFMobileBertModel"),FTt.forEach(t),rgr=r(FRe," (MobileBERT model)"),FRe.forEach(t),tgr=i(D),RT=n(D,"LI",{});var TRe=s(RT);M2e=n(TRe,"STRONG",{});var TTt=s(M2e);agr=r(TTt,"mpnet"),TTt.forEach(t),ngr=r(TRe," \u2014 "),ZW=n(TRe,"A",{href:!0});var MTt=s(ZW);sgr=r(MTt,"TFMPNetModel"),MTt.forEach(t),lgr=r(TRe," (MPNet model)"),TRe.forEach(t),igr=i(D),PT=n(D,"LI",{});var MRe=s(PT);E2e=n(MRe,"STRONG",{});var ETt=s(E2e);dgr=r(ETt,"mt5"),ETt.forEach(t),cgr=r(MRe," \u2014 "),eQ=n(MRe,"A",{href:!0});var CTt=s(eQ);fgr=r(CTt,"TFMT5Model"),CTt.forEach(t),mgr=r(MRe," (MT5 model)"),MRe.forEach(t),ggr=i(D),BT=n(D,"LI",{});var ERe=s(BT);C2e=n(ERe,"STRONG",{});var wTt=s(C2e);hgr=r(wTt,"openai-gpt"),wTt.forEach(t),pgr=r(ERe," \u2014 "),oQ=n(ERe,"A",{href:!0});var ATt=s(oQ);_gr=r(ATt,"TFOpenAIGPTModel"),ATt.forEach(t),ugr=r(ERe," (OpenAI GPT model)"),ERe.forEach(t),bgr=i(D),IT=n(D,"LI",{});var CRe=s(IT);w2e=n(CRe,"STRONG",{});var yTt=s(w2e);vgr=r(yTt,"opt"),yTt.forEach(t),Fgr=r(CRe," \u2014 "),rQ=n(CRe,"A",{href:!0});var LTt=s(rQ);Tgr=r(LTt,"TFOPTModel"),LTt.forEach(t),Mgr=r(CRe," (OPT model)"),CRe.forEach(t),Egr=i(D),NT=n(D,"LI",{});var wRe=s(NT);A2e=n(wRe,"STRONG",{});var xTt=s(A2e);Cgr=r(xTt,"pegasus"),xTt.forEach(t),wgr=r(wRe," \u2014 "),tQ=n(wRe,"A",{href:!0});var $Tt=s(tQ);Agr=r($Tt,"TFPegasusModel"),$Tt.forEach(t),ygr=r(wRe," (Pegasus model)"),wRe.forEach(t),Lgr=i(D),qT=n(D,"LI",{});var ARe=s(qT);y2e=n(ARe,"STRONG",{});var kTt=s(y2e);xgr=r(kTt,"rembert"),kTt.forEach(t),$gr=r(ARe," \u2014 "),aQ=n(ARe,"A",{href:!0});var STt=s(aQ);kgr=r(STt,"TFRemBertModel"),STt.forEach(t),Sgr=r(ARe," (RemBERT model)"),ARe.forEach(t),Rgr=i(D),jT=n(D,"LI",{});var yRe=s(jT);L2e=n(yRe,"STRONG",{});var RTt=s(L2e);Pgr=r(RTt,"roberta"),RTt.forEach(t),Bgr=r(yRe," \u2014 "),nQ=n(yRe,"A",{href:!0});var PTt=s(nQ);Igr=r(PTt,"TFRobertaModel"),PTt.forEach(t),Ngr=r(yRe," (RoBERTa model)"),yRe.forEach(t),qgr=i(D),DT=n(D,"LI",{});var LRe=s(DT);x2e=n(LRe,"STRONG",{});var BTt=s(x2e);jgr=r(BTt,"roformer"),BTt.forEach(t),Dgr=r(LRe," \u2014 "),sQ=n(LRe,"A",{href:!0});var ITt=s(sQ);Ggr=r(ITt,"TFRoFormerModel"),ITt.forEach(t),Ogr=r(LRe," (RoFormer model)"),LRe.forEach(t),Vgr=i(D),GT=n(D,"LI",{});var xRe=s(GT);$2e=n(xRe,"STRONG",{});var NTt=s($2e);Xgr=r(NTt,"speech_to_text"),NTt.forEach(t),zgr=r(xRe," \u2014 "),lQ=n(xRe,"A",{href:!0});var qTt=s(lQ);Wgr=r(qTt,"TFSpeech2TextModel"),qTt.forEach(t),Qgr=r(xRe," (Speech2Text model)"),xRe.forEach(t),Hgr=i(D),OT=n(D,"LI",{});var $Re=s(OT);k2e=n($Re,"STRONG",{});var jTt=s(k2e);Ugr=r(jTt,"swin"),jTt.forEach(t),Jgr=r($Re," \u2014 "),iQ=n($Re,"A",{href:!0});var DTt=s(iQ);Ygr=r(DTt,"TFSwinModel"),DTt.forEach(t),Kgr=r($Re," (Swin Transformer model)"),$Re.forEach(t),Zgr=i(D),VT=n(D,"LI",{});var kRe=s(VT);S2e=n(kRe,"STRONG",{});var GTt=s(S2e);ehr=r(GTt,"t5"),GTt.forEach(t),ohr=r(kRe," \u2014 "),dQ=n(kRe,"A",{href:!0});var OTt=s(dQ);rhr=r(OTt,"TFT5Model"),OTt.forEach(t),thr=r(kRe," (T5 model)"),kRe.forEach(t),ahr=i(D),XT=n(D,"LI",{});var SRe=s(XT);R2e=n(SRe,"STRONG",{});var VTt=s(R2e);nhr=r(VTt,"tapas"),VTt.forEach(t),shr=r(SRe," \u2014 "),cQ=n(SRe,"A",{href:!0});var XTt=s(cQ);lhr=r(XTt,"TFTapasModel"),XTt.forEach(t),ihr=r(SRe," (TAPAS model)"),SRe.forEach(t),dhr=i(D),zT=n(D,"LI",{});var RRe=s(zT);P2e=n(RRe,"STRONG",{});var zTt=s(P2e);chr=r(zTt,"transfo-xl"),zTt.forEach(t),fhr=r(RRe," \u2014 "),fQ=n(RRe,"A",{href:!0});var WTt=s(fQ);mhr=r(WTt,"TFTransfoXLModel"),WTt.forEach(t),ghr=r(RRe," (Transformer-XL model)"),RRe.forEach(t),hhr=i(D),WT=n(D,"LI",{});var PRe=s(WT);B2e=n(PRe,"STRONG",{});var QTt=s(B2e);phr=r(QTt,"vit"),QTt.forEach(t),_hr=r(PRe," \u2014 "),mQ=n(PRe,"A",{href:!0});var HTt=s(mQ);uhr=r(HTt,"TFViTModel"),HTt.forEach(t),bhr=r(PRe," (ViT model)"),PRe.forEach(t),vhr=i(D),QT=n(D,"LI",{});var BRe=s(QT);I2e=n(BRe,"STRONG",{});var UTt=s(I2e);Fhr=r(UTt,"vit_mae"),UTt.forEach(t),Thr=r(BRe," \u2014 "),gQ=n(BRe,"A",{href:!0});var JTt=s(gQ);Mhr=r(JTt,"TFViTMAEModel"),JTt.forEach(t),Ehr=r(BRe," (ViTMAE model)"),BRe.forEach(t),Chr=i(D),HT=n(D,"LI",{});var IRe=s(HT);N2e=n(IRe,"STRONG",{});var YTt=s(N2e);whr=r(YTt,"wav2vec2"),YTt.forEach(t),Ahr=r(IRe," \u2014 "),hQ=n(IRe,"A",{href:!0});var KTt=s(hQ);yhr=r(KTt,"TFWav2Vec2Model"),KTt.forEach(t),Lhr=r(IRe," (Wav2Vec2 model)"),IRe.forEach(t),xhr=i(D),UT=n(D,"LI",{});var NRe=s(UT);q2e=n(NRe,"STRONG",{});var ZTt=s(q2e);$hr=r(ZTt,"xlm"),ZTt.forEach(t),khr=r(NRe," \u2014 "),pQ=n(NRe,"A",{href:!0});var e7t=s(pQ);Shr=r(e7t,"TFXLMModel"),e7t.forEach(t),Rhr=r(NRe," (XLM model)"),NRe.forEach(t),Phr=i(D),JT=n(D,"LI",{});var qRe=s(JT);j2e=n(qRe,"STRONG",{});var o7t=s(j2e);Bhr=r(o7t,"xlm-roberta"),o7t.forEach(t),Ihr=r(qRe," \u2014 "),_Q=n(qRe,"A",{href:!0});var r7t=s(_Q);Nhr=r(r7t,"TFXLMRobertaModel"),r7t.forEach(t),qhr=r(qRe," (XLM-RoBERTa model)"),qRe.forEach(t),jhr=i(D),YT=n(D,"LI",{});var jRe=s(YT);D2e=n(jRe,"STRONG",{});var t7t=s(D2e);Dhr=r(t7t,"xlnet"),t7t.forEach(t),Ghr=r(jRe," \u2014 "),uQ=n(jRe,"A",{href:!0});var a7t=s(uQ);Ohr=r(a7t,"TFXLNetModel"),a7t.forEach(t),Vhr=r(jRe," (XLNet model)"),jRe.forEach(t),D.forEach(t),Xhr=i(pl),T(KT.$$.fragment,pl),pl.forEach(t),hl.forEach(t),Oje=i(f),zd=n(f,"H2",{class:!0});var HGe=s(zd);ZT=n(HGe,"A",{id:!0,class:!0,href:!0});var n7t=s(ZT);G2e=n(n7t,"SPAN",{});var s7t=s(G2e);T(ML.$$.fragment,s7t),s7t.forEach(t),n7t.forEach(t),zhr=i(HGe),O2e=n(HGe,"SPAN",{});var l7t=s(O2e);Whr=r(l7t,"TFAutoModelForPreTraining"),l7t.forEach(t),HGe.forEach(t),Vje=i(f),Ko=n(f,"DIV",{class:!0});var _l=s(Ko);T(EL.$$.fragment,_l),Qhr=i(_l),Wd=n(_l,"P",{});var $ee=s(Wd);Hhr=r($ee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),bQ=n($ee,"A",{href:!0});var i7t=s(bQ);Uhr=r(i7t,"from_pretrained()"),i7t.forEach(t),Jhr=r($ee," class method or the "),vQ=n($ee,"A",{href:!0});var d7t=s(vQ);Yhr=r(d7t,"from_config()"),d7t.forEach(t),Khr=r($ee,` class
method.`),$ee.forEach(t),Zhr=i(_l),CL=n(_l,"P",{});var UGe=s(CL);epr=r(UGe,"This class cannot be instantiated directly using "),V2e=n(UGe,"CODE",{});var c7t=s(V2e);opr=r(c7t,"__init__()"),c7t.forEach(t),rpr=r(UGe," (throws an error)."),UGe.forEach(t),tpr=i(_l),Lt=n(_l,"DIV",{class:!0});var Bw=s(Lt);T(wL.$$.fragment,Bw),apr=i(Bw),X2e=n(Bw,"P",{});var f7t=s(X2e);npr=r(f7t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),f7t.forEach(t),spr=i(Bw),Qd=n(Bw,"P",{});var kee=s(Qd);lpr=r(kee,`Note:
Loading a model from its configuration file does `),z2e=n(kee,"STRONG",{});var m7t=s(z2e);ipr=r(m7t,"not"),m7t.forEach(t),dpr=r(kee,` load the model weights. It only affects the
model\u2019s configuration. Use `),FQ=n(kee,"A",{href:!0});var g7t=s(FQ);cpr=r(g7t,"from_pretrained()"),g7t.forEach(t),fpr=r(kee," to load the model weights."),kee.forEach(t),mpr=i(Bw),T(e7.$$.fragment,Bw),Bw.forEach(t),gpr=i(_l),Ar=n(_l,"DIV",{class:!0});var ul=s(Ar);T(AL.$$.fragment,ul),hpr=i(ul),W2e=n(ul,"P",{});var h7t=s(W2e);ppr=r(h7t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),h7t.forEach(t),_pr=i(ul),Za=n(ul,"P",{});var Iw=s(Za);upr=r(Iw,"The model class to instantiate is selected based on the "),Q2e=n(Iw,"CODE",{});var p7t=s(Q2e);bpr=r(p7t,"model_type"),p7t.forEach(t),vpr=r(Iw,` property of the config object (either
passed as an argument or loaded from `),H2e=n(Iw,"CODE",{});var _7t=s(H2e);Fpr=r(_7t,"pretrained_model_name_or_path"),_7t.forEach(t),Tpr=r(Iw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U2e=n(Iw,"CODE",{});var u7t=s(U2e);Mpr=r(u7t,"pretrained_model_name_or_path"),u7t.forEach(t),Epr=r(Iw,":"),Iw.forEach(t),Cpr=i(ul),se=n(ul,"UL",{});var le=s(se);o7=n(le,"LI",{});var DRe=s(o7);J2e=n(DRe,"STRONG",{});var b7t=s(J2e);wpr=r(b7t,"albert"),b7t.forEach(t),Apr=r(DRe," \u2014 "),TQ=n(DRe,"A",{href:!0});var v7t=s(TQ);ypr=r(v7t,"TFAlbertForPreTraining"),v7t.forEach(t),Lpr=r(DRe," (ALBERT model)"),DRe.forEach(t),xpr=i(le),r7=n(le,"LI",{});var GRe=s(r7);Y2e=n(GRe,"STRONG",{});var F7t=s(Y2e);$pr=r(F7t,"bart"),F7t.forEach(t),kpr=r(GRe," \u2014 "),MQ=n(GRe,"A",{href:!0});var T7t=s(MQ);Spr=r(T7t,"TFBartForConditionalGeneration"),T7t.forEach(t),Rpr=r(GRe," (BART model)"),GRe.forEach(t),Ppr=i(le),t7=n(le,"LI",{});var ORe=s(t7);K2e=n(ORe,"STRONG",{});var M7t=s(K2e);Bpr=r(M7t,"bert"),M7t.forEach(t),Ipr=r(ORe," \u2014 "),EQ=n(ORe,"A",{href:!0});var E7t=s(EQ);Npr=r(E7t,"TFBertForPreTraining"),E7t.forEach(t),qpr=r(ORe," (BERT model)"),ORe.forEach(t),jpr=i(le),a7=n(le,"LI",{});var VRe=s(a7);Z2e=n(VRe,"STRONG",{});var C7t=s(Z2e);Dpr=r(C7t,"camembert"),C7t.forEach(t),Gpr=r(VRe," \u2014 "),CQ=n(VRe,"A",{href:!0});var w7t=s(CQ);Opr=r(w7t,"TFCamembertForMaskedLM"),w7t.forEach(t),Vpr=r(VRe," (CamemBERT model)"),VRe.forEach(t),Xpr=i(le),n7=n(le,"LI",{});var XRe=s(n7);eve=n(XRe,"STRONG",{});var A7t=s(eve);zpr=r(A7t,"ctrl"),A7t.forEach(t),Wpr=r(XRe," \u2014 "),wQ=n(XRe,"A",{href:!0});var y7t=s(wQ);Qpr=r(y7t,"TFCTRLLMHeadModel"),y7t.forEach(t),Hpr=r(XRe," (CTRL model)"),XRe.forEach(t),Upr=i(le),s7=n(le,"LI",{});var zRe=s(s7);ove=n(zRe,"STRONG",{});var L7t=s(ove);Jpr=r(L7t,"distilbert"),L7t.forEach(t),Ypr=r(zRe," \u2014 "),AQ=n(zRe,"A",{href:!0});var x7t=s(AQ);Kpr=r(x7t,"TFDistilBertForMaskedLM"),x7t.forEach(t),Zpr=r(zRe," (DistilBERT model)"),zRe.forEach(t),e_r=i(le),l7=n(le,"LI",{});var WRe=s(l7);rve=n(WRe,"STRONG",{});var $7t=s(rve);o_r=r($7t,"electra"),$7t.forEach(t),r_r=r(WRe," \u2014 "),yQ=n(WRe,"A",{href:!0});var k7t=s(yQ);t_r=r(k7t,"TFElectraForPreTraining"),k7t.forEach(t),a_r=r(WRe," (ELECTRA model)"),WRe.forEach(t),n_r=i(le),i7=n(le,"LI",{});var QRe=s(i7);tve=n(QRe,"STRONG",{});var S7t=s(tve);s_r=r(S7t,"flaubert"),S7t.forEach(t),l_r=r(QRe," \u2014 "),LQ=n(QRe,"A",{href:!0});var R7t=s(LQ);i_r=r(R7t,"TFFlaubertWithLMHeadModel"),R7t.forEach(t),d_r=r(QRe," (FlauBERT model)"),QRe.forEach(t),c_r=i(le),d7=n(le,"LI",{});var HRe=s(d7);ave=n(HRe,"STRONG",{});var P7t=s(ave);f_r=r(P7t,"funnel"),P7t.forEach(t),m_r=r(HRe," \u2014 "),xQ=n(HRe,"A",{href:!0});var B7t=s(xQ);g_r=r(B7t,"TFFunnelForPreTraining"),B7t.forEach(t),h_r=r(HRe," (Funnel Transformer model)"),HRe.forEach(t),p_r=i(le),c7=n(le,"LI",{});var URe=s(c7);nve=n(URe,"STRONG",{});var I7t=s(nve);__r=r(I7t,"gpt2"),I7t.forEach(t),u_r=r(URe," \u2014 "),$Q=n(URe,"A",{href:!0});var N7t=s($Q);b_r=r(N7t,"TFGPT2LMHeadModel"),N7t.forEach(t),v_r=r(URe," (OpenAI GPT-2 model)"),URe.forEach(t),F_r=i(le),f7=n(le,"LI",{});var JRe=s(f7);sve=n(JRe,"STRONG",{});var q7t=s(sve);T_r=r(q7t,"layoutlm"),q7t.forEach(t),M_r=r(JRe," \u2014 "),kQ=n(JRe,"A",{href:!0});var j7t=s(kQ);E_r=r(j7t,"TFLayoutLMForMaskedLM"),j7t.forEach(t),C_r=r(JRe," (LayoutLM model)"),JRe.forEach(t),w_r=i(le),m7=n(le,"LI",{});var YRe=s(m7);lve=n(YRe,"STRONG",{});var D7t=s(lve);A_r=r(D7t,"lxmert"),D7t.forEach(t),y_r=r(YRe," \u2014 "),SQ=n(YRe,"A",{href:!0});var G7t=s(SQ);L_r=r(G7t,"TFLxmertForPreTraining"),G7t.forEach(t),x_r=r(YRe," (LXMERT model)"),YRe.forEach(t),$_r=i(le),g7=n(le,"LI",{});var KRe=s(g7);ive=n(KRe,"STRONG",{});var O7t=s(ive);k_r=r(O7t,"mobilebert"),O7t.forEach(t),S_r=r(KRe," \u2014 "),RQ=n(KRe,"A",{href:!0});var V7t=s(RQ);R_r=r(V7t,"TFMobileBertForPreTraining"),V7t.forEach(t),P_r=r(KRe," (MobileBERT model)"),KRe.forEach(t),B_r=i(le),h7=n(le,"LI",{});var ZRe=s(h7);dve=n(ZRe,"STRONG",{});var X7t=s(dve);I_r=r(X7t,"mpnet"),X7t.forEach(t),N_r=r(ZRe," \u2014 "),PQ=n(ZRe,"A",{href:!0});var z7t=s(PQ);q_r=r(z7t,"TFMPNetForMaskedLM"),z7t.forEach(t),j_r=r(ZRe," (MPNet model)"),ZRe.forEach(t),D_r=i(le),p7=n(le,"LI",{});var ePe=s(p7);cve=n(ePe,"STRONG",{});var W7t=s(cve);G_r=r(W7t,"openai-gpt"),W7t.forEach(t),O_r=r(ePe," \u2014 "),BQ=n(ePe,"A",{href:!0});var Q7t=s(BQ);V_r=r(Q7t,"TFOpenAIGPTLMHeadModel"),Q7t.forEach(t),X_r=r(ePe," (OpenAI GPT model)"),ePe.forEach(t),z_r=i(le),_7=n(le,"LI",{});var oPe=s(_7);fve=n(oPe,"STRONG",{});var H7t=s(fve);W_r=r(H7t,"roberta"),H7t.forEach(t),Q_r=r(oPe," \u2014 "),IQ=n(oPe,"A",{href:!0});var U7t=s(IQ);H_r=r(U7t,"TFRobertaForMaskedLM"),U7t.forEach(t),U_r=r(oPe," (RoBERTa model)"),oPe.forEach(t),J_r=i(le),u7=n(le,"LI",{});var rPe=s(u7);mve=n(rPe,"STRONG",{});var J7t=s(mve);Y_r=r(J7t,"t5"),J7t.forEach(t),K_r=r(rPe," \u2014 "),NQ=n(rPe,"A",{href:!0});var Y7t=s(NQ);Z_r=r(Y7t,"TFT5ForConditionalGeneration"),Y7t.forEach(t),eur=r(rPe," (T5 model)"),rPe.forEach(t),our=i(le),b7=n(le,"LI",{});var tPe=s(b7);gve=n(tPe,"STRONG",{});var K7t=s(gve);rur=r(K7t,"tapas"),K7t.forEach(t),tur=r(tPe," \u2014 "),qQ=n(tPe,"A",{href:!0});var Z7t=s(qQ);aur=r(Z7t,"TFTapasForMaskedLM"),Z7t.forEach(t),nur=r(tPe," (TAPAS model)"),tPe.forEach(t),sur=i(le),v7=n(le,"LI",{});var aPe=s(v7);hve=n(aPe,"STRONG",{});var e9t=s(hve);lur=r(e9t,"transfo-xl"),e9t.forEach(t),iur=r(aPe," \u2014 "),jQ=n(aPe,"A",{href:!0});var o9t=s(jQ);dur=r(o9t,"TFTransfoXLLMHeadModel"),o9t.forEach(t),cur=r(aPe," (Transformer-XL model)"),aPe.forEach(t),fur=i(le),F7=n(le,"LI",{});var nPe=s(F7);pve=n(nPe,"STRONG",{});var r9t=s(pve);mur=r(r9t,"vit_mae"),r9t.forEach(t),gur=r(nPe," \u2014 "),DQ=n(nPe,"A",{href:!0});var t9t=s(DQ);hur=r(t9t,"TFViTMAEForPreTraining"),t9t.forEach(t),pur=r(nPe," (ViTMAE model)"),nPe.forEach(t),_ur=i(le),T7=n(le,"LI",{});var sPe=s(T7);_ve=n(sPe,"STRONG",{});var a9t=s(_ve);uur=r(a9t,"xlm"),a9t.forEach(t),bur=r(sPe," \u2014 "),GQ=n(sPe,"A",{href:!0});var n9t=s(GQ);vur=r(n9t,"TFXLMWithLMHeadModel"),n9t.forEach(t),Fur=r(sPe," (XLM model)"),sPe.forEach(t),Tur=i(le),M7=n(le,"LI",{});var lPe=s(M7);uve=n(lPe,"STRONG",{});var s9t=s(uve);Mur=r(s9t,"xlm-roberta"),s9t.forEach(t),Eur=r(lPe," \u2014 "),OQ=n(lPe,"A",{href:!0});var l9t=s(OQ);Cur=r(l9t,"TFXLMRobertaForMaskedLM"),l9t.forEach(t),wur=r(lPe," (XLM-RoBERTa model)"),lPe.forEach(t),Aur=i(le),E7=n(le,"LI",{});var iPe=s(E7);bve=n(iPe,"STRONG",{});var i9t=s(bve);yur=r(i9t,"xlnet"),i9t.forEach(t),Lur=r(iPe," \u2014 "),VQ=n(iPe,"A",{href:!0});var d9t=s(VQ);xur=r(d9t,"TFXLNetLMHeadModel"),d9t.forEach(t),$ur=r(iPe," (XLNet model)"),iPe.forEach(t),le.forEach(t),kur=i(ul),T(C7.$$.fragment,ul),ul.forEach(t),_l.forEach(t),Xje=i(f),Hd=n(f,"H2",{class:!0});var JGe=s(Hd);w7=n(JGe,"A",{id:!0,class:!0,href:!0});var c9t=s(w7);vve=n(c9t,"SPAN",{});var f9t=s(vve);T(yL.$$.fragment,f9t),f9t.forEach(t),c9t.forEach(t),Sur=i(JGe),Fve=n(JGe,"SPAN",{});var m9t=s(Fve);Rur=r(m9t,"TFAutoModelForCausalLM"),m9t.forEach(t),JGe.forEach(t),zje=i(f),Zo=n(f,"DIV",{class:!0});var bl=s(Zo);T(LL.$$.fragment,bl),Pur=i(bl),Ud=n(bl,"P",{});var See=s(Ud);Bur=r(See,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),XQ=n(See,"A",{href:!0});var g9t=s(XQ);Iur=r(g9t,"from_pretrained()"),g9t.forEach(t),Nur=r(See," class method or the "),zQ=n(See,"A",{href:!0});var h9t=s(zQ);qur=r(h9t,"from_config()"),h9t.forEach(t),jur=r(See,` class
method.`),See.forEach(t),Dur=i(bl),xL=n(bl,"P",{});var YGe=s(xL);Gur=r(YGe,"This class cannot be instantiated directly using "),Tve=n(YGe,"CODE",{});var p9t=s(Tve);Our=r(p9t,"__init__()"),p9t.forEach(t),Vur=r(YGe," (throws an error)."),YGe.forEach(t),Xur=i(bl),xt=n(bl,"DIV",{class:!0});var Nw=s(xt);T($L.$$.fragment,Nw),zur=i(Nw),Mve=n(Nw,"P",{});var _9t=s(Mve);Wur=r(_9t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),_9t.forEach(t),Qur=i(Nw),Jd=n(Nw,"P",{});var Ree=s(Jd);Hur=r(Ree,`Note:
Loading a model from its configuration file does `),Eve=n(Ree,"STRONG",{});var u9t=s(Eve);Uur=r(u9t,"not"),u9t.forEach(t),Jur=r(Ree,` load the model weights. It only affects the
model\u2019s configuration. Use `),WQ=n(Ree,"A",{href:!0});var b9t=s(WQ);Yur=r(b9t,"from_pretrained()"),b9t.forEach(t),Kur=r(Ree," to load the model weights."),Ree.forEach(t),Zur=i(Nw),T(A7.$$.fragment,Nw),Nw.forEach(t),e1r=i(bl),yr=n(bl,"DIV",{class:!0});var vl=s(yr);T(kL.$$.fragment,vl),o1r=i(vl),Cve=n(vl,"P",{});var v9t=s(Cve);r1r=r(v9t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),v9t.forEach(t),t1r=i(vl),en=n(vl,"P",{});var qw=s(en);a1r=r(qw,"The model class to instantiate is selected based on the "),wve=n(qw,"CODE",{});var F9t=s(wve);n1r=r(F9t,"model_type"),F9t.forEach(t),s1r=r(qw,` property of the config object (either
passed as an argument or loaded from `),Ave=n(qw,"CODE",{});var T9t=s(Ave);l1r=r(T9t,"pretrained_model_name_or_path"),T9t.forEach(t),i1r=r(qw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yve=n(qw,"CODE",{});var M9t=s(yve);d1r=r(M9t,"pretrained_model_name_or_path"),M9t.forEach(t),c1r=r(qw,":"),qw.forEach(t),f1r=i(vl),Me=n(vl,"UL",{});var Ce=s(Me);y7=n(Ce,"LI",{});var dPe=s(y7);Lve=n(dPe,"STRONG",{});var E9t=s(Lve);m1r=r(E9t,"bert"),E9t.forEach(t),g1r=r(dPe," \u2014 "),QQ=n(dPe,"A",{href:!0});var C9t=s(QQ);h1r=r(C9t,"TFBertLMHeadModel"),C9t.forEach(t),p1r=r(dPe," (BERT model)"),dPe.forEach(t),_1r=i(Ce),L7=n(Ce,"LI",{});var cPe=s(L7);xve=n(cPe,"STRONG",{});var w9t=s(xve);u1r=r(w9t,"camembert"),w9t.forEach(t),b1r=r(cPe," \u2014 "),HQ=n(cPe,"A",{href:!0});var A9t=s(HQ);v1r=r(A9t,"TFCamembertForCausalLM"),A9t.forEach(t),F1r=r(cPe," (CamemBERT model)"),cPe.forEach(t),T1r=i(Ce),x7=n(Ce,"LI",{});var fPe=s(x7);$ve=n(fPe,"STRONG",{});var y9t=s($ve);M1r=r(y9t,"ctrl"),y9t.forEach(t),E1r=r(fPe," \u2014 "),UQ=n(fPe,"A",{href:!0});var L9t=s(UQ);C1r=r(L9t,"TFCTRLLMHeadModel"),L9t.forEach(t),w1r=r(fPe," (CTRL model)"),fPe.forEach(t),A1r=i(Ce),$7=n(Ce,"LI",{});var mPe=s($7);kve=n(mPe,"STRONG",{});var x9t=s(kve);y1r=r(x9t,"gpt2"),x9t.forEach(t),L1r=r(mPe," \u2014 "),JQ=n(mPe,"A",{href:!0});var $9t=s(JQ);x1r=r($9t,"TFGPT2LMHeadModel"),$9t.forEach(t),$1r=r(mPe," (OpenAI GPT-2 model)"),mPe.forEach(t),k1r=i(Ce),k7=n(Ce,"LI",{});var gPe=s(k7);Sve=n(gPe,"STRONG",{});var k9t=s(Sve);S1r=r(k9t,"gptj"),k9t.forEach(t),R1r=r(gPe," \u2014 "),YQ=n(gPe,"A",{href:!0});var S9t=s(YQ);P1r=r(S9t,"TFGPTJForCausalLM"),S9t.forEach(t),B1r=r(gPe," (GPT-J model)"),gPe.forEach(t),I1r=i(Ce),S7=n(Ce,"LI",{});var hPe=s(S7);Rve=n(hPe,"STRONG",{});var R9t=s(Rve);N1r=r(R9t,"openai-gpt"),R9t.forEach(t),q1r=r(hPe," \u2014 "),KQ=n(hPe,"A",{href:!0});var P9t=s(KQ);j1r=r(P9t,"TFOpenAIGPTLMHeadModel"),P9t.forEach(t),D1r=r(hPe," (OpenAI GPT model)"),hPe.forEach(t),G1r=i(Ce),R7=n(Ce,"LI",{});var pPe=s(R7);Pve=n(pPe,"STRONG",{});var B9t=s(Pve);O1r=r(B9t,"opt"),B9t.forEach(t),V1r=r(pPe," \u2014 "),ZQ=n(pPe,"A",{href:!0});var I9t=s(ZQ);X1r=r(I9t,"TFOPTForCausalLM"),I9t.forEach(t),z1r=r(pPe," (OPT model)"),pPe.forEach(t),W1r=i(Ce),P7=n(Ce,"LI",{});var _Pe=s(P7);Bve=n(_Pe,"STRONG",{});var N9t=s(Bve);Q1r=r(N9t,"rembert"),N9t.forEach(t),H1r=r(_Pe," \u2014 "),eH=n(_Pe,"A",{href:!0});var q9t=s(eH);U1r=r(q9t,"TFRemBertForCausalLM"),q9t.forEach(t),J1r=r(_Pe," (RemBERT model)"),_Pe.forEach(t),Y1r=i(Ce),B7=n(Ce,"LI",{});var uPe=s(B7);Ive=n(uPe,"STRONG",{});var j9t=s(Ive);K1r=r(j9t,"roberta"),j9t.forEach(t),Z1r=r(uPe," \u2014 "),oH=n(uPe,"A",{href:!0});var D9t=s(oH);ebr=r(D9t,"TFRobertaForCausalLM"),D9t.forEach(t),obr=r(uPe," (RoBERTa model)"),uPe.forEach(t),rbr=i(Ce),I7=n(Ce,"LI",{});var bPe=s(I7);Nve=n(bPe,"STRONG",{});var G9t=s(Nve);tbr=r(G9t,"roformer"),G9t.forEach(t),abr=r(bPe," \u2014 "),rH=n(bPe,"A",{href:!0});var O9t=s(rH);nbr=r(O9t,"TFRoFormerForCausalLM"),O9t.forEach(t),sbr=r(bPe," (RoFormer model)"),bPe.forEach(t),lbr=i(Ce),N7=n(Ce,"LI",{});var vPe=s(N7);qve=n(vPe,"STRONG",{});var V9t=s(qve);ibr=r(V9t,"transfo-xl"),V9t.forEach(t),dbr=r(vPe," \u2014 "),tH=n(vPe,"A",{href:!0});var X9t=s(tH);cbr=r(X9t,"TFTransfoXLLMHeadModel"),X9t.forEach(t),fbr=r(vPe," (Transformer-XL model)"),vPe.forEach(t),mbr=i(Ce),q7=n(Ce,"LI",{});var FPe=s(q7);jve=n(FPe,"STRONG",{});var z9t=s(jve);gbr=r(z9t,"xlm"),z9t.forEach(t),hbr=r(FPe," \u2014 "),aH=n(FPe,"A",{href:!0});var W9t=s(aH);pbr=r(W9t,"TFXLMWithLMHeadModel"),W9t.forEach(t),_br=r(FPe," (XLM model)"),FPe.forEach(t),ubr=i(Ce),j7=n(Ce,"LI",{});var TPe=s(j7);Dve=n(TPe,"STRONG",{});var Q9t=s(Dve);bbr=r(Q9t,"xlnet"),Q9t.forEach(t),vbr=r(TPe," \u2014 "),nH=n(TPe,"A",{href:!0});var H9t=s(nH);Fbr=r(H9t,"TFXLNetLMHeadModel"),H9t.forEach(t),Tbr=r(TPe," (XLNet model)"),TPe.forEach(t),Ce.forEach(t),Mbr=i(vl),T(D7.$$.fragment,vl),vl.forEach(t),bl.forEach(t),Wje=i(f),Yd=n(f,"H2",{class:!0});var KGe=s(Yd);G7=n(KGe,"A",{id:!0,class:!0,href:!0});var U9t=s(G7);Gve=n(U9t,"SPAN",{});var J9t=s(Gve);T(SL.$$.fragment,J9t),J9t.forEach(t),U9t.forEach(t),Ebr=i(KGe),Ove=n(KGe,"SPAN",{});var Y9t=s(Ove);Cbr=r(Y9t,"TFAutoModelForImageClassification"),Y9t.forEach(t),KGe.forEach(t),Qje=i(f),er=n(f,"DIV",{class:!0});var Fl=s(er);T(RL.$$.fragment,Fl),wbr=i(Fl),Kd=n(Fl,"P",{});var Pee=s(Kd);Abr=r(Pee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),sH=n(Pee,"A",{href:!0});var K9t=s(sH);ybr=r(K9t,"from_pretrained()"),K9t.forEach(t),Lbr=r(Pee," class method or the "),lH=n(Pee,"A",{href:!0});var Z9t=s(lH);xbr=r(Z9t,"from_config()"),Z9t.forEach(t),$br=r(Pee,` class
method.`),Pee.forEach(t),kbr=i(Fl),PL=n(Fl,"P",{});var ZGe=s(PL);Sbr=r(ZGe,"This class cannot be instantiated directly using "),Vve=n(ZGe,"CODE",{});var eMt=s(Vve);Rbr=r(eMt,"__init__()"),eMt.forEach(t),Pbr=r(ZGe," (throws an error)."),ZGe.forEach(t),Bbr=i(Fl),$t=n(Fl,"DIV",{class:!0});var jw=s($t);T(BL.$$.fragment,jw),Ibr=i(jw),Xve=n(jw,"P",{});var oMt=s(Xve);Nbr=r(oMt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),oMt.forEach(t),qbr=i(jw),Zd=n(jw,"P",{});var Bee=s(Zd);jbr=r(Bee,`Note:
Loading a model from its configuration file does `),zve=n(Bee,"STRONG",{});var rMt=s(zve);Dbr=r(rMt,"not"),rMt.forEach(t),Gbr=r(Bee,` load the model weights. It only affects the
model\u2019s configuration. Use `),iH=n(Bee,"A",{href:!0});var tMt=s(iH);Obr=r(tMt,"from_pretrained()"),tMt.forEach(t),Vbr=r(Bee," to load the model weights."),Bee.forEach(t),Xbr=i(jw),T(O7.$$.fragment,jw),jw.forEach(t),zbr=i(Fl),Lr=n(Fl,"DIV",{class:!0});var Tl=s(Lr);T(IL.$$.fragment,Tl),Wbr=i(Tl),Wve=n(Tl,"P",{});var aMt=s(Wve);Qbr=r(aMt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),aMt.forEach(t),Hbr=i(Tl),on=n(Tl,"P",{});var Dw=s(on);Ubr=r(Dw,"The model class to instantiate is selected based on the "),Qve=n(Dw,"CODE",{});var nMt=s(Qve);Jbr=r(nMt,"model_type"),nMt.forEach(t),Ybr=r(Dw,` property of the config object (either
passed as an argument or loaded from `),Hve=n(Dw,"CODE",{});var sMt=s(Hve);Kbr=r(sMt,"pretrained_model_name_or_path"),sMt.forEach(t),Zbr=r(Dw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uve=n(Dw,"CODE",{});var lMt=s(Uve);e2r=r(lMt,"pretrained_model_name_or_path"),lMt.forEach(t),o2r=r(Dw,":"),Dw.forEach(t),r2r=i(Tl),rn=n(Tl,"UL",{});var Gw=s(rn);V7=n(Gw,"LI",{});var MPe=s(V7);Jve=n(MPe,"STRONG",{});var iMt=s(Jve);t2r=r(iMt,"convnext"),iMt.forEach(t),a2r=r(MPe," \u2014 "),dH=n(MPe,"A",{href:!0});var dMt=s(dH);n2r=r(dMt,"TFConvNextForImageClassification"),dMt.forEach(t),s2r=r(MPe," (ConvNeXT model)"),MPe.forEach(t),l2r=i(Gw),X7=n(Gw,"LI",{});var EPe=s(X7);Yve=n(EPe,"STRONG",{});var cMt=s(Yve);i2r=r(cMt,"data2vec-vision"),cMt.forEach(t),d2r=r(EPe," \u2014 "),cH=n(EPe,"A",{href:!0});var fMt=s(cH);c2r=r(fMt,"TFData2VecVisionForImageClassification"),fMt.forEach(t),f2r=r(EPe," (Data2VecVision model)"),EPe.forEach(t),m2r=i(Gw),z7=n(Gw,"LI",{});var CPe=s(z7);Kve=n(CPe,"STRONG",{});var mMt=s(Kve);g2r=r(mMt,"swin"),mMt.forEach(t),h2r=r(CPe," \u2014 "),fH=n(CPe,"A",{href:!0});var gMt=s(fH);p2r=r(gMt,"TFSwinForImageClassification"),gMt.forEach(t),_2r=r(CPe," (Swin Transformer model)"),CPe.forEach(t),u2r=i(Gw),W7=n(Gw,"LI",{});var wPe=s(W7);Zve=n(wPe,"STRONG",{});var hMt=s(Zve);b2r=r(hMt,"vit"),hMt.forEach(t),v2r=r(wPe," \u2014 "),mH=n(wPe,"A",{href:!0});var pMt=s(mH);F2r=r(pMt,"TFViTForImageClassification"),pMt.forEach(t),T2r=r(wPe," (ViT model)"),wPe.forEach(t),Gw.forEach(t),M2r=i(Tl),T(Q7.$$.fragment,Tl),Tl.forEach(t),Fl.forEach(t),Hje=i(f),ec=n(f,"H2",{class:!0});var eOe=s(ec);H7=n(eOe,"A",{id:!0,class:!0,href:!0});var _Mt=s(H7);e5e=n(_Mt,"SPAN",{});var uMt=s(e5e);T(NL.$$.fragment,uMt),uMt.forEach(t),_Mt.forEach(t),E2r=i(eOe),o5e=n(eOe,"SPAN",{});var bMt=s(o5e);C2r=r(bMt,"TFAutoModelForMaskedLM"),bMt.forEach(t),eOe.forEach(t),Uje=i(f),or=n(f,"DIV",{class:!0});var Ml=s(or);T(qL.$$.fragment,Ml),w2r=i(Ml),oc=n(Ml,"P",{});var Iee=s(oc);A2r=r(Iee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),gH=n(Iee,"A",{href:!0});var vMt=s(gH);y2r=r(vMt,"from_pretrained()"),vMt.forEach(t),L2r=r(Iee," class method or the "),hH=n(Iee,"A",{href:!0});var FMt=s(hH);x2r=r(FMt,"from_config()"),FMt.forEach(t),$2r=r(Iee,` class
method.`),Iee.forEach(t),k2r=i(Ml),jL=n(Ml,"P",{});var oOe=s(jL);S2r=r(oOe,"This class cannot be instantiated directly using "),r5e=n(oOe,"CODE",{});var TMt=s(r5e);R2r=r(TMt,"__init__()"),TMt.forEach(t),P2r=r(oOe," (throws an error)."),oOe.forEach(t),B2r=i(Ml),kt=n(Ml,"DIV",{class:!0});var Ow=s(kt);T(DL.$$.fragment,Ow),I2r=i(Ow),t5e=n(Ow,"P",{});var MMt=s(t5e);N2r=r(MMt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),MMt.forEach(t),q2r=i(Ow),rc=n(Ow,"P",{});var Nee=s(rc);j2r=r(Nee,`Note:
Loading a model from its configuration file does `),a5e=n(Nee,"STRONG",{});var EMt=s(a5e);D2r=r(EMt,"not"),EMt.forEach(t),G2r=r(Nee,` load the model weights. It only affects the
model\u2019s configuration. Use `),pH=n(Nee,"A",{href:!0});var CMt=s(pH);O2r=r(CMt,"from_pretrained()"),CMt.forEach(t),V2r=r(Nee," to load the model weights."),Nee.forEach(t),X2r=i(Ow),T(U7.$$.fragment,Ow),Ow.forEach(t),z2r=i(Ml),xr=n(Ml,"DIV",{class:!0});var El=s(xr);T(GL.$$.fragment,El),W2r=i(El),n5e=n(El,"P",{});var wMt=s(n5e);Q2r=r(wMt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),wMt.forEach(t),H2r=i(El),tn=n(El,"P",{});var Vw=s(tn);U2r=r(Vw,"The model class to instantiate is selected based on the "),s5e=n(Vw,"CODE",{});var AMt=s(s5e);J2r=r(AMt,"model_type"),AMt.forEach(t),Y2r=r(Vw,` property of the config object (either
passed as an argument or loaded from `),l5e=n(Vw,"CODE",{});var yMt=s(l5e);K2r=r(yMt,"pretrained_model_name_or_path"),yMt.forEach(t),Z2r=r(Vw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i5e=n(Vw,"CODE",{});var LMt=s(i5e);evr=r(LMt,"pretrained_model_name_or_path"),LMt.forEach(t),ovr=r(Vw,":"),Vw.forEach(t),rvr=i(El),ie=n(El,"UL",{});var fe=s(ie);J7=n(fe,"LI",{});var APe=s(J7);d5e=n(APe,"STRONG",{});var xMt=s(d5e);tvr=r(xMt,"albert"),xMt.forEach(t),avr=r(APe," \u2014 "),_H=n(APe,"A",{href:!0});var $Mt=s(_H);nvr=r($Mt,"TFAlbertForMaskedLM"),$Mt.forEach(t),svr=r(APe," (ALBERT model)"),APe.forEach(t),lvr=i(fe),Y7=n(fe,"LI",{});var yPe=s(Y7);c5e=n(yPe,"STRONG",{});var kMt=s(c5e);ivr=r(kMt,"bert"),kMt.forEach(t),dvr=r(yPe," \u2014 "),uH=n(yPe,"A",{href:!0});var SMt=s(uH);cvr=r(SMt,"TFBertForMaskedLM"),SMt.forEach(t),fvr=r(yPe," (BERT model)"),yPe.forEach(t),mvr=i(fe),K7=n(fe,"LI",{});var LPe=s(K7);f5e=n(LPe,"STRONG",{});var RMt=s(f5e);gvr=r(RMt,"camembert"),RMt.forEach(t),hvr=r(LPe," \u2014 "),bH=n(LPe,"A",{href:!0});var PMt=s(bH);pvr=r(PMt,"TFCamembertForMaskedLM"),PMt.forEach(t),_vr=r(LPe," (CamemBERT model)"),LPe.forEach(t),uvr=i(fe),Z7=n(fe,"LI",{});var xPe=s(Z7);m5e=n(xPe,"STRONG",{});var BMt=s(m5e);bvr=r(BMt,"convbert"),BMt.forEach(t),vvr=r(xPe," \u2014 "),vH=n(xPe,"A",{href:!0});var IMt=s(vH);Fvr=r(IMt,"TFConvBertForMaskedLM"),IMt.forEach(t),Tvr=r(xPe," (ConvBERT model)"),xPe.forEach(t),Mvr=i(fe),e9=n(fe,"LI",{});var $Pe=s(e9);g5e=n($Pe,"STRONG",{});var NMt=s(g5e);Evr=r(NMt,"deberta"),NMt.forEach(t),Cvr=r($Pe," \u2014 "),FH=n($Pe,"A",{href:!0});var qMt=s(FH);wvr=r(qMt,"TFDebertaForMaskedLM"),qMt.forEach(t),Avr=r($Pe," (DeBERTa model)"),$Pe.forEach(t),yvr=i(fe),o9=n(fe,"LI",{});var kPe=s(o9);h5e=n(kPe,"STRONG",{});var jMt=s(h5e);Lvr=r(jMt,"deberta-v2"),jMt.forEach(t),xvr=r(kPe," \u2014 "),TH=n(kPe,"A",{href:!0});var DMt=s(TH);$vr=r(DMt,"TFDebertaV2ForMaskedLM"),DMt.forEach(t),kvr=r(kPe," (DeBERTa-v2 model)"),kPe.forEach(t),Svr=i(fe),r9=n(fe,"LI",{});var SPe=s(r9);p5e=n(SPe,"STRONG",{});var GMt=s(p5e);Rvr=r(GMt,"distilbert"),GMt.forEach(t),Pvr=r(SPe," \u2014 "),MH=n(SPe,"A",{href:!0});var OMt=s(MH);Bvr=r(OMt,"TFDistilBertForMaskedLM"),OMt.forEach(t),Ivr=r(SPe," (DistilBERT model)"),SPe.forEach(t),Nvr=i(fe),t9=n(fe,"LI",{});var RPe=s(t9);_5e=n(RPe,"STRONG",{});var VMt=s(_5e);qvr=r(VMt,"electra"),VMt.forEach(t),jvr=r(RPe," \u2014 "),EH=n(RPe,"A",{href:!0});var XMt=s(EH);Dvr=r(XMt,"TFElectraForMaskedLM"),XMt.forEach(t),Gvr=r(RPe," (ELECTRA model)"),RPe.forEach(t),Ovr=i(fe),a9=n(fe,"LI",{});var PPe=s(a9);u5e=n(PPe,"STRONG",{});var zMt=s(u5e);Vvr=r(zMt,"flaubert"),zMt.forEach(t),Xvr=r(PPe," \u2014 "),CH=n(PPe,"A",{href:!0});var WMt=s(CH);zvr=r(WMt,"TFFlaubertWithLMHeadModel"),WMt.forEach(t),Wvr=r(PPe," (FlauBERT model)"),PPe.forEach(t),Qvr=i(fe),n9=n(fe,"LI",{});var BPe=s(n9);b5e=n(BPe,"STRONG",{});var QMt=s(b5e);Hvr=r(QMt,"funnel"),QMt.forEach(t),Uvr=r(BPe," \u2014 "),wH=n(BPe,"A",{href:!0});var HMt=s(wH);Jvr=r(HMt,"TFFunnelForMaskedLM"),HMt.forEach(t),Yvr=r(BPe," (Funnel Transformer model)"),BPe.forEach(t),Kvr=i(fe),s9=n(fe,"LI",{});var IPe=s(s9);v5e=n(IPe,"STRONG",{});var UMt=s(v5e);Zvr=r(UMt,"layoutlm"),UMt.forEach(t),e5r=r(IPe," \u2014 "),AH=n(IPe,"A",{href:!0});var JMt=s(AH);o5r=r(JMt,"TFLayoutLMForMaskedLM"),JMt.forEach(t),r5r=r(IPe," (LayoutLM model)"),IPe.forEach(t),t5r=i(fe),l9=n(fe,"LI",{});var NPe=s(l9);F5e=n(NPe,"STRONG",{});var YMt=s(F5e);a5r=r(YMt,"longformer"),YMt.forEach(t),n5r=r(NPe," \u2014 "),yH=n(NPe,"A",{href:!0});var KMt=s(yH);s5r=r(KMt,"TFLongformerForMaskedLM"),KMt.forEach(t),l5r=r(NPe," (Longformer model)"),NPe.forEach(t),i5r=i(fe),i9=n(fe,"LI",{});var qPe=s(i9);T5e=n(qPe,"STRONG",{});var ZMt=s(T5e);d5r=r(ZMt,"mobilebert"),ZMt.forEach(t),c5r=r(qPe," \u2014 "),LH=n(qPe,"A",{href:!0});var e4t=s(LH);f5r=r(e4t,"TFMobileBertForMaskedLM"),e4t.forEach(t),m5r=r(qPe," (MobileBERT model)"),qPe.forEach(t),g5r=i(fe),d9=n(fe,"LI",{});var jPe=s(d9);M5e=n(jPe,"STRONG",{});var o4t=s(M5e);h5r=r(o4t,"mpnet"),o4t.forEach(t),p5r=r(jPe," \u2014 "),xH=n(jPe,"A",{href:!0});var r4t=s(xH);_5r=r(r4t,"TFMPNetForMaskedLM"),r4t.forEach(t),u5r=r(jPe," (MPNet model)"),jPe.forEach(t),b5r=i(fe),c9=n(fe,"LI",{});var DPe=s(c9);E5e=n(DPe,"STRONG",{});var t4t=s(E5e);v5r=r(t4t,"rembert"),t4t.forEach(t),F5r=r(DPe," \u2014 "),$H=n(DPe,"A",{href:!0});var a4t=s($H);T5r=r(a4t,"TFRemBertForMaskedLM"),a4t.forEach(t),M5r=r(DPe," (RemBERT model)"),DPe.forEach(t),E5r=i(fe),f9=n(fe,"LI",{});var GPe=s(f9);C5e=n(GPe,"STRONG",{});var n4t=s(C5e);C5r=r(n4t,"roberta"),n4t.forEach(t),w5r=r(GPe," \u2014 "),kH=n(GPe,"A",{href:!0});var s4t=s(kH);A5r=r(s4t,"TFRobertaForMaskedLM"),s4t.forEach(t),y5r=r(GPe," (RoBERTa model)"),GPe.forEach(t),L5r=i(fe),m9=n(fe,"LI",{});var OPe=s(m9);w5e=n(OPe,"STRONG",{});var l4t=s(w5e);x5r=r(l4t,"roformer"),l4t.forEach(t),$5r=r(OPe," \u2014 "),SH=n(OPe,"A",{href:!0});var i4t=s(SH);k5r=r(i4t,"TFRoFormerForMaskedLM"),i4t.forEach(t),S5r=r(OPe," (RoFormer model)"),OPe.forEach(t),R5r=i(fe),g9=n(fe,"LI",{});var VPe=s(g9);A5e=n(VPe,"STRONG",{});var d4t=s(A5e);P5r=r(d4t,"tapas"),d4t.forEach(t),B5r=r(VPe," \u2014 "),RH=n(VPe,"A",{href:!0});var c4t=s(RH);I5r=r(c4t,"TFTapasForMaskedLM"),c4t.forEach(t),N5r=r(VPe," (TAPAS model)"),VPe.forEach(t),q5r=i(fe),h9=n(fe,"LI",{});var XPe=s(h9);y5e=n(XPe,"STRONG",{});var f4t=s(y5e);j5r=r(f4t,"xlm"),f4t.forEach(t),D5r=r(XPe," \u2014 "),PH=n(XPe,"A",{href:!0});var m4t=s(PH);G5r=r(m4t,"TFXLMWithLMHeadModel"),m4t.forEach(t),O5r=r(XPe," (XLM model)"),XPe.forEach(t),V5r=i(fe),p9=n(fe,"LI",{});var zPe=s(p9);L5e=n(zPe,"STRONG",{});var g4t=s(L5e);X5r=r(g4t,"xlm-roberta"),g4t.forEach(t),z5r=r(zPe," \u2014 "),BH=n(zPe,"A",{href:!0});var h4t=s(BH);W5r=r(h4t,"TFXLMRobertaForMaskedLM"),h4t.forEach(t),Q5r=r(zPe," (XLM-RoBERTa model)"),zPe.forEach(t),fe.forEach(t),H5r=i(El),T(_9.$$.fragment,El),El.forEach(t),Ml.forEach(t),Jje=i(f),tc=n(f,"H2",{class:!0});var rOe=s(tc);u9=n(rOe,"A",{id:!0,class:!0,href:!0});var p4t=s(u9);x5e=n(p4t,"SPAN",{});var _4t=s(x5e);T(OL.$$.fragment,_4t),_4t.forEach(t),p4t.forEach(t),U5r=i(rOe),$5e=n(rOe,"SPAN",{});var u4t=s($5e);J5r=r(u4t,"TFAutoModelForSeq2SeqLM"),u4t.forEach(t),rOe.forEach(t),Yje=i(f),rr=n(f,"DIV",{class:!0});var Cl=s(rr);T(VL.$$.fragment,Cl),Y5r=i(Cl),ac=n(Cl,"P",{});var qee=s(ac);K5r=r(qee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),IH=n(qee,"A",{href:!0});var b4t=s(IH);Z5r=r(b4t,"from_pretrained()"),b4t.forEach(t),e3r=r(qee," class method or the "),NH=n(qee,"A",{href:!0});var v4t=s(NH);o3r=r(v4t,"from_config()"),v4t.forEach(t),r3r=r(qee,` class
method.`),qee.forEach(t),t3r=i(Cl),XL=n(Cl,"P",{});var tOe=s(XL);a3r=r(tOe,"This class cannot be instantiated directly using "),k5e=n(tOe,"CODE",{});var F4t=s(k5e);n3r=r(F4t,"__init__()"),F4t.forEach(t),s3r=r(tOe," (throws an error)."),tOe.forEach(t),l3r=i(Cl),St=n(Cl,"DIV",{class:!0});var Xw=s(St);T(zL.$$.fragment,Xw),i3r=i(Xw),S5e=n(Xw,"P",{});var T4t=s(S5e);d3r=r(T4t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),T4t.forEach(t),c3r=i(Xw),nc=n(Xw,"P",{});var jee=s(nc);f3r=r(jee,`Note:
Loading a model from its configuration file does `),R5e=n(jee,"STRONG",{});var M4t=s(R5e);m3r=r(M4t,"not"),M4t.forEach(t),g3r=r(jee,` load the model weights. It only affects the
model\u2019s configuration. Use `),qH=n(jee,"A",{href:!0});var E4t=s(qH);h3r=r(E4t,"from_pretrained()"),E4t.forEach(t),p3r=r(jee," to load the model weights."),jee.forEach(t),_3r=i(Xw),T(b9.$$.fragment,Xw),Xw.forEach(t),u3r=i(Cl),$r=n(Cl,"DIV",{class:!0});var wl=s($r);T(WL.$$.fragment,wl),b3r=i(wl),P5e=n(wl,"P",{});var C4t=s(P5e);v3r=r(C4t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),C4t.forEach(t),F3r=i(wl),an=n(wl,"P",{});var zw=s(an);T3r=r(zw,"The model class to instantiate is selected based on the "),B5e=n(zw,"CODE",{});var w4t=s(B5e);M3r=r(w4t,"model_type"),w4t.forEach(t),E3r=r(zw,` property of the config object (either
passed as an argument or loaded from `),I5e=n(zw,"CODE",{});var A4t=s(I5e);C3r=r(A4t,"pretrained_model_name_or_path"),A4t.forEach(t),w3r=r(zw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N5e=n(zw,"CODE",{});var y4t=s(N5e);A3r=r(y4t,"pretrained_model_name_or_path"),y4t.forEach(t),y3r=r(zw,":"),zw.forEach(t),L3r=i(wl),ye=n(wl,"UL",{});var Be=s(ye);v9=n(Be,"LI",{});var WPe=s(v9);q5e=n(WPe,"STRONG",{});var L4t=s(q5e);x3r=r(L4t,"bart"),L4t.forEach(t),$3r=r(WPe," \u2014 "),jH=n(WPe,"A",{href:!0});var x4t=s(jH);k3r=r(x4t,"TFBartForConditionalGeneration"),x4t.forEach(t),S3r=r(WPe," (BART model)"),WPe.forEach(t),R3r=i(Be),F9=n(Be,"LI",{});var QPe=s(F9);j5e=n(QPe,"STRONG",{});var $4t=s(j5e);P3r=r($4t,"blenderbot"),$4t.forEach(t),B3r=r(QPe," \u2014 "),DH=n(QPe,"A",{href:!0});var k4t=s(DH);I3r=r(k4t,"TFBlenderbotForConditionalGeneration"),k4t.forEach(t),N3r=r(QPe," (Blenderbot model)"),QPe.forEach(t),q3r=i(Be),T9=n(Be,"LI",{});var HPe=s(T9);D5e=n(HPe,"STRONG",{});var S4t=s(D5e);j3r=r(S4t,"blenderbot-small"),S4t.forEach(t),D3r=r(HPe," \u2014 "),GH=n(HPe,"A",{href:!0});var R4t=s(GH);G3r=r(R4t,"TFBlenderbotSmallForConditionalGeneration"),R4t.forEach(t),O3r=r(HPe," (BlenderbotSmall model)"),HPe.forEach(t),V3r=i(Be),M9=n(Be,"LI",{});var UPe=s(M9);G5e=n(UPe,"STRONG",{});var P4t=s(G5e);X3r=r(P4t,"encoder-decoder"),P4t.forEach(t),z3r=r(UPe," \u2014 "),OH=n(UPe,"A",{href:!0});var B4t=s(OH);W3r=r(B4t,"TFEncoderDecoderModel"),B4t.forEach(t),Q3r=r(UPe," (Encoder decoder model)"),UPe.forEach(t),H3r=i(Be),E9=n(Be,"LI",{});var JPe=s(E9);O5e=n(JPe,"STRONG",{});var I4t=s(O5e);U3r=r(I4t,"led"),I4t.forEach(t),J3r=r(JPe," \u2014 "),VH=n(JPe,"A",{href:!0});var N4t=s(VH);Y3r=r(N4t,"TFLEDForConditionalGeneration"),N4t.forEach(t),K3r=r(JPe," (LED model)"),JPe.forEach(t),Z3r=i(Be),C9=n(Be,"LI",{});var YPe=s(C9);V5e=n(YPe,"STRONG",{});var q4t=s(V5e);eFr=r(q4t,"marian"),q4t.forEach(t),oFr=r(YPe," \u2014 "),XH=n(YPe,"A",{href:!0});var j4t=s(XH);rFr=r(j4t,"TFMarianMTModel"),j4t.forEach(t),tFr=r(YPe," (Marian model)"),YPe.forEach(t),aFr=i(Be),w9=n(Be,"LI",{});var KPe=s(w9);X5e=n(KPe,"STRONG",{});var D4t=s(X5e);nFr=r(D4t,"mbart"),D4t.forEach(t),sFr=r(KPe," \u2014 "),zH=n(KPe,"A",{href:!0});var G4t=s(zH);lFr=r(G4t,"TFMBartForConditionalGeneration"),G4t.forEach(t),iFr=r(KPe," (mBART model)"),KPe.forEach(t),dFr=i(Be),A9=n(Be,"LI",{});var ZPe=s(A9);z5e=n(ZPe,"STRONG",{});var O4t=s(z5e);cFr=r(O4t,"mt5"),O4t.forEach(t),fFr=r(ZPe," \u2014 "),WH=n(ZPe,"A",{href:!0});var V4t=s(WH);mFr=r(V4t,"TFMT5ForConditionalGeneration"),V4t.forEach(t),gFr=r(ZPe," (MT5 model)"),ZPe.forEach(t),hFr=i(Be),y9=n(Be,"LI",{});var eBe=s(y9);W5e=n(eBe,"STRONG",{});var X4t=s(W5e);pFr=r(X4t,"pegasus"),X4t.forEach(t),_Fr=r(eBe," \u2014 "),QH=n(eBe,"A",{href:!0});var z4t=s(QH);uFr=r(z4t,"TFPegasusForConditionalGeneration"),z4t.forEach(t),bFr=r(eBe," (Pegasus model)"),eBe.forEach(t),vFr=i(Be),L9=n(Be,"LI",{});var oBe=s(L9);Q5e=n(oBe,"STRONG",{});var W4t=s(Q5e);FFr=r(W4t,"t5"),W4t.forEach(t),TFr=r(oBe," \u2014 "),HH=n(oBe,"A",{href:!0});var Q4t=s(HH);MFr=r(Q4t,"TFT5ForConditionalGeneration"),Q4t.forEach(t),EFr=r(oBe," (T5 model)"),oBe.forEach(t),Be.forEach(t),CFr=i(wl),T(x9.$$.fragment,wl),wl.forEach(t),Cl.forEach(t),Kje=i(f),sc=n(f,"H2",{class:!0});var aOe=s(sc);$9=n(aOe,"A",{id:!0,class:!0,href:!0});var H4t=s($9);H5e=n(H4t,"SPAN",{});var U4t=s(H5e);T(QL.$$.fragment,U4t),U4t.forEach(t),H4t.forEach(t),wFr=i(aOe),U5e=n(aOe,"SPAN",{});var J4t=s(U5e);AFr=r(J4t,"TFAutoModelForSequenceClassification"),J4t.forEach(t),aOe.forEach(t),Zje=i(f),tr=n(f,"DIV",{class:!0});var Al=s(tr);T(HL.$$.fragment,Al),yFr=i(Al),lc=n(Al,"P",{});var Dee=s(lc);LFr=r(Dee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),UH=n(Dee,"A",{href:!0});var Y4t=s(UH);xFr=r(Y4t,"from_pretrained()"),Y4t.forEach(t),$Fr=r(Dee," class method or the "),JH=n(Dee,"A",{href:!0});var K4t=s(JH);kFr=r(K4t,"from_config()"),K4t.forEach(t),SFr=r(Dee,` class
method.`),Dee.forEach(t),RFr=i(Al),UL=n(Al,"P",{});var nOe=s(UL);PFr=r(nOe,"This class cannot be instantiated directly using "),J5e=n(nOe,"CODE",{});var Z4t=s(J5e);BFr=r(Z4t,"__init__()"),Z4t.forEach(t),IFr=r(nOe," (throws an error)."),nOe.forEach(t),NFr=i(Al),Rt=n(Al,"DIV",{class:!0});var Ww=s(Rt);T(JL.$$.fragment,Ww),qFr=i(Ww),Y5e=n(Ww,"P",{});var eEt=s(Y5e);jFr=r(eEt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),eEt.forEach(t),DFr=i(Ww),ic=n(Ww,"P",{});var Gee=s(ic);GFr=r(Gee,`Note:
Loading a model from its configuration file does `),K5e=n(Gee,"STRONG",{});var oEt=s(K5e);OFr=r(oEt,"not"),oEt.forEach(t),VFr=r(Gee,` load the model weights. It only affects the
model\u2019s configuration. Use `),YH=n(Gee,"A",{href:!0});var rEt=s(YH);XFr=r(rEt,"from_pretrained()"),rEt.forEach(t),zFr=r(Gee," to load the model weights."),Gee.forEach(t),WFr=i(Ww),T(k9.$$.fragment,Ww),Ww.forEach(t),QFr=i(Al),kr=n(Al,"DIV",{class:!0});var yl=s(kr);T(YL.$$.fragment,yl),HFr=i(yl),Z5e=n(yl,"P",{});var tEt=s(Z5e);UFr=r(tEt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),tEt.forEach(t),JFr=i(yl),nn=n(yl,"P",{});var Qw=s(nn);YFr=r(Qw,"The model class to instantiate is selected based on the "),e3e=n(Qw,"CODE",{});var aEt=s(e3e);KFr=r(aEt,"model_type"),aEt.forEach(t),ZFr=r(Qw,` property of the config object (either
passed as an argument or loaded from `),o3e=n(Qw,"CODE",{});var nEt=s(o3e);eTr=r(nEt,"pretrained_model_name_or_path"),nEt.forEach(t),oTr=r(Qw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r3e=n(Qw,"CODE",{});var sEt=s(r3e);rTr=r(sEt,"pretrained_model_name_or_path"),sEt.forEach(t),tTr=r(Qw,":"),Qw.forEach(t),aTr=i(yl),oe=n(yl,"UL",{});var ae=s(oe);S9=n(ae,"LI",{});var rBe=s(S9);t3e=n(rBe,"STRONG",{});var lEt=s(t3e);nTr=r(lEt,"albert"),lEt.forEach(t),sTr=r(rBe," \u2014 "),KH=n(rBe,"A",{href:!0});var iEt=s(KH);lTr=r(iEt,"TFAlbertForSequenceClassification"),iEt.forEach(t),iTr=r(rBe," (ALBERT model)"),rBe.forEach(t),dTr=i(ae),R9=n(ae,"LI",{});var tBe=s(R9);a3e=n(tBe,"STRONG",{});var dEt=s(a3e);cTr=r(dEt,"bert"),dEt.forEach(t),fTr=r(tBe," \u2014 "),ZH=n(tBe,"A",{href:!0});var cEt=s(ZH);mTr=r(cEt,"TFBertForSequenceClassification"),cEt.forEach(t),gTr=r(tBe," (BERT model)"),tBe.forEach(t),hTr=i(ae),P9=n(ae,"LI",{});var aBe=s(P9);n3e=n(aBe,"STRONG",{});var fEt=s(n3e);pTr=r(fEt,"camembert"),fEt.forEach(t),_Tr=r(aBe," \u2014 "),eU=n(aBe,"A",{href:!0});var mEt=s(eU);uTr=r(mEt,"TFCamembertForSequenceClassification"),mEt.forEach(t),bTr=r(aBe," (CamemBERT model)"),aBe.forEach(t),vTr=i(ae),B9=n(ae,"LI",{});var nBe=s(B9);s3e=n(nBe,"STRONG",{});var gEt=s(s3e);FTr=r(gEt,"convbert"),gEt.forEach(t),TTr=r(nBe," \u2014 "),oU=n(nBe,"A",{href:!0});var hEt=s(oU);MTr=r(hEt,"TFConvBertForSequenceClassification"),hEt.forEach(t),ETr=r(nBe," (ConvBERT model)"),nBe.forEach(t),CTr=i(ae),I9=n(ae,"LI",{});var sBe=s(I9);l3e=n(sBe,"STRONG",{});var pEt=s(l3e);wTr=r(pEt,"ctrl"),pEt.forEach(t),ATr=r(sBe," \u2014 "),rU=n(sBe,"A",{href:!0});var _Et=s(rU);yTr=r(_Et,"TFCTRLForSequenceClassification"),_Et.forEach(t),LTr=r(sBe," (CTRL model)"),sBe.forEach(t),xTr=i(ae),N9=n(ae,"LI",{});var lBe=s(N9);i3e=n(lBe,"STRONG",{});var uEt=s(i3e);$Tr=r(uEt,"deberta"),uEt.forEach(t),kTr=r(lBe," \u2014 "),tU=n(lBe,"A",{href:!0});var bEt=s(tU);STr=r(bEt,"TFDebertaForSequenceClassification"),bEt.forEach(t),RTr=r(lBe," (DeBERTa model)"),lBe.forEach(t),PTr=i(ae),q9=n(ae,"LI",{});var iBe=s(q9);d3e=n(iBe,"STRONG",{});var vEt=s(d3e);BTr=r(vEt,"deberta-v2"),vEt.forEach(t),ITr=r(iBe," \u2014 "),aU=n(iBe,"A",{href:!0});var FEt=s(aU);NTr=r(FEt,"TFDebertaV2ForSequenceClassification"),FEt.forEach(t),qTr=r(iBe," (DeBERTa-v2 model)"),iBe.forEach(t),jTr=i(ae),j9=n(ae,"LI",{});var dBe=s(j9);c3e=n(dBe,"STRONG",{});var TEt=s(c3e);DTr=r(TEt,"distilbert"),TEt.forEach(t),GTr=r(dBe," \u2014 "),nU=n(dBe,"A",{href:!0});var MEt=s(nU);OTr=r(MEt,"TFDistilBertForSequenceClassification"),MEt.forEach(t),VTr=r(dBe," (DistilBERT model)"),dBe.forEach(t),XTr=i(ae),D9=n(ae,"LI",{});var cBe=s(D9);f3e=n(cBe,"STRONG",{});var EEt=s(f3e);zTr=r(EEt,"electra"),EEt.forEach(t),WTr=r(cBe," \u2014 "),sU=n(cBe,"A",{href:!0});var CEt=s(sU);QTr=r(CEt,"TFElectraForSequenceClassification"),CEt.forEach(t),HTr=r(cBe," (ELECTRA model)"),cBe.forEach(t),UTr=i(ae),G9=n(ae,"LI",{});var fBe=s(G9);m3e=n(fBe,"STRONG",{});var wEt=s(m3e);JTr=r(wEt,"flaubert"),wEt.forEach(t),YTr=r(fBe," \u2014 "),lU=n(fBe,"A",{href:!0});var AEt=s(lU);KTr=r(AEt,"TFFlaubertForSequenceClassification"),AEt.forEach(t),ZTr=r(fBe," (FlauBERT model)"),fBe.forEach(t),e7r=i(ae),O9=n(ae,"LI",{});var mBe=s(O9);g3e=n(mBe,"STRONG",{});var yEt=s(g3e);o7r=r(yEt,"funnel"),yEt.forEach(t),r7r=r(mBe," \u2014 "),iU=n(mBe,"A",{href:!0});var LEt=s(iU);t7r=r(LEt,"TFFunnelForSequenceClassification"),LEt.forEach(t),a7r=r(mBe," (Funnel Transformer model)"),mBe.forEach(t),n7r=i(ae),V9=n(ae,"LI",{});var gBe=s(V9);h3e=n(gBe,"STRONG",{});var xEt=s(h3e);s7r=r(xEt,"gpt2"),xEt.forEach(t),l7r=r(gBe," \u2014 "),dU=n(gBe,"A",{href:!0});var $Et=s(dU);i7r=r($Et,"TFGPT2ForSequenceClassification"),$Et.forEach(t),d7r=r(gBe," (OpenAI GPT-2 model)"),gBe.forEach(t),c7r=i(ae),X9=n(ae,"LI",{});var hBe=s(X9);p3e=n(hBe,"STRONG",{});var kEt=s(p3e);f7r=r(kEt,"gptj"),kEt.forEach(t),m7r=r(hBe," \u2014 "),cU=n(hBe,"A",{href:!0});var SEt=s(cU);g7r=r(SEt,"TFGPTJForSequenceClassification"),SEt.forEach(t),h7r=r(hBe," (GPT-J model)"),hBe.forEach(t),p7r=i(ae),z9=n(ae,"LI",{});var pBe=s(z9);_3e=n(pBe,"STRONG",{});var REt=s(_3e);_7r=r(REt,"layoutlm"),REt.forEach(t),u7r=r(pBe," \u2014 "),fU=n(pBe,"A",{href:!0});var PEt=s(fU);b7r=r(PEt,"TFLayoutLMForSequenceClassification"),PEt.forEach(t),v7r=r(pBe," (LayoutLM model)"),pBe.forEach(t),F7r=i(ae),W9=n(ae,"LI",{});var _Be=s(W9);u3e=n(_Be,"STRONG",{});var BEt=s(u3e);T7r=r(BEt,"longformer"),BEt.forEach(t),M7r=r(_Be," \u2014 "),mU=n(_Be,"A",{href:!0});var IEt=s(mU);E7r=r(IEt,"TFLongformerForSequenceClassification"),IEt.forEach(t),C7r=r(_Be," (Longformer model)"),_Be.forEach(t),w7r=i(ae),Q9=n(ae,"LI",{});var uBe=s(Q9);b3e=n(uBe,"STRONG",{});var NEt=s(b3e);A7r=r(NEt,"mobilebert"),NEt.forEach(t),y7r=r(uBe," \u2014 "),gU=n(uBe,"A",{href:!0});var qEt=s(gU);L7r=r(qEt,"TFMobileBertForSequenceClassification"),qEt.forEach(t),x7r=r(uBe," (MobileBERT model)"),uBe.forEach(t),$7r=i(ae),H9=n(ae,"LI",{});var bBe=s(H9);v3e=n(bBe,"STRONG",{});var jEt=s(v3e);k7r=r(jEt,"mpnet"),jEt.forEach(t),S7r=r(bBe," \u2014 "),hU=n(bBe,"A",{href:!0});var DEt=s(hU);R7r=r(DEt,"TFMPNetForSequenceClassification"),DEt.forEach(t),P7r=r(bBe," (MPNet model)"),bBe.forEach(t),B7r=i(ae),U9=n(ae,"LI",{});var vBe=s(U9);F3e=n(vBe,"STRONG",{});var GEt=s(F3e);I7r=r(GEt,"openai-gpt"),GEt.forEach(t),N7r=r(vBe," \u2014 "),pU=n(vBe,"A",{href:!0});var OEt=s(pU);q7r=r(OEt,"TFOpenAIGPTForSequenceClassification"),OEt.forEach(t),j7r=r(vBe," (OpenAI GPT model)"),vBe.forEach(t),D7r=i(ae),J9=n(ae,"LI",{});var FBe=s(J9);T3e=n(FBe,"STRONG",{});var VEt=s(T3e);G7r=r(VEt,"rembert"),VEt.forEach(t),O7r=r(FBe," \u2014 "),_U=n(FBe,"A",{href:!0});var XEt=s(_U);V7r=r(XEt,"TFRemBertForSequenceClassification"),XEt.forEach(t),X7r=r(FBe," (RemBERT model)"),FBe.forEach(t),z7r=i(ae),Y9=n(ae,"LI",{});var TBe=s(Y9);M3e=n(TBe,"STRONG",{});var zEt=s(M3e);W7r=r(zEt,"roberta"),zEt.forEach(t),Q7r=r(TBe," \u2014 "),uU=n(TBe,"A",{href:!0});var WEt=s(uU);H7r=r(WEt,"TFRobertaForSequenceClassification"),WEt.forEach(t),U7r=r(TBe," (RoBERTa model)"),TBe.forEach(t),J7r=i(ae),K9=n(ae,"LI",{});var MBe=s(K9);E3e=n(MBe,"STRONG",{});var QEt=s(E3e);Y7r=r(QEt,"roformer"),QEt.forEach(t),K7r=r(MBe," \u2014 "),bU=n(MBe,"A",{href:!0});var HEt=s(bU);Z7r=r(HEt,"TFRoFormerForSequenceClassification"),HEt.forEach(t),e9r=r(MBe," (RoFormer model)"),MBe.forEach(t),o9r=i(ae),Z9=n(ae,"LI",{});var EBe=s(Z9);C3e=n(EBe,"STRONG",{});var UEt=s(C3e);r9r=r(UEt,"tapas"),UEt.forEach(t),t9r=r(EBe," \u2014 "),vU=n(EBe,"A",{href:!0});var JEt=s(vU);a9r=r(JEt,"TFTapasForSequenceClassification"),JEt.forEach(t),n9r=r(EBe," (TAPAS model)"),EBe.forEach(t),s9r=i(ae),eM=n(ae,"LI",{});var CBe=s(eM);w3e=n(CBe,"STRONG",{});var YEt=s(w3e);l9r=r(YEt,"transfo-xl"),YEt.forEach(t),i9r=r(CBe," \u2014 "),FU=n(CBe,"A",{href:!0});var KEt=s(FU);d9r=r(KEt,"TFTransfoXLForSequenceClassification"),KEt.forEach(t),c9r=r(CBe," (Transformer-XL model)"),CBe.forEach(t),f9r=i(ae),oM=n(ae,"LI",{});var wBe=s(oM);A3e=n(wBe,"STRONG",{});var ZEt=s(A3e);m9r=r(ZEt,"xlm"),ZEt.forEach(t),g9r=r(wBe," \u2014 "),TU=n(wBe,"A",{href:!0});var eCt=s(TU);h9r=r(eCt,"TFXLMForSequenceClassification"),eCt.forEach(t),p9r=r(wBe," (XLM model)"),wBe.forEach(t),_9r=i(ae),rM=n(ae,"LI",{});var ABe=s(rM);y3e=n(ABe,"STRONG",{});var oCt=s(y3e);u9r=r(oCt,"xlm-roberta"),oCt.forEach(t),b9r=r(ABe," \u2014 "),MU=n(ABe,"A",{href:!0});var rCt=s(MU);v9r=r(rCt,"TFXLMRobertaForSequenceClassification"),rCt.forEach(t),F9r=r(ABe," (XLM-RoBERTa model)"),ABe.forEach(t),T9r=i(ae),tM=n(ae,"LI",{});var yBe=s(tM);L3e=n(yBe,"STRONG",{});var tCt=s(L3e);M9r=r(tCt,"xlnet"),tCt.forEach(t),E9r=r(yBe," \u2014 "),EU=n(yBe,"A",{href:!0});var aCt=s(EU);C9r=r(aCt,"TFXLNetForSequenceClassification"),aCt.forEach(t),w9r=r(yBe," (XLNet model)"),yBe.forEach(t),ae.forEach(t),A9r=i(yl),T(aM.$$.fragment,yl),yl.forEach(t),Al.forEach(t),eDe=i(f),dc=n(f,"H2",{class:!0});var sOe=s(dc);nM=n(sOe,"A",{id:!0,class:!0,href:!0});var nCt=s(nM);x3e=n(nCt,"SPAN",{});var sCt=s(x3e);T(KL.$$.fragment,sCt),sCt.forEach(t),nCt.forEach(t),y9r=i(sOe),$3e=n(sOe,"SPAN",{});var lCt=s($3e);L9r=r(lCt,"TFAutoModelForMultipleChoice"),lCt.forEach(t),sOe.forEach(t),oDe=i(f),ar=n(f,"DIV",{class:!0});var Ll=s(ar);T(ZL.$$.fragment,Ll),x9r=i(Ll),cc=n(Ll,"P",{});var Oee=s(cc);$9r=r(Oee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),CU=n(Oee,"A",{href:!0});var iCt=s(CU);k9r=r(iCt,"from_pretrained()"),iCt.forEach(t),S9r=r(Oee," class method or the "),wU=n(Oee,"A",{href:!0});var dCt=s(wU);R9r=r(dCt,"from_config()"),dCt.forEach(t),P9r=r(Oee,` class
method.`),Oee.forEach(t),B9r=i(Ll),e8=n(Ll,"P",{});var lOe=s(e8);I9r=r(lOe,"This class cannot be instantiated directly using "),k3e=n(lOe,"CODE",{});var cCt=s(k3e);N9r=r(cCt,"__init__()"),cCt.forEach(t),q9r=r(lOe," (throws an error)."),lOe.forEach(t),j9r=i(Ll),Pt=n(Ll,"DIV",{class:!0});var Hw=s(Pt);T(o8.$$.fragment,Hw),D9r=i(Hw),S3e=n(Hw,"P",{});var fCt=s(S3e);G9r=r(fCt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),fCt.forEach(t),O9r=i(Hw),fc=n(Hw,"P",{});var Vee=s(fc);V9r=r(Vee,`Note:
Loading a model from its configuration file does `),R3e=n(Vee,"STRONG",{});var mCt=s(R3e);X9r=r(mCt,"not"),mCt.forEach(t),z9r=r(Vee,` load the model weights. It only affects the
model\u2019s configuration. Use `),AU=n(Vee,"A",{href:!0});var gCt=s(AU);W9r=r(gCt,"from_pretrained()"),gCt.forEach(t),Q9r=r(Vee," to load the model weights."),Vee.forEach(t),H9r=i(Hw),T(sM.$$.fragment,Hw),Hw.forEach(t),U9r=i(Ll),Sr=n(Ll,"DIV",{class:!0});var xl=s(Sr);T(r8.$$.fragment,xl),J9r=i(xl),P3e=n(xl,"P",{});var hCt=s(P3e);Y9r=r(hCt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),hCt.forEach(t),K9r=i(xl),sn=n(xl,"P",{});var Uw=s(sn);Z9r=r(Uw,"The model class to instantiate is selected based on the "),B3e=n(Uw,"CODE",{});var pCt=s(B3e);eMr=r(pCt,"model_type"),pCt.forEach(t),oMr=r(Uw,` property of the config object (either
passed as an argument or loaded from `),I3e=n(Uw,"CODE",{});var _Ct=s(I3e);rMr=r(_Ct,"pretrained_model_name_or_path"),_Ct.forEach(t),tMr=r(Uw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N3e=n(Uw,"CODE",{});var uCt=s(N3e);aMr=r(uCt,"pretrained_model_name_or_path"),uCt.forEach(t),nMr=r(Uw,":"),Uw.forEach(t),sMr=i(xl),pe=n(xl,"UL",{});var be=s(pe);lM=n(be,"LI",{});var LBe=s(lM);q3e=n(LBe,"STRONG",{});var bCt=s(q3e);lMr=r(bCt,"albert"),bCt.forEach(t),iMr=r(LBe," \u2014 "),yU=n(LBe,"A",{href:!0});var vCt=s(yU);dMr=r(vCt,"TFAlbertForMultipleChoice"),vCt.forEach(t),cMr=r(LBe," (ALBERT model)"),LBe.forEach(t),fMr=i(be),iM=n(be,"LI",{});var xBe=s(iM);j3e=n(xBe,"STRONG",{});var FCt=s(j3e);mMr=r(FCt,"bert"),FCt.forEach(t),gMr=r(xBe," \u2014 "),LU=n(xBe,"A",{href:!0});var TCt=s(LU);hMr=r(TCt,"TFBertForMultipleChoice"),TCt.forEach(t),pMr=r(xBe," (BERT model)"),xBe.forEach(t),_Mr=i(be),dM=n(be,"LI",{});var $Be=s(dM);D3e=n($Be,"STRONG",{});var MCt=s(D3e);uMr=r(MCt,"camembert"),MCt.forEach(t),bMr=r($Be," \u2014 "),xU=n($Be,"A",{href:!0});var ECt=s(xU);vMr=r(ECt,"TFCamembertForMultipleChoice"),ECt.forEach(t),FMr=r($Be," (CamemBERT model)"),$Be.forEach(t),TMr=i(be),cM=n(be,"LI",{});var kBe=s(cM);G3e=n(kBe,"STRONG",{});var CCt=s(G3e);MMr=r(CCt,"convbert"),CCt.forEach(t),EMr=r(kBe," \u2014 "),$U=n(kBe,"A",{href:!0});var wCt=s($U);CMr=r(wCt,"TFConvBertForMultipleChoice"),wCt.forEach(t),wMr=r(kBe," (ConvBERT model)"),kBe.forEach(t),AMr=i(be),fM=n(be,"LI",{});var SBe=s(fM);O3e=n(SBe,"STRONG",{});var ACt=s(O3e);yMr=r(ACt,"distilbert"),ACt.forEach(t),LMr=r(SBe," \u2014 "),kU=n(SBe,"A",{href:!0});var yCt=s(kU);xMr=r(yCt,"TFDistilBertForMultipleChoice"),yCt.forEach(t),$Mr=r(SBe," (DistilBERT model)"),SBe.forEach(t),kMr=i(be),mM=n(be,"LI",{});var RBe=s(mM);V3e=n(RBe,"STRONG",{});var LCt=s(V3e);SMr=r(LCt,"electra"),LCt.forEach(t),RMr=r(RBe," \u2014 "),SU=n(RBe,"A",{href:!0});var xCt=s(SU);PMr=r(xCt,"TFElectraForMultipleChoice"),xCt.forEach(t),BMr=r(RBe," (ELECTRA model)"),RBe.forEach(t),IMr=i(be),gM=n(be,"LI",{});var PBe=s(gM);X3e=n(PBe,"STRONG",{});var $Ct=s(X3e);NMr=r($Ct,"flaubert"),$Ct.forEach(t),qMr=r(PBe," \u2014 "),RU=n(PBe,"A",{href:!0});var kCt=s(RU);jMr=r(kCt,"TFFlaubertForMultipleChoice"),kCt.forEach(t),DMr=r(PBe," (FlauBERT model)"),PBe.forEach(t),GMr=i(be),hM=n(be,"LI",{});var BBe=s(hM);z3e=n(BBe,"STRONG",{});var SCt=s(z3e);OMr=r(SCt,"funnel"),SCt.forEach(t),VMr=r(BBe," \u2014 "),PU=n(BBe,"A",{href:!0});var RCt=s(PU);XMr=r(RCt,"TFFunnelForMultipleChoice"),RCt.forEach(t),zMr=r(BBe," (Funnel Transformer model)"),BBe.forEach(t),WMr=i(be),pM=n(be,"LI",{});var IBe=s(pM);W3e=n(IBe,"STRONG",{});var PCt=s(W3e);QMr=r(PCt,"longformer"),PCt.forEach(t),HMr=r(IBe," \u2014 "),BU=n(IBe,"A",{href:!0});var BCt=s(BU);UMr=r(BCt,"TFLongformerForMultipleChoice"),BCt.forEach(t),JMr=r(IBe," (Longformer model)"),IBe.forEach(t),YMr=i(be),_M=n(be,"LI",{});var NBe=s(_M);Q3e=n(NBe,"STRONG",{});var ICt=s(Q3e);KMr=r(ICt,"mobilebert"),ICt.forEach(t),ZMr=r(NBe," \u2014 "),IU=n(NBe,"A",{href:!0});var NCt=s(IU);e4r=r(NCt,"TFMobileBertForMultipleChoice"),NCt.forEach(t),o4r=r(NBe," (MobileBERT model)"),NBe.forEach(t),r4r=i(be),uM=n(be,"LI",{});var qBe=s(uM);H3e=n(qBe,"STRONG",{});var qCt=s(H3e);t4r=r(qCt,"mpnet"),qCt.forEach(t),a4r=r(qBe," \u2014 "),NU=n(qBe,"A",{href:!0});var jCt=s(NU);n4r=r(jCt,"TFMPNetForMultipleChoice"),jCt.forEach(t),s4r=r(qBe," (MPNet model)"),qBe.forEach(t),l4r=i(be),bM=n(be,"LI",{});var jBe=s(bM);U3e=n(jBe,"STRONG",{});var DCt=s(U3e);i4r=r(DCt,"rembert"),DCt.forEach(t),d4r=r(jBe," \u2014 "),qU=n(jBe,"A",{href:!0});var GCt=s(qU);c4r=r(GCt,"TFRemBertForMultipleChoice"),GCt.forEach(t),f4r=r(jBe," (RemBERT model)"),jBe.forEach(t),m4r=i(be),vM=n(be,"LI",{});var DBe=s(vM);J3e=n(DBe,"STRONG",{});var OCt=s(J3e);g4r=r(OCt,"roberta"),OCt.forEach(t),h4r=r(DBe," \u2014 "),jU=n(DBe,"A",{href:!0});var VCt=s(jU);p4r=r(VCt,"TFRobertaForMultipleChoice"),VCt.forEach(t),_4r=r(DBe," (RoBERTa model)"),DBe.forEach(t),u4r=i(be),FM=n(be,"LI",{});var GBe=s(FM);Y3e=n(GBe,"STRONG",{});var XCt=s(Y3e);b4r=r(XCt,"roformer"),XCt.forEach(t),v4r=r(GBe," \u2014 "),DU=n(GBe,"A",{href:!0});var zCt=s(DU);F4r=r(zCt,"TFRoFormerForMultipleChoice"),zCt.forEach(t),T4r=r(GBe," (RoFormer model)"),GBe.forEach(t),M4r=i(be),TM=n(be,"LI",{});var OBe=s(TM);K3e=n(OBe,"STRONG",{});var WCt=s(K3e);E4r=r(WCt,"xlm"),WCt.forEach(t),C4r=r(OBe," \u2014 "),GU=n(OBe,"A",{href:!0});var QCt=s(GU);w4r=r(QCt,"TFXLMForMultipleChoice"),QCt.forEach(t),A4r=r(OBe," (XLM model)"),OBe.forEach(t),y4r=i(be),MM=n(be,"LI",{});var VBe=s(MM);Z3e=n(VBe,"STRONG",{});var HCt=s(Z3e);L4r=r(HCt,"xlm-roberta"),HCt.forEach(t),x4r=r(VBe," \u2014 "),OU=n(VBe,"A",{href:!0});var UCt=s(OU);$4r=r(UCt,"TFXLMRobertaForMultipleChoice"),UCt.forEach(t),k4r=r(VBe," (XLM-RoBERTa model)"),VBe.forEach(t),S4r=i(be),EM=n(be,"LI",{});var XBe=s(EM);eFe=n(XBe,"STRONG",{});var JCt=s(eFe);R4r=r(JCt,"xlnet"),JCt.forEach(t),P4r=r(XBe," \u2014 "),VU=n(XBe,"A",{href:!0});var YCt=s(VU);B4r=r(YCt,"TFXLNetForMultipleChoice"),YCt.forEach(t),I4r=r(XBe," (XLNet model)"),XBe.forEach(t),be.forEach(t),N4r=i(xl),T(CM.$$.fragment,xl),xl.forEach(t),Ll.forEach(t),rDe=i(f),mc=n(f,"H2",{class:!0});var iOe=s(mc);wM=n(iOe,"A",{id:!0,class:!0,href:!0});var KCt=s(wM);oFe=n(KCt,"SPAN",{});var ZCt=s(oFe);T(t8.$$.fragment,ZCt),ZCt.forEach(t),KCt.forEach(t),q4r=i(iOe),rFe=n(iOe,"SPAN",{});var e0t=s(rFe);j4r=r(e0t,"TFAutoModelForNextSentencePrediction"),e0t.forEach(t),iOe.forEach(t),tDe=i(f),nr=n(f,"DIV",{class:!0});var $l=s(nr);T(a8.$$.fragment,$l),D4r=i($l),gc=n($l,"P",{});var Xee=s(gc);G4r=r(Xee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),XU=n(Xee,"A",{href:!0});var o0t=s(XU);O4r=r(o0t,"from_pretrained()"),o0t.forEach(t),V4r=r(Xee," class method or the "),zU=n(Xee,"A",{href:!0});var r0t=s(zU);X4r=r(r0t,"from_config()"),r0t.forEach(t),z4r=r(Xee,` class
method.`),Xee.forEach(t),W4r=i($l),n8=n($l,"P",{});var dOe=s(n8);Q4r=r(dOe,"This class cannot be instantiated directly using "),tFe=n(dOe,"CODE",{});var t0t=s(tFe);H4r=r(t0t,"__init__()"),t0t.forEach(t),U4r=r(dOe," (throws an error)."),dOe.forEach(t),J4r=i($l),Bt=n($l,"DIV",{class:!0});var Jw=s(Bt);T(s8.$$.fragment,Jw),Y4r=i(Jw),aFe=n(Jw,"P",{});var a0t=s(aFe);K4r=r(a0t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),a0t.forEach(t),Z4r=i(Jw),hc=n(Jw,"P",{});var zee=s(hc);eEr=r(zee,`Note:
Loading a model from its configuration file does `),nFe=n(zee,"STRONG",{});var n0t=s(nFe);oEr=r(n0t,"not"),n0t.forEach(t),rEr=r(zee,` load the model weights. It only affects the
model\u2019s configuration. Use `),WU=n(zee,"A",{href:!0});var s0t=s(WU);tEr=r(s0t,"from_pretrained()"),s0t.forEach(t),aEr=r(zee," to load the model weights."),zee.forEach(t),nEr=i(Jw),T(AM.$$.fragment,Jw),Jw.forEach(t),sEr=i($l),Rr=n($l,"DIV",{class:!0});var kl=s(Rr);T(l8.$$.fragment,kl),lEr=i(kl),sFe=n(kl,"P",{});var l0t=s(sFe);iEr=r(l0t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),l0t.forEach(t),dEr=i(kl),ln=n(kl,"P",{});var Yw=s(ln);cEr=r(Yw,"The model class to instantiate is selected based on the "),lFe=n(Yw,"CODE",{});var i0t=s(lFe);fEr=r(i0t,"model_type"),i0t.forEach(t),mEr=r(Yw,` property of the config object (either
passed as an argument or loaded from `),iFe=n(Yw,"CODE",{});var d0t=s(iFe);gEr=r(d0t,"pretrained_model_name_or_path"),d0t.forEach(t),hEr=r(Yw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dFe=n(Yw,"CODE",{});var c0t=s(dFe);pEr=r(c0t,"pretrained_model_name_or_path"),c0t.forEach(t),_Er=r(Yw,":"),Yw.forEach(t),uEr=i(kl),i8=n(kl,"UL",{});var cOe=s(i8);yM=n(cOe,"LI",{});var zBe=s(yM);cFe=n(zBe,"STRONG",{});var f0t=s(cFe);bEr=r(f0t,"bert"),f0t.forEach(t),vEr=r(zBe," \u2014 "),QU=n(zBe,"A",{href:!0});var m0t=s(QU);FEr=r(m0t,"TFBertForNextSentencePrediction"),m0t.forEach(t),TEr=r(zBe," (BERT model)"),zBe.forEach(t),MEr=i(cOe),LM=n(cOe,"LI",{});var WBe=s(LM);fFe=n(WBe,"STRONG",{});var g0t=s(fFe);EEr=r(g0t,"mobilebert"),g0t.forEach(t),CEr=r(WBe," \u2014 "),HU=n(WBe,"A",{href:!0});var h0t=s(HU);wEr=r(h0t,"TFMobileBertForNextSentencePrediction"),h0t.forEach(t),AEr=r(WBe," (MobileBERT model)"),WBe.forEach(t),cOe.forEach(t),yEr=i(kl),T(xM.$$.fragment,kl),kl.forEach(t),$l.forEach(t),aDe=i(f),pc=n(f,"H2",{class:!0});var fOe=s(pc);$M=n(fOe,"A",{id:!0,class:!0,href:!0});var p0t=s($M);mFe=n(p0t,"SPAN",{});var _0t=s(mFe);T(d8.$$.fragment,_0t),_0t.forEach(t),p0t.forEach(t),LEr=i(fOe),gFe=n(fOe,"SPAN",{});var u0t=s(gFe);xEr=r(u0t,"TFAutoModelForTableQuestionAnswering"),u0t.forEach(t),fOe.forEach(t),nDe=i(f),sr=n(f,"DIV",{class:!0});var Sl=s(sr);T(c8.$$.fragment,Sl),$Er=i(Sl),_c=n(Sl,"P",{});var Wee=s(_c);kEr=r(Wee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),UU=n(Wee,"A",{href:!0});var b0t=s(UU);SEr=r(b0t,"from_pretrained()"),b0t.forEach(t),REr=r(Wee," class method or the "),JU=n(Wee,"A",{href:!0});var v0t=s(JU);PEr=r(v0t,"from_config()"),v0t.forEach(t),BEr=r(Wee,` class
method.`),Wee.forEach(t),IEr=i(Sl),f8=n(Sl,"P",{});var mOe=s(f8);NEr=r(mOe,"This class cannot be instantiated directly using "),hFe=n(mOe,"CODE",{});var F0t=s(hFe);qEr=r(F0t,"__init__()"),F0t.forEach(t),jEr=r(mOe," (throws an error)."),mOe.forEach(t),DEr=i(Sl),It=n(Sl,"DIV",{class:!0});var Kw=s(It);T(m8.$$.fragment,Kw),GEr=i(Kw),pFe=n(Kw,"P",{});var T0t=s(pFe);OEr=r(T0t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),T0t.forEach(t),VEr=i(Kw),uc=n(Kw,"P",{});var Qee=s(uc);XEr=r(Qee,`Note:
Loading a model from its configuration file does `),_Fe=n(Qee,"STRONG",{});var M0t=s(_Fe);zEr=r(M0t,"not"),M0t.forEach(t),WEr=r(Qee,` load the model weights. It only affects the
model\u2019s configuration. Use `),YU=n(Qee,"A",{href:!0});var E0t=s(YU);QEr=r(E0t,"from_pretrained()"),E0t.forEach(t),HEr=r(Qee," to load the model weights."),Qee.forEach(t),UEr=i(Kw),T(kM.$$.fragment,Kw),Kw.forEach(t),JEr=i(Sl),Pr=n(Sl,"DIV",{class:!0});var Rl=s(Pr);T(g8.$$.fragment,Rl),YEr=i(Rl),uFe=n(Rl,"P",{});var C0t=s(uFe);KEr=r(C0t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),C0t.forEach(t),ZEr=i(Rl),dn=n(Rl,"P",{});var Zw=s(dn);eCr=r(Zw,"The model class to instantiate is selected based on the "),bFe=n(Zw,"CODE",{});var w0t=s(bFe);oCr=r(w0t,"model_type"),w0t.forEach(t),rCr=r(Zw,` property of the config object (either
passed as an argument or loaded from `),vFe=n(Zw,"CODE",{});var A0t=s(vFe);tCr=r(A0t,"pretrained_model_name_or_path"),A0t.forEach(t),aCr=r(Zw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),FFe=n(Zw,"CODE",{});var y0t=s(FFe);nCr=r(y0t,"pretrained_model_name_or_path"),y0t.forEach(t),sCr=r(Zw,":"),Zw.forEach(t),lCr=i(Rl),TFe=n(Rl,"UL",{});var L0t=s(TFe);SM=n(L0t,"LI",{});var QBe=s(SM);MFe=n(QBe,"STRONG",{});var x0t=s(MFe);iCr=r(x0t,"tapas"),x0t.forEach(t),dCr=r(QBe," \u2014 "),KU=n(QBe,"A",{href:!0});var $0t=s(KU);cCr=r($0t,"TFTapasForQuestionAnswering"),$0t.forEach(t),fCr=r(QBe," (TAPAS model)"),QBe.forEach(t),L0t.forEach(t),mCr=i(Rl),T(RM.$$.fragment,Rl),Rl.forEach(t),Sl.forEach(t),sDe=i(f),bc=n(f,"H2",{class:!0});var gOe=s(bc);PM=n(gOe,"A",{id:!0,class:!0,href:!0});var k0t=s(PM);EFe=n(k0t,"SPAN",{});var S0t=s(EFe);T(h8.$$.fragment,S0t),S0t.forEach(t),k0t.forEach(t),gCr=i(gOe),CFe=n(gOe,"SPAN",{});var R0t=s(CFe);hCr=r(R0t,"TFAutoModelForTokenClassification"),R0t.forEach(t),gOe.forEach(t),lDe=i(f),lr=n(f,"DIV",{class:!0});var Pl=s(lr);T(p8.$$.fragment,Pl),pCr=i(Pl),vc=n(Pl,"P",{});var Hee=s(vc);_Cr=r(Hee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),ZU=n(Hee,"A",{href:!0});var P0t=s(ZU);uCr=r(P0t,"from_pretrained()"),P0t.forEach(t),bCr=r(Hee," class method or the "),eJ=n(Hee,"A",{href:!0});var B0t=s(eJ);vCr=r(B0t,"from_config()"),B0t.forEach(t),FCr=r(Hee,` class
method.`),Hee.forEach(t),TCr=i(Pl),_8=n(Pl,"P",{});var hOe=s(_8);MCr=r(hOe,"This class cannot be instantiated directly using "),wFe=n(hOe,"CODE",{});var I0t=s(wFe);ECr=r(I0t,"__init__()"),I0t.forEach(t),CCr=r(hOe," (throws an error)."),hOe.forEach(t),wCr=i(Pl),Nt=n(Pl,"DIV",{class:!0});var eA=s(Nt);T(u8.$$.fragment,eA),ACr=i(eA),AFe=n(eA,"P",{});var N0t=s(AFe);yCr=r(N0t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),N0t.forEach(t),LCr=i(eA),Fc=n(eA,"P",{});var Uee=s(Fc);xCr=r(Uee,`Note:
Loading a model from its configuration file does `),yFe=n(Uee,"STRONG",{});var q0t=s(yFe);$Cr=r(q0t,"not"),q0t.forEach(t),kCr=r(Uee,` load the model weights. It only affects the
model\u2019s configuration. Use `),oJ=n(Uee,"A",{href:!0});var j0t=s(oJ);SCr=r(j0t,"from_pretrained()"),j0t.forEach(t),RCr=r(Uee," to load the model weights."),Uee.forEach(t),PCr=i(eA),T(BM.$$.fragment,eA),eA.forEach(t),BCr=i(Pl),Br=n(Pl,"DIV",{class:!0});var Bl=s(Br);T(b8.$$.fragment,Bl),ICr=i(Bl),LFe=n(Bl,"P",{});var D0t=s(LFe);NCr=r(D0t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),D0t.forEach(t),qCr=i(Bl),cn=n(Bl,"P",{});var oA=s(cn);jCr=r(oA,"The model class to instantiate is selected based on the "),xFe=n(oA,"CODE",{});var G0t=s(xFe);DCr=r(G0t,"model_type"),G0t.forEach(t),GCr=r(oA,` property of the config object (either
passed as an argument or loaded from `),$Fe=n(oA,"CODE",{});var O0t=s($Fe);OCr=r(O0t,"pretrained_model_name_or_path"),O0t.forEach(t),VCr=r(oA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kFe=n(oA,"CODE",{});var V0t=s(kFe);XCr=r(V0t,"pretrained_model_name_or_path"),V0t.forEach(t),zCr=r(oA,":"),oA.forEach(t),WCr=i(Bl),de=n(Bl,"UL",{});var me=s(de);IM=n(me,"LI",{});var HBe=s(IM);SFe=n(HBe,"STRONG",{});var X0t=s(SFe);QCr=r(X0t,"albert"),X0t.forEach(t),HCr=r(HBe," \u2014 "),rJ=n(HBe,"A",{href:!0});var z0t=s(rJ);UCr=r(z0t,"TFAlbertForTokenClassification"),z0t.forEach(t),JCr=r(HBe," (ALBERT model)"),HBe.forEach(t),YCr=i(me),NM=n(me,"LI",{});var UBe=s(NM);RFe=n(UBe,"STRONG",{});var W0t=s(RFe);KCr=r(W0t,"bert"),W0t.forEach(t),ZCr=r(UBe," \u2014 "),tJ=n(UBe,"A",{href:!0});var Q0t=s(tJ);e0r=r(Q0t,"TFBertForTokenClassification"),Q0t.forEach(t),o0r=r(UBe," (BERT model)"),UBe.forEach(t),r0r=i(me),qM=n(me,"LI",{});var JBe=s(qM);PFe=n(JBe,"STRONG",{});var H0t=s(PFe);t0r=r(H0t,"camembert"),H0t.forEach(t),a0r=r(JBe," \u2014 "),aJ=n(JBe,"A",{href:!0});var U0t=s(aJ);n0r=r(U0t,"TFCamembertForTokenClassification"),U0t.forEach(t),s0r=r(JBe," (CamemBERT model)"),JBe.forEach(t),l0r=i(me),jM=n(me,"LI",{});var YBe=s(jM);BFe=n(YBe,"STRONG",{});var J0t=s(BFe);i0r=r(J0t,"convbert"),J0t.forEach(t),d0r=r(YBe," \u2014 "),nJ=n(YBe,"A",{href:!0});var Y0t=s(nJ);c0r=r(Y0t,"TFConvBertForTokenClassification"),Y0t.forEach(t),f0r=r(YBe," (ConvBERT model)"),YBe.forEach(t),m0r=i(me),DM=n(me,"LI",{});var KBe=s(DM);IFe=n(KBe,"STRONG",{});var K0t=s(IFe);g0r=r(K0t,"deberta"),K0t.forEach(t),h0r=r(KBe," \u2014 "),sJ=n(KBe,"A",{href:!0});var Z0t=s(sJ);p0r=r(Z0t,"TFDebertaForTokenClassification"),Z0t.forEach(t),_0r=r(KBe," (DeBERTa model)"),KBe.forEach(t),u0r=i(me),GM=n(me,"LI",{});var ZBe=s(GM);NFe=n(ZBe,"STRONG",{});var ewt=s(NFe);b0r=r(ewt,"deberta-v2"),ewt.forEach(t),v0r=r(ZBe," \u2014 "),lJ=n(ZBe,"A",{href:!0});var owt=s(lJ);F0r=r(owt,"TFDebertaV2ForTokenClassification"),owt.forEach(t),T0r=r(ZBe," (DeBERTa-v2 model)"),ZBe.forEach(t),M0r=i(me),OM=n(me,"LI",{});var eIe=s(OM);qFe=n(eIe,"STRONG",{});var rwt=s(qFe);E0r=r(rwt,"distilbert"),rwt.forEach(t),C0r=r(eIe," \u2014 "),iJ=n(eIe,"A",{href:!0});var twt=s(iJ);w0r=r(twt,"TFDistilBertForTokenClassification"),twt.forEach(t),A0r=r(eIe," (DistilBERT model)"),eIe.forEach(t),y0r=i(me),VM=n(me,"LI",{});var oIe=s(VM);jFe=n(oIe,"STRONG",{});var awt=s(jFe);L0r=r(awt,"electra"),awt.forEach(t),x0r=r(oIe," \u2014 "),dJ=n(oIe,"A",{href:!0});var nwt=s(dJ);$0r=r(nwt,"TFElectraForTokenClassification"),nwt.forEach(t),k0r=r(oIe," (ELECTRA model)"),oIe.forEach(t),S0r=i(me),XM=n(me,"LI",{});var rIe=s(XM);DFe=n(rIe,"STRONG",{});var swt=s(DFe);R0r=r(swt,"flaubert"),swt.forEach(t),P0r=r(rIe," \u2014 "),cJ=n(rIe,"A",{href:!0});var lwt=s(cJ);B0r=r(lwt,"TFFlaubertForTokenClassification"),lwt.forEach(t),I0r=r(rIe," (FlauBERT model)"),rIe.forEach(t),N0r=i(me),zM=n(me,"LI",{});var tIe=s(zM);GFe=n(tIe,"STRONG",{});var iwt=s(GFe);q0r=r(iwt,"funnel"),iwt.forEach(t),j0r=r(tIe," \u2014 "),fJ=n(tIe,"A",{href:!0});var dwt=s(fJ);D0r=r(dwt,"TFFunnelForTokenClassification"),dwt.forEach(t),G0r=r(tIe," (Funnel Transformer model)"),tIe.forEach(t),O0r=i(me),WM=n(me,"LI",{});var aIe=s(WM);OFe=n(aIe,"STRONG",{});var cwt=s(OFe);V0r=r(cwt,"layoutlm"),cwt.forEach(t),X0r=r(aIe," \u2014 "),mJ=n(aIe,"A",{href:!0});var fwt=s(mJ);z0r=r(fwt,"TFLayoutLMForTokenClassification"),fwt.forEach(t),W0r=r(aIe," (LayoutLM model)"),aIe.forEach(t),Q0r=i(me),QM=n(me,"LI",{});var nIe=s(QM);VFe=n(nIe,"STRONG",{});var mwt=s(VFe);H0r=r(mwt,"longformer"),mwt.forEach(t),U0r=r(nIe," \u2014 "),gJ=n(nIe,"A",{href:!0});var gwt=s(gJ);J0r=r(gwt,"TFLongformerForTokenClassification"),gwt.forEach(t),Y0r=r(nIe," (Longformer model)"),nIe.forEach(t),K0r=i(me),HM=n(me,"LI",{});var sIe=s(HM);XFe=n(sIe,"STRONG",{});var hwt=s(XFe);Z0r=r(hwt,"mobilebert"),hwt.forEach(t),ewr=r(sIe," \u2014 "),hJ=n(sIe,"A",{href:!0});var pwt=s(hJ);owr=r(pwt,"TFMobileBertForTokenClassification"),pwt.forEach(t),rwr=r(sIe," (MobileBERT model)"),sIe.forEach(t),twr=i(me),UM=n(me,"LI",{});var lIe=s(UM);zFe=n(lIe,"STRONG",{});var _wt=s(zFe);awr=r(_wt,"mpnet"),_wt.forEach(t),nwr=r(lIe," \u2014 "),pJ=n(lIe,"A",{href:!0});var uwt=s(pJ);swr=r(uwt,"TFMPNetForTokenClassification"),uwt.forEach(t),lwr=r(lIe," (MPNet model)"),lIe.forEach(t),iwr=i(me),JM=n(me,"LI",{});var iIe=s(JM);WFe=n(iIe,"STRONG",{});var bwt=s(WFe);dwr=r(bwt,"rembert"),bwt.forEach(t),cwr=r(iIe," \u2014 "),_J=n(iIe,"A",{href:!0});var vwt=s(_J);fwr=r(vwt,"TFRemBertForTokenClassification"),vwt.forEach(t),mwr=r(iIe," (RemBERT model)"),iIe.forEach(t),gwr=i(me),YM=n(me,"LI",{});var dIe=s(YM);QFe=n(dIe,"STRONG",{});var Fwt=s(QFe);hwr=r(Fwt,"roberta"),Fwt.forEach(t),pwr=r(dIe," \u2014 "),uJ=n(dIe,"A",{href:!0});var Twt=s(uJ);_wr=r(Twt,"TFRobertaForTokenClassification"),Twt.forEach(t),uwr=r(dIe," (RoBERTa model)"),dIe.forEach(t),bwr=i(me),KM=n(me,"LI",{});var cIe=s(KM);HFe=n(cIe,"STRONG",{});var Mwt=s(HFe);vwr=r(Mwt,"roformer"),Mwt.forEach(t),Fwr=r(cIe," \u2014 "),bJ=n(cIe,"A",{href:!0});var Ewt=s(bJ);Twr=r(Ewt,"TFRoFormerForTokenClassification"),Ewt.forEach(t),Mwr=r(cIe," (RoFormer model)"),cIe.forEach(t),Ewr=i(me),ZM=n(me,"LI",{});var fIe=s(ZM);UFe=n(fIe,"STRONG",{});var Cwt=s(UFe);Cwr=r(Cwt,"xlm"),Cwt.forEach(t),wwr=r(fIe," \u2014 "),vJ=n(fIe,"A",{href:!0});var wwt=s(vJ);Awr=r(wwt,"TFXLMForTokenClassification"),wwt.forEach(t),ywr=r(fIe," (XLM model)"),fIe.forEach(t),Lwr=i(me),e4=n(me,"LI",{});var mIe=s(e4);JFe=n(mIe,"STRONG",{});var Awt=s(JFe);xwr=r(Awt,"xlm-roberta"),Awt.forEach(t),$wr=r(mIe," \u2014 "),FJ=n(mIe,"A",{href:!0});var ywt=s(FJ);kwr=r(ywt,"TFXLMRobertaForTokenClassification"),ywt.forEach(t),Swr=r(mIe," (XLM-RoBERTa model)"),mIe.forEach(t),Rwr=i(me),o4=n(me,"LI",{});var gIe=s(o4);YFe=n(gIe,"STRONG",{});var Lwt=s(YFe);Pwr=r(Lwt,"xlnet"),Lwt.forEach(t),Bwr=r(gIe," \u2014 "),TJ=n(gIe,"A",{href:!0});var xwt=s(TJ);Iwr=r(xwt,"TFXLNetForTokenClassification"),xwt.forEach(t),Nwr=r(gIe," (XLNet model)"),gIe.forEach(t),me.forEach(t),qwr=i(Bl),T(r4.$$.fragment,Bl),Bl.forEach(t),Pl.forEach(t),iDe=i(f),Tc=n(f,"H2",{class:!0});var pOe=s(Tc);t4=n(pOe,"A",{id:!0,class:!0,href:!0});var $wt=s(t4);KFe=n($wt,"SPAN",{});var kwt=s(KFe);T(v8.$$.fragment,kwt),kwt.forEach(t),$wt.forEach(t),jwr=i(pOe),ZFe=n(pOe,"SPAN",{});var Swt=s(ZFe);Dwr=r(Swt,"TFAutoModelForQuestionAnswering"),Swt.forEach(t),pOe.forEach(t),dDe=i(f),ir=n(f,"DIV",{class:!0});var Il=s(ir);T(F8.$$.fragment,Il),Gwr=i(Il),Mc=n(Il,"P",{});var Jee=s(Mc);Owr=r(Jee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),MJ=n(Jee,"A",{href:!0});var Rwt=s(MJ);Vwr=r(Rwt,"from_pretrained()"),Rwt.forEach(t),Xwr=r(Jee," class method or the "),EJ=n(Jee,"A",{href:!0});var Pwt=s(EJ);zwr=r(Pwt,"from_config()"),Pwt.forEach(t),Wwr=r(Jee,` class
method.`),Jee.forEach(t),Qwr=i(Il),T8=n(Il,"P",{});var _Oe=s(T8);Hwr=r(_Oe,"This class cannot be instantiated directly using "),eTe=n(_Oe,"CODE",{});var Bwt=s(eTe);Uwr=r(Bwt,"__init__()"),Bwt.forEach(t),Jwr=r(_Oe," (throws an error)."),_Oe.forEach(t),Ywr=i(Il),qt=n(Il,"DIV",{class:!0});var rA=s(qt);T(M8.$$.fragment,rA),Kwr=i(rA),oTe=n(rA,"P",{});var Iwt=s(oTe);Zwr=r(Iwt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Iwt.forEach(t),eAr=i(rA),Ec=n(rA,"P",{});var Yee=s(Ec);oAr=r(Yee,`Note:
Loading a model from its configuration file does `),rTe=n(Yee,"STRONG",{});var Nwt=s(rTe);rAr=r(Nwt,"not"),Nwt.forEach(t),tAr=r(Yee,` load the model weights. It only affects the
model\u2019s configuration. Use `),CJ=n(Yee,"A",{href:!0});var qwt=s(CJ);aAr=r(qwt,"from_pretrained()"),qwt.forEach(t),nAr=r(Yee," to load the model weights."),Yee.forEach(t),sAr=i(rA),T(a4.$$.fragment,rA),rA.forEach(t),lAr=i(Il),Ir=n(Il,"DIV",{class:!0});var Nl=s(Ir);T(E8.$$.fragment,Nl),iAr=i(Nl),tTe=n(Nl,"P",{});var jwt=s(tTe);dAr=r(jwt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),jwt.forEach(t),cAr=i(Nl),fn=n(Nl,"P",{});var tA=s(fn);fAr=r(tA,"The model class to instantiate is selected based on the "),aTe=n(tA,"CODE",{});var Dwt=s(aTe);mAr=r(Dwt,"model_type"),Dwt.forEach(t),gAr=r(tA,` property of the config object (either
passed as an argument or loaded from `),nTe=n(tA,"CODE",{});var Gwt=s(nTe);hAr=r(Gwt,"pretrained_model_name_or_path"),Gwt.forEach(t),pAr=r(tA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sTe=n(tA,"CODE",{});var Owt=s(sTe);_Ar=r(Owt,"pretrained_model_name_or_path"),Owt.forEach(t),uAr=r(tA,":"),tA.forEach(t),bAr=i(Nl),ce=n(Nl,"UL",{});var ge=s(ce);n4=n(ge,"LI",{});var hIe=s(n4);lTe=n(hIe,"STRONG",{});var Vwt=s(lTe);vAr=r(Vwt,"albert"),Vwt.forEach(t),FAr=r(hIe," \u2014 "),wJ=n(hIe,"A",{href:!0});var Xwt=s(wJ);TAr=r(Xwt,"TFAlbertForQuestionAnswering"),Xwt.forEach(t),MAr=r(hIe," (ALBERT model)"),hIe.forEach(t),EAr=i(ge),s4=n(ge,"LI",{});var pIe=s(s4);iTe=n(pIe,"STRONG",{});var zwt=s(iTe);CAr=r(zwt,"bert"),zwt.forEach(t),wAr=r(pIe," \u2014 "),AJ=n(pIe,"A",{href:!0});var Wwt=s(AJ);AAr=r(Wwt,"TFBertForQuestionAnswering"),Wwt.forEach(t),yAr=r(pIe," (BERT model)"),pIe.forEach(t),LAr=i(ge),l4=n(ge,"LI",{});var _Ie=s(l4);dTe=n(_Ie,"STRONG",{});var Qwt=s(dTe);xAr=r(Qwt,"camembert"),Qwt.forEach(t),$Ar=r(_Ie," \u2014 "),yJ=n(_Ie,"A",{href:!0});var Hwt=s(yJ);kAr=r(Hwt,"TFCamembertForQuestionAnswering"),Hwt.forEach(t),SAr=r(_Ie," (CamemBERT model)"),_Ie.forEach(t),RAr=i(ge),i4=n(ge,"LI",{});var uIe=s(i4);cTe=n(uIe,"STRONG",{});var Uwt=s(cTe);PAr=r(Uwt,"convbert"),Uwt.forEach(t),BAr=r(uIe," \u2014 "),LJ=n(uIe,"A",{href:!0});var Jwt=s(LJ);IAr=r(Jwt,"TFConvBertForQuestionAnswering"),Jwt.forEach(t),NAr=r(uIe," (ConvBERT model)"),uIe.forEach(t),qAr=i(ge),d4=n(ge,"LI",{});var bIe=s(d4);fTe=n(bIe,"STRONG",{});var Ywt=s(fTe);jAr=r(Ywt,"deberta"),Ywt.forEach(t),DAr=r(bIe," \u2014 "),xJ=n(bIe,"A",{href:!0});var Kwt=s(xJ);GAr=r(Kwt,"TFDebertaForQuestionAnswering"),Kwt.forEach(t),OAr=r(bIe," (DeBERTa model)"),bIe.forEach(t),VAr=i(ge),c4=n(ge,"LI",{});var vIe=s(c4);mTe=n(vIe,"STRONG",{});var Zwt=s(mTe);XAr=r(Zwt,"deberta-v2"),Zwt.forEach(t),zAr=r(vIe," \u2014 "),$J=n(vIe,"A",{href:!0});var eAt=s($J);WAr=r(eAt,"TFDebertaV2ForQuestionAnswering"),eAt.forEach(t),QAr=r(vIe," (DeBERTa-v2 model)"),vIe.forEach(t),HAr=i(ge),f4=n(ge,"LI",{});var FIe=s(f4);gTe=n(FIe,"STRONG",{});var oAt=s(gTe);UAr=r(oAt,"distilbert"),oAt.forEach(t),JAr=r(FIe," \u2014 "),kJ=n(FIe,"A",{href:!0});var rAt=s(kJ);YAr=r(rAt,"TFDistilBertForQuestionAnswering"),rAt.forEach(t),KAr=r(FIe," (DistilBERT model)"),FIe.forEach(t),ZAr=i(ge),m4=n(ge,"LI",{});var TIe=s(m4);hTe=n(TIe,"STRONG",{});var tAt=s(hTe);e6r=r(tAt,"electra"),tAt.forEach(t),o6r=r(TIe," \u2014 "),SJ=n(TIe,"A",{href:!0});var aAt=s(SJ);r6r=r(aAt,"TFElectraForQuestionAnswering"),aAt.forEach(t),t6r=r(TIe," (ELECTRA model)"),TIe.forEach(t),a6r=i(ge),g4=n(ge,"LI",{});var MIe=s(g4);pTe=n(MIe,"STRONG",{});var nAt=s(pTe);n6r=r(nAt,"flaubert"),nAt.forEach(t),s6r=r(MIe," \u2014 "),RJ=n(MIe,"A",{href:!0});var sAt=s(RJ);l6r=r(sAt,"TFFlaubertForQuestionAnsweringSimple"),sAt.forEach(t),i6r=r(MIe," (FlauBERT model)"),MIe.forEach(t),d6r=i(ge),h4=n(ge,"LI",{});var EIe=s(h4);_Te=n(EIe,"STRONG",{});var lAt=s(_Te);c6r=r(lAt,"funnel"),lAt.forEach(t),f6r=r(EIe," \u2014 "),PJ=n(EIe,"A",{href:!0});var iAt=s(PJ);m6r=r(iAt,"TFFunnelForQuestionAnswering"),iAt.forEach(t),g6r=r(EIe," (Funnel Transformer model)"),EIe.forEach(t),h6r=i(ge),p4=n(ge,"LI",{});var CIe=s(p4);uTe=n(CIe,"STRONG",{});var dAt=s(uTe);p6r=r(dAt,"gptj"),dAt.forEach(t),_6r=r(CIe," \u2014 "),BJ=n(CIe,"A",{href:!0});var cAt=s(BJ);u6r=r(cAt,"TFGPTJForQuestionAnswering"),cAt.forEach(t),b6r=r(CIe," (GPT-J model)"),CIe.forEach(t),v6r=i(ge),_4=n(ge,"LI",{});var wIe=s(_4);bTe=n(wIe,"STRONG",{});var fAt=s(bTe);F6r=r(fAt,"longformer"),fAt.forEach(t),T6r=r(wIe," \u2014 "),IJ=n(wIe,"A",{href:!0});var mAt=s(IJ);M6r=r(mAt,"TFLongformerForQuestionAnswering"),mAt.forEach(t),E6r=r(wIe," (Longformer model)"),wIe.forEach(t),C6r=i(ge),u4=n(ge,"LI",{});var AIe=s(u4);vTe=n(AIe,"STRONG",{});var gAt=s(vTe);w6r=r(gAt,"mobilebert"),gAt.forEach(t),A6r=r(AIe," \u2014 "),NJ=n(AIe,"A",{href:!0});var hAt=s(NJ);y6r=r(hAt,"TFMobileBertForQuestionAnswering"),hAt.forEach(t),L6r=r(AIe," (MobileBERT model)"),AIe.forEach(t),x6r=i(ge),b4=n(ge,"LI",{});var yIe=s(b4);FTe=n(yIe,"STRONG",{});var pAt=s(FTe);$6r=r(pAt,"mpnet"),pAt.forEach(t),k6r=r(yIe," \u2014 "),qJ=n(yIe,"A",{href:!0});var _At=s(qJ);S6r=r(_At,"TFMPNetForQuestionAnswering"),_At.forEach(t),R6r=r(yIe," (MPNet model)"),yIe.forEach(t),P6r=i(ge),v4=n(ge,"LI",{});var LIe=s(v4);TTe=n(LIe,"STRONG",{});var uAt=s(TTe);B6r=r(uAt,"rembert"),uAt.forEach(t),I6r=r(LIe," \u2014 "),jJ=n(LIe,"A",{href:!0});var bAt=s(jJ);N6r=r(bAt,"TFRemBertForQuestionAnswering"),bAt.forEach(t),q6r=r(LIe," (RemBERT model)"),LIe.forEach(t),j6r=i(ge),F4=n(ge,"LI",{});var xIe=s(F4);MTe=n(xIe,"STRONG",{});var vAt=s(MTe);D6r=r(vAt,"roberta"),vAt.forEach(t),G6r=r(xIe," \u2014 "),DJ=n(xIe,"A",{href:!0});var FAt=s(DJ);O6r=r(FAt,"TFRobertaForQuestionAnswering"),FAt.forEach(t),V6r=r(xIe," (RoBERTa model)"),xIe.forEach(t),X6r=i(ge),T4=n(ge,"LI",{});var $Ie=s(T4);ETe=n($Ie,"STRONG",{});var TAt=s(ETe);z6r=r(TAt,"roformer"),TAt.forEach(t),W6r=r($Ie," \u2014 "),GJ=n($Ie,"A",{href:!0});var MAt=s(GJ);Q6r=r(MAt,"TFRoFormerForQuestionAnswering"),MAt.forEach(t),H6r=r($Ie," (RoFormer model)"),$Ie.forEach(t),U6r=i(ge),M4=n(ge,"LI",{});var kIe=s(M4);CTe=n(kIe,"STRONG",{});var EAt=s(CTe);J6r=r(EAt,"xlm"),EAt.forEach(t),Y6r=r(kIe," \u2014 "),OJ=n(kIe,"A",{href:!0});var CAt=s(OJ);K6r=r(CAt,"TFXLMForQuestionAnsweringSimple"),CAt.forEach(t),Z6r=r(kIe," (XLM model)"),kIe.forEach(t),eyr=i(ge),E4=n(ge,"LI",{});var SIe=s(E4);wTe=n(SIe,"STRONG",{});var wAt=s(wTe);oyr=r(wAt,"xlm-roberta"),wAt.forEach(t),ryr=r(SIe," \u2014 "),VJ=n(SIe,"A",{href:!0});var AAt=s(VJ);tyr=r(AAt,"TFXLMRobertaForQuestionAnswering"),AAt.forEach(t),ayr=r(SIe," (XLM-RoBERTa model)"),SIe.forEach(t),nyr=i(ge),C4=n(ge,"LI",{});var RIe=s(C4);ATe=n(RIe,"STRONG",{});var yAt=s(ATe);syr=r(yAt,"xlnet"),yAt.forEach(t),lyr=r(RIe," \u2014 "),XJ=n(RIe,"A",{href:!0});var LAt=s(XJ);iyr=r(LAt,"TFXLNetForQuestionAnsweringSimple"),LAt.forEach(t),dyr=r(RIe," (XLNet model)"),RIe.forEach(t),ge.forEach(t),cyr=i(Nl),T(w4.$$.fragment,Nl),Nl.forEach(t),Il.forEach(t),cDe=i(f),Cc=n(f,"H2",{class:!0});var uOe=s(Cc);A4=n(uOe,"A",{id:!0,class:!0,href:!0});var xAt=s(A4);yTe=n(xAt,"SPAN",{});var $At=s(yTe);T(C8.$$.fragment,$At),$At.forEach(t),xAt.forEach(t),fyr=i(uOe),LTe=n(uOe,"SPAN",{});var kAt=s(LTe);myr=r(kAt,"TFAutoModelForVision2Seq"),kAt.forEach(t),uOe.forEach(t),fDe=i(f),dr=n(f,"DIV",{class:!0});var ql=s(dr);T(w8.$$.fragment,ql),gyr=i(ql),wc=n(ql,"P",{});var Kee=s(wc);hyr=r(Kee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),zJ=n(Kee,"A",{href:!0});var SAt=s(zJ);pyr=r(SAt,"from_pretrained()"),SAt.forEach(t),_yr=r(Kee," class method or the "),WJ=n(Kee,"A",{href:!0});var RAt=s(WJ);uyr=r(RAt,"from_config()"),RAt.forEach(t),byr=r(Kee,` class
method.`),Kee.forEach(t),vyr=i(ql),A8=n(ql,"P",{});var bOe=s(A8);Fyr=r(bOe,"This class cannot be instantiated directly using "),xTe=n(bOe,"CODE",{});var PAt=s(xTe);Tyr=r(PAt,"__init__()"),PAt.forEach(t),Myr=r(bOe," (throws an error)."),bOe.forEach(t),Eyr=i(ql),jt=n(ql,"DIV",{class:!0});var aA=s(jt);T(y8.$$.fragment,aA),Cyr=i(aA),$Te=n(aA,"P",{});var BAt=s($Te);wyr=r(BAt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),BAt.forEach(t),Ayr=i(aA),Ac=n(aA,"P",{});var Zee=s(Ac);yyr=r(Zee,`Note:
Loading a model from its configuration file does `),kTe=n(Zee,"STRONG",{});var IAt=s(kTe);Lyr=r(IAt,"not"),IAt.forEach(t),xyr=r(Zee,` load the model weights. It only affects the
model\u2019s configuration. Use `),QJ=n(Zee,"A",{href:!0});var NAt=s(QJ);$yr=r(NAt,"from_pretrained()"),NAt.forEach(t),kyr=r(Zee," to load the model weights."),Zee.forEach(t),Syr=i(aA),T(y4.$$.fragment,aA),aA.forEach(t),Ryr=i(ql),Nr=n(ql,"DIV",{class:!0});var jl=s(Nr);T(L8.$$.fragment,jl),Pyr=i(jl),STe=n(jl,"P",{});var qAt=s(STe);Byr=r(qAt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),qAt.forEach(t),Iyr=i(jl),mn=n(jl,"P",{});var nA=s(mn);Nyr=r(nA,"The model class to instantiate is selected based on the "),RTe=n(nA,"CODE",{});var jAt=s(RTe);qyr=r(jAt,"model_type"),jAt.forEach(t),jyr=r(nA,` property of the config object (either
passed as an argument or loaded from `),PTe=n(nA,"CODE",{});var DAt=s(PTe);Dyr=r(DAt,"pretrained_model_name_or_path"),DAt.forEach(t),Gyr=r(nA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),BTe=n(nA,"CODE",{});var GAt=s(BTe);Oyr=r(GAt,"pretrained_model_name_or_path"),GAt.forEach(t),Vyr=r(nA,":"),nA.forEach(t),Xyr=i(jl),ITe=n(jl,"UL",{});var OAt=s(ITe);L4=n(OAt,"LI",{});var PIe=s(L4);NTe=n(PIe,"STRONG",{});var VAt=s(NTe);zyr=r(VAt,"vision-encoder-decoder"),VAt.forEach(t),Wyr=r(PIe," \u2014 "),HJ=n(PIe,"A",{href:!0});var XAt=s(HJ);Qyr=r(XAt,"TFVisionEncoderDecoderModel"),XAt.forEach(t),Hyr=r(PIe," (Vision Encoder decoder model)"),PIe.forEach(t),OAt.forEach(t),Uyr=i(jl),T(x4.$$.fragment,jl),jl.forEach(t),ql.forEach(t),mDe=i(f),yc=n(f,"H2",{class:!0});var vOe=s(yc);$4=n(vOe,"A",{id:!0,class:!0,href:!0});var zAt=s($4);qTe=n(zAt,"SPAN",{});var WAt=s(qTe);T(x8.$$.fragment,WAt),WAt.forEach(t),zAt.forEach(t),Jyr=i(vOe),jTe=n(vOe,"SPAN",{});var QAt=s(jTe);Yyr=r(QAt,"TFAutoModelForSpeechSeq2Seq"),QAt.forEach(t),vOe.forEach(t),gDe=i(f),cr=n(f,"DIV",{class:!0});var Dl=s(cr);T($8.$$.fragment,Dl),Kyr=i(Dl),Lc=n(Dl,"P",{});var eoe=s(Lc);Zyr=r(eoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),UJ=n(eoe,"A",{href:!0});var HAt=s(UJ);eLr=r(HAt,"from_pretrained()"),HAt.forEach(t),oLr=r(eoe," class method or the "),JJ=n(eoe,"A",{href:!0});var UAt=s(JJ);rLr=r(UAt,"from_config()"),UAt.forEach(t),tLr=r(eoe,` class
method.`),eoe.forEach(t),aLr=i(Dl),k8=n(Dl,"P",{});var FOe=s(k8);nLr=r(FOe,"This class cannot be instantiated directly using "),DTe=n(FOe,"CODE",{});var JAt=s(DTe);sLr=r(JAt,"__init__()"),JAt.forEach(t),lLr=r(FOe," (throws an error)."),FOe.forEach(t),iLr=i(Dl),Dt=n(Dl,"DIV",{class:!0});var sA=s(Dt);T(S8.$$.fragment,sA),dLr=i(sA),GTe=n(sA,"P",{});var YAt=s(GTe);cLr=r(YAt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),YAt.forEach(t),fLr=i(sA),xc=n(sA,"P",{});var ooe=s(xc);mLr=r(ooe,`Note:
Loading a model from its configuration file does `),OTe=n(ooe,"STRONG",{});var KAt=s(OTe);gLr=r(KAt,"not"),KAt.forEach(t),hLr=r(ooe,` load the model weights. It only affects the
model\u2019s configuration. Use `),YJ=n(ooe,"A",{href:!0});var ZAt=s(YJ);pLr=r(ZAt,"from_pretrained()"),ZAt.forEach(t),_Lr=r(ooe," to load the model weights."),ooe.forEach(t),uLr=i(sA),T(k4.$$.fragment,sA),sA.forEach(t),bLr=i(Dl),qr=n(Dl,"DIV",{class:!0});var Gl=s(qr);T(R8.$$.fragment,Gl),vLr=i(Gl),VTe=n(Gl,"P",{});var e6t=s(VTe);FLr=r(e6t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),e6t.forEach(t),TLr=i(Gl),gn=n(Gl,"P",{});var lA=s(gn);MLr=r(lA,"The model class to instantiate is selected based on the "),XTe=n(lA,"CODE",{});var o6t=s(XTe);ELr=r(o6t,"model_type"),o6t.forEach(t),CLr=r(lA,` property of the config object (either
passed as an argument or loaded from `),zTe=n(lA,"CODE",{});var r6t=s(zTe);wLr=r(r6t,"pretrained_model_name_or_path"),r6t.forEach(t),ALr=r(lA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),WTe=n(lA,"CODE",{});var t6t=s(WTe);yLr=r(t6t,"pretrained_model_name_or_path"),t6t.forEach(t),LLr=r(lA,":"),lA.forEach(t),xLr=i(Gl),QTe=n(Gl,"UL",{});var a6t=s(QTe);S4=n(a6t,"LI",{});var BIe=s(S4);HTe=n(BIe,"STRONG",{});var n6t=s(HTe);$Lr=r(n6t,"speech_to_text"),n6t.forEach(t),kLr=r(BIe," \u2014 "),KJ=n(BIe,"A",{href:!0});var s6t=s(KJ);SLr=r(s6t,"TFSpeech2TextForConditionalGeneration"),s6t.forEach(t),RLr=r(BIe," (Speech2Text model)"),BIe.forEach(t),a6t.forEach(t),PLr=i(Gl),T(R4.$$.fragment,Gl),Gl.forEach(t),Dl.forEach(t),hDe=i(f),$c=n(f,"H2",{class:!0});var TOe=s($c);P4=n(TOe,"A",{id:!0,class:!0,href:!0});var l6t=s(P4);UTe=n(l6t,"SPAN",{});var i6t=s(UTe);T(P8.$$.fragment,i6t),i6t.forEach(t),l6t.forEach(t),BLr=i(TOe),JTe=n(TOe,"SPAN",{});var d6t=s(JTe);ILr=r(d6t,"FlaxAutoModel"),d6t.forEach(t),TOe.forEach(t),pDe=i(f),fr=n(f,"DIV",{class:!0});var Ol=s(fr);T(B8.$$.fragment,Ol),NLr=i(Ol),kc=n(Ol,"P",{});var roe=s(kc);qLr=r(roe,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),ZJ=n(roe,"A",{href:!0});var c6t=s(ZJ);jLr=r(c6t,"from_pretrained()"),c6t.forEach(t),DLr=r(roe," class method or the "),eY=n(roe,"A",{href:!0});var f6t=s(eY);GLr=r(f6t,"from_config()"),f6t.forEach(t),OLr=r(roe,` class
method.`),roe.forEach(t),VLr=i(Ol),I8=n(Ol,"P",{});var MOe=s(I8);XLr=r(MOe,"This class cannot be instantiated directly using "),YTe=n(MOe,"CODE",{});var m6t=s(YTe);zLr=r(m6t,"__init__()"),m6t.forEach(t),WLr=r(MOe," (throws an error)."),MOe.forEach(t),QLr=i(Ol),Gt=n(Ol,"DIV",{class:!0});var iA=s(Gt);T(N8.$$.fragment,iA),HLr=i(iA),KTe=n(iA,"P",{});var g6t=s(KTe);ULr=r(g6t,"Instantiates one of the base model classes of the library from a configuration."),g6t.forEach(t),JLr=i(iA),Sc=n(iA,"P",{});var toe=s(Sc);YLr=r(toe,`Note:
Loading a model from its configuration file does `),ZTe=n(toe,"STRONG",{});var h6t=s(ZTe);KLr=r(h6t,"not"),h6t.forEach(t),ZLr=r(toe,` load the model weights. It only affects the
model\u2019s configuration. Use `),oY=n(toe,"A",{href:!0});var p6t=s(oY);e8r=r(p6t,"from_pretrained()"),p6t.forEach(t),o8r=r(toe," to load the model weights."),toe.forEach(t),r8r=i(iA),T(B4.$$.fragment,iA),iA.forEach(t),t8r=i(Ol),jr=n(Ol,"DIV",{class:!0});var Vl=s(jr);T(q8.$$.fragment,Vl),a8r=i(Vl),e7e=n(Vl,"P",{});var _6t=s(e7e);n8r=r(_6t,"Instantiate one of the base model classes of the library from a pretrained model."),_6t.forEach(t),s8r=i(Vl),hn=n(Vl,"P",{});var dA=s(hn);l8r=r(dA,"The model class to instantiate is selected based on the "),o7e=n(dA,"CODE",{});var u6t=s(o7e);i8r=r(u6t,"model_type"),u6t.forEach(t),d8r=r(dA,` property of the config object (either
passed as an argument or loaded from `),r7e=n(dA,"CODE",{});var b6t=s(r7e);c8r=r(b6t,"pretrained_model_name_or_path"),b6t.forEach(t),f8r=r(dA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t7e=n(dA,"CODE",{});var v6t=s(t7e);m8r=r(v6t,"pretrained_model_name_or_path"),v6t.forEach(t),g8r=r(dA,":"),dA.forEach(t),h8r=i(Vl),re=n(Vl,"UL",{});var ne=s(re);I4=n(ne,"LI",{});var IIe=s(I4);a7e=n(IIe,"STRONG",{});var F6t=s(a7e);p8r=r(F6t,"albert"),F6t.forEach(t),_8r=r(IIe," \u2014 "),rY=n(IIe,"A",{href:!0});var T6t=s(rY);u8r=r(T6t,"FlaxAlbertModel"),T6t.forEach(t),b8r=r(IIe," (ALBERT model)"),IIe.forEach(t),v8r=i(ne),N4=n(ne,"LI",{});var NIe=s(N4);n7e=n(NIe,"STRONG",{});var M6t=s(n7e);F8r=r(M6t,"bart"),M6t.forEach(t),T8r=r(NIe," \u2014 "),tY=n(NIe,"A",{href:!0});var E6t=s(tY);M8r=r(E6t,"FlaxBartModel"),E6t.forEach(t),E8r=r(NIe," (BART model)"),NIe.forEach(t),C8r=i(ne),q4=n(ne,"LI",{});var qIe=s(q4);s7e=n(qIe,"STRONG",{});var C6t=s(s7e);w8r=r(C6t,"beit"),C6t.forEach(t),A8r=r(qIe," \u2014 "),aY=n(qIe,"A",{href:!0});var w6t=s(aY);y8r=r(w6t,"FlaxBeitModel"),w6t.forEach(t),L8r=r(qIe," (BEiT model)"),qIe.forEach(t),x8r=i(ne),j4=n(ne,"LI",{});var jIe=s(j4);l7e=n(jIe,"STRONG",{});var A6t=s(l7e);$8r=r(A6t,"bert"),A6t.forEach(t),k8r=r(jIe," \u2014 "),nY=n(jIe,"A",{href:!0});var y6t=s(nY);S8r=r(y6t,"FlaxBertModel"),y6t.forEach(t),R8r=r(jIe," (BERT model)"),jIe.forEach(t),P8r=i(ne),D4=n(ne,"LI",{});var DIe=s(D4);i7e=n(DIe,"STRONG",{});var L6t=s(i7e);B8r=r(L6t,"big_bird"),L6t.forEach(t),I8r=r(DIe," \u2014 "),sY=n(DIe,"A",{href:!0});var x6t=s(sY);N8r=r(x6t,"FlaxBigBirdModel"),x6t.forEach(t),q8r=r(DIe," (BigBird model)"),DIe.forEach(t),j8r=i(ne),G4=n(ne,"LI",{});var GIe=s(G4);d7e=n(GIe,"STRONG",{});var $6t=s(d7e);D8r=r($6t,"blenderbot"),$6t.forEach(t),G8r=r(GIe," \u2014 "),lY=n(GIe,"A",{href:!0});var k6t=s(lY);O8r=r(k6t,"FlaxBlenderbotModel"),k6t.forEach(t),V8r=r(GIe," (Blenderbot model)"),GIe.forEach(t),X8r=i(ne),O4=n(ne,"LI",{});var OIe=s(O4);c7e=n(OIe,"STRONG",{});var S6t=s(c7e);z8r=r(S6t,"blenderbot-small"),S6t.forEach(t),W8r=r(OIe," \u2014 "),iY=n(OIe,"A",{href:!0});var R6t=s(iY);Q8r=r(R6t,"FlaxBlenderbotSmallModel"),R6t.forEach(t),H8r=r(OIe," (BlenderbotSmall model)"),OIe.forEach(t),U8r=i(ne),V4=n(ne,"LI",{});var VIe=s(V4);f7e=n(VIe,"STRONG",{});var P6t=s(f7e);J8r=r(P6t,"clip"),P6t.forEach(t),Y8r=r(VIe," \u2014 "),dY=n(VIe,"A",{href:!0});var B6t=s(dY);K8r=r(B6t,"FlaxCLIPModel"),B6t.forEach(t),Z8r=r(VIe," (CLIP model)"),VIe.forEach(t),exr=i(ne),X4=n(ne,"LI",{});var XIe=s(X4);m7e=n(XIe,"STRONG",{});var I6t=s(m7e);oxr=r(I6t,"distilbert"),I6t.forEach(t),rxr=r(XIe," \u2014 "),cY=n(XIe,"A",{href:!0});var N6t=s(cY);txr=r(N6t,"FlaxDistilBertModel"),N6t.forEach(t),axr=r(XIe," (DistilBERT model)"),XIe.forEach(t),nxr=i(ne),z4=n(ne,"LI",{});var zIe=s(z4);g7e=n(zIe,"STRONG",{});var q6t=s(g7e);sxr=r(q6t,"electra"),q6t.forEach(t),lxr=r(zIe," \u2014 "),fY=n(zIe,"A",{href:!0});var j6t=s(fY);ixr=r(j6t,"FlaxElectraModel"),j6t.forEach(t),dxr=r(zIe," (ELECTRA model)"),zIe.forEach(t),cxr=i(ne),W4=n(ne,"LI",{});var WIe=s(W4);h7e=n(WIe,"STRONG",{});var D6t=s(h7e);fxr=r(D6t,"gpt2"),D6t.forEach(t),mxr=r(WIe," \u2014 "),mY=n(WIe,"A",{href:!0});var G6t=s(mY);gxr=r(G6t,"FlaxGPT2Model"),G6t.forEach(t),hxr=r(WIe," (OpenAI GPT-2 model)"),WIe.forEach(t),pxr=i(ne),Q4=n(ne,"LI",{});var QIe=s(Q4);p7e=n(QIe,"STRONG",{});var O6t=s(p7e);_xr=r(O6t,"gpt_neo"),O6t.forEach(t),uxr=r(QIe," \u2014 "),gY=n(QIe,"A",{href:!0});var V6t=s(gY);bxr=r(V6t,"FlaxGPTNeoModel"),V6t.forEach(t),vxr=r(QIe," (GPT Neo model)"),QIe.forEach(t),Fxr=i(ne),H4=n(ne,"LI",{});var HIe=s(H4);_7e=n(HIe,"STRONG",{});var X6t=s(_7e);Txr=r(X6t,"gptj"),X6t.forEach(t),Mxr=r(HIe," \u2014 "),hY=n(HIe,"A",{href:!0});var z6t=s(hY);Exr=r(z6t,"FlaxGPTJModel"),z6t.forEach(t),Cxr=r(HIe," (GPT-J model)"),HIe.forEach(t),wxr=i(ne),U4=n(ne,"LI",{});var UIe=s(U4);u7e=n(UIe,"STRONG",{});var W6t=s(u7e);Axr=r(W6t,"marian"),W6t.forEach(t),yxr=r(UIe," \u2014 "),pY=n(UIe,"A",{href:!0});var Q6t=s(pY);Lxr=r(Q6t,"FlaxMarianModel"),Q6t.forEach(t),xxr=r(UIe," (Marian model)"),UIe.forEach(t),$xr=i(ne),J4=n(ne,"LI",{});var JIe=s(J4);b7e=n(JIe,"STRONG",{});var H6t=s(b7e);kxr=r(H6t,"mbart"),H6t.forEach(t),Sxr=r(JIe," \u2014 "),_Y=n(JIe,"A",{href:!0});var U6t=s(_Y);Rxr=r(U6t,"FlaxMBartModel"),U6t.forEach(t),Pxr=r(JIe," (mBART model)"),JIe.forEach(t),Bxr=i(ne),Y4=n(ne,"LI",{});var YIe=s(Y4);v7e=n(YIe,"STRONG",{});var J6t=s(v7e);Ixr=r(J6t,"mt5"),J6t.forEach(t),Nxr=r(YIe," \u2014 "),uY=n(YIe,"A",{href:!0});var Y6t=s(uY);qxr=r(Y6t,"FlaxMT5Model"),Y6t.forEach(t),jxr=r(YIe," (MT5 model)"),YIe.forEach(t),Dxr=i(ne),K4=n(ne,"LI",{});var KIe=s(K4);F7e=n(KIe,"STRONG",{});var K6t=s(F7e);Gxr=r(K6t,"opt"),K6t.forEach(t),Oxr=r(KIe," \u2014 "),bY=n(KIe,"A",{href:!0});var Z6t=s(bY);Vxr=r(Z6t,"FlaxOPTModel"),Z6t.forEach(t),Xxr=r(KIe," (OPT model)"),KIe.forEach(t),zxr=i(ne),Z4=n(ne,"LI",{});var ZIe=s(Z4);T7e=n(ZIe,"STRONG",{});var eyt=s(T7e);Wxr=r(eyt,"pegasus"),eyt.forEach(t),Qxr=r(ZIe," \u2014 "),vY=n(ZIe,"A",{href:!0});var oyt=s(vY);Hxr=r(oyt,"FlaxPegasusModel"),oyt.forEach(t),Uxr=r(ZIe," (Pegasus model)"),ZIe.forEach(t),Jxr=i(ne),eE=n(ne,"LI",{});var eNe=s(eE);M7e=n(eNe,"STRONG",{});var ryt=s(M7e);Yxr=r(ryt,"roberta"),ryt.forEach(t),Kxr=r(eNe," \u2014 "),FY=n(eNe,"A",{href:!0});var tyt=s(FY);Zxr=r(tyt,"FlaxRobertaModel"),tyt.forEach(t),e$r=r(eNe," (RoBERTa model)"),eNe.forEach(t),o$r=i(ne),oE=n(ne,"LI",{});var oNe=s(oE);E7e=n(oNe,"STRONG",{});var ayt=s(E7e);r$r=r(ayt,"roformer"),ayt.forEach(t),t$r=r(oNe," \u2014 "),TY=n(oNe,"A",{href:!0});var nyt=s(TY);a$r=r(nyt,"FlaxRoFormerModel"),nyt.forEach(t),n$r=r(oNe," (RoFormer model)"),oNe.forEach(t),s$r=i(ne),rE=n(ne,"LI",{});var rNe=s(rE);C7e=n(rNe,"STRONG",{});var syt=s(C7e);l$r=r(syt,"t5"),syt.forEach(t),i$r=r(rNe," \u2014 "),MY=n(rNe,"A",{href:!0});var lyt=s(MY);d$r=r(lyt,"FlaxT5Model"),lyt.forEach(t),c$r=r(rNe," (T5 model)"),rNe.forEach(t),f$r=i(ne),tE=n(ne,"LI",{});var tNe=s(tE);w7e=n(tNe,"STRONG",{});var iyt=s(w7e);m$r=r(iyt,"vision-text-dual-encoder"),iyt.forEach(t),g$r=r(tNe," \u2014 "),EY=n(tNe,"A",{href:!0});var dyt=s(EY);h$r=r(dyt,"FlaxVisionTextDualEncoderModel"),dyt.forEach(t),p$r=r(tNe," (VisionTextDualEncoder model)"),tNe.forEach(t),_$r=i(ne),aE=n(ne,"LI",{});var aNe=s(aE);A7e=n(aNe,"STRONG",{});var cyt=s(A7e);u$r=r(cyt,"vit"),cyt.forEach(t),b$r=r(aNe," \u2014 "),CY=n(aNe,"A",{href:!0});var fyt=s(CY);v$r=r(fyt,"FlaxViTModel"),fyt.forEach(t),F$r=r(aNe," (ViT model)"),aNe.forEach(t),T$r=i(ne),nE=n(ne,"LI",{});var nNe=s(nE);y7e=n(nNe,"STRONG",{});var myt=s(y7e);M$r=r(myt,"wav2vec2"),myt.forEach(t),E$r=r(nNe," \u2014 "),wY=n(nNe,"A",{href:!0});var gyt=s(wY);C$r=r(gyt,"FlaxWav2Vec2Model"),gyt.forEach(t),w$r=r(nNe," (Wav2Vec2 model)"),nNe.forEach(t),A$r=i(ne),sE=n(ne,"LI",{});var sNe=s(sE);L7e=n(sNe,"STRONG",{});var hyt=s(L7e);y$r=r(hyt,"xglm"),hyt.forEach(t),L$r=r(sNe," \u2014 "),AY=n(sNe,"A",{href:!0});var pyt=s(AY);x$r=r(pyt,"FlaxXGLMModel"),pyt.forEach(t),$$r=r(sNe," (XGLM model)"),sNe.forEach(t),k$r=i(ne),lE=n(ne,"LI",{});var lNe=s(lE);x7e=n(lNe,"STRONG",{});var _yt=s(x7e);S$r=r(_yt,"xlm-roberta"),_yt.forEach(t),R$r=r(lNe," \u2014 "),yY=n(lNe,"A",{href:!0});var uyt=s(yY);P$r=r(uyt,"FlaxXLMRobertaModel"),uyt.forEach(t),B$r=r(lNe," (XLM-RoBERTa model)"),lNe.forEach(t),ne.forEach(t),I$r=i(Vl),T(iE.$$.fragment,Vl),Vl.forEach(t),Ol.forEach(t),_De=i(f),Rc=n(f,"H2",{class:!0});var EOe=s(Rc);dE=n(EOe,"A",{id:!0,class:!0,href:!0});var byt=s(dE);$7e=n(byt,"SPAN",{});var vyt=s($7e);T(j8.$$.fragment,vyt),vyt.forEach(t),byt.forEach(t),N$r=i(EOe),k7e=n(EOe,"SPAN",{});var Fyt=s(k7e);q$r=r(Fyt,"FlaxAutoModelForCausalLM"),Fyt.forEach(t),EOe.forEach(t),uDe=i(f),mr=n(f,"DIV",{class:!0});var Xl=s(mr);T(D8.$$.fragment,Xl),j$r=i(Xl),Pc=n(Xl,"P",{});var aoe=s(Pc);D$r=r(aoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),LY=n(aoe,"A",{href:!0});var Tyt=s(LY);G$r=r(Tyt,"from_pretrained()"),Tyt.forEach(t),O$r=r(aoe," class method or the "),xY=n(aoe,"A",{href:!0});var Myt=s(xY);V$r=r(Myt,"from_config()"),Myt.forEach(t),X$r=r(aoe,` class
method.`),aoe.forEach(t),z$r=i(Xl),G8=n(Xl,"P",{});var COe=s(G8);W$r=r(COe,"This class cannot be instantiated directly using "),S7e=n(COe,"CODE",{});var Eyt=s(S7e);Q$r=r(Eyt,"__init__()"),Eyt.forEach(t),H$r=r(COe," (throws an error)."),COe.forEach(t),U$r=i(Xl),Ot=n(Xl,"DIV",{class:!0});var cA=s(Ot);T(O8.$$.fragment,cA),J$r=i(cA),R7e=n(cA,"P",{});var Cyt=s(R7e);Y$r=r(Cyt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Cyt.forEach(t),K$r=i(cA),Bc=n(cA,"P",{});var noe=s(Bc);Z$r=r(noe,`Note:
Loading a model from its configuration file does `),P7e=n(noe,"STRONG",{});var wyt=s(P7e);ekr=r(wyt,"not"),wyt.forEach(t),okr=r(noe,` load the model weights. It only affects the
model\u2019s configuration. Use `),$Y=n(noe,"A",{href:!0});var Ayt=s($Y);rkr=r(Ayt,"from_pretrained()"),Ayt.forEach(t),tkr=r(noe," to load the model weights."),noe.forEach(t),akr=i(cA),T(cE.$$.fragment,cA),cA.forEach(t),nkr=i(Xl),Dr=n(Xl,"DIV",{class:!0});var zl=s(Dr);T(V8.$$.fragment,zl),skr=i(zl),B7e=n(zl,"P",{});var yyt=s(B7e);lkr=r(yyt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),yyt.forEach(t),ikr=i(zl),pn=n(zl,"P",{});var fA=s(pn);dkr=r(fA,"The model class to instantiate is selected based on the "),I7e=n(fA,"CODE",{});var Lyt=s(I7e);ckr=r(Lyt,"model_type"),Lyt.forEach(t),fkr=r(fA,` property of the config object (either
passed as an argument or loaded from `),N7e=n(fA,"CODE",{});var xyt=s(N7e);mkr=r(xyt,"pretrained_model_name_or_path"),xyt.forEach(t),gkr=r(fA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q7e=n(fA,"CODE",{});var $yt=s(q7e);hkr=r($yt,"pretrained_model_name_or_path"),$yt.forEach(t),pkr=r(fA,":"),fA.forEach(t),_kr=i(zl),Le=n(zl,"UL",{});var Ie=s(Le);fE=n(Ie,"LI",{});var iNe=s(fE);j7e=n(iNe,"STRONG",{});var kyt=s(j7e);ukr=r(kyt,"bart"),kyt.forEach(t),bkr=r(iNe," \u2014 "),kY=n(iNe,"A",{href:!0});var Syt=s(kY);vkr=r(Syt,"FlaxBartForCausalLM"),Syt.forEach(t),Fkr=r(iNe," (BART model)"),iNe.forEach(t),Tkr=i(Ie),mE=n(Ie,"LI",{});var dNe=s(mE);D7e=n(dNe,"STRONG",{});var Ryt=s(D7e);Mkr=r(Ryt,"bert"),Ryt.forEach(t),Ekr=r(dNe," \u2014 "),SY=n(dNe,"A",{href:!0});var Pyt=s(SY);Ckr=r(Pyt,"FlaxBertForCausalLM"),Pyt.forEach(t),wkr=r(dNe," (BERT model)"),dNe.forEach(t),Akr=i(Ie),gE=n(Ie,"LI",{});var cNe=s(gE);G7e=n(cNe,"STRONG",{});var Byt=s(G7e);ykr=r(Byt,"big_bird"),Byt.forEach(t),Lkr=r(cNe," \u2014 "),RY=n(cNe,"A",{href:!0});var Iyt=s(RY);xkr=r(Iyt,"FlaxBigBirdForCausalLM"),Iyt.forEach(t),$kr=r(cNe," (BigBird model)"),cNe.forEach(t),kkr=i(Ie),hE=n(Ie,"LI",{});var fNe=s(hE);O7e=n(fNe,"STRONG",{});var Nyt=s(O7e);Skr=r(Nyt,"electra"),Nyt.forEach(t),Rkr=r(fNe," \u2014 "),PY=n(fNe,"A",{href:!0});var qyt=s(PY);Pkr=r(qyt,"FlaxElectraForCausalLM"),qyt.forEach(t),Bkr=r(fNe," (ELECTRA model)"),fNe.forEach(t),Ikr=i(Ie),pE=n(Ie,"LI",{});var mNe=s(pE);V7e=n(mNe,"STRONG",{});var jyt=s(V7e);Nkr=r(jyt,"gpt2"),jyt.forEach(t),qkr=r(mNe," \u2014 "),BY=n(mNe,"A",{href:!0});var Dyt=s(BY);jkr=r(Dyt,"FlaxGPT2LMHeadModel"),Dyt.forEach(t),Dkr=r(mNe," (OpenAI GPT-2 model)"),mNe.forEach(t),Gkr=i(Ie),_E=n(Ie,"LI",{});var gNe=s(_E);X7e=n(gNe,"STRONG",{});var Gyt=s(X7e);Okr=r(Gyt,"gpt_neo"),Gyt.forEach(t),Vkr=r(gNe," \u2014 "),IY=n(gNe,"A",{href:!0});var Oyt=s(IY);Xkr=r(Oyt,"FlaxGPTNeoForCausalLM"),Oyt.forEach(t),zkr=r(gNe," (GPT Neo model)"),gNe.forEach(t),Wkr=i(Ie),uE=n(Ie,"LI",{});var hNe=s(uE);z7e=n(hNe,"STRONG",{});var Vyt=s(z7e);Qkr=r(Vyt,"gptj"),Vyt.forEach(t),Hkr=r(hNe," \u2014 "),NY=n(hNe,"A",{href:!0});var Xyt=s(NY);Ukr=r(Xyt,"FlaxGPTJForCausalLM"),Xyt.forEach(t),Jkr=r(hNe," (GPT-J model)"),hNe.forEach(t),Ykr=i(Ie),bE=n(Ie,"LI",{});var pNe=s(bE);W7e=n(pNe,"STRONG",{});var zyt=s(W7e);Kkr=r(zyt,"opt"),zyt.forEach(t),Zkr=r(pNe," \u2014 "),qY=n(pNe,"A",{href:!0});var Wyt=s(qY);eSr=r(Wyt,"FlaxOPTForCausalLM"),Wyt.forEach(t),oSr=r(pNe," (OPT model)"),pNe.forEach(t),rSr=i(Ie),vE=n(Ie,"LI",{});var _Ne=s(vE);Q7e=n(_Ne,"STRONG",{});var Qyt=s(Q7e);tSr=r(Qyt,"roberta"),Qyt.forEach(t),aSr=r(_Ne," \u2014 "),jY=n(_Ne,"A",{href:!0});var Hyt=s(jY);nSr=r(Hyt,"FlaxRobertaForCausalLM"),Hyt.forEach(t),sSr=r(_Ne," (RoBERTa model)"),_Ne.forEach(t),lSr=i(Ie),FE=n(Ie,"LI",{});var uNe=s(FE);H7e=n(uNe,"STRONG",{});var Uyt=s(H7e);iSr=r(Uyt,"xglm"),Uyt.forEach(t),dSr=r(uNe," \u2014 "),DY=n(uNe,"A",{href:!0});var Jyt=s(DY);cSr=r(Jyt,"FlaxXGLMForCausalLM"),Jyt.forEach(t),fSr=r(uNe," (XGLM model)"),uNe.forEach(t),Ie.forEach(t),mSr=i(zl),T(TE.$$.fragment,zl),zl.forEach(t),Xl.forEach(t),bDe=i(f),Ic=n(f,"H2",{class:!0});var wOe=s(Ic);ME=n(wOe,"A",{id:!0,class:!0,href:!0});var Yyt=s(ME);U7e=n(Yyt,"SPAN",{});var Kyt=s(U7e);T(X8.$$.fragment,Kyt),Kyt.forEach(t),Yyt.forEach(t),gSr=i(wOe),J7e=n(wOe,"SPAN",{});var Zyt=s(J7e);hSr=r(Zyt,"FlaxAutoModelForPreTraining"),Zyt.forEach(t),wOe.forEach(t),vDe=i(f),gr=n(f,"DIV",{class:!0});var Wl=s(gr);T(z8.$$.fragment,Wl),pSr=i(Wl),Nc=n(Wl,"P",{});var soe=s(Nc);_Sr=r(soe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),GY=n(soe,"A",{href:!0});var eLt=s(GY);uSr=r(eLt,"from_pretrained()"),eLt.forEach(t),bSr=r(soe," class method or the "),OY=n(soe,"A",{href:!0});var oLt=s(OY);vSr=r(oLt,"from_config()"),oLt.forEach(t),FSr=r(soe,` class
method.`),soe.forEach(t),TSr=i(Wl),W8=n(Wl,"P",{});var AOe=s(W8);MSr=r(AOe,"This class cannot be instantiated directly using "),Y7e=n(AOe,"CODE",{});var rLt=s(Y7e);ESr=r(rLt,"__init__()"),rLt.forEach(t),CSr=r(AOe," (throws an error)."),AOe.forEach(t),wSr=i(Wl),Vt=n(Wl,"DIV",{class:!0});var mA=s(Vt);T(Q8.$$.fragment,mA),ASr=i(mA),K7e=n(mA,"P",{});var tLt=s(K7e);ySr=r(tLt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),tLt.forEach(t),LSr=i(mA),qc=n(mA,"P",{});var loe=s(qc);xSr=r(loe,`Note:
Loading a model from its configuration file does `),Z7e=n(loe,"STRONG",{});var aLt=s(Z7e);$Sr=r(aLt,"not"),aLt.forEach(t),kSr=r(loe,` load the model weights. It only affects the
model\u2019s configuration. Use `),VY=n(loe,"A",{href:!0});var nLt=s(VY);SSr=r(nLt,"from_pretrained()"),nLt.forEach(t),RSr=r(loe," to load the model weights."),loe.forEach(t),PSr=i(mA),T(EE.$$.fragment,mA),mA.forEach(t),BSr=i(Wl),Gr=n(Wl,"DIV",{class:!0});var Ql=s(Gr);T(H8.$$.fragment,Ql),ISr=i(Ql),e9e=n(Ql,"P",{});var sLt=s(e9e);NSr=r(sLt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),sLt.forEach(t),qSr=i(Ql),_n=n(Ql,"P",{});var gA=s(_n);jSr=r(gA,"The model class to instantiate is selected based on the "),o9e=n(gA,"CODE",{});var lLt=s(o9e);DSr=r(lLt,"model_type"),lLt.forEach(t),GSr=r(gA,` property of the config object (either
passed as an argument or loaded from `),r9e=n(gA,"CODE",{});var iLt=s(r9e);OSr=r(iLt,"pretrained_model_name_or_path"),iLt.forEach(t),VSr=r(gA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t9e=n(gA,"CODE",{});var dLt=s(t9e);XSr=r(dLt,"pretrained_model_name_or_path"),dLt.forEach(t),zSr=r(gA,":"),gA.forEach(t),WSr=i(Ql),Ee=n(Ql,"UL",{});var we=s(Ee);CE=n(we,"LI",{});var bNe=s(CE);a9e=n(bNe,"STRONG",{});var cLt=s(a9e);QSr=r(cLt,"albert"),cLt.forEach(t),HSr=r(bNe," \u2014 "),XY=n(bNe,"A",{href:!0});var fLt=s(XY);USr=r(fLt,"FlaxAlbertForPreTraining"),fLt.forEach(t),JSr=r(bNe," (ALBERT model)"),bNe.forEach(t),YSr=i(we),wE=n(we,"LI",{});var vNe=s(wE);n9e=n(vNe,"STRONG",{});var mLt=s(n9e);KSr=r(mLt,"bart"),mLt.forEach(t),ZSr=r(vNe," \u2014 "),zY=n(vNe,"A",{href:!0});var gLt=s(zY);eRr=r(gLt,"FlaxBartForConditionalGeneration"),gLt.forEach(t),oRr=r(vNe," (BART model)"),vNe.forEach(t),rRr=i(we),AE=n(we,"LI",{});var FNe=s(AE);s9e=n(FNe,"STRONG",{});var hLt=s(s9e);tRr=r(hLt,"bert"),hLt.forEach(t),aRr=r(FNe," \u2014 "),WY=n(FNe,"A",{href:!0});var pLt=s(WY);nRr=r(pLt,"FlaxBertForPreTraining"),pLt.forEach(t),sRr=r(FNe," (BERT model)"),FNe.forEach(t),lRr=i(we),yE=n(we,"LI",{});var TNe=s(yE);l9e=n(TNe,"STRONG",{});var _Lt=s(l9e);iRr=r(_Lt,"big_bird"),_Lt.forEach(t),dRr=r(TNe," \u2014 "),QY=n(TNe,"A",{href:!0});var uLt=s(QY);cRr=r(uLt,"FlaxBigBirdForPreTraining"),uLt.forEach(t),fRr=r(TNe," (BigBird model)"),TNe.forEach(t),mRr=i(we),LE=n(we,"LI",{});var MNe=s(LE);i9e=n(MNe,"STRONG",{});var bLt=s(i9e);gRr=r(bLt,"electra"),bLt.forEach(t),hRr=r(MNe," \u2014 "),HY=n(MNe,"A",{href:!0});var vLt=s(HY);pRr=r(vLt,"FlaxElectraForPreTraining"),vLt.forEach(t),_Rr=r(MNe," (ELECTRA model)"),MNe.forEach(t),uRr=i(we),xE=n(we,"LI",{});var ENe=s(xE);d9e=n(ENe,"STRONG",{});var FLt=s(d9e);bRr=r(FLt,"mbart"),FLt.forEach(t),vRr=r(ENe," \u2014 "),UY=n(ENe,"A",{href:!0});var TLt=s(UY);FRr=r(TLt,"FlaxMBartForConditionalGeneration"),TLt.forEach(t),TRr=r(ENe," (mBART model)"),ENe.forEach(t),MRr=i(we),$E=n(we,"LI",{});var CNe=s($E);c9e=n(CNe,"STRONG",{});var MLt=s(c9e);ERr=r(MLt,"mt5"),MLt.forEach(t),CRr=r(CNe," \u2014 "),JY=n(CNe,"A",{href:!0});var ELt=s(JY);wRr=r(ELt,"FlaxMT5ForConditionalGeneration"),ELt.forEach(t),ARr=r(CNe," (MT5 model)"),CNe.forEach(t),yRr=i(we),kE=n(we,"LI",{});var wNe=s(kE);f9e=n(wNe,"STRONG",{});var CLt=s(f9e);LRr=r(CLt,"roberta"),CLt.forEach(t),xRr=r(wNe," \u2014 "),YY=n(wNe,"A",{href:!0});var wLt=s(YY);$Rr=r(wLt,"FlaxRobertaForMaskedLM"),wLt.forEach(t),kRr=r(wNe," (RoBERTa model)"),wNe.forEach(t),SRr=i(we),SE=n(we,"LI",{});var ANe=s(SE);m9e=n(ANe,"STRONG",{});var ALt=s(m9e);RRr=r(ALt,"roformer"),ALt.forEach(t),PRr=r(ANe," \u2014 "),KY=n(ANe,"A",{href:!0});var yLt=s(KY);BRr=r(yLt,"FlaxRoFormerForMaskedLM"),yLt.forEach(t),IRr=r(ANe," (RoFormer model)"),ANe.forEach(t),NRr=i(we),RE=n(we,"LI",{});var yNe=s(RE);g9e=n(yNe,"STRONG",{});var LLt=s(g9e);qRr=r(LLt,"t5"),LLt.forEach(t),jRr=r(yNe," \u2014 "),ZY=n(yNe,"A",{href:!0});var xLt=s(ZY);DRr=r(xLt,"FlaxT5ForConditionalGeneration"),xLt.forEach(t),GRr=r(yNe," (T5 model)"),yNe.forEach(t),ORr=i(we),PE=n(we,"LI",{});var LNe=s(PE);h9e=n(LNe,"STRONG",{});var $Lt=s(h9e);VRr=r($Lt,"wav2vec2"),$Lt.forEach(t),XRr=r(LNe," \u2014 "),eK=n(LNe,"A",{href:!0});var kLt=s(eK);zRr=r(kLt,"FlaxWav2Vec2ForPreTraining"),kLt.forEach(t),WRr=r(LNe," (Wav2Vec2 model)"),LNe.forEach(t),QRr=i(we),BE=n(we,"LI",{});var xNe=s(BE);p9e=n(xNe,"STRONG",{});var SLt=s(p9e);HRr=r(SLt,"xlm-roberta"),SLt.forEach(t),URr=r(xNe," \u2014 "),oK=n(xNe,"A",{href:!0});var RLt=s(oK);JRr=r(RLt,"FlaxXLMRobertaForMaskedLM"),RLt.forEach(t),YRr=r(xNe," (XLM-RoBERTa model)"),xNe.forEach(t),we.forEach(t),KRr=i(Ql),T(IE.$$.fragment,Ql),Ql.forEach(t),Wl.forEach(t),FDe=i(f),jc=n(f,"H2",{class:!0});var yOe=s(jc);NE=n(yOe,"A",{id:!0,class:!0,href:!0});var PLt=s(NE);_9e=n(PLt,"SPAN",{});var BLt=s(_9e);T(U8.$$.fragment,BLt),BLt.forEach(t),PLt.forEach(t),ZRr=i(yOe),u9e=n(yOe,"SPAN",{});var ILt=s(u9e);ePr=r(ILt,"FlaxAutoModelForMaskedLM"),ILt.forEach(t),yOe.forEach(t),TDe=i(f),hr=n(f,"DIV",{class:!0});var Hl=s(hr);T(J8.$$.fragment,Hl),oPr=i(Hl),Dc=n(Hl,"P",{});var ioe=s(Dc);rPr=r(ioe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),rK=n(ioe,"A",{href:!0});var NLt=s(rK);tPr=r(NLt,"from_pretrained()"),NLt.forEach(t),aPr=r(ioe," class method or the "),tK=n(ioe,"A",{href:!0});var qLt=s(tK);nPr=r(qLt,"from_config()"),qLt.forEach(t),sPr=r(ioe,` class
method.`),ioe.forEach(t),lPr=i(Hl),Y8=n(Hl,"P",{});var LOe=s(Y8);iPr=r(LOe,"This class cannot be instantiated directly using "),b9e=n(LOe,"CODE",{});var jLt=s(b9e);dPr=r(jLt,"__init__()"),jLt.forEach(t),cPr=r(LOe," (throws an error)."),LOe.forEach(t),fPr=i(Hl),Xt=n(Hl,"DIV",{class:!0});var hA=s(Xt);T(K8.$$.fragment,hA),mPr=i(hA),v9e=n(hA,"P",{});var DLt=s(v9e);gPr=r(DLt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),DLt.forEach(t),hPr=i(hA),Gc=n(hA,"P",{});var doe=s(Gc);pPr=r(doe,`Note:
Loading a model from its configuration file does `),F9e=n(doe,"STRONG",{});var GLt=s(F9e);_Pr=r(GLt,"not"),GLt.forEach(t),uPr=r(doe,` load the model weights. It only affects the
model\u2019s configuration. Use `),aK=n(doe,"A",{href:!0});var OLt=s(aK);bPr=r(OLt,"from_pretrained()"),OLt.forEach(t),vPr=r(doe," to load the model weights."),doe.forEach(t),FPr=i(hA),T(qE.$$.fragment,hA),hA.forEach(t),TPr=i(Hl),Or=n(Hl,"DIV",{class:!0});var Ul=s(Or);T(Z8.$$.fragment,Ul),MPr=i(Ul),T9e=n(Ul,"P",{});var VLt=s(T9e);EPr=r(VLt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),VLt.forEach(t),CPr=i(Ul),un=n(Ul,"P",{});var pA=s(un);wPr=r(pA,"The model class to instantiate is selected based on the "),M9e=n(pA,"CODE",{});var XLt=s(M9e);APr=r(XLt,"model_type"),XLt.forEach(t),yPr=r(pA,` property of the config object (either
passed as an argument or loaded from `),E9e=n(pA,"CODE",{});var zLt=s(E9e);LPr=r(zLt,"pretrained_model_name_or_path"),zLt.forEach(t),xPr=r(pA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C9e=n(pA,"CODE",{});var WLt=s(C9e);$Pr=r(WLt,"pretrained_model_name_or_path"),WLt.forEach(t),kPr=r(pA,":"),pA.forEach(t),SPr=i(Ul),xe=n(Ul,"UL",{});var Ne=s(xe);jE=n(Ne,"LI",{});var $Ne=s(jE);w9e=n($Ne,"STRONG",{});var QLt=s(w9e);RPr=r(QLt,"albert"),QLt.forEach(t),PPr=r($Ne," \u2014 "),nK=n($Ne,"A",{href:!0});var HLt=s(nK);BPr=r(HLt,"FlaxAlbertForMaskedLM"),HLt.forEach(t),IPr=r($Ne," (ALBERT model)"),$Ne.forEach(t),NPr=i(Ne),DE=n(Ne,"LI",{});var kNe=s(DE);A9e=n(kNe,"STRONG",{});var ULt=s(A9e);qPr=r(ULt,"bart"),ULt.forEach(t),jPr=r(kNe," \u2014 "),sK=n(kNe,"A",{href:!0});var JLt=s(sK);DPr=r(JLt,"FlaxBartForConditionalGeneration"),JLt.forEach(t),GPr=r(kNe," (BART model)"),kNe.forEach(t),OPr=i(Ne),GE=n(Ne,"LI",{});var SNe=s(GE);y9e=n(SNe,"STRONG",{});var YLt=s(y9e);VPr=r(YLt,"bert"),YLt.forEach(t),XPr=r(SNe," \u2014 "),lK=n(SNe,"A",{href:!0});var KLt=s(lK);zPr=r(KLt,"FlaxBertForMaskedLM"),KLt.forEach(t),WPr=r(SNe," (BERT model)"),SNe.forEach(t),QPr=i(Ne),OE=n(Ne,"LI",{});var RNe=s(OE);L9e=n(RNe,"STRONG",{});var ZLt=s(L9e);HPr=r(ZLt,"big_bird"),ZLt.forEach(t),UPr=r(RNe," \u2014 "),iK=n(RNe,"A",{href:!0});var e8t=s(iK);JPr=r(e8t,"FlaxBigBirdForMaskedLM"),e8t.forEach(t),YPr=r(RNe," (BigBird model)"),RNe.forEach(t),KPr=i(Ne),VE=n(Ne,"LI",{});var PNe=s(VE);x9e=n(PNe,"STRONG",{});var o8t=s(x9e);ZPr=r(o8t,"distilbert"),o8t.forEach(t),eBr=r(PNe," \u2014 "),dK=n(PNe,"A",{href:!0});var r8t=s(dK);oBr=r(r8t,"FlaxDistilBertForMaskedLM"),r8t.forEach(t),rBr=r(PNe," (DistilBERT model)"),PNe.forEach(t),tBr=i(Ne),XE=n(Ne,"LI",{});var BNe=s(XE);$9e=n(BNe,"STRONG",{});var t8t=s($9e);aBr=r(t8t,"electra"),t8t.forEach(t),nBr=r(BNe," \u2014 "),cK=n(BNe,"A",{href:!0});var a8t=s(cK);sBr=r(a8t,"FlaxElectraForMaskedLM"),a8t.forEach(t),lBr=r(BNe," (ELECTRA model)"),BNe.forEach(t),iBr=i(Ne),zE=n(Ne,"LI",{});var INe=s(zE);k9e=n(INe,"STRONG",{});var n8t=s(k9e);dBr=r(n8t,"mbart"),n8t.forEach(t),cBr=r(INe," \u2014 "),fK=n(INe,"A",{href:!0});var s8t=s(fK);fBr=r(s8t,"FlaxMBartForConditionalGeneration"),s8t.forEach(t),mBr=r(INe," (mBART model)"),INe.forEach(t),gBr=i(Ne),WE=n(Ne,"LI",{});var NNe=s(WE);S9e=n(NNe,"STRONG",{});var l8t=s(S9e);hBr=r(l8t,"roberta"),l8t.forEach(t),pBr=r(NNe," \u2014 "),mK=n(NNe,"A",{href:!0});var i8t=s(mK);_Br=r(i8t,"FlaxRobertaForMaskedLM"),i8t.forEach(t),uBr=r(NNe," (RoBERTa model)"),NNe.forEach(t),bBr=i(Ne),QE=n(Ne,"LI",{});var qNe=s(QE);R9e=n(qNe,"STRONG",{});var d8t=s(R9e);vBr=r(d8t,"roformer"),d8t.forEach(t),FBr=r(qNe," \u2014 "),gK=n(qNe,"A",{href:!0});var c8t=s(gK);TBr=r(c8t,"FlaxRoFormerForMaskedLM"),c8t.forEach(t),MBr=r(qNe," (RoFormer model)"),qNe.forEach(t),EBr=i(Ne),HE=n(Ne,"LI",{});var jNe=s(HE);P9e=n(jNe,"STRONG",{});var f8t=s(P9e);CBr=r(f8t,"xlm-roberta"),f8t.forEach(t),wBr=r(jNe," \u2014 "),hK=n(jNe,"A",{href:!0});var m8t=s(hK);ABr=r(m8t,"FlaxXLMRobertaForMaskedLM"),m8t.forEach(t),yBr=r(jNe," (XLM-RoBERTa model)"),jNe.forEach(t),Ne.forEach(t),LBr=i(Ul),T(UE.$$.fragment,Ul),Ul.forEach(t),Hl.forEach(t),MDe=i(f),Oc=n(f,"H2",{class:!0});var xOe=s(Oc);JE=n(xOe,"A",{id:!0,class:!0,href:!0});var g8t=s(JE);B9e=n(g8t,"SPAN",{});var h8t=s(B9e);T(ex.$$.fragment,h8t),h8t.forEach(t),g8t.forEach(t),xBr=i(xOe),I9e=n(xOe,"SPAN",{});var p8t=s(I9e);$Br=r(p8t,"FlaxAutoModelForSeq2SeqLM"),p8t.forEach(t),xOe.forEach(t),EDe=i(f),pr=n(f,"DIV",{class:!0});var Jl=s(pr);T(ox.$$.fragment,Jl),kBr=i(Jl),Vc=n(Jl,"P",{});var coe=s(Vc);SBr=r(coe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),pK=n(coe,"A",{href:!0});var _8t=s(pK);RBr=r(_8t,"from_pretrained()"),_8t.forEach(t),PBr=r(coe," class method or the "),_K=n(coe,"A",{href:!0});var u8t=s(_K);BBr=r(u8t,"from_config()"),u8t.forEach(t),IBr=r(coe,` class
method.`),coe.forEach(t),NBr=i(Jl),rx=n(Jl,"P",{});var $Oe=s(rx);qBr=r($Oe,"This class cannot be instantiated directly using "),N9e=n($Oe,"CODE",{});var b8t=s(N9e);jBr=r(b8t,"__init__()"),b8t.forEach(t),DBr=r($Oe," (throws an error)."),$Oe.forEach(t),GBr=i(Jl),zt=n(Jl,"DIV",{class:!0});var _A=s(zt);T(tx.$$.fragment,_A),OBr=i(_A),q9e=n(_A,"P",{});var v8t=s(q9e);VBr=r(v8t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),v8t.forEach(t),XBr=i(_A),Xc=n(_A,"P",{});var foe=s(Xc);zBr=r(foe,`Note:
Loading a model from its configuration file does `),j9e=n(foe,"STRONG",{});var F8t=s(j9e);WBr=r(F8t,"not"),F8t.forEach(t),QBr=r(foe,` load the model weights. It only affects the
model\u2019s configuration. Use `),uK=n(foe,"A",{href:!0});var T8t=s(uK);HBr=r(T8t,"from_pretrained()"),T8t.forEach(t),UBr=r(foe," to load the model weights."),foe.forEach(t),JBr=i(_A),T(YE.$$.fragment,_A),_A.forEach(t),YBr=i(Jl),Vr=n(Jl,"DIV",{class:!0});var Yl=s(Vr);T(ax.$$.fragment,Yl),KBr=i(Yl),D9e=n(Yl,"P",{});var M8t=s(D9e);ZBr=r(M8t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),M8t.forEach(t),eIr=i(Yl),bn=n(Yl,"P",{});var uA=s(bn);oIr=r(uA,"The model class to instantiate is selected based on the "),G9e=n(uA,"CODE",{});var E8t=s(G9e);rIr=r(E8t,"model_type"),E8t.forEach(t),tIr=r(uA,` property of the config object (either
passed as an argument or loaded from `),O9e=n(uA,"CODE",{});var C8t=s(O9e);aIr=r(C8t,"pretrained_model_name_or_path"),C8t.forEach(t),nIr=r(uA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V9e=n(uA,"CODE",{});var w8t=s(V9e);sIr=r(w8t,"pretrained_model_name_or_path"),w8t.forEach(t),lIr=r(uA,":"),uA.forEach(t),iIr=i(Yl),Pe=n(Yl,"UL",{});var ze=s(Pe);KE=n(ze,"LI",{});var DNe=s(KE);X9e=n(DNe,"STRONG",{});var A8t=s(X9e);dIr=r(A8t,"bart"),A8t.forEach(t),cIr=r(DNe," \u2014 "),bK=n(DNe,"A",{href:!0});var y8t=s(bK);fIr=r(y8t,"FlaxBartForConditionalGeneration"),y8t.forEach(t),mIr=r(DNe," (BART model)"),DNe.forEach(t),gIr=i(ze),ZE=n(ze,"LI",{});var GNe=s(ZE);z9e=n(GNe,"STRONG",{});var L8t=s(z9e);hIr=r(L8t,"blenderbot"),L8t.forEach(t),pIr=r(GNe," \u2014 "),vK=n(GNe,"A",{href:!0});var x8t=s(vK);_Ir=r(x8t,"FlaxBlenderbotForConditionalGeneration"),x8t.forEach(t),uIr=r(GNe," (Blenderbot model)"),GNe.forEach(t),bIr=i(ze),eC=n(ze,"LI",{});var ONe=s(eC);W9e=n(ONe,"STRONG",{});var $8t=s(W9e);vIr=r($8t,"blenderbot-small"),$8t.forEach(t),FIr=r(ONe," \u2014 "),FK=n(ONe,"A",{href:!0});var k8t=s(FK);TIr=r(k8t,"FlaxBlenderbotSmallForConditionalGeneration"),k8t.forEach(t),MIr=r(ONe," (BlenderbotSmall model)"),ONe.forEach(t),EIr=i(ze),oC=n(ze,"LI",{});var VNe=s(oC);Q9e=n(VNe,"STRONG",{});var S8t=s(Q9e);CIr=r(S8t,"encoder-decoder"),S8t.forEach(t),wIr=r(VNe," \u2014 "),TK=n(VNe,"A",{href:!0});var R8t=s(TK);AIr=r(R8t,"FlaxEncoderDecoderModel"),R8t.forEach(t),yIr=r(VNe," (Encoder decoder model)"),VNe.forEach(t),LIr=i(ze),rC=n(ze,"LI",{});var XNe=s(rC);H9e=n(XNe,"STRONG",{});var P8t=s(H9e);xIr=r(P8t,"marian"),P8t.forEach(t),$Ir=r(XNe," \u2014 "),MK=n(XNe,"A",{href:!0});var B8t=s(MK);kIr=r(B8t,"FlaxMarianMTModel"),B8t.forEach(t),SIr=r(XNe," (Marian model)"),XNe.forEach(t),RIr=i(ze),tC=n(ze,"LI",{});var zNe=s(tC);U9e=n(zNe,"STRONG",{});var I8t=s(U9e);PIr=r(I8t,"mbart"),I8t.forEach(t),BIr=r(zNe," \u2014 "),EK=n(zNe,"A",{href:!0});var N8t=s(EK);IIr=r(N8t,"FlaxMBartForConditionalGeneration"),N8t.forEach(t),NIr=r(zNe," (mBART model)"),zNe.forEach(t),qIr=i(ze),aC=n(ze,"LI",{});var WNe=s(aC);J9e=n(WNe,"STRONG",{});var q8t=s(J9e);jIr=r(q8t,"mt5"),q8t.forEach(t),DIr=r(WNe," \u2014 "),CK=n(WNe,"A",{href:!0});var j8t=s(CK);GIr=r(j8t,"FlaxMT5ForConditionalGeneration"),j8t.forEach(t),OIr=r(WNe," (MT5 model)"),WNe.forEach(t),VIr=i(ze),nC=n(ze,"LI",{});var QNe=s(nC);Y9e=n(QNe,"STRONG",{});var D8t=s(Y9e);XIr=r(D8t,"pegasus"),D8t.forEach(t),zIr=r(QNe," \u2014 "),wK=n(QNe,"A",{href:!0});var G8t=s(wK);WIr=r(G8t,"FlaxPegasusForConditionalGeneration"),G8t.forEach(t),QIr=r(QNe," (Pegasus model)"),QNe.forEach(t),HIr=i(ze),sC=n(ze,"LI",{});var HNe=s(sC);K9e=n(HNe,"STRONG",{});var O8t=s(K9e);UIr=r(O8t,"t5"),O8t.forEach(t),JIr=r(HNe," \u2014 "),AK=n(HNe,"A",{href:!0});var V8t=s(AK);YIr=r(V8t,"FlaxT5ForConditionalGeneration"),V8t.forEach(t),KIr=r(HNe," (T5 model)"),HNe.forEach(t),ze.forEach(t),ZIr=i(Yl),T(lC.$$.fragment,Yl),Yl.forEach(t),Jl.forEach(t),CDe=i(f),zc=n(f,"H2",{class:!0});var kOe=s(zc);iC=n(kOe,"A",{id:!0,class:!0,href:!0});var X8t=s(iC);Z9e=n(X8t,"SPAN",{});var z8t=s(Z9e);T(nx.$$.fragment,z8t),z8t.forEach(t),X8t.forEach(t),eNr=i(kOe),eMe=n(kOe,"SPAN",{});var W8t=s(eMe);oNr=r(W8t,"FlaxAutoModelForSequenceClassification"),W8t.forEach(t),kOe.forEach(t),wDe=i(f),_r=n(f,"DIV",{class:!0});var Kl=s(_r);T(sx.$$.fragment,Kl),rNr=i(Kl),Wc=n(Kl,"P",{});var moe=s(Wc);tNr=r(moe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),yK=n(moe,"A",{href:!0});var Q8t=s(yK);aNr=r(Q8t,"from_pretrained()"),Q8t.forEach(t),nNr=r(moe," class method or the "),LK=n(moe,"A",{href:!0});var H8t=s(LK);sNr=r(H8t,"from_config()"),H8t.forEach(t),lNr=r(moe,` class
method.`),moe.forEach(t),iNr=i(Kl),lx=n(Kl,"P",{});var SOe=s(lx);dNr=r(SOe,"This class cannot be instantiated directly using "),oMe=n(SOe,"CODE",{});var U8t=s(oMe);cNr=r(U8t,"__init__()"),U8t.forEach(t),fNr=r(SOe," (throws an error)."),SOe.forEach(t),mNr=i(Kl),Wt=n(Kl,"DIV",{class:!0});var bA=s(Wt);T(ix.$$.fragment,bA),gNr=i(bA),rMe=n(bA,"P",{});var J8t=s(rMe);hNr=r(J8t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),J8t.forEach(t),pNr=i(bA),Qc=n(bA,"P",{});var goe=s(Qc);_Nr=r(goe,`Note:
Loading a model from its configuration file does `),tMe=n(goe,"STRONG",{});var Y8t=s(tMe);uNr=r(Y8t,"not"),Y8t.forEach(t),bNr=r(goe,` load the model weights. It only affects the
model\u2019s configuration. Use `),xK=n(goe,"A",{href:!0});var K8t=s(xK);vNr=r(K8t,"from_pretrained()"),K8t.forEach(t),FNr=r(goe," to load the model weights."),goe.forEach(t),TNr=i(bA),T(dC.$$.fragment,bA),bA.forEach(t),MNr=i(Kl),Xr=n(Kl,"DIV",{class:!0});var Zl=s(Xr);T(dx.$$.fragment,Zl),ENr=i(Zl),aMe=n(Zl,"P",{});var Z8t=s(aMe);CNr=r(Z8t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Z8t.forEach(t),wNr=i(Zl),vn=n(Zl,"P",{});var vA=s(vn);ANr=r(vA,"The model class to instantiate is selected based on the "),nMe=n(vA,"CODE",{});var ext=s(nMe);yNr=r(ext,"model_type"),ext.forEach(t),LNr=r(vA,` property of the config object (either
passed as an argument or loaded from `),sMe=n(vA,"CODE",{});var oxt=s(sMe);xNr=r(oxt,"pretrained_model_name_or_path"),oxt.forEach(t),$Nr=r(vA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lMe=n(vA,"CODE",{});var rxt=s(lMe);kNr=r(rxt,"pretrained_model_name_or_path"),rxt.forEach(t),SNr=r(vA,":"),vA.forEach(t),RNr=i(Zl),$e=n(Zl,"UL",{});var qe=s($e);cC=n(qe,"LI",{});var UNe=s(cC);iMe=n(UNe,"STRONG",{});var txt=s(iMe);PNr=r(txt,"albert"),txt.forEach(t),BNr=r(UNe," \u2014 "),$K=n(UNe,"A",{href:!0});var axt=s($K);INr=r(axt,"FlaxAlbertForSequenceClassification"),axt.forEach(t),NNr=r(UNe," (ALBERT model)"),UNe.forEach(t),qNr=i(qe),fC=n(qe,"LI",{});var JNe=s(fC);dMe=n(JNe,"STRONG",{});var nxt=s(dMe);jNr=r(nxt,"bart"),nxt.forEach(t),DNr=r(JNe," \u2014 "),kK=n(JNe,"A",{href:!0});var sxt=s(kK);GNr=r(sxt,"FlaxBartForSequenceClassification"),sxt.forEach(t),ONr=r(JNe," (BART model)"),JNe.forEach(t),VNr=i(qe),mC=n(qe,"LI",{});var YNe=s(mC);cMe=n(YNe,"STRONG",{});var lxt=s(cMe);XNr=r(lxt,"bert"),lxt.forEach(t),zNr=r(YNe," \u2014 "),SK=n(YNe,"A",{href:!0});var ixt=s(SK);WNr=r(ixt,"FlaxBertForSequenceClassification"),ixt.forEach(t),QNr=r(YNe," (BERT model)"),YNe.forEach(t),HNr=i(qe),gC=n(qe,"LI",{});var KNe=s(gC);fMe=n(KNe,"STRONG",{});var dxt=s(fMe);UNr=r(dxt,"big_bird"),dxt.forEach(t),JNr=r(KNe," \u2014 "),RK=n(KNe,"A",{href:!0});var cxt=s(RK);YNr=r(cxt,"FlaxBigBirdForSequenceClassification"),cxt.forEach(t),KNr=r(KNe," (BigBird model)"),KNe.forEach(t),ZNr=i(qe),hC=n(qe,"LI",{});var ZNe=s(hC);mMe=n(ZNe,"STRONG",{});var fxt=s(mMe);eqr=r(fxt,"distilbert"),fxt.forEach(t),oqr=r(ZNe," \u2014 "),PK=n(ZNe,"A",{href:!0});var mxt=s(PK);rqr=r(mxt,"FlaxDistilBertForSequenceClassification"),mxt.forEach(t),tqr=r(ZNe," (DistilBERT model)"),ZNe.forEach(t),aqr=i(qe),pC=n(qe,"LI",{});var eqe=s(pC);gMe=n(eqe,"STRONG",{});var gxt=s(gMe);nqr=r(gxt,"electra"),gxt.forEach(t),sqr=r(eqe," \u2014 "),BK=n(eqe,"A",{href:!0});var hxt=s(BK);lqr=r(hxt,"FlaxElectraForSequenceClassification"),hxt.forEach(t),iqr=r(eqe," (ELECTRA model)"),eqe.forEach(t),dqr=i(qe),_C=n(qe,"LI",{});var oqe=s(_C);hMe=n(oqe,"STRONG",{});var pxt=s(hMe);cqr=r(pxt,"mbart"),pxt.forEach(t),fqr=r(oqe," \u2014 "),IK=n(oqe,"A",{href:!0});var _xt=s(IK);mqr=r(_xt,"FlaxMBartForSequenceClassification"),_xt.forEach(t),gqr=r(oqe," (mBART model)"),oqe.forEach(t),hqr=i(qe),uC=n(qe,"LI",{});var rqe=s(uC);pMe=n(rqe,"STRONG",{});var uxt=s(pMe);pqr=r(uxt,"roberta"),uxt.forEach(t),_qr=r(rqe," \u2014 "),NK=n(rqe,"A",{href:!0});var bxt=s(NK);uqr=r(bxt,"FlaxRobertaForSequenceClassification"),bxt.forEach(t),bqr=r(rqe," (RoBERTa model)"),rqe.forEach(t),vqr=i(qe),bC=n(qe,"LI",{});var tqe=s(bC);_Me=n(tqe,"STRONG",{});var vxt=s(_Me);Fqr=r(vxt,"roformer"),vxt.forEach(t),Tqr=r(tqe," \u2014 "),qK=n(tqe,"A",{href:!0});var Fxt=s(qK);Mqr=r(Fxt,"FlaxRoFormerForSequenceClassification"),Fxt.forEach(t),Eqr=r(tqe," (RoFormer model)"),tqe.forEach(t),Cqr=i(qe),vC=n(qe,"LI",{});var aqe=s(vC);uMe=n(aqe,"STRONG",{});var Txt=s(uMe);wqr=r(Txt,"xlm-roberta"),Txt.forEach(t),Aqr=r(aqe," \u2014 "),jK=n(aqe,"A",{href:!0});var Mxt=s(jK);yqr=r(Mxt,"FlaxXLMRobertaForSequenceClassification"),Mxt.forEach(t),Lqr=r(aqe," (XLM-RoBERTa model)"),aqe.forEach(t),qe.forEach(t),xqr=i(Zl),T(FC.$$.fragment,Zl),Zl.forEach(t),Kl.forEach(t),ADe=i(f),Hc=n(f,"H2",{class:!0});var ROe=s(Hc);TC=n(ROe,"A",{id:!0,class:!0,href:!0});var Ext=s(TC);bMe=n(Ext,"SPAN",{});var Cxt=s(bMe);T(cx.$$.fragment,Cxt),Cxt.forEach(t),Ext.forEach(t),$qr=i(ROe),vMe=n(ROe,"SPAN",{});var wxt=s(vMe);kqr=r(wxt,"FlaxAutoModelForQuestionAnswering"),wxt.forEach(t),ROe.forEach(t),yDe=i(f),ur=n(f,"DIV",{class:!0});var ei=s(ur);T(fx.$$.fragment,ei),Sqr=i(ei),Uc=n(ei,"P",{});var hoe=s(Uc);Rqr=r(hoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),DK=n(hoe,"A",{href:!0});var Axt=s(DK);Pqr=r(Axt,"from_pretrained()"),Axt.forEach(t),Bqr=r(hoe," class method or the "),GK=n(hoe,"A",{href:!0});var yxt=s(GK);Iqr=r(yxt,"from_config()"),yxt.forEach(t),Nqr=r(hoe,` class
method.`),hoe.forEach(t),qqr=i(ei),mx=n(ei,"P",{});var POe=s(mx);jqr=r(POe,"This class cannot be instantiated directly using "),FMe=n(POe,"CODE",{});var Lxt=s(FMe);Dqr=r(Lxt,"__init__()"),Lxt.forEach(t),Gqr=r(POe," (throws an error)."),POe.forEach(t),Oqr=i(ei),Qt=n(ei,"DIV",{class:!0});var FA=s(Qt);T(gx.$$.fragment,FA),Vqr=i(FA),TMe=n(FA,"P",{});var xxt=s(TMe);Xqr=r(xxt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),xxt.forEach(t),zqr=i(FA),Jc=n(FA,"P",{});var poe=s(Jc);Wqr=r(poe,`Note:
Loading a model from its configuration file does `),MMe=n(poe,"STRONG",{});var $xt=s(MMe);Qqr=r($xt,"not"),$xt.forEach(t),Hqr=r(poe,` load the model weights. It only affects the
model\u2019s configuration. Use `),OK=n(poe,"A",{href:!0});var kxt=s(OK);Uqr=r(kxt,"from_pretrained()"),kxt.forEach(t),Jqr=r(poe," to load the model weights."),poe.forEach(t),Yqr=i(FA),T(MC.$$.fragment,FA),FA.forEach(t),Kqr=i(ei),zr=n(ei,"DIV",{class:!0});var oi=s(zr);T(hx.$$.fragment,oi),Zqr=i(oi),EMe=n(oi,"P",{});var Sxt=s(EMe);ejr=r(Sxt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Sxt.forEach(t),ojr=i(oi),Fn=n(oi,"P",{});var TA=s(Fn);rjr=r(TA,"The model class to instantiate is selected based on the "),CMe=n(TA,"CODE",{});var Rxt=s(CMe);tjr=r(Rxt,"model_type"),Rxt.forEach(t),ajr=r(TA,` property of the config object (either
passed as an argument or loaded from `),wMe=n(TA,"CODE",{});var Pxt=s(wMe);njr=r(Pxt,"pretrained_model_name_or_path"),Pxt.forEach(t),sjr=r(TA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),AMe=n(TA,"CODE",{});var Bxt=s(AMe);ljr=r(Bxt,"pretrained_model_name_or_path"),Bxt.forEach(t),ijr=r(TA,":"),TA.forEach(t),djr=i(oi),ke=n(oi,"UL",{});var je=s(ke);EC=n(je,"LI",{});var nqe=s(EC);yMe=n(nqe,"STRONG",{});var Ixt=s(yMe);cjr=r(Ixt,"albert"),Ixt.forEach(t),fjr=r(nqe," \u2014 "),VK=n(nqe,"A",{href:!0});var Nxt=s(VK);mjr=r(Nxt,"FlaxAlbertForQuestionAnswering"),Nxt.forEach(t),gjr=r(nqe," (ALBERT model)"),nqe.forEach(t),hjr=i(je),CC=n(je,"LI",{});var sqe=s(CC);LMe=n(sqe,"STRONG",{});var qxt=s(LMe);pjr=r(qxt,"bart"),qxt.forEach(t),_jr=r(sqe," \u2014 "),XK=n(sqe,"A",{href:!0});var jxt=s(XK);ujr=r(jxt,"FlaxBartForQuestionAnswering"),jxt.forEach(t),bjr=r(sqe," (BART model)"),sqe.forEach(t),vjr=i(je),wC=n(je,"LI",{});var lqe=s(wC);xMe=n(lqe,"STRONG",{});var Dxt=s(xMe);Fjr=r(Dxt,"bert"),Dxt.forEach(t),Tjr=r(lqe," \u2014 "),zK=n(lqe,"A",{href:!0});var Gxt=s(zK);Mjr=r(Gxt,"FlaxBertForQuestionAnswering"),Gxt.forEach(t),Ejr=r(lqe," (BERT model)"),lqe.forEach(t),Cjr=i(je),AC=n(je,"LI",{});var iqe=s(AC);$Me=n(iqe,"STRONG",{});var Oxt=s($Me);wjr=r(Oxt,"big_bird"),Oxt.forEach(t),Ajr=r(iqe," \u2014 "),WK=n(iqe,"A",{href:!0});var Vxt=s(WK);yjr=r(Vxt,"FlaxBigBirdForQuestionAnswering"),Vxt.forEach(t),Ljr=r(iqe," (BigBird model)"),iqe.forEach(t),xjr=i(je),yC=n(je,"LI",{});var dqe=s(yC);kMe=n(dqe,"STRONG",{});var Xxt=s(kMe);$jr=r(Xxt,"distilbert"),Xxt.forEach(t),kjr=r(dqe," \u2014 "),QK=n(dqe,"A",{href:!0});var zxt=s(QK);Sjr=r(zxt,"FlaxDistilBertForQuestionAnswering"),zxt.forEach(t),Rjr=r(dqe," (DistilBERT model)"),dqe.forEach(t),Pjr=i(je),LC=n(je,"LI",{});var cqe=s(LC);SMe=n(cqe,"STRONG",{});var Wxt=s(SMe);Bjr=r(Wxt,"electra"),Wxt.forEach(t),Ijr=r(cqe," \u2014 "),HK=n(cqe,"A",{href:!0});var Qxt=s(HK);Njr=r(Qxt,"FlaxElectraForQuestionAnswering"),Qxt.forEach(t),qjr=r(cqe," (ELECTRA model)"),cqe.forEach(t),jjr=i(je),xC=n(je,"LI",{});var fqe=s(xC);RMe=n(fqe,"STRONG",{});var Hxt=s(RMe);Djr=r(Hxt,"mbart"),Hxt.forEach(t),Gjr=r(fqe," \u2014 "),UK=n(fqe,"A",{href:!0});var Uxt=s(UK);Ojr=r(Uxt,"FlaxMBartForQuestionAnswering"),Uxt.forEach(t),Vjr=r(fqe," (mBART model)"),fqe.forEach(t),Xjr=i(je),$C=n(je,"LI",{});var mqe=s($C);PMe=n(mqe,"STRONG",{});var Jxt=s(PMe);zjr=r(Jxt,"roberta"),Jxt.forEach(t),Wjr=r(mqe," \u2014 "),JK=n(mqe,"A",{href:!0});var Yxt=s(JK);Qjr=r(Yxt,"FlaxRobertaForQuestionAnswering"),Yxt.forEach(t),Hjr=r(mqe," (RoBERTa model)"),mqe.forEach(t),Ujr=i(je),kC=n(je,"LI",{});var gqe=s(kC);BMe=n(gqe,"STRONG",{});var Kxt=s(BMe);Jjr=r(Kxt,"roformer"),Kxt.forEach(t),Yjr=r(gqe," \u2014 "),YK=n(gqe,"A",{href:!0});var Zxt=s(YK);Kjr=r(Zxt,"FlaxRoFormerForQuestionAnswering"),Zxt.forEach(t),Zjr=r(gqe," (RoFormer model)"),gqe.forEach(t),eDr=i(je),SC=n(je,"LI",{});var hqe=s(SC);IMe=n(hqe,"STRONG",{});var e$t=s(IMe);oDr=r(e$t,"xlm-roberta"),e$t.forEach(t),rDr=r(hqe," \u2014 "),KK=n(hqe,"A",{href:!0});var o$t=s(KK);tDr=r(o$t,"FlaxXLMRobertaForQuestionAnswering"),o$t.forEach(t),aDr=r(hqe," (XLM-RoBERTa model)"),hqe.forEach(t),je.forEach(t),nDr=i(oi),T(RC.$$.fragment,oi),oi.forEach(t),ei.forEach(t),LDe=i(f),Yc=n(f,"H2",{class:!0});var BOe=s(Yc);PC=n(BOe,"A",{id:!0,class:!0,href:!0});var r$t=s(PC);NMe=n(r$t,"SPAN",{});var t$t=s(NMe);T(px.$$.fragment,t$t),t$t.forEach(t),r$t.forEach(t),sDr=i(BOe),qMe=n(BOe,"SPAN",{});var a$t=s(qMe);lDr=r(a$t,"FlaxAutoModelForTokenClassification"),a$t.forEach(t),BOe.forEach(t),xDe=i(f),br=n(f,"DIV",{class:!0});var ri=s(br);T(_x.$$.fragment,ri),iDr=i(ri),Kc=n(ri,"P",{});var _oe=s(Kc);dDr=r(_oe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),ZK=n(_oe,"A",{href:!0});var n$t=s(ZK);cDr=r(n$t,"from_pretrained()"),n$t.forEach(t),fDr=r(_oe," class method or the "),eZ=n(_oe,"A",{href:!0});var s$t=s(eZ);mDr=r(s$t,"from_config()"),s$t.forEach(t),gDr=r(_oe,` class
method.`),_oe.forEach(t),hDr=i(ri),ux=n(ri,"P",{});var IOe=s(ux);pDr=r(IOe,"This class cannot be instantiated directly using "),jMe=n(IOe,"CODE",{});var l$t=s(jMe);_Dr=r(l$t,"__init__()"),l$t.forEach(t),uDr=r(IOe," (throws an error)."),IOe.forEach(t),bDr=i(ri),Ht=n(ri,"DIV",{class:!0});var MA=s(Ht);T(bx.$$.fragment,MA),vDr=i(MA),DMe=n(MA,"P",{});var i$t=s(DMe);FDr=r(i$t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),i$t.forEach(t),TDr=i(MA),Zc=n(MA,"P",{});var uoe=s(Zc);MDr=r(uoe,`Note:
Loading a model from its configuration file does `),GMe=n(uoe,"STRONG",{});var d$t=s(GMe);EDr=r(d$t,"not"),d$t.forEach(t),CDr=r(uoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),oZ=n(uoe,"A",{href:!0});var c$t=s(oZ);wDr=r(c$t,"from_pretrained()"),c$t.forEach(t),ADr=r(uoe," to load the model weights."),uoe.forEach(t),yDr=i(MA),T(BC.$$.fragment,MA),MA.forEach(t),LDr=i(ri),Wr=n(ri,"DIV",{class:!0});var ti=s(Wr);T(vx.$$.fragment,ti),xDr=i(ti),OMe=n(ti,"P",{});var f$t=s(OMe);$Dr=r(f$t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),f$t.forEach(t),kDr=i(ti),Tn=n(ti,"P",{});var EA=s(Tn);SDr=r(EA,"The model class to instantiate is selected based on the "),VMe=n(EA,"CODE",{});var m$t=s(VMe);RDr=r(m$t,"model_type"),m$t.forEach(t),PDr=r(EA,` property of the config object (either
passed as an argument or loaded from `),XMe=n(EA,"CODE",{});var g$t=s(XMe);BDr=r(g$t,"pretrained_model_name_or_path"),g$t.forEach(t),IDr=r(EA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zMe=n(EA,"CODE",{});var h$t=s(zMe);NDr=r(h$t,"pretrained_model_name_or_path"),h$t.forEach(t),qDr=r(EA,":"),EA.forEach(t),jDr=i(ti),Ge=n(ti,"UL",{});var Fo=s(Ge);IC=n(Fo,"LI",{});var pqe=s(IC);WMe=n(pqe,"STRONG",{});var p$t=s(WMe);DDr=r(p$t,"albert"),p$t.forEach(t),GDr=r(pqe," \u2014 "),rZ=n(pqe,"A",{href:!0});var _$t=s(rZ);ODr=r(_$t,"FlaxAlbertForTokenClassification"),_$t.forEach(t),VDr=r(pqe," (ALBERT model)"),pqe.forEach(t),XDr=i(Fo),NC=n(Fo,"LI",{});var _qe=s(NC);QMe=n(_qe,"STRONG",{});var u$t=s(QMe);zDr=r(u$t,"bert"),u$t.forEach(t),WDr=r(_qe," \u2014 "),tZ=n(_qe,"A",{href:!0});var b$t=s(tZ);QDr=r(b$t,"FlaxBertForTokenClassification"),b$t.forEach(t),HDr=r(_qe," (BERT model)"),_qe.forEach(t),UDr=i(Fo),qC=n(Fo,"LI",{});var uqe=s(qC);HMe=n(uqe,"STRONG",{});var v$t=s(HMe);JDr=r(v$t,"big_bird"),v$t.forEach(t),YDr=r(uqe," \u2014 "),aZ=n(uqe,"A",{href:!0});var F$t=s(aZ);KDr=r(F$t,"FlaxBigBirdForTokenClassification"),F$t.forEach(t),ZDr=r(uqe," (BigBird model)"),uqe.forEach(t),eGr=i(Fo),jC=n(Fo,"LI",{});var bqe=s(jC);UMe=n(bqe,"STRONG",{});var T$t=s(UMe);oGr=r(T$t,"distilbert"),T$t.forEach(t),rGr=r(bqe," \u2014 "),nZ=n(bqe,"A",{href:!0});var M$t=s(nZ);tGr=r(M$t,"FlaxDistilBertForTokenClassification"),M$t.forEach(t),aGr=r(bqe," (DistilBERT model)"),bqe.forEach(t),nGr=i(Fo),DC=n(Fo,"LI",{});var vqe=s(DC);JMe=n(vqe,"STRONG",{});var E$t=s(JMe);sGr=r(E$t,"electra"),E$t.forEach(t),lGr=r(vqe," \u2014 "),sZ=n(vqe,"A",{href:!0});var C$t=s(sZ);iGr=r(C$t,"FlaxElectraForTokenClassification"),C$t.forEach(t),dGr=r(vqe," (ELECTRA model)"),vqe.forEach(t),cGr=i(Fo),GC=n(Fo,"LI",{});var Fqe=s(GC);YMe=n(Fqe,"STRONG",{});var w$t=s(YMe);fGr=r(w$t,"roberta"),w$t.forEach(t),mGr=r(Fqe," \u2014 "),lZ=n(Fqe,"A",{href:!0});var A$t=s(lZ);gGr=r(A$t,"FlaxRobertaForTokenClassification"),A$t.forEach(t),hGr=r(Fqe," (RoBERTa model)"),Fqe.forEach(t),pGr=i(Fo),OC=n(Fo,"LI",{});var Tqe=s(OC);KMe=n(Tqe,"STRONG",{});var y$t=s(KMe);_Gr=r(y$t,"roformer"),y$t.forEach(t),uGr=r(Tqe," \u2014 "),iZ=n(Tqe,"A",{href:!0});var L$t=s(iZ);bGr=r(L$t,"FlaxRoFormerForTokenClassification"),L$t.forEach(t),vGr=r(Tqe," (RoFormer model)"),Tqe.forEach(t),FGr=i(Fo),VC=n(Fo,"LI",{});var Mqe=s(VC);ZMe=n(Mqe,"STRONG",{});var x$t=s(ZMe);TGr=r(x$t,"xlm-roberta"),x$t.forEach(t),MGr=r(Mqe," \u2014 "),dZ=n(Mqe,"A",{href:!0});var $$t=s(dZ);EGr=r($$t,"FlaxXLMRobertaForTokenClassification"),$$t.forEach(t),CGr=r(Mqe," (XLM-RoBERTa model)"),Mqe.forEach(t),Fo.forEach(t),wGr=i(ti),T(XC.$$.fragment,ti),ti.forEach(t),ri.forEach(t),$De=i(f),ef=n(f,"H2",{class:!0});var NOe=s(ef);zC=n(NOe,"A",{id:!0,class:!0,href:!0});var k$t=s(zC);e4e=n(k$t,"SPAN",{});var S$t=s(e4e);T(Fx.$$.fragment,S$t),S$t.forEach(t),k$t.forEach(t),AGr=i(NOe),o4e=n(NOe,"SPAN",{});var R$t=s(o4e);yGr=r(R$t,"FlaxAutoModelForMultipleChoice"),R$t.forEach(t),NOe.forEach(t),kDe=i(f),vr=n(f,"DIV",{class:!0});var ai=s(vr);T(Tx.$$.fragment,ai),LGr=i(ai),of=n(ai,"P",{});var boe=s(of);xGr=r(boe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),cZ=n(boe,"A",{href:!0});var P$t=s(cZ);$Gr=r(P$t,"from_pretrained()"),P$t.forEach(t),kGr=r(boe," class method or the "),fZ=n(boe,"A",{href:!0});var B$t=s(fZ);SGr=r(B$t,"from_config()"),B$t.forEach(t),RGr=r(boe,` class
method.`),boe.forEach(t),PGr=i(ai),Mx=n(ai,"P",{});var qOe=s(Mx);BGr=r(qOe,"This class cannot be instantiated directly using "),r4e=n(qOe,"CODE",{});var I$t=s(r4e);IGr=r(I$t,"__init__()"),I$t.forEach(t),NGr=r(qOe," (throws an error)."),qOe.forEach(t),qGr=i(ai),Ut=n(ai,"DIV",{class:!0});var CA=s(Ut);T(Ex.$$.fragment,CA),jGr=i(CA),t4e=n(CA,"P",{});var N$t=s(t4e);DGr=r(N$t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),N$t.forEach(t),GGr=i(CA),rf=n(CA,"P",{});var voe=s(rf);OGr=r(voe,`Note:
Loading a model from its configuration file does `),a4e=n(voe,"STRONG",{});var q$t=s(a4e);VGr=r(q$t,"not"),q$t.forEach(t),XGr=r(voe,` load the model weights. It only affects the
model\u2019s configuration. Use `),mZ=n(voe,"A",{href:!0});var j$t=s(mZ);zGr=r(j$t,"from_pretrained()"),j$t.forEach(t),WGr=r(voe," to load the model weights."),voe.forEach(t),QGr=i(CA),T(WC.$$.fragment,CA),CA.forEach(t),HGr=i(ai),Qr=n(ai,"DIV",{class:!0});var ni=s(Qr);T(Cx.$$.fragment,ni),UGr=i(ni),n4e=n(ni,"P",{});var D$t=s(n4e);JGr=r(D$t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),D$t.forEach(t),YGr=i(ni),Mn=n(ni,"P",{});var wA=s(Mn);KGr=r(wA,"The model class to instantiate is selected based on the "),s4e=n(wA,"CODE",{});var G$t=s(s4e);ZGr=r(G$t,"model_type"),G$t.forEach(t),eOr=r(wA,` property of the config object (either
passed as an argument or loaded from `),l4e=n(wA,"CODE",{});var O$t=s(l4e);oOr=r(O$t,"pretrained_model_name_or_path"),O$t.forEach(t),rOr=r(wA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i4e=n(wA,"CODE",{});var V$t=s(i4e);tOr=r(V$t,"pretrained_model_name_or_path"),V$t.forEach(t),aOr=r(wA,":"),wA.forEach(t),nOr=i(ni),Oe=n(ni,"UL",{});var To=s(Oe);QC=n(To,"LI",{});var Eqe=s(QC);d4e=n(Eqe,"STRONG",{});var X$t=s(d4e);sOr=r(X$t,"albert"),X$t.forEach(t),lOr=r(Eqe," \u2014 "),gZ=n(Eqe,"A",{href:!0});var z$t=s(gZ);iOr=r(z$t,"FlaxAlbertForMultipleChoice"),z$t.forEach(t),dOr=r(Eqe," (ALBERT model)"),Eqe.forEach(t),cOr=i(To),HC=n(To,"LI",{});var Cqe=s(HC);c4e=n(Cqe,"STRONG",{});var W$t=s(c4e);fOr=r(W$t,"bert"),W$t.forEach(t),mOr=r(Cqe," \u2014 "),hZ=n(Cqe,"A",{href:!0});var Q$t=s(hZ);gOr=r(Q$t,"FlaxBertForMultipleChoice"),Q$t.forEach(t),hOr=r(Cqe," (BERT model)"),Cqe.forEach(t),pOr=i(To),UC=n(To,"LI",{});var wqe=s(UC);f4e=n(wqe,"STRONG",{});var H$t=s(f4e);_Or=r(H$t,"big_bird"),H$t.forEach(t),uOr=r(wqe," \u2014 "),pZ=n(wqe,"A",{href:!0});var U$t=s(pZ);bOr=r(U$t,"FlaxBigBirdForMultipleChoice"),U$t.forEach(t),vOr=r(wqe," (BigBird model)"),wqe.forEach(t),FOr=i(To),JC=n(To,"LI",{});var Aqe=s(JC);m4e=n(Aqe,"STRONG",{});var J$t=s(m4e);TOr=r(J$t,"distilbert"),J$t.forEach(t),MOr=r(Aqe," \u2014 "),_Z=n(Aqe,"A",{href:!0});var Y$t=s(_Z);EOr=r(Y$t,"FlaxDistilBertForMultipleChoice"),Y$t.forEach(t),COr=r(Aqe," (DistilBERT model)"),Aqe.forEach(t),wOr=i(To),YC=n(To,"LI",{});var yqe=s(YC);g4e=n(yqe,"STRONG",{});var K$t=s(g4e);AOr=r(K$t,"electra"),K$t.forEach(t),yOr=r(yqe," \u2014 "),uZ=n(yqe,"A",{href:!0});var Z$t=s(uZ);LOr=r(Z$t,"FlaxElectraForMultipleChoice"),Z$t.forEach(t),xOr=r(yqe," (ELECTRA model)"),yqe.forEach(t),$Or=i(To),KC=n(To,"LI",{});var Lqe=s(KC);h4e=n(Lqe,"STRONG",{});var ekt=s(h4e);kOr=r(ekt,"roberta"),ekt.forEach(t),SOr=r(Lqe," \u2014 "),bZ=n(Lqe,"A",{href:!0});var okt=s(bZ);ROr=r(okt,"FlaxRobertaForMultipleChoice"),okt.forEach(t),POr=r(Lqe," (RoBERTa model)"),Lqe.forEach(t),BOr=i(To),ZC=n(To,"LI",{});var xqe=s(ZC);p4e=n(xqe,"STRONG",{});var rkt=s(p4e);IOr=r(rkt,"roformer"),rkt.forEach(t),NOr=r(xqe," \u2014 "),vZ=n(xqe,"A",{href:!0});var tkt=s(vZ);qOr=r(tkt,"FlaxRoFormerForMultipleChoice"),tkt.forEach(t),jOr=r(xqe," (RoFormer model)"),xqe.forEach(t),DOr=i(To),e0=n(To,"LI",{});var $qe=s(e0);_4e=n($qe,"STRONG",{});var akt=s(_4e);GOr=r(akt,"xlm-roberta"),akt.forEach(t),OOr=r($qe," \u2014 "),FZ=n($qe,"A",{href:!0});var nkt=s(FZ);VOr=r(nkt,"FlaxXLMRobertaForMultipleChoice"),nkt.forEach(t),XOr=r($qe," (XLM-RoBERTa model)"),$qe.forEach(t),To.forEach(t),zOr=i(ni),T(o0.$$.fragment,ni),ni.forEach(t),ai.forEach(t),SDe=i(f),tf=n(f,"H2",{class:!0});var jOe=s(tf);r0=n(jOe,"A",{id:!0,class:!0,href:!0});var skt=s(r0);u4e=n(skt,"SPAN",{});var lkt=s(u4e);T(wx.$$.fragment,lkt),lkt.forEach(t),skt.forEach(t),WOr=i(jOe),b4e=n(jOe,"SPAN",{});var ikt=s(b4e);QOr=r(ikt,"FlaxAutoModelForNextSentencePrediction"),ikt.forEach(t),jOe.forEach(t),RDe=i(f),Fr=n(f,"DIV",{class:!0});var si=s(Fr);T(Ax.$$.fragment,si),HOr=i(si),af=n(si,"P",{});var Foe=s(af);UOr=r(Foe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),TZ=n(Foe,"A",{href:!0});var dkt=s(TZ);JOr=r(dkt,"from_pretrained()"),dkt.forEach(t),YOr=r(Foe," class method or the "),MZ=n(Foe,"A",{href:!0});var ckt=s(MZ);KOr=r(ckt,"from_config()"),ckt.forEach(t),ZOr=r(Foe,` class
method.`),Foe.forEach(t),eVr=i(si),yx=n(si,"P",{});var DOe=s(yx);oVr=r(DOe,"This class cannot be instantiated directly using "),v4e=n(DOe,"CODE",{});var fkt=s(v4e);rVr=r(fkt,"__init__()"),fkt.forEach(t),tVr=r(DOe," (throws an error)."),DOe.forEach(t),aVr=i(si),Jt=n(si,"DIV",{class:!0});var AA=s(Jt);T(Lx.$$.fragment,AA),nVr=i(AA),F4e=n(AA,"P",{});var mkt=s(F4e);sVr=r(mkt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),mkt.forEach(t),lVr=i(AA),nf=n(AA,"P",{});var Toe=s(nf);iVr=r(Toe,`Note:
Loading a model from its configuration file does `),T4e=n(Toe,"STRONG",{});var gkt=s(T4e);dVr=r(gkt,"not"),gkt.forEach(t),cVr=r(Toe,` load the model weights. It only affects the
model\u2019s configuration. Use `),EZ=n(Toe,"A",{href:!0});var hkt=s(EZ);fVr=r(hkt,"from_pretrained()"),hkt.forEach(t),mVr=r(Toe," to load the model weights."),Toe.forEach(t),gVr=i(AA),T(t0.$$.fragment,AA),AA.forEach(t),hVr=i(si),Hr=n(si,"DIV",{class:!0});var li=s(Hr);T(xx.$$.fragment,li),pVr=i(li),M4e=n(li,"P",{});var pkt=s(M4e);_Vr=r(pkt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),pkt.forEach(t),uVr=i(li),En=n(li,"P",{});var yA=s(En);bVr=r(yA,"The model class to instantiate is selected based on the "),E4e=n(yA,"CODE",{});var _kt=s(E4e);vVr=r(_kt,"model_type"),_kt.forEach(t),FVr=r(yA,` property of the config object (either
passed as an argument or loaded from `),C4e=n(yA,"CODE",{});var ukt=s(C4e);TVr=r(ukt,"pretrained_model_name_or_path"),ukt.forEach(t),MVr=r(yA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w4e=n(yA,"CODE",{});var bkt=s(w4e);EVr=r(bkt,"pretrained_model_name_or_path"),bkt.forEach(t),CVr=r(yA,":"),yA.forEach(t),wVr=i(li),A4e=n(li,"UL",{});var vkt=s(A4e);a0=n(vkt,"LI",{});var kqe=s(a0);y4e=n(kqe,"STRONG",{});var Fkt=s(y4e);AVr=r(Fkt,"bert"),Fkt.forEach(t),yVr=r(kqe," \u2014 "),CZ=n(kqe,"A",{href:!0});var Tkt=s(CZ);LVr=r(Tkt,"FlaxBertForNextSentencePrediction"),Tkt.forEach(t),xVr=r(kqe," (BERT model)"),kqe.forEach(t),vkt.forEach(t),$Vr=i(li),T(n0.$$.fragment,li),li.forEach(t),si.forEach(t),PDe=i(f),sf=n(f,"H2",{class:!0});var GOe=s(sf);s0=n(GOe,"A",{id:!0,class:!0,href:!0});var Mkt=s(s0);L4e=n(Mkt,"SPAN",{});var Ekt=s(L4e);T($x.$$.fragment,Ekt),Ekt.forEach(t),Mkt.forEach(t),kVr=i(GOe),x4e=n(GOe,"SPAN",{});var Ckt=s(x4e);SVr=r(Ckt,"FlaxAutoModelForImageClassification"),Ckt.forEach(t),GOe.forEach(t),BDe=i(f),Tr=n(f,"DIV",{class:!0});var ii=s(Tr);T(kx.$$.fragment,ii),RVr=i(ii),lf=n(ii,"P",{});var Moe=s(lf);PVr=r(Moe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),wZ=n(Moe,"A",{href:!0});var wkt=s(wZ);BVr=r(wkt,"from_pretrained()"),wkt.forEach(t),IVr=r(Moe," class method or the "),AZ=n(Moe,"A",{href:!0});var Akt=s(AZ);NVr=r(Akt,"from_config()"),Akt.forEach(t),qVr=r(Moe,` class
method.`),Moe.forEach(t),jVr=i(ii),Sx=n(ii,"P",{});var OOe=s(Sx);DVr=r(OOe,"This class cannot be instantiated directly using "),$4e=n(OOe,"CODE",{});var ykt=s($4e);GVr=r(ykt,"__init__()"),ykt.forEach(t),OVr=r(OOe," (throws an error)."),OOe.forEach(t),VVr=i(ii),Yt=n(ii,"DIV",{class:!0});var LA=s(Yt);T(Rx.$$.fragment,LA),XVr=i(LA),k4e=n(LA,"P",{});var Lkt=s(k4e);zVr=r(Lkt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Lkt.forEach(t),WVr=i(LA),df=n(LA,"P",{});var Eoe=s(df);QVr=r(Eoe,`Note:
Loading a model from its configuration file does `),S4e=n(Eoe,"STRONG",{});var xkt=s(S4e);HVr=r(xkt,"not"),xkt.forEach(t),UVr=r(Eoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),yZ=n(Eoe,"A",{href:!0});var $kt=s(yZ);JVr=r($kt,"from_pretrained()"),$kt.forEach(t),YVr=r(Eoe," to load the model weights."),Eoe.forEach(t),KVr=i(LA),T(l0.$$.fragment,LA),LA.forEach(t),ZVr=i(ii),Ur=n(ii,"DIV",{class:!0});var di=s(Ur);T(Px.$$.fragment,di),eXr=i(di),R4e=n(di,"P",{});var kkt=s(R4e);oXr=r(kkt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),kkt.forEach(t),rXr=i(di),Cn=n(di,"P",{});var xA=s(Cn);tXr=r(xA,"The model class to instantiate is selected based on the "),P4e=n(xA,"CODE",{});var Skt=s(P4e);aXr=r(Skt,"model_type"),Skt.forEach(t),nXr=r(xA,` property of the config object (either
passed as an argument or loaded from `),B4e=n(xA,"CODE",{});var Rkt=s(B4e);sXr=r(Rkt,"pretrained_model_name_or_path"),Rkt.forEach(t),lXr=r(xA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I4e=n(xA,"CODE",{});var Pkt=s(I4e);iXr=r(Pkt,"pretrained_model_name_or_path"),Pkt.forEach(t),dXr=r(xA,":"),xA.forEach(t),cXr=i(di),Bx=n(di,"UL",{});var VOe=s(Bx);i0=n(VOe,"LI",{});var Sqe=s(i0);N4e=n(Sqe,"STRONG",{});var Bkt=s(N4e);fXr=r(Bkt,"beit"),Bkt.forEach(t),mXr=r(Sqe," \u2014 "),LZ=n(Sqe,"A",{href:!0});var Ikt=s(LZ);gXr=r(Ikt,"FlaxBeitForImageClassification"),Ikt.forEach(t),hXr=r(Sqe," (BEiT model)"),Sqe.forEach(t),pXr=i(VOe),d0=n(VOe,"LI",{});var Rqe=s(d0);q4e=n(Rqe,"STRONG",{});var Nkt=s(q4e);_Xr=r(Nkt,"vit"),Nkt.forEach(t),uXr=r(Rqe," \u2014 "),xZ=n(Rqe,"A",{href:!0});var qkt=s(xZ);bXr=r(qkt,"FlaxViTForImageClassification"),qkt.forEach(t),vXr=r(Rqe," (ViT model)"),Rqe.forEach(t),VOe.forEach(t),FXr=i(di),T(c0.$$.fragment,di),di.forEach(t),ii.forEach(t),IDe=i(f),cf=n(f,"H2",{class:!0});var XOe=s(cf);f0=n(XOe,"A",{id:!0,class:!0,href:!0});var jkt=s(f0);j4e=n(jkt,"SPAN",{});var Dkt=s(j4e);T(Ix.$$.fragment,Dkt),Dkt.forEach(t),jkt.forEach(t),TXr=i(XOe),D4e=n(XOe,"SPAN",{});var Gkt=s(D4e);MXr=r(Gkt,"FlaxAutoModelForVision2Seq"),Gkt.forEach(t),XOe.forEach(t),NDe=i(f),Mr=n(f,"DIV",{class:!0});var ci=s(Mr);T(Nx.$$.fragment,ci),EXr=i(ci),ff=n(ci,"P",{});var Coe=s(ff);CXr=r(Coe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),$Z=n(Coe,"A",{href:!0});var Okt=s($Z);wXr=r(Okt,"from_pretrained()"),Okt.forEach(t),AXr=r(Coe," class method or the "),kZ=n(Coe,"A",{href:!0});var Vkt=s(kZ);yXr=r(Vkt,"from_config()"),Vkt.forEach(t),LXr=r(Coe,` class
method.`),Coe.forEach(t),xXr=i(ci),qx=n(ci,"P",{});var zOe=s(qx);$Xr=r(zOe,"This class cannot be instantiated directly using "),G4e=n(zOe,"CODE",{});var Xkt=s(G4e);kXr=r(Xkt,"__init__()"),Xkt.forEach(t),SXr=r(zOe," (throws an error)."),zOe.forEach(t),RXr=i(ci),Kt=n(ci,"DIV",{class:!0});var $A=s(Kt);T(jx.$$.fragment,$A),PXr=i($A),O4e=n($A,"P",{});var zkt=s(O4e);BXr=r(zkt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),zkt.forEach(t),IXr=i($A),mf=n($A,"P",{});var woe=s(mf);NXr=r(woe,`Note:
Loading a model from its configuration file does `),V4e=n(woe,"STRONG",{});var Wkt=s(V4e);qXr=r(Wkt,"not"),Wkt.forEach(t),jXr=r(woe,` load the model weights. It only affects the
model\u2019s configuration. Use `),SZ=n(woe,"A",{href:!0});var Qkt=s(SZ);DXr=r(Qkt,"from_pretrained()"),Qkt.forEach(t),GXr=r(woe," to load the model weights."),woe.forEach(t),OXr=i($A),T(m0.$$.fragment,$A),$A.forEach(t),VXr=i(ci),Jr=n(ci,"DIV",{class:!0});var fi=s(Jr);T(Dx.$$.fragment,fi),XXr=i(fi),X4e=n(fi,"P",{});var Hkt=s(X4e);zXr=r(Hkt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Hkt.forEach(t),WXr=i(fi),wn=n(fi,"P",{});var kA=s(wn);QXr=r(kA,"The model class to instantiate is selected based on the "),z4e=n(kA,"CODE",{});var Ukt=s(z4e);HXr=r(Ukt,"model_type"),Ukt.forEach(t),UXr=r(kA,` property of the config object (either
passed as an argument or loaded from `),W4e=n(kA,"CODE",{});var Jkt=s(W4e);JXr=r(Jkt,"pretrained_model_name_or_path"),Jkt.forEach(t),YXr=r(kA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q4e=n(kA,"CODE",{});var Ykt=s(Q4e);KXr=r(Ykt,"pretrained_model_name_or_path"),Ykt.forEach(t),ZXr=r(kA,":"),kA.forEach(t),ezr=i(fi),H4e=n(fi,"UL",{});var Kkt=s(H4e);g0=n(Kkt,"LI",{});var Pqe=s(g0);U4e=n(Pqe,"STRONG",{});var Zkt=s(U4e);ozr=r(Zkt,"vision-encoder-decoder"),Zkt.forEach(t),rzr=r(Pqe," \u2014 "),RZ=n(Pqe,"A",{href:!0});var eSt=s(RZ);tzr=r(eSt,"FlaxVisionEncoderDecoderModel"),eSt.forEach(t),azr=r(Pqe," (Vision Encoder decoder model)"),Pqe.forEach(t),Kkt.forEach(t),nzr=i(fi),T(h0.$$.fragment,fi),fi.forEach(t),ci.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(aPt)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(yn,"href","/docs/transformers/pr_17593/en/model_doc/auto#transformers.AutoConfig"),c(xn,"href","/docs/transformers/pr_17593/en/model_doc/auto#transformers.AutoModel"),c($n,"href","/docs/transformers/pr_17593/en/model_doc/auto#transformers.AutoTokenizer"),c(bi,"href","/docs/transformers/pr_17593/en/model_doc/bert#transformers.BertModel"),c(Ff,"id","extending-the-auto-classes"),c(Ff,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ff,"href","#extending-the-auto-classes"),c(vi,"class","relative group"),c(Mf,"id","transformers.AutoConfig"),c(Mf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Mf,"href","#transformers.AutoConfig"),c(Fi,"class","relative group"),c(lk,"href","/docs/transformers/pr_17593/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(ik,"href","/docs/transformers/pr_17593/en/model_doc/albert#transformers.AlbertConfig"),c(dk,"href","/docs/transformers/pr_17593/en/model_doc/bart#transformers.BartConfig"),c(ck,"href","/docs/transformers/pr_17593/en/model_doc/beit#transformers.BeitConfig"),c(fk,"href","/docs/transformers/pr_17593/en/model_doc/bert#transformers.BertConfig"),c(mk,"href","/docs/transformers/pr_17593/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(gk,"href","/docs/transformers/pr_17593/en/model_doc/big_bird#transformers.BigBirdConfig"),c(hk,"href","/docs/transformers/pr_17593/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(pk,"href","/docs/transformers/pr_17593/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(_k,"href","/docs/transformers/pr_17593/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(uk,"href","/docs/transformers/pr_17593/en/model_doc/camembert#transformers.CamembertConfig"),c(bk,"href","/docs/transformers/pr_17593/en/model_doc/canine#transformers.CanineConfig"),c(vk,"href","/docs/transformers/pr_17593/en/model_doc/clip#transformers.CLIPConfig"),c(Fk,"href","/docs/transformers/pr_17593/en/model_doc/convbert#transformers.ConvBertConfig"),c(Tk,"href","/docs/transformers/pr_17593/en/model_doc/convnext#transformers.ConvNextConfig"),c(Mk,"href","/docs/transformers/pr_17593/en/model_doc/ctrl#transformers.CTRLConfig"),c(Ek,"href","/docs/transformers/pr_17593/en/model_doc/cvt#transformers.CvtConfig"),c(Ck,"href","/docs/transformers/pr_17593/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(wk,"href","/docs/transformers/pr_17593/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(Ak,"href","/docs/transformers/pr_17593/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(yk,"href","/docs/transformers/pr_17593/en/model_doc/deberta#transformers.DebertaConfig"),c(Lk,"href","/docs/transformers/pr_17593/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(xk,"href","/docs/transformers/pr_17593/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c($k,"href","/docs/transformers/pr_17593/en/model_doc/deit#transformers.DeiTConfig"),c(kk,"href","/docs/transformers/pr_17593/en/model_doc/detr#transformers.DetrConfig"),c(Sk,"href","/docs/transformers/pr_17593/en/model_doc/distilbert#transformers.DistilBertConfig"),c(Rk,"href","/docs/transformers/pr_17593/en/model_doc/dpr#transformers.DPRConfig"),c(Pk,"href","/docs/transformers/pr_17593/en/model_doc/dpt#transformers.DPTConfig"),c(Bk,"href","/docs/transformers/pr_17593/en/model_doc/electra#transformers.ElectraConfig"),c(Ik,"href","/docs/transformers/pr_17593/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(Nk,"href","/docs/transformers/pr_17593/en/model_doc/flaubert#transformers.FlaubertConfig"),c(qk,"href","/docs/transformers/pr_17593/en/model_doc/flava#transformers.FlavaConfig"),c(jk,"href","/docs/transformers/pr_17593/en/model_doc/fnet#transformers.FNetConfig"),c(Dk,"href","/docs/transformers/pr_17593/en/model_doc/fsmt#transformers.FSMTConfig"),c(Gk,"href","/docs/transformers/pr_17593/en/model_doc/funnel#transformers.FunnelConfig"),c(Ok,"href","/docs/transformers/pr_17593/en/model_doc/glpn#transformers.GLPNConfig"),c(Vk,"href","/docs/transformers/pr_17593/en/model_doc/gpt2#transformers.GPT2Config"),c(Xk,"href","/docs/transformers/pr_17593/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(zk,"href","/docs/transformers/pr_17593/en/model_doc/gpt_neox#transformers.GPTNeoXConfig"),c(Wk,"href","/docs/transformers/pr_17593/en/model_doc/gptj#transformers.GPTJConfig"),c(Qk,"href","/docs/transformers/pr_17593/en/model_doc/hubert#transformers.HubertConfig"),c(Hk,"href","/docs/transformers/pr_17593/en/model_doc/ibert#transformers.IBertConfig"),c(Uk,"href","/docs/transformers/pr_17593/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(Jk,"href","/docs/transformers/pr_17593/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(Yk,"href","/docs/transformers/pr_17593/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(Kk,"href","/docs/transformers/pr_17593/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),c(Zk,"href","/docs/transformers/pr_17593/en/model_doc/led#transformers.LEDConfig"),c(eS,"href","/docs/transformers/pr_17593/en/model_doc/levit#transformers.LevitConfig"),c(oS,"href","/docs/transformers/pr_17593/en/model_doc/longformer#transformers.LongformerConfig"),c(rS,"href","/docs/transformers/pr_17593/en/model_doc/luke#transformers.LukeConfig"),c(tS,"href","/docs/transformers/pr_17593/en/model_doc/lxmert#transformers.LxmertConfig"),c(aS,"href","/docs/transformers/pr_17593/en/model_doc/m2m_100#transformers.M2M100Config"),c(nS,"href","/docs/transformers/pr_17593/en/model_doc/marian#transformers.MarianConfig"),c(sS,"href","/docs/transformers/pr_17593/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(lS,"href","/docs/transformers/pr_17593/en/model_doc/mbart#transformers.MBartConfig"),c(iS,"href","/docs/transformers/pr_17593/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(dS,"href","/docs/transformers/pr_17593/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(cS,"href","/docs/transformers/pr_17593/en/model_doc/mpnet#transformers.MPNetConfig"),c(fS,"href","/docs/transformers/pr_17593/en/model_doc/mt5#transformers.MT5Config"),c(mS,"href","/docs/transformers/pr_17593/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(gS,"href","/docs/transformers/pr_17593/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(hS,"href","/docs/transformers/pr_17593/en/model_doc/opt#transformers.OPTConfig"),c(pS,"href","/docs/transformers/pr_17593/en/model_doc/pegasus#transformers.PegasusConfig"),c(_S,"href","/docs/transformers/pr_17593/en/model_doc/perceiver#transformers.PerceiverConfig"),c(uS,"href","/docs/transformers/pr_17593/en/model_doc/plbart#transformers.PLBartConfig"),c(bS,"href","/docs/transformers/pr_17593/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(vS,"href","/docs/transformers/pr_17593/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(FS,"href","/docs/transformers/pr_17593/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(TS,"href","/docs/transformers/pr_17593/en/model_doc/rag#transformers.RagConfig"),c(MS,"href","/docs/transformers/pr_17593/en/model_doc/realm#transformers.RealmConfig"),c(ES,"href","/docs/transformers/pr_17593/en/model_doc/reformer#transformers.ReformerConfig"),c(CS,"href","/docs/transformers/pr_17593/en/model_doc/regnet#transformers.RegNetConfig"),c(wS,"href","/docs/transformers/pr_17593/en/model_doc/rembert#transformers.RemBertConfig"),c(AS,"href","/docs/transformers/pr_17593/en/model_doc/resnet#transformers.ResNetConfig"),c(yS,"href","/docs/transformers/pr_17593/en/model_doc/retribert#transformers.RetriBertConfig"),c(LS,"href","/docs/transformers/pr_17593/en/model_doc/roberta#transformers.RobertaConfig"),c(xS,"href","/docs/transformers/pr_17593/en/model_doc/roformer#transformers.RoFormerConfig"),c($S,"href","/docs/transformers/pr_17593/en/model_doc/segformer#transformers.SegformerConfig"),c(kS,"href","/docs/transformers/pr_17593/en/model_doc/sew#transformers.SEWConfig"),c(SS,"href","/docs/transformers/pr_17593/en/model_doc/sew-d#transformers.SEWDConfig"),c(RS,"href","/docs/transformers/pr_17593/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(PS,"href","/docs/transformers/pr_17593/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(BS,"href","/docs/transformers/pr_17593/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(IS,"href","/docs/transformers/pr_17593/en/model_doc/splinter#transformers.SplinterConfig"),c(NS,"href","/docs/transformers/pr_17593/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(qS,"href","/docs/transformers/pr_17593/en/model_doc/swin#transformers.SwinConfig"),c(jS,"href","/docs/transformers/pr_17593/en/model_doc/t5#transformers.T5Config"),c(DS,"href","/docs/transformers/pr_17593/en/model_doc/tapas#transformers.TapasConfig"),c(GS,"href","/docs/transformers/pr_17593/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(OS,"href","/docs/transformers/pr_17593/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(VS,"href","/docs/transformers/pr_17593/en/model_doc/trocr#transformers.TrOCRConfig"),c(XS,"href","/docs/transformers/pr_17593/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(zS,"href","/docs/transformers/pr_17593/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(WS,"href","/docs/transformers/pr_17593/en/model_doc/van#transformers.VanConfig"),c(QS,"href","/docs/transformers/pr_17593/en/model_doc/vilt#transformers.ViltConfig"),c(HS,"href","/docs/transformers/pr_17593/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(US,"href","/docs/transformers/pr_17593/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(JS,"href","/docs/transformers/pr_17593/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(YS,"href","/docs/transformers/pr_17593/en/model_doc/vit#transformers.ViTConfig"),c(KS,"href","/docs/transformers/pr_17593/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(ZS,"href","/docs/transformers/pr_17593/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(eR,"href","/docs/transformers/pr_17593/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(oR,"href","/docs/transformers/pr_17593/en/model_doc/wavlm#transformers.WavLMConfig"),c(rR,"href","/docs/transformers/pr_17593/en/model_doc/xglm#transformers.XGLMConfig"),c(tR,"href","/docs/transformers/pr_17593/en/model_doc/xlm#transformers.XLMConfig"),c(aR,"href","/docs/transformers/pr_17593/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(nR,"href","/docs/transformers/pr_17593/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(sR,"href","/docs/transformers/pr_17593/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(lR,"href","/docs/transformers/pr_17593/en/model_doc/xlnet#transformers.XLNetConfig"),c(iR,"href","/docs/transformers/pr_17593/en/model_doc/yolos#transformers.YolosConfig"),c(dR,"href","/docs/transformers/pr_17593/en/model_doc/yoso#transformers.YosoConfig"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ag,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yg,"id","transformers.AutoTokenizer"),c(yg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yg,"href","#transformers.AutoTokenizer"),c(Mi,"class","relative group"),c(cR,"href","/docs/transformers/pr_17593/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(fR,"href","/docs/transformers/pr_17593/en/model_doc/albert#transformers.AlbertTokenizer"),c(mR,"href","/docs/transformers/pr_17593/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(gR,"href","/docs/transformers/pr_17593/en/model_doc/bart#transformers.BartTokenizer"),c(hR,"href","/docs/transformers/pr_17593/en/model_doc/bart#transformers.BartTokenizerFast"),c(pR,"href","/docs/transformers/pr_17593/en/model_doc/barthez#transformers.BarthezTokenizer"),c(_R,"href","/docs/transformers/pr_17593/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(uR,"href","/docs/transformers/pr_17593/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(bR,"href","/docs/transformers/pr_17593/en/model_doc/bert#transformers.BertTokenizer"),c(vR,"href","/docs/transformers/pr_17593/en/model_doc/bert#transformers.BertTokenizerFast"),c(FR,"href","/docs/transformers/pr_17593/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(TR,"href","/docs/transformers/pr_17593/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(MR,"href","/docs/transformers/pr_17593/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(ER,"href","/docs/transformers/pr_17593/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(CR,"href","/docs/transformers/pr_17593/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(wR,"href","/docs/transformers/pr_17593/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(AR,"href","/docs/transformers/pr_17593/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(yR,"href","/docs/transformers/pr_17593/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(LR,"href","/docs/transformers/pr_17593/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(xR,"href","/docs/transformers/pr_17593/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c($R,"href","/docs/transformers/pr_17593/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(kR,"href","/docs/transformers/pr_17593/en/model_doc/camembert#transformers.CamembertTokenizer"),c(SR,"href","/docs/transformers/pr_17593/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(RR,"href","/docs/transformers/pr_17593/en/model_doc/canine#transformers.CanineTokenizer"),c(PR,"href","/docs/transformers/pr_17593/en/model_doc/clip#transformers.CLIPTokenizer"),c(BR,"href","/docs/transformers/pr_17593/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(IR,"href","/docs/transformers/pr_17593/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(NR,"href","/docs/transformers/pr_17593/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(qR,"href","/docs/transformers/pr_17593/en/model_doc/cpm#transformers.CpmTokenizer"),c(jR,"href","/docs/transformers/pr_17593/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(DR,"href","/docs/transformers/pr_17593/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(GR,"href","/docs/transformers/pr_17593/en/model_doc/roberta#transformers.RobertaTokenizer"),c(OR,"href","/docs/transformers/pr_17593/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(VR,"href","/docs/transformers/pr_17593/en/model_doc/deberta#transformers.DebertaTokenizer"),c(XR,"href","/docs/transformers/pr_17593/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(zR,"href","/docs/transformers/pr_17593/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(WR,"href","/docs/transformers/pr_17593/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(QR,"href","/docs/transformers/pr_17593/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(HR,"href","/docs/transformers/pr_17593/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(UR,"href","/docs/transformers/pr_17593/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(JR,"href","/docs/transformers/pr_17593/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(YR,"href","/docs/transformers/pr_17593/en/model_doc/electra#transformers.ElectraTokenizer"),c(KR,"href","/docs/transformers/pr_17593/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(ZR,"href","/docs/transformers/pr_17593/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(eP,"href","/docs/transformers/pr_17593/en/model_doc/fnet#transformers.FNetTokenizer"),c(oP,"href","/docs/transformers/pr_17593/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(rP,"href","/docs/transformers/pr_17593/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(tP,"href","/docs/transformers/pr_17593/en/model_doc/funnel#transformers.FunnelTokenizer"),c(aP,"href","/docs/transformers/pr_17593/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(nP,"href","/docs/transformers/pr_17593/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(sP,"href","/docs/transformers/pr_17593/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(lP,"href","/docs/transformers/pr_17593/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(iP,"href","/docs/transformers/pr_17593/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(dP,"href","/docs/transformers/pr_17593/en/model_doc/gpt_neox#transformers.GPTNeoXTokenizerFast"),c(cP,"href","/docs/transformers/pr_17593/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(fP,"href","/docs/transformers/pr_17593/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(mP,"href","/docs/transformers/pr_17593/en/model_doc/herbert#transformers.HerbertTokenizer"),c(gP,"href","/docs/transformers/pr_17593/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(hP,"href","/docs/transformers/pr_17593/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(pP,"href","/docs/transformers/pr_17593/en/model_doc/roberta#transformers.RobertaTokenizer"),c(_P,"href","/docs/transformers/pr_17593/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(uP,"href","/docs/transformers/pr_17593/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(bP,"href","/docs/transformers/pr_17593/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(vP,"href","/docs/transformers/pr_17593/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(FP,"href","/docs/transformers/pr_17593/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(TP,"href","/docs/transformers/pr_17593/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),c(MP,"href","/docs/transformers/pr_17593/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),c(EP,"href","/docs/transformers/pr_17593/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(CP,"href","/docs/transformers/pr_17593/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(wP,"href","/docs/transformers/pr_17593/en/model_doc/led#transformers.LEDTokenizer"),c(AP,"href","/docs/transformers/pr_17593/en/model_doc/led#transformers.LEDTokenizerFast"),c(yP,"href","/docs/transformers/pr_17593/en/model_doc/longformer#transformers.LongformerTokenizer"),c(LP,"href","/docs/transformers/pr_17593/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(xP,"href","/docs/transformers/pr_17593/en/model_doc/luke#transformers.LukeTokenizer"),c($P,"href","/docs/transformers/pr_17593/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(kP,"href","/docs/transformers/pr_17593/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(SP,"href","/docs/transformers/pr_17593/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(RP,"href","/docs/transformers/pr_17593/en/model_doc/marian#transformers.MarianTokenizer"),c(PP,"href","/docs/transformers/pr_17593/en/model_doc/mbart#transformers.MBartTokenizer"),c(BP,"href","/docs/transformers/pr_17593/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(IP,"href","/docs/transformers/pr_17593/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(NP,"href","/docs/transformers/pr_17593/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(qP,"href","/docs/transformers/pr_17593/en/model_doc/bert#transformers.BertTokenizer"),c(jP,"href","/docs/transformers/pr_17593/en/model_doc/bert#transformers.BertTokenizerFast"),c(DP,"href","/docs/transformers/pr_17593/en/model_doc/mluke#transformers.MLukeTokenizer"),c(GP,"href","/docs/transformers/pr_17593/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(OP,"href","/docs/transformers/pr_17593/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(VP,"href","/docs/transformers/pr_17593/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(XP,"href","/docs/transformers/pr_17593/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(zP,"href","/docs/transformers/pr_17593/en/model_doc/t5#transformers.T5Tokenizer"),c(WP,"href","/docs/transformers/pr_17593/en/model_doc/t5#transformers.T5TokenizerFast"),c(QP,"href","/docs/transformers/pr_17593/en/model_doc/albert#transformers.AlbertTokenizer"),c(HP,"href","/docs/transformers/pr_17593/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(UP,"href","/docs/transformers/pr_17593/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(JP,"href","/docs/transformers/pr_17593/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(YP,"href","/docs/transformers/pr_17593/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(KP,"href","/docs/transformers/pr_17593/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(ZP,"href","/docs/transformers/pr_17593/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(eB,"href","/docs/transformers/pr_17593/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(oB,"href","/docs/transformers/pr_17593/en/model_doc/phobert#transformers.PhobertTokenizer"),c(rB,"href","/docs/transformers/pr_17593/en/model_doc/plbart#transformers.PLBartTokenizer"),c(tB,"href","/docs/transformers/pr_17593/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(aB,"href","/docs/transformers/pr_17593/en/model_doc/bert#transformers.BertTokenizer"),c(nB,"href","/docs/transformers/pr_17593/en/model_doc/bert#transformers.BertTokenizerFast"),c(sB,"href","/docs/transformers/pr_17593/en/model_doc/rag#transformers.RagTokenizer"),c(lB,"href","/docs/transformers/pr_17593/en/model_doc/realm#transformers.RealmTokenizer"),c(iB,"href","/docs/transformers/pr_17593/en/model_doc/realm#transformers.RealmTokenizerFast"),c(dB,"href","/docs/transformers/pr_17593/en/model_doc/reformer#transformers.ReformerTokenizer"),c(cB,"href","/docs/transformers/pr_17593/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(fB,"href","/docs/transformers/pr_17593/en/model_doc/rembert#transformers.RemBertTokenizer"),c(mB,"href","/docs/transformers/pr_17593/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(gB,"href","/docs/transformers/pr_17593/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(hB,"href","/docs/transformers/pr_17593/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(pB,"href","/docs/transformers/pr_17593/en/model_doc/roberta#transformers.RobertaTokenizer"),c(_B,"href","/docs/transformers/pr_17593/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(uB,"href","/docs/transformers/pr_17593/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(bB,"href","/docs/transformers/pr_17593/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(vB,"href","/docs/transformers/pr_17593/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(FB,"href","/docs/transformers/pr_17593/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(TB,"href","/docs/transformers/pr_17593/en/model_doc/splinter#transformers.SplinterTokenizer"),c(MB,"href","/docs/transformers/pr_17593/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(EB,"href","/docs/transformers/pr_17593/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(CB,"href","/docs/transformers/pr_17593/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(wB,"href","/docs/transformers/pr_17593/en/model_doc/t5#transformers.T5Tokenizer"),c(AB,"href","/docs/transformers/pr_17593/en/model_doc/t5#transformers.T5TokenizerFast"),c(yB,"href","/docs/transformers/pr_17593/en/model_doc/tapas#transformers.TapasTokenizer"),c(LB,"href","/docs/transformers/pr_17593/en/model_doc/tapex#transformers.TapexTokenizer"),c(xB,"href","/docs/transformers/pr_17593/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c($B,"href","/docs/transformers/pr_17593/en/model_doc/bert#transformers.BertTokenizer"),c(kB,"href","/docs/transformers/pr_17593/en/model_doc/bert#transformers.BertTokenizerFast"),c(SB,"href","/docs/transformers/pr_17593/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(RB,"href","/docs/transformers/pr_17593/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(PB,"href","/docs/transformers/pr_17593/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(BB,"href","/docs/transformers/pr_17593/en/model_doc/xglm#transformers.XGLMTokenizer"),c(IB,"href","/docs/transformers/pr_17593/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(NB,"href","/docs/transformers/pr_17593/en/model_doc/xlm#transformers.XLMTokenizer"),c(qB,"href","/docs/transformers/pr_17593/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(jB,"href","/docs/transformers/pr_17593/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(DB,"href","/docs/transformers/pr_17593/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(GB,"href","/docs/transformers/pr_17593/en/model_doc/roberta#transformers.RobertaTokenizer"),c(OB,"href","/docs/transformers/pr_17593/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(VB,"href","/docs/transformers/pr_17593/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(XB,"href","/docs/transformers/pr_17593/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(zB,"href","/docs/transformers/pr_17593/en/model_doc/albert#transformers.AlbertTokenizer"),c(WB,"href","/docs/transformers/pr_17593/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ih,"id","transformers.AutoFeatureExtractor"),c(ih,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ih,"href","#transformers.AutoFeatureExtractor"),c(Ei,"class","relative group"),c(QB,"href","/docs/transformers/pr_17593/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(HB,"href","/docs/transformers/pr_17593/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(UB,"href","/docs/transformers/pr_17593/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(JB,"href","/docs/transformers/pr_17593/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(YB,"href","/docs/transformers/pr_17593/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(KB,"href","/docs/transformers/pr_17593/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(ZB,"href","/docs/transformers/pr_17593/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(eI,"href","/docs/transformers/pr_17593/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(oI,"href","/docs/transformers/pr_17593/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(rI,"href","/docs/transformers/pr_17593/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(tI,"href","/docs/transformers/pr_17593/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(aI,"href","/docs/transformers/pr_17593/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(nI,"href","/docs/transformers/pr_17593/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(sI,"href","/docs/transformers/pr_17593/en/model_doc/imagegpt#transformers.ImageGPTFeatureExtractor"),c(lI,"href","/docs/transformers/pr_17593/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(iI,"href","/docs/transformers/pr_17593/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),c(dI,"href","/docs/transformers/pr_17593/en/model_doc/levit#transformers.LevitFeatureExtractor"),c(cI,"href","/docs/transformers/pr_17593/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(fI,"href","/docs/transformers/pr_17593/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(mI,"href","/docs/transformers/pr_17593/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(gI,"href","/docs/transformers/pr_17593/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(hI,"href","/docs/transformers/pr_17593/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(pI,"href","/docs/transformers/pr_17593/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(_I,"href","/docs/transformers/pr_17593/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(uI,"href","/docs/transformers/pr_17593/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(bI,"href","/docs/transformers/pr_17593/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(vI,"href","/docs/transformers/pr_17593/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(FI,"href","/docs/transformers/pr_17593/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(TI,"href","/docs/transformers/pr_17593/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(MI,"href","/docs/transformers/pr_17593/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(EI,"href","/docs/transformers/pr_17593/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Gh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oh,"id","transformers.AutoProcessor"),c(Oh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Oh,"href","#transformers.AutoProcessor"),c(Ci,"class","relative group"),c(CI,"href","/docs/transformers/pr_17593/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(wI,"href","/docs/transformers/pr_17593/en/model_doc/clip#transformers.CLIPProcessor"),c(AI,"href","/docs/transformers/pr_17593/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(yI,"href","/docs/transformers/pr_17593/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),c(LI,"href","/docs/transformers/pr_17593/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(xI,"href","/docs/transformers/pr_17593/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c($I,"href","/docs/transformers/pr_17593/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(kI,"href","/docs/transformers/pr_17593/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(SI,"href","/docs/transformers/pr_17593/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(RI,"href","/docs/transformers/pr_17593/en/model_doc/trocr#transformers.TrOCRProcessor"),c(PI,"href","/docs/transformers/pr_17593/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(BI,"href","/docs/transformers/pr_17593/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(II,"href","/docs/transformers/pr_17593/en/model_doc/vilt#transformers.ViltProcessor"),c(NI,"href","/docs/transformers/pr_17593/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(qI,"href","/docs/transformers/pr_17593/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(jI,"href","/docs/transformers/pr_17593/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(DI,"href","/docs/transformers/pr_17593/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ip,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dp,"id","transformers.AutoModel"),c(dp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(dp,"href","#transformers.AutoModel"),c(Ai,"class","relative group"),c(GI,"href","/docs/transformers/pr_17593/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OI,"href","/docs/transformers/pr_17593/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VI,"href","/docs/transformers/pr_17593/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XI,"href","/docs/transformers/pr_17593/en/model_doc/albert#transformers.AlbertModel"),c(zI,"href","/docs/transformers/pr_17593/en/model_doc/bart#transformers.BartModel"),c(WI,"href","/docs/transformers/pr_17593/en/model_doc/beit#transformers.BeitModel"),c(QI,"href","/docs/transformers/pr_17593/en/model_doc/bert#transformers.BertModel"),c(HI,"href","/docs/transformers/pr_17593/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(UI,"href","/docs/transformers/pr_17593/en/model_doc/big_bird#transformers.BigBirdModel"),c(JI,"href","/docs/transformers/pr_17593/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(YI,"href","/docs/transformers/pr_17593/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(KI,"href","/docs/transformers/pr_17593/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(ZI,"href","/docs/transformers/pr_17593/en/model_doc/camembert#transformers.CamembertModel"),c(eN,"href","/docs/transformers/pr_17593/en/model_doc/canine#transformers.CanineModel"),c(oN,"href","/docs/transformers/pr_17593/en/model_doc/clip#transformers.CLIPModel"),c(rN,"href","/docs/transformers/pr_17593/en/model_doc/convbert#transformers.ConvBertModel"),c(tN,"href","/docs/transformers/pr_17593/en/model_doc/convnext#transformers.ConvNextModel"),c(aN,"href","/docs/transformers/pr_17593/en/model_doc/ctrl#transformers.CTRLModel"),c(nN,"href","/docs/transformers/pr_17593/en/model_doc/cvt#transformers.CvtModel"),c(sN,"href","/docs/transformers/pr_17593/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(lN,"href","/docs/transformers/pr_17593/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(iN,"href","/docs/transformers/pr_17593/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(dN,"href","/docs/transformers/pr_17593/en/model_doc/deberta#transformers.DebertaModel"),c(cN,"href","/docs/transformers/pr_17593/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(fN,"href","/docs/transformers/pr_17593/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(mN,"href","/docs/transformers/pr_17593/en/model_doc/deit#transformers.DeiTModel"),c(gN,"href","/docs/transformers/pr_17593/en/model_doc/detr#transformers.DetrModel"),c(hN,"href","/docs/transformers/pr_17593/en/model_doc/distilbert#transformers.DistilBertModel"),c(pN,"href","/docs/transformers/pr_17593/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(_N,"href","/docs/transformers/pr_17593/en/model_doc/dpt#transformers.DPTModel"),c(uN,"href","/docs/transformers/pr_17593/en/model_doc/electra#transformers.ElectraModel"),c(bN,"href","/docs/transformers/pr_17593/en/model_doc/flaubert#transformers.FlaubertModel"),c(vN,"href","/docs/transformers/pr_17593/en/model_doc/flava#transformers.FlavaModel"),c(FN,"href","/docs/transformers/pr_17593/en/model_doc/fnet#transformers.FNetModel"),c(TN,"href","/docs/transformers/pr_17593/en/model_doc/fsmt#transformers.FSMTModel"),c(MN,"href","/docs/transformers/pr_17593/en/model_doc/funnel#transformers.FunnelModel"),c(EN,"href","/docs/transformers/pr_17593/en/model_doc/funnel#transformers.FunnelBaseModel"),c(CN,"href","/docs/transformers/pr_17593/en/model_doc/glpn#transformers.GLPNModel"),c(wN,"href","/docs/transformers/pr_17593/en/model_doc/gpt2#transformers.GPT2Model"),c(AN,"href","/docs/transformers/pr_17593/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(yN,"href","/docs/transformers/pr_17593/en/model_doc/gpt_neox#transformers.GPTNeoXModel"),c(LN,"href","/docs/transformers/pr_17593/en/model_doc/gptj#transformers.GPTJModel"),c(xN,"href","/docs/transformers/pr_17593/en/model_doc/hubert#transformers.HubertModel"),c($N,"href","/docs/transformers/pr_17593/en/model_doc/ibert#transformers.IBertModel"),c(kN,"href","/docs/transformers/pr_17593/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(SN,"href","/docs/transformers/pr_17593/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(RN,"href","/docs/transformers/pr_17593/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(PN,"href","/docs/transformers/pr_17593/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),c(BN,"href","/docs/transformers/pr_17593/en/model_doc/led#transformers.LEDModel"),c(IN,"href","/docs/transformers/pr_17593/en/model_doc/levit#transformers.LevitModel"),c(NN,"href","/docs/transformers/pr_17593/en/model_doc/longformer#transformers.LongformerModel"),c(qN,"href","/docs/transformers/pr_17593/en/model_doc/luke#transformers.LukeModel"),c(jN,"href","/docs/transformers/pr_17593/en/model_doc/lxmert#transformers.LxmertModel"),c(DN,"href","/docs/transformers/pr_17593/en/model_doc/m2m_100#transformers.M2M100Model"),c(GN,"href","/docs/transformers/pr_17593/en/model_doc/marian#transformers.MarianModel"),c(ON,"href","/docs/transformers/pr_17593/en/model_doc/maskformer#transformers.MaskFormerModel"),c(VN,"href","/docs/transformers/pr_17593/en/model_doc/mbart#transformers.MBartModel"),c(XN,"href","/docs/transformers/pr_17593/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(zN,"href","/docs/transformers/pr_17593/en/model_doc/mobilebert#transformers.MobileBertModel"),c(WN,"href","/docs/transformers/pr_17593/en/model_doc/mpnet#transformers.MPNetModel"),c(QN,"href","/docs/transformers/pr_17593/en/model_doc/mt5#transformers.MT5Model"),c(HN,"href","/docs/transformers/pr_17593/en/model_doc/nystromformer#transformers.NystromformerModel"),c(UN,"href","/docs/transformers/pr_17593/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(JN,"href","/docs/transformers/pr_17593/en/model_doc/opt#transformers.OPTModel"),c(YN,"href","/docs/transformers/pr_17593/en/model_doc/pegasus#transformers.PegasusModel"),c(KN,"href","/docs/transformers/pr_17593/en/model_doc/perceiver#transformers.PerceiverModel"),c(ZN,"href","/docs/transformers/pr_17593/en/model_doc/plbart#transformers.PLBartModel"),c(eq,"href","/docs/transformers/pr_17593/en/model_doc/poolformer#transformers.PoolFormerModel"),c(oq,"href","/docs/transformers/pr_17593/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(rq,"href","/docs/transformers/pr_17593/en/model_doc/qdqbert#transformers.QDQBertModel"),c(tq,"href","/docs/transformers/pr_17593/en/model_doc/reformer#transformers.ReformerModel"),c(aq,"href","/docs/transformers/pr_17593/en/model_doc/regnet#transformers.RegNetModel"),c(nq,"href","/docs/transformers/pr_17593/en/model_doc/rembert#transformers.RemBertModel"),c(sq,"href","/docs/transformers/pr_17593/en/model_doc/resnet#transformers.ResNetModel"),c(lq,"href","/docs/transformers/pr_17593/en/model_doc/retribert#transformers.RetriBertModel"),c(iq,"href","/docs/transformers/pr_17593/en/model_doc/roberta#transformers.RobertaModel"),c(dq,"href","/docs/transformers/pr_17593/en/model_doc/roformer#transformers.RoFormerModel"),c(cq,"href","/docs/transformers/pr_17593/en/model_doc/segformer#transformers.SegformerModel"),c(fq,"href","/docs/transformers/pr_17593/en/model_doc/sew#transformers.SEWModel"),c(mq,"href","/docs/transformers/pr_17593/en/model_doc/sew-d#transformers.SEWDModel"),c(gq,"href","/docs/transformers/pr_17593/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(hq,"href","/docs/transformers/pr_17593/en/model_doc/splinter#transformers.SplinterModel"),c(pq,"href","/docs/transformers/pr_17593/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(_q,"href","/docs/transformers/pr_17593/en/model_doc/swin#transformers.SwinModel"),c(uq,"href","/docs/transformers/pr_17593/en/model_doc/t5#transformers.T5Model"),c(bq,"href","/docs/transformers/pr_17593/en/model_doc/tapas#transformers.TapasModel"),c(vq,"href","/docs/transformers/pr_17593/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(Fq,"href","/docs/transformers/pr_17593/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(Tq,"href","/docs/transformers/pr_17593/en/model_doc/unispeech#transformers.UniSpeechModel"),c(Mq,"href","/docs/transformers/pr_17593/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(Eq,"href","/docs/transformers/pr_17593/en/model_doc/van#transformers.VanModel"),c(Cq,"href","/docs/transformers/pr_17593/en/model_doc/vilt#transformers.ViltModel"),c(wq,"href","/docs/transformers/pr_17593/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(Aq,"href","/docs/transformers/pr_17593/en/model_doc/visual_bert#transformers.VisualBertModel"),c(yq,"href","/docs/transformers/pr_17593/en/model_doc/vit#transformers.ViTModel"),c(Lq,"href","/docs/transformers/pr_17593/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(xq,"href","/docs/transformers/pr_17593/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c($q,"href","/docs/transformers/pr_17593/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(kq,"href","/docs/transformers/pr_17593/en/model_doc/wavlm#transformers.WavLMModel"),c(Sq,"href","/docs/transformers/pr_17593/en/model_doc/xglm#transformers.XGLMModel"),c(Rq,"href","/docs/transformers/pr_17593/en/model_doc/xlm#transformers.XLMModel"),c(Pq,"href","/docs/transformers/pr_17593/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(Bq,"href","/docs/transformers/pr_17593/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(Iq,"href","/docs/transformers/pr_17593/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(Nq,"href","/docs/transformers/pr_17593/en/model_doc/xlnet#transformers.XLNetModel"),c(qq,"href","/docs/transformers/pr_17593/en/model_doc/yolos#transformers.YolosModel"),c(jq,"href","/docs/transformers/pr_17593/en/model_doc/yoso#transformers.YosoModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lu,"id","transformers.AutoModelForPreTraining"),c(lu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lu,"href","#transformers.AutoModelForPreTraining"),c(xi,"class","relative group"),c(Dq,"href","/docs/transformers/pr_17593/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gq,"href","/docs/transformers/pr_17593/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Oq,"href","/docs/transformers/pr_17593/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vq,"href","/docs/transformers/pr_17593/en/model_doc/albert#transformers.AlbertForPreTraining"),c(Xq,"href","/docs/transformers/pr_17593/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(zq,"href","/docs/transformers/pr_17593/en/model_doc/bert#transformers.BertForPreTraining"),c(Wq,"href","/docs/transformers/pr_17593/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(Qq,"href","/docs/transformers/pr_17593/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(Hq,"href","/docs/transformers/pr_17593/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(Uq,"href","/docs/transformers/pr_17593/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(Jq,"href","/docs/transformers/pr_17593/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(Yq,"href","/docs/transformers/pr_17593/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(Kq,"href","/docs/transformers/pr_17593/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(Zq,"href","/docs/transformers/pr_17593/en/model_doc/electra#transformers.ElectraForPreTraining"),c(ej,"href","/docs/transformers/pr_17593/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(oj,"href","/docs/transformers/pr_17593/en/model_doc/flava#transformers.FlavaForPreTraining"),c(rj,"href","/docs/transformers/pr_17593/en/model_doc/fnet#transformers.FNetForPreTraining"),c(tj,"href","/docs/transformers/pr_17593/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(aj,"href","/docs/transformers/pr_17593/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(nj,"href","/docs/transformers/pr_17593/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(sj,"href","/docs/transformers/pr_17593/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(lj,"href","/docs/transformers/pr_17593/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(ij,"href","/docs/transformers/pr_17593/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(dj,"href","/docs/transformers/pr_17593/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(cj,"href","/docs/transformers/pr_17593/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(fj,"href","/docs/transformers/pr_17593/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(mj,"href","/docs/transformers/pr_17593/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(gj,"href","/docs/transformers/pr_17593/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(hj,"href","/docs/transformers/pr_17593/en/model_doc/retribert#transformers.RetriBertModel"),c(pj,"href","/docs/transformers/pr_17593/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(_j,"href","/docs/transformers/pr_17593/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(uj,"href","/docs/transformers/pr_17593/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(bj,"href","/docs/transformers/pr_17593/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(vj,"href","/docs/transformers/pr_17593/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(Fj,"href","/docs/transformers/pr_17593/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(Tj,"href","/docs/transformers/pr_17593/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(Mj,"href","/docs/transformers/pr_17593/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(Ej,"href","/docs/transformers/pr_17593/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(Cj,"href","/docs/transformers/pr_17593/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(wj,"href","/docs/transformers/pr_17593/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(Aj,"href","/docs/transformers/pr_17593/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(yj,"href","/docs/transformers/pr_17593/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(Lj,"href","/docs/transformers/pr_17593/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(xj,"href","/docs/transformers/pr_17593/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c($j,"href","/docs/transformers/pr_17593/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zu,"id","transformers.AutoModelForCausalLM"),c(Zu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Zu,"href","#transformers.AutoModelForCausalLM"),c(Si,"class","relative group"),c(kj,"href","/docs/transformers/pr_17593/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Sj,"href","/docs/transformers/pr_17593/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Rj,"href","/docs/transformers/pr_17593/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Pj,"href","/docs/transformers/pr_17593/en/model_doc/bart#transformers.BartForCausalLM"),c(Bj,"href","/docs/transformers/pr_17593/en/model_doc/bert#transformers.BertLMHeadModel"),c(Ij,"href","/docs/transformers/pr_17593/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(Nj,"href","/docs/transformers/pr_17593/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(qj,"href","/docs/transformers/pr_17593/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(jj,"href","/docs/transformers/pr_17593/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(Dj,"href","/docs/transformers/pr_17593/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(Gj,"href","/docs/transformers/pr_17593/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(Oj,"href","/docs/transformers/pr_17593/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(Vj,"href","/docs/transformers/pr_17593/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(Xj,"href","/docs/transformers/pr_17593/en/model_doc/electra#transformers.ElectraForCausalLM"),c(zj,"href","/docs/transformers/pr_17593/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(Wj,"href","/docs/transformers/pr_17593/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(Qj,"href","/docs/transformers/pr_17593/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM"),c(Hj,"href","/docs/transformers/pr_17593/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(Uj,"href","/docs/transformers/pr_17593/en/model_doc/marian#transformers.MarianForCausalLM"),c(Jj,"href","/docs/transformers/pr_17593/en/model_doc/mbart#transformers.MBartForCausalLM"),c(Yj,"href","/docs/transformers/pr_17593/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(Kj,"href","/docs/transformers/pr_17593/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(Zj,"href","/docs/transformers/pr_17593/en/model_doc/opt#transformers.OPTForCausalLM"),c(eD,"href","/docs/transformers/pr_17593/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(oD,"href","/docs/transformers/pr_17593/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(rD,"href","/docs/transformers/pr_17593/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(tD,"href","/docs/transformers/pr_17593/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(aD,"href","/docs/transformers/pr_17593/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(nD,"href","/docs/transformers/pr_17593/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(sD,"href","/docs/transformers/pr_17593/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(lD,"href","/docs/transformers/pr_17593/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(iD,"href","/docs/transformers/pr_17593/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(dD,"href","/docs/transformers/pr_17593/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(cD,"href","/docs/transformers/pr_17593/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(fD,"href","/docs/transformers/pr_17593/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(mD,"href","/docs/transformers/pr_17593/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(gD,"href","/docs/transformers/pr_17593/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(hD,"href","/docs/transformers/pr_17593/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(pD,"href","/docs/transformers/pr_17593/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(_D,"href","/docs/transformers/pr_17593/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(D1,"id","transformers.AutoModelForMaskedLM"),c(D1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(D1,"href","#transformers.AutoModelForMaskedLM"),c(Bi,"class","relative group"),c(uD,"href","/docs/transformers/pr_17593/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bD,"href","/docs/transformers/pr_17593/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vD,"href","/docs/transformers/pr_17593/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FD,"href","/docs/transformers/pr_17593/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(TD,"href","/docs/transformers/pr_17593/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(MD,"href","/docs/transformers/pr_17593/en/model_doc/bert#transformers.BertForMaskedLM"),c(ED,"href","/docs/transformers/pr_17593/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(CD,"href","/docs/transformers/pr_17593/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(wD,"href","/docs/transformers/pr_17593/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(AD,"href","/docs/transformers/pr_17593/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(yD,"href","/docs/transformers/pr_17593/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(LD,"href","/docs/transformers/pr_17593/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(xD,"href","/docs/transformers/pr_17593/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c($D,"href","/docs/transformers/pr_17593/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(kD,"href","/docs/transformers/pr_17593/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(SD,"href","/docs/transformers/pr_17593/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(RD,"href","/docs/transformers/pr_17593/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(PD,"href","/docs/transformers/pr_17593/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(BD,"href","/docs/transformers/pr_17593/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(ID,"href","/docs/transformers/pr_17593/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(ND,"href","/docs/transformers/pr_17593/en/model_doc/luke#transformers.LukeForMaskedLM"),c(qD,"href","/docs/transformers/pr_17593/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(jD,"href","/docs/transformers/pr_17593/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(DD,"href","/docs/transformers/pr_17593/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(GD,"href","/docs/transformers/pr_17593/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(OD,"href","/docs/transformers/pr_17593/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(VD,"href","/docs/transformers/pr_17593/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(XD,"href","/docs/transformers/pr_17593/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(zD,"href","/docs/transformers/pr_17593/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(WD,"href","/docs/transformers/pr_17593/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(QD,"href","/docs/transformers/pr_17593/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(HD,"href","/docs/transformers/pr_17593/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(UD,"href","/docs/transformers/pr_17593/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(JD,"href","/docs/transformers/pr_17593/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(YD,"href","/docs/transformers/pr_17593/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(KD,"href","/docs/transformers/pr_17593/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(ZD,"href","/docs/transformers/pr_17593/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(eG,"href","/docs/transformers/pr_17593/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ab,"id","transformers.AutoModelForSeq2SeqLM"),c(Ab,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ab,"href","#transformers.AutoModelForSeq2SeqLM"),c(qi,"class","relative group"),c(oG,"href","/docs/transformers/pr_17593/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rG,"href","/docs/transformers/pr_17593/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tG,"href","/docs/transformers/pr_17593/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aG,"href","/docs/transformers/pr_17593/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(nG,"href","/docs/transformers/pr_17593/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(sG,"href","/docs/transformers/pr_17593/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(lG,"href","/docs/transformers/pr_17593/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(iG,"href","/docs/transformers/pr_17593/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(dG,"href","/docs/transformers/pr_17593/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(cG,"href","/docs/transformers/pr_17593/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(fG,"href","/docs/transformers/pr_17593/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(mG,"href","/docs/transformers/pr_17593/en/model_doc/marian#transformers.MarianMTModel"),c(gG,"href","/docs/transformers/pr_17593/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(hG,"href","/docs/transformers/pr_17593/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(pG,"href","/docs/transformers/pr_17593/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(_G,"href","/docs/transformers/pr_17593/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(uG,"href","/docs/transformers/pr_17593/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(bG,"href","/docs/transformers/pr_17593/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(vG,"href","/docs/transformers/pr_17593/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wb,"id","transformers.AutoModelForSequenceClassification"),c(Wb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Wb,"href","#transformers.AutoModelForSequenceClassification"),c(Gi,"class","relative group"),c(FG,"href","/docs/transformers/pr_17593/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TG,"href","/docs/transformers/pr_17593/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MG,"href","/docs/transformers/pr_17593/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EG,"href","/docs/transformers/pr_17593/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(CG,"href","/docs/transformers/pr_17593/en/model_doc/bart#transformers.BartForSequenceClassification"),c(wG,"href","/docs/transformers/pr_17593/en/model_doc/bert#transformers.BertForSequenceClassification"),c(AG,"href","/docs/transformers/pr_17593/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(yG,"href","/docs/transformers/pr_17593/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(LG,"href","/docs/transformers/pr_17593/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(xG,"href","/docs/transformers/pr_17593/en/model_doc/canine#transformers.CanineForSequenceClassification"),c($G,"href","/docs/transformers/pr_17593/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(kG,"href","/docs/transformers/pr_17593/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(SG,"href","/docs/transformers/pr_17593/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(RG,"href","/docs/transformers/pr_17593/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(PG,"href","/docs/transformers/pr_17593/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(BG,"href","/docs/transformers/pr_17593/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(IG,"href","/docs/transformers/pr_17593/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(NG,"href","/docs/transformers/pr_17593/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(qG,"href","/docs/transformers/pr_17593/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(jG,"href","/docs/transformers/pr_17593/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(DG,"href","/docs/transformers/pr_17593/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(GG,"href","/docs/transformers/pr_17593/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(OG,"href","/docs/transformers/pr_17593/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(VG,"href","/docs/transformers/pr_17593/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(XG,"href","/docs/transformers/pr_17593/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(zG,"href","/docs/transformers/pr_17593/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(WG,"href","/docs/transformers/pr_17593/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),c(QG,"href","/docs/transformers/pr_17593/en/model_doc/led#transformers.LEDForSequenceClassification"),c(HG,"href","/docs/transformers/pr_17593/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(UG,"href","/docs/transformers/pr_17593/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(JG,"href","/docs/transformers/pr_17593/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(YG,"href","/docs/transformers/pr_17593/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(KG,"href","/docs/transformers/pr_17593/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(ZG,"href","/docs/transformers/pr_17593/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(eO,"href","/docs/transformers/pr_17593/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(oO,"href","/docs/transformers/pr_17593/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(rO,"href","/docs/transformers/pr_17593/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(tO,"href","/docs/transformers/pr_17593/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(aO,"href","/docs/transformers/pr_17593/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(nO,"href","/docs/transformers/pr_17593/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(sO,"href","/docs/transformers/pr_17593/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(lO,"href","/docs/transformers/pr_17593/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(iO,"href","/docs/transformers/pr_17593/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(dO,"href","/docs/transformers/pr_17593/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(cO,"href","/docs/transformers/pr_17593/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(fO,"href","/docs/transformers/pr_17593/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(mO,"href","/docs/transformers/pr_17593/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(gO,"href","/docs/transformers/pr_17593/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(hO,"href","/docs/transformers/pr_17593/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(pO,"href","/docs/transformers/pr_17593/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(V2,"id","transformers.AutoModelForMultipleChoice"),c(V2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(V2,"href","#transformers.AutoModelForMultipleChoice"),c(Xi,"class","relative group"),c(_O,"href","/docs/transformers/pr_17593/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uO,"href","/docs/transformers/pr_17593/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bO,"href","/docs/transformers/pr_17593/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vO,"href","/docs/transformers/pr_17593/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(FO,"href","/docs/transformers/pr_17593/en/model_doc/bert#transformers.BertForMultipleChoice"),c(TO,"href","/docs/transformers/pr_17593/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(MO,"href","/docs/transformers/pr_17593/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(EO,"href","/docs/transformers/pr_17593/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(CO,"href","/docs/transformers/pr_17593/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(wO,"href","/docs/transformers/pr_17593/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(AO,"href","/docs/transformers/pr_17593/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(yO,"href","/docs/transformers/pr_17593/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(LO,"href","/docs/transformers/pr_17593/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(xO,"href","/docs/transformers/pr_17593/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c($O,"href","/docs/transformers/pr_17593/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(kO,"href","/docs/transformers/pr_17593/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(SO,"href","/docs/transformers/pr_17593/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(RO,"href","/docs/transformers/pr_17593/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(PO,"href","/docs/transformers/pr_17593/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(BO,"href","/docs/transformers/pr_17593/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(IO,"href","/docs/transformers/pr_17593/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(NO,"href","/docs/transformers/pr_17593/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(qO,"href","/docs/transformers/pr_17593/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(jO,"href","/docs/transformers/pr_17593/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(DO,"href","/docs/transformers/pr_17593/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(GO,"href","/docs/transformers/pr_17593/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(OO,"href","/docs/transformers/pr_17593/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(VO,"href","/docs/transformers/pr_17593/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(XO,"href","/docs/transformers/pr_17593/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(zO,"href","/docs/transformers/pr_17593/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(WO,"href","/docs/transformers/pr_17593/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(QO,"href","/docs/transformers/pr_17593/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mv,"id","transformers.AutoModelForNextSentencePrediction"),c(Mv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Mv,"href","#transformers.AutoModelForNextSentencePrediction"),c(Qi,"class","relative group"),c(HO,"href","/docs/transformers/pr_17593/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UO,"href","/docs/transformers/pr_17593/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JO,"href","/docs/transformers/pr_17593/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YO,"href","/docs/transformers/pr_17593/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(KO,"href","/docs/transformers/pr_17593/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(ZO,"href","/docs/transformers/pr_17593/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(eV,"href","/docs/transformers/pr_17593/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(oV,"href","/docs/transformers/pr_17593/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kv,"id","transformers.AutoModelForTokenClassification"),c(kv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(kv,"href","#transformers.AutoModelForTokenClassification"),c(Ji,"class","relative group"),c(rV,"href","/docs/transformers/pr_17593/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tV,"href","/docs/transformers/pr_17593/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aV,"href","/docs/transformers/pr_17593/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nV,"href","/docs/transformers/pr_17593/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(sV,"href","/docs/transformers/pr_17593/en/model_doc/bert#transformers.BertForTokenClassification"),c(lV,"href","/docs/transformers/pr_17593/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(iV,"href","/docs/transformers/pr_17593/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(dV,"href","/docs/transformers/pr_17593/en/model_doc/canine#transformers.CanineForTokenClassification"),c(cV,"href","/docs/transformers/pr_17593/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(fV,"href","/docs/transformers/pr_17593/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(mV,"href","/docs/transformers/pr_17593/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(gV,"href","/docs/transformers/pr_17593/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(hV,"href","/docs/transformers/pr_17593/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(pV,"href","/docs/transformers/pr_17593/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(_V,"href","/docs/transformers/pr_17593/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(uV,"href","/docs/transformers/pr_17593/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(bV,"href","/docs/transformers/pr_17593/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(vV,"href","/docs/transformers/pr_17593/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(FV,"href","/docs/transformers/pr_17593/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(TV,"href","/docs/transformers/pr_17593/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(MV,"href","/docs/transformers/pr_17593/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(EV,"href","/docs/transformers/pr_17593/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),c(CV,"href","/docs/transformers/pr_17593/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(wV,"href","/docs/transformers/pr_17593/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(AV,"href","/docs/transformers/pr_17593/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(yV,"href","/docs/transformers/pr_17593/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(LV,"href","/docs/transformers/pr_17593/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(xV,"href","/docs/transformers/pr_17593/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c($V,"href","/docs/transformers/pr_17593/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(kV,"href","/docs/transformers/pr_17593/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(SV,"href","/docs/transformers/pr_17593/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(RV,"href","/docs/transformers/pr_17593/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(PV,"href","/docs/transformers/pr_17593/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(BV,"href","/docs/transformers/pr_17593/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(IV,"href","/docs/transformers/pr_17593/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(NV,"href","/docs/transformers/pr_17593/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(qV,"href","/docs/transformers/pr_17593/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(p5,"id","transformers.AutoModelForQuestionAnswering"),c(p5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(p5,"href","#transformers.AutoModelForQuestionAnswering"),c(Zi,"class","relative group"),c(jV,"href","/docs/transformers/pr_17593/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DV,"href","/docs/transformers/pr_17593/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GV,"href","/docs/transformers/pr_17593/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OV,"href","/docs/transformers/pr_17593/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(VV,"href","/docs/transformers/pr_17593/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(XV,"href","/docs/transformers/pr_17593/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(zV,"href","/docs/transformers/pr_17593/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(WV,"href","/docs/transformers/pr_17593/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(QV,"href","/docs/transformers/pr_17593/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(HV,"href","/docs/transformers/pr_17593/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(UV,"href","/docs/transformers/pr_17593/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(JV,"href","/docs/transformers/pr_17593/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(YV,"href","/docs/transformers/pr_17593/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(KV,"href","/docs/transformers/pr_17593/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(ZV,"href","/docs/transformers/pr_17593/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(eX,"href","/docs/transformers/pr_17593/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(oX,"href","/docs/transformers/pr_17593/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(rX,"href","/docs/transformers/pr_17593/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(tX,"href","/docs/transformers/pr_17593/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(aX,"href","/docs/transformers/pr_17593/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(nX,"href","/docs/transformers/pr_17593/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(sX,"href","/docs/transformers/pr_17593/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(lX,"href","/docs/transformers/pr_17593/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(iX,"href","/docs/transformers/pr_17593/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(dX,"href","/docs/transformers/pr_17593/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(cX,"href","/docs/transformers/pr_17593/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(fX,"href","/docs/transformers/pr_17593/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(mX,"href","/docs/transformers/pr_17593/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(gX,"href","/docs/transformers/pr_17593/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(hX,"href","/docs/transformers/pr_17593/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(pX,"href","/docs/transformers/pr_17593/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(_X,"href","/docs/transformers/pr_17593/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(uX,"href","/docs/transformers/pr_17593/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(bX,"href","/docs/transformers/pr_17593/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(vX,"href","/docs/transformers/pr_17593/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(FX,"href","/docs/transformers/pr_17593/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(TX,"href","/docs/transformers/pr_17593/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(MX,"href","/docs/transformers/pr_17593/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(EX,"href","/docs/transformers/pr_17593/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(CX,"href","/docs/transformers/pr_17593/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(wX,"href","/docs/transformers/pr_17593/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(AX,"href","/docs/transformers/pr_17593/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(yX,"href","/docs/transformers/pr_17593/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(n3,"id","transformers.AutoModelForTableQuestionAnswering"),c(n3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(n3,"href","#transformers.AutoModelForTableQuestionAnswering"),c(rd,"class","relative group"),c(LX,"href","/docs/transformers/pr_17593/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xX,"href","/docs/transformers/pr_17593/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($X,"href","/docs/transformers/pr_17593/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kX,"href","/docs/transformers/pr_17593/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(c3,"id","transformers.AutoModelForImageClassification"),c(c3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(c3,"href","#transformers.AutoModelForImageClassification"),c(nd,"class","relative group"),c(SX,"href","/docs/transformers/pr_17593/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RX,"href","/docs/transformers/pr_17593/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PX,"href","/docs/transformers/pr_17593/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BX,"href","/docs/transformers/pr_17593/en/model_doc/beit#transformers.BeitForImageClassification"),c(IX,"href","/docs/transformers/pr_17593/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(NX,"href","/docs/transformers/pr_17593/en/model_doc/cvt#transformers.CvtForImageClassification"),c(qX,"href","/docs/transformers/pr_17593/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(jX,"href","/docs/transformers/pr_17593/en/model_doc/deit#transformers.DeiTForImageClassification"),c(DX,"href","/docs/transformers/pr_17593/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(GX,"href","/docs/transformers/pr_17593/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(OX,"href","/docs/transformers/pr_17593/en/model_doc/levit#transformers.LevitForImageClassification"),c(VX,"href","/docs/transformers/pr_17593/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher"),c(XX,"href","/docs/transformers/pr_17593/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(zX,"href","/docs/transformers/pr_17593/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(WX,"href","/docs/transformers/pr_17593/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(QX,"href","/docs/transformers/pr_17593/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(HX,"href","/docs/transformers/pr_17593/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(UX,"href","/docs/transformers/pr_17593/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(JX,"href","/docs/transformers/pr_17593/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(YX,"href","/docs/transformers/pr_17593/en/model_doc/swin#transformers.SwinForImageClassification"),c(KX,"href","/docs/transformers/pr_17593/en/model_doc/van#transformers.VanForImageClassification"),c(ZX,"href","/docs/transformers/pr_17593/en/model_doc/vit#transformers.ViTForImageClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(A3,"id","transformers.AutoModelForVision2Seq"),c(A3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(A3,"href","#transformers.AutoModelForVision2Seq"),c(id,"class","relative group"),c(ez,"href","/docs/transformers/pr_17593/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oz,"href","/docs/transformers/pr_17593/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rz,"href","/docs/transformers/pr_17593/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tz,"href","/docs/transformers/pr_17593/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(k3,"id","transformers.AutoModelForAudioClassification"),c(k3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(k3,"href","#transformers.AutoModelForAudioClassification"),c(fd,"class","relative group"),c(az,"href","/docs/transformers/pr_17593/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nz,"href","/docs/transformers/pr_17593/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sz,"href","/docs/transformers/pr_17593/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lz,"href","/docs/transformers/pr_17593/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(iz,"href","/docs/transformers/pr_17593/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(dz,"href","/docs/transformers/pr_17593/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(cz,"href","/docs/transformers/pr_17593/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(fz,"href","/docs/transformers/pr_17593/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(mz,"href","/docs/transformers/pr_17593/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(gz,"href","/docs/transformers/pr_17593/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(hz,"href","/docs/transformers/pr_17593/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(pz,"href","/docs/transformers/pr_17593/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(X3,"id","transformers.AutoModelForAudioFrameClassification"),c(X3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(X3,"href","#transformers.AutoModelForAudioFrameClassification"),c(hd,"class","relative group"),c(_z,"href","/docs/transformers/pr_17593/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uz,"href","/docs/transformers/pr_17593/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bz,"href","/docs/transformers/pr_17593/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vz,"href","/docs/transformers/pr_17593/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(Fz,"href","/docs/transformers/pr_17593/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(Tz,"href","/docs/transformers/pr_17593/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(Mz,"href","/docs/transformers/pr_17593/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(Ez,"href","/docs/transformers/pr_17593/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Z3,"id","transformers.AutoModelForCTC"),c(Z3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Z3,"href","#transformers.AutoModelForCTC"),c(ud,"class","relative group"),c(Cz,"href","/docs/transformers/pr_17593/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wz,"href","/docs/transformers/pr_17593/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Az,"href","/docs/transformers/pr_17593/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yz,"href","/docs/transformers/pr_17593/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(Lz,"href","/docs/transformers/pr_17593/en/model_doc/hubert#transformers.HubertForCTC"),c(xz,"href","/docs/transformers/pr_17593/en/model_doc/sew#transformers.SEWForCTC"),c($z,"href","/docs/transformers/pr_17593/en/model_doc/sew-d#transformers.SEWDForCTC"),c(kz,"href","/docs/transformers/pr_17593/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(Sz,"href","/docs/transformers/pr_17593/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(Rz,"href","/docs/transformers/pr_17593/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(Pz,"href","/docs/transformers/pr_17593/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(Bz,"href","/docs/transformers/pr_17593/en/model_doc/wavlm#transformers.WavLMForCTC"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mF,"id","transformers.AutoModelForSpeechSeq2Seq"),c(mF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(mF,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(Fd,"class","relative group"),c(Iz,"href","/docs/transformers/pr_17593/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nz,"href","/docs/transformers/pr_17593/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qz,"href","/docs/transformers/pr_17593/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jz,"href","/docs/transformers/pr_17593/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(Dz,"href","/docs/transformers/pr_17593/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bF,"id","transformers.AutoModelForAudioXVector"),c(bF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bF,"href","#transformers.AutoModelForAudioXVector"),c(Ed,"class","relative group"),c(Gz,"href","/docs/transformers/pr_17593/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Oz,"href","/docs/transformers/pr_17593/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Vz,"href","/docs/transformers/pr_17593/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xz,"href","/docs/transformers/pr_17593/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(zz,"href","/docs/transformers/pr_17593/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(Wz,"href","/docs/transformers/pr_17593/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(Qz,"href","/docs/transformers/pr_17593/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(Hz,"href","/docs/transformers/pr_17593/en/model_doc/wavlm#transformers.WavLMForXVector"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yF,"id","transformers.AutoModelForMaskedImageModeling"),c(yF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yF,"href","#transformers.AutoModelForMaskedImageModeling"),c(Ad,"class","relative group"),c(Uz,"href","/docs/transformers/pr_17593/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jz,"href","/docs/transformers/pr_17593/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Yz,"href","/docs/transformers/pr_17593/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Kz,"href","/docs/transformers/pr_17593/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(Zz,"href","/docs/transformers/pr_17593/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(eW,"href","/docs/transformers/pr_17593/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PF,"id","transformers.AutoModelForObjectDetection"),c(PF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(PF,"href","#transformers.AutoModelForObjectDetection"),c($d,"class","relative group"),c(oW,"href","/docs/transformers/pr_17593/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rW,"href","/docs/transformers/pr_17593/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tW,"href","/docs/transformers/pr_17593/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aW,"href","/docs/transformers/pr_17593/en/model_doc/detr#transformers.DetrForObjectDetection"),c(nW,"href","/docs/transformers/pr_17593/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DF,"id","transformers.AutoModelForImageSegmentation"),c(DF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(DF,"href","#transformers.AutoModelForImageSegmentation"),c(Rd,"class","relative group"),c(sW,"href","/docs/transformers/pr_17593/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lW,"href","/docs/transformers/pr_17593/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iW,"href","/docs/transformers/pr_17593/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dW,"href","/docs/transformers/pr_17593/en/model_doc/detr#transformers.DetrForSegmentation"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zF,"id","transformers.AutoModelForSemanticSegmentation"),c(zF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zF,"href","#transformers.AutoModelForSemanticSegmentation"),c(Id,"class","relative group"),c(cW,"href","/docs/transformers/pr_17593/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fW,"href","/docs/transformers/pr_17593/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mW,"href","/docs/transformers/pr_17593/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gW,"href","/docs/transformers/pr_17593/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(hW,"href","/docs/transformers/pr_17593/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(pW,"href","/docs/transformers/pr_17593/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(_W,"href","/docs/transformers/pr_17593/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZF,"id","transformers.AutoModelForInstanceSegmentation"),c(ZF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ZF,"href","#transformers.AutoModelForInstanceSegmentation"),c(jd,"class","relative group"),c(uW,"href","/docs/transformers/pr_17593/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bW,"href","/docs/transformers/pr_17593/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vW,"href","/docs/transformers/pr_17593/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FW,"href","/docs/transformers/pr_17593/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aT,"id","transformers.TFAutoModel"),c(aT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(aT,"href","#transformers.TFAutoModel"),c(Od,"class","relative group"),c(TW,"href","/docs/transformers/pr_17593/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MW,"href","/docs/transformers/pr_17593/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(EW,"href","/docs/transformers/pr_17593/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CW,"href","/docs/transformers/pr_17593/en/model_doc/albert#transformers.TFAlbertModel"),c(wW,"href","/docs/transformers/pr_17593/en/model_doc/bart#transformers.TFBartModel"),c(AW,"href","/docs/transformers/pr_17593/en/model_doc/bert#transformers.TFBertModel"),c(yW,"href","/docs/transformers/pr_17593/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(LW,"href","/docs/transformers/pr_17593/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(xW,"href","/docs/transformers/pr_17593/en/model_doc/camembert#transformers.TFCamembertModel"),c($W,"href","/docs/transformers/pr_17593/en/model_doc/clip#transformers.TFCLIPModel"),c(kW,"href","/docs/transformers/pr_17593/en/model_doc/convbert#transformers.TFConvBertModel"),c(SW,"href","/docs/transformers/pr_17593/en/model_doc/convnext#transformers.TFConvNextModel"),c(RW,"href","/docs/transformers/pr_17593/en/model_doc/ctrl#transformers.TFCTRLModel"),c(PW,"href","/docs/transformers/pr_17593/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(BW,"href","/docs/transformers/pr_17593/en/model_doc/deberta#transformers.TFDebertaModel"),c(IW,"href","/docs/transformers/pr_17593/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(NW,"href","/docs/transformers/pr_17593/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(qW,"href","/docs/transformers/pr_17593/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(jW,"href","/docs/transformers/pr_17593/en/model_doc/electra#transformers.TFElectraModel"),c(DW,"href","/docs/transformers/pr_17593/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(GW,"href","/docs/transformers/pr_17593/en/model_doc/funnel#transformers.TFFunnelModel"),c(OW,"href","/docs/transformers/pr_17593/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(VW,"href","/docs/transformers/pr_17593/en/model_doc/gpt2#transformers.TFGPT2Model"),c(XW,"href","/docs/transformers/pr_17593/en/model_doc/gptj#transformers.TFGPTJModel"),c(zW,"href","/docs/transformers/pr_17593/en/model_doc/hubert#transformers.TFHubertModel"),c(WW,"href","/docs/transformers/pr_17593/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(QW,"href","/docs/transformers/pr_17593/en/model_doc/led#transformers.TFLEDModel"),c(HW,"href","/docs/transformers/pr_17593/en/model_doc/longformer#transformers.TFLongformerModel"),c(UW,"href","/docs/transformers/pr_17593/en/model_doc/lxmert#transformers.TFLxmertModel"),c(JW,"href","/docs/transformers/pr_17593/en/model_doc/marian#transformers.TFMarianModel"),c(YW,"href","/docs/transformers/pr_17593/en/model_doc/mbart#transformers.TFMBartModel"),c(KW,"href","/docs/transformers/pr_17593/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(ZW,"href","/docs/transformers/pr_17593/en/model_doc/mpnet#transformers.TFMPNetModel"),c(eQ,"href","/docs/transformers/pr_17593/en/model_doc/mt5#transformers.TFMT5Model"),c(oQ,"href","/docs/transformers/pr_17593/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(rQ,"href","/docs/transformers/pr_17593/en/model_doc/opt#transformers.TFOPTModel"),c(tQ,"href","/docs/transformers/pr_17593/en/model_doc/pegasus#transformers.TFPegasusModel"),c(aQ,"href","/docs/transformers/pr_17593/en/model_doc/rembert#transformers.TFRemBertModel"),c(nQ,"href","/docs/transformers/pr_17593/en/model_doc/roberta#transformers.TFRobertaModel"),c(sQ,"href","/docs/transformers/pr_17593/en/model_doc/roformer#transformers.TFRoFormerModel"),c(lQ,"href","/docs/transformers/pr_17593/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(iQ,"href","/docs/transformers/pr_17593/en/model_doc/swin#transformers.TFSwinModel"),c(dQ,"href","/docs/transformers/pr_17593/en/model_doc/t5#transformers.TFT5Model"),c(cQ,"href","/docs/transformers/pr_17593/en/model_doc/tapas#transformers.TFTapasModel"),c(fQ,"href","/docs/transformers/pr_17593/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(mQ,"href","/docs/transformers/pr_17593/en/model_doc/vit#transformers.TFViTModel"),c(gQ,"href","/docs/transformers/pr_17593/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(hQ,"href","/docs/transformers/pr_17593/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(pQ,"href","/docs/transformers/pr_17593/en/model_doc/xlm#transformers.TFXLMModel"),c(_Q,"href","/docs/transformers/pr_17593/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(uQ,"href","/docs/transformers/pr_17593/en/model_doc/xlnet#transformers.TFXLNetModel"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZT,"id","transformers.TFAutoModelForPreTraining"),c(ZT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ZT,"href","#transformers.TFAutoModelForPreTraining"),c(zd,"class","relative group"),c(bQ,"href","/docs/transformers/pr_17593/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vQ,"href","/docs/transformers/pr_17593/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FQ,"href","/docs/transformers/pr_17593/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TQ,"href","/docs/transformers/pr_17593/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(MQ,"href","/docs/transformers/pr_17593/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(EQ,"href","/docs/transformers/pr_17593/en/model_doc/bert#transformers.TFBertForPreTraining"),c(CQ,"href","/docs/transformers/pr_17593/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(wQ,"href","/docs/transformers/pr_17593/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(AQ,"href","/docs/transformers/pr_17593/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(yQ,"href","/docs/transformers/pr_17593/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(LQ,"href","/docs/transformers/pr_17593/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(xQ,"href","/docs/transformers/pr_17593/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c($Q,"href","/docs/transformers/pr_17593/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(kQ,"href","/docs/transformers/pr_17593/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(SQ,"href","/docs/transformers/pr_17593/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(RQ,"href","/docs/transformers/pr_17593/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(PQ,"href","/docs/transformers/pr_17593/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(BQ,"href","/docs/transformers/pr_17593/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(IQ,"href","/docs/transformers/pr_17593/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(NQ,"href","/docs/transformers/pr_17593/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(qQ,"href","/docs/transformers/pr_17593/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(jQ,"href","/docs/transformers/pr_17593/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(DQ,"href","/docs/transformers/pr_17593/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(GQ,"href","/docs/transformers/pr_17593/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(OQ,"href","/docs/transformers/pr_17593/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(VQ,"href","/docs/transformers/pr_17593/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(w7,"id","transformers.TFAutoModelForCausalLM"),c(w7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(w7,"href","#transformers.TFAutoModelForCausalLM"),c(Hd,"class","relative group"),c(XQ,"href","/docs/transformers/pr_17593/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zQ,"href","/docs/transformers/pr_17593/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WQ,"href","/docs/transformers/pr_17593/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QQ,"href","/docs/transformers/pr_17593/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(HQ,"href","/docs/transformers/pr_17593/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(UQ,"href","/docs/transformers/pr_17593/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(JQ,"href","/docs/transformers/pr_17593/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(YQ,"href","/docs/transformers/pr_17593/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(KQ,"href","/docs/transformers/pr_17593/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(ZQ,"href","/docs/transformers/pr_17593/en/model_doc/opt#transformers.TFOPTForCausalLM"),c(eH,"href","/docs/transformers/pr_17593/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(oH,"href","/docs/transformers/pr_17593/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(rH,"href","/docs/transformers/pr_17593/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(tH,"href","/docs/transformers/pr_17593/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(aH,"href","/docs/transformers/pr_17593/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(nH,"href","/docs/transformers/pr_17593/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(G7,"id","transformers.TFAutoModelForImageClassification"),c(G7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(G7,"href","#transformers.TFAutoModelForImageClassification"),c(Yd,"class","relative group"),c(sH,"href","/docs/transformers/pr_17593/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lH,"href","/docs/transformers/pr_17593/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iH,"href","/docs/transformers/pr_17593/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dH,"href","/docs/transformers/pr_17593/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(cH,"href","/docs/transformers/pr_17593/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(fH,"href","/docs/transformers/pr_17593/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(mH,"href","/docs/transformers/pr_17593/en/model_doc/vit#transformers.TFViTForImageClassification"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(H7,"id","transformers.TFAutoModelForMaskedLM"),c(H7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(H7,"href","#transformers.TFAutoModelForMaskedLM"),c(ec,"class","relative group"),c(gH,"href","/docs/transformers/pr_17593/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hH,"href","/docs/transformers/pr_17593/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pH,"href","/docs/transformers/pr_17593/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_H,"href","/docs/transformers/pr_17593/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(uH,"href","/docs/transformers/pr_17593/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(bH,"href","/docs/transformers/pr_17593/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(vH,"href","/docs/transformers/pr_17593/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(FH,"href","/docs/transformers/pr_17593/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(TH,"href","/docs/transformers/pr_17593/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(MH,"href","/docs/transformers/pr_17593/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(EH,"href","/docs/transformers/pr_17593/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(CH,"href","/docs/transformers/pr_17593/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(wH,"href","/docs/transformers/pr_17593/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(AH,"href","/docs/transformers/pr_17593/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(yH,"href","/docs/transformers/pr_17593/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(LH,"href","/docs/transformers/pr_17593/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(xH,"href","/docs/transformers/pr_17593/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c($H,"href","/docs/transformers/pr_17593/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(kH,"href","/docs/transformers/pr_17593/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(SH,"href","/docs/transformers/pr_17593/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(RH,"href","/docs/transformers/pr_17593/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(PH,"href","/docs/transformers/pr_17593/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(BH,"href","/docs/transformers/pr_17593/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(u9,"id","transformers.TFAutoModelForSeq2SeqLM"),c(u9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(u9,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(tc,"class","relative group"),c(IH,"href","/docs/transformers/pr_17593/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NH,"href","/docs/transformers/pr_17593/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qH,"href","/docs/transformers/pr_17593/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jH,"href","/docs/transformers/pr_17593/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(DH,"href","/docs/transformers/pr_17593/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(GH,"href","/docs/transformers/pr_17593/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(OH,"href","/docs/transformers/pr_17593/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(VH,"href","/docs/transformers/pr_17593/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(XH,"href","/docs/transformers/pr_17593/en/model_doc/marian#transformers.TFMarianMTModel"),c(zH,"href","/docs/transformers/pr_17593/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(WH,"href","/docs/transformers/pr_17593/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(QH,"href","/docs/transformers/pr_17593/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(HH,"href","/docs/transformers/pr_17593/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($9,"id","transformers.TFAutoModelForSequenceClassification"),c($9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($9,"href","#transformers.TFAutoModelForSequenceClassification"),c(sc,"class","relative group"),c(UH,"href","/docs/transformers/pr_17593/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JH,"href","/docs/transformers/pr_17593/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YH,"href","/docs/transformers/pr_17593/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KH,"href","/docs/transformers/pr_17593/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(ZH,"href","/docs/transformers/pr_17593/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(eU,"href","/docs/transformers/pr_17593/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(oU,"href","/docs/transformers/pr_17593/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(rU,"href","/docs/transformers/pr_17593/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(tU,"href","/docs/transformers/pr_17593/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(aU,"href","/docs/transformers/pr_17593/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(nU,"href","/docs/transformers/pr_17593/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(sU,"href","/docs/transformers/pr_17593/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(lU,"href","/docs/transformers/pr_17593/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(iU,"href","/docs/transformers/pr_17593/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(dU,"href","/docs/transformers/pr_17593/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(cU,"href","/docs/transformers/pr_17593/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(fU,"href","/docs/transformers/pr_17593/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(mU,"href","/docs/transformers/pr_17593/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(gU,"href","/docs/transformers/pr_17593/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(hU,"href","/docs/transformers/pr_17593/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(pU,"href","/docs/transformers/pr_17593/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(_U,"href","/docs/transformers/pr_17593/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(uU,"href","/docs/transformers/pr_17593/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(bU,"href","/docs/transformers/pr_17593/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(vU,"href","/docs/transformers/pr_17593/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(FU,"href","/docs/transformers/pr_17593/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(TU,"href","/docs/transformers/pr_17593/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(MU,"href","/docs/transformers/pr_17593/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(EU,"href","/docs/transformers/pr_17593/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nM,"id","transformers.TFAutoModelForMultipleChoice"),c(nM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(nM,"href","#transformers.TFAutoModelForMultipleChoice"),c(dc,"class","relative group"),c(CU,"href","/docs/transformers/pr_17593/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wU,"href","/docs/transformers/pr_17593/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(AU,"href","/docs/transformers/pr_17593/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yU,"href","/docs/transformers/pr_17593/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(LU,"href","/docs/transformers/pr_17593/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(xU,"href","/docs/transformers/pr_17593/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c($U,"href","/docs/transformers/pr_17593/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(kU,"href","/docs/transformers/pr_17593/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(SU,"href","/docs/transformers/pr_17593/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(RU,"href","/docs/transformers/pr_17593/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(PU,"href","/docs/transformers/pr_17593/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(BU,"href","/docs/transformers/pr_17593/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(IU,"href","/docs/transformers/pr_17593/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(NU,"href","/docs/transformers/pr_17593/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(qU,"href","/docs/transformers/pr_17593/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(jU,"href","/docs/transformers/pr_17593/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(DU,"href","/docs/transformers/pr_17593/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(GU,"href","/docs/transformers/pr_17593/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(OU,"href","/docs/transformers/pr_17593/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(VU,"href","/docs/transformers/pr_17593/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wM,"id","transformers.TFAutoModelForNextSentencePrediction"),c(wM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(wM,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(mc,"class","relative group"),c(XU,"href","/docs/transformers/pr_17593/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zU,"href","/docs/transformers/pr_17593/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WU,"href","/docs/transformers/pr_17593/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QU,"href","/docs/transformers/pr_17593/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(HU,"href","/docs/transformers/pr_17593/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($M,"id","transformers.TFAutoModelForTableQuestionAnswering"),c($M,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($M,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(pc,"class","relative group"),c(UU,"href","/docs/transformers/pr_17593/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JU,"href","/docs/transformers/pr_17593/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YU,"href","/docs/transformers/pr_17593/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KU,"href","/docs/transformers/pr_17593/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PM,"id","transformers.TFAutoModelForTokenClassification"),c(PM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(PM,"href","#transformers.TFAutoModelForTokenClassification"),c(bc,"class","relative group"),c(ZU,"href","/docs/transformers/pr_17593/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eJ,"href","/docs/transformers/pr_17593/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oJ,"href","/docs/transformers/pr_17593/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rJ,"href","/docs/transformers/pr_17593/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(tJ,"href","/docs/transformers/pr_17593/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(aJ,"href","/docs/transformers/pr_17593/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(nJ,"href","/docs/transformers/pr_17593/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(sJ,"href","/docs/transformers/pr_17593/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(lJ,"href","/docs/transformers/pr_17593/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(iJ,"href","/docs/transformers/pr_17593/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(dJ,"href","/docs/transformers/pr_17593/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(cJ,"href","/docs/transformers/pr_17593/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(fJ,"href","/docs/transformers/pr_17593/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(mJ,"href","/docs/transformers/pr_17593/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(gJ,"href","/docs/transformers/pr_17593/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(hJ,"href","/docs/transformers/pr_17593/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(pJ,"href","/docs/transformers/pr_17593/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(_J,"href","/docs/transformers/pr_17593/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(uJ,"href","/docs/transformers/pr_17593/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(bJ,"href","/docs/transformers/pr_17593/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(vJ,"href","/docs/transformers/pr_17593/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(FJ,"href","/docs/transformers/pr_17593/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(TJ,"href","/docs/transformers/pr_17593/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(t4,"id","transformers.TFAutoModelForQuestionAnswering"),c(t4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(t4,"href","#transformers.TFAutoModelForQuestionAnswering"),c(Tc,"class","relative group"),c(MJ,"href","/docs/transformers/pr_17593/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(EJ,"href","/docs/transformers/pr_17593/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(CJ,"href","/docs/transformers/pr_17593/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wJ,"href","/docs/transformers/pr_17593/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(AJ,"href","/docs/transformers/pr_17593/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(yJ,"href","/docs/transformers/pr_17593/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(LJ,"href","/docs/transformers/pr_17593/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(xJ,"href","/docs/transformers/pr_17593/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c($J,"href","/docs/transformers/pr_17593/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(kJ,"href","/docs/transformers/pr_17593/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(SJ,"href","/docs/transformers/pr_17593/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(RJ,"href","/docs/transformers/pr_17593/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(PJ,"href","/docs/transformers/pr_17593/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(BJ,"href","/docs/transformers/pr_17593/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(IJ,"href","/docs/transformers/pr_17593/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(NJ,"href","/docs/transformers/pr_17593/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(qJ,"href","/docs/transformers/pr_17593/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(jJ,"href","/docs/transformers/pr_17593/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(DJ,"href","/docs/transformers/pr_17593/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(GJ,"href","/docs/transformers/pr_17593/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(OJ,"href","/docs/transformers/pr_17593/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(VJ,"href","/docs/transformers/pr_17593/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(XJ,"href","/docs/transformers/pr_17593/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(A4,"id","transformers.TFAutoModelForVision2Seq"),c(A4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(A4,"href","#transformers.TFAutoModelForVision2Seq"),c(Cc,"class","relative group"),c(zJ,"href","/docs/transformers/pr_17593/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WJ,"href","/docs/transformers/pr_17593/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QJ,"href","/docs/transformers/pr_17593/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HJ,"href","/docs/transformers/pr_17593/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($4,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c($4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($4,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(yc,"class","relative group"),c(UJ,"href","/docs/transformers/pr_17593/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JJ,"href","/docs/transformers/pr_17593/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YJ,"href","/docs/transformers/pr_17593/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KJ,"href","/docs/transformers/pr_17593/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(P4,"id","transformers.FlaxAutoModel"),c(P4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(P4,"href","#transformers.FlaxAutoModel"),c($c,"class","relative group"),c(ZJ,"href","/docs/transformers/pr_17593/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eY,"href","/docs/transformers/pr_17593/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oY,"href","/docs/transformers/pr_17593/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rY,"href","/docs/transformers/pr_17593/en/model_doc/albert#transformers.FlaxAlbertModel"),c(tY,"href","/docs/transformers/pr_17593/en/model_doc/bart#transformers.FlaxBartModel"),c(aY,"href","/docs/transformers/pr_17593/en/model_doc/beit#transformers.FlaxBeitModel"),c(nY,"href","/docs/transformers/pr_17593/en/model_doc/bert#transformers.FlaxBertModel"),c(sY,"href","/docs/transformers/pr_17593/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(lY,"href","/docs/transformers/pr_17593/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(iY,"href","/docs/transformers/pr_17593/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(dY,"href","/docs/transformers/pr_17593/en/model_doc/clip#transformers.FlaxCLIPModel"),c(cY,"href","/docs/transformers/pr_17593/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(fY,"href","/docs/transformers/pr_17593/en/model_doc/electra#transformers.FlaxElectraModel"),c(mY,"href","/docs/transformers/pr_17593/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(gY,"href","/docs/transformers/pr_17593/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(hY,"href","/docs/transformers/pr_17593/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(pY,"href","/docs/transformers/pr_17593/en/model_doc/marian#transformers.FlaxMarianModel"),c(_Y,"href","/docs/transformers/pr_17593/en/model_doc/mbart#transformers.FlaxMBartModel"),c(uY,"href","/docs/transformers/pr_17593/en/model_doc/mt5#transformers.FlaxMT5Model"),c(bY,"href","/docs/transformers/pr_17593/en/model_doc/opt#transformers.FlaxOPTModel"),c(vY,"href","/docs/transformers/pr_17593/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(FY,"href","/docs/transformers/pr_17593/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(TY,"href","/docs/transformers/pr_17593/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(MY,"href","/docs/transformers/pr_17593/en/model_doc/t5#transformers.FlaxT5Model"),c(EY,"href","/docs/transformers/pr_17593/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(CY,"href","/docs/transformers/pr_17593/en/model_doc/vit#transformers.FlaxViTModel"),c(wY,"href","/docs/transformers/pr_17593/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(AY,"href","/docs/transformers/pr_17593/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(yY,"href","/docs/transformers/pr_17593/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dE,"id","transformers.FlaxAutoModelForCausalLM"),c(dE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(dE,"href","#transformers.FlaxAutoModelForCausalLM"),c(Rc,"class","relative group"),c(LY,"href","/docs/transformers/pr_17593/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xY,"href","/docs/transformers/pr_17593/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($Y,"href","/docs/transformers/pr_17593/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kY,"href","/docs/transformers/pr_17593/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(SY,"href","/docs/transformers/pr_17593/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(RY,"href","/docs/transformers/pr_17593/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(PY,"href","/docs/transformers/pr_17593/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(BY,"href","/docs/transformers/pr_17593/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(IY,"href","/docs/transformers/pr_17593/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(NY,"href","/docs/transformers/pr_17593/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(qY,"href","/docs/transformers/pr_17593/en/model_doc/opt#transformers.FlaxOPTForCausalLM"),c(jY,"href","/docs/transformers/pr_17593/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(DY,"href","/docs/transformers/pr_17593/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ME,"id","transformers.FlaxAutoModelForPreTraining"),c(ME,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ME,"href","#transformers.FlaxAutoModelForPreTraining"),c(Ic,"class","relative group"),c(GY,"href","/docs/transformers/pr_17593/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OY,"href","/docs/transformers/pr_17593/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VY,"href","/docs/transformers/pr_17593/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XY,"href","/docs/transformers/pr_17593/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(zY,"href","/docs/transformers/pr_17593/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(WY,"href","/docs/transformers/pr_17593/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(QY,"href","/docs/transformers/pr_17593/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(HY,"href","/docs/transformers/pr_17593/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(UY,"href","/docs/transformers/pr_17593/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(JY,"href","/docs/transformers/pr_17593/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(YY,"href","/docs/transformers/pr_17593/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(KY,"href","/docs/transformers/pr_17593/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(ZY,"href","/docs/transformers/pr_17593/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(eK,"href","/docs/transformers/pr_17593/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(oK,"href","/docs/transformers/pr_17593/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NE,"id","transformers.FlaxAutoModelForMaskedLM"),c(NE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(NE,"href","#transformers.FlaxAutoModelForMaskedLM"),c(jc,"class","relative group"),c(rK,"href","/docs/transformers/pr_17593/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tK,"href","/docs/transformers/pr_17593/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aK,"href","/docs/transformers/pr_17593/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nK,"href","/docs/transformers/pr_17593/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(sK,"href","/docs/transformers/pr_17593/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(lK,"href","/docs/transformers/pr_17593/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(iK,"href","/docs/transformers/pr_17593/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(dK,"href","/docs/transformers/pr_17593/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(cK,"href","/docs/transformers/pr_17593/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(fK,"href","/docs/transformers/pr_17593/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(mK,"href","/docs/transformers/pr_17593/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(gK,"href","/docs/transformers/pr_17593/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(hK,"href","/docs/transformers/pr_17593/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JE,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(JE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(JE,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Oc,"class","relative group"),c(pK,"href","/docs/transformers/pr_17593/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_K,"href","/docs/transformers/pr_17593/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uK,"href","/docs/transformers/pr_17593/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bK,"href","/docs/transformers/pr_17593/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(vK,"href","/docs/transformers/pr_17593/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(FK,"href","/docs/transformers/pr_17593/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(TK,"href","/docs/transformers/pr_17593/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(MK,"href","/docs/transformers/pr_17593/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(EK,"href","/docs/transformers/pr_17593/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(CK,"href","/docs/transformers/pr_17593/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(wK,"href","/docs/transformers/pr_17593/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(AK,"href","/docs/transformers/pr_17593/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iC,"id","transformers.FlaxAutoModelForSequenceClassification"),c(iC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(iC,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(zc,"class","relative group"),c(yK,"href","/docs/transformers/pr_17593/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LK,"href","/docs/transformers/pr_17593/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xK,"href","/docs/transformers/pr_17593/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($K,"href","/docs/transformers/pr_17593/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(kK,"href","/docs/transformers/pr_17593/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(SK,"href","/docs/transformers/pr_17593/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(RK,"href","/docs/transformers/pr_17593/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(PK,"href","/docs/transformers/pr_17593/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(BK,"href","/docs/transformers/pr_17593/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(IK,"href","/docs/transformers/pr_17593/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(NK,"href","/docs/transformers/pr_17593/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(qK,"href","/docs/transformers/pr_17593/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(jK,"href","/docs/transformers/pr_17593/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TC,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(TC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(TC,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(Hc,"class","relative group"),c(DK,"href","/docs/transformers/pr_17593/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GK,"href","/docs/transformers/pr_17593/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OK,"href","/docs/transformers/pr_17593/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VK,"href","/docs/transformers/pr_17593/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(XK,"href","/docs/transformers/pr_17593/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(zK,"href","/docs/transformers/pr_17593/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(WK,"href","/docs/transformers/pr_17593/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(QK,"href","/docs/transformers/pr_17593/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(HK,"href","/docs/transformers/pr_17593/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(UK,"href","/docs/transformers/pr_17593/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(JK,"href","/docs/transformers/pr_17593/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(YK,"href","/docs/transformers/pr_17593/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(KK,"href","/docs/transformers/pr_17593/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PC,"id","transformers.FlaxAutoModelForTokenClassification"),c(PC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(PC,"href","#transformers.FlaxAutoModelForTokenClassification"),c(Yc,"class","relative group"),c(ZK,"href","/docs/transformers/pr_17593/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eZ,"href","/docs/transformers/pr_17593/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oZ,"href","/docs/transformers/pr_17593/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rZ,"href","/docs/transformers/pr_17593/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(tZ,"href","/docs/transformers/pr_17593/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(aZ,"href","/docs/transformers/pr_17593/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(nZ,"href","/docs/transformers/pr_17593/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(sZ,"href","/docs/transformers/pr_17593/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(lZ,"href","/docs/transformers/pr_17593/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(iZ,"href","/docs/transformers/pr_17593/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(dZ,"href","/docs/transformers/pr_17593/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zC,"id","transformers.FlaxAutoModelForMultipleChoice"),c(zC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zC,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(ef,"class","relative group"),c(cZ,"href","/docs/transformers/pr_17593/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fZ,"href","/docs/transformers/pr_17593/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mZ,"href","/docs/transformers/pr_17593/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gZ,"href","/docs/transformers/pr_17593/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(hZ,"href","/docs/transformers/pr_17593/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(pZ,"href","/docs/transformers/pr_17593/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(_Z,"href","/docs/transformers/pr_17593/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(uZ,"href","/docs/transformers/pr_17593/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(bZ,"href","/docs/transformers/pr_17593/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(vZ,"href","/docs/transformers/pr_17593/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(FZ,"href","/docs/transformers/pr_17593/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(r0,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(r0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(r0,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(tf,"class","relative group"),c(TZ,"href","/docs/transformers/pr_17593/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MZ,"href","/docs/transformers/pr_17593/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(EZ,"href","/docs/transformers/pr_17593/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CZ,"href","/docs/transformers/pr_17593/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(s0,"id","transformers.FlaxAutoModelForImageClassification"),c(s0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(s0,"href","#transformers.FlaxAutoModelForImageClassification"),c(sf,"class","relative group"),c(wZ,"href","/docs/transformers/pr_17593/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AZ,"href","/docs/transformers/pr_17593/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yZ,"href","/docs/transformers/pr_17593/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LZ,"href","/docs/transformers/pr_17593/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(xZ,"href","/docs/transformers/pr_17593/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(f0,"id","transformers.FlaxAutoModelForVision2Seq"),c(f0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(f0,"href","#transformers.FlaxAutoModelForVision2Seq"),c(cf,"class","relative group"),c($Z,"href","/docs/transformers/pr_17593/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kZ,"href","/docs/transformers/pr_17593/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(SZ,"href","/docs/transformers/pr_17593/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RZ,"href","/docs/transformers/pr_17593/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,u){e(document.head,g),b(f,v,u),b(f,p,u),e(p,m),e(m,_),M(d,_,null),e(p,h),e(p,Mo),e(Mo,mi),b(f,_f,u),b(f,rt,u),e(rt,gi),e(rt,hi),e(hi,SA),e(rt,uf),b(f,De,u),b(f,We,u),e(We,pi),e(We,yn),e(yn,RA),e(We,Ln),e(We,xn),e(xn,PA),e(We,_i),e(We,$n),e($n,BA),e(We,ui),b(f,bf,u),M(Ca,f,u),b(f,Qe,u),b(f,Ae,u),e(Ae,ok),e(Ae,bi),e(bi,rk),e(Ae,tk),b(f,Eo,u),b(f,wa,u),e(wa,ak),e(wa,vf),e(vf,nk),e(wa,WOe),b(f,Bqe,u),b(f,vi,u),e(vi,Ff),e(Ff,Aoe),M(IA,Aoe,null),e(vi,QOe),e(vi,yoe),e(yoe,HOe),b(f,Iqe,u),b(f,kn,u),e(kn,UOe),e(kn,Loe),e(Loe,JOe),e(kn,YOe),e(kn,xoe),e(xoe,KOe),e(kn,ZOe),b(f,Nqe,u),M(NA,f,u),b(f,qqe,u),b(f,sk,u),e(sk,eVe),b(f,jqe,u),M(Tf,f,u),b(f,Dqe,u),b(f,Fi,u),e(Fi,Mf),e(Mf,$oe),M(qA,$oe,null),e(Fi,oVe),e(Fi,koe),e(koe,rVe),b(f,Gqe,u),b(f,Co,u),M(jA,Co,null),e(Co,tVe),e(Co,DA),e(DA,aVe),e(DA,lk),e(lk,nVe),e(DA,sVe),e(Co,lVe),e(Co,GA),e(GA,iVe),e(GA,Soe),e(Soe,dVe),e(GA,cVe),e(Co,fVe),e(Co,Er),M(OA,Er,null),e(Er,mVe),e(Er,Roe),e(Roe,gVe),e(Er,hVe),e(Er,Ti),e(Ti,pVe),e(Ti,Poe),e(Poe,_Ve),e(Ti,uVe),e(Ti,Boe),e(Boe,bVe),e(Ti,vVe),e(Er,FVe),e(Er,A),e(A,Ef),e(Ef,Ioe),e(Ioe,TVe),e(Ef,MVe),e(Ef,ik),e(ik,EVe),e(Ef,CVe),e(A,wVe),e(A,Cf),e(Cf,Noe),e(Noe,AVe),e(Cf,yVe),e(Cf,dk),e(dk,LVe),e(Cf,xVe),e(A,$Ve),e(A,wf),e(wf,qoe),e(qoe,kVe),e(wf,SVe),e(wf,ck),e(ck,RVe),e(wf,PVe),e(A,BVe),e(A,Af),e(Af,joe),e(joe,IVe),e(Af,NVe),e(Af,fk),e(fk,qVe),e(Af,jVe),e(A,DVe),e(A,yf),e(yf,Doe),e(Doe,GVe),e(yf,OVe),e(yf,mk),e(mk,VVe),e(yf,XVe),e(A,zVe),e(A,Lf),e(Lf,Goe),e(Goe,WVe),e(Lf,QVe),e(Lf,gk),e(gk,HVe),e(Lf,UVe),e(A,JVe),e(A,xf),e(xf,Ooe),e(Ooe,YVe),e(xf,KVe),e(xf,hk),e(hk,ZVe),e(xf,eXe),e(A,oXe),e(A,$f),e($f,Voe),e(Voe,rXe),e($f,tXe),e($f,pk),e(pk,aXe),e($f,nXe),e(A,sXe),e(A,kf),e(kf,Xoe),e(Xoe,lXe),e(kf,iXe),e(kf,_k),e(_k,dXe),e(kf,cXe),e(A,fXe),e(A,Sf),e(Sf,zoe),e(zoe,mXe),e(Sf,gXe),e(Sf,uk),e(uk,hXe),e(Sf,pXe),e(A,_Xe),e(A,Rf),e(Rf,Woe),e(Woe,uXe),e(Rf,bXe),e(Rf,bk),e(bk,vXe),e(Rf,FXe),e(A,TXe),e(A,Pf),e(Pf,Qoe),e(Qoe,MXe),e(Pf,EXe),e(Pf,vk),e(vk,CXe),e(Pf,wXe),e(A,AXe),e(A,Bf),e(Bf,Hoe),e(Hoe,yXe),e(Bf,LXe),e(Bf,Fk),e(Fk,xXe),e(Bf,$Xe),e(A,kXe),e(A,If),e(If,Uoe),e(Uoe,SXe),e(If,RXe),e(If,Tk),e(Tk,PXe),e(If,BXe),e(A,IXe),e(A,Nf),e(Nf,Joe),e(Joe,NXe),e(Nf,qXe),e(Nf,Mk),e(Mk,jXe),e(Nf,DXe),e(A,GXe),e(A,qf),e(qf,Yoe),e(Yoe,OXe),e(qf,VXe),e(qf,Ek),e(Ek,XXe),e(qf,zXe),e(A,WXe),e(A,jf),e(jf,Koe),e(Koe,QXe),e(jf,HXe),e(jf,Ck),e(Ck,UXe),e(jf,JXe),e(A,YXe),e(A,Df),e(Df,Zoe),e(Zoe,KXe),e(Df,ZXe),e(Df,wk),e(wk,eze),e(Df,oze),e(A,rze),e(A,Gf),e(Gf,ere),e(ere,tze),e(Gf,aze),e(Gf,Ak),e(Ak,nze),e(Gf,sze),e(A,lze),e(A,Of),e(Of,ore),e(ore,ize),e(Of,dze),e(Of,yk),e(yk,cze),e(Of,fze),e(A,mze),e(A,Vf),e(Vf,rre),e(rre,gze),e(Vf,hze),e(Vf,Lk),e(Lk,pze),e(Vf,_ze),e(A,uze),e(A,Xf),e(Xf,tre),e(tre,bze),e(Xf,vze),e(Xf,xk),e(xk,Fze),e(Xf,Tze),e(A,Mze),e(A,zf),e(zf,are),e(are,Eze),e(zf,Cze),e(zf,$k),e($k,wze),e(zf,Aze),e(A,yze),e(A,Wf),e(Wf,nre),e(nre,Lze),e(Wf,xze),e(Wf,kk),e(kk,$ze),e(Wf,kze),e(A,Sze),e(A,Qf),e(Qf,sre),e(sre,Rze),e(Qf,Pze),e(Qf,Sk),e(Sk,Bze),e(Qf,Ize),e(A,Nze),e(A,Hf),e(Hf,lre),e(lre,qze),e(Hf,jze),e(Hf,Rk),e(Rk,Dze),e(Hf,Gze),e(A,Oze),e(A,Uf),e(Uf,ire),e(ire,Vze),e(Uf,Xze),e(Uf,Pk),e(Pk,zze),e(Uf,Wze),e(A,Qze),e(A,Jf),e(Jf,dre),e(dre,Hze),e(Jf,Uze),e(Jf,Bk),e(Bk,Jze),e(Jf,Yze),e(A,Kze),e(A,Yf),e(Yf,cre),e(cre,Zze),e(Yf,eWe),e(Yf,Ik),e(Ik,oWe),e(Yf,rWe),e(A,tWe),e(A,Kf),e(Kf,fre),e(fre,aWe),e(Kf,nWe),e(Kf,Nk),e(Nk,sWe),e(Kf,lWe),e(A,iWe),e(A,Zf),e(Zf,mre),e(mre,dWe),e(Zf,cWe),e(Zf,qk),e(qk,fWe),e(Zf,mWe),e(A,gWe),e(A,em),e(em,gre),e(gre,hWe),e(em,pWe),e(em,jk),e(jk,_We),e(em,uWe),e(A,bWe),e(A,om),e(om,hre),e(hre,vWe),e(om,FWe),e(om,Dk),e(Dk,TWe),e(om,MWe),e(A,EWe),e(A,rm),e(rm,pre),e(pre,CWe),e(rm,wWe),e(rm,Gk),e(Gk,AWe),e(rm,yWe),e(A,LWe),e(A,tm),e(tm,_re),e(_re,xWe),e(tm,$We),e(tm,Ok),e(Ok,kWe),e(tm,SWe),e(A,RWe),e(A,am),e(am,ure),e(ure,PWe),e(am,BWe),e(am,Vk),e(Vk,IWe),e(am,NWe),e(A,qWe),e(A,nm),e(nm,bre),e(bre,jWe),e(nm,DWe),e(nm,Xk),e(Xk,GWe),e(nm,OWe),e(A,VWe),e(A,sm),e(sm,vre),e(vre,XWe),e(sm,zWe),e(sm,zk),e(zk,WWe),e(sm,QWe),e(A,HWe),e(A,lm),e(lm,Fre),e(Fre,UWe),e(lm,JWe),e(lm,Wk),e(Wk,YWe),e(lm,KWe),e(A,ZWe),e(A,im),e(im,Tre),e(Tre,eQe),e(im,oQe),e(im,Qk),e(Qk,rQe),e(im,tQe),e(A,aQe),e(A,dm),e(dm,Mre),e(Mre,nQe),e(dm,sQe),e(dm,Hk),e(Hk,lQe),e(dm,iQe),e(A,dQe),e(A,cm),e(cm,Ere),e(Ere,cQe),e(cm,fQe),e(cm,Uk),e(Uk,mQe),e(cm,gQe),e(A,hQe),e(A,fm),e(fm,Cre),e(Cre,pQe),e(fm,_Qe),e(fm,Jk),e(Jk,uQe),e(fm,bQe),e(A,vQe),e(A,mm),e(mm,wre),e(wre,FQe),e(mm,TQe),e(mm,Yk),e(Yk,MQe),e(mm,EQe),e(A,CQe),e(A,gm),e(gm,Are),e(Are,wQe),e(gm,AQe),e(gm,Kk),e(Kk,yQe),e(gm,LQe),e(A,xQe),e(A,hm),e(hm,yre),e(yre,$Qe),e(hm,kQe),e(hm,Zk),e(Zk,SQe),e(hm,RQe),e(A,PQe),e(A,pm),e(pm,Lre),e(Lre,BQe),e(pm,IQe),e(pm,eS),e(eS,NQe),e(pm,qQe),e(A,jQe),e(A,_m),e(_m,xre),e(xre,DQe),e(_m,GQe),e(_m,oS),e(oS,OQe),e(_m,VQe),e(A,XQe),e(A,um),e(um,$re),e($re,zQe),e(um,WQe),e(um,rS),e(rS,QQe),e(um,HQe),e(A,UQe),e(A,bm),e(bm,kre),e(kre,JQe),e(bm,YQe),e(bm,tS),e(tS,KQe),e(bm,ZQe),e(A,eHe),e(A,vm),e(vm,Sre),e(Sre,oHe),e(vm,rHe),e(vm,aS),e(aS,tHe),e(vm,aHe),e(A,nHe),e(A,Fm),e(Fm,Rre),e(Rre,sHe),e(Fm,lHe),e(Fm,nS),e(nS,iHe),e(Fm,dHe),e(A,cHe),e(A,Tm),e(Tm,Pre),e(Pre,fHe),e(Tm,mHe),e(Tm,sS),e(sS,gHe),e(Tm,hHe),e(A,pHe),e(A,Mm),e(Mm,Bre),e(Bre,_He),e(Mm,uHe),e(Mm,lS),e(lS,bHe),e(Mm,vHe),e(A,FHe),e(A,Em),e(Em,Ire),e(Ire,THe),e(Em,MHe),e(Em,iS),e(iS,EHe),e(Em,CHe),e(A,wHe),e(A,Cm),e(Cm,Nre),e(Nre,AHe),e(Cm,yHe),e(Cm,dS),e(dS,LHe),e(Cm,xHe),e(A,$He),e(A,wm),e(wm,qre),e(qre,kHe),e(wm,SHe),e(wm,cS),e(cS,RHe),e(wm,PHe),e(A,BHe),e(A,Am),e(Am,jre),e(jre,IHe),e(Am,NHe),e(Am,fS),e(fS,qHe),e(Am,jHe),e(A,DHe),e(A,ym),e(ym,Dre),e(Dre,GHe),e(ym,OHe),e(ym,mS),e(mS,VHe),e(ym,XHe),e(A,zHe),e(A,Lm),e(Lm,Gre),e(Gre,WHe),e(Lm,QHe),e(Lm,gS),e(gS,HHe),e(Lm,UHe),e(A,JHe),e(A,xm),e(xm,Ore),e(Ore,YHe),e(xm,KHe),e(xm,hS),e(hS,ZHe),e(xm,eUe),e(A,oUe),e(A,$m),e($m,Vre),e(Vre,rUe),e($m,tUe),e($m,pS),e(pS,aUe),e($m,nUe),e(A,sUe),e(A,km),e(km,Xre),e(Xre,lUe),e(km,iUe),e(km,_S),e(_S,dUe),e(km,cUe),e(A,fUe),e(A,Sm),e(Sm,zre),e(zre,mUe),e(Sm,gUe),e(Sm,uS),e(uS,hUe),e(Sm,pUe),e(A,_Ue),e(A,Rm),e(Rm,Wre),e(Wre,uUe),e(Rm,bUe),e(Rm,bS),e(bS,vUe),e(Rm,FUe),e(A,TUe),e(A,Pm),e(Pm,Qre),e(Qre,MUe),e(Pm,EUe),e(Pm,vS),e(vS,CUe),e(Pm,wUe),e(A,AUe),e(A,Bm),e(Bm,Hre),e(Hre,yUe),e(Bm,LUe),e(Bm,FS),e(FS,xUe),e(Bm,$Ue),e(A,kUe),e(A,Im),e(Im,Ure),e(Ure,SUe),e(Im,RUe),e(Im,TS),e(TS,PUe),e(Im,BUe),e(A,IUe),e(A,Nm),e(Nm,Jre),e(Jre,NUe),e(Nm,qUe),e(Nm,MS),e(MS,jUe),e(Nm,DUe),e(A,GUe),e(A,qm),e(qm,Yre),e(Yre,OUe),e(qm,VUe),e(qm,ES),e(ES,XUe),e(qm,zUe),e(A,WUe),e(A,jm),e(jm,Kre),e(Kre,QUe),e(jm,HUe),e(jm,CS),e(CS,UUe),e(jm,JUe),e(A,YUe),e(A,Dm),e(Dm,Zre),e(Zre,KUe),e(Dm,ZUe),e(Dm,wS),e(wS,eJe),e(Dm,oJe),e(A,rJe),e(A,Gm),e(Gm,ete),e(ete,tJe),e(Gm,aJe),e(Gm,AS),e(AS,nJe),e(Gm,sJe),e(A,lJe),e(A,Om),e(Om,ote),e(ote,iJe),e(Om,dJe),e(Om,yS),e(yS,cJe),e(Om,fJe),e(A,mJe),e(A,Vm),e(Vm,rte),e(rte,gJe),e(Vm,hJe),e(Vm,LS),e(LS,pJe),e(Vm,_Je),e(A,uJe),e(A,Xm),e(Xm,tte),e(tte,bJe),e(Xm,vJe),e(Xm,xS),e(xS,FJe),e(Xm,TJe),e(A,MJe),e(A,zm),e(zm,ate),e(ate,EJe),e(zm,CJe),e(zm,$S),e($S,wJe),e(zm,AJe),e(A,yJe),e(A,Wm),e(Wm,nte),e(nte,LJe),e(Wm,xJe),e(Wm,kS),e(kS,$Je),e(Wm,kJe),e(A,SJe),e(A,Qm),e(Qm,ste),e(ste,RJe),e(Qm,PJe),e(Qm,SS),e(SS,BJe),e(Qm,IJe),e(A,NJe),e(A,Hm),e(Hm,lte),e(lte,qJe),e(Hm,jJe),e(Hm,RS),e(RS,DJe),e(Hm,GJe),e(A,OJe),e(A,Um),e(Um,ite),e(ite,VJe),e(Um,XJe),e(Um,PS),e(PS,zJe),e(Um,WJe),e(A,QJe),e(A,Jm),e(Jm,dte),e(dte,HJe),e(Jm,UJe),e(Jm,BS),e(BS,JJe),e(Jm,YJe),e(A,KJe),e(A,Ym),e(Ym,cte),e(cte,ZJe),e(Ym,eYe),e(Ym,IS),e(IS,oYe),e(Ym,rYe),e(A,tYe),e(A,Km),e(Km,fte),e(fte,aYe),e(Km,nYe),e(Km,NS),e(NS,sYe),e(Km,lYe),e(A,iYe),e(A,Zm),e(Zm,mte),e(mte,dYe),e(Zm,cYe),e(Zm,qS),e(qS,fYe),e(Zm,mYe),e(A,gYe),e(A,eg),e(eg,gte),e(gte,hYe),e(eg,pYe),e(eg,jS),e(jS,_Ye),e(eg,uYe),e(A,bYe),e(A,og),e(og,hte),e(hte,vYe),e(og,FYe),e(og,DS),e(DS,TYe),e(og,MYe),e(A,EYe),e(A,rg),e(rg,pte),e(pte,CYe),e(rg,wYe),e(rg,GS),e(GS,AYe),e(rg,yYe),e(A,LYe),e(A,tg),e(tg,_te),e(_te,xYe),e(tg,$Ye),e(tg,OS),e(OS,kYe),e(tg,SYe),e(A,RYe),e(A,ag),e(ag,ute),e(ute,PYe),e(ag,BYe),e(ag,VS),e(VS,IYe),e(ag,NYe),e(A,qYe),e(A,ng),e(ng,bte),e(bte,jYe),e(ng,DYe),e(ng,XS),e(XS,GYe),e(ng,OYe),e(A,VYe),e(A,sg),e(sg,vte),e(vte,XYe),e(sg,zYe),e(sg,zS),e(zS,WYe),e(sg,QYe),e(A,HYe),e(A,lg),e(lg,Fte),e(Fte,UYe),e(lg,JYe),e(lg,WS),e(WS,YYe),e(lg,KYe),e(A,ZYe),e(A,ig),e(ig,Tte),e(Tte,eKe),e(ig,oKe),e(ig,QS),e(QS,rKe),e(ig,tKe),e(A,aKe),e(A,dg),e(dg,Mte),e(Mte,nKe),e(dg,sKe),e(dg,HS),e(HS,lKe),e(dg,iKe),e(A,dKe),e(A,cg),e(cg,Ete),e(Ete,cKe),e(cg,fKe),e(cg,US),e(US,mKe),e(cg,gKe),e(A,hKe),e(A,fg),e(fg,Cte),e(Cte,pKe),e(fg,_Ke),e(fg,JS),e(JS,uKe),e(fg,bKe),e(A,vKe),e(A,mg),e(mg,wte),e(wte,FKe),e(mg,TKe),e(mg,YS),e(YS,MKe),e(mg,EKe),e(A,CKe),e(A,gg),e(gg,Ate),e(Ate,wKe),e(gg,AKe),e(gg,KS),e(KS,yKe),e(gg,LKe),e(A,xKe),e(A,hg),e(hg,yte),e(yte,$Ke),e(hg,kKe),e(hg,ZS),e(ZS,SKe),e(hg,RKe),e(A,PKe),e(A,pg),e(pg,Lte),e(Lte,BKe),e(pg,IKe),e(pg,eR),e(eR,NKe),e(pg,qKe),e(A,jKe),e(A,_g),e(_g,xte),e(xte,DKe),e(_g,GKe),e(_g,oR),e(oR,OKe),e(_g,VKe),e(A,XKe),e(A,ug),e(ug,$te),e($te,zKe),e(ug,WKe),e(ug,rR),e(rR,QKe),e(ug,HKe),e(A,UKe),e(A,bg),e(bg,kte),e(kte,JKe),e(bg,YKe),e(bg,tR),e(tR,KKe),e(bg,ZKe),e(A,eZe),e(A,vg),e(vg,Ste),e(Ste,oZe),e(vg,rZe),e(vg,aR),e(aR,tZe),e(vg,aZe),e(A,nZe),e(A,Fg),e(Fg,Rte),e(Rte,sZe),e(Fg,lZe),e(Fg,nR),e(nR,iZe),e(Fg,dZe),e(A,cZe),e(A,Tg),e(Tg,Pte),e(Pte,fZe),e(Tg,mZe),e(Tg,sR),e(sR,gZe),e(Tg,hZe),e(A,pZe),e(A,Mg),e(Mg,Bte),e(Bte,_Ze),e(Mg,uZe),e(Mg,lR),e(lR,bZe),e(Mg,vZe),e(A,FZe),e(A,Eg),e(Eg,Ite),e(Ite,TZe),e(Eg,MZe),e(Eg,iR),e(iR,EZe),e(Eg,CZe),e(A,wZe),e(A,Cg),e(Cg,Nte),e(Nte,AZe),e(Cg,yZe),e(Cg,dR),e(dR,LZe),e(Cg,xZe),e(Er,$Ze),M(wg,Er,null),e(Co,kZe),e(Co,Ag),M(VA,Ag,null),e(Ag,SZe),e(Ag,qte),e(qte,RZe),b(f,Oqe,u),b(f,Mi,u),e(Mi,yg),e(yg,jte),M(XA,jte,null),e(Mi,PZe),e(Mi,Dte),e(Dte,BZe),b(f,Vqe,u),b(f,wo,u),M(zA,wo,null),e(wo,IZe),e(wo,WA),e(WA,NZe),e(WA,cR),e(cR,qZe),e(WA,jZe),e(wo,DZe),e(wo,QA),e(QA,GZe),e(QA,Gte),e(Gte,OZe),e(QA,VZe),e(wo,XZe),e(wo,Cr),M(HA,Cr,null),e(Cr,zZe),e(Cr,Ote),e(Ote,WZe),e(Cr,QZe),e(Cr,Aa),e(Aa,HZe),e(Aa,Vte),e(Vte,UZe),e(Aa,JZe),e(Aa,Xte),e(Xte,YZe),e(Aa,KZe),e(Aa,zte),e(zte,ZZe),e(Aa,eeo),e(Cr,oeo),e(Cr,k),e(k,Sn),e(Sn,Wte),e(Wte,reo),e(Sn,teo),e(Sn,fR),e(fR,aeo),e(Sn,neo),e(Sn,mR),e(mR,seo),e(Sn,leo),e(k,ieo),e(k,Rn),e(Rn,Qte),e(Qte,deo),e(Rn,ceo),e(Rn,gR),e(gR,feo),e(Rn,meo),e(Rn,hR),e(hR,geo),e(Rn,heo),e(k,peo),e(k,Pn),e(Pn,Hte),e(Hte,_eo),e(Pn,ueo),e(Pn,pR),e(pR,beo),e(Pn,veo),e(Pn,_R),e(_R,Feo),e(Pn,Teo),e(k,Meo),e(k,Lg),e(Lg,Ute),e(Ute,Eeo),e(Lg,Ceo),e(Lg,uR),e(uR,weo),e(Lg,Aeo),e(k,yeo),e(k,Bn),e(Bn,Jte),e(Jte,Leo),e(Bn,xeo),e(Bn,bR),e(bR,$eo),e(Bn,keo),e(Bn,vR),e(vR,Seo),e(Bn,Reo),e(k,Peo),e(k,xg),e(xg,Yte),e(Yte,Beo),e(xg,Ieo),e(xg,FR),e(FR,Neo),e(xg,qeo),e(k,jeo),e(k,$g),e($g,Kte),e(Kte,Deo),e($g,Geo),e($g,TR),e(TR,Oeo),e($g,Veo),e(k,Xeo),e(k,kg),e(kg,Zte),e(Zte,zeo),e(kg,Weo),e(kg,MR),e(MR,Qeo),e(kg,Heo),e(k,Ueo),e(k,In),e(In,eae),e(eae,Jeo),e(In,Yeo),e(In,ER),e(ER,Keo),e(In,Zeo),e(In,CR),e(CR,eoo),e(In,ooo),e(k,roo),e(k,Nn),e(Nn,oae),e(oae,too),e(Nn,aoo),e(Nn,wR),e(wR,noo),e(Nn,soo),e(Nn,AR),e(AR,loo),e(Nn,ioo),e(k,doo),e(k,qn),e(qn,rae),e(rae,coo),e(qn,foo),e(qn,yR),e(yR,moo),e(qn,goo),e(qn,LR),e(LR,hoo),e(qn,poo),e(k,_oo),e(k,Sg),e(Sg,tae),e(tae,uoo),e(Sg,boo),e(Sg,xR),e(xR,voo),e(Sg,Foo),e(k,Too),e(k,Rg),e(Rg,aae),e(aae,Moo),e(Rg,Eoo),e(Rg,$R),e($R,Coo),e(Rg,woo),e(k,Aoo),e(k,jn),e(jn,nae),e(nae,yoo),e(jn,Loo),e(jn,kR),e(kR,xoo),e(jn,$oo),e(jn,SR),e(SR,koo),e(jn,Soo),e(k,Roo),e(k,Pg),e(Pg,sae),e(sae,Poo),e(Pg,Boo),e(Pg,RR),e(RR,Ioo),e(Pg,Noo),e(k,qoo),e(k,Dn),e(Dn,lae),e(lae,joo),e(Dn,Doo),e(Dn,PR),e(PR,Goo),e(Dn,Ooo),e(Dn,BR),e(BR,Voo),e(Dn,Xoo),e(k,zoo),e(k,Gn),e(Gn,iae),e(iae,Woo),e(Gn,Qoo),e(Gn,IR),e(IR,Hoo),e(Gn,Uoo),e(Gn,NR),e(NR,Joo),e(Gn,Yoo),e(k,Koo),e(k,On),e(On,dae),e(dae,Zoo),e(On,ero),e(On,qR),e(qR,oro),e(On,rro),e(On,jR),e(jR,tro),e(On,aro),e(k,nro),e(k,Bg),e(Bg,cae),e(cae,sro),e(Bg,lro),e(Bg,DR),e(DR,iro),e(Bg,dro),e(k,cro),e(k,Vn),e(Vn,fae),e(fae,fro),e(Vn,mro),e(Vn,GR),e(GR,gro),e(Vn,hro),e(Vn,OR),e(OR,pro),e(Vn,_ro),e(k,uro),e(k,Xn),e(Xn,mae),e(mae,bro),e(Xn,vro),e(Xn,VR),e(VR,Fro),e(Xn,Tro),e(Xn,XR),e(XR,Mro),e(Xn,Ero),e(k,Cro),e(k,zn),e(zn,gae),e(gae,wro),e(zn,Aro),e(zn,zR),e(zR,yro),e(zn,Lro),e(zn,WR),e(WR,xro),e(zn,$ro),e(k,kro),e(k,Wn),e(Wn,hae),e(hae,Sro),e(Wn,Rro),e(Wn,QR),e(QR,Pro),e(Wn,Bro),e(Wn,HR),e(HR,Iro),e(Wn,Nro),e(k,qro),e(k,Qn),e(Qn,pae),e(pae,jro),e(Qn,Dro),e(Qn,UR),e(UR,Gro),e(Qn,Oro),e(Qn,JR),e(JR,Vro),e(Qn,Xro),e(k,zro),e(k,Hn),e(Hn,_ae),e(_ae,Wro),e(Hn,Qro),e(Hn,YR),e(YR,Hro),e(Hn,Uro),e(Hn,KR),e(KR,Jro),e(Hn,Yro),e(k,Kro),e(k,Ig),e(Ig,uae),e(uae,Zro),e(Ig,eto),e(Ig,ZR),e(ZR,oto),e(Ig,rto),e(k,tto),e(k,Un),e(Un,bae),e(bae,ato),e(Un,nto),e(Un,eP),e(eP,sto),e(Un,lto),e(Un,oP),e(oP,ito),e(Un,dto),e(k,cto),e(k,Ng),e(Ng,vae),e(vae,fto),e(Ng,mto),e(Ng,rP),e(rP,gto),e(Ng,hto),e(k,pto),e(k,Jn),e(Jn,Fae),e(Fae,_to),e(Jn,uto),e(Jn,tP),e(tP,bto),e(Jn,vto),e(Jn,aP),e(aP,Fto),e(Jn,Tto),e(k,Mto),e(k,Yn),e(Yn,Tae),e(Tae,Eto),e(Yn,Cto),e(Yn,nP),e(nP,wto),e(Yn,Ato),e(Yn,sP),e(sP,yto),e(Yn,Lto),e(k,xto),e(k,Kn),e(Kn,Mae),e(Mae,$to),e(Kn,kto),e(Kn,lP),e(lP,Sto),e(Kn,Rto),e(Kn,iP),e(iP,Pto),e(Kn,Bto),e(k,Ito),e(k,qg),e(qg,Eae),e(Eae,Nto),e(qg,qto),e(qg,dP),e(dP,jto),e(qg,Dto),e(k,Gto),e(k,Zn),e(Zn,Cae),e(Cae,Oto),e(Zn,Vto),e(Zn,cP),e(cP,Xto),e(Zn,zto),e(Zn,fP),e(fP,Wto),e(Zn,Qto),e(k,Hto),e(k,es),e(es,wae),e(wae,Uto),e(es,Jto),e(es,mP),e(mP,Yto),e(es,Kto),e(es,gP),e(gP,Zto),e(es,eao),e(k,oao),e(k,jg),e(jg,Aae),e(Aae,rao),e(jg,tao),e(jg,hP),e(hP,aao),e(jg,nao),e(k,sao),e(k,os),e(os,yae),e(yae,lao),e(os,iao),e(os,pP),e(pP,dao),e(os,cao),e(os,_P),e(_P,fao),e(os,mao),e(k,gao),e(k,rs),e(rs,Lae),e(Lae,hao),e(rs,pao),e(rs,uP),e(uP,_ao),e(rs,uao),e(rs,bP),e(bP,bao),e(rs,vao),e(k,Fao),e(k,ts),e(ts,xae),e(xae,Tao),e(ts,Mao),e(ts,vP),e(vP,Eao),e(ts,Cao),e(ts,FP),e(FP,wao),e(ts,Aao),e(k,yao),e(k,as),e(as,$ae),e($ae,Lao),e(as,xao),e(as,TP),e(TP,$ao),e(as,kao),e(as,MP),e(MP,Sao),e(as,Rao),e(k,Pao),e(k,ns),e(ns,kae),e(kae,Bao),e(ns,Iao),e(ns,EP),e(EP,Nao),e(ns,qao),e(ns,CP),e(CP,jao),e(ns,Dao),e(k,Gao),e(k,ss),e(ss,Sae),e(Sae,Oao),e(ss,Vao),e(ss,wP),e(wP,Xao),e(ss,zao),e(ss,AP),e(AP,Wao),e(ss,Qao),e(k,Hao),e(k,ls),e(ls,Rae),e(Rae,Uao),e(ls,Jao),e(ls,yP),e(yP,Yao),e(ls,Kao),e(ls,LP),e(LP,Zao),e(ls,eno),e(k,ono),e(k,Dg),e(Dg,Pae),e(Pae,rno),e(Dg,tno),e(Dg,xP),e(xP,ano),e(Dg,nno),e(k,sno),e(k,is),e(is,Bae),e(Bae,lno),e(is,ino),e(is,$P),e($P,dno),e(is,cno),e(is,kP),e(kP,fno),e(is,mno),e(k,gno),e(k,Gg),e(Gg,Iae),e(Iae,hno),e(Gg,pno),e(Gg,SP),e(SP,_no),e(Gg,uno),e(k,bno),e(k,Og),e(Og,Nae),e(Nae,vno),e(Og,Fno),e(Og,RP),e(RP,Tno),e(Og,Mno),e(k,Eno),e(k,ds),e(ds,qae),e(qae,Cno),e(ds,wno),e(ds,PP),e(PP,Ano),e(ds,yno),e(ds,BP),e(BP,Lno),e(ds,xno),e(k,$no),e(k,cs),e(cs,jae),e(jae,kno),e(cs,Sno),e(cs,IP),e(IP,Rno),e(cs,Pno),e(cs,NP),e(NP,Bno),e(cs,Ino),e(k,Nno),e(k,fs),e(fs,Dae),e(Dae,qno),e(fs,jno),e(fs,qP),e(qP,Dno),e(fs,Gno),e(fs,jP),e(jP,Ono),e(fs,Vno),e(k,Xno),e(k,Vg),e(Vg,Gae),e(Gae,zno),e(Vg,Wno),e(Vg,DP),e(DP,Qno),e(Vg,Hno),e(k,Uno),e(k,ms),e(ms,Oae),e(Oae,Jno),e(ms,Yno),e(ms,GP),e(GP,Kno),e(ms,Zno),e(ms,OP),e(OP,eso),e(ms,oso),e(k,rso),e(k,gs),e(gs,Vae),e(Vae,tso),e(gs,aso),e(gs,VP),e(VP,nso),e(gs,sso),e(gs,XP),e(XP,lso),e(gs,iso),e(k,dso),e(k,hs),e(hs,Xae),e(Xae,cso),e(hs,fso),e(hs,zP),e(zP,mso),e(hs,gso),e(hs,WP),e(WP,hso),e(hs,pso),e(k,_so),e(k,ps),e(ps,zae),e(zae,uso),e(ps,bso),e(ps,QP),e(QP,vso),e(ps,Fso),e(ps,HP),e(HP,Tso),e(ps,Mso),e(k,Eso),e(k,_s),e(_s,Wae),e(Wae,Cso),e(_s,wso),e(_s,UP),e(UP,Aso),e(_s,yso),e(_s,JP),e(JP,Lso),e(_s,xso),e(k,$so),e(k,Xg),e(Xg,Qae),e(Qae,kso),e(Xg,Sso),e(Xg,YP),e(YP,Rso),e(Xg,Pso),e(k,Bso),e(k,us),e(us,Hae),e(Hae,Iso),e(us,Nso),e(us,KP),e(KP,qso),e(us,jso),e(us,ZP),e(ZP,Dso),e(us,Gso),e(k,Oso),e(k,zg),e(zg,Uae),e(Uae,Vso),e(zg,Xso),e(zg,eB),e(eB,zso),e(zg,Wso),e(k,Qso),e(k,Wg),e(Wg,Jae),e(Jae,Hso),e(Wg,Uso),e(Wg,oB),e(oB,Jso),e(Wg,Yso),e(k,Kso),e(k,Qg),e(Qg,Yae),e(Yae,Zso),e(Qg,elo),e(Qg,rB),e(rB,olo),e(Qg,rlo),e(k,tlo),e(k,Hg),e(Hg,Kae),e(Kae,alo),e(Hg,nlo),e(Hg,tB),e(tB,slo),e(Hg,llo),e(k,ilo),e(k,bs),e(bs,Zae),e(Zae,dlo),e(bs,clo),e(bs,aB),e(aB,flo),e(bs,mlo),e(bs,nB),e(nB,glo),e(bs,hlo),e(k,plo),e(k,Ug),e(Ug,ene),e(ene,_lo),e(Ug,ulo),e(Ug,sB),e(sB,blo),e(Ug,vlo),e(k,Flo),e(k,vs),e(vs,one),e(one,Tlo),e(vs,Mlo),e(vs,lB),e(lB,Elo),e(vs,Clo),e(vs,iB),e(iB,wlo),e(vs,Alo),e(k,ylo),e(k,Fs),e(Fs,rne),e(rne,Llo),e(Fs,xlo),e(Fs,dB),e(dB,$lo),e(Fs,klo),e(Fs,cB),e(cB,Slo),e(Fs,Rlo),e(k,Plo),e(k,Ts),e(Ts,tne),e(tne,Blo),e(Ts,Ilo),e(Ts,fB),e(fB,Nlo),e(Ts,qlo),e(Ts,mB),e(mB,jlo),e(Ts,Dlo),e(k,Glo),e(k,Ms),e(Ms,ane),e(ane,Olo),e(Ms,Vlo),e(Ms,gB),e(gB,Xlo),e(Ms,zlo),e(Ms,hB),e(hB,Wlo),e(Ms,Qlo),e(k,Hlo),e(k,Es),e(Es,nne),e(nne,Ulo),e(Es,Jlo),e(Es,pB),e(pB,Ylo),e(Es,Klo),e(Es,_B),e(_B,Zlo),e(Es,eio),e(k,oio),e(k,Cs),e(Cs,sne),e(sne,rio),e(Cs,tio),e(Cs,uB),e(uB,aio),e(Cs,nio),e(Cs,bB),e(bB,sio),e(Cs,lio),e(k,iio),e(k,Jg),e(Jg,lne),e(lne,dio),e(Jg,cio),e(Jg,vB),e(vB,fio),e(Jg,mio),e(k,gio),e(k,Yg),e(Yg,ine),e(ine,hio),e(Yg,pio),e(Yg,FB),e(FB,_io),e(Yg,uio),e(k,bio),e(k,ws),e(ws,dne),e(dne,vio),e(ws,Fio),e(ws,TB),e(TB,Tio),e(ws,Mio),e(ws,MB),e(MB,Eio),e(ws,Cio),e(k,wio),e(k,As),e(As,cne),e(cne,Aio),e(As,yio),e(As,EB),e(EB,Lio),e(As,xio),e(As,CB),e(CB,$io),e(As,kio),e(k,Sio),e(k,ys),e(ys,fne),e(fne,Rio),e(ys,Pio),e(ys,wB),e(wB,Bio),e(ys,Iio),e(ys,AB),e(AB,Nio),e(ys,qio),e(k,jio),e(k,Kg),e(Kg,mne),e(mne,Dio),e(Kg,Gio),e(Kg,yB),e(yB,Oio),e(Kg,Vio),e(k,Xio),e(k,Zg),e(Zg,gne),e(gne,zio),e(Zg,Wio),e(Zg,LB),e(LB,Qio),e(Zg,Hio),e(k,Uio),e(k,eh),e(eh,hne),e(hne,Jio),e(eh,Yio),e(eh,xB),e(xB,Kio),e(eh,Zio),e(k,edo),e(k,Ls),e(Ls,pne),e(pne,odo),e(Ls,rdo),e(Ls,$B),e($B,tdo),e(Ls,ado),e(Ls,kB),e(kB,ndo),e(Ls,sdo),e(k,ldo),e(k,oh),e(oh,_ne),e(_ne,ido),e(oh,ddo),e(oh,SB),e(SB,cdo),e(oh,fdo),e(k,mdo),e(k,rh),e(rh,une),e(une,gdo),e(rh,hdo),e(rh,RB),e(RB,pdo),e(rh,_do),e(k,udo),e(k,th),e(th,bne),e(bne,bdo),e(th,vdo),e(th,PB),e(PB,Fdo),e(th,Tdo),e(k,Mdo),e(k,xs),e(xs,vne),e(vne,Edo),e(xs,Cdo),e(xs,BB),e(BB,wdo),e(xs,Ado),e(xs,IB),e(IB,ydo),e(xs,Ldo),e(k,xdo),e(k,ah),e(ah,Fne),e(Fne,$do),e(ah,kdo),e(ah,NB),e(NB,Sdo),e(ah,Rdo),e(k,Pdo),e(k,nh),e(nh,Tne),e(Tne,Bdo),e(nh,Ido),e(nh,qB),e(qB,Ndo),e(nh,qdo),e(k,jdo),e(k,$s),e($s,Mne),e(Mne,Ddo),e($s,Gdo),e($s,jB),e(jB,Odo),e($s,Vdo),e($s,DB),e(DB,Xdo),e($s,zdo),e(k,Wdo),e(k,ks),e(ks,Ene),e(Ene,Qdo),e(ks,Hdo),e(ks,GB),e(GB,Udo),e(ks,Jdo),e(ks,OB),e(OB,Ydo),e(ks,Kdo),e(k,Zdo),e(k,Ss),e(Ss,Cne),e(Cne,eco),e(Ss,oco),e(Ss,VB),e(VB,rco),e(Ss,tco),e(Ss,XB),e(XB,aco),e(Ss,nco),e(k,sco),e(k,Rs),e(Rs,wne),e(wne,lco),e(Rs,ico),e(Rs,zB),e(zB,dco),e(Rs,cco),e(Rs,WB),e(WB,fco),e(Rs,mco),e(Cr,gco),M(sh,Cr,null),e(wo,hco),e(wo,lh),M(UA,lh,null),e(lh,pco),e(lh,Ane),e(Ane,_co),b(f,Xqe,u),b(f,Ei,u),e(Ei,ih),e(ih,yne),M(JA,yne,null),e(Ei,uco),e(Ei,Lne),e(Lne,bco),b(f,zqe,u),b(f,Ao,u),M(YA,Ao,null),e(Ao,vco),e(Ao,KA),e(KA,Fco),e(KA,QB),e(QB,Tco),e(KA,Mco),e(Ao,Eco),e(Ao,ZA),e(ZA,Cco),e(ZA,xne),e(xne,wco),e(ZA,Aco),e(Ao,yco),e(Ao,He),M(e6,He,null),e(He,Lco),e(He,$ne),e($ne,xco),e(He,$co),e(He,ya),e(ya,kco),e(ya,kne),e(kne,Sco),e(ya,Rco),e(ya,Sne),e(Sne,Pco),e(ya,Bco),e(ya,Rne),e(Rne,Ico),e(ya,Nco),e(He,qco),e(He,Y),e(Y,dh),e(dh,Pne),e(Pne,jco),e(dh,Dco),e(dh,HB),e(HB,Gco),e(dh,Oco),e(Y,Vco),e(Y,ch),e(ch,Bne),e(Bne,Xco),e(ch,zco),e(ch,UB),e(UB,Wco),e(ch,Qco),e(Y,Hco),e(Y,fh),e(fh,Ine),e(Ine,Uco),e(fh,Jco),e(fh,JB),e(JB,Yco),e(fh,Kco),e(Y,Zco),e(Y,mh),e(mh,Nne),e(Nne,efo),e(mh,ofo),e(mh,YB),e(YB,rfo),e(mh,tfo),e(Y,afo),e(Y,gh),e(gh,qne),e(qne,nfo),e(gh,sfo),e(gh,KB),e(KB,lfo),e(gh,ifo),e(Y,dfo),e(Y,hh),e(hh,jne),e(jne,cfo),e(hh,ffo),e(hh,ZB),e(ZB,mfo),e(hh,gfo),e(Y,hfo),e(Y,ph),e(ph,Dne),e(Dne,pfo),e(ph,_fo),e(ph,eI),e(eI,ufo),e(ph,bfo),e(Y,vfo),e(Y,_h),e(_h,Gne),e(Gne,Ffo),e(_h,Tfo),e(_h,oI),e(oI,Mfo),e(_h,Efo),e(Y,Cfo),e(Y,uh),e(uh,One),e(One,wfo),e(uh,Afo),e(uh,rI),e(rI,yfo),e(uh,Lfo),e(Y,xfo),e(Y,bh),e(bh,Vne),e(Vne,$fo),e(bh,kfo),e(bh,tI),e(tI,Sfo),e(bh,Rfo),e(Y,Pfo),e(Y,vh),e(vh,Xne),e(Xne,Bfo),e(vh,Ifo),e(vh,aI),e(aI,Nfo),e(vh,qfo),e(Y,jfo),e(Y,Fh),e(Fh,zne),e(zne,Dfo),e(Fh,Gfo),e(Fh,nI),e(nI,Ofo),e(Fh,Vfo),e(Y,Xfo),e(Y,Th),e(Th,Wne),e(Wne,zfo),e(Th,Wfo),e(Th,sI),e(sI,Qfo),e(Th,Hfo),e(Y,Ufo),e(Y,Mh),e(Mh,Qne),e(Qne,Jfo),e(Mh,Yfo),e(Mh,lI),e(lI,Kfo),e(Mh,Zfo),e(Y,emo),e(Y,Eh),e(Eh,Hne),e(Hne,omo),e(Eh,rmo),e(Eh,iI),e(iI,tmo),e(Eh,amo),e(Y,nmo),e(Y,Ch),e(Ch,Une),e(Une,smo),e(Ch,lmo),e(Ch,dI),e(dI,imo),e(Ch,dmo),e(Y,cmo),e(Y,wh),e(wh,Jne),e(Jne,fmo),e(wh,mmo),e(wh,cI),e(cI,gmo),e(wh,hmo),e(Y,pmo),e(Y,Ah),e(Ah,Yne),e(Yne,_mo),e(Ah,umo),e(Ah,fI),e(fI,bmo),e(Ah,vmo),e(Y,Fmo),e(Y,yh),e(yh,Kne),e(Kne,Tmo),e(yh,Mmo),e(yh,mI),e(mI,Emo),e(yh,Cmo),e(Y,wmo),e(Y,Lh),e(Lh,Zne),e(Zne,Amo),e(Lh,ymo),e(Lh,gI),e(gI,Lmo),e(Lh,xmo),e(Y,$mo),e(Y,xh),e(xh,ese),e(ese,kmo),e(xh,Smo),e(xh,hI),e(hI,Rmo),e(xh,Pmo),e(Y,Bmo),e(Y,$h),e($h,ose),e(ose,Imo),e($h,Nmo),e($h,pI),e(pI,qmo),e($h,jmo),e(Y,Dmo),e(Y,kh),e(kh,rse),e(rse,Gmo),e(kh,Omo),e(kh,_I),e(_I,Vmo),e(kh,Xmo),e(Y,zmo),e(Y,Sh),e(Sh,tse),e(tse,Wmo),e(Sh,Qmo),e(Sh,uI),e(uI,Hmo),e(Sh,Umo),e(Y,Jmo),e(Y,Rh),e(Rh,ase),e(ase,Ymo),e(Rh,Kmo),e(Rh,bI),e(bI,Zmo),e(Rh,ego),e(Y,ogo),e(Y,Ph),e(Ph,nse),e(nse,rgo),e(Ph,tgo),e(Ph,vI),e(vI,ago),e(Ph,ngo),e(Y,sgo),e(Y,Bh),e(Bh,sse),e(sse,lgo),e(Bh,igo),e(Bh,FI),e(FI,dgo),e(Bh,cgo),e(Y,fgo),e(Y,Ih),e(Ih,lse),e(lse,mgo),e(Ih,ggo),e(Ih,TI),e(TI,hgo),e(Ih,pgo),e(Y,_go),e(Y,Nh),e(Nh,ise),e(ise,ugo),e(Nh,bgo),e(Nh,MI),e(MI,vgo),e(Nh,Fgo),e(Y,Tgo),e(Y,qh),e(qh,dse),e(dse,Mgo),e(qh,Ego),e(qh,EI),e(EI,Cgo),e(qh,wgo),e(He,Ago),M(jh,He,null),e(He,ygo),M(Dh,He,null),e(Ao,Lgo),e(Ao,Gh),M(o6,Gh,null),e(Gh,xgo),e(Gh,cse),e(cse,$go),b(f,Wqe,u),b(f,Ci,u),e(Ci,Oh),e(Oh,fse),M(r6,fse,null),e(Ci,kgo),e(Ci,mse),e(mse,Sgo),b(f,Qqe,u),b(f,yo,u),M(t6,yo,null),e(yo,Rgo),e(yo,a6),e(a6,Pgo),e(a6,CI),e(CI,Bgo),e(a6,Igo),e(yo,Ngo),e(yo,n6),e(n6,qgo),e(n6,gse),e(gse,jgo),e(n6,Dgo),e(yo,Ggo),e(yo,Ue),M(s6,Ue,null),e(Ue,Ogo),e(Ue,hse),e(hse,Vgo),e(Ue,Xgo),e(Ue,wi),e(wi,zgo),e(wi,pse),e(pse,Wgo),e(wi,Qgo),e(wi,_se),e(_se,Hgo),e(wi,Ugo),e(Ue,Jgo),e(Ue,he),e(he,Vh),e(Vh,use),e(use,Ygo),e(Vh,Kgo),e(Vh,wI),e(wI,Zgo),e(Vh,eho),e(he,oho),e(he,Xh),e(Xh,bse),e(bse,rho),e(Xh,tho),e(Xh,vse),e(vse,aho),e(Xh,nho),e(he,sho),e(he,zh),e(zh,Fse),e(Fse,lho),e(zh,iho),e(zh,AI),e(AI,dho),e(zh,cho),e(he,fho),e(he,Wh),e(Wh,Tse),e(Tse,mho),e(Wh,gho),e(Wh,yI),e(yI,hho),e(Wh,pho),e(he,_ho),e(he,Qh),e(Qh,Mse),e(Mse,uho),e(Qh,bho),e(Qh,LI),e(LI,vho),e(Qh,Fho),e(he,Tho),e(he,Hh),e(Hh,Ese),e(Ese,Mho),e(Hh,Eho),e(Hh,xI),e(xI,Cho),e(Hh,who),e(he,Aho),e(he,Uh),e(Uh,Cse),e(Cse,yho),e(Uh,Lho),e(Uh,$I),e($I,xho),e(Uh,$ho),e(he,kho),e(he,Jh),e(Jh,wse),e(wse,Sho),e(Jh,Rho),e(Jh,kI),e(kI,Pho),e(Jh,Bho),e(he,Iho),e(he,Yh),e(Yh,Ase),e(Ase,Nho),e(Yh,qho),e(Yh,SI),e(SI,jho),e(Yh,Dho),e(he,Gho),e(he,Kh),e(Kh,yse),e(yse,Oho),e(Kh,Vho),e(Kh,RI),e(RI,Xho),e(Kh,zho),e(he,Who),e(he,Zh),e(Zh,Lse),e(Lse,Qho),e(Zh,Hho),e(Zh,PI),e(PI,Uho),e(Zh,Jho),e(he,Yho),e(he,ep),e(ep,xse),e(xse,Kho),e(ep,Zho),e(ep,BI),e(BI,epo),e(ep,opo),e(he,rpo),e(he,op),e(op,$se),e($se,tpo),e(op,apo),e(op,II),e(II,npo),e(op,spo),e(he,lpo),e(he,rp),e(rp,kse),e(kse,ipo),e(rp,dpo),e(rp,NI),e(NI,cpo),e(rp,fpo),e(he,mpo),e(he,tp),e(tp,Sse),e(Sse,gpo),e(tp,hpo),e(tp,qI),e(qI,ppo),e(tp,_po),e(he,upo),e(he,ap),e(ap,Rse),e(Rse,bpo),e(ap,vpo),e(ap,jI),e(jI,Fpo),e(ap,Tpo),e(he,Mpo),e(he,np),e(np,Pse),e(Pse,Epo),e(np,Cpo),e(np,DI),e(DI,wpo),e(np,Apo),e(Ue,ypo),M(sp,Ue,null),e(Ue,Lpo),M(lp,Ue,null),e(yo,xpo),e(yo,ip),M(l6,ip,null),e(ip,$po),e(ip,Bse),e(Bse,kpo),b(f,Hqe,u),b(f,Ai,u),e(Ai,dp),e(dp,Ise),M(i6,Ise,null),e(Ai,Spo),e(Ai,Nse),e(Nse,Rpo),b(f,Uqe,u),b(f,Lo,u),M(d6,Lo,null),e(Lo,Ppo),e(Lo,yi),e(yi,Bpo),e(yi,GI),e(GI,Ipo),e(yi,Npo),e(yi,OI),e(OI,qpo),e(yi,jpo),e(Lo,Dpo),e(Lo,c6),e(c6,Gpo),e(c6,qse),e(qse,Opo),e(c6,Vpo),e(Lo,Xpo),e(Lo,tt),M(f6,tt,null),e(tt,zpo),e(tt,jse),e(jse,Wpo),e(tt,Qpo),e(tt,Li),e(Li,Hpo),e(Li,Dse),e(Dse,Upo),e(Li,Jpo),e(Li,VI),e(VI,Ypo),e(Li,Kpo),e(tt,Zpo),M(cp,tt,null),e(Lo,e_o),e(Lo,Je),M(m6,Je,null),e(Je,o_o),e(Je,Gse),e(Gse,r_o),e(Je,t_o),e(Je,La),e(La,a_o),e(La,Ose),e(Ose,n_o),e(La,s_o),e(La,Vse),e(Vse,l_o),e(La,i_o),e(La,Xse),e(Xse,d_o),e(La,c_o),e(Je,f_o),e(Je,x),e(x,fp),e(fp,zse),e(zse,m_o),e(fp,g_o),e(fp,XI),e(XI,h_o),e(fp,p_o),e(x,__o),e(x,mp),e(mp,Wse),e(Wse,u_o),e(mp,b_o),e(mp,zI),e(zI,v_o),e(mp,F_o),e(x,T_o),e(x,gp),e(gp,Qse),e(Qse,M_o),e(gp,E_o),e(gp,WI),e(WI,C_o),e(gp,w_o),e(x,A_o),e(x,hp),e(hp,Hse),e(Hse,y_o),e(hp,L_o),e(hp,QI),e(QI,x_o),e(hp,$_o),e(x,k_o),e(x,pp),e(pp,Use),e(Use,S_o),e(pp,R_o),e(pp,HI),e(HI,P_o),e(pp,B_o),e(x,I_o),e(x,_p),e(_p,Jse),e(Jse,N_o),e(_p,q_o),e(_p,UI),e(UI,j_o),e(_p,D_o),e(x,G_o),e(x,up),e(up,Yse),e(Yse,O_o),e(up,V_o),e(up,JI),e(JI,X_o),e(up,z_o),e(x,W_o),e(x,bp),e(bp,Kse),e(Kse,Q_o),e(bp,H_o),e(bp,YI),e(YI,U_o),e(bp,J_o),e(x,Y_o),e(x,vp),e(vp,Zse),e(Zse,K_o),e(vp,Z_o),e(vp,KI),e(KI,euo),e(vp,ouo),e(x,ruo),e(x,Fp),e(Fp,ele),e(ele,tuo),e(Fp,auo),e(Fp,ZI),e(ZI,nuo),e(Fp,suo),e(x,luo),e(x,Tp),e(Tp,ole),e(ole,iuo),e(Tp,duo),e(Tp,eN),e(eN,cuo),e(Tp,fuo),e(x,muo),e(x,Mp),e(Mp,rle),e(rle,guo),e(Mp,huo),e(Mp,oN),e(oN,puo),e(Mp,_uo),e(x,uuo),e(x,Ep),e(Ep,tle),e(tle,buo),e(Ep,vuo),e(Ep,rN),e(rN,Fuo),e(Ep,Tuo),e(x,Muo),e(x,Cp),e(Cp,ale),e(ale,Euo),e(Cp,Cuo),e(Cp,tN),e(tN,wuo),e(Cp,Auo),e(x,yuo),e(x,wp),e(wp,nle),e(nle,Luo),e(wp,xuo),e(wp,aN),e(aN,$uo),e(wp,kuo),e(x,Suo),e(x,Ap),e(Ap,sle),e(sle,Ruo),e(Ap,Puo),e(Ap,nN),e(nN,Buo),e(Ap,Iuo),e(x,Nuo),e(x,yp),e(yp,lle),e(lle,quo),e(yp,juo),e(yp,sN),e(sN,Duo),e(yp,Guo),e(x,Ouo),e(x,Lp),e(Lp,ile),e(ile,Vuo),e(Lp,Xuo),e(Lp,lN),e(lN,zuo),e(Lp,Wuo),e(x,Quo),e(x,xp),e(xp,dle),e(dle,Huo),e(xp,Uuo),e(xp,iN),e(iN,Juo),e(xp,Yuo),e(x,Kuo),e(x,$p),e($p,cle),e(cle,Zuo),e($p,e1o),e($p,dN),e(dN,o1o),e($p,r1o),e(x,t1o),e(x,kp),e(kp,fle),e(fle,a1o),e(kp,n1o),e(kp,cN),e(cN,s1o),e(kp,l1o),e(x,i1o),e(x,Sp),e(Sp,mle),e(mle,d1o),e(Sp,c1o),e(Sp,fN),e(fN,f1o),e(Sp,m1o),e(x,g1o),e(x,Rp),e(Rp,gle),e(gle,h1o),e(Rp,p1o),e(Rp,mN),e(mN,_1o),e(Rp,u1o),e(x,b1o),e(x,Pp),e(Pp,hle),e(hle,v1o),e(Pp,F1o),e(Pp,gN),e(gN,T1o),e(Pp,M1o),e(x,E1o),e(x,Bp),e(Bp,ple),e(ple,C1o),e(Bp,w1o),e(Bp,hN),e(hN,A1o),e(Bp,y1o),e(x,L1o),e(x,Ip),e(Ip,_le),e(_le,x1o),e(Ip,$1o),e(Ip,pN),e(pN,k1o),e(Ip,S1o),e(x,R1o),e(x,Np),e(Np,ule),e(ule,P1o),e(Np,B1o),e(Np,_N),e(_N,I1o),e(Np,N1o),e(x,q1o),e(x,qp),e(qp,ble),e(ble,j1o),e(qp,D1o),e(qp,uN),e(uN,G1o),e(qp,O1o),e(x,V1o),e(x,jp),e(jp,vle),e(vle,X1o),e(jp,z1o),e(jp,bN),e(bN,W1o),e(jp,Q1o),e(x,H1o),e(x,Dp),e(Dp,Fle),e(Fle,U1o),e(Dp,J1o),e(Dp,vN),e(vN,Y1o),e(Dp,K1o),e(x,Z1o),e(x,Gp),e(Gp,Tle),e(Tle,ebo),e(Gp,obo),e(Gp,FN),e(FN,rbo),e(Gp,tbo),e(x,abo),e(x,Op),e(Op,Mle),e(Mle,nbo),e(Op,sbo),e(Op,TN),e(TN,lbo),e(Op,ibo),e(x,dbo),e(x,Ps),e(Ps,Ele),e(Ele,cbo),e(Ps,fbo),e(Ps,MN),e(MN,mbo),e(Ps,gbo),e(Ps,EN),e(EN,hbo),e(Ps,pbo),e(x,_bo),e(x,Vp),e(Vp,Cle),e(Cle,ubo),e(Vp,bbo),e(Vp,CN),e(CN,vbo),e(Vp,Fbo),e(x,Tbo),e(x,Xp),e(Xp,wle),e(wle,Mbo),e(Xp,Ebo),e(Xp,wN),e(wN,Cbo),e(Xp,wbo),e(x,Abo),e(x,zp),e(zp,Ale),e(Ale,ybo),e(zp,Lbo),e(zp,AN),e(AN,xbo),e(zp,$bo),e(x,kbo),e(x,Wp),e(Wp,yle),e(yle,Sbo),e(Wp,Rbo),e(Wp,yN),e(yN,Pbo),e(Wp,Bbo),e(x,Ibo),e(x,Qp),e(Qp,Lle),e(Lle,Nbo),e(Qp,qbo),e(Qp,LN),e(LN,jbo),e(Qp,Dbo),e(x,Gbo),e(x,Hp),e(Hp,xle),e(xle,Obo),e(Hp,Vbo),e(Hp,xN),e(xN,Xbo),e(Hp,zbo),e(x,Wbo),e(x,Up),e(Up,$le),e($le,Qbo),e(Up,Hbo),e(Up,$N),e($N,Ubo),e(Up,Jbo),e(x,Ybo),e(x,Jp),e(Jp,kle),e(kle,Kbo),e(Jp,Zbo),e(Jp,kN),e(kN,e2o),e(Jp,o2o),e(x,r2o),e(x,Yp),e(Yp,Sle),e(Sle,t2o),e(Yp,a2o),e(Yp,SN),e(SN,n2o),e(Yp,s2o),e(x,l2o),e(x,Kp),e(Kp,Rle),e(Rle,i2o),e(Kp,d2o),e(Kp,RN),e(RN,c2o),e(Kp,f2o),e(x,m2o),e(x,Zp),e(Zp,Ple),e(Ple,g2o),e(Zp,h2o),e(Zp,PN),e(PN,p2o),e(Zp,_2o),e(x,u2o),e(x,e_),e(e_,Ble),e(Ble,b2o),e(e_,v2o),e(e_,BN),e(BN,F2o),e(e_,T2o),e(x,M2o),e(x,o_),e(o_,Ile),e(Ile,E2o),e(o_,C2o),e(o_,IN),e(IN,w2o),e(o_,A2o),e(x,y2o),e(x,r_),e(r_,Nle),e(Nle,L2o),e(r_,x2o),e(r_,NN),e(NN,$2o),e(r_,k2o),e(x,S2o),e(x,t_),e(t_,qle),e(qle,R2o),e(t_,P2o),e(t_,qN),e(qN,B2o),e(t_,I2o),e(x,N2o),e(x,a_),e(a_,jle),e(jle,q2o),e(a_,j2o),e(a_,jN),e(jN,D2o),e(a_,G2o),e(x,O2o),e(x,n_),e(n_,Dle),e(Dle,V2o),e(n_,X2o),e(n_,DN),e(DN,z2o),e(n_,W2o),e(x,Q2o),e(x,s_),e(s_,Gle),e(Gle,H2o),e(s_,U2o),e(s_,GN),e(GN,J2o),e(s_,Y2o),e(x,K2o),e(x,l_),e(l_,Ole),e(Ole,Z2o),e(l_,evo),e(l_,ON),e(ON,ovo),e(l_,rvo),e(x,tvo),e(x,i_),e(i_,Vle),e(Vle,avo),e(i_,nvo),e(i_,VN),e(VN,svo),e(i_,lvo),e(x,ivo),e(x,d_),e(d_,Xle),e(Xle,dvo),e(d_,cvo),e(d_,XN),e(XN,fvo),e(d_,mvo),e(x,gvo),e(x,c_),e(c_,zle),e(zle,hvo),e(c_,pvo),e(c_,zN),e(zN,_vo),e(c_,uvo),e(x,bvo),e(x,f_),e(f_,Wle),e(Wle,vvo),e(f_,Fvo),e(f_,WN),e(WN,Tvo),e(f_,Mvo),e(x,Evo),e(x,m_),e(m_,Qle),e(Qle,Cvo),e(m_,wvo),e(m_,QN),e(QN,Avo),e(m_,yvo),e(x,Lvo),e(x,g_),e(g_,Hle),e(Hle,xvo),e(g_,$vo),e(g_,HN),e(HN,kvo),e(g_,Svo),e(x,Rvo),e(x,h_),e(h_,Ule),e(Ule,Pvo),e(h_,Bvo),e(h_,UN),e(UN,Ivo),e(h_,Nvo),e(x,qvo),e(x,p_),e(p_,Jle),e(Jle,jvo),e(p_,Dvo),e(p_,JN),e(JN,Gvo),e(p_,Ovo),e(x,Vvo),e(x,__),e(__,Yle),e(Yle,Xvo),e(__,zvo),e(__,YN),e(YN,Wvo),e(__,Qvo),e(x,Hvo),e(x,u_),e(u_,Kle),e(Kle,Uvo),e(u_,Jvo),e(u_,KN),e(KN,Yvo),e(u_,Kvo),e(x,Zvo),e(x,b_),e(b_,Zle),e(Zle,e5o),e(b_,o5o),e(b_,ZN),e(ZN,r5o),e(b_,t5o),e(x,a5o),e(x,v_),e(v_,eie),e(eie,n5o),e(v_,s5o),e(v_,eq),e(eq,l5o),e(v_,i5o),e(x,d5o),e(x,F_),e(F_,oie),e(oie,c5o),e(F_,f5o),e(F_,oq),e(oq,m5o),e(F_,g5o),e(x,h5o),e(x,T_),e(T_,rie),e(rie,p5o),e(T_,_5o),e(T_,rq),e(rq,u5o),e(T_,b5o),e(x,v5o),e(x,M_),e(M_,tie),e(tie,F5o),e(M_,T5o),e(M_,tq),e(tq,M5o),e(M_,E5o),e(x,C5o),e(x,E_),e(E_,aie),e(aie,w5o),e(E_,A5o),e(E_,aq),e(aq,y5o),e(E_,L5o),e(x,x5o),e(x,C_),e(C_,nie),e(nie,$5o),e(C_,k5o),e(C_,nq),e(nq,S5o),e(C_,R5o),e(x,P5o),e(x,w_),e(w_,sie),e(sie,B5o),e(w_,I5o),e(w_,sq),e(sq,N5o),e(w_,q5o),e(x,j5o),e(x,A_),e(A_,lie),e(lie,D5o),e(A_,G5o),e(A_,lq),e(lq,O5o),e(A_,V5o),e(x,X5o),e(x,y_),e(y_,iie),e(iie,z5o),e(y_,W5o),e(y_,iq),e(iq,Q5o),e(y_,H5o),e(x,U5o),e(x,L_),e(L_,die),e(die,J5o),e(L_,Y5o),e(L_,dq),e(dq,K5o),e(L_,Z5o),e(x,e3o),e(x,x_),e(x_,cie),e(cie,o3o),e(x_,r3o),e(x_,cq),e(cq,t3o),e(x_,a3o),e(x,n3o),e(x,$_),e($_,fie),e(fie,s3o),e($_,l3o),e($_,fq),e(fq,i3o),e($_,d3o),e(x,c3o),e(x,k_),e(k_,mie),e(mie,f3o),e(k_,m3o),e(k_,mq),e(mq,g3o),e(k_,h3o),e(x,p3o),e(x,S_),e(S_,gie),e(gie,_3o),e(S_,u3o),e(S_,gq),e(gq,b3o),e(S_,v3o),e(x,F3o),e(x,R_),e(R_,hie),e(hie,T3o),e(R_,M3o),e(R_,hq),e(hq,E3o),e(R_,C3o),e(x,w3o),e(x,P_),e(P_,pie),e(pie,A3o),e(P_,y3o),e(P_,pq),e(pq,L3o),e(P_,x3o),e(x,$3o),e(x,B_),e(B_,_ie),e(_ie,k3o),e(B_,S3o),e(B_,_q),e(_q,R3o),e(B_,P3o),e(x,B3o),e(x,I_),e(I_,uie),e(uie,I3o),e(I_,N3o),e(I_,uq),e(uq,q3o),e(I_,j3o),e(x,D3o),e(x,N_),e(N_,bie),e(bie,G3o),e(N_,O3o),e(N_,bq),e(bq,V3o),e(N_,X3o),e(x,z3o),e(x,q_),e(q_,vie),e(vie,W3o),e(q_,Q3o),e(q_,vq),e(vq,H3o),e(q_,U3o),e(x,J3o),e(x,j_),e(j_,Fie),e(Fie,Y3o),e(j_,K3o),e(j_,Fq),e(Fq,Z3o),e(j_,eFo),e(x,oFo),e(x,D_),e(D_,Tie),e(Tie,rFo),e(D_,tFo),e(D_,Tq),e(Tq,aFo),e(D_,nFo),e(x,sFo),e(x,G_),e(G_,Mie),e(Mie,lFo),e(G_,iFo),e(G_,Mq),e(Mq,dFo),e(G_,cFo),e(x,fFo),e(x,O_),e(O_,Eie),e(Eie,mFo),e(O_,gFo),e(O_,Eq),e(Eq,hFo),e(O_,pFo),e(x,_Fo),e(x,V_),e(V_,Cie),e(Cie,uFo),e(V_,bFo),e(V_,Cq),e(Cq,vFo),e(V_,FFo),e(x,TFo),e(x,X_),e(X_,wie),e(wie,MFo),e(X_,EFo),e(X_,wq),e(wq,CFo),e(X_,wFo),e(x,AFo),e(x,z_),e(z_,Aie),e(Aie,yFo),e(z_,LFo),e(z_,Aq),e(Aq,xFo),e(z_,$Fo),e(x,kFo),e(x,W_),e(W_,yie),e(yie,SFo),e(W_,RFo),e(W_,yq),e(yq,PFo),e(W_,BFo),e(x,IFo),e(x,Q_),e(Q_,Lie),e(Lie,NFo),e(Q_,qFo),e(Q_,Lq),e(Lq,jFo),e(Q_,DFo),e(x,GFo),e(x,H_),e(H_,xie),e(xie,OFo),e(H_,VFo),e(H_,xq),e(xq,XFo),e(H_,zFo),e(x,WFo),e(x,U_),e(U_,$ie),e($ie,QFo),e(U_,HFo),e(U_,$q),e($q,UFo),e(U_,JFo),e(x,YFo),e(x,J_),e(J_,kie),e(kie,KFo),e(J_,ZFo),e(J_,kq),e(kq,eTo),e(J_,oTo),e(x,rTo),e(x,Y_),e(Y_,Sie),e(Sie,tTo),e(Y_,aTo),e(Y_,Sq),e(Sq,nTo),e(Y_,sTo),e(x,lTo),e(x,K_),e(K_,Rie),e(Rie,iTo),e(K_,dTo),e(K_,Rq),e(Rq,cTo),e(K_,fTo),e(x,mTo),e(x,Z_),e(Z_,Pie),e(Pie,gTo),e(Z_,hTo),e(Z_,Pq),e(Pq,pTo),e(Z_,_To),e(x,uTo),e(x,eu),e(eu,Bie),e(Bie,bTo),e(eu,vTo),e(eu,Bq),e(Bq,FTo),e(eu,TTo),e(x,MTo),e(x,ou),e(ou,Iie),e(Iie,ETo),e(ou,CTo),e(ou,Iq),e(Iq,wTo),e(ou,ATo),e(x,yTo),e(x,ru),e(ru,Nie),e(Nie,LTo),e(ru,xTo),e(ru,Nq),e(Nq,$To),e(ru,kTo),e(x,STo),e(x,tu),e(tu,qie),e(qie,RTo),e(tu,PTo),e(tu,qq),e(qq,BTo),e(tu,ITo),e(x,NTo),e(x,au),e(au,jie),e(jie,qTo),e(au,jTo),e(au,jq),e(jq,DTo),e(au,GTo),e(Je,OTo),e(Je,nu),e(nu,VTo),e(nu,Die),e(Die,XTo),e(nu,zTo),e(nu,Gie),e(Gie,WTo),e(Je,QTo),M(su,Je,null),b(f,Jqe,u),b(f,xi,u),e(xi,lu),e(lu,Oie),M(g6,Oie,null),e(xi,HTo),e(xi,Vie),e(Vie,UTo),b(f,Yqe,u),b(f,xo,u),M(h6,xo,null),e(xo,JTo),e(xo,$i),e($i,YTo),e($i,Dq),e(Dq,KTo),e($i,ZTo),e($i,Gq),e(Gq,e7o),e($i,o7o),e(xo,r7o),e(xo,p6),e(p6,t7o),e(p6,Xie),e(Xie,a7o),e(p6,n7o),e(xo,s7o),e(xo,at),M(_6,at,null),e(at,l7o),e(at,zie),e(zie,i7o),e(at,d7o),e(at,ki),e(ki,c7o),e(ki,Wie),e(Wie,f7o),e(ki,m7o),e(ki,Oq),e(Oq,g7o),e(ki,h7o),e(at,p7o),M(iu,at,null),e(xo,_7o),e(xo,Ye),M(u6,Ye,null),e(Ye,u7o),e(Ye,Qie),e(Qie,b7o),e(Ye,v7o),e(Ye,xa),e(xa,F7o),e(xa,Hie),e(Hie,T7o),e(xa,M7o),e(xa,Uie),e(Uie,E7o),e(xa,C7o),e(xa,Jie),e(Jie,w7o),e(xa,A7o),e(Ye,y7o),e(Ye,G),e(G,du),e(du,Yie),e(Yie,L7o),e(du,x7o),e(du,Vq),e(Vq,$7o),e(du,k7o),e(G,S7o),e(G,cu),e(cu,Kie),e(Kie,R7o),e(cu,P7o),e(cu,Xq),e(Xq,B7o),e(cu,I7o),e(G,N7o),e(G,fu),e(fu,Zie),e(Zie,q7o),e(fu,j7o),e(fu,zq),e(zq,D7o),e(fu,G7o),e(G,O7o),e(G,mu),e(mu,ede),e(ede,V7o),e(mu,X7o),e(mu,Wq),e(Wq,z7o),e(mu,W7o),e(G,Q7o),e(G,gu),e(gu,ode),e(ode,H7o),e(gu,U7o),e(gu,Qq),e(Qq,J7o),e(gu,Y7o),e(G,K7o),e(G,hu),e(hu,rde),e(rde,Z7o),e(hu,e9o),e(hu,Hq),e(Hq,o9o),e(hu,r9o),e(G,t9o),e(G,pu),e(pu,tde),e(tde,a9o),e(pu,n9o),e(pu,Uq),e(Uq,s9o),e(pu,l9o),e(G,i9o),e(G,_u),e(_u,ade),e(ade,d9o),e(_u,c9o),e(_u,Jq),e(Jq,f9o),e(_u,m9o),e(G,g9o),e(G,uu),e(uu,nde),e(nde,h9o),e(uu,p9o),e(uu,Yq),e(Yq,_9o),e(uu,u9o),e(G,b9o),e(G,bu),e(bu,sde),e(sde,v9o),e(bu,F9o),e(bu,Kq),e(Kq,T9o),e(bu,M9o),e(G,E9o),e(G,vu),e(vu,lde),e(lde,C9o),e(vu,w9o),e(vu,Zq),e(Zq,A9o),e(vu,y9o),e(G,L9o),e(G,Fu),e(Fu,ide),e(ide,x9o),e(Fu,$9o),e(Fu,ej),e(ej,k9o),e(Fu,S9o),e(G,R9o),e(G,Tu),e(Tu,dde),e(dde,P9o),e(Tu,B9o),e(Tu,oj),e(oj,I9o),e(Tu,N9o),e(G,q9o),e(G,Mu),e(Mu,cde),e(cde,j9o),e(Mu,D9o),e(Mu,rj),e(rj,G9o),e(Mu,O9o),e(G,V9o),e(G,Eu),e(Eu,fde),e(fde,X9o),e(Eu,z9o),e(Eu,tj),e(tj,W9o),e(Eu,Q9o),e(G,H9o),e(G,Cu),e(Cu,mde),e(mde,U9o),e(Cu,J9o),e(Cu,aj),e(aj,Y9o),e(Cu,K9o),e(G,Z9o),e(G,wu),e(wu,gde),e(gde,eMo),e(wu,oMo),e(wu,nj),e(nj,rMo),e(wu,tMo),e(G,aMo),e(G,Au),e(Au,hde),e(hde,nMo),e(Au,sMo),e(Au,sj),e(sj,lMo),e(Au,iMo),e(G,dMo),e(G,yu),e(yu,pde),e(pde,cMo),e(yu,fMo),e(yu,lj),e(lj,mMo),e(yu,gMo),e(G,hMo),e(G,Lu),e(Lu,_de),e(_de,pMo),e(Lu,_Mo),e(Lu,ij),e(ij,uMo),e(Lu,bMo),e(G,vMo),e(G,xu),e(xu,ude),e(ude,FMo),e(xu,TMo),e(xu,dj),e(dj,MMo),e(xu,EMo),e(G,CMo),e(G,$u),e($u,bde),e(bde,wMo),e($u,AMo),e($u,cj),e(cj,yMo),e($u,LMo),e(G,xMo),e(G,ku),e(ku,vde),e(vde,$Mo),e(ku,kMo),e(ku,fj),e(fj,SMo),e(ku,RMo),e(G,PMo),e(G,Su),e(Su,Fde),e(Fde,BMo),e(Su,IMo),e(Su,mj),e(mj,NMo),e(Su,qMo),e(G,jMo),e(G,Ru),e(Ru,Tde),e(Tde,DMo),e(Ru,GMo),e(Ru,gj),e(gj,OMo),e(Ru,VMo),e(G,XMo),e(G,Pu),e(Pu,Mde),e(Mde,zMo),e(Pu,WMo),e(Pu,hj),e(hj,QMo),e(Pu,HMo),e(G,UMo),e(G,Bu),e(Bu,Ede),e(Ede,JMo),e(Bu,YMo),e(Bu,pj),e(pj,KMo),e(Bu,ZMo),e(G,e4o),e(G,Iu),e(Iu,Cde),e(Cde,o4o),e(Iu,r4o),e(Iu,_j),e(_j,t4o),e(Iu,a4o),e(G,n4o),e(G,Nu),e(Nu,wde),e(wde,s4o),e(Nu,l4o),e(Nu,uj),e(uj,i4o),e(Nu,d4o),e(G,c4o),e(G,qu),e(qu,Ade),e(Ade,f4o),e(qu,m4o),e(qu,bj),e(bj,g4o),e(qu,h4o),e(G,p4o),e(G,ju),e(ju,yde),e(yde,_4o),e(ju,u4o),e(ju,vj),e(vj,b4o),e(ju,v4o),e(G,F4o),e(G,Du),e(Du,Lde),e(Lde,T4o),e(Du,M4o),e(Du,Fj),e(Fj,E4o),e(Du,C4o),e(G,w4o),e(G,Gu),e(Gu,xde),e(xde,A4o),e(Gu,y4o),e(Gu,Tj),e(Tj,L4o),e(Gu,x4o),e(G,$4o),e(G,Ou),e(Ou,$de),e($de,k4o),e(Ou,S4o),e(Ou,Mj),e(Mj,R4o),e(Ou,P4o),e(G,B4o),e(G,Vu),e(Vu,kde),e(kde,I4o),e(Vu,N4o),e(Vu,Ej),e(Ej,q4o),e(Vu,j4o),e(G,D4o),e(G,Xu),e(Xu,Sde),e(Sde,G4o),e(Xu,O4o),e(Xu,Cj),e(Cj,V4o),e(Xu,X4o),e(G,z4o),e(G,zu),e(zu,Rde),e(Rde,W4o),e(zu,Q4o),e(zu,wj),e(wj,H4o),e(zu,U4o),e(G,J4o),e(G,Wu),e(Wu,Pde),e(Pde,Y4o),e(Wu,K4o),e(Wu,Aj),e(Aj,Z4o),e(Wu,eEo),e(G,oEo),e(G,Qu),e(Qu,Bde),e(Bde,rEo),e(Qu,tEo),e(Qu,yj),e(yj,aEo),e(Qu,nEo),e(G,sEo),e(G,Hu),e(Hu,Ide),e(Ide,lEo),e(Hu,iEo),e(Hu,Lj),e(Lj,dEo),e(Hu,cEo),e(G,fEo),e(G,Uu),e(Uu,Nde),e(Nde,mEo),e(Uu,gEo),e(Uu,xj),e(xj,hEo),e(Uu,pEo),e(G,_Eo),e(G,Ju),e(Ju,qde),e(qde,uEo),e(Ju,bEo),e(Ju,$j),e($j,vEo),e(Ju,FEo),e(Ye,TEo),e(Ye,Yu),e(Yu,MEo),e(Yu,jde),e(jde,EEo),e(Yu,CEo),e(Yu,Dde),e(Dde,wEo),e(Ye,AEo),M(Ku,Ye,null),b(f,Kqe,u),b(f,Si,u),e(Si,Zu),e(Zu,Gde),M(b6,Gde,null),e(Si,yEo),e(Si,Ode),e(Ode,LEo),b(f,Zqe,u),b(f,$o,u),M(v6,$o,null),e($o,xEo),e($o,Ri),e(Ri,$Eo),e(Ri,kj),e(kj,kEo),e(Ri,SEo),e(Ri,Sj),e(Sj,REo),e(Ri,PEo),e($o,BEo),e($o,F6),e(F6,IEo),e(F6,Vde),e(Vde,NEo),e(F6,qEo),e($o,jEo),e($o,nt),M(T6,nt,null),e(nt,DEo),e(nt,Xde),e(Xde,GEo),e(nt,OEo),e(nt,Pi),e(Pi,VEo),e(Pi,zde),e(zde,XEo),e(Pi,zEo),e(Pi,Rj),e(Rj,WEo),e(Pi,QEo),e(nt,HEo),M(e1,nt,null),e($o,UEo),e($o,Ke),M(M6,Ke,null),e(Ke,JEo),e(Ke,Wde),e(Wde,YEo),e(Ke,KEo),e(Ke,$a),e($a,ZEo),e($a,Qde),e(Qde,eCo),e($a,oCo),e($a,Hde),e(Hde,rCo),e($a,tCo),e($a,Ude),e(Ude,aCo),e($a,nCo),e(Ke,sCo),e(Ke,z),e(z,o1),e(o1,Jde),e(Jde,lCo),e(o1,iCo),e(o1,Pj),e(Pj,dCo),e(o1,cCo),e(z,fCo),e(z,r1),e(r1,Yde),e(Yde,mCo),e(r1,gCo),e(r1,Bj),e(Bj,hCo),e(r1,pCo),e(z,_Co),e(z,t1),e(t1,Kde),e(Kde,uCo),e(t1,bCo),e(t1,Ij),e(Ij,vCo),e(t1,FCo),e(z,TCo),e(z,a1),e(a1,Zde),e(Zde,MCo),e(a1,ECo),e(a1,Nj),e(Nj,CCo),e(a1,wCo),e(z,ACo),e(z,n1),e(n1,ece),e(ece,yCo),e(n1,LCo),e(n1,qj),e(qj,xCo),e(n1,$Co),e(z,kCo),e(z,s1),e(s1,oce),e(oce,SCo),e(s1,RCo),e(s1,jj),e(jj,PCo),e(s1,BCo),e(z,ICo),e(z,l1),e(l1,rce),e(rce,NCo),e(l1,qCo),e(l1,Dj),e(Dj,jCo),e(l1,DCo),e(z,GCo),e(z,i1),e(i1,tce),e(tce,OCo),e(i1,VCo),e(i1,Gj),e(Gj,XCo),e(i1,zCo),e(z,WCo),e(z,d1),e(d1,ace),e(ace,QCo),e(d1,HCo),e(d1,Oj),e(Oj,UCo),e(d1,JCo),e(z,YCo),e(z,c1),e(c1,nce),e(nce,KCo),e(c1,ZCo),e(c1,Vj),e(Vj,e0o),e(c1,o0o),e(z,r0o),e(z,f1),e(f1,sce),e(sce,t0o),e(f1,a0o),e(f1,Xj),e(Xj,n0o),e(f1,s0o),e(z,l0o),e(z,m1),e(m1,lce),e(lce,i0o),e(m1,d0o),e(m1,zj),e(zj,c0o),e(m1,f0o),e(z,m0o),e(z,g1),e(g1,ice),e(ice,g0o),e(g1,h0o),e(g1,Wj),e(Wj,p0o),e(g1,_0o),e(z,u0o),e(z,h1),e(h1,dce),e(dce,b0o),e(h1,v0o),e(h1,Qj),e(Qj,F0o),e(h1,T0o),e(z,M0o),e(z,p1),e(p1,cce),e(cce,E0o),e(p1,C0o),e(p1,Hj),e(Hj,w0o),e(p1,A0o),e(z,y0o),e(z,_1),e(_1,fce),e(fce,L0o),e(_1,x0o),e(_1,Uj),e(Uj,$0o),e(_1,k0o),e(z,S0o),e(z,u1),e(u1,mce),e(mce,R0o),e(u1,P0o),e(u1,Jj),e(Jj,B0o),e(u1,I0o),e(z,N0o),e(z,b1),e(b1,gce),e(gce,q0o),e(b1,j0o),e(b1,Yj),e(Yj,D0o),e(b1,G0o),e(z,O0o),e(z,v1),e(v1,hce),e(hce,V0o),e(v1,X0o),e(v1,Kj),e(Kj,z0o),e(v1,W0o),e(z,Q0o),e(z,F1),e(F1,pce),e(pce,H0o),e(F1,U0o),e(F1,Zj),e(Zj,J0o),e(F1,Y0o),e(z,K0o),e(z,T1),e(T1,_ce),e(_ce,Z0o),e(T1,ewo),e(T1,eD),e(eD,owo),e(T1,rwo),e(z,two),e(z,M1),e(M1,uce),e(uce,awo),e(M1,nwo),e(M1,oD),e(oD,swo),e(M1,lwo),e(z,iwo),e(z,E1),e(E1,bce),e(bce,dwo),e(E1,cwo),e(E1,rD),e(rD,fwo),e(E1,mwo),e(z,gwo),e(z,C1),e(C1,vce),e(vce,hwo),e(C1,pwo),e(C1,tD),e(tD,_wo),e(C1,uwo),e(z,bwo),e(z,w1),e(w1,Fce),e(Fce,vwo),e(w1,Fwo),e(w1,aD),e(aD,Two),e(w1,Mwo),e(z,Ewo),e(z,A1),e(A1,Tce),e(Tce,Cwo),e(A1,wwo),e(A1,nD),e(nD,Awo),e(A1,ywo),e(z,Lwo),e(z,y1),e(y1,Mce),e(Mce,xwo),e(y1,$wo),e(y1,sD),e(sD,kwo),e(y1,Swo),e(z,Rwo),e(z,L1),e(L1,Ece),e(Ece,Pwo),e(L1,Bwo),e(L1,lD),e(lD,Iwo),e(L1,Nwo),e(z,qwo),e(z,x1),e(x1,Cce),e(Cce,jwo),e(x1,Dwo),e(x1,iD),e(iD,Gwo),e(x1,Owo),e(z,Vwo),e(z,$1),e($1,wce),e(wce,Xwo),e($1,zwo),e($1,dD),e(dD,Wwo),e($1,Qwo),e(z,Hwo),e(z,k1),e(k1,Ace),e(Ace,Uwo),e(k1,Jwo),e(k1,cD),e(cD,Ywo),e(k1,Kwo),e(z,Zwo),e(z,S1),e(S1,yce),e(yce,eAo),e(S1,oAo),e(S1,fD),e(fD,rAo),e(S1,tAo),e(z,aAo),e(z,R1),e(R1,Lce),e(Lce,nAo),e(R1,sAo),e(R1,mD),e(mD,lAo),e(R1,iAo),e(z,dAo),e(z,P1),e(P1,xce),e(xce,cAo),e(P1,fAo),e(P1,gD),e(gD,mAo),e(P1,gAo),e(z,hAo),e(z,B1),e(B1,$ce),e($ce,pAo),e(B1,_Ao),e(B1,hD),e(hD,uAo),e(B1,bAo),e(z,vAo),e(z,I1),e(I1,kce),e(kce,FAo),e(I1,TAo),e(I1,pD),e(pD,MAo),e(I1,EAo),e(z,CAo),e(z,N1),e(N1,Sce),e(Sce,wAo),e(N1,AAo),e(N1,_D),e(_D,yAo),e(N1,LAo),e(Ke,xAo),e(Ke,q1),e(q1,$Ao),e(q1,Rce),e(Rce,kAo),e(q1,SAo),e(q1,Pce),e(Pce,RAo),e(Ke,PAo),M(j1,Ke,null),b(f,eje,u),b(f,Bi,u),e(Bi,D1),e(D1,Bce),M(E6,Bce,null),e(Bi,BAo),e(Bi,Ice),e(Ice,IAo),b(f,oje,u),b(f,ko,u),M(C6,ko,null),e(ko,NAo),e(ko,Ii),e(Ii,qAo),e(Ii,uD),e(uD,jAo),e(Ii,DAo),e(Ii,bD),e(bD,GAo),e(Ii,OAo),e(ko,VAo),e(ko,w6),e(w6,XAo),e(w6,Nce),e(Nce,zAo),e(w6,WAo),e(ko,QAo),e(ko,st),M(A6,st,null),e(st,HAo),e(st,qce),e(qce,UAo),e(st,JAo),e(st,Ni),e(Ni,YAo),e(Ni,jce),e(jce,KAo),e(Ni,ZAo),e(Ni,vD),e(vD,e6o),e(Ni,o6o),e(st,r6o),M(G1,st,null),e(ko,t6o),e(ko,Ze),M(y6,Ze,null),e(Ze,a6o),e(Ze,Dce),e(Dce,n6o),e(Ze,s6o),e(Ze,ka),e(ka,l6o),e(ka,Gce),e(Gce,i6o),e(ka,d6o),e(ka,Oce),e(Oce,c6o),e(ka,f6o),e(ka,Vce),e(Vce,m6o),e(ka,g6o),e(Ze,h6o),e(Ze,W),e(W,O1),e(O1,Xce),e(Xce,p6o),e(O1,_6o),e(O1,FD),e(FD,u6o),e(O1,b6o),e(W,v6o),e(W,V1),e(V1,zce),e(zce,F6o),e(V1,T6o),e(V1,TD),e(TD,M6o),e(V1,E6o),e(W,C6o),e(W,X1),e(X1,Wce),e(Wce,w6o),e(X1,A6o),e(X1,MD),e(MD,y6o),e(X1,L6o),e(W,x6o),e(W,z1),e(z1,Qce),e(Qce,$6o),e(z1,k6o),e(z1,ED),e(ED,S6o),e(z1,R6o),e(W,P6o),e(W,W1),e(W1,Hce),e(Hce,B6o),e(W1,I6o),e(W1,CD),e(CD,N6o),e(W1,q6o),e(W,j6o),e(W,Q1),e(Q1,Uce),e(Uce,D6o),e(Q1,G6o),e(Q1,wD),e(wD,O6o),e(Q1,V6o),e(W,X6o),e(W,H1),e(H1,Jce),e(Jce,z6o),e(H1,W6o),e(H1,AD),e(AD,Q6o),e(H1,H6o),e(W,U6o),e(W,U1),e(U1,Yce),e(Yce,J6o),e(U1,Y6o),e(U1,yD),e(yD,K6o),e(U1,Z6o),e(W,eyo),e(W,J1),e(J1,Kce),e(Kce,oyo),e(J1,ryo),e(J1,LD),e(LD,tyo),e(J1,ayo),e(W,nyo),e(W,Y1),e(Y1,Zce),e(Zce,syo),e(Y1,lyo),e(Y1,xD),e(xD,iyo),e(Y1,dyo),e(W,cyo),e(W,K1),e(K1,efe),e(efe,fyo),e(K1,myo),e(K1,$D),e($D,gyo),e(K1,hyo),e(W,pyo),e(W,Z1),e(Z1,ofe),e(ofe,_yo),e(Z1,uyo),e(Z1,kD),e(kD,byo),e(Z1,vyo),e(W,Fyo),e(W,eb),e(eb,rfe),e(rfe,Tyo),e(eb,Myo),e(eb,SD),e(SD,Eyo),e(eb,Cyo),e(W,wyo),e(W,ob),e(ob,tfe),e(tfe,Ayo),e(ob,yyo),e(ob,RD),e(RD,Lyo),e(ob,xyo),e(W,$yo),e(W,rb),e(rb,afe),e(afe,kyo),e(rb,Syo),e(rb,PD),e(PD,Ryo),e(rb,Pyo),e(W,Byo),e(W,tb),e(tb,nfe),e(nfe,Iyo),e(tb,Nyo),e(tb,BD),e(BD,qyo),e(tb,jyo),e(W,Dyo),e(W,ab),e(ab,sfe),e(sfe,Gyo),e(ab,Oyo),e(ab,ID),e(ID,Vyo),e(ab,Xyo),e(W,zyo),e(W,nb),e(nb,lfe),e(lfe,Wyo),e(nb,Qyo),e(nb,ND),e(ND,Hyo),e(nb,Uyo),e(W,Jyo),e(W,sb),e(sb,ife),e(ife,Yyo),e(sb,Kyo),e(sb,qD),e(qD,Zyo),e(sb,eLo),e(W,oLo),e(W,lb),e(lb,dfe),e(dfe,rLo),e(lb,tLo),e(lb,jD),e(jD,aLo),e(lb,nLo),e(W,sLo),e(W,ib),e(ib,cfe),e(cfe,lLo),e(ib,iLo),e(ib,DD),e(DD,dLo),e(ib,cLo),e(W,fLo),e(W,db),e(db,ffe),e(ffe,mLo),e(db,gLo),e(db,GD),e(GD,hLo),e(db,pLo),e(W,_Lo),e(W,cb),e(cb,mfe),e(mfe,uLo),e(cb,bLo),e(cb,OD),e(OD,vLo),e(cb,FLo),e(W,TLo),e(W,fb),e(fb,gfe),e(gfe,MLo),e(fb,ELo),e(fb,VD),e(VD,CLo),e(fb,wLo),e(W,ALo),e(W,mb),e(mb,hfe),e(hfe,yLo),e(mb,LLo),e(mb,XD),e(XD,xLo),e(mb,$Lo),e(W,kLo),e(W,gb),e(gb,pfe),e(pfe,SLo),e(gb,RLo),e(gb,zD),e(zD,PLo),e(gb,BLo),e(W,ILo),e(W,hb),e(hb,_fe),e(_fe,NLo),e(hb,qLo),e(hb,WD),e(WD,jLo),e(hb,DLo),e(W,GLo),e(W,pb),e(pb,ufe),e(ufe,OLo),e(pb,VLo),e(pb,QD),e(QD,XLo),e(pb,zLo),e(W,WLo),e(W,_b),e(_b,bfe),e(bfe,QLo),e(_b,HLo),e(_b,HD),e(HD,ULo),e(_b,JLo),e(W,YLo),e(W,ub),e(ub,vfe),e(vfe,KLo),e(ub,ZLo),e(ub,UD),e(UD,e8o),e(ub,o8o),e(W,r8o),e(W,bb),e(bb,Ffe),e(Ffe,t8o),e(bb,a8o),e(bb,JD),e(JD,n8o),e(bb,s8o),e(W,l8o),e(W,vb),e(vb,Tfe),e(Tfe,i8o),e(vb,d8o),e(vb,Mfe),e(Mfe,c8o),e(vb,f8o),e(W,m8o),e(W,Fb),e(Fb,Efe),e(Efe,g8o),e(Fb,h8o),e(Fb,YD),e(YD,p8o),e(Fb,_8o),e(W,u8o),e(W,Tb),e(Tb,Cfe),e(Cfe,b8o),e(Tb,v8o),e(Tb,KD),e(KD,F8o),e(Tb,T8o),e(W,M8o),e(W,Mb),e(Mb,wfe),e(wfe,E8o),e(Mb,C8o),e(Mb,ZD),e(ZD,w8o),e(Mb,A8o),e(W,y8o),e(W,Eb),e(Eb,Afe),e(Afe,L8o),e(Eb,x8o),e(Eb,eG),e(eG,$8o),e(Eb,k8o),e(Ze,S8o),e(Ze,Cb),e(Cb,R8o),e(Cb,yfe),e(yfe,P8o),e(Cb,B8o),e(Cb,Lfe),e(Lfe,I8o),e(Ze,N8o),M(wb,Ze,null),b(f,rje,u),b(f,qi,u),e(qi,Ab),e(Ab,xfe),M(L6,xfe,null),e(qi,q8o),e(qi,$fe),e($fe,j8o),b(f,tje,u),b(f,So,u),M(x6,So,null),e(So,D8o),e(So,ji),e(ji,G8o),e(ji,oG),e(oG,O8o),e(ji,V8o),e(ji,rG),e(rG,X8o),e(ji,z8o),e(So,W8o),e(So,$6),e($6,Q8o),e($6,kfe),e(kfe,H8o),e($6,U8o),e(So,J8o),e(So,lt),M(k6,lt,null),e(lt,Y8o),e(lt,Sfe),e(Sfe,K8o),e(lt,Z8o),e(lt,Di),e(Di,exo),e(Di,Rfe),e(Rfe,oxo),e(Di,rxo),e(Di,tG),e(tG,txo),e(Di,axo),e(lt,nxo),M(yb,lt,null),e(So,sxo),e(So,eo),M(S6,eo,null),e(eo,lxo),e(eo,Pfe),e(Pfe,ixo),e(eo,dxo),e(eo,Sa),e(Sa,cxo),e(Sa,Bfe),e(Bfe,fxo),e(Sa,mxo),e(Sa,Ife),e(Ife,gxo),e(Sa,hxo),e(Sa,Nfe),e(Nfe,pxo),e(Sa,_xo),e(eo,uxo),e(eo,_e),e(_e,Lb),e(Lb,qfe),e(qfe,bxo),e(Lb,vxo),e(Lb,aG),e(aG,Fxo),e(Lb,Txo),e(_e,Mxo),e(_e,xb),e(xb,jfe),e(jfe,Exo),e(xb,Cxo),e(xb,nG),e(nG,wxo),e(xb,Axo),e(_e,yxo),e(_e,$b),e($b,Dfe),e(Dfe,Lxo),e($b,xxo),e($b,sG),e(sG,$xo),e($b,kxo),e(_e,Sxo),e(_e,kb),e(kb,Gfe),e(Gfe,Rxo),e(kb,Pxo),e(kb,lG),e(lG,Bxo),e(kb,Ixo),e(_e,Nxo),e(_e,Sb),e(Sb,Ofe),e(Ofe,qxo),e(Sb,jxo),e(Sb,iG),e(iG,Dxo),e(Sb,Gxo),e(_e,Oxo),e(_e,Rb),e(Rb,Vfe),e(Vfe,Vxo),e(Rb,Xxo),e(Rb,dG),e(dG,zxo),e(Rb,Wxo),e(_e,Qxo),e(_e,Pb),e(Pb,Xfe),e(Xfe,Hxo),e(Pb,Uxo),e(Pb,cG),e(cG,Jxo),e(Pb,Yxo),e(_e,Kxo),e(_e,Bb),e(Bb,zfe),e(zfe,Zxo),e(Bb,e$o),e(Bb,fG),e(fG,o$o),e(Bb,r$o),e(_e,t$o),e(_e,Ib),e(Ib,Wfe),e(Wfe,a$o),e(Ib,n$o),e(Ib,mG),e(mG,s$o),e(Ib,l$o),e(_e,i$o),e(_e,Nb),e(Nb,Qfe),e(Qfe,d$o),e(Nb,c$o),e(Nb,gG),e(gG,f$o),e(Nb,m$o),e(_e,g$o),e(_e,qb),e(qb,Hfe),e(Hfe,h$o),e(qb,p$o),e(qb,hG),e(hG,_$o),e(qb,u$o),e(_e,b$o),e(_e,jb),e(jb,Ufe),e(Ufe,v$o),e(jb,F$o),e(jb,pG),e(pG,T$o),e(jb,M$o),e(_e,E$o),e(_e,Db),e(Db,Jfe),e(Jfe,C$o),e(Db,w$o),e(Db,_G),e(_G,A$o),e(Db,y$o),e(_e,L$o),e(_e,Gb),e(Gb,Yfe),e(Yfe,x$o),e(Gb,$$o),e(Gb,uG),e(uG,k$o),e(Gb,S$o),e(_e,R$o),e(_e,Ob),e(Ob,Kfe),e(Kfe,P$o),e(Ob,B$o),e(Ob,bG),e(bG,I$o),e(Ob,N$o),e(_e,q$o),e(_e,Vb),e(Vb,Zfe),e(Zfe,j$o),e(Vb,D$o),e(Vb,vG),e(vG,G$o),e(Vb,O$o),e(eo,V$o),e(eo,Xb),e(Xb,X$o),e(Xb,eme),e(eme,z$o),e(Xb,W$o),e(Xb,ome),e(ome,Q$o),e(eo,H$o),M(zb,eo,null),b(f,aje,u),b(f,Gi,u),e(Gi,Wb),e(Wb,rme),M(R6,rme,null),e(Gi,U$o),e(Gi,tme),e(tme,J$o),b(f,nje,u),b(f,Ro,u),M(P6,Ro,null),e(Ro,Y$o),e(Ro,Oi),e(Oi,K$o),e(Oi,FG),e(FG,Z$o),e(Oi,eko),e(Oi,TG),e(TG,oko),e(Oi,rko),e(Ro,tko),e(Ro,B6),e(B6,ako),e(B6,ame),e(ame,nko),e(B6,sko),e(Ro,lko),e(Ro,it),M(I6,it,null),e(it,iko),e(it,nme),e(nme,dko),e(it,cko),e(it,Vi),e(Vi,fko),e(Vi,sme),e(sme,mko),e(Vi,gko),e(Vi,MG),e(MG,hko),e(Vi,pko),e(it,_ko),M(Qb,it,null),e(Ro,uko),e(Ro,oo),M(N6,oo,null),e(oo,bko),e(oo,lme),e(lme,vko),e(oo,Fko),e(oo,Ra),e(Ra,Tko),e(Ra,ime),e(ime,Mko),e(Ra,Eko),e(Ra,dme),e(dme,Cko),e(Ra,wko),e(Ra,cme),e(cme,Ako),e(Ra,yko),e(oo,Lko),e(oo,N),e(N,Hb),e(Hb,fme),e(fme,xko),e(Hb,$ko),e(Hb,EG),e(EG,kko),e(Hb,Sko),e(N,Rko),e(N,Ub),e(Ub,mme),e(mme,Pko),e(Ub,Bko),e(Ub,CG),e(CG,Iko),e(Ub,Nko),e(N,qko),e(N,Jb),e(Jb,gme),e(gme,jko),e(Jb,Dko),e(Jb,wG),e(wG,Gko),e(Jb,Oko),e(N,Vko),e(N,Yb),e(Yb,hme),e(hme,Xko),e(Yb,zko),e(Yb,AG),e(AG,Wko),e(Yb,Qko),e(N,Hko),e(N,Kb),e(Kb,pme),e(pme,Uko),e(Kb,Jko),e(Kb,yG),e(yG,Yko),e(Kb,Kko),e(N,Zko),e(N,Zb),e(Zb,_me),e(_me,eSo),e(Zb,oSo),e(Zb,LG),e(LG,rSo),e(Zb,tSo),e(N,aSo),e(N,e2),e(e2,ume),e(ume,nSo),e(e2,sSo),e(e2,xG),e(xG,lSo),e(e2,iSo),e(N,dSo),e(N,o2),e(o2,bme),e(bme,cSo),e(o2,fSo),e(o2,$G),e($G,mSo),e(o2,gSo),e(N,hSo),e(N,r2),e(r2,vme),e(vme,pSo),e(r2,_So),e(r2,kG),e(kG,uSo),e(r2,bSo),e(N,vSo),e(N,t2),e(t2,Fme),e(Fme,FSo),e(t2,TSo),e(t2,SG),e(SG,MSo),e(t2,ESo),e(N,CSo),e(N,a2),e(a2,Tme),e(Tme,wSo),e(a2,ASo),e(a2,RG),e(RG,ySo),e(a2,LSo),e(N,xSo),e(N,n2),e(n2,Mme),e(Mme,$So),e(n2,kSo),e(n2,PG),e(PG,SSo),e(n2,RSo),e(N,PSo),e(N,s2),e(s2,Eme),e(Eme,BSo),e(s2,ISo),e(s2,BG),e(BG,NSo),e(s2,qSo),e(N,jSo),e(N,l2),e(l2,Cme),e(Cme,DSo),e(l2,GSo),e(l2,IG),e(IG,OSo),e(l2,VSo),e(N,XSo),e(N,i2),e(i2,wme),e(wme,zSo),e(i2,WSo),e(i2,NG),e(NG,QSo),e(i2,HSo),e(N,USo),e(N,d2),e(d2,Ame),e(Ame,JSo),e(d2,YSo),e(d2,qG),e(qG,KSo),e(d2,ZSo),e(N,eRo),e(N,c2),e(c2,yme),e(yme,oRo),e(c2,rRo),e(c2,jG),e(jG,tRo),e(c2,aRo),e(N,nRo),e(N,f2),e(f2,Lme),e(Lme,sRo),e(f2,lRo),e(f2,DG),e(DG,iRo),e(f2,dRo),e(N,cRo),e(N,m2),e(m2,xme),e(xme,fRo),e(m2,mRo),e(m2,GG),e(GG,gRo),e(m2,hRo),e(N,pRo),e(N,g2),e(g2,$me),e($me,_Ro),e(g2,uRo),e(g2,OG),e(OG,bRo),e(g2,vRo),e(N,FRo),e(N,h2),e(h2,kme),e(kme,TRo),e(h2,MRo),e(h2,VG),e(VG,ERo),e(h2,CRo),e(N,wRo),e(N,p2),e(p2,Sme),e(Sme,ARo),e(p2,yRo),e(p2,XG),e(XG,LRo),e(p2,xRo),e(N,$Ro),e(N,_2),e(_2,Rme),e(Rme,kRo),e(_2,SRo),e(_2,zG),e(zG,RRo),e(_2,PRo),e(N,BRo),e(N,u2),e(u2,Pme),e(Pme,IRo),e(u2,NRo),e(u2,WG),e(WG,qRo),e(u2,jRo),e(N,DRo),e(N,b2),e(b2,Bme),e(Bme,GRo),e(b2,ORo),e(b2,QG),e(QG,VRo),e(b2,XRo),e(N,zRo),e(N,v2),e(v2,Ime),e(Ime,WRo),e(v2,QRo),e(v2,HG),e(HG,HRo),e(v2,URo),e(N,JRo),e(N,F2),e(F2,Nme),e(Nme,YRo),e(F2,KRo),e(F2,UG),e(UG,ZRo),e(F2,ePo),e(N,oPo),e(N,T2),e(T2,qme),e(qme,rPo),e(T2,tPo),e(T2,JG),e(JG,aPo),e(T2,nPo),e(N,sPo),e(N,M2),e(M2,jme),e(jme,lPo),e(M2,iPo),e(M2,YG),e(YG,dPo),e(M2,cPo),e(N,fPo),e(N,E2),e(E2,Dme),e(Dme,mPo),e(E2,gPo),e(E2,KG),e(KG,hPo),e(E2,pPo),e(N,_Po),e(N,C2),e(C2,Gme),e(Gme,uPo),e(C2,bPo),e(C2,ZG),e(ZG,vPo),e(C2,FPo),e(N,TPo),e(N,w2),e(w2,Ome),e(Ome,MPo),e(w2,EPo),e(w2,eO),e(eO,CPo),e(w2,wPo),e(N,APo),e(N,A2),e(A2,Vme),e(Vme,yPo),e(A2,LPo),e(A2,oO),e(oO,xPo),e(A2,$Po),e(N,kPo),e(N,y2),e(y2,Xme),e(Xme,SPo),e(y2,RPo),e(y2,rO),e(rO,PPo),e(y2,BPo),e(N,IPo),e(N,L2),e(L2,zme),e(zme,NPo),e(L2,qPo),e(L2,tO),e(tO,jPo),e(L2,DPo),e(N,GPo),e(N,x2),e(x2,Wme),e(Wme,OPo),e(x2,VPo),e(x2,aO),e(aO,XPo),e(x2,zPo),e(N,WPo),e(N,$2),e($2,Qme),e(Qme,QPo),e($2,HPo),e($2,nO),e(nO,UPo),e($2,JPo),e(N,YPo),e(N,k2),e(k2,Hme),e(Hme,KPo),e(k2,ZPo),e(k2,sO),e(sO,eBo),e(k2,oBo),e(N,rBo),e(N,S2),e(S2,Ume),e(Ume,tBo),e(S2,aBo),e(S2,lO),e(lO,nBo),e(S2,sBo),e(N,lBo),e(N,R2),e(R2,Jme),e(Jme,iBo),e(R2,dBo),e(R2,iO),e(iO,cBo),e(R2,fBo),e(N,mBo),e(N,P2),e(P2,Yme),e(Yme,gBo),e(P2,hBo),e(P2,dO),e(dO,pBo),e(P2,_Bo),e(N,uBo),e(N,B2),e(B2,Kme),e(Kme,bBo),e(B2,vBo),e(B2,cO),e(cO,FBo),e(B2,TBo),e(N,MBo),e(N,I2),e(I2,Zme),e(Zme,EBo),e(I2,CBo),e(I2,fO),e(fO,wBo),e(I2,ABo),e(N,yBo),e(N,N2),e(N2,ege),e(ege,LBo),e(N2,xBo),e(N2,mO),e(mO,$Bo),e(N2,kBo),e(N,SBo),e(N,q2),e(q2,oge),e(oge,RBo),e(q2,PBo),e(q2,gO),e(gO,BBo),e(q2,IBo),e(N,NBo),e(N,j2),e(j2,rge),e(rge,qBo),e(j2,jBo),e(j2,hO),e(hO,DBo),e(j2,GBo),e(N,OBo),e(N,D2),e(D2,tge),e(tge,VBo),e(D2,XBo),e(D2,pO),e(pO,zBo),e(D2,WBo),e(oo,QBo),e(oo,G2),e(G2,HBo),e(G2,age),e(age,UBo),e(G2,JBo),e(G2,nge),e(nge,YBo),e(oo,KBo),M(O2,oo,null),b(f,sje,u),b(f,Xi,u),e(Xi,V2),e(V2,sge),M(q6,sge,null),e(Xi,ZBo),e(Xi,lge),e(lge,eIo),b(f,lje,u),b(f,Po,u),M(j6,Po,null),e(Po,oIo),e(Po,zi),e(zi,rIo),e(zi,_O),e(_O,tIo),e(zi,aIo),e(zi,uO),e(uO,nIo),e(zi,sIo),e(Po,lIo),e(Po,D6),e(D6,iIo),e(D6,ige),e(ige,dIo),e(D6,cIo),e(Po,fIo),e(Po,dt),M(G6,dt,null),e(dt,mIo),e(dt,dge),e(dge,gIo),e(dt,hIo),e(dt,Wi),e(Wi,pIo),e(Wi,cge),e(cge,_Io),e(Wi,uIo),e(Wi,bO),e(bO,bIo),e(Wi,vIo),e(dt,FIo),M(X2,dt,null),e(Po,TIo),e(Po,ro),M(O6,ro,null),e(ro,MIo),e(ro,fge),e(fge,EIo),e(ro,CIo),e(ro,Pa),e(Pa,wIo),e(Pa,mge),e(mge,AIo),e(Pa,yIo),e(Pa,gge),e(gge,LIo),e(Pa,xIo),e(Pa,hge),e(hge,$Io),e(Pa,kIo),e(ro,SIo),e(ro,K),e(K,z2),e(z2,pge),e(pge,RIo),e(z2,PIo),e(z2,vO),e(vO,BIo),e(z2,IIo),e(K,NIo),e(K,W2),e(W2,_ge),e(_ge,qIo),e(W2,jIo),e(W2,FO),e(FO,DIo),e(W2,GIo),e(K,OIo),e(K,Q2),e(Q2,uge),e(uge,VIo),e(Q2,XIo),e(Q2,TO),e(TO,zIo),e(Q2,WIo),e(K,QIo),e(K,H2),e(H2,bge),e(bge,HIo),e(H2,UIo),e(H2,MO),e(MO,JIo),e(H2,YIo),e(K,KIo),e(K,U2),e(U2,vge),e(vge,ZIo),e(U2,eNo),e(U2,EO),e(EO,oNo),e(U2,rNo),e(K,tNo),e(K,J2),e(J2,Fge),e(Fge,aNo),e(J2,nNo),e(J2,CO),e(CO,sNo),e(J2,lNo),e(K,iNo),e(K,Y2),e(Y2,Tge),e(Tge,dNo),e(Y2,cNo),e(Y2,wO),e(wO,fNo),e(Y2,mNo),e(K,gNo),e(K,K2),e(K2,Mge),e(Mge,hNo),e(K2,pNo),e(K2,AO),e(AO,_No),e(K2,uNo),e(K,bNo),e(K,Z2),e(Z2,Ege),e(Ege,vNo),e(Z2,FNo),e(Z2,yO),e(yO,TNo),e(Z2,MNo),e(K,ENo),e(K,ev),e(ev,Cge),e(Cge,CNo),e(ev,wNo),e(ev,LO),e(LO,ANo),e(ev,yNo),e(K,LNo),e(K,ov),e(ov,wge),e(wge,xNo),e(ov,$No),e(ov,xO),e(xO,kNo),e(ov,SNo),e(K,RNo),e(K,rv),e(rv,Age),e(Age,PNo),e(rv,BNo),e(rv,$O),e($O,INo),e(rv,NNo),e(K,qNo),e(K,tv),e(tv,yge),e(yge,jNo),e(tv,DNo),e(tv,kO),e(kO,GNo),e(tv,ONo),e(K,VNo),e(K,av),e(av,Lge),e(Lge,XNo),e(av,zNo),e(av,SO),e(SO,WNo),e(av,QNo),e(K,HNo),e(K,nv),e(nv,xge),e(xge,UNo),e(nv,JNo),e(nv,RO),e(RO,YNo),e(nv,KNo),e(K,ZNo),e(K,sv),e(sv,$ge),e($ge,eqo),e(sv,oqo),e(sv,PO),e(PO,rqo),e(sv,tqo),e(K,aqo),e(K,lv),e(lv,kge),e(kge,nqo),e(lv,sqo),e(lv,BO),e(BO,lqo),e(lv,iqo),e(K,dqo),e(K,iv),e(iv,Sge),e(Sge,cqo),e(iv,fqo),e(iv,IO),e(IO,mqo),e(iv,gqo),e(K,hqo),e(K,dv),e(dv,Rge),e(Rge,pqo),e(dv,_qo),e(dv,NO),e(NO,uqo),e(dv,bqo),e(K,vqo),e(K,cv),e(cv,Pge),e(Pge,Fqo),e(cv,Tqo),e(cv,qO),e(qO,Mqo),e(cv,Eqo),e(K,Cqo),e(K,fv),e(fv,Bge),e(Bge,wqo),e(fv,Aqo),e(fv,jO),e(jO,yqo),e(fv,Lqo),e(K,xqo),e(K,mv),e(mv,Ige),e(Ige,$qo),e(mv,kqo),e(mv,DO),e(DO,Sqo),e(mv,Rqo),e(K,Pqo),e(K,gv),e(gv,Nge),e(Nge,Bqo),e(gv,Iqo),e(gv,GO),e(GO,Nqo),e(gv,qqo),e(K,jqo),e(K,hv),e(hv,qge),e(qge,Dqo),e(hv,Gqo),e(hv,OO),e(OO,Oqo),e(hv,Vqo),e(K,Xqo),e(K,pv),e(pv,jge),e(jge,zqo),e(pv,Wqo),e(pv,VO),e(VO,Qqo),e(pv,Hqo),e(K,Uqo),e(K,_v),e(_v,Dge),e(Dge,Jqo),e(_v,Yqo),e(_v,XO),e(XO,Kqo),e(_v,Zqo),e(K,ejo),e(K,uv),e(uv,Gge),e(Gge,ojo),e(uv,rjo),e(uv,zO),e(zO,tjo),e(uv,ajo),e(K,njo),e(K,bv),e(bv,Oge),e(Oge,sjo),e(bv,ljo),e(bv,WO),e(WO,ijo),e(bv,djo),e(K,cjo),e(K,vv),e(vv,Vge),e(Vge,fjo),e(vv,mjo),e(vv,QO),e(QO,gjo),e(vv,hjo),e(ro,pjo),e(ro,Fv),e(Fv,_jo),e(Fv,Xge),e(Xge,ujo),e(Fv,bjo),e(Fv,zge),e(zge,vjo),e(ro,Fjo),M(Tv,ro,null),b(f,ije,u),b(f,Qi,u),e(Qi,Mv),e(Mv,Wge),M(V6,Wge,null),e(Qi,Tjo),e(Qi,Qge),e(Qge,Mjo),b(f,dje,u),b(f,Bo,u),M(X6,Bo,null),e(Bo,Ejo),e(Bo,Hi),e(Hi,Cjo),e(Hi,HO),e(HO,wjo),e(Hi,Ajo),e(Hi,UO),e(UO,yjo),e(Hi,Ljo),e(Bo,xjo),e(Bo,z6),e(z6,$jo),e(z6,Hge),e(Hge,kjo),e(z6,Sjo),e(Bo,Rjo),e(Bo,ct),M(W6,ct,null),e(ct,Pjo),e(ct,Uge),e(Uge,Bjo),e(ct,Ijo),e(ct,Ui),e(Ui,Njo),e(Ui,Jge),e(Jge,qjo),e(Ui,jjo),e(Ui,JO),e(JO,Djo),e(Ui,Gjo),e(ct,Ojo),M(Ev,ct,null),e(Bo,Vjo),e(Bo,to),M(Q6,to,null),e(to,Xjo),e(to,Yge),e(Yge,zjo),e(to,Wjo),e(to,Ba),e(Ba,Qjo),e(Ba,Kge),e(Kge,Hjo),e(Ba,Ujo),e(Ba,Zge),e(Zge,Jjo),e(Ba,Yjo),e(Ba,ehe),e(ehe,Kjo),e(Ba,Zjo),e(to,eDo),e(to,Yr),e(Yr,Cv),e(Cv,ohe),e(ohe,oDo),e(Cv,rDo),e(Cv,YO),e(YO,tDo),e(Cv,aDo),e(Yr,nDo),e(Yr,wv),e(wv,rhe),e(rhe,sDo),e(wv,lDo),e(wv,KO),e(KO,iDo),e(wv,dDo),e(Yr,cDo),e(Yr,Av),e(Av,the),e(the,fDo),e(Av,mDo),e(Av,ZO),e(ZO,gDo),e(Av,hDo),e(Yr,pDo),e(Yr,yv),e(yv,ahe),e(ahe,_Do),e(yv,uDo),e(yv,eV),e(eV,bDo),e(yv,vDo),e(Yr,FDo),e(Yr,Lv),e(Lv,nhe),e(nhe,TDo),e(Lv,MDo),e(Lv,oV),e(oV,EDo),e(Lv,CDo),e(to,wDo),e(to,xv),e(xv,ADo),e(xv,she),e(she,yDo),e(xv,LDo),e(xv,lhe),e(lhe,xDo),e(to,$Do),M($v,to,null),b(f,cje,u),b(f,Ji,u),e(Ji,kv),e(kv,ihe),M(H6,ihe,null),e(Ji,kDo),e(Ji,dhe),e(dhe,SDo),b(f,fje,u),b(f,Io,u),M(U6,Io,null),e(Io,RDo),e(Io,Yi),e(Yi,PDo),e(Yi,rV),e(rV,BDo),e(Yi,IDo),e(Yi,tV),e(tV,NDo),e(Yi,qDo),e(Io,jDo),e(Io,J6),e(J6,DDo),e(J6,che),e(che,GDo),e(J6,ODo),e(Io,VDo),e(Io,ft),M(Y6,ft,null),e(ft,XDo),e(ft,fhe),e(fhe,zDo),e(ft,WDo),e(ft,Ki),e(Ki,QDo),e(Ki,mhe),e(mhe,HDo),e(Ki,UDo),e(Ki,aV),e(aV,JDo),e(Ki,YDo),e(ft,KDo),M(Sv,ft,null),e(Io,ZDo),e(Io,ao),M(K6,ao,null),e(ao,eGo),e(ao,ghe),e(ghe,oGo),e(ao,rGo),e(ao,Ia),e(Ia,tGo),e(Ia,hhe),e(hhe,aGo),e(Ia,nGo),e(Ia,phe),e(phe,sGo),e(Ia,lGo),e(Ia,_he),e(_he,iGo),e(Ia,dGo),e(ao,cGo),e(ao,U),e(U,Rv),e(Rv,uhe),e(uhe,fGo),e(Rv,mGo),e(Rv,nV),e(nV,gGo),e(Rv,hGo),e(U,pGo),e(U,Pv),e(Pv,bhe),e(bhe,_Go),e(Pv,uGo),e(Pv,sV),e(sV,bGo),e(Pv,vGo),e(U,FGo),e(U,Bv),e(Bv,vhe),e(vhe,TGo),e(Bv,MGo),e(Bv,lV),e(lV,EGo),e(Bv,CGo),e(U,wGo),e(U,Iv),e(Iv,Fhe),e(Fhe,AGo),e(Iv,yGo),e(Iv,iV),e(iV,LGo),e(Iv,xGo),e(U,$Go),e(U,Nv),e(Nv,The),e(The,kGo),e(Nv,SGo),e(Nv,dV),e(dV,RGo),e(Nv,PGo),e(U,BGo),e(U,qv),e(qv,Mhe),e(Mhe,IGo),e(qv,NGo),e(qv,cV),e(cV,qGo),e(qv,jGo),e(U,DGo),e(U,jv),e(jv,Ehe),e(Ehe,GGo),e(jv,OGo),e(jv,fV),e(fV,VGo),e(jv,XGo),e(U,zGo),e(U,Dv),e(Dv,Che),e(Che,WGo),e(Dv,QGo),e(Dv,mV),e(mV,HGo),e(Dv,UGo),e(U,JGo),e(U,Gv),e(Gv,whe),e(whe,YGo),e(Gv,KGo),e(Gv,gV),e(gV,ZGo),e(Gv,eOo),e(U,oOo),e(U,Ov),e(Ov,Ahe),e(Ahe,rOo),e(Ov,tOo),e(Ov,hV),e(hV,aOo),e(Ov,nOo),e(U,sOo),e(U,Vv),e(Vv,yhe),e(yhe,lOo),e(Vv,iOo),e(Vv,pV),e(pV,dOo),e(Vv,cOo),e(U,fOo),e(U,Xv),e(Xv,Lhe),e(Lhe,mOo),e(Xv,gOo),e(Xv,_V),e(_V,hOo),e(Xv,pOo),e(U,_Oo),e(U,zv),e(zv,xhe),e(xhe,uOo),e(zv,bOo),e(zv,uV),e(uV,vOo),e(zv,FOo),e(U,TOo),e(U,Wv),e(Wv,$he),e($he,MOo),e(Wv,EOo),e(Wv,bV),e(bV,COo),e(Wv,wOo),e(U,AOo),e(U,Qv),e(Qv,khe),e(khe,yOo),e(Qv,LOo),e(Qv,vV),e(vV,xOo),e(Qv,$Oo),e(U,kOo),e(U,Hv),e(Hv,She),e(She,SOo),e(Hv,ROo),e(Hv,FV),e(FV,POo),e(Hv,BOo),e(U,IOo),e(U,Uv),e(Uv,Rhe),e(Rhe,NOo),e(Uv,qOo),e(Uv,TV),e(TV,jOo),e(Uv,DOo),e(U,GOo),e(U,Jv),e(Jv,Phe),e(Phe,OOo),e(Jv,VOo),e(Jv,MV),e(MV,XOo),e(Jv,zOo),e(U,WOo),e(U,Yv),e(Yv,Bhe),e(Bhe,QOo),e(Yv,HOo),e(Yv,EV),e(EV,UOo),e(Yv,JOo),e(U,YOo),e(U,Kv),e(Kv,Ihe),e(Ihe,KOo),e(Kv,ZOo),e(Kv,CV),e(CV,eVo),e(Kv,oVo),e(U,rVo),e(U,Zv),e(Zv,Nhe),e(Nhe,tVo),e(Zv,aVo),e(Zv,wV),e(wV,nVo),e(Zv,sVo),e(U,lVo),e(U,e5),e(e5,qhe),e(qhe,iVo),e(e5,dVo),e(e5,AV),e(AV,cVo),e(e5,fVo),e(U,mVo),e(U,o5),e(o5,jhe),e(jhe,gVo),e(o5,hVo),e(o5,yV),e(yV,pVo),e(o5,_Vo),e(U,uVo),e(U,r5),e(r5,Dhe),e(Dhe,bVo),e(r5,vVo),e(r5,LV),e(LV,FVo),e(r5,TVo),e(U,MVo),e(U,t5),e(t5,Ghe),e(Ghe,EVo),e(t5,CVo),e(t5,xV),e(xV,wVo),e(t5,AVo),e(U,yVo),e(U,a5),e(a5,Ohe),e(Ohe,LVo),e(a5,xVo),e(a5,$V),e($V,$Vo),e(a5,kVo),e(U,SVo),e(U,n5),e(n5,Vhe),e(Vhe,RVo),e(n5,PVo),e(n5,kV),e(kV,BVo),e(n5,IVo),e(U,NVo),e(U,s5),e(s5,Xhe),e(Xhe,qVo),e(s5,jVo),e(s5,SV),e(SV,DVo),e(s5,GVo),e(U,OVo),e(U,l5),e(l5,zhe),e(zhe,VVo),e(l5,XVo),e(l5,RV),e(RV,zVo),e(l5,WVo),e(U,QVo),e(U,i5),e(i5,Whe),e(Whe,HVo),e(i5,UVo),e(i5,PV),e(PV,JVo),e(i5,YVo),e(U,KVo),e(U,d5),e(d5,Qhe),e(Qhe,ZVo),e(d5,eXo),e(d5,BV),e(BV,oXo),e(d5,rXo),e(U,tXo),e(U,c5),e(c5,Hhe),e(Hhe,aXo),e(c5,nXo),e(c5,IV),e(IV,sXo),e(c5,lXo),e(U,iXo),e(U,f5),e(f5,Uhe),e(Uhe,dXo),e(f5,cXo),e(f5,NV),e(NV,fXo),e(f5,mXo),e(U,gXo),e(U,m5),e(m5,Jhe),e(Jhe,hXo),e(m5,pXo),e(m5,qV),e(qV,_Xo),e(m5,uXo),e(ao,bXo),e(ao,g5),e(g5,vXo),e(g5,Yhe),e(Yhe,FXo),e(g5,TXo),e(g5,Khe),e(Khe,MXo),e(ao,EXo),M(h5,ao,null),b(f,mje,u),b(f,Zi,u),e(Zi,p5),e(p5,Zhe),M(Z6,Zhe,null),e(Zi,CXo),e(Zi,epe),e(epe,wXo),b(f,gje,u),b(f,No,u),M(ey,No,null),e(No,AXo),e(No,ed),e(ed,yXo),e(ed,jV),e(jV,LXo),e(ed,xXo),e(ed,DV),e(DV,$Xo),e(ed,kXo),e(No,SXo),e(No,oy),e(oy,RXo),e(oy,ope),e(ope,PXo),e(oy,BXo),e(No,IXo),e(No,mt),M(ry,mt,null),e(mt,NXo),e(mt,rpe),e(rpe,qXo),e(mt,jXo),e(mt,od),e(od,DXo),e(od,tpe),e(tpe,GXo),e(od,OXo),e(od,GV),e(GV,VXo),e(od,XXo),e(mt,zXo),M(_5,mt,null),e(No,WXo),e(No,no),M(ty,no,null),e(no,QXo),e(no,ape),e(ape,HXo),e(no,UXo),e(no,Na),e(Na,JXo),e(Na,npe),e(npe,YXo),e(Na,KXo),e(Na,spe),e(spe,ZXo),e(Na,ezo),e(Na,lpe),e(lpe,ozo),e(Na,rzo),e(no,tzo),e(no,V),e(V,u5),e(u5,ipe),e(ipe,azo),e(u5,nzo),e(u5,OV),e(OV,szo),e(u5,lzo),e(V,izo),e(V,b5),e(b5,dpe),e(dpe,dzo),e(b5,czo),e(b5,VV),e(VV,fzo),e(b5,mzo),e(V,gzo),e(V,v5),e(v5,cpe),e(cpe,hzo),e(v5,pzo),e(v5,XV),e(XV,_zo),e(v5,uzo),e(V,bzo),e(V,F5),e(F5,fpe),e(fpe,vzo),e(F5,Fzo),e(F5,zV),e(zV,Tzo),e(F5,Mzo),e(V,Ezo),e(V,T5),e(T5,mpe),e(mpe,Czo),e(T5,wzo),e(T5,WV),e(WV,Azo),e(T5,yzo),e(V,Lzo),e(V,M5),e(M5,gpe),e(gpe,xzo),e(M5,$zo),e(M5,QV),e(QV,kzo),e(M5,Szo),e(V,Rzo),e(V,E5),e(E5,hpe),e(hpe,Pzo),e(E5,Bzo),e(E5,HV),e(HV,Izo),e(E5,Nzo),e(V,qzo),e(V,C5),e(C5,ppe),e(ppe,jzo),e(C5,Dzo),e(C5,UV),e(UV,Gzo),e(C5,Ozo),e(V,Vzo),e(V,w5),e(w5,_pe),e(_pe,Xzo),e(w5,zzo),e(w5,JV),e(JV,Wzo),e(w5,Qzo),e(V,Hzo),e(V,A5),e(A5,upe),e(upe,Uzo),e(A5,Jzo),e(A5,YV),e(YV,Yzo),e(A5,Kzo),e(V,Zzo),e(V,y5),e(y5,bpe),e(bpe,eWo),e(y5,oWo),e(y5,KV),e(KV,rWo),e(y5,tWo),e(V,aWo),e(V,L5),e(L5,vpe),e(vpe,nWo),e(L5,sWo),e(L5,ZV),e(ZV,lWo),e(L5,iWo),e(V,dWo),e(V,x5),e(x5,Fpe),e(Fpe,cWo),e(x5,fWo),e(x5,eX),e(eX,mWo),e(x5,gWo),e(V,hWo),e(V,$5),e($5,Tpe),e(Tpe,pWo),e($5,_Wo),e($5,oX),e(oX,uWo),e($5,bWo),e(V,vWo),e(V,k5),e(k5,Mpe),e(Mpe,FWo),e(k5,TWo),e(k5,rX),e(rX,MWo),e(k5,EWo),e(V,CWo),e(V,S5),e(S5,Epe),e(Epe,wWo),e(S5,AWo),e(S5,tX),e(tX,yWo),e(S5,LWo),e(V,xWo),e(V,R5),e(R5,Cpe),e(Cpe,$Wo),e(R5,kWo),e(R5,aX),e(aX,SWo),e(R5,RWo),e(V,PWo),e(V,P5),e(P5,wpe),e(wpe,BWo),e(P5,IWo),e(P5,nX),e(nX,NWo),e(P5,qWo),e(V,jWo),e(V,B5),e(B5,Ape),e(Ape,DWo),e(B5,GWo),e(B5,sX),e(sX,OWo),e(B5,VWo),e(V,XWo),e(V,I5),e(I5,ype),e(ype,zWo),e(I5,WWo),e(I5,lX),e(lX,QWo),e(I5,HWo),e(V,UWo),e(V,N5),e(N5,Lpe),e(Lpe,JWo),e(N5,YWo),e(N5,iX),e(iX,KWo),e(N5,ZWo),e(V,eQo),e(V,q5),e(q5,xpe),e(xpe,oQo),e(q5,rQo),e(q5,dX),e(dX,tQo),e(q5,aQo),e(V,nQo),e(V,j5),e(j5,$pe),e($pe,sQo),e(j5,lQo),e(j5,cX),e(cX,iQo),e(j5,dQo),e(V,cQo),e(V,D5),e(D5,kpe),e(kpe,fQo),e(D5,mQo),e(D5,fX),e(fX,gQo),e(D5,hQo),e(V,pQo),e(V,G5),e(G5,Spe),e(Spe,_Qo),e(G5,uQo),e(G5,mX),e(mX,bQo),e(G5,vQo),e(V,FQo),e(V,O5),e(O5,Rpe),e(Rpe,TQo),e(O5,MQo),e(O5,gX),e(gX,EQo),e(O5,CQo),e(V,wQo),e(V,V5),e(V5,Ppe),e(Ppe,AQo),e(V5,yQo),e(V5,hX),e(hX,LQo),e(V5,xQo),e(V,$Qo),e(V,X5),e(X5,Bpe),e(Bpe,kQo),e(X5,SQo),e(X5,pX),e(pX,RQo),e(X5,PQo),e(V,BQo),e(V,z5),e(z5,Ipe),e(Ipe,IQo),e(z5,NQo),e(z5,_X),e(_X,qQo),e(z5,jQo),e(V,DQo),e(V,W5),e(W5,Npe),e(Npe,GQo),e(W5,OQo),e(W5,uX),e(uX,VQo),e(W5,XQo),e(V,zQo),e(V,Q5),e(Q5,qpe),e(qpe,WQo),e(Q5,QQo),e(Q5,bX),e(bX,HQo),e(Q5,UQo),e(V,JQo),e(V,H5),e(H5,jpe),e(jpe,YQo),e(H5,KQo),e(H5,vX),e(vX,ZQo),e(H5,eHo),e(V,oHo),e(V,U5),e(U5,Dpe),e(Dpe,rHo),e(U5,tHo),e(U5,FX),e(FX,aHo),e(U5,nHo),e(V,sHo),e(V,J5),e(J5,Gpe),e(Gpe,lHo),e(J5,iHo),e(J5,TX),e(TX,dHo),e(J5,cHo),e(V,fHo),e(V,Y5),e(Y5,Ope),e(Ope,mHo),e(Y5,gHo),e(Y5,MX),e(MX,hHo),e(Y5,pHo),e(V,_Ho),e(V,K5),e(K5,Vpe),e(Vpe,uHo),e(K5,bHo),e(K5,EX),e(EX,vHo),e(K5,FHo),e(V,THo),e(V,Z5),e(Z5,Xpe),e(Xpe,MHo),e(Z5,EHo),e(Z5,CX),e(CX,CHo),e(Z5,wHo),e(V,AHo),e(V,e3),e(e3,zpe),e(zpe,yHo),e(e3,LHo),e(e3,wX),e(wX,xHo),e(e3,$Ho),e(V,kHo),e(V,o3),e(o3,Wpe),e(Wpe,SHo),e(o3,RHo),e(o3,AX),e(AX,PHo),e(o3,BHo),e(V,IHo),e(V,r3),e(r3,Qpe),e(Qpe,NHo),e(r3,qHo),e(r3,yX),e(yX,jHo),e(r3,DHo),e(no,GHo),e(no,t3),e(t3,OHo),e(t3,Hpe),e(Hpe,VHo),e(t3,XHo),e(t3,Upe),e(Upe,zHo),e(no,WHo),M(a3,no,null),b(f,hje,u),b(f,rd,u),e(rd,n3),e(n3,Jpe),M(ay,Jpe,null),e(rd,QHo),e(rd,Ype),e(Ype,HHo),b(f,pje,u),b(f,qo,u),M(ny,qo,null),e(qo,UHo),e(qo,td),e(td,JHo),e(td,LX),e(LX,YHo),e(td,KHo),e(td,xX),e(xX,ZHo),e(td,eUo),e(qo,oUo),e(qo,sy),e(sy,rUo),e(sy,Kpe),e(Kpe,tUo),e(sy,aUo),e(qo,nUo),e(qo,gt),M(ly,gt,null),e(gt,sUo),e(gt,Zpe),e(Zpe,lUo),e(gt,iUo),e(gt,ad),e(ad,dUo),e(ad,e_e),e(e_e,cUo),e(ad,fUo),e(ad,$X),e($X,mUo),e(ad,gUo),e(gt,hUo),M(s3,gt,null),e(qo,pUo),e(qo,so),M(iy,so,null),e(so,_Uo),e(so,o_e),e(o_e,uUo),e(so,bUo),e(so,qa),e(qa,vUo),e(qa,r_e),e(r_e,FUo),e(qa,TUo),e(qa,t_e),e(t_e,MUo),e(qa,EUo),e(qa,a_e),e(a_e,CUo),e(qa,wUo),e(so,AUo),e(so,n_e),e(n_e,l3),e(l3,s_e),e(s_e,yUo),e(l3,LUo),e(l3,kX),e(kX,xUo),e(l3,$Uo),e(so,kUo),e(so,i3),e(i3,SUo),e(i3,l_e),e(l_e,RUo),e(i3,PUo),e(i3,i_e),e(i_e,BUo),e(so,IUo),M(d3,so,null),b(f,_je,u),b(f,nd,u),e(nd,c3),e(c3,d_e),M(dy,d_e,null),e(nd,NUo),e(nd,c_e),e(c_e,qUo),b(f,uje,u),b(f,jo,u),M(cy,jo,null),e(jo,jUo),e(jo,sd),e(sd,DUo),e(sd,SX),e(SX,GUo),e(sd,OUo),e(sd,RX),e(RX,VUo),e(sd,XUo),e(jo,zUo),e(jo,fy),e(fy,WUo),e(fy,f_e),e(f_e,QUo),e(fy,HUo),e(jo,UUo),e(jo,ht),M(my,ht,null),e(ht,JUo),e(ht,m_e),e(m_e,YUo),e(ht,KUo),e(ht,ld),e(ld,ZUo),e(ld,g_e),e(g_e,eJo),e(ld,oJo),e(ld,PX),e(PX,rJo),e(ld,tJo),e(ht,aJo),M(f3,ht,null),e(jo,nJo),e(jo,lo),M(gy,lo,null),e(lo,sJo),e(lo,h_e),e(h_e,lJo),e(lo,iJo),e(lo,ja),e(ja,dJo),e(ja,p_e),e(p_e,cJo),e(ja,fJo),e(ja,__e),e(__e,mJo),e(ja,gJo),e(ja,u_e),e(u_e,hJo),e(ja,pJo),e(lo,_Jo),e(lo,ve),e(ve,m3),e(m3,b_e),e(b_e,uJo),e(m3,bJo),e(m3,BX),e(BX,vJo),e(m3,FJo),e(ve,TJo),e(ve,g3),e(g3,v_e),e(v_e,MJo),e(g3,EJo),e(g3,IX),e(IX,CJo),e(g3,wJo),e(ve,AJo),e(ve,h3),e(h3,F_e),e(F_e,yJo),e(h3,LJo),e(h3,NX),e(NX,xJo),e(h3,$Jo),e(ve,kJo),e(ve,p3),e(p3,T_e),e(T_e,SJo),e(p3,RJo),e(p3,qX),e(qX,PJo),e(p3,BJo),e(ve,IJo),e(ve,Bs),e(Bs,M_e),e(M_e,NJo),e(Bs,qJo),e(Bs,jX),e(jX,jJo),e(Bs,DJo),e(Bs,DX),e(DX,GJo),e(Bs,OJo),e(ve,VJo),e(ve,_3),e(_3,E_e),e(E_e,XJo),e(_3,zJo),e(_3,GX),e(GX,WJo),e(_3,QJo),e(ve,HJo),e(ve,Is),e(Is,C_e),e(C_e,UJo),e(Is,JJo),e(Is,OX),e(OX,YJo),e(Is,KJo),e(Is,VX),e(VX,ZJo),e(Is,eYo),e(ve,oYo),e(ve,pt),e(pt,w_e),e(w_e,rYo),e(pt,tYo),e(pt,XX),e(XX,aYo),e(pt,nYo),e(pt,zX),e(zX,sYo),e(pt,lYo),e(pt,WX),e(WX,iYo),e(pt,dYo),e(ve,cYo),e(ve,u3),e(u3,A_e),e(A_e,fYo),e(u3,mYo),e(u3,QX),e(QX,gYo),e(u3,hYo),e(ve,pYo),e(ve,b3),e(b3,y_e),e(y_e,_Yo),e(b3,uYo),e(b3,HX),e(HX,bYo),e(b3,vYo),e(ve,FYo),e(ve,v3),e(v3,L_e),e(L_e,TYo),e(v3,MYo),e(v3,UX),e(UX,EYo),e(v3,CYo),e(ve,wYo),e(ve,F3),e(F3,x_e),e(x_e,AYo),e(F3,yYo),e(F3,JX),e(JX,LYo),e(F3,xYo),e(ve,$Yo),e(ve,T3),e(T3,$_e),e($_e,kYo),e(T3,SYo),e(T3,YX),e(YX,RYo),e(T3,PYo),e(ve,BYo),e(ve,M3),e(M3,k_e),e(k_e,IYo),e(M3,NYo),e(M3,KX),e(KX,qYo),e(M3,jYo),e(ve,DYo),e(ve,E3),e(E3,S_e),e(S_e,GYo),e(E3,OYo),e(E3,ZX),e(ZX,VYo),e(E3,XYo),e(lo,zYo),e(lo,C3),e(C3,WYo),e(C3,R_e),e(R_e,QYo),e(C3,HYo),e(C3,P_e),e(P_e,UYo),e(lo,JYo),M(w3,lo,null),b(f,bje,u),b(f,id,u),e(id,A3),e(A3,B_e),M(hy,B_e,null),e(id,YYo),e(id,I_e),e(I_e,KYo),b(f,vje,u),b(f,Do,u),M(py,Do,null),e(Do,ZYo),e(Do,dd),e(dd,eKo),e(dd,ez),e(ez,oKo),e(dd,rKo),e(dd,oz),e(oz,tKo),e(dd,aKo),e(Do,nKo),e(Do,_y),e(_y,sKo),e(_y,N_e),e(N_e,lKo),e(_y,iKo),e(Do,dKo),e(Do,_t),M(uy,_t,null),e(_t,cKo),e(_t,q_e),e(q_e,fKo),e(_t,mKo),e(_t,cd),e(cd,gKo),e(cd,j_e),e(j_e,hKo),e(cd,pKo),e(cd,rz),e(rz,_Ko),e(cd,uKo),e(_t,bKo),M(y3,_t,null),e(Do,vKo),e(Do,io),M(by,io,null),e(io,FKo),e(io,D_e),e(D_e,TKo),e(io,MKo),e(io,Da),e(Da,EKo),e(Da,G_e),e(G_e,CKo),e(Da,wKo),e(Da,O_e),e(O_e,AKo),e(Da,yKo),e(Da,V_e),e(V_e,LKo),e(Da,xKo),e(io,$Ko),e(io,X_e),e(X_e,L3),e(L3,z_e),e(z_e,kKo),e(L3,SKo),e(L3,tz),e(tz,RKo),e(L3,PKo),e(io,BKo),e(io,x3),e(x3,IKo),e(x3,W_e),e(W_e,NKo),e(x3,qKo),e(x3,Q_e),e(Q_e,jKo),e(io,DKo),M($3,io,null),b(f,Fje,u),b(f,fd,u),e(fd,k3),e(k3,H_e),M(vy,H_e,null),e(fd,GKo),e(fd,U_e),e(U_e,OKo),b(f,Tje,u),b(f,Go,u),M(Fy,Go,null),e(Go,VKo),e(Go,md),e(md,XKo),e(md,az),e(az,zKo),e(md,WKo),e(md,nz),e(nz,QKo),e(md,HKo),e(Go,UKo),e(Go,Ty),e(Ty,JKo),e(Ty,J_e),e(J_e,YKo),e(Ty,KKo),e(Go,ZKo),e(Go,ut),M(My,ut,null),e(ut,eZo),e(ut,Y_e),e(Y_e,oZo),e(ut,rZo),e(ut,gd),e(gd,tZo),e(gd,K_e),e(K_e,aZo),e(gd,nZo),e(gd,sz),e(sz,sZo),e(gd,lZo),e(ut,iZo),M(S3,ut,null),e(Go,dZo),e(Go,co),M(Ey,co,null),e(co,cZo),e(co,Z_e),e(Z_e,fZo),e(co,mZo),e(co,Ga),e(Ga,gZo),e(Ga,eue),e(eue,hZo),e(Ga,pZo),e(Ga,oue),e(oue,_Zo),e(Ga,uZo),e(Ga,rue),e(rue,bZo),e(Ga,vZo),e(co,FZo),e(co,Se),e(Se,R3),e(R3,tue),e(tue,TZo),e(R3,MZo),e(R3,lz),e(lz,EZo),e(R3,CZo),e(Se,wZo),e(Se,P3),e(P3,aue),e(aue,AZo),e(P3,yZo),e(P3,iz),e(iz,LZo),e(P3,xZo),e(Se,$Zo),e(Se,B3),e(B3,nue),e(nue,kZo),e(B3,SZo),e(B3,dz),e(dz,RZo),e(B3,PZo),e(Se,BZo),e(Se,I3),e(I3,sue),e(sue,IZo),e(I3,NZo),e(I3,cz),e(cz,qZo),e(I3,jZo),e(Se,DZo),e(Se,N3),e(N3,lue),e(lue,GZo),e(N3,OZo),e(N3,fz),e(fz,VZo),e(N3,XZo),e(Se,zZo),e(Se,q3),e(q3,iue),e(iue,WZo),e(q3,QZo),e(q3,mz),e(mz,HZo),e(q3,UZo),e(Se,JZo),e(Se,j3),e(j3,due),e(due,YZo),e(j3,KZo),e(j3,gz),e(gz,ZZo),e(j3,eer),e(Se,oer),e(Se,D3),e(D3,cue),e(cue,rer),e(D3,ter),e(D3,hz),e(hz,aer),e(D3,ner),e(Se,ser),e(Se,G3),e(G3,fue),e(fue,ler),e(G3,ier),e(G3,pz),e(pz,der),e(G3,cer),e(co,fer),e(co,O3),e(O3,mer),e(O3,mue),e(mue,ger),e(O3,her),e(O3,gue),e(gue,per),e(co,_er),M(V3,co,null),b(f,Mje,u),b(f,hd,u),e(hd,X3),e(X3,hue),M(Cy,hue,null),e(hd,uer),e(hd,pue),e(pue,ber),b(f,Eje,u),b(f,Oo,u),M(wy,Oo,null),e(Oo,ver),e(Oo,pd),e(pd,Fer),e(pd,_z),e(_z,Ter),e(pd,Mer),e(pd,uz),e(uz,Eer),e(pd,Cer),e(Oo,wer),e(Oo,Ay),e(Ay,Aer),e(Ay,_ue),e(_ue,yer),e(Ay,Ler),e(Oo,xer),e(Oo,bt),M(yy,bt,null),e(bt,$er),e(bt,uue),e(uue,ker),e(bt,Ser),e(bt,_d),e(_d,Rer),e(_d,bue),e(bue,Per),e(_d,Ber),e(_d,bz),e(bz,Ier),e(_d,Ner),e(bt,qer),M(z3,bt,null),e(Oo,jer),e(Oo,fo),M(Ly,fo,null),e(fo,Der),e(fo,vue),e(vue,Ger),e(fo,Oer),e(fo,Oa),e(Oa,Ver),e(Oa,Fue),e(Fue,Xer),e(Oa,zer),e(Oa,Tue),e(Tue,Wer),e(Oa,Qer),e(Oa,Mue),e(Mue,Her),e(Oa,Uer),e(fo,Jer),e(fo,Kr),e(Kr,W3),e(W3,Eue),e(Eue,Yer),e(W3,Ker),e(W3,vz),e(vz,Zer),e(W3,eor),e(Kr,oor),e(Kr,Q3),e(Q3,Cue),e(Cue,ror),e(Q3,tor),e(Q3,Fz),e(Fz,aor),e(Q3,nor),e(Kr,sor),e(Kr,H3),e(H3,wue),e(wue,lor),e(H3,ior),e(H3,Tz),e(Tz,dor),e(H3,cor),e(Kr,mor),e(Kr,U3),e(U3,Aue),e(Aue,gor),e(U3,hor),e(U3,Mz),e(Mz,por),e(U3,_or),e(Kr,uor),e(Kr,J3),e(J3,yue),e(yue,bor),e(J3,vor),e(J3,Ez),e(Ez,For),e(J3,Tor),e(fo,Mor),e(fo,Y3),e(Y3,Eor),e(Y3,Lue),e(Lue,Cor),e(Y3,wor),e(Y3,xue),e(xue,Aor),e(fo,yor),M(K3,fo,null),b(f,Cje,u),b(f,ud,u),e(ud,Z3),e(Z3,$ue),M(xy,$ue,null),e(ud,Lor),e(ud,kue),e(kue,xor),b(f,wje,u),b(f,Vo,u),M($y,Vo,null),e(Vo,$or),e(Vo,bd),e(bd,kor),e(bd,Cz),e(Cz,Sor),e(bd,Ror),e(bd,wz),e(wz,Por),e(bd,Bor),e(Vo,Ior),e(Vo,ky),e(ky,Nor),e(ky,Sue),e(Sue,qor),e(ky,jor),e(Vo,Dor),e(Vo,vt),M(Sy,vt,null),e(vt,Gor),e(vt,Rue),e(Rue,Oor),e(vt,Vor),e(vt,vd),e(vd,Xor),e(vd,Pue),e(Pue,zor),e(vd,Wor),e(vd,Az),e(Az,Qor),e(vd,Hor),e(vt,Uor),M(eF,vt,null),e(Vo,Jor),e(Vo,mo),M(Ry,mo,null),e(mo,Yor),e(mo,Bue),e(Bue,Kor),e(mo,Zor),e(mo,Va),e(Va,err),e(Va,Iue),e(Iue,orr),e(Va,rrr),e(Va,Nue),e(Nue,trr),e(Va,arr),e(Va,que),e(que,nrr),e(Va,srr),e(mo,lrr),e(mo,Re),e(Re,oF),e(oF,jue),e(jue,irr),e(oF,drr),e(oF,yz),e(yz,crr),e(oF,frr),e(Re,mrr),e(Re,rF),e(rF,Due),e(Due,grr),e(rF,hrr),e(rF,Lz),e(Lz,prr),e(rF,_rr),e(Re,urr),e(Re,tF),e(tF,Gue),e(Gue,brr),e(tF,vrr),e(tF,xz),e(xz,Frr),e(tF,Trr),e(Re,Mrr),e(Re,aF),e(aF,Oue),e(Oue,Err),e(aF,Crr),e(aF,$z),e($z,wrr),e(aF,Arr),e(Re,yrr),e(Re,nF),e(nF,Vue),e(Vue,Lrr),e(nF,xrr),e(nF,kz),e(kz,$rr),e(nF,krr),e(Re,Srr),e(Re,sF),e(sF,Xue),e(Xue,Rrr),e(sF,Prr),e(sF,Sz),e(Sz,Brr),e(sF,Irr),e(Re,Nrr),e(Re,lF),e(lF,zue),e(zue,qrr),e(lF,jrr),e(lF,Rz),e(Rz,Drr),e(lF,Grr),e(Re,Orr),e(Re,iF),e(iF,Wue),e(Wue,Vrr),e(iF,Xrr),e(iF,Pz),e(Pz,zrr),e(iF,Wrr),e(Re,Qrr),e(Re,dF),e(dF,Que),e(Que,Hrr),e(dF,Urr),e(dF,Bz),e(Bz,Jrr),e(dF,Yrr),e(mo,Krr),e(mo,cF),e(cF,Zrr),e(cF,Hue),e(Hue,etr),e(cF,otr),e(cF,Uue),e(Uue,rtr),e(mo,ttr),M(fF,mo,null),b(f,Aje,u),b(f,Fd,u),e(Fd,mF),e(mF,Jue),M(Py,Jue,null),e(Fd,atr),e(Fd,Yue),e(Yue,ntr),b(f,yje,u),b(f,Xo,u),M(By,Xo,null),e(Xo,str),e(Xo,Td),e(Td,ltr),e(Td,Iz),e(Iz,itr),e(Td,dtr),e(Td,Nz),e(Nz,ctr),e(Td,ftr),e(Xo,mtr),e(Xo,Iy),e(Iy,gtr),e(Iy,Kue),e(Kue,htr),e(Iy,ptr),e(Xo,_tr),e(Xo,Ft),M(Ny,Ft,null),e(Ft,utr),e(Ft,Zue),e(Zue,btr),e(Ft,vtr),e(Ft,Md),e(Md,Ftr),e(Md,e1e),e(e1e,Ttr),e(Md,Mtr),e(Md,qz),e(qz,Etr),e(Md,Ctr),e(Ft,wtr),M(gF,Ft,null),e(Xo,Atr),e(Xo,go),M(qy,go,null),e(go,ytr),e(go,o1e),e(o1e,Ltr),e(go,xtr),e(go,Xa),e(Xa,$tr),e(Xa,r1e),e(r1e,ktr),e(Xa,Str),e(Xa,t1e),e(t1e,Rtr),e(Xa,Ptr),e(Xa,a1e),e(a1e,Btr),e(Xa,Itr),e(go,Ntr),e(go,jy),e(jy,hF),e(hF,n1e),e(n1e,qtr),e(hF,jtr),e(hF,jz),e(jz,Dtr),e(hF,Gtr),e(jy,Otr),e(jy,pF),e(pF,s1e),e(s1e,Vtr),e(pF,Xtr),e(pF,Dz),e(Dz,ztr),e(pF,Wtr),e(go,Qtr),e(go,_F),e(_F,Htr),e(_F,l1e),e(l1e,Utr),e(_F,Jtr),e(_F,i1e),e(i1e,Ytr),e(go,Ktr),M(uF,go,null),b(f,Lje,u),b(f,Ed,u),e(Ed,bF),e(bF,d1e),M(Dy,d1e,null),e(Ed,Ztr),e(Ed,c1e),e(c1e,ear),b(f,xje,u),b(f,zo,u),M(Gy,zo,null),e(zo,oar),e(zo,Cd),e(Cd,rar),e(Cd,Gz),e(Gz,tar),e(Cd,aar),e(Cd,Oz),e(Oz,nar),e(Cd,sar),e(zo,lar),e(zo,Oy),e(Oy,iar),e(Oy,f1e),e(f1e,dar),e(Oy,car),e(zo,far),e(zo,Tt),M(Vy,Tt,null),e(Tt,mar),e(Tt,m1e),e(m1e,gar),e(Tt,har),e(Tt,wd),e(wd,par),e(wd,g1e),e(g1e,_ar),e(wd,uar),e(wd,Vz),e(Vz,bar),e(wd,Far),e(Tt,Tar),M(vF,Tt,null),e(zo,Mar),e(zo,ho),M(Xy,ho,null),e(ho,Ear),e(ho,h1e),e(h1e,Car),e(ho,war),e(ho,za),e(za,Aar),e(za,p1e),e(p1e,yar),e(za,Lar),e(za,_1e),e(_1e,xar),e(za,$ar),e(za,u1e),e(u1e,kar),e(za,Sar),e(ho,Rar),e(ho,Zr),e(Zr,FF),e(FF,b1e),e(b1e,Par),e(FF,Bar),e(FF,Xz),e(Xz,Iar),e(FF,Nar),e(Zr,qar),e(Zr,TF),e(TF,v1e),e(v1e,jar),e(TF,Dar),e(TF,zz),e(zz,Gar),e(TF,Oar),e(Zr,Var),e(Zr,MF),e(MF,F1e),e(F1e,Xar),e(MF,zar),e(MF,Wz),e(Wz,War),e(MF,Qar),e(Zr,Har),e(Zr,EF),e(EF,T1e),e(T1e,Uar),e(EF,Jar),e(EF,Qz),e(Qz,Yar),e(EF,Kar),e(Zr,Zar),e(Zr,CF),e(CF,M1e),e(M1e,enr),e(CF,onr),e(CF,Hz),e(Hz,rnr),e(CF,tnr),e(ho,anr),e(ho,wF),e(wF,nnr),e(wF,E1e),e(E1e,snr),e(wF,lnr),e(wF,C1e),e(C1e,inr),e(ho,dnr),M(AF,ho,null),b(f,$je,u),b(f,Ad,u),e(Ad,yF),e(yF,w1e),M(zy,w1e,null),e(Ad,cnr),e(Ad,A1e),e(A1e,fnr),b(f,kje,u),b(f,Wo,u),M(Wy,Wo,null),e(Wo,mnr),e(Wo,yd),e(yd,gnr),e(yd,Uz),e(Uz,hnr),e(yd,pnr),e(yd,Jz),e(Jz,_nr),e(yd,unr),e(Wo,bnr),e(Wo,Qy),e(Qy,vnr),e(Qy,y1e),e(y1e,Fnr),e(Qy,Tnr),e(Wo,Mnr),e(Wo,Mt),M(Hy,Mt,null),e(Mt,Enr),e(Mt,L1e),e(L1e,Cnr),e(Mt,wnr),e(Mt,Ld),e(Ld,Anr),e(Ld,x1e),e(x1e,ynr),e(Ld,Lnr),e(Ld,Yz),e(Yz,xnr),e(Ld,$nr),e(Mt,knr),M(LF,Mt,null),e(Wo,Snr),e(Wo,po),M(Uy,po,null),e(po,Rnr),e(po,$1e),e($1e,Pnr),e(po,Bnr),e(po,Wa),e(Wa,Inr),e(Wa,k1e),e(k1e,Nnr),e(Wa,qnr),e(Wa,S1e),e(S1e,jnr),e(Wa,Dnr),e(Wa,R1e),e(R1e,Gnr),e(Wa,Onr),e(po,Vnr),e(po,xd),e(xd,xF),e(xF,P1e),e(P1e,Xnr),e(xF,znr),e(xF,Kz),e(Kz,Wnr),e(xF,Qnr),e(xd,Hnr),e(xd,$F),e($F,B1e),e(B1e,Unr),e($F,Jnr),e($F,Zz),e(Zz,Ynr),e($F,Knr),e(xd,Znr),e(xd,kF),e(kF,I1e),e(I1e,esr),e(kF,osr),e(kF,eW),e(eW,rsr),e(kF,tsr),e(po,asr),e(po,SF),e(SF,nsr),e(SF,N1e),e(N1e,ssr),e(SF,lsr),e(SF,q1e),e(q1e,isr),e(po,dsr),M(RF,po,null),b(f,Sje,u),b(f,$d,u),e($d,PF),e(PF,j1e),M(Jy,j1e,null),e($d,csr),e($d,D1e),e(D1e,fsr),b(f,Rje,u),b(f,Qo,u),M(Yy,Qo,null),e(Qo,msr),e(Qo,kd),e(kd,gsr),e(kd,oW),e(oW,hsr),e(kd,psr),e(kd,rW),e(rW,_sr),e(kd,usr),e(Qo,bsr),e(Qo,Ky),e(Ky,vsr),e(Ky,G1e),e(G1e,Fsr),e(Ky,Tsr),e(Qo,Msr),e(Qo,Et),M(Zy,Et,null),e(Et,Esr),e(Et,O1e),e(O1e,Csr),e(Et,wsr),e(Et,Sd),e(Sd,Asr),e(Sd,V1e),e(V1e,ysr),e(Sd,Lsr),e(Sd,tW),e(tW,xsr),e(Sd,$sr),e(Et,ksr),M(BF,Et,null),e(Qo,Ssr),e(Qo,_o),M(eL,_o,null),e(_o,Rsr),e(_o,X1e),e(X1e,Psr),e(_o,Bsr),e(_o,Qa),e(Qa,Isr),e(Qa,z1e),e(z1e,Nsr),e(Qa,qsr),e(Qa,W1e),e(W1e,jsr),e(Qa,Dsr),e(Qa,Q1e),e(Q1e,Gsr),e(Qa,Osr),e(_o,Vsr),e(_o,oL),e(oL,IF),e(IF,H1e),e(H1e,Xsr),e(IF,zsr),e(IF,aW),e(aW,Wsr),e(IF,Qsr),e(oL,Hsr),e(oL,NF),e(NF,U1e),e(U1e,Usr),e(NF,Jsr),e(NF,nW),e(nW,Ysr),e(NF,Ksr),e(_o,Zsr),e(_o,qF),e(qF,elr),e(qF,J1e),e(J1e,olr),e(qF,rlr),e(qF,Y1e),e(Y1e,tlr),e(_o,alr),M(jF,_o,null),b(f,Pje,u),b(f,Rd,u),e(Rd,DF),e(DF,K1e),M(rL,K1e,null),e(Rd,nlr),e(Rd,Z1e),e(Z1e,slr),b(f,Bje,u),b(f,Ho,u),M(tL,Ho,null),e(Ho,llr),e(Ho,Pd),e(Pd,ilr),e(Pd,sW),e(sW,dlr),e(Pd,clr),e(Pd,lW),e(lW,flr),e(Pd,mlr),e(Ho,glr),e(Ho,aL),e(aL,hlr),e(aL,ebe),e(ebe,plr),e(aL,_lr),e(Ho,ulr),e(Ho,Ct),M(nL,Ct,null),e(Ct,blr),e(Ct,obe),e(obe,vlr),e(Ct,Flr),e(Ct,Bd),e(Bd,Tlr),e(Bd,rbe),e(rbe,Mlr),e(Bd,Elr),e(Bd,iW),e(iW,Clr),e(Bd,wlr),e(Ct,Alr),M(GF,Ct,null),e(Ho,ylr),e(Ho,uo),M(sL,uo,null),e(uo,Llr),e(uo,tbe),e(tbe,xlr),e(uo,$lr),e(uo,Ha),e(Ha,klr),e(Ha,abe),e(abe,Slr),e(Ha,Rlr),e(Ha,nbe),e(nbe,Plr),e(Ha,Blr),e(Ha,sbe),e(sbe,Ilr),e(Ha,Nlr),e(uo,qlr),e(uo,lbe),e(lbe,OF),e(OF,ibe),e(ibe,jlr),e(OF,Dlr),e(OF,dW),e(dW,Glr),e(OF,Olr),e(uo,Vlr),e(uo,VF),e(VF,Xlr),e(VF,dbe),e(dbe,zlr),e(VF,Wlr),e(VF,cbe),e(cbe,Qlr),e(uo,Hlr),M(XF,uo,null),b(f,Ije,u),b(f,Id,u),e(Id,zF),e(zF,fbe),M(lL,fbe,null),e(Id,Ulr),e(Id,mbe),e(mbe,Jlr),b(f,Nje,u),b(f,Uo,u),M(iL,Uo,null),e(Uo,Ylr),e(Uo,Nd),e(Nd,Klr),e(Nd,cW),e(cW,Zlr),e(Nd,eir),e(Nd,fW),e(fW,oir),e(Nd,rir),e(Uo,tir),e(Uo,dL),e(dL,air),e(dL,gbe),e(gbe,nir),e(dL,sir),e(Uo,lir),e(Uo,wt),M(cL,wt,null),e(wt,iir),e(wt,hbe),e(hbe,dir),e(wt,cir),e(wt,qd),e(qd,fir),e(qd,pbe),e(pbe,mir),e(qd,gir),e(qd,mW),e(mW,hir),e(qd,pir),e(wt,_ir),M(WF,wt,null),e(Uo,uir),e(Uo,bo),M(fL,bo,null),e(bo,bir),e(bo,_be),e(_be,vir),e(bo,Fir),e(bo,Ua),e(Ua,Tir),e(Ua,ube),e(ube,Mir),e(Ua,Eir),e(Ua,bbe),e(bbe,Cir),e(Ua,wir),e(Ua,vbe),e(vbe,Air),e(Ua,yir),e(bo,Lir),e(bo,Ja),e(Ja,QF),e(QF,Fbe),e(Fbe,xir),e(QF,$ir),e(QF,gW),e(gW,kir),e(QF,Sir),e(Ja,Rir),e(Ja,HF),e(HF,Tbe),e(Tbe,Pir),e(HF,Bir),e(HF,hW),e(hW,Iir),e(HF,Nir),e(Ja,qir),e(Ja,UF),e(UF,Mbe),e(Mbe,jir),e(UF,Dir),e(UF,pW),e(pW,Gir),e(UF,Oir),e(Ja,Vir),e(Ja,JF),e(JF,Ebe),e(Ebe,Xir),e(JF,zir),e(JF,_W),e(_W,Wir),e(JF,Qir),e(bo,Hir),e(bo,YF),e(YF,Uir),e(YF,Cbe),e(Cbe,Jir),e(YF,Yir),e(YF,wbe),e(wbe,Kir),e(bo,Zir),M(KF,bo,null),b(f,qje,u),b(f,jd,u),e(jd,ZF),e(ZF,Abe),M(mL,Abe,null),e(jd,edr),e(jd,ybe),e(ybe,odr),b(f,jje,u),b(f,Jo,u),M(gL,Jo,null),e(Jo,rdr),e(Jo,Dd),e(Dd,tdr),e(Dd,uW),e(uW,adr),e(Dd,ndr),e(Dd,bW),e(bW,sdr),e(Dd,ldr),e(Jo,idr),e(Jo,hL),e(hL,ddr),e(hL,Lbe),e(Lbe,cdr),e(hL,fdr),e(Jo,mdr),e(Jo,At),M(pL,At,null),e(At,gdr),e(At,xbe),e(xbe,hdr),e(At,pdr),e(At,Gd),e(Gd,_dr),e(Gd,$be),e($be,udr),e(Gd,bdr),e(Gd,vW),e(vW,vdr),e(Gd,Fdr),e(At,Tdr),M(eT,At,null),e(Jo,Mdr),e(Jo,vo),M(_L,vo,null),e(vo,Edr),e(vo,kbe),e(kbe,Cdr),e(vo,wdr),e(vo,Ya),e(Ya,Adr),e(Ya,Sbe),e(Sbe,ydr),e(Ya,Ldr),e(Ya,Rbe),e(Rbe,xdr),e(Ya,$dr),e(Ya,Pbe),e(Pbe,kdr),e(Ya,Sdr),e(vo,Rdr),e(vo,Bbe),e(Bbe,oT),e(oT,Ibe),e(Ibe,Pdr),e(oT,Bdr),e(oT,FW),e(FW,Idr),e(oT,Ndr),e(vo,qdr),e(vo,rT),e(rT,jdr),e(rT,Nbe),e(Nbe,Ddr),e(rT,Gdr),e(rT,qbe),e(qbe,Odr),e(vo,Vdr),M(tT,vo,null),b(f,Dje,u),b(f,Od,u),e(Od,aT),e(aT,jbe),M(uL,jbe,null),e(Od,Xdr),e(Od,Dbe),e(Dbe,zdr),b(f,Gje,u),b(f,Yo,u),M(bL,Yo,null),e(Yo,Wdr),e(Yo,Vd),e(Vd,Qdr),e(Vd,TW),e(TW,Hdr),e(Vd,Udr),e(Vd,MW),e(MW,Jdr),e(Vd,Ydr),e(Yo,Kdr),e(Yo,vL),e(vL,Zdr),e(vL,Gbe),e(Gbe,ecr),e(vL,ocr),e(Yo,rcr),e(Yo,yt),M(FL,yt,null),e(yt,tcr),e(yt,Obe),e(Obe,acr),e(yt,ncr),e(yt,Xd),e(Xd,scr),e(Xd,Vbe),e(Vbe,lcr),e(Xd,icr),e(Xd,EW),e(EW,dcr),e(Xd,ccr),e(yt,fcr),M(nT,yt,null),e(Yo,mcr),e(Yo,wr),M(TL,wr,null),e(wr,gcr),e(wr,Xbe),e(Xbe,hcr),e(wr,pcr),e(wr,Ka),e(Ka,_cr),e(Ka,zbe),e(zbe,ucr),e(Ka,bcr),e(Ka,Wbe),e(Wbe,vcr),e(Ka,Fcr),e(Ka,Qbe),e(Qbe,Tcr),e(Ka,Mcr),e(wr,Ecr),e(wr,q),e(q,sT),e(sT,Hbe),e(Hbe,Ccr),e(sT,wcr),e(sT,CW),e(CW,Acr),e(sT,ycr),e(q,Lcr),e(q,lT),e(lT,Ube),e(Ube,xcr),e(lT,$cr),e(lT,wW),e(wW,kcr),e(lT,Scr),e(q,Rcr),e(q,iT),e(iT,Jbe),e(Jbe,Pcr),e(iT,Bcr),e(iT,AW),e(AW,Icr),e(iT,Ncr),e(q,qcr),e(q,dT),e(dT,Ybe),e(Ybe,jcr),e(dT,Dcr),e(dT,yW),e(yW,Gcr),e(dT,Ocr),e(q,Vcr),e(q,cT),e(cT,Kbe),e(Kbe,Xcr),e(cT,zcr),e(cT,LW),e(LW,Wcr),e(cT,Qcr),e(q,Hcr),e(q,fT),e(fT,Zbe),e(Zbe,Ucr),e(fT,Jcr),e(fT,xW),e(xW,Ycr),e(fT,Kcr),e(q,Zcr),e(q,mT),e(mT,e2e),e(e2e,efr),e(mT,ofr),e(mT,$W),e($W,rfr),e(mT,tfr),e(q,afr),e(q,gT),e(gT,o2e),e(o2e,nfr),e(gT,sfr),e(gT,kW),e(kW,lfr),e(gT,ifr),e(q,dfr),e(q,hT),e(hT,r2e),e(r2e,cfr),e(hT,ffr),e(hT,SW),e(SW,mfr),e(hT,gfr),e(q,hfr),e(q,pT),e(pT,t2e),e(t2e,pfr),e(pT,_fr),e(pT,RW),e(RW,ufr),e(pT,bfr),e(q,vfr),e(q,_T),e(_T,a2e),e(a2e,Ffr),e(_T,Tfr),e(_T,PW),e(PW,Mfr),e(_T,Efr),e(q,Cfr),e(q,uT),e(uT,n2e),e(n2e,wfr),e(uT,Afr),e(uT,BW),e(BW,yfr),e(uT,Lfr),e(q,xfr),e(q,bT),e(bT,s2e),e(s2e,$fr),e(bT,kfr),e(bT,IW),e(IW,Sfr),e(bT,Rfr),e(q,Pfr),e(q,vT),e(vT,l2e),e(l2e,Bfr),e(vT,Ifr),e(vT,NW),e(NW,Nfr),e(vT,qfr),e(q,jfr),e(q,FT),e(FT,i2e),e(i2e,Dfr),e(FT,Gfr),e(FT,qW),e(qW,Ofr),e(FT,Vfr),e(q,Xfr),e(q,TT),e(TT,d2e),e(d2e,zfr),e(TT,Wfr),e(TT,jW),e(jW,Qfr),e(TT,Hfr),e(q,Ufr),e(q,MT),e(MT,c2e),e(c2e,Jfr),e(MT,Yfr),e(MT,DW),e(DW,Kfr),e(MT,Zfr),e(q,emr),e(q,Ns),e(Ns,f2e),e(f2e,omr),e(Ns,rmr),e(Ns,GW),e(GW,tmr),e(Ns,amr),e(Ns,OW),e(OW,nmr),e(Ns,smr),e(q,lmr),e(q,ET),e(ET,m2e),e(m2e,imr),e(ET,dmr),e(ET,VW),e(VW,cmr),e(ET,fmr),e(q,mmr),e(q,CT),e(CT,g2e),e(g2e,gmr),e(CT,hmr),e(CT,XW),e(XW,pmr),e(CT,_mr),e(q,umr),e(q,wT),e(wT,h2e),e(h2e,bmr),e(wT,vmr),e(wT,zW),e(zW,Fmr),e(wT,Tmr),e(q,Mmr),e(q,AT),e(AT,p2e),e(p2e,Emr),e(AT,Cmr),e(AT,WW),e(WW,wmr),e(AT,Amr),e(q,ymr),e(q,yT),e(yT,_2e),e(_2e,Lmr),e(yT,xmr),e(yT,QW),e(QW,$mr),e(yT,kmr),e(q,Smr),e(q,LT),e(LT,u2e),e(u2e,Rmr),e(LT,Pmr),e(LT,HW),e(HW,Bmr),e(LT,Imr),e(q,Nmr),e(q,xT),e(xT,b2e),e(b2e,qmr),e(xT,jmr),e(xT,UW),e(UW,Dmr),e(xT,Gmr),e(q,Omr),e(q,$T),e($T,v2e),e(v2e,Vmr),e($T,Xmr),e($T,JW),e(JW,zmr),e($T,Wmr),e(q,Qmr),e(q,kT),e(kT,F2e),e(F2e,Hmr),e(kT,Umr),e(kT,YW),e(YW,Jmr),e(kT,Ymr),e(q,Kmr),e(q,ST),e(ST,T2e),e(T2e,Zmr),e(ST,egr),e(ST,KW),e(KW,ogr),e(ST,rgr),e(q,tgr),e(q,RT),e(RT,M2e),e(M2e,agr),e(RT,ngr),e(RT,ZW),e(ZW,sgr),e(RT,lgr),e(q,igr),e(q,PT),e(PT,E2e),e(E2e,dgr),e(PT,cgr),e(PT,eQ),e(eQ,fgr),e(PT,mgr),e(q,ggr),e(q,BT),e(BT,C2e),e(C2e,hgr),e(BT,pgr),e(BT,oQ),e(oQ,_gr),e(BT,ugr),e(q,bgr),e(q,IT),e(IT,w2e),e(w2e,vgr),e(IT,Fgr),e(IT,rQ),e(rQ,Tgr),e(IT,Mgr),e(q,Egr),e(q,NT),e(NT,A2e),e(A2e,Cgr),e(NT,wgr),e(NT,tQ),e(tQ,Agr),e(NT,ygr),e(q,Lgr),e(q,qT),e(qT,y2e),e(y2e,xgr),e(qT,$gr),e(qT,aQ),e(aQ,kgr),e(qT,Sgr),e(q,Rgr),e(q,jT),e(jT,L2e),e(L2e,Pgr),e(jT,Bgr),e(jT,nQ),e(nQ,Igr),e(jT,Ngr),e(q,qgr),e(q,DT),e(DT,x2e),e(x2e,jgr),e(DT,Dgr),e(DT,sQ),e(sQ,Ggr),e(DT,Ogr),e(q,Vgr),e(q,GT),e(GT,$2e),e($2e,Xgr),e(GT,zgr),e(GT,lQ),e(lQ,Wgr),e(GT,Qgr),e(q,Hgr),e(q,OT),e(OT,k2e),e(k2e,Ugr),e(OT,Jgr),e(OT,iQ),e(iQ,Ygr),e(OT,Kgr),e(q,Zgr),e(q,VT),e(VT,S2e),e(S2e,ehr),e(VT,ohr),e(VT,dQ),e(dQ,rhr),e(VT,thr),e(q,ahr),e(q,XT),e(XT,R2e),e(R2e,nhr),e(XT,shr),e(XT,cQ),e(cQ,lhr),e(XT,ihr),e(q,dhr),e(q,zT),e(zT,P2e),e(P2e,chr),e(zT,fhr),e(zT,fQ),e(fQ,mhr),e(zT,ghr),e(q,hhr),e(q,WT),e(WT,B2e),e(B2e,phr),e(WT,_hr),e(WT,mQ),e(mQ,uhr),e(WT,bhr),e(q,vhr),e(q,QT),e(QT,I2e),e(I2e,Fhr),e(QT,Thr),e(QT,gQ),e(gQ,Mhr),e(QT,Ehr),e(q,Chr),e(q,HT),e(HT,N2e),e(N2e,whr),e(HT,Ahr),e(HT,hQ),e(hQ,yhr),e(HT,Lhr),e(q,xhr),e(q,UT),e(UT,q2e),e(q2e,$hr),e(UT,khr),e(UT,pQ),e(pQ,Shr),e(UT,Rhr),e(q,Phr),e(q,JT),e(JT,j2e),e(j2e,Bhr),e(JT,Ihr),e(JT,_Q),e(_Q,Nhr),e(JT,qhr),e(q,jhr),e(q,YT),e(YT,D2e),e(D2e,Dhr),e(YT,Ghr),e(YT,uQ),e(uQ,Ohr),e(YT,Vhr),e(wr,Xhr),M(KT,wr,null),b(f,Oje,u),b(f,zd,u),e(zd,ZT),e(ZT,G2e),M(ML,G2e,null),e(zd,zhr),e(zd,O2e),e(O2e,Whr),b(f,Vje,u),b(f,Ko,u),M(EL,Ko,null),e(Ko,Qhr),e(Ko,Wd),e(Wd,Hhr),e(Wd,bQ),e(bQ,Uhr),e(Wd,Jhr),e(Wd,vQ),e(vQ,Yhr),e(Wd,Khr),e(Ko,Zhr),e(Ko,CL),e(CL,epr),e(CL,V2e),e(V2e,opr),e(CL,rpr),e(Ko,tpr),e(Ko,Lt),M(wL,Lt,null),e(Lt,apr),e(Lt,X2e),e(X2e,npr),e(Lt,spr),e(Lt,Qd),e(Qd,lpr),e(Qd,z2e),e(z2e,ipr),e(Qd,dpr),e(Qd,FQ),e(FQ,cpr),e(Qd,fpr),e(Lt,mpr),M(e7,Lt,null),e(Ko,gpr),e(Ko,Ar),M(AL,Ar,null),e(Ar,hpr),e(Ar,W2e),e(W2e,ppr),e(Ar,_pr),e(Ar,Za),e(Za,upr),e(Za,Q2e),e(Q2e,bpr),e(Za,vpr),e(Za,H2e),e(H2e,Fpr),e(Za,Tpr),e(Za,U2e),e(U2e,Mpr),e(Za,Epr),e(Ar,Cpr),e(Ar,se),e(se,o7),e(o7,J2e),e(J2e,wpr),e(o7,Apr),e(o7,TQ),e(TQ,ypr),e(o7,Lpr),e(se,xpr),e(se,r7),e(r7,Y2e),e(Y2e,$pr),e(r7,kpr),e(r7,MQ),e(MQ,Spr),e(r7,Rpr),e(se,Ppr),e(se,t7),e(t7,K2e),e(K2e,Bpr),e(t7,Ipr),e(t7,EQ),e(EQ,Npr),e(t7,qpr),e(se,jpr),e(se,a7),e(a7,Z2e),e(Z2e,Dpr),e(a7,Gpr),e(a7,CQ),e(CQ,Opr),e(a7,Vpr),e(se,Xpr),e(se,n7),e(n7,eve),e(eve,zpr),e(n7,Wpr),e(n7,wQ),e(wQ,Qpr),e(n7,Hpr),e(se,Upr),e(se,s7),e(s7,ove),e(ove,Jpr),e(s7,Ypr),e(s7,AQ),e(AQ,Kpr),e(s7,Zpr),e(se,e_r),e(se,l7),e(l7,rve),e(rve,o_r),e(l7,r_r),e(l7,yQ),e(yQ,t_r),e(l7,a_r),e(se,n_r),e(se,i7),e(i7,tve),e(tve,s_r),e(i7,l_r),e(i7,LQ),e(LQ,i_r),e(i7,d_r),e(se,c_r),e(se,d7),e(d7,ave),e(ave,f_r),e(d7,m_r),e(d7,xQ),e(xQ,g_r),e(d7,h_r),e(se,p_r),e(se,c7),e(c7,nve),e(nve,__r),e(c7,u_r),e(c7,$Q),e($Q,b_r),e(c7,v_r),e(se,F_r),e(se,f7),e(f7,sve),e(sve,T_r),e(f7,M_r),e(f7,kQ),e(kQ,E_r),e(f7,C_r),e(se,w_r),e(se,m7),e(m7,lve),e(lve,A_r),e(m7,y_r),e(m7,SQ),e(SQ,L_r),e(m7,x_r),e(se,$_r),e(se,g7),e(g7,ive),e(ive,k_r),e(g7,S_r),e(g7,RQ),e(RQ,R_r),e(g7,P_r),e(se,B_r),e(se,h7),e(h7,dve),e(dve,I_r),e(h7,N_r),e(h7,PQ),e(PQ,q_r),e(h7,j_r),e(se,D_r),e(se,p7),e(p7,cve),e(cve,G_r),e(p7,O_r),e(p7,BQ),e(BQ,V_r),e(p7,X_r),e(se,z_r),e(se,_7),e(_7,fve),e(fve,W_r),e(_7,Q_r),e(_7,IQ),e(IQ,H_r),e(_7,U_r),e(se,J_r),e(se,u7),e(u7,mve),e(mve,Y_r),e(u7,K_r),e(u7,NQ),e(NQ,Z_r),e(u7,eur),e(se,our),e(se,b7),e(b7,gve),e(gve,rur),e(b7,tur),e(b7,qQ),e(qQ,aur),e(b7,nur),e(se,sur),e(se,v7),e(v7,hve),e(hve,lur),e(v7,iur),e(v7,jQ),e(jQ,dur),e(v7,cur),e(se,fur),e(se,F7),e(F7,pve),e(pve,mur),e(F7,gur),e(F7,DQ),e(DQ,hur),e(F7,pur),e(se,_ur),e(se,T7),e(T7,_ve),e(_ve,uur),e(T7,bur),e(T7,GQ),e(GQ,vur),e(T7,Fur),e(se,Tur),e(se,M7),e(M7,uve),e(uve,Mur),e(M7,Eur),e(M7,OQ),e(OQ,Cur),e(M7,wur),e(se,Aur),e(se,E7),e(E7,bve),e(bve,yur),e(E7,Lur),e(E7,VQ),e(VQ,xur),e(E7,$ur),e(Ar,kur),M(C7,Ar,null),b(f,Xje,u),b(f,Hd,u),e(Hd,w7),e(w7,vve),M(yL,vve,null),e(Hd,Sur),e(Hd,Fve),e(Fve,Rur),b(f,zje,u),b(f,Zo,u),M(LL,Zo,null),e(Zo,Pur),e(Zo,Ud),e(Ud,Bur),e(Ud,XQ),e(XQ,Iur),e(Ud,Nur),e(Ud,zQ),e(zQ,qur),e(Ud,jur),e(Zo,Dur),e(Zo,xL),e(xL,Gur),e(xL,Tve),e(Tve,Our),e(xL,Vur),e(Zo,Xur),e(Zo,xt),M($L,xt,null),e(xt,zur),e(xt,Mve),e(Mve,Wur),e(xt,Qur),e(xt,Jd),e(Jd,Hur),e(Jd,Eve),e(Eve,Uur),e(Jd,Jur),e(Jd,WQ),e(WQ,Yur),e(Jd,Kur),e(xt,Zur),M(A7,xt,null),e(Zo,e1r),e(Zo,yr),M(kL,yr,null),e(yr,o1r),e(yr,Cve),e(Cve,r1r),e(yr,t1r),e(yr,en),e(en,a1r),e(en,wve),e(wve,n1r),e(en,s1r),e(en,Ave),e(Ave,l1r),e(en,i1r),e(en,yve),e(yve,d1r),e(en,c1r),e(yr,f1r),e(yr,Me),e(Me,y7),e(y7,Lve),e(Lve,m1r),e(y7,g1r),e(y7,QQ),e(QQ,h1r),e(y7,p1r),e(Me,_1r),e(Me,L7),e(L7,xve),e(xve,u1r),e(L7,b1r),e(L7,HQ),e(HQ,v1r),e(L7,F1r),e(Me,T1r),e(Me,x7),e(x7,$ve),e($ve,M1r),e(x7,E1r),e(x7,UQ),e(UQ,C1r),e(x7,w1r),e(Me,A1r),e(Me,$7),e($7,kve),e(kve,y1r),e($7,L1r),e($7,JQ),e(JQ,x1r),e($7,$1r),e(Me,k1r),e(Me,k7),e(k7,Sve),e(Sve,S1r),e(k7,R1r),e(k7,YQ),e(YQ,P1r),e(k7,B1r),e(Me,I1r),e(Me,S7),e(S7,Rve),e(Rve,N1r),e(S7,q1r),e(S7,KQ),e(KQ,j1r),e(S7,D1r),e(Me,G1r),e(Me,R7),e(R7,Pve),e(Pve,O1r),e(R7,V1r),e(R7,ZQ),e(ZQ,X1r),e(R7,z1r),e(Me,W1r),e(Me,P7),e(P7,Bve),e(Bve,Q1r),e(P7,H1r),e(P7,eH),e(eH,U1r),e(P7,J1r),e(Me,Y1r),e(Me,B7),e(B7,Ive),e(Ive,K1r),e(B7,Z1r),e(B7,oH),e(oH,ebr),e(B7,obr),e(Me,rbr),e(Me,I7),e(I7,Nve),e(Nve,tbr),e(I7,abr),e(I7,rH),e(rH,nbr),e(I7,sbr),e(Me,lbr),e(Me,N7),e(N7,qve),e(qve,ibr),e(N7,dbr),e(N7,tH),e(tH,cbr),e(N7,fbr),e(Me,mbr),e(Me,q7),e(q7,jve),e(jve,gbr),e(q7,hbr),e(q7,aH),e(aH,pbr),e(q7,_br),e(Me,ubr),e(Me,j7),e(j7,Dve),e(Dve,bbr),e(j7,vbr),e(j7,nH),e(nH,Fbr),e(j7,Tbr),e(yr,Mbr),M(D7,yr,null),b(f,Wje,u),b(f,Yd,u),e(Yd,G7),e(G7,Gve),M(SL,Gve,null),e(Yd,Ebr),e(Yd,Ove),e(Ove,Cbr),b(f,Qje,u),b(f,er,u),M(RL,er,null),e(er,wbr),e(er,Kd),e(Kd,Abr),e(Kd,sH),e(sH,ybr),e(Kd,Lbr),e(Kd,lH),e(lH,xbr),e(Kd,$br),e(er,kbr),e(er,PL),e(PL,Sbr),e(PL,Vve),e(Vve,Rbr),e(PL,Pbr),e(er,Bbr),e(er,$t),M(BL,$t,null),e($t,Ibr),e($t,Xve),e(Xve,Nbr),e($t,qbr),e($t,Zd),e(Zd,jbr),e(Zd,zve),e(zve,Dbr),e(Zd,Gbr),e(Zd,iH),e(iH,Obr),e(Zd,Vbr),e($t,Xbr),M(O7,$t,null),e(er,zbr),e(er,Lr),M(IL,Lr,null),e(Lr,Wbr),e(Lr,Wve),e(Wve,Qbr),e(Lr,Hbr),e(Lr,on),e(on,Ubr),e(on,Qve),e(Qve,Jbr),e(on,Ybr),e(on,Hve),e(Hve,Kbr),e(on,Zbr),e(on,Uve),e(Uve,e2r),e(on,o2r),e(Lr,r2r),e(Lr,rn),e(rn,V7),e(V7,Jve),e(Jve,t2r),e(V7,a2r),e(V7,dH),e(dH,n2r),e(V7,s2r),e(rn,l2r),e(rn,X7),e(X7,Yve),e(Yve,i2r),e(X7,d2r),e(X7,cH),e(cH,c2r),e(X7,f2r),e(rn,m2r),e(rn,z7),e(z7,Kve),e(Kve,g2r),e(z7,h2r),e(z7,fH),e(fH,p2r),e(z7,_2r),e(rn,u2r),e(rn,W7),e(W7,Zve),e(Zve,b2r),e(W7,v2r),e(W7,mH),e(mH,F2r),e(W7,T2r),e(Lr,M2r),M(Q7,Lr,null),b(f,Hje,u),b(f,ec,u),e(ec,H7),e(H7,e5e),M(NL,e5e,null),e(ec,E2r),e(ec,o5e),e(o5e,C2r),b(f,Uje,u),b(f,or,u),M(qL,or,null),e(or,w2r),e(or,oc),e(oc,A2r),e(oc,gH),e(gH,y2r),e(oc,L2r),e(oc,hH),e(hH,x2r),e(oc,$2r),e(or,k2r),e(or,jL),e(jL,S2r),e(jL,r5e),e(r5e,R2r),e(jL,P2r),e(or,B2r),e(or,kt),M(DL,kt,null),e(kt,I2r),e(kt,t5e),e(t5e,N2r),e(kt,q2r),e(kt,rc),e(rc,j2r),e(rc,a5e),e(a5e,D2r),e(rc,G2r),e(rc,pH),e(pH,O2r),e(rc,V2r),e(kt,X2r),M(U7,kt,null),e(or,z2r),e(or,xr),M(GL,xr,null),e(xr,W2r),e(xr,n5e),e(n5e,Q2r),e(xr,H2r),e(xr,tn),e(tn,U2r),e(tn,s5e),e(s5e,J2r),e(tn,Y2r),e(tn,l5e),e(l5e,K2r),e(tn,Z2r),e(tn,i5e),e(i5e,evr),e(tn,ovr),e(xr,rvr),e(xr,ie),e(ie,J7),e(J7,d5e),e(d5e,tvr),e(J7,avr),e(J7,_H),e(_H,nvr),e(J7,svr),e(ie,lvr),e(ie,Y7),e(Y7,c5e),e(c5e,ivr),e(Y7,dvr),e(Y7,uH),e(uH,cvr),e(Y7,fvr),e(ie,mvr),e(ie,K7),e(K7,f5e),e(f5e,gvr),e(K7,hvr),e(K7,bH),e(bH,pvr),e(K7,_vr),e(ie,uvr),e(ie,Z7),e(Z7,m5e),e(m5e,bvr),e(Z7,vvr),e(Z7,vH),e(vH,Fvr),e(Z7,Tvr),e(ie,Mvr),e(ie,e9),e(e9,g5e),e(g5e,Evr),e(e9,Cvr),e(e9,FH),e(FH,wvr),e(e9,Avr),e(ie,yvr),e(ie,o9),e(o9,h5e),e(h5e,Lvr),e(o9,xvr),e(o9,TH),e(TH,$vr),e(o9,kvr),e(ie,Svr),e(ie,r9),e(r9,p5e),e(p5e,Rvr),e(r9,Pvr),e(r9,MH),e(MH,Bvr),e(r9,Ivr),e(ie,Nvr),e(ie,t9),e(t9,_5e),e(_5e,qvr),e(t9,jvr),e(t9,EH),e(EH,Dvr),e(t9,Gvr),e(ie,Ovr),e(ie,a9),e(a9,u5e),e(u5e,Vvr),e(a9,Xvr),e(a9,CH),e(CH,zvr),e(a9,Wvr),e(ie,Qvr),e(ie,n9),e(n9,b5e),e(b5e,Hvr),e(n9,Uvr),e(n9,wH),e(wH,Jvr),e(n9,Yvr),e(ie,Kvr),e(ie,s9),e(s9,v5e),e(v5e,Zvr),e(s9,e5r),e(s9,AH),e(AH,o5r),e(s9,r5r),e(ie,t5r),e(ie,l9),e(l9,F5e),e(F5e,a5r),e(l9,n5r),e(l9,yH),e(yH,s5r),e(l9,l5r),e(ie,i5r),e(ie,i9),e(i9,T5e),e(T5e,d5r),e(i9,c5r),e(i9,LH),e(LH,f5r),e(i9,m5r),e(ie,g5r),e(ie,d9),e(d9,M5e),e(M5e,h5r),e(d9,p5r),e(d9,xH),e(xH,_5r),e(d9,u5r),e(ie,b5r),e(ie,c9),e(c9,E5e),e(E5e,v5r),e(c9,F5r),e(c9,$H),e($H,T5r),e(c9,M5r),e(ie,E5r),e(ie,f9),e(f9,C5e),e(C5e,C5r),e(f9,w5r),e(f9,kH),e(kH,A5r),e(f9,y5r),e(ie,L5r),e(ie,m9),e(m9,w5e),e(w5e,x5r),e(m9,$5r),e(m9,SH),e(SH,k5r),e(m9,S5r),e(ie,R5r),e(ie,g9),e(g9,A5e),e(A5e,P5r),e(g9,B5r),e(g9,RH),e(RH,I5r),e(g9,N5r),e(ie,q5r),e(ie,h9),e(h9,y5e),e(y5e,j5r),e(h9,D5r),e(h9,PH),e(PH,G5r),e(h9,O5r),e(ie,V5r),e(ie,p9),e(p9,L5e),e(L5e,X5r),e(p9,z5r),e(p9,BH),e(BH,W5r),e(p9,Q5r),e(xr,H5r),M(_9,xr,null),b(f,Jje,u),b(f,tc,u),e(tc,u9),e(u9,x5e),M(OL,x5e,null),e(tc,U5r),e(tc,$5e),e($5e,J5r),b(f,Yje,u),b(f,rr,u),M(VL,rr,null),e(rr,Y5r),e(rr,ac),e(ac,K5r),e(ac,IH),e(IH,Z5r),e(ac,e3r),e(ac,NH),e(NH,o3r),e(ac,r3r),e(rr,t3r),e(rr,XL),e(XL,a3r),e(XL,k5e),e(k5e,n3r),e(XL,s3r),e(rr,l3r),e(rr,St),M(zL,St,null),e(St,i3r),e(St,S5e),e(S5e,d3r),e(St,c3r),e(St,nc),e(nc,f3r),e(nc,R5e),e(R5e,m3r),e(nc,g3r),e(nc,qH),e(qH,h3r),e(nc,p3r),e(St,_3r),M(b9,St,null),e(rr,u3r),e(rr,$r),M(WL,$r,null),e($r,b3r),e($r,P5e),e(P5e,v3r),e($r,F3r),e($r,an),e(an,T3r),e(an,B5e),e(B5e,M3r),e(an,E3r),e(an,I5e),e(I5e,C3r),e(an,w3r),e(an,N5e),e(N5e,A3r),e(an,y3r),e($r,L3r),e($r,ye),e(ye,v9),e(v9,q5e),e(q5e,x3r),e(v9,$3r),e(v9,jH),e(jH,k3r),e(v9,S3r),e(ye,R3r),e(ye,F9),e(F9,j5e),e(j5e,P3r),e(F9,B3r),e(F9,DH),e(DH,I3r),e(F9,N3r),e(ye,q3r),e(ye,T9),e(T9,D5e),e(D5e,j3r),e(T9,D3r),e(T9,GH),e(GH,G3r),e(T9,O3r),e(ye,V3r),e(ye,M9),e(M9,G5e),e(G5e,X3r),e(M9,z3r),e(M9,OH),e(OH,W3r),e(M9,Q3r),e(ye,H3r),e(ye,E9),e(E9,O5e),e(O5e,U3r),e(E9,J3r),e(E9,VH),e(VH,Y3r),e(E9,K3r),e(ye,Z3r),e(ye,C9),e(C9,V5e),e(V5e,eFr),e(C9,oFr),e(C9,XH),e(XH,rFr),e(C9,tFr),e(ye,aFr),e(ye,w9),e(w9,X5e),e(X5e,nFr),e(w9,sFr),e(w9,zH),e(zH,lFr),e(w9,iFr),e(ye,dFr),e(ye,A9),e(A9,z5e),e(z5e,cFr),e(A9,fFr),e(A9,WH),e(WH,mFr),e(A9,gFr),e(ye,hFr),e(ye,y9),e(y9,W5e),e(W5e,pFr),e(y9,_Fr),e(y9,QH),e(QH,uFr),e(y9,bFr),e(ye,vFr),e(ye,L9),e(L9,Q5e),e(Q5e,FFr),e(L9,TFr),e(L9,HH),e(HH,MFr),e(L9,EFr),e($r,CFr),M(x9,$r,null),b(f,Kje,u),b(f,sc,u),e(sc,$9),e($9,H5e),M(QL,H5e,null),e(sc,wFr),e(sc,U5e),e(U5e,AFr),b(f,Zje,u),b(f,tr,u),M(HL,tr,null),e(tr,yFr),e(tr,lc),e(lc,LFr),e(lc,UH),e(UH,xFr),e(lc,$Fr),e(lc,JH),e(JH,kFr),e(lc,SFr),e(tr,RFr),e(tr,UL),e(UL,PFr),e(UL,J5e),e(J5e,BFr),e(UL,IFr),e(tr,NFr),e(tr,Rt),M(JL,Rt,null),e(Rt,qFr),e(Rt,Y5e),e(Y5e,jFr),e(Rt,DFr),e(Rt,ic),e(ic,GFr),e(ic,K5e),e(K5e,OFr),e(ic,VFr),e(ic,YH),e(YH,XFr),e(ic,zFr),e(Rt,WFr),M(k9,Rt,null),e(tr,QFr),e(tr,kr),M(YL,kr,null),e(kr,HFr),e(kr,Z5e),e(Z5e,UFr),e(kr,JFr),e(kr,nn),e(nn,YFr),e(nn,e3e),e(e3e,KFr),e(nn,ZFr),e(nn,o3e),e(o3e,eTr),e(nn,oTr),e(nn,r3e),e(r3e,rTr),e(nn,tTr),e(kr,aTr),e(kr,oe),e(oe,S9),e(S9,t3e),e(t3e,nTr),e(S9,sTr),e(S9,KH),e(KH,lTr),e(S9,iTr),e(oe,dTr),e(oe,R9),e(R9,a3e),e(a3e,cTr),e(R9,fTr),e(R9,ZH),e(ZH,mTr),e(R9,gTr),e(oe,hTr),e(oe,P9),e(P9,n3e),e(n3e,pTr),e(P9,_Tr),e(P9,eU),e(eU,uTr),e(P9,bTr),e(oe,vTr),e(oe,B9),e(B9,s3e),e(s3e,FTr),e(B9,TTr),e(B9,oU),e(oU,MTr),e(B9,ETr),e(oe,CTr),e(oe,I9),e(I9,l3e),e(l3e,wTr),e(I9,ATr),e(I9,rU),e(rU,yTr),e(I9,LTr),e(oe,xTr),e(oe,N9),e(N9,i3e),e(i3e,$Tr),e(N9,kTr),e(N9,tU),e(tU,STr),e(N9,RTr),e(oe,PTr),e(oe,q9),e(q9,d3e),e(d3e,BTr),e(q9,ITr),e(q9,aU),e(aU,NTr),e(q9,qTr),e(oe,jTr),e(oe,j9),e(j9,c3e),e(c3e,DTr),e(j9,GTr),e(j9,nU),e(nU,OTr),e(j9,VTr),e(oe,XTr),e(oe,D9),e(D9,f3e),e(f3e,zTr),e(D9,WTr),e(D9,sU),e(sU,QTr),e(D9,HTr),e(oe,UTr),e(oe,G9),e(G9,m3e),e(m3e,JTr),e(G9,YTr),e(G9,lU),e(lU,KTr),e(G9,ZTr),e(oe,e7r),e(oe,O9),e(O9,g3e),e(g3e,o7r),e(O9,r7r),e(O9,iU),e(iU,t7r),e(O9,a7r),e(oe,n7r),e(oe,V9),e(V9,h3e),e(h3e,s7r),e(V9,l7r),e(V9,dU),e(dU,i7r),e(V9,d7r),e(oe,c7r),e(oe,X9),e(X9,p3e),e(p3e,f7r),e(X9,m7r),e(X9,cU),e(cU,g7r),e(X9,h7r),e(oe,p7r),e(oe,z9),e(z9,_3e),e(_3e,_7r),e(z9,u7r),e(z9,fU),e(fU,b7r),e(z9,v7r),e(oe,F7r),e(oe,W9),e(W9,u3e),e(u3e,T7r),e(W9,M7r),e(W9,mU),e(mU,E7r),e(W9,C7r),e(oe,w7r),e(oe,Q9),e(Q9,b3e),e(b3e,A7r),e(Q9,y7r),e(Q9,gU),e(gU,L7r),e(Q9,x7r),e(oe,$7r),e(oe,H9),e(H9,v3e),e(v3e,k7r),e(H9,S7r),e(H9,hU),e(hU,R7r),e(H9,P7r),e(oe,B7r),e(oe,U9),e(U9,F3e),e(F3e,I7r),e(U9,N7r),e(U9,pU),e(pU,q7r),e(U9,j7r),e(oe,D7r),e(oe,J9),e(J9,T3e),e(T3e,G7r),e(J9,O7r),e(J9,_U),e(_U,V7r),e(J9,X7r),e(oe,z7r),e(oe,Y9),e(Y9,M3e),e(M3e,W7r),e(Y9,Q7r),e(Y9,uU),e(uU,H7r),e(Y9,U7r),e(oe,J7r),e(oe,K9),e(K9,E3e),e(E3e,Y7r),e(K9,K7r),e(K9,bU),e(bU,Z7r),e(K9,e9r),e(oe,o9r),e(oe,Z9),e(Z9,C3e),e(C3e,r9r),e(Z9,t9r),e(Z9,vU),e(vU,a9r),e(Z9,n9r),e(oe,s9r),e(oe,eM),e(eM,w3e),e(w3e,l9r),e(eM,i9r),e(eM,FU),e(FU,d9r),e(eM,c9r),e(oe,f9r),e(oe,oM),e(oM,A3e),e(A3e,m9r),e(oM,g9r),e(oM,TU),e(TU,h9r),e(oM,p9r),e(oe,_9r),e(oe,rM),e(rM,y3e),e(y3e,u9r),e(rM,b9r),e(rM,MU),e(MU,v9r),e(rM,F9r),e(oe,T9r),e(oe,tM),e(tM,L3e),e(L3e,M9r),e(tM,E9r),e(tM,EU),e(EU,C9r),e(tM,w9r),e(kr,A9r),M(aM,kr,null),b(f,eDe,u),b(f,dc,u),e(dc,nM),e(nM,x3e),M(KL,x3e,null),e(dc,y9r),e(dc,$3e),e($3e,L9r),b(f,oDe,u),b(f,ar,u),M(ZL,ar,null),e(ar,x9r),e(ar,cc),e(cc,$9r),e(cc,CU),e(CU,k9r),e(cc,S9r),e(cc,wU),e(wU,R9r),e(cc,P9r),e(ar,B9r),e(ar,e8),e(e8,I9r),e(e8,k3e),e(k3e,N9r),e(e8,q9r),e(ar,j9r),e(ar,Pt),M(o8,Pt,null),e(Pt,D9r),e(Pt,S3e),e(S3e,G9r),e(Pt,O9r),e(Pt,fc),e(fc,V9r),e(fc,R3e),e(R3e,X9r),e(fc,z9r),e(fc,AU),e(AU,W9r),e(fc,Q9r),e(Pt,H9r),M(sM,Pt,null),e(ar,U9r),e(ar,Sr),M(r8,Sr,null),e(Sr,J9r),e(Sr,P3e),e(P3e,Y9r),e(Sr,K9r),e(Sr,sn),e(sn,Z9r),e(sn,B3e),e(B3e,eMr),e(sn,oMr),e(sn,I3e),e(I3e,rMr),e(sn,tMr),e(sn,N3e),e(N3e,aMr),e(sn,nMr),e(Sr,sMr),e(Sr,pe),e(pe,lM),e(lM,q3e),e(q3e,lMr),e(lM,iMr),e(lM,yU),e(yU,dMr),e(lM,cMr),e(pe,fMr),e(pe,iM),e(iM,j3e),e(j3e,mMr),e(iM,gMr),e(iM,LU),e(LU,hMr),e(iM,pMr),e(pe,_Mr),e(pe,dM),e(dM,D3e),e(D3e,uMr),e(dM,bMr),e(dM,xU),e(xU,vMr),e(dM,FMr),e(pe,TMr),e(pe,cM),e(cM,G3e),e(G3e,MMr),e(cM,EMr),e(cM,$U),e($U,CMr),e(cM,wMr),e(pe,AMr),e(pe,fM),e(fM,O3e),e(O3e,yMr),e(fM,LMr),e(fM,kU),e(kU,xMr),e(fM,$Mr),e(pe,kMr),e(pe,mM),e(mM,V3e),e(V3e,SMr),e(mM,RMr),e(mM,SU),e(SU,PMr),e(mM,BMr),e(pe,IMr),e(pe,gM),e(gM,X3e),e(X3e,NMr),e(gM,qMr),e(gM,RU),e(RU,jMr),e(gM,DMr),e(pe,GMr),e(pe,hM),e(hM,z3e),e(z3e,OMr),e(hM,VMr),e(hM,PU),e(PU,XMr),e(hM,zMr),e(pe,WMr),e(pe,pM),e(pM,W3e),e(W3e,QMr),e(pM,HMr),e(pM,BU),e(BU,UMr),e(pM,JMr),e(pe,YMr),e(pe,_M),e(_M,Q3e),e(Q3e,KMr),e(_M,ZMr),e(_M,IU),e(IU,e4r),e(_M,o4r),e(pe,r4r),e(pe,uM),e(uM,H3e),e(H3e,t4r),e(uM,a4r),e(uM,NU),e(NU,n4r),e(uM,s4r),e(pe,l4r),e(pe,bM),e(bM,U3e),e(U3e,i4r),e(bM,d4r),e(bM,qU),e(qU,c4r),e(bM,f4r),e(pe,m4r),e(pe,vM),e(vM,J3e),e(J3e,g4r),e(vM,h4r),e(vM,jU),e(jU,p4r),e(vM,_4r),e(pe,u4r),e(pe,FM),e(FM,Y3e),e(Y3e,b4r),e(FM,v4r),e(FM,DU),e(DU,F4r),e(FM,T4r),e(pe,M4r),e(pe,TM),e(TM,K3e),e(K3e,E4r),e(TM,C4r),e(TM,GU),e(GU,w4r),e(TM,A4r),e(pe,y4r),e(pe,MM),e(MM,Z3e),e(Z3e,L4r),e(MM,x4r),e(MM,OU),e(OU,$4r),e(MM,k4r),e(pe,S4r),e(pe,EM),e(EM,eFe),e(eFe,R4r),e(EM,P4r),e(EM,VU),e(VU,B4r),e(EM,I4r),e(Sr,N4r),M(CM,Sr,null),b(f,rDe,u),b(f,mc,u),e(mc,wM),e(wM,oFe),M(t8,oFe,null),e(mc,q4r),e(mc,rFe),e(rFe,j4r),b(f,tDe,u),b(f,nr,u),M(a8,nr,null),e(nr,D4r),e(nr,gc),e(gc,G4r),e(gc,XU),e(XU,O4r),e(gc,V4r),e(gc,zU),e(zU,X4r),e(gc,z4r),e(nr,W4r),e(nr,n8),e(n8,Q4r),e(n8,tFe),e(tFe,H4r),e(n8,U4r),e(nr,J4r),e(nr,Bt),M(s8,Bt,null),e(Bt,Y4r),e(Bt,aFe),e(aFe,K4r),e(Bt,Z4r),e(Bt,hc),e(hc,eEr),e(hc,nFe),e(nFe,oEr),e(hc,rEr),e(hc,WU),e(WU,tEr),e(hc,aEr),e(Bt,nEr),M(AM,Bt,null),e(nr,sEr),e(nr,Rr),M(l8,Rr,null),e(Rr,lEr),e(Rr,sFe),e(sFe,iEr),e(Rr,dEr),e(Rr,ln),e(ln,cEr),e(ln,lFe),e(lFe,fEr),e(ln,mEr),e(ln,iFe),e(iFe,gEr),e(ln,hEr),e(ln,dFe),e(dFe,pEr),e(ln,_Er),e(Rr,uEr),e(Rr,i8),e(i8,yM),e(yM,cFe),e(cFe,bEr),e(yM,vEr),e(yM,QU),e(QU,FEr),e(yM,TEr),e(i8,MEr),e(i8,LM),e(LM,fFe),e(fFe,EEr),e(LM,CEr),e(LM,HU),e(HU,wEr),e(LM,AEr),e(Rr,yEr),M(xM,Rr,null),b(f,aDe,u),b(f,pc,u),e(pc,$M),e($M,mFe),M(d8,mFe,null),e(pc,LEr),e(pc,gFe),e(gFe,xEr),b(f,nDe,u),b(f,sr,u),M(c8,sr,null),e(sr,$Er),e(sr,_c),e(_c,kEr),e(_c,UU),e(UU,SEr),e(_c,REr),e(_c,JU),e(JU,PEr),e(_c,BEr),e(sr,IEr),e(sr,f8),e(f8,NEr),e(f8,hFe),e(hFe,qEr),e(f8,jEr),e(sr,DEr),e(sr,It),M(m8,It,null),e(It,GEr),e(It,pFe),e(pFe,OEr),e(It,VEr),e(It,uc),e(uc,XEr),e(uc,_Fe),e(_Fe,zEr),e(uc,WEr),e(uc,YU),e(YU,QEr),e(uc,HEr),e(It,UEr),M(kM,It,null),e(sr,JEr),e(sr,Pr),M(g8,Pr,null),e(Pr,YEr),e(Pr,uFe),e(uFe,KEr),e(Pr,ZEr),e(Pr,dn),e(dn,eCr),e(dn,bFe),e(bFe,oCr),e(dn,rCr),e(dn,vFe),e(vFe,tCr),e(dn,aCr),e(dn,FFe),e(FFe,nCr),e(dn,sCr),e(Pr,lCr),e(Pr,TFe),e(TFe,SM),e(SM,MFe),e(MFe,iCr),e(SM,dCr),e(SM,KU),e(KU,cCr),e(SM,fCr),e(Pr,mCr),M(RM,Pr,null),b(f,sDe,u),b(f,bc,u),e(bc,PM),e(PM,EFe),M(h8,EFe,null),e(bc,gCr),e(bc,CFe),e(CFe,hCr),b(f,lDe,u),b(f,lr,u),M(p8,lr,null),e(lr,pCr),e(lr,vc),e(vc,_Cr),e(vc,ZU),e(ZU,uCr),e(vc,bCr),e(vc,eJ),e(eJ,vCr),e(vc,FCr),e(lr,TCr),e(lr,_8),e(_8,MCr),e(_8,wFe),e(wFe,ECr),e(_8,CCr),e(lr,wCr),e(lr,Nt),M(u8,Nt,null),e(Nt,ACr),e(Nt,AFe),e(AFe,yCr),e(Nt,LCr),e(Nt,Fc),e(Fc,xCr),e(Fc,yFe),e(yFe,$Cr),e(Fc,kCr),e(Fc,oJ),e(oJ,SCr),e(Fc,RCr),e(Nt,PCr),M(BM,Nt,null),e(lr,BCr),e(lr,Br),M(b8,Br,null),e(Br,ICr),e(Br,LFe),e(LFe,NCr),e(Br,qCr),e(Br,cn),e(cn,jCr),e(cn,xFe),e(xFe,DCr),e(cn,GCr),e(cn,$Fe),e($Fe,OCr),e(cn,VCr),e(cn,kFe),e(kFe,XCr),e(cn,zCr),e(Br,WCr),e(Br,de),e(de,IM),e(IM,SFe),e(SFe,QCr),e(IM,HCr),e(IM,rJ),e(rJ,UCr),e(IM,JCr),e(de,YCr),e(de,NM),e(NM,RFe),e(RFe,KCr),e(NM,ZCr),e(NM,tJ),e(tJ,e0r),e(NM,o0r),e(de,r0r),e(de,qM),e(qM,PFe),e(PFe,t0r),e(qM,a0r),e(qM,aJ),e(aJ,n0r),e(qM,s0r),e(de,l0r),e(de,jM),e(jM,BFe),e(BFe,i0r),e(jM,d0r),e(jM,nJ),e(nJ,c0r),e(jM,f0r),e(de,m0r),e(de,DM),e(DM,IFe),e(IFe,g0r),e(DM,h0r),e(DM,sJ),e(sJ,p0r),e(DM,_0r),e(de,u0r),e(de,GM),e(GM,NFe),e(NFe,b0r),e(GM,v0r),e(GM,lJ),e(lJ,F0r),e(GM,T0r),e(de,M0r),e(de,OM),e(OM,qFe),e(qFe,E0r),e(OM,C0r),e(OM,iJ),e(iJ,w0r),e(OM,A0r),e(de,y0r),e(de,VM),e(VM,jFe),e(jFe,L0r),e(VM,x0r),e(VM,dJ),e(dJ,$0r),e(VM,k0r),e(de,S0r),e(de,XM),e(XM,DFe),e(DFe,R0r),e(XM,P0r),e(XM,cJ),e(cJ,B0r),e(XM,I0r),e(de,N0r),e(de,zM),e(zM,GFe),e(GFe,q0r),e(zM,j0r),e(zM,fJ),e(fJ,D0r),e(zM,G0r),e(de,O0r),e(de,WM),e(WM,OFe),e(OFe,V0r),e(WM,X0r),e(WM,mJ),e(mJ,z0r),e(WM,W0r),e(de,Q0r),e(de,QM),e(QM,VFe),e(VFe,H0r),e(QM,U0r),e(QM,gJ),e(gJ,J0r),e(QM,Y0r),e(de,K0r),e(de,HM),e(HM,XFe),e(XFe,Z0r),e(HM,ewr),e(HM,hJ),e(hJ,owr),e(HM,rwr),e(de,twr),e(de,UM),e(UM,zFe),e(zFe,awr),e(UM,nwr),e(UM,pJ),e(pJ,swr),e(UM,lwr),e(de,iwr),e(de,JM),e(JM,WFe),e(WFe,dwr),e(JM,cwr),e(JM,_J),e(_J,fwr),e(JM,mwr),e(de,gwr),e(de,YM),e(YM,QFe),e(QFe,hwr),e(YM,pwr),e(YM,uJ),e(uJ,_wr),e(YM,uwr),e(de,bwr),e(de,KM),e(KM,HFe),e(HFe,vwr),e(KM,Fwr),e(KM,bJ),e(bJ,Twr),e(KM,Mwr),e(de,Ewr),e(de,ZM),e(ZM,UFe),e(UFe,Cwr),e(ZM,wwr),e(ZM,vJ),e(vJ,Awr),e(ZM,ywr),e(de,Lwr),e(de,e4),e(e4,JFe),e(JFe,xwr),e(e4,$wr),e(e4,FJ),e(FJ,kwr),e(e4,Swr),e(de,Rwr),e(de,o4),e(o4,YFe),e(YFe,Pwr),e(o4,Bwr),e(o4,TJ),e(TJ,Iwr),e(o4,Nwr),e(Br,qwr),M(r4,Br,null),b(f,iDe,u),b(f,Tc,u),e(Tc,t4),e(t4,KFe),M(v8,KFe,null),e(Tc,jwr),e(Tc,ZFe),e(ZFe,Dwr),b(f,dDe,u),b(f,ir,u),M(F8,ir,null),e(ir,Gwr),e(ir,Mc),e(Mc,Owr),e(Mc,MJ),e(MJ,Vwr),e(Mc,Xwr),e(Mc,EJ),e(EJ,zwr),e(Mc,Wwr),e(ir,Qwr),e(ir,T8),e(T8,Hwr),e(T8,eTe),e(eTe,Uwr),e(T8,Jwr),e(ir,Ywr),e(ir,qt),M(M8,qt,null),e(qt,Kwr),e(qt,oTe),e(oTe,Zwr),e(qt,eAr),e(qt,Ec),e(Ec,oAr),e(Ec,rTe),e(rTe,rAr),e(Ec,tAr),e(Ec,CJ),e(CJ,aAr),e(Ec,nAr),e(qt,sAr),M(a4,qt,null),e(ir,lAr),e(ir,Ir),M(E8,Ir,null),e(Ir,iAr),e(Ir,tTe),e(tTe,dAr),e(Ir,cAr),e(Ir,fn),e(fn,fAr),e(fn,aTe),e(aTe,mAr),e(fn,gAr),e(fn,nTe),e(nTe,hAr),e(fn,pAr),e(fn,sTe),e(sTe,_Ar),e(fn,uAr),e(Ir,bAr),e(Ir,ce),e(ce,n4),e(n4,lTe),e(lTe,vAr),e(n4,FAr),e(n4,wJ),e(wJ,TAr),e(n4,MAr),e(ce,EAr),e(ce,s4),e(s4,iTe),e(iTe,CAr),e(s4,wAr),e(s4,AJ),e(AJ,AAr),e(s4,yAr),e(ce,LAr),e(ce,l4),e(l4,dTe),e(dTe,xAr),e(l4,$Ar),e(l4,yJ),e(yJ,kAr),e(l4,SAr),e(ce,RAr),e(ce,i4),e(i4,cTe),e(cTe,PAr),e(i4,BAr),e(i4,LJ),e(LJ,IAr),e(i4,NAr),e(ce,qAr),e(ce,d4),e(d4,fTe),e(fTe,jAr),e(d4,DAr),e(d4,xJ),e(xJ,GAr),e(d4,OAr),e(ce,VAr),e(ce,c4),e(c4,mTe),e(mTe,XAr),e(c4,zAr),e(c4,$J),e($J,WAr),e(c4,QAr),e(ce,HAr),e(ce,f4),e(f4,gTe),e(gTe,UAr),e(f4,JAr),e(f4,kJ),e(kJ,YAr),e(f4,KAr),e(ce,ZAr),e(ce,m4),e(m4,hTe),e(hTe,e6r),e(m4,o6r),e(m4,SJ),e(SJ,r6r),e(m4,t6r),e(ce,a6r),e(ce,g4),e(g4,pTe),e(pTe,n6r),e(g4,s6r),e(g4,RJ),e(RJ,l6r),e(g4,i6r),e(ce,d6r),e(ce,h4),e(h4,_Te),e(_Te,c6r),e(h4,f6r),e(h4,PJ),e(PJ,m6r),e(h4,g6r),e(ce,h6r),e(ce,p4),e(p4,uTe),e(uTe,p6r),e(p4,_6r),e(p4,BJ),e(BJ,u6r),e(p4,b6r),e(ce,v6r),e(ce,_4),e(_4,bTe),e(bTe,F6r),e(_4,T6r),e(_4,IJ),e(IJ,M6r),e(_4,E6r),e(ce,C6r),e(ce,u4),e(u4,vTe),e(vTe,w6r),e(u4,A6r),e(u4,NJ),e(NJ,y6r),e(u4,L6r),e(ce,x6r),e(ce,b4),e(b4,FTe),e(FTe,$6r),e(b4,k6r),e(b4,qJ),e(qJ,S6r),e(b4,R6r),e(ce,P6r),e(ce,v4),e(v4,TTe),e(TTe,B6r),e(v4,I6r),e(v4,jJ),e(jJ,N6r),e(v4,q6r),e(ce,j6r),e(ce,F4),e(F4,MTe),e(MTe,D6r),e(F4,G6r),e(F4,DJ),e(DJ,O6r),e(F4,V6r),e(ce,X6r),e(ce,T4),e(T4,ETe),e(ETe,z6r),e(T4,W6r),e(T4,GJ),e(GJ,Q6r),e(T4,H6r),e(ce,U6r),e(ce,M4),e(M4,CTe),e(CTe,J6r),e(M4,Y6r),e(M4,OJ),e(OJ,K6r),e(M4,Z6r),e(ce,eyr),e(ce,E4),e(E4,wTe),e(wTe,oyr),e(E4,ryr),e(E4,VJ),e(VJ,tyr),e(E4,ayr),e(ce,nyr),e(ce,C4),e(C4,ATe),e(ATe,syr),e(C4,lyr),e(C4,XJ),e(XJ,iyr),e(C4,dyr),e(Ir,cyr),M(w4,Ir,null),b(f,cDe,u),b(f,Cc,u),e(Cc,A4),e(A4,yTe),M(C8,yTe,null),e(Cc,fyr),e(Cc,LTe),e(LTe,myr),b(f,fDe,u),b(f,dr,u),M(w8,dr,null),e(dr,gyr),e(dr,wc),e(wc,hyr),e(wc,zJ),e(zJ,pyr),e(wc,_yr),e(wc,WJ),e(WJ,uyr),e(wc,byr),e(dr,vyr),e(dr,A8),e(A8,Fyr),e(A8,xTe),e(xTe,Tyr),e(A8,Myr),e(dr,Eyr),e(dr,jt),M(y8,jt,null),e(jt,Cyr),e(jt,$Te),e($Te,wyr),e(jt,Ayr),e(jt,Ac),e(Ac,yyr),e(Ac,kTe),e(kTe,Lyr),e(Ac,xyr),e(Ac,QJ),e(QJ,$yr),e(Ac,kyr),e(jt,Syr),M(y4,jt,null),e(dr,Ryr),e(dr,Nr),M(L8,Nr,null),e(Nr,Pyr),e(Nr,STe),e(STe,Byr),e(Nr,Iyr),e(Nr,mn),e(mn,Nyr),e(mn,RTe),e(RTe,qyr),e(mn,jyr),e(mn,PTe),e(PTe,Dyr),e(mn,Gyr),e(mn,BTe),e(BTe,Oyr),e(mn,Vyr),e(Nr,Xyr),e(Nr,ITe),e(ITe,L4),e(L4,NTe),e(NTe,zyr),e(L4,Wyr),e(L4,HJ),e(HJ,Qyr),e(L4,Hyr),e(Nr,Uyr),M(x4,Nr,null),b(f,mDe,u),b(f,yc,u),e(yc,$4),e($4,qTe),M(x8,qTe,null),e(yc,Jyr),e(yc,jTe),e(jTe,Yyr),b(f,gDe,u),b(f,cr,u),M($8,cr,null),e(cr,Kyr),e(cr,Lc),e(Lc,Zyr),e(Lc,UJ),e(UJ,eLr),e(Lc,oLr),e(Lc,JJ),e(JJ,rLr),e(Lc,tLr),e(cr,aLr),e(cr,k8),e(k8,nLr),e(k8,DTe),e(DTe,sLr),e(k8,lLr),e(cr,iLr),e(cr,Dt),M(S8,Dt,null),e(Dt,dLr),e(Dt,GTe),e(GTe,cLr),e(Dt,fLr),e(Dt,xc),e(xc,mLr),e(xc,OTe),e(OTe,gLr),e(xc,hLr),e(xc,YJ),e(YJ,pLr),e(xc,_Lr),e(Dt,uLr),M(k4,Dt,null),e(cr,bLr),e(cr,qr),M(R8,qr,null),e(qr,vLr),e(qr,VTe),e(VTe,FLr),e(qr,TLr),e(qr,gn),e(gn,MLr),e(gn,XTe),e(XTe,ELr),e(gn,CLr),e(gn,zTe),e(zTe,wLr),e(gn,ALr),e(gn,WTe),e(WTe,yLr),e(gn,LLr),e(qr,xLr),e(qr,QTe),e(QTe,S4),e(S4,HTe),e(HTe,$Lr),e(S4,kLr),e(S4,KJ),e(KJ,SLr),e(S4,RLr),e(qr,PLr),M(R4,qr,null),b(f,hDe,u),b(f,$c,u),e($c,P4),e(P4,UTe),M(P8,UTe,null),e($c,BLr),e($c,JTe),e(JTe,ILr),b(f,pDe,u),b(f,fr,u),M(B8,fr,null),e(fr,NLr),e(fr,kc),e(kc,qLr),e(kc,ZJ),e(ZJ,jLr),e(kc,DLr),e(kc,eY),e(eY,GLr),e(kc,OLr),e(fr,VLr),e(fr,I8),e(I8,XLr),e(I8,YTe),e(YTe,zLr),e(I8,WLr),e(fr,QLr),e(fr,Gt),M(N8,Gt,null),e(Gt,HLr),e(Gt,KTe),e(KTe,ULr),e(Gt,JLr),e(Gt,Sc),e(Sc,YLr),e(Sc,ZTe),e(ZTe,KLr),e(Sc,ZLr),e(Sc,oY),e(oY,e8r),e(Sc,o8r),e(Gt,r8r),M(B4,Gt,null),e(fr,t8r),e(fr,jr),M(q8,jr,null),e(jr,a8r),e(jr,e7e),e(e7e,n8r),e(jr,s8r),e(jr,hn),e(hn,l8r),e(hn,o7e),e(o7e,i8r),e(hn,d8r),e(hn,r7e),e(r7e,c8r),e(hn,f8r),e(hn,t7e),e(t7e,m8r),e(hn,g8r),e(jr,h8r),e(jr,re),e(re,I4),e(I4,a7e),e(a7e,p8r),e(I4,_8r),e(I4,rY),e(rY,u8r),e(I4,b8r),e(re,v8r),e(re,N4),e(N4,n7e),e(n7e,F8r),e(N4,T8r),e(N4,tY),e(tY,M8r),e(N4,E8r),e(re,C8r),e(re,q4),e(q4,s7e),e(s7e,w8r),e(q4,A8r),e(q4,aY),e(aY,y8r),e(q4,L8r),e(re,x8r),e(re,j4),e(j4,l7e),e(l7e,$8r),e(j4,k8r),e(j4,nY),e(nY,S8r),e(j4,R8r),e(re,P8r),e(re,D4),e(D4,i7e),e(i7e,B8r),e(D4,I8r),e(D4,sY),e(sY,N8r),e(D4,q8r),e(re,j8r),e(re,G4),e(G4,d7e),e(d7e,D8r),e(G4,G8r),e(G4,lY),e(lY,O8r),e(G4,V8r),e(re,X8r),e(re,O4),e(O4,c7e),e(c7e,z8r),e(O4,W8r),e(O4,iY),e(iY,Q8r),e(O4,H8r),e(re,U8r),e(re,V4),e(V4,f7e),e(f7e,J8r),e(V4,Y8r),e(V4,dY),e(dY,K8r),e(V4,Z8r),e(re,exr),e(re,X4),e(X4,m7e),e(m7e,oxr),e(X4,rxr),e(X4,cY),e(cY,txr),e(X4,axr),e(re,nxr),e(re,z4),e(z4,g7e),e(g7e,sxr),e(z4,lxr),e(z4,fY),e(fY,ixr),e(z4,dxr),e(re,cxr),e(re,W4),e(W4,h7e),e(h7e,fxr),e(W4,mxr),e(W4,mY),e(mY,gxr),e(W4,hxr),e(re,pxr),e(re,Q4),e(Q4,p7e),e(p7e,_xr),e(Q4,uxr),e(Q4,gY),e(gY,bxr),e(Q4,vxr),e(re,Fxr),e(re,H4),e(H4,_7e),e(_7e,Txr),e(H4,Mxr),e(H4,hY),e(hY,Exr),e(H4,Cxr),e(re,wxr),e(re,U4),e(U4,u7e),e(u7e,Axr),e(U4,yxr),e(U4,pY),e(pY,Lxr),e(U4,xxr),e(re,$xr),e(re,J4),e(J4,b7e),e(b7e,kxr),e(J4,Sxr),e(J4,_Y),e(_Y,Rxr),e(J4,Pxr),e(re,Bxr),e(re,Y4),e(Y4,v7e),e(v7e,Ixr),e(Y4,Nxr),e(Y4,uY),e(uY,qxr),e(Y4,jxr),e(re,Dxr),e(re,K4),e(K4,F7e),e(F7e,Gxr),e(K4,Oxr),e(K4,bY),e(bY,Vxr),e(K4,Xxr),e(re,zxr),e(re,Z4),e(Z4,T7e),e(T7e,Wxr),e(Z4,Qxr),e(Z4,vY),e(vY,Hxr),e(Z4,Uxr),e(re,Jxr),e(re,eE),e(eE,M7e),e(M7e,Yxr),e(eE,Kxr),e(eE,FY),e(FY,Zxr),e(eE,e$r),e(re,o$r),e(re,oE),e(oE,E7e),e(E7e,r$r),e(oE,t$r),e(oE,TY),e(TY,a$r),e(oE,n$r),e(re,s$r),e(re,rE),e(rE,C7e),e(C7e,l$r),e(rE,i$r),e(rE,MY),e(MY,d$r),e(rE,c$r),e(re,f$r),e(re,tE),e(tE,w7e),e(w7e,m$r),e(tE,g$r),e(tE,EY),e(EY,h$r),e(tE,p$r),e(re,_$r),e(re,aE),e(aE,A7e),e(A7e,u$r),e(aE,b$r),e(aE,CY),e(CY,v$r),e(aE,F$r),e(re,T$r),e(re,nE),e(nE,y7e),e(y7e,M$r),e(nE,E$r),e(nE,wY),e(wY,C$r),e(nE,w$r),e(re,A$r),e(re,sE),e(sE,L7e),e(L7e,y$r),e(sE,L$r),e(sE,AY),e(AY,x$r),e(sE,$$r),e(re,k$r),e(re,lE),e(lE,x7e),e(x7e,S$r),e(lE,R$r),e(lE,yY),e(yY,P$r),e(lE,B$r),e(jr,I$r),M(iE,jr,null),b(f,_De,u),b(f,Rc,u),e(Rc,dE),e(dE,$7e),M(j8,$7e,null),e(Rc,N$r),e(Rc,k7e),e(k7e,q$r),b(f,uDe,u),b(f,mr,u),M(D8,mr,null),e(mr,j$r),e(mr,Pc),e(Pc,D$r),e(Pc,LY),e(LY,G$r),e(Pc,O$r),e(Pc,xY),e(xY,V$r),e(Pc,X$r),e(mr,z$r),e(mr,G8),e(G8,W$r),e(G8,S7e),e(S7e,Q$r),e(G8,H$r),e(mr,U$r),e(mr,Ot),M(O8,Ot,null),e(Ot,J$r),e(Ot,R7e),e(R7e,Y$r),e(Ot,K$r),e(Ot,Bc),e(Bc,Z$r),e(Bc,P7e),e(P7e,ekr),e(Bc,okr),e(Bc,$Y),e($Y,rkr),e(Bc,tkr),e(Ot,akr),M(cE,Ot,null),e(mr,nkr),e(mr,Dr),M(V8,Dr,null),e(Dr,skr),e(Dr,B7e),e(B7e,lkr),e(Dr,ikr),e(Dr,pn),e(pn,dkr),e(pn,I7e),e(I7e,ckr),e(pn,fkr),e(pn,N7e),e(N7e,mkr),e(pn,gkr),e(pn,q7e),e(q7e,hkr),e(pn,pkr),e(Dr,_kr),e(Dr,Le),e(Le,fE),e(fE,j7e),e(j7e,ukr),e(fE,bkr),e(fE,kY),e(kY,vkr),e(fE,Fkr),e(Le,Tkr),e(Le,mE),e(mE,D7e),e(D7e,Mkr),e(mE,Ekr),e(mE,SY),e(SY,Ckr),e(mE,wkr),e(Le,Akr),e(Le,gE),e(gE,G7e),e(G7e,ykr),e(gE,Lkr),e(gE,RY),e(RY,xkr),e(gE,$kr),e(Le,kkr),e(Le,hE),e(hE,O7e),e(O7e,Skr),e(hE,Rkr),e(hE,PY),e(PY,Pkr),e(hE,Bkr),e(Le,Ikr),e(Le,pE),e(pE,V7e),e(V7e,Nkr),e(pE,qkr),e(pE,BY),e(BY,jkr),e(pE,Dkr),e(Le,Gkr),e(Le,_E),e(_E,X7e),e(X7e,Okr),e(_E,Vkr),e(_E,IY),e(IY,Xkr),e(_E,zkr),e(Le,Wkr),e(Le,uE),e(uE,z7e),e(z7e,Qkr),e(uE,Hkr),e(uE,NY),e(NY,Ukr),e(uE,Jkr),e(Le,Ykr),e(Le,bE),e(bE,W7e),e(W7e,Kkr),e(bE,Zkr),e(bE,qY),e(qY,eSr),e(bE,oSr),e(Le,rSr),e(Le,vE),e(vE,Q7e),e(Q7e,tSr),e(vE,aSr),e(vE,jY),e(jY,nSr),e(vE,sSr),e(Le,lSr),e(Le,FE),e(FE,H7e),e(H7e,iSr),e(FE,dSr),e(FE,DY),e(DY,cSr),e(FE,fSr),e(Dr,mSr),M(TE,Dr,null),b(f,bDe,u),b(f,Ic,u),e(Ic,ME),e(ME,U7e),M(X8,U7e,null),e(Ic,gSr),e(Ic,J7e),e(J7e,hSr),b(f,vDe,u),b(f,gr,u),M(z8,gr,null),e(gr,pSr),e(gr,Nc),e(Nc,_Sr),e(Nc,GY),e(GY,uSr),e(Nc,bSr),e(Nc,OY),e(OY,vSr),e(Nc,FSr),e(gr,TSr),e(gr,W8),e(W8,MSr),e(W8,Y7e),e(Y7e,ESr),e(W8,CSr),e(gr,wSr),e(gr,Vt),M(Q8,Vt,null),e(Vt,ASr),e(Vt,K7e),e(K7e,ySr),e(Vt,LSr),e(Vt,qc),e(qc,xSr),e(qc,Z7e),e(Z7e,$Sr),e(qc,kSr),e(qc,VY),e(VY,SSr),e(qc,RSr),e(Vt,PSr),M(EE,Vt,null),e(gr,BSr),e(gr,Gr),M(H8,Gr,null),e(Gr,ISr),e(Gr,e9e),e(e9e,NSr),e(Gr,qSr),e(Gr,_n),e(_n,jSr),e(_n,o9e),e(o9e,DSr),e(_n,GSr),e(_n,r9e),e(r9e,OSr),e(_n,VSr),e(_n,t9e),e(t9e,XSr),e(_n,zSr),e(Gr,WSr),e(Gr,Ee),e(Ee,CE),e(CE,a9e),e(a9e,QSr),e(CE,HSr),e(CE,XY),e(XY,USr),e(CE,JSr),e(Ee,YSr),e(Ee,wE),e(wE,n9e),e(n9e,KSr),e(wE,ZSr),e(wE,zY),e(zY,eRr),e(wE,oRr),e(Ee,rRr),e(Ee,AE),e(AE,s9e),e(s9e,tRr),e(AE,aRr),e(AE,WY),e(WY,nRr),e(AE,sRr),e(Ee,lRr),e(Ee,yE),e(yE,l9e),e(l9e,iRr),e(yE,dRr),e(yE,QY),e(QY,cRr),e(yE,fRr),e(Ee,mRr),e(Ee,LE),e(LE,i9e),e(i9e,gRr),e(LE,hRr),e(LE,HY),e(HY,pRr),e(LE,_Rr),e(Ee,uRr),e(Ee,xE),e(xE,d9e),e(d9e,bRr),e(xE,vRr),e(xE,UY),e(UY,FRr),e(xE,TRr),e(Ee,MRr),e(Ee,$E),e($E,c9e),e(c9e,ERr),e($E,CRr),e($E,JY),e(JY,wRr),e($E,ARr),e(Ee,yRr),e(Ee,kE),e(kE,f9e),e(f9e,LRr),e(kE,xRr),e(kE,YY),e(YY,$Rr),e(kE,kRr),e(Ee,SRr),e(Ee,SE),e(SE,m9e),e(m9e,RRr),e(SE,PRr),e(SE,KY),e(KY,BRr),e(SE,IRr),e(Ee,NRr),e(Ee,RE),e(RE,g9e),e(g9e,qRr),e(RE,jRr),e(RE,ZY),e(ZY,DRr),e(RE,GRr),e(Ee,ORr),e(Ee,PE),e(PE,h9e),e(h9e,VRr),e(PE,XRr),e(PE,eK),e(eK,zRr),e(PE,WRr),e(Ee,QRr),e(Ee,BE),e(BE,p9e),e(p9e,HRr),e(BE,URr),e(BE,oK),e(oK,JRr),e(BE,YRr),e(Gr,KRr),M(IE,Gr,null),b(f,FDe,u),b(f,jc,u),e(jc,NE),e(NE,_9e),M(U8,_9e,null),e(jc,ZRr),e(jc,u9e),e(u9e,ePr),b(f,TDe,u),b(f,hr,u),M(J8,hr,null),e(hr,oPr),e(hr,Dc),e(Dc,rPr),e(Dc,rK),e(rK,tPr),e(Dc,aPr),e(Dc,tK),e(tK,nPr),e(Dc,sPr),e(hr,lPr),e(hr,Y8),e(Y8,iPr),e(Y8,b9e),e(b9e,dPr),e(Y8,cPr),e(hr,fPr),e(hr,Xt),M(K8,Xt,null),e(Xt,mPr),e(Xt,v9e),e(v9e,gPr),e(Xt,hPr),e(Xt,Gc),e(Gc,pPr),e(Gc,F9e),e(F9e,_Pr),e(Gc,uPr),e(Gc,aK),e(aK,bPr),e(Gc,vPr),e(Xt,FPr),M(qE,Xt,null),e(hr,TPr),e(hr,Or),M(Z8,Or,null),e(Or,MPr),e(Or,T9e),e(T9e,EPr),e(Or,CPr),e(Or,un),e(un,wPr),e(un,M9e),e(M9e,APr),e(un,yPr),e(un,E9e),e(E9e,LPr),e(un,xPr),e(un,C9e),e(C9e,$Pr),e(un,kPr),e(Or,SPr),e(Or,xe),e(xe,jE),e(jE,w9e),e(w9e,RPr),e(jE,PPr),e(jE,nK),e(nK,BPr),e(jE,IPr),e(xe,NPr),e(xe,DE),e(DE,A9e),e(A9e,qPr),e(DE,jPr),e(DE,sK),e(sK,DPr),e(DE,GPr),e(xe,OPr),e(xe,GE),e(GE,y9e),e(y9e,VPr),e(GE,XPr),e(GE,lK),e(lK,zPr),e(GE,WPr),e(xe,QPr),e(xe,OE),e(OE,L9e),e(L9e,HPr),e(OE,UPr),e(OE,iK),e(iK,JPr),e(OE,YPr),e(xe,KPr),e(xe,VE),e(VE,x9e),e(x9e,ZPr),e(VE,eBr),e(VE,dK),e(dK,oBr),e(VE,rBr),e(xe,tBr),e(xe,XE),e(XE,$9e),e($9e,aBr),e(XE,nBr),e(XE,cK),e(cK,sBr),e(XE,lBr),e(xe,iBr),e(xe,zE),e(zE,k9e),e(k9e,dBr),e(zE,cBr),e(zE,fK),e(fK,fBr),e(zE,mBr),e(xe,gBr),e(xe,WE),e(WE,S9e),e(S9e,hBr),e(WE,pBr),e(WE,mK),e(mK,_Br),e(WE,uBr),e(xe,bBr),e(xe,QE),e(QE,R9e),e(R9e,vBr),e(QE,FBr),e(QE,gK),e(gK,TBr),e(QE,MBr),e(xe,EBr),e(xe,HE),e(HE,P9e),e(P9e,CBr),e(HE,wBr),e(HE,hK),e(hK,ABr),e(HE,yBr),e(Or,LBr),M(UE,Or,null),b(f,MDe,u),b(f,Oc,u),e(Oc,JE),e(JE,B9e),M(ex,B9e,null),e(Oc,xBr),e(Oc,I9e),e(I9e,$Br),b(f,EDe,u),b(f,pr,u),M(ox,pr,null),e(pr,kBr),e(pr,Vc),e(Vc,SBr),e(Vc,pK),e(pK,RBr),e(Vc,PBr),e(Vc,_K),e(_K,BBr),e(Vc,IBr),e(pr,NBr),e(pr,rx),e(rx,qBr),e(rx,N9e),e(N9e,jBr),e(rx,DBr),e(pr,GBr),e(pr,zt),M(tx,zt,null),e(zt,OBr),e(zt,q9e),e(q9e,VBr),e(zt,XBr),e(zt,Xc),e(Xc,zBr),e(Xc,j9e),e(j9e,WBr),e(Xc,QBr),e(Xc,uK),e(uK,HBr),e(Xc,UBr),e(zt,JBr),M(YE,zt,null),e(pr,YBr),e(pr,Vr),M(ax,Vr,null),e(Vr,KBr),e(Vr,D9e),e(D9e,ZBr),e(Vr,eIr),e(Vr,bn),e(bn,oIr),e(bn,G9e),e(G9e,rIr),e(bn,tIr),e(bn,O9e),e(O9e,aIr),e(bn,nIr),e(bn,V9e),e(V9e,sIr),e(bn,lIr),e(Vr,iIr),e(Vr,Pe),e(Pe,KE),e(KE,X9e),e(X9e,dIr),e(KE,cIr),e(KE,bK),e(bK,fIr),e(KE,mIr),e(Pe,gIr),e(Pe,ZE),e(ZE,z9e),e(z9e,hIr),e(ZE,pIr),e(ZE,vK),e(vK,_Ir),e(ZE,uIr),e(Pe,bIr),e(Pe,eC),e(eC,W9e),e(W9e,vIr),e(eC,FIr),e(eC,FK),e(FK,TIr),e(eC,MIr),e(Pe,EIr),e(Pe,oC),e(oC,Q9e),e(Q9e,CIr),e(oC,wIr),e(oC,TK),e(TK,AIr),e(oC,yIr),e(Pe,LIr),e(Pe,rC),e(rC,H9e),e(H9e,xIr),e(rC,$Ir),e(rC,MK),e(MK,kIr),e(rC,SIr),e(Pe,RIr),e(Pe,tC),e(tC,U9e),e(U9e,PIr),e(tC,BIr),e(tC,EK),e(EK,IIr),e(tC,NIr),e(Pe,qIr),e(Pe,aC),e(aC,J9e),e(J9e,jIr),e(aC,DIr),e(aC,CK),e(CK,GIr),e(aC,OIr),e(Pe,VIr),e(Pe,nC),e(nC,Y9e),e(Y9e,XIr),e(nC,zIr),e(nC,wK),e(wK,WIr),e(nC,QIr),e(Pe,HIr),e(Pe,sC),e(sC,K9e),e(K9e,UIr),e(sC,JIr),e(sC,AK),e(AK,YIr),e(sC,KIr),e(Vr,ZIr),M(lC,Vr,null),b(f,CDe,u),b(f,zc,u),e(zc,iC),e(iC,Z9e),M(nx,Z9e,null),e(zc,eNr),e(zc,eMe),e(eMe,oNr),b(f,wDe,u),b(f,_r,u),M(sx,_r,null),e(_r,rNr),e(_r,Wc),e(Wc,tNr),e(Wc,yK),e(yK,aNr),e(Wc,nNr),e(Wc,LK),e(LK,sNr),e(Wc,lNr),e(_r,iNr),e(_r,lx),e(lx,dNr),e(lx,oMe),e(oMe,cNr),e(lx,fNr),e(_r,mNr),e(_r,Wt),M(ix,Wt,null),e(Wt,gNr),e(Wt,rMe),e(rMe,hNr),e(Wt,pNr),e(Wt,Qc),e(Qc,_Nr),e(Qc,tMe),e(tMe,uNr),e(Qc,bNr),e(Qc,xK),e(xK,vNr),e(Qc,FNr),e(Wt,TNr),M(dC,Wt,null),e(_r,MNr),e(_r,Xr),M(dx,Xr,null),e(Xr,ENr),e(Xr,aMe),e(aMe,CNr),e(Xr,wNr),e(Xr,vn),e(vn,ANr),e(vn,nMe),e(nMe,yNr),e(vn,LNr),e(vn,sMe),e(sMe,xNr),e(vn,$Nr),e(vn,lMe),e(lMe,kNr),e(vn,SNr),e(Xr,RNr),e(Xr,$e),e($e,cC),e(cC,iMe),e(iMe,PNr),e(cC,BNr),e(cC,$K),e($K,INr),e(cC,NNr),e($e,qNr),e($e,fC),e(fC,dMe),e(dMe,jNr),e(fC,DNr),e(fC,kK),e(kK,GNr),e(fC,ONr),e($e,VNr),e($e,mC),e(mC,cMe),e(cMe,XNr),e(mC,zNr),e(mC,SK),e(SK,WNr),e(mC,QNr),e($e,HNr),e($e,gC),e(gC,fMe),e(fMe,UNr),e(gC,JNr),e(gC,RK),e(RK,YNr),e(gC,KNr),e($e,ZNr),e($e,hC),e(hC,mMe),e(mMe,eqr),e(hC,oqr),e(hC,PK),e(PK,rqr),e(hC,tqr),e($e,aqr),e($e,pC),e(pC,gMe),e(gMe,nqr),e(pC,sqr),e(pC,BK),e(BK,lqr),e(pC,iqr),e($e,dqr),e($e,_C),e(_C,hMe),e(hMe,cqr),e(_C,fqr),e(_C,IK),e(IK,mqr),e(_C,gqr),e($e,hqr),e($e,uC),e(uC,pMe),e(pMe,pqr),e(uC,_qr),e(uC,NK),e(NK,uqr),e(uC,bqr),e($e,vqr),e($e,bC),e(bC,_Me),e(_Me,Fqr),e(bC,Tqr),e(bC,qK),e(qK,Mqr),e(bC,Eqr),e($e,Cqr),e($e,vC),e(vC,uMe),e(uMe,wqr),e(vC,Aqr),e(vC,jK),e(jK,yqr),e(vC,Lqr),e(Xr,xqr),M(FC,Xr,null),b(f,ADe,u),b(f,Hc,u),e(Hc,TC),e(TC,bMe),M(cx,bMe,null),e(Hc,$qr),e(Hc,vMe),e(vMe,kqr),b(f,yDe,u),b(f,ur,u),M(fx,ur,null),e(ur,Sqr),e(ur,Uc),e(Uc,Rqr),e(Uc,DK),e(DK,Pqr),e(Uc,Bqr),e(Uc,GK),e(GK,Iqr),e(Uc,Nqr),e(ur,qqr),e(ur,mx),e(mx,jqr),e(mx,FMe),e(FMe,Dqr),e(mx,Gqr),e(ur,Oqr),e(ur,Qt),M(gx,Qt,null),e(Qt,Vqr),e(Qt,TMe),e(TMe,Xqr),e(Qt,zqr),e(Qt,Jc),e(Jc,Wqr),e(Jc,MMe),e(MMe,Qqr),e(Jc,Hqr),e(Jc,OK),e(OK,Uqr),e(Jc,Jqr),e(Qt,Yqr),M(MC,Qt,null),e(ur,Kqr),e(ur,zr),M(hx,zr,null),e(zr,Zqr),e(zr,EMe),e(EMe,ejr),e(zr,ojr),e(zr,Fn),e(Fn,rjr),e(Fn,CMe),e(CMe,tjr),e(Fn,ajr),e(Fn,wMe),e(wMe,njr),e(Fn,sjr),e(Fn,AMe),e(AMe,ljr),e(Fn,ijr),e(zr,djr),e(zr,ke),e(ke,EC),e(EC,yMe),e(yMe,cjr),e(EC,fjr),e(EC,VK),e(VK,mjr),e(EC,gjr),e(ke,hjr),e(ke,CC),e(CC,LMe),e(LMe,pjr),e(CC,_jr),e(CC,XK),e(XK,ujr),e(CC,bjr),e(ke,vjr),e(ke,wC),e(wC,xMe),e(xMe,Fjr),e(wC,Tjr),e(wC,zK),e(zK,Mjr),e(wC,Ejr),e(ke,Cjr),e(ke,AC),e(AC,$Me),e($Me,wjr),e(AC,Ajr),e(AC,WK),e(WK,yjr),e(AC,Ljr),e(ke,xjr),e(ke,yC),e(yC,kMe),e(kMe,$jr),e(yC,kjr),e(yC,QK),e(QK,Sjr),e(yC,Rjr),e(ke,Pjr),e(ke,LC),e(LC,SMe),e(SMe,Bjr),e(LC,Ijr),e(LC,HK),e(HK,Njr),e(LC,qjr),e(ke,jjr),e(ke,xC),e(xC,RMe),e(RMe,Djr),e(xC,Gjr),e(xC,UK),e(UK,Ojr),e(xC,Vjr),e(ke,Xjr),e(ke,$C),e($C,PMe),e(PMe,zjr),e($C,Wjr),e($C,JK),e(JK,Qjr),e($C,Hjr),e(ke,Ujr),e(ke,kC),e(kC,BMe),e(BMe,Jjr),e(kC,Yjr),e(kC,YK),e(YK,Kjr),e(kC,Zjr),e(ke,eDr),e(ke,SC),e(SC,IMe),e(IMe,oDr),e(SC,rDr),e(SC,KK),e(KK,tDr),e(SC,aDr),e(zr,nDr),M(RC,zr,null),b(f,LDe,u),b(f,Yc,u),e(Yc,PC),e(PC,NMe),M(px,NMe,null),e(Yc,sDr),e(Yc,qMe),e(qMe,lDr),b(f,xDe,u),b(f,br,u),M(_x,br,null),e(br,iDr),e(br,Kc),e(Kc,dDr),e(Kc,ZK),e(ZK,cDr),e(Kc,fDr),e(Kc,eZ),e(eZ,mDr),e(Kc,gDr),e(br,hDr),e(br,ux),e(ux,pDr),e(ux,jMe),e(jMe,_Dr),e(ux,uDr),e(br,bDr),e(br,Ht),M(bx,Ht,null),e(Ht,vDr),e(Ht,DMe),e(DMe,FDr),e(Ht,TDr),e(Ht,Zc),e(Zc,MDr),e(Zc,GMe),e(GMe,EDr),e(Zc,CDr),e(Zc,oZ),e(oZ,wDr),e(Zc,ADr),e(Ht,yDr),M(BC,Ht,null),e(br,LDr),e(br,Wr),M(vx,Wr,null),e(Wr,xDr),e(Wr,OMe),e(OMe,$Dr),e(Wr,kDr),e(Wr,Tn),e(Tn,SDr),e(Tn,VMe),e(VMe,RDr),e(Tn,PDr),e(Tn,XMe),e(XMe,BDr),e(Tn,IDr),e(Tn,zMe),e(zMe,NDr),e(Tn,qDr),e(Wr,jDr),e(Wr,Ge),e(Ge,IC),e(IC,WMe),e(WMe,DDr),e(IC,GDr),e(IC,rZ),e(rZ,ODr),e(IC,VDr),e(Ge,XDr),e(Ge,NC),e(NC,QMe),e(QMe,zDr),e(NC,WDr),e(NC,tZ),e(tZ,QDr),e(NC,HDr),e(Ge,UDr),e(Ge,qC),e(qC,HMe),e(HMe,JDr),e(qC,YDr),e(qC,aZ),e(aZ,KDr),e(qC,ZDr),e(Ge,eGr),e(Ge,jC),e(jC,UMe),e(UMe,oGr),e(jC,rGr),e(jC,nZ),e(nZ,tGr),e(jC,aGr),e(Ge,nGr),e(Ge,DC),e(DC,JMe),e(JMe,sGr),e(DC,lGr),e(DC,sZ),e(sZ,iGr),e(DC,dGr),e(Ge,cGr),e(Ge,GC),e(GC,YMe),e(YMe,fGr),e(GC,mGr),e(GC,lZ),e(lZ,gGr),e(GC,hGr),e(Ge,pGr),e(Ge,OC),e(OC,KMe),e(KMe,_Gr),e(OC,uGr),e(OC,iZ),e(iZ,bGr),e(OC,vGr),e(Ge,FGr),e(Ge,VC),e(VC,ZMe),e(ZMe,TGr),e(VC,MGr),e(VC,dZ),e(dZ,EGr),e(VC,CGr),e(Wr,wGr),M(XC,Wr,null),b(f,$De,u),b(f,ef,u),e(ef,zC),e(zC,e4e),M(Fx,e4e,null),e(ef,AGr),e(ef,o4e),e(o4e,yGr),b(f,kDe,u),b(f,vr,u),M(Tx,vr,null),e(vr,LGr),e(vr,of),e(of,xGr),e(of,cZ),e(cZ,$Gr),e(of,kGr),e(of,fZ),e(fZ,SGr),e(of,RGr),e(vr,PGr),e(vr,Mx),e(Mx,BGr),e(Mx,r4e),e(r4e,IGr),e(Mx,NGr),e(vr,qGr),e(vr,Ut),M(Ex,Ut,null),e(Ut,jGr),e(Ut,t4e),e(t4e,DGr),e(Ut,GGr),e(Ut,rf),e(rf,OGr),e(rf,a4e),e(a4e,VGr),e(rf,XGr),e(rf,mZ),e(mZ,zGr),e(rf,WGr),e(Ut,QGr),M(WC,Ut,null),e(vr,HGr),e(vr,Qr),M(Cx,Qr,null),e(Qr,UGr),e(Qr,n4e),e(n4e,JGr),e(Qr,YGr),e(Qr,Mn),e(Mn,KGr),e(Mn,s4e),e(s4e,ZGr),e(Mn,eOr),e(Mn,l4e),e(l4e,oOr),e(Mn,rOr),e(Mn,i4e),e(i4e,tOr),e(Mn,aOr),e(Qr,nOr),e(Qr,Oe),e(Oe,QC),e(QC,d4e),e(d4e,sOr),e(QC,lOr),e(QC,gZ),e(gZ,iOr),e(QC,dOr),e(Oe,cOr),e(Oe,HC),e(HC,c4e),e(c4e,fOr),e(HC,mOr),e(HC,hZ),e(hZ,gOr),e(HC,hOr),e(Oe,pOr),e(Oe,UC),e(UC,f4e),e(f4e,_Or),e(UC,uOr),e(UC,pZ),e(pZ,bOr),e(UC,vOr),e(Oe,FOr),e(Oe,JC),e(JC,m4e),e(m4e,TOr),e(JC,MOr),e(JC,_Z),e(_Z,EOr),e(JC,COr),e(Oe,wOr),e(Oe,YC),e(YC,g4e),e(g4e,AOr),e(YC,yOr),e(YC,uZ),e(uZ,LOr),e(YC,xOr),e(Oe,$Or),e(Oe,KC),e(KC,h4e),e(h4e,kOr),e(KC,SOr),e(KC,bZ),e(bZ,ROr),e(KC,POr),e(Oe,BOr),e(Oe,ZC),e(ZC,p4e),e(p4e,IOr),e(ZC,NOr),e(ZC,vZ),e(vZ,qOr),e(ZC,jOr),e(Oe,DOr),e(Oe,e0),e(e0,_4e),e(_4e,GOr),e(e0,OOr),e(e0,FZ),e(FZ,VOr),e(e0,XOr),e(Qr,zOr),M(o0,Qr,null),b(f,SDe,u),b(f,tf,u),e(tf,r0),e(r0,u4e),M(wx,u4e,null),e(tf,WOr),e(tf,b4e),e(b4e,QOr),b(f,RDe,u),b(f,Fr,u),M(Ax,Fr,null),e(Fr,HOr),e(Fr,af),e(af,UOr),e(af,TZ),e(TZ,JOr),e(af,YOr),e(af,MZ),e(MZ,KOr),e(af,ZOr),e(Fr,eVr),e(Fr,yx),e(yx,oVr),e(yx,v4e),e(v4e,rVr),e(yx,tVr),e(Fr,aVr),e(Fr,Jt),M(Lx,Jt,null),e(Jt,nVr),e(Jt,F4e),e(F4e,sVr),e(Jt,lVr),e(Jt,nf),e(nf,iVr),e(nf,T4e),e(T4e,dVr),e(nf,cVr),e(nf,EZ),e(EZ,fVr),e(nf,mVr),e(Jt,gVr),M(t0,Jt,null),e(Fr,hVr),e(Fr,Hr),M(xx,Hr,null),e(Hr,pVr),e(Hr,M4e),e(M4e,_Vr),e(Hr,uVr),e(Hr,En),e(En,bVr),e(En,E4e),e(E4e,vVr),e(En,FVr),e(En,C4e),e(C4e,TVr),e(En,MVr),e(En,w4e),e(w4e,EVr),e(En,CVr),e(Hr,wVr),e(Hr,A4e),e(A4e,a0),e(a0,y4e),e(y4e,AVr),e(a0,yVr),e(a0,CZ),e(CZ,LVr),e(a0,xVr),e(Hr,$Vr),M(n0,Hr,null),b(f,PDe,u),b(f,sf,u),e(sf,s0),e(s0,L4e),M($x,L4e,null),e(sf,kVr),e(sf,x4e),e(x4e,SVr),b(f,BDe,u),b(f,Tr,u),M(kx,Tr,null),e(Tr,RVr),e(Tr,lf),e(lf,PVr),e(lf,wZ),e(wZ,BVr),e(lf,IVr),e(lf,AZ),e(AZ,NVr),e(lf,qVr),e(Tr,jVr),e(Tr,Sx),e(Sx,DVr),e(Sx,$4e),e($4e,GVr),e(Sx,OVr),e(Tr,VVr),e(Tr,Yt),M(Rx,Yt,null),e(Yt,XVr),e(Yt,k4e),e(k4e,zVr),e(Yt,WVr),e(Yt,df),e(df,QVr),e(df,S4e),e(S4e,HVr),e(df,UVr),e(df,yZ),e(yZ,JVr),e(df,YVr),e(Yt,KVr),M(l0,Yt,null),e(Tr,ZVr),e(Tr,Ur),M(Px,Ur,null),e(Ur,eXr),e(Ur,R4e),e(R4e,oXr),e(Ur,rXr),e(Ur,Cn),e(Cn,tXr),e(Cn,P4e),e(P4e,aXr),e(Cn,nXr),e(Cn,B4e),e(B4e,sXr),e(Cn,lXr),e(Cn,I4e),e(I4e,iXr),e(Cn,dXr),e(Ur,cXr),e(Ur,Bx),e(Bx,i0),e(i0,N4e),e(N4e,fXr),e(i0,mXr),e(i0,LZ),e(LZ,gXr),e(i0,hXr),e(Bx,pXr),e(Bx,d0),e(d0,q4e),e(q4e,_Xr),e(d0,uXr),e(d0,xZ),e(xZ,bXr),e(d0,vXr),e(Ur,FXr),M(c0,Ur,null),b(f,IDe,u),b(f,cf,u),e(cf,f0),e(f0,j4e),M(Ix,j4e,null),e(cf,TXr),e(cf,D4e),e(D4e,MXr),b(f,NDe,u),b(f,Mr,u),M(Nx,Mr,null),e(Mr,EXr),e(Mr,ff),e(ff,CXr),e(ff,$Z),e($Z,wXr),e(ff,AXr),e(ff,kZ),e(kZ,yXr),e(ff,LXr),e(Mr,xXr),e(Mr,qx),e(qx,$Xr),e(qx,G4e),e(G4e,kXr),e(qx,SXr),e(Mr,RXr),e(Mr,Kt),M(jx,Kt,null),e(Kt,PXr),e(Kt,O4e),e(O4e,BXr),e(Kt,IXr),e(Kt,mf),e(mf,NXr),e(mf,V4e),e(V4e,qXr),e(mf,jXr),e(mf,SZ),e(SZ,DXr),e(mf,GXr),e(Kt,OXr),M(m0,Kt,null),e(Mr,VXr),e(Mr,Jr),M(Dx,Jr,null),e(Jr,XXr),e(Jr,X4e),e(X4e,zXr),e(Jr,WXr),e(Jr,wn),e(wn,QXr),e(wn,z4e),e(z4e,HXr),e(wn,UXr),e(wn,W4e),e(W4e,JXr),e(wn,YXr),e(wn,Q4e),e(Q4e,KXr),e(wn,ZXr),e(Jr,ezr),e(Jr,H4e),e(H4e,g0),e(g0,U4e),e(U4e,ozr),e(g0,rzr),e(g0,RZ),e(RZ,tzr),e(g0,azr),e(Jr,nzr),M(h0,Jr,null),qDe=!0},p(f,[u]){const Gx={};u&2&&(Gx.$$scope={dirty:u,ctx:f}),Tf.$set(Gx);const J4e={};u&2&&(J4e.$$scope={dirty:u,ctx:f}),wg.$set(J4e);const Y4e={};u&2&&(Y4e.$$scope={dirty:u,ctx:f}),sh.$set(Y4e);const K4e={};u&2&&(K4e.$$scope={dirty:u,ctx:f}),jh.$set(K4e);const Ox={};u&2&&(Ox.$$scope={dirty:u,ctx:f}),Dh.$set(Ox);const Z4e={};u&2&&(Z4e.$$scope={dirty:u,ctx:f}),sp.$set(Z4e);const An={};u&2&&(An.$$scope={dirty:u,ctx:f}),lp.$set(An);const eEe={};u&2&&(eEe.$$scope={dirty:u,ctx:f}),cp.$set(eEe);const oEe={};u&2&&(oEe.$$scope={dirty:u,ctx:f}),su.$set(oEe);const rEe={};u&2&&(rEe.$$scope={dirty:u,ctx:f}),iu.$set(rEe);const Vx={};u&2&&(Vx.$$scope={dirty:u,ctx:f}),Ku.$set(Vx);const tEe={};u&2&&(tEe.$$scope={dirty:u,ctx:f}),e1.$set(tEe);const Xx={};u&2&&(Xx.$$scope={dirty:u,ctx:f}),j1.$set(Xx);const aEe={};u&2&&(aEe.$$scope={dirty:u,ctx:f}),G1.$set(aEe);const zx={};u&2&&(zx.$$scope={dirty:u,ctx:f}),wb.$set(zx);const nEe={};u&2&&(nEe.$$scope={dirty:u,ctx:f}),yb.$set(nEe);const sEe={};u&2&&(sEe.$$scope={dirty:u,ctx:f}),zb.$set(sEe);const lEe={};u&2&&(lEe.$$scope={dirty:u,ctx:f}),Qb.$set(lEe);const gf={};u&2&&(gf.$$scope={dirty:u,ctx:f}),O2.$set(gf);const iEe={};u&2&&(iEe.$$scope={dirty:u,ctx:f}),X2.$set(iEe);const dEe={};u&2&&(dEe.$$scope={dirty:u,ctx:f}),Tv.$set(dEe);const cEe={};u&2&&(cEe.$$scope={dirty:u,ctx:f}),Ev.$set(cEe);const Wx={};u&2&&(Wx.$$scope={dirty:u,ctx:f}),$v.$set(Wx);const fEe={};u&2&&(fEe.$$scope={dirty:u,ctx:f}),Sv.$set(fEe);const mEe={};u&2&&(mEe.$$scope={dirty:u,ctx:f}),h5.$set(mEe);const gEe={};u&2&&(gEe.$$scope={dirty:u,ctx:f}),_5.$set(gEe);const et={};u&2&&(et.$$scope={dirty:u,ctx:f}),a3.$set(et);const Qx={};u&2&&(Qx.$$scope={dirty:u,ctx:f}),s3.$set(Qx);const hEe={};u&2&&(hEe.$$scope={dirty:u,ctx:f}),d3.$set(hEe);const Hx={};u&2&&(Hx.$$scope={dirty:u,ctx:f}),f3.$set(Hx);const pEe={};u&2&&(pEe.$$scope={dirty:u,ctx:f}),w3.$set(pEe);const ot={};u&2&&(ot.$$scope={dirty:u,ctx:f}),y3.$set(ot);const _Ee={};u&2&&(_Ee.$$scope={dirty:u,ctx:f}),$3.$set(_Ee);const hf={};u&2&&(hf.$$scope={dirty:u,ctx:f}),S3.$set(hf);const uEe={};u&2&&(uEe.$$scope={dirty:u,ctx:f}),V3.$set(uEe);const bEe={};u&2&&(bEe.$$scope={dirty:u,ctx:f}),z3.$set(bEe);const y={};u&2&&(y.$$scope={dirty:u,ctx:f}),K3.$set(y);const p0={};u&2&&(p0.$$scope={dirty:u,ctx:f}),eF.$set(p0);const vEe={};u&2&&(vEe.$$scope={dirty:u,ctx:f}),fF.$set(vEe);const FEe={};u&2&&(FEe.$$scope={dirty:u,ctx:f}),gF.$set(FEe);const _0={};u&2&&(_0.$$scope={dirty:u,ctx:f}),uF.$set(_0);const TEe={};u&2&&(TEe.$$scope={dirty:u,ctx:f}),vF.$set(TEe);const MEe={};u&2&&(MEe.$$scope={dirty:u,ctx:f}),AF.$set(MEe);const u0={};u&2&&(u0.$$scope={dirty:u,ctx:f}),LF.$set(u0);const EEe={};u&2&&(EEe.$$scope={dirty:u,ctx:f}),RF.$set(EEe);const CEe={};u&2&&(CEe.$$scope={dirty:u,ctx:f}),BF.$set(CEe);const b0={};u&2&&(b0.$$scope={dirty:u,ctx:f}),jF.$set(b0);const wEe={};u&2&&(wEe.$$scope={dirty:u,ctx:f}),GF.$set(wEe);const AEe={};u&2&&(AEe.$$scope={dirty:u,ctx:f}),XF.$set(AEe);const v0={};u&2&&(v0.$$scope={dirty:u,ctx:f}),WF.$set(v0);const yEe={};u&2&&(yEe.$$scope={dirty:u,ctx:f}),KF.$set(yEe);const LEe={};u&2&&(LEe.$$scope={dirty:u,ctx:f}),eT.$set(LEe);const F0={};u&2&&(F0.$$scope={dirty:u,ctx:f}),tT.$set(F0);const xEe={};u&2&&(xEe.$$scope={dirty:u,ctx:f}),nT.$set(xEe);const $Ee={};u&2&&($Ee.$$scope={dirty:u,ctx:f}),KT.$set($Ee);const T0={};u&2&&(T0.$$scope={dirty:u,ctx:f}),e7.$set(T0);const kEe={};u&2&&(kEe.$$scope={dirty:u,ctx:f}),C7.$set(kEe);const SEe={};u&2&&(SEe.$$scope={dirty:u,ctx:f}),A7.$set(SEe);const M0={};u&2&&(M0.$$scope={dirty:u,ctx:f}),D7.$set(M0);const REe={};u&2&&(REe.$$scope={dirty:u,ctx:f}),O7.$set(REe);const PEe={};u&2&&(PEe.$$scope={dirty:u,ctx:f}),Q7.$set(PEe);const E0={};u&2&&(E0.$$scope={dirty:u,ctx:f}),U7.$set(E0);const BEe={};u&2&&(BEe.$$scope={dirty:u,ctx:f}),_9.$set(BEe);const IEe={};u&2&&(IEe.$$scope={dirty:u,ctx:f}),b9.$set(IEe);const C0={};u&2&&(C0.$$scope={dirty:u,ctx:f}),x9.$set(C0);const NEe={};u&2&&(NEe.$$scope={dirty:u,ctx:f}),k9.$set(NEe);const qEe={};u&2&&(qEe.$$scope={dirty:u,ctx:f}),aM.$set(qEe);const w0={};u&2&&(w0.$$scope={dirty:u,ctx:f}),sM.$set(w0);const jEe={};u&2&&(jEe.$$scope={dirty:u,ctx:f}),CM.$set(jEe);const DEe={};u&2&&(DEe.$$scope={dirty:u,ctx:f}),AM.$set(DEe);const A0={};u&2&&(A0.$$scope={dirty:u,ctx:f}),xM.$set(A0);const GEe={};u&2&&(GEe.$$scope={dirty:u,ctx:f}),kM.$set(GEe);const OEe={};u&2&&(OEe.$$scope={dirty:u,ctx:f}),RM.$set(OEe);const y0={};u&2&&(y0.$$scope={dirty:u,ctx:f}),BM.$set(y0);const VEe={};u&2&&(VEe.$$scope={dirty:u,ctx:f}),r4.$set(VEe);const XEe={};u&2&&(XEe.$$scope={dirty:u,ctx:f}),a4.$set(XEe);const L0={};u&2&&(L0.$$scope={dirty:u,ctx:f}),w4.$set(L0);const zEe={};u&2&&(zEe.$$scope={dirty:u,ctx:f}),y4.$set(zEe);const WEe={};u&2&&(WEe.$$scope={dirty:u,ctx:f}),x4.$set(WEe);const x0={};u&2&&(x0.$$scope={dirty:u,ctx:f}),k4.$set(x0);const QEe={};u&2&&(QEe.$$scope={dirty:u,ctx:f}),R4.$set(QEe);const HEe={};u&2&&(HEe.$$scope={dirty:u,ctx:f}),B4.$set(HEe);const $0={};u&2&&($0.$$scope={dirty:u,ctx:f}),iE.$set($0);const UEe={};u&2&&(UEe.$$scope={dirty:u,ctx:f}),cE.$set(UEe);const JEe={};u&2&&(JEe.$$scope={dirty:u,ctx:f}),TE.$set(JEe);const k0={};u&2&&(k0.$$scope={dirty:u,ctx:f}),EE.$set(k0);const YEe={};u&2&&(YEe.$$scope={dirty:u,ctx:f}),IE.$set(YEe);const KEe={};u&2&&(KEe.$$scope={dirty:u,ctx:f}),qE.$set(KEe);const S0={};u&2&&(S0.$$scope={dirty:u,ctx:f}),UE.$set(S0);const ZEe={};u&2&&(ZEe.$$scope={dirty:u,ctx:f}),YE.$set(ZEe);const eCe={};u&2&&(eCe.$$scope={dirty:u,ctx:f}),lC.$set(eCe);const R0={};u&2&&(R0.$$scope={dirty:u,ctx:f}),dC.$set(R0);const oCe={};u&2&&(oCe.$$scope={dirty:u,ctx:f}),FC.$set(oCe);const rCe={};u&2&&(rCe.$$scope={dirty:u,ctx:f}),MC.$set(rCe);const P0={};u&2&&(P0.$$scope={dirty:u,ctx:f}),RC.$set(P0);const tCe={};u&2&&(tCe.$$scope={dirty:u,ctx:f}),BC.$set(tCe);const aCe={};u&2&&(aCe.$$scope={dirty:u,ctx:f}),XC.$set(aCe);const B0={};u&2&&(B0.$$scope={dirty:u,ctx:f}),WC.$set(B0);const nCe={};u&2&&(nCe.$$scope={dirty:u,ctx:f}),o0.$set(nCe);const sCe={};u&2&&(sCe.$$scope={dirty:u,ctx:f}),t0.$set(sCe);const I0={};u&2&&(I0.$$scope={dirty:u,ctx:f}),n0.$set(I0);const lCe={};u&2&&(lCe.$$scope={dirty:u,ctx:f}),l0.$set(lCe);const iCe={};u&2&&(iCe.$$scope={dirty:u,ctx:f}),c0.$set(iCe);const N0={};u&2&&(N0.$$scope={dirty:u,ctx:f}),m0.$set(N0);const dCe={};u&2&&(dCe.$$scope={dirty:u,ctx:f}),h0.$set(dCe)},i(f){qDe||(E(d.$$.fragment,f),E(Ca.$$.fragment,f),E(IA.$$.fragment,f),E(NA.$$.fragment,f),E(Tf.$$.fragment,f),E(qA.$$.fragment,f),E(jA.$$.fragment,f),E(OA.$$.fragment,f),E(wg.$$.fragment,f),E(VA.$$.fragment,f),E(XA.$$.fragment,f),E(zA.$$.fragment,f),E(HA.$$.fragment,f),E(sh.$$.fragment,f),E(UA.$$.fragment,f),E(JA.$$.fragment,f),E(YA.$$.fragment,f),E(e6.$$.fragment,f),E(jh.$$.fragment,f),E(Dh.$$.fragment,f),E(o6.$$.fragment,f),E(r6.$$.fragment,f),E(t6.$$.fragment,f),E(s6.$$.fragment,f),E(sp.$$.fragment,f),E(lp.$$.fragment,f),E(l6.$$.fragment,f),E(i6.$$.fragment,f),E(d6.$$.fragment,f),E(f6.$$.fragment,f),E(cp.$$.fragment,f),E(m6.$$.fragment,f),E(su.$$.fragment,f),E(g6.$$.fragment,f),E(h6.$$.fragment,f),E(_6.$$.fragment,f),E(iu.$$.fragment,f),E(u6.$$.fragment,f),E(Ku.$$.fragment,f),E(b6.$$.fragment,f),E(v6.$$.fragment,f),E(T6.$$.fragment,f),E(e1.$$.fragment,f),E(M6.$$.fragment,f),E(j1.$$.fragment,f),E(E6.$$.fragment,f),E(C6.$$.fragment,f),E(A6.$$.fragment,f),E(G1.$$.fragment,f),E(y6.$$.fragment,f),E(wb.$$.fragment,f),E(L6.$$.fragment,f),E(x6.$$.fragment,f),E(k6.$$.fragment,f),E(yb.$$.fragment,f),E(S6.$$.fragment,f),E(zb.$$.fragment,f),E(R6.$$.fragment,f),E(P6.$$.fragment,f),E(I6.$$.fragment,f),E(Qb.$$.fragment,f),E(N6.$$.fragment,f),E(O2.$$.fragment,f),E(q6.$$.fragment,f),E(j6.$$.fragment,f),E(G6.$$.fragment,f),E(X2.$$.fragment,f),E(O6.$$.fragment,f),E(Tv.$$.fragment,f),E(V6.$$.fragment,f),E(X6.$$.fragment,f),E(W6.$$.fragment,f),E(Ev.$$.fragment,f),E(Q6.$$.fragment,f),E($v.$$.fragment,f),E(H6.$$.fragment,f),E(U6.$$.fragment,f),E(Y6.$$.fragment,f),E(Sv.$$.fragment,f),E(K6.$$.fragment,f),E(h5.$$.fragment,f),E(Z6.$$.fragment,f),E(ey.$$.fragment,f),E(ry.$$.fragment,f),E(_5.$$.fragment,f),E(ty.$$.fragment,f),E(a3.$$.fragment,f),E(ay.$$.fragment,f),E(ny.$$.fragment,f),E(ly.$$.fragment,f),E(s3.$$.fragment,f),E(iy.$$.fragment,f),E(d3.$$.fragment,f),E(dy.$$.fragment,f),E(cy.$$.fragment,f),E(my.$$.fragment,f),E(f3.$$.fragment,f),E(gy.$$.fragment,f),E(w3.$$.fragment,f),E(hy.$$.fragment,f),E(py.$$.fragment,f),E(uy.$$.fragment,f),E(y3.$$.fragment,f),E(by.$$.fragment,f),E($3.$$.fragment,f),E(vy.$$.fragment,f),E(Fy.$$.fragment,f),E(My.$$.fragment,f),E(S3.$$.fragment,f),E(Ey.$$.fragment,f),E(V3.$$.fragment,f),E(Cy.$$.fragment,f),E(wy.$$.fragment,f),E(yy.$$.fragment,f),E(z3.$$.fragment,f),E(Ly.$$.fragment,f),E(K3.$$.fragment,f),E(xy.$$.fragment,f),E($y.$$.fragment,f),E(Sy.$$.fragment,f),E(eF.$$.fragment,f),E(Ry.$$.fragment,f),E(fF.$$.fragment,f),E(Py.$$.fragment,f),E(By.$$.fragment,f),E(Ny.$$.fragment,f),E(gF.$$.fragment,f),E(qy.$$.fragment,f),E(uF.$$.fragment,f),E(Dy.$$.fragment,f),E(Gy.$$.fragment,f),E(Vy.$$.fragment,f),E(vF.$$.fragment,f),E(Xy.$$.fragment,f),E(AF.$$.fragment,f),E(zy.$$.fragment,f),E(Wy.$$.fragment,f),E(Hy.$$.fragment,f),E(LF.$$.fragment,f),E(Uy.$$.fragment,f),E(RF.$$.fragment,f),E(Jy.$$.fragment,f),E(Yy.$$.fragment,f),E(Zy.$$.fragment,f),E(BF.$$.fragment,f),E(eL.$$.fragment,f),E(jF.$$.fragment,f),E(rL.$$.fragment,f),E(tL.$$.fragment,f),E(nL.$$.fragment,f),E(GF.$$.fragment,f),E(sL.$$.fragment,f),E(XF.$$.fragment,f),E(lL.$$.fragment,f),E(iL.$$.fragment,f),E(cL.$$.fragment,f),E(WF.$$.fragment,f),E(fL.$$.fragment,f),E(KF.$$.fragment,f),E(mL.$$.fragment,f),E(gL.$$.fragment,f),E(pL.$$.fragment,f),E(eT.$$.fragment,f),E(_L.$$.fragment,f),E(tT.$$.fragment,f),E(uL.$$.fragment,f),E(bL.$$.fragment,f),E(FL.$$.fragment,f),E(nT.$$.fragment,f),E(TL.$$.fragment,f),E(KT.$$.fragment,f),E(ML.$$.fragment,f),E(EL.$$.fragment,f),E(wL.$$.fragment,f),E(e7.$$.fragment,f),E(AL.$$.fragment,f),E(C7.$$.fragment,f),E(yL.$$.fragment,f),E(LL.$$.fragment,f),E($L.$$.fragment,f),E(A7.$$.fragment,f),E(kL.$$.fragment,f),E(D7.$$.fragment,f),E(SL.$$.fragment,f),E(RL.$$.fragment,f),E(BL.$$.fragment,f),E(O7.$$.fragment,f),E(IL.$$.fragment,f),E(Q7.$$.fragment,f),E(NL.$$.fragment,f),E(qL.$$.fragment,f),E(DL.$$.fragment,f),E(U7.$$.fragment,f),E(GL.$$.fragment,f),E(_9.$$.fragment,f),E(OL.$$.fragment,f),E(VL.$$.fragment,f),E(zL.$$.fragment,f),E(b9.$$.fragment,f),E(WL.$$.fragment,f),E(x9.$$.fragment,f),E(QL.$$.fragment,f),E(HL.$$.fragment,f),E(JL.$$.fragment,f),E(k9.$$.fragment,f),E(YL.$$.fragment,f),E(aM.$$.fragment,f),E(KL.$$.fragment,f),E(ZL.$$.fragment,f),E(o8.$$.fragment,f),E(sM.$$.fragment,f),E(r8.$$.fragment,f),E(CM.$$.fragment,f),E(t8.$$.fragment,f),E(a8.$$.fragment,f),E(s8.$$.fragment,f),E(AM.$$.fragment,f),E(l8.$$.fragment,f),E(xM.$$.fragment,f),E(d8.$$.fragment,f),E(c8.$$.fragment,f),E(m8.$$.fragment,f),E(kM.$$.fragment,f),E(g8.$$.fragment,f),E(RM.$$.fragment,f),E(h8.$$.fragment,f),E(p8.$$.fragment,f),E(u8.$$.fragment,f),E(BM.$$.fragment,f),E(b8.$$.fragment,f),E(r4.$$.fragment,f),E(v8.$$.fragment,f),E(F8.$$.fragment,f),E(M8.$$.fragment,f),E(a4.$$.fragment,f),E(E8.$$.fragment,f),E(w4.$$.fragment,f),E(C8.$$.fragment,f),E(w8.$$.fragment,f),E(y8.$$.fragment,f),E(y4.$$.fragment,f),E(L8.$$.fragment,f),E(x4.$$.fragment,f),E(x8.$$.fragment,f),E($8.$$.fragment,f),E(S8.$$.fragment,f),E(k4.$$.fragment,f),E(R8.$$.fragment,f),E(R4.$$.fragment,f),E(P8.$$.fragment,f),E(B8.$$.fragment,f),E(N8.$$.fragment,f),E(B4.$$.fragment,f),E(q8.$$.fragment,f),E(iE.$$.fragment,f),E(j8.$$.fragment,f),E(D8.$$.fragment,f),E(O8.$$.fragment,f),E(cE.$$.fragment,f),E(V8.$$.fragment,f),E(TE.$$.fragment,f),E(X8.$$.fragment,f),E(z8.$$.fragment,f),E(Q8.$$.fragment,f),E(EE.$$.fragment,f),E(H8.$$.fragment,f),E(IE.$$.fragment,f),E(U8.$$.fragment,f),E(J8.$$.fragment,f),E(K8.$$.fragment,f),E(qE.$$.fragment,f),E(Z8.$$.fragment,f),E(UE.$$.fragment,f),E(ex.$$.fragment,f),E(ox.$$.fragment,f),E(tx.$$.fragment,f),E(YE.$$.fragment,f),E(ax.$$.fragment,f),E(lC.$$.fragment,f),E(nx.$$.fragment,f),E(sx.$$.fragment,f),E(ix.$$.fragment,f),E(dC.$$.fragment,f),E(dx.$$.fragment,f),E(FC.$$.fragment,f),E(cx.$$.fragment,f),E(fx.$$.fragment,f),E(gx.$$.fragment,f),E(MC.$$.fragment,f),E(hx.$$.fragment,f),E(RC.$$.fragment,f),E(px.$$.fragment,f),E(_x.$$.fragment,f),E(bx.$$.fragment,f),E(BC.$$.fragment,f),E(vx.$$.fragment,f),E(XC.$$.fragment,f),E(Fx.$$.fragment,f),E(Tx.$$.fragment,f),E(Ex.$$.fragment,f),E(WC.$$.fragment,f),E(Cx.$$.fragment,f),E(o0.$$.fragment,f),E(wx.$$.fragment,f),E(Ax.$$.fragment,f),E(Lx.$$.fragment,f),E(t0.$$.fragment,f),E(xx.$$.fragment,f),E(n0.$$.fragment,f),E($x.$$.fragment,f),E(kx.$$.fragment,f),E(Rx.$$.fragment,f),E(l0.$$.fragment,f),E(Px.$$.fragment,f),E(c0.$$.fragment,f),E(Ix.$$.fragment,f),E(Nx.$$.fragment,f),E(jx.$$.fragment,f),E(m0.$$.fragment,f),E(Dx.$$.fragment,f),E(h0.$$.fragment,f),qDe=!0)},o(f){C(d.$$.fragment,f),C(Ca.$$.fragment,f),C(IA.$$.fragment,f),C(NA.$$.fragment,f),C(Tf.$$.fragment,f),C(qA.$$.fragment,f),C(jA.$$.fragment,f),C(OA.$$.fragment,f),C(wg.$$.fragment,f),C(VA.$$.fragment,f),C(XA.$$.fragment,f),C(zA.$$.fragment,f),C(HA.$$.fragment,f),C(sh.$$.fragment,f),C(UA.$$.fragment,f),C(JA.$$.fragment,f),C(YA.$$.fragment,f),C(e6.$$.fragment,f),C(jh.$$.fragment,f),C(Dh.$$.fragment,f),C(o6.$$.fragment,f),C(r6.$$.fragment,f),C(t6.$$.fragment,f),C(s6.$$.fragment,f),C(sp.$$.fragment,f),C(lp.$$.fragment,f),C(l6.$$.fragment,f),C(i6.$$.fragment,f),C(d6.$$.fragment,f),C(f6.$$.fragment,f),C(cp.$$.fragment,f),C(m6.$$.fragment,f),C(su.$$.fragment,f),C(g6.$$.fragment,f),C(h6.$$.fragment,f),C(_6.$$.fragment,f),C(iu.$$.fragment,f),C(u6.$$.fragment,f),C(Ku.$$.fragment,f),C(b6.$$.fragment,f),C(v6.$$.fragment,f),C(T6.$$.fragment,f),C(e1.$$.fragment,f),C(M6.$$.fragment,f),C(j1.$$.fragment,f),C(E6.$$.fragment,f),C(C6.$$.fragment,f),C(A6.$$.fragment,f),C(G1.$$.fragment,f),C(y6.$$.fragment,f),C(wb.$$.fragment,f),C(L6.$$.fragment,f),C(x6.$$.fragment,f),C(k6.$$.fragment,f),C(yb.$$.fragment,f),C(S6.$$.fragment,f),C(zb.$$.fragment,f),C(R6.$$.fragment,f),C(P6.$$.fragment,f),C(I6.$$.fragment,f),C(Qb.$$.fragment,f),C(N6.$$.fragment,f),C(O2.$$.fragment,f),C(q6.$$.fragment,f),C(j6.$$.fragment,f),C(G6.$$.fragment,f),C(X2.$$.fragment,f),C(O6.$$.fragment,f),C(Tv.$$.fragment,f),C(V6.$$.fragment,f),C(X6.$$.fragment,f),C(W6.$$.fragment,f),C(Ev.$$.fragment,f),C(Q6.$$.fragment,f),C($v.$$.fragment,f),C(H6.$$.fragment,f),C(U6.$$.fragment,f),C(Y6.$$.fragment,f),C(Sv.$$.fragment,f),C(K6.$$.fragment,f),C(h5.$$.fragment,f),C(Z6.$$.fragment,f),C(ey.$$.fragment,f),C(ry.$$.fragment,f),C(_5.$$.fragment,f),C(ty.$$.fragment,f),C(a3.$$.fragment,f),C(ay.$$.fragment,f),C(ny.$$.fragment,f),C(ly.$$.fragment,f),C(s3.$$.fragment,f),C(iy.$$.fragment,f),C(d3.$$.fragment,f),C(dy.$$.fragment,f),C(cy.$$.fragment,f),C(my.$$.fragment,f),C(f3.$$.fragment,f),C(gy.$$.fragment,f),C(w3.$$.fragment,f),C(hy.$$.fragment,f),C(py.$$.fragment,f),C(uy.$$.fragment,f),C(y3.$$.fragment,f),C(by.$$.fragment,f),C($3.$$.fragment,f),C(vy.$$.fragment,f),C(Fy.$$.fragment,f),C(My.$$.fragment,f),C(S3.$$.fragment,f),C(Ey.$$.fragment,f),C(V3.$$.fragment,f),C(Cy.$$.fragment,f),C(wy.$$.fragment,f),C(yy.$$.fragment,f),C(z3.$$.fragment,f),C(Ly.$$.fragment,f),C(K3.$$.fragment,f),C(xy.$$.fragment,f),C($y.$$.fragment,f),C(Sy.$$.fragment,f),C(eF.$$.fragment,f),C(Ry.$$.fragment,f),C(fF.$$.fragment,f),C(Py.$$.fragment,f),C(By.$$.fragment,f),C(Ny.$$.fragment,f),C(gF.$$.fragment,f),C(qy.$$.fragment,f),C(uF.$$.fragment,f),C(Dy.$$.fragment,f),C(Gy.$$.fragment,f),C(Vy.$$.fragment,f),C(vF.$$.fragment,f),C(Xy.$$.fragment,f),C(AF.$$.fragment,f),C(zy.$$.fragment,f),C(Wy.$$.fragment,f),C(Hy.$$.fragment,f),C(LF.$$.fragment,f),C(Uy.$$.fragment,f),C(RF.$$.fragment,f),C(Jy.$$.fragment,f),C(Yy.$$.fragment,f),C(Zy.$$.fragment,f),C(BF.$$.fragment,f),C(eL.$$.fragment,f),C(jF.$$.fragment,f),C(rL.$$.fragment,f),C(tL.$$.fragment,f),C(nL.$$.fragment,f),C(GF.$$.fragment,f),C(sL.$$.fragment,f),C(XF.$$.fragment,f),C(lL.$$.fragment,f),C(iL.$$.fragment,f),C(cL.$$.fragment,f),C(WF.$$.fragment,f),C(fL.$$.fragment,f),C(KF.$$.fragment,f),C(mL.$$.fragment,f),C(gL.$$.fragment,f),C(pL.$$.fragment,f),C(eT.$$.fragment,f),C(_L.$$.fragment,f),C(tT.$$.fragment,f),C(uL.$$.fragment,f),C(bL.$$.fragment,f),C(FL.$$.fragment,f),C(nT.$$.fragment,f),C(TL.$$.fragment,f),C(KT.$$.fragment,f),C(ML.$$.fragment,f),C(EL.$$.fragment,f),C(wL.$$.fragment,f),C(e7.$$.fragment,f),C(AL.$$.fragment,f),C(C7.$$.fragment,f),C(yL.$$.fragment,f),C(LL.$$.fragment,f),C($L.$$.fragment,f),C(A7.$$.fragment,f),C(kL.$$.fragment,f),C(D7.$$.fragment,f),C(SL.$$.fragment,f),C(RL.$$.fragment,f),C(BL.$$.fragment,f),C(O7.$$.fragment,f),C(IL.$$.fragment,f),C(Q7.$$.fragment,f),C(NL.$$.fragment,f),C(qL.$$.fragment,f),C(DL.$$.fragment,f),C(U7.$$.fragment,f),C(GL.$$.fragment,f),C(_9.$$.fragment,f),C(OL.$$.fragment,f),C(VL.$$.fragment,f),C(zL.$$.fragment,f),C(b9.$$.fragment,f),C(WL.$$.fragment,f),C(x9.$$.fragment,f),C(QL.$$.fragment,f),C(HL.$$.fragment,f),C(JL.$$.fragment,f),C(k9.$$.fragment,f),C(YL.$$.fragment,f),C(aM.$$.fragment,f),C(KL.$$.fragment,f),C(ZL.$$.fragment,f),C(o8.$$.fragment,f),C(sM.$$.fragment,f),C(r8.$$.fragment,f),C(CM.$$.fragment,f),C(t8.$$.fragment,f),C(a8.$$.fragment,f),C(s8.$$.fragment,f),C(AM.$$.fragment,f),C(l8.$$.fragment,f),C(xM.$$.fragment,f),C(d8.$$.fragment,f),C(c8.$$.fragment,f),C(m8.$$.fragment,f),C(kM.$$.fragment,f),C(g8.$$.fragment,f),C(RM.$$.fragment,f),C(h8.$$.fragment,f),C(p8.$$.fragment,f),C(u8.$$.fragment,f),C(BM.$$.fragment,f),C(b8.$$.fragment,f),C(r4.$$.fragment,f),C(v8.$$.fragment,f),C(F8.$$.fragment,f),C(M8.$$.fragment,f),C(a4.$$.fragment,f),C(E8.$$.fragment,f),C(w4.$$.fragment,f),C(C8.$$.fragment,f),C(w8.$$.fragment,f),C(y8.$$.fragment,f),C(y4.$$.fragment,f),C(L8.$$.fragment,f),C(x4.$$.fragment,f),C(x8.$$.fragment,f),C($8.$$.fragment,f),C(S8.$$.fragment,f),C(k4.$$.fragment,f),C(R8.$$.fragment,f),C(R4.$$.fragment,f),C(P8.$$.fragment,f),C(B8.$$.fragment,f),C(N8.$$.fragment,f),C(B4.$$.fragment,f),C(q8.$$.fragment,f),C(iE.$$.fragment,f),C(j8.$$.fragment,f),C(D8.$$.fragment,f),C(O8.$$.fragment,f),C(cE.$$.fragment,f),C(V8.$$.fragment,f),C(TE.$$.fragment,f),C(X8.$$.fragment,f),C(z8.$$.fragment,f),C(Q8.$$.fragment,f),C(EE.$$.fragment,f),C(H8.$$.fragment,f),C(IE.$$.fragment,f),C(U8.$$.fragment,f),C(J8.$$.fragment,f),C(K8.$$.fragment,f),C(qE.$$.fragment,f),C(Z8.$$.fragment,f),C(UE.$$.fragment,f),C(ex.$$.fragment,f),C(ox.$$.fragment,f),C(tx.$$.fragment,f),C(YE.$$.fragment,f),C(ax.$$.fragment,f),C(lC.$$.fragment,f),C(nx.$$.fragment,f),C(sx.$$.fragment,f),C(ix.$$.fragment,f),C(dC.$$.fragment,f),C(dx.$$.fragment,f),C(FC.$$.fragment,f),C(cx.$$.fragment,f),C(fx.$$.fragment,f),C(gx.$$.fragment,f),C(MC.$$.fragment,f),C(hx.$$.fragment,f),C(RC.$$.fragment,f),C(px.$$.fragment,f),C(_x.$$.fragment,f),C(bx.$$.fragment,f),C(BC.$$.fragment,f),C(vx.$$.fragment,f),C(XC.$$.fragment,f),C(Fx.$$.fragment,f),C(Tx.$$.fragment,f),C(Ex.$$.fragment,f),C(WC.$$.fragment,f),C(Cx.$$.fragment,f),C(o0.$$.fragment,f),C(wx.$$.fragment,f),C(Ax.$$.fragment,f),C(Lx.$$.fragment,f),C(t0.$$.fragment,f),C(xx.$$.fragment,f),C(n0.$$.fragment,f),C($x.$$.fragment,f),C(kx.$$.fragment,f),C(Rx.$$.fragment,f),C(l0.$$.fragment,f),C(Px.$$.fragment,f),C(c0.$$.fragment,f),C(Ix.$$.fragment,f),C(Nx.$$.fragment,f),C(jx.$$.fragment,f),C(m0.$$.fragment,f),C(Dx.$$.fragment,f),C(h0.$$.fragment,f),qDe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(_f),f&&t(rt),f&&t(De),f&&t(We),f&&t(bf),w(Ca,f),f&&t(Qe),f&&t(Ae),f&&t(Eo),f&&t(wa),f&&t(Bqe),f&&t(vi),w(IA),f&&t(Iqe),f&&t(kn),f&&t(Nqe),w(NA,f),f&&t(qqe),f&&t(sk),f&&t(jqe),w(Tf,f),f&&t(Dqe),f&&t(Fi),w(qA),f&&t(Gqe),f&&t(Co),w(jA),w(OA),w(wg),w(VA),f&&t(Oqe),f&&t(Mi),w(XA),f&&t(Vqe),f&&t(wo),w(zA),w(HA),w(sh),w(UA),f&&t(Xqe),f&&t(Ei),w(JA),f&&t(zqe),f&&t(Ao),w(YA),w(e6),w(jh),w(Dh),w(o6),f&&t(Wqe),f&&t(Ci),w(r6),f&&t(Qqe),f&&t(yo),w(t6),w(s6),w(sp),w(lp),w(l6),f&&t(Hqe),f&&t(Ai),w(i6),f&&t(Uqe),f&&t(Lo),w(d6),w(f6),w(cp),w(m6),w(su),f&&t(Jqe),f&&t(xi),w(g6),f&&t(Yqe),f&&t(xo),w(h6),w(_6),w(iu),w(u6),w(Ku),f&&t(Kqe),f&&t(Si),w(b6),f&&t(Zqe),f&&t($o),w(v6),w(T6),w(e1),w(M6),w(j1),f&&t(eje),f&&t(Bi),w(E6),f&&t(oje),f&&t(ko),w(C6),w(A6),w(G1),w(y6),w(wb),f&&t(rje),f&&t(qi),w(L6),f&&t(tje),f&&t(So),w(x6),w(k6),w(yb),w(S6),w(zb),f&&t(aje),f&&t(Gi),w(R6),f&&t(nje),f&&t(Ro),w(P6),w(I6),w(Qb),w(N6),w(O2),f&&t(sje),f&&t(Xi),w(q6),f&&t(lje),f&&t(Po),w(j6),w(G6),w(X2),w(O6),w(Tv),f&&t(ije),f&&t(Qi),w(V6),f&&t(dje),f&&t(Bo),w(X6),w(W6),w(Ev),w(Q6),w($v),f&&t(cje),f&&t(Ji),w(H6),f&&t(fje),f&&t(Io),w(U6),w(Y6),w(Sv),w(K6),w(h5),f&&t(mje),f&&t(Zi),w(Z6),f&&t(gje),f&&t(No),w(ey),w(ry),w(_5),w(ty),w(a3),f&&t(hje),f&&t(rd),w(ay),f&&t(pje),f&&t(qo),w(ny),w(ly),w(s3),w(iy),w(d3),f&&t(_je),f&&t(nd),w(dy),f&&t(uje),f&&t(jo),w(cy),w(my),w(f3),w(gy),w(w3),f&&t(bje),f&&t(id),w(hy),f&&t(vje),f&&t(Do),w(py),w(uy),w(y3),w(by),w($3),f&&t(Fje),f&&t(fd),w(vy),f&&t(Tje),f&&t(Go),w(Fy),w(My),w(S3),w(Ey),w(V3),f&&t(Mje),f&&t(hd),w(Cy),f&&t(Eje),f&&t(Oo),w(wy),w(yy),w(z3),w(Ly),w(K3),f&&t(Cje),f&&t(ud),w(xy),f&&t(wje),f&&t(Vo),w($y),w(Sy),w(eF),w(Ry),w(fF),f&&t(Aje),f&&t(Fd),w(Py),f&&t(yje),f&&t(Xo),w(By),w(Ny),w(gF),w(qy),w(uF),f&&t(Lje),f&&t(Ed),w(Dy),f&&t(xje),f&&t(zo),w(Gy),w(Vy),w(vF),w(Xy),w(AF),f&&t($je),f&&t(Ad),w(zy),f&&t(kje),f&&t(Wo),w(Wy),w(Hy),w(LF),w(Uy),w(RF),f&&t(Sje),f&&t($d),w(Jy),f&&t(Rje),f&&t(Qo),w(Yy),w(Zy),w(BF),w(eL),w(jF),f&&t(Pje),f&&t(Rd),w(rL),f&&t(Bje),f&&t(Ho),w(tL),w(nL),w(GF),w(sL),w(XF),f&&t(Ije),f&&t(Id),w(lL),f&&t(Nje),f&&t(Uo),w(iL),w(cL),w(WF),w(fL),w(KF),f&&t(qje),f&&t(jd),w(mL),f&&t(jje),f&&t(Jo),w(gL),w(pL),w(eT),w(_L),w(tT),f&&t(Dje),f&&t(Od),w(uL),f&&t(Gje),f&&t(Yo),w(bL),w(FL),w(nT),w(TL),w(KT),f&&t(Oje),f&&t(zd),w(ML),f&&t(Vje),f&&t(Ko),w(EL),w(wL),w(e7),w(AL),w(C7),f&&t(Xje),f&&t(Hd),w(yL),f&&t(zje),f&&t(Zo),w(LL),w($L),w(A7),w(kL),w(D7),f&&t(Wje),f&&t(Yd),w(SL),f&&t(Qje),f&&t(er),w(RL),w(BL),w(O7),w(IL),w(Q7),f&&t(Hje),f&&t(ec),w(NL),f&&t(Uje),f&&t(or),w(qL),w(DL),w(U7),w(GL),w(_9),f&&t(Jje),f&&t(tc),w(OL),f&&t(Yje),f&&t(rr),w(VL),w(zL),w(b9),w(WL),w(x9),f&&t(Kje),f&&t(sc),w(QL),f&&t(Zje),f&&t(tr),w(HL),w(JL),w(k9),w(YL),w(aM),f&&t(eDe),f&&t(dc),w(KL),f&&t(oDe),f&&t(ar),w(ZL),w(o8),w(sM),w(r8),w(CM),f&&t(rDe),f&&t(mc),w(t8),f&&t(tDe),f&&t(nr),w(a8),w(s8),w(AM),w(l8),w(xM),f&&t(aDe),f&&t(pc),w(d8),f&&t(nDe),f&&t(sr),w(c8),w(m8),w(kM),w(g8),w(RM),f&&t(sDe),f&&t(bc),w(h8),f&&t(lDe),f&&t(lr),w(p8),w(u8),w(BM),w(b8),w(r4),f&&t(iDe),f&&t(Tc),w(v8),f&&t(dDe),f&&t(ir),w(F8),w(M8),w(a4),w(E8),w(w4),f&&t(cDe),f&&t(Cc),w(C8),f&&t(fDe),f&&t(dr),w(w8),w(y8),w(y4),w(L8),w(x4),f&&t(mDe),f&&t(yc),w(x8),f&&t(gDe),f&&t(cr),w($8),w(S8),w(k4),w(R8),w(R4),f&&t(hDe),f&&t($c),w(P8),f&&t(pDe),f&&t(fr),w(B8),w(N8),w(B4),w(q8),w(iE),f&&t(_De),f&&t(Rc),w(j8),f&&t(uDe),f&&t(mr),w(D8),w(O8),w(cE),w(V8),w(TE),f&&t(bDe),f&&t(Ic),w(X8),f&&t(vDe),f&&t(gr),w(z8),w(Q8),w(EE),w(H8),w(IE),f&&t(FDe),f&&t(jc),w(U8),f&&t(TDe),f&&t(hr),w(J8),w(K8),w(qE),w(Z8),w(UE),f&&t(MDe),f&&t(Oc),w(ex),f&&t(EDe),f&&t(pr),w(ox),w(tx),w(YE),w(ax),w(lC),f&&t(CDe),f&&t(zc),w(nx),f&&t(wDe),f&&t(_r),w(sx),w(ix),w(dC),w(dx),w(FC),f&&t(ADe),f&&t(Hc),w(cx),f&&t(yDe),f&&t(ur),w(fx),w(gx),w(MC),w(hx),w(RC),f&&t(LDe),f&&t(Yc),w(px),f&&t(xDe),f&&t(br),w(_x),w(bx),w(BC),w(vx),w(XC),f&&t($De),f&&t(ef),w(Fx),f&&t(kDe),f&&t(vr),w(Tx),w(Ex),w(WC),w(Cx),w(o0),f&&t(SDe),f&&t(tf),w(wx),f&&t(RDe),f&&t(Fr),w(Ax),w(Lx),w(t0),w(xx),w(n0),f&&t(PDe),f&&t(sf),w($x),f&&t(BDe),f&&t(Tr),w(kx),w(Rx),w(l0),w(Px),w(c0),f&&t(IDe),f&&t(cf),w(Ix),f&&t(NDe),f&&t(Mr),w(Nx),w(jx),w(m0),w(Dx),w(h0)}}}const aPt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function nPt(L){return nSt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class mPt extends oSt{constructor(g){super();rSt(this,g,nPt,tPt,tSt,{})}}export{mPt as default,aPt as metadata};
