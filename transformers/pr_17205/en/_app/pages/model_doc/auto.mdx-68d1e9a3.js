import{S as M9t,i as E9t,s as C9t,e as a,k as l,w as F,t as o,M as w9t,c as n,d as t,m as i,a as s,x as T,h as r,b as c,F as e,g as b,y as M,q as E,o as C,B as w,v as A9t,L as I}from"../../chunks/vendor-6b77c823.js";import{T as dOr}from"../../chunks/Tip-39098574.js";import{D as R}from"../../chunks/Docstring-1088f2fb.js";import{C as P}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as re}from"../../chunks/IconCopyLink-7a11ce68.js";import{E as B}from"../../chunks/ExampleCodeBlock-5212b321.js";function y9t(L){let g,v,p,m,_,d,h,Mo,fi,pf,tt,mi,gi,pA,_f,je,We,hi,yn,_A,Ln,xn,uA,pi,$n,bA,_i,uf,wa;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),_=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Mo=o(`, make sure its
`),fi=a("code"),pf=o("model_type"),tt=o(" attribute is set to the same key you use when registering the config (here "),mi=a("code"),gi=o('"new-model"'),pA=o(")."),_f=l(),je=a("p"),We=o("Likewise, if your "),hi=a("code"),yn=o("NewModel"),_A=o(" is a subclass of "),Ln=a("a"),xn=o("PreTrainedModel"),uA=o(`, make sure its
`),pi=a("code"),$n=o("config_class"),bA=o(` attribute is set to the same class you use when registering the model (here
`),_i=a("code"),uf=o("NewModelConfig"),wa=o(")."),this.h()},l(Qe){g=n(Qe,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var I$=s(p);m=r(I$,"NewModelConfig"),I$.forEach(t),_=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var ui=s(d);h=r(ui,"PretrainedConfig"),ui.forEach(t),Mo=r(Ae,`, make sure its
`),fi=n(Ae,"CODE",{});var q$=s(fi);pf=r(q$,"model_type"),q$.forEach(t),tt=r(Ae," attribute is set to the same key you use when registering the config (here "),mi=n(Ae,"CODE",{});var N$=s(mi);gi=r(N$,'"new-model"'),N$.forEach(t),pA=r(Ae,")."),Ae.forEach(t),_f=i(Qe),je=n(Qe,"P",{});var Eo=s(je);We=r(Eo,"Likewise, if your "),hi=n(Eo,"CODE",{});var Aa=s(hi);yn=r(Aa,"NewModel"),Aa.forEach(t),_A=r(Eo," is a subclass of "),Ln=n(Eo,"A",{href:!0});var j$=s(Ln);xn=r(j$,"PreTrainedModel"),j$.forEach(t),uA=r(Eo,`, make sure its
`),pi=n(Eo,"CODE",{});var bf=s(pi);$n=r(bf,"config_class"),bf.forEach(t),bA=r(Eo,` attribute is set to the same class you use when registering the model (here
`),_i=n(Eo,"CODE",{});var D$=s(_i);uf=r(D$,"NewModelConfig"),D$.forEach(t),wa=r(Eo,")."),Eo.forEach(t),this.h()},h(){c(Ln,"href","/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel")},m(Qe,Ae){b(Qe,g,Ae),e(g,v),e(g,p),e(p,m),e(g,_),e(g,d),e(d,h),e(g,Mo),e(g,fi),e(fi,pf),e(g,tt),e(g,mi),e(mi,gi),e(g,pA),b(Qe,_f,Ae),b(Qe,je,Ae),e(je,We),e(je,hi),e(hi,yn),e(je,_A),e(je,Ln),e(Ln,xn),e(je,uA),e(je,pi),e(pi,$n),e(je,bA),e(je,_i),e(_i,uf),e(je,wa)},d(Qe){Qe&&t(g),Qe&&t(_f),Qe&&t(je)}}}function L9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function x9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $9t(L){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function k9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function S9t(L){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function R9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function P9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function B9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function I9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function q9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function N9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function j9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function D9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function G9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function O9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function V9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function X9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function z9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function W9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Q9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function H9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function U9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function J9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Y9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function K9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Z9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ext(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function txt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function axt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ixt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _xt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Fxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Txt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Mxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ext(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Cxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Axt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Lxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $xt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Sxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Rxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Pxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Bxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ixt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Nxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Dxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Gxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Oxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Vxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Xxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Wxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Qxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Hxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Uxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Jxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Yxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Kxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Zxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function e$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function o$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function r$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function t$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function a$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function n$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function s$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function l$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function i$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function d$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function c$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function f$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function m$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function g$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function h$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function p$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function u$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function b$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function v$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function F$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function T$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function M$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function E$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function C$t(L){let g,v,p,m,_,d,h,Mo,fi,pf,tt,mi,gi,pA,_f,je,We,hi,yn,_A,Ln,xn,uA,pi,$n,bA,_i,uf,wa,Qe,Ae,I$,ui,q$,N$,Eo,Aa,j$,bf,D$,$Ge,vqe,bi,vf,Oee,vA,kGe,Vee,SGe,Fqe,kn,RGe,Xee,PGe,BGe,zee,IGe,qGe,Tqe,FA,Mqe,G$,NGe,Eqe,Ff,Cqe,vi,Tf,Wee,TA,jGe,Qee,DGe,wqe,Co,MA,GGe,EA,OGe,O$,VGe,XGe,zGe,CA,WGe,Hee,QGe,HGe,UGe,Er,wA,JGe,Uee,YGe,KGe,Fi,ZGe,Jee,eOe,oOe,Yee,rOe,tOe,aOe,A,Mf,Kee,nOe,sOe,V$,lOe,iOe,dOe,Ef,Zee,cOe,fOe,X$,mOe,gOe,hOe,Cf,eoe,pOe,_Oe,z$,uOe,bOe,vOe,wf,ooe,FOe,TOe,W$,MOe,EOe,COe,Af,roe,wOe,AOe,Q$,yOe,LOe,xOe,yf,toe,$Oe,kOe,H$,SOe,ROe,POe,Lf,aoe,BOe,IOe,U$,qOe,NOe,jOe,xf,noe,DOe,GOe,J$,OOe,VOe,XOe,$f,soe,zOe,WOe,Y$,QOe,HOe,UOe,kf,loe,JOe,YOe,K$,KOe,ZOe,eVe,Sf,ioe,oVe,rVe,Z$,tVe,aVe,nVe,Rf,doe,sVe,lVe,ek,iVe,dVe,cVe,Pf,coe,fVe,mVe,ok,gVe,hVe,pVe,Bf,foe,_Ve,uVe,rk,bVe,vVe,FVe,If,moe,TVe,MVe,tk,EVe,CVe,wVe,qf,goe,AVe,yVe,ak,LVe,xVe,$Ve,Nf,hoe,kVe,SVe,nk,RVe,PVe,BVe,jf,poe,IVe,qVe,sk,NVe,jVe,DVe,Df,_oe,GVe,OVe,lk,VVe,XVe,zVe,Gf,uoe,WVe,QVe,ik,HVe,UVe,JVe,Of,boe,YVe,KVe,dk,ZVe,eXe,oXe,Vf,voe,rXe,tXe,ck,aXe,nXe,sXe,Xf,Foe,lXe,iXe,fk,dXe,cXe,fXe,zf,Toe,mXe,gXe,mk,hXe,pXe,_Xe,Wf,Moe,uXe,bXe,gk,vXe,FXe,TXe,Qf,Eoe,MXe,EXe,hk,CXe,wXe,AXe,Hf,Coe,yXe,LXe,pk,xXe,$Xe,kXe,Uf,woe,SXe,RXe,_k,PXe,BXe,IXe,Jf,Aoe,qXe,NXe,uk,jXe,DXe,GXe,Yf,yoe,OXe,VXe,bk,XXe,zXe,WXe,Kf,Loe,QXe,HXe,vk,UXe,JXe,YXe,Zf,xoe,KXe,ZXe,Fk,eze,oze,rze,em,$oe,tze,aze,Tk,nze,sze,lze,om,koe,ize,dze,Mk,cze,fze,mze,rm,Soe,gze,hze,Ek,pze,_ze,uze,tm,Roe,bze,vze,Ck,Fze,Tze,Mze,am,Poe,Eze,Cze,wk,wze,Aze,yze,nm,Boe,Lze,xze,Ak,$ze,kze,Sze,sm,Ioe,Rze,Pze,yk,Bze,Ize,qze,lm,qoe,Nze,jze,Lk,Dze,Gze,Oze,im,Noe,Vze,Xze,xk,zze,Wze,Qze,dm,joe,Hze,Uze,$k,Jze,Yze,Kze,cm,Doe,Zze,eWe,kk,oWe,rWe,tWe,fm,Goe,aWe,nWe,Sk,sWe,lWe,iWe,mm,Ooe,dWe,cWe,Rk,fWe,mWe,gWe,gm,Voe,hWe,pWe,Pk,_We,uWe,bWe,hm,Xoe,vWe,FWe,Bk,TWe,MWe,EWe,pm,zoe,CWe,wWe,Ik,AWe,yWe,LWe,_m,Woe,xWe,$We,qk,kWe,SWe,RWe,um,Qoe,PWe,BWe,Nk,IWe,qWe,NWe,bm,Hoe,jWe,DWe,jk,GWe,OWe,VWe,vm,Uoe,XWe,zWe,Dk,WWe,QWe,HWe,Fm,Joe,UWe,JWe,Gk,YWe,KWe,ZWe,Tm,Yoe,eQe,oQe,Ok,rQe,tQe,aQe,Mm,Koe,nQe,sQe,Vk,lQe,iQe,dQe,Em,Zoe,cQe,fQe,Xk,mQe,gQe,hQe,Cm,ere,pQe,_Qe,zk,uQe,bQe,vQe,wm,ore,FQe,TQe,Wk,MQe,EQe,CQe,Am,rre,wQe,AQe,Qk,yQe,LQe,xQe,ym,tre,$Qe,kQe,Hk,SQe,RQe,PQe,Lm,are,BQe,IQe,Uk,qQe,NQe,jQe,xm,nre,DQe,GQe,Jk,OQe,VQe,XQe,$m,sre,zQe,WQe,Yk,QQe,HQe,UQe,km,lre,JQe,YQe,Kk,KQe,ZQe,eHe,Sm,ire,oHe,rHe,Zk,tHe,aHe,nHe,Rm,dre,sHe,lHe,eS,iHe,dHe,cHe,Pm,cre,fHe,mHe,oS,gHe,hHe,pHe,Bm,fre,_He,uHe,rS,bHe,vHe,FHe,Im,mre,THe,MHe,tS,EHe,CHe,wHe,qm,gre,AHe,yHe,aS,LHe,xHe,$He,Nm,hre,kHe,SHe,nS,RHe,PHe,BHe,jm,pre,IHe,qHe,sS,NHe,jHe,DHe,Dm,_re,GHe,OHe,lS,VHe,XHe,zHe,Gm,ure,WHe,QHe,iS,HHe,UHe,JHe,Om,bre,YHe,KHe,dS,ZHe,eUe,oUe,Vm,vre,rUe,tUe,cS,aUe,nUe,sUe,Xm,Fre,lUe,iUe,fS,dUe,cUe,fUe,zm,Tre,mUe,gUe,mS,hUe,pUe,_Ue,Wm,Mre,uUe,bUe,gS,vUe,FUe,TUe,Qm,Ere,MUe,EUe,hS,CUe,wUe,AUe,Hm,Cre,yUe,LUe,pS,xUe,$Ue,kUe,Um,wre,SUe,RUe,_S,PUe,BUe,IUe,Jm,Are,qUe,NUe,uS,jUe,DUe,GUe,Ym,yre,OUe,VUe,bS,XUe,zUe,WUe,Km,Lre,QUe,HUe,vS,UUe,JUe,YUe,Zm,xre,KUe,ZUe,FS,eJe,oJe,rJe,eg,$re,tJe,aJe,TS,nJe,sJe,lJe,og,kre,iJe,dJe,MS,cJe,fJe,mJe,rg,Sre,gJe,hJe,ES,pJe,_Je,uJe,tg,Rre,bJe,vJe,CS,FJe,TJe,MJe,ag,Pre,EJe,CJe,wS,wJe,AJe,yJe,ng,Bre,LJe,xJe,AS,$Je,kJe,SJe,sg,Ire,RJe,PJe,yS,BJe,IJe,qJe,lg,qre,NJe,jJe,LS,DJe,GJe,OJe,ig,Nre,VJe,XJe,xS,zJe,WJe,QJe,dg,jre,HJe,UJe,$S,JJe,YJe,KJe,cg,Dre,ZJe,eYe,kS,oYe,rYe,tYe,fg,Gre,aYe,nYe,SS,sYe,lYe,iYe,mg,Ore,dYe,cYe,RS,fYe,mYe,gYe,gg,Vre,hYe,pYe,PS,_Ye,uYe,bYe,hg,Xre,vYe,FYe,BS,TYe,MYe,EYe,pg,zre,CYe,wYe,IS,AYe,yYe,LYe,_g,Wre,xYe,$Ye,qS,kYe,SYe,RYe,ug,Qre,PYe,BYe,NS,IYe,qYe,NYe,bg,Hre,jYe,DYe,jS,GYe,OYe,VYe,vg,Ure,XYe,zYe,DS,WYe,QYe,HYe,Fg,Jre,UYe,JYe,GS,YYe,KYe,ZYe,Tg,Yre,eKe,oKe,OS,rKe,tKe,aKe,Mg,nKe,Eg,AA,sKe,Kre,lKe,Aqe,Ti,Cg,Zre,yA,iKe,ete,dKe,yqe,wo,LA,cKe,xA,fKe,VS,mKe,gKe,hKe,$A,pKe,ote,_Ke,uKe,bKe,Cr,kA,vKe,rte,FKe,TKe,ya,MKe,tte,EKe,CKe,ate,wKe,AKe,nte,yKe,LKe,xKe,k,Sn,ste,$Ke,kKe,XS,SKe,RKe,zS,PKe,BKe,IKe,Rn,lte,qKe,NKe,WS,jKe,DKe,QS,GKe,OKe,VKe,Pn,ite,XKe,zKe,HS,WKe,QKe,US,HKe,UKe,JKe,wg,dte,YKe,KKe,JS,ZKe,eZe,oZe,Bn,cte,rZe,tZe,YS,aZe,nZe,KS,sZe,lZe,iZe,Ag,fte,dZe,cZe,ZS,fZe,mZe,gZe,yg,mte,hZe,pZe,eR,_Ze,uZe,bZe,Lg,gte,vZe,FZe,oR,TZe,MZe,EZe,In,hte,CZe,wZe,rR,AZe,yZe,tR,LZe,xZe,$Ze,qn,pte,kZe,SZe,aR,RZe,PZe,nR,BZe,IZe,qZe,Nn,_te,NZe,jZe,sR,DZe,GZe,lR,OZe,VZe,XZe,xg,ute,zZe,WZe,iR,QZe,HZe,UZe,$g,bte,JZe,YZe,dR,KZe,ZZe,eeo,jn,vte,oeo,reo,cR,teo,aeo,fR,neo,seo,leo,kg,Fte,ieo,deo,mR,ceo,feo,meo,Dn,Tte,geo,heo,gR,peo,_eo,hR,ueo,beo,veo,Gn,Mte,Feo,Teo,pR,Meo,Eeo,_R,Ceo,weo,Aeo,On,Ete,yeo,Leo,uR,xeo,$eo,bR,keo,Seo,Reo,Sg,Cte,Peo,Beo,vR,Ieo,qeo,Neo,Vn,wte,jeo,Deo,FR,Geo,Oeo,TR,Veo,Xeo,zeo,Xn,Ate,Weo,Qeo,MR,Heo,Ueo,ER,Jeo,Yeo,Keo,zn,yte,Zeo,eoo,CR,ooo,roo,wR,too,aoo,noo,Wn,Lte,soo,loo,AR,ioo,doo,yR,coo,foo,moo,Qn,xte,goo,hoo,LR,poo,_oo,xR,uoo,boo,voo,Hn,$te,Foo,Too,$R,Moo,Eoo,kR,Coo,woo,Aoo,Rg,kte,yoo,Loo,SR,xoo,$oo,koo,Un,Ste,Soo,Roo,RR,Poo,Boo,PR,Ioo,qoo,Noo,Pg,Rte,joo,Doo,BR,Goo,Ooo,Voo,Jn,Pte,Xoo,zoo,IR,Woo,Qoo,qR,Hoo,Uoo,Joo,Yn,Bte,Yoo,Koo,NR,Zoo,ero,jR,oro,rro,tro,Kn,Ite,aro,nro,DR,sro,lro,GR,iro,dro,cro,Zn,qte,fro,mro,OR,gro,hro,VR,pro,_ro,uro,es,Nte,bro,vro,XR,Fro,Tro,zR,Mro,Ero,Cro,Bg,jte,wro,Aro,WR,yro,Lro,xro,os,Dte,$ro,kro,QR,Sro,Rro,HR,Pro,Bro,Iro,rs,Gte,qro,Nro,UR,jro,Dro,JR,Gro,Oro,Vro,ts,Ote,Xro,zro,YR,Wro,Qro,KR,Hro,Uro,Jro,as,Vte,Yro,Kro,ZR,Zro,eto,eP,oto,rto,tto,ns,Xte,ato,nto,oP,sto,lto,rP,ito,dto,cto,ss,zte,fto,mto,tP,gto,hto,aP,pto,_to,uto,Ig,Wte,bto,vto,nP,Fto,Tto,Mto,ls,Qte,Eto,Cto,sP,wto,Ato,lP,yto,Lto,xto,qg,Hte,$to,kto,iP,Sto,Rto,Pto,Ng,Ute,Bto,Ito,dP,qto,Nto,jto,is,Jte,Dto,Gto,cP,Oto,Vto,fP,Xto,zto,Wto,ds,Yte,Qto,Hto,mP,Uto,Jto,gP,Yto,Kto,Zto,cs,Kte,eao,oao,hP,rao,tao,pP,aao,nao,sao,jg,Zte,lao,iao,_P,dao,cao,fao,fs,eae,mao,gao,uP,hao,pao,bP,_ao,uao,bao,ms,oae,vao,Fao,vP,Tao,Mao,FP,Eao,Cao,wao,gs,rae,Aao,yao,TP,Lao,xao,MP,$ao,kao,Sao,hs,tae,Rao,Pao,EP,Bao,Iao,CP,qao,Nao,jao,ps,aae,Dao,Gao,wP,Oao,Vao,AP,Xao,zao,Wao,Dg,nae,Qao,Hao,yP,Uao,Jao,Yao,_s,sae,Kao,Zao,LP,eno,ono,xP,rno,tno,ano,Gg,lae,nno,sno,$P,lno,ino,dno,Og,iae,cno,fno,kP,mno,gno,hno,Vg,dae,pno,_no,SP,uno,bno,vno,Xg,cae,Fno,Tno,RP,Mno,Eno,Cno,us,fae,wno,Ano,PP,yno,Lno,BP,xno,$no,kno,zg,mae,Sno,Rno,IP,Pno,Bno,Ino,bs,gae,qno,Nno,qP,jno,Dno,NP,Gno,Ono,Vno,vs,hae,Xno,zno,jP,Wno,Qno,DP,Hno,Uno,Jno,Fs,pae,Yno,Kno,GP,Zno,eso,OP,oso,rso,tso,Ts,_ae,aso,nso,VP,sso,lso,XP,iso,dso,cso,Ms,uae,fso,mso,zP,gso,hso,WP,pso,_so,uso,Es,bae,bso,vso,QP,Fso,Tso,HP,Mso,Eso,Cso,Wg,vae,wso,Aso,UP,yso,Lso,xso,Qg,Fae,$so,kso,JP,Sso,Rso,Pso,Cs,Tae,Bso,Iso,YP,qso,Nso,KP,jso,Dso,Gso,ws,Mae,Oso,Vso,ZP,Xso,zso,eB,Wso,Qso,Hso,As,Eae,Uso,Jso,oB,Yso,Kso,rB,Zso,elo,olo,Hg,Cae,rlo,tlo,tB,alo,nlo,slo,Ug,wae,llo,ilo,aB,dlo,clo,flo,Jg,Aae,mlo,glo,nB,hlo,plo,_lo,ys,yae,ulo,blo,sB,vlo,Flo,lB,Tlo,Mlo,Elo,Yg,Lae,Clo,wlo,iB,Alo,ylo,Llo,Kg,xae,xlo,$lo,dB,klo,Slo,Rlo,Zg,$ae,Plo,Blo,cB,Ilo,qlo,Nlo,Ls,kae,jlo,Dlo,fB,Glo,Olo,mB,Vlo,Xlo,zlo,eh,Sae,Wlo,Qlo,gB,Hlo,Ulo,Jlo,oh,Rae,Ylo,Klo,hB,Zlo,eio,oio,xs,Pae,rio,tio,pB,aio,nio,_B,sio,lio,iio,$s,Bae,dio,cio,uB,fio,mio,bB,gio,hio,pio,ks,Iae,_io,uio,vB,bio,vio,FB,Fio,Tio,Mio,Ss,qae,Eio,Cio,TB,wio,Aio,MB,yio,Lio,xio,rh,$io,th,SA,kio,Nae,Sio,Lqe,Mi,ah,jae,RA,Rio,Dae,Pio,xqe,Ao,PA,Bio,BA,Iio,EB,qio,Nio,jio,IA,Dio,Gae,Gio,Oio,Vio,He,qA,Xio,Oae,zio,Wio,La,Qio,Vae,Hio,Uio,Xae,Jio,Yio,zae,Kio,Zio,edo,K,nh,Wae,odo,rdo,CB,tdo,ado,ndo,sh,Qae,sdo,ldo,wB,ido,ddo,cdo,lh,Hae,fdo,mdo,AB,gdo,hdo,pdo,ih,Uae,_do,udo,yB,bdo,vdo,Fdo,dh,Jae,Tdo,Mdo,LB,Edo,Cdo,wdo,ch,Yae,Ado,ydo,xB,Ldo,xdo,$do,fh,Kae,kdo,Sdo,$B,Rdo,Pdo,Bdo,mh,Zae,Ido,qdo,kB,Ndo,jdo,Ddo,gh,ene,Gdo,Odo,SB,Vdo,Xdo,zdo,hh,one,Wdo,Qdo,RB,Hdo,Udo,Jdo,ph,rne,Ydo,Kdo,PB,Zdo,eco,oco,_h,tne,rco,tco,BB,aco,nco,sco,uh,ane,lco,ico,IB,dco,cco,fco,bh,nne,mco,gco,qB,hco,pco,_co,vh,sne,uco,bco,NB,vco,Fco,Tco,Fh,lne,Mco,Eco,jB,Cco,wco,Aco,Th,ine,yco,Lco,DB,xco,$co,kco,Mh,dne,Sco,Rco,GB,Pco,Bco,Ico,Eh,cne,qco,Nco,OB,jco,Dco,Gco,Ch,fne,Oco,Vco,VB,Xco,zco,Wco,wh,mne,Qco,Hco,XB,Uco,Jco,Yco,Ah,gne,Kco,Zco,zB,efo,ofo,rfo,yh,hne,tfo,afo,WB,nfo,sfo,lfo,Lh,pne,ifo,dfo,QB,cfo,ffo,mfo,xh,_ne,gfo,hfo,HB,pfo,_fo,ufo,$h,une,bfo,vfo,UB,Ffo,Tfo,Mfo,kh,bne,Efo,Cfo,JB,wfo,Afo,yfo,Sh,vne,Lfo,xfo,YB,$fo,kfo,Sfo,Rh,Rfo,Ph,Pfo,Bh,NA,Bfo,Fne,Ifo,$qe,Ei,Ih,Tne,jA,qfo,Mne,Nfo,kqe,yo,DA,jfo,GA,Dfo,KB,Gfo,Ofo,Vfo,OA,Xfo,Ene,zfo,Wfo,Qfo,Ue,VA,Hfo,Cne,Ufo,Jfo,Ci,Yfo,wne,Kfo,Zfo,Ane,emo,omo,rmo,pe,qh,yne,tmo,amo,ZB,nmo,smo,lmo,Nh,Lne,imo,dmo,xne,cmo,fmo,mmo,jh,$ne,gmo,hmo,eI,pmo,_mo,umo,Dh,kne,bmo,vmo,oI,Fmo,Tmo,Mmo,Gh,Sne,Emo,Cmo,rI,wmo,Amo,ymo,Oh,Rne,Lmo,xmo,tI,$mo,kmo,Smo,Vh,Pne,Rmo,Pmo,aI,Bmo,Imo,qmo,Xh,Bne,Nmo,jmo,nI,Dmo,Gmo,Omo,zh,Ine,Vmo,Xmo,sI,zmo,Wmo,Qmo,Wh,qne,Hmo,Umo,lI,Jmo,Ymo,Kmo,Qh,Nne,Zmo,ego,iI,ogo,rgo,tgo,Hh,jne,ago,ngo,dI,sgo,lgo,igo,Uh,Dne,dgo,cgo,cI,fgo,mgo,ggo,Jh,Gne,hgo,pgo,fI,_go,ugo,bgo,Yh,One,vgo,Fgo,mI,Tgo,Mgo,Ego,Kh,Vne,Cgo,wgo,gI,Ago,ygo,Lgo,Zh,xgo,ep,$go,op,XA,kgo,Xne,Sgo,Sqe,wi,rp,zne,zA,Rgo,Wne,Pgo,Rqe,Lo,WA,Bgo,Ai,Igo,hI,qgo,Ngo,pI,jgo,Dgo,Ggo,QA,Ogo,Qne,Vgo,Xgo,zgo,at,HA,Wgo,Hne,Qgo,Hgo,yi,Ugo,Une,Jgo,Ygo,_I,Kgo,Zgo,eho,tp,oho,Je,UA,rho,Jne,tho,aho,xa,nho,Yne,sho,lho,Kne,iho,dho,Zne,cho,fho,mho,x,ap,ese,gho,hho,uI,pho,_ho,uho,np,ose,bho,vho,bI,Fho,Tho,Mho,sp,rse,Eho,Cho,vI,who,Aho,yho,lp,tse,Lho,xho,FI,$ho,kho,Sho,ip,ase,Rho,Pho,TI,Bho,Iho,qho,dp,nse,Nho,jho,MI,Dho,Gho,Oho,cp,sse,Vho,Xho,EI,zho,Who,Qho,fp,lse,Hho,Uho,CI,Jho,Yho,Kho,mp,ise,Zho,epo,wI,opo,rpo,tpo,gp,dse,apo,npo,AI,spo,lpo,ipo,hp,cse,dpo,cpo,yI,fpo,mpo,gpo,pp,fse,hpo,ppo,LI,_po,upo,bpo,_p,mse,vpo,Fpo,xI,Tpo,Mpo,Epo,up,gse,Cpo,wpo,$I,Apo,ypo,Lpo,bp,hse,xpo,$po,kI,kpo,Spo,Rpo,vp,pse,Ppo,Bpo,SI,Ipo,qpo,Npo,Fp,_se,jpo,Dpo,RI,Gpo,Opo,Vpo,Tp,use,Xpo,zpo,PI,Wpo,Qpo,Hpo,Mp,bse,Upo,Jpo,BI,Ypo,Kpo,Zpo,Ep,vse,e_o,o_o,II,r_o,t_o,a_o,Cp,Fse,n_o,s_o,qI,l_o,i_o,d_o,wp,Tse,c_o,f_o,NI,m_o,g_o,h_o,Ap,Mse,p_o,__o,jI,u_o,b_o,v_o,yp,Ese,F_o,T_o,DI,M_o,E_o,C_o,Lp,Cse,w_o,A_o,GI,y_o,L_o,x_o,xp,wse,$_o,k_o,OI,S_o,R_o,P_o,$p,Ase,B_o,I_o,VI,q_o,N_o,j_o,kp,yse,D_o,G_o,XI,O_o,V_o,X_o,Sp,Lse,z_o,W_o,zI,Q_o,H_o,U_o,Rp,xse,J_o,Y_o,WI,K_o,Z_o,euo,Pp,$se,ouo,ruo,QI,tuo,auo,nuo,Bp,kse,suo,luo,HI,iuo,duo,cuo,Rs,Sse,fuo,muo,UI,guo,huo,JI,puo,_uo,uuo,Ip,Rse,buo,vuo,YI,Fuo,Tuo,Muo,qp,Pse,Euo,Cuo,KI,wuo,Auo,yuo,Np,Bse,Luo,xuo,ZI,$uo,kuo,Suo,jp,Ise,Ruo,Puo,eq,Buo,Iuo,quo,Dp,qse,Nuo,juo,oq,Duo,Guo,Ouo,Gp,Nse,Vuo,Xuo,rq,zuo,Wuo,Quo,Op,jse,Huo,Uuo,tq,Juo,Yuo,Kuo,Vp,Dse,Zuo,e2o,aq,o2o,r2o,t2o,Xp,Gse,a2o,n2o,nq,s2o,l2o,i2o,zp,Ose,d2o,c2o,sq,f2o,m2o,g2o,Wp,Vse,h2o,p2o,lq,_2o,u2o,b2o,Qp,Xse,v2o,F2o,iq,T2o,M2o,E2o,Hp,zse,C2o,w2o,dq,A2o,y2o,L2o,Up,Wse,x2o,$2o,cq,k2o,S2o,R2o,Jp,Qse,P2o,B2o,fq,I2o,q2o,N2o,Yp,Hse,j2o,D2o,mq,G2o,O2o,V2o,Kp,Use,X2o,z2o,gq,W2o,Q2o,H2o,Zp,Jse,U2o,J2o,hq,Y2o,K2o,Z2o,e_,Yse,e1o,o1o,pq,r1o,t1o,a1o,o_,Kse,n1o,s1o,_q,l1o,i1o,d1o,r_,Zse,c1o,f1o,uq,m1o,g1o,h1o,t_,ele,p1o,_1o,bq,u1o,b1o,v1o,a_,ole,F1o,T1o,vq,M1o,E1o,C1o,n_,rle,w1o,A1o,Fq,y1o,L1o,x1o,s_,tle,$1o,k1o,Tq,S1o,R1o,P1o,l_,ale,B1o,I1o,Mq,q1o,N1o,j1o,i_,nle,D1o,G1o,Eq,O1o,V1o,X1o,d_,sle,z1o,W1o,Cq,Q1o,H1o,U1o,c_,lle,J1o,Y1o,wq,K1o,Z1o,ebo,f_,ile,obo,rbo,Aq,tbo,abo,nbo,m_,dle,sbo,lbo,yq,ibo,dbo,cbo,g_,cle,fbo,mbo,Lq,gbo,hbo,pbo,h_,fle,_bo,ubo,xq,bbo,vbo,Fbo,p_,mle,Tbo,Mbo,$q,Ebo,Cbo,wbo,__,gle,Abo,ybo,kq,Lbo,xbo,$bo,u_,hle,kbo,Sbo,Sq,Rbo,Pbo,Bbo,b_,ple,Ibo,qbo,Rq,Nbo,jbo,Dbo,v_,_le,Gbo,Obo,Pq,Vbo,Xbo,zbo,F_,ule,Wbo,Qbo,Bq,Hbo,Ubo,Jbo,T_,ble,Ybo,Kbo,Iq,Zbo,e5o,o5o,M_,vle,r5o,t5o,qq,a5o,n5o,s5o,E_,Fle,l5o,i5o,Nq,d5o,c5o,f5o,C_,Tle,m5o,g5o,jq,h5o,p5o,_5o,w_,Mle,u5o,b5o,Dq,v5o,F5o,T5o,A_,Ele,M5o,E5o,Gq,C5o,w5o,A5o,y_,Cle,y5o,L5o,Oq,x5o,$5o,k5o,L_,wle,S5o,R5o,Vq,P5o,B5o,I5o,x_,Ale,q5o,N5o,Xq,j5o,D5o,G5o,$_,yle,O5o,V5o,zq,X5o,z5o,W5o,k_,Lle,Q5o,H5o,Wq,U5o,J5o,Y5o,S_,xle,K5o,Z5o,Qq,evo,ovo,rvo,R_,$le,tvo,avo,Hq,nvo,svo,lvo,P_,kle,ivo,dvo,Uq,cvo,fvo,mvo,B_,Sle,gvo,hvo,Jq,pvo,_vo,uvo,I_,Rle,bvo,vvo,Yq,Fvo,Tvo,Mvo,q_,Ple,Evo,Cvo,Kq,wvo,Avo,yvo,N_,Ble,Lvo,xvo,Zq,$vo,kvo,Svo,j_,Ile,Rvo,Pvo,eN,Bvo,Ivo,qvo,D_,qle,Nvo,jvo,oN,Dvo,Gvo,Ovo,G_,Nle,Vvo,Xvo,rN,zvo,Wvo,Qvo,O_,jle,Hvo,Uvo,tN,Jvo,Yvo,Kvo,V_,Dle,Zvo,eFo,aN,oFo,rFo,tFo,X_,Gle,aFo,nFo,nN,sFo,lFo,iFo,z_,Ole,dFo,cFo,sN,fFo,mFo,gFo,W_,Vle,hFo,pFo,lN,_Fo,uFo,bFo,Q_,Xle,vFo,FFo,iN,TFo,MFo,EFo,H_,zle,CFo,wFo,dN,AFo,yFo,LFo,U_,Wle,xFo,$Fo,cN,kFo,SFo,RFo,J_,PFo,Qle,BFo,IFo,Hle,qFo,NFo,Y_,Pqe,Li,K_,Ule,JA,jFo,Jle,DFo,Bqe,xo,YA,GFo,xi,OFo,fN,VFo,XFo,mN,zFo,WFo,QFo,KA,HFo,Yle,UFo,JFo,YFo,nt,ZA,KFo,Kle,ZFo,e0o,$i,o0o,Zle,r0o,t0o,gN,a0o,n0o,s0o,Z_,l0o,Ye,ey,i0o,eie,d0o,c0o,$a,f0o,oie,m0o,g0o,rie,h0o,p0o,tie,_0o,u0o,b0o,G,eu,aie,v0o,F0o,hN,T0o,M0o,E0o,ou,nie,C0o,w0o,pN,A0o,y0o,L0o,ru,sie,x0o,$0o,_N,k0o,S0o,R0o,tu,lie,P0o,B0o,uN,I0o,q0o,N0o,au,iie,j0o,D0o,bN,G0o,O0o,V0o,nu,die,X0o,z0o,vN,W0o,Q0o,H0o,su,cie,U0o,J0o,FN,Y0o,K0o,Z0o,lu,fie,eTo,oTo,TN,rTo,tTo,aTo,iu,mie,nTo,sTo,MN,lTo,iTo,dTo,du,gie,cTo,fTo,EN,mTo,gTo,hTo,cu,hie,pTo,_To,CN,uTo,bTo,vTo,fu,pie,FTo,TTo,wN,MTo,ETo,CTo,mu,_ie,wTo,ATo,AN,yTo,LTo,xTo,gu,uie,$To,kTo,yN,STo,RTo,PTo,hu,bie,BTo,ITo,LN,qTo,NTo,jTo,pu,vie,DTo,GTo,xN,OTo,VTo,XTo,_u,Fie,zTo,WTo,$N,QTo,HTo,UTo,uu,Tie,JTo,YTo,kN,KTo,ZTo,e7o,bu,Mie,o7o,r7o,SN,t7o,a7o,n7o,vu,Eie,s7o,l7o,RN,i7o,d7o,c7o,Fu,Cie,f7o,m7o,PN,g7o,h7o,p7o,Tu,wie,_7o,u7o,BN,b7o,v7o,F7o,Mu,Aie,T7o,M7o,IN,E7o,C7o,w7o,Eu,yie,A7o,y7o,qN,L7o,x7o,$7o,Cu,Lie,k7o,S7o,NN,R7o,P7o,B7o,wu,xie,I7o,q7o,jN,N7o,j7o,D7o,Au,$ie,G7o,O7o,DN,V7o,X7o,z7o,yu,kie,W7o,Q7o,GN,H7o,U7o,J7o,Lu,Sie,Y7o,K7o,ON,Z7o,eMo,oMo,xu,Rie,rMo,tMo,VN,aMo,nMo,sMo,$u,Pie,lMo,iMo,XN,dMo,cMo,fMo,ku,Bie,mMo,gMo,zN,hMo,pMo,_Mo,Su,Iie,uMo,bMo,WN,vMo,FMo,TMo,Ru,qie,MMo,EMo,QN,CMo,wMo,AMo,Pu,Nie,yMo,LMo,HN,xMo,$Mo,kMo,Bu,jie,SMo,RMo,UN,PMo,BMo,IMo,Iu,Die,qMo,NMo,JN,jMo,DMo,GMo,qu,Gie,OMo,VMo,YN,XMo,zMo,WMo,Nu,Oie,QMo,HMo,KN,UMo,JMo,YMo,ju,Vie,KMo,ZMo,ZN,e4o,o4o,r4o,Du,Xie,t4o,a4o,ej,n4o,s4o,l4o,Gu,zie,i4o,d4o,oj,c4o,f4o,m4o,Ou,g4o,Wie,h4o,p4o,Qie,_4o,u4o,Vu,Iqe,ki,Xu,Hie,oy,b4o,Uie,v4o,qqe,$o,ry,F4o,Si,T4o,rj,M4o,E4o,tj,C4o,w4o,A4o,ty,y4o,Jie,L4o,x4o,$4o,st,ay,k4o,Yie,S4o,R4o,Ri,P4o,Kie,B4o,I4o,aj,q4o,N4o,j4o,zu,D4o,Ke,ny,G4o,Zie,O4o,V4o,ka,X4o,ede,z4o,W4o,ode,Q4o,H4o,rde,U4o,J4o,Y4o,z,Wu,tde,K4o,Z4o,nj,eEo,oEo,rEo,Qu,ade,tEo,aEo,sj,nEo,sEo,lEo,Hu,nde,iEo,dEo,lj,cEo,fEo,mEo,Uu,sde,gEo,hEo,ij,pEo,_Eo,uEo,Ju,lde,bEo,vEo,dj,FEo,TEo,MEo,Yu,ide,EEo,CEo,cj,wEo,AEo,yEo,Ku,dde,LEo,xEo,fj,$Eo,kEo,SEo,Zu,cde,REo,PEo,mj,BEo,IEo,qEo,e2,fde,NEo,jEo,gj,DEo,GEo,OEo,o2,mde,VEo,XEo,hj,zEo,WEo,QEo,r2,gde,HEo,UEo,pj,JEo,YEo,KEo,t2,hde,ZEo,eCo,_j,oCo,rCo,tCo,a2,pde,aCo,nCo,uj,sCo,lCo,iCo,n2,_de,dCo,cCo,bj,fCo,mCo,gCo,s2,ude,hCo,pCo,vj,_Co,uCo,bCo,l2,bde,vCo,FCo,Fj,TCo,MCo,ECo,i2,vde,CCo,wCo,Tj,ACo,yCo,LCo,d2,Fde,xCo,$Co,Mj,kCo,SCo,RCo,c2,Tde,PCo,BCo,Ej,ICo,qCo,NCo,f2,Mde,jCo,DCo,Cj,GCo,OCo,VCo,m2,Ede,XCo,zCo,wj,WCo,QCo,HCo,g2,Cde,UCo,JCo,Aj,YCo,KCo,ZCo,h2,wde,e3o,o3o,yj,r3o,t3o,a3o,p2,Ade,n3o,s3o,Lj,l3o,i3o,d3o,_2,yde,c3o,f3o,xj,m3o,g3o,h3o,u2,Lde,p3o,_3o,$j,u3o,b3o,v3o,b2,xde,F3o,T3o,kj,M3o,E3o,C3o,v2,$de,w3o,A3o,Sj,y3o,L3o,x3o,F2,kde,$3o,k3o,Rj,S3o,R3o,P3o,T2,Sde,B3o,I3o,Pj,q3o,N3o,j3o,M2,Rde,D3o,G3o,Bj,O3o,V3o,X3o,E2,Pde,z3o,W3o,Ij,Q3o,H3o,U3o,C2,Bde,J3o,Y3o,qj,K3o,Z3o,ewo,w2,Ide,owo,rwo,Nj,two,awo,nwo,A2,qde,swo,lwo,jj,iwo,dwo,cwo,y2,Nde,fwo,mwo,Dj,gwo,hwo,pwo,L2,_wo,jde,uwo,bwo,Dde,vwo,Fwo,x2,Nqe,Pi,$2,Gde,sy,Two,Ode,Mwo,jqe,ko,ly,Ewo,Bi,Cwo,Gj,wwo,Awo,Oj,ywo,Lwo,xwo,iy,$wo,Vde,kwo,Swo,Rwo,lt,dy,Pwo,Xde,Bwo,Iwo,Ii,qwo,zde,Nwo,jwo,Vj,Dwo,Gwo,Owo,k2,Vwo,Ze,cy,Xwo,Wde,zwo,Wwo,Sa,Qwo,Qde,Hwo,Uwo,Hde,Jwo,Ywo,Ude,Kwo,Zwo,e6o,W,S2,Jde,o6o,r6o,Xj,t6o,a6o,n6o,R2,Yde,s6o,l6o,zj,i6o,d6o,c6o,P2,Kde,f6o,m6o,Wj,g6o,h6o,p6o,B2,Zde,_6o,u6o,Qj,b6o,v6o,F6o,I2,ece,T6o,M6o,Hj,E6o,C6o,w6o,q2,oce,A6o,y6o,Uj,L6o,x6o,$6o,N2,rce,k6o,S6o,Jj,R6o,P6o,B6o,j2,tce,I6o,q6o,Yj,N6o,j6o,D6o,D2,ace,G6o,O6o,Kj,V6o,X6o,z6o,G2,nce,W6o,Q6o,Zj,H6o,U6o,J6o,O2,sce,Y6o,K6o,eD,Z6o,eAo,oAo,V2,lce,rAo,tAo,oD,aAo,nAo,sAo,X2,ice,lAo,iAo,rD,dAo,cAo,fAo,z2,dce,mAo,gAo,tD,hAo,pAo,_Ao,W2,cce,uAo,bAo,aD,vAo,FAo,TAo,Q2,fce,MAo,EAo,nD,CAo,wAo,AAo,H2,mce,yAo,LAo,sD,xAo,$Ao,kAo,U2,gce,SAo,RAo,lD,PAo,BAo,IAo,J2,hce,qAo,NAo,iD,jAo,DAo,GAo,Y2,pce,OAo,VAo,dD,XAo,zAo,WAo,K2,_ce,QAo,HAo,cD,UAo,JAo,YAo,Z2,uce,KAo,ZAo,fD,eyo,oyo,ryo,e1,bce,tyo,ayo,mD,nyo,syo,lyo,o1,vce,iyo,dyo,gD,cyo,fyo,myo,r1,Fce,gyo,hyo,hD,pyo,_yo,uyo,t1,Tce,byo,vyo,pD,Fyo,Tyo,Myo,a1,Mce,Eyo,Cyo,_D,wyo,Ayo,yyo,n1,Ece,Lyo,xyo,uD,$yo,kyo,Syo,s1,Cce,Ryo,Pyo,bD,Byo,Iyo,qyo,l1,wce,Nyo,jyo,vD,Dyo,Gyo,Oyo,i1,Ace,Vyo,Xyo,yce,zyo,Wyo,Qyo,d1,Lce,Hyo,Uyo,FD,Jyo,Yyo,Kyo,c1,xce,Zyo,e8o,TD,o8o,r8o,t8o,f1,$ce,a8o,n8o,MD,s8o,l8o,i8o,m1,kce,d8o,c8o,ED,f8o,m8o,g8o,g1,h8o,Sce,p8o,_8o,Rce,u8o,b8o,h1,Dqe,qi,p1,Pce,fy,v8o,Bce,F8o,Gqe,So,my,T8o,Ni,M8o,CD,E8o,C8o,wD,w8o,A8o,y8o,gy,L8o,Ice,x8o,$8o,k8o,it,hy,S8o,qce,R8o,P8o,ji,B8o,Nce,I8o,q8o,AD,N8o,j8o,D8o,_1,G8o,eo,py,O8o,jce,V8o,X8o,Ra,z8o,Dce,W8o,Q8o,Gce,H8o,U8o,Oce,J8o,Y8o,K8o,_e,u1,Vce,Z8o,eLo,yD,oLo,rLo,tLo,b1,Xce,aLo,nLo,LD,sLo,lLo,iLo,v1,zce,dLo,cLo,xD,fLo,mLo,gLo,F1,Wce,hLo,pLo,$D,_Lo,uLo,bLo,T1,Qce,vLo,FLo,kD,TLo,MLo,ELo,M1,Hce,CLo,wLo,SD,ALo,yLo,LLo,E1,Uce,xLo,$Lo,RD,kLo,SLo,RLo,C1,Jce,PLo,BLo,PD,ILo,qLo,NLo,w1,Yce,jLo,DLo,BD,GLo,OLo,VLo,A1,Kce,XLo,zLo,ID,WLo,QLo,HLo,y1,Zce,ULo,JLo,qD,YLo,KLo,ZLo,L1,efe,e9o,o9o,ND,r9o,t9o,a9o,x1,ofe,n9o,s9o,jD,l9o,i9o,d9o,$1,rfe,c9o,f9o,DD,m9o,g9o,h9o,k1,tfe,p9o,_9o,GD,u9o,b9o,v9o,S1,afe,F9o,T9o,OD,M9o,E9o,C9o,R1,w9o,nfe,A9o,y9o,sfe,L9o,x9o,P1,Oqe,Di,B1,lfe,_y,$9o,ife,k9o,Vqe,Ro,uy,S9o,Gi,R9o,VD,P9o,B9o,XD,I9o,q9o,N9o,by,j9o,dfe,D9o,G9o,O9o,dt,vy,V9o,cfe,X9o,z9o,Oi,W9o,ffe,Q9o,H9o,zD,U9o,J9o,Y9o,I1,K9o,oo,Fy,Z9o,mfe,exo,oxo,Pa,rxo,gfe,txo,axo,hfe,nxo,sxo,pfe,lxo,ixo,dxo,q,q1,_fe,cxo,fxo,WD,mxo,gxo,hxo,N1,ufe,pxo,_xo,QD,uxo,bxo,vxo,j1,bfe,Fxo,Txo,HD,Mxo,Exo,Cxo,D1,vfe,wxo,Axo,UD,yxo,Lxo,xxo,G1,Ffe,$xo,kxo,JD,Sxo,Rxo,Pxo,O1,Tfe,Bxo,Ixo,YD,qxo,Nxo,jxo,V1,Mfe,Dxo,Gxo,KD,Oxo,Vxo,Xxo,X1,Efe,zxo,Wxo,ZD,Qxo,Hxo,Uxo,z1,Cfe,Jxo,Yxo,eG,Kxo,Zxo,e$o,W1,wfe,o$o,r$o,oG,t$o,a$o,n$o,Q1,Afe,s$o,l$o,rG,i$o,d$o,c$o,H1,yfe,f$o,m$o,tG,g$o,h$o,p$o,U1,Lfe,_$o,u$o,aG,b$o,v$o,F$o,J1,xfe,T$o,M$o,nG,E$o,C$o,w$o,Y1,$fe,A$o,y$o,sG,L$o,x$o,$$o,K1,kfe,k$o,S$o,lG,R$o,P$o,B$o,Z1,Sfe,I$o,q$o,iG,N$o,j$o,D$o,eb,Rfe,G$o,O$o,dG,V$o,X$o,z$o,ob,Pfe,W$o,Q$o,cG,H$o,U$o,J$o,rb,Bfe,Y$o,K$o,fG,Z$o,eko,oko,tb,Ife,rko,tko,mG,ako,nko,sko,ab,qfe,lko,iko,gG,dko,cko,fko,nb,Nfe,mko,gko,hG,hko,pko,_ko,sb,jfe,uko,bko,pG,vko,Fko,Tko,lb,Dfe,Mko,Eko,_G,Cko,wko,Ako,ib,Gfe,yko,Lko,uG,xko,$ko,kko,db,Ofe,Sko,Rko,bG,Pko,Bko,Iko,cb,Vfe,qko,Nko,vG,jko,Dko,Gko,fb,Xfe,Oko,Vko,FG,Xko,zko,Wko,mb,zfe,Qko,Hko,TG,Uko,Jko,Yko,gb,Wfe,Kko,Zko,MG,eSo,oSo,rSo,hb,Qfe,tSo,aSo,EG,nSo,sSo,lSo,pb,Hfe,iSo,dSo,CG,cSo,fSo,mSo,_b,Ufe,gSo,hSo,wG,pSo,_So,uSo,ub,Jfe,bSo,vSo,AG,FSo,TSo,MSo,bb,Yfe,ESo,CSo,yG,wSo,ASo,ySo,vb,Kfe,LSo,xSo,LG,$So,kSo,SSo,Fb,Zfe,RSo,PSo,xG,BSo,ISo,qSo,Tb,eme,NSo,jSo,$G,DSo,GSo,OSo,Mb,ome,VSo,XSo,kG,zSo,WSo,QSo,Eb,rme,HSo,USo,SG,JSo,YSo,KSo,Cb,tme,ZSo,eRo,RG,oRo,rRo,tRo,wb,ame,aRo,nRo,PG,sRo,lRo,iRo,Ab,nme,dRo,cRo,BG,fRo,mRo,gRo,yb,sme,hRo,pRo,IG,_Ro,uRo,bRo,Lb,lme,vRo,FRo,qG,TRo,MRo,ERo,xb,CRo,ime,wRo,ARo,dme,yRo,LRo,$b,Xqe,Vi,kb,cme,Ty,xRo,fme,$Ro,zqe,Po,My,kRo,Xi,SRo,NG,RRo,PRo,jG,BRo,IRo,qRo,Ey,NRo,mme,jRo,DRo,GRo,ct,Cy,ORo,gme,VRo,XRo,zi,zRo,hme,WRo,QRo,DG,HRo,URo,JRo,Sb,YRo,ro,wy,KRo,pme,ZRo,ePo,Ba,oPo,_me,rPo,tPo,ume,aPo,nPo,bme,sPo,lPo,iPo,Y,Rb,vme,dPo,cPo,GG,fPo,mPo,gPo,Pb,Fme,hPo,pPo,OG,_Po,uPo,bPo,Bb,Tme,vPo,FPo,VG,TPo,MPo,EPo,Ib,Mme,CPo,wPo,XG,APo,yPo,LPo,qb,Eme,xPo,$Po,zG,kPo,SPo,RPo,Nb,Cme,PPo,BPo,WG,IPo,qPo,NPo,jb,wme,jPo,DPo,QG,GPo,OPo,VPo,Db,Ame,XPo,zPo,HG,WPo,QPo,HPo,Gb,yme,UPo,JPo,UG,YPo,KPo,ZPo,Ob,Lme,eBo,oBo,JG,rBo,tBo,aBo,Vb,xme,nBo,sBo,YG,lBo,iBo,dBo,Xb,$me,cBo,fBo,KG,mBo,gBo,hBo,zb,kme,pBo,_Bo,ZG,uBo,bBo,vBo,Wb,Sme,FBo,TBo,eO,MBo,EBo,CBo,Qb,Rme,wBo,ABo,oO,yBo,LBo,xBo,Hb,Pme,$Bo,kBo,rO,SBo,RBo,PBo,Ub,Bme,BBo,IBo,tO,qBo,NBo,jBo,Jb,Ime,DBo,GBo,aO,OBo,VBo,XBo,Yb,qme,zBo,WBo,nO,QBo,HBo,UBo,Kb,Nme,JBo,YBo,sO,KBo,ZBo,eIo,Zb,jme,oIo,rIo,lO,tIo,aIo,nIo,e5,Dme,sIo,lIo,iO,iIo,dIo,cIo,o5,Gme,fIo,mIo,dO,gIo,hIo,pIo,r5,Ome,_Io,uIo,cO,bIo,vIo,FIo,t5,Vme,TIo,MIo,fO,EIo,CIo,wIo,a5,Xme,AIo,yIo,mO,LIo,xIo,$Io,n5,zme,kIo,SIo,gO,RIo,PIo,BIo,s5,Wme,IIo,qIo,hO,NIo,jIo,DIo,l5,Qme,GIo,OIo,pO,VIo,XIo,zIo,i5,WIo,Hme,QIo,HIo,Ume,UIo,JIo,d5,Wqe,Wi,c5,Jme,Ay,YIo,Yme,KIo,Qqe,Bo,yy,ZIo,Qi,eqo,_O,oqo,rqo,uO,tqo,aqo,nqo,Ly,sqo,Kme,lqo,iqo,dqo,ft,xy,cqo,Zme,fqo,mqo,Hi,gqo,ege,hqo,pqo,bO,_qo,uqo,bqo,f5,vqo,to,$y,Fqo,oge,Tqo,Mqo,Ia,Eqo,rge,Cqo,wqo,tge,Aqo,yqo,age,Lqo,xqo,$qo,Yr,m5,nge,kqo,Sqo,vO,Rqo,Pqo,Bqo,g5,sge,Iqo,qqo,FO,Nqo,jqo,Dqo,h5,lge,Gqo,Oqo,TO,Vqo,Xqo,zqo,p5,ige,Wqo,Qqo,MO,Hqo,Uqo,Jqo,_5,dge,Yqo,Kqo,EO,Zqo,eNo,oNo,u5,rNo,cge,tNo,aNo,fge,nNo,sNo,b5,Hqe,Ui,v5,mge,ky,lNo,gge,iNo,Uqe,Io,Sy,dNo,Ji,cNo,CO,fNo,mNo,wO,gNo,hNo,pNo,Ry,_No,hge,uNo,bNo,vNo,mt,Py,FNo,pge,TNo,MNo,Yi,ENo,_ge,CNo,wNo,AO,ANo,yNo,LNo,F5,xNo,ao,By,$No,uge,kNo,SNo,qa,RNo,bge,PNo,BNo,vge,INo,qNo,Fge,NNo,jNo,DNo,U,T5,Tge,GNo,ONo,yO,VNo,XNo,zNo,M5,Mge,WNo,QNo,LO,HNo,UNo,JNo,E5,Ege,YNo,KNo,xO,ZNo,ejo,ojo,C5,Cge,rjo,tjo,$O,ajo,njo,sjo,w5,wge,ljo,ijo,kO,djo,cjo,fjo,A5,Age,mjo,gjo,SO,hjo,pjo,_jo,y5,yge,ujo,bjo,RO,vjo,Fjo,Tjo,L5,Lge,Mjo,Ejo,PO,Cjo,wjo,Ajo,x5,xge,yjo,Ljo,BO,xjo,$jo,kjo,$5,$ge,Sjo,Rjo,IO,Pjo,Bjo,Ijo,k5,kge,qjo,Njo,qO,jjo,Djo,Gjo,S5,Sge,Ojo,Vjo,NO,Xjo,zjo,Wjo,R5,Rge,Qjo,Hjo,jO,Ujo,Jjo,Yjo,P5,Pge,Kjo,Zjo,DO,eDo,oDo,rDo,B5,Bge,tDo,aDo,GO,nDo,sDo,lDo,I5,Ige,iDo,dDo,OO,cDo,fDo,mDo,q5,qge,gDo,hDo,VO,pDo,_Do,uDo,N5,Nge,bDo,vDo,XO,FDo,TDo,MDo,j5,jge,EDo,CDo,zO,wDo,ADo,yDo,D5,Dge,LDo,xDo,WO,$Do,kDo,SDo,G5,Gge,RDo,PDo,QO,BDo,IDo,qDo,O5,Oge,NDo,jDo,HO,DDo,GDo,ODo,V5,Vge,VDo,XDo,UO,zDo,WDo,QDo,X5,Xge,HDo,UDo,JO,JDo,YDo,KDo,z5,zge,ZDo,eGo,YO,oGo,rGo,tGo,W5,Wge,aGo,nGo,KO,sGo,lGo,iGo,Q5,Qge,dGo,cGo,ZO,fGo,mGo,gGo,H5,Hge,hGo,pGo,eV,_Go,uGo,bGo,U5,Uge,vGo,FGo,oV,TGo,MGo,EGo,J5,Jge,CGo,wGo,rV,AGo,yGo,LGo,Y5,Yge,xGo,$Go,tV,kGo,SGo,RGo,K5,Kge,PGo,BGo,aV,IGo,qGo,NGo,Z5,Zge,jGo,DGo,nV,GGo,OGo,VGo,ev,XGo,ehe,zGo,WGo,ohe,QGo,HGo,ov,Jqe,Ki,rv,rhe,Iy,UGo,the,JGo,Yqe,qo,qy,YGo,Zi,KGo,sV,ZGo,eOo,lV,oOo,rOo,tOo,Ny,aOo,ahe,nOo,sOo,lOo,gt,jy,iOo,nhe,dOo,cOo,ed,fOo,she,mOo,gOo,iV,hOo,pOo,_Oo,tv,uOo,no,Dy,bOo,lhe,vOo,FOo,Na,TOo,ihe,MOo,EOo,dhe,COo,wOo,che,AOo,yOo,LOo,V,av,fhe,xOo,$Oo,dV,kOo,SOo,ROo,nv,mhe,POo,BOo,cV,IOo,qOo,NOo,sv,ghe,jOo,DOo,fV,GOo,OOo,VOo,lv,hhe,XOo,zOo,mV,WOo,QOo,HOo,iv,phe,UOo,JOo,gV,YOo,KOo,ZOo,dv,_he,eVo,oVo,hV,rVo,tVo,aVo,cv,uhe,nVo,sVo,pV,lVo,iVo,dVo,fv,bhe,cVo,fVo,_V,mVo,gVo,hVo,mv,vhe,pVo,_Vo,uV,uVo,bVo,vVo,gv,Fhe,FVo,TVo,bV,MVo,EVo,CVo,hv,The,wVo,AVo,vV,yVo,LVo,xVo,pv,Mhe,$Vo,kVo,FV,SVo,RVo,PVo,_v,Ehe,BVo,IVo,TV,qVo,NVo,jVo,uv,Che,DVo,GVo,MV,OVo,VVo,XVo,bv,whe,zVo,WVo,EV,QVo,HVo,UVo,vv,Ahe,JVo,YVo,CV,KVo,ZVo,eXo,Fv,yhe,oXo,rXo,wV,tXo,aXo,nXo,Tv,Lhe,sXo,lXo,AV,iXo,dXo,cXo,Mv,xhe,fXo,mXo,yV,gXo,hXo,pXo,Ev,$he,_Xo,uXo,LV,bXo,vXo,FXo,Cv,khe,TXo,MXo,xV,EXo,CXo,wXo,wv,She,AXo,yXo,$V,LXo,xXo,$Xo,Av,Rhe,kXo,SXo,kV,RXo,PXo,BXo,yv,Phe,IXo,qXo,SV,NXo,jXo,DXo,Lv,Bhe,GXo,OXo,RV,VXo,XXo,zXo,xv,Ihe,WXo,QXo,PV,HXo,UXo,JXo,$v,qhe,YXo,KXo,BV,ZXo,ezo,ozo,kv,Nhe,rzo,tzo,IV,azo,nzo,szo,Sv,jhe,lzo,izo,qV,dzo,czo,fzo,Rv,Dhe,mzo,gzo,NV,hzo,pzo,_zo,Pv,Ghe,uzo,bzo,jV,vzo,Fzo,Tzo,Bv,Ohe,Mzo,Ezo,DV,Czo,wzo,Azo,Iv,Vhe,yzo,Lzo,GV,xzo,$zo,kzo,qv,Xhe,Szo,Rzo,OV,Pzo,Bzo,Izo,Nv,zhe,qzo,Nzo,VV,jzo,Dzo,Gzo,jv,Whe,Ozo,Vzo,XV,Xzo,zzo,Wzo,Dv,Qhe,Qzo,Hzo,zV,Uzo,Jzo,Yzo,Gv,Hhe,Kzo,Zzo,WV,eWo,oWo,rWo,Ov,Uhe,tWo,aWo,QV,nWo,sWo,lWo,Vv,iWo,Jhe,dWo,cWo,Yhe,fWo,mWo,Xv,Kqe,od,zv,Khe,Gy,gWo,Zhe,hWo,Zqe,No,Oy,pWo,rd,_Wo,HV,uWo,bWo,UV,vWo,FWo,TWo,Vy,MWo,epe,EWo,CWo,wWo,ht,Xy,AWo,ope,yWo,LWo,td,xWo,rpe,$Wo,kWo,JV,SWo,RWo,PWo,Wv,BWo,so,zy,IWo,tpe,qWo,NWo,ja,jWo,ape,DWo,GWo,npe,OWo,VWo,spe,XWo,zWo,WWo,lpe,Qv,ipe,QWo,HWo,YV,UWo,JWo,YWo,Hv,KWo,dpe,ZWo,eQo,cpe,oQo,rQo,Uv,eNe,ad,Jv,fpe,Wy,tQo,mpe,aQo,oNe,jo,Qy,nQo,nd,sQo,KV,lQo,iQo,ZV,dQo,cQo,fQo,Hy,mQo,gpe,gQo,hQo,pQo,pt,Uy,_Qo,hpe,uQo,bQo,sd,vQo,ppe,FQo,TQo,eX,MQo,EQo,CQo,Yv,wQo,lo,Jy,AQo,_pe,yQo,LQo,Da,xQo,upe,$Qo,kQo,bpe,SQo,RQo,vpe,PQo,BQo,IQo,be,Kv,Fpe,qQo,NQo,oX,jQo,DQo,GQo,Zv,Tpe,OQo,VQo,rX,XQo,zQo,WQo,eF,Mpe,QQo,HQo,tX,UQo,JQo,YQo,oF,Epe,KQo,ZQo,aX,eHo,oHo,rHo,Ps,Cpe,tHo,aHo,nX,nHo,sHo,sX,lHo,iHo,dHo,rF,wpe,cHo,fHo,lX,mHo,gHo,hHo,tF,Ape,pHo,_Ho,iX,uHo,bHo,vHo,_t,ype,FHo,THo,dX,MHo,EHo,cX,CHo,wHo,fX,AHo,yHo,LHo,aF,Lpe,xHo,$Ho,mX,kHo,SHo,RHo,nF,xpe,PHo,BHo,gX,IHo,qHo,NHo,sF,$pe,jHo,DHo,hX,GHo,OHo,VHo,lF,kpe,XHo,zHo,pX,WHo,QHo,HHo,iF,Spe,UHo,JHo,_X,YHo,KHo,ZHo,dF,Rpe,eUo,oUo,uX,rUo,tUo,aUo,cF,Ppe,nUo,sUo,bX,lUo,iUo,dUo,fF,cUo,Bpe,fUo,mUo,Ipe,gUo,hUo,mF,rNe,ld,gF,qpe,Yy,pUo,Npe,_Uo,tNe,Do,Ky,uUo,id,bUo,vX,vUo,FUo,FX,TUo,MUo,EUo,Zy,CUo,jpe,wUo,AUo,yUo,ut,e8,LUo,Dpe,xUo,$Uo,dd,kUo,Gpe,SUo,RUo,TX,PUo,BUo,IUo,hF,qUo,io,o8,NUo,Ope,jUo,DUo,Ga,GUo,Vpe,OUo,VUo,Xpe,XUo,zUo,zpe,WUo,QUo,HUo,Wpe,pF,Qpe,UUo,JUo,MX,YUo,KUo,ZUo,_F,eJo,Hpe,oJo,rJo,Upe,tJo,aJo,uF,aNe,cd,bF,Jpe,r8,nJo,Ype,sJo,nNe,Go,t8,lJo,fd,iJo,EX,dJo,cJo,CX,fJo,mJo,gJo,a8,hJo,Kpe,pJo,_Jo,uJo,bt,n8,bJo,Zpe,vJo,FJo,md,TJo,e_e,MJo,EJo,wX,CJo,wJo,AJo,vF,yJo,co,s8,LJo,o_e,xJo,$Jo,Oa,kJo,r_e,SJo,RJo,t_e,PJo,BJo,a_e,IJo,qJo,NJo,ke,FF,n_e,jJo,DJo,AX,GJo,OJo,VJo,TF,s_e,XJo,zJo,yX,WJo,QJo,HJo,MF,l_e,UJo,JJo,LX,YJo,KJo,ZJo,EF,i_e,eYo,oYo,xX,rYo,tYo,aYo,CF,d_e,nYo,sYo,$X,lYo,iYo,dYo,wF,c_e,cYo,fYo,kX,mYo,gYo,hYo,AF,f_e,pYo,_Yo,SX,uYo,bYo,vYo,yF,m_e,FYo,TYo,RX,MYo,EYo,CYo,LF,g_e,wYo,AYo,PX,yYo,LYo,xYo,xF,$Yo,h_e,kYo,SYo,p_e,RYo,PYo,$F,sNe,gd,kF,__e,l8,BYo,u_e,IYo,lNe,Oo,i8,qYo,hd,NYo,BX,jYo,DYo,IX,GYo,OYo,VYo,d8,XYo,b_e,zYo,WYo,QYo,vt,c8,HYo,v_e,UYo,JYo,pd,YYo,F_e,KYo,ZYo,qX,eKo,oKo,rKo,SF,tKo,fo,f8,aKo,T_e,nKo,sKo,Va,lKo,M_e,iKo,dKo,E_e,cKo,fKo,C_e,mKo,gKo,hKo,Kr,RF,w_e,pKo,_Ko,NX,uKo,bKo,vKo,PF,A_e,FKo,TKo,jX,MKo,EKo,CKo,BF,y_e,wKo,AKo,DX,yKo,LKo,xKo,IF,L_e,$Ko,kKo,GX,SKo,RKo,PKo,qF,x_e,BKo,IKo,OX,qKo,NKo,jKo,NF,DKo,$_e,GKo,OKo,k_e,VKo,XKo,jF,iNe,_d,DF,S_e,m8,zKo,R_e,WKo,dNe,Vo,g8,QKo,ud,HKo,VX,UKo,JKo,XX,YKo,KKo,ZKo,h8,eZo,P_e,oZo,rZo,tZo,Ft,p8,aZo,B_e,nZo,sZo,bd,lZo,I_e,iZo,dZo,zX,cZo,fZo,mZo,GF,gZo,mo,_8,hZo,q_e,pZo,_Zo,Xa,uZo,N_e,bZo,vZo,j_e,FZo,TZo,D_e,MZo,EZo,CZo,Se,OF,G_e,wZo,AZo,WX,yZo,LZo,xZo,VF,O_e,$Zo,kZo,QX,SZo,RZo,PZo,XF,V_e,BZo,IZo,HX,qZo,NZo,jZo,zF,X_e,DZo,GZo,UX,OZo,VZo,XZo,WF,z_e,zZo,WZo,JX,QZo,HZo,UZo,QF,W_e,JZo,YZo,YX,KZo,ZZo,eer,HF,Q_e,oer,rer,KX,ter,aer,ner,UF,H_e,ser,ler,ZX,ier,der,cer,JF,U_e,fer,mer,ez,ger,her,per,YF,_er,J_e,uer,ber,Y_e,ver,Fer,KF,cNe,vd,ZF,K_e,u8,Ter,Z_e,Mer,fNe,Xo,b8,Eer,Fd,Cer,oz,wer,Aer,rz,yer,Ler,xer,v8,$er,eue,ker,Ser,Rer,Tt,F8,Per,oue,Ber,Ier,Td,qer,rue,Ner,jer,tz,Der,Ger,Oer,e0,Ver,go,T8,Xer,tue,zer,Wer,za,Qer,aue,Her,Uer,nue,Jer,Yer,sue,Ker,Zer,eor,M8,o0,lue,oor,ror,az,tor,aor,nor,r0,iue,sor,lor,nz,ior,dor,cor,t0,mor,due,gor,hor,cue,por,_or,a0,mNe,Md,n0,fue,E8,uor,mue,bor,gNe,zo,C8,vor,Ed,For,sz,Tor,Mor,lz,Eor,Cor,wor,w8,Aor,gue,yor,Lor,xor,Mt,A8,$or,hue,kor,Sor,Cd,Ror,pue,Por,Bor,iz,Ior,qor,Nor,s0,jor,ho,y8,Dor,_ue,Gor,Oor,Wa,Vor,uue,Xor,zor,bue,Wor,Qor,vue,Hor,Uor,Jor,Zr,l0,Fue,Yor,Kor,dz,Zor,err,orr,i0,Tue,rrr,trr,cz,arr,nrr,srr,d0,Mue,lrr,irr,fz,drr,crr,frr,c0,Eue,mrr,grr,mz,hrr,prr,_rr,f0,Cue,urr,brr,gz,vrr,Frr,Trr,m0,Mrr,wue,Err,Crr,Aue,wrr,Arr,g0,hNe,wd,h0,yue,L8,yrr,Lue,Lrr,pNe,Wo,x8,xrr,Ad,$rr,hz,krr,Srr,pz,Rrr,Prr,Brr,$8,Irr,xue,qrr,Nrr,jrr,Et,k8,Drr,$ue,Grr,Orr,yd,Vrr,kue,Xrr,zrr,_z,Wrr,Qrr,Hrr,p0,Urr,po,S8,Jrr,Sue,Yrr,Krr,Qa,Zrr,Rue,etr,otr,Pue,rtr,ttr,Bue,atr,ntr,str,Ld,_0,Iue,ltr,itr,uz,dtr,ctr,ftr,u0,que,mtr,gtr,bz,htr,ptr,_tr,b0,Nue,utr,btr,vz,vtr,Ftr,Ttr,v0,Mtr,jue,Etr,Ctr,Due,wtr,Atr,F0,_Ne,xd,T0,Gue,R8,ytr,Oue,Ltr,uNe,Qo,P8,xtr,$d,$tr,Fz,ktr,Str,Tz,Rtr,Ptr,Btr,B8,Itr,Vue,qtr,Ntr,jtr,Ct,I8,Dtr,Xue,Gtr,Otr,kd,Vtr,zue,Xtr,ztr,Mz,Wtr,Qtr,Htr,M0,Utr,_o,q8,Jtr,Wue,Ytr,Ktr,Ha,Ztr,Que,ear,oar,Hue,rar,tar,Uue,aar,nar,sar,N8,E0,Jue,lar,iar,Ez,dar,car,far,C0,Yue,mar,gar,Cz,har,par,_ar,w0,uar,Kue,bar,Far,Zue,Tar,Mar,A0,bNe,Sd,y0,e2e,j8,Ear,o2e,Car,vNe,Ho,D8,war,Rd,Aar,wz,yar,Lar,Az,xar,$ar,kar,G8,Sar,r2e,Rar,Par,Bar,wt,O8,Iar,t2e,qar,Nar,Pd,jar,a2e,Dar,Gar,yz,Oar,Var,Xar,L0,zar,uo,V8,War,n2e,Qar,Har,Ua,Uar,s2e,Jar,Yar,l2e,Kar,Zar,i2e,enr,onr,rnr,d2e,x0,c2e,tnr,anr,Lz,nnr,snr,lnr,$0,inr,f2e,dnr,cnr,m2e,fnr,mnr,k0,FNe,Bd,S0,g2e,X8,gnr,h2e,hnr,TNe,Uo,z8,pnr,Id,_nr,xz,unr,bnr,$z,vnr,Fnr,Tnr,W8,Mnr,p2e,Enr,Cnr,wnr,At,Q8,Anr,_2e,ynr,Lnr,qd,xnr,u2e,$nr,knr,kz,Snr,Rnr,Pnr,R0,Bnr,bo,H8,Inr,b2e,qnr,Nnr,Ja,jnr,v2e,Dnr,Gnr,F2e,Onr,Vnr,T2e,Xnr,znr,Wnr,et,P0,M2e,Qnr,Hnr,Sz,Unr,Jnr,Ynr,B0,E2e,Knr,Znr,Rz,esr,osr,rsr,I0,C2e,tsr,asr,Pz,nsr,ssr,lsr,q0,w2e,isr,dsr,Bz,csr,fsr,msr,N0,A2e,gsr,hsr,Iz,psr,_sr,usr,j0,bsr,y2e,vsr,Fsr,L2e,Tsr,Msr,D0,MNe,Nd,G0,x2e,U8,Esr,$2e,Csr,ENe,Jo,J8,wsr,jd,Asr,qz,ysr,Lsr,Nz,xsr,$sr,ksr,Y8,Ssr,k2e,Rsr,Psr,Bsr,yt,K8,Isr,S2e,qsr,Nsr,Dd,jsr,R2e,Dsr,Gsr,jz,Osr,Vsr,Xsr,O0,zsr,vo,Z8,Wsr,P2e,Qsr,Hsr,Ya,Usr,B2e,Jsr,Ysr,I2e,Ksr,Zsr,q2e,elr,olr,rlr,N2e,V0,j2e,tlr,alr,Dz,nlr,slr,llr,X0,ilr,D2e,dlr,clr,G2e,flr,mlr,z0,CNe,Gd,W0,O2e,eL,glr,V2e,hlr,wNe,Yo,oL,plr,Od,_lr,Gz,ulr,blr,Oz,vlr,Flr,Tlr,rL,Mlr,X2e,Elr,Clr,wlr,Lt,tL,Alr,z2e,ylr,Llr,Vd,xlr,W2e,$lr,klr,Vz,Slr,Rlr,Plr,Q0,Blr,wr,aL,Ilr,Q2e,qlr,Nlr,Ka,jlr,H2e,Dlr,Glr,U2e,Olr,Vlr,J2e,Xlr,zlr,Wlr,N,H0,Y2e,Qlr,Hlr,Xz,Ulr,Jlr,Ylr,U0,K2e,Klr,Zlr,zz,eir,oir,rir,J0,Z2e,tir,air,Wz,nir,sir,lir,Y0,e1e,iir,dir,Qz,cir,fir,mir,K0,o1e,gir,hir,Hz,pir,_ir,uir,Z0,r1e,bir,vir,Uz,Fir,Tir,Mir,eT,t1e,Eir,Cir,Jz,wir,Air,yir,oT,a1e,Lir,xir,Yz,$ir,kir,Sir,rT,n1e,Rir,Pir,Kz,Bir,Iir,qir,tT,s1e,Nir,jir,Zz,Dir,Gir,Oir,aT,l1e,Vir,Xir,eW,zir,Wir,Qir,nT,i1e,Hir,Uir,oW,Jir,Yir,Kir,sT,d1e,Zir,edr,rW,odr,rdr,tdr,lT,c1e,adr,ndr,tW,sdr,ldr,idr,iT,f1e,ddr,cdr,aW,fdr,mdr,gdr,dT,m1e,hdr,pdr,nW,_dr,udr,bdr,cT,g1e,vdr,Fdr,sW,Tdr,Mdr,Edr,Bs,h1e,Cdr,wdr,lW,Adr,ydr,iW,Ldr,xdr,$dr,fT,p1e,kdr,Sdr,dW,Rdr,Pdr,Bdr,mT,_1e,Idr,qdr,cW,Ndr,jdr,Ddr,gT,u1e,Gdr,Odr,fW,Vdr,Xdr,zdr,hT,b1e,Wdr,Qdr,mW,Hdr,Udr,Jdr,pT,v1e,Ydr,Kdr,gW,Zdr,ecr,ocr,_T,F1e,rcr,tcr,hW,acr,ncr,scr,uT,T1e,lcr,icr,pW,dcr,ccr,fcr,bT,M1e,mcr,gcr,_W,hcr,pcr,_cr,vT,E1e,ucr,bcr,uW,vcr,Fcr,Tcr,FT,C1e,Mcr,Ecr,bW,Ccr,wcr,Acr,TT,w1e,ycr,Lcr,vW,xcr,$cr,kcr,MT,A1e,Scr,Rcr,FW,Pcr,Bcr,Icr,ET,y1e,qcr,Ncr,TW,jcr,Dcr,Gcr,CT,L1e,Ocr,Vcr,MW,Xcr,zcr,Wcr,wT,x1e,Qcr,Hcr,EW,Ucr,Jcr,Ycr,AT,$1e,Kcr,Zcr,CW,efr,ofr,rfr,yT,k1e,tfr,afr,wW,nfr,sfr,lfr,LT,S1e,ifr,dfr,AW,cfr,ffr,mfr,xT,R1e,gfr,hfr,yW,pfr,_fr,ufr,$T,P1e,bfr,vfr,LW,Ffr,Tfr,Mfr,kT,B1e,Efr,Cfr,xW,wfr,Afr,yfr,ST,I1e,Lfr,xfr,$W,$fr,kfr,Sfr,RT,q1e,Rfr,Pfr,kW,Bfr,Ifr,qfr,PT,N1e,Nfr,jfr,SW,Dfr,Gfr,Ofr,BT,j1e,Vfr,Xfr,RW,zfr,Wfr,Qfr,IT,D1e,Hfr,Ufr,PW,Jfr,Yfr,Kfr,qT,G1e,Zfr,emr,BW,omr,rmr,tmr,NT,O1e,amr,nmr,IW,smr,lmr,imr,jT,ANe,Xd,DT,V1e,nL,dmr,X1e,cmr,yNe,Ko,sL,fmr,zd,mmr,qW,gmr,hmr,NW,pmr,_mr,umr,lL,bmr,z1e,vmr,Fmr,Tmr,xt,iL,Mmr,W1e,Emr,Cmr,Wd,wmr,Q1e,Amr,ymr,jW,Lmr,xmr,$mr,GT,kmr,Ar,dL,Smr,H1e,Rmr,Pmr,Za,Bmr,U1e,Imr,qmr,J1e,Nmr,jmr,Y1e,Dmr,Gmr,Omr,se,OT,K1e,Vmr,Xmr,DW,zmr,Wmr,Qmr,VT,Z1e,Hmr,Umr,GW,Jmr,Ymr,Kmr,XT,ebe,Zmr,egr,OW,ogr,rgr,tgr,zT,obe,agr,ngr,VW,sgr,lgr,igr,WT,rbe,dgr,cgr,XW,fgr,mgr,ggr,QT,tbe,hgr,pgr,zW,_gr,ugr,bgr,HT,abe,vgr,Fgr,WW,Tgr,Mgr,Egr,UT,nbe,Cgr,wgr,QW,Agr,ygr,Lgr,JT,sbe,xgr,$gr,HW,kgr,Sgr,Rgr,YT,lbe,Pgr,Bgr,UW,Igr,qgr,Ngr,KT,ibe,jgr,Dgr,JW,Ggr,Ogr,Vgr,ZT,dbe,Xgr,zgr,YW,Wgr,Qgr,Hgr,e7,cbe,Ugr,Jgr,KW,Ygr,Kgr,Zgr,o7,fbe,ehr,ohr,ZW,rhr,thr,ahr,r7,mbe,nhr,shr,eQ,lhr,ihr,dhr,t7,gbe,chr,fhr,oQ,mhr,ghr,hhr,a7,hbe,phr,_hr,rQ,uhr,bhr,vhr,n7,pbe,Fhr,Thr,tQ,Mhr,Ehr,Chr,s7,_be,whr,Ahr,aQ,yhr,Lhr,xhr,l7,ube,$hr,khr,nQ,Shr,Rhr,Phr,i7,bbe,Bhr,Ihr,sQ,qhr,Nhr,jhr,d7,vbe,Dhr,Ghr,lQ,Ohr,Vhr,Xhr,c7,Fbe,zhr,Whr,iQ,Qhr,Hhr,Uhr,f7,LNe,Qd,m7,Tbe,cL,Jhr,Mbe,Yhr,xNe,Zo,fL,Khr,Hd,Zhr,dQ,epr,opr,cQ,rpr,tpr,apr,mL,npr,Ebe,spr,lpr,ipr,$t,gL,dpr,Cbe,cpr,fpr,Ud,mpr,wbe,gpr,hpr,fQ,ppr,_pr,upr,g7,bpr,yr,hL,vpr,Abe,Fpr,Tpr,en,Mpr,ybe,Epr,Cpr,Lbe,wpr,Apr,xbe,ypr,Lpr,xpr,Me,h7,$be,$pr,kpr,mQ,Spr,Rpr,Ppr,p7,kbe,Bpr,Ipr,gQ,qpr,Npr,jpr,_7,Sbe,Dpr,Gpr,hQ,Opr,Vpr,Xpr,u7,Rbe,zpr,Wpr,pQ,Qpr,Hpr,Upr,b7,Pbe,Jpr,Ypr,_Q,Kpr,Zpr,e_r,v7,Bbe,o_r,r_r,uQ,t_r,a_r,n_r,F7,Ibe,s_r,l_r,bQ,i_r,d_r,c_r,T7,qbe,f_r,m_r,vQ,g_r,h_r,p_r,M7,Nbe,__r,u_r,FQ,b_r,v_r,F_r,E7,jbe,T_r,M_r,TQ,E_r,C_r,w_r,C7,Dbe,A_r,y_r,MQ,L_r,x_r,$_r,w7,Gbe,k_r,S_r,EQ,R_r,P_r,B_r,A7,$Ne,Jd,y7,Obe,pL,I_r,Vbe,q_r,kNe,er,_L,N_r,Yd,j_r,CQ,D_r,G_r,wQ,O_r,V_r,X_r,uL,z_r,Xbe,W_r,Q_r,H_r,kt,bL,U_r,zbe,J_r,Y_r,Kd,K_r,Wbe,Z_r,eur,AQ,our,rur,tur,L7,aur,Lr,vL,nur,Qbe,sur,lur,on,iur,Hbe,dur,cur,Ube,fur,mur,Jbe,gur,hur,pur,rn,x7,Ybe,_ur,uur,yQ,bur,vur,Fur,$7,Kbe,Tur,Mur,LQ,Eur,Cur,wur,k7,Zbe,Aur,yur,xQ,Lur,xur,$ur,S7,e5e,kur,Sur,$Q,Rur,Pur,Bur,R7,SNe,Zd,P7,o5e,FL,Iur,r5e,qur,RNe,or,TL,Nur,ec,jur,kQ,Dur,Gur,SQ,Our,Vur,Xur,ML,zur,t5e,Wur,Qur,Hur,St,EL,Uur,a5e,Jur,Yur,oc,Kur,n5e,Zur,e2r,RQ,o2r,r2r,t2r,B7,a2r,xr,CL,n2r,s5e,s2r,l2r,tn,i2r,l5e,d2r,c2r,i5e,f2r,m2r,d5e,g2r,h2r,p2r,ie,I7,c5e,_2r,u2r,PQ,b2r,v2r,F2r,q7,f5e,T2r,M2r,BQ,E2r,C2r,w2r,N7,m5e,A2r,y2r,IQ,L2r,x2r,$2r,j7,g5e,k2r,S2r,qQ,R2r,P2r,B2r,D7,h5e,I2r,q2r,NQ,N2r,j2r,D2r,G7,p5e,G2r,O2r,jQ,V2r,X2r,z2r,O7,_5e,W2r,Q2r,DQ,H2r,U2r,J2r,V7,u5e,Y2r,K2r,GQ,Z2r,e1r,o1r,X7,b5e,r1r,t1r,OQ,a1r,n1r,s1r,z7,v5e,l1r,i1r,VQ,d1r,c1r,f1r,W7,F5e,m1r,g1r,XQ,h1r,p1r,_1r,Q7,T5e,u1r,b1r,zQ,v1r,F1r,T1r,H7,M5e,M1r,E1r,WQ,C1r,w1r,A1r,U7,E5e,y1r,L1r,QQ,x1r,$1r,k1r,J7,C5e,S1r,R1r,HQ,P1r,B1r,I1r,Y7,w5e,q1r,N1r,UQ,j1r,D1r,G1r,K7,A5e,O1r,V1r,JQ,X1r,z1r,W1r,Z7,y5e,Q1r,H1r,YQ,U1r,J1r,Y1r,eM,L5e,K1r,Z1r,KQ,ebr,obr,rbr,oM,x5e,tbr,abr,ZQ,nbr,sbr,lbr,rM,PNe,rc,tM,$5e,wL,ibr,k5e,dbr,BNe,rr,AL,cbr,tc,fbr,eH,mbr,gbr,oH,hbr,pbr,_br,yL,ubr,S5e,bbr,vbr,Fbr,Rt,LL,Tbr,R5e,Mbr,Ebr,ac,Cbr,P5e,wbr,Abr,rH,ybr,Lbr,xbr,aM,$br,$r,xL,kbr,B5e,Sbr,Rbr,an,Pbr,I5e,Bbr,Ibr,q5e,qbr,Nbr,N5e,jbr,Dbr,Gbr,ye,nM,j5e,Obr,Vbr,tH,Xbr,zbr,Wbr,sM,D5e,Qbr,Hbr,aH,Ubr,Jbr,Ybr,lM,G5e,Kbr,Zbr,nH,e5r,o5r,r5r,iM,O5e,t5r,a5r,sH,n5r,s5r,l5r,dM,V5e,i5r,d5r,lH,c5r,f5r,m5r,cM,X5e,g5r,h5r,iH,p5r,_5r,u5r,fM,z5e,b5r,v5r,dH,F5r,T5r,M5r,mM,W5e,E5r,C5r,cH,w5r,A5r,y5r,gM,Q5e,L5r,x5r,fH,$5r,k5r,S5r,hM,H5e,R5r,P5r,mH,B5r,I5r,q5r,pM,INe,nc,_M,U5e,$L,N5r,J5e,j5r,qNe,tr,kL,D5r,sc,G5r,gH,O5r,V5r,hH,X5r,z5r,W5r,SL,Q5r,Y5e,H5r,U5r,J5r,Pt,RL,Y5r,K5e,K5r,Z5r,lc,evr,Z5e,ovr,rvr,pH,tvr,avr,nvr,uM,svr,kr,PL,lvr,eve,ivr,dvr,nn,cvr,ove,fvr,mvr,rve,gvr,hvr,tve,pvr,_vr,uvr,oe,bM,ave,bvr,vvr,_H,Fvr,Tvr,Mvr,vM,nve,Evr,Cvr,uH,wvr,Avr,yvr,FM,sve,Lvr,xvr,bH,$vr,kvr,Svr,TM,lve,Rvr,Pvr,vH,Bvr,Ivr,qvr,MM,ive,Nvr,jvr,FH,Dvr,Gvr,Ovr,EM,dve,Vvr,Xvr,TH,zvr,Wvr,Qvr,CM,cve,Hvr,Uvr,MH,Jvr,Yvr,Kvr,wM,fve,Zvr,eFr,EH,oFr,rFr,tFr,AM,mve,aFr,nFr,CH,sFr,lFr,iFr,yM,gve,dFr,cFr,wH,fFr,mFr,gFr,LM,hve,hFr,pFr,AH,_Fr,uFr,bFr,xM,pve,vFr,FFr,yH,TFr,MFr,EFr,$M,_ve,CFr,wFr,LH,AFr,yFr,LFr,kM,uve,xFr,$Fr,xH,kFr,SFr,RFr,SM,bve,PFr,BFr,$H,IFr,qFr,NFr,RM,vve,jFr,DFr,kH,GFr,OFr,VFr,PM,Fve,XFr,zFr,SH,WFr,QFr,HFr,BM,Tve,UFr,JFr,RH,YFr,KFr,ZFr,IM,Mve,e0r,o0r,PH,r0r,t0r,a0r,qM,Eve,n0r,s0r,BH,l0r,i0r,d0r,NM,Cve,c0r,f0r,IH,m0r,g0r,h0r,jM,wve,p0r,_0r,qH,u0r,b0r,v0r,DM,Ave,F0r,T0r,NH,M0r,E0r,C0r,GM,yve,w0r,A0r,jH,y0r,L0r,x0r,OM,Lve,$0r,k0r,DH,S0r,R0r,P0r,VM,xve,B0r,I0r,GH,q0r,N0r,j0r,XM,NNe,ic,zM,$ve,BL,D0r,kve,G0r,jNe,ar,IL,O0r,dc,V0r,OH,X0r,z0r,VH,W0r,Q0r,H0r,qL,U0r,Sve,J0r,Y0r,K0r,Bt,NL,Z0r,Rve,eTr,oTr,cc,rTr,Pve,tTr,aTr,XH,nTr,sTr,lTr,WM,iTr,Sr,jL,dTr,Bve,cTr,fTr,sn,mTr,Ive,gTr,hTr,qve,pTr,_Tr,Nve,uTr,bTr,vTr,he,QM,jve,FTr,TTr,zH,MTr,ETr,CTr,HM,Dve,wTr,ATr,WH,yTr,LTr,xTr,UM,Gve,$Tr,kTr,QH,STr,RTr,PTr,JM,Ove,BTr,ITr,HH,qTr,NTr,jTr,YM,Vve,DTr,GTr,UH,OTr,VTr,XTr,KM,Xve,zTr,WTr,JH,QTr,HTr,UTr,ZM,zve,JTr,YTr,YH,KTr,ZTr,e7r,e4,Wve,o7r,r7r,KH,t7r,a7r,n7r,o4,Qve,s7r,l7r,ZH,i7r,d7r,c7r,r4,Hve,f7r,m7r,eU,g7r,h7r,p7r,t4,Uve,_7r,u7r,oU,b7r,v7r,F7r,a4,Jve,T7r,M7r,rU,E7r,C7r,w7r,n4,Yve,A7r,y7r,tU,L7r,x7r,$7r,s4,Kve,k7r,S7r,aU,R7r,P7r,B7r,l4,Zve,I7r,q7r,nU,N7r,j7r,D7r,i4,eFe,G7r,O7r,sU,V7r,X7r,z7r,d4,oFe,W7r,Q7r,lU,H7r,U7r,J7r,c4,DNe,fc,f4,rFe,DL,Y7r,tFe,K7r,GNe,nr,GL,Z7r,mc,eMr,iU,oMr,rMr,dU,tMr,aMr,nMr,OL,sMr,aFe,lMr,iMr,dMr,It,VL,cMr,nFe,fMr,mMr,gc,gMr,sFe,hMr,pMr,cU,_Mr,uMr,bMr,m4,vMr,Rr,XL,FMr,lFe,TMr,MMr,ln,EMr,iFe,CMr,wMr,dFe,AMr,yMr,cFe,LMr,xMr,$Mr,zL,g4,fFe,kMr,SMr,fU,RMr,PMr,BMr,h4,mFe,IMr,qMr,mU,NMr,jMr,DMr,p4,ONe,hc,_4,gFe,WL,GMr,hFe,OMr,VNe,sr,QL,VMr,pc,XMr,gU,zMr,WMr,hU,QMr,HMr,UMr,HL,JMr,pFe,YMr,KMr,ZMr,qt,UL,e4r,_Fe,o4r,r4r,_c,t4r,uFe,a4r,n4r,pU,s4r,l4r,i4r,u4,d4r,Pr,JL,c4r,bFe,f4r,m4r,dn,g4r,vFe,h4r,p4r,FFe,_4r,u4r,TFe,b4r,v4r,F4r,MFe,b4,EFe,T4r,M4r,_U,E4r,C4r,w4r,v4,XNe,uc,F4,CFe,YL,A4r,wFe,y4r,zNe,lr,KL,L4r,bc,x4r,uU,$4r,k4r,bU,S4r,R4r,P4r,ZL,B4r,AFe,I4r,q4r,N4r,Nt,e9,j4r,yFe,D4r,G4r,vc,O4r,LFe,V4r,X4r,vU,z4r,W4r,Q4r,T4,H4r,Br,o9,U4r,xFe,J4r,Y4r,cn,K4r,$Fe,Z4r,eEr,kFe,oEr,rEr,SFe,tEr,aEr,nEr,de,M4,RFe,sEr,lEr,FU,iEr,dEr,cEr,E4,PFe,fEr,mEr,TU,gEr,hEr,pEr,C4,BFe,_Er,uEr,MU,bEr,vEr,FEr,w4,IFe,TEr,MEr,EU,EEr,CEr,wEr,A4,qFe,AEr,yEr,CU,LEr,xEr,$Er,y4,NFe,kEr,SEr,wU,REr,PEr,BEr,L4,jFe,IEr,qEr,AU,NEr,jEr,DEr,x4,DFe,GEr,OEr,yU,VEr,XEr,zEr,$4,GFe,WEr,QEr,LU,HEr,UEr,JEr,k4,OFe,YEr,KEr,xU,ZEr,eCr,oCr,S4,VFe,rCr,tCr,$U,aCr,nCr,sCr,R4,XFe,lCr,iCr,kU,dCr,cCr,fCr,P4,zFe,mCr,gCr,SU,hCr,pCr,_Cr,B4,WFe,uCr,bCr,RU,vCr,FCr,TCr,I4,QFe,MCr,ECr,PU,CCr,wCr,ACr,q4,HFe,yCr,LCr,BU,xCr,$Cr,kCr,N4,UFe,SCr,RCr,IU,PCr,BCr,ICr,j4,JFe,qCr,NCr,qU,jCr,DCr,GCr,D4,YFe,OCr,VCr,NU,XCr,zCr,WCr,G4,KFe,QCr,HCr,jU,UCr,JCr,YCr,O4,WNe,Fc,V4,ZFe,r9,KCr,e0e,ZCr,QNe,ir,t9,e3r,Tc,o3r,DU,r3r,t3r,GU,a3r,n3r,s3r,a9,l3r,o0e,i3r,d3r,c3r,jt,n9,f3r,r0e,m3r,g3r,Mc,h3r,t0e,p3r,_3r,OU,u3r,b3r,v3r,X4,F3r,Ir,s9,T3r,a0e,M3r,E3r,fn,C3r,n0e,w3r,A3r,s0e,y3r,L3r,l0e,x3r,$3r,k3r,ce,z4,i0e,S3r,R3r,VU,P3r,B3r,I3r,W4,d0e,q3r,N3r,XU,j3r,D3r,G3r,Q4,c0e,O3r,V3r,zU,X3r,z3r,W3r,H4,f0e,Q3r,H3r,WU,U3r,J3r,Y3r,U4,m0e,K3r,Z3r,QU,ewr,owr,rwr,J4,g0e,twr,awr,HU,nwr,swr,lwr,Y4,h0e,iwr,dwr,UU,cwr,fwr,mwr,K4,p0e,gwr,hwr,JU,pwr,_wr,uwr,Z4,_0e,bwr,vwr,YU,Fwr,Twr,Mwr,eE,u0e,Ewr,Cwr,KU,wwr,Awr,ywr,oE,b0e,Lwr,xwr,ZU,$wr,kwr,Swr,rE,v0e,Rwr,Pwr,eJ,Bwr,Iwr,qwr,tE,F0e,Nwr,jwr,oJ,Dwr,Gwr,Owr,aE,T0e,Vwr,Xwr,rJ,zwr,Wwr,Qwr,nE,M0e,Hwr,Uwr,tJ,Jwr,Ywr,Kwr,sE,E0e,Zwr,e6r,aJ,o6r,r6r,t6r,lE,C0e,a6r,n6r,nJ,s6r,l6r,i6r,iE,w0e,d6r,c6r,sJ,f6r,m6r,g6r,dE,A0e,h6r,p6r,lJ,_6r,u6r,b6r,cE,y0e,v6r,F6r,iJ,T6r,M6r,E6r,fE,HNe,Ec,mE,L0e,l9,C6r,x0e,w6r,UNe,dr,i9,A6r,Cc,y6r,dJ,L6r,x6r,cJ,$6r,k6r,S6r,d9,R6r,$0e,P6r,B6r,I6r,Dt,c9,q6r,k0e,N6r,j6r,wc,D6r,S0e,G6r,O6r,fJ,V6r,X6r,z6r,gE,W6r,qr,f9,Q6r,R0e,H6r,U6r,mn,J6r,P0e,Y6r,K6r,B0e,Z6r,eAr,I0e,oAr,rAr,tAr,q0e,hE,N0e,aAr,nAr,mJ,sAr,lAr,iAr,pE,JNe,Ac,_E,j0e,m9,dAr,D0e,cAr,YNe,cr,g9,fAr,yc,mAr,gJ,gAr,hAr,hJ,pAr,_Ar,uAr,h9,bAr,G0e,vAr,FAr,TAr,Gt,p9,MAr,O0e,EAr,CAr,Lc,wAr,V0e,AAr,yAr,pJ,LAr,xAr,$Ar,uE,kAr,Nr,_9,SAr,X0e,RAr,PAr,gn,BAr,z0e,IAr,qAr,W0e,NAr,jAr,Q0e,DAr,GAr,OAr,H0e,bE,U0e,VAr,XAr,_J,zAr,WAr,QAr,vE,KNe,xc,FE,J0e,u9,HAr,Y0e,UAr,ZNe,fr,b9,JAr,$c,YAr,uJ,KAr,ZAr,bJ,eyr,oyr,ryr,v9,tyr,K0e,ayr,nyr,syr,Ot,F9,lyr,Z0e,iyr,dyr,kc,cyr,eTe,fyr,myr,vJ,gyr,hyr,pyr,TE,_yr,jr,T9,uyr,oTe,byr,vyr,hn,Fyr,rTe,Tyr,Myr,tTe,Eyr,Cyr,aTe,wyr,Ayr,yyr,te,ME,nTe,Lyr,xyr,FJ,$yr,kyr,Syr,EE,sTe,Ryr,Pyr,TJ,Byr,Iyr,qyr,CE,lTe,Nyr,jyr,MJ,Dyr,Gyr,Oyr,wE,iTe,Vyr,Xyr,EJ,zyr,Wyr,Qyr,AE,dTe,Hyr,Uyr,CJ,Jyr,Yyr,Kyr,yE,cTe,Zyr,e8r,wJ,o8r,r8r,t8r,LE,fTe,a8r,n8r,AJ,s8r,l8r,i8r,xE,mTe,d8r,c8r,yJ,f8r,m8r,g8r,$E,gTe,h8r,p8r,LJ,_8r,u8r,b8r,kE,hTe,v8r,F8r,xJ,T8r,M8r,E8r,SE,pTe,C8r,w8r,$J,A8r,y8r,L8r,RE,_Te,x8r,$8r,kJ,k8r,S8r,R8r,PE,uTe,P8r,B8r,SJ,I8r,q8r,N8r,BE,bTe,j8r,D8r,RJ,G8r,O8r,V8r,IE,vTe,X8r,z8r,PJ,W8r,Q8r,H8r,qE,FTe,U8r,J8r,BJ,Y8r,K8r,Z8r,NE,TTe,eLr,oLr,IJ,rLr,tLr,aLr,jE,MTe,nLr,sLr,qJ,lLr,iLr,dLr,DE,ETe,cLr,fLr,NJ,mLr,gLr,hLr,GE,CTe,pLr,_Lr,jJ,uLr,bLr,vLr,OE,wTe,FLr,TLr,DJ,MLr,ELr,CLr,VE,ATe,wLr,ALr,GJ,yLr,LLr,xLr,XE,yTe,$Lr,kLr,OJ,SLr,RLr,PLr,zE,LTe,BLr,ILr,VJ,qLr,NLr,jLr,WE,xTe,DLr,GLr,XJ,OLr,VLr,XLr,QE,eje,Sc,HE,$Te,M9,zLr,kTe,WLr,oje,mr,E9,QLr,Rc,HLr,zJ,ULr,JLr,WJ,YLr,KLr,ZLr,C9,e9r,STe,o9r,r9r,t9r,Vt,w9,a9r,RTe,n9r,s9r,Pc,l9r,PTe,i9r,d9r,QJ,c9r,f9r,m9r,UE,g9r,Dr,A9,h9r,BTe,p9r,_9r,pn,u9r,ITe,b9r,v9r,qTe,F9r,T9r,NTe,M9r,E9r,C9r,Re,JE,jTe,w9r,A9r,HJ,y9r,L9r,x9r,YE,DTe,$9r,k9r,UJ,S9r,R9r,P9r,KE,GTe,B9r,I9r,JJ,q9r,N9r,j9r,ZE,OTe,D9r,G9r,YJ,O9r,V9r,X9r,eC,VTe,z9r,W9r,KJ,Q9r,H9r,U9r,oC,XTe,J9r,Y9r,ZJ,K9r,Z9r,exr,rC,zTe,oxr,rxr,eY,txr,axr,nxr,tC,WTe,sxr,lxr,oY,ixr,dxr,cxr,aC,QTe,fxr,mxr,rY,gxr,hxr,pxr,nC,rje,Bc,sC,HTe,y9,_xr,UTe,uxr,tje,gr,L9,bxr,Ic,vxr,tY,Fxr,Txr,aY,Mxr,Exr,Cxr,x9,wxr,JTe,Axr,yxr,Lxr,Xt,$9,xxr,YTe,$xr,kxr,qc,Sxr,KTe,Rxr,Pxr,nY,Bxr,Ixr,qxr,lC,Nxr,Gr,k9,jxr,ZTe,Dxr,Gxr,_n,Oxr,e7e,Vxr,Xxr,o7e,zxr,Wxr,r7e,Qxr,Hxr,Uxr,Ee,iC,t7e,Jxr,Yxr,sY,Kxr,Zxr,e$r,dC,a7e,o$r,r$r,lY,t$r,a$r,n$r,cC,n7e,s$r,l$r,iY,i$r,d$r,c$r,fC,s7e,f$r,m$r,dY,g$r,h$r,p$r,mC,l7e,_$r,u$r,cY,b$r,v$r,F$r,gC,i7e,T$r,M$r,fY,E$r,C$r,w$r,hC,d7e,A$r,y$r,mY,L$r,x$r,$$r,pC,c7e,k$r,S$r,gY,R$r,P$r,B$r,_C,f7e,I$r,q$r,hY,N$r,j$r,D$r,uC,m7e,G$r,O$r,pY,V$r,X$r,z$r,bC,g7e,W$r,Q$r,_Y,H$r,U$r,J$r,vC,h7e,Y$r,K$r,uY,Z$r,ekr,okr,FC,aje,Nc,TC,p7e,S9,rkr,_7e,tkr,nje,hr,R9,akr,jc,nkr,bY,skr,lkr,vY,ikr,dkr,ckr,P9,fkr,u7e,mkr,gkr,hkr,zt,B9,pkr,b7e,_kr,ukr,Dc,bkr,v7e,vkr,Fkr,FY,Tkr,Mkr,Ekr,MC,Ckr,Or,I9,wkr,F7e,Akr,ykr,un,Lkr,T7e,xkr,$kr,M7e,kkr,Skr,E7e,Rkr,Pkr,Bkr,Le,EC,C7e,Ikr,qkr,TY,Nkr,jkr,Dkr,CC,w7e,Gkr,Okr,MY,Vkr,Xkr,zkr,wC,A7e,Wkr,Qkr,EY,Hkr,Ukr,Jkr,AC,y7e,Ykr,Kkr,CY,Zkr,eSr,oSr,yC,L7e,rSr,tSr,wY,aSr,nSr,sSr,LC,x7e,lSr,iSr,AY,dSr,cSr,fSr,xC,$7e,mSr,gSr,yY,hSr,pSr,_Sr,$C,k7e,uSr,bSr,LY,vSr,FSr,TSr,kC,S7e,MSr,ESr,xY,CSr,wSr,ASr,SC,R7e,ySr,LSr,$Y,xSr,$Sr,kSr,RC,sje,Gc,PC,P7e,q9,SSr,B7e,RSr,lje,pr,N9,PSr,Oc,BSr,kY,ISr,qSr,SY,NSr,jSr,DSr,j9,GSr,I7e,OSr,VSr,XSr,Wt,D9,zSr,q7e,WSr,QSr,Vc,HSr,N7e,USr,JSr,RY,YSr,KSr,ZSr,BC,eRr,Vr,G9,oRr,j7e,rRr,tRr,bn,aRr,D7e,nRr,sRr,G7e,lRr,iRr,O7e,dRr,cRr,fRr,Pe,IC,V7e,mRr,gRr,PY,hRr,pRr,_Rr,qC,X7e,uRr,bRr,BY,vRr,FRr,TRr,NC,z7e,MRr,ERr,IY,CRr,wRr,ARr,jC,W7e,yRr,LRr,qY,xRr,$Rr,kRr,DC,Q7e,SRr,RRr,NY,PRr,BRr,IRr,GC,H7e,qRr,NRr,jY,jRr,DRr,GRr,OC,U7e,ORr,VRr,DY,XRr,zRr,WRr,VC,J7e,QRr,HRr,GY,URr,JRr,YRr,XC,Y7e,KRr,ZRr,OY,ePr,oPr,rPr,zC,ije,Xc,WC,K7e,O9,tPr,Z7e,aPr,dje,_r,V9,nPr,zc,sPr,VY,lPr,iPr,XY,dPr,cPr,fPr,X9,mPr,eMe,gPr,hPr,pPr,Qt,z9,_Pr,oMe,uPr,bPr,Wc,vPr,rMe,FPr,TPr,zY,MPr,EPr,CPr,QC,wPr,Xr,W9,APr,tMe,yPr,LPr,vn,xPr,aMe,$Pr,kPr,nMe,SPr,RPr,sMe,PPr,BPr,IPr,xe,HC,lMe,qPr,NPr,WY,jPr,DPr,GPr,UC,iMe,OPr,VPr,QY,XPr,zPr,WPr,JC,dMe,QPr,HPr,HY,UPr,JPr,YPr,YC,cMe,KPr,ZPr,UY,eBr,oBr,rBr,KC,fMe,tBr,aBr,JY,nBr,sBr,lBr,ZC,mMe,iBr,dBr,YY,cBr,fBr,mBr,e3,gMe,gBr,hBr,KY,pBr,_Br,uBr,o3,hMe,bBr,vBr,ZY,FBr,TBr,MBr,r3,pMe,EBr,CBr,eK,wBr,ABr,yBr,t3,_Me,LBr,xBr,oK,$Br,kBr,SBr,a3,cje,Qc,n3,uMe,Q9,RBr,bMe,PBr,fje,ur,H9,BBr,Hc,IBr,rK,qBr,NBr,tK,jBr,DBr,GBr,U9,OBr,vMe,VBr,XBr,zBr,Ht,J9,WBr,FMe,QBr,HBr,Uc,UBr,TMe,JBr,YBr,aK,KBr,ZBr,eIr,s3,oIr,zr,Y9,rIr,MMe,tIr,aIr,Fn,nIr,EMe,sIr,lIr,CMe,iIr,dIr,wMe,cIr,fIr,mIr,$e,l3,AMe,gIr,hIr,nK,pIr,_Ir,uIr,i3,yMe,bIr,vIr,sK,FIr,TIr,MIr,d3,LMe,EIr,CIr,lK,wIr,AIr,yIr,c3,xMe,LIr,xIr,iK,$Ir,kIr,SIr,f3,$Me,RIr,PIr,dK,BIr,IIr,qIr,m3,kMe,NIr,jIr,cK,DIr,GIr,OIr,g3,SMe,VIr,XIr,fK,zIr,WIr,QIr,h3,RMe,HIr,UIr,mK,JIr,YIr,KIr,p3,PMe,ZIr,eqr,gK,oqr,rqr,tqr,_3,BMe,aqr,nqr,hK,sqr,lqr,iqr,u3,mje,Jc,b3,IMe,K9,dqr,qMe,cqr,gje,br,Z9,fqr,Yc,mqr,pK,gqr,hqr,_K,pqr,_qr,uqr,ex,bqr,NMe,vqr,Fqr,Tqr,Ut,ox,Mqr,jMe,Eqr,Cqr,Kc,wqr,DMe,Aqr,yqr,uK,Lqr,xqr,$qr,v3,kqr,Wr,rx,Sqr,GMe,Rqr,Pqr,Tn,Bqr,OMe,Iqr,qqr,VMe,Nqr,jqr,XMe,Dqr,Gqr,Oqr,De,F3,zMe,Vqr,Xqr,bK,zqr,Wqr,Qqr,T3,WMe,Hqr,Uqr,vK,Jqr,Yqr,Kqr,M3,QMe,Zqr,eNr,FK,oNr,rNr,tNr,E3,HMe,aNr,nNr,TK,sNr,lNr,iNr,C3,UMe,dNr,cNr,MK,fNr,mNr,gNr,w3,JMe,hNr,pNr,EK,_Nr,uNr,bNr,A3,YMe,vNr,FNr,CK,TNr,MNr,ENr,y3,KMe,CNr,wNr,wK,ANr,yNr,LNr,L3,hje,Zc,x3,ZMe,tx,xNr,e4e,$Nr,pje,vr,ax,kNr,ef,SNr,AK,RNr,PNr,yK,BNr,INr,qNr,nx,NNr,o4e,jNr,DNr,GNr,Jt,sx,ONr,r4e,VNr,XNr,of,zNr,t4e,WNr,QNr,LK,HNr,UNr,JNr,$3,YNr,Qr,lx,KNr,a4e,ZNr,ejr,Mn,ojr,n4e,rjr,tjr,s4e,ajr,njr,l4e,sjr,ljr,ijr,Ge,k3,i4e,djr,cjr,xK,fjr,mjr,gjr,S3,d4e,hjr,pjr,$K,_jr,ujr,bjr,R3,c4e,vjr,Fjr,kK,Tjr,Mjr,Ejr,P3,f4e,Cjr,wjr,SK,Ajr,yjr,Ljr,B3,m4e,xjr,$jr,RK,kjr,Sjr,Rjr,I3,g4e,Pjr,Bjr,PK,Ijr,qjr,Njr,q3,h4e,jjr,Djr,BK,Gjr,Ojr,Vjr,N3,p4e,Xjr,zjr,IK,Wjr,Qjr,Hjr,j3,_je,rf,D3,_4e,ix,Ujr,u4e,Jjr,uje,Fr,dx,Yjr,tf,Kjr,qK,Zjr,eDr,NK,oDr,rDr,tDr,cx,aDr,b4e,nDr,sDr,lDr,Yt,fx,iDr,v4e,dDr,cDr,af,fDr,F4e,mDr,gDr,jK,hDr,pDr,_Dr,G3,uDr,Hr,mx,bDr,T4e,vDr,FDr,En,TDr,M4e,MDr,EDr,E4e,CDr,wDr,C4e,ADr,yDr,LDr,w4e,O3,A4e,xDr,$Dr,DK,kDr,SDr,RDr,V3,bje,nf,X3,y4e,gx,PDr,L4e,BDr,vje,Tr,hx,IDr,sf,qDr,GK,NDr,jDr,OK,DDr,GDr,ODr,px,VDr,x4e,XDr,zDr,WDr,Kt,_x,QDr,$4e,HDr,UDr,lf,JDr,k4e,YDr,KDr,VK,ZDr,eGr,oGr,z3,rGr,Ur,ux,tGr,S4e,aGr,nGr,Cn,sGr,R4e,lGr,iGr,P4e,dGr,cGr,B4e,fGr,mGr,gGr,bx,W3,I4e,hGr,pGr,XK,_Gr,uGr,bGr,Q3,q4e,vGr,FGr,zK,TGr,MGr,EGr,H3,Fje,df,U3,N4e,vx,CGr,j4e,wGr,Tje,Mr,Fx,AGr,cf,yGr,WK,LGr,xGr,QK,$Gr,kGr,SGr,Tx,RGr,D4e,PGr,BGr,IGr,Zt,Mx,qGr,G4e,NGr,jGr,ff,DGr,O4e,GGr,OGr,HK,VGr,XGr,zGr,J3,WGr,Jr,Ex,QGr,V4e,HGr,UGr,wn,JGr,X4e,YGr,KGr,z4e,ZGr,eOr,W4e,oOr,rOr,tOr,Q4e,Y3,H4e,aOr,nOr,UK,sOr,lOr,iOr,K3,Mje;return d=new re({}),wa=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),vA=new re({}),FA=new P({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Ff=new dOr({props:{warning:!0,$$slots:{default:[y9t]},$$scope:{ctx:L}}}),TA=new re({}),MA=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/configuration_auto.py#L581"}}),wA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/configuration_auto.py#L604"}}),Mg=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[L9t]},$$scope:{ctx:L}}}),AA=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/configuration_auto.py#L727"}}),yA=new re({}),LA=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/tokenization_auto.py#L388"}}),kA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_17205/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/tokenization_auto.py#L402"}}),rh=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[x9t]},$$scope:{ctx:L}}}),SA=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/tokenization_auto.py#L598"}}),RA=new re({}),PA=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/feature_extraction_auto.py#L189"}}),qA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_17205/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/feature_extraction_auto.py#L203"}}),Rh=new dOr({props:{$$slots:{default:[$9t]},$$scope:{ctx:L}}}),Ph=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[k9t]},$$scope:{ctx:L}}}),NA=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/feature_extraction_auto.py#L330"}}),jA=new re({}),DA=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/processing_auto.py#L87"}}),VA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/processing_auto.py#L101"}}),Zh=new dOr({props:{$$slots:{default:[S9t]},$$scope:{ctx:L}}}),ep=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[R9t]},$$scope:{ctx:L}}}),XA=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/processing_auto.py#L254"}}),zA=new re({}),WA=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/modeling_auto.py#L732"}}),HA=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17205/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (Flava model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_17205/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/mobilevit#transformers.MobileViTModel">MobileViTModel</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L389"}}),tp=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[P9t]},$$scope:{ctx:L}}}),UA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L417"}}),Y_=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[B9t]},$$scope:{ctx:L}}}),JA=new re({}),YA=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/modeling_auto.py#L739"}}),ZA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17205/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (Flava model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L389"}}),Z_=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[I9t]},$$scope:{ctx:L}}}),ey=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L417"}}),Vu=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[q9t]},$$scope:{ctx:L}}}),oy=new re({}),ry=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/modeling_auto.py#L754"}}),ay=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17205/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L389"}}),zu=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[N9t]},$$scope:{ctx:L}}}),ny=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L417"}}),x2=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[j9t]},$$scope:{ctx:L}}}),sy=new re({}),ly=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/modeling_auto.py#L761"}}),dy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17205/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L389"}}),k2=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[D9t]},$$scope:{ctx:L}}}),cy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L417"}}),h1=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[G9t]},$$scope:{ctx:L}}}),fy=new re({}),my=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/modeling_auto.py#L768"}}),hy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17205/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L389"}}),_1=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[O9t]},$$scope:{ctx:L}}}),py=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L417"}}),P1=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[V9t]},$$scope:{ctx:L}}}),_y=new re({}),uy=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/modeling_auto.py#L777"}}),vy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17205/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L389"}}),I1=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[X9t]},$$scope:{ctx:L}}}),Fy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L417"}}),$b=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[z9t]},$$scope:{ctx:L}}}),Ty=new re({}),My=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/modeling_auto.py#L811"}}),Cy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17205/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L389"}}),Sb=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[W9t]},$$scope:{ctx:L}}}),wy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L417"}}),d5=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[Q9t]},$$scope:{ctx:L}}}),Ay=new re({}),yy=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/modeling_auto.py#L818"}}),xy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17205/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L389"}}),f5=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[H9t]},$$scope:{ctx:L}}}),$y=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L417"}}),b5=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[U9t]},$$scope:{ctx:L}}}),ky=new re({}),Sy=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/modeling_auto.py#L804"}}),Py=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17205/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L389"}}),F5=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[J9t]},$$scope:{ctx:L}}}),By=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L417"}}),ov=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[Y9t]},$$scope:{ctx:L}}}),Iy=new re({}),qy=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/modeling_auto.py#L786"}}),jy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17205/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L389"}}),tv=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[K9t]},$$scope:{ctx:L}}}),Dy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L417"}}),Xv=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[Z9t]},$$scope:{ctx:L}}}),Gy=new re({}),Oy=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/modeling_auto.py#L793"}}),Xy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17205/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L389"}}),Wv=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[ext]},$$scope:{ctx:L}}}),zy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L417"}}),Uv=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[oxt]},$$scope:{ctx:L}}}),Wy=new re({}),Qy=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/modeling_auto.py#L827"}}),Uy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17205/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_17205/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/mobilevit#transformers.MobileViTForImageClassification">MobileViTForImageClassification</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_17205/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_17205/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L389"}}),Yv=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[rxt]},$$scope:{ctx:L}}}),Jy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L417"}}),mF=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[txt]},$$scope:{ctx:L}}}),Yy=new re({}),Ky=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/modeling_auto.py#L866"}}),e8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17205/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L389"}}),hF=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[axt]},$$scope:{ctx:L}}}),o8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L417"}}),uF=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[nxt]},$$scope:{ctx:L}}}),r8=new re({}),t8=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/modeling_auto.py#L873"}}),n8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17205/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L389"}}),vF=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[sxt]},$$scope:{ctx:L}}}),s8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L417"}}),$F=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[lxt]},$$scope:{ctx:L}}}),l8=new re({}),i8=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/modeling_auto.py#L896"}}),c8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17205/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L389"}}),SF=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[ixt]},$$scope:{ctx:L}}}),f8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L417"}}),jF=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[dxt]},$$scope:{ctx:L}}}),m8=new re({}),g8=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/modeling_auto.py#L880"}}),p8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17205/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L389"}}),GF=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[cxt]},$$scope:{ctx:L}}}),_8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L417"}}),KF=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[fxt]},$$scope:{ctx:L}}}),u8=new re({}),b8=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/modeling_auto.py#L887"}}),F8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17205/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L389"}}),e0=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[mxt]},$$scope:{ctx:L}}}),T8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L417"}}),a0=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[gxt]},$$scope:{ctx:L}}}),E8=new re({}),C8=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/modeling_auto.py#L905"}}),A8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17205/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L389"}}),s0=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[hxt]},$$scope:{ctx:L}}}),y8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L417"}}),g0=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[pxt]},$$scope:{ctx:L}}}),L8=new re({}),x8=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/modeling_auto.py#L912"}}),k8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17205/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L389"}}),p0=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[_xt]},$$scope:{ctx:L}}}),S8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L417"}}),F0=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[uxt]},$$scope:{ctx:L}}}),R8=new re({}),P8=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/modeling_auto.py#L859"}}),I8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17205/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L389"}}),M0=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[bxt]},$$scope:{ctx:L}}}),q8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L417"}}),A0=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[vxt]},$$scope:{ctx:L}}}),j8=new re({}),D8=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/modeling_auto.py#L834"}}),O8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17205/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L389"}}),L0=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[Fxt]},$$scope:{ctx:L}}}),V8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L417"}}),k0=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[Txt]},$$scope:{ctx:L}}}),X8=new re({}),z8=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/modeling_auto.py#L841"}}),Q8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17205/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation">MobileViTForSemanticSegmentation</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L389"}}),R0=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[Mxt]},$$scope:{ctx:L}}}),H8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L417"}}),D0=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[Ext]},$$scope:{ctx:L}}}),U8=new re({}),J8=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/modeling_auto.py#L850"}}),K8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17205/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L389"}}),O0=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[Cxt]},$$scope:{ctx:L}}}),Z8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L417"}}),z0=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[wxt]},$$scope:{ctx:L}}}),eL=new re({}),oL=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/modeling_tf_auto.py#L394"}}),tL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17205/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_17205/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L389"}}),Q0=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[Axt]},$$scope:{ctx:L}}}),aL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L417"}}),jT=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[yxt]},$$scope:{ctx:L}}}),nL=new re({}),sL=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/modeling_tf_auto.py#L401"}}),iL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17205/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L389"}}),GT=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[Lxt]},$$scope:{ctx:L}}}),dL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L417"}}),f7=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[xxt]},$$scope:{ctx:L}}}),cL=new re({}),fL=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/modeling_tf_auto.py#L416"}}),gL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17205/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L389"}}),g7=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[$xt]},$$scope:{ctx:L}}}),hL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L417"}}),A7=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[kxt]},$$scope:{ctx:L}}}),pL=new re({}),_L=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/modeling_tf_auto.py#L432"}}),bL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17205/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L389"}}),L7=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[Sxt]},$$scope:{ctx:L}}}),vL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L417"}}),R7=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[Rxt]},$$scope:{ctx:L}}}),FL=new re({}),TL=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/modeling_tf_auto.py#L448"}}),EL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17205/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L389"}}),B7=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[Pxt]},$$scope:{ctx:L}}}),CL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L417"}}),rM=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[Bxt]},$$scope:{ctx:L}}}),wL=new re({}),AL=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/modeling_tf_auto.py#L455"}}),LL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17205/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L389"}}),aM=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[Ixt]},$$scope:{ctx:L}}}),xL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L417"}}),pM=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[qxt]},$$scope:{ctx:L}}}),$L=new re({}),kL=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/modeling_tf_auto.py#L464"}}),RL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17205/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L389"}}),uM=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[Nxt]},$$scope:{ctx:L}}}),PL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L417"}}),XM=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[jxt]},$$scope:{ctx:L}}}),BL=new re({}),IL=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/modeling_tf_auto.py#L500"}}),NL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17205/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L389"}}),WM=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[Dxt]},$$scope:{ctx:L}}}),jL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L417"}}),c4=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[Gxt]},$$scope:{ctx:L}}}),DL=new re({}),GL=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/modeling_tf_auto.py#L507"}}),VL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17205/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L389"}}),m4=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[Oxt]},$$scope:{ctx:L}}}),XL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L417"}}),p4=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[Vxt]},$$scope:{ctx:L}}}),WL=new re({}),QL=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/modeling_tf_auto.py#L480"}}),UL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17205/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L389"}}),u4=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[Xxt]},$$scope:{ctx:L}}}),JL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L417"}}),v4=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[zxt]},$$scope:{ctx:L}}}),YL=new re({}),KL=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/modeling_tf_auto.py#L491"}}),e9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17205/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L389"}}),T4=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[Wxt]},$$scope:{ctx:L}}}),o9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L417"}}),O4=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[Qxt]},$$scope:{ctx:L}}}),r9=new re({}),t9=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/modeling_tf_auto.py#L473"}}),n9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17205/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L389"}}),X4=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[Hxt]},$$scope:{ctx:L}}}),s9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L417"}}),fE=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[Uxt]},$$scope:{ctx:L}}}),l9=new re({}),i9=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/modeling_tf_auto.py#L441"}}),c9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17205/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L389"}}),gE=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[Jxt]},$$scope:{ctx:L}}}),f9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L417"}}),pE=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[Yxt]},$$scope:{ctx:L}}}),m9=new re({}),g9=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/modeling_tf_auto.py#L516"}}),p9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17205/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L389"}}),uE=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[Kxt]},$$scope:{ctx:L}}}),_9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L417"}}),vE=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[Zxt]},$$scope:{ctx:L}}}),u9=new re({}),b9=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/modeling_flax_auto.py#L241"}}),F9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17205/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L389"}}),TE=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[e$t]},$$scope:{ctx:L}}}),T9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L417"}}),QE=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[o$t]},$$scope:{ctx:L}}}),M9=new re({}),E9=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/modeling_flax_auto.py#L255"}}),w9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17205/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L389"}}),UE=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[r$t]},$$scope:{ctx:L}}}),A9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L417"}}),nC=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[t$t]},$$scope:{ctx:L}}}),y9=new re({}),L9=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/modeling_flax_auto.py#L248"}}),$9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17205/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L389"}}),lC=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[a$t]},$$scope:{ctx:L}}}),k9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L417"}}),FC=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[n$t]},$$scope:{ctx:L}}}),S9=new re({}),R9=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/modeling_flax_auto.py#L262"}}),B9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17205/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L389"}}),MC=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[s$t]},$$scope:{ctx:L}}}),I9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L417"}}),RC=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[l$t]},$$scope:{ctx:L}}}),q9=new re({}),N9=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/modeling_flax_auto.py#L269"}}),D9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17205/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L389"}}),BC=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[i$t]},$$scope:{ctx:L}}}),G9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L417"}}),zC=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[d$t]},$$scope:{ctx:L}}}),O9=new re({}),V9=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/modeling_flax_auto.py#L278"}}),z9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17205/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L389"}}),QC=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[c$t]},$$scope:{ctx:L}}}),W9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L417"}}),a3=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[f$t]},$$scope:{ctx:L}}}),Q9=new re({}),H9=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/modeling_flax_auto.py#L287"}}),J9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17205/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L389"}}),s3=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[m$t]},$$scope:{ctx:L}}}),Y9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L417"}}),u3=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[g$t]},$$scope:{ctx:L}}}),K9=new re({}),Z9=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/modeling_flax_auto.py#L294"}}),ox=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17205/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L389"}}),v3=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[h$t]},$$scope:{ctx:L}}}),rx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L417"}}),L3=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[p$t]},$$scope:{ctx:L}}}),tx=new re({}),ax=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/modeling_flax_auto.py#L303"}}),sx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17205/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L389"}}),$3=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[_$t]},$$scope:{ctx:L}}}),lx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L417"}}),j3=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[u$t]},$$scope:{ctx:L}}}),ix=new re({}),dx=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/modeling_flax_auto.py#L310"}}),fx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17205/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L389"}}),G3=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[b$t]},$$scope:{ctx:L}}}),mx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L417"}}),V3=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[v$t]},$$scope:{ctx:L}}}),gx=new re({}),hx=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/modeling_flax_auto.py#L319"}}),_x=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17205/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17205/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L389"}}),z3=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[F$t]},$$scope:{ctx:L}}}),ux=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L417"}}),H3=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[T$t]},$$scope:{ctx:L}}}),vx=new re({}),Fx=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/modeling_flax_auto.py#L328"}}),Mx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17205/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17205/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L389"}}),J3=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[M$t]},$$scope:{ctx:L}}}),Ex=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17205/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17205/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17205/src/transformers/models/auto/auto_factory.py#L417"}}),K3=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[E$t]},$$scope:{ctx:L}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),_=a("span"),F(d.$$.fragment),h=l(),Mo=a("span"),fi=o("Auto Classes"),pf=l(),tt=a("p"),mi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),gi=a("code"),pA=o("from_pretrained()"),_f=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),je=l(),We=a("p"),hi=o("Instantiating one of "),yn=a("a"),_A=o("AutoConfig"),Ln=o(", "),xn=a("a"),uA=o("AutoModel"),pi=o(`, and
`),$n=a("a"),bA=o("AutoTokenizer"),_i=o(" will directly create a class of the relevant architecture. For instance"),uf=l(),F(wa.$$.fragment),Qe=l(),Ae=a("p"),I$=o("will create a model that is an instance of "),ui=a("a"),q$=o("BertModel"),N$=o("."),Eo=l(),Aa=a("p"),j$=o("There is one class of "),bf=a("code"),D$=o("AutoModel"),$Ge=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),vqe=l(),bi=a("h2"),vf=a("a"),Oee=a("span"),F(vA.$$.fragment),kGe=l(),Vee=a("span"),SGe=o("Extending the Auto Classes"),Fqe=l(),kn=a("p"),RGe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Xee=a("code"),PGe=o("NewModel"),BGe=o(", make sure you have a "),zee=a("code"),IGe=o("NewModelConfig"),qGe=o(` then you can add those to the auto
classes like this:`),Tqe=l(),F(FA.$$.fragment),Mqe=l(),G$=a("p"),NGe=o("You will then be able to use the auto classes like you would usually do!"),Eqe=l(),F(Ff.$$.fragment),Cqe=l(),vi=a("h2"),Tf=a("a"),Wee=a("span"),F(TA.$$.fragment),jGe=l(),Qee=a("span"),DGe=o("AutoConfig"),wqe=l(),Co=a("div"),F(MA.$$.fragment),GGe=l(),EA=a("p"),OGe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),O$=a("a"),VGe=o("from_pretrained()"),XGe=o(" class method."),zGe=l(),CA=a("p"),WGe=o("This class cannot be instantiated directly using "),Hee=a("code"),QGe=o("__init__()"),HGe=o(" (throws an error)."),UGe=l(),Er=a("div"),F(wA.$$.fragment),JGe=l(),Uee=a("p"),YGe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),KGe=l(),Fi=a("p"),ZGe=o("The configuration class to instantiate is selected based on the "),Jee=a("code"),eOe=o("model_type"),oOe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Yee=a("code"),rOe=o("pretrained_model_name_or_path"),tOe=o(":"),aOe=l(),A=a("ul"),Mf=a("li"),Kee=a("strong"),nOe=o("albert"),sOe=o(" \u2014 "),V$=a("a"),lOe=o("AlbertConfig"),iOe=o(" (ALBERT model)"),dOe=l(),Ef=a("li"),Zee=a("strong"),cOe=o("bart"),fOe=o(" \u2014 "),X$=a("a"),mOe=o("BartConfig"),gOe=o(" (BART model)"),hOe=l(),Cf=a("li"),eoe=a("strong"),pOe=o("beit"),_Oe=o(" \u2014 "),z$=a("a"),uOe=o("BeitConfig"),bOe=o(" (BEiT model)"),vOe=l(),wf=a("li"),ooe=a("strong"),FOe=o("bert"),TOe=o(" \u2014 "),W$=a("a"),MOe=o("BertConfig"),EOe=o(" (BERT model)"),COe=l(),Af=a("li"),roe=a("strong"),wOe=o("bert-generation"),AOe=o(" \u2014 "),Q$=a("a"),yOe=o("BertGenerationConfig"),LOe=o(" (Bert Generation model)"),xOe=l(),yf=a("li"),toe=a("strong"),$Oe=o("big_bird"),kOe=o(" \u2014 "),H$=a("a"),SOe=o("BigBirdConfig"),ROe=o(" (BigBird model)"),POe=l(),Lf=a("li"),aoe=a("strong"),BOe=o("bigbird_pegasus"),IOe=o(" \u2014 "),U$=a("a"),qOe=o("BigBirdPegasusConfig"),NOe=o(" (BigBirdPegasus model)"),jOe=l(),xf=a("li"),noe=a("strong"),DOe=o("blenderbot"),GOe=o(" \u2014 "),J$=a("a"),OOe=o("BlenderbotConfig"),VOe=o(" (Blenderbot model)"),XOe=l(),$f=a("li"),soe=a("strong"),zOe=o("blenderbot-small"),WOe=o(" \u2014 "),Y$=a("a"),QOe=o("BlenderbotSmallConfig"),HOe=o(" (BlenderbotSmall model)"),UOe=l(),kf=a("li"),loe=a("strong"),JOe=o("camembert"),YOe=o(" \u2014 "),K$=a("a"),KOe=o("CamembertConfig"),ZOe=o(" (CamemBERT model)"),eVe=l(),Sf=a("li"),ioe=a("strong"),oVe=o("canine"),rVe=o(" \u2014 "),Z$=a("a"),tVe=o("CanineConfig"),aVe=o(" (Canine model)"),nVe=l(),Rf=a("li"),doe=a("strong"),sVe=o("clip"),lVe=o(" \u2014 "),ek=a("a"),iVe=o("CLIPConfig"),dVe=o(" (CLIP model)"),cVe=l(),Pf=a("li"),coe=a("strong"),fVe=o("convbert"),mVe=o(" \u2014 "),ok=a("a"),gVe=o("ConvBertConfig"),hVe=o(" (ConvBERT model)"),pVe=l(),Bf=a("li"),foe=a("strong"),_Ve=o("convnext"),uVe=o(" \u2014 "),rk=a("a"),bVe=o("ConvNextConfig"),vVe=o(" (ConvNext model)"),FVe=l(),If=a("li"),moe=a("strong"),TVe=o("ctrl"),MVe=o(" \u2014 "),tk=a("a"),EVe=o("CTRLConfig"),CVe=o(" (CTRL model)"),wVe=l(),qf=a("li"),goe=a("strong"),AVe=o("cvt"),yVe=o(" \u2014 "),ak=a("a"),LVe=o("CvtConfig"),xVe=o(" (CvT model)"),$Ve=l(),Nf=a("li"),hoe=a("strong"),kVe=o("data2vec-audio"),SVe=o(" \u2014 "),nk=a("a"),RVe=o("Data2VecAudioConfig"),PVe=o(" (Data2VecAudio model)"),BVe=l(),jf=a("li"),poe=a("strong"),IVe=o("data2vec-text"),qVe=o(" \u2014 "),sk=a("a"),NVe=o("Data2VecTextConfig"),jVe=o(" (Data2VecText model)"),DVe=l(),Df=a("li"),_oe=a("strong"),GVe=o("data2vec-vision"),OVe=o(" \u2014 "),lk=a("a"),VVe=o("Data2VecVisionConfig"),XVe=o(" (Data2VecVision model)"),zVe=l(),Gf=a("li"),uoe=a("strong"),WVe=o("deberta"),QVe=o(" \u2014 "),ik=a("a"),HVe=o("DebertaConfig"),UVe=o(" (DeBERTa model)"),JVe=l(),Of=a("li"),boe=a("strong"),YVe=o("deberta-v2"),KVe=o(" \u2014 "),dk=a("a"),ZVe=o("DebertaV2Config"),eXe=o(" (DeBERTa-v2 model)"),oXe=l(),Vf=a("li"),voe=a("strong"),rXe=o("decision_transformer"),tXe=o(" \u2014 "),ck=a("a"),aXe=o("DecisionTransformerConfig"),nXe=o(" (Decision Transformer model)"),sXe=l(),Xf=a("li"),Foe=a("strong"),lXe=o("deit"),iXe=o(" \u2014 "),fk=a("a"),dXe=o("DeiTConfig"),cXe=o(" (DeiT model)"),fXe=l(),zf=a("li"),Toe=a("strong"),mXe=o("detr"),gXe=o(" \u2014 "),mk=a("a"),hXe=o("DetrConfig"),pXe=o(" (DETR model)"),_Xe=l(),Wf=a("li"),Moe=a("strong"),uXe=o("distilbert"),bXe=o(" \u2014 "),gk=a("a"),vXe=o("DistilBertConfig"),FXe=o(" (DistilBERT model)"),TXe=l(),Qf=a("li"),Eoe=a("strong"),MXe=o("dpr"),EXe=o(" \u2014 "),hk=a("a"),CXe=o("DPRConfig"),wXe=o(" (DPR model)"),AXe=l(),Hf=a("li"),Coe=a("strong"),yXe=o("dpt"),LXe=o(" \u2014 "),pk=a("a"),xXe=o("DPTConfig"),$Xe=o(" (DPT model)"),kXe=l(),Uf=a("li"),woe=a("strong"),SXe=o("electra"),RXe=o(" \u2014 "),_k=a("a"),PXe=o("ElectraConfig"),BXe=o(" (ELECTRA model)"),IXe=l(),Jf=a("li"),Aoe=a("strong"),qXe=o("encoder-decoder"),NXe=o(" \u2014 "),uk=a("a"),jXe=o("EncoderDecoderConfig"),DXe=o(" (Encoder decoder model)"),GXe=l(),Yf=a("li"),yoe=a("strong"),OXe=o("flaubert"),VXe=o(" \u2014 "),bk=a("a"),XXe=o("FlaubertConfig"),zXe=o(" (FlauBERT model)"),WXe=l(),Kf=a("li"),Loe=a("strong"),QXe=o("flava"),HXe=o(" \u2014 "),vk=a("a"),UXe=o("FlavaConfig"),JXe=o(" (Flava model)"),YXe=l(),Zf=a("li"),xoe=a("strong"),KXe=o("fnet"),ZXe=o(" \u2014 "),Fk=a("a"),eze=o("FNetConfig"),oze=o(" (FNet model)"),rze=l(),em=a("li"),$oe=a("strong"),tze=o("fsmt"),aze=o(" \u2014 "),Tk=a("a"),nze=o("FSMTConfig"),sze=o(" (FairSeq Machine-Translation model)"),lze=l(),om=a("li"),koe=a("strong"),ize=o("funnel"),dze=o(" \u2014 "),Mk=a("a"),cze=o("FunnelConfig"),fze=o(" (Funnel Transformer model)"),mze=l(),rm=a("li"),Soe=a("strong"),gze=o("glpn"),hze=o(" \u2014 "),Ek=a("a"),pze=o("GLPNConfig"),_ze=o(" (GLPN model)"),uze=l(),tm=a("li"),Roe=a("strong"),bze=o("gpt2"),vze=o(" \u2014 "),Ck=a("a"),Fze=o("GPT2Config"),Tze=o(" (OpenAI GPT-2 model)"),Mze=l(),am=a("li"),Poe=a("strong"),Eze=o("gpt_neo"),Cze=o(" \u2014 "),wk=a("a"),wze=o("GPTNeoConfig"),Aze=o(" (GPT Neo model)"),yze=l(),nm=a("li"),Boe=a("strong"),Lze=o("gptj"),xze=o(" \u2014 "),Ak=a("a"),$ze=o("GPTJConfig"),kze=o(" (GPT-J model)"),Sze=l(),sm=a("li"),Ioe=a("strong"),Rze=o("hubert"),Pze=o(" \u2014 "),yk=a("a"),Bze=o("HubertConfig"),Ize=o(" (Hubert model)"),qze=l(),lm=a("li"),qoe=a("strong"),Nze=o("ibert"),jze=o(" \u2014 "),Lk=a("a"),Dze=o("IBertConfig"),Gze=o(" (I-BERT model)"),Oze=l(),im=a("li"),Noe=a("strong"),Vze=o("imagegpt"),Xze=o(" \u2014 "),xk=a("a"),zze=o("ImageGPTConfig"),Wze=o(" (ImageGPT model)"),Qze=l(),dm=a("li"),joe=a("strong"),Hze=o("layoutlm"),Uze=o(" \u2014 "),$k=a("a"),Jze=o("LayoutLMConfig"),Yze=o(" (LayoutLM model)"),Kze=l(),cm=a("li"),Doe=a("strong"),Zze=o("layoutlmv2"),eWe=o(" \u2014 "),kk=a("a"),oWe=o("LayoutLMv2Config"),rWe=o(" (LayoutLMv2 model)"),tWe=l(),fm=a("li"),Goe=a("strong"),aWe=o("led"),nWe=o(" \u2014 "),Sk=a("a"),sWe=o("LEDConfig"),lWe=o(" (LED model)"),iWe=l(),mm=a("li"),Ooe=a("strong"),dWe=o("longformer"),cWe=o(" \u2014 "),Rk=a("a"),fWe=o("LongformerConfig"),mWe=o(" (Longformer model)"),gWe=l(),gm=a("li"),Voe=a("strong"),hWe=o("luke"),pWe=o(" \u2014 "),Pk=a("a"),_We=o("LukeConfig"),uWe=o(" (LUKE model)"),bWe=l(),hm=a("li"),Xoe=a("strong"),vWe=o("lxmert"),FWe=o(" \u2014 "),Bk=a("a"),TWe=o("LxmertConfig"),MWe=o(" (LXMERT model)"),EWe=l(),pm=a("li"),zoe=a("strong"),CWe=o("m2m_100"),wWe=o(" \u2014 "),Ik=a("a"),AWe=o("M2M100Config"),yWe=o(" (M2M100 model)"),LWe=l(),_m=a("li"),Woe=a("strong"),xWe=o("marian"),$We=o(" \u2014 "),qk=a("a"),kWe=o("MarianConfig"),SWe=o(" (Marian model)"),RWe=l(),um=a("li"),Qoe=a("strong"),PWe=o("maskformer"),BWe=o(" \u2014 "),Nk=a("a"),IWe=o("MaskFormerConfig"),qWe=o(" (MaskFormer model)"),NWe=l(),bm=a("li"),Hoe=a("strong"),jWe=o("mbart"),DWe=o(" \u2014 "),jk=a("a"),GWe=o("MBartConfig"),OWe=o(" (mBART model)"),VWe=l(),vm=a("li"),Uoe=a("strong"),XWe=o("megatron-bert"),zWe=o(" \u2014 "),Dk=a("a"),WWe=o("MegatronBertConfig"),QWe=o(" (MegatronBert model)"),HWe=l(),Fm=a("li"),Joe=a("strong"),UWe=o("mobilebert"),JWe=o(" \u2014 "),Gk=a("a"),YWe=o("MobileBertConfig"),KWe=o(" (MobileBERT model)"),ZWe=l(),Tm=a("li"),Yoe=a("strong"),eQe=o("mobilevit"),oQe=o(" \u2014 "),Ok=a("a"),rQe=o("MobileViTConfig"),tQe=o(" (MobileViT model)"),aQe=l(),Mm=a("li"),Koe=a("strong"),nQe=o("mpnet"),sQe=o(" \u2014 "),Vk=a("a"),lQe=o("MPNetConfig"),iQe=o(" (MPNet model)"),dQe=l(),Em=a("li"),Zoe=a("strong"),cQe=o("mt5"),fQe=o(" \u2014 "),Xk=a("a"),mQe=o("MT5Config"),gQe=o(" (mT5 model)"),hQe=l(),Cm=a("li"),ere=a("strong"),pQe=o("nystromformer"),_Qe=o(" \u2014 "),zk=a("a"),uQe=o("NystromformerConfig"),bQe=o(" (Nystromformer model)"),vQe=l(),wm=a("li"),ore=a("strong"),FQe=o("openai-gpt"),TQe=o(" \u2014 "),Wk=a("a"),MQe=o("OpenAIGPTConfig"),EQe=o(" (OpenAI GPT model)"),CQe=l(),Am=a("li"),rre=a("strong"),wQe=o("opt"),AQe=o(" \u2014 "),Qk=a("a"),yQe=o("OPTConfig"),LQe=o(" (OPT model)"),xQe=l(),ym=a("li"),tre=a("strong"),$Qe=o("pegasus"),kQe=o(" \u2014 "),Hk=a("a"),SQe=o("PegasusConfig"),RQe=o(" (Pegasus model)"),PQe=l(),Lm=a("li"),are=a("strong"),BQe=o("perceiver"),IQe=o(" \u2014 "),Uk=a("a"),qQe=o("PerceiverConfig"),NQe=o(" (Perceiver model)"),jQe=l(),xm=a("li"),nre=a("strong"),DQe=o("plbart"),GQe=o(" \u2014 "),Jk=a("a"),OQe=o("PLBartConfig"),VQe=o(" (PLBart model)"),XQe=l(),$m=a("li"),sre=a("strong"),zQe=o("poolformer"),WQe=o(" \u2014 "),Yk=a("a"),QQe=o("PoolFormerConfig"),HQe=o(" (PoolFormer model)"),UQe=l(),km=a("li"),lre=a("strong"),JQe=o("prophetnet"),YQe=o(" \u2014 "),Kk=a("a"),KQe=o("ProphetNetConfig"),ZQe=o(" (ProphetNet model)"),eHe=l(),Sm=a("li"),ire=a("strong"),oHe=o("qdqbert"),rHe=o(" \u2014 "),Zk=a("a"),tHe=o("QDQBertConfig"),aHe=o(" (QDQBert model)"),nHe=l(),Rm=a("li"),dre=a("strong"),sHe=o("rag"),lHe=o(" \u2014 "),eS=a("a"),iHe=o("RagConfig"),dHe=o(" (RAG model)"),cHe=l(),Pm=a("li"),cre=a("strong"),fHe=o("realm"),mHe=o(" \u2014 "),oS=a("a"),gHe=o("RealmConfig"),hHe=o(" (Realm model)"),pHe=l(),Bm=a("li"),fre=a("strong"),_He=o("reformer"),uHe=o(" \u2014 "),rS=a("a"),bHe=o("ReformerConfig"),vHe=o(" (Reformer model)"),FHe=l(),Im=a("li"),mre=a("strong"),THe=o("regnet"),MHe=o(" \u2014 "),tS=a("a"),EHe=o("RegNetConfig"),CHe=o(" (RegNet model)"),wHe=l(),qm=a("li"),gre=a("strong"),AHe=o("rembert"),yHe=o(" \u2014 "),aS=a("a"),LHe=o("RemBertConfig"),xHe=o(" (RemBERT model)"),$He=l(),Nm=a("li"),hre=a("strong"),kHe=o("resnet"),SHe=o(" \u2014 "),nS=a("a"),RHe=o("ResNetConfig"),PHe=o(" (ResNet model)"),BHe=l(),jm=a("li"),pre=a("strong"),IHe=o("retribert"),qHe=o(" \u2014 "),sS=a("a"),NHe=o("RetriBertConfig"),jHe=o(" (RetriBERT model)"),DHe=l(),Dm=a("li"),_re=a("strong"),GHe=o("roberta"),OHe=o(" \u2014 "),lS=a("a"),VHe=o("RobertaConfig"),XHe=o(" (RoBERTa model)"),zHe=l(),Gm=a("li"),ure=a("strong"),WHe=o("roformer"),QHe=o(" \u2014 "),iS=a("a"),HHe=o("RoFormerConfig"),UHe=o(" (RoFormer model)"),JHe=l(),Om=a("li"),bre=a("strong"),YHe=o("segformer"),KHe=o(" \u2014 "),dS=a("a"),ZHe=o("SegformerConfig"),eUe=o(" (SegFormer model)"),oUe=l(),Vm=a("li"),vre=a("strong"),rUe=o("sew"),tUe=o(" \u2014 "),cS=a("a"),aUe=o("SEWConfig"),nUe=o(" (SEW model)"),sUe=l(),Xm=a("li"),Fre=a("strong"),lUe=o("sew-d"),iUe=o(" \u2014 "),fS=a("a"),dUe=o("SEWDConfig"),cUe=o(" (SEW-D model)"),fUe=l(),zm=a("li"),Tre=a("strong"),mUe=o("speech-encoder-decoder"),gUe=o(" \u2014 "),mS=a("a"),hUe=o("SpeechEncoderDecoderConfig"),pUe=o(" (Speech Encoder decoder model)"),_Ue=l(),Wm=a("li"),Mre=a("strong"),uUe=o("speech_to_text"),bUe=o(" \u2014 "),gS=a("a"),vUe=o("Speech2TextConfig"),FUe=o(" (Speech2Text model)"),TUe=l(),Qm=a("li"),Ere=a("strong"),MUe=o("speech_to_text_2"),EUe=o(" \u2014 "),hS=a("a"),CUe=o("Speech2Text2Config"),wUe=o(" (Speech2Text2 model)"),AUe=l(),Hm=a("li"),Cre=a("strong"),yUe=o("splinter"),LUe=o(" \u2014 "),pS=a("a"),xUe=o("SplinterConfig"),$Ue=o(" (Splinter model)"),kUe=l(),Um=a("li"),wre=a("strong"),SUe=o("squeezebert"),RUe=o(" \u2014 "),_S=a("a"),PUe=o("SqueezeBertConfig"),BUe=o(" (SqueezeBERT model)"),IUe=l(),Jm=a("li"),Are=a("strong"),qUe=o("swin"),NUe=o(" \u2014 "),uS=a("a"),jUe=o("SwinConfig"),DUe=o(" (Swin model)"),GUe=l(),Ym=a("li"),yre=a("strong"),OUe=o("t5"),VUe=o(" \u2014 "),bS=a("a"),XUe=o("T5Config"),zUe=o(" (T5 model)"),WUe=l(),Km=a("li"),Lre=a("strong"),QUe=o("tapas"),HUe=o(" \u2014 "),vS=a("a"),UUe=o("TapasConfig"),JUe=o(" (TAPAS model)"),YUe=l(),Zm=a("li"),xre=a("strong"),KUe=o("trajectory_transformer"),ZUe=o(" \u2014 "),FS=a("a"),eJe=o("TrajectoryTransformerConfig"),oJe=o(" (Trajectory Transformer model)"),rJe=l(),eg=a("li"),$re=a("strong"),tJe=o("transfo-xl"),aJe=o(" \u2014 "),TS=a("a"),nJe=o("TransfoXLConfig"),sJe=o(" (Transformer-XL model)"),lJe=l(),og=a("li"),kre=a("strong"),iJe=o("trocr"),dJe=o(" \u2014 "),MS=a("a"),cJe=o("TrOCRConfig"),fJe=o(" (TrOCR model)"),mJe=l(),rg=a("li"),Sre=a("strong"),gJe=o("unispeech"),hJe=o(" \u2014 "),ES=a("a"),pJe=o("UniSpeechConfig"),_Je=o(" (UniSpeech model)"),uJe=l(),tg=a("li"),Rre=a("strong"),bJe=o("unispeech-sat"),vJe=o(" \u2014 "),CS=a("a"),FJe=o("UniSpeechSatConfig"),TJe=o(" (UniSpeechSat model)"),MJe=l(),ag=a("li"),Pre=a("strong"),EJe=o("van"),CJe=o(" \u2014 "),wS=a("a"),wJe=o("VanConfig"),AJe=o(" (VAN model)"),yJe=l(),ng=a("li"),Bre=a("strong"),LJe=o("vilt"),xJe=o(" \u2014 "),AS=a("a"),$Je=o("ViltConfig"),kJe=o(" (ViLT model)"),SJe=l(),sg=a("li"),Ire=a("strong"),RJe=o("vision-encoder-decoder"),PJe=o(" \u2014 "),yS=a("a"),BJe=o("VisionEncoderDecoderConfig"),IJe=o(" (Vision Encoder decoder model)"),qJe=l(),lg=a("li"),qre=a("strong"),NJe=o("vision-text-dual-encoder"),jJe=o(" \u2014 "),LS=a("a"),DJe=o("VisionTextDualEncoderConfig"),GJe=o(" (VisionTextDualEncoder model)"),OJe=l(),ig=a("li"),Nre=a("strong"),VJe=o("visual_bert"),XJe=o(" \u2014 "),xS=a("a"),zJe=o("VisualBertConfig"),WJe=o(" (VisualBert model)"),QJe=l(),dg=a("li"),jre=a("strong"),HJe=o("vit"),UJe=o(" \u2014 "),$S=a("a"),JJe=o("ViTConfig"),YJe=o(" (ViT model)"),KJe=l(),cg=a("li"),Dre=a("strong"),ZJe=o("vit_mae"),eYe=o(" \u2014 "),kS=a("a"),oYe=o("ViTMAEConfig"),rYe=o(" (ViTMAE model)"),tYe=l(),fg=a("li"),Gre=a("strong"),aYe=o("wav2vec2"),nYe=o(" \u2014 "),SS=a("a"),sYe=o("Wav2Vec2Config"),lYe=o(" (Wav2Vec2 model)"),iYe=l(),mg=a("li"),Ore=a("strong"),dYe=o("wav2vec2-conformer"),cYe=o(" \u2014 "),RS=a("a"),fYe=o("Wav2Vec2ConformerConfig"),mYe=o(" (Wav2Vec2-Conformer model)"),gYe=l(),gg=a("li"),Vre=a("strong"),hYe=o("wavlm"),pYe=o(" \u2014 "),PS=a("a"),_Ye=o("WavLMConfig"),uYe=o(" (WavLM model)"),bYe=l(),hg=a("li"),Xre=a("strong"),vYe=o("xglm"),FYe=o(" \u2014 "),BS=a("a"),TYe=o("XGLMConfig"),MYe=o(" (XGLM model)"),EYe=l(),pg=a("li"),zre=a("strong"),CYe=o("xlm"),wYe=o(" \u2014 "),IS=a("a"),AYe=o("XLMConfig"),yYe=o(" (XLM model)"),LYe=l(),_g=a("li"),Wre=a("strong"),xYe=o("xlm-prophetnet"),$Ye=o(" \u2014 "),qS=a("a"),kYe=o("XLMProphetNetConfig"),SYe=o(" (XLMProphetNet model)"),RYe=l(),ug=a("li"),Qre=a("strong"),PYe=o("xlm-roberta"),BYe=o(" \u2014 "),NS=a("a"),IYe=o("XLMRobertaConfig"),qYe=o(" (XLM-RoBERTa model)"),NYe=l(),bg=a("li"),Hre=a("strong"),jYe=o("xlm-roberta-xl"),DYe=o(" \u2014 "),jS=a("a"),GYe=o("XLMRobertaXLConfig"),OYe=o(" (XLM-RoBERTa-XL model)"),VYe=l(),vg=a("li"),Ure=a("strong"),XYe=o("xlnet"),zYe=o(" \u2014 "),DS=a("a"),WYe=o("XLNetConfig"),QYe=o(" (XLNet model)"),HYe=l(),Fg=a("li"),Jre=a("strong"),UYe=o("yolos"),JYe=o(" \u2014 "),GS=a("a"),YYe=o("YolosConfig"),KYe=o(" (YOLOS model)"),ZYe=l(),Tg=a("li"),Yre=a("strong"),eKe=o("yoso"),oKe=o(" \u2014 "),OS=a("a"),rKe=o("YosoConfig"),tKe=o(" (YOSO model)"),aKe=l(),F(Mg.$$.fragment),nKe=l(),Eg=a("div"),F(AA.$$.fragment),sKe=l(),Kre=a("p"),lKe=o("Register a new configuration for this class."),Aqe=l(),Ti=a("h2"),Cg=a("a"),Zre=a("span"),F(yA.$$.fragment),iKe=l(),ete=a("span"),dKe=o("AutoTokenizer"),yqe=l(),wo=a("div"),F(LA.$$.fragment),cKe=l(),xA=a("p"),fKe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),VS=a("a"),mKe=o("AutoTokenizer.from_pretrained()"),gKe=o(" class method."),hKe=l(),$A=a("p"),pKe=o("This class cannot be instantiated directly using "),ote=a("code"),_Ke=o("__init__()"),uKe=o(" (throws an error)."),bKe=l(),Cr=a("div"),F(kA.$$.fragment),vKe=l(),rte=a("p"),FKe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),TKe=l(),ya=a("p"),MKe=o("The tokenizer class to instantiate is selected based on the "),tte=a("code"),EKe=o("model_type"),CKe=o(` property of the config object (either
passed as an argument or loaded from `),ate=a("code"),wKe=o("pretrained_model_name_or_path"),AKe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nte=a("code"),yKe=o("pretrained_model_name_or_path"),LKe=o(":"),xKe=l(),k=a("ul"),Sn=a("li"),ste=a("strong"),$Ke=o("albert"),kKe=o(" \u2014 "),XS=a("a"),SKe=o("AlbertTokenizer"),RKe=o(" or "),zS=a("a"),PKe=o("AlbertTokenizerFast"),BKe=o(" (ALBERT model)"),IKe=l(),Rn=a("li"),lte=a("strong"),qKe=o("bart"),NKe=o(" \u2014 "),WS=a("a"),jKe=o("BartTokenizer"),DKe=o(" or "),QS=a("a"),GKe=o("BartTokenizerFast"),OKe=o(" (BART model)"),VKe=l(),Pn=a("li"),ite=a("strong"),XKe=o("barthez"),zKe=o(" \u2014 "),HS=a("a"),WKe=o("BarthezTokenizer"),QKe=o(" or "),US=a("a"),HKe=o("BarthezTokenizerFast"),UKe=o(" (BARThez model)"),JKe=l(),wg=a("li"),dte=a("strong"),YKe=o("bartpho"),KKe=o(" \u2014 "),JS=a("a"),ZKe=o("BartphoTokenizer"),eZe=o(" (BARTpho model)"),oZe=l(),Bn=a("li"),cte=a("strong"),rZe=o("bert"),tZe=o(" \u2014 "),YS=a("a"),aZe=o("BertTokenizer"),nZe=o(" or "),KS=a("a"),sZe=o("BertTokenizerFast"),lZe=o(" (BERT model)"),iZe=l(),Ag=a("li"),fte=a("strong"),dZe=o("bert-generation"),cZe=o(" \u2014 "),ZS=a("a"),fZe=o("BertGenerationTokenizer"),mZe=o(" (Bert Generation model)"),gZe=l(),yg=a("li"),mte=a("strong"),hZe=o("bert-japanese"),pZe=o(" \u2014 "),eR=a("a"),_Ze=o("BertJapaneseTokenizer"),uZe=o(" (BertJapanese model)"),bZe=l(),Lg=a("li"),gte=a("strong"),vZe=o("bertweet"),FZe=o(" \u2014 "),oR=a("a"),TZe=o("BertweetTokenizer"),MZe=o(" (Bertweet model)"),EZe=l(),In=a("li"),hte=a("strong"),CZe=o("big_bird"),wZe=o(" \u2014 "),rR=a("a"),AZe=o("BigBirdTokenizer"),yZe=o(" or "),tR=a("a"),LZe=o("BigBirdTokenizerFast"),xZe=o(" (BigBird model)"),$Ze=l(),qn=a("li"),pte=a("strong"),kZe=o("bigbird_pegasus"),SZe=o(" \u2014 "),aR=a("a"),RZe=o("PegasusTokenizer"),PZe=o(" or "),nR=a("a"),BZe=o("PegasusTokenizerFast"),IZe=o(" (BigBirdPegasus model)"),qZe=l(),Nn=a("li"),_te=a("strong"),NZe=o("blenderbot"),jZe=o(" \u2014 "),sR=a("a"),DZe=o("BlenderbotTokenizer"),GZe=o(" or "),lR=a("a"),OZe=o("BlenderbotTokenizerFast"),VZe=o(" (Blenderbot model)"),XZe=l(),xg=a("li"),ute=a("strong"),zZe=o("blenderbot-small"),WZe=o(" \u2014 "),iR=a("a"),QZe=o("BlenderbotSmallTokenizer"),HZe=o(" (BlenderbotSmall model)"),UZe=l(),$g=a("li"),bte=a("strong"),JZe=o("byt5"),YZe=o(" \u2014 "),dR=a("a"),KZe=o("ByT5Tokenizer"),ZZe=o(" (ByT5 model)"),eeo=l(),jn=a("li"),vte=a("strong"),oeo=o("camembert"),reo=o(" \u2014 "),cR=a("a"),teo=o("CamembertTokenizer"),aeo=o(" or "),fR=a("a"),neo=o("CamembertTokenizerFast"),seo=o(" (CamemBERT model)"),leo=l(),kg=a("li"),Fte=a("strong"),ieo=o("canine"),deo=o(" \u2014 "),mR=a("a"),ceo=o("CanineTokenizer"),feo=o(" (Canine model)"),meo=l(),Dn=a("li"),Tte=a("strong"),geo=o("clip"),heo=o(" \u2014 "),gR=a("a"),peo=o("CLIPTokenizer"),_eo=o(" or "),hR=a("a"),ueo=o("CLIPTokenizerFast"),beo=o(" (CLIP model)"),veo=l(),Gn=a("li"),Mte=a("strong"),Feo=o("convbert"),Teo=o(" \u2014 "),pR=a("a"),Meo=o("ConvBertTokenizer"),Eeo=o(" or "),_R=a("a"),Ceo=o("ConvBertTokenizerFast"),weo=o(" (ConvBERT model)"),Aeo=l(),On=a("li"),Ete=a("strong"),yeo=o("cpm"),Leo=o(" \u2014 "),uR=a("a"),xeo=o("CpmTokenizer"),$eo=o(" or "),bR=a("a"),keo=o("CpmTokenizerFast"),Seo=o(" (CPM model)"),Reo=l(),Sg=a("li"),Cte=a("strong"),Peo=o("ctrl"),Beo=o(" \u2014 "),vR=a("a"),Ieo=o("CTRLTokenizer"),qeo=o(" (CTRL model)"),Neo=l(),Vn=a("li"),wte=a("strong"),jeo=o("data2vec-text"),Deo=o(" \u2014 "),FR=a("a"),Geo=o("RobertaTokenizer"),Oeo=o(" or "),TR=a("a"),Veo=o("RobertaTokenizerFast"),Xeo=o(" (Data2VecText model)"),zeo=l(),Xn=a("li"),Ate=a("strong"),Weo=o("deberta"),Qeo=o(" \u2014 "),MR=a("a"),Heo=o("DebertaTokenizer"),Ueo=o(" or "),ER=a("a"),Jeo=o("DebertaTokenizerFast"),Yeo=o(" (DeBERTa model)"),Keo=l(),zn=a("li"),yte=a("strong"),Zeo=o("deberta-v2"),eoo=o(" \u2014 "),CR=a("a"),ooo=o("DebertaV2Tokenizer"),roo=o(" or "),wR=a("a"),too=o("DebertaV2TokenizerFast"),aoo=o(" (DeBERTa-v2 model)"),noo=l(),Wn=a("li"),Lte=a("strong"),soo=o("distilbert"),loo=o(" \u2014 "),AR=a("a"),ioo=o("DistilBertTokenizer"),doo=o(" or "),yR=a("a"),coo=o("DistilBertTokenizerFast"),foo=o(" (DistilBERT model)"),moo=l(),Qn=a("li"),xte=a("strong"),goo=o("dpr"),hoo=o(" \u2014 "),LR=a("a"),poo=o("DPRQuestionEncoderTokenizer"),_oo=o(" or "),xR=a("a"),uoo=o("DPRQuestionEncoderTokenizerFast"),boo=o(" (DPR model)"),voo=l(),Hn=a("li"),$te=a("strong"),Foo=o("electra"),Too=o(" \u2014 "),$R=a("a"),Moo=o("ElectraTokenizer"),Eoo=o(" or "),kR=a("a"),Coo=o("ElectraTokenizerFast"),woo=o(" (ELECTRA model)"),Aoo=l(),Rg=a("li"),kte=a("strong"),yoo=o("flaubert"),Loo=o(" \u2014 "),SR=a("a"),xoo=o("FlaubertTokenizer"),$oo=o(" (FlauBERT model)"),koo=l(),Un=a("li"),Ste=a("strong"),Soo=o("fnet"),Roo=o(" \u2014 "),RR=a("a"),Poo=o("FNetTokenizer"),Boo=o(" or "),PR=a("a"),Ioo=o("FNetTokenizerFast"),qoo=o(" (FNet model)"),Noo=l(),Pg=a("li"),Rte=a("strong"),joo=o("fsmt"),Doo=o(" \u2014 "),BR=a("a"),Goo=o("FSMTTokenizer"),Ooo=o(" (FairSeq Machine-Translation model)"),Voo=l(),Jn=a("li"),Pte=a("strong"),Xoo=o("funnel"),zoo=o(" \u2014 "),IR=a("a"),Woo=o("FunnelTokenizer"),Qoo=o(" or "),qR=a("a"),Hoo=o("FunnelTokenizerFast"),Uoo=o(" (Funnel Transformer model)"),Joo=l(),Yn=a("li"),Bte=a("strong"),Yoo=o("gpt2"),Koo=o(" \u2014 "),NR=a("a"),Zoo=o("GPT2Tokenizer"),ero=o(" or "),jR=a("a"),oro=o("GPT2TokenizerFast"),rro=o(" (OpenAI GPT-2 model)"),tro=l(),Kn=a("li"),Ite=a("strong"),aro=o("gpt_neo"),nro=o(" \u2014 "),DR=a("a"),sro=o("GPT2Tokenizer"),lro=o(" or "),GR=a("a"),iro=o("GPT2TokenizerFast"),dro=o(" (GPT Neo model)"),cro=l(),Zn=a("li"),qte=a("strong"),fro=o("gptj"),mro=o(" \u2014 "),OR=a("a"),gro=o("GPT2Tokenizer"),hro=o(" or "),VR=a("a"),pro=o("GPT2TokenizerFast"),_ro=o(" (GPT-J model)"),uro=l(),es=a("li"),Nte=a("strong"),bro=o("herbert"),vro=o(" \u2014 "),XR=a("a"),Fro=o("HerbertTokenizer"),Tro=o(" or "),zR=a("a"),Mro=o("HerbertTokenizerFast"),Ero=o(" (HerBERT model)"),Cro=l(),Bg=a("li"),jte=a("strong"),wro=o("hubert"),Aro=o(" \u2014 "),WR=a("a"),yro=o("Wav2Vec2CTCTokenizer"),Lro=o(" (Hubert model)"),xro=l(),os=a("li"),Dte=a("strong"),$ro=o("ibert"),kro=o(" \u2014 "),QR=a("a"),Sro=o("RobertaTokenizer"),Rro=o(" or "),HR=a("a"),Pro=o("RobertaTokenizerFast"),Bro=o(" (I-BERT model)"),Iro=l(),rs=a("li"),Gte=a("strong"),qro=o("layoutlm"),Nro=o(" \u2014 "),UR=a("a"),jro=o("LayoutLMTokenizer"),Dro=o(" or "),JR=a("a"),Gro=o("LayoutLMTokenizerFast"),Oro=o(" (LayoutLM model)"),Vro=l(),ts=a("li"),Ote=a("strong"),Xro=o("layoutlmv2"),zro=o(" \u2014 "),YR=a("a"),Wro=o("LayoutLMv2Tokenizer"),Qro=o(" or "),KR=a("a"),Hro=o("LayoutLMv2TokenizerFast"),Uro=o(" (LayoutLMv2 model)"),Jro=l(),as=a("li"),Vte=a("strong"),Yro=o("layoutxlm"),Kro=o(" \u2014 "),ZR=a("a"),Zro=o("LayoutXLMTokenizer"),eto=o(" or "),eP=a("a"),oto=o("LayoutXLMTokenizerFast"),rto=o(" (LayoutXLM model)"),tto=l(),ns=a("li"),Xte=a("strong"),ato=o("led"),nto=o(" \u2014 "),oP=a("a"),sto=o("LEDTokenizer"),lto=o(" or "),rP=a("a"),ito=o("LEDTokenizerFast"),dto=o(" (LED model)"),cto=l(),ss=a("li"),zte=a("strong"),fto=o("longformer"),mto=o(" \u2014 "),tP=a("a"),gto=o("LongformerTokenizer"),hto=o(" or "),aP=a("a"),pto=o("LongformerTokenizerFast"),_to=o(" (Longformer model)"),uto=l(),Ig=a("li"),Wte=a("strong"),bto=o("luke"),vto=o(" \u2014 "),nP=a("a"),Fto=o("LukeTokenizer"),Tto=o(" (LUKE model)"),Mto=l(),ls=a("li"),Qte=a("strong"),Eto=o("lxmert"),Cto=o(" \u2014 "),sP=a("a"),wto=o("LxmertTokenizer"),Ato=o(" or "),lP=a("a"),yto=o("LxmertTokenizerFast"),Lto=o(" (LXMERT model)"),xto=l(),qg=a("li"),Hte=a("strong"),$to=o("m2m_100"),kto=o(" \u2014 "),iP=a("a"),Sto=o("M2M100Tokenizer"),Rto=o(" (M2M100 model)"),Pto=l(),Ng=a("li"),Ute=a("strong"),Bto=o("marian"),Ito=o(" \u2014 "),dP=a("a"),qto=o("MarianTokenizer"),Nto=o(" (Marian model)"),jto=l(),is=a("li"),Jte=a("strong"),Dto=o("mbart"),Gto=o(" \u2014 "),cP=a("a"),Oto=o("MBartTokenizer"),Vto=o(" or "),fP=a("a"),Xto=o("MBartTokenizerFast"),zto=o(" (mBART model)"),Wto=l(),ds=a("li"),Yte=a("strong"),Qto=o("mbart50"),Hto=o(" \u2014 "),mP=a("a"),Uto=o("MBart50Tokenizer"),Jto=o(" or "),gP=a("a"),Yto=o("MBart50TokenizerFast"),Kto=o(" (mBART-50 model)"),Zto=l(),cs=a("li"),Kte=a("strong"),eao=o("megatron-bert"),oao=o(" \u2014 "),hP=a("a"),rao=o("BertTokenizer"),tao=o(" or "),pP=a("a"),aao=o("BertTokenizerFast"),nao=o(" (MegatronBert model)"),sao=l(),jg=a("li"),Zte=a("strong"),lao=o("mluke"),iao=o(" \u2014 "),_P=a("a"),dao=o("MLukeTokenizer"),cao=o(" (mLUKE model)"),fao=l(),fs=a("li"),eae=a("strong"),mao=o("mobilebert"),gao=o(" \u2014 "),uP=a("a"),hao=o("MobileBertTokenizer"),pao=o(" or "),bP=a("a"),_ao=o("MobileBertTokenizerFast"),uao=o(" (MobileBERT model)"),bao=l(),ms=a("li"),oae=a("strong"),vao=o("mpnet"),Fao=o(" \u2014 "),vP=a("a"),Tao=o("MPNetTokenizer"),Mao=o(" or "),FP=a("a"),Eao=o("MPNetTokenizerFast"),Cao=o(" (MPNet model)"),wao=l(),gs=a("li"),rae=a("strong"),Aao=o("mt5"),yao=o(" \u2014 "),TP=a("a"),Lao=o("MT5Tokenizer"),xao=o(" or "),MP=a("a"),$ao=o("MT5TokenizerFast"),kao=o(" (mT5 model)"),Sao=l(),hs=a("li"),tae=a("strong"),Rao=o("nystromformer"),Pao=o(" \u2014 "),EP=a("a"),Bao=o("AlbertTokenizer"),Iao=o(" or "),CP=a("a"),qao=o("AlbertTokenizerFast"),Nao=o(" (Nystromformer model)"),jao=l(),ps=a("li"),aae=a("strong"),Dao=o("openai-gpt"),Gao=o(" \u2014 "),wP=a("a"),Oao=o("OpenAIGPTTokenizer"),Vao=o(" or "),AP=a("a"),Xao=o("OpenAIGPTTokenizerFast"),zao=o(" (OpenAI GPT model)"),Wao=l(),Dg=a("li"),nae=a("strong"),Qao=o("opt"),Hao=o(" \u2014 "),yP=a("a"),Uao=o("GPT2Tokenizer"),Jao=o(" (OPT model)"),Yao=l(),_s=a("li"),sae=a("strong"),Kao=o("pegasus"),Zao=o(" \u2014 "),LP=a("a"),eno=o("PegasusTokenizer"),ono=o(" or "),xP=a("a"),rno=o("PegasusTokenizerFast"),tno=o(" (Pegasus model)"),ano=l(),Gg=a("li"),lae=a("strong"),nno=o("perceiver"),sno=o(" \u2014 "),$P=a("a"),lno=o("PerceiverTokenizer"),ino=o(" (Perceiver model)"),dno=l(),Og=a("li"),iae=a("strong"),cno=o("phobert"),fno=o(" \u2014 "),kP=a("a"),mno=o("PhobertTokenizer"),gno=o(" (PhoBERT model)"),hno=l(),Vg=a("li"),dae=a("strong"),pno=o("plbart"),_no=o(" \u2014 "),SP=a("a"),uno=o("PLBartTokenizer"),bno=o(" (PLBart model)"),vno=l(),Xg=a("li"),cae=a("strong"),Fno=o("prophetnet"),Tno=o(" \u2014 "),RP=a("a"),Mno=o("ProphetNetTokenizer"),Eno=o(" (ProphetNet model)"),Cno=l(),us=a("li"),fae=a("strong"),wno=o("qdqbert"),Ano=o(" \u2014 "),PP=a("a"),yno=o("BertTokenizer"),Lno=o(" or "),BP=a("a"),xno=o("BertTokenizerFast"),$no=o(" (QDQBert model)"),kno=l(),zg=a("li"),mae=a("strong"),Sno=o("rag"),Rno=o(" \u2014 "),IP=a("a"),Pno=o("RagTokenizer"),Bno=o(" (RAG model)"),Ino=l(),bs=a("li"),gae=a("strong"),qno=o("realm"),Nno=o(" \u2014 "),qP=a("a"),jno=o("RealmTokenizer"),Dno=o(" or "),NP=a("a"),Gno=o("RealmTokenizerFast"),Ono=o(" (Realm model)"),Vno=l(),vs=a("li"),hae=a("strong"),Xno=o("reformer"),zno=o(" \u2014 "),jP=a("a"),Wno=o("ReformerTokenizer"),Qno=o(" or "),DP=a("a"),Hno=o("ReformerTokenizerFast"),Uno=o(" (Reformer model)"),Jno=l(),Fs=a("li"),pae=a("strong"),Yno=o("rembert"),Kno=o(" \u2014 "),GP=a("a"),Zno=o("RemBertTokenizer"),eso=o(" or "),OP=a("a"),oso=o("RemBertTokenizerFast"),rso=o(" (RemBERT model)"),tso=l(),Ts=a("li"),_ae=a("strong"),aso=o("retribert"),nso=o(" \u2014 "),VP=a("a"),sso=o("RetriBertTokenizer"),lso=o(" or "),XP=a("a"),iso=o("RetriBertTokenizerFast"),dso=o(" (RetriBERT model)"),cso=l(),Ms=a("li"),uae=a("strong"),fso=o("roberta"),mso=o(" \u2014 "),zP=a("a"),gso=o("RobertaTokenizer"),hso=o(" or "),WP=a("a"),pso=o("RobertaTokenizerFast"),_so=o(" (RoBERTa model)"),uso=l(),Es=a("li"),bae=a("strong"),bso=o("roformer"),vso=o(" \u2014 "),QP=a("a"),Fso=o("RoFormerTokenizer"),Tso=o(" or "),HP=a("a"),Mso=o("RoFormerTokenizerFast"),Eso=o(" (RoFormer model)"),Cso=l(),Wg=a("li"),vae=a("strong"),wso=o("speech_to_text"),Aso=o(" \u2014 "),UP=a("a"),yso=o("Speech2TextTokenizer"),Lso=o(" (Speech2Text model)"),xso=l(),Qg=a("li"),Fae=a("strong"),$so=o("speech_to_text_2"),kso=o(" \u2014 "),JP=a("a"),Sso=o("Speech2Text2Tokenizer"),Rso=o(" (Speech2Text2 model)"),Pso=l(),Cs=a("li"),Tae=a("strong"),Bso=o("splinter"),Iso=o(" \u2014 "),YP=a("a"),qso=o("SplinterTokenizer"),Nso=o(" or "),KP=a("a"),jso=o("SplinterTokenizerFast"),Dso=o(" (Splinter model)"),Gso=l(),ws=a("li"),Mae=a("strong"),Oso=o("squeezebert"),Vso=o(" \u2014 "),ZP=a("a"),Xso=o("SqueezeBertTokenizer"),zso=o(" or "),eB=a("a"),Wso=o("SqueezeBertTokenizerFast"),Qso=o(" (SqueezeBERT model)"),Hso=l(),As=a("li"),Eae=a("strong"),Uso=o("t5"),Jso=o(" \u2014 "),oB=a("a"),Yso=o("T5Tokenizer"),Kso=o(" or "),rB=a("a"),Zso=o("T5TokenizerFast"),elo=o(" (T5 model)"),olo=l(),Hg=a("li"),Cae=a("strong"),rlo=o("tapas"),tlo=o(" \u2014 "),tB=a("a"),alo=o("TapasTokenizer"),nlo=o(" (TAPAS model)"),slo=l(),Ug=a("li"),wae=a("strong"),llo=o("tapex"),ilo=o(" \u2014 "),aB=a("a"),dlo=o("TapexTokenizer"),clo=o(" (TAPEX model)"),flo=l(),Jg=a("li"),Aae=a("strong"),mlo=o("transfo-xl"),glo=o(" \u2014 "),nB=a("a"),hlo=o("TransfoXLTokenizer"),plo=o(" (Transformer-XL model)"),_lo=l(),ys=a("li"),yae=a("strong"),ulo=o("visual_bert"),blo=o(" \u2014 "),sB=a("a"),vlo=o("BertTokenizer"),Flo=o(" or "),lB=a("a"),Tlo=o("BertTokenizerFast"),Mlo=o(" (VisualBert model)"),Elo=l(),Yg=a("li"),Lae=a("strong"),Clo=o("wav2vec2"),wlo=o(" \u2014 "),iB=a("a"),Alo=o("Wav2Vec2CTCTokenizer"),ylo=o(" (Wav2Vec2 model)"),Llo=l(),Kg=a("li"),xae=a("strong"),xlo=o("wav2vec2-conformer"),$lo=o(" \u2014 "),dB=a("a"),klo=o("Wav2Vec2CTCTokenizer"),Slo=o(" (Wav2Vec2-Conformer model)"),Rlo=l(),Zg=a("li"),$ae=a("strong"),Plo=o("wav2vec2_phoneme"),Blo=o(" \u2014 "),cB=a("a"),Ilo=o("Wav2Vec2PhonemeCTCTokenizer"),qlo=o(" (Wav2Vec2Phoneme model)"),Nlo=l(),Ls=a("li"),kae=a("strong"),jlo=o("xglm"),Dlo=o(" \u2014 "),fB=a("a"),Glo=o("XGLMTokenizer"),Olo=o(" or "),mB=a("a"),Vlo=o("XGLMTokenizerFast"),Xlo=o(" (XGLM model)"),zlo=l(),eh=a("li"),Sae=a("strong"),Wlo=o("xlm"),Qlo=o(" \u2014 "),gB=a("a"),Hlo=o("XLMTokenizer"),Ulo=o(" (XLM model)"),Jlo=l(),oh=a("li"),Rae=a("strong"),Ylo=o("xlm-prophetnet"),Klo=o(" \u2014 "),hB=a("a"),Zlo=o("XLMProphetNetTokenizer"),eio=o(" (XLMProphetNet model)"),oio=l(),xs=a("li"),Pae=a("strong"),rio=o("xlm-roberta"),tio=o(" \u2014 "),pB=a("a"),aio=o("XLMRobertaTokenizer"),nio=o(" or "),_B=a("a"),sio=o("XLMRobertaTokenizerFast"),lio=o(" (XLM-RoBERTa model)"),iio=l(),$s=a("li"),Bae=a("strong"),dio=o("xlm-roberta-xl"),cio=o(" \u2014 "),uB=a("a"),fio=o("RobertaTokenizer"),mio=o(" or "),bB=a("a"),gio=o("RobertaTokenizerFast"),hio=o(" (XLM-RoBERTa-XL model)"),pio=l(),ks=a("li"),Iae=a("strong"),_io=o("xlnet"),uio=o(" \u2014 "),vB=a("a"),bio=o("XLNetTokenizer"),vio=o(" or "),FB=a("a"),Fio=o("XLNetTokenizerFast"),Tio=o(" (XLNet model)"),Mio=l(),Ss=a("li"),qae=a("strong"),Eio=o("yoso"),Cio=o(" \u2014 "),TB=a("a"),wio=o("AlbertTokenizer"),Aio=o(" or "),MB=a("a"),yio=o("AlbertTokenizerFast"),Lio=o(" (YOSO model)"),xio=l(),F(rh.$$.fragment),$io=l(),th=a("div"),F(SA.$$.fragment),kio=l(),Nae=a("p"),Sio=o("Register a new tokenizer in this mapping."),Lqe=l(),Mi=a("h2"),ah=a("a"),jae=a("span"),F(RA.$$.fragment),Rio=l(),Dae=a("span"),Pio=o("AutoFeatureExtractor"),xqe=l(),Ao=a("div"),F(PA.$$.fragment),Bio=l(),BA=a("p"),Iio=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),EB=a("a"),qio=o("AutoFeatureExtractor.from_pretrained()"),Nio=o(" class method."),jio=l(),IA=a("p"),Dio=o("This class cannot be instantiated directly using "),Gae=a("code"),Gio=o("__init__()"),Oio=o(" (throws an error)."),Vio=l(),He=a("div"),F(qA.$$.fragment),Xio=l(),Oae=a("p"),zio=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Wio=l(),La=a("p"),Qio=o("The feature extractor class to instantiate is selected based on the "),Vae=a("code"),Hio=o("model_type"),Uio=o(` property of the config object
(either passed as an argument or loaded from `),Xae=a("code"),Jio=o("pretrained_model_name_or_path"),Yio=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),zae=a("code"),Kio=o("pretrained_model_name_or_path"),Zio=o(":"),edo=l(),K=a("ul"),nh=a("li"),Wae=a("strong"),odo=o("beit"),rdo=o(" \u2014 "),CB=a("a"),tdo=o("BeitFeatureExtractor"),ado=o(" (BEiT model)"),ndo=l(),sh=a("li"),Qae=a("strong"),sdo=o("clip"),ldo=o(" \u2014 "),wB=a("a"),ido=o("CLIPFeatureExtractor"),ddo=o(" (CLIP model)"),cdo=l(),lh=a("li"),Hae=a("strong"),fdo=o("convnext"),mdo=o(" \u2014 "),AB=a("a"),gdo=o("ConvNextFeatureExtractor"),hdo=o(" (ConvNext model)"),pdo=l(),ih=a("li"),Uae=a("strong"),_do=o("cvt"),udo=o(" \u2014 "),yB=a("a"),bdo=o("ConvNextFeatureExtractor"),vdo=o(" (CvT model)"),Fdo=l(),dh=a("li"),Jae=a("strong"),Tdo=o("data2vec-audio"),Mdo=o(" \u2014 "),LB=a("a"),Edo=o("Wav2Vec2FeatureExtractor"),Cdo=o(" (Data2VecAudio model)"),wdo=l(),ch=a("li"),Yae=a("strong"),Ado=o("data2vec-vision"),ydo=o(" \u2014 "),xB=a("a"),Ldo=o("BeitFeatureExtractor"),xdo=o(" (Data2VecVision model)"),$do=l(),fh=a("li"),Kae=a("strong"),kdo=o("deit"),Sdo=o(" \u2014 "),$B=a("a"),Rdo=o("DeiTFeatureExtractor"),Pdo=o(" (DeiT model)"),Bdo=l(),mh=a("li"),Zae=a("strong"),Ido=o("detr"),qdo=o(" \u2014 "),kB=a("a"),Ndo=o("DetrFeatureExtractor"),jdo=o(" (DETR model)"),Ddo=l(),gh=a("li"),ene=a("strong"),Gdo=o("dpt"),Odo=o(" \u2014 "),SB=a("a"),Vdo=o("DPTFeatureExtractor"),Xdo=o(" (DPT model)"),zdo=l(),hh=a("li"),one=a("strong"),Wdo=o("flava"),Qdo=o(" \u2014 "),RB=a("a"),Hdo=o("FlavaFeatureExtractor"),Udo=o(" (Flava model)"),Jdo=l(),ph=a("li"),rne=a("strong"),Ydo=o("glpn"),Kdo=o(" \u2014 "),PB=a("a"),Zdo=o("GLPNFeatureExtractor"),eco=o(" (GLPN model)"),oco=l(),_h=a("li"),tne=a("strong"),rco=o("hubert"),tco=o(" \u2014 "),BB=a("a"),aco=o("Wav2Vec2FeatureExtractor"),nco=o(" (Hubert model)"),sco=l(),uh=a("li"),ane=a("strong"),lco=o("layoutlmv2"),ico=o(" \u2014 "),IB=a("a"),dco=o("LayoutLMv2FeatureExtractor"),cco=o(" (LayoutLMv2 model)"),fco=l(),bh=a("li"),nne=a("strong"),mco=o("maskformer"),gco=o(" \u2014 "),qB=a("a"),hco=o("MaskFormerFeatureExtractor"),pco=o(" (MaskFormer model)"),_co=l(),vh=a("li"),sne=a("strong"),uco=o("mobilevit"),bco=o(" \u2014 "),NB=a("a"),vco=o("MobileViTFeatureExtractor"),Fco=o(" (MobileViT model)"),Tco=l(),Fh=a("li"),lne=a("strong"),Mco=o("perceiver"),Eco=o(" \u2014 "),jB=a("a"),Cco=o("PerceiverFeatureExtractor"),wco=o(" (Perceiver model)"),Aco=l(),Th=a("li"),ine=a("strong"),yco=o("poolformer"),Lco=o(" \u2014 "),DB=a("a"),xco=o("PoolFormerFeatureExtractor"),$co=o(" (PoolFormer model)"),kco=l(),Mh=a("li"),dne=a("strong"),Sco=o("regnet"),Rco=o(" \u2014 "),GB=a("a"),Pco=o("ConvNextFeatureExtractor"),Bco=o(" (RegNet model)"),Ico=l(),Eh=a("li"),cne=a("strong"),qco=o("resnet"),Nco=o(" \u2014 "),OB=a("a"),jco=o("ConvNextFeatureExtractor"),Dco=o(" (ResNet model)"),Gco=l(),Ch=a("li"),fne=a("strong"),Oco=o("segformer"),Vco=o(" \u2014 "),VB=a("a"),Xco=o("SegformerFeatureExtractor"),zco=o(" (SegFormer model)"),Wco=l(),wh=a("li"),mne=a("strong"),Qco=o("speech_to_text"),Hco=o(" \u2014 "),XB=a("a"),Uco=o("Speech2TextFeatureExtractor"),Jco=o(" (Speech2Text model)"),Yco=l(),Ah=a("li"),gne=a("strong"),Kco=o("swin"),Zco=o(" \u2014 "),zB=a("a"),efo=o("ViTFeatureExtractor"),ofo=o(" (Swin model)"),rfo=l(),yh=a("li"),hne=a("strong"),tfo=o("van"),afo=o(" \u2014 "),WB=a("a"),nfo=o("ConvNextFeatureExtractor"),sfo=o(" (VAN model)"),lfo=l(),Lh=a("li"),pne=a("strong"),ifo=o("vit"),dfo=o(" \u2014 "),QB=a("a"),cfo=o("ViTFeatureExtractor"),ffo=o(" (ViT model)"),mfo=l(),xh=a("li"),_ne=a("strong"),gfo=o("vit_mae"),hfo=o(" \u2014 "),HB=a("a"),pfo=o("ViTFeatureExtractor"),_fo=o(" (ViTMAE model)"),ufo=l(),$h=a("li"),une=a("strong"),bfo=o("wav2vec2"),vfo=o(" \u2014 "),UB=a("a"),Ffo=o("Wav2Vec2FeatureExtractor"),Tfo=o(" (Wav2Vec2 model)"),Mfo=l(),kh=a("li"),bne=a("strong"),Efo=o("wav2vec2-conformer"),Cfo=o(" \u2014 "),JB=a("a"),wfo=o("Wav2Vec2FeatureExtractor"),Afo=o(" (Wav2Vec2-Conformer model)"),yfo=l(),Sh=a("li"),vne=a("strong"),Lfo=o("yolos"),xfo=o(" \u2014 "),YB=a("a"),$fo=o("YolosFeatureExtractor"),kfo=o(" (YOLOS model)"),Sfo=l(),F(Rh.$$.fragment),Rfo=l(),F(Ph.$$.fragment),Pfo=l(),Bh=a("div"),F(NA.$$.fragment),Bfo=l(),Fne=a("p"),Ifo=o("Register a new feature extractor for this class."),$qe=l(),Ei=a("h2"),Ih=a("a"),Tne=a("span"),F(jA.$$.fragment),qfo=l(),Mne=a("span"),Nfo=o("AutoProcessor"),kqe=l(),yo=a("div"),F(DA.$$.fragment),jfo=l(),GA=a("p"),Dfo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),KB=a("a"),Gfo=o("AutoProcessor.from_pretrained()"),Ofo=o(" class method."),Vfo=l(),OA=a("p"),Xfo=o("This class cannot be instantiated directly using "),Ene=a("code"),zfo=o("__init__()"),Wfo=o(" (throws an error)."),Qfo=l(),Ue=a("div"),F(VA.$$.fragment),Hfo=l(),Cne=a("p"),Ufo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Jfo=l(),Ci=a("p"),Yfo=o("The processor class to instantiate is selected based on the "),wne=a("code"),Kfo=o("model_type"),Zfo=o(` property of the config object (either
passed as an argument or loaded from `),Ane=a("code"),emo=o("pretrained_model_name_or_path"),omo=o(" if possible):"),rmo=l(),pe=a("ul"),qh=a("li"),yne=a("strong"),tmo=o("clip"),amo=o(" \u2014 "),ZB=a("a"),nmo=o("CLIPProcessor"),smo=o(" (CLIP model)"),lmo=l(),Nh=a("li"),Lne=a("strong"),imo=o("flava"),dmo=o(" \u2014 "),xne=a("code"),cmo=o("FLAVAProcessor"),fmo=o(" (Flava model)"),mmo=l(),jh=a("li"),$ne=a("strong"),gmo=o("layoutlmv2"),hmo=o(" \u2014 "),eI=a("a"),pmo=o("LayoutLMv2Processor"),_mo=o(" (LayoutLMv2 model)"),umo=l(),Dh=a("li"),kne=a("strong"),bmo=o("layoutxlm"),vmo=o(" \u2014 "),oI=a("a"),Fmo=o("LayoutXLMProcessor"),Tmo=o(" (LayoutXLM model)"),Mmo=l(),Gh=a("li"),Sne=a("strong"),Emo=o("sew"),Cmo=o(" \u2014 "),rI=a("a"),wmo=o("Wav2Vec2Processor"),Amo=o(" (SEW model)"),ymo=l(),Oh=a("li"),Rne=a("strong"),Lmo=o("sew-d"),xmo=o(" \u2014 "),tI=a("a"),$mo=o("Wav2Vec2Processor"),kmo=o(" (SEW-D model)"),Smo=l(),Vh=a("li"),Pne=a("strong"),Rmo=o("speech_to_text"),Pmo=o(" \u2014 "),aI=a("a"),Bmo=o("Speech2TextProcessor"),Imo=o(" (Speech2Text model)"),qmo=l(),Xh=a("li"),Bne=a("strong"),Nmo=o("speech_to_text_2"),jmo=o(" \u2014 "),nI=a("a"),Dmo=o("Speech2Text2Processor"),Gmo=o(" (Speech2Text2 model)"),Omo=l(),zh=a("li"),Ine=a("strong"),Vmo=o("trocr"),Xmo=o(" \u2014 "),sI=a("a"),zmo=o("TrOCRProcessor"),Wmo=o(" (TrOCR model)"),Qmo=l(),Wh=a("li"),qne=a("strong"),Hmo=o("unispeech"),Umo=o(" \u2014 "),lI=a("a"),Jmo=o("Wav2Vec2Processor"),Ymo=o(" (UniSpeech model)"),Kmo=l(),Qh=a("li"),Nne=a("strong"),Zmo=o("unispeech-sat"),ego=o(" \u2014 "),iI=a("a"),ogo=o("Wav2Vec2Processor"),rgo=o(" (UniSpeechSat model)"),tgo=l(),Hh=a("li"),jne=a("strong"),ago=o("vilt"),ngo=o(" \u2014 "),dI=a("a"),sgo=o("ViltProcessor"),lgo=o(" (ViLT model)"),igo=l(),Uh=a("li"),Dne=a("strong"),dgo=o("vision-text-dual-encoder"),cgo=o(" \u2014 "),cI=a("a"),fgo=o("VisionTextDualEncoderProcessor"),mgo=o(" (VisionTextDualEncoder model)"),ggo=l(),Jh=a("li"),Gne=a("strong"),hgo=o("wav2vec2"),pgo=o(" \u2014 "),fI=a("a"),_go=o("Wav2Vec2Processor"),ugo=o(" (Wav2Vec2 model)"),bgo=l(),Yh=a("li"),One=a("strong"),vgo=o("wav2vec2-conformer"),Fgo=o(" \u2014 "),mI=a("a"),Tgo=o("Wav2Vec2Processor"),Mgo=o(" (Wav2Vec2-Conformer model)"),Ego=l(),Kh=a("li"),Vne=a("strong"),Cgo=o("wavlm"),wgo=o(" \u2014 "),gI=a("a"),Ago=o("Wav2Vec2Processor"),ygo=o(" (WavLM model)"),Lgo=l(),F(Zh.$$.fragment),xgo=l(),F(ep.$$.fragment),$go=l(),op=a("div"),F(XA.$$.fragment),kgo=l(),Xne=a("p"),Sgo=o("Register a new processor for this class."),Sqe=l(),wi=a("h2"),rp=a("a"),zne=a("span"),F(zA.$$.fragment),Rgo=l(),Wne=a("span"),Pgo=o("AutoModel"),Rqe=l(),Lo=a("div"),F(WA.$$.fragment),Bgo=l(),Ai=a("p"),Igo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),hI=a("a"),qgo=o("from_pretrained()"),Ngo=o(" class method or the "),pI=a("a"),jgo=o("from_config()"),Dgo=o(` class
method.`),Ggo=l(),QA=a("p"),Ogo=o("This class cannot be instantiated directly using "),Qne=a("code"),Vgo=o("__init__()"),Xgo=o(" (throws an error)."),zgo=l(),at=a("div"),F(HA.$$.fragment),Wgo=l(),Hne=a("p"),Qgo=o("Instantiates one of the base model classes of the library from a configuration."),Hgo=l(),yi=a("p"),Ugo=o(`Note:
Loading a model from its configuration file does `),Une=a("strong"),Jgo=o("not"),Ygo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_I=a("a"),Kgo=o("from_pretrained()"),Zgo=o(" to load the model weights."),eho=l(),F(tp.$$.fragment),oho=l(),Je=a("div"),F(UA.$$.fragment),rho=l(),Jne=a("p"),tho=o("Instantiate one of the base model classes of the library from a pretrained model."),aho=l(),xa=a("p"),nho=o("The model class to instantiate is selected based on the "),Yne=a("code"),sho=o("model_type"),lho=o(` property of the config object (either
passed as an argument or loaded from `),Kne=a("code"),iho=o("pretrained_model_name_or_path"),dho=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zne=a("code"),cho=o("pretrained_model_name_or_path"),fho=o(":"),mho=l(),x=a("ul"),ap=a("li"),ese=a("strong"),gho=o("albert"),hho=o(" \u2014 "),uI=a("a"),pho=o("AlbertModel"),_ho=o(" (ALBERT model)"),uho=l(),np=a("li"),ose=a("strong"),bho=o("bart"),vho=o(" \u2014 "),bI=a("a"),Fho=o("BartModel"),Tho=o(" (BART model)"),Mho=l(),sp=a("li"),rse=a("strong"),Eho=o("beit"),Cho=o(" \u2014 "),vI=a("a"),who=o("BeitModel"),Aho=o(" (BEiT model)"),yho=l(),lp=a("li"),tse=a("strong"),Lho=o("bert"),xho=o(" \u2014 "),FI=a("a"),$ho=o("BertModel"),kho=o(" (BERT model)"),Sho=l(),ip=a("li"),ase=a("strong"),Rho=o("bert-generation"),Pho=o(" \u2014 "),TI=a("a"),Bho=o("BertGenerationEncoder"),Iho=o(" (Bert Generation model)"),qho=l(),dp=a("li"),nse=a("strong"),Nho=o("big_bird"),jho=o(" \u2014 "),MI=a("a"),Dho=o("BigBirdModel"),Gho=o(" (BigBird model)"),Oho=l(),cp=a("li"),sse=a("strong"),Vho=o("bigbird_pegasus"),Xho=o(" \u2014 "),EI=a("a"),zho=o("BigBirdPegasusModel"),Who=o(" (BigBirdPegasus model)"),Qho=l(),fp=a("li"),lse=a("strong"),Hho=o("blenderbot"),Uho=o(" \u2014 "),CI=a("a"),Jho=o("BlenderbotModel"),Yho=o(" (Blenderbot model)"),Kho=l(),mp=a("li"),ise=a("strong"),Zho=o("blenderbot-small"),epo=o(" \u2014 "),wI=a("a"),opo=o("BlenderbotSmallModel"),rpo=o(" (BlenderbotSmall model)"),tpo=l(),gp=a("li"),dse=a("strong"),apo=o("camembert"),npo=o(" \u2014 "),AI=a("a"),spo=o("CamembertModel"),lpo=o(" (CamemBERT model)"),ipo=l(),hp=a("li"),cse=a("strong"),dpo=o("canine"),cpo=o(" \u2014 "),yI=a("a"),fpo=o("CanineModel"),mpo=o(" (Canine model)"),gpo=l(),pp=a("li"),fse=a("strong"),hpo=o("clip"),ppo=o(" \u2014 "),LI=a("a"),_po=o("CLIPModel"),upo=o(" (CLIP model)"),bpo=l(),_p=a("li"),mse=a("strong"),vpo=o("convbert"),Fpo=o(" \u2014 "),xI=a("a"),Tpo=o("ConvBertModel"),Mpo=o(" (ConvBERT model)"),Epo=l(),up=a("li"),gse=a("strong"),Cpo=o("convnext"),wpo=o(" \u2014 "),$I=a("a"),Apo=o("ConvNextModel"),ypo=o(" (ConvNext model)"),Lpo=l(),bp=a("li"),hse=a("strong"),xpo=o("ctrl"),$po=o(" \u2014 "),kI=a("a"),kpo=o("CTRLModel"),Spo=o(" (CTRL model)"),Rpo=l(),vp=a("li"),pse=a("strong"),Ppo=o("cvt"),Bpo=o(" \u2014 "),SI=a("a"),Ipo=o("CvtModel"),qpo=o(" (CvT model)"),Npo=l(),Fp=a("li"),_se=a("strong"),jpo=o("data2vec-audio"),Dpo=o(" \u2014 "),RI=a("a"),Gpo=o("Data2VecAudioModel"),Opo=o(" (Data2VecAudio model)"),Vpo=l(),Tp=a("li"),use=a("strong"),Xpo=o("data2vec-text"),zpo=o(" \u2014 "),PI=a("a"),Wpo=o("Data2VecTextModel"),Qpo=o(" (Data2VecText model)"),Hpo=l(),Mp=a("li"),bse=a("strong"),Upo=o("data2vec-vision"),Jpo=o(" \u2014 "),BI=a("a"),Ypo=o("Data2VecVisionModel"),Kpo=o(" (Data2VecVision model)"),Zpo=l(),Ep=a("li"),vse=a("strong"),e_o=o("deberta"),o_o=o(" \u2014 "),II=a("a"),r_o=o("DebertaModel"),t_o=o(" (DeBERTa model)"),a_o=l(),Cp=a("li"),Fse=a("strong"),n_o=o("deberta-v2"),s_o=o(" \u2014 "),qI=a("a"),l_o=o("DebertaV2Model"),i_o=o(" (DeBERTa-v2 model)"),d_o=l(),wp=a("li"),Tse=a("strong"),c_o=o("decision_transformer"),f_o=o(" \u2014 "),NI=a("a"),m_o=o("DecisionTransformerModel"),g_o=o(" (Decision Transformer model)"),h_o=l(),Ap=a("li"),Mse=a("strong"),p_o=o("deit"),__o=o(" \u2014 "),jI=a("a"),u_o=o("DeiTModel"),b_o=o(" (DeiT model)"),v_o=l(),yp=a("li"),Ese=a("strong"),F_o=o("detr"),T_o=o(" \u2014 "),DI=a("a"),M_o=o("DetrModel"),E_o=o(" (DETR model)"),C_o=l(),Lp=a("li"),Cse=a("strong"),w_o=o("distilbert"),A_o=o(" \u2014 "),GI=a("a"),y_o=o("DistilBertModel"),L_o=o(" (DistilBERT model)"),x_o=l(),xp=a("li"),wse=a("strong"),$_o=o("dpr"),k_o=o(" \u2014 "),OI=a("a"),S_o=o("DPRQuestionEncoder"),R_o=o(" (DPR model)"),P_o=l(),$p=a("li"),Ase=a("strong"),B_o=o("dpt"),I_o=o(" \u2014 "),VI=a("a"),q_o=o("DPTModel"),N_o=o(" (DPT model)"),j_o=l(),kp=a("li"),yse=a("strong"),D_o=o("electra"),G_o=o(" \u2014 "),XI=a("a"),O_o=o("ElectraModel"),V_o=o(" (ELECTRA model)"),X_o=l(),Sp=a("li"),Lse=a("strong"),z_o=o("flaubert"),W_o=o(" \u2014 "),zI=a("a"),Q_o=o("FlaubertModel"),H_o=o(" (FlauBERT model)"),U_o=l(),Rp=a("li"),xse=a("strong"),J_o=o("flava"),Y_o=o(" \u2014 "),WI=a("a"),K_o=o("FlavaModel"),Z_o=o(" (Flava model)"),euo=l(),Pp=a("li"),$se=a("strong"),ouo=o("fnet"),ruo=o(" \u2014 "),QI=a("a"),tuo=o("FNetModel"),auo=o(" (FNet model)"),nuo=l(),Bp=a("li"),kse=a("strong"),suo=o("fsmt"),luo=o(" \u2014 "),HI=a("a"),iuo=o("FSMTModel"),duo=o(" (FairSeq Machine-Translation model)"),cuo=l(),Rs=a("li"),Sse=a("strong"),fuo=o("funnel"),muo=o(" \u2014 "),UI=a("a"),guo=o("FunnelModel"),huo=o(" or "),JI=a("a"),puo=o("FunnelBaseModel"),_uo=o(" (Funnel Transformer model)"),uuo=l(),Ip=a("li"),Rse=a("strong"),buo=o("glpn"),vuo=o(" \u2014 "),YI=a("a"),Fuo=o("GLPNModel"),Tuo=o(" (GLPN model)"),Muo=l(),qp=a("li"),Pse=a("strong"),Euo=o("gpt2"),Cuo=o(" \u2014 "),KI=a("a"),wuo=o("GPT2Model"),Auo=o(" (OpenAI GPT-2 model)"),yuo=l(),Np=a("li"),Bse=a("strong"),Luo=o("gpt_neo"),xuo=o(" \u2014 "),ZI=a("a"),$uo=o("GPTNeoModel"),kuo=o(" (GPT Neo model)"),Suo=l(),jp=a("li"),Ise=a("strong"),Ruo=o("gptj"),Puo=o(" \u2014 "),eq=a("a"),Buo=o("GPTJModel"),Iuo=o(" (GPT-J model)"),quo=l(),Dp=a("li"),qse=a("strong"),Nuo=o("hubert"),juo=o(" \u2014 "),oq=a("a"),Duo=o("HubertModel"),Guo=o(" (Hubert model)"),Ouo=l(),Gp=a("li"),Nse=a("strong"),Vuo=o("ibert"),Xuo=o(" \u2014 "),rq=a("a"),zuo=o("IBertModel"),Wuo=o(" (I-BERT model)"),Quo=l(),Op=a("li"),jse=a("strong"),Huo=o("imagegpt"),Uuo=o(" \u2014 "),tq=a("a"),Juo=o("ImageGPTModel"),Yuo=o(" (ImageGPT model)"),Kuo=l(),Vp=a("li"),Dse=a("strong"),Zuo=o("layoutlm"),e2o=o(" \u2014 "),aq=a("a"),o2o=o("LayoutLMModel"),r2o=o(" (LayoutLM model)"),t2o=l(),Xp=a("li"),Gse=a("strong"),a2o=o("layoutlmv2"),n2o=o(" \u2014 "),nq=a("a"),s2o=o("LayoutLMv2Model"),l2o=o(" (LayoutLMv2 model)"),i2o=l(),zp=a("li"),Ose=a("strong"),d2o=o("led"),c2o=o(" \u2014 "),sq=a("a"),f2o=o("LEDModel"),m2o=o(" (LED model)"),g2o=l(),Wp=a("li"),Vse=a("strong"),h2o=o("longformer"),p2o=o(" \u2014 "),lq=a("a"),_2o=o("LongformerModel"),u2o=o(" (Longformer model)"),b2o=l(),Qp=a("li"),Xse=a("strong"),v2o=o("luke"),F2o=o(" \u2014 "),iq=a("a"),T2o=o("LukeModel"),M2o=o(" (LUKE model)"),E2o=l(),Hp=a("li"),zse=a("strong"),C2o=o("lxmert"),w2o=o(" \u2014 "),dq=a("a"),A2o=o("LxmertModel"),y2o=o(" (LXMERT model)"),L2o=l(),Up=a("li"),Wse=a("strong"),x2o=o("m2m_100"),$2o=o(" \u2014 "),cq=a("a"),k2o=o("M2M100Model"),S2o=o(" (M2M100 model)"),R2o=l(),Jp=a("li"),Qse=a("strong"),P2o=o("marian"),B2o=o(" \u2014 "),fq=a("a"),I2o=o("MarianModel"),q2o=o(" (Marian model)"),N2o=l(),Yp=a("li"),Hse=a("strong"),j2o=o("maskformer"),D2o=o(" \u2014 "),mq=a("a"),G2o=o("MaskFormerModel"),O2o=o(" (MaskFormer model)"),V2o=l(),Kp=a("li"),Use=a("strong"),X2o=o("mbart"),z2o=o(" \u2014 "),gq=a("a"),W2o=o("MBartModel"),Q2o=o(" (mBART model)"),H2o=l(),Zp=a("li"),Jse=a("strong"),U2o=o("megatron-bert"),J2o=o(" \u2014 "),hq=a("a"),Y2o=o("MegatronBertModel"),K2o=o(" (MegatronBert model)"),Z2o=l(),e_=a("li"),Yse=a("strong"),e1o=o("mobilebert"),o1o=o(" \u2014 "),pq=a("a"),r1o=o("MobileBertModel"),t1o=o(" (MobileBERT model)"),a1o=l(),o_=a("li"),Kse=a("strong"),n1o=o("mobilevit"),s1o=o(" \u2014 "),_q=a("a"),l1o=o("MobileViTModel"),i1o=o(" (MobileViT model)"),d1o=l(),r_=a("li"),Zse=a("strong"),c1o=o("mpnet"),f1o=o(" \u2014 "),uq=a("a"),m1o=o("MPNetModel"),g1o=o(" (MPNet model)"),h1o=l(),t_=a("li"),ele=a("strong"),p1o=o("mt5"),_1o=o(" \u2014 "),bq=a("a"),u1o=o("MT5Model"),b1o=o(" (mT5 model)"),v1o=l(),a_=a("li"),ole=a("strong"),F1o=o("nystromformer"),T1o=o(" \u2014 "),vq=a("a"),M1o=o("NystromformerModel"),E1o=o(" (Nystromformer model)"),C1o=l(),n_=a("li"),rle=a("strong"),w1o=o("openai-gpt"),A1o=o(" \u2014 "),Fq=a("a"),y1o=o("OpenAIGPTModel"),L1o=o(" (OpenAI GPT model)"),x1o=l(),s_=a("li"),tle=a("strong"),$1o=o("opt"),k1o=o(" \u2014 "),Tq=a("a"),S1o=o("OPTModel"),R1o=o(" (OPT model)"),P1o=l(),l_=a("li"),ale=a("strong"),B1o=o("pegasus"),I1o=o(" \u2014 "),Mq=a("a"),q1o=o("PegasusModel"),N1o=o(" (Pegasus model)"),j1o=l(),i_=a("li"),nle=a("strong"),D1o=o("perceiver"),G1o=o(" \u2014 "),Eq=a("a"),O1o=o("PerceiverModel"),V1o=o(" (Perceiver model)"),X1o=l(),d_=a("li"),sle=a("strong"),z1o=o("plbart"),W1o=o(" \u2014 "),Cq=a("a"),Q1o=o("PLBartModel"),H1o=o(" (PLBart model)"),U1o=l(),c_=a("li"),lle=a("strong"),J1o=o("poolformer"),Y1o=o(" \u2014 "),wq=a("a"),K1o=o("PoolFormerModel"),Z1o=o(" (PoolFormer model)"),ebo=l(),f_=a("li"),ile=a("strong"),obo=o("prophetnet"),rbo=o(" \u2014 "),Aq=a("a"),tbo=o("ProphetNetModel"),abo=o(" (ProphetNet model)"),nbo=l(),m_=a("li"),dle=a("strong"),sbo=o("qdqbert"),lbo=o(" \u2014 "),yq=a("a"),ibo=o("QDQBertModel"),dbo=o(" (QDQBert model)"),cbo=l(),g_=a("li"),cle=a("strong"),fbo=o("reformer"),mbo=o(" \u2014 "),Lq=a("a"),gbo=o("ReformerModel"),hbo=o(" (Reformer model)"),pbo=l(),h_=a("li"),fle=a("strong"),_bo=o("regnet"),ubo=o(" \u2014 "),xq=a("a"),bbo=o("RegNetModel"),vbo=o(" (RegNet model)"),Fbo=l(),p_=a("li"),mle=a("strong"),Tbo=o("rembert"),Mbo=o(" \u2014 "),$q=a("a"),Ebo=o("RemBertModel"),Cbo=o(" (RemBERT model)"),wbo=l(),__=a("li"),gle=a("strong"),Abo=o("resnet"),ybo=o(" \u2014 "),kq=a("a"),Lbo=o("ResNetModel"),xbo=o(" (ResNet model)"),$bo=l(),u_=a("li"),hle=a("strong"),kbo=o("retribert"),Sbo=o(" \u2014 "),Sq=a("a"),Rbo=o("RetriBertModel"),Pbo=o(" (RetriBERT model)"),Bbo=l(),b_=a("li"),ple=a("strong"),Ibo=o("roberta"),qbo=o(" \u2014 "),Rq=a("a"),Nbo=o("RobertaModel"),jbo=o(" (RoBERTa model)"),Dbo=l(),v_=a("li"),_le=a("strong"),Gbo=o("roformer"),Obo=o(" \u2014 "),Pq=a("a"),Vbo=o("RoFormerModel"),Xbo=o(" (RoFormer model)"),zbo=l(),F_=a("li"),ule=a("strong"),Wbo=o("segformer"),Qbo=o(" \u2014 "),Bq=a("a"),Hbo=o("SegformerModel"),Ubo=o(" (SegFormer model)"),Jbo=l(),T_=a("li"),ble=a("strong"),Ybo=o("sew"),Kbo=o(" \u2014 "),Iq=a("a"),Zbo=o("SEWModel"),e5o=o(" (SEW model)"),o5o=l(),M_=a("li"),vle=a("strong"),r5o=o("sew-d"),t5o=o(" \u2014 "),qq=a("a"),a5o=o("SEWDModel"),n5o=o(" (SEW-D model)"),s5o=l(),E_=a("li"),Fle=a("strong"),l5o=o("speech_to_text"),i5o=o(" \u2014 "),Nq=a("a"),d5o=o("Speech2TextModel"),c5o=o(" (Speech2Text model)"),f5o=l(),C_=a("li"),Tle=a("strong"),m5o=o("splinter"),g5o=o(" \u2014 "),jq=a("a"),h5o=o("SplinterModel"),p5o=o(" (Splinter model)"),_5o=l(),w_=a("li"),Mle=a("strong"),u5o=o("squeezebert"),b5o=o(" \u2014 "),Dq=a("a"),v5o=o("SqueezeBertModel"),F5o=o(" (SqueezeBERT model)"),T5o=l(),A_=a("li"),Ele=a("strong"),M5o=o("swin"),E5o=o(" \u2014 "),Gq=a("a"),C5o=o("SwinModel"),w5o=o(" (Swin model)"),A5o=l(),y_=a("li"),Cle=a("strong"),y5o=o("t5"),L5o=o(" \u2014 "),Oq=a("a"),x5o=o("T5Model"),$5o=o(" (T5 model)"),k5o=l(),L_=a("li"),wle=a("strong"),S5o=o("tapas"),R5o=o(" \u2014 "),Vq=a("a"),P5o=o("TapasModel"),B5o=o(" (TAPAS model)"),I5o=l(),x_=a("li"),Ale=a("strong"),q5o=o("trajectory_transformer"),N5o=o(" \u2014 "),Xq=a("a"),j5o=o("TrajectoryTransformerModel"),D5o=o(" (Trajectory Transformer model)"),G5o=l(),$_=a("li"),yle=a("strong"),O5o=o("transfo-xl"),V5o=o(" \u2014 "),zq=a("a"),X5o=o("TransfoXLModel"),z5o=o(" (Transformer-XL model)"),W5o=l(),k_=a("li"),Lle=a("strong"),Q5o=o("unispeech"),H5o=o(" \u2014 "),Wq=a("a"),U5o=o("UniSpeechModel"),J5o=o(" (UniSpeech model)"),Y5o=l(),S_=a("li"),xle=a("strong"),K5o=o("unispeech-sat"),Z5o=o(" \u2014 "),Qq=a("a"),evo=o("UniSpeechSatModel"),ovo=o(" (UniSpeechSat model)"),rvo=l(),R_=a("li"),$le=a("strong"),tvo=o("van"),avo=o(" \u2014 "),Hq=a("a"),nvo=o("VanModel"),svo=o(" (VAN model)"),lvo=l(),P_=a("li"),kle=a("strong"),ivo=o("vilt"),dvo=o(" \u2014 "),Uq=a("a"),cvo=o("ViltModel"),fvo=o(" (ViLT model)"),mvo=l(),B_=a("li"),Sle=a("strong"),gvo=o("vision-text-dual-encoder"),hvo=o(" \u2014 "),Jq=a("a"),pvo=o("VisionTextDualEncoderModel"),_vo=o(" (VisionTextDualEncoder model)"),uvo=l(),I_=a("li"),Rle=a("strong"),bvo=o("visual_bert"),vvo=o(" \u2014 "),Yq=a("a"),Fvo=o("VisualBertModel"),Tvo=o(" (VisualBert model)"),Mvo=l(),q_=a("li"),Ple=a("strong"),Evo=o("vit"),Cvo=o(" \u2014 "),Kq=a("a"),wvo=o("ViTModel"),Avo=o(" (ViT model)"),yvo=l(),N_=a("li"),Ble=a("strong"),Lvo=o("vit_mae"),xvo=o(" \u2014 "),Zq=a("a"),$vo=o("ViTMAEModel"),kvo=o(" (ViTMAE model)"),Svo=l(),j_=a("li"),Ile=a("strong"),Rvo=o("wav2vec2"),Pvo=o(" \u2014 "),eN=a("a"),Bvo=o("Wav2Vec2Model"),Ivo=o(" (Wav2Vec2 model)"),qvo=l(),D_=a("li"),qle=a("strong"),Nvo=o("wav2vec2-conformer"),jvo=o(" \u2014 "),oN=a("a"),Dvo=o("Wav2Vec2ConformerModel"),Gvo=o(" (Wav2Vec2-Conformer model)"),Ovo=l(),G_=a("li"),Nle=a("strong"),Vvo=o("wavlm"),Xvo=o(" \u2014 "),rN=a("a"),zvo=o("WavLMModel"),Wvo=o(" (WavLM model)"),Qvo=l(),O_=a("li"),jle=a("strong"),Hvo=o("xglm"),Uvo=o(" \u2014 "),tN=a("a"),Jvo=o("XGLMModel"),Yvo=o(" (XGLM model)"),Kvo=l(),V_=a("li"),Dle=a("strong"),Zvo=o("xlm"),eFo=o(" \u2014 "),aN=a("a"),oFo=o("XLMModel"),rFo=o(" (XLM model)"),tFo=l(),X_=a("li"),Gle=a("strong"),aFo=o("xlm-prophetnet"),nFo=o(" \u2014 "),nN=a("a"),sFo=o("XLMProphetNetModel"),lFo=o(" (XLMProphetNet model)"),iFo=l(),z_=a("li"),Ole=a("strong"),dFo=o("xlm-roberta"),cFo=o(" \u2014 "),sN=a("a"),fFo=o("XLMRobertaModel"),mFo=o(" (XLM-RoBERTa model)"),gFo=l(),W_=a("li"),Vle=a("strong"),hFo=o("xlm-roberta-xl"),pFo=o(" \u2014 "),lN=a("a"),_Fo=o("XLMRobertaXLModel"),uFo=o(" (XLM-RoBERTa-XL model)"),bFo=l(),Q_=a("li"),Xle=a("strong"),vFo=o("xlnet"),FFo=o(" \u2014 "),iN=a("a"),TFo=o("XLNetModel"),MFo=o(" (XLNet model)"),EFo=l(),H_=a("li"),zle=a("strong"),CFo=o("yolos"),wFo=o(" \u2014 "),dN=a("a"),AFo=o("YolosModel"),yFo=o(" (YOLOS model)"),LFo=l(),U_=a("li"),Wle=a("strong"),xFo=o("yoso"),$Fo=o(" \u2014 "),cN=a("a"),kFo=o("YosoModel"),SFo=o(" (YOSO model)"),RFo=l(),J_=a("p"),PFo=o("The model is set in evaluation mode by default using "),Qle=a("code"),BFo=o("model.eval()"),IFo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hle=a("code"),qFo=o("model.train()"),NFo=l(),F(Y_.$$.fragment),Pqe=l(),Li=a("h2"),K_=a("a"),Ule=a("span"),F(JA.$$.fragment),jFo=l(),Jle=a("span"),DFo=o("AutoModelForPreTraining"),Bqe=l(),xo=a("div"),F(YA.$$.fragment),GFo=l(),xi=a("p"),OFo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),fN=a("a"),VFo=o("from_pretrained()"),XFo=o(" class method or the "),mN=a("a"),zFo=o("from_config()"),WFo=o(` class
method.`),QFo=l(),KA=a("p"),HFo=o("This class cannot be instantiated directly using "),Yle=a("code"),UFo=o("__init__()"),JFo=o(" (throws an error)."),YFo=l(),nt=a("div"),F(ZA.$$.fragment),KFo=l(),Kle=a("p"),ZFo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),e0o=l(),$i=a("p"),o0o=o(`Note:
Loading a model from its configuration file does `),Zle=a("strong"),r0o=o("not"),t0o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gN=a("a"),a0o=o("from_pretrained()"),n0o=o(" to load the model weights."),s0o=l(),F(Z_.$$.fragment),l0o=l(),Ye=a("div"),F(ey.$$.fragment),i0o=l(),eie=a("p"),d0o=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),c0o=l(),$a=a("p"),f0o=o("The model class to instantiate is selected based on the "),oie=a("code"),m0o=o("model_type"),g0o=o(` property of the config object (either
passed as an argument or loaded from `),rie=a("code"),h0o=o("pretrained_model_name_or_path"),p0o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tie=a("code"),_0o=o("pretrained_model_name_or_path"),u0o=o(":"),b0o=l(),G=a("ul"),eu=a("li"),aie=a("strong"),v0o=o("albert"),F0o=o(" \u2014 "),hN=a("a"),T0o=o("AlbertForPreTraining"),M0o=o(" (ALBERT model)"),E0o=l(),ou=a("li"),nie=a("strong"),C0o=o("bart"),w0o=o(" \u2014 "),pN=a("a"),A0o=o("BartForConditionalGeneration"),y0o=o(" (BART model)"),L0o=l(),ru=a("li"),sie=a("strong"),x0o=o("bert"),$0o=o(" \u2014 "),_N=a("a"),k0o=o("BertForPreTraining"),S0o=o(" (BERT model)"),R0o=l(),tu=a("li"),lie=a("strong"),P0o=o("big_bird"),B0o=o(" \u2014 "),uN=a("a"),I0o=o("BigBirdForPreTraining"),q0o=o(" (BigBird model)"),N0o=l(),au=a("li"),iie=a("strong"),j0o=o("camembert"),D0o=o(" \u2014 "),bN=a("a"),G0o=o("CamembertForMaskedLM"),O0o=o(" (CamemBERT model)"),V0o=l(),nu=a("li"),die=a("strong"),X0o=o("ctrl"),z0o=o(" \u2014 "),vN=a("a"),W0o=o("CTRLLMHeadModel"),Q0o=o(" (CTRL model)"),H0o=l(),su=a("li"),cie=a("strong"),U0o=o("data2vec-text"),J0o=o(" \u2014 "),FN=a("a"),Y0o=o("Data2VecTextForMaskedLM"),K0o=o(" (Data2VecText model)"),Z0o=l(),lu=a("li"),fie=a("strong"),eTo=o("deberta"),oTo=o(" \u2014 "),TN=a("a"),rTo=o("DebertaForMaskedLM"),tTo=o(" (DeBERTa model)"),aTo=l(),iu=a("li"),mie=a("strong"),nTo=o("deberta-v2"),sTo=o(" \u2014 "),MN=a("a"),lTo=o("DebertaV2ForMaskedLM"),iTo=o(" (DeBERTa-v2 model)"),dTo=l(),du=a("li"),gie=a("strong"),cTo=o("distilbert"),fTo=o(" \u2014 "),EN=a("a"),mTo=o("DistilBertForMaskedLM"),gTo=o(" (DistilBERT model)"),hTo=l(),cu=a("li"),hie=a("strong"),pTo=o("electra"),_To=o(" \u2014 "),CN=a("a"),uTo=o("ElectraForPreTraining"),bTo=o(" (ELECTRA model)"),vTo=l(),fu=a("li"),pie=a("strong"),FTo=o("flaubert"),TTo=o(" \u2014 "),wN=a("a"),MTo=o("FlaubertWithLMHeadModel"),ETo=o(" (FlauBERT model)"),CTo=l(),mu=a("li"),_ie=a("strong"),wTo=o("flava"),ATo=o(" \u2014 "),AN=a("a"),yTo=o("FlavaForPreTraining"),LTo=o(" (Flava model)"),xTo=l(),gu=a("li"),uie=a("strong"),$To=o("fnet"),kTo=o(" \u2014 "),yN=a("a"),STo=o("FNetForPreTraining"),RTo=o(" (FNet model)"),PTo=l(),hu=a("li"),bie=a("strong"),BTo=o("fsmt"),ITo=o(" \u2014 "),LN=a("a"),qTo=o("FSMTForConditionalGeneration"),NTo=o(" (FairSeq Machine-Translation model)"),jTo=l(),pu=a("li"),vie=a("strong"),DTo=o("funnel"),GTo=o(" \u2014 "),xN=a("a"),OTo=o("FunnelForPreTraining"),VTo=o(" (Funnel Transformer model)"),XTo=l(),_u=a("li"),Fie=a("strong"),zTo=o("gpt2"),WTo=o(" \u2014 "),$N=a("a"),QTo=o("GPT2LMHeadModel"),HTo=o(" (OpenAI GPT-2 model)"),UTo=l(),uu=a("li"),Tie=a("strong"),JTo=o("ibert"),YTo=o(" \u2014 "),kN=a("a"),KTo=o("IBertForMaskedLM"),ZTo=o(" (I-BERT model)"),e7o=l(),bu=a("li"),Mie=a("strong"),o7o=o("layoutlm"),r7o=o(" \u2014 "),SN=a("a"),t7o=o("LayoutLMForMaskedLM"),a7o=o(" (LayoutLM model)"),n7o=l(),vu=a("li"),Eie=a("strong"),s7o=o("longformer"),l7o=o(" \u2014 "),RN=a("a"),i7o=o("LongformerForMaskedLM"),d7o=o(" (Longformer model)"),c7o=l(),Fu=a("li"),Cie=a("strong"),f7o=o("lxmert"),m7o=o(" \u2014 "),PN=a("a"),g7o=o("LxmertForPreTraining"),h7o=o(" (LXMERT model)"),p7o=l(),Tu=a("li"),wie=a("strong"),_7o=o("megatron-bert"),u7o=o(" \u2014 "),BN=a("a"),b7o=o("MegatronBertForPreTraining"),v7o=o(" (MegatronBert model)"),F7o=l(),Mu=a("li"),Aie=a("strong"),T7o=o("mobilebert"),M7o=o(" \u2014 "),IN=a("a"),E7o=o("MobileBertForPreTraining"),C7o=o(" (MobileBERT model)"),w7o=l(),Eu=a("li"),yie=a("strong"),A7o=o("mpnet"),y7o=o(" \u2014 "),qN=a("a"),L7o=o("MPNetForMaskedLM"),x7o=o(" (MPNet model)"),$7o=l(),Cu=a("li"),Lie=a("strong"),k7o=o("openai-gpt"),S7o=o(" \u2014 "),NN=a("a"),R7o=o("OpenAIGPTLMHeadModel"),P7o=o(" (OpenAI GPT model)"),B7o=l(),wu=a("li"),xie=a("strong"),I7o=o("retribert"),q7o=o(" \u2014 "),jN=a("a"),N7o=o("RetriBertModel"),j7o=o(" (RetriBERT model)"),D7o=l(),Au=a("li"),$ie=a("strong"),G7o=o("roberta"),O7o=o(" \u2014 "),DN=a("a"),V7o=o("RobertaForMaskedLM"),X7o=o(" (RoBERTa model)"),z7o=l(),yu=a("li"),kie=a("strong"),W7o=o("splinter"),Q7o=o(" \u2014 "),GN=a("a"),H7o=o("SplinterForPreTraining"),U7o=o(" (Splinter model)"),J7o=l(),Lu=a("li"),Sie=a("strong"),Y7o=o("squeezebert"),K7o=o(" \u2014 "),ON=a("a"),Z7o=o("SqueezeBertForMaskedLM"),eMo=o(" (SqueezeBERT model)"),oMo=l(),xu=a("li"),Rie=a("strong"),rMo=o("t5"),tMo=o(" \u2014 "),VN=a("a"),aMo=o("T5ForConditionalGeneration"),nMo=o(" (T5 model)"),sMo=l(),$u=a("li"),Pie=a("strong"),lMo=o("tapas"),iMo=o(" \u2014 "),XN=a("a"),dMo=o("TapasForMaskedLM"),cMo=o(" (TAPAS model)"),fMo=l(),ku=a("li"),Bie=a("strong"),mMo=o("transfo-xl"),gMo=o(" \u2014 "),zN=a("a"),hMo=o("TransfoXLLMHeadModel"),pMo=o(" (Transformer-XL model)"),_Mo=l(),Su=a("li"),Iie=a("strong"),uMo=o("unispeech"),bMo=o(" \u2014 "),WN=a("a"),vMo=o("UniSpeechForPreTraining"),FMo=o(" (UniSpeech model)"),TMo=l(),Ru=a("li"),qie=a("strong"),MMo=o("unispeech-sat"),EMo=o(" \u2014 "),QN=a("a"),CMo=o("UniSpeechSatForPreTraining"),wMo=o(" (UniSpeechSat model)"),AMo=l(),Pu=a("li"),Nie=a("strong"),yMo=o("visual_bert"),LMo=o(" \u2014 "),HN=a("a"),xMo=o("VisualBertForPreTraining"),$Mo=o(" (VisualBert model)"),kMo=l(),Bu=a("li"),jie=a("strong"),SMo=o("vit_mae"),RMo=o(" \u2014 "),UN=a("a"),PMo=o("ViTMAEForPreTraining"),BMo=o(" (ViTMAE model)"),IMo=l(),Iu=a("li"),Die=a("strong"),qMo=o("wav2vec2"),NMo=o(" \u2014 "),JN=a("a"),jMo=o("Wav2Vec2ForPreTraining"),DMo=o(" (Wav2Vec2 model)"),GMo=l(),qu=a("li"),Gie=a("strong"),OMo=o("wav2vec2-conformer"),VMo=o(" \u2014 "),YN=a("a"),XMo=o("Wav2Vec2ConformerForPreTraining"),zMo=o(" (Wav2Vec2-Conformer model)"),WMo=l(),Nu=a("li"),Oie=a("strong"),QMo=o("xlm"),HMo=o(" \u2014 "),KN=a("a"),UMo=o("XLMWithLMHeadModel"),JMo=o(" (XLM model)"),YMo=l(),ju=a("li"),Vie=a("strong"),KMo=o("xlm-roberta"),ZMo=o(" \u2014 "),ZN=a("a"),e4o=o("XLMRobertaForMaskedLM"),o4o=o(" (XLM-RoBERTa model)"),r4o=l(),Du=a("li"),Xie=a("strong"),t4o=o("xlm-roberta-xl"),a4o=o(" \u2014 "),ej=a("a"),n4o=o("XLMRobertaXLForMaskedLM"),s4o=o(" (XLM-RoBERTa-XL model)"),l4o=l(),Gu=a("li"),zie=a("strong"),i4o=o("xlnet"),d4o=o(" \u2014 "),oj=a("a"),c4o=o("XLNetLMHeadModel"),f4o=o(" (XLNet model)"),m4o=l(),Ou=a("p"),g4o=o("The model is set in evaluation mode by default using "),Wie=a("code"),h4o=o("model.eval()"),p4o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qie=a("code"),_4o=o("model.train()"),u4o=l(),F(Vu.$$.fragment),Iqe=l(),ki=a("h2"),Xu=a("a"),Hie=a("span"),F(oy.$$.fragment),b4o=l(),Uie=a("span"),v4o=o("AutoModelForCausalLM"),qqe=l(),$o=a("div"),F(ry.$$.fragment),F4o=l(),Si=a("p"),T4o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),rj=a("a"),M4o=o("from_pretrained()"),E4o=o(" class method or the "),tj=a("a"),C4o=o("from_config()"),w4o=o(` class
method.`),A4o=l(),ty=a("p"),y4o=o("This class cannot be instantiated directly using "),Jie=a("code"),L4o=o("__init__()"),x4o=o(" (throws an error)."),$4o=l(),st=a("div"),F(ay.$$.fragment),k4o=l(),Yie=a("p"),S4o=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),R4o=l(),Ri=a("p"),P4o=o(`Note:
Loading a model from its configuration file does `),Kie=a("strong"),B4o=o("not"),I4o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aj=a("a"),q4o=o("from_pretrained()"),N4o=o(" to load the model weights."),j4o=l(),F(zu.$$.fragment),D4o=l(),Ke=a("div"),F(ny.$$.fragment),G4o=l(),Zie=a("p"),O4o=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),V4o=l(),ka=a("p"),X4o=o("The model class to instantiate is selected based on the "),ede=a("code"),z4o=o("model_type"),W4o=o(` property of the config object (either
passed as an argument or loaded from `),ode=a("code"),Q4o=o("pretrained_model_name_or_path"),H4o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rde=a("code"),U4o=o("pretrained_model_name_or_path"),J4o=o(":"),Y4o=l(),z=a("ul"),Wu=a("li"),tde=a("strong"),K4o=o("bart"),Z4o=o(" \u2014 "),nj=a("a"),eEo=o("BartForCausalLM"),oEo=o(" (BART model)"),rEo=l(),Qu=a("li"),ade=a("strong"),tEo=o("bert"),aEo=o(" \u2014 "),sj=a("a"),nEo=o("BertLMHeadModel"),sEo=o(" (BERT model)"),lEo=l(),Hu=a("li"),nde=a("strong"),iEo=o("bert-generation"),dEo=o(" \u2014 "),lj=a("a"),cEo=o("BertGenerationDecoder"),fEo=o(" (Bert Generation model)"),mEo=l(),Uu=a("li"),sde=a("strong"),gEo=o("big_bird"),hEo=o(" \u2014 "),ij=a("a"),pEo=o("BigBirdForCausalLM"),_Eo=o(" (BigBird model)"),uEo=l(),Ju=a("li"),lde=a("strong"),bEo=o("bigbird_pegasus"),vEo=o(" \u2014 "),dj=a("a"),FEo=o("BigBirdPegasusForCausalLM"),TEo=o(" (BigBirdPegasus model)"),MEo=l(),Yu=a("li"),ide=a("strong"),EEo=o("blenderbot"),CEo=o(" \u2014 "),cj=a("a"),wEo=o("BlenderbotForCausalLM"),AEo=o(" (Blenderbot model)"),yEo=l(),Ku=a("li"),dde=a("strong"),LEo=o("blenderbot-small"),xEo=o(" \u2014 "),fj=a("a"),$Eo=o("BlenderbotSmallForCausalLM"),kEo=o(" (BlenderbotSmall model)"),SEo=l(),Zu=a("li"),cde=a("strong"),REo=o("camembert"),PEo=o(" \u2014 "),mj=a("a"),BEo=o("CamembertForCausalLM"),IEo=o(" (CamemBERT model)"),qEo=l(),e2=a("li"),fde=a("strong"),NEo=o("ctrl"),jEo=o(" \u2014 "),gj=a("a"),DEo=o("CTRLLMHeadModel"),GEo=o(" (CTRL model)"),OEo=l(),o2=a("li"),mde=a("strong"),VEo=o("data2vec-text"),XEo=o(" \u2014 "),hj=a("a"),zEo=o("Data2VecTextForCausalLM"),WEo=o(" (Data2VecText model)"),QEo=l(),r2=a("li"),gde=a("strong"),HEo=o("electra"),UEo=o(" \u2014 "),pj=a("a"),JEo=o("ElectraForCausalLM"),YEo=o(" (ELECTRA model)"),KEo=l(),t2=a("li"),hde=a("strong"),ZEo=o("gpt2"),eCo=o(" \u2014 "),_j=a("a"),oCo=o("GPT2LMHeadModel"),rCo=o(" (OpenAI GPT-2 model)"),tCo=l(),a2=a("li"),pde=a("strong"),aCo=o("gpt_neo"),nCo=o(" \u2014 "),uj=a("a"),sCo=o("GPTNeoForCausalLM"),lCo=o(" (GPT Neo model)"),iCo=l(),n2=a("li"),_de=a("strong"),dCo=o("gptj"),cCo=o(" \u2014 "),bj=a("a"),fCo=o("GPTJForCausalLM"),mCo=o(" (GPT-J model)"),gCo=l(),s2=a("li"),ude=a("strong"),hCo=o("marian"),pCo=o(" \u2014 "),vj=a("a"),_Co=o("MarianForCausalLM"),uCo=o(" (Marian model)"),bCo=l(),l2=a("li"),bde=a("strong"),vCo=o("mbart"),FCo=o(" \u2014 "),Fj=a("a"),TCo=o("MBartForCausalLM"),MCo=o(" (mBART model)"),ECo=l(),i2=a("li"),vde=a("strong"),CCo=o("megatron-bert"),wCo=o(" \u2014 "),Tj=a("a"),ACo=o("MegatronBertForCausalLM"),yCo=o(" (MegatronBert model)"),LCo=l(),d2=a("li"),Fde=a("strong"),xCo=o("openai-gpt"),$Co=o(" \u2014 "),Mj=a("a"),kCo=o("OpenAIGPTLMHeadModel"),SCo=o(" (OpenAI GPT model)"),RCo=l(),c2=a("li"),Tde=a("strong"),PCo=o("opt"),BCo=o(" \u2014 "),Ej=a("a"),ICo=o("OPTForCausalLM"),qCo=o(" (OPT model)"),NCo=l(),f2=a("li"),Mde=a("strong"),jCo=o("pegasus"),DCo=o(" \u2014 "),Cj=a("a"),GCo=o("PegasusForCausalLM"),OCo=o(" (Pegasus model)"),VCo=l(),m2=a("li"),Ede=a("strong"),XCo=o("plbart"),zCo=o(" \u2014 "),wj=a("a"),WCo=o("PLBartForCausalLM"),QCo=o(" (PLBart model)"),HCo=l(),g2=a("li"),Cde=a("strong"),UCo=o("prophetnet"),JCo=o(" \u2014 "),Aj=a("a"),YCo=o("ProphetNetForCausalLM"),KCo=o(" (ProphetNet model)"),ZCo=l(),h2=a("li"),wde=a("strong"),e3o=o("qdqbert"),o3o=o(" \u2014 "),yj=a("a"),r3o=o("QDQBertLMHeadModel"),t3o=o(" (QDQBert model)"),a3o=l(),p2=a("li"),Ade=a("strong"),n3o=o("reformer"),s3o=o(" \u2014 "),Lj=a("a"),l3o=o("ReformerModelWithLMHead"),i3o=o(" (Reformer model)"),d3o=l(),_2=a("li"),yde=a("strong"),c3o=o("rembert"),f3o=o(" \u2014 "),xj=a("a"),m3o=o("RemBertForCausalLM"),g3o=o(" (RemBERT model)"),h3o=l(),u2=a("li"),Lde=a("strong"),p3o=o("roberta"),_3o=o(" \u2014 "),$j=a("a"),u3o=o("RobertaForCausalLM"),b3o=o(" (RoBERTa model)"),v3o=l(),b2=a("li"),xde=a("strong"),F3o=o("roformer"),T3o=o(" \u2014 "),kj=a("a"),M3o=o("RoFormerForCausalLM"),E3o=o(" (RoFormer model)"),C3o=l(),v2=a("li"),$de=a("strong"),w3o=o("speech_to_text_2"),A3o=o(" \u2014 "),Sj=a("a"),y3o=o("Speech2Text2ForCausalLM"),L3o=o(" (Speech2Text2 model)"),x3o=l(),F2=a("li"),kde=a("strong"),$3o=o("transfo-xl"),k3o=o(" \u2014 "),Rj=a("a"),S3o=o("TransfoXLLMHeadModel"),R3o=o(" (Transformer-XL model)"),P3o=l(),T2=a("li"),Sde=a("strong"),B3o=o("trocr"),I3o=o(" \u2014 "),Pj=a("a"),q3o=o("TrOCRForCausalLM"),N3o=o(" (TrOCR model)"),j3o=l(),M2=a("li"),Rde=a("strong"),D3o=o("xglm"),G3o=o(" \u2014 "),Bj=a("a"),O3o=o("XGLMForCausalLM"),V3o=o(" (XGLM model)"),X3o=l(),E2=a("li"),Pde=a("strong"),z3o=o("xlm"),W3o=o(" \u2014 "),Ij=a("a"),Q3o=o("XLMWithLMHeadModel"),H3o=o(" (XLM model)"),U3o=l(),C2=a("li"),Bde=a("strong"),J3o=o("xlm-prophetnet"),Y3o=o(" \u2014 "),qj=a("a"),K3o=o("XLMProphetNetForCausalLM"),Z3o=o(" (XLMProphetNet model)"),ewo=l(),w2=a("li"),Ide=a("strong"),owo=o("xlm-roberta"),rwo=o(" \u2014 "),Nj=a("a"),two=o("XLMRobertaForCausalLM"),awo=o(" (XLM-RoBERTa model)"),nwo=l(),A2=a("li"),qde=a("strong"),swo=o("xlm-roberta-xl"),lwo=o(" \u2014 "),jj=a("a"),iwo=o("XLMRobertaXLForCausalLM"),dwo=o(" (XLM-RoBERTa-XL model)"),cwo=l(),y2=a("li"),Nde=a("strong"),fwo=o("xlnet"),mwo=o(" \u2014 "),Dj=a("a"),gwo=o("XLNetLMHeadModel"),hwo=o(" (XLNet model)"),pwo=l(),L2=a("p"),_wo=o("The model is set in evaluation mode by default using "),jde=a("code"),uwo=o("model.eval()"),bwo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dde=a("code"),vwo=o("model.train()"),Fwo=l(),F(x2.$$.fragment),Nqe=l(),Pi=a("h2"),$2=a("a"),Gde=a("span"),F(sy.$$.fragment),Two=l(),Ode=a("span"),Mwo=o("AutoModelForMaskedLM"),jqe=l(),ko=a("div"),F(ly.$$.fragment),Ewo=l(),Bi=a("p"),Cwo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Gj=a("a"),wwo=o("from_pretrained()"),Awo=o(" class method or the "),Oj=a("a"),ywo=o("from_config()"),Lwo=o(` class
method.`),xwo=l(),iy=a("p"),$wo=o("This class cannot be instantiated directly using "),Vde=a("code"),kwo=o("__init__()"),Swo=o(" (throws an error)."),Rwo=l(),lt=a("div"),F(dy.$$.fragment),Pwo=l(),Xde=a("p"),Bwo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Iwo=l(),Ii=a("p"),qwo=o(`Note:
Loading a model from its configuration file does `),zde=a("strong"),Nwo=o("not"),jwo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Vj=a("a"),Dwo=o("from_pretrained()"),Gwo=o(" to load the model weights."),Owo=l(),F(k2.$$.fragment),Vwo=l(),Ze=a("div"),F(cy.$$.fragment),Xwo=l(),Wde=a("p"),zwo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Wwo=l(),Sa=a("p"),Qwo=o("The model class to instantiate is selected based on the "),Qde=a("code"),Hwo=o("model_type"),Uwo=o(` property of the config object (either
passed as an argument or loaded from `),Hde=a("code"),Jwo=o("pretrained_model_name_or_path"),Ywo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ude=a("code"),Kwo=o("pretrained_model_name_or_path"),Zwo=o(":"),e6o=l(),W=a("ul"),S2=a("li"),Jde=a("strong"),o6o=o("albert"),r6o=o(" \u2014 "),Xj=a("a"),t6o=o("AlbertForMaskedLM"),a6o=o(" (ALBERT model)"),n6o=l(),R2=a("li"),Yde=a("strong"),s6o=o("bart"),l6o=o(" \u2014 "),zj=a("a"),i6o=o("BartForConditionalGeneration"),d6o=o(" (BART model)"),c6o=l(),P2=a("li"),Kde=a("strong"),f6o=o("bert"),m6o=o(" \u2014 "),Wj=a("a"),g6o=o("BertForMaskedLM"),h6o=o(" (BERT model)"),p6o=l(),B2=a("li"),Zde=a("strong"),_6o=o("big_bird"),u6o=o(" \u2014 "),Qj=a("a"),b6o=o("BigBirdForMaskedLM"),v6o=o(" (BigBird model)"),F6o=l(),I2=a("li"),ece=a("strong"),T6o=o("camembert"),M6o=o(" \u2014 "),Hj=a("a"),E6o=o("CamembertForMaskedLM"),C6o=o(" (CamemBERT model)"),w6o=l(),q2=a("li"),oce=a("strong"),A6o=o("convbert"),y6o=o(" \u2014 "),Uj=a("a"),L6o=o("ConvBertForMaskedLM"),x6o=o(" (ConvBERT model)"),$6o=l(),N2=a("li"),rce=a("strong"),k6o=o("data2vec-text"),S6o=o(" \u2014 "),Jj=a("a"),R6o=o("Data2VecTextForMaskedLM"),P6o=o(" (Data2VecText model)"),B6o=l(),j2=a("li"),tce=a("strong"),I6o=o("deberta"),q6o=o(" \u2014 "),Yj=a("a"),N6o=o("DebertaForMaskedLM"),j6o=o(" (DeBERTa model)"),D6o=l(),D2=a("li"),ace=a("strong"),G6o=o("deberta-v2"),O6o=o(" \u2014 "),Kj=a("a"),V6o=o("DebertaV2ForMaskedLM"),X6o=o(" (DeBERTa-v2 model)"),z6o=l(),G2=a("li"),nce=a("strong"),W6o=o("distilbert"),Q6o=o(" \u2014 "),Zj=a("a"),H6o=o("DistilBertForMaskedLM"),U6o=o(" (DistilBERT model)"),J6o=l(),O2=a("li"),sce=a("strong"),Y6o=o("electra"),K6o=o(" \u2014 "),eD=a("a"),Z6o=o("ElectraForMaskedLM"),eAo=o(" (ELECTRA model)"),oAo=l(),V2=a("li"),lce=a("strong"),rAo=o("flaubert"),tAo=o(" \u2014 "),oD=a("a"),aAo=o("FlaubertWithLMHeadModel"),nAo=o(" (FlauBERT model)"),sAo=l(),X2=a("li"),ice=a("strong"),lAo=o("fnet"),iAo=o(" \u2014 "),rD=a("a"),dAo=o("FNetForMaskedLM"),cAo=o(" (FNet model)"),fAo=l(),z2=a("li"),dce=a("strong"),mAo=o("funnel"),gAo=o(" \u2014 "),tD=a("a"),hAo=o("FunnelForMaskedLM"),pAo=o(" (Funnel Transformer model)"),_Ao=l(),W2=a("li"),cce=a("strong"),uAo=o("ibert"),bAo=o(" \u2014 "),aD=a("a"),vAo=o("IBertForMaskedLM"),FAo=o(" (I-BERT model)"),TAo=l(),Q2=a("li"),fce=a("strong"),MAo=o("layoutlm"),EAo=o(" \u2014 "),nD=a("a"),CAo=o("LayoutLMForMaskedLM"),wAo=o(" (LayoutLM model)"),AAo=l(),H2=a("li"),mce=a("strong"),yAo=o("longformer"),LAo=o(" \u2014 "),sD=a("a"),xAo=o("LongformerForMaskedLM"),$Ao=o(" (Longformer model)"),kAo=l(),U2=a("li"),gce=a("strong"),SAo=o("mbart"),RAo=o(" \u2014 "),lD=a("a"),PAo=o("MBartForConditionalGeneration"),BAo=o(" (mBART model)"),IAo=l(),J2=a("li"),hce=a("strong"),qAo=o("megatron-bert"),NAo=o(" \u2014 "),iD=a("a"),jAo=o("MegatronBertForMaskedLM"),DAo=o(" (MegatronBert model)"),GAo=l(),Y2=a("li"),pce=a("strong"),OAo=o("mobilebert"),VAo=o(" \u2014 "),dD=a("a"),XAo=o("MobileBertForMaskedLM"),zAo=o(" (MobileBERT model)"),WAo=l(),K2=a("li"),_ce=a("strong"),QAo=o("mpnet"),HAo=o(" \u2014 "),cD=a("a"),UAo=o("MPNetForMaskedLM"),JAo=o(" (MPNet model)"),YAo=l(),Z2=a("li"),uce=a("strong"),KAo=o("nystromformer"),ZAo=o(" \u2014 "),fD=a("a"),eyo=o("NystromformerForMaskedLM"),oyo=o(" (Nystromformer model)"),ryo=l(),e1=a("li"),bce=a("strong"),tyo=o("perceiver"),ayo=o(" \u2014 "),mD=a("a"),nyo=o("PerceiverForMaskedLM"),syo=o(" (Perceiver model)"),lyo=l(),o1=a("li"),vce=a("strong"),iyo=o("qdqbert"),dyo=o(" \u2014 "),gD=a("a"),cyo=o("QDQBertForMaskedLM"),fyo=o(" (QDQBert model)"),myo=l(),r1=a("li"),Fce=a("strong"),gyo=o("reformer"),hyo=o(" \u2014 "),hD=a("a"),pyo=o("ReformerForMaskedLM"),_yo=o(" (Reformer model)"),uyo=l(),t1=a("li"),Tce=a("strong"),byo=o("rembert"),vyo=o(" \u2014 "),pD=a("a"),Fyo=o("RemBertForMaskedLM"),Tyo=o(" (RemBERT model)"),Myo=l(),a1=a("li"),Mce=a("strong"),Eyo=o("roberta"),Cyo=o(" \u2014 "),_D=a("a"),wyo=o("RobertaForMaskedLM"),Ayo=o(" (RoBERTa model)"),yyo=l(),n1=a("li"),Ece=a("strong"),Lyo=o("roformer"),xyo=o(" \u2014 "),uD=a("a"),$yo=o("RoFormerForMaskedLM"),kyo=o(" (RoFormer model)"),Syo=l(),s1=a("li"),Cce=a("strong"),Ryo=o("squeezebert"),Pyo=o(" \u2014 "),bD=a("a"),Byo=o("SqueezeBertForMaskedLM"),Iyo=o(" (SqueezeBERT model)"),qyo=l(),l1=a("li"),wce=a("strong"),Nyo=o("tapas"),jyo=o(" \u2014 "),vD=a("a"),Dyo=o("TapasForMaskedLM"),Gyo=o(" (TAPAS model)"),Oyo=l(),i1=a("li"),Ace=a("strong"),Vyo=o("wav2vec2"),Xyo=o(" \u2014 "),yce=a("code"),zyo=o("Wav2Vec2ForMaskedLM"),Wyo=o(" (Wav2Vec2 model)"),Qyo=l(),d1=a("li"),Lce=a("strong"),Hyo=o("xlm"),Uyo=o(" \u2014 "),FD=a("a"),Jyo=o("XLMWithLMHeadModel"),Yyo=o(" (XLM model)"),Kyo=l(),c1=a("li"),xce=a("strong"),Zyo=o("xlm-roberta"),e8o=o(" \u2014 "),TD=a("a"),o8o=o("XLMRobertaForMaskedLM"),r8o=o(" (XLM-RoBERTa model)"),t8o=l(),f1=a("li"),$ce=a("strong"),a8o=o("xlm-roberta-xl"),n8o=o(" \u2014 "),MD=a("a"),s8o=o("XLMRobertaXLForMaskedLM"),l8o=o(" (XLM-RoBERTa-XL model)"),i8o=l(),m1=a("li"),kce=a("strong"),d8o=o("yoso"),c8o=o(" \u2014 "),ED=a("a"),f8o=o("YosoForMaskedLM"),m8o=o(" (YOSO model)"),g8o=l(),g1=a("p"),h8o=o("The model is set in evaluation mode by default using "),Sce=a("code"),p8o=o("model.eval()"),_8o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rce=a("code"),u8o=o("model.train()"),b8o=l(),F(h1.$$.fragment),Dqe=l(),qi=a("h2"),p1=a("a"),Pce=a("span"),F(fy.$$.fragment),v8o=l(),Bce=a("span"),F8o=o("AutoModelForSeq2SeqLM"),Gqe=l(),So=a("div"),F(my.$$.fragment),T8o=l(),Ni=a("p"),M8o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),CD=a("a"),E8o=o("from_pretrained()"),C8o=o(" class method or the "),wD=a("a"),w8o=o("from_config()"),A8o=o(` class
method.`),y8o=l(),gy=a("p"),L8o=o("This class cannot be instantiated directly using "),Ice=a("code"),x8o=o("__init__()"),$8o=o(" (throws an error)."),k8o=l(),it=a("div"),F(hy.$$.fragment),S8o=l(),qce=a("p"),R8o=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),P8o=l(),ji=a("p"),B8o=o(`Note:
Loading a model from its configuration file does `),Nce=a("strong"),I8o=o("not"),q8o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AD=a("a"),N8o=o("from_pretrained()"),j8o=o(" to load the model weights."),D8o=l(),F(_1.$$.fragment),G8o=l(),eo=a("div"),F(py.$$.fragment),O8o=l(),jce=a("p"),V8o=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),X8o=l(),Ra=a("p"),z8o=o("The model class to instantiate is selected based on the "),Dce=a("code"),W8o=o("model_type"),Q8o=o(` property of the config object (either
passed as an argument or loaded from `),Gce=a("code"),H8o=o("pretrained_model_name_or_path"),U8o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Oce=a("code"),J8o=o("pretrained_model_name_or_path"),Y8o=o(":"),K8o=l(),_e=a("ul"),u1=a("li"),Vce=a("strong"),Z8o=o("bart"),eLo=o(" \u2014 "),yD=a("a"),oLo=o("BartForConditionalGeneration"),rLo=o(" (BART model)"),tLo=l(),b1=a("li"),Xce=a("strong"),aLo=o("bigbird_pegasus"),nLo=o(" \u2014 "),LD=a("a"),sLo=o("BigBirdPegasusForConditionalGeneration"),lLo=o(" (BigBirdPegasus model)"),iLo=l(),v1=a("li"),zce=a("strong"),dLo=o("blenderbot"),cLo=o(" \u2014 "),xD=a("a"),fLo=o("BlenderbotForConditionalGeneration"),mLo=o(" (Blenderbot model)"),gLo=l(),F1=a("li"),Wce=a("strong"),hLo=o("blenderbot-small"),pLo=o(" \u2014 "),$D=a("a"),_Lo=o("BlenderbotSmallForConditionalGeneration"),uLo=o(" (BlenderbotSmall model)"),bLo=l(),T1=a("li"),Qce=a("strong"),vLo=o("encoder-decoder"),FLo=o(" \u2014 "),kD=a("a"),TLo=o("EncoderDecoderModel"),MLo=o(" (Encoder decoder model)"),ELo=l(),M1=a("li"),Hce=a("strong"),CLo=o("fsmt"),wLo=o(" \u2014 "),SD=a("a"),ALo=o("FSMTForConditionalGeneration"),yLo=o(" (FairSeq Machine-Translation model)"),LLo=l(),E1=a("li"),Uce=a("strong"),xLo=o("led"),$Lo=o(" \u2014 "),RD=a("a"),kLo=o("LEDForConditionalGeneration"),SLo=o(" (LED model)"),RLo=l(),C1=a("li"),Jce=a("strong"),PLo=o("m2m_100"),BLo=o(" \u2014 "),PD=a("a"),ILo=o("M2M100ForConditionalGeneration"),qLo=o(" (M2M100 model)"),NLo=l(),w1=a("li"),Yce=a("strong"),jLo=o("marian"),DLo=o(" \u2014 "),BD=a("a"),GLo=o("MarianMTModel"),OLo=o(" (Marian model)"),VLo=l(),A1=a("li"),Kce=a("strong"),XLo=o("mbart"),zLo=o(" \u2014 "),ID=a("a"),WLo=o("MBartForConditionalGeneration"),QLo=o(" (mBART model)"),HLo=l(),y1=a("li"),Zce=a("strong"),ULo=o("mt5"),JLo=o(" \u2014 "),qD=a("a"),YLo=o("MT5ForConditionalGeneration"),KLo=o(" (mT5 model)"),ZLo=l(),L1=a("li"),efe=a("strong"),e9o=o("pegasus"),o9o=o(" \u2014 "),ND=a("a"),r9o=o("PegasusForConditionalGeneration"),t9o=o(" (Pegasus model)"),a9o=l(),x1=a("li"),ofe=a("strong"),n9o=o("plbart"),s9o=o(" \u2014 "),jD=a("a"),l9o=o("PLBartForConditionalGeneration"),i9o=o(" (PLBart model)"),d9o=l(),$1=a("li"),rfe=a("strong"),c9o=o("prophetnet"),f9o=o(" \u2014 "),DD=a("a"),m9o=o("ProphetNetForConditionalGeneration"),g9o=o(" (ProphetNet model)"),h9o=l(),k1=a("li"),tfe=a("strong"),p9o=o("t5"),_9o=o(" \u2014 "),GD=a("a"),u9o=o("T5ForConditionalGeneration"),b9o=o(" (T5 model)"),v9o=l(),S1=a("li"),afe=a("strong"),F9o=o("xlm-prophetnet"),T9o=o(" \u2014 "),OD=a("a"),M9o=o("XLMProphetNetForConditionalGeneration"),E9o=o(" (XLMProphetNet model)"),C9o=l(),R1=a("p"),w9o=o("The model is set in evaluation mode by default using "),nfe=a("code"),A9o=o("model.eval()"),y9o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sfe=a("code"),L9o=o("model.train()"),x9o=l(),F(P1.$$.fragment),Oqe=l(),Di=a("h2"),B1=a("a"),lfe=a("span"),F(_y.$$.fragment),$9o=l(),ife=a("span"),k9o=o("AutoModelForSequenceClassification"),Vqe=l(),Ro=a("div"),F(uy.$$.fragment),S9o=l(),Gi=a("p"),R9o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),VD=a("a"),P9o=o("from_pretrained()"),B9o=o(" class method or the "),XD=a("a"),I9o=o("from_config()"),q9o=o(` class
method.`),N9o=l(),by=a("p"),j9o=o("This class cannot be instantiated directly using "),dfe=a("code"),D9o=o("__init__()"),G9o=o(" (throws an error)."),O9o=l(),dt=a("div"),F(vy.$$.fragment),V9o=l(),cfe=a("p"),X9o=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),z9o=l(),Oi=a("p"),W9o=o(`Note:
Loading a model from its configuration file does `),ffe=a("strong"),Q9o=o("not"),H9o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zD=a("a"),U9o=o("from_pretrained()"),J9o=o(" to load the model weights."),Y9o=l(),F(I1.$$.fragment),K9o=l(),oo=a("div"),F(Fy.$$.fragment),Z9o=l(),mfe=a("p"),exo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),oxo=l(),Pa=a("p"),rxo=o("The model class to instantiate is selected based on the "),gfe=a("code"),txo=o("model_type"),axo=o(` property of the config object (either
passed as an argument or loaded from `),hfe=a("code"),nxo=o("pretrained_model_name_or_path"),sxo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pfe=a("code"),lxo=o("pretrained_model_name_or_path"),ixo=o(":"),dxo=l(),q=a("ul"),q1=a("li"),_fe=a("strong"),cxo=o("albert"),fxo=o(" \u2014 "),WD=a("a"),mxo=o("AlbertForSequenceClassification"),gxo=o(" (ALBERT model)"),hxo=l(),N1=a("li"),ufe=a("strong"),pxo=o("bart"),_xo=o(" \u2014 "),QD=a("a"),uxo=o("BartForSequenceClassification"),bxo=o(" (BART model)"),vxo=l(),j1=a("li"),bfe=a("strong"),Fxo=o("bert"),Txo=o(" \u2014 "),HD=a("a"),Mxo=o("BertForSequenceClassification"),Exo=o(" (BERT model)"),Cxo=l(),D1=a("li"),vfe=a("strong"),wxo=o("big_bird"),Axo=o(" \u2014 "),UD=a("a"),yxo=o("BigBirdForSequenceClassification"),Lxo=o(" (BigBird model)"),xxo=l(),G1=a("li"),Ffe=a("strong"),$xo=o("bigbird_pegasus"),kxo=o(" \u2014 "),JD=a("a"),Sxo=o("BigBirdPegasusForSequenceClassification"),Rxo=o(" (BigBirdPegasus model)"),Pxo=l(),O1=a("li"),Tfe=a("strong"),Bxo=o("camembert"),Ixo=o(" \u2014 "),YD=a("a"),qxo=o("CamembertForSequenceClassification"),Nxo=o(" (CamemBERT model)"),jxo=l(),V1=a("li"),Mfe=a("strong"),Dxo=o("canine"),Gxo=o(" \u2014 "),KD=a("a"),Oxo=o("CanineForSequenceClassification"),Vxo=o(" (Canine model)"),Xxo=l(),X1=a("li"),Efe=a("strong"),zxo=o("convbert"),Wxo=o(" \u2014 "),ZD=a("a"),Qxo=o("ConvBertForSequenceClassification"),Hxo=o(" (ConvBERT model)"),Uxo=l(),z1=a("li"),Cfe=a("strong"),Jxo=o("ctrl"),Yxo=o(" \u2014 "),eG=a("a"),Kxo=o("CTRLForSequenceClassification"),Zxo=o(" (CTRL model)"),e$o=l(),W1=a("li"),wfe=a("strong"),o$o=o("data2vec-text"),r$o=o(" \u2014 "),oG=a("a"),t$o=o("Data2VecTextForSequenceClassification"),a$o=o(" (Data2VecText model)"),n$o=l(),Q1=a("li"),Afe=a("strong"),s$o=o("deberta"),l$o=o(" \u2014 "),rG=a("a"),i$o=o("DebertaForSequenceClassification"),d$o=o(" (DeBERTa model)"),c$o=l(),H1=a("li"),yfe=a("strong"),f$o=o("deberta-v2"),m$o=o(" \u2014 "),tG=a("a"),g$o=o("DebertaV2ForSequenceClassification"),h$o=o(" (DeBERTa-v2 model)"),p$o=l(),U1=a("li"),Lfe=a("strong"),_$o=o("distilbert"),u$o=o(" \u2014 "),aG=a("a"),b$o=o("DistilBertForSequenceClassification"),v$o=o(" (DistilBERT model)"),F$o=l(),J1=a("li"),xfe=a("strong"),T$o=o("electra"),M$o=o(" \u2014 "),nG=a("a"),E$o=o("ElectraForSequenceClassification"),C$o=o(" (ELECTRA model)"),w$o=l(),Y1=a("li"),$fe=a("strong"),A$o=o("flaubert"),y$o=o(" \u2014 "),sG=a("a"),L$o=o("FlaubertForSequenceClassification"),x$o=o(" (FlauBERT model)"),$$o=l(),K1=a("li"),kfe=a("strong"),k$o=o("fnet"),S$o=o(" \u2014 "),lG=a("a"),R$o=o("FNetForSequenceClassification"),P$o=o(" (FNet model)"),B$o=l(),Z1=a("li"),Sfe=a("strong"),I$o=o("funnel"),q$o=o(" \u2014 "),iG=a("a"),N$o=o("FunnelForSequenceClassification"),j$o=o(" (Funnel Transformer model)"),D$o=l(),eb=a("li"),Rfe=a("strong"),G$o=o("gpt2"),O$o=o(" \u2014 "),dG=a("a"),V$o=o("GPT2ForSequenceClassification"),X$o=o(" (OpenAI GPT-2 model)"),z$o=l(),ob=a("li"),Pfe=a("strong"),W$o=o("gpt_neo"),Q$o=o(" \u2014 "),cG=a("a"),H$o=o("GPTNeoForSequenceClassification"),U$o=o(" (GPT Neo model)"),J$o=l(),rb=a("li"),Bfe=a("strong"),Y$o=o("gptj"),K$o=o(" \u2014 "),fG=a("a"),Z$o=o("GPTJForSequenceClassification"),eko=o(" (GPT-J model)"),oko=l(),tb=a("li"),Ife=a("strong"),rko=o("ibert"),tko=o(" \u2014 "),mG=a("a"),ako=o("IBertForSequenceClassification"),nko=o(" (I-BERT model)"),sko=l(),ab=a("li"),qfe=a("strong"),lko=o("layoutlm"),iko=o(" \u2014 "),gG=a("a"),dko=o("LayoutLMForSequenceClassification"),cko=o(" (LayoutLM model)"),fko=l(),nb=a("li"),Nfe=a("strong"),mko=o("layoutlmv2"),gko=o(" \u2014 "),hG=a("a"),hko=o("LayoutLMv2ForSequenceClassification"),pko=o(" (LayoutLMv2 model)"),_ko=l(),sb=a("li"),jfe=a("strong"),uko=o("led"),bko=o(" \u2014 "),pG=a("a"),vko=o("LEDForSequenceClassification"),Fko=o(" (LED model)"),Tko=l(),lb=a("li"),Dfe=a("strong"),Mko=o("longformer"),Eko=o(" \u2014 "),_G=a("a"),Cko=o("LongformerForSequenceClassification"),wko=o(" (Longformer model)"),Ako=l(),ib=a("li"),Gfe=a("strong"),yko=o("mbart"),Lko=o(" \u2014 "),uG=a("a"),xko=o("MBartForSequenceClassification"),$ko=o(" (mBART model)"),kko=l(),db=a("li"),Ofe=a("strong"),Sko=o("megatron-bert"),Rko=o(" \u2014 "),bG=a("a"),Pko=o("MegatronBertForSequenceClassification"),Bko=o(" (MegatronBert model)"),Iko=l(),cb=a("li"),Vfe=a("strong"),qko=o("mobilebert"),Nko=o(" \u2014 "),vG=a("a"),jko=o("MobileBertForSequenceClassification"),Dko=o(" (MobileBERT model)"),Gko=l(),fb=a("li"),Xfe=a("strong"),Oko=o("mpnet"),Vko=o(" \u2014 "),FG=a("a"),Xko=o("MPNetForSequenceClassification"),zko=o(" (MPNet model)"),Wko=l(),mb=a("li"),zfe=a("strong"),Qko=o("nystromformer"),Hko=o(" \u2014 "),TG=a("a"),Uko=o("NystromformerForSequenceClassification"),Jko=o(" (Nystromformer model)"),Yko=l(),gb=a("li"),Wfe=a("strong"),Kko=o("openai-gpt"),Zko=o(" \u2014 "),MG=a("a"),eSo=o("OpenAIGPTForSequenceClassification"),oSo=o(" (OpenAI GPT model)"),rSo=l(),hb=a("li"),Qfe=a("strong"),tSo=o("perceiver"),aSo=o(" \u2014 "),EG=a("a"),nSo=o("PerceiverForSequenceClassification"),sSo=o(" (Perceiver model)"),lSo=l(),pb=a("li"),Hfe=a("strong"),iSo=o("plbart"),dSo=o(" \u2014 "),CG=a("a"),cSo=o("PLBartForSequenceClassification"),fSo=o(" (PLBart model)"),mSo=l(),_b=a("li"),Ufe=a("strong"),gSo=o("qdqbert"),hSo=o(" \u2014 "),wG=a("a"),pSo=o("QDQBertForSequenceClassification"),_So=o(" (QDQBert model)"),uSo=l(),ub=a("li"),Jfe=a("strong"),bSo=o("reformer"),vSo=o(" \u2014 "),AG=a("a"),FSo=o("ReformerForSequenceClassification"),TSo=o(" (Reformer model)"),MSo=l(),bb=a("li"),Yfe=a("strong"),ESo=o("rembert"),CSo=o(" \u2014 "),yG=a("a"),wSo=o("RemBertForSequenceClassification"),ASo=o(" (RemBERT model)"),ySo=l(),vb=a("li"),Kfe=a("strong"),LSo=o("roberta"),xSo=o(" \u2014 "),LG=a("a"),$So=o("RobertaForSequenceClassification"),kSo=o(" (RoBERTa model)"),SSo=l(),Fb=a("li"),Zfe=a("strong"),RSo=o("roformer"),PSo=o(" \u2014 "),xG=a("a"),BSo=o("RoFormerForSequenceClassification"),ISo=o(" (RoFormer model)"),qSo=l(),Tb=a("li"),eme=a("strong"),NSo=o("squeezebert"),jSo=o(" \u2014 "),$G=a("a"),DSo=o("SqueezeBertForSequenceClassification"),GSo=o(" (SqueezeBERT model)"),OSo=l(),Mb=a("li"),ome=a("strong"),VSo=o("tapas"),XSo=o(" \u2014 "),kG=a("a"),zSo=o("TapasForSequenceClassification"),WSo=o(" (TAPAS model)"),QSo=l(),Eb=a("li"),rme=a("strong"),HSo=o("transfo-xl"),USo=o(" \u2014 "),SG=a("a"),JSo=o("TransfoXLForSequenceClassification"),YSo=o(" (Transformer-XL model)"),KSo=l(),Cb=a("li"),tme=a("strong"),ZSo=o("xlm"),eRo=o(" \u2014 "),RG=a("a"),oRo=o("XLMForSequenceClassification"),rRo=o(" (XLM model)"),tRo=l(),wb=a("li"),ame=a("strong"),aRo=o("xlm-roberta"),nRo=o(" \u2014 "),PG=a("a"),sRo=o("XLMRobertaForSequenceClassification"),lRo=o(" (XLM-RoBERTa model)"),iRo=l(),Ab=a("li"),nme=a("strong"),dRo=o("xlm-roberta-xl"),cRo=o(" \u2014 "),BG=a("a"),fRo=o("XLMRobertaXLForSequenceClassification"),mRo=o(" (XLM-RoBERTa-XL model)"),gRo=l(),yb=a("li"),sme=a("strong"),hRo=o("xlnet"),pRo=o(" \u2014 "),IG=a("a"),_Ro=o("XLNetForSequenceClassification"),uRo=o(" (XLNet model)"),bRo=l(),Lb=a("li"),lme=a("strong"),vRo=o("yoso"),FRo=o(" \u2014 "),qG=a("a"),TRo=o("YosoForSequenceClassification"),MRo=o(" (YOSO model)"),ERo=l(),xb=a("p"),CRo=o("The model is set in evaluation mode by default using "),ime=a("code"),wRo=o("model.eval()"),ARo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dme=a("code"),yRo=o("model.train()"),LRo=l(),F($b.$$.fragment),Xqe=l(),Vi=a("h2"),kb=a("a"),cme=a("span"),F(Ty.$$.fragment),xRo=l(),fme=a("span"),$Ro=o("AutoModelForMultipleChoice"),zqe=l(),Po=a("div"),F(My.$$.fragment),kRo=l(),Xi=a("p"),SRo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),NG=a("a"),RRo=o("from_pretrained()"),PRo=o(" class method or the "),jG=a("a"),BRo=o("from_config()"),IRo=o(` class
method.`),qRo=l(),Ey=a("p"),NRo=o("This class cannot be instantiated directly using "),mme=a("code"),jRo=o("__init__()"),DRo=o(" (throws an error)."),GRo=l(),ct=a("div"),F(Cy.$$.fragment),ORo=l(),gme=a("p"),VRo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),XRo=l(),zi=a("p"),zRo=o(`Note:
Loading a model from its configuration file does `),hme=a("strong"),WRo=o("not"),QRo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DG=a("a"),HRo=o("from_pretrained()"),URo=o(" to load the model weights."),JRo=l(),F(Sb.$$.fragment),YRo=l(),ro=a("div"),F(wy.$$.fragment),KRo=l(),pme=a("p"),ZRo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),ePo=l(),Ba=a("p"),oPo=o("The model class to instantiate is selected based on the "),_me=a("code"),rPo=o("model_type"),tPo=o(` property of the config object (either
passed as an argument or loaded from `),ume=a("code"),aPo=o("pretrained_model_name_or_path"),nPo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bme=a("code"),sPo=o("pretrained_model_name_or_path"),lPo=o(":"),iPo=l(),Y=a("ul"),Rb=a("li"),vme=a("strong"),dPo=o("albert"),cPo=o(" \u2014 "),GG=a("a"),fPo=o("AlbertForMultipleChoice"),mPo=o(" (ALBERT model)"),gPo=l(),Pb=a("li"),Fme=a("strong"),hPo=o("bert"),pPo=o(" \u2014 "),OG=a("a"),_Po=o("BertForMultipleChoice"),uPo=o(" (BERT model)"),bPo=l(),Bb=a("li"),Tme=a("strong"),vPo=o("big_bird"),FPo=o(" \u2014 "),VG=a("a"),TPo=o("BigBirdForMultipleChoice"),MPo=o(" (BigBird model)"),EPo=l(),Ib=a("li"),Mme=a("strong"),CPo=o("camembert"),wPo=o(" \u2014 "),XG=a("a"),APo=o("CamembertForMultipleChoice"),yPo=o(" (CamemBERT model)"),LPo=l(),qb=a("li"),Eme=a("strong"),xPo=o("canine"),$Po=o(" \u2014 "),zG=a("a"),kPo=o("CanineForMultipleChoice"),SPo=o(" (Canine model)"),RPo=l(),Nb=a("li"),Cme=a("strong"),PPo=o("convbert"),BPo=o(" \u2014 "),WG=a("a"),IPo=o("ConvBertForMultipleChoice"),qPo=o(" (ConvBERT model)"),NPo=l(),jb=a("li"),wme=a("strong"),jPo=o("data2vec-text"),DPo=o(" \u2014 "),QG=a("a"),GPo=o("Data2VecTextForMultipleChoice"),OPo=o(" (Data2VecText model)"),VPo=l(),Db=a("li"),Ame=a("strong"),XPo=o("deberta-v2"),zPo=o(" \u2014 "),HG=a("a"),WPo=o("DebertaV2ForMultipleChoice"),QPo=o(" (DeBERTa-v2 model)"),HPo=l(),Gb=a("li"),yme=a("strong"),UPo=o("distilbert"),JPo=o(" \u2014 "),UG=a("a"),YPo=o("DistilBertForMultipleChoice"),KPo=o(" (DistilBERT model)"),ZPo=l(),Ob=a("li"),Lme=a("strong"),eBo=o("electra"),oBo=o(" \u2014 "),JG=a("a"),rBo=o("ElectraForMultipleChoice"),tBo=o(" (ELECTRA model)"),aBo=l(),Vb=a("li"),xme=a("strong"),nBo=o("flaubert"),sBo=o(" \u2014 "),YG=a("a"),lBo=o("FlaubertForMultipleChoice"),iBo=o(" (FlauBERT model)"),dBo=l(),Xb=a("li"),$me=a("strong"),cBo=o("fnet"),fBo=o(" \u2014 "),KG=a("a"),mBo=o("FNetForMultipleChoice"),gBo=o(" (FNet model)"),hBo=l(),zb=a("li"),kme=a("strong"),pBo=o("funnel"),_Bo=o(" \u2014 "),ZG=a("a"),uBo=o("FunnelForMultipleChoice"),bBo=o(" (Funnel Transformer model)"),vBo=l(),Wb=a("li"),Sme=a("strong"),FBo=o("ibert"),TBo=o(" \u2014 "),eO=a("a"),MBo=o("IBertForMultipleChoice"),EBo=o(" (I-BERT model)"),CBo=l(),Qb=a("li"),Rme=a("strong"),wBo=o("longformer"),ABo=o(" \u2014 "),oO=a("a"),yBo=o("LongformerForMultipleChoice"),LBo=o(" (Longformer model)"),xBo=l(),Hb=a("li"),Pme=a("strong"),$Bo=o("megatron-bert"),kBo=o(" \u2014 "),rO=a("a"),SBo=o("MegatronBertForMultipleChoice"),RBo=o(" (MegatronBert model)"),PBo=l(),Ub=a("li"),Bme=a("strong"),BBo=o("mobilebert"),IBo=o(" \u2014 "),tO=a("a"),qBo=o("MobileBertForMultipleChoice"),NBo=o(" (MobileBERT model)"),jBo=l(),Jb=a("li"),Ime=a("strong"),DBo=o("mpnet"),GBo=o(" \u2014 "),aO=a("a"),OBo=o("MPNetForMultipleChoice"),VBo=o(" (MPNet model)"),XBo=l(),Yb=a("li"),qme=a("strong"),zBo=o("nystromformer"),WBo=o(" \u2014 "),nO=a("a"),QBo=o("NystromformerForMultipleChoice"),HBo=o(" (Nystromformer model)"),UBo=l(),Kb=a("li"),Nme=a("strong"),JBo=o("qdqbert"),YBo=o(" \u2014 "),sO=a("a"),KBo=o("QDQBertForMultipleChoice"),ZBo=o(" (QDQBert model)"),eIo=l(),Zb=a("li"),jme=a("strong"),oIo=o("rembert"),rIo=o(" \u2014 "),lO=a("a"),tIo=o("RemBertForMultipleChoice"),aIo=o(" (RemBERT model)"),nIo=l(),e5=a("li"),Dme=a("strong"),sIo=o("roberta"),lIo=o(" \u2014 "),iO=a("a"),iIo=o("RobertaForMultipleChoice"),dIo=o(" (RoBERTa model)"),cIo=l(),o5=a("li"),Gme=a("strong"),fIo=o("roformer"),mIo=o(" \u2014 "),dO=a("a"),gIo=o("RoFormerForMultipleChoice"),hIo=o(" (RoFormer model)"),pIo=l(),r5=a("li"),Ome=a("strong"),_Io=o("squeezebert"),uIo=o(" \u2014 "),cO=a("a"),bIo=o("SqueezeBertForMultipleChoice"),vIo=o(" (SqueezeBERT model)"),FIo=l(),t5=a("li"),Vme=a("strong"),TIo=o("xlm"),MIo=o(" \u2014 "),fO=a("a"),EIo=o("XLMForMultipleChoice"),CIo=o(" (XLM model)"),wIo=l(),a5=a("li"),Xme=a("strong"),AIo=o("xlm-roberta"),yIo=o(" \u2014 "),mO=a("a"),LIo=o("XLMRobertaForMultipleChoice"),xIo=o(" (XLM-RoBERTa model)"),$Io=l(),n5=a("li"),zme=a("strong"),kIo=o("xlm-roberta-xl"),SIo=o(" \u2014 "),gO=a("a"),RIo=o("XLMRobertaXLForMultipleChoice"),PIo=o(" (XLM-RoBERTa-XL model)"),BIo=l(),s5=a("li"),Wme=a("strong"),IIo=o("xlnet"),qIo=o(" \u2014 "),hO=a("a"),NIo=o("XLNetForMultipleChoice"),jIo=o(" (XLNet model)"),DIo=l(),l5=a("li"),Qme=a("strong"),GIo=o("yoso"),OIo=o(" \u2014 "),pO=a("a"),VIo=o("YosoForMultipleChoice"),XIo=o(" (YOSO model)"),zIo=l(),i5=a("p"),WIo=o("The model is set in evaluation mode by default using "),Hme=a("code"),QIo=o("model.eval()"),HIo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ume=a("code"),UIo=o("model.train()"),JIo=l(),F(d5.$$.fragment),Wqe=l(),Wi=a("h2"),c5=a("a"),Jme=a("span"),F(Ay.$$.fragment),YIo=l(),Yme=a("span"),KIo=o("AutoModelForNextSentencePrediction"),Qqe=l(),Bo=a("div"),F(yy.$$.fragment),ZIo=l(),Qi=a("p"),eqo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),_O=a("a"),oqo=o("from_pretrained()"),rqo=o(" class method or the "),uO=a("a"),tqo=o("from_config()"),aqo=o(` class
method.`),nqo=l(),Ly=a("p"),sqo=o("This class cannot be instantiated directly using "),Kme=a("code"),lqo=o("__init__()"),iqo=o(" (throws an error)."),dqo=l(),ft=a("div"),F(xy.$$.fragment),cqo=l(),Zme=a("p"),fqo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),mqo=l(),Hi=a("p"),gqo=o(`Note:
Loading a model from its configuration file does `),ege=a("strong"),hqo=o("not"),pqo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bO=a("a"),_qo=o("from_pretrained()"),uqo=o(" to load the model weights."),bqo=l(),F(f5.$$.fragment),vqo=l(),to=a("div"),F($y.$$.fragment),Fqo=l(),oge=a("p"),Tqo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Mqo=l(),Ia=a("p"),Eqo=o("The model class to instantiate is selected based on the "),rge=a("code"),Cqo=o("model_type"),wqo=o(` property of the config object (either
passed as an argument or loaded from `),tge=a("code"),Aqo=o("pretrained_model_name_or_path"),yqo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),age=a("code"),Lqo=o("pretrained_model_name_or_path"),xqo=o(":"),$qo=l(),Yr=a("ul"),m5=a("li"),nge=a("strong"),kqo=o("bert"),Sqo=o(" \u2014 "),vO=a("a"),Rqo=o("BertForNextSentencePrediction"),Pqo=o(" (BERT model)"),Bqo=l(),g5=a("li"),sge=a("strong"),Iqo=o("fnet"),qqo=o(" \u2014 "),FO=a("a"),Nqo=o("FNetForNextSentencePrediction"),jqo=o(" (FNet model)"),Dqo=l(),h5=a("li"),lge=a("strong"),Gqo=o("megatron-bert"),Oqo=o(" \u2014 "),TO=a("a"),Vqo=o("MegatronBertForNextSentencePrediction"),Xqo=o(" (MegatronBert model)"),zqo=l(),p5=a("li"),ige=a("strong"),Wqo=o("mobilebert"),Qqo=o(" \u2014 "),MO=a("a"),Hqo=o("MobileBertForNextSentencePrediction"),Uqo=o(" (MobileBERT model)"),Jqo=l(),_5=a("li"),dge=a("strong"),Yqo=o("qdqbert"),Kqo=o(" \u2014 "),EO=a("a"),Zqo=o("QDQBertForNextSentencePrediction"),eNo=o(" (QDQBert model)"),oNo=l(),u5=a("p"),rNo=o("The model is set in evaluation mode by default using "),cge=a("code"),tNo=o("model.eval()"),aNo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fge=a("code"),nNo=o("model.train()"),sNo=l(),F(b5.$$.fragment),Hqe=l(),Ui=a("h2"),v5=a("a"),mge=a("span"),F(ky.$$.fragment),lNo=l(),gge=a("span"),iNo=o("AutoModelForTokenClassification"),Uqe=l(),Io=a("div"),F(Sy.$$.fragment),dNo=l(),Ji=a("p"),cNo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),CO=a("a"),fNo=o("from_pretrained()"),mNo=o(" class method or the "),wO=a("a"),gNo=o("from_config()"),hNo=o(` class
method.`),pNo=l(),Ry=a("p"),_No=o("This class cannot be instantiated directly using "),hge=a("code"),uNo=o("__init__()"),bNo=o(" (throws an error)."),vNo=l(),mt=a("div"),F(Py.$$.fragment),FNo=l(),pge=a("p"),TNo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),MNo=l(),Yi=a("p"),ENo=o(`Note:
Loading a model from its configuration file does `),_ge=a("strong"),CNo=o("not"),wNo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AO=a("a"),ANo=o("from_pretrained()"),yNo=o(" to load the model weights."),LNo=l(),F(F5.$$.fragment),xNo=l(),ao=a("div"),F(By.$$.fragment),$No=l(),uge=a("p"),kNo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),SNo=l(),qa=a("p"),RNo=o("The model class to instantiate is selected based on the "),bge=a("code"),PNo=o("model_type"),BNo=o(` property of the config object (either
passed as an argument or loaded from `),vge=a("code"),INo=o("pretrained_model_name_or_path"),qNo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fge=a("code"),NNo=o("pretrained_model_name_or_path"),jNo=o(":"),DNo=l(),U=a("ul"),T5=a("li"),Tge=a("strong"),GNo=o("albert"),ONo=o(" \u2014 "),yO=a("a"),VNo=o("AlbertForTokenClassification"),XNo=o(" (ALBERT model)"),zNo=l(),M5=a("li"),Mge=a("strong"),WNo=o("bert"),QNo=o(" \u2014 "),LO=a("a"),HNo=o("BertForTokenClassification"),UNo=o(" (BERT model)"),JNo=l(),E5=a("li"),Ege=a("strong"),YNo=o("big_bird"),KNo=o(" \u2014 "),xO=a("a"),ZNo=o("BigBirdForTokenClassification"),ejo=o(" (BigBird model)"),ojo=l(),C5=a("li"),Cge=a("strong"),rjo=o("camembert"),tjo=o(" \u2014 "),$O=a("a"),ajo=o("CamembertForTokenClassification"),njo=o(" (CamemBERT model)"),sjo=l(),w5=a("li"),wge=a("strong"),ljo=o("canine"),ijo=o(" \u2014 "),kO=a("a"),djo=o("CanineForTokenClassification"),cjo=o(" (Canine model)"),fjo=l(),A5=a("li"),Age=a("strong"),mjo=o("convbert"),gjo=o(" \u2014 "),SO=a("a"),hjo=o("ConvBertForTokenClassification"),pjo=o(" (ConvBERT model)"),_jo=l(),y5=a("li"),yge=a("strong"),ujo=o("data2vec-text"),bjo=o(" \u2014 "),RO=a("a"),vjo=o("Data2VecTextForTokenClassification"),Fjo=o(" (Data2VecText model)"),Tjo=l(),L5=a("li"),Lge=a("strong"),Mjo=o("deberta"),Ejo=o(" \u2014 "),PO=a("a"),Cjo=o("DebertaForTokenClassification"),wjo=o(" (DeBERTa model)"),Ajo=l(),x5=a("li"),xge=a("strong"),yjo=o("deberta-v2"),Ljo=o(" \u2014 "),BO=a("a"),xjo=o("DebertaV2ForTokenClassification"),$jo=o(" (DeBERTa-v2 model)"),kjo=l(),$5=a("li"),$ge=a("strong"),Sjo=o("distilbert"),Rjo=o(" \u2014 "),IO=a("a"),Pjo=o("DistilBertForTokenClassification"),Bjo=o(" (DistilBERT model)"),Ijo=l(),k5=a("li"),kge=a("strong"),qjo=o("electra"),Njo=o(" \u2014 "),qO=a("a"),jjo=o("ElectraForTokenClassification"),Djo=o(" (ELECTRA model)"),Gjo=l(),S5=a("li"),Sge=a("strong"),Ojo=o("flaubert"),Vjo=o(" \u2014 "),NO=a("a"),Xjo=o("FlaubertForTokenClassification"),zjo=o(" (FlauBERT model)"),Wjo=l(),R5=a("li"),Rge=a("strong"),Qjo=o("fnet"),Hjo=o(" \u2014 "),jO=a("a"),Ujo=o("FNetForTokenClassification"),Jjo=o(" (FNet model)"),Yjo=l(),P5=a("li"),Pge=a("strong"),Kjo=o("funnel"),Zjo=o(" \u2014 "),DO=a("a"),eDo=o("FunnelForTokenClassification"),oDo=o(" (Funnel Transformer model)"),rDo=l(),B5=a("li"),Bge=a("strong"),tDo=o("gpt2"),aDo=o(" \u2014 "),GO=a("a"),nDo=o("GPT2ForTokenClassification"),sDo=o(" (OpenAI GPT-2 model)"),lDo=l(),I5=a("li"),Ige=a("strong"),iDo=o("ibert"),dDo=o(" \u2014 "),OO=a("a"),cDo=o("IBertForTokenClassification"),fDo=o(" (I-BERT model)"),mDo=l(),q5=a("li"),qge=a("strong"),gDo=o("layoutlm"),hDo=o(" \u2014 "),VO=a("a"),pDo=o("LayoutLMForTokenClassification"),_Do=o(" (LayoutLM model)"),uDo=l(),N5=a("li"),Nge=a("strong"),bDo=o("layoutlmv2"),vDo=o(" \u2014 "),XO=a("a"),FDo=o("LayoutLMv2ForTokenClassification"),TDo=o(" (LayoutLMv2 model)"),MDo=l(),j5=a("li"),jge=a("strong"),EDo=o("longformer"),CDo=o(" \u2014 "),zO=a("a"),wDo=o("LongformerForTokenClassification"),ADo=o(" (Longformer model)"),yDo=l(),D5=a("li"),Dge=a("strong"),LDo=o("megatron-bert"),xDo=o(" \u2014 "),WO=a("a"),$Do=o("MegatronBertForTokenClassification"),kDo=o(" (MegatronBert model)"),SDo=l(),G5=a("li"),Gge=a("strong"),RDo=o("mobilebert"),PDo=o(" \u2014 "),QO=a("a"),BDo=o("MobileBertForTokenClassification"),IDo=o(" (MobileBERT model)"),qDo=l(),O5=a("li"),Oge=a("strong"),NDo=o("mpnet"),jDo=o(" \u2014 "),HO=a("a"),DDo=o("MPNetForTokenClassification"),GDo=o(" (MPNet model)"),ODo=l(),V5=a("li"),Vge=a("strong"),VDo=o("nystromformer"),XDo=o(" \u2014 "),UO=a("a"),zDo=o("NystromformerForTokenClassification"),WDo=o(" (Nystromformer model)"),QDo=l(),X5=a("li"),Xge=a("strong"),HDo=o("qdqbert"),UDo=o(" \u2014 "),JO=a("a"),JDo=o("QDQBertForTokenClassification"),YDo=o(" (QDQBert model)"),KDo=l(),z5=a("li"),zge=a("strong"),ZDo=o("rembert"),eGo=o(" \u2014 "),YO=a("a"),oGo=o("RemBertForTokenClassification"),rGo=o(" (RemBERT model)"),tGo=l(),W5=a("li"),Wge=a("strong"),aGo=o("roberta"),nGo=o(" \u2014 "),KO=a("a"),sGo=o("RobertaForTokenClassification"),lGo=o(" (RoBERTa model)"),iGo=l(),Q5=a("li"),Qge=a("strong"),dGo=o("roformer"),cGo=o(" \u2014 "),ZO=a("a"),fGo=o("RoFormerForTokenClassification"),mGo=o(" (RoFormer model)"),gGo=l(),H5=a("li"),Hge=a("strong"),hGo=o("squeezebert"),pGo=o(" \u2014 "),eV=a("a"),_Go=o("SqueezeBertForTokenClassification"),uGo=o(" (SqueezeBERT model)"),bGo=l(),U5=a("li"),Uge=a("strong"),vGo=o("xlm"),FGo=o(" \u2014 "),oV=a("a"),TGo=o("XLMForTokenClassification"),MGo=o(" (XLM model)"),EGo=l(),J5=a("li"),Jge=a("strong"),CGo=o("xlm-roberta"),wGo=o(" \u2014 "),rV=a("a"),AGo=o("XLMRobertaForTokenClassification"),yGo=o(" (XLM-RoBERTa model)"),LGo=l(),Y5=a("li"),Yge=a("strong"),xGo=o("xlm-roberta-xl"),$Go=o(" \u2014 "),tV=a("a"),kGo=o("XLMRobertaXLForTokenClassification"),SGo=o(" (XLM-RoBERTa-XL model)"),RGo=l(),K5=a("li"),Kge=a("strong"),PGo=o("xlnet"),BGo=o(" \u2014 "),aV=a("a"),IGo=o("XLNetForTokenClassification"),qGo=o(" (XLNet model)"),NGo=l(),Z5=a("li"),Zge=a("strong"),jGo=o("yoso"),DGo=o(" \u2014 "),nV=a("a"),GGo=o("YosoForTokenClassification"),OGo=o(" (YOSO model)"),VGo=l(),ev=a("p"),XGo=o("The model is set in evaluation mode by default using "),ehe=a("code"),zGo=o("model.eval()"),WGo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ohe=a("code"),QGo=o("model.train()"),HGo=l(),F(ov.$$.fragment),Jqe=l(),Ki=a("h2"),rv=a("a"),rhe=a("span"),F(Iy.$$.fragment),UGo=l(),the=a("span"),JGo=o("AutoModelForQuestionAnswering"),Yqe=l(),qo=a("div"),F(qy.$$.fragment),YGo=l(),Zi=a("p"),KGo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),sV=a("a"),ZGo=o("from_pretrained()"),eOo=o(" class method or the "),lV=a("a"),oOo=o("from_config()"),rOo=o(` class
method.`),tOo=l(),Ny=a("p"),aOo=o("This class cannot be instantiated directly using "),ahe=a("code"),nOo=o("__init__()"),sOo=o(" (throws an error)."),lOo=l(),gt=a("div"),F(jy.$$.fragment),iOo=l(),nhe=a("p"),dOo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),cOo=l(),ed=a("p"),fOo=o(`Note:
Loading a model from its configuration file does `),she=a("strong"),mOo=o("not"),gOo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iV=a("a"),hOo=o("from_pretrained()"),pOo=o(" to load the model weights."),_Oo=l(),F(tv.$$.fragment),uOo=l(),no=a("div"),F(Dy.$$.fragment),bOo=l(),lhe=a("p"),vOo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),FOo=l(),Na=a("p"),TOo=o("The model class to instantiate is selected based on the "),ihe=a("code"),MOo=o("model_type"),EOo=o(` property of the config object (either
passed as an argument or loaded from `),dhe=a("code"),COo=o("pretrained_model_name_or_path"),wOo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),che=a("code"),AOo=o("pretrained_model_name_or_path"),yOo=o(":"),LOo=l(),V=a("ul"),av=a("li"),fhe=a("strong"),xOo=o("albert"),$Oo=o(" \u2014 "),dV=a("a"),kOo=o("AlbertForQuestionAnswering"),SOo=o(" (ALBERT model)"),ROo=l(),nv=a("li"),mhe=a("strong"),POo=o("bart"),BOo=o(" \u2014 "),cV=a("a"),IOo=o("BartForQuestionAnswering"),qOo=o(" (BART model)"),NOo=l(),sv=a("li"),ghe=a("strong"),jOo=o("bert"),DOo=o(" \u2014 "),fV=a("a"),GOo=o("BertForQuestionAnswering"),OOo=o(" (BERT model)"),VOo=l(),lv=a("li"),hhe=a("strong"),XOo=o("big_bird"),zOo=o(" \u2014 "),mV=a("a"),WOo=o("BigBirdForQuestionAnswering"),QOo=o(" (BigBird model)"),HOo=l(),iv=a("li"),phe=a("strong"),UOo=o("bigbird_pegasus"),JOo=o(" \u2014 "),gV=a("a"),YOo=o("BigBirdPegasusForQuestionAnswering"),KOo=o(" (BigBirdPegasus model)"),ZOo=l(),dv=a("li"),_he=a("strong"),eVo=o("camembert"),oVo=o(" \u2014 "),hV=a("a"),rVo=o("CamembertForQuestionAnswering"),tVo=o(" (CamemBERT model)"),aVo=l(),cv=a("li"),uhe=a("strong"),nVo=o("canine"),sVo=o(" \u2014 "),pV=a("a"),lVo=o("CanineForQuestionAnswering"),iVo=o(" (Canine model)"),dVo=l(),fv=a("li"),bhe=a("strong"),cVo=o("convbert"),fVo=o(" \u2014 "),_V=a("a"),mVo=o("ConvBertForQuestionAnswering"),gVo=o(" (ConvBERT model)"),hVo=l(),mv=a("li"),vhe=a("strong"),pVo=o("data2vec-text"),_Vo=o(" \u2014 "),uV=a("a"),uVo=o("Data2VecTextForQuestionAnswering"),bVo=o(" (Data2VecText model)"),vVo=l(),gv=a("li"),Fhe=a("strong"),FVo=o("deberta"),TVo=o(" \u2014 "),bV=a("a"),MVo=o("DebertaForQuestionAnswering"),EVo=o(" (DeBERTa model)"),CVo=l(),hv=a("li"),The=a("strong"),wVo=o("deberta-v2"),AVo=o(" \u2014 "),vV=a("a"),yVo=o("DebertaV2ForQuestionAnswering"),LVo=o(" (DeBERTa-v2 model)"),xVo=l(),pv=a("li"),Mhe=a("strong"),$Vo=o("distilbert"),kVo=o(" \u2014 "),FV=a("a"),SVo=o("DistilBertForQuestionAnswering"),RVo=o(" (DistilBERT model)"),PVo=l(),_v=a("li"),Ehe=a("strong"),BVo=o("electra"),IVo=o(" \u2014 "),TV=a("a"),qVo=o("ElectraForQuestionAnswering"),NVo=o(" (ELECTRA model)"),jVo=l(),uv=a("li"),Che=a("strong"),DVo=o("flaubert"),GVo=o(" \u2014 "),MV=a("a"),OVo=o("FlaubertForQuestionAnsweringSimple"),VVo=o(" (FlauBERT model)"),XVo=l(),bv=a("li"),whe=a("strong"),zVo=o("fnet"),WVo=o(" \u2014 "),EV=a("a"),QVo=o("FNetForQuestionAnswering"),HVo=o(" (FNet model)"),UVo=l(),vv=a("li"),Ahe=a("strong"),JVo=o("funnel"),YVo=o(" \u2014 "),CV=a("a"),KVo=o("FunnelForQuestionAnswering"),ZVo=o(" (Funnel Transformer model)"),eXo=l(),Fv=a("li"),yhe=a("strong"),oXo=o("gptj"),rXo=o(" \u2014 "),wV=a("a"),tXo=o("GPTJForQuestionAnswering"),aXo=o(" (GPT-J model)"),nXo=l(),Tv=a("li"),Lhe=a("strong"),sXo=o("ibert"),lXo=o(" \u2014 "),AV=a("a"),iXo=o("IBertForQuestionAnswering"),dXo=o(" (I-BERT model)"),cXo=l(),Mv=a("li"),xhe=a("strong"),fXo=o("layoutlmv2"),mXo=o(" \u2014 "),yV=a("a"),gXo=o("LayoutLMv2ForQuestionAnswering"),hXo=o(" (LayoutLMv2 model)"),pXo=l(),Ev=a("li"),$he=a("strong"),_Xo=o("led"),uXo=o(" \u2014 "),LV=a("a"),bXo=o("LEDForQuestionAnswering"),vXo=o(" (LED model)"),FXo=l(),Cv=a("li"),khe=a("strong"),TXo=o("longformer"),MXo=o(" \u2014 "),xV=a("a"),EXo=o("LongformerForQuestionAnswering"),CXo=o(" (Longformer model)"),wXo=l(),wv=a("li"),She=a("strong"),AXo=o("lxmert"),yXo=o(" \u2014 "),$V=a("a"),LXo=o("LxmertForQuestionAnswering"),xXo=o(" (LXMERT model)"),$Xo=l(),Av=a("li"),Rhe=a("strong"),kXo=o("mbart"),SXo=o(" \u2014 "),kV=a("a"),RXo=o("MBartForQuestionAnswering"),PXo=o(" (mBART model)"),BXo=l(),yv=a("li"),Phe=a("strong"),IXo=o("megatron-bert"),qXo=o(" \u2014 "),SV=a("a"),NXo=o("MegatronBertForQuestionAnswering"),jXo=o(" (MegatronBert model)"),DXo=l(),Lv=a("li"),Bhe=a("strong"),GXo=o("mobilebert"),OXo=o(" \u2014 "),RV=a("a"),VXo=o("MobileBertForQuestionAnswering"),XXo=o(" (MobileBERT model)"),zXo=l(),xv=a("li"),Ihe=a("strong"),WXo=o("mpnet"),QXo=o(" \u2014 "),PV=a("a"),HXo=o("MPNetForQuestionAnswering"),UXo=o(" (MPNet model)"),JXo=l(),$v=a("li"),qhe=a("strong"),YXo=o("nystromformer"),KXo=o(" \u2014 "),BV=a("a"),ZXo=o("NystromformerForQuestionAnswering"),ezo=o(" (Nystromformer model)"),ozo=l(),kv=a("li"),Nhe=a("strong"),rzo=o("qdqbert"),tzo=o(" \u2014 "),IV=a("a"),azo=o("QDQBertForQuestionAnswering"),nzo=o(" (QDQBert model)"),szo=l(),Sv=a("li"),jhe=a("strong"),lzo=o("reformer"),izo=o(" \u2014 "),qV=a("a"),dzo=o("ReformerForQuestionAnswering"),czo=o(" (Reformer model)"),fzo=l(),Rv=a("li"),Dhe=a("strong"),mzo=o("rembert"),gzo=o(" \u2014 "),NV=a("a"),hzo=o("RemBertForQuestionAnswering"),pzo=o(" (RemBERT model)"),_zo=l(),Pv=a("li"),Ghe=a("strong"),uzo=o("roberta"),bzo=o(" \u2014 "),jV=a("a"),vzo=o("RobertaForQuestionAnswering"),Fzo=o(" (RoBERTa model)"),Tzo=l(),Bv=a("li"),Ohe=a("strong"),Mzo=o("roformer"),Ezo=o(" \u2014 "),DV=a("a"),Czo=o("RoFormerForQuestionAnswering"),wzo=o(" (RoFormer model)"),Azo=l(),Iv=a("li"),Vhe=a("strong"),yzo=o("splinter"),Lzo=o(" \u2014 "),GV=a("a"),xzo=o("SplinterForQuestionAnswering"),$zo=o(" (Splinter model)"),kzo=l(),qv=a("li"),Xhe=a("strong"),Szo=o("squeezebert"),Rzo=o(" \u2014 "),OV=a("a"),Pzo=o("SqueezeBertForQuestionAnswering"),Bzo=o(" (SqueezeBERT model)"),Izo=l(),Nv=a("li"),zhe=a("strong"),qzo=o("xlm"),Nzo=o(" \u2014 "),VV=a("a"),jzo=o("XLMForQuestionAnsweringSimple"),Dzo=o(" (XLM model)"),Gzo=l(),jv=a("li"),Whe=a("strong"),Ozo=o("xlm-roberta"),Vzo=o(" \u2014 "),XV=a("a"),Xzo=o("XLMRobertaForQuestionAnswering"),zzo=o(" (XLM-RoBERTa model)"),Wzo=l(),Dv=a("li"),Qhe=a("strong"),Qzo=o("xlm-roberta-xl"),Hzo=o(" \u2014 "),zV=a("a"),Uzo=o("XLMRobertaXLForQuestionAnswering"),Jzo=o(" (XLM-RoBERTa-XL model)"),Yzo=l(),Gv=a("li"),Hhe=a("strong"),Kzo=o("xlnet"),Zzo=o(" \u2014 "),WV=a("a"),eWo=o("XLNetForQuestionAnsweringSimple"),oWo=o(" (XLNet model)"),rWo=l(),Ov=a("li"),Uhe=a("strong"),tWo=o("yoso"),aWo=o(" \u2014 "),QV=a("a"),nWo=o("YosoForQuestionAnswering"),sWo=o(" (YOSO model)"),lWo=l(),Vv=a("p"),iWo=o("The model is set in evaluation mode by default using "),Jhe=a("code"),dWo=o("model.eval()"),cWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Yhe=a("code"),fWo=o("model.train()"),mWo=l(),F(Xv.$$.fragment),Kqe=l(),od=a("h2"),zv=a("a"),Khe=a("span"),F(Gy.$$.fragment),gWo=l(),Zhe=a("span"),hWo=o("AutoModelForTableQuestionAnswering"),Zqe=l(),No=a("div"),F(Oy.$$.fragment),pWo=l(),rd=a("p"),_Wo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),HV=a("a"),uWo=o("from_pretrained()"),bWo=o(" class method or the "),UV=a("a"),vWo=o("from_config()"),FWo=o(` class
method.`),TWo=l(),Vy=a("p"),MWo=o("This class cannot be instantiated directly using "),epe=a("code"),EWo=o("__init__()"),CWo=o(" (throws an error)."),wWo=l(),ht=a("div"),F(Xy.$$.fragment),AWo=l(),ope=a("p"),yWo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),LWo=l(),td=a("p"),xWo=o(`Note:
Loading a model from its configuration file does `),rpe=a("strong"),$Wo=o("not"),kWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JV=a("a"),SWo=o("from_pretrained()"),RWo=o(" to load the model weights."),PWo=l(),F(Wv.$$.fragment),BWo=l(),so=a("div"),F(zy.$$.fragment),IWo=l(),tpe=a("p"),qWo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),NWo=l(),ja=a("p"),jWo=o("The model class to instantiate is selected based on the "),ape=a("code"),DWo=o("model_type"),GWo=o(` property of the config object (either
passed as an argument or loaded from `),npe=a("code"),OWo=o("pretrained_model_name_or_path"),VWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),spe=a("code"),XWo=o("pretrained_model_name_or_path"),zWo=o(":"),WWo=l(),lpe=a("ul"),Qv=a("li"),ipe=a("strong"),QWo=o("tapas"),HWo=o(" \u2014 "),YV=a("a"),UWo=o("TapasForQuestionAnswering"),JWo=o(" (TAPAS model)"),YWo=l(),Hv=a("p"),KWo=o("The model is set in evaluation mode by default using "),dpe=a("code"),ZWo=o("model.eval()"),eQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cpe=a("code"),oQo=o("model.train()"),rQo=l(),F(Uv.$$.fragment),eNe=l(),ad=a("h2"),Jv=a("a"),fpe=a("span"),F(Wy.$$.fragment),tQo=l(),mpe=a("span"),aQo=o("AutoModelForImageClassification"),oNe=l(),jo=a("div"),F(Qy.$$.fragment),nQo=l(),nd=a("p"),sQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),KV=a("a"),lQo=o("from_pretrained()"),iQo=o(" class method or the "),ZV=a("a"),dQo=o("from_config()"),cQo=o(` class
method.`),fQo=l(),Hy=a("p"),mQo=o("This class cannot be instantiated directly using "),gpe=a("code"),gQo=o("__init__()"),hQo=o(" (throws an error)."),pQo=l(),pt=a("div"),F(Uy.$$.fragment),_Qo=l(),hpe=a("p"),uQo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),bQo=l(),sd=a("p"),vQo=o(`Note:
Loading a model from its configuration file does `),ppe=a("strong"),FQo=o("not"),TQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eX=a("a"),MQo=o("from_pretrained()"),EQo=o(" to load the model weights."),CQo=l(),F(Yv.$$.fragment),wQo=l(),lo=a("div"),F(Jy.$$.fragment),AQo=l(),_pe=a("p"),yQo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),LQo=l(),Da=a("p"),xQo=o("The model class to instantiate is selected based on the "),upe=a("code"),$Qo=o("model_type"),kQo=o(` property of the config object (either
passed as an argument or loaded from `),bpe=a("code"),SQo=o("pretrained_model_name_or_path"),RQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vpe=a("code"),PQo=o("pretrained_model_name_or_path"),BQo=o(":"),IQo=l(),be=a("ul"),Kv=a("li"),Fpe=a("strong"),qQo=o("beit"),NQo=o(" \u2014 "),oX=a("a"),jQo=o("BeitForImageClassification"),DQo=o(" (BEiT model)"),GQo=l(),Zv=a("li"),Tpe=a("strong"),OQo=o("convnext"),VQo=o(" \u2014 "),rX=a("a"),XQo=o("ConvNextForImageClassification"),zQo=o(" (ConvNext model)"),WQo=l(),eF=a("li"),Mpe=a("strong"),QQo=o("cvt"),HQo=o(" \u2014 "),tX=a("a"),UQo=o("CvtForImageClassification"),JQo=o(" (CvT model)"),YQo=l(),oF=a("li"),Epe=a("strong"),KQo=o("data2vec-vision"),ZQo=o(" \u2014 "),aX=a("a"),eHo=o("Data2VecVisionForImageClassification"),oHo=o(" (Data2VecVision model)"),rHo=l(),Ps=a("li"),Cpe=a("strong"),tHo=o("deit"),aHo=o(" \u2014 "),nX=a("a"),nHo=o("DeiTForImageClassification"),sHo=o(" or "),sX=a("a"),lHo=o("DeiTForImageClassificationWithTeacher"),iHo=o(" (DeiT model)"),dHo=l(),rF=a("li"),wpe=a("strong"),cHo=o("imagegpt"),fHo=o(" \u2014 "),lX=a("a"),mHo=o("ImageGPTForImageClassification"),gHo=o(" (ImageGPT model)"),hHo=l(),tF=a("li"),Ape=a("strong"),pHo=o("mobilevit"),_Ho=o(" \u2014 "),iX=a("a"),uHo=o("MobileViTForImageClassification"),bHo=o(" (MobileViT model)"),vHo=l(),_t=a("li"),ype=a("strong"),FHo=o("perceiver"),THo=o(" \u2014 "),dX=a("a"),MHo=o("PerceiverForImageClassificationLearned"),EHo=o(" or "),cX=a("a"),CHo=o("PerceiverForImageClassificationFourier"),wHo=o(" or "),fX=a("a"),AHo=o("PerceiverForImageClassificationConvProcessing"),yHo=o(" (Perceiver model)"),LHo=l(),aF=a("li"),Lpe=a("strong"),xHo=o("poolformer"),$Ho=o(" \u2014 "),mX=a("a"),kHo=o("PoolFormerForImageClassification"),SHo=o(" (PoolFormer model)"),RHo=l(),nF=a("li"),xpe=a("strong"),PHo=o("regnet"),BHo=o(" \u2014 "),gX=a("a"),IHo=o("RegNetForImageClassification"),qHo=o(" (RegNet model)"),NHo=l(),sF=a("li"),$pe=a("strong"),jHo=o("resnet"),DHo=o(" \u2014 "),hX=a("a"),GHo=o("ResNetForImageClassification"),OHo=o(" (ResNet model)"),VHo=l(),lF=a("li"),kpe=a("strong"),XHo=o("segformer"),zHo=o(" \u2014 "),pX=a("a"),WHo=o("SegformerForImageClassification"),QHo=o(" (SegFormer model)"),HHo=l(),iF=a("li"),Spe=a("strong"),UHo=o("swin"),JHo=o(" \u2014 "),_X=a("a"),YHo=o("SwinForImageClassification"),KHo=o(" (Swin model)"),ZHo=l(),dF=a("li"),Rpe=a("strong"),eUo=o("van"),oUo=o(" \u2014 "),uX=a("a"),rUo=o("VanForImageClassification"),tUo=o(" (VAN model)"),aUo=l(),cF=a("li"),Ppe=a("strong"),nUo=o("vit"),sUo=o(" \u2014 "),bX=a("a"),lUo=o("ViTForImageClassification"),iUo=o(" (ViT model)"),dUo=l(),fF=a("p"),cUo=o("The model is set in evaluation mode by default using "),Bpe=a("code"),fUo=o("model.eval()"),mUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ipe=a("code"),gUo=o("model.train()"),hUo=l(),F(mF.$$.fragment),rNe=l(),ld=a("h2"),gF=a("a"),qpe=a("span"),F(Yy.$$.fragment),pUo=l(),Npe=a("span"),_Uo=o("AutoModelForVision2Seq"),tNe=l(),Do=a("div"),F(Ky.$$.fragment),uUo=l(),id=a("p"),bUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),vX=a("a"),vUo=o("from_pretrained()"),FUo=o(" class method or the "),FX=a("a"),TUo=o("from_config()"),MUo=o(` class
method.`),EUo=l(),Zy=a("p"),CUo=o("This class cannot be instantiated directly using "),jpe=a("code"),wUo=o("__init__()"),AUo=o(" (throws an error)."),yUo=l(),ut=a("div"),F(e8.$$.fragment),LUo=l(),Dpe=a("p"),xUo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),$Uo=l(),dd=a("p"),kUo=o(`Note:
Loading a model from its configuration file does `),Gpe=a("strong"),SUo=o("not"),RUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TX=a("a"),PUo=o("from_pretrained()"),BUo=o(" to load the model weights."),IUo=l(),F(hF.$$.fragment),qUo=l(),io=a("div"),F(o8.$$.fragment),NUo=l(),Ope=a("p"),jUo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),DUo=l(),Ga=a("p"),GUo=o("The model class to instantiate is selected based on the "),Vpe=a("code"),OUo=o("model_type"),VUo=o(` property of the config object (either
passed as an argument or loaded from `),Xpe=a("code"),XUo=o("pretrained_model_name_or_path"),zUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zpe=a("code"),WUo=o("pretrained_model_name_or_path"),QUo=o(":"),HUo=l(),Wpe=a("ul"),pF=a("li"),Qpe=a("strong"),UUo=o("vision-encoder-decoder"),JUo=o(" \u2014 "),MX=a("a"),YUo=o("VisionEncoderDecoderModel"),KUo=o(" (Vision Encoder decoder model)"),ZUo=l(),_F=a("p"),eJo=o("The model is set in evaluation mode by default using "),Hpe=a("code"),oJo=o("model.eval()"),rJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Upe=a("code"),tJo=o("model.train()"),aJo=l(),F(uF.$$.fragment),aNe=l(),cd=a("h2"),bF=a("a"),Jpe=a("span"),F(r8.$$.fragment),nJo=l(),Ype=a("span"),sJo=o("AutoModelForAudioClassification"),nNe=l(),Go=a("div"),F(t8.$$.fragment),lJo=l(),fd=a("p"),iJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),EX=a("a"),dJo=o("from_pretrained()"),cJo=o(" class method or the "),CX=a("a"),fJo=o("from_config()"),mJo=o(` class
method.`),gJo=l(),a8=a("p"),hJo=o("This class cannot be instantiated directly using "),Kpe=a("code"),pJo=o("__init__()"),_Jo=o(" (throws an error)."),uJo=l(),bt=a("div"),F(n8.$$.fragment),bJo=l(),Zpe=a("p"),vJo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),FJo=l(),md=a("p"),TJo=o(`Note:
Loading a model from its configuration file does `),e_e=a("strong"),MJo=o("not"),EJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wX=a("a"),CJo=o("from_pretrained()"),wJo=o(" to load the model weights."),AJo=l(),F(vF.$$.fragment),yJo=l(),co=a("div"),F(s8.$$.fragment),LJo=l(),o_e=a("p"),xJo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),$Jo=l(),Oa=a("p"),kJo=o("The model class to instantiate is selected based on the "),r_e=a("code"),SJo=o("model_type"),RJo=o(` property of the config object (either
passed as an argument or loaded from `),t_e=a("code"),PJo=o("pretrained_model_name_or_path"),BJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a_e=a("code"),IJo=o("pretrained_model_name_or_path"),qJo=o(":"),NJo=l(),ke=a("ul"),FF=a("li"),n_e=a("strong"),jJo=o("data2vec-audio"),DJo=o(" \u2014 "),AX=a("a"),GJo=o("Data2VecAudioForSequenceClassification"),OJo=o(" (Data2VecAudio model)"),VJo=l(),TF=a("li"),s_e=a("strong"),XJo=o("hubert"),zJo=o(" \u2014 "),yX=a("a"),WJo=o("HubertForSequenceClassification"),QJo=o(" (Hubert model)"),HJo=l(),MF=a("li"),l_e=a("strong"),UJo=o("sew"),JJo=o(" \u2014 "),LX=a("a"),YJo=o("SEWForSequenceClassification"),KJo=o(" (SEW model)"),ZJo=l(),EF=a("li"),i_e=a("strong"),eYo=o("sew-d"),oYo=o(" \u2014 "),xX=a("a"),rYo=o("SEWDForSequenceClassification"),tYo=o(" (SEW-D model)"),aYo=l(),CF=a("li"),d_e=a("strong"),nYo=o("unispeech"),sYo=o(" \u2014 "),$X=a("a"),lYo=o("UniSpeechForSequenceClassification"),iYo=o(" (UniSpeech model)"),dYo=l(),wF=a("li"),c_e=a("strong"),cYo=o("unispeech-sat"),fYo=o(" \u2014 "),kX=a("a"),mYo=o("UniSpeechSatForSequenceClassification"),gYo=o(" (UniSpeechSat model)"),hYo=l(),AF=a("li"),f_e=a("strong"),pYo=o("wav2vec2"),_Yo=o(" \u2014 "),SX=a("a"),uYo=o("Wav2Vec2ForSequenceClassification"),bYo=o(" (Wav2Vec2 model)"),vYo=l(),yF=a("li"),m_e=a("strong"),FYo=o("wav2vec2-conformer"),TYo=o(" \u2014 "),RX=a("a"),MYo=o("Wav2Vec2ConformerForSequenceClassification"),EYo=o(" (Wav2Vec2-Conformer model)"),CYo=l(),LF=a("li"),g_e=a("strong"),wYo=o("wavlm"),AYo=o(" \u2014 "),PX=a("a"),yYo=o("WavLMForSequenceClassification"),LYo=o(" (WavLM model)"),xYo=l(),xF=a("p"),$Yo=o("The model is set in evaluation mode by default using "),h_e=a("code"),kYo=o("model.eval()"),SYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),p_e=a("code"),RYo=o("model.train()"),PYo=l(),F($F.$$.fragment),sNe=l(),gd=a("h2"),kF=a("a"),__e=a("span"),F(l8.$$.fragment),BYo=l(),u_e=a("span"),IYo=o("AutoModelForAudioFrameClassification"),lNe=l(),Oo=a("div"),F(i8.$$.fragment),qYo=l(),hd=a("p"),NYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),BX=a("a"),jYo=o("from_pretrained()"),DYo=o(" class method or the "),IX=a("a"),GYo=o("from_config()"),OYo=o(` class
method.`),VYo=l(),d8=a("p"),XYo=o("This class cannot be instantiated directly using "),b_e=a("code"),zYo=o("__init__()"),WYo=o(" (throws an error)."),QYo=l(),vt=a("div"),F(c8.$$.fragment),HYo=l(),v_e=a("p"),UYo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),JYo=l(),pd=a("p"),YYo=o(`Note:
Loading a model from its configuration file does `),F_e=a("strong"),KYo=o("not"),ZYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qX=a("a"),eKo=o("from_pretrained()"),oKo=o(" to load the model weights."),rKo=l(),F(SF.$$.fragment),tKo=l(),fo=a("div"),F(f8.$$.fragment),aKo=l(),T_e=a("p"),nKo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),sKo=l(),Va=a("p"),lKo=o("The model class to instantiate is selected based on the "),M_e=a("code"),iKo=o("model_type"),dKo=o(` property of the config object (either
passed as an argument or loaded from `),E_e=a("code"),cKo=o("pretrained_model_name_or_path"),fKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C_e=a("code"),mKo=o("pretrained_model_name_or_path"),gKo=o(":"),hKo=l(),Kr=a("ul"),RF=a("li"),w_e=a("strong"),pKo=o("data2vec-audio"),_Ko=o(" \u2014 "),NX=a("a"),uKo=o("Data2VecAudioForAudioFrameClassification"),bKo=o(" (Data2VecAudio model)"),vKo=l(),PF=a("li"),A_e=a("strong"),FKo=o("unispeech-sat"),TKo=o(" \u2014 "),jX=a("a"),MKo=o("UniSpeechSatForAudioFrameClassification"),EKo=o(" (UniSpeechSat model)"),CKo=l(),BF=a("li"),y_e=a("strong"),wKo=o("wav2vec2"),AKo=o(" \u2014 "),DX=a("a"),yKo=o("Wav2Vec2ForAudioFrameClassification"),LKo=o(" (Wav2Vec2 model)"),xKo=l(),IF=a("li"),L_e=a("strong"),$Ko=o("wav2vec2-conformer"),kKo=o(" \u2014 "),GX=a("a"),SKo=o("Wav2Vec2ConformerForAudioFrameClassification"),RKo=o(" (Wav2Vec2-Conformer model)"),PKo=l(),qF=a("li"),x_e=a("strong"),BKo=o("wavlm"),IKo=o(" \u2014 "),OX=a("a"),qKo=o("WavLMForAudioFrameClassification"),NKo=o(" (WavLM model)"),jKo=l(),NF=a("p"),DKo=o("The model is set in evaluation mode by default using "),$_e=a("code"),GKo=o("model.eval()"),OKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),k_e=a("code"),VKo=o("model.train()"),XKo=l(),F(jF.$$.fragment),iNe=l(),_d=a("h2"),DF=a("a"),S_e=a("span"),F(m8.$$.fragment),zKo=l(),R_e=a("span"),WKo=o("AutoModelForCTC"),dNe=l(),Vo=a("div"),F(g8.$$.fragment),QKo=l(),ud=a("p"),HKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),VX=a("a"),UKo=o("from_pretrained()"),JKo=o(" class method or the "),XX=a("a"),YKo=o("from_config()"),KKo=o(` class
method.`),ZKo=l(),h8=a("p"),eZo=o("This class cannot be instantiated directly using "),P_e=a("code"),oZo=o("__init__()"),rZo=o(" (throws an error)."),tZo=l(),Ft=a("div"),F(p8.$$.fragment),aZo=l(),B_e=a("p"),nZo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),sZo=l(),bd=a("p"),lZo=o(`Note:
Loading a model from its configuration file does `),I_e=a("strong"),iZo=o("not"),dZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zX=a("a"),cZo=o("from_pretrained()"),fZo=o(" to load the model weights."),mZo=l(),F(GF.$$.fragment),gZo=l(),mo=a("div"),F(_8.$$.fragment),hZo=l(),q_e=a("p"),pZo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),_Zo=l(),Xa=a("p"),uZo=o("The model class to instantiate is selected based on the "),N_e=a("code"),bZo=o("model_type"),vZo=o(` property of the config object (either
passed as an argument or loaded from `),j_e=a("code"),FZo=o("pretrained_model_name_or_path"),TZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D_e=a("code"),MZo=o("pretrained_model_name_or_path"),EZo=o(":"),CZo=l(),Se=a("ul"),OF=a("li"),G_e=a("strong"),wZo=o("data2vec-audio"),AZo=o(" \u2014 "),WX=a("a"),yZo=o("Data2VecAudioForCTC"),LZo=o(" (Data2VecAudio model)"),xZo=l(),VF=a("li"),O_e=a("strong"),$Zo=o("hubert"),kZo=o(" \u2014 "),QX=a("a"),SZo=o("HubertForCTC"),RZo=o(" (Hubert model)"),PZo=l(),XF=a("li"),V_e=a("strong"),BZo=o("sew"),IZo=o(" \u2014 "),HX=a("a"),qZo=o("SEWForCTC"),NZo=o(" (SEW model)"),jZo=l(),zF=a("li"),X_e=a("strong"),DZo=o("sew-d"),GZo=o(" \u2014 "),UX=a("a"),OZo=o("SEWDForCTC"),VZo=o(" (SEW-D model)"),XZo=l(),WF=a("li"),z_e=a("strong"),zZo=o("unispeech"),WZo=o(" \u2014 "),JX=a("a"),QZo=o("UniSpeechForCTC"),HZo=o(" (UniSpeech model)"),UZo=l(),QF=a("li"),W_e=a("strong"),JZo=o("unispeech-sat"),YZo=o(" \u2014 "),YX=a("a"),KZo=o("UniSpeechSatForCTC"),ZZo=o(" (UniSpeechSat model)"),eer=l(),HF=a("li"),Q_e=a("strong"),oer=o("wav2vec2"),rer=o(" \u2014 "),KX=a("a"),ter=o("Wav2Vec2ForCTC"),aer=o(" (Wav2Vec2 model)"),ner=l(),UF=a("li"),H_e=a("strong"),ser=o("wav2vec2-conformer"),ler=o(" \u2014 "),ZX=a("a"),ier=o("Wav2Vec2ConformerForCTC"),der=o(" (Wav2Vec2-Conformer model)"),cer=l(),JF=a("li"),U_e=a("strong"),fer=o("wavlm"),mer=o(" \u2014 "),ez=a("a"),ger=o("WavLMForCTC"),her=o(" (WavLM model)"),per=l(),YF=a("p"),_er=o("The model is set in evaluation mode by default using "),J_e=a("code"),uer=o("model.eval()"),ber=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Y_e=a("code"),ver=o("model.train()"),Fer=l(),F(KF.$$.fragment),cNe=l(),vd=a("h2"),ZF=a("a"),K_e=a("span"),F(u8.$$.fragment),Ter=l(),Z_e=a("span"),Mer=o("AutoModelForSpeechSeq2Seq"),fNe=l(),Xo=a("div"),F(b8.$$.fragment),Eer=l(),Fd=a("p"),Cer=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),oz=a("a"),wer=o("from_pretrained()"),Aer=o(" class method or the "),rz=a("a"),yer=o("from_config()"),Ler=o(` class
method.`),xer=l(),v8=a("p"),$er=o("This class cannot be instantiated directly using "),eue=a("code"),ker=o("__init__()"),Ser=o(" (throws an error)."),Rer=l(),Tt=a("div"),F(F8.$$.fragment),Per=l(),oue=a("p"),Ber=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Ier=l(),Td=a("p"),qer=o(`Note:
Loading a model from its configuration file does `),rue=a("strong"),Ner=o("not"),jer=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tz=a("a"),Der=o("from_pretrained()"),Ger=o(" to load the model weights."),Oer=l(),F(e0.$$.fragment),Ver=l(),go=a("div"),F(T8.$$.fragment),Xer=l(),tue=a("p"),zer=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Wer=l(),za=a("p"),Qer=o("The model class to instantiate is selected based on the "),aue=a("code"),Her=o("model_type"),Uer=o(` property of the config object (either
passed as an argument or loaded from `),nue=a("code"),Jer=o("pretrained_model_name_or_path"),Yer=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sue=a("code"),Ker=o("pretrained_model_name_or_path"),Zer=o(":"),eor=l(),M8=a("ul"),o0=a("li"),lue=a("strong"),oor=o("speech-encoder-decoder"),ror=o(" \u2014 "),az=a("a"),tor=o("SpeechEncoderDecoderModel"),aor=o(" (Speech Encoder decoder model)"),nor=l(),r0=a("li"),iue=a("strong"),sor=o("speech_to_text"),lor=o(" \u2014 "),nz=a("a"),ior=o("Speech2TextForConditionalGeneration"),dor=o(" (Speech2Text model)"),cor=l(),t0=a("p"),mor=o("The model is set in evaluation mode by default using "),due=a("code"),gor=o("model.eval()"),hor=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cue=a("code"),por=o("model.train()"),_or=l(),F(a0.$$.fragment),mNe=l(),Md=a("h2"),n0=a("a"),fue=a("span"),F(E8.$$.fragment),uor=l(),mue=a("span"),bor=o("AutoModelForAudioXVector"),gNe=l(),zo=a("div"),F(C8.$$.fragment),vor=l(),Ed=a("p"),For=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),sz=a("a"),Tor=o("from_pretrained()"),Mor=o(" class method or the "),lz=a("a"),Eor=o("from_config()"),Cor=o(` class
method.`),wor=l(),w8=a("p"),Aor=o("This class cannot be instantiated directly using "),gue=a("code"),yor=o("__init__()"),Lor=o(" (throws an error)."),xor=l(),Mt=a("div"),F(A8.$$.fragment),$or=l(),hue=a("p"),kor=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),Sor=l(),Cd=a("p"),Ror=o(`Note:
Loading a model from its configuration file does `),pue=a("strong"),Por=o("not"),Bor=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iz=a("a"),Ior=o("from_pretrained()"),qor=o(" to load the model weights."),Nor=l(),F(s0.$$.fragment),jor=l(),ho=a("div"),F(y8.$$.fragment),Dor=l(),_ue=a("p"),Gor=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Oor=l(),Wa=a("p"),Vor=o("The model class to instantiate is selected based on the "),uue=a("code"),Xor=o("model_type"),zor=o(` property of the config object (either
passed as an argument or loaded from `),bue=a("code"),Wor=o("pretrained_model_name_or_path"),Qor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vue=a("code"),Hor=o("pretrained_model_name_or_path"),Uor=o(":"),Jor=l(),Zr=a("ul"),l0=a("li"),Fue=a("strong"),Yor=o("data2vec-audio"),Kor=o(" \u2014 "),dz=a("a"),Zor=o("Data2VecAudioForXVector"),err=o(" (Data2VecAudio model)"),orr=l(),i0=a("li"),Tue=a("strong"),rrr=o("unispeech-sat"),trr=o(" \u2014 "),cz=a("a"),arr=o("UniSpeechSatForXVector"),nrr=o(" (UniSpeechSat model)"),srr=l(),d0=a("li"),Mue=a("strong"),lrr=o("wav2vec2"),irr=o(" \u2014 "),fz=a("a"),drr=o("Wav2Vec2ForXVector"),crr=o(" (Wav2Vec2 model)"),frr=l(),c0=a("li"),Eue=a("strong"),mrr=o("wav2vec2-conformer"),grr=o(" \u2014 "),mz=a("a"),hrr=o("Wav2Vec2ConformerForXVector"),prr=o(" (Wav2Vec2-Conformer model)"),_rr=l(),f0=a("li"),Cue=a("strong"),urr=o("wavlm"),brr=o(" \u2014 "),gz=a("a"),vrr=o("WavLMForXVector"),Frr=o(" (WavLM model)"),Trr=l(),m0=a("p"),Mrr=o("The model is set in evaluation mode by default using "),wue=a("code"),Err=o("model.eval()"),Crr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Aue=a("code"),wrr=o("model.train()"),Arr=l(),F(g0.$$.fragment),hNe=l(),wd=a("h2"),h0=a("a"),yue=a("span"),F(L8.$$.fragment),yrr=l(),Lue=a("span"),Lrr=o("AutoModelForMaskedImageModeling"),pNe=l(),Wo=a("div"),F(x8.$$.fragment),xrr=l(),Ad=a("p"),$rr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),hz=a("a"),krr=o("from_pretrained()"),Srr=o(" class method or the "),pz=a("a"),Rrr=o("from_config()"),Prr=o(` class
method.`),Brr=l(),$8=a("p"),Irr=o("This class cannot be instantiated directly using "),xue=a("code"),qrr=o("__init__()"),Nrr=o(" (throws an error)."),jrr=l(),Et=a("div"),F(k8.$$.fragment),Drr=l(),$ue=a("p"),Grr=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Orr=l(),yd=a("p"),Vrr=o(`Note:
Loading a model from its configuration file does `),kue=a("strong"),Xrr=o("not"),zrr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_z=a("a"),Wrr=o("from_pretrained()"),Qrr=o(" to load the model weights."),Hrr=l(),F(p0.$$.fragment),Urr=l(),po=a("div"),F(S8.$$.fragment),Jrr=l(),Sue=a("p"),Yrr=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Krr=l(),Qa=a("p"),Zrr=o("The model class to instantiate is selected based on the "),Rue=a("code"),etr=o("model_type"),otr=o(` property of the config object (either
passed as an argument or loaded from `),Pue=a("code"),rtr=o("pretrained_model_name_or_path"),ttr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bue=a("code"),atr=o("pretrained_model_name_or_path"),ntr=o(":"),str=l(),Ld=a("ul"),_0=a("li"),Iue=a("strong"),ltr=o("deit"),itr=o(" \u2014 "),uz=a("a"),dtr=o("DeiTForMaskedImageModeling"),ctr=o(" (DeiT model)"),ftr=l(),u0=a("li"),que=a("strong"),mtr=o("swin"),gtr=o(" \u2014 "),bz=a("a"),htr=o("SwinForMaskedImageModeling"),ptr=o(" (Swin model)"),_tr=l(),b0=a("li"),Nue=a("strong"),utr=o("vit"),btr=o(" \u2014 "),vz=a("a"),vtr=o("ViTForMaskedImageModeling"),Ftr=o(" (ViT model)"),Ttr=l(),v0=a("p"),Mtr=o("The model is set in evaluation mode by default using "),jue=a("code"),Etr=o("model.eval()"),Ctr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Due=a("code"),wtr=o("model.train()"),Atr=l(),F(F0.$$.fragment),_Ne=l(),xd=a("h2"),T0=a("a"),Gue=a("span"),F(R8.$$.fragment),ytr=l(),Oue=a("span"),Ltr=o("AutoModelForObjectDetection"),uNe=l(),Qo=a("div"),F(P8.$$.fragment),xtr=l(),$d=a("p"),$tr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),Fz=a("a"),ktr=o("from_pretrained()"),Str=o(" class method or the "),Tz=a("a"),Rtr=o("from_config()"),Ptr=o(` class
method.`),Btr=l(),B8=a("p"),Itr=o("This class cannot be instantiated directly using "),Vue=a("code"),qtr=o("__init__()"),Ntr=o(" (throws an error)."),jtr=l(),Ct=a("div"),F(I8.$$.fragment),Dtr=l(),Xue=a("p"),Gtr=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Otr=l(),kd=a("p"),Vtr=o(`Note:
Loading a model from its configuration file does `),zue=a("strong"),Xtr=o("not"),ztr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Mz=a("a"),Wtr=o("from_pretrained()"),Qtr=o(" to load the model weights."),Htr=l(),F(M0.$$.fragment),Utr=l(),_o=a("div"),F(q8.$$.fragment),Jtr=l(),Wue=a("p"),Ytr=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Ktr=l(),Ha=a("p"),Ztr=o("The model class to instantiate is selected based on the "),Que=a("code"),ear=o("model_type"),oar=o(` property of the config object (either
passed as an argument or loaded from `),Hue=a("code"),rar=o("pretrained_model_name_or_path"),tar=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uue=a("code"),aar=o("pretrained_model_name_or_path"),nar=o(":"),sar=l(),N8=a("ul"),E0=a("li"),Jue=a("strong"),lar=o("detr"),iar=o(" \u2014 "),Ez=a("a"),dar=o("DetrForObjectDetection"),car=o(" (DETR model)"),far=l(),C0=a("li"),Yue=a("strong"),mar=o("yolos"),gar=o(" \u2014 "),Cz=a("a"),har=o("YolosForObjectDetection"),par=o(" (YOLOS model)"),_ar=l(),w0=a("p"),uar=o("The model is set in evaluation mode by default using "),Kue=a("code"),bar=o("model.eval()"),Far=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zue=a("code"),Tar=o("model.train()"),Mar=l(),F(A0.$$.fragment),bNe=l(),Sd=a("h2"),y0=a("a"),e2e=a("span"),F(j8.$$.fragment),Ear=l(),o2e=a("span"),Car=o("AutoModelForImageSegmentation"),vNe=l(),Ho=a("div"),F(D8.$$.fragment),war=l(),Rd=a("p"),Aar=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),wz=a("a"),yar=o("from_pretrained()"),Lar=o(" class method or the "),Az=a("a"),xar=o("from_config()"),$ar=o(` class
method.`),kar=l(),G8=a("p"),Sar=o("This class cannot be instantiated directly using "),r2e=a("code"),Rar=o("__init__()"),Par=o(" (throws an error)."),Bar=l(),wt=a("div"),F(O8.$$.fragment),Iar=l(),t2e=a("p"),qar=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Nar=l(),Pd=a("p"),jar=o(`Note:
Loading a model from its configuration file does `),a2e=a("strong"),Dar=o("not"),Gar=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yz=a("a"),Oar=o("from_pretrained()"),Var=o(" to load the model weights."),Xar=l(),F(L0.$$.fragment),zar=l(),uo=a("div"),F(V8.$$.fragment),War=l(),n2e=a("p"),Qar=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Har=l(),Ua=a("p"),Uar=o("The model class to instantiate is selected based on the "),s2e=a("code"),Jar=o("model_type"),Yar=o(` property of the config object (either
passed as an argument or loaded from `),l2e=a("code"),Kar=o("pretrained_model_name_or_path"),Zar=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i2e=a("code"),enr=o("pretrained_model_name_or_path"),onr=o(":"),rnr=l(),d2e=a("ul"),x0=a("li"),c2e=a("strong"),tnr=o("detr"),anr=o(" \u2014 "),Lz=a("a"),nnr=o("DetrForSegmentation"),snr=o(" (DETR model)"),lnr=l(),$0=a("p"),inr=o("The model is set in evaluation mode by default using "),f2e=a("code"),dnr=o("model.eval()"),cnr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),m2e=a("code"),fnr=o("model.train()"),mnr=l(),F(k0.$$.fragment),FNe=l(),Bd=a("h2"),S0=a("a"),g2e=a("span"),F(X8.$$.fragment),gnr=l(),h2e=a("span"),hnr=o("AutoModelForSemanticSegmentation"),TNe=l(),Uo=a("div"),F(z8.$$.fragment),pnr=l(),Id=a("p"),_nr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),xz=a("a"),unr=o("from_pretrained()"),bnr=o(" class method or the "),$z=a("a"),vnr=o("from_config()"),Fnr=o(` class
method.`),Tnr=l(),W8=a("p"),Mnr=o("This class cannot be instantiated directly using "),p2e=a("code"),Enr=o("__init__()"),Cnr=o(" (throws an error)."),wnr=l(),At=a("div"),F(Q8.$$.fragment),Anr=l(),_2e=a("p"),ynr=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Lnr=l(),qd=a("p"),xnr=o(`Note:
Loading a model from its configuration file does `),u2e=a("strong"),$nr=o("not"),knr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kz=a("a"),Snr=o("from_pretrained()"),Rnr=o(" to load the model weights."),Pnr=l(),F(R0.$$.fragment),Bnr=l(),bo=a("div"),F(H8.$$.fragment),Inr=l(),b2e=a("p"),qnr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Nnr=l(),Ja=a("p"),jnr=o("The model class to instantiate is selected based on the "),v2e=a("code"),Dnr=o("model_type"),Gnr=o(` property of the config object (either
passed as an argument or loaded from `),F2e=a("code"),Onr=o("pretrained_model_name_or_path"),Vnr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T2e=a("code"),Xnr=o("pretrained_model_name_or_path"),znr=o(":"),Wnr=l(),et=a("ul"),P0=a("li"),M2e=a("strong"),Qnr=o("beit"),Hnr=o(" \u2014 "),Sz=a("a"),Unr=o("BeitForSemanticSegmentation"),Jnr=o(" (BEiT model)"),Ynr=l(),B0=a("li"),E2e=a("strong"),Knr=o("data2vec-vision"),Znr=o(" \u2014 "),Rz=a("a"),esr=o("Data2VecVisionForSemanticSegmentation"),osr=o(" (Data2VecVision model)"),rsr=l(),I0=a("li"),C2e=a("strong"),tsr=o("dpt"),asr=o(" \u2014 "),Pz=a("a"),nsr=o("DPTForSemanticSegmentation"),ssr=o(" (DPT model)"),lsr=l(),q0=a("li"),w2e=a("strong"),isr=o("mobilevit"),dsr=o(" \u2014 "),Bz=a("a"),csr=o("MobileViTForSemanticSegmentation"),fsr=o(" (MobileViT model)"),msr=l(),N0=a("li"),A2e=a("strong"),gsr=o("segformer"),hsr=o(" \u2014 "),Iz=a("a"),psr=o("SegformerForSemanticSegmentation"),_sr=o(" (SegFormer model)"),usr=l(),j0=a("p"),bsr=o("The model is set in evaluation mode by default using "),y2e=a("code"),vsr=o("model.eval()"),Fsr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),L2e=a("code"),Tsr=o("model.train()"),Msr=l(),F(D0.$$.fragment),MNe=l(),Nd=a("h2"),G0=a("a"),x2e=a("span"),F(U8.$$.fragment),Esr=l(),$2e=a("span"),Csr=o("AutoModelForInstanceSegmentation"),ENe=l(),Jo=a("div"),F(J8.$$.fragment),wsr=l(),jd=a("p"),Asr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),qz=a("a"),ysr=o("from_pretrained()"),Lsr=o(" class method or the "),Nz=a("a"),xsr=o("from_config()"),$sr=o(` class
method.`),ksr=l(),Y8=a("p"),Ssr=o("This class cannot be instantiated directly using "),k2e=a("code"),Rsr=o("__init__()"),Psr=o(" (throws an error)."),Bsr=l(),yt=a("div"),F(K8.$$.fragment),Isr=l(),S2e=a("p"),qsr=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Nsr=l(),Dd=a("p"),jsr=o(`Note:
Loading a model from its configuration file does `),R2e=a("strong"),Dsr=o("not"),Gsr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jz=a("a"),Osr=o("from_pretrained()"),Vsr=o(" to load the model weights."),Xsr=l(),F(O0.$$.fragment),zsr=l(),vo=a("div"),F(Z8.$$.fragment),Wsr=l(),P2e=a("p"),Qsr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Hsr=l(),Ya=a("p"),Usr=o("The model class to instantiate is selected based on the "),B2e=a("code"),Jsr=o("model_type"),Ysr=o(` property of the config object (either
passed as an argument or loaded from `),I2e=a("code"),Ksr=o("pretrained_model_name_or_path"),Zsr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q2e=a("code"),elr=o("pretrained_model_name_or_path"),olr=o(":"),rlr=l(),N2e=a("ul"),V0=a("li"),j2e=a("strong"),tlr=o("maskformer"),alr=o(" \u2014 "),Dz=a("a"),nlr=o("MaskFormerForInstanceSegmentation"),slr=o(" (MaskFormer model)"),llr=l(),X0=a("p"),ilr=o("The model is set in evaluation mode by default using "),D2e=a("code"),dlr=o("model.eval()"),clr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),G2e=a("code"),flr=o("model.train()"),mlr=l(),F(z0.$$.fragment),CNe=l(),Gd=a("h2"),W0=a("a"),O2e=a("span"),F(eL.$$.fragment),glr=l(),V2e=a("span"),hlr=o("TFAutoModel"),wNe=l(),Yo=a("div"),F(oL.$$.fragment),plr=l(),Od=a("p"),_lr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Gz=a("a"),ulr=o("from_pretrained()"),blr=o(" class method or the "),Oz=a("a"),vlr=o("from_config()"),Flr=o(` class
method.`),Tlr=l(),rL=a("p"),Mlr=o("This class cannot be instantiated directly using "),X2e=a("code"),Elr=o("__init__()"),Clr=o(" (throws an error)."),wlr=l(),Lt=a("div"),F(tL.$$.fragment),Alr=l(),z2e=a("p"),ylr=o("Instantiates one of the base model classes of the library from a configuration."),Llr=l(),Vd=a("p"),xlr=o(`Note:
Loading a model from its configuration file does `),W2e=a("strong"),$lr=o("not"),klr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Vz=a("a"),Slr=o("from_pretrained()"),Rlr=o(" to load the model weights."),Plr=l(),F(Q0.$$.fragment),Blr=l(),wr=a("div"),F(aL.$$.fragment),Ilr=l(),Q2e=a("p"),qlr=o("Instantiate one of the base model classes of the library from a pretrained model."),Nlr=l(),Ka=a("p"),jlr=o("The model class to instantiate is selected based on the "),H2e=a("code"),Dlr=o("model_type"),Glr=o(` property of the config object (either
passed as an argument or loaded from `),U2e=a("code"),Olr=o("pretrained_model_name_or_path"),Vlr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J2e=a("code"),Xlr=o("pretrained_model_name_or_path"),zlr=o(":"),Wlr=l(),N=a("ul"),H0=a("li"),Y2e=a("strong"),Qlr=o("albert"),Hlr=o(" \u2014 "),Xz=a("a"),Ulr=o("TFAlbertModel"),Jlr=o(" (ALBERT model)"),Ylr=l(),U0=a("li"),K2e=a("strong"),Klr=o("bart"),Zlr=o(" \u2014 "),zz=a("a"),eir=o("TFBartModel"),oir=o(" (BART model)"),rir=l(),J0=a("li"),Z2e=a("strong"),tir=o("bert"),air=o(" \u2014 "),Wz=a("a"),nir=o("TFBertModel"),sir=o(" (BERT model)"),lir=l(),Y0=a("li"),e1e=a("strong"),iir=o("blenderbot"),dir=o(" \u2014 "),Qz=a("a"),cir=o("TFBlenderbotModel"),fir=o(" (Blenderbot model)"),mir=l(),K0=a("li"),o1e=a("strong"),gir=o("blenderbot-small"),hir=o(" \u2014 "),Hz=a("a"),pir=o("TFBlenderbotSmallModel"),_ir=o(" (BlenderbotSmall model)"),uir=l(),Z0=a("li"),r1e=a("strong"),bir=o("camembert"),vir=o(" \u2014 "),Uz=a("a"),Fir=o("TFCamembertModel"),Tir=o(" (CamemBERT model)"),Mir=l(),eT=a("li"),t1e=a("strong"),Eir=o("clip"),Cir=o(" \u2014 "),Jz=a("a"),wir=o("TFCLIPModel"),Air=o(" (CLIP model)"),yir=l(),oT=a("li"),a1e=a("strong"),Lir=o("convbert"),xir=o(" \u2014 "),Yz=a("a"),$ir=o("TFConvBertModel"),kir=o(" (ConvBERT model)"),Sir=l(),rT=a("li"),n1e=a("strong"),Rir=o("convnext"),Pir=o(" \u2014 "),Kz=a("a"),Bir=o("TFConvNextModel"),Iir=o(" (ConvNext model)"),qir=l(),tT=a("li"),s1e=a("strong"),Nir=o("ctrl"),jir=o(" \u2014 "),Zz=a("a"),Dir=o("TFCTRLModel"),Gir=o(" (CTRL model)"),Oir=l(),aT=a("li"),l1e=a("strong"),Vir=o("data2vec-vision"),Xir=o(" \u2014 "),eW=a("a"),zir=o("TFData2VecVisionModel"),Wir=o(" (Data2VecVision model)"),Qir=l(),nT=a("li"),i1e=a("strong"),Hir=o("deberta"),Uir=o(" \u2014 "),oW=a("a"),Jir=o("TFDebertaModel"),Yir=o(" (DeBERTa model)"),Kir=l(),sT=a("li"),d1e=a("strong"),Zir=o("deberta-v2"),edr=o(" \u2014 "),rW=a("a"),odr=o("TFDebertaV2Model"),rdr=o(" (DeBERTa-v2 model)"),tdr=l(),lT=a("li"),c1e=a("strong"),adr=o("distilbert"),ndr=o(" \u2014 "),tW=a("a"),sdr=o("TFDistilBertModel"),ldr=o(" (DistilBERT model)"),idr=l(),iT=a("li"),f1e=a("strong"),ddr=o("dpr"),cdr=o(" \u2014 "),aW=a("a"),fdr=o("TFDPRQuestionEncoder"),mdr=o(" (DPR model)"),gdr=l(),dT=a("li"),m1e=a("strong"),hdr=o("electra"),pdr=o(" \u2014 "),nW=a("a"),_dr=o("TFElectraModel"),udr=o(" (ELECTRA model)"),bdr=l(),cT=a("li"),g1e=a("strong"),vdr=o("flaubert"),Fdr=o(" \u2014 "),sW=a("a"),Tdr=o("TFFlaubertModel"),Mdr=o(" (FlauBERT model)"),Edr=l(),Bs=a("li"),h1e=a("strong"),Cdr=o("funnel"),wdr=o(" \u2014 "),lW=a("a"),Adr=o("TFFunnelModel"),ydr=o(" or "),iW=a("a"),Ldr=o("TFFunnelBaseModel"),xdr=o(" (Funnel Transformer model)"),$dr=l(),fT=a("li"),p1e=a("strong"),kdr=o("gpt2"),Sdr=o(" \u2014 "),dW=a("a"),Rdr=o("TFGPT2Model"),Pdr=o(" (OpenAI GPT-2 model)"),Bdr=l(),mT=a("li"),_1e=a("strong"),Idr=o("gptj"),qdr=o(" \u2014 "),cW=a("a"),Ndr=o("TFGPTJModel"),jdr=o(" (GPT-J model)"),Ddr=l(),gT=a("li"),u1e=a("strong"),Gdr=o("hubert"),Odr=o(" \u2014 "),fW=a("a"),Vdr=o("TFHubertModel"),Xdr=o(" (Hubert model)"),zdr=l(),hT=a("li"),b1e=a("strong"),Wdr=o("layoutlm"),Qdr=o(" \u2014 "),mW=a("a"),Hdr=o("TFLayoutLMModel"),Udr=o(" (LayoutLM model)"),Jdr=l(),pT=a("li"),v1e=a("strong"),Ydr=o("led"),Kdr=o(" \u2014 "),gW=a("a"),Zdr=o("TFLEDModel"),ecr=o(" (LED model)"),ocr=l(),_T=a("li"),F1e=a("strong"),rcr=o("longformer"),tcr=o(" \u2014 "),hW=a("a"),acr=o("TFLongformerModel"),ncr=o(" (Longformer model)"),scr=l(),uT=a("li"),T1e=a("strong"),lcr=o("lxmert"),icr=o(" \u2014 "),pW=a("a"),dcr=o("TFLxmertModel"),ccr=o(" (LXMERT model)"),fcr=l(),bT=a("li"),M1e=a("strong"),mcr=o("marian"),gcr=o(" \u2014 "),_W=a("a"),hcr=o("TFMarianModel"),pcr=o(" (Marian model)"),_cr=l(),vT=a("li"),E1e=a("strong"),ucr=o("mbart"),bcr=o(" \u2014 "),uW=a("a"),vcr=o("TFMBartModel"),Fcr=o(" (mBART model)"),Tcr=l(),FT=a("li"),C1e=a("strong"),Mcr=o("mobilebert"),Ecr=o(" \u2014 "),bW=a("a"),Ccr=o("TFMobileBertModel"),wcr=o(" (MobileBERT model)"),Acr=l(),TT=a("li"),w1e=a("strong"),ycr=o("mpnet"),Lcr=o(" \u2014 "),vW=a("a"),xcr=o("TFMPNetModel"),$cr=o(" (MPNet model)"),kcr=l(),MT=a("li"),A1e=a("strong"),Scr=o("mt5"),Rcr=o(" \u2014 "),FW=a("a"),Pcr=o("TFMT5Model"),Bcr=o(" (mT5 model)"),Icr=l(),ET=a("li"),y1e=a("strong"),qcr=o("openai-gpt"),Ncr=o(" \u2014 "),TW=a("a"),jcr=o("TFOpenAIGPTModel"),Dcr=o(" (OpenAI GPT model)"),Gcr=l(),CT=a("li"),L1e=a("strong"),Ocr=o("pegasus"),Vcr=o(" \u2014 "),MW=a("a"),Xcr=o("TFPegasusModel"),zcr=o(" (Pegasus model)"),Wcr=l(),wT=a("li"),x1e=a("strong"),Qcr=o("rembert"),Hcr=o(" \u2014 "),EW=a("a"),Ucr=o("TFRemBertModel"),Jcr=o(" (RemBERT model)"),Ycr=l(),AT=a("li"),$1e=a("strong"),Kcr=o("roberta"),Zcr=o(" \u2014 "),CW=a("a"),efr=o("TFRobertaModel"),ofr=o(" (RoBERTa model)"),rfr=l(),yT=a("li"),k1e=a("strong"),tfr=o("roformer"),afr=o(" \u2014 "),wW=a("a"),nfr=o("TFRoFormerModel"),sfr=o(" (RoFormer model)"),lfr=l(),LT=a("li"),S1e=a("strong"),ifr=o("speech_to_text"),dfr=o(" \u2014 "),AW=a("a"),cfr=o("TFSpeech2TextModel"),ffr=o(" (Speech2Text model)"),mfr=l(),xT=a("li"),R1e=a("strong"),gfr=o("swin"),hfr=o(" \u2014 "),yW=a("a"),pfr=o("TFSwinModel"),_fr=o(" (Swin model)"),ufr=l(),$T=a("li"),P1e=a("strong"),bfr=o("t5"),vfr=o(" \u2014 "),LW=a("a"),Ffr=o("TFT5Model"),Tfr=o(" (T5 model)"),Mfr=l(),kT=a("li"),B1e=a("strong"),Efr=o("tapas"),Cfr=o(" \u2014 "),xW=a("a"),wfr=o("TFTapasModel"),Afr=o(" (TAPAS model)"),yfr=l(),ST=a("li"),I1e=a("strong"),Lfr=o("transfo-xl"),xfr=o(" \u2014 "),$W=a("a"),$fr=o("TFTransfoXLModel"),kfr=o(" (Transformer-XL model)"),Sfr=l(),RT=a("li"),q1e=a("strong"),Rfr=o("vit"),Pfr=o(" \u2014 "),kW=a("a"),Bfr=o("TFViTModel"),Ifr=o(" (ViT model)"),qfr=l(),PT=a("li"),N1e=a("strong"),Nfr=o("vit_mae"),jfr=o(" \u2014 "),SW=a("a"),Dfr=o("TFViTMAEModel"),Gfr=o(" (ViTMAE model)"),Ofr=l(),BT=a("li"),j1e=a("strong"),Vfr=o("wav2vec2"),Xfr=o(" \u2014 "),RW=a("a"),zfr=o("TFWav2Vec2Model"),Wfr=o(" (Wav2Vec2 model)"),Qfr=l(),IT=a("li"),D1e=a("strong"),Hfr=o("xlm"),Ufr=o(" \u2014 "),PW=a("a"),Jfr=o("TFXLMModel"),Yfr=o(" (XLM model)"),Kfr=l(),qT=a("li"),G1e=a("strong"),Zfr=o("xlm-roberta"),emr=o(" \u2014 "),BW=a("a"),omr=o("TFXLMRobertaModel"),rmr=o(" (XLM-RoBERTa model)"),tmr=l(),NT=a("li"),O1e=a("strong"),amr=o("xlnet"),nmr=o(" \u2014 "),IW=a("a"),smr=o("TFXLNetModel"),lmr=o(" (XLNet model)"),imr=l(),F(jT.$$.fragment),ANe=l(),Xd=a("h2"),DT=a("a"),V1e=a("span"),F(nL.$$.fragment),dmr=l(),X1e=a("span"),cmr=o("TFAutoModelForPreTraining"),yNe=l(),Ko=a("div"),F(sL.$$.fragment),fmr=l(),zd=a("p"),mmr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),qW=a("a"),gmr=o("from_pretrained()"),hmr=o(" class method or the "),NW=a("a"),pmr=o("from_config()"),_mr=o(` class
method.`),umr=l(),lL=a("p"),bmr=o("This class cannot be instantiated directly using "),z1e=a("code"),vmr=o("__init__()"),Fmr=o(" (throws an error)."),Tmr=l(),xt=a("div"),F(iL.$$.fragment),Mmr=l(),W1e=a("p"),Emr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Cmr=l(),Wd=a("p"),wmr=o(`Note:
Loading a model from its configuration file does `),Q1e=a("strong"),Amr=o("not"),ymr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jW=a("a"),Lmr=o("from_pretrained()"),xmr=o(" to load the model weights."),$mr=l(),F(GT.$$.fragment),kmr=l(),Ar=a("div"),F(dL.$$.fragment),Smr=l(),H1e=a("p"),Rmr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Pmr=l(),Za=a("p"),Bmr=o("The model class to instantiate is selected based on the "),U1e=a("code"),Imr=o("model_type"),qmr=o(` property of the config object (either
passed as an argument or loaded from `),J1e=a("code"),Nmr=o("pretrained_model_name_or_path"),jmr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y1e=a("code"),Dmr=o("pretrained_model_name_or_path"),Gmr=o(":"),Omr=l(),se=a("ul"),OT=a("li"),K1e=a("strong"),Vmr=o("albert"),Xmr=o(" \u2014 "),DW=a("a"),zmr=o("TFAlbertForPreTraining"),Wmr=o(" (ALBERT model)"),Qmr=l(),VT=a("li"),Z1e=a("strong"),Hmr=o("bart"),Umr=o(" \u2014 "),GW=a("a"),Jmr=o("TFBartForConditionalGeneration"),Ymr=o(" (BART model)"),Kmr=l(),XT=a("li"),ebe=a("strong"),Zmr=o("bert"),egr=o(" \u2014 "),OW=a("a"),ogr=o("TFBertForPreTraining"),rgr=o(" (BERT model)"),tgr=l(),zT=a("li"),obe=a("strong"),agr=o("camembert"),ngr=o(" \u2014 "),VW=a("a"),sgr=o("TFCamembertForMaskedLM"),lgr=o(" (CamemBERT model)"),igr=l(),WT=a("li"),rbe=a("strong"),dgr=o("ctrl"),cgr=o(" \u2014 "),XW=a("a"),fgr=o("TFCTRLLMHeadModel"),mgr=o(" (CTRL model)"),ggr=l(),QT=a("li"),tbe=a("strong"),hgr=o("distilbert"),pgr=o(" \u2014 "),zW=a("a"),_gr=o("TFDistilBertForMaskedLM"),ugr=o(" (DistilBERT model)"),bgr=l(),HT=a("li"),abe=a("strong"),vgr=o("electra"),Fgr=o(" \u2014 "),WW=a("a"),Tgr=o("TFElectraForPreTraining"),Mgr=o(" (ELECTRA model)"),Egr=l(),UT=a("li"),nbe=a("strong"),Cgr=o("flaubert"),wgr=o(" \u2014 "),QW=a("a"),Agr=o("TFFlaubertWithLMHeadModel"),ygr=o(" (FlauBERT model)"),Lgr=l(),JT=a("li"),sbe=a("strong"),xgr=o("funnel"),$gr=o(" \u2014 "),HW=a("a"),kgr=o("TFFunnelForPreTraining"),Sgr=o(" (Funnel Transformer model)"),Rgr=l(),YT=a("li"),lbe=a("strong"),Pgr=o("gpt2"),Bgr=o(" \u2014 "),UW=a("a"),Igr=o("TFGPT2LMHeadModel"),qgr=o(" (OpenAI GPT-2 model)"),Ngr=l(),KT=a("li"),ibe=a("strong"),jgr=o("layoutlm"),Dgr=o(" \u2014 "),JW=a("a"),Ggr=o("TFLayoutLMForMaskedLM"),Ogr=o(" (LayoutLM model)"),Vgr=l(),ZT=a("li"),dbe=a("strong"),Xgr=o("lxmert"),zgr=o(" \u2014 "),YW=a("a"),Wgr=o("TFLxmertForPreTraining"),Qgr=o(" (LXMERT model)"),Hgr=l(),e7=a("li"),cbe=a("strong"),Ugr=o("mobilebert"),Jgr=o(" \u2014 "),KW=a("a"),Ygr=o("TFMobileBertForPreTraining"),Kgr=o(" (MobileBERT model)"),Zgr=l(),o7=a("li"),fbe=a("strong"),ehr=o("mpnet"),ohr=o(" \u2014 "),ZW=a("a"),rhr=o("TFMPNetForMaskedLM"),thr=o(" (MPNet model)"),ahr=l(),r7=a("li"),mbe=a("strong"),nhr=o("openai-gpt"),shr=o(" \u2014 "),eQ=a("a"),lhr=o("TFOpenAIGPTLMHeadModel"),ihr=o(" (OpenAI GPT model)"),dhr=l(),t7=a("li"),gbe=a("strong"),chr=o("roberta"),fhr=o(" \u2014 "),oQ=a("a"),mhr=o("TFRobertaForMaskedLM"),ghr=o(" (RoBERTa model)"),hhr=l(),a7=a("li"),hbe=a("strong"),phr=o("t5"),_hr=o(" \u2014 "),rQ=a("a"),uhr=o("TFT5ForConditionalGeneration"),bhr=o(" (T5 model)"),vhr=l(),n7=a("li"),pbe=a("strong"),Fhr=o("tapas"),Thr=o(" \u2014 "),tQ=a("a"),Mhr=o("TFTapasForMaskedLM"),Ehr=o(" (TAPAS model)"),Chr=l(),s7=a("li"),_be=a("strong"),whr=o("transfo-xl"),Ahr=o(" \u2014 "),aQ=a("a"),yhr=o("TFTransfoXLLMHeadModel"),Lhr=o(" (Transformer-XL model)"),xhr=l(),l7=a("li"),ube=a("strong"),$hr=o("vit_mae"),khr=o(" \u2014 "),nQ=a("a"),Shr=o("TFViTMAEForPreTraining"),Rhr=o(" (ViTMAE model)"),Phr=l(),i7=a("li"),bbe=a("strong"),Bhr=o("xlm"),Ihr=o(" \u2014 "),sQ=a("a"),qhr=o("TFXLMWithLMHeadModel"),Nhr=o(" (XLM model)"),jhr=l(),d7=a("li"),vbe=a("strong"),Dhr=o("xlm-roberta"),Ghr=o(" \u2014 "),lQ=a("a"),Ohr=o("TFXLMRobertaForMaskedLM"),Vhr=o(" (XLM-RoBERTa model)"),Xhr=l(),c7=a("li"),Fbe=a("strong"),zhr=o("xlnet"),Whr=o(" \u2014 "),iQ=a("a"),Qhr=o("TFXLNetLMHeadModel"),Hhr=o(" (XLNet model)"),Uhr=l(),F(f7.$$.fragment),LNe=l(),Qd=a("h2"),m7=a("a"),Tbe=a("span"),F(cL.$$.fragment),Jhr=l(),Mbe=a("span"),Yhr=o("TFAutoModelForCausalLM"),xNe=l(),Zo=a("div"),F(fL.$$.fragment),Khr=l(),Hd=a("p"),Zhr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),dQ=a("a"),epr=o("from_pretrained()"),opr=o(" class method or the "),cQ=a("a"),rpr=o("from_config()"),tpr=o(` class
method.`),apr=l(),mL=a("p"),npr=o("This class cannot be instantiated directly using "),Ebe=a("code"),spr=o("__init__()"),lpr=o(" (throws an error)."),ipr=l(),$t=a("div"),F(gL.$$.fragment),dpr=l(),Cbe=a("p"),cpr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),fpr=l(),Ud=a("p"),mpr=o(`Note:
Loading a model from its configuration file does `),wbe=a("strong"),gpr=o("not"),hpr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fQ=a("a"),ppr=o("from_pretrained()"),_pr=o(" to load the model weights."),upr=l(),F(g7.$$.fragment),bpr=l(),yr=a("div"),F(hL.$$.fragment),vpr=l(),Abe=a("p"),Fpr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Tpr=l(),en=a("p"),Mpr=o("The model class to instantiate is selected based on the "),ybe=a("code"),Epr=o("model_type"),Cpr=o(` property of the config object (either
passed as an argument or loaded from `),Lbe=a("code"),wpr=o("pretrained_model_name_or_path"),Apr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xbe=a("code"),ypr=o("pretrained_model_name_or_path"),Lpr=o(":"),xpr=l(),Me=a("ul"),h7=a("li"),$be=a("strong"),$pr=o("bert"),kpr=o(" \u2014 "),mQ=a("a"),Spr=o("TFBertLMHeadModel"),Rpr=o(" (BERT model)"),Ppr=l(),p7=a("li"),kbe=a("strong"),Bpr=o("camembert"),Ipr=o(" \u2014 "),gQ=a("a"),qpr=o("TFCamembertForCausalLM"),Npr=o(" (CamemBERT model)"),jpr=l(),_7=a("li"),Sbe=a("strong"),Dpr=o("ctrl"),Gpr=o(" \u2014 "),hQ=a("a"),Opr=o("TFCTRLLMHeadModel"),Vpr=o(" (CTRL model)"),Xpr=l(),u7=a("li"),Rbe=a("strong"),zpr=o("gpt2"),Wpr=o(" \u2014 "),pQ=a("a"),Qpr=o("TFGPT2LMHeadModel"),Hpr=o(" (OpenAI GPT-2 model)"),Upr=l(),b7=a("li"),Pbe=a("strong"),Jpr=o("gptj"),Ypr=o(" \u2014 "),_Q=a("a"),Kpr=o("TFGPTJForCausalLM"),Zpr=o(" (GPT-J model)"),e_r=l(),v7=a("li"),Bbe=a("strong"),o_r=o("openai-gpt"),r_r=o(" \u2014 "),uQ=a("a"),t_r=o("TFOpenAIGPTLMHeadModel"),a_r=o(" (OpenAI GPT model)"),n_r=l(),F7=a("li"),Ibe=a("strong"),s_r=o("rembert"),l_r=o(" \u2014 "),bQ=a("a"),i_r=o("TFRemBertForCausalLM"),d_r=o(" (RemBERT model)"),c_r=l(),T7=a("li"),qbe=a("strong"),f_r=o("roberta"),m_r=o(" \u2014 "),vQ=a("a"),g_r=o("TFRobertaForCausalLM"),h_r=o(" (RoBERTa model)"),p_r=l(),M7=a("li"),Nbe=a("strong"),__r=o("roformer"),u_r=o(" \u2014 "),FQ=a("a"),b_r=o("TFRoFormerForCausalLM"),v_r=o(" (RoFormer model)"),F_r=l(),E7=a("li"),jbe=a("strong"),T_r=o("transfo-xl"),M_r=o(" \u2014 "),TQ=a("a"),E_r=o("TFTransfoXLLMHeadModel"),C_r=o(" (Transformer-XL model)"),w_r=l(),C7=a("li"),Dbe=a("strong"),A_r=o("xlm"),y_r=o(" \u2014 "),MQ=a("a"),L_r=o("TFXLMWithLMHeadModel"),x_r=o(" (XLM model)"),$_r=l(),w7=a("li"),Gbe=a("strong"),k_r=o("xlnet"),S_r=o(" \u2014 "),EQ=a("a"),R_r=o("TFXLNetLMHeadModel"),P_r=o(" (XLNet model)"),B_r=l(),F(A7.$$.fragment),$Ne=l(),Jd=a("h2"),y7=a("a"),Obe=a("span"),F(pL.$$.fragment),I_r=l(),Vbe=a("span"),q_r=o("TFAutoModelForImageClassification"),kNe=l(),er=a("div"),F(_L.$$.fragment),N_r=l(),Yd=a("p"),j_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),CQ=a("a"),D_r=o("from_pretrained()"),G_r=o(" class method or the "),wQ=a("a"),O_r=o("from_config()"),V_r=o(` class
method.`),X_r=l(),uL=a("p"),z_r=o("This class cannot be instantiated directly using "),Xbe=a("code"),W_r=o("__init__()"),Q_r=o(" (throws an error)."),H_r=l(),kt=a("div"),F(bL.$$.fragment),U_r=l(),zbe=a("p"),J_r=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Y_r=l(),Kd=a("p"),K_r=o(`Note:
Loading a model from its configuration file does `),Wbe=a("strong"),Z_r=o("not"),eur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AQ=a("a"),our=o("from_pretrained()"),rur=o(" to load the model weights."),tur=l(),F(L7.$$.fragment),aur=l(),Lr=a("div"),F(vL.$$.fragment),nur=l(),Qbe=a("p"),sur=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),lur=l(),on=a("p"),iur=o("The model class to instantiate is selected based on the "),Hbe=a("code"),dur=o("model_type"),cur=o(` property of the config object (either
passed as an argument or loaded from `),Ube=a("code"),fur=o("pretrained_model_name_or_path"),mur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jbe=a("code"),gur=o("pretrained_model_name_or_path"),hur=o(":"),pur=l(),rn=a("ul"),x7=a("li"),Ybe=a("strong"),_ur=o("convnext"),uur=o(" \u2014 "),yQ=a("a"),bur=o("TFConvNextForImageClassification"),vur=o(" (ConvNext model)"),Fur=l(),$7=a("li"),Kbe=a("strong"),Tur=o("data2vec-vision"),Mur=o(" \u2014 "),LQ=a("a"),Eur=o("TFData2VecVisionForImageClassification"),Cur=o(" (Data2VecVision model)"),wur=l(),k7=a("li"),Zbe=a("strong"),Aur=o("swin"),yur=o(" \u2014 "),xQ=a("a"),Lur=o("TFSwinForImageClassification"),xur=o(" (Swin model)"),$ur=l(),S7=a("li"),e5e=a("strong"),kur=o("vit"),Sur=o(" \u2014 "),$Q=a("a"),Rur=o("TFViTForImageClassification"),Pur=o(" (ViT model)"),Bur=l(),F(R7.$$.fragment),SNe=l(),Zd=a("h2"),P7=a("a"),o5e=a("span"),F(FL.$$.fragment),Iur=l(),r5e=a("span"),qur=o("TFAutoModelForMaskedLM"),RNe=l(),or=a("div"),F(TL.$$.fragment),Nur=l(),ec=a("p"),jur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),kQ=a("a"),Dur=o("from_pretrained()"),Gur=o(" class method or the "),SQ=a("a"),Our=o("from_config()"),Vur=o(` class
method.`),Xur=l(),ML=a("p"),zur=o("This class cannot be instantiated directly using "),t5e=a("code"),Wur=o("__init__()"),Qur=o(" (throws an error)."),Hur=l(),St=a("div"),F(EL.$$.fragment),Uur=l(),a5e=a("p"),Jur=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Yur=l(),oc=a("p"),Kur=o(`Note:
Loading a model from its configuration file does `),n5e=a("strong"),Zur=o("not"),e2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RQ=a("a"),o2r=o("from_pretrained()"),r2r=o(" to load the model weights."),t2r=l(),F(B7.$$.fragment),a2r=l(),xr=a("div"),F(CL.$$.fragment),n2r=l(),s5e=a("p"),s2r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),l2r=l(),tn=a("p"),i2r=o("The model class to instantiate is selected based on the "),l5e=a("code"),d2r=o("model_type"),c2r=o(` property of the config object (either
passed as an argument or loaded from `),i5e=a("code"),f2r=o("pretrained_model_name_or_path"),m2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d5e=a("code"),g2r=o("pretrained_model_name_or_path"),h2r=o(":"),p2r=l(),ie=a("ul"),I7=a("li"),c5e=a("strong"),_2r=o("albert"),u2r=o(" \u2014 "),PQ=a("a"),b2r=o("TFAlbertForMaskedLM"),v2r=o(" (ALBERT model)"),F2r=l(),q7=a("li"),f5e=a("strong"),T2r=o("bert"),M2r=o(" \u2014 "),BQ=a("a"),E2r=o("TFBertForMaskedLM"),C2r=o(" (BERT model)"),w2r=l(),N7=a("li"),m5e=a("strong"),A2r=o("camembert"),y2r=o(" \u2014 "),IQ=a("a"),L2r=o("TFCamembertForMaskedLM"),x2r=o(" (CamemBERT model)"),$2r=l(),j7=a("li"),g5e=a("strong"),k2r=o("convbert"),S2r=o(" \u2014 "),qQ=a("a"),R2r=o("TFConvBertForMaskedLM"),P2r=o(" (ConvBERT model)"),B2r=l(),D7=a("li"),h5e=a("strong"),I2r=o("deberta"),q2r=o(" \u2014 "),NQ=a("a"),N2r=o("TFDebertaForMaskedLM"),j2r=o(" (DeBERTa model)"),D2r=l(),G7=a("li"),p5e=a("strong"),G2r=o("deberta-v2"),O2r=o(" \u2014 "),jQ=a("a"),V2r=o("TFDebertaV2ForMaskedLM"),X2r=o(" (DeBERTa-v2 model)"),z2r=l(),O7=a("li"),_5e=a("strong"),W2r=o("distilbert"),Q2r=o(" \u2014 "),DQ=a("a"),H2r=o("TFDistilBertForMaskedLM"),U2r=o(" (DistilBERT model)"),J2r=l(),V7=a("li"),u5e=a("strong"),Y2r=o("electra"),K2r=o(" \u2014 "),GQ=a("a"),Z2r=o("TFElectraForMaskedLM"),e1r=o(" (ELECTRA model)"),o1r=l(),X7=a("li"),b5e=a("strong"),r1r=o("flaubert"),t1r=o(" \u2014 "),OQ=a("a"),a1r=o("TFFlaubertWithLMHeadModel"),n1r=o(" (FlauBERT model)"),s1r=l(),z7=a("li"),v5e=a("strong"),l1r=o("funnel"),i1r=o(" \u2014 "),VQ=a("a"),d1r=o("TFFunnelForMaskedLM"),c1r=o(" (Funnel Transformer model)"),f1r=l(),W7=a("li"),F5e=a("strong"),m1r=o("layoutlm"),g1r=o(" \u2014 "),XQ=a("a"),h1r=o("TFLayoutLMForMaskedLM"),p1r=o(" (LayoutLM model)"),_1r=l(),Q7=a("li"),T5e=a("strong"),u1r=o("longformer"),b1r=o(" \u2014 "),zQ=a("a"),v1r=o("TFLongformerForMaskedLM"),F1r=o(" (Longformer model)"),T1r=l(),H7=a("li"),M5e=a("strong"),M1r=o("mobilebert"),E1r=o(" \u2014 "),WQ=a("a"),C1r=o("TFMobileBertForMaskedLM"),w1r=o(" (MobileBERT model)"),A1r=l(),U7=a("li"),E5e=a("strong"),y1r=o("mpnet"),L1r=o(" \u2014 "),QQ=a("a"),x1r=o("TFMPNetForMaskedLM"),$1r=o(" (MPNet model)"),k1r=l(),J7=a("li"),C5e=a("strong"),S1r=o("rembert"),R1r=o(" \u2014 "),HQ=a("a"),P1r=o("TFRemBertForMaskedLM"),B1r=o(" (RemBERT model)"),I1r=l(),Y7=a("li"),w5e=a("strong"),q1r=o("roberta"),N1r=o(" \u2014 "),UQ=a("a"),j1r=o("TFRobertaForMaskedLM"),D1r=o(" (RoBERTa model)"),G1r=l(),K7=a("li"),A5e=a("strong"),O1r=o("roformer"),V1r=o(" \u2014 "),JQ=a("a"),X1r=o("TFRoFormerForMaskedLM"),z1r=o(" (RoFormer model)"),W1r=l(),Z7=a("li"),y5e=a("strong"),Q1r=o("tapas"),H1r=o(" \u2014 "),YQ=a("a"),U1r=o("TFTapasForMaskedLM"),J1r=o(" (TAPAS model)"),Y1r=l(),eM=a("li"),L5e=a("strong"),K1r=o("xlm"),Z1r=o(" \u2014 "),KQ=a("a"),ebr=o("TFXLMWithLMHeadModel"),obr=o(" (XLM model)"),rbr=l(),oM=a("li"),x5e=a("strong"),tbr=o("xlm-roberta"),abr=o(" \u2014 "),ZQ=a("a"),nbr=o("TFXLMRobertaForMaskedLM"),sbr=o(" (XLM-RoBERTa model)"),lbr=l(),F(rM.$$.fragment),PNe=l(),rc=a("h2"),tM=a("a"),$5e=a("span"),F(wL.$$.fragment),ibr=l(),k5e=a("span"),dbr=o("TFAutoModelForSeq2SeqLM"),BNe=l(),rr=a("div"),F(AL.$$.fragment),cbr=l(),tc=a("p"),fbr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),eH=a("a"),mbr=o("from_pretrained()"),gbr=o(" class method or the "),oH=a("a"),hbr=o("from_config()"),pbr=o(` class
method.`),_br=l(),yL=a("p"),ubr=o("This class cannot be instantiated directly using "),S5e=a("code"),bbr=o("__init__()"),vbr=o(" (throws an error)."),Fbr=l(),Rt=a("div"),F(LL.$$.fragment),Tbr=l(),R5e=a("p"),Mbr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Ebr=l(),ac=a("p"),Cbr=o(`Note:
Loading a model from its configuration file does `),P5e=a("strong"),wbr=o("not"),Abr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rH=a("a"),ybr=o("from_pretrained()"),Lbr=o(" to load the model weights."),xbr=l(),F(aM.$$.fragment),$br=l(),$r=a("div"),F(xL.$$.fragment),kbr=l(),B5e=a("p"),Sbr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Rbr=l(),an=a("p"),Pbr=o("The model class to instantiate is selected based on the "),I5e=a("code"),Bbr=o("model_type"),Ibr=o(` property of the config object (either
passed as an argument or loaded from `),q5e=a("code"),qbr=o("pretrained_model_name_or_path"),Nbr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N5e=a("code"),jbr=o("pretrained_model_name_or_path"),Dbr=o(":"),Gbr=l(),ye=a("ul"),nM=a("li"),j5e=a("strong"),Obr=o("bart"),Vbr=o(" \u2014 "),tH=a("a"),Xbr=o("TFBartForConditionalGeneration"),zbr=o(" (BART model)"),Wbr=l(),sM=a("li"),D5e=a("strong"),Qbr=o("blenderbot"),Hbr=o(" \u2014 "),aH=a("a"),Ubr=o("TFBlenderbotForConditionalGeneration"),Jbr=o(" (Blenderbot model)"),Ybr=l(),lM=a("li"),G5e=a("strong"),Kbr=o("blenderbot-small"),Zbr=o(" \u2014 "),nH=a("a"),e5r=o("TFBlenderbotSmallForConditionalGeneration"),o5r=o(" (BlenderbotSmall model)"),r5r=l(),iM=a("li"),O5e=a("strong"),t5r=o("encoder-decoder"),a5r=o(" \u2014 "),sH=a("a"),n5r=o("TFEncoderDecoderModel"),s5r=o(" (Encoder decoder model)"),l5r=l(),dM=a("li"),V5e=a("strong"),i5r=o("led"),d5r=o(" \u2014 "),lH=a("a"),c5r=o("TFLEDForConditionalGeneration"),f5r=o(" (LED model)"),m5r=l(),cM=a("li"),X5e=a("strong"),g5r=o("marian"),h5r=o(" \u2014 "),iH=a("a"),p5r=o("TFMarianMTModel"),_5r=o(" (Marian model)"),u5r=l(),fM=a("li"),z5e=a("strong"),b5r=o("mbart"),v5r=o(" \u2014 "),dH=a("a"),F5r=o("TFMBartForConditionalGeneration"),T5r=o(" (mBART model)"),M5r=l(),mM=a("li"),W5e=a("strong"),E5r=o("mt5"),C5r=o(" \u2014 "),cH=a("a"),w5r=o("TFMT5ForConditionalGeneration"),A5r=o(" (mT5 model)"),y5r=l(),gM=a("li"),Q5e=a("strong"),L5r=o("pegasus"),x5r=o(" \u2014 "),fH=a("a"),$5r=o("TFPegasusForConditionalGeneration"),k5r=o(" (Pegasus model)"),S5r=l(),hM=a("li"),H5e=a("strong"),R5r=o("t5"),P5r=o(" \u2014 "),mH=a("a"),B5r=o("TFT5ForConditionalGeneration"),I5r=o(" (T5 model)"),q5r=l(),F(pM.$$.fragment),INe=l(),nc=a("h2"),_M=a("a"),U5e=a("span"),F($L.$$.fragment),N5r=l(),J5e=a("span"),j5r=o("TFAutoModelForSequenceClassification"),qNe=l(),tr=a("div"),F(kL.$$.fragment),D5r=l(),sc=a("p"),G5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),gH=a("a"),O5r=o("from_pretrained()"),V5r=o(" class method or the "),hH=a("a"),X5r=o("from_config()"),z5r=o(` class
method.`),W5r=l(),SL=a("p"),Q5r=o("This class cannot be instantiated directly using "),Y5e=a("code"),H5r=o("__init__()"),U5r=o(" (throws an error)."),J5r=l(),Pt=a("div"),F(RL.$$.fragment),Y5r=l(),K5e=a("p"),K5r=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Z5r=l(),lc=a("p"),evr=o(`Note:
Loading a model from its configuration file does `),Z5e=a("strong"),ovr=o("not"),rvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pH=a("a"),tvr=o("from_pretrained()"),avr=o(" to load the model weights."),nvr=l(),F(uM.$$.fragment),svr=l(),kr=a("div"),F(PL.$$.fragment),lvr=l(),eve=a("p"),ivr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),dvr=l(),nn=a("p"),cvr=o("The model class to instantiate is selected based on the "),ove=a("code"),fvr=o("model_type"),mvr=o(` property of the config object (either
passed as an argument or loaded from `),rve=a("code"),gvr=o("pretrained_model_name_or_path"),hvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tve=a("code"),pvr=o("pretrained_model_name_or_path"),_vr=o(":"),uvr=l(),oe=a("ul"),bM=a("li"),ave=a("strong"),bvr=o("albert"),vvr=o(" \u2014 "),_H=a("a"),Fvr=o("TFAlbertForSequenceClassification"),Tvr=o(" (ALBERT model)"),Mvr=l(),vM=a("li"),nve=a("strong"),Evr=o("bert"),Cvr=o(" \u2014 "),uH=a("a"),wvr=o("TFBertForSequenceClassification"),Avr=o(" (BERT model)"),yvr=l(),FM=a("li"),sve=a("strong"),Lvr=o("camembert"),xvr=o(" \u2014 "),bH=a("a"),$vr=o("TFCamembertForSequenceClassification"),kvr=o(" (CamemBERT model)"),Svr=l(),TM=a("li"),lve=a("strong"),Rvr=o("convbert"),Pvr=o(" \u2014 "),vH=a("a"),Bvr=o("TFConvBertForSequenceClassification"),Ivr=o(" (ConvBERT model)"),qvr=l(),MM=a("li"),ive=a("strong"),Nvr=o("ctrl"),jvr=o(" \u2014 "),FH=a("a"),Dvr=o("TFCTRLForSequenceClassification"),Gvr=o(" (CTRL model)"),Ovr=l(),EM=a("li"),dve=a("strong"),Vvr=o("deberta"),Xvr=o(" \u2014 "),TH=a("a"),zvr=o("TFDebertaForSequenceClassification"),Wvr=o(" (DeBERTa model)"),Qvr=l(),CM=a("li"),cve=a("strong"),Hvr=o("deberta-v2"),Uvr=o(" \u2014 "),MH=a("a"),Jvr=o("TFDebertaV2ForSequenceClassification"),Yvr=o(" (DeBERTa-v2 model)"),Kvr=l(),wM=a("li"),fve=a("strong"),Zvr=o("distilbert"),eFr=o(" \u2014 "),EH=a("a"),oFr=o("TFDistilBertForSequenceClassification"),rFr=o(" (DistilBERT model)"),tFr=l(),AM=a("li"),mve=a("strong"),aFr=o("electra"),nFr=o(" \u2014 "),CH=a("a"),sFr=o("TFElectraForSequenceClassification"),lFr=o(" (ELECTRA model)"),iFr=l(),yM=a("li"),gve=a("strong"),dFr=o("flaubert"),cFr=o(" \u2014 "),wH=a("a"),fFr=o("TFFlaubertForSequenceClassification"),mFr=o(" (FlauBERT model)"),gFr=l(),LM=a("li"),hve=a("strong"),hFr=o("funnel"),pFr=o(" \u2014 "),AH=a("a"),_Fr=o("TFFunnelForSequenceClassification"),uFr=o(" (Funnel Transformer model)"),bFr=l(),xM=a("li"),pve=a("strong"),vFr=o("gpt2"),FFr=o(" \u2014 "),yH=a("a"),TFr=o("TFGPT2ForSequenceClassification"),MFr=o(" (OpenAI GPT-2 model)"),EFr=l(),$M=a("li"),_ve=a("strong"),CFr=o("gptj"),wFr=o(" \u2014 "),LH=a("a"),AFr=o("TFGPTJForSequenceClassification"),yFr=o(" (GPT-J model)"),LFr=l(),kM=a("li"),uve=a("strong"),xFr=o("layoutlm"),$Fr=o(" \u2014 "),xH=a("a"),kFr=o("TFLayoutLMForSequenceClassification"),SFr=o(" (LayoutLM model)"),RFr=l(),SM=a("li"),bve=a("strong"),PFr=o("longformer"),BFr=o(" \u2014 "),$H=a("a"),IFr=o("TFLongformerForSequenceClassification"),qFr=o(" (Longformer model)"),NFr=l(),RM=a("li"),vve=a("strong"),jFr=o("mobilebert"),DFr=o(" \u2014 "),kH=a("a"),GFr=o("TFMobileBertForSequenceClassification"),OFr=o(" (MobileBERT model)"),VFr=l(),PM=a("li"),Fve=a("strong"),XFr=o("mpnet"),zFr=o(" \u2014 "),SH=a("a"),WFr=o("TFMPNetForSequenceClassification"),QFr=o(" (MPNet model)"),HFr=l(),BM=a("li"),Tve=a("strong"),UFr=o("openai-gpt"),JFr=o(" \u2014 "),RH=a("a"),YFr=o("TFOpenAIGPTForSequenceClassification"),KFr=o(" (OpenAI GPT model)"),ZFr=l(),IM=a("li"),Mve=a("strong"),e0r=o("rembert"),o0r=o(" \u2014 "),PH=a("a"),r0r=o("TFRemBertForSequenceClassification"),t0r=o(" (RemBERT model)"),a0r=l(),qM=a("li"),Eve=a("strong"),n0r=o("roberta"),s0r=o(" \u2014 "),BH=a("a"),l0r=o("TFRobertaForSequenceClassification"),i0r=o(" (RoBERTa model)"),d0r=l(),NM=a("li"),Cve=a("strong"),c0r=o("roformer"),f0r=o(" \u2014 "),IH=a("a"),m0r=o("TFRoFormerForSequenceClassification"),g0r=o(" (RoFormer model)"),h0r=l(),jM=a("li"),wve=a("strong"),p0r=o("tapas"),_0r=o(" \u2014 "),qH=a("a"),u0r=o("TFTapasForSequenceClassification"),b0r=o(" (TAPAS model)"),v0r=l(),DM=a("li"),Ave=a("strong"),F0r=o("transfo-xl"),T0r=o(" \u2014 "),NH=a("a"),M0r=o("TFTransfoXLForSequenceClassification"),E0r=o(" (Transformer-XL model)"),C0r=l(),GM=a("li"),yve=a("strong"),w0r=o("xlm"),A0r=o(" \u2014 "),jH=a("a"),y0r=o("TFXLMForSequenceClassification"),L0r=o(" (XLM model)"),x0r=l(),OM=a("li"),Lve=a("strong"),$0r=o("xlm-roberta"),k0r=o(" \u2014 "),DH=a("a"),S0r=o("TFXLMRobertaForSequenceClassification"),R0r=o(" (XLM-RoBERTa model)"),P0r=l(),VM=a("li"),xve=a("strong"),B0r=o("xlnet"),I0r=o(" \u2014 "),GH=a("a"),q0r=o("TFXLNetForSequenceClassification"),N0r=o(" (XLNet model)"),j0r=l(),F(XM.$$.fragment),NNe=l(),ic=a("h2"),zM=a("a"),$ve=a("span"),F(BL.$$.fragment),D0r=l(),kve=a("span"),G0r=o("TFAutoModelForMultipleChoice"),jNe=l(),ar=a("div"),F(IL.$$.fragment),O0r=l(),dc=a("p"),V0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),OH=a("a"),X0r=o("from_pretrained()"),z0r=o(" class method or the "),VH=a("a"),W0r=o("from_config()"),Q0r=o(` class
method.`),H0r=l(),qL=a("p"),U0r=o("This class cannot be instantiated directly using "),Sve=a("code"),J0r=o("__init__()"),Y0r=o(" (throws an error)."),K0r=l(),Bt=a("div"),F(NL.$$.fragment),Z0r=l(),Rve=a("p"),eTr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),oTr=l(),cc=a("p"),rTr=o(`Note:
Loading a model from its configuration file does `),Pve=a("strong"),tTr=o("not"),aTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XH=a("a"),nTr=o("from_pretrained()"),sTr=o(" to load the model weights."),lTr=l(),F(WM.$$.fragment),iTr=l(),Sr=a("div"),F(jL.$$.fragment),dTr=l(),Bve=a("p"),cTr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),fTr=l(),sn=a("p"),mTr=o("The model class to instantiate is selected based on the "),Ive=a("code"),gTr=o("model_type"),hTr=o(` property of the config object (either
passed as an argument or loaded from `),qve=a("code"),pTr=o("pretrained_model_name_or_path"),_Tr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nve=a("code"),uTr=o("pretrained_model_name_or_path"),bTr=o(":"),vTr=l(),he=a("ul"),QM=a("li"),jve=a("strong"),FTr=o("albert"),TTr=o(" \u2014 "),zH=a("a"),MTr=o("TFAlbertForMultipleChoice"),ETr=o(" (ALBERT model)"),CTr=l(),HM=a("li"),Dve=a("strong"),wTr=o("bert"),ATr=o(" \u2014 "),WH=a("a"),yTr=o("TFBertForMultipleChoice"),LTr=o(" (BERT model)"),xTr=l(),UM=a("li"),Gve=a("strong"),$Tr=o("camembert"),kTr=o(" \u2014 "),QH=a("a"),STr=o("TFCamembertForMultipleChoice"),RTr=o(" (CamemBERT model)"),PTr=l(),JM=a("li"),Ove=a("strong"),BTr=o("convbert"),ITr=o(" \u2014 "),HH=a("a"),qTr=o("TFConvBertForMultipleChoice"),NTr=o(" (ConvBERT model)"),jTr=l(),YM=a("li"),Vve=a("strong"),DTr=o("distilbert"),GTr=o(" \u2014 "),UH=a("a"),OTr=o("TFDistilBertForMultipleChoice"),VTr=o(" (DistilBERT model)"),XTr=l(),KM=a("li"),Xve=a("strong"),zTr=o("electra"),WTr=o(" \u2014 "),JH=a("a"),QTr=o("TFElectraForMultipleChoice"),HTr=o(" (ELECTRA model)"),UTr=l(),ZM=a("li"),zve=a("strong"),JTr=o("flaubert"),YTr=o(" \u2014 "),YH=a("a"),KTr=o("TFFlaubertForMultipleChoice"),ZTr=o(" (FlauBERT model)"),e7r=l(),e4=a("li"),Wve=a("strong"),o7r=o("funnel"),r7r=o(" \u2014 "),KH=a("a"),t7r=o("TFFunnelForMultipleChoice"),a7r=o(" (Funnel Transformer model)"),n7r=l(),o4=a("li"),Qve=a("strong"),s7r=o("longformer"),l7r=o(" \u2014 "),ZH=a("a"),i7r=o("TFLongformerForMultipleChoice"),d7r=o(" (Longformer model)"),c7r=l(),r4=a("li"),Hve=a("strong"),f7r=o("mobilebert"),m7r=o(" \u2014 "),eU=a("a"),g7r=o("TFMobileBertForMultipleChoice"),h7r=o(" (MobileBERT model)"),p7r=l(),t4=a("li"),Uve=a("strong"),_7r=o("mpnet"),u7r=o(" \u2014 "),oU=a("a"),b7r=o("TFMPNetForMultipleChoice"),v7r=o(" (MPNet model)"),F7r=l(),a4=a("li"),Jve=a("strong"),T7r=o("rembert"),M7r=o(" \u2014 "),rU=a("a"),E7r=o("TFRemBertForMultipleChoice"),C7r=o(" (RemBERT model)"),w7r=l(),n4=a("li"),Yve=a("strong"),A7r=o("roberta"),y7r=o(" \u2014 "),tU=a("a"),L7r=o("TFRobertaForMultipleChoice"),x7r=o(" (RoBERTa model)"),$7r=l(),s4=a("li"),Kve=a("strong"),k7r=o("roformer"),S7r=o(" \u2014 "),aU=a("a"),R7r=o("TFRoFormerForMultipleChoice"),P7r=o(" (RoFormer model)"),B7r=l(),l4=a("li"),Zve=a("strong"),I7r=o("xlm"),q7r=o(" \u2014 "),nU=a("a"),N7r=o("TFXLMForMultipleChoice"),j7r=o(" (XLM model)"),D7r=l(),i4=a("li"),eFe=a("strong"),G7r=o("xlm-roberta"),O7r=o(" \u2014 "),sU=a("a"),V7r=o("TFXLMRobertaForMultipleChoice"),X7r=o(" (XLM-RoBERTa model)"),z7r=l(),d4=a("li"),oFe=a("strong"),W7r=o("xlnet"),Q7r=o(" \u2014 "),lU=a("a"),H7r=o("TFXLNetForMultipleChoice"),U7r=o(" (XLNet model)"),J7r=l(),F(c4.$$.fragment),DNe=l(),fc=a("h2"),f4=a("a"),rFe=a("span"),F(DL.$$.fragment),Y7r=l(),tFe=a("span"),K7r=o("TFAutoModelForNextSentencePrediction"),GNe=l(),nr=a("div"),F(GL.$$.fragment),Z7r=l(),mc=a("p"),eMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),iU=a("a"),oMr=o("from_pretrained()"),rMr=o(" class method or the "),dU=a("a"),tMr=o("from_config()"),aMr=o(` class
method.`),nMr=l(),OL=a("p"),sMr=o("This class cannot be instantiated directly using "),aFe=a("code"),lMr=o("__init__()"),iMr=o(" (throws an error)."),dMr=l(),It=a("div"),F(VL.$$.fragment),cMr=l(),nFe=a("p"),fMr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),mMr=l(),gc=a("p"),gMr=o(`Note:
Loading a model from its configuration file does `),sFe=a("strong"),hMr=o("not"),pMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cU=a("a"),_Mr=o("from_pretrained()"),uMr=o(" to load the model weights."),bMr=l(),F(m4.$$.fragment),vMr=l(),Rr=a("div"),F(XL.$$.fragment),FMr=l(),lFe=a("p"),TMr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),MMr=l(),ln=a("p"),EMr=o("The model class to instantiate is selected based on the "),iFe=a("code"),CMr=o("model_type"),wMr=o(` property of the config object (either
passed as an argument or loaded from `),dFe=a("code"),AMr=o("pretrained_model_name_or_path"),yMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cFe=a("code"),LMr=o("pretrained_model_name_or_path"),xMr=o(":"),$Mr=l(),zL=a("ul"),g4=a("li"),fFe=a("strong"),kMr=o("bert"),SMr=o(" \u2014 "),fU=a("a"),RMr=o("TFBertForNextSentencePrediction"),PMr=o(" (BERT model)"),BMr=l(),h4=a("li"),mFe=a("strong"),IMr=o("mobilebert"),qMr=o(" \u2014 "),mU=a("a"),NMr=o("TFMobileBertForNextSentencePrediction"),jMr=o(" (MobileBERT model)"),DMr=l(),F(p4.$$.fragment),ONe=l(),hc=a("h2"),_4=a("a"),gFe=a("span"),F(WL.$$.fragment),GMr=l(),hFe=a("span"),OMr=o("TFAutoModelForTableQuestionAnswering"),VNe=l(),sr=a("div"),F(QL.$$.fragment),VMr=l(),pc=a("p"),XMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),gU=a("a"),zMr=o("from_pretrained()"),WMr=o(" class method or the "),hU=a("a"),QMr=o("from_config()"),HMr=o(` class
method.`),UMr=l(),HL=a("p"),JMr=o("This class cannot be instantiated directly using "),pFe=a("code"),YMr=o("__init__()"),KMr=o(" (throws an error)."),ZMr=l(),qt=a("div"),F(UL.$$.fragment),e4r=l(),_Fe=a("p"),o4r=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),r4r=l(),_c=a("p"),t4r=o(`Note:
Loading a model from its configuration file does `),uFe=a("strong"),a4r=o("not"),n4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pU=a("a"),s4r=o("from_pretrained()"),l4r=o(" to load the model weights."),i4r=l(),F(u4.$$.fragment),d4r=l(),Pr=a("div"),F(JL.$$.fragment),c4r=l(),bFe=a("p"),f4r=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),m4r=l(),dn=a("p"),g4r=o("The model class to instantiate is selected based on the "),vFe=a("code"),h4r=o("model_type"),p4r=o(` property of the config object (either
passed as an argument or loaded from `),FFe=a("code"),_4r=o("pretrained_model_name_or_path"),u4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),TFe=a("code"),b4r=o("pretrained_model_name_or_path"),v4r=o(":"),F4r=l(),MFe=a("ul"),b4=a("li"),EFe=a("strong"),T4r=o("tapas"),M4r=o(" \u2014 "),_U=a("a"),E4r=o("TFTapasForQuestionAnswering"),C4r=o(" (TAPAS model)"),w4r=l(),F(v4.$$.fragment),XNe=l(),uc=a("h2"),F4=a("a"),CFe=a("span"),F(YL.$$.fragment),A4r=l(),wFe=a("span"),y4r=o("TFAutoModelForTokenClassification"),zNe=l(),lr=a("div"),F(KL.$$.fragment),L4r=l(),bc=a("p"),x4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),uU=a("a"),$4r=o("from_pretrained()"),k4r=o(" class method or the "),bU=a("a"),S4r=o("from_config()"),R4r=o(` class
method.`),P4r=l(),ZL=a("p"),B4r=o("This class cannot be instantiated directly using "),AFe=a("code"),I4r=o("__init__()"),q4r=o(" (throws an error)."),N4r=l(),Nt=a("div"),F(e9.$$.fragment),j4r=l(),yFe=a("p"),D4r=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),G4r=l(),vc=a("p"),O4r=o(`Note:
Loading a model from its configuration file does `),LFe=a("strong"),V4r=o("not"),X4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vU=a("a"),z4r=o("from_pretrained()"),W4r=o(" to load the model weights."),Q4r=l(),F(T4.$$.fragment),H4r=l(),Br=a("div"),F(o9.$$.fragment),U4r=l(),xFe=a("p"),J4r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Y4r=l(),cn=a("p"),K4r=o("The model class to instantiate is selected based on the "),$Fe=a("code"),Z4r=o("model_type"),eEr=o(` property of the config object (either
passed as an argument or loaded from `),kFe=a("code"),oEr=o("pretrained_model_name_or_path"),rEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),SFe=a("code"),tEr=o("pretrained_model_name_or_path"),aEr=o(":"),nEr=l(),de=a("ul"),M4=a("li"),RFe=a("strong"),sEr=o("albert"),lEr=o(" \u2014 "),FU=a("a"),iEr=o("TFAlbertForTokenClassification"),dEr=o(" (ALBERT model)"),cEr=l(),E4=a("li"),PFe=a("strong"),fEr=o("bert"),mEr=o(" \u2014 "),TU=a("a"),gEr=o("TFBertForTokenClassification"),hEr=o(" (BERT model)"),pEr=l(),C4=a("li"),BFe=a("strong"),_Er=o("camembert"),uEr=o(" \u2014 "),MU=a("a"),bEr=o("TFCamembertForTokenClassification"),vEr=o(" (CamemBERT model)"),FEr=l(),w4=a("li"),IFe=a("strong"),TEr=o("convbert"),MEr=o(" \u2014 "),EU=a("a"),EEr=o("TFConvBertForTokenClassification"),CEr=o(" (ConvBERT model)"),wEr=l(),A4=a("li"),qFe=a("strong"),AEr=o("deberta"),yEr=o(" \u2014 "),CU=a("a"),LEr=o("TFDebertaForTokenClassification"),xEr=o(" (DeBERTa model)"),$Er=l(),y4=a("li"),NFe=a("strong"),kEr=o("deberta-v2"),SEr=o(" \u2014 "),wU=a("a"),REr=o("TFDebertaV2ForTokenClassification"),PEr=o(" (DeBERTa-v2 model)"),BEr=l(),L4=a("li"),jFe=a("strong"),IEr=o("distilbert"),qEr=o(" \u2014 "),AU=a("a"),NEr=o("TFDistilBertForTokenClassification"),jEr=o(" (DistilBERT model)"),DEr=l(),x4=a("li"),DFe=a("strong"),GEr=o("electra"),OEr=o(" \u2014 "),yU=a("a"),VEr=o("TFElectraForTokenClassification"),XEr=o(" (ELECTRA model)"),zEr=l(),$4=a("li"),GFe=a("strong"),WEr=o("flaubert"),QEr=o(" \u2014 "),LU=a("a"),HEr=o("TFFlaubertForTokenClassification"),UEr=o(" (FlauBERT model)"),JEr=l(),k4=a("li"),OFe=a("strong"),YEr=o("funnel"),KEr=o(" \u2014 "),xU=a("a"),ZEr=o("TFFunnelForTokenClassification"),eCr=o(" (Funnel Transformer model)"),oCr=l(),S4=a("li"),VFe=a("strong"),rCr=o("layoutlm"),tCr=o(" \u2014 "),$U=a("a"),aCr=o("TFLayoutLMForTokenClassification"),nCr=o(" (LayoutLM model)"),sCr=l(),R4=a("li"),XFe=a("strong"),lCr=o("longformer"),iCr=o(" \u2014 "),kU=a("a"),dCr=o("TFLongformerForTokenClassification"),cCr=o(" (Longformer model)"),fCr=l(),P4=a("li"),zFe=a("strong"),mCr=o("mobilebert"),gCr=o(" \u2014 "),SU=a("a"),hCr=o("TFMobileBertForTokenClassification"),pCr=o(" (MobileBERT model)"),_Cr=l(),B4=a("li"),WFe=a("strong"),uCr=o("mpnet"),bCr=o(" \u2014 "),RU=a("a"),vCr=o("TFMPNetForTokenClassification"),FCr=o(" (MPNet model)"),TCr=l(),I4=a("li"),QFe=a("strong"),MCr=o("rembert"),ECr=o(" \u2014 "),PU=a("a"),CCr=o("TFRemBertForTokenClassification"),wCr=o(" (RemBERT model)"),ACr=l(),q4=a("li"),HFe=a("strong"),yCr=o("roberta"),LCr=o(" \u2014 "),BU=a("a"),xCr=o("TFRobertaForTokenClassification"),$Cr=o(" (RoBERTa model)"),kCr=l(),N4=a("li"),UFe=a("strong"),SCr=o("roformer"),RCr=o(" \u2014 "),IU=a("a"),PCr=o("TFRoFormerForTokenClassification"),BCr=o(" (RoFormer model)"),ICr=l(),j4=a("li"),JFe=a("strong"),qCr=o("xlm"),NCr=o(" \u2014 "),qU=a("a"),jCr=o("TFXLMForTokenClassification"),DCr=o(" (XLM model)"),GCr=l(),D4=a("li"),YFe=a("strong"),OCr=o("xlm-roberta"),VCr=o(" \u2014 "),NU=a("a"),XCr=o("TFXLMRobertaForTokenClassification"),zCr=o(" (XLM-RoBERTa model)"),WCr=l(),G4=a("li"),KFe=a("strong"),QCr=o("xlnet"),HCr=o(" \u2014 "),jU=a("a"),UCr=o("TFXLNetForTokenClassification"),JCr=o(" (XLNet model)"),YCr=l(),F(O4.$$.fragment),WNe=l(),Fc=a("h2"),V4=a("a"),ZFe=a("span"),F(r9.$$.fragment),KCr=l(),e0e=a("span"),ZCr=o("TFAutoModelForQuestionAnswering"),QNe=l(),ir=a("div"),F(t9.$$.fragment),e3r=l(),Tc=a("p"),o3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),DU=a("a"),r3r=o("from_pretrained()"),t3r=o(" class method or the "),GU=a("a"),a3r=o("from_config()"),n3r=o(` class
method.`),s3r=l(),a9=a("p"),l3r=o("This class cannot be instantiated directly using "),o0e=a("code"),i3r=o("__init__()"),d3r=o(" (throws an error)."),c3r=l(),jt=a("div"),F(n9.$$.fragment),f3r=l(),r0e=a("p"),m3r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),g3r=l(),Mc=a("p"),h3r=o(`Note:
Loading a model from its configuration file does `),t0e=a("strong"),p3r=o("not"),_3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OU=a("a"),u3r=o("from_pretrained()"),b3r=o(" to load the model weights."),v3r=l(),F(X4.$$.fragment),F3r=l(),Ir=a("div"),F(s9.$$.fragment),T3r=l(),a0e=a("p"),M3r=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),E3r=l(),fn=a("p"),C3r=o("The model class to instantiate is selected based on the "),n0e=a("code"),w3r=o("model_type"),A3r=o(` property of the config object (either
passed as an argument or loaded from `),s0e=a("code"),y3r=o("pretrained_model_name_or_path"),L3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l0e=a("code"),x3r=o("pretrained_model_name_or_path"),$3r=o(":"),k3r=l(),ce=a("ul"),z4=a("li"),i0e=a("strong"),S3r=o("albert"),R3r=o(" \u2014 "),VU=a("a"),P3r=o("TFAlbertForQuestionAnswering"),B3r=o(" (ALBERT model)"),I3r=l(),W4=a("li"),d0e=a("strong"),q3r=o("bert"),N3r=o(" \u2014 "),XU=a("a"),j3r=o("TFBertForQuestionAnswering"),D3r=o(" (BERT model)"),G3r=l(),Q4=a("li"),c0e=a("strong"),O3r=o("camembert"),V3r=o(" \u2014 "),zU=a("a"),X3r=o("TFCamembertForQuestionAnswering"),z3r=o(" (CamemBERT model)"),W3r=l(),H4=a("li"),f0e=a("strong"),Q3r=o("convbert"),H3r=o(" \u2014 "),WU=a("a"),U3r=o("TFConvBertForQuestionAnswering"),J3r=o(" (ConvBERT model)"),Y3r=l(),U4=a("li"),m0e=a("strong"),K3r=o("deberta"),Z3r=o(" \u2014 "),QU=a("a"),ewr=o("TFDebertaForQuestionAnswering"),owr=o(" (DeBERTa model)"),rwr=l(),J4=a("li"),g0e=a("strong"),twr=o("deberta-v2"),awr=o(" \u2014 "),HU=a("a"),nwr=o("TFDebertaV2ForQuestionAnswering"),swr=o(" (DeBERTa-v2 model)"),lwr=l(),Y4=a("li"),h0e=a("strong"),iwr=o("distilbert"),dwr=o(" \u2014 "),UU=a("a"),cwr=o("TFDistilBertForQuestionAnswering"),fwr=o(" (DistilBERT model)"),mwr=l(),K4=a("li"),p0e=a("strong"),gwr=o("electra"),hwr=o(" \u2014 "),JU=a("a"),pwr=o("TFElectraForQuestionAnswering"),_wr=o(" (ELECTRA model)"),uwr=l(),Z4=a("li"),_0e=a("strong"),bwr=o("flaubert"),vwr=o(" \u2014 "),YU=a("a"),Fwr=o("TFFlaubertForQuestionAnsweringSimple"),Twr=o(" (FlauBERT model)"),Mwr=l(),eE=a("li"),u0e=a("strong"),Ewr=o("funnel"),Cwr=o(" \u2014 "),KU=a("a"),wwr=o("TFFunnelForQuestionAnswering"),Awr=o(" (Funnel Transformer model)"),ywr=l(),oE=a("li"),b0e=a("strong"),Lwr=o("gptj"),xwr=o(" \u2014 "),ZU=a("a"),$wr=o("TFGPTJForQuestionAnswering"),kwr=o(" (GPT-J model)"),Swr=l(),rE=a("li"),v0e=a("strong"),Rwr=o("longformer"),Pwr=o(" \u2014 "),eJ=a("a"),Bwr=o("TFLongformerForQuestionAnswering"),Iwr=o(" (Longformer model)"),qwr=l(),tE=a("li"),F0e=a("strong"),Nwr=o("mobilebert"),jwr=o(" \u2014 "),oJ=a("a"),Dwr=o("TFMobileBertForQuestionAnswering"),Gwr=o(" (MobileBERT model)"),Owr=l(),aE=a("li"),T0e=a("strong"),Vwr=o("mpnet"),Xwr=o(" \u2014 "),rJ=a("a"),zwr=o("TFMPNetForQuestionAnswering"),Wwr=o(" (MPNet model)"),Qwr=l(),nE=a("li"),M0e=a("strong"),Hwr=o("rembert"),Uwr=o(" \u2014 "),tJ=a("a"),Jwr=o("TFRemBertForQuestionAnswering"),Ywr=o(" (RemBERT model)"),Kwr=l(),sE=a("li"),E0e=a("strong"),Zwr=o("roberta"),e6r=o(" \u2014 "),aJ=a("a"),o6r=o("TFRobertaForQuestionAnswering"),r6r=o(" (RoBERTa model)"),t6r=l(),lE=a("li"),C0e=a("strong"),a6r=o("roformer"),n6r=o(" \u2014 "),nJ=a("a"),s6r=o("TFRoFormerForQuestionAnswering"),l6r=o(" (RoFormer model)"),i6r=l(),iE=a("li"),w0e=a("strong"),d6r=o("xlm"),c6r=o(" \u2014 "),sJ=a("a"),f6r=o("TFXLMForQuestionAnsweringSimple"),m6r=o(" (XLM model)"),g6r=l(),dE=a("li"),A0e=a("strong"),h6r=o("xlm-roberta"),p6r=o(" \u2014 "),lJ=a("a"),_6r=o("TFXLMRobertaForQuestionAnswering"),u6r=o(" (XLM-RoBERTa model)"),b6r=l(),cE=a("li"),y0e=a("strong"),v6r=o("xlnet"),F6r=o(" \u2014 "),iJ=a("a"),T6r=o("TFXLNetForQuestionAnsweringSimple"),M6r=o(" (XLNet model)"),E6r=l(),F(fE.$$.fragment),HNe=l(),Ec=a("h2"),mE=a("a"),L0e=a("span"),F(l9.$$.fragment),C6r=l(),x0e=a("span"),w6r=o("TFAutoModelForVision2Seq"),UNe=l(),dr=a("div"),F(i9.$$.fragment),A6r=l(),Cc=a("p"),y6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),dJ=a("a"),L6r=o("from_pretrained()"),x6r=o(" class method or the "),cJ=a("a"),$6r=o("from_config()"),k6r=o(` class
method.`),S6r=l(),d9=a("p"),R6r=o("This class cannot be instantiated directly using "),$0e=a("code"),P6r=o("__init__()"),B6r=o(" (throws an error)."),I6r=l(),Dt=a("div"),F(c9.$$.fragment),q6r=l(),k0e=a("p"),N6r=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),j6r=l(),wc=a("p"),D6r=o(`Note:
Loading a model from its configuration file does `),S0e=a("strong"),G6r=o("not"),O6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fJ=a("a"),V6r=o("from_pretrained()"),X6r=o(" to load the model weights."),z6r=l(),F(gE.$$.fragment),W6r=l(),qr=a("div"),F(f9.$$.fragment),Q6r=l(),R0e=a("p"),H6r=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),U6r=l(),mn=a("p"),J6r=o("The model class to instantiate is selected based on the "),P0e=a("code"),Y6r=o("model_type"),K6r=o(` property of the config object (either
passed as an argument or loaded from `),B0e=a("code"),Z6r=o("pretrained_model_name_or_path"),eAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I0e=a("code"),oAr=o("pretrained_model_name_or_path"),rAr=o(":"),tAr=l(),q0e=a("ul"),hE=a("li"),N0e=a("strong"),aAr=o("vision-encoder-decoder"),nAr=o(" \u2014 "),mJ=a("a"),sAr=o("TFVisionEncoderDecoderModel"),lAr=o(" (Vision Encoder decoder model)"),iAr=l(),F(pE.$$.fragment),JNe=l(),Ac=a("h2"),_E=a("a"),j0e=a("span"),F(m9.$$.fragment),dAr=l(),D0e=a("span"),cAr=o("TFAutoModelForSpeechSeq2Seq"),YNe=l(),cr=a("div"),F(g9.$$.fragment),fAr=l(),yc=a("p"),mAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),gJ=a("a"),gAr=o("from_pretrained()"),hAr=o(" class method or the "),hJ=a("a"),pAr=o("from_config()"),_Ar=o(` class
method.`),uAr=l(),h9=a("p"),bAr=o("This class cannot be instantiated directly using "),G0e=a("code"),vAr=o("__init__()"),FAr=o(" (throws an error)."),TAr=l(),Gt=a("div"),F(p9.$$.fragment),MAr=l(),O0e=a("p"),EAr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),CAr=l(),Lc=a("p"),wAr=o(`Note:
Loading a model from its configuration file does `),V0e=a("strong"),AAr=o("not"),yAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pJ=a("a"),LAr=o("from_pretrained()"),xAr=o(" to load the model weights."),$Ar=l(),F(uE.$$.fragment),kAr=l(),Nr=a("div"),F(_9.$$.fragment),SAr=l(),X0e=a("p"),RAr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),PAr=l(),gn=a("p"),BAr=o("The model class to instantiate is selected based on the "),z0e=a("code"),IAr=o("model_type"),qAr=o(` property of the config object (either
passed as an argument or loaded from `),W0e=a("code"),NAr=o("pretrained_model_name_or_path"),jAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q0e=a("code"),DAr=o("pretrained_model_name_or_path"),GAr=o(":"),OAr=l(),H0e=a("ul"),bE=a("li"),U0e=a("strong"),VAr=o("speech_to_text"),XAr=o(" \u2014 "),_J=a("a"),zAr=o("TFSpeech2TextForConditionalGeneration"),WAr=o(" (Speech2Text model)"),QAr=l(),F(vE.$$.fragment),KNe=l(),xc=a("h2"),FE=a("a"),J0e=a("span"),F(u9.$$.fragment),HAr=l(),Y0e=a("span"),UAr=o("FlaxAutoModel"),ZNe=l(),fr=a("div"),F(b9.$$.fragment),JAr=l(),$c=a("p"),YAr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),uJ=a("a"),KAr=o("from_pretrained()"),ZAr=o(" class method or the "),bJ=a("a"),eyr=o("from_config()"),oyr=o(` class
method.`),ryr=l(),v9=a("p"),tyr=o("This class cannot be instantiated directly using "),K0e=a("code"),ayr=o("__init__()"),nyr=o(" (throws an error)."),syr=l(),Ot=a("div"),F(F9.$$.fragment),lyr=l(),Z0e=a("p"),iyr=o("Instantiates one of the base model classes of the library from a configuration."),dyr=l(),kc=a("p"),cyr=o(`Note:
Loading a model from its configuration file does `),eTe=a("strong"),fyr=o("not"),myr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vJ=a("a"),gyr=o("from_pretrained()"),hyr=o(" to load the model weights."),pyr=l(),F(TE.$$.fragment),_yr=l(),jr=a("div"),F(T9.$$.fragment),uyr=l(),oTe=a("p"),byr=o("Instantiate one of the base model classes of the library from a pretrained model."),vyr=l(),hn=a("p"),Fyr=o("The model class to instantiate is selected based on the "),rTe=a("code"),Tyr=o("model_type"),Myr=o(` property of the config object (either
passed as an argument or loaded from `),tTe=a("code"),Eyr=o("pretrained_model_name_or_path"),Cyr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aTe=a("code"),wyr=o("pretrained_model_name_or_path"),Ayr=o(":"),yyr=l(),te=a("ul"),ME=a("li"),nTe=a("strong"),Lyr=o("albert"),xyr=o(" \u2014 "),FJ=a("a"),$yr=o("FlaxAlbertModel"),kyr=o(" (ALBERT model)"),Syr=l(),EE=a("li"),sTe=a("strong"),Ryr=o("bart"),Pyr=o(" \u2014 "),TJ=a("a"),Byr=o("FlaxBartModel"),Iyr=o(" (BART model)"),qyr=l(),CE=a("li"),lTe=a("strong"),Nyr=o("beit"),jyr=o(" \u2014 "),MJ=a("a"),Dyr=o("FlaxBeitModel"),Gyr=o(" (BEiT model)"),Oyr=l(),wE=a("li"),iTe=a("strong"),Vyr=o("bert"),Xyr=o(" \u2014 "),EJ=a("a"),zyr=o("FlaxBertModel"),Wyr=o(" (BERT model)"),Qyr=l(),AE=a("li"),dTe=a("strong"),Hyr=o("big_bird"),Uyr=o(" \u2014 "),CJ=a("a"),Jyr=o("FlaxBigBirdModel"),Yyr=o(" (BigBird model)"),Kyr=l(),yE=a("li"),cTe=a("strong"),Zyr=o("blenderbot"),e8r=o(" \u2014 "),wJ=a("a"),o8r=o("FlaxBlenderbotModel"),r8r=o(" (Blenderbot model)"),t8r=l(),LE=a("li"),fTe=a("strong"),a8r=o("blenderbot-small"),n8r=o(" \u2014 "),AJ=a("a"),s8r=o("FlaxBlenderbotSmallModel"),l8r=o(" (BlenderbotSmall model)"),i8r=l(),xE=a("li"),mTe=a("strong"),d8r=o("clip"),c8r=o(" \u2014 "),yJ=a("a"),f8r=o("FlaxCLIPModel"),m8r=o(" (CLIP model)"),g8r=l(),$E=a("li"),gTe=a("strong"),h8r=o("distilbert"),p8r=o(" \u2014 "),LJ=a("a"),_8r=o("FlaxDistilBertModel"),u8r=o(" (DistilBERT model)"),b8r=l(),kE=a("li"),hTe=a("strong"),v8r=o("electra"),F8r=o(" \u2014 "),xJ=a("a"),T8r=o("FlaxElectraModel"),M8r=o(" (ELECTRA model)"),E8r=l(),SE=a("li"),pTe=a("strong"),C8r=o("gpt2"),w8r=o(" \u2014 "),$J=a("a"),A8r=o("FlaxGPT2Model"),y8r=o(" (OpenAI GPT-2 model)"),L8r=l(),RE=a("li"),_Te=a("strong"),x8r=o("gpt_neo"),$8r=o(" \u2014 "),kJ=a("a"),k8r=o("FlaxGPTNeoModel"),S8r=o(" (GPT Neo model)"),R8r=l(),PE=a("li"),uTe=a("strong"),P8r=o("gptj"),B8r=o(" \u2014 "),SJ=a("a"),I8r=o("FlaxGPTJModel"),q8r=o(" (GPT-J model)"),N8r=l(),BE=a("li"),bTe=a("strong"),j8r=o("marian"),D8r=o(" \u2014 "),RJ=a("a"),G8r=o("FlaxMarianModel"),O8r=o(" (Marian model)"),V8r=l(),IE=a("li"),vTe=a("strong"),X8r=o("mbart"),z8r=o(" \u2014 "),PJ=a("a"),W8r=o("FlaxMBartModel"),Q8r=o(" (mBART model)"),H8r=l(),qE=a("li"),FTe=a("strong"),U8r=o("mt5"),J8r=o(" \u2014 "),BJ=a("a"),Y8r=o("FlaxMT5Model"),K8r=o(" (mT5 model)"),Z8r=l(),NE=a("li"),TTe=a("strong"),eLr=o("pegasus"),oLr=o(" \u2014 "),IJ=a("a"),rLr=o("FlaxPegasusModel"),tLr=o(" (Pegasus model)"),aLr=l(),jE=a("li"),MTe=a("strong"),nLr=o("roberta"),sLr=o(" \u2014 "),qJ=a("a"),lLr=o("FlaxRobertaModel"),iLr=o(" (RoBERTa model)"),dLr=l(),DE=a("li"),ETe=a("strong"),cLr=o("roformer"),fLr=o(" \u2014 "),NJ=a("a"),mLr=o("FlaxRoFormerModel"),gLr=o(" (RoFormer model)"),hLr=l(),GE=a("li"),CTe=a("strong"),pLr=o("t5"),_Lr=o(" \u2014 "),jJ=a("a"),uLr=o("FlaxT5Model"),bLr=o(" (T5 model)"),vLr=l(),OE=a("li"),wTe=a("strong"),FLr=o("vision-text-dual-encoder"),TLr=o(" \u2014 "),DJ=a("a"),MLr=o("FlaxVisionTextDualEncoderModel"),ELr=o(" (VisionTextDualEncoder model)"),CLr=l(),VE=a("li"),ATe=a("strong"),wLr=o("vit"),ALr=o(" \u2014 "),GJ=a("a"),yLr=o("FlaxViTModel"),LLr=o(" (ViT model)"),xLr=l(),XE=a("li"),yTe=a("strong"),$Lr=o("wav2vec2"),kLr=o(" \u2014 "),OJ=a("a"),SLr=o("FlaxWav2Vec2Model"),RLr=o(" (Wav2Vec2 model)"),PLr=l(),zE=a("li"),LTe=a("strong"),BLr=o("xglm"),ILr=o(" \u2014 "),VJ=a("a"),qLr=o("FlaxXGLMModel"),NLr=o(" (XGLM model)"),jLr=l(),WE=a("li"),xTe=a("strong"),DLr=o("xlm-roberta"),GLr=o(" \u2014 "),XJ=a("a"),OLr=o("FlaxXLMRobertaModel"),VLr=o(" (XLM-RoBERTa model)"),XLr=l(),F(QE.$$.fragment),eje=l(),Sc=a("h2"),HE=a("a"),$Te=a("span"),F(M9.$$.fragment),zLr=l(),kTe=a("span"),WLr=o("FlaxAutoModelForCausalLM"),oje=l(),mr=a("div"),F(E9.$$.fragment),QLr=l(),Rc=a("p"),HLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),zJ=a("a"),ULr=o("from_pretrained()"),JLr=o(" class method or the "),WJ=a("a"),YLr=o("from_config()"),KLr=o(` class
method.`),ZLr=l(),C9=a("p"),e9r=o("This class cannot be instantiated directly using "),STe=a("code"),o9r=o("__init__()"),r9r=o(" (throws an error)."),t9r=l(),Vt=a("div"),F(w9.$$.fragment),a9r=l(),RTe=a("p"),n9r=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),s9r=l(),Pc=a("p"),l9r=o(`Note:
Loading a model from its configuration file does `),PTe=a("strong"),i9r=o("not"),d9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QJ=a("a"),c9r=o("from_pretrained()"),f9r=o(" to load the model weights."),m9r=l(),F(UE.$$.fragment),g9r=l(),Dr=a("div"),F(A9.$$.fragment),h9r=l(),BTe=a("p"),p9r=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),_9r=l(),pn=a("p"),u9r=o("The model class to instantiate is selected based on the "),ITe=a("code"),b9r=o("model_type"),v9r=o(` property of the config object (either
passed as an argument or loaded from `),qTe=a("code"),F9r=o("pretrained_model_name_or_path"),T9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),NTe=a("code"),M9r=o("pretrained_model_name_or_path"),E9r=o(":"),C9r=l(),Re=a("ul"),JE=a("li"),jTe=a("strong"),w9r=o("bart"),A9r=o(" \u2014 "),HJ=a("a"),y9r=o("FlaxBartForCausalLM"),L9r=o(" (BART model)"),x9r=l(),YE=a("li"),DTe=a("strong"),$9r=o("bert"),k9r=o(" \u2014 "),UJ=a("a"),S9r=o("FlaxBertForCausalLM"),R9r=o(" (BERT model)"),P9r=l(),KE=a("li"),GTe=a("strong"),B9r=o("big_bird"),I9r=o(" \u2014 "),JJ=a("a"),q9r=o("FlaxBigBirdForCausalLM"),N9r=o(" (BigBird model)"),j9r=l(),ZE=a("li"),OTe=a("strong"),D9r=o("electra"),G9r=o(" \u2014 "),YJ=a("a"),O9r=o("FlaxElectraForCausalLM"),V9r=o(" (ELECTRA model)"),X9r=l(),eC=a("li"),VTe=a("strong"),z9r=o("gpt2"),W9r=o(" \u2014 "),KJ=a("a"),Q9r=o("FlaxGPT2LMHeadModel"),H9r=o(" (OpenAI GPT-2 model)"),U9r=l(),oC=a("li"),XTe=a("strong"),J9r=o("gpt_neo"),Y9r=o(" \u2014 "),ZJ=a("a"),K9r=o("FlaxGPTNeoForCausalLM"),Z9r=o(" (GPT Neo model)"),exr=l(),rC=a("li"),zTe=a("strong"),oxr=o("gptj"),rxr=o(" \u2014 "),eY=a("a"),txr=o("FlaxGPTJForCausalLM"),axr=o(" (GPT-J model)"),nxr=l(),tC=a("li"),WTe=a("strong"),sxr=o("roberta"),lxr=o(" \u2014 "),oY=a("a"),ixr=o("FlaxRobertaForCausalLM"),dxr=o(" (RoBERTa model)"),cxr=l(),aC=a("li"),QTe=a("strong"),fxr=o("xglm"),mxr=o(" \u2014 "),rY=a("a"),gxr=o("FlaxXGLMForCausalLM"),hxr=o(" (XGLM model)"),pxr=l(),F(nC.$$.fragment),rje=l(),Bc=a("h2"),sC=a("a"),HTe=a("span"),F(y9.$$.fragment),_xr=l(),UTe=a("span"),uxr=o("FlaxAutoModelForPreTraining"),tje=l(),gr=a("div"),F(L9.$$.fragment),bxr=l(),Ic=a("p"),vxr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),tY=a("a"),Fxr=o("from_pretrained()"),Txr=o(" class method or the "),aY=a("a"),Mxr=o("from_config()"),Exr=o(` class
method.`),Cxr=l(),x9=a("p"),wxr=o("This class cannot be instantiated directly using "),JTe=a("code"),Axr=o("__init__()"),yxr=o(" (throws an error)."),Lxr=l(),Xt=a("div"),F($9.$$.fragment),xxr=l(),YTe=a("p"),$xr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),kxr=l(),qc=a("p"),Sxr=o(`Note:
Loading a model from its configuration file does `),KTe=a("strong"),Rxr=o("not"),Pxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nY=a("a"),Bxr=o("from_pretrained()"),Ixr=o(" to load the model weights."),qxr=l(),F(lC.$$.fragment),Nxr=l(),Gr=a("div"),F(k9.$$.fragment),jxr=l(),ZTe=a("p"),Dxr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Gxr=l(),_n=a("p"),Oxr=o("The model class to instantiate is selected based on the "),e7e=a("code"),Vxr=o("model_type"),Xxr=o(` property of the config object (either
passed as an argument or loaded from `),o7e=a("code"),zxr=o("pretrained_model_name_or_path"),Wxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r7e=a("code"),Qxr=o("pretrained_model_name_or_path"),Hxr=o(":"),Uxr=l(),Ee=a("ul"),iC=a("li"),t7e=a("strong"),Jxr=o("albert"),Yxr=o(" \u2014 "),sY=a("a"),Kxr=o("FlaxAlbertForPreTraining"),Zxr=o(" (ALBERT model)"),e$r=l(),dC=a("li"),a7e=a("strong"),o$r=o("bart"),r$r=o(" \u2014 "),lY=a("a"),t$r=o("FlaxBartForConditionalGeneration"),a$r=o(" (BART model)"),n$r=l(),cC=a("li"),n7e=a("strong"),s$r=o("bert"),l$r=o(" \u2014 "),iY=a("a"),i$r=o("FlaxBertForPreTraining"),d$r=o(" (BERT model)"),c$r=l(),fC=a("li"),s7e=a("strong"),f$r=o("big_bird"),m$r=o(" \u2014 "),dY=a("a"),g$r=o("FlaxBigBirdForPreTraining"),h$r=o(" (BigBird model)"),p$r=l(),mC=a("li"),l7e=a("strong"),_$r=o("electra"),u$r=o(" \u2014 "),cY=a("a"),b$r=o("FlaxElectraForPreTraining"),v$r=o(" (ELECTRA model)"),F$r=l(),gC=a("li"),i7e=a("strong"),T$r=o("mbart"),M$r=o(" \u2014 "),fY=a("a"),E$r=o("FlaxMBartForConditionalGeneration"),C$r=o(" (mBART model)"),w$r=l(),hC=a("li"),d7e=a("strong"),A$r=o("mt5"),y$r=o(" \u2014 "),mY=a("a"),L$r=o("FlaxMT5ForConditionalGeneration"),x$r=o(" (mT5 model)"),$$r=l(),pC=a("li"),c7e=a("strong"),k$r=o("roberta"),S$r=o(" \u2014 "),gY=a("a"),R$r=o("FlaxRobertaForMaskedLM"),P$r=o(" (RoBERTa model)"),B$r=l(),_C=a("li"),f7e=a("strong"),I$r=o("roformer"),q$r=o(" \u2014 "),hY=a("a"),N$r=o("FlaxRoFormerForMaskedLM"),j$r=o(" (RoFormer model)"),D$r=l(),uC=a("li"),m7e=a("strong"),G$r=o("t5"),O$r=o(" \u2014 "),pY=a("a"),V$r=o("FlaxT5ForConditionalGeneration"),X$r=o(" (T5 model)"),z$r=l(),bC=a("li"),g7e=a("strong"),W$r=o("wav2vec2"),Q$r=o(" \u2014 "),_Y=a("a"),H$r=o("FlaxWav2Vec2ForPreTraining"),U$r=o(" (Wav2Vec2 model)"),J$r=l(),vC=a("li"),h7e=a("strong"),Y$r=o("xlm-roberta"),K$r=o(" \u2014 "),uY=a("a"),Z$r=o("FlaxXLMRobertaForMaskedLM"),ekr=o(" (XLM-RoBERTa model)"),okr=l(),F(FC.$$.fragment),aje=l(),Nc=a("h2"),TC=a("a"),p7e=a("span"),F(S9.$$.fragment),rkr=l(),_7e=a("span"),tkr=o("FlaxAutoModelForMaskedLM"),nje=l(),hr=a("div"),F(R9.$$.fragment),akr=l(),jc=a("p"),nkr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),bY=a("a"),skr=o("from_pretrained()"),lkr=o(" class method or the "),vY=a("a"),ikr=o("from_config()"),dkr=o(` class
method.`),ckr=l(),P9=a("p"),fkr=o("This class cannot be instantiated directly using "),u7e=a("code"),mkr=o("__init__()"),gkr=o(" (throws an error)."),hkr=l(),zt=a("div"),F(B9.$$.fragment),pkr=l(),b7e=a("p"),_kr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),ukr=l(),Dc=a("p"),bkr=o(`Note:
Loading a model from its configuration file does `),v7e=a("strong"),vkr=o("not"),Fkr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FY=a("a"),Tkr=o("from_pretrained()"),Mkr=o(" to load the model weights."),Ekr=l(),F(MC.$$.fragment),Ckr=l(),Or=a("div"),F(I9.$$.fragment),wkr=l(),F7e=a("p"),Akr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),ykr=l(),un=a("p"),Lkr=o("The model class to instantiate is selected based on the "),T7e=a("code"),xkr=o("model_type"),$kr=o(` property of the config object (either
passed as an argument or loaded from `),M7e=a("code"),kkr=o("pretrained_model_name_or_path"),Skr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E7e=a("code"),Rkr=o("pretrained_model_name_or_path"),Pkr=o(":"),Bkr=l(),Le=a("ul"),EC=a("li"),C7e=a("strong"),Ikr=o("albert"),qkr=o(" \u2014 "),TY=a("a"),Nkr=o("FlaxAlbertForMaskedLM"),jkr=o(" (ALBERT model)"),Dkr=l(),CC=a("li"),w7e=a("strong"),Gkr=o("bart"),Okr=o(" \u2014 "),MY=a("a"),Vkr=o("FlaxBartForConditionalGeneration"),Xkr=o(" (BART model)"),zkr=l(),wC=a("li"),A7e=a("strong"),Wkr=o("bert"),Qkr=o(" \u2014 "),EY=a("a"),Hkr=o("FlaxBertForMaskedLM"),Ukr=o(" (BERT model)"),Jkr=l(),AC=a("li"),y7e=a("strong"),Ykr=o("big_bird"),Kkr=o(" \u2014 "),CY=a("a"),Zkr=o("FlaxBigBirdForMaskedLM"),eSr=o(" (BigBird model)"),oSr=l(),yC=a("li"),L7e=a("strong"),rSr=o("distilbert"),tSr=o(" \u2014 "),wY=a("a"),aSr=o("FlaxDistilBertForMaskedLM"),nSr=o(" (DistilBERT model)"),sSr=l(),LC=a("li"),x7e=a("strong"),lSr=o("electra"),iSr=o(" \u2014 "),AY=a("a"),dSr=o("FlaxElectraForMaskedLM"),cSr=o(" (ELECTRA model)"),fSr=l(),xC=a("li"),$7e=a("strong"),mSr=o("mbart"),gSr=o(" \u2014 "),yY=a("a"),hSr=o("FlaxMBartForConditionalGeneration"),pSr=o(" (mBART model)"),_Sr=l(),$C=a("li"),k7e=a("strong"),uSr=o("roberta"),bSr=o(" \u2014 "),LY=a("a"),vSr=o("FlaxRobertaForMaskedLM"),FSr=o(" (RoBERTa model)"),TSr=l(),kC=a("li"),S7e=a("strong"),MSr=o("roformer"),ESr=o(" \u2014 "),xY=a("a"),CSr=o("FlaxRoFormerForMaskedLM"),wSr=o(" (RoFormer model)"),ASr=l(),SC=a("li"),R7e=a("strong"),ySr=o("xlm-roberta"),LSr=o(" \u2014 "),$Y=a("a"),xSr=o("FlaxXLMRobertaForMaskedLM"),$Sr=o(" (XLM-RoBERTa model)"),kSr=l(),F(RC.$$.fragment),sje=l(),Gc=a("h2"),PC=a("a"),P7e=a("span"),F(q9.$$.fragment),SSr=l(),B7e=a("span"),RSr=o("FlaxAutoModelForSeq2SeqLM"),lje=l(),pr=a("div"),F(N9.$$.fragment),PSr=l(),Oc=a("p"),BSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),kY=a("a"),ISr=o("from_pretrained()"),qSr=o(" class method or the "),SY=a("a"),NSr=o("from_config()"),jSr=o(` class
method.`),DSr=l(),j9=a("p"),GSr=o("This class cannot be instantiated directly using "),I7e=a("code"),OSr=o("__init__()"),VSr=o(" (throws an error)."),XSr=l(),Wt=a("div"),F(D9.$$.fragment),zSr=l(),q7e=a("p"),WSr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),QSr=l(),Vc=a("p"),HSr=o(`Note:
Loading a model from its configuration file does `),N7e=a("strong"),USr=o("not"),JSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RY=a("a"),YSr=o("from_pretrained()"),KSr=o(" to load the model weights."),ZSr=l(),F(BC.$$.fragment),eRr=l(),Vr=a("div"),F(G9.$$.fragment),oRr=l(),j7e=a("p"),rRr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),tRr=l(),bn=a("p"),aRr=o("The model class to instantiate is selected based on the "),D7e=a("code"),nRr=o("model_type"),sRr=o(` property of the config object (either
passed as an argument or loaded from `),G7e=a("code"),lRr=o("pretrained_model_name_or_path"),iRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O7e=a("code"),dRr=o("pretrained_model_name_or_path"),cRr=o(":"),fRr=l(),Pe=a("ul"),IC=a("li"),V7e=a("strong"),mRr=o("bart"),gRr=o(" \u2014 "),PY=a("a"),hRr=o("FlaxBartForConditionalGeneration"),pRr=o(" (BART model)"),_Rr=l(),qC=a("li"),X7e=a("strong"),uRr=o("blenderbot"),bRr=o(" \u2014 "),BY=a("a"),vRr=o("FlaxBlenderbotForConditionalGeneration"),FRr=o(" (Blenderbot model)"),TRr=l(),NC=a("li"),z7e=a("strong"),MRr=o("blenderbot-small"),ERr=o(" \u2014 "),IY=a("a"),CRr=o("FlaxBlenderbotSmallForConditionalGeneration"),wRr=o(" (BlenderbotSmall model)"),ARr=l(),jC=a("li"),W7e=a("strong"),yRr=o("encoder-decoder"),LRr=o(" \u2014 "),qY=a("a"),xRr=o("FlaxEncoderDecoderModel"),$Rr=o(" (Encoder decoder model)"),kRr=l(),DC=a("li"),Q7e=a("strong"),SRr=o("marian"),RRr=o(" \u2014 "),NY=a("a"),PRr=o("FlaxMarianMTModel"),BRr=o(" (Marian model)"),IRr=l(),GC=a("li"),H7e=a("strong"),qRr=o("mbart"),NRr=o(" \u2014 "),jY=a("a"),jRr=o("FlaxMBartForConditionalGeneration"),DRr=o(" (mBART model)"),GRr=l(),OC=a("li"),U7e=a("strong"),ORr=o("mt5"),VRr=o(" \u2014 "),DY=a("a"),XRr=o("FlaxMT5ForConditionalGeneration"),zRr=o(" (mT5 model)"),WRr=l(),VC=a("li"),J7e=a("strong"),QRr=o("pegasus"),HRr=o(" \u2014 "),GY=a("a"),URr=o("FlaxPegasusForConditionalGeneration"),JRr=o(" (Pegasus model)"),YRr=l(),XC=a("li"),Y7e=a("strong"),KRr=o("t5"),ZRr=o(" \u2014 "),OY=a("a"),ePr=o("FlaxT5ForConditionalGeneration"),oPr=o(" (T5 model)"),rPr=l(),F(zC.$$.fragment),ije=l(),Xc=a("h2"),WC=a("a"),K7e=a("span"),F(O9.$$.fragment),tPr=l(),Z7e=a("span"),aPr=o("FlaxAutoModelForSequenceClassification"),dje=l(),_r=a("div"),F(V9.$$.fragment),nPr=l(),zc=a("p"),sPr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),VY=a("a"),lPr=o("from_pretrained()"),iPr=o(" class method or the "),XY=a("a"),dPr=o("from_config()"),cPr=o(` class
method.`),fPr=l(),X9=a("p"),mPr=o("This class cannot be instantiated directly using "),eMe=a("code"),gPr=o("__init__()"),hPr=o(" (throws an error)."),pPr=l(),Qt=a("div"),F(z9.$$.fragment),_Pr=l(),oMe=a("p"),uPr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),bPr=l(),Wc=a("p"),vPr=o(`Note:
Loading a model from its configuration file does `),rMe=a("strong"),FPr=o("not"),TPr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zY=a("a"),MPr=o("from_pretrained()"),EPr=o(" to load the model weights."),CPr=l(),F(QC.$$.fragment),wPr=l(),Xr=a("div"),F(W9.$$.fragment),APr=l(),tMe=a("p"),yPr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),LPr=l(),vn=a("p"),xPr=o("The model class to instantiate is selected based on the "),aMe=a("code"),$Pr=o("model_type"),kPr=o(` property of the config object (either
passed as an argument or loaded from `),nMe=a("code"),SPr=o("pretrained_model_name_or_path"),RPr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sMe=a("code"),PPr=o("pretrained_model_name_or_path"),BPr=o(":"),IPr=l(),xe=a("ul"),HC=a("li"),lMe=a("strong"),qPr=o("albert"),NPr=o(" \u2014 "),WY=a("a"),jPr=o("FlaxAlbertForSequenceClassification"),DPr=o(" (ALBERT model)"),GPr=l(),UC=a("li"),iMe=a("strong"),OPr=o("bart"),VPr=o(" \u2014 "),QY=a("a"),XPr=o("FlaxBartForSequenceClassification"),zPr=o(" (BART model)"),WPr=l(),JC=a("li"),dMe=a("strong"),QPr=o("bert"),HPr=o(" \u2014 "),HY=a("a"),UPr=o("FlaxBertForSequenceClassification"),JPr=o(" (BERT model)"),YPr=l(),YC=a("li"),cMe=a("strong"),KPr=o("big_bird"),ZPr=o(" \u2014 "),UY=a("a"),eBr=o("FlaxBigBirdForSequenceClassification"),oBr=o(" (BigBird model)"),rBr=l(),KC=a("li"),fMe=a("strong"),tBr=o("distilbert"),aBr=o(" \u2014 "),JY=a("a"),nBr=o("FlaxDistilBertForSequenceClassification"),sBr=o(" (DistilBERT model)"),lBr=l(),ZC=a("li"),mMe=a("strong"),iBr=o("electra"),dBr=o(" \u2014 "),YY=a("a"),cBr=o("FlaxElectraForSequenceClassification"),fBr=o(" (ELECTRA model)"),mBr=l(),e3=a("li"),gMe=a("strong"),gBr=o("mbart"),hBr=o(" \u2014 "),KY=a("a"),pBr=o("FlaxMBartForSequenceClassification"),_Br=o(" (mBART model)"),uBr=l(),o3=a("li"),hMe=a("strong"),bBr=o("roberta"),vBr=o(" \u2014 "),ZY=a("a"),FBr=o("FlaxRobertaForSequenceClassification"),TBr=o(" (RoBERTa model)"),MBr=l(),r3=a("li"),pMe=a("strong"),EBr=o("roformer"),CBr=o(" \u2014 "),eK=a("a"),wBr=o("FlaxRoFormerForSequenceClassification"),ABr=o(" (RoFormer model)"),yBr=l(),t3=a("li"),_Me=a("strong"),LBr=o("xlm-roberta"),xBr=o(" \u2014 "),oK=a("a"),$Br=o("FlaxXLMRobertaForSequenceClassification"),kBr=o(" (XLM-RoBERTa model)"),SBr=l(),F(a3.$$.fragment),cje=l(),Qc=a("h2"),n3=a("a"),uMe=a("span"),F(Q9.$$.fragment),RBr=l(),bMe=a("span"),PBr=o("FlaxAutoModelForQuestionAnswering"),fje=l(),ur=a("div"),F(H9.$$.fragment),BBr=l(),Hc=a("p"),IBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),rK=a("a"),qBr=o("from_pretrained()"),NBr=o(" class method or the "),tK=a("a"),jBr=o("from_config()"),DBr=o(` class
method.`),GBr=l(),U9=a("p"),OBr=o("This class cannot be instantiated directly using "),vMe=a("code"),VBr=o("__init__()"),XBr=o(" (throws an error)."),zBr=l(),Ht=a("div"),F(J9.$$.fragment),WBr=l(),FMe=a("p"),QBr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),HBr=l(),Uc=a("p"),UBr=o(`Note:
Loading a model from its configuration file does `),TMe=a("strong"),JBr=o("not"),YBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aK=a("a"),KBr=o("from_pretrained()"),ZBr=o(" to load the model weights."),eIr=l(),F(s3.$$.fragment),oIr=l(),zr=a("div"),F(Y9.$$.fragment),rIr=l(),MMe=a("p"),tIr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),aIr=l(),Fn=a("p"),nIr=o("The model class to instantiate is selected based on the "),EMe=a("code"),sIr=o("model_type"),lIr=o(` property of the config object (either
passed as an argument or loaded from `),CMe=a("code"),iIr=o("pretrained_model_name_or_path"),dIr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wMe=a("code"),cIr=o("pretrained_model_name_or_path"),fIr=o(":"),mIr=l(),$e=a("ul"),l3=a("li"),AMe=a("strong"),gIr=o("albert"),hIr=o(" \u2014 "),nK=a("a"),pIr=o("FlaxAlbertForQuestionAnswering"),_Ir=o(" (ALBERT model)"),uIr=l(),i3=a("li"),yMe=a("strong"),bIr=o("bart"),vIr=o(" \u2014 "),sK=a("a"),FIr=o("FlaxBartForQuestionAnswering"),TIr=o(" (BART model)"),MIr=l(),d3=a("li"),LMe=a("strong"),EIr=o("bert"),CIr=o(" \u2014 "),lK=a("a"),wIr=o("FlaxBertForQuestionAnswering"),AIr=o(" (BERT model)"),yIr=l(),c3=a("li"),xMe=a("strong"),LIr=o("big_bird"),xIr=o(" \u2014 "),iK=a("a"),$Ir=o("FlaxBigBirdForQuestionAnswering"),kIr=o(" (BigBird model)"),SIr=l(),f3=a("li"),$Me=a("strong"),RIr=o("distilbert"),PIr=o(" \u2014 "),dK=a("a"),BIr=o("FlaxDistilBertForQuestionAnswering"),IIr=o(" (DistilBERT model)"),qIr=l(),m3=a("li"),kMe=a("strong"),NIr=o("electra"),jIr=o(" \u2014 "),cK=a("a"),DIr=o("FlaxElectraForQuestionAnswering"),GIr=o(" (ELECTRA model)"),OIr=l(),g3=a("li"),SMe=a("strong"),VIr=o("mbart"),XIr=o(" \u2014 "),fK=a("a"),zIr=o("FlaxMBartForQuestionAnswering"),WIr=o(" (mBART model)"),QIr=l(),h3=a("li"),RMe=a("strong"),HIr=o("roberta"),UIr=o(" \u2014 "),mK=a("a"),JIr=o("FlaxRobertaForQuestionAnswering"),YIr=o(" (RoBERTa model)"),KIr=l(),p3=a("li"),PMe=a("strong"),ZIr=o("roformer"),eqr=o(" \u2014 "),gK=a("a"),oqr=o("FlaxRoFormerForQuestionAnswering"),rqr=o(" (RoFormer model)"),tqr=l(),_3=a("li"),BMe=a("strong"),aqr=o("xlm-roberta"),nqr=o(" \u2014 "),hK=a("a"),sqr=o("FlaxXLMRobertaForQuestionAnswering"),lqr=o(" (XLM-RoBERTa model)"),iqr=l(),F(u3.$$.fragment),mje=l(),Jc=a("h2"),b3=a("a"),IMe=a("span"),F(K9.$$.fragment),dqr=l(),qMe=a("span"),cqr=o("FlaxAutoModelForTokenClassification"),gje=l(),br=a("div"),F(Z9.$$.fragment),fqr=l(),Yc=a("p"),mqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),pK=a("a"),gqr=o("from_pretrained()"),hqr=o(" class method or the "),_K=a("a"),pqr=o("from_config()"),_qr=o(` class
method.`),uqr=l(),ex=a("p"),bqr=o("This class cannot be instantiated directly using "),NMe=a("code"),vqr=o("__init__()"),Fqr=o(" (throws an error)."),Tqr=l(),Ut=a("div"),F(ox.$$.fragment),Mqr=l(),jMe=a("p"),Eqr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Cqr=l(),Kc=a("p"),wqr=o(`Note:
Loading a model from its configuration file does `),DMe=a("strong"),Aqr=o("not"),yqr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uK=a("a"),Lqr=o("from_pretrained()"),xqr=o(" to load the model weights."),$qr=l(),F(v3.$$.fragment),kqr=l(),Wr=a("div"),F(rx.$$.fragment),Sqr=l(),GMe=a("p"),Rqr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Pqr=l(),Tn=a("p"),Bqr=o("The model class to instantiate is selected based on the "),OMe=a("code"),Iqr=o("model_type"),qqr=o(` property of the config object (either
passed as an argument or loaded from `),VMe=a("code"),Nqr=o("pretrained_model_name_or_path"),jqr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),XMe=a("code"),Dqr=o("pretrained_model_name_or_path"),Gqr=o(":"),Oqr=l(),De=a("ul"),F3=a("li"),zMe=a("strong"),Vqr=o("albert"),Xqr=o(" \u2014 "),bK=a("a"),zqr=o("FlaxAlbertForTokenClassification"),Wqr=o(" (ALBERT model)"),Qqr=l(),T3=a("li"),WMe=a("strong"),Hqr=o("bert"),Uqr=o(" \u2014 "),vK=a("a"),Jqr=o("FlaxBertForTokenClassification"),Yqr=o(" (BERT model)"),Kqr=l(),M3=a("li"),QMe=a("strong"),Zqr=o("big_bird"),eNr=o(" \u2014 "),FK=a("a"),oNr=o("FlaxBigBirdForTokenClassification"),rNr=o(" (BigBird model)"),tNr=l(),E3=a("li"),HMe=a("strong"),aNr=o("distilbert"),nNr=o(" \u2014 "),TK=a("a"),sNr=o("FlaxDistilBertForTokenClassification"),lNr=o(" (DistilBERT model)"),iNr=l(),C3=a("li"),UMe=a("strong"),dNr=o("electra"),cNr=o(" \u2014 "),MK=a("a"),fNr=o("FlaxElectraForTokenClassification"),mNr=o(" (ELECTRA model)"),gNr=l(),w3=a("li"),JMe=a("strong"),hNr=o("roberta"),pNr=o(" \u2014 "),EK=a("a"),_Nr=o("FlaxRobertaForTokenClassification"),uNr=o(" (RoBERTa model)"),bNr=l(),A3=a("li"),YMe=a("strong"),vNr=o("roformer"),FNr=o(" \u2014 "),CK=a("a"),TNr=o("FlaxRoFormerForTokenClassification"),MNr=o(" (RoFormer model)"),ENr=l(),y3=a("li"),KMe=a("strong"),CNr=o("xlm-roberta"),wNr=o(" \u2014 "),wK=a("a"),ANr=o("FlaxXLMRobertaForTokenClassification"),yNr=o(" (XLM-RoBERTa model)"),LNr=l(),F(L3.$$.fragment),hje=l(),Zc=a("h2"),x3=a("a"),ZMe=a("span"),F(tx.$$.fragment),xNr=l(),e4e=a("span"),$Nr=o("FlaxAutoModelForMultipleChoice"),pje=l(),vr=a("div"),F(ax.$$.fragment),kNr=l(),ef=a("p"),SNr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),AK=a("a"),RNr=o("from_pretrained()"),PNr=o(" class method or the "),yK=a("a"),BNr=o("from_config()"),INr=o(` class
method.`),qNr=l(),nx=a("p"),NNr=o("This class cannot be instantiated directly using "),o4e=a("code"),jNr=o("__init__()"),DNr=o(" (throws an error)."),GNr=l(),Jt=a("div"),F(sx.$$.fragment),ONr=l(),r4e=a("p"),VNr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),XNr=l(),of=a("p"),zNr=o(`Note:
Loading a model from its configuration file does `),t4e=a("strong"),WNr=o("not"),QNr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LK=a("a"),HNr=o("from_pretrained()"),UNr=o(" to load the model weights."),JNr=l(),F($3.$$.fragment),YNr=l(),Qr=a("div"),F(lx.$$.fragment),KNr=l(),a4e=a("p"),ZNr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),ejr=l(),Mn=a("p"),ojr=o("The model class to instantiate is selected based on the "),n4e=a("code"),rjr=o("model_type"),tjr=o(` property of the config object (either
passed as an argument or loaded from `),s4e=a("code"),ajr=o("pretrained_model_name_or_path"),njr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l4e=a("code"),sjr=o("pretrained_model_name_or_path"),ljr=o(":"),ijr=l(),Ge=a("ul"),k3=a("li"),i4e=a("strong"),djr=o("albert"),cjr=o(" \u2014 "),xK=a("a"),fjr=o("FlaxAlbertForMultipleChoice"),mjr=o(" (ALBERT model)"),gjr=l(),S3=a("li"),d4e=a("strong"),hjr=o("bert"),pjr=o(" \u2014 "),$K=a("a"),_jr=o("FlaxBertForMultipleChoice"),ujr=o(" (BERT model)"),bjr=l(),R3=a("li"),c4e=a("strong"),vjr=o("big_bird"),Fjr=o(" \u2014 "),kK=a("a"),Tjr=o("FlaxBigBirdForMultipleChoice"),Mjr=o(" (BigBird model)"),Ejr=l(),P3=a("li"),f4e=a("strong"),Cjr=o("distilbert"),wjr=o(" \u2014 "),SK=a("a"),Ajr=o("FlaxDistilBertForMultipleChoice"),yjr=o(" (DistilBERT model)"),Ljr=l(),B3=a("li"),m4e=a("strong"),xjr=o("electra"),$jr=o(" \u2014 "),RK=a("a"),kjr=o("FlaxElectraForMultipleChoice"),Sjr=o(" (ELECTRA model)"),Rjr=l(),I3=a("li"),g4e=a("strong"),Pjr=o("roberta"),Bjr=o(" \u2014 "),PK=a("a"),Ijr=o("FlaxRobertaForMultipleChoice"),qjr=o(" (RoBERTa model)"),Njr=l(),q3=a("li"),h4e=a("strong"),jjr=o("roformer"),Djr=o(" \u2014 "),BK=a("a"),Gjr=o("FlaxRoFormerForMultipleChoice"),Ojr=o(" (RoFormer model)"),Vjr=l(),N3=a("li"),p4e=a("strong"),Xjr=o("xlm-roberta"),zjr=o(" \u2014 "),IK=a("a"),Wjr=o("FlaxXLMRobertaForMultipleChoice"),Qjr=o(" (XLM-RoBERTa model)"),Hjr=l(),F(j3.$$.fragment),_je=l(),rf=a("h2"),D3=a("a"),_4e=a("span"),F(ix.$$.fragment),Ujr=l(),u4e=a("span"),Jjr=o("FlaxAutoModelForNextSentencePrediction"),uje=l(),Fr=a("div"),F(dx.$$.fragment),Yjr=l(),tf=a("p"),Kjr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),qK=a("a"),Zjr=o("from_pretrained()"),eDr=o(" class method or the "),NK=a("a"),oDr=o("from_config()"),rDr=o(` class
method.`),tDr=l(),cx=a("p"),aDr=o("This class cannot be instantiated directly using "),b4e=a("code"),nDr=o("__init__()"),sDr=o(" (throws an error)."),lDr=l(),Yt=a("div"),F(fx.$$.fragment),iDr=l(),v4e=a("p"),dDr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),cDr=l(),af=a("p"),fDr=o(`Note:
Loading a model from its configuration file does `),F4e=a("strong"),mDr=o("not"),gDr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jK=a("a"),hDr=o("from_pretrained()"),pDr=o(" to load the model weights."),_Dr=l(),F(G3.$$.fragment),uDr=l(),Hr=a("div"),F(mx.$$.fragment),bDr=l(),T4e=a("p"),vDr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),FDr=l(),En=a("p"),TDr=o("The model class to instantiate is selected based on the "),M4e=a("code"),MDr=o("model_type"),EDr=o(` property of the config object (either
passed as an argument or loaded from `),E4e=a("code"),CDr=o("pretrained_model_name_or_path"),wDr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C4e=a("code"),ADr=o("pretrained_model_name_or_path"),yDr=o(":"),LDr=l(),w4e=a("ul"),O3=a("li"),A4e=a("strong"),xDr=o("bert"),$Dr=o(" \u2014 "),DK=a("a"),kDr=o("FlaxBertForNextSentencePrediction"),SDr=o(" (BERT model)"),RDr=l(),F(V3.$$.fragment),bje=l(),nf=a("h2"),X3=a("a"),y4e=a("span"),F(gx.$$.fragment),PDr=l(),L4e=a("span"),BDr=o("FlaxAutoModelForImageClassification"),vje=l(),Tr=a("div"),F(hx.$$.fragment),IDr=l(),sf=a("p"),qDr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),GK=a("a"),NDr=o("from_pretrained()"),jDr=o(" class method or the "),OK=a("a"),DDr=o("from_config()"),GDr=o(` class
method.`),ODr=l(),px=a("p"),VDr=o("This class cannot be instantiated directly using "),x4e=a("code"),XDr=o("__init__()"),zDr=o(" (throws an error)."),WDr=l(),Kt=a("div"),F(_x.$$.fragment),QDr=l(),$4e=a("p"),HDr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),UDr=l(),lf=a("p"),JDr=o(`Note:
Loading a model from its configuration file does `),k4e=a("strong"),YDr=o("not"),KDr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VK=a("a"),ZDr=o("from_pretrained()"),eGr=o(" to load the model weights."),oGr=l(),F(z3.$$.fragment),rGr=l(),Ur=a("div"),F(ux.$$.fragment),tGr=l(),S4e=a("p"),aGr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),nGr=l(),Cn=a("p"),sGr=o("The model class to instantiate is selected based on the "),R4e=a("code"),lGr=o("model_type"),iGr=o(` property of the config object (either
passed as an argument or loaded from `),P4e=a("code"),dGr=o("pretrained_model_name_or_path"),cGr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B4e=a("code"),fGr=o("pretrained_model_name_or_path"),mGr=o(":"),gGr=l(),bx=a("ul"),W3=a("li"),I4e=a("strong"),hGr=o("beit"),pGr=o(" \u2014 "),XK=a("a"),_Gr=o("FlaxBeitForImageClassification"),uGr=o(" (BEiT model)"),bGr=l(),Q3=a("li"),q4e=a("strong"),vGr=o("vit"),FGr=o(" \u2014 "),zK=a("a"),TGr=o("FlaxViTForImageClassification"),MGr=o(" (ViT model)"),EGr=l(),F(H3.$$.fragment),Fje=l(),df=a("h2"),U3=a("a"),N4e=a("span"),F(vx.$$.fragment),CGr=l(),j4e=a("span"),wGr=o("FlaxAutoModelForVision2Seq"),Tje=l(),Mr=a("div"),F(Fx.$$.fragment),AGr=l(),cf=a("p"),yGr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),WK=a("a"),LGr=o("from_pretrained()"),xGr=o(" class method or the "),QK=a("a"),$Gr=o("from_config()"),kGr=o(` class
method.`),SGr=l(),Tx=a("p"),RGr=o("This class cannot be instantiated directly using "),D4e=a("code"),PGr=o("__init__()"),BGr=o(" (throws an error)."),IGr=l(),Zt=a("div"),F(Mx.$$.fragment),qGr=l(),G4e=a("p"),NGr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),jGr=l(),ff=a("p"),DGr=o(`Note:
Loading a model from its configuration file does `),O4e=a("strong"),GGr=o("not"),OGr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HK=a("a"),VGr=o("from_pretrained()"),XGr=o(" to load the model weights."),zGr=l(),F(J3.$$.fragment),WGr=l(),Jr=a("div"),F(Ex.$$.fragment),QGr=l(),V4e=a("p"),HGr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),UGr=l(),wn=a("p"),JGr=o("The model class to instantiate is selected based on the "),X4e=a("code"),YGr=o("model_type"),KGr=o(` property of the config object (either
passed as an argument or loaded from `),z4e=a("code"),ZGr=o("pretrained_model_name_or_path"),eOr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W4e=a("code"),oOr=o("pretrained_model_name_or_path"),rOr=o(":"),tOr=l(),Q4e=a("ul"),Y3=a("li"),H4e=a("strong"),aOr=o("vision-encoder-decoder"),nOr=o(" \u2014 "),UK=a("a"),sOr=o("FlaxVisionEncoderDecoderModel"),lOr=o(" (Vision Encoder decoder model)"),iOr=l(),F(K3.$$.fragment),this.h()},l(f){const u=w9t('[data-svelte="svelte-1phssyn"]',document.head);g=n(u,"META",{name:!0,content:!0}),u.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var Cx=s(p);m=n(Cx,"A",{id:!0,class:!0,href:!0});var U4e=s(m);_=n(U4e,"SPAN",{});var J4e=s(_);T(d.$$.fragment,J4e),J4e.forEach(t),U4e.forEach(t),h=i(Cx),Mo=n(Cx,"SPAN",{});var Y4e=s(Mo);fi=r(Y4e,"Auto Classes"),Y4e.forEach(t),Cx.forEach(t),pf=i(f),tt=n(f,"P",{});var wx=s(tt);mi=r(wx,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),gi=n(wx,"CODE",{});var K4e=s(gi);pA=r(K4e,"from_pretrained()"),K4e.forEach(t),_f=r(wx,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),wx.forEach(t),je=i(f),We=n(f,"P",{});var An=s(We);hi=r(An,"Instantiating one of "),yn=n(An,"A",{href:!0});var Z4e=s(yn);_A=r(Z4e,"AutoConfig"),Z4e.forEach(t),Ln=r(An,", "),xn=n(An,"A",{href:!0});var eEe=s(xn);uA=r(eEe,"AutoModel"),eEe.forEach(t),pi=r(An,`, and
`),$n=n(An,"A",{href:!0});var oEe=s($n);bA=r(oEe,"AutoTokenizer"),oEe.forEach(t),_i=r(An," will directly create a class of the relevant architecture. For instance"),An.forEach(t),uf=i(f),T(wa.$$.fragment,f),Qe=i(f),Ae=n(f,"P",{});var Ax=s(Ae);I$=r(Ax,"will create a model that is an instance of "),ui=n(Ax,"A",{href:!0});var rEe=s(ui);q$=r(rEe,"BertModel"),rEe.forEach(t),N$=r(Ax,"."),Ax.forEach(t),Eo=i(f),Aa=n(f,"P",{});var yx=s(Aa);j$=r(yx,"There is one class of "),bf=n(yx,"CODE",{});var tEe=s(bf);D$=r(tEe,"AutoModel"),tEe.forEach(t),$Ge=r(yx," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),yx.forEach(t),vqe=i(f),bi=n(f,"H2",{class:!0});var Lx=s(bi);vf=n(Lx,"A",{id:!0,class:!0,href:!0});var aEe=s(vf);Oee=n(aEe,"SPAN",{});var nEe=s(Oee);T(vA.$$.fragment,nEe),nEe.forEach(t),aEe.forEach(t),kGe=i(Lx),Vee=n(Lx,"SPAN",{});var sEe=s(Vee);SGe=r(sEe,"Extending the Auto Classes"),sEe.forEach(t),Lx.forEach(t),Fqe=i(f),kn=n(f,"P",{});var mf=s(kn);RGe=r(mf,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Xee=n(mf,"CODE",{});var lEe=s(Xee);PGe=r(lEe,"NewModel"),lEe.forEach(t),BGe=r(mf,", make sure you have a "),zee=n(mf,"CODE",{});var iEe=s(zee);IGe=r(iEe,"NewModelConfig"),iEe.forEach(t),qGe=r(mf,` then you can add those to the auto
classes like this:`),mf.forEach(t),Tqe=i(f),T(FA.$$.fragment,f),Mqe=i(f),G$=n(f,"P",{});var dEe=s(G$);NGe=r(dEe,"You will then be able to use the auto classes like you would usually do!"),dEe.forEach(t),Eqe=i(f),T(Ff.$$.fragment,f),Cqe=i(f),vi=n(f,"H2",{class:!0});var xx=s(vi);Tf=n(xx,"A",{id:!0,class:!0,href:!0});var cEe=s(Tf);Wee=n(cEe,"SPAN",{});var fEe=s(Wee);T(TA.$$.fragment,fEe),fEe.forEach(t),cEe.forEach(t),jGe=i(xx),Qee=n(xx,"SPAN",{});var mEe=s(Qee);DGe=r(mEe,"AutoConfig"),mEe.forEach(t),xx.forEach(t),wqe=i(f),Co=n(f,"DIV",{class:!0});var ot=s(Co);T(MA.$$.fragment,ot),GGe=i(ot),EA=n(ot,"P",{});var $x=s(EA);OGe=r($x,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),O$=n($x,"A",{href:!0});var gEe=s(O$);VGe=r(gEe,"from_pretrained()"),gEe.forEach(t),XGe=r($x," class method."),$x.forEach(t),zGe=i(ot),CA=n(ot,"P",{});var kx=s(CA);WGe=r(kx,"This class cannot be instantiated directly using "),Hee=n(kx,"CODE",{});var hEe=s(Hee);QGe=r(hEe,"__init__()"),hEe.forEach(t),HGe=r(kx," (throws an error)."),kx.forEach(t),UGe=i(ot),Er=n(ot,"DIV",{class:!0});var rt=s(Er);T(wA.$$.fragment,rt),JGe=i(rt),Uee=n(rt,"P",{});var pEe=s(Uee);YGe=r(pEe,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),pEe.forEach(t),KGe=i(rt),Fi=n(rt,"P",{});var gf=s(Fi);ZGe=r(gf,"The configuration class to instantiate is selected based on the "),Jee=n(gf,"CODE",{});var _Ee=s(Jee);eOe=r(_Ee,"model_type"),_Ee.forEach(t),oOe=r(gf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Yee=n(gf,"CODE",{});var uEe=s(Yee);rOe=r(uEe,"pretrained_model_name_or_path"),uEe.forEach(t),tOe=r(gf,":"),gf.forEach(t),aOe=i(rt),A=n(rt,"UL",{});var y=s(A);Mf=n(y,"LI",{});var Z3=s(Mf);Kee=n(Z3,"STRONG",{});var bEe=s(Kee);nOe=r(bEe,"albert"),bEe.forEach(t),sOe=r(Z3," \u2014 "),V$=n(Z3,"A",{href:!0});var vEe=s(V$);lOe=r(vEe,"AlbertConfig"),vEe.forEach(t),iOe=r(Z3," (ALBERT model)"),Z3.forEach(t),dOe=i(y),Ef=n(y,"LI",{});var ew=s(Ef);Zee=n(ew,"STRONG",{});var FEe=s(Zee);cOe=r(FEe,"bart"),FEe.forEach(t),fOe=r(ew," \u2014 "),X$=n(ew,"A",{href:!0});var TEe=s(X$);mOe=r(TEe,"BartConfig"),TEe.forEach(t),gOe=r(ew," (BART model)"),ew.forEach(t),hOe=i(y),Cf=n(y,"LI",{});var ow=s(Cf);eoe=n(ow,"STRONG",{});var MEe=s(eoe);pOe=r(MEe,"beit"),MEe.forEach(t),_Oe=r(ow," \u2014 "),z$=n(ow,"A",{href:!0});var EEe=s(z$);uOe=r(EEe,"BeitConfig"),EEe.forEach(t),bOe=r(ow," (BEiT model)"),ow.forEach(t),vOe=i(y),wf=n(y,"LI",{});var rw=s(wf);ooe=n(rw,"STRONG",{});var CEe=s(ooe);FOe=r(CEe,"bert"),CEe.forEach(t),TOe=r(rw," \u2014 "),W$=n(rw,"A",{href:!0});var wEe=s(W$);MOe=r(wEe,"BertConfig"),wEe.forEach(t),EOe=r(rw," (BERT model)"),rw.forEach(t),COe=i(y),Af=n(y,"LI",{});var tw=s(Af);roe=n(tw,"STRONG",{});var AEe=s(roe);wOe=r(AEe,"bert-generation"),AEe.forEach(t),AOe=r(tw," \u2014 "),Q$=n(tw,"A",{href:!0});var yEe=s(Q$);yOe=r(yEe,"BertGenerationConfig"),yEe.forEach(t),LOe=r(tw," (Bert Generation model)"),tw.forEach(t),xOe=i(y),yf=n(y,"LI",{});var aw=s(yf);toe=n(aw,"STRONG",{});var LEe=s(toe);$Oe=r(LEe,"big_bird"),LEe.forEach(t),kOe=r(aw," \u2014 "),H$=n(aw,"A",{href:!0});var xEe=s(H$);SOe=r(xEe,"BigBirdConfig"),xEe.forEach(t),ROe=r(aw," (BigBird model)"),aw.forEach(t),POe=i(y),Lf=n(y,"LI",{});var nw=s(Lf);aoe=n(nw,"STRONG",{});var $Ee=s(aoe);BOe=r($Ee,"bigbird_pegasus"),$Ee.forEach(t),IOe=r(nw," \u2014 "),U$=n(nw,"A",{href:!0});var kEe=s(U$);qOe=r(kEe,"BigBirdPegasusConfig"),kEe.forEach(t),NOe=r(nw," (BigBirdPegasus model)"),nw.forEach(t),jOe=i(y),xf=n(y,"LI",{});var sw=s(xf);noe=n(sw,"STRONG",{});var SEe=s(noe);DOe=r(SEe,"blenderbot"),SEe.forEach(t),GOe=r(sw," \u2014 "),J$=n(sw,"A",{href:!0});var REe=s(J$);OOe=r(REe,"BlenderbotConfig"),REe.forEach(t),VOe=r(sw," (Blenderbot model)"),sw.forEach(t),XOe=i(y),$f=n(y,"LI",{});var lw=s($f);soe=n(lw,"STRONG",{});var PEe=s(soe);zOe=r(PEe,"blenderbot-small"),PEe.forEach(t),WOe=r(lw," \u2014 "),Y$=n(lw,"A",{href:!0});var BEe=s(Y$);QOe=r(BEe,"BlenderbotSmallConfig"),BEe.forEach(t),HOe=r(lw," (BlenderbotSmall model)"),lw.forEach(t),UOe=i(y),kf=n(y,"LI",{});var iw=s(kf);loe=n(iw,"STRONG",{});var IEe=s(loe);JOe=r(IEe,"camembert"),IEe.forEach(t),YOe=r(iw," \u2014 "),K$=n(iw,"A",{href:!0});var qEe=s(K$);KOe=r(qEe,"CamembertConfig"),qEe.forEach(t),ZOe=r(iw," (CamemBERT model)"),iw.forEach(t),eVe=i(y),Sf=n(y,"LI",{});var dw=s(Sf);ioe=n(dw,"STRONG",{});var NEe=s(ioe);oVe=r(NEe,"canine"),NEe.forEach(t),rVe=r(dw," \u2014 "),Z$=n(dw,"A",{href:!0});var jEe=s(Z$);tVe=r(jEe,"CanineConfig"),jEe.forEach(t),aVe=r(dw," (Canine model)"),dw.forEach(t),nVe=i(y),Rf=n(y,"LI",{});var cw=s(Rf);doe=n(cw,"STRONG",{});var DEe=s(doe);sVe=r(DEe,"clip"),DEe.forEach(t),lVe=r(cw," \u2014 "),ek=n(cw,"A",{href:!0});var GEe=s(ek);iVe=r(GEe,"CLIPConfig"),GEe.forEach(t),dVe=r(cw," (CLIP model)"),cw.forEach(t),cVe=i(y),Pf=n(y,"LI",{});var fw=s(Pf);coe=n(fw,"STRONG",{});var OEe=s(coe);fVe=r(OEe,"convbert"),OEe.forEach(t),mVe=r(fw," \u2014 "),ok=n(fw,"A",{href:!0});var VEe=s(ok);gVe=r(VEe,"ConvBertConfig"),VEe.forEach(t),hVe=r(fw," (ConvBERT model)"),fw.forEach(t),pVe=i(y),Bf=n(y,"LI",{});var mw=s(Bf);foe=n(mw,"STRONG",{});var XEe=s(foe);_Ve=r(XEe,"convnext"),XEe.forEach(t),uVe=r(mw," \u2014 "),rk=n(mw,"A",{href:!0});var zEe=s(rk);bVe=r(zEe,"ConvNextConfig"),zEe.forEach(t),vVe=r(mw," (ConvNext model)"),mw.forEach(t),FVe=i(y),If=n(y,"LI",{});var gw=s(If);moe=n(gw,"STRONG",{});var WEe=s(moe);TVe=r(WEe,"ctrl"),WEe.forEach(t),MVe=r(gw," \u2014 "),tk=n(gw,"A",{href:!0});var QEe=s(tk);EVe=r(QEe,"CTRLConfig"),QEe.forEach(t),CVe=r(gw," (CTRL model)"),gw.forEach(t),wVe=i(y),qf=n(y,"LI",{});var hw=s(qf);goe=n(hw,"STRONG",{});var HEe=s(goe);AVe=r(HEe,"cvt"),HEe.forEach(t),yVe=r(hw," \u2014 "),ak=n(hw,"A",{href:!0});var UEe=s(ak);LVe=r(UEe,"CvtConfig"),UEe.forEach(t),xVe=r(hw," (CvT model)"),hw.forEach(t),$Ve=i(y),Nf=n(y,"LI",{});var pw=s(Nf);hoe=n(pw,"STRONG",{});var JEe=s(hoe);kVe=r(JEe,"data2vec-audio"),JEe.forEach(t),SVe=r(pw," \u2014 "),nk=n(pw,"A",{href:!0});var YEe=s(nk);RVe=r(YEe,"Data2VecAudioConfig"),YEe.forEach(t),PVe=r(pw," (Data2VecAudio model)"),pw.forEach(t),BVe=i(y),jf=n(y,"LI",{});var _w=s(jf);poe=n(_w,"STRONG",{});var KEe=s(poe);IVe=r(KEe,"data2vec-text"),KEe.forEach(t),qVe=r(_w," \u2014 "),sk=n(_w,"A",{href:!0});var ZEe=s(sk);NVe=r(ZEe,"Data2VecTextConfig"),ZEe.forEach(t),jVe=r(_w," (Data2VecText model)"),_w.forEach(t),DVe=i(y),Df=n(y,"LI",{});var uw=s(Df);_oe=n(uw,"STRONG",{});var eCe=s(_oe);GVe=r(eCe,"data2vec-vision"),eCe.forEach(t),OVe=r(uw," \u2014 "),lk=n(uw,"A",{href:!0});var oCe=s(lk);VVe=r(oCe,"Data2VecVisionConfig"),oCe.forEach(t),XVe=r(uw," (Data2VecVision model)"),uw.forEach(t),zVe=i(y),Gf=n(y,"LI",{});var bw=s(Gf);uoe=n(bw,"STRONG",{});var rCe=s(uoe);WVe=r(rCe,"deberta"),rCe.forEach(t),QVe=r(bw," \u2014 "),ik=n(bw,"A",{href:!0});var tCe=s(ik);HVe=r(tCe,"DebertaConfig"),tCe.forEach(t),UVe=r(bw," (DeBERTa model)"),bw.forEach(t),JVe=i(y),Of=n(y,"LI",{});var vw=s(Of);boe=n(vw,"STRONG",{});var aCe=s(boe);YVe=r(aCe,"deberta-v2"),aCe.forEach(t),KVe=r(vw," \u2014 "),dk=n(vw,"A",{href:!0});var nCe=s(dk);ZVe=r(nCe,"DebertaV2Config"),nCe.forEach(t),eXe=r(vw," (DeBERTa-v2 model)"),vw.forEach(t),oXe=i(y),Vf=n(y,"LI",{});var Fw=s(Vf);voe=n(Fw,"STRONG",{});var sCe=s(voe);rXe=r(sCe,"decision_transformer"),sCe.forEach(t),tXe=r(Fw," \u2014 "),ck=n(Fw,"A",{href:!0});var lCe=s(ck);aXe=r(lCe,"DecisionTransformerConfig"),lCe.forEach(t),nXe=r(Fw," (Decision Transformer model)"),Fw.forEach(t),sXe=i(y),Xf=n(y,"LI",{});var Tw=s(Xf);Foe=n(Tw,"STRONG",{});var iCe=s(Foe);lXe=r(iCe,"deit"),iCe.forEach(t),iXe=r(Tw," \u2014 "),fk=n(Tw,"A",{href:!0});var cOr=s(fk);dXe=r(cOr,"DeiTConfig"),cOr.forEach(t),cXe=r(Tw," (DeiT model)"),Tw.forEach(t),fXe=i(y),zf=n(y,"LI",{});var dCe=s(zf);Toe=n(dCe,"STRONG",{});var fOr=s(Toe);mXe=r(fOr,"detr"),fOr.forEach(t),gXe=r(dCe," \u2014 "),mk=n(dCe,"A",{href:!0});var mOr=s(mk);hXe=r(mOr,"DetrConfig"),mOr.forEach(t),pXe=r(dCe," (DETR model)"),dCe.forEach(t),_Xe=i(y),Wf=n(y,"LI",{});var cCe=s(Wf);Moe=n(cCe,"STRONG",{});var gOr=s(Moe);uXe=r(gOr,"distilbert"),gOr.forEach(t),bXe=r(cCe," \u2014 "),gk=n(cCe,"A",{href:!0});var hOr=s(gk);vXe=r(hOr,"DistilBertConfig"),hOr.forEach(t),FXe=r(cCe," (DistilBERT model)"),cCe.forEach(t),TXe=i(y),Qf=n(y,"LI",{});var fCe=s(Qf);Eoe=n(fCe,"STRONG",{});var pOr=s(Eoe);MXe=r(pOr,"dpr"),pOr.forEach(t),EXe=r(fCe," \u2014 "),hk=n(fCe,"A",{href:!0});var _Or=s(hk);CXe=r(_Or,"DPRConfig"),_Or.forEach(t),wXe=r(fCe," (DPR model)"),fCe.forEach(t),AXe=i(y),Hf=n(y,"LI",{});var mCe=s(Hf);Coe=n(mCe,"STRONG",{});var uOr=s(Coe);yXe=r(uOr,"dpt"),uOr.forEach(t),LXe=r(mCe," \u2014 "),pk=n(mCe,"A",{href:!0});var bOr=s(pk);xXe=r(bOr,"DPTConfig"),bOr.forEach(t),$Xe=r(mCe," (DPT model)"),mCe.forEach(t),kXe=i(y),Uf=n(y,"LI",{});var gCe=s(Uf);woe=n(gCe,"STRONG",{});var vOr=s(woe);SXe=r(vOr,"electra"),vOr.forEach(t),RXe=r(gCe," \u2014 "),_k=n(gCe,"A",{href:!0});var FOr=s(_k);PXe=r(FOr,"ElectraConfig"),FOr.forEach(t),BXe=r(gCe," (ELECTRA model)"),gCe.forEach(t),IXe=i(y),Jf=n(y,"LI",{});var hCe=s(Jf);Aoe=n(hCe,"STRONG",{});var TOr=s(Aoe);qXe=r(TOr,"encoder-decoder"),TOr.forEach(t),NXe=r(hCe," \u2014 "),uk=n(hCe,"A",{href:!0});var MOr=s(uk);jXe=r(MOr,"EncoderDecoderConfig"),MOr.forEach(t),DXe=r(hCe," (Encoder decoder model)"),hCe.forEach(t),GXe=i(y),Yf=n(y,"LI",{});var pCe=s(Yf);yoe=n(pCe,"STRONG",{});var EOr=s(yoe);OXe=r(EOr,"flaubert"),EOr.forEach(t),VXe=r(pCe," \u2014 "),bk=n(pCe,"A",{href:!0});var COr=s(bk);XXe=r(COr,"FlaubertConfig"),COr.forEach(t),zXe=r(pCe," (FlauBERT model)"),pCe.forEach(t),WXe=i(y),Kf=n(y,"LI",{});var _Ce=s(Kf);Loe=n(_Ce,"STRONG",{});var wOr=s(Loe);QXe=r(wOr,"flava"),wOr.forEach(t),HXe=r(_Ce," \u2014 "),vk=n(_Ce,"A",{href:!0});var AOr=s(vk);UXe=r(AOr,"FlavaConfig"),AOr.forEach(t),JXe=r(_Ce," (Flava model)"),_Ce.forEach(t),YXe=i(y),Zf=n(y,"LI",{});var uCe=s(Zf);xoe=n(uCe,"STRONG",{});var yOr=s(xoe);KXe=r(yOr,"fnet"),yOr.forEach(t),ZXe=r(uCe," \u2014 "),Fk=n(uCe,"A",{href:!0});var LOr=s(Fk);eze=r(LOr,"FNetConfig"),LOr.forEach(t),oze=r(uCe," (FNet model)"),uCe.forEach(t),rze=i(y),em=n(y,"LI",{});var bCe=s(em);$oe=n(bCe,"STRONG",{});var xOr=s($oe);tze=r(xOr,"fsmt"),xOr.forEach(t),aze=r(bCe," \u2014 "),Tk=n(bCe,"A",{href:!0});var $Or=s(Tk);nze=r($Or,"FSMTConfig"),$Or.forEach(t),sze=r(bCe," (FairSeq Machine-Translation model)"),bCe.forEach(t),lze=i(y),om=n(y,"LI",{});var vCe=s(om);koe=n(vCe,"STRONG",{});var kOr=s(koe);ize=r(kOr,"funnel"),kOr.forEach(t),dze=r(vCe," \u2014 "),Mk=n(vCe,"A",{href:!0});var SOr=s(Mk);cze=r(SOr,"FunnelConfig"),SOr.forEach(t),fze=r(vCe," (Funnel Transformer model)"),vCe.forEach(t),mze=i(y),rm=n(y,"LI",{});var FCe=s(rm);Soe=n(FCe,"STRONG",{});var ROr=s(Soe);gze=r(ROr,"glpn"),ROr.forEach(t),hze=r(FCe," \u2014 "),Ek=n(FCe,"A",{href:!0});var POr=s(Ek);pze=r(POr,"GLPNConfig"),POr.forEach(t),_ze=r(FCe," (GLPN model)"),FCe.forEach(t),uze=i(y),tm=n(y,"LI",{});var TCe=s(tm);Roe=n(TCe,"STRONG",{});var BOr=s(Roe);bze=r(BOr,"gpt2"),BOr.forEach(t),vze=r(TCe," \u2014 "),Ck=n(TCe,"A",{href:!0});var IOr=s(Ck);Fze=r(IOr,"GPT2Config"),IOr.forEach(t),Tze=r(TCe," (OpenAI GPT-2 model)"),TCe.forEach(t),Mze=i(y),am=n(y,"LI",{});var MCe=s(am);Poe=n(MCe,"STRONG",{});var qOr=s(Poe);Eze=r(qOr,"gpt_neo"),qOr.forEach(t),Cze=r(MCe," \u2014 "),wk=n(MCe,"A",{href:!0});var NOr=s(wk);wze=r(NOr,"GPTNeoConfig"),NOr.forEach(t),Aze=r(MCe," (GPT Neo model)"),MCe.forEach(t),yze=i(y),nm=n(y,"LI",{});var ECe=s(nm);Boe=n(ECe,"STRONG",{});var jOr=s(Boe);Lze=r(jOr,"gptj"),jOr.forEach(t),xze=r(ECe," \u2014 "),Ak=n(ECe,"A",{href:!0});var DOr=s(Ak);$ze=r(DOr,"GPTJConfig"),DOr.forEach(t),kze=r(ECe," (GPT-J model)"),ECe.forEach(t),Sze=i(y),sm=n(y,"LI",{});var CCe=s(sm);Ioe=n(CCe,"STRONG",{});var GOr=s(Ioe);Rze=r(GOr,"hubert"),GOr.forEach(t),Pze=r(CCe," \u2014 "),yk=n(CCe,"A",{href:!0});var OOr=s(yk);Bze=r(OOr,"HubertConfig"),OOr.forEach(t),Ize=r(CCe," (Hubert model)"),CCe.forEach(t),qze=i(y),lm=n(y,"LI",{});var wCe=s(lm);qoe=n(wCe,"STRONG",{});var VOr=s(qoe);Nze=r(VOr,"ibert"),VOr.forEach(t),jze=r(wCe," \u2014 "),Lk=n(wCe,"A",{href:!0});var XOr=s(Lk);Dze=r(XOr,"IBertConfig"),XOr.forEach(t),Gze=r(wCe," (I-BERT model)"),wCe.forEach(t),Oze=i(y),im=n(y,"LI",{});var ACe=s(im);Noe=n(ACe,"STRONG",{});var zOr=s(Noe);Vze=r(zOr,"imagegpt"),zOr.forEach(t),Xze=r(ACe," \u2014 "),xk=n(ACe,"A",{href:!0});var WOr=s(xk);zze=r(WOr,"ImageGPTConfig"),WOr.forEach(t),Wze=r(ACe," (ImageGPT model)"),ACe.forEach(t),Qze=i(y),dm=n(y,"LI",{});var yCe=s(dm);joe=n(yCe,"STRONG",{});var QOr=s(joe);Hze=r(QOr,"layoutlm"),QOr.forEach(t),Uze=r(yCe," \u2014 "),$k=n(yCe,"A",{href:!0});var HOr=s($k);Jze=r(HOr,"LayoutLMConfig"),HOr.forEach(t),Yze=r(yCe," (LayoutLM model)"),yCe.forEach(t),Kze=i(y),cm=n(y,"LI",{});var LCe=s(cm);Doe=n(LCe,"STRONG",{});var UOr=s(Doe);Zze=r(UOr,"layoutlmv2"),UOr.forEach(t),eWe=r(LCe," \u2014 "),kk=n(LCe,"A",{href:!0});var JOr=s(kk);oWe=r(JOr,"LayoutLMv2Config"),JOr.forEach(t),rWe=r(LCe," (LayoutLMv2 model)"),LCe.forEach(t),tWe=i(y),fm=n(y,"LI",{});var xCe=s(fm);Goe=n(xCe,"STRONG",{});var YOr=s(Goe);aWe=r(YOr,"led"),YOr.forEach(t),nWe=r(xCe," \u2014 "),Sk=n(xCe,"A",{href:!0});var KOr=s(Sk);sWe=r(KOr,"LEDConfig"),KOr.forEach(t),lWe=r(xCe," (LED model)"),xCe.forEach(t),iWe=i(y),mm=n(y,"LI",{});var $Ce=s(mm);Ooe=n($Ce,"STRONG",{});var ZOr=s(Ooe);dWe=r(ZOr,"longformer"),ZOr.forEach(t),cWe=r($Ce," \u2014 "),Rk=n($Ce,"A",{href:!0});var eVr=s(Rk);fWe=r(eVr,"LongformerConfig"),eVr.forEach(t),mWe=r($Ce," (Longformer model)"),$Ce.forEach(t),gWe=i(y),gm=n(y,"LI",{});var kCe=s(gm);Voe=n(kCe,"STRONG",{});var oVr=s(Voe);hWe=r(oVr,"luke"),oVr.forEach(t),pWe=r(kCe," \u2014 "),Pk=n(kCe,"A",{href:!0});var rVr=s(Pk);_We=r(rVr,"LukeConfig"),rVr.forEach(t),uWe=r(kCe," (LUKE model)"),kCe.forEach(t),bWe=i(y),hm=n(y,"LI",{});var SCe=s(hm);Xoe=n(SCe,"STRONG",{});var tVr=s(Xoe);vWe=r(tVr,"lxmert"),tVr.forEach(t),FWe=r(SCe," \u2014 "),Bk=n(SCe,"A",{href:!0});var aVr=s(Bk);TWe=r(aVr,"LxmertConfig"),aVr.forEach(t),MWe=r(SCe," (LXMERT model)"),SCe.forEach(t),EWe=i(y),pm=n(y,"LI",{});var RCe=s(pm);zoe=n(RCe,"STRONG",{});var nVr=s(zoe);CWe=r(nVr,"m2m_100"),nVr.forEach(t),wWe=r(RCe," \u2014 "),Ik=n(RCe,"A",{href:!0});var sVr=s(Ik);AWe=r(sVr,"M2M100Config"),sVr.forEach(t),yWe=r(RCe," (M2M100 model)"),RCe.forEach(t),LWe=i(y),_m=n(y,"LI",{});var PCe=s(_m);Woe=n(PCe,"STRONG",{});var lVr=s(Woe);xWe=r(lVr,"marian"),lVr.forEach(t),$We=r(PCe," \u2014 "),qk=n(PCe,"A",{href:!0});var iVr=s(qk);kWe=r(iVr,"MarianConfig"),iVr.forEach(t),SWe=r(PCe," (Marian model)"),PCe.forEach(t),RWe=i(y),um=n(y,"LI",{});var BCe=s(um);Qoe=n(BCe,"STRONG",{});var dVr=s(Qoe);PWe=r(dVr,"maskformer"),dVr.forEach(t),BWe=r(BCe," \u2014 "),Nk=n(BCe,"A",{href:!0});var cVr=s(Nk);IWe=r(cVr,"MaskFormerConfig"),cVr.forEach(t),qWe=r(BCe," (MaskFormer model)"),BCe.forEach(t),NWe=i(y),bm=n(y,"LI",{});var ICe=s(bm);Hoe=n(ICe,"STRONG",{});var fVr=s(Hoe);jWe=r(fVr,"mbart"),fVr.forEach(t),DWe=r(ICe," \u2014 "),jk=n(ICe,"A",{href:!0});var mVr=s(jk);GWe=r(mVr,"MBartConfig"),mVr.forEach(t),OWe=r(ICe," (mBART model)"),ICe.forEach(t),VWe=i(y),vm=n(y,"LI",{});var qCe=s(vm);Uoe=n(qCe,"STRONG",{});var gVr=s(Uoe);XWe=r(gVr,"megatron-bert"),gVr.forEach(t),zWe=r(qCe," \u2014 "),Dk=n(qCe,"A",{href:!0});var hVr=s(Dk);WWe=r(hVr,"MegatronBertConfig"),hVr.forEach(t),QWe=r(qCe," (MegatronBert model)"),qCe.forEach(t),HWe=i(y),Fm=n(y,"LI",{});var NCe=s(Fm);Joe=n(NCe,"STRONG",{});var pVr=s(Joe);UWe=r(pVr,"mobilebert"),pVr.forEach(t),JWe=r(NCe," \u2014 "),Gk=n(NCe,"A",{href:!0});var _Vr=s(Gk);YWe=r(_Vr,"MobileBertConfig"),_Vr.forEach(t),KWe=r(NCe," (MobileBERT model)"),NCe.forEach(t),ZWe=i(y),Tm=n(y,"LI",{});var jCe=s(Tm);Yoe=n(jCe,"STRONG",{});var uVr=s(Yoe);eQe=r(uVr,"mobilevit"),uVr.forEach(t),oQe=r(jCe," \u2014 "),Ok=n(jCe,"A",{href:!0});var bVr=s(Ok);rQe=r(bVr,"MobileViTConfig"),bVr.forEach(t),tQe=r(jCe," (MobileViT model)"),jCe.forEach(t),aQe=i(y),Mm=n(y,"LI",{});var DCe=s(Mm);Koe=n(DCe,"STRONG",{});var vVr=s(Koe);nQe=r(vVr,"mpnet"),vVr.forEach(t),sQe=r(DCe," \u2014 "),Vk=n(DCe,"A",{href:!0});var FVr=s(Vk);lQe=r(FVr,"MPNetConfig"),FVr.forEach(t),iQe=r(DCe," (MPNet model)"),DCe.forEach(t),dQe=i(y),Em=n(y,"LI",{});var GCe=s(Em);Zoe=n(GCe,"STRONG",{});var TVr=s(Zoe);cQe=r(TVr,"mt5"),TVr.forEach(t),fQe=r(GCe," \u2014 "),Xk=n(GCe,"A",{href:!0});var MVr=s(Xk);mQe=r(MVr,"MT5Config"),MVr.forEach(t),gQe=r(GCe," (mT5 model)"),GCe.forEach(t),hQe=i(y),Cm=n(y,"LI",{});var OCe=s(Cm);ere=n(OCe,"STRONG",{});var EVr=s(ere);pQe=r(EVr,"nystromformer"),EVr.forEach(t),_Qe=r(OCe," \u2014 "),zk=n(OCe,"A",{href:!0});var CVr=s(zk);uQe=r(CVr,"NystromformerConfig"),CVr.forEach(t),bQe=r(OCe," (Nystromformer model)"),OCe.forEach(t),vQe=i(y),wm=n(y,"LI",{});var VCe=s(wm);ore=n(VCe,"STRONG",{});var wVr=s(ore);FQe=r(wVr,"openai-gpt"),wVr.forEach(t),TQe=r(VCe," \u2014 "),Wk=n(VCe,"A",{href:!0});var AVr=s(Wk);MQe=r(AVr,"OpenAIGPTConfig"),AVr.forEach(t),EQe=r(VCe," (OpenAI GPT model)"),VCe.forEach(t),CQe=i(y),Am=n(y,"LI",{});var XCe=s(Am);rre=n(XCe,"STRONG",{});var yVr=s(rre);wQe=r(yVr,"opt"),yVr.forEach(t),AQe=r(XCe," \u2014 "),Qk=n(XCe,"A",{href:!0});var LVr=s(Qk);yQe=r(LVr,"OPTConfig"),LVr.forEach(t),LQe=r(XCe," (OPT model)"),XCe.forEach(t),xQe=i(y),ym=n(y,"LI",{});var zCe=s(ym);tre=n(zCe,"STRONG",{});var xVr=s(tre);$Qe=r(xVr,"pegasus"),xVr.forEach(t),kQe=r(zCe," \u2014 "),Hk=n(zCe,"A",{href:!0});var $Vr=s(Hk);SQe=r($Vr,"PegasusConfig"),$Vr.forEach(t),RQe=r(zCe," (Pegasus model)"),zCe.forEach(t),PQe=i(y),Lm=n(y,"LI",{});var WCe=s(Lm);are=n(WCe,"STRONG",{});var kVr=s(are);BQe=r(kVr,"perceiver"),kVr.forEach(t),IQe=r(WCe," \u2014 "),Uk=n(WCe,"A",{href:!0});var SVr=s(Uk);qQe=r(SVr,"PerceiverConfig"),SVr.forEach(t),NQe=r(WCe," (Perceiver model)"),WCe.forEach(t),jQe=i(y),xm=n(y,"LI",{});var QCe=s(xm);nre=n(QCe,"STRONG",{});var RVr=s(nre);DQe=r(RVr,"plbart"),RVr.forEach(t),GQe=r(QCe," \u2014 "),Jk=n(QCe,"A",{href:!0});var PVr=s(Jk);OQe=r(PVr,"PLBartConfig"),PVr.forEach(t),VQe=r(QCe," (PLBart model)"),QCe.forEach(t),XQe=i(y),$m=n(y,"LI",{});var HCe=s($m);sre=n(HCe,"STRONG",{});var BVr=s(sre);zQe=r(BVr,"poolformer"),BVr.forEach(t),WQe=r(HCe," \u2014 "),Yk=n(HCe,"A",{href:!0});var IVr=s(Yk);QQe=r(IVr,"PoolFormerConfig"),IVr.forEach(t),HQe=r(HCe," (PoolFormer model)"),HCe.forEach(t),UQe=i(y),km=n(y,"LI",{});var UCe=s(km);lre=n(UCe,"STRONG",{});var qVr=s(lre);JQe=r(qVr,"prophetnet"),qVr.forEach(t),YQe=r(UCe," \u2014 "),Kk=n(UCe,"A",{href:!0});var NVr=s(Kk);KQe=r(NVr,"ProphetNetConfig"),NVr.forEach(t),ZQe=r(UCe," (ProphetNet model)"),UCe.forEach(t),eHe=i(y),Sm=n(y,"LI",{});var JCe=s(Sm);ire=n(JCe,"STRONG",{});var jVr=s(ire);oHe=r(jVr,"qdqbert"),jVr.forEach(t),rHe=r(JCe," \u2014 "),Zk=n(JCe,"A",{href:!0});var DVr=s(Zk);tHe=r(DVr,"QDQBertConfig"),DVr.forEach(t),aHe=r(JCe," (QDQBert model)"),JCe.forEach(t),nHe=i(y),Rm=n(y,"LI",{});var YCe=s(Rm);dre=n(YCe,"STRONG",{});var GVr=s(dre);sHe=r(GVr,"rag"),GVr.forEach(t),lHe=r(YCe," \u2014 "),eS=n(YCe,"A",{href:!0});var OVr=s(eS);iHe=r(OVr,"RagConfig"),OVr.forEach(t),dHe=r(YCe," (RAG model)"),YCe.forEach(t),cHe=i(y),Pm=n(y,"LI",{});var KCe=s(Pm);cre=n(KCe,"STRONG",{});var VVr=s(cre);fHe=r(VVr,"realm"),VVr.forEach(t),mHe=r(KCe," \u2014 "),oS=n(KCe,"A",{href:!0});var XVr=s(oS);gHe=r(XVr,"RealmConfig"),XVr.forEach(t),hHe=r(KCe," (Realm model)"),KCe.forEach(t),pHe=i(y),Bm=n(y,"LI",{});var ZCe=s(Bm);fre=n(ZCe,"STRONG",{});var zVr=s(fre);_He=r(zVr,"reformer"),zVr.forEach(t),uHe=r(ZCe," \u2014 "),rS=n(ZCe,"A",{href:!0});var WVr=s(rS);bHe=r(WVr,"ReformerConfig"),WVr.forEach(t),vHe=r(ZCe," (Reformer model)"),ZCe.forEach(t),FHe=i(y),Im=n(y,"LI",{});var e3e=s(Im);mre=n(e3e,"STRONG",{});var QVr=s(mre);THe=r(QVr,"regnet"),QVr.forEach(t),MHe=r(e3e," \u2014 "),tS=n(e3e,"A",{href:!0});var HVr=s(tS);EHe=r(HVr,"RegNetConfig"),HVr.forEach(t),CHe=r(e3e," (RegNet model)"),e3e.forEach(t),wHe=i(y),qm=n(y,"LI",{});var o3e=s(qm);gre=n(o3e,"STRONG",{});var UVr=s(gre);AHe=r(UVr,"rembert"),UVr.forEach(t),yHe=r(o3e," \u2014 "),aS=n(o3e,"A",{href:!0});var JVr=s(aS);LHe=r(JVr,"RemBertConfig"),JVr.forEach(t),xHe=r(o3e," (RemBERT model)"),o3e.forEach(t),$He=i(y),Nm=n(y,"LI",{});var r3e=s(Nm);hre=n(r3e,"STRONG",{});var YVr=s(hre);kHe=r(YVr,"resnet"),YVr.forEach(t),SHe=r(r3e," \u2014 "),nS=n(r3e,"A",{href:!0});var KVr=s(nS);RHe=r(KVr,"ResNetConfig"),KVr.forEach(t),PHe=r(r3e," (ResNet model)"),r3e.forEach(t),BHe=i(y),jm=n(y,"LI",{});var t3e=s(jm);pre=n(t3e,"STRONG",{});var ZVr=s(pre);IHe=r(ZVr,"retribert"),ZVr.forEach(t),qHe=r(t3e," \u2014 "),sS=n(t3e,"A",{href:!0});var eXr=s(sS);NHe=r(eXr,"RetriBertConfig"),eXr.forEach(t),jHe=r(t3e," (RetriBERT model)"),t3e.forEach(t),DHe=i(y),Dm=n(y,"LI",{});var a3e=s(Dm);_re=n(a3e,"STRONG",{});var oXr=s(_re);GHe=r(oXr,"roberta"),oXr.forEach(t),OHe=r(a3e," \u2014 "),lS=n(a3e,"A",{href:!0});var rXr=s(lS);VHe=r(rXr,"RobertaConfig"),rXr.forEach(t),XHe=r(a3e," (RoBERTa model)"),a3e.forEach(t),zHe=i(y),Gm=n(y,"LI",{});var n3e=s(Gm);ure=n(n3e,"STRONG",{});var tXr=s(ure);WHe=r(tXr,"roformer"),tXr.forEach(t),QHe=r(n3e," \u2014 "),iS=n(n3e,"A",{href:!0});var aXr=s(iS);HHe=r(aXr,"RoFormerConfig"),aXr.forEach(t),UHe=r(n3e," (RoFormer model)"),n3e.forEach(t),JHe=i(y),Om=n(y,"LI",{});var s3e=s(Om);bre=n(s3e,"STRONG",{});var nXr=s(bre);YHe=r(nXr,"segformer"),nXr.forEach(t),KHe=r(s3e," \u2014 "),dS=n(s3e,"A",{href:!0});var sXr=s(dS);ZHe=r(sXr,"SegformerConfig"),sXr.forEach(t),eUe=r(s3e," (SegFormer model)"),s3e.forEach(t),oUe=i(y),Vm=n(y,"LI",{});var l3e=s(Vm);vre=n(l3e,"STRONG",{});var lXr=s(vre);rUe=r(lXr,"sew"),lXr.forEach(t),tUe=r(l3e," \u2014 "),cS=n(l3e,"A",{href:!0});var iXr=s(cS);aUe=r(iXr,"SEWConfig"),iXr.forEach(t),nUe=r(l3e," (SEW model)"),l3e.forEach(t),sUe=i(y),Xm=n(y,"LI",{});var i3e=s(Xm);Fre=n(i3e,"STRONG",{});var dXr=s(Fre);lUe=r(dXr,"sew-d"),dXr.forEach(t),iUe=r(i3e," \u2014 "),fS=n(i3e,"A",{href:!0});var cXr=s(fS);dUe=r(cXr,"SEWDConfig"),cXr.forEach(t),cUe=r(i3e," (SEW-D model)"),i3e.forEach(t),fUe=i(y),zm=n(y,"LI",{});var d3e=s(zm);Tre=n(d3e,"STRONG",{});var fXr=s(Tre);mUe=r(fXr,"speech-encoder-decoder"),fXr.forEach(t),gUe=r(d3e," \u2014 "),mS=n(d3e,"A",{href:!0});var mXr=s(mS);hUe=r(mXr,"SpeechEncoderDecoderConfig"),mXr.forEach(t),pUe=r(d3e," (Speech Encoder decoder model)"),d3e.forEach(t),_Ue=i(y),Wm=n(y,"LI",{});var c3e=s(Wm);Mre=n(c3e,"STRONG",{});var gXr=s(Mre);uUe=r(gXr,"speech_to_text"),gXr.forEach(t),bUe=r(c3e," \u2014 "),gS=n(c3e,"A",{href:!0});var hXr=s(gS);vUe=r(hXr,"Speech2TextConfig"),hXr.forEach(t),FUe=r(c3e," (Speech2Text model)"),c3e.forEach(t),TUe=i(y),Qm=n(y,"LI",{});var f3e=s(Qm);Ere=n(f3e,"STRONG",{});var pXr=s(Ere);MUe=r(pXr,"speech_to_text_2"),pXr.forEach(t),EUe=r(f3e," \u2014 "),hS=n(f3e,"A",{href:!0});var _Xr=s(hS);CUe=r(_Xr,"Speech2Text2Config"),_Xr.forEach(t),wUe=r(f3e," (Speech2Text2 model)"),f3e.forEach(t),AUe=i(y),Hm=n(y,"LI",{});var m3e=s(Hm);Cre=n(m3e,"STRONG",{});var uXr=s(Cre);yUe=r(uXr,"splinter"),uXr.forEach(t),LUe=r(m3e," \u2014 "),pS=n(m3e,"A",{href:!0});var bXr=s(pS);xUe=r(bXr,"SplinterConfig"),bXr.forEach(t),$Ue=r(m3e," (Splinter model)"),m3e.forEach(t),kUe=i(y),Um=n(y,"LI",{});var g3e=s(Um);wre=n(g3e,"STRONG",{});var vXr=s(wre);SUe=r(vXr,"squeezebert"),vXr.forEach(t),RUe=r(g3e," \u2014 "),_S=n(g3e,"A",{href:!0});var FXr=s(_S);PUe=r(FXr,"SqueezeBertConfig"),FXr.forEach(t),BUe=r(g3e," (SqueezeBERT model)"),g3e.forEach(t),IUe=i(y),Jm=n(y,"LI",{});var h3e=s(Jm);Are=n(h3e,"STRONG",{});var TXr=s(Are);qUe=r(TXr,"swin"),TXr.forEach(t),NUe=r(h3e," \u2014 "),uS=n(h3e,"A",{href:!0});var MXr=s(uS);jUe=r(MXr,"SwinConfig"),MXr.forEach(t),DUe=r(h3e," (Swin model)"),h3e.forEach(t),GUe=i(y),Ym=n(y,"LI",{});var p3e=s(Ym);yre=n(p3e,"STRONG",{});var EXr=s(yre);OUe=r(EXr,"t5"),EXr.forEach(t),VUe=r(p3e," \u2014 "),bS=n(p3e,"A",{href:!0});var CXr=s(bS);XUe=r(CXr,"T5Config"),CXr.forEach(t),zUe=r(p3e," (T5 model)"),p3e.forEach(t),WUe=i(y),Km=n(y,"LI",{});var _3e=s(Km);Lre=n(_3e,"STRONG",{});var wXr=s(Lre);QUe=r(wXr,"tapas"),wXr.forEach(t),HUe=r(_3e," \u2014 "),vS=n(_3e,"A",{href:!0});var AXr=s(vS);UUe=r(AXr,"TapasConfig"),AXr.forEach(t),JUe=r(_3e," (TAPAS model)"),_3e.forEach(t),YUe=i(y),Zm=n(y,"LI",{});var u3e=s(Zm);xre=n(u3e,"STRONG",{});var yXr=s(xre);KUe=r(yXr,"trajectory_transformer"),yXr.forEach(t),ZUe=r(u3e," \u2014 "),FS=n(u3e,"A",{href:!0});var LXr=s(FS);eJe=r(LXr,"TrajectoryTransformerConfig"),LXr.forEach(t),oJe=r(u3e," (Trajectory Transformer model)"),u3e.forEach(t),rJe=i(y),eg=n(y,"LI",{});var b3e=s(eg);$re=n(b3e,"STRONG",{});var xXr=s($re);tJe=r(xXr,"transfo-xl"),xXr.forEach(t),aJe=r(b3e," \u2014 "),TS=n(b3e,"A",{href:!0});var $Xr=s(TS);nJe=r($Xr,"TransfoXLConfig"),$Xr.forEach(t),sJe=r(b3e," (Transformer-XL model)"),b3e.forEach(t),lJe=i(y),og=n(y,"LI",{});var v3e=s(og);kre=n(v3e,"STRONG",{});var kXr=s(kre);iJe=r(kXr,"trocr"),kXr.forEach(t),dJe=r(v3e," \u2014 "),MS=n(v3e,"A",{href:!0});var SXr=s(MS);cJe=r(SXr,"TrOCRConfig"),SXr.forEach(t),fJe=r(v3e," (TrOCR model)"),v3e.forEach(t),mJe=i(y),rg=n(y,"LI",{});var F3e=s(rg);Sre=n(F3e,"STRONG",{});var RXr=s(Sre);gJe=r(RXr,"unispeech"),RXr.forEach(t),hJe=r(F3e," \u2014 "),ES=n(F3e,"A",{href:!0});var PXr=s(ES);pJe=r(PXr,"UniSpeechConfig"),PXr.forEach(t),_Je=r(F3e," (UniSpeech model)"),F3e.forEach(t),uJe=i(y),tg=n(y,"LI",{});var T3e=s(tg);Rre=n(T3e,"STRONG",{});var BXr=s(Rre);bJe=r(BXr,"unispeech-sat"),BXr.forEach(t),vJe=r(T3e," \u2014 "),CS=n(T3e,"A",{href:!0});var IXr=s(CS);FJe=r(IXr,"UniSpeechSatConfig"),IXr.forEach(t),TJe=r(T3e," (UniSpeechSat model)"),T3e.forEach(t),MJe=i(y),ag=n(y,"LI",{});var M3e=s(ag);Pre=n(M3e,"STRONG",{});var qXr=s(Pre);EJe=r(qXr,"van"),qXr.forEach(t),CJe=r(M3e," \u2014 "),wS=n(M3e,"A",{href:!0});var NXr=s(wS);wJe=r(NXr,"VanConfig"),NXr.forEach(t),AJe=r(M3e," (VAN model)"),M3e.forEach(t),yJe=i(y),ng=n(y,"LI",{});var E3e=s(ng);Bre=n(E3e,"STRONG",{});var jXr=s(Bre);LJe=r(jXr,"vilt"),jXr.forEach(t),xJe=r(E3e," \u2014 "),AS=n(E3e,"A",{href:!0});var DXr=s(AS);$Je=r(DXr,"ViltConfig"),DXr.forEach(t),kJe=r(E3e," (ViLT model)"),E3e.forEach(t),SJe=i(y),sg=n(y,"LI",{});var C3e=s(sg);Ire=n(C3e,"STRONG",{});var GXr=s(Ire);RJe=r(GXr,"vision-encoder-decoder"),GXr.forEach(t),PJe=r(C3e," \u2014 "),yS=n(C3e,"A",{href:!0});var OXr=s(yS);BJe=r(OXr,"VisionEncoderDecoderConfig"),OXr.forEach(t),IJe=r(C3e," (Vision Encoder decoder model)"),C3e.forEach(t),qJe=i(y),lg=n(y,"LI",{});var w3e=s(lg);qre=n(w3e,"STRONG",{});var VXr=s(qre);NJe=r(VXr,"vision-text-dual-encoder"),VXr.forEach(t),jJe=r(w3e," \u2014 "),LS=n(w3e,"A",{href:!0});var XXr=s(LS);DJe=r(XXr,"VisionTextDualEncoderConfig"),XXr.forEach(t),GJe=r(w3e," (VisionTextDualEncoder model)"),w3e.forEach(t),OJe=i(y),ig=n(y,"LI",{});var A3e=s(ig);Nre=n(A3e,"STRONG",{});var zXr=s(Nre);VJe=r(zXr,"visual_bert"),zXr.forEach(t),XJe=r(A3e," \u2014 "),xS=n(A3e,"A",{href:!0});var WXr=s(xS);zJe=r(WXr,"VisualBertConfig"),WXr.forEach(t),WJe=r(A3e," (VisualBert model)"),A3e.forEach(t),QJe=i(y),dg=n(y,"LI",{});var y3e=s(dg);jre=n(y3e,"STRONG",{});var QXr=s(jre);HJe=r(QXr,"vit"),QXr.forEach(t),UJe=r(y3e," \u2014 "),$S=n(y3e,"A",{href:!0});var HXr=s($S);JJe=r(HXr,"ViTConfig"),HXr.forEach(t),YJe=r(y3e," (ViT model)"),y3e.forEach(t),KJe=i(y),cg=n(y,"LI",{});var L3e=s(cg);Dre=n(L3e,"STRONG",{});var UXr=s(Dre);ZJe=r(UXr,"vit_mae"),UXr.forEach(t),eYe=r(L3e," \u2014 "),kS=n(L3e,"A",{href:!0});var JXr=s(kS);oYe=r(JXr,"ViTMAEConfig"),JXr.forEach(t),rYe=r(L3e," (ViTMAE model)"),L3e.forEach(t),tYe=i(y),fg=n(y,"LI",{});var x3e=s(fg);Gre=n(x3e,"STRONG",{});var YXr=s(Gre);aYe=r(YXr,"wav2vec2"),YXr.forEach(t),nYe=r(x3e," \u2014 "),SS=n(x3e,"A",{href:!0});var KXr=s(SS);sYe=r(KXr,"Wav2Vec2Config"),KXr.forEach(t),lYe=r(x3e," (Wav2Vec2 model)"),x3e.forEach(t),iYe=i(y),mg=n(y,"LI",{});var $3e=s(mg);Ore=n($3e,"STRONG",{});var ZXr=s(Ore);dYe=r(ZXr,"wav2vec2-conformer"),ZXr.forEach(t),cYe=r($3e," \u2014 "),RS=n($3e,"A",{href:!0});var ezr=s(RS);fYe=r(ezr,"Wav2Vec2ConformerConfig"),ezr.forEach(t),mYe=r($3e," (Wav2Vec2-Conformer model)"),$3e.forEach(t),gYe=i(y),gg=n(y,"LI",{});var k3e=s(gg);Vre=n(k3e,"STRONG",{});var ozr=s(Vre);hYe=r(ozr,"wavlm"),ozr.forEach(t),pYe=r(k3e," \u2014 "),PS=n(k3e,"A",{href:!0});var rzr=s(PS);_Ye=r(rzr,"WavLMConfig"),rzr.forEach(t),uYe=r(k3e," (WavLM model)"),k3e.forEach(t),bYe=i(y),hg=n(y,"LI",{});var S3e=s(hg);Xre=n(S3e,"STRONG",{});var tzr=s(Xre);vYe=r(tzr,"xglm"),tzr.forEach(t),FYe=r(S3e," \u2014 "),BS=n(S3e,"A",{href:!0});var azr=s(BS);TYe=r(azr,"XGLMConfig"),azr.forEach(t),MYe=r(S3e," (XGLM model)"),S3e.forEach(t),EYe=i(y),pg=n(y,"LI",{});var R3e=s(pg);zre=n(R3e,"STRONG",{});var nzr=s(zre);CYe=r(nzr,"xlm"),nzr.forEach(t),wYe=r(R3e," \u2014 "),IS=n(R3e,"A",{href:!0});var szr=s(IS);AYe=r(szr,"XLMConfig"),szr.forEach(t),yYe=r(R3e," (XLM model)"),R3e.forEach(t),LYe=i(y),_g=n(y,"LI",{});var P3e=s(_g);Wre=n(P3e,"STRONG",{});var lzr=s(Wre);xYe=r(lzr,"xlm-prophetnet"),lzr.forEach(t),$Ye=r(P3e," \u2014 "),qS=n(P3e,"A",{href:!0});var izr=s(qS);kYe=r(izr,"XLMProphetNetConfig"),izr.forEach(t),SYe=r(P3e," (XLMProphetNet model)"),P3e.forEach(t),RYe=i(y),ug=n(y,"LI",{});var B3e=s(ug);Qre=n(B3e,"STRONG",{});var dzr=s(Qre);PYe=r(dzr,"xlm-roberta"),dzr.forEach(t),BYe=r(B3e," \u2014 "),NS=n(B3e,"A",{href:!0});var czr=s(NS);IYe=r(czr,"XLMRobertaConfig"),czr.forEach(t),qYe=r(B3e," (XLM-RoBERTa model)"),B3e.forEach(t),NYe=i(y),bg=n(y,"LI",{});var I3e=s(bg);Hre=n(I3e,"STRONG",{});var fzr=s(Hre);jYe=r(fzr,"xlm-roberta-xl"),fzr.forEach(t),DYe=r(I3e," \u2014 "),jS=n(I3e,"A",{href:!0});var mzr=s(jS);GYe=r(mzr,"XLMRobertaXLConfig"),mzr.forEach(t),OYe=r(I3e," (XLM-RoBERTa-XL model)"),I3e.forEach(t),VYe=i(y),vg=n(y,"LI",{});var q3e=s(vg);Ure=n(q3e,"STRONG",{});var gzr=s(Ure);XYe=r(gzr,"xlnet"),gzr.forEach(t),zYe=r(q3e," \u2014 "),DS=n(q3e,"A",{href:!0});var hzr=s(DS);WYe=r(hzr,"XLNetConfig"),hzr.forEach(t),QYe=r(q3e," (XLNet model)"),q3e.forEach(t),HYe=i(y),Fg=n(y,"LI",{});var N3e=s(Fg);Jre=n(N3e,"STRONG",{});var pzr=s(Jre);UYe=r(pzr,"yolos"),pzr.forEach(t),JYe=r(N3e," \u2014 "),GS=n(N3e,"A",{href:!0});var _zr=s(GS);YYe=r(_zr,"YolosConfig"),_zr.forEach(t),KYe=r(N3e," (YOLOS model)"),N3e.forEach(t),ZYe=i(y),Tg=n(y,"LI",{});var j3e=s(Tg);Yre=n(j3e,"STRONG",{});var uzr=s(Yre);eKe=r(uzr,"yoso"),uzr.forEach(t),oKe=r(j3e," \u2014 "),OS=n(j3e,"A",{href:!0});var bzr=s(OS);rKe=r(bzr,"YosoConfig"),bzr.forEach(t),tKe=r(j3e," (YOSO model)"),j3e.forEach(t),y.forEach(t),aKe=i(rt),T(Mg.$$.fragment,rt),rt.forEach(t),nKe=i(ot),Eg=n(ot,"DIV",{class:!0});var Eje=s(Eg);T(AA.$$.fragment,Eje),sKe=i(Eje),Kre=n(Eje,"P",{});var vzr=s(Kre);lKe=r(vzr,"Register a new configuration for this class."),vzr.forEach(t),Eje.forEach(t),ot.forEach(t),Aqe=i(f),Ti=n(f,"H2",{class:!0});var Cje=s(Ti);Cg=n(Cje,"A",{id:!0,class:!0,href:!0});var Fzr=s(Cg);Zre=n(Fzr,"SPAN",{});var Tzr=s(Zre);T(yA.$$.fragment,Tzr),Tzr.forEach(t),Fzr.forEach(t),iKe=i(Cje),ete=n(Cje,"SPAN",{});var Mzr=s(ete);dKe=r(Mzr,"AutoTokenizer"),Mzr.forEach(t),Cje.forEach(t),yqe=i(f),wo=n(f,"DIV",{class:!0});var Is=s(wo);T(LA.$$.fragment,Is),cKe=i(Is),xA=n(Is,"P",{});var wje=s(xA);fKe=r(wje,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),VS=n(wje,"A",{href:!0});var Ezr=s(VS);mKe=r(Ezr,"AutoTokenizer.from_pretrained()"),Ezr.forEach(t),gKe=r(wje," class method."),wje.forEach(t),hKe=i(Is),$A=n(Is,"P",{});var Aje=s($A);pKe=r(Aje,"This class cannot be instantiated directly using "),ote=n(Aje,"CODE",{});var Czr=s(ote);_Ke=r(Czr,"__init__()"),Czr.forEach(t),uKe=r(Aje," (throws an error)."),Aje.forEach(t),bKe=i(Is),Cr=n(Is,"DIV",{class:!0});var qs=s(Cr);T(kA.$$.fragment,qs),vKe=i(qs),rte=n(qs,"P",{});var wzr=s(rte);FKe=r(wzr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),wzr.forEach(t),TKe=i(qs),ya=n(qs,"P",{});var Mw=s(ya);MKe=r(Mw,"The tokenizer class to instantiate is selected based on the "),tte=n(Mw,"CODE",{});var Azr=s(tte);EKe=r(Azr,"model_type"),Azr.forEach(t),CKe=r(Mw,` property of the config object (either
passed as an argument or loaded from `),ate=n(Mw,"CODE",{});var yzr=s(ate);wKe=r(yzr,"pretrained_model_name_or_path"),yzr.forEach(t),AKe=r(Mw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nte=n(Mw,"CODE",{});var Lzr=s(nte);yKe=r(Lzr,"pretrained_model_name_or_path"),Lzr.forEach(t),LKe=r(Mw,":"),Mw.forEach(t),xKe=i(qs),k=n(qs,"UL",{});var S=s(k);Sn=n(S,"LI",{});var Sx=s(Sn);ste=n(Sx,"STRONG",{});var xzr=s(ste);$Ke=r(xzr,"albert"),xzr.forEach(t),kKe=r(Sx," \u2014 "),XS=n(Sx,"A",{href:!0});var $zr=s(XS);SKe=r($zr,"AlbertTokenizer"),$zr.forEach(t),RKe=r(Sx," or "),zS=n(Sx,"A",{href:!0});var kzr=s(zS);PKe=r(kzr,"AlbertTokenizerFast"),kzr.forEach(t),BKe=r(Sx," (ALBERT model)"),Sx.forEach(t),IKe=i(S),Rn=n(S,"LI",{});var Rx=s(Rn);lte=n(Rx,"STRONG",{});var Szr=s(lte);qKe=r(Szr,"bart"),Szr.forEach(t),NKe=r(Rx," \u2014 "),WS=n(Rx,"A",{href:!0});var Rzr=s(WS);jKe=r(Rzr,"BartTokenizer"),Rzr.forEach(t),DKe=r(Rx," or "),QS=n(Rx,"A",{href:!0});var Pzr=s(QS);GKe=r(Pzr,"BartTokenizerFast"),Pzr.forEach(t),OKe=r(Rx," (BART model)"),Rx.forEach(t),VKe=i(S),Pn=n(S,"LI",{});var Px=s(Pn);ite=n(Px,"STRONG",{});var Bzr=s(ite);XKe=r(Bzr,"barthez"),Bzr.forEach(t),zKe=r(Px," \u2014 "),HS=n(Px,"A",{href:!0});var Izr=s(HS);WKe=r(Izr,"BarthezTokenizer"),Izr.forEach(t),QKe=r(Px," or "),US=n(Px,"A",{href:!0});var qzr=s(US);HKe=r(qzr,"BarthezTokenizerFast"),qzr.forEach(t),UKe=r(Px," (BARThez model)"),Px.forEach(t),JKe=i(S),wg=n(S,"LI",{});var D3e=s(wg);dte=n(D3e,"STRONG",{});var Nzr=s(dte);YKe=r(Nzr,"bartpho"),Nzr.forEach(t),KKe=r(D3e," \u2014 "),JS=n(D3e,"A",{href:!0});var jzr=s(JS);ZKe=r(jzr,"BartphoTokenizer"),jzr.forEach(t),eZe=r(D3e," (BARTpho model)"),D3e.forEach(t),oZe=i(S),Bn=n(S,"LI",{});var Bx=s(Bn);cte=n(Bx,"STRONG",{});var Dzr=s(cte);rZe=r(Dzr,"bert"),Dzr.forEach(t),tZe=r(Bx," \u2014 "),YS=n(Bx,"A",{href:!0});var Gzr=s(YS);aZe=r(Gzr,"BertTokenizer"),Gzr.forEach(t),nZe=r(Bx," or "),KS=n(Bx,"A",{href:!0});var Ozr=s(KS);sZe=r(Ozr,"BertTokenizerFast"),Ozr.forEach(t),lZe=r(Bx," (BERT model)"),Bx.forEach(t),iZe=i(S),Ag=n(S,"LI",{});var G3e=s(Ag);fte=n(G3e,"STRONG",{});var Vzr=s(fte);dZe=r(Vzr,"bert-generation"),Vzr.forEach(t),cZe=r(G3e," \u2014 "),ZS=n(G3e,"A",{href:!0});var Xzr=s(ZS);fZe=r(Xzr,"BertGenerationTokenizer"),Xzr.forEach(t),mZe=r(G3e," (Bert Generation model)"),G3e.forEach(t),gZe=i(S),yg=n(S,"LI",{});var O3e=s(yg);mte=n(O3e,"STRONG",{});var zzr=s(mte);hZe=r(zzr,"bert-japanese"),zzr.forEach(t),pZe=r(O3e," \u2014 "),eR=n(O3e,"A",{href:!0});var Wzr=s(eR);_Ze=r(Wzr,"BertJapaneseTokenizer"),Wzr.forEach(t),uZe=r(O3e," (BertJapanese model)"),O3e.forEach(t),bZe=i(S),Lg=n(S,"LI",{});var V3e=s(Lg);gte=n(V3e,"STRONG",{});var Qzr=s(gte);vZe=r(Qzr,"bertweet"),Qzr.forEach(t),FZe=r(V3e," \u2014 "),oR=n(V3e,"A",{href:!0});var Hzr=s(oR);TZe=r(Hzr,"BertweetTokenizer"),Hzr.forEach(t),MZe=r(V3e," (Bertweet model)"),V3e.forEach(t),EZe=i(S),In=n(S,"LI",{});var Ix=s(In);hte=n(Ix,"STRONG",{});var Uzr=s(hte);CZe=r(Uzr,"big_bird"),Uzr.forEach(t),wZe=r(Ix," \u2014 "),rR=n(Ix,"A",{href:!0});var Jzr=s(rR);AZe=r(Jzr,"BigBirdTokenizer"),Jzr.forEach(t),yZe=r(Ix," or "),tR=n(Ix,"A",{href:!0});var Yzr=s(tR);LZe=r(Yzr,"BigBirdTokenizerFast"),Yzr.forEach(t),xZe=r(Ix," (BigBird model)"),Ix.forEach(t),$Ze=i(S),qn=n(S,"LI",{});var qx=s(qn);pte=n(qx,"STRONG",{});var Kzr=s(pte);kZe=r(Kzr,"bigbird_pegasus"),Kzr.forEach(t),SZe=r(qx," \u2014 "),aR=n(qx,"A",{href:!0});var Zzr=s(aR);RZe=r(Zzr,"PegasusTokenizer"),Zzr.forEach(t),PZe=r(qx," or "),nR=n(qx,"A",{href:!0});var eWr=s(nR);BZe=r(eWr,"PegasusTokenizerFast"),eWr.forEach(t),IZe=r(qx," (BigBirdPegasus model)"),qx.forEach(t),qZe=i(S),Nn=n(S,"LI",{});var Nx=s(Nn);_te=n(Nx,"STRONG",{});var oWr=s(_te);NZe=r(oWr,"blenderbot"),oWr.forEach(t),jZe=r(Nx," \u2014 "),sR=n(Nx,"A",{href:!0});var rWr=s(sR);DZe=r(rWr,"BlenderbotTokenizer"),rWr.forEach(t),GZe=r(Nx," or "),lR=n(Nx,"A",{href:!0});var tWr=s(lR);OZe=r(tWr,"BlenderbotTokenizerFast"),tWr.forEach(t),VZe=r(Nx," (Blenderbot model)"),Nx.forEach(t),XZe=i(S),xg=n(S,"LI",{});var X3e=s(xg);ute=n(X3e,"STRONG",{});var aWr=s(ute);zZe=r(aWr,"blenderbot-small"),aWr.forEach(t),WZe=r(X3e," \u2014 "),iR=n(X3e,"A",{href:!0});var nWr=s(iR);QZe=r(nWr,"BlenderbotSmallTokenizer"),nWr.forEach(t),HZe=r(X3e," (BlenderbotSmall model)"),X3e.forEach(t),UZe=i(S),$g=n(S,"LI",{});var z3e=s($g);bte=n(z3e,"STRONG",{});var sWr=s(bte);JZe=r(sWr,"byt5"),sWr.forEach(t),YZe=r(z3e," \u2014 "),dR=n(z3e,"A",{href:!0});var lWr=s(dR);KZe=r(lWr,"ByT5Tokenizer"),lWr.forEach(t),ZZe=r(z3e," (ByT5 model)"),z3e.forEach(t),eeo=i(S),jn=n(S,"LI",{});var jx=s(jn);vte=n(jx,"STRONG",{});var iWr=s(vte);oeo=r(iWr,"camembert"),iWr.forEach(t),reo=r(jx," \u2014 "),cR=n(jx,"A",{href:!0});var dWr=s(cR);teo=r(dWr,"CamembertTokenizer"),dWr.forEach(t),aeo=r(jx," or "),fR=n(jx,"A",{href:!0});var cWr=s(fR);neo=r(cWr,"CamembertTokenizerFast"),cWr.forEach(t),seo=r(jx," (CamemBERT model)"),jx.forEach(t),leo=i(S),kg=n(S,"LI",{});var W3e=s(kg);Fte=n(W3e,"STRONG",{});var fWr=s(Fte);ieo=r(fWr,"canine"),fWr.forEach(t),deo=r(W3e," \u2014 "),mR=n(W3e,"A",{href:!0});var mWr=s(mR);ceo=r(mWr,"CanineTokenizer"),mWr.forEach(t),feo=r(W3e," (Canine model)"),W3e.forEach(t),meo=i(S),Dn=n(S,"LI",{});var Dx=s(Dn);Tte=n(Dx,"STRONG",{});var gWr=s(Tte);geo=r(gWr,"clip"),gWr.forEach(t),heo=r(Dx," \u2014 "),gR=n(Dx,"A",{href:!0});var hWr=s(gR);peo=r(hWr,"CLIPTokenizer"),hWr.forEach(t),_eo=r(Dx," or "),hR=n(Dx,"A",{href:!0});var pWr=s(hR);ueo=r(pWr,"CLIPTokenizerFast"),pWr.forEach(t),beo=r(Dx," (CLIP model)"),Dx.forEach(t),veo=i(S),Gn=n(S,"LI",{});var Gx=s(Gn);Mte=n(Gx,"STRONG",{});var _Wr=s(Mte);Feo=r(_Wr,"convbert"),_Wr.forEach(t),Teo=r(Gx," \u2014 "),pR=n(Gx,"A",{href:!0});var uWr=s(pR);Meo=r(uWr,"ConvBertTokenizer"),uWr.forEach(t),Eeo=r(Gx," or "),_R=n(Gx,"A",{href:!0});var bWr=s(_R);Ceo=r(bWr,"ConvBertTokenizerFast"),bWr.forEach(t),weo=r(Gx," (ConvBERT model)"),Gx.forEach(t),Aeo=i(S),On=n(S,"LI",{});var Ox=s(On);Ete=n(Ox,"STRONG",{});var vWr=s(Ete);yeo=r(vWr,"cpm"),vWr.forEach(t),Leo=r(Ox," \u2014 "),uR=n(Ox,"A",{href:!0});var FWr=s(uR);xeo=r(FWr,"CpmTokenizer"),FWr.forEach(t),$eo=r(Ox," or "),bR=n(Ox,"A",{href:!0});var TWr=s(bR);keo=r(TWr,"CpmTokenizerFast"),TWr.forEach(t),Seo=r(Ox," (CPM model)"),Ox.forEach(t),Reo=i(S),Sg=n(S,"LI",{});var Q3e=s(Sg);Cte=n(Q3e,"STRONG",{});var MWr=s(Cte);Peo=r(MWr,"ctrl"),MWr.forEach(t),Beo=r(Q3e," \u2014 "),vR=n(Q3e,"A",{href:!0});var EWr=s(vR);Ieo=r(EWr,"CTRLTokenizer"),EWr.forEach(t),qeo=r(Q3e," (CTRL model)"),Q3e.forEach(t),Neo=i(S),Vn=n(S,"LI",{});var Vx=s(Vn);wte=n(Vx,"STRONG",{});var CWr=s(wte);jeo=r(CWr,"data2vec-text"),CWr.forEach(t),Deo=r(Vx," \u2014 "),FR=n(Vx,"A",{href:!0});var wWr=s(FR);Geo=r(wWr,"RobertaTokenizer"),wWr.forEach(t),Oeo=r(Vx," or "),TR=n(Vx,"A",{href:!0});var AWr=s(TR);Veo=r(AWr,"RobertaTokenizerFast"),AWr.forEach(t),Xeo=r(Vx," (Data2VecText model)"),Vx.forEach(t),zeo=i(S),Xn=n(S,"LI",{});var Xx=s(Xn);Ate=n(Xx,"STRONG",{});var yWr=s(Ate);Weo=r(yWr,"deberta"),yWr.forEach(t),Qeo=r(Xx," \u2014 "),MR=n(Xx,"A",{href:!0});var LWr=s(MR);Heo=r(LWr,"DebertaTokenizer"),LWr.forEach(t),Ueo=r(Xx," or "),ER=n(Xx,"A",{href:!0});var xWr=s(ER);Jeo=r(xWr,"DebertaTokenizerFast"),xWr.forEach(t),Yeo=r(Xx," (DeBERTa model)"),Xx.forEach(t),Keo=i(S),zn=n(S,"LI",{});var zx=s(zn);yte=n(zx,"STRONG",{});var $Wr=s(yte);Zeo=r($Wr,"deberta-v2"),$Wr.forEach(t),eoo=r(zx," \u2014 "),CR=n(zx,"A",{href:!0});var kWr=s(CR);ooo=r(kWr,"DebertaV2Tokenizer"),kWr.forEach(t),roo=r(zx," or "),wR=n(zx,"A",{href:!0});var SWr=s(wR);too=r(SWr,"DebertaV2TokenizerFast"),SWr.forEach(t),aoo=r(zx," (DeBERTa-v2 model)"),zx.forEach(t),noo=i(S),Wn=n(S,"LI",{});var Wx=s(Wn);Lte=n(Wx,"STRONG",{});var RWr=s(Lte);soo=r(RWr,"distilbert"),RWr.forEach(t),loo=r(Wx," \u2014 "),AR=n(Wx,"A",{href:!0});var PWr=s(AR);ioo=r(PWr,"DistilBertTokenizer"),PWr.forEach(t),doo=r(Wx," or "),yR=n(Wx,"A",{href:!0});var BWr=s(yR);coo=r(BWr,"DistilBertTokenizerFast"),BWr.forEach(t),foo=r(Wx," (DistilBERT model)"),Wx.forEach(t),moo=i(S),Qn=n(S,"LI",{});var Qx=s(Qn);xte=n(Qx,"STRONG",{});var IWr=s(xte);goo=r(IWr,"dpr"),IWr.forEach(t),hoo=r(Qx," \u2014 "),LR=n(Qx,"A",{href:!0});var qWr=s(LR);poo=r(qWr,"DPRQuestionEncoderTokenizer"),qWr.forEach(t),_oo=r(Qx," or "),xR=n(Qx,"A",{href:!0});var NWr=s(xR);uoo=r(NWr,"DPRQuestionEncoderTokenizerFast"),NWr.forEach(t),boo=r(Qx," (DPR model)"),Qx.forEach(t),voo=i(S),Hn=n(S,"LI",{});var Hx=s(Hn);$te=n(Hx,"STRONG",{});var jWr=s($te);Foo=r(jWr,"electra"),jWr.forEach(t),Too=r(Hx," \u2014 "),$R=n(Hx,"A",{href:!0});var DWr=s($R);Moo=r(DWr,"ElectraTokenizer"),DWr.forEach(t),Eoo=r(Hx," or "),kR=n(Hx,"A",{href:!0});var GWr=s(kR);Coo=r(GWr,"ElectraTokenizerFast"),GWr.forEach(t),woo=r(Hx," (ELECTRA model)"),Hx.forEach(t),Aoo=i(S),Rg=n(S,"LI",{});var H3e=s(Rg);kte=n(H3e,"STRONG",{});var OWr=s(kte);yoo=r(OWr,"flaubert"),OWr.forEach(t),Loo=r(H3e," \u2014 "),SR=n(H3e,"A",{href:!0});var VWr=s(SR);xoo=r(VWr,"FlaubertTokenizer"),VWr.forEach(t),$oo=r(H3e," (FlauBERT model)"),H3e.forEach(t),koo=i(S),Un=n(S,"LI",{});var Ux=s(Un);Ste=n(Ux,"STRONG",{});var XWr=s(Ste);Soo=r(XWr,"fnet"),XWr.forEach(t),Roo=r(Ux," \u2014 "),RR=n(Ux,"A",{href:!0});var zWr=s(RR);Poo=r(zWr,"FNetTokenizer"),zWr.forEach(t),Boo=r(Ux," or "),PR=n(Ux,"A",{href:!0});var WWr=s(PR);Ioo=r(WWr,"FNetTokenizerFast"),WWr.forEach(t),qoo=r(Ux," (FNet model)"),Ux.forEach(t),Noo=i(S),Pg=n(S,"LI",{});var U3e=s(Pg);Rte=n(U3e,"STRONG",{});var QWr=s(Rte);joo=r(QWr,"fsmt"),QWr.forEach(t),Doo=r(U3e," \u2014 "),BR=n(U3e,"A",{href:!0});var HWr=s(BR);Goo=r(HWr,"FSMTTokenizer"),HWr.forEach(t),Ooo=r(U3e," (FairSeq Machine-Translation model)"),U3e.forEach(t),Voo=i(S),Jn=n(S,"LI",{});var Jx=s(Jn);Pte=n(Jx,"STRONG",{});var UWr=s(Pte);Xoo=r(UWr,"funnel"),UWr.forEach(t),zoo=r(Jx," \u2014 "),IR=n(Jx,"A",{href:!0});var JWr=s(IR);Woo=r(JWr,"FunnelTokenizer"),JWr.forEach(t),Qoo=r(Jx," or "),qR=n(Jx,"A",{href:!0});var YWr=s(qR);Hoo=r(YWr,"FunnelTokenizerFast"),YWr.forEach(t),Uoo=r(Jx," (Funnel Transformer model)"),Jx.forEach(t),Joo=i(S),Yn=n(S,"LI",{});var Yx=s(Yn);Bte=n(Yx,"STRONG",{});var KWr=s(Bte);Yoo=r(KWr,"gpt2"),KWr.forEach(t),Koo=r(Yx," \u2014 "),NR=n(Yx,"A",{href:!0});var ZWr=s(NR);Zoo=r(ZWr,"GPT2Tokenizer"),ZWr.forEach(t),ero=r(Yx," or "),jR=n(Yx,"A",{href:!0});var eQr=s(jR);oro=r(eQr,"GPT2TokenizerFast"),eQr.forEach(t),rro=r(Yx," (OpenAI GPT-2 model)"),Yx.forEach(t),tro=i(S),Kn=n(S,"LI",{});var Kx=s(Kn);Ite=n(Kx,"STRONG",{});var oQr=s(Ite);aro=r(oQr,"gpt_neo"),oQr.forEach(t),nro=r(Kx," \u2014 "),DR=n(Kx,"A",{href:!0});var rQr=s(DR);sro=r(rQr,"GPT2Tokenizer"),rQr.forEach(t),lro=r(Kx," or "),GR=n(Kx,"A",{href:!0});var tQr=s(GR);iro=r(tQr,"GPT2TokenizerFast"),tQr.forEach(t),dro=r(Kx," (GPT Neo model)"),Kx.forEach(t),cro=i(S),Zn=n(S,"LI",{});var Zx=s(Zn);qte=n(Zx,"STRONG",{});var aQr=s(qte);fro=r(aQr,"gptj"),aQr.forEach(t),mro=r(Zx," \u2014 "),OR=n(Zx,"A",{href:!0});var nQr=s(OR);gro=r(nQr,"GPT2Tokenizer"),nQr.forEach(t),hro=r(Zx," or "),VR=n(Zx,"A",{href:!0});var sQr=s(VR);pro=r(sQr,"GPT2TokenizerFast"),sQr.forEach(t),_ro=r(Zx," (GPT-J model)"),Zx.forEach(t),uro=i(S),es=n(S,"LI",{});var e$=s(es);Nte=n(e$,"STRONG",{});var lQr=s(Nte);bro=r(lQr,"herbert"),lQr.forEach(t),vro=r(e$," \u2014 "),XR=n(e$,"A",{href:!0});var iQr=s(XR);Fro=r(iQr,"HerbertTokenizer"),iQr.forEach(t),Tro=r(e$," or "),zR=n(e$,"A",{href:!0});var dQr=s(zR);Mro=r(dQr,"HerbertTokenizerFast"),dQr.forEach(t),Ero=r(e$," (HerBERT model)"),e$.forEach(t),Cro=i(S),Bg=n(S,"LI",{});var J3e=s(Bg);jte=n(J3e,"STRONG",{});var cQr=s(jte);wro=r(cQr,"hubert"),cQr.forEach(t),Aro=r(J3e," \u2014 "),WR=n(J3e,"A",{href:!0});var fQr=s(WR);yro=r(fQr,"Wav2Vec2CTCTokenizer"),fQr.forEach(t),Lro=r(J3e," (Hubert model)"),J3e.forEach(t),xro=i(S),os=n(S,"LI",{});var o$=s(os);Dte=n(o$,"STRONG",{});var mQr=s(Dte);$ro=r(mQr,"ibert"),mQr.forEach(t),kro=r(o$," \u2014 "),QR=n(o$,"A",{href:!0});var gQr=s(QR);Sro=r(gQr,"RobertaTokenizer"),gQr.forEach(t),Rro=r(o$," or "),HR=n(o$,"A",{href:!0});var hQr=s(HR);Pro=r(hQr,"RobertaTokenizerFast"),hQr.forEach(t),Bro=r(o$," (I-BERT model)"),o$.forEach(t),Iro=i(S),rs=n(S,"LI",{});var r$=s(rs);Gte=n(r$,"STRONG",{});var pQr=s(Gte);qro=r(pQr,"layoutlm"),pQr.forEach(t),Nro=r(r$," \u2014 "),UR=n(r$,"A",{href:!0});var _Qr=s(UR);jro=r(_Qr,"LayoutLMTokenizer"),_Qr.forEach(t),Dro=r(r$," or "),JR=n(r$,"A",{href:!0});var uQr=s(JR);Gro=r(uQr,"LayoutLMTokenizerFast"),uQr.forEach(t),Oro=r(r$," (LayoutLM model)"),r$.forEach(t),Vro=i(S),ts=n(S,"LI",{});var t$=s(ts);Ote=n(t$,"STRONG",{});var bQr=s(Ote);Xro=r(bQr,"layoutlmv2"),bQr.forEach(t),zro=r(t$," \u2014 "),YR=n(t$,"A",{href:!0});var vQr=s(YR);Wro=r(vQr,"LayoutLMv2Tokenizer"),vQr.forEach(t),Qro=r(t$," or "),KR=n(t$,"A",{href:!0});var FQr=s(KR);Hro=r(FQr,"LayoutLMv2TokenizerFast"),FQr.forEach(t),Uro=r(t$," (LayoutLMv2 model)"),t$.forEach(t),Jro=i(S),as=n(S,"LI",{});var a$=s(as);Vte=n(a$,"STRONG",{});var TQr=s(Vte);Yro=r(TQr,"layoutxlm"),TQr.forEach(t),Kro=r(a$," \u2014 "),ZR=n(a$,"A",{href:!0});var MQr=s(ZR);Zro=r(MQr,"LayoutXLMTokenizer"),MQr.forEach(t),eto=r(a$," or "),eP=n(a$,"A",{href:!0});var EQr=s(eP);oto=r(EQr,"LayoutXLMTokenizerFast"),EQr.forEach(t),rto=r(a$," (LayoutXLM model)"),a$.forEach(t),tto=i(S),ns=n(S,"LI",{});var n$=s(ns);Xte=n(n$,"STRONG",{});var CQr=s(Xte);ato=r(CQr,"led"),CQr.forEach(t),nto=r(n$," \u2014 "),oP=n(n$,"A",{href:!0});var wQr=s(oP);sto=r(wQr,"LEDTokenizer"),wQr.forEach(t),lto=r(n$," or "),rP=n(n$,"A",{href:!0});var AQr=s(rP);ito=r(AQr,"LEDTokenizerFast"),AQr.forEach(t),dto=r(n$," (LED model)"),n$.forEach(t),cto=i(S),ss=n(S,"LI",{});var s$=s(ss);zte=n(s$,"STRONG",{});var yQr=s(zte);fto=r(yQr,"longformer"),yQr.forEach(t),mto=r(s$," \u2014 "),tP=n(s$,"A",{href:!0});var LQr=s(tP);gto=r(LQr,"LongformerTokenizer"),LQr.forEach(t),hto=r(s$," or "),aP=n(s$,"A",{href:!0});var xQr=s(aP);pto=r(xQr,"LongformerTokenizerFast"),xQr.forEach(t),_to=r(s$," (Longformer model)"),s$.forEach(t),uto=i(S),Ig=n(S,"LI",{});var Y3e=s(Ig);Wte=n(Y3e,"STRONG",{});var $Qr=s(Wte);bto=r($Qr,"luke"),$Qr.forEach(t),vto=r(Y3e," \u2014 "),nP=n(Y3e,"A",{href:!0});var kQr=s(nP);Fto=r(kQr,"LukeTokenizer"),kQr.forEach(t),Tto=r(Y3e," (LUKE model)"),Y3e.forEach(t),Mto=i(S),ls=n(S,"LI",{});var l$=s(ls);Qte=n(l$,"STRONG",{});var SQr=s(Qte);Eto=r(SQr,"lxmert"),SQr.forEach(t),Cto=r(l$," \u2014 "),sP=n(l$,"A",{href:!0});var RQr=s(sP);wto=r(RQr,"LxmertTokenizer"),RQr.forEach(t),Ato=r(l$," or "),lP=n(l$,"A",{href:!0});var PQr=s(lP);yto=r(PQr,"LxmertTokenizerFast"),PQr.forEach(t),Lto=r(l$," (LXMERT model)"),l$.forEach(t),xto=i(S),qg=n(S,"LI",{});var K3e=s(qg);Hte=n(K3e,"STRONG",{});var BQr=s(Hte);$to=r(BQr,"m2m_100"),BQr.forEach(t),kto=r(K3e," \u2014 "),iP=n(K3e,"A",{href:!0});var IQr=s(iP);Sto=r(IQr,"M2M100Tokenizer"),IQr.forEach(t),Rto=r(K3e," (M2M100 model)"),K3e.forEach(t),Pto=i(S),Ng=n(S,"LI",{});var Z3e=s(Ng);Ute=n(Z3e,"STRONG",{});var qQr=s(Ute);Bto=r(qQr,"marian"),qQr.forEach(t),Ito=r(Z3e," \u2014 "),dP=n(Z3e,"A",{href:!0});var NQr=s(dP);qto=r(NQr,"MarianTokenizer"),NQr.forEach(t),Nto=r(Z3e," (Marian model)"),Z3e.forEach(t),jto=i(S),is=n(S,"LI",{});var i$=s(is);Jte=n(i$,"STRONG",{});var jQr=s(Jte);Dto=r(jQr,"mbart"),jQr.forEach(t),Gto=r(i$," \u2014 "),cP=n(i$,"A",{href:!0});var DQr=s(cP);Oto=r(DQr,"MBartTokenizer"),DQr.forEach(t),Vto=r(i$," or "),fP=n(i$,"A",{href:!0});var GQr=s(fP);Xto=r(GQr,"MBartTokenizerFast"),GQr.forEach(t),zto=r(i$," (mBART model)"),i$.forEach(t),Wto=i(S),ds=n(S,"LI",{});var d$=s(ds);Yte=n(d$,"STRONG",{});var OQr=s(Yte);Qto=r(OQr,"mbart50"),OQr.forEach(t),Hto=r(d$," \u2014 "),mP=n(d$,"A",{href:!0});var VQr=s(mP);Uto=r(VQr,"MBart50Tokenizer"),VQr.forEach(t),Jto=r(d$," or "),gP=n(d$,"A",{href:!0});var XQr=s(gP);Yto=r(XQr,"MBart50TokenizerFast"),XQr.forEach(t),Kto=r(d$," (mBART-50 model)"),d$.forEach(t),Zto=i(S),cs=n(S,"LI",{});var c$=s(cs);Kte=n(c$,"STRONG",{});var zQr=s(Kte);eao=r(zQr,"megatron-bert"),zQr.forEach(t),oao=r(c$," \u2014 "),hP=n(c$,"A",{href:!0});var WQr=s(hP);rao=r(WQr,"BertTokenizer"),WQr.forEach(t),tao=r(c$," or "),pP=n(c$,"A",{href:!0});var QQr=s(pP);aao=r(QQr,"BertTokenizerFast"),QQr.forEach(t),nao=r(c$," (MegatronBert model)"),c$.forEach(t),sao=i(S),jg=n(S,"LI",{});var ewe=s(jg);Zte=n(ewe,"STRONG",{});var HQr=s(Zte);lao=r(HQr,"mluke"),HQr.forEach(t),iao=r(ewe," \u2014 "),_P=n(ewe,"A",{href:!0});var UQr=s(_P);dao=r(UQr,"MLukeTokenizer"),UQr.forEach(t),cao=r(ewe," (mLUKE model)"),ewe.forEach(t),fao=i(S),fs=n(S,"LI",{});var f$=s(fs);eae=n(f$,"STRONG",{});var JQr=s(eae);mao=r(JQr,"mobilebert"),JQr.forEach(t),gao=r(f$," \u2014 "),uP=n(f$,"A",{href:!0});var YQr=s(uP);hao=r(YQr,"MobileBertTokenizer"),YQr.forEach(t),pao=r(f$," or "),bP=n(f$,"A",{href:!0});var KQr=s(bP);_ao=r(KQr,"MobileBertTokenizerFast"),KQr.forEach(t),uao=r(f$," (MobileBERT model)"),f$.forEach(t),bao=i(S),ms=n(S,"LI",{});var m$=s(ms);oae=n(m$,"STRONG",{});var ZQr=s(oae);vao=r(ZQr,"mpnet"),ZQr.forEach(t),Fao=r(m$," \u2014 "),vP=n(m$,"A",{href:!0});var eHr=s(vP);Tao=r(eHr,"MPNetTokenizer"),eHr.forEach(t),Mao=r(m$," or "),FP=n(m$,"A",{href:!0});var oHr=s(FP);Eao=r(oHr,"MPNetTokenizerFast"),oHr.forEach(t),Cao=r(m$," (MPNet model)"),m$.forEach(t),wao=i(S),gs=n(S,"LI",{});var g$=s(gs);rae=n(g$,"STRONG",{});var rHr=s(rae);Aao=r(rHr,"mt5"),rHr.forEach(t),yao=r(g$," \u2014 "),TP=n(g$,"A",{href:!0});var tHr=s(TP);Lao=r(tHr,"MT5Tokenizer"),tHr.forEach(t),xao=r(g$," or "),MP=n(g$,"A",{href:!0});var aHr=s(MP);$ao=r(aHr,"MT5TokenizerFast"),aHr.forEach(t),kao=r(g$," (mT5 model)"),g$.forEach(t),Sao=i(S),hs=n(S,"LI",{});var h$=s(hs);tae=n(h$,"STRONG",{});var nHr=s(tae);Rao=r(nHr,"nystromformer"),nHr.forEach(t),Pao=r(h$," \u2014 "),EP=n(h$,"A",{href:!0});var sHr=s(EP);Bao=r(sHr,"AlbertTokenizer"),sHr.forEach(t),Iao=r(h$," or "),CP=n(h$,"A",{href:!0});var lHr=s(CP);qao=r(lHr,"AlbertTokenizerFast"),lHr.forEach(t),Nao=r(h$," (Nystromformer model)"),h$.forEach(t),jao=i(S),ps=n(S,"LI",{});var p$=s(ps);aae=n(p$,"STRONG",{});var iHr=s(aae);Dao=r(iHr,"openai-gpt"),iHr.forEach(t),Gao=r(p$," \u2014 "),wP=n(p$,"A",{href:!0});var dHr=s(wP);Oao=r(dHr,"OpenAIGPTTokenizer"),dHr.forEach(t),Vao=r(p$," or "),AP=n(p$,"A",{href:!0});var cHr=s(AP);Xao=r(cHr,"OpenAIGPTTokenizerFast"),cHr.forEach(t),zao=r(p$," (OpenAI GPT model)"),p$.forEach(t),Wao=i(S),Dg=n(S,"LI",{});var owe=s(Dg);nae=n(owe,"STRONG",{});var fHr=s(nae);Qao=r(fHr,"opt"),fHr.forEach(t),Hao=r(owe," \u2014 "),yP=n(owe,"A",{href:!0});var mHr=s(yP);Uao=r(mHr,"GPT2Tokenizer"),mHr.forEach(t),Jao=r(owe," (OPT model)"),owe.forEach(t),Yao=i(S),_s=n(S,"LI",{});var _$=s(_s);sae=n(_$,"STRONG",{});var gHr=s(sae);Kao=r(gHr,"pegasus"),gHr.forEach(t),Zao=r(_$," \u2014 "),LP=n(_$,"A",{href:!0});var hHr=s(LP);eno=r(hHr,"PegasusTokenizer"),hHr.forEach(t),ono=r(_$," or "),xP=n(_$,"A",{href:!0});var pHr=s(xP);rno=r(pHr,"PegasusTokenizerFast"),pHr.forEach(t),tno=r(_$," (Pegasus model)"),_$.forEach(t),ano=i(S),Gg=n(S,"LI",{});var rwe=s(Gg);lae=n(rwe,"STRONG",{});var _Hr=s(lae);nno=r(_Hr,"perceiver"),_Hr.forEach(t),sno=r(rwe," \u2014 "),$P=n(rwe,"A",{href:!0});var uHr=s($P);lno=r(uHr,"PerceiverTokenizer"),uHr.forEach(t),ino=r(rwe," (Perceiver model)"),rwe.forEach(t),dno=i(S),Og=n(S,"LI",{});var twe=s(Og);iae=n(twe,"STRONG",{});var bHr=s(iae);cno=r(bHr,"phobert"),bHr.forEach(t),fno=r(twe," \u2014 "),kP=n(twe,"A",{href:!0});var vHr=s(kP);mno=r(vHr,"PhobertTokenizer"),vHr.forEach(t),gno=r(twe," (PhoBERT model)"),twe.forEach(t),hno=i(S),Vg=n(S,"LI",{});var awe=s(Vg);dae=n(awe,"STRONG",{});var FHr=s(dae);pno=r(FHr,"plbart"),FHr.forEach(t),_no=r(awe," \u2014 "),SP=n(awe,"A",{href:!0});var THr=s(SP);uno=r(THr,"PLBartTokenizer"),THr.forEach(t),bno=r(awe," (PLBart model)"),awe.forEach(t),vno=i(S),Xg=n(S,"LI",{});var nwe=s(Xg);cae=n(nwe,"STRONG",{});var MHr=s(cae);Fno=r(MHr,"prophetnet"),MHr.forEach(t),Tno=r(nwe," \u2014 "),RP=n(nwe,"A",{href:!0});var EHr=s(RP);Mno=r(EHr,"ProphetNetTokenizer"),EHr.forEach(t),Eno=r(nwe," (ProphetNet model)"),nwe.forEach(t),Cno=i(S),us=n(S,"LI",{});var u$=s(us);fae=n(u$,"STRONG",{});var CHr=s(fae);wno=r(CHr,"qdqbert"),CHr.forEach(t),Ano=r(u$," \u2014 "),PP=n(u$,"A",{href:!0});var wHr=s(PP);yno=r(wHr,"BertTokenizer"),wHr.forEach(t),Lno=r(u$," or "),BP=n(u$,"A",{href:!0});var AHr=s(BP);xno=r(AHr,"BertTokenizerFast"),AHr.forEach(t),$no=r(u$," (QDQBert model)"),u$.forEach(t),kno=i(S),zg=n(S,"LI",{});var swe=s(zg);mae=n(swe,"STRONG",{});var yHr=s(mae);Sno=r(yHr,"rag"),yHr.forEach(t),Rno=r(swe," \u2014 "),IP=n(swe,"A",{href:!0});var LHr=s(IP);Pno=r(LHr,"RagTokenizer"),LHr.forEach(t),Bno=r(swe," (RAG model)"),swe.forEach(t),Ino=i(S),bs=n(S,"LI",{});var b$=s(bs);gae=n(b$,"STRONG",{});var xHr=s(gae);qno=r(xHr,"realm"),xHr.forEach(t),Nno=r(b$," \u2014 "),qP=n(b$,"A",{href:!0});var $Hr=s(qP);jno=r($Hr,"RealmTokenizer"),$Hr.forEach(t),Dno=r(b$," or "),NP=n(b$,"A",{href:!0});var kHr=s(NP);Gno=r(kHr,"RealmTokenizerFast"),kHr.forEach(t),Ono=r(b$," (Realm model)"),b$.forEach(t),Vno=i(S),vs=n(S,"LI",{});var v$=s(vs);hae=n(v$,"STRONG",{});var SHr=s(hae);Xno=r(SHr,"reformer"),SHr.forEach(t),zno=r(v$," \u2014 "),jP=n(v$,"A",{href:!0});var RHr=s(jP);Wno=r(RHr,"ReformerTokenizer"),RHr.forEach(t),Qno=r(v$," or "),DP=n(v$,"A",{href:!0});var PHr=s(DP);Hno=r(PHr,"ReformerTokenizerFast"),PHr.forEach(t),Uno=r(v$," (Reformer model)"),v$.forEach(t),Jno=i(S),Fs=n(S,"LI",{});var F$=s(Fs);pae=n(F$,"STRONG",{});var BHr=s(pae);Yno=r(BHr,"rembert"),BHr.forEach(t),Kno=r(F$," \u2014 "),GP=n(F$,"A",{href:!0});var IHr=s(GP);Zno=r(IHr,"RemBertTokenizer"),IHr.forEach(t),eso=r(F$," or "),OP=n(F$,"A",{href:!0});var qHr=s(OP);oso=r(qHr,"RemBertTokenizerFast"),qHr.forEach(t),rso=r(F$," (RemBERT model)"),F$.forEach(t),tso=i(S),Ts=n(S,"LI",{});var T$=s(Ts);_ae=n(T$,"STRONG",{});var NHr=s(_ae);aso=r(NHr,"retribert"),NHr.forEach(t),nso=r(T$," \u2014 "),VP=n(T$,"A",{href:!0});var jHr=s(VP);sso=r(jHr,"RetriBertTokenizer"),jHr.forEach(t),lso=r(T$," or "),XP=n(T$,"A",{href:!0});var DHr=s(XP);iso=r(DHr,"RetriBertTokenizerFast"),DHr.forEach(t),dso=r(T$," (RetriBERT model)"),T$.forEach(t),cso=i(S),Ms=n(S,"LI",{});var M$=s(Ms);uae=n(M$,"STRONG",{});var GHr=s(uae);fso=r(GHr,"roberta"),GHr.forEach(t),mso=r(M$," \u2014 "),zP=n(M$,"A",{href:!0});var OHr=s(zP);gso=r(OHr,"RobertaTokenizer"),OHr.forEach(t),hso=r(M$," or "),WP=n(M$,"A",{href:!0});var VHr=s(WP);pso=r(VHr,"RobertaTokenizerFast"),VHr.forEach(t),_so=r(M$," (RoBERTa model)"),M$.forEach(t),uso=i(S),Es=n(S,"LI",{});var E$=s(Es);bae=n(E$,"STRONG",{});var XHr=s(bae);bso=r(XHr,"roformer"),XHr.forEach(t),vso=r(E$," \u2014 "),QP=n(E$,"A",{href:!0});var zHr=s(QP);Fso=r(zHr,"RoFormerTokenizer"),zHr.forEach(t),Tso=r(E$," or "),HP=n(E$,"A",{href:!0});var WHr=s(HP);Mso=r(WHr,"RoFormerTokenizerFast"),WHr.forEach(t),Eso=r(E$," (RoFormer model)"),E$.forEach(t),Cso=i(S),Wg=n(S,"LI",{});var lwe=s(Wg);vae=n(lwe,"STRONG",{});var QHr=s(vae);wso=r(QHr,"speech_to_text"),QHr.forEach(t),Aso=r(lwe," \u2014 "),UP=n(lwe,"A",{href:!0});var HHr=s(UP);yso=r(HHr,"Speech2TextTokenizer"),HHr.forEach(t),Lso=r(lwe," (Speech2Text model)"),lwe.forEach(t),xso=i(S),Qg=n(S,"LI",{});var iwe=s(Qg);Fae=n(iwe,"STRONG",{});var UHr=s(Fae);$so=r(UHr,"speech_to_text_2"),UHr.forEach(t),kso=r(iwe," \u2014 "),JP=n(iwe,"A",{href:!0});var JHr=s(JP);Sso=r(JHr,"Speech2Text2Tokenizer"),JHr.forEach(t),Rso=r(iwe," (Speech2Text2 model)"),iwe.forEach(t),Pso=i(S),Cs=n(S,"LI",{});var C$=s(Cs);Tae=n(C$,"STRONG",{});var YHr=s(Tae);Bso=r(YHr,"splinter"),YHr.forEach(t),Iso=r(C$," \u2014 "),YP=n(C$,"A",{href:!0});var KHr=s(YP);qso=r(KHr,"SplinterTokenizer"),KHr.forEach(t),Nso=r(C$," or "),KP=n(C$,"A",{href:!0});var ZHr=s(KP);jso=r(ZHr,"SplinterTokenizerFast"),ZHr.forEach(t),Dso=r(C$," (Splinter model)"),C$.forEach(t),Gso=i(S),ws=n(S,"LI",{});var w$=s(ws);Mae=n(w$,"STRONG",{});var eUr=s(Mae);Oso=r(eUr,"squeezebert"),eUr.forEach(t),Vso=r(w$," \u2014 "),ZP=n(w$,"A",{href:!0});var oUr=s(ZP);Xso=r(oUr,"SqueezeBertTokenizer"),oUr.forEach(t),zso=r(w$," or "),eB=n(w$,"A",{href:!0});var rUr=s(eB);Wso=r(rUr,"SqueezeBertTokenizerFast"),rUr.forEach(t),Qso=r(w$," (SqueezeBERT model)"),w$.forEach(t),Hso=i(S),As=n(S,"LI",{});var A$=s(As);Eae=n(A$,"STRONG",{});var tUr=s(Eae);Uso=r(tUr,"t5"),tUr.forEach(t),Jso=r(A$," \u2014 "),oB=n(A$,"A",{href:!0});var aUr=s(oB);Yso=r(aUr,"T5Tokenizer"),aUr.forEach(t),Kso=r(A$," or "),rB=n(A$,"A",{href:!0});var nUr=s(rB);Zso=r(nUr,"T5TokenizerFast"),nUr.forEach(t),elo=r(A$," (T5 model)"),A$.forEach(t),olo=i(S),Hg=n(S,"LI",{});var dwe=s(Hg);Cae=n(dwe,"STRONG",{});var sUr=s(Cae);rlo=r(sUr,"tapas"),sUr.forEach(t),tlo=r(dwe," \u2014 "),tB=n(dwe,"A",{href:!0});var lUr=s(tB);alo=r(lUr,"TapasTokenizer"),lUr.forEach(t),nlo=r(dwe," (TAPAS model)"),dwe.forEach(t),slo=i(S),Ug=n(S,"LI",{});var cwe=s(Ug);wae=n(cwe,"STRONG",{});var iUr=s(wae);llo=r(iUr,"tapex"),iUr.forEach(t),ilo=r(cwe," \u2014 "),aB=n(cwe,"A",{href:!0});var dUr=s(aB);dlo=r(dUr,"TapexTokenizer"),dUr.forEach(t),clo=r(cwe," (TAPEX model)"),cwe.forEach(t),flo=i(S),Jg=n(S,"LI",{});var fwe=s(Jg);Aae=n(fwe,"STRONG",{});var cUr=s(Aae);mlo=r(cUr,"transfo-xl"),cUr.forEach(t),glo=r(fwe," \u2014 "),nB=n(fwe,"A",{href:!0});var fUr=s(nB);hlo=r(fUr,"TransfoXLTokenizer"),fUr.forEach(t),plo=r(fwe," (Transformer-XL model)"),fwe.forEach(t),_lo=i(S),ys=n(S,"LI",{});var y$=s(ys);yae=n(y$,"STRONG",{});var mUr=s(yae);ulo=r(mUr,"visual_bert"),mUr.forEach(t),blo=r(y$," \u2014 "),sB=n(y$,"A",{href:!0});var gUr=s(sB);vlo=r(gUr,"BertTokenizer"),gUr.forEach(t),Flo=r(y$," or "),lB=n(y$,"A",{href:!0});var hUr=s(lB);Tlo=r(hUr,"BertTokenizerFast"),hUr.forEach(t),Mlo=r(y$," (VisualBert model)"),y$.forEach(t),Elo=i(S),Yg=n(S,"LI",{});var mwe=s(Yg);Lae=n(mwe,"STRONG",{});var pUr=s(Lae);Clo=r(pUr,"wav2vec2"),pUr.forEach(t),wlo=r(mwe," \u2014 "),iB=n(mwe,"A",{href:!0});var _Ur=s(iB);Alo=r(_Ur,"Wav2Vec2CTCTokenizer"),_Ur.forEach(t),ylo=r(mwe," (Wav2Vec2 model)"),mwe.forEach(t),Llo=i(S),Kg=n(S,"LI",{});var gwe=s(Kg);xae=n(gwe,"STRONG",{});var uUr=s(xae);xlo=r(uUr,"wav2vec2-conformer"),uUr.forEach(t),$lo=r(gwe," \u2014 "),dB=n(gwe,"A",{href:!0});var bUr=s(dB);klo=r(bUr,"Wav2Vec2CTCTokenizer"),bUr.forEach(t),Slo=r(gwe," (Wav2Vec2-Conformer model)"),gwe.forEach(t),Rlo=i(S),Zg=n(S,"LI",{});var hwe=s(Zg);$ae=n(hwe,"STRONG",{});var vUr=s($ae);Plo=r(vUr,"wav2vec2_phoneme"),vUr.forEach(t),Blo=r(hwe," \u2014 "),cB=n(hwe,"A",{href:!0});var FUr=s(cB);Ilo=r(FUr,"Wav2Vec2PhonemeCTCTokenizer"),FUr.forEach(t),qlo=r(hwe," (Wav2Vec2Phoneme model)"),hwe.forEach(t),Nlo=i(S),Ls=n(S,"LI",{});var L$=s(Ls);kae=n(L$,"STRONG",{});var TUr=s(kae);jlo=r(TUr,"xglm"),TUr.forEach(t),Dlo=r(L$," \u2014 "),fB=n(L$,"A",{href:!0});var MUr=s(fB);Glo=r(MUr,"XGLMTokenizer"),MUr.forEach(t),Olo=r(L$," or "),mB=n(L$,"A",{href:!0});var EUr=s(mB);Vlo=r(EUr,"XGLMTokenizerFast"),EUr.forEach(t),Xlo=r(L$," (XGLM model)"),L$.forEach(t),zlo=i(S),eh=n(S,"LI",{});var pwe=s(eh);Sae=n(pwe,"STRONG",{});var CUr=s(Sae);Wlo=r(CUr,"xlm"),CUr.forEach(t),Qlo=r(pwe," \u2014 "),gB=n(pwe,"A",{href:!0});var wUr=s(gB);Hlo=r(wUr,"XLMTokenizer"),wUr.forEach(t),Ulo=r(pwe," (XLM model)"),pwe.forEach(t),Jlo=i(S),oh=n(S,"LI",{});var _we=s(oh);Rae=n(_we,"STRONG",{});var AUr=s(Rae);Ylo=r(AUr,"xlm-prophetnet"),AUr.forEach(t),Klo=r(_we," \u2014 "),hB=n(_we,"A",{href:!0});var yUr=s(hB);Zlo=r(yUr,"XLMProphetNetTokenizer"),yUr.forEach(t),eio=r(_we," (XLMProphetNet model)"),_we.forEach(t),oio=i(S),xs=n(S,"LI",{});var x$=s(xs);Pae=n(x$,"STRONG",{});var LUr=s(Pae);rio=r(LUr,"xlm-roberta"),LUr.forEach(t),tio=r(x$," \u2014 "),pB=n(x$,"A",{href:!0});var xUr=s(pB);aio=r(xUr,"XLMRobertaTokenizer"),xUr.forEach(t),nio=r(x$," or "),_B=n(x$,"A",{href:!0});var $Ur=s(_B);sio=r($Ur,"XLMRobertaTokenizerFast"),$Ur.forEach(t),lio=r(x$," (XLM-RoBERTa model)"),x$.forEach(t),iio=i(S),$s=n(S,"LI",{});var $$=s($s);Bae=n($$,"STRONG",{});var kUr=s(Bae);dio=r(kUr,"xlm-roberta-xl"),kUr.forEach(t),cio=r($$," \u2014 "),uB=n($$,"A",{href:!0});var SUr=s(uB);fio=r(SUr,"RobertaTokenizer"),SUr.forEach(t),mio=r($$," or "),bB=n($$,"A",{href:!0});var RUr=s(bB);gio=r(RUr,"RobertaTokenizerFast"),RUr.forEach(t),hio=r($$," (XLM-RoBERTa-XL model)"),$$.forEach(t),pio=i(S),ks=n(S,"LI",{});var k$=s(ks);Iae=n(k$,"STRONG",{});var PUr=s(Iae);_io=r(PUr,"xlnet"),PUr.forEach(t),uio=r(k$," \u2014 "),vB=n(k$,"A",{href:!0});var BUr=s(vB);bio=r(BUr,"XLNetTokenizer"),BUr.forEach(t),vio=r(k$," or "),FB=n(k$,"A",{href:!0});var IUr=s(FB);Fio=r(IUr,"XLNetTokenizerFast"),IUr.forEach(t),Tio=r(k$," (XLNet model)"),k$.forEach(t),Mio=i(S),Ss=n(S,"LI",{});var S$=s(Ss);qae=n(S$,"STRONG",{});var qUr=s(qae);Eio=r(qUr,"yoso"),qUr.forEach(t),Cio=r(S$," \u2014 "),TB=n(S$,"A",{href:!0});var NUr=s(TB);wio=r(NUr,"AlbertTokenizer"),NUr.forEach(t),Aio=r(S$," or "),MB=n(S$,"A",{href:!0});var jUr=s(MB);yio=r(jUr,"AlbertTokenizerFast"),jUr.forEach(t),Lio=r(S$," (YOSO model)"),S$.forEach(t),S.forEach(t),xio=i(qs),T(rh.$$.fragment,qs),qs.forEach(t),$io=i(Is),th=n(Is,"DIV",{class:!0});var yje=s(th);T(SA.$$.fragment,yje),kio=i(yje),Nae=n(yje,"P",{});var DUr=s(Nae);Sio=r(DUr,"Register a new tokenizer in this mapping."),DUr.forEach(t),yje.forEach(t),Is.forEach(t),Lqe=i(f),Mi=n(f,"H2",{class:!0});var Lje=s(Mi);ah=n(Lje,"A",{id:!0,class:!0,href:!0});var GUr=s(ah);jae=n(GUr,"SPAN",{});var OUr=s(jae);T(RA.$$.fragment,OUr),OUr.forEach(t),GUr.forEach(t),Rio=i(Lje),Dae=n(Lje,"SPAN",{});var VUr=s(Dae);Pio=r(VUr,"AutoFeatureExtractor"),VUr.forEach(t),Lje.forEach(t),xqe=i(f),Ao=n(f,"DIV",{class:!0});var Ns=s(Ao);T(PA.$$.fragment,Ns),Bio=i(Ns),BA=n(Ns,"P",{});var xje=s(BA);Iio=r(xje,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),EB=n(xje,"A",{href:!0});var XUr=s(EB);qio=r(XUr,"AutoFeatureExtractor.from_pretrained()"),XUr.forEach(t),Nio=r(xje," class method."),xje.forEach(t),jio=i(Ns),IA=n(Ns,"P",{});var $je=s(IA);Dio=r($je,"This class cannot be instantiated directly using "),Gae=n($je,"CODE",{});var zUr=s(Gae);Gio=r(zUr,"__init__()"),zUr.forEach(t),Oio=r($je," (throws an error)."),$je.forEach(t),Vio=i(Ns),He=n(Ns,"DIV",{class:!0});var ea=s(He);T(qA.$$.fragment,ea),Xio=i(ea),Oae=n(ea,"P",{});var WUr=s(Oae);zio=r(WUr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),WUr.forEach(t),Wio=i(ea),La=n(ea,"P",{});var Ew=s(La);Qio=r(Ew,"The feature extractor class to instantiate is selected based on the "),Vae=n(Ew,"CODE",{});var QUr=s(Vae);Hio=r(QUr,"model_type"),QUr.forEach(t),Uio=r(Ew,` property of the config object
(either passed as an argument or loaded from `),Xae=n(Ew,"CODE",{});var HUr=s(Xae);Jio=r(HUr,"pretrained_model_name_or_path"),HUr.forEach(t),Yio=r(Ew,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),zae=n(Ew,"CODE",{});var UUr=s(zae);Kio=r(UUr,"pretrained_model_name_or_path"),UUr.forEach(t),Zio=r(Ew,":"),Ew.forEach(t),edo=i(ea),K=n(ea,"UL",{});var ee=s(K);nh=n(ee,"LI",{});var uwe=s(nh);Wae=n(uwe,"STRONG",{});var JUr=s(Wae);odo=r(JUr,"beit"),JUr.forEach(t),rdo=r(uwe," \u2014 "),CB=n(uwe,"A",{href:!0});var YUr=s(CB);tdo=r(YUr,"BeitFeatureExtractor"),YUr.forEach(t),ado=r(uwe," (BEiT model)"),uwe.forEach(t),ndo=i(ee),sh=n(ee,"LI",{});var bwe=s(sh);Qae=n(bwe,"STRONG",{});var KUr=s(Qae);sdo=r(KUr,"clip"),KUr.forEach(t),ldo=r(bwe," \u2014 "),wB=n(bwe,"A",{href:!0});var ZUr=s(wB);ido=r(ZUr,"CLIPFeatureExtractor"),ZUr.forEach(t),ddo=r(bwe," (CLIP model)"),bwe.forEach(t),cdo=i(ee),lh=n(ee,"LI",{});var vwe=s(lh);Hae=n(vwe,"STRONG",{});var eJr=s(Hae);fdo=r(eJr,"convnext"),eJr.forEach(t),mdo=r(vwe," \u2014 "),AB=n(vwe,"A",{href:!0});var oJr=s(AB);gdo=r(oJr,"ConvNextFeatureExtractor"),oJr.forEach(t),hdo=r(vwe," (ConvNext model)"),vwe.forEach(t),pdo=i(ee),ih=n(ee,"LI",{});var Fwe=s(ih);Uae=n(Fwe,"STRONG",{});var rJr=s(Uae);_do=r(rJr,"cvt"),rJr.forEach(t),udo=r(Fwe," \u2014 "),yB=n(Fwe,"A",{href:!0});var tJr=s(yB);bdo=r(tJr,"ConvNextFeatureExtractor"),tJr.forEach(t),vdo=r(Fwe," (CvT model)"),Fwe.forEach(t),Fdo=i(ee),dh=n(ee,"LI",{});var Twe=s(dh);Jae=n(Twe,"STRONG",{});var aJr=s(Jae);Tdo=r(aJr,"data2vec-audio"),aJr.forEach(t),Mdo=r(Twe," \u2014 "),LB=n(Twe,"A",{href:!0});var nJr=s(LB);Edo=r(nJr,"Wav2Vec2FeatureExtractor"),nJr.forEach(t),Cdo=r(Twe," (Data2VecAudio model)"),Twe.forEach(t),wdo=i(ee),ch=n(ee,"LI",{});var Mwe=s(ch);Yae=n(Mwe,"STRONG",{});var sJr=s(Yae);Ado=r(sJr,"data2vec-vision"),sJr.forEach(t),ydo=r(Mwe," \u2014 "),xB=n(Mwe,"A",{href:!0});var lJr=s(xB);Ldo=r(lJr,"BeitFeatureExtractor"),lJr.forEach(t),xdo=r(Mwe," (Data2VecVision model)"),Mwe.forEach(t),$do=i(ee),fh=n(ee,"LI",{});var Ewe=s(fh);Kae=n(Ewe,"STRONG",{});var iJr=s(Kae);kdo=r(iJr,"deit"),iJr.forEach(t),Sdo=r(Ewe," \u2014 "),$B=n(Ewe,"A",{href:!0});var dJr=s($B);Rdo=r(dJr,"DeiTFeatureExtractor"),dJr.forEach(t),Pdo=r(Ewe," (DeiT model)"),Ewe.forEach(t),Bdo=i(ee),mh=n(ee,"LI",{});var Cwe=s(mh);Zae=n(Cwe,"STRONG",{});var cJr=s(Zae);Ido=r(cJr,"detr"),cJr.forEach(t),qdo=r(Cwe," \u2014 "),kB=n(Cwe,"A",{href:!0});var fJr=s(kB);Ndo=r(fJr,"DetrFeatureExtractor"),fJr.forEach(t),jdo=r(Cwe," (DETR model)"),Cwe.forEach(t),Ddo=i(ee),gh=n(ee,"LI",{});var wwe=s(gh);ene=n(wwe,"STRONG",{});var mJr=s(ene);Gdo=r(mJr,"dpt"),mJr.forEach(t),Odo=r(wwe," \u2014 "),SB=n(wwe,"A",{href:!0});var gJr=s(SB);Vdo=r(gJr,"DPTFeatureExtractor"),gJr.forEach(t),Xdo=r(wwe," (DPT model)"),wwe.forEach(t),zdo=i(ee),hh=n(ee,"LI",{});var Awe=s(hh);one=n(Awe,"STRONG",{});var hJr=s(one);Wdo=r(hJr,"flava"),hJr.forEach(t),Qdo=r(Awe," \u2014 "),RB=n(Awe,"A",{href:!0});var pJr=s(RB);Hdo=r(pJr,"FlavaFeatureExtractor"),pJr.forEach(t),Udo=r(Awe," (Flava model)"),Awe.forEach(t),Jdo=i(ee),ph=n(ee,"LI",{});var ywe=s(ph);rne=n(ywe,"STRONG",{});var _Jr=s(rne);Ydo=r(_Jr,"glpn"),_Jr.forEach(t),Kdo=r(ywe," \u2014 "),PB=n(ywe,"A",{href:!0});var uJr=s(PB);Zdo=r(uJr,"GLPNFeatureExtractor"),uJr.forEach(t),eco=r(ywe," (GLPN model)"),ywe.forEach(t),oco=i(ee),_h=n(ee,"LI",{});var Lwe=s(_h);tne=n(Lwe,"STRONG",{});var bJr=s(tne);rco=r(bJr,"hubert"),bJr.forEach(t),tco=r(Lwe," \u2014 "),BB=n(Lwe,"A",{href:!0});var vJr=s(BB);aco=r(vJr,"Wav2Vec2FeatureExtractor"),vJr.forEach(t),nco=r(Lwe," (Hubert model)"),Lwe.forEach(t),sco=i(ee),uh=n(ee,"LI",{});var xwe=s(uh);ane=n(xwe,"STRONG",{});var FJr=s(ane);lco=r(FJr,"layoutlmv2"),FJr.forEach(t),ico=r(xwe," \u2014 "),IB=n(xwe,"A",{href:!0});var TJr=s(IB);dco=r(TJr,"LayoutLMv2FeatureExtractor"),TJr.forEach(t),cco=r(xwe," (LayoutLMv2 model)"),xwe.forEach(t),fco=i(ee),bh=n(ee,"LI",{});var $we=s(bh);nne=n($we,"STRONG",{});var MJr=s(nne);mco=r(MJr,"maskformer"),MJr.forEach(t),gco=r($we," \u2014 "),qB=n($we,"A",{href:!0});var EJr=s(qB);hco=r(EJr,"MaskFormerFeatureExtractor"),EJr.forEach(t),pco=r($we," (MaskFormer model)"),$we.forEach(t),_co=i(ee),vh=n(ee,"LI",{});var kwe=s(vh);sne=n(kwe,"STRONG",{});var CJr=s(sne);uco=r(CJr,"mobilevit"),CJr.forEach(t),bco=r(kwe," \u2014 "),NB=n(kwe,"A",{href:!0});var wJr=s(NB);vco=r(wJr,"MobileViTFeatureExtractor"),wJr.forEach(t),Fco=r(kwe," (MobileViT model)"),kwe.forEach(t),Tco=i(ee),Fh=n(ee,"LI",{});var Swe=s(Fh);lne=n(Swe,"STRONG",{});var AJr=s(lne);Mco=r(AJr,"perceiver"),AJr.forEach(t),Eco=r(Swe," \u2014 "),jB=n(Swe,"A",{href:!0});var yJr=s(jB);Cco=r(yJr,"PerceiverFeatureExtractor"),yJr.forEach(t),wco=r(Swe," (Perceiver model)"),Swe.forEach(t),Aco=i(ee),Th=n(ee,"LI",{});var Rwe=s(Th);ine=n(Rwe,"STRONG",{});var LJr=s(ine);yco=r(LJr,"poolformer"),LJr.forEach(t),Lco=r(Rwe," \u2014 "),DB=n(Rwe,"A",{href:!0});var xJr=s(DB);xco=r(xJr,"PoolFormerFeatureExtractor"),xJr.forEach(t),$co=r(Rwe," (PoolFormer model)"),Rwe.forEach(t),kco=i(ee),Mh=n(ee,"LI",{});var Pwe=s(Mh);dne=n(Pwe,"STRONG",{});var $Jr=s(dne);Sco=r($Jr,"regnet"),$Jr.forEach(t),Rco=r(Pwe," \u2014 "),GB=n(Pwe,"A",{href:!0});var kJr=s(GB);Pco=r(kJr,"ConvNextFeatureExtractor"),kJr.forEach(t),Bco=r(Pwe," (RegNet model)"),Pwe.forEach(t),Ico=i(ee),Eh=n(ee,"LI",{});var Bwe=s(Eh);cne=n(Bwe,"STRONG",{});var SJr=s(cne);qco=r(SJr,"resnet"),SJr.forEach(t),Nco=r(Bwe," \u2014 "),OB=n(Bwe,"A",{href:!0});var RJr=s(OB);jco=r(RJr,"ConvNextFeatureExtractor"),RJr.forEach(t),Dco=r(Bwe," (ResNet model)"),Bwe.forEach(t),Gco=i(ee),Ch=n(ee,"LI",{});var Iwe=s(Ch);fne=n(Iwe,"STRONG",{});var PJr=s(fne);Oco=r(PJr,"segformer"),PJr.forEach(t),Vco=r(Iwe," \u2014 "),VB=n(Iwe,"A",{href:!0});var BJr=s(VB);Xco=r(BJr,"SegformerFeatureExtractor"),BJr.forEach(t),zco=r(Iwe," (SegFormer model)"),Iwe.forEach(t),Wco=i(ee),wh=n(ee,"LI",{});var qwe=s(wh);mne=n(qwe,"STRONG",{});var IJr=s(mne);Qco=r(IJr,"speech_to_text"),IJr.forEach(t),Hco=r(qwe," \u2014 "),XB=n(qwe,"A",{href:!0});var qJr=s(XB);Uco=r(qJr,"Speech2TextFeatureExtractor"),qJr.forEach(t),Jco=r(qwe," (Speech2Text model)"),qwe.forEach(t),Yco=i(ee),Ah=n(ee,"LI",{});var Nwe=s(Ah);gne=n(Nwe,"STRONG",{});var NJr=s(gne);Kco=r(NJr,"swin"),NJr.forEach(t),Zco=r(Nwe," \u2014 "),zB=n(Nwe,"A",{href:!0});var jJr=s(zB);efo=r(jJr,"ViTFeatureExtractor"),jJr.forEach(t),ofo=r(Nwe," (Swin model)"),Nwe.forEach(t),rfo=i(ee),yh=n(ee,"LI",{});var jwe=s(yh);hne=n(jwe,"STRONG",{});var DJr=s(hne);tfo=r(DJr,"van"),DJr.forEach(t),afo=r(jwe," \u2014 "),WB=n(jwe,"A",{href:!0});var GJr=s(WB);nfo=r(GJr,"ConvNextFeatureExtractor"),GJr.forEach(t),sfo=r(jwe," (VAN model)"),jwe.forEach(t),lfo=i(ee),Lh=n(ee,"LI",{});var Dwe=s(Lh);pne=n(Dwe,"STRONG",{});var OJr=s(pne);ifo=r(OJr,"vit"),OJr.forEach(t),dfo=r(Dwe," \u2014 "),QB=n(Dwe,"A",{href:!0});var VJr=s(QB);cfo=r(VJr,"ViTFeatureExtractor"),VJr.forEach(t),ffo=r(Dwe," (ViT model)"),Dwe.forEach(t),mfo=i(ee),xh=n(ee,"LI",{});var Gwe=s(xh);_ne=n(Gwe,"STRONG",{});var XJr=s(_ne);gfo=r(XJr,"vit_mae"),XJr.forEach(t),hfo=r(Gwe," \u2014 "),HB=n(Gwe,"A",{href:!0});var zJr=s(HB);pfo=r(zJr,"ViTFeatureExtractor"),zJr.forEach(t),_fo=r(Gwe," (ViTMAE model)"),Gwe.forEach(t),ufo=i(ee),$h=n(ee,"LI",{});var Owe=s($h);une=n(Owe,"STRONG",{});var WJr=s(une);bfo=r(WJr,"wav2vec2"),WJr.forEach(t),vfo=r(Owe," \u2014 "),UB=n(Owe,"A",{href:!0});var QJr=s(UB);Ffo=r(QJr,"Wav2Vec2FeatureExtractor"),QJr.forEach(t),Tfo=r(Owe," (Wav2Vec2 model)"),Owe.forEach(t),Mfo=i(ee),kh=n(ee,"LI",{});var Vwe=s(kh);bne=n(Vwe,"STRONG",{});var HJr=s(bne);Efo=r(HJr,"wav2vec2-conformer"),HJr.forEach(t),Cfo=r(Vwe," \u2014 "),JB=n(Vwe,"A",{href:!0});var UJr=s(JB);wfo=r(UJr,"Wav2Vec2FeatureExtractor"),UJr.forEach(t),Afo=r(Vwe," (Wav2Vec2-Conformer model)"),Vwe.forEach(t),yfo=i(ee),Sh=n(ee,"LI",{});var Xwe=s(Sh);vne=n(Xwe,"STRONG",{});var JJr=s(vne);Lfo=r(JJr,"yolos"),JJr.forEach(t),xfo=r(Xwe," \u2014 "),YB=n(Xwe,"A",{href:!0});var YJr=s(YB);$fo=r(YJr,"YolosFeatureExtractor"),YJr.forEach(t),kfo=r(Xwe," (YOLOS model)"),Xwe.forEach(t),ee.forEach(t),Sfo=i(ea),T(Rh.$$.fragment,ea),Rfo=i(ea),T(Ph.$$.fragment,ea),ea.forEach(t),Pfo=i(Ns),Bh=n(Ns,"DIV",{class:!0});var kje=s(Bh);T(NA.$$.fragment,kje),Bfo=i(kje),Fne=n(kje,"P",{});var KJr=s(Fne);Ifo=r(KJr,"Register a new feature extractor for this class."),KJr.forEach(t),kje.forEach(t),Ns.forEach(t),$qe=i(f),Ei=n(f,"H2",{class:!0});var Sje=s(Ei);Ih=n(Sje,"A",{id:!0,class:!0,href:!0});var ZJr=s(Ih);Tne=n(ZJr,"SPAN",{});var eYr=s(Tne);T(jA.$$.fragment,eYr),eYr.forEach(t),ZJr.forEach(t),qfo=i(Sje),Mne=n(Sje,"SPAN",{});var oYr=s(Mne);Nfo=r(oYr,"AutoProcessor"),oYr.forEach(t),Sje.forEach(t),kqe=i(f),yo=n(f,"DIV",{class:!0});var js=s(yo);T(DA.$$.fragment,js),jfo=i(js),GA=n(js,"P",{});var Rje=s(GA);Dfo=r(Rje,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),KB=n(Rje,"A",{href:!0});var rYr=s(KB);Gfo=r(rYr,"AutoProcessor.from_pretrained()"),rYr.forEach(t),Ofo=r(Rje," class method."),Rje.forEach(t),Vfo=i(js),OA=n(js,"P",{});var Pje=s(OA);Xfo=r(Pje,"This class cannot be instantiated directly using "),Ene=n(Pje,"CODE",{});var tYr=s(Ene);zfo=r(tYr,"__init__()"),tYr.forEach(t),Wfo=r(Pje," (throws an error)."),Pje.forEach(t),Qfo=i(js),Ue=n(js,"DIV",{class:!0});var oa=s(Ue);T(VA.$$.fragment,oa),Hfo=i(oa),Cne=n(oa,"P",{});var aYr=s(Cne);Ufo=r(aYr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),aYr.forEach(t),Jfo=i(oa),Ci=n(oa,"P",{});var JK=s(Ci);Yfo=r(JK,"The processor class to instantiate is selected based on the "),wne=n(JK,"CODE",{});var nYr=s(wne);Kfo=r(nYr,"model_type"),nYr.forEach(t),Zfo=r(JK,` property of the config object (either
passed as an argument or loaded from `),Ane=n(JK,"CODE",{});var sYr=s(Ane);emo=r(sYr,"pretrained_model_name_or_path"),sYr.forEach(t),omo=r(JK," if possible):"),JK.forEach(t),rmo=i(oa),pe=n(oa,"UL",{});var ve=s(pe);qh=n(ve,"LI",{});var zwe=s(qh);yne=n(zwe,"STRONG",{});var lYr=s(yne);tmo=r(lYr,"clip"),lYr.forEach(t),amo=r(zwe," \u2014 "),ZB=n(zwe,"A",{href:!0});var iYr=s(ZB);nmo=r(iYr,"CLIPProcessor"),iYr.forEach(t),smo=r(zwe," (CLIP model)"),zwe.forEach(t),lmo=i(ve),Nh=n(ve,"LI",{});var Wwe=s(Nh);Lne=n(Wwe,"STRONG",{});var dYr=s(Lne);imo=r(dYr,"flava"),dYr.forEach(t),dmo=r(Wwe," \u2014 "),xne=n(Wwe,"CODE",{});var cYr=s(xne);cmo=r(cYr,"FLAVAProcessor"),cYr.forEach(t),fmo=r(Wwe," (Flava model)"),Wwe.forEach(t),mmo=i(ve),jh=n(ve,"LI",{});var Qwe=s(jh);$ne=n(Qwe,"STRONG",{});var fYr=s($ne);gmo=r(fYr,"layoutlmv2"),fYr.forEach(t),hmo=r(Qwe," \u2014 "),eI=n(Qwe,"A",{href:!0});var mYr=s(eI);pmo=r(mYr,"LayoutLMv2Processor"),mYr.forEach(t),_mo=r(Qwe," (LayoutLMv2 model)"),Qwe.forEach(t),umo=i(ve),Dh=n(ve,"LI",{});var Hwe=s(Dh);kne=n(Hwe,"STRONG",{});var gYr=s(kne);bmo=r(gYr,"layoutxlm"),gYr.forEach(t),vmo=r(Hwe," \u2014 "),oI=n(Hwe,"A",{href:!0});var hYr=s(oI);Fmo=r(hYr,"LayoutXLMProcessor"),hYr.forEach(t),Tmo=r(Hwe," (LayoutXLM model)"),Hwe.forEach(t),Mmo=i(ve),Gh=n(ve,"LI",{});var Uwe=s(Gh);Sne=n(Uwe,"STRONG",{});var pYr=s(Sne);Emo=r(pYr,"sew"),pYr.forEach(t),Cmo=r(Uwe," \u2014 "),rI=n(Uwe,"A",{href:!0});var _Yr=s(rI);wmo=r(_Yr,"Wav2Vec2Processor"),_Yr.forEach(t),Amo=r(Uwe," (SEW model)"),Uwe.forEach(t),ymo=i(ve),Oh=n(ve,"LI",{});var Jwe=s(Oh);Rne=n(Jwe,"STRONG",{});var uYr=s(Rne);Lmo=r(uYr,"sew-d"),uYr.forEach(t),xmo=r(Jwe," \u2014 "),tI=n(Jwe,"A",{href:!0});var bYr=s(tI);$mo=r(bYr,"Wav2Vec2Processor"),bYr.forEach(t),kmo=r(Jwe," (SEW-D model)"),Jwe.forEach(t),Smo=i(ve),Vh=n(ve,"LI",{});var Ywe=s(Vh);Pne=n(Ywe,"STRONG",{});var vYr=s(Pne);Rmo=r(vYr,"speech_to_text"),vYr.forEach(t),Pmo=r(Ywe," \u2014 "),aI=n(Ywe,"A",{href:!0});var FYr=s(aI);Bmo=r(FYr,"Speech2TextProcessor"),FYr.forEach(t),Imo=r(Ywe," (Speech2Text model)"),Ywe.forEach(t),qmo=i(ve),Xh=n(ve,"LI",{});var Kwe=s(Xh);Bne=n(Kwe,"STRONG",{});var TYr=s(Bne);Nmo=r(TYr,"speech_to_text_2"),TYr.forEach(t),jmo=r(Kwe," \u2014 "),nI=n(Kwe,"A",{href:!0});var MYr=s(nI);Dmo=r(MYr,"Speech2Text2Processor"),MYr.forEach(t),Gmo=r(Kwe," (Speech2Text2 model)"),Kwe.forEach(t),Omo=i(ve),zh=n(ve,"LI",{});var Zwe=s(zh);Ine=n(Zwe,"STRONG",{});var EYr=s(Ine);Vmo=r(EYr,"trocr"),EYr.forEach(t),Xmo=r(Zwe," \u2014 "),sI=n(Zwe,"A",{href:!0});var CYr=s(sI);zmo=r(CYr,"TrOCRProcessor"),CYr.forEach(t),Wmo=r(Zwe," (TrOCR model)"),Zwe.forEach(t),Qmo=i(ve),Wh=n(ve,"LI",{});var e6e=s(Wh);qne=n(e6e,"STRONG",{});var wYr=s(qne);Hmo=r(wYr,"unispeech"),wYr.forEach(t),Umo=r(e6e," \u2014 "),lI=n(e6e,"A",{href:!0});var AYr=s(lI);Jmo=r(AYr,"Wav2Vec2Processor"),AYr.forEach(t),Ymo=r(e6e," (UniSpeech model)"),e6e.forEach(t),Kmo=i(ve),Qh=n(ve,"LI",{});var o6e=s(Qh);Nne=n(o6e,"STRONG",{});var yYr=s(Nne);Zmo=r(yYr,"unispeech-sat"),yYr.forEach(t),ego=r(o6e," \u2014 "),iI=n(o6e,"A",{href:!0});var LYr=s(iI);ogo=r(LYr,"Wav2Vec2Processor"),LYr.forEach(t),rgo=r(o6e," (UniSpeechSat model)"),o6e.forEach(t),tgo=i(ve),Hh=n(ve,"LI",{});var r6e=s(Hh);jne=n(r6e,"STRONG",{});var xYr=s(jne);ago=r(xYr,"vilt"),xYr.forEach(t),ngo=r(r6e," \u2014 "),dI=n(r6e,"A",{href:!0});var $Yr=s(dI);sgo=r($Yr,"ViltProcessor"),$Yr.forEach(t),lgo=r(r6e," (ViLT model)"),r6e.forEach(t),igo=i(ve),Uh=n(ve,"LI",{});var t6e=s(Uh);Dne=n(t6e,"STRONG",{});var kYr=s(Dne);dgo=r(kYr,"vision-text-dual-encoder"),kYr.forEach(t),cgo=r(t6e," \u2014 "),cI=n(t6e,"A",{href:!0});var SYr=s(cI);fgo=r(SYr,"VisionTextDualEncoderProcessor"),SYr.forEach(t),mgo=r(t6e," (VisionTextDualEncoder model)"),t6e.forEach(t),ggo=i(ve),Jh=n(ve,"LI",{});var a6e=s(Jh);Gne=n(a6e,"STRONG",{});var RYr=s(Gne);hgo=r(RYr,"wav2vec2"),RYr.forEach(t),pgo=r(a6e," \u2014 "),fI=n(a6e,"A",{href:!0});var PYr=s(fI);_go=r(PYr,"Wav2Vec2Processor"),PYr.forEach(t),ugo=r(a6e," (Wav2Vec2 model)"),a6e.forEach(t),bgo=i(ve),Yh=n(ve,"LI",{});var n6e=s(Yh);One=n(n6e,"STRONG",{});var BYr=s(One);vgo=r(BYr,"wav2vec2-conformer"),BYr.forEach(t),Fgo=r(n6e," \u2014 "),mI=n(n6e,"A",{href:!0});var IYr=s(mI);Tgo=r(IYr,"Wav2Vec2Processor"),IYr.forEach(t),Mgo=r(n6e," (Wav2Vec2-Conformer model)"),n6e.forEach(t),Ego=i(ve),Kh=n(ve,"LI",{});var s6e=s(Kh);Vne=n(s6e,"STRONG",{});var qYr=s(Vne);Cgo=r(qYr,"wavlm"),qYr.forEach(t),wgo=r(s6e," \u2014 "),gI=n(s6e,"A",{href:!0});var NYr=s(gI);Ago=r(NYr,"Wav2Vec2Processor"),NYr.forEach(t),ygo=r(s6e," (WavLM model)"),s6e.forEach(t),ve.forEach(t),Lgo=i(oa),T(Zh.$$.fragment,oa),xgo=i(oa),T(ep.$$.fragment,oa),oa.forEach(t),$go=i(js),op=n(js,"DIV",{class:!0});var Bje=s(op);T(XA.$$.fragment,Bje),kgo=i(Bje),Xne=n(Bje,"P",{});var jYr=s(Xne);Sgo=r(jYr,"Register a new processor for this class."),jYr.forEach(t),Bje.forEach(t),js.forEach(t),Sqe=i(f),wi=n(f,"H2",{class:!0});var Ije=s(wi);rp=n(Ije,"A",{id:!0,class:!0,href:!0});var DYr=s(rp);zne=n(DYr,"SPAN",{});var GYr=s(zne);T(zA.$$.fragment,GYr),GYr.forEach(t),DYr.forEach(t),Rgo=i(Ije),Wne=n(Ije,"SPAN",{});var OYr=s(Wne);Pgo=r(OYr,"AutoModel"),OYr.forEach(t),Ije.forEach(t),Rqe=i(f),Lo=n(f,"DIV",{class:!0});var Ds=s(Lo);T(WA.$$.fragment,Ds),Bgo=i(Ds),Ai=n(Ds,"P",{});var YK=s(Ai);Igo=r(YK,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),hI=n(YK,"A",{href:!0});var VYr=s(hI);qgo=r(VYr,"from_pretrained()"),VYr.forEach(t),Ngo=r(YK," class method or the "),pI=n(YK,"A",{href:!0});var XYr=s(pI);jgo=r(XYr,"from_config()"),XYr.forEach(t),Dgo=r(YK,` class
method.`),YK.forEach(t),Ggo=i(Ds),QA=n(Ds,"P",{});var qje=s(QA);Ogo=r(qje,"This class cannot be instantiated directly using "),Qne=n(qje,"CODE",{});var zYr=s(Qne);Vgo=r(zYr,"__init__()"),zYr.forEach(t),Xgo=r(qje," (throws an error)."),qje.forEach(t),zgo=i(Ds),at=n(Ds,"DIV",{class:!0});var Cw=s(at);T(HA.$$.fragment,Cw),Wgo=i(Cw),Hne=n(Cw,"P",{});var WYr=s(Hne);Qgo=r(WYr,"Instantiates one of the base model classes of the library from a configuration."),WYr.forEach(t),Hgo=i(Cw),yi=n(Cw,"P",{});var KK=s(yi);Ugo=r(KK,`Note:
Loading a model from its configuration file does `),Une=n(KK,"STRONG",{});var QYr=s(Une);Jgo=r(QYr,"not"),QYr.forEach(t),Ygo=r(KK,` load the model weights. It only affects the
model\u2019s configuration. Use `),_I=n(KK,"A",{href:!0});var HYr=s(_I);Kgo=r(HYr,"from_pretrained()"),HYr.forEach(t),Zgo=r(KK," to load the model weights."),KK.forEach(t),eho=i(Cw),T(tp.$$.fragment,Cw),Cw.forEach(t),oho=i(Ds),Je=n(Ds,"DIV",{class:!0});var ra=s(Je);T(UA.$$.fragment,ra),rho=i(ra),Jne=n(ra,"P",{});var UYr=s(Jne);tho=r(UYr,"Instantiate one of the base model classes of the library from a pretrained model."),UYr.forEach(t),aho=i(ra),xa=n(ra,"P",{});var ww=s(xa);nho=r(ww,"The model class to instantiate is selected based on the "),Yne=n(ww,"CODE",{});var JYr=s(Yne);sho=r(JYr,"model_type"),JYr.forEach(t),lho=r(ww,` property of the config object (either
passed as an argument or loaded from `),Kne=n(ww,"CODE",{});var YYr=s(Kne);iho=r(YYr,"pretrained_model_name_or_path"),YYr.forEach(t),dho=r(ww,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zne=n(ww,"CODE",{});var KYr=s(Zne);cho=r(KYr,"pretrained_model_name_or_path"),KYr.forEach(t),fho=r(ww,":"),ww.forEach(t),mho=i(ra),x=n(ra,"UL",{});var $=s(x);ap=n($,"LI",{});var l6e=s(ap);ese=n(l6e,"STRONG",{});var ZYr=s(ese);gho=r(ZYr,"albert"),ZYr.forEach(t),hho=r(l6e," \u2014 "),uI=n(l6e,"A",{href:!0});var eKr=s(uI);pho=r(eKr,"AlbertModel"),eKr.forEach(t),_ho=r(l6e," (ALBERT model)"),l6e.forEach(t),uho=i($),np=n($,"LI",{});var i6e=s(np);ose=n(i6e,"STRONG",{});var oKr=s(ose);bho=r(oKr,"bart"),oKr.forEach(t),vho=r(i6e," \u2014 "),bI=n(i6e,"A",{href:!0});var rKr=s(bI);Fho=r(rKr,"BartModel"),rKr.forEach(t),Tho=r(i6e," (BART model)"),i6e.forEach(t),Mho=i($),sp=n($,"LI",{});var d6e=s(sp);rse=n(d6e,"STRONG",{});var tKr=s(rse);Eho=r(tKr,"beit"),tKr.forEach(t),Cho=r(d6e," \u2014 "),vI=n(d6e,"A",{href:!0});var aKr=s(vI);who=r(aKr,"BeitModel"),aKr.forEach(t),Aho=r(d6e," (BEiT model)"),d6e.forEach(t),yho=i($),lp=n($,"LI",{});var c6e=s(lp);tse=n(c6e,"STRONG",{});var nKr=s(tse);Lho=r(nKr,"bert"),nKr.forEach(t),xho=r(c6e," \u2014 "),FI=n(c6e,"A",{href:!0});var sKr=s(FI);$ho=r(sKr,"BertModel"),sKr.forEach(t),kho=r(c6e," (BERT model)"),c6e.forEach(t),Sho=i($),ip=n($,"LI",{});var f6e=s(ip);ase=n(f6e,"STRONG",{});var lKr=s(ase);Rho=r(lKr,"bert-generation"),lKr.forEach(t),Pho=r(f6e," \u2014 "),TI=n(f6e,"A",{href:!0});var iKr=s(TI);Bho=r(iKr,"BertGenerationEncoder"),iKr.forEach(t),Iho=r(f6e," (Bert Generation model)"),f6e.forEach(t),qho=i($),dp=n($,"LI",{});var m6e=s(dp);nse=n(m6e,"STRONG",{});var dKr=s(nse);Nho=r(dKr,"big_bird"),dKr.forEach(t),jho=r(m6e," \u2014 "),MI=n(m6e,"A",{href:!0});var cKr=s(MI);Dho=r(cKr,"BigBirdModel"),cKr.forEach(t),Gho=r(m6e," (BigBird model)"),m6e.forEach(t),Oho=i($),cp=n($,"LI",{});var g6e=s(cp);sse=n(g6e,"STRONG",{});var fKr=s(sse);Vho=r(fKr,"bigbird_pegasus"),fKr.forEach(t),Xho=r(g6e," \u2014 "),EI=n(g6e,"A",{href:!0});var mKr=s(EI);zho=r(mKr,"BigBirdPegasusModel"),mKr.forEach(t),Who=r(g6e," (BigBirdPegasus model)"),g6e.forEach(t),Qho=i($),fp=n($,"LI",{});var h6e=s(fp);lse=n(h6e,"STRONG",{});var gKr=s(lse);Hho=r(gKr,"blenderbot"),gKr.forEach(t),Uho=r(h6e," \u2014 "),CI=n(h6e,"A",{href:!0});var hKr=s(CI);Jho=r(hKr,"BlenderbotModel"),hKr.forEach(t),Yho=r(h6e," (Blenderbot model)"),h6e.forEach(t),Kho=i($),mp=n($,"LI",{});var p6e=s(mp);ise=n(p6e,"STRONG",{});var pKr=s(ise);Zho=r(pKr,"blenderbot-small"),pKr.forEach(t),epo=r(p6e," \u2014 "),wI=n(p6e,"A",{href:!0});var _Kr=s(wI);opo=r(_Kr,"BlenderbotSmallModel"),_Kr.forEach(t),rpo=r(p6e," (BlenderbotSmall model)"),p6e.forEach(t),tpo=i($),gp=n($,"LI",{});var _6e=s(gp);dse=n(_6e,"STRONG",{});var uKr=s(dse);apo=r(uKr,"camembert"),uKr.forEach(t),npo=r(_6e," \u2014 "),AI=n(_6e,"A",{href:!0});var bKr=s(AI);spo=r(bKr,"CamembertModel"),bKr.forEach(t),lpo=r(_6e," (CamemBERT model)"),_6e.forEach(t),ipo=i($),hp=n($,"LI",{});var u6e=s(hp);cse=n(u6e,"STRONG",{});var vKr=s(cse);dpo=r(vKr,"canine"),vKr.forEach(t),cpo=r(u6e," \u2014 "),yI=n(u6e,"A",{href:!0});var FKr=s(yI);fpo=r(FKr,"CanineModel"),FKr.forEach(t),mpo=r(u6e," (Canine model)"),u6e.forEach(t),gpo=i($),pp=n($,"LI",{});var b6e=s(pp);fse=n(b6e,"STRONG",{});var TKr=s(fse);hpo=r(TKr,"clip"),TKr.forEach(t),ppo=r(b6e," \u2014 "),LI=n(b6e,"A",{href:!0});var MKr=s(LI);_po=r(MKr,"CLIPModel"),MKr.forEach(t),upo=r(b6e," (CLIP model)"),b6e.forEach(t),bpo=i($),_p=n($,"LI",{});var v6e=s(_p);mse=n(v6e,"STRONG",{});var EKr=s(mse);vpo=r(EKr,"convbert"),EKr.forEach(t),Fpo=r(v6e," \u2014 "),xI=n(v6e,"A",{href:!0});var CKr=s(xI);Tpo=r(CKr,"ConvBertModel"),CKr.forEach(t),Mpo=r(v6e," (ConvBERT model)"),v6e.forEach(t),Epo=i($),up=n($,"LI",{});var F6e=s(up);gse=n(F6e,"STRONG",{});var wKr=s(gse);Cpo=r(wKr,"convnext"),wKr.forEach(t),wpo=r(F6e," \u2014 "),$I=n(F6e,"A",{href:!0});var AKr=s($I);Apo=r(AKr,"ConvNextModel"),AKr.forEach(t),ypo=r(F6e," (ConvNext model)"),F6e.forEach(t),Lpo=i($),bp=n($,"LI",{});var T6e=s(bp);hse=n(T6e,"STRONG",{});var yKr=s(hse);xpo=r(yKr,"ctrl"),yKr.forEach(t),$po=r(T6e," \u2014 "),kI=n(T6e,"A",{href:!0});var LKr=s(kI);kpo=r(LKr,"CTRLModel"),LKr.forEach(t),Spo=r(T6e," (CTRL model)"),T6e.forEach(t),Rpo=i($),vp=n($,"LI",{});var M6e=s(vp);pse=n(M6e,"STRONG",{});var xKr=s(pse);Ppo=r(xKr,"cvt"),xKr.forEach(t),Bpo=r(M6e," \u2014 "),SI=n(M6e,"A",{href:!0});var $Kr=s(SI);Ipo=r($Kr,"CvtModel"),$Kr.forEach(t),qpo=r(M6e," (CvT model)"),M6e.forEach(t),Npo=i($),Fp=n($,"LI",{});var E6e=s(Fp);_se=n(E6e,"STRONG",{});var kKr=s(_se);jpo=r(kKr,"data2vec-audio"),kKr.forEach(t),Dpo=r(E6e," \u2014 "),RI=n(E6e,"A",{href:!0});var SKr=s(RI);Gpo=r(SKr,"Data2VecAudioModel"),SKr.forEach(t),Opo=r(E6e," (Data2VecAudio model)"),E6e.forEach(t),Vpo=i($),Tp=n($,"LI",{});var C6e=s(Tp);use=n(C6e,"STRONG",{});var RKr=s(use);Xpo=r(RKr,"data2vec-text"),RKr.forEach(t),zpo=r(C6e," \u2014 "),PI=n(C6e,"A",{href:!0});var PKr=s(PI);Wpo=r(PKr,"Data2VecTextModel"),PKr.forEach(t),Qpo=r(C6e," (Data2VecText model)"),C6e.forEach(t),Hpo=i($),Mp=n($,"LI",{});var w6e=s(Mp);bse=n(w6e,"STRONG",{});var BKr=s(bse);Upo=r(BKr,"data2vec-vision"),BKr.forEach(t),Jpo=r(w6e," \u2014 "),BI=n(w6e,"A",{href:!0});var IKr=s(BI);Ypo=r(IKr,"Data2VecVisionModel"),IKr.forEach(t),Kpo=r(w6e," (Data2VecVision model)"),w6e.forEach(t),Zpo=i($),Ep=n($,"LI",{});var A6e=s(Ep);vse=n(A6e,"STRONG",{});var qKr=s(vse);e_o=r(qKr,"deberta"),qKr.forEach(t),o_o=r(A6e," \u2014 "),II=n(A6e,"A",{href:!0});var NKr=s(II);r_o=r(NKr,"DebertaModel"),NKr.forEach(t),t_o=r(A6e," (DeBERTa model)"),A6e.forEach(t),a_o=i($),Cp=n($,"LI",{});var y6e=s(Cp);Fse=n(y6e,"STRONG",{});var jKr=s(Fse);n_o=r(jKr,"deberta-v2"),jKr.forEach(t),s_o=r(y6e," \u2014 "),qI=n(y6e,"A",{href:!0});var DKr=s(qI);l_o=r(DKr,"DebertaV2Model"),DKr.forEach(t),i_o=r(y6e," (DeBERTa-v2 model)"),y6e.forEach(t),d_o=i($),wp=n($,"LI",{});var L6e=s(wp);Tse=n(L6e,"STRONG",{});var GKr=s(Tse);c_o=r(GKr,"decision_transformer"),GKr.forEach(t),f_o=r(L6e," \u2014 "),NI=n(L6e,"A",{href:!0});var OKr=s(NI);m_o=r(OKr,"DecisionTransformerModel"),OKr.forEach(t),g_o=r(L6e," (Decision Transformer model)"),L6e.forEach(t),h_o=i($),Ap=n($,"LI",{});var x6e=s(Ap);Mse=n(x6e,"STRONG",{});var VKr=s(Mse);p_o=r(VKr,"deit"),VKr.forEach(t),__o=r(x6e," \u2014 "),jI=n(x6e,"A",{href:!0});var XKr=s(jI);u_o=r(XKr,"DeiTModel"),XKr.forEach(t),b_o=r(x6e," (DeiT model)"),x6e.forEach(t),v_o=i($),yp=n($,"LI",{});var $6e=s(yp);Ese=n($6e,"STRONG",{});var zKr=s(Ese);F_o=r(zKr,"detr"),zKr.forEach(t),T_o=r($6e," \u2014 "),DI=n($6e,"A",{href:!0});var WKr=s(DI);M_o=r(WKr,"DetrModel"),WKr.forEach(t),E_o=r($6e," (DETR model)"),$6e.forEach(t),C_o=i($),Lp=n($,"LI",{});var k6e=s(Lp);Cse=n(k6e,"STRONG",{});var QKr=s(Cse);w_o=r(QKr,"distilbert"),QKr.forEach(t),A_o=r(k6e," \u2014 "),GI=n(k6e,"A",{href:!0});var HKr=s(GI);y_o=r(HKr,"DistilBertModel"),HKr.forEach(t),L_o=r(k6e," (DistilBERT model)"),k6e.forEach(t),x_o=i($),xp=n($,"LI",{});var S6e=s(xp);wse=n(S6e,"STRONG",{});var UKr=s(wse);$_o=r(UKr,"dpr"),UKr.forEach(t),k_o=r(S6e," \u2014 "),OI=n(S6e,"A",{href:!0});var JKr=s(OI);S_o=r(JKr,"DPRQuestionEncoder"),JKr.forEach(t),R_o=r(S6e," (DPR model)"),S6e.forEach(t),P_o=i($),$p=n($,"LI",{});var R6e=s($p);Ase=n(R6e,"STRONG",{});var YKr=s(Ase);B_o=r(YKr,"dpt"),YKr.forEach(t),I_o=r(R6e," \u2014 "),VI=n(R6e,"A",{href:!0});var KKr=s(VI);q_o=r(KKr,"DPTModel"),KKr.forEach(t),N_o=r(R6e," (DPT model)"),R6e.forEach(t),j_o=i($),kp=n($,"LI",{});var P6e=s(kp);yse=n(P6e,"STRONG",{});var ZKr=s(yse);D_o=r(ZKr,"electra"),ZKr.forEach(t),G_o=r(P6e," \u2014 "),XI=n(P6e,"A",{href:!0});var eZr=s(XI);O_o=r(eZr,"ElectraModel"),eZr.forEach(t),V_o=r(P6e," (ELECTRA model)"),P6e.forEach(t),X_o=i($),Sp=n($,"LI",{});var B6e=s(Sp);Lse=n(B6e,"STRONG",{});var oZr=s(Lse);z_o=r(oZr,"flaubert"),oZr.forEach(t),W_o=r(B6e," \u2014 "),zI=n(B6e,"A",{href:!0});var rZr=s(zI);Q_o=r(rZr,"FlaubertModel"),rZr.forEach(t),H_o=r(B6e," (FlauBERT model)"),B6e.forEach(t),U_o=i($),Rp=n($,"LI",{});var I6e=s(Rp);xse=n(I6e,"STRONG",{});var tZr=s(xse);J_o=r(tZr,"flava"),tZr.forEach(t),Y_o=r(I6e," \u2014 "),WI=n(I6e,"A",{href:!0});var aZr=s(WI);K_o=r(aZr,"FlavaModel"),aZr.forEach(t),Z_o=r(I6e," (Flava model)"),I6e.forEach(t),euo=i($),Pp=n($,"LI",{});var q6e=s(Pp);$se=n(q6e,"STRONG",{});var nZr=s($se);ouo=r(nZr,"fnet"),nZr.forEach(t),ruo=r(q6e," \u2014 "),QI=n(q6e,"A",{href:!0});var sZr=s(QI);tuo=r(sZr,"FNetModel"),sZr.forEach(t),auo=r(q6e," (FNet model)"),q6e.forEach(t),nuo=i($),Bp=n($,"LI",{});var N6e=s(Bp);kse=n(N6e,"STRONG",{});var lZr=s(kse);suo=r(lZr,"fsmt"),lZr.forEach(t),luo=r(N6e," \u2014 "),HI=n(N6e,"A",{href:!0});var iZr=s(HI);iuo=r(iZr,"FSMTModel"),iZr.forEach(t),duo=r(N6e," (FairSeq Machine-Translation model)"),N6e.forEach(t),cuo=i($),Rs=n($,"LI",{});var R$=s(Rs);Sse=n(R$,"STRONG",{});var dZr=s(Sse);fuo=r(dZr,"funnel"),dZr.forEach(t),muo=r(R$," \u2014 "),UI=n(R$,"A",{href:!0});var cZr=s(UI);guo=r(cZr,"FunnelModel"),cZr.forEach(t),huo=r(R$," or "),JI=n(R$,"A",{href:!0});var fZr=s(JI);puo=r(fZr,"FunnelBaseModel"),fZr.forEach(t),_uo=r(R$," (Funnel Transformer model)"),R$.forEach(t),uuo=i($),Ip=n($,"LI",{});var j6e=s(Ip);Rse=n(j6e,"STRONG",{});var mZr=s(Rse);buo=r(mZr,"glpn"),mZr.forEach(t),vuo=r(j6e," \u2014 "),YI=n(j6e,"A",{href:!0});var gZr=s(YI);Fuo=r(gZr,"GLPNModel"),gZr.forEach(t),Tuo=r(j6e," (GLPN model)"),j6e.forEach(t),Muo=i($),qp=n($,"LI",{});var D6e=s(qp);Pse=n(D6e,"STRONG",{});var hZr=s(Pse);Euo=r(hZr,"gpt2"),hZr.forEach(t),Cuo=r(D6e," \u2014 "),KI=n(D6e,"A",{href:!0});var pZr=s(KI);wuo=r(pZr,"GPT2Model"),pZr.forEach(t),Auo=r(D6e," (OpenAI GPT-2 model)"),D6e.forEach(t),yuo=i($),Np=n($,"LI",{});var G6e=s(Np);Bse=n(G6e,"STRONG",{});var _Zr=s(Bse);Luo=r(_Zr,"gpt_neo"),_Zr.forEach(t),xuo=r(G6e," \u2014 "),ZI=n(G6e,"A",{href:!0});var uZr=s(ZI);$uo=r(uZr,"GPTNeoModel"),uZr.forEach(t),kuo=r(G6e," (GPT Neo model)"),G6e.forEach(t),Suo=i($),jp=n($,"LI",{});var O6e=s(jp);Ise=n(O6e,"STRONG",{});var bZr=s(Ise);Ruo=r(bZr,"gptj"),bZr.forEach(t),Puo=r(O6e," \u2014 "),eq=n(O6e,"A",{href:!0});var vZr=s(eq);Buo=r(vZr,"GPTJModel"),vZr.forEach(t),Iuo=r(O6e," (GPT-J model)"),O6e.forEach(t),quo=i($),Dp=n($,"LI",{});var V6e=s(Dp);qse=n(V6e,"STRONG",{});var FZr=s(qse);Nuo=r(FZr,"hubert"),FZr.forEach(t),juo=r(V6e," \u2014 "),oq=n(V6e,"A",{href:!0});var TZr=s(oq);Duo=r(TZr,"HubertModel"),TZr.forEach(t),Guo=r(V6e," (Hubert model)"),V6e.forEach(t),Ouo=i($),Gp=n($,"LI",{});var X6e=s(Gp);Nse=n(X6e,"STRONG",{});var MZr=s(Nse);Vuo=r(MZr,"ibert"),MZr.forEach(t),Xuo=r(X6e," \u2014 "),rq=n(X6e,"A",{href:!0});var EZr=s(rq);zuo=r(EZr,"IBertModel"),EZr.forEach(t),Wuo=r(X6e," (I-BERT model)"),X6e.forEach(t),Quo=i($),Op=n($,"LI",{});var z6e=s(Op);jse=n(z6e,"STRONG",{});var CZr=s(jse);Huo=r(CZr,"imagegpt"),CZr.forEach(t),Uuo=r(z6e," \u2014 "),tq=n(z6e,"A",{href:!0});var wZr=s(tq);Juo=r(wZr,"ImageGPTModel"),wZr.forEach(t),Yuo=r(z6e," (ImageGPT model)"),z6e.forEach(t),Kuo=i($),Vp=n($,"LI",{});var W6e=s(Vp);Dse=n(W6e,"STRONG",{});var AZr=s(Dse);Zuo=r(AZr,"layoutlm"),AZr.forEach(t),e2o=r(W6e," \u2014 "),aq=n(W6e,"A",{href:!0});var yZr=s(aq);o2o=r(yZr,"LayoutLMModel"),yZr.forEach(t),r2o=r(W6e," (LayoutLM model)"),W6e.forEach(t),t2o=i($),Xp=n($,"LI",{});var Q6e=s(Xp);Gse=n(Q6e,"STRONG",{});var LZr=s(Gse);a2o=r(LZr,"layoutlmv2"),LZr.forEach(t),n2o=r(Q6e," \u2014 "),nq=n(Q6e,"A",{href:!0});var xZr=s(nq);s2o=r(xZr,"LayoutLMv2Model"),xZr.forEach(t),l2o=r(Q6e," (LayoutLMv2 model)"),Q6e.forEach(t),i2o=i($),zp=n($,"LI",{});var H6e=s(zp);Ose=n(H6e,"STRONG",{});var $Zr=s(Ose);d2o=r($Zr,"led"),$Zr.forEach(t),c2o=r(H6e," \u2014 "),sq=n(H6e,"A",{href:!0});var kZr=s(sq);f2o=r(kZr,"LEDModel"),kZr.forEach(t),m2o=r(H6e," (LED model)"),H6e.forEach(t),g2o=i($),Wp=n($,"LI",{});var U6e=s(Wp);Vse=n(U6e,"STRONG",{});var SZr=s(Vse);h2o=r(SZr,"longformer"),SZr.forEach(t),p2o=r(U6e," \u2014 "),lq=n(U6e,"A",{href:!0});var RZr=s(lq);_2o=r(RZr,"LongformerModel"),RZr.forEach(t),u2o=r(U6e," (Longformer model)"),U6e.forEach(t),b2o=i($),Qp=n($,"LI",{});var J6e=s(Qp);Xse=n(J6e,"STRONG",{});var PZr=s(Xse);v2o=r(PZr,"luke"),PZr.forEach(t),F2o=r(J6e," \u2014 "),iq=n(J6e,"A",{href:!0});var BZr=s(iq);T2o=r(BZr,"LukeModel"),BZr.forEach(t),M2o=r(J6e," (LUKE model)"),J6e.forEach(t),E2o=i($),Hp=n($,"LI",{});var Y6e=s(Hp);zse=n(Y6e,"STRONG",{});var IZr=s(zse);C2o=r(IZr,"lxmert"),IZr.forEach(t),w2o=r(Y6e," \u2014 "),dq=n(Y6e,"A",{href:!0});var qZr=s(dq);A2o=r(qZr,"LxmertModel"),qZr.forEach(t),y2o=r(Y6e," (LXMERT model)"),Y6e.forEach(t),L2o=i($),Up=n($,"LI",{});var K6e=s(Up);Wse=n(K6e,"STRONG",{});var NZr=s(Wse);x2o=r(NZr,"m2m_100"),NZr.forEach(t),$2o=r(K6e," \u2014 "),cq=n(K6e,"A",{href:!0});var jZr=s(cq);k2o=r(jZr,"M2M100Model"),jZr.forEach(t),S2o=r(K6e," (M2M100 model)"),K6e.forEach(t),R2o=i($),Jp=n($,"LI",{});var Z6e=s(Jp);Qse=n(Z6e,"STRONG",{});var DZr=s(Qse);P2o=r(DZr,"marian"),DZr.forEach(t),B2o=r(Z6e," \u2014 "),fq=n(Z6e,"A",{href:!0});var GZr=s(fq);I2o=r(GZr,"MarianModel"),GZr.forEach(t),q2o=r(Z6e," (Marian model)"),Z6e.forEach(t),N2o=i($),Yp=n($,"LI",{});var eAe=s(Yp);Hse=n(eAe,"STRONG",{});var OZr=s(Hse);j2o=r(OZr,"maskformer"),OZr.forEach(t),D2o=r(eAe," \u2014 "),mq=n(eAe,"A",{href:!0});var VZr=s(mq);G2o=r(VZr,"MaskFormerModel"),VZr.forEach(t),O2o=r(eAe," (MaskFormer model)"),eAe.forEach(t),V2o=i($),Kp=n($,"LI",{});var oAe=s(Kp);Use=n(oAe,"STRONG",{});var XZr=s(Use);X2o=r(XZr,"mbart"),XZr.forEach(t),z2o=r(oAe," \u2014 "),gq=n(oAe,"A",{href:!0});var zZr=s(gq);W2o=r(zZr,"MBartModel"),zZr.forEach(t),Q2o=r(oAe," (mBART model)"),oAe.forEach(t),H2o=i($),Zp=n($,"LI",{});var rAe=s(Zp);Jse=n(rAe,"STRONG",{});var WZr=s(Jse);U2o=r(WZr,"megatron-bert"),WZr.forEach(t),J2o=r(rAe," \u2014 "),hq=n(rAe,"A",{href:!0});var QZr=s(hq);Y2o=r(QZr,"MegatronBertModel"),QZr.forEach(t),K2o=r(rAe," (MegatronBert model)"),rAe.forEach(t),Z2o=i($),e_=n($,"LI",{});var tAe=s(e_);Yse=n(tAe,"STRONG",{});var HZr=s(Yse);e1o=r(HZr,"mobilebert"),HZr.forEach(t),o1o=r(tAe," \u2014 "),pq=n(tAe,"A",{href:!0});var UZr=s(pq);r1o=r(UZr,"MobileBertModel"),UZr.forEach(t),t1o=r(tAe," (MobileBERT model)"),tAe.forEach(t),a1o=i($),o_=n($,"LI",{});var aAe=s(o_);Kse=n(aAe,"STRONG",{});var JZr=s(Kse);n1o=r(JZr,"mobilevit"),JZr.forEach(t),s1o=r(aAe," \u2014 "),_q=n(aAe,"A",{href:!0});var YZr=s(_q);l1o=r(YZr,"MobileViTModel"),YZr.forEach(t),i1o=r(aAe," (MobileViT model)"),aAe.forEach(t),d1o=i($),r_=n($,"LI",{});var nAe=s(r_);Zse=n(nAe,"STRONG",{});var KZr=s(Zse);c1o=r(KZr,"mpnet"),KZr.forEach(t),f1o=r(nAe," \u2014 "),uq=n(nAe,"A",{href:!0});var ZZr=s(uq);m1o=r(ZZr,"MPNetModel"),ZZr.forEach(t),g1o=r(nAe," (MPNet model)"),nAe.forEach(t),h1o=i($),t_=n($,"LI",{});var sAe=s(t_);ele=n(sAe,"STRONG",{});var eet=s(ele);p1o=r(eet,"mt5"),eet.forEach(t),_1o=r(sAe," \u2014 "),bq=n(sAe,"A",{href:!0});var oet=s(bq);u1o=r(oet,"MT5Model"),oet.forEach(t),b1o=r(sAe," (mT5 model)"),sAe.forEach(t),v1o=i($),a_=n($,"LI",{});var lAe=s(a_);ole=n(lAe,"STRONG",{});var ret=s(ole);F1o=r(ret,"nystromformer"),ret.forEach(t),T1o=r(lAe," \u2014 "),vq=n(lAe,"A",{href:!0});var tet=s(vq);M1o=r(tet,"NystromformerModel"),tet.forEach(t),E1o=r(lAe," (Nystromformer model)"),lAe.forEach(t),C1o=i($),n_=n($,"LI",{});var iAe=s(n_);rle=n(iAe,"STRONG",{});var aet=s(rle);w1o=r(aet,"openai-gpt"),aet.forEach(t),A1o=r(iAe," \u2014 "),Fq=n(iAe,"A",{href:!0});var net=s(Fq);y1o=r(net,"OpenAIGPTModel"),net.forEach(t),L1o=r(iAe," (OpenAI GPT model)"),iAe.forEach(t),x1o=i($),s_=n($,"LI",{});var dAe=s(s_);tle=n(dAe,"STRONG",{});var set=s(tle);$1o=r(set,"opt"),set.forEach(t),k1o=r(dAe," \u2014 "),Tq=n(dAe,"A",{href:!0});var iet=s(Tq);S1o=r(iet,"OPTModel"),iet.forEach(t),R1o=r(dAe," (OPT model)"),dAe.forEach(t),P1o=i($),l_=n($,"LI",{});var cAe=s(l_);ale=n(cAe,"STRONG",{});var det=s(ale);B1o=r(det,"pegasus"),det.forEach(t),I1o=r(cAe," \u2014 "),Mq=n(cAe,"A",{href:!0});var cet=s(Mq);q1o=r(cet,"PegasusModel"),cet.forEach(t),N1o=r(cAe," (Pegasus model)"),cAe.forEach(t),j1o=i($),i_=n($,"LI",{});var fAe=s(i_);nle=n(fAe,"STRONG",{});var fet=s(nle);D1o=r(fet,"perceiver"),fet.forEach(t),G1o=r(fAe," \u2014 "),Eq=n(fAe,"A",{href:!0});var met=s(Eq);O1o=r(met,"PerceiverModel"),met.forEach(t),V1o=r(fAe," (Perceiver model)"),fAe.forEach(t),X1o=i($),d_=n($,"LI",{});var mAe=s(d_);sle=n(mAe,"STRONG",{});var get=s(sle);z1o=r(get,"plbart"),get.forEach(t),W1o=r(mAe," \u2014 "),Cq=n(mAe,"A",{href:!0});var het=s(Cq);Q1o=r(het,"PLBartModel"),het.forEach(t),H1o=r(mAe," (PLBart model)"),mAe.forEach(t),U1o=i($),c_=n($,"LI",{});var gAe=s(c_);lle=n(gAe,"STRONG",{});var pet=s(lle);J1o=r(pet,"poolformer"),pet.forEach(t),Y1o=r(gAe," \u2014 "),wq=n(gAe,"A",{href:!0});var _et=s(wq);K1o=r(_et,"PoolFormerModel"),_et.forEach(t),Z1o=r(gAe," (PoolFormer model)"),gAe.forEach(t),ebo=i($),f_=n($,"LI",{});var hAe=s(f_);ile=n(hAe,"STRONG",{});var uet=s(ile);obo=r(uet,"prophetnet"),uet.forEach(t),rbo=r(hAe," \u2014 "),Aq=n(hAe,"A",{href:!0});var bet=s(Aq);tbo=r(bet,"ProphetNetModel"),bet.forEach(t),abo=r(hAe," (ProphetNet model)"),hAe.forEach(t),nbo=i($),m_=n($,"LI",{});var pAe=s(m_);dle=n(pAe,"STRONG",{});var vet=s(dle);sbo=r(vet,"qdqbert"),vet.forEach(t),lbo=r(pAe," \u2014 "),yq=n(pAe,"A",{href:!0});var Fet=s(yq);ibo=r(Fet,"QDQBertModel"),Fet.forEach(t),dbo=r(pAe," (QDQBert model)"),pAe.forEach(t),cbo=i($),g_=n($,"LI",{});var _Ae=s(g_);cle=n(_Ae,"STRONG",{});var Tet=s(cle);fbo=r(Tet,"reformer"),Tet.forEach(t),mbo=r(_Ae," \u2014 "),Lq=n(_Ae,"A",{href:!0});var Met=s(Lq);gbo=r(Met,"ReformerModel"),Met.forEach(t),hbo=r(_Ae," (Reformer model)"),_Ae.forEach(t),pbo=i($),h_=n($,"LI",{});var uAe=s(h_);fle=n(uAe,"STRONG",{});var Eet=s(fle);_bo=r(Eet,"regnet"),Eet.forEach(t),ubo=r(uAe," \u2014 "),xq=n(uAe,"A",{href:!0});var Cet=s(xq);bbo=r(Cet,"RegNetModel"),Cet.forEach(t),vbo=r(uAe," (RegNet model)"),uAe.forEach(t),Fbo=i($),p_=n($,"LI",{});var bAe=s(p_);mle=n(bAe,"STRONG",{});var wet=s(mle);Tbo=r(wet,"rembert"),wet.forEach(t),Mbo=r(bAe," \u2014 "),$q=n(bAe,"A",{href:!0});var Aet=s($q);Ebo=r(Aet,"RemBertModel"),Aet.forEach(t),Cbo=r(bAe," (RemBERT model)"),bAe.forEach(t),wbo=i($),__=n($,"LI",{});var vAe=s(__);gle=n(vAe,"STRONG",{});var yet=s(gle);Abo=r(yet,"resnet"),yet.forEach(t),ybo=r(vAe," \u2014 "),kq=n(vAe,"A",{href:!0});var Let=s(kq);Lbo=r(Let,"ResNetModel"),Let.forEach(t),xbo=r(vAe," (ResNet model)"),vAe.forEach(t),$bo=i($),u_=n($,"LI",{});var FAe=s(u_);hle=n(FAe,"STRONG",{});var xet=s(hle);kbo=r(xet,"retribert"),xet.forEach(t),Sbo=r(FAe," \u2014 "),Sq=n(FAe,"A",{href:!0});var $et=s(Sq);Rbo=r($et,"RetriBertModel"),$et.forEach(t),Pbo=r(FAe," (RetriBERT model)"),FAe.forEach(t),Bbo=i($),b_=n($,"LI",{});var TAe=s(b_);ple=n(TAe,"STRONG",{});var ket=s(ple);Ibo=r(ket,"roberta"),ket.forEach(t),qbo=r(TAe," \u2014 "),Rq=n(TAe,"A",{href:!0});var Set=s(Rq);Nbo=r(Set,"RobertaModel"),Set.forEach(t),jbo=r(TAe," (RoBERTa model)"),TAe.forEach(t),Dbo=i($),v_=n($,"LI",{});var MAe=s(v_);_le=n(MAe,"STRONG",{});var Ret=s(_le);Gbo=r(Ret,"roformer"),Ret.forEach(t),Obo=r(MAe," \u2014 "),Pq=n(MAe,"A",{href:!0});var Pet=s(Pq);Vbo=r(Pet,"RoFormerModel"),Pet.forEach(t),Xbo=r(MAe," (RoFormer model)"),MAe.forEach(t),zbo=i($),F_=n($,"LI",{});var EAe=s(F_);ule=n(EAe,"STRONG",{});var Bet=s(ule);Wbo=r(Bet,"segformer"),Bet.forEach(t),Qbo=r(EAe," \u2014 "),Bq=n(EAe,"A",{href:!0});var Iet=s(Bq);Hbo=r(Iet,"SegformerModel"),Iet.forEach(t),Ubo=r(EAe," (SegFormer model)"),EAe.forEach(t),Jbo=i($),T_=n($,"LI",{});var CAe=s(T_);ble=n(CAe,"STRONG",{});var qet=s(ble);Ybo=r(qet,"sew"),qet.forEach(t),Kbo=r(CAe," \u2014 "),Iq=n(CAe,"A",{href:!0});var Net=s(Iq);Zbo=r(Net,"SEWModel"),Net.forEach(t),e5o=r(CAe," (SEW model)"),CAe.forEach(t),o5o=i($),M_=n($,"LI",{});var wAe=s(M_);vle=n(wAe,"STRONG",{});var jet=s(vle);r5o=r(jet,"sew-d"),jet.forEach(t),t5o=r(wAe," \u2014 "),qq=n(wAe,"A",{href:!0});var Det=s(qq);a5o=r(Det,"SEWDModel"),Det.forEach(t),n5o=r(wAe," (SEW-D model)"),wAe.forEach(t),s5o=i($),E_=n($,"LI",{});var AAe=s(E_);Fle=n(AAe,"STRONG",{});var Get=s(Fle);l5o=r(Get,"speech_to_text"),Get.forEach(t),i5o=r(AAe," \u2014 "),Nq=n(AAe,"A",{href:!0});var Oet=s(Nq);d5o=r(Oet,"Speech2TextModel"),Oet.forEach(t),c5o=r(AAe," (Speech2Text model)"),AAe.forEach(t),f5o=i($),C_=n($,"LI",{});var yAe=s(C_);Tle=n(yAe,"STRONG",{});var Vet=s(Tle);m5o=r(Vet,"splinter"),Vet.forEach(t),g5o=r(yAe," \u2014 "),jq=n(yAe,"A",{href:!0});var Xet=s(jq);h5o=r(Xet,"SplinterModel"),Xet.forEach(t),p5o=r(yAe," (Splinter model)"),yAe.forEach(t),_5o=i($),w_=n($,"LI",{});var LAe=s(w_);Mle=n(LAe,"STRONG",{});var zet=s(Mle);u5o=r(zet,"squeezebert"),zet.forEach(t),b5o=r(LAe," \u2014 "),Dq=n(LAe,"A",{href:!0});var Wet=s(Dq);v5o=r(Wet,"SqueezeBertModel"),Wet.forEach(t),F5o=r(LAe," (SqueezeBERT model)"),LAe.forEach(t),T5o=i($),A_=n($,"LI",{});var xAe=s(A_);Ele=n(xAe,"STRONG",{});var Qet=s(Ele);M5o=r(Qet,"swin"),Qet.forEach(t),E5o=r(xAe," \u2014 "),Gq=n(xAe,"A",{href:!0});var Het=s(Gq);C5o=r(Het,"SwinModel"),Het.forEach(t),w5o=r(xAe," (Swin model)"),xAe.forEach(t),A5o=i($),y_=n($,"LI",{});var $Ae=s(y_);Cle=n($Ae,"STRONG",{});var Uet=s(Cle);y5o=r(Uet,"t5"),Uet.forEach(t),L5o=r($Ae," \u2014 "),Oq=n($Ae,"A",{href:!0});var Jet=s(Oq);x5o=r(Jet,"T5Model"),Jet.forEach(t),$5o=r($Ae," (T5 model)"),$Ae.forEach(t),k5o=i($),L_=n($,"LI",{});var kAe=s(L_);wle=n(kAe,"STRONG",{});var Yet=s(wle);S5o=r(Yet,"tapas"),Yet.forEach(t),R5o=r(kAe," \u2014 "),Vq=n(kAe,"A",{href:!0});var Ket=s(Vq);P5o=r(Ket,"TapasModel"),Ket.forEach(t),B5o=r(kAe," (TAPAS model)"),kAe.forEach(t),I5o=i($),x_=n($,"LI",{});var SAe=s(x_);Ale=n(SAe,"STRONG",{});var Zet=s(Ale);q5o=r(Zet,"trajectory_transformer"),Zet.forEach(t),N5o=r(SAe," \u2014 "),Xq=n(SAe,"A",{href:!0});var eot=s(Xq);j5o=r(eot,"TrajectoryTransformerModel"),eot.forEach(t),D5o=r(SAe," (Trajectory Transformer model)"),SAe.forEach(t),G5o=i($),$_=n($,"LI",{});var RAe=s($_);yle=n(RAe,"STRONG",{});var oot=s(yle);O5o=r(oot,"transfo-xl"),oot.forEach(t),V5o=r(RAe," \u2014 "),zq=n(RAe,"A",{href:!0});var rot=s(zq);X5o=r(rot,"TransfoXLModel"),rot.forEach(t),z5o=r(RAe," (Transformer-XL model)"),RAe.forEach(t),W5o=i($),k_=n($,"LI",{});var PAe=s(k_);Lle=n(PAe,"STRONG",{});var tot=s(Lle);Q5o=r(tot,"unispeech"),tot.forEach(t),H5o=r(PAe," \u2014 "),Wq=n(PAe,"A",{href:!0});var aot=s(Wq);U5o=r(aot,"UniSpeechModel"),aot.forEach(t),J5o=r(PAe," (UniSpeech model)"),PAe.forEach(t),Y5o=i($),S_=n($,"LI",{});var BAe=s(S_);xle=n(BAe,"STRONG",{});var not=s(xle);K5o=r(not,"unispeech-sat"),not.forEach(t),Z5o=r(BAe," \u2014 "),Qq=n(BAe,"A",{href:!0});var sot=s(Qq);evo=r(sot,"UniSpeechSatModel"),sot.forEach(t),ovo=r(BAe," (UniSpeechSat model)"),BAe.forEach(t),rvo=i($),R_=n($,"LI",{});var IAe=s(R_);$le=n(IAe,"STRONG",{});var lot=s($le);tvo=r(lot,"van"),lot.forEach(t),avo=r(IAe," \u2014 "),Hq=n(IAe,"A",{href:!0});var iot=s(Hq);nvo=r(iot,"VanModel"),iot.forEach(t),svo=r(IAe," (VAN model)"),IAe.forEach(t),lvo=i($),P_=n($,"LI",{});var qAe=s(P_);kle=n(qAe,"STRONG",{});var dot=s(kle);ivo=r(dot,"vilt"),dot.forEach(t),dvo=r(qAe," \u2014 "),Uq=n(qAe,"A",{href:!0});var cot=s(Uq);cvo=r(cot,"ViltModel"),cot.forEach(t),fvo=r(qAe," (ViLT model)"),qAe.forEach(t),mvo=i($),B_=n($,"LI",{});var NAe=s(B_);Sle=n(NAe,"STRONG",{});var fot=s(Sle);gvo=r(fot,"vision-text-dual-encoder"),fot.forEach(t),hvo=r(NAe," \u2014 "),Jq=n(NAe,"A",{href:!0});var mot=s(Jq);pvo=r(mot,"VisionTextDualEncoderModel"),mot.forEach(t),_vo=r(NAe," (VisionTextDualEncoder model)"),NAe.forEach(t),uvo=i($),I_=n($,"LI",{});var jAe=s(I_);Rle=n(jAe,"STRONG",{});var got=s(Rle);bvo=r(got,"visual_bert"),got.forEach(t),vvo=r(jAe," \u2014 "),Yq=n(jAe,"A",{href:!0});var hot=s(Yq);Fvo=r(hot,"VisualBertModel"),hot.forEach(t),Tvo=r(jAe," (VisualBert model)"),jAe.forEach(t),Mvo=i($),q_=n($,"LI",{});var DAe=s(q_);Ple=n(DAe,"STRONG",{});var pot=s(Ple);Evo=r(pot,"vit"),pot.forEach(t),Cvo=r(DAe," \u2014 "),Kq=n(DAe,"A",{href:!0});var _ot=s(Kq);wvo=r(_ot,"ViTModel"),_ot.forEach(t),Avo=r(DAe," (ViT model)"),DAe.forEach(t),yvo=i($),N_=n($,"LI",{});var GAe=s(N_);Ble=n(GAe,"STRONG",{});var uot=s(Ble);Lvo=r(uot,"vit_mae"),uot.forEach(t),xvo=r(GAe," \u2014 "),Zq=n(GAe,"A",{href:!0});var bot=s(Zq);$vo=r(bot,"ViTMAEModel"),bot.forEach(t),kvo=r(GAe," (ViTMAE model)"),GAe.forEach(t),Svo=i($),j_=n($,"LI",{});var OAe=s(j_);Ile=n(OAe,"STRONG",{});var vot=s(Ile);Rvo=r(vot,"wav2vec2"),vot.forEach(t),Pvo=r(OAe," \u2014 "),eN=n(OAe,"A",{href:!0});var Fot=s(eN);Bvo=r(Fot,"Wav2Vec2Model"),Fot.forEach(t),Ivo=r(OAe," (Wav2Vec2 model)"),OAe.forEach(t),qvo=i($),D_=n($,"LI",{});var VAe=s(D_);qle=n(VAe,"STRONG",{});var Tot=s(qle);Nvo=r(Tot,"wav2vec2-conformer"),Tot.forEach(t),jvo=r(VAe," \u2014 "),oN=n(VAe,"A",{href:!0});var Mot=s(oN);Dvo=r(Mot,"Wav2Vec2ConformerModel"),Mot.forEach(t),Gvo=r(VAe," (Wav2Vec2-Conformer model)"),VAe.forEach(t),Ovo=i($),G_=n($,"LI",{});var XAe=s(G_);Nle=n(XAe,"STRONG",{});var Eot=s(Nle);Vvo=r(Eot,"wavlm"),Eot.forEach(t),Xvo=r(XAe," \u2014 "),rN=n(XAe,"A",{href:!0});var Cot=s(rN);zvo=r(Cot,"WavLMModel"),Cot.forEach(t),Wvo=r(XAe," (WavLM model)"),XAe.forEach(t),Qvo=i($),O_=n($,"LI",{});var zAe=s(O_);jle=n(zAe,"STRONG",{});var wot=s(jle);Hvo=r(wot,"xglm"),wot.forEach(t),Uvo=r(zAe," \u2014 "),tN=n(zAe,"A",{href:!0});var Aot=s(tN);Jvo=r(Aot,"XGLMModel"),Aot.forEach(t),Yvo=r(zAe," (XGLM model)"),zAe.forEach(t),Kvo=i($),V_=n($,"LI",{});var WAe=s(V_);Dle=n(WAe,"STRONG",{});var yot=s(Dle);Zvo=r(yot,"xlm"),yot.forEach(t),eFo=r(WAe," \u2014 "),aN=n(WAe,"A",{href:!0});var Lot=s(aN);oFo=r(Lot,"XLMModel"),Lot.forEach(t),rFo=r(WAe," (XLM model)"),WAe.forEach(t),tFo=i($),X_=n($,"LI",{});var QAe=s(X_);Gle=n(QAe,"STRONG",{});var xot=s(Gle);aFo=r(xot,"xlm-prophetnet"),xot.forEach(t),nFo=r(QAe," \u2014 "),nN=n(QAe,"A",{href:!0});var $ot=s(nN);sFo=r($ot,"XLMProphetNetModel"),$ot.forEach(t),lFo=r(QAe," (XLMProphetNet model)"),QAe.forEach(t),iFo=i($),z_=n($,"LI",{});var HAe=s(z_);Ole=n(HAe,"STRONG",{});var kot=s(Ole);dFo=r(kot,"xlm-roberta"),kot.forEach(t),cFo=r(HAe," \u2014 "),sN=n(HAe,"A",{href:!0});var Sot=s(sN);fFo=r(Sot,"XLMRobertaModel"),Sot.forEach(t),mFo=r(HAe," (XLM-RoBERTa model)"),HAe.forEach(t),gFo=i($),W_=n($,"LI",{});var UAe=s(W_);Vle=n(UAe,"STRONG",{});var Rot=s(Vle);hFo=r(Rot,"xlm-roberta-xl"),Rot.forEach(t),pFo=r(UAe," \u2014 "),lN=n(UAe,"A",{href:!0});var Pot=s(lN);_Fo=r(Pot,"XLMRobertaXLModel"),Pot.forEach(t),uFo=r(UAe," (XLM-RoBERTa-XL model)"),UAe.forEach(t),bFo=i($),Q_=n($,"LI",{});var JAe=s(Q_);Xle=n(JAe,"STRONG",{});var Bot=s(Xle);vFo=r(Bot,"xlnet"),Bot.forEach(t),FFo=r(JAe," \u2014 "),iN=n(JAe,"A",{href:!0});var Iot=s(iN);TFo=r(Iot,"XLNetModel"),Iot.forEach(t),MFo=r(JAe," (XLNet model)"),JAe.forEach(t),EFo=i($),H_=n($,"LI",{});var YAe=s(H_);zle=n(YAe,"STRONG",{});var qot=s(zle);CFo=r(qot,"yolos"),qot.forEach(t),wFo=r(YAe," \u2014 "),dN=n(YAe,"A",{href:!0});var Not=s(dN);AFo=r(Not,"YolosModel"),Not.forEach(t),yFo=r(YAe," (YOLOS model)"),YAe.forEach(t),LFo=i($),U_=n($,"LI",{});var KAe=s(U_);Wle=n(KAe,"STRONG",{});var jot=s(Wle);xFo=r(jot,"yoso"),jot.forEach(t),$Fo=r(KAe," \u2014 "),cN=n(KAe,"A",{href:!0});var Dot=s(cN);kFo=r(Dot,"YosoModel"),Dot.forEach(t),SFo=r(KAe," (YOSO model)"),KAe.forEach(t),$.forEach(t),RFo=i(ra),J_=n(ra,"P",{});var ZAe=s(J_);PFo=r(ZAe,"The model is set in evaluation mode by default using "),Qle=n(ZAe,"CODE",{});var Got=s(Qle);BFo=r(Got,"model.eval()"),Got.forEach(t),IFo=r(ZAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hle=n(ZAe,"CODE",{});var Oot=s(Hle);qFo=r(Oot,"model.train()"),Oot.forEach(t),ZAe.forEach(t),NFo=i(ra),T(Y_.$$.fragment,ra),ra.forEach(t),Ds.forEach(t),Pqe=i(f),Li=n(f,"H2",{class:!0});var Nje=s(Li);K_=n(Nje,"A",{id:!0,class:!0,href:!0});var Vot=s(K_);Ule=n(Vot,"SPAN",{});var Xot=s(Ule);T(JA.$$.fragment,Xot),Xot.forEach(t),Vot.forEach(t),jFo=i(Nje),Jle=n(Nje,"SPAN",{});var zot=s(Jle);DFo=r(zot,"AutoModelForPreTraining"),zot.forEach(t),Nje.forEach(t),Bqe=i(f),xo=n(f,"DIV",{class:!0});var Gs=s(xo);T(YA.$$.fragment,Gs),GFo=i(Gs),xi=n(Gs,"P",{});var ZK=s(xi);OFo=r(ZK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),fN=n(ZK,"A",{href:!0});var Wot=s(fN);VFo=r(Wot,"from_pretrained()"),Wot.forEach(t),XFo=r(ZK," class method or the "),mN=n(ZK,"A",{href:!0});var Qot=s(mN);zFo=r(Qot,"from_config()"),Qot.forEach(t),WFo=r(ZK,` class
method.`),ZK.forEach(t),QFo=i(Gs),KA=n(Gs,"P",{});var jje=s(KA);HFo=r(jje,"This class cannot be instantiated directly using "),Yle=n(jje,"CODE",{});var Hot=s(Yle);UFo=r(Hot,"__init__()"),Hot.forEach(t),JFo=r(jje," (throws an error)."),jje.forEach(t),YFo=i(Gs),nt=n(Gs,"DIV",{class:!0});var Aw=s(nt);T(ZA.$$.fragment,Aw),KFo=i(Aw),Kle=n(Aw,"P",{});var Uot=s(Kle);ZFo=r(Uot,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Uot.forEach(t),e0o=i(Aw),$i=n(Aw,"P",{});var eZ=s($i);o0o=r(eZ,`Note:
Loading a model from its configuration file does `),Zle=n(eZ,"STRONG",{});var Jot=s(Zle);r0o=r(Jot,"not"),Jot.forEach(t),t0o=r(eZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),gN=n(eZ,"A",{href:!0});var Yot=s(gN);a0o=r(Yot,"from_pretrained()"),Yot.forEach(t),n0o=r(eZ," to load the model weights."),eZ.forEach(t),s0o=i(Aw),T(Z_.$$.fragment,Aw),Aw.forEach(t),l0o=i(Gs),Ye=n(Gs,"DIV",{class:!0});var ta=s(Ye);T(ey.$$.fragment,ta),i0o=i(ta),eie=n(ta,"P",{});var Kot=s(eie);d0o=r(Kot,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Kot.forEach(t),c0o=i(ta),$a=n(ta,"P",{});var yw=s($a);f0o=r(yw,"The model class to instantiate is selected based on the "),oie=n(yw,"CODE",{});var Zot=s(oie);m0o=r(Zot,"model_type"),Zot.forEach(t),g0o=r(yw,` property of the config object (either
passed as an argument or loaded from `),rie=n(yw,"CODE",{});var ert=s(rie);h0o=r(ert,"pretrained_model_name_or_path"),ert.forEach(t),p0o=r(yw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tie=n(yw,"CODE",{});var ort=s(tie);_0o=r(ort,"pretrained_model_name_or_path"),ort.forEach(t),u0o=r(yw,":"),yw.forEach(t),b0o=i(ta),G=n(ta,"UL",{});var O=s(G);eu=n(O,"LI",{});var eye=s(eu);aie=n(eye,"STRONG",{});var rrt=s(aie);v0o=r(rrt,"albert"),rrt.forEach(t),F0o=r(eye," \u2014 "),hN=n(eye,"A",{href:!0});var trt=s(hN);T0o=r(trt,"AlbertForPreTraining"),trt.forEach(t),M0o=r(eye," (ALBERT model)"),eye.forEach(t),E0o=i(O),ou=n(O,"LI",{});var oye=s(ou);nie=n(oye,"STRONG",{});var art=s(nie);C0o=r(art,"bart"),art.forEach(t),w0o=r(oye," \u2014 "),pN=n(oye,"A",{href:!0});var nrt=s(pN);A0o=r(nrt,"BartForConditionalGeneration"),nrt.forEach(t),y0o=r(oye," (BART model)"),oye.forEach(t),L0o=i(O),ru=n(O,"LI",{});var rye=s(ru);sie=n(rye,"STRONG",{});var srt=s(sie);x0o=r(srt,"bert"),srt.forEach(t),$0o=r(rye," \u2014 "),_N=n(rye,"A",{href:!0});var lrt=s(_N);k0o=r(lrt,"BertForPreTraining"),lrt.forEach(t),S0o=r(rye," (BERT model)"),rye.forEach(t),R0o=i(O),tu=n(O,"LI",{});var tye=s(tu);lie=n(tye,"STRONG",{});var irt=s(lie);P0o=r(irt,"big_bird"),irt.forEach(t),B0o=r(tye," \u2014 "),uN=n(tye,"A",{href:!0});var drt=s(uN);I0o=r(drt,"BigBirdForPreTraining"),drt.forEach(t),q0o=r(tye," (BigBird model)"),tye.forEach(t),N0o=i(O),au=n(O,"LI",{});var aye=s(au);iie=n(aye,"STRONG",{});var crt=s(iie);j0o=r(crt,"camembert"),crt.forEach(t),D0o=r(aye," \u2014 "),bN=n(aye,"A",{href:!0});var frt=s(bN);G0o=r(frt,"CamembertForMaskedLM"),frt.forEach(t),O0o=r(aye," (CamemBERT model)"),aye.forEach(t),V0o=i(O),nu=n(O,"LI",{});var nye=s(nu);die=n(nye,"STRONG",{});var mrt=s(die);X0o=r(mrt,"ctrl"),mrt.forEach(t),z0o=r(nye," \u2014 "),vN=n(nye,"A",{href:!0});var grt=s(vN);W0o=r(grt,"CTRLLMHeadModel"),grt.forEach(t),Q0o=r(nye," (CTRL model)"),nye.forEach(t),H0o=i(O),su=n(O,"LI",{});var sye=s(su);cie=n(sye,"STRONG",{});var hrt=s(cie);U0o=r(hrt,"data2vec-text"),hrt.forEach(t),J0o=r(sye," \u2014 "),FN=n(sye,"A",{href:!0});var prt=s(FN);Y0o=r(prt,"Data2VecTextForMaskedLM"),prt.forEach(t),K0o=r(sye," (Data2VecText model)"),sye.forEach(t),Z0o=i(O),lu=n(O,"LI",{});var lye=s(lu);fie=n(lye,"STRONG",{});var _rt=s(fie);eTo=r(_rt,"deberta"),_rt.forEach(t),oTo=r(lye," \u2014 "),TN=n(lye,"A",{href:!0});var urt=s(TN);rTo=r(urt,"DebertaForMaskedLM"),urt.forEach(t),tTo=r(lye," (DeBERTa model)"),lye.forEach(t),aTo=i(O),iu=n(O,"LI",{});var iye=s(iu);mie=n(iye,"STRONG",{});var brt=s(mie);nTo=r(brt,"deberta-v2"),brt.forEach(t),sTo=r(iye," \u2014 "),MN=n(iye,"A",{href:!0});var vrt=s(MN);lTo=r(vrt,"DebertaV2ForMaskedLM"),vrt.forEach(t),iTo=r(iye," (DeBERTa-v2 model)"),iye.forEach(t),dTo=i(O),du=n(O,"LI",{});var dye=s(du);gie=n(dye,"STRONG",{});var Frt=s(gie);cTo=r(Frt,"distilbert"),Frt.forEach(t),fTo=r(dye," \u2014 "),EN=n(dye,"A",{href:!0});var Trt=s(EN);mTo=r(Trt,"DistilBertForMaskedLM"),Trt.forEach(t),gTo=r(dye," (DistilBERT model)"),dye.forEach(t),hTo=i(O),cu=n(O,"LI",{});var cye=s(cu);hie=n(cye,"STRONG",{});var Mrt=s(hie);pTo=r(Mrt,"electra"),Mrt.forEach(t),_To=r(cye," \u2014 "),CN=n(cye,"A",{href:!0});var Ert=s(CN);uTo=r(Ert,"ElectraForPreTraining"),Ert.forEach(t),bTo=r(cye," (ELECTRA model)"),cye.forEach(t),vTo=i(O),fu=n(O,"LI",{});var fye=s(fu);pie=n(fye,"STRONG",{});var Crt=s(pie);FTo=r(Crt,"flaubert"),Crt.forEach(t),TTo=r(fye," \u2014 "),wN=n(fye,"A",{href:!0});var wrt=s(wN);MTo=r(wrt,"FlaubertWithLMHeadModel"),wrt.forEach(t),ETo=r(fye," (FlauBERT model)"),fye.forEach(t),CTo=i(O),mu=n(O,"LI",{});var mye=s(mu);_ie=n(mye,"STRONG",{});var Art=s(_ie);wTo=r(Art,"flava"),Art.forEach(t),ATo=r(mye," \u2014 "),AN=n(mye,"A",{href:!0});var yrt=s(AN);yTo=r(yrt,"FlavaForPreTraining"),yrt.forEach(t),LTo=r(mye," (Flava model)"),mye.forEach(t),xTo=i(O),gu=n(O,"LI",{});var gye=s(gu);uie=n(gye,"STRONG",{});var Lrt=s(uie);$To=r(Lrt,"fnet"),Lrt.forEach(t),kTo=r(gye," \u2014 "),yN=n(gye,"A",{href:!0});var xrt=s(yN);STo=r(xrt,"FNetForPreTraining"),xrt.forEach(t),RTo=r(gye," (FNet model)"),gye.forEach(t),PTo=i(O),hu=n(O,"LI",{});var hye=s(hu);bie=n(hye,"STRONG",{});var $rt=s(bie);BTo=r($rt,"fsmt"),$rt.forEach(t),ITo=r(hye," \u2014 "),LN=n(hye,"A",{href:!0});var krt=s(LN);qTo=r(krt,"FSMTForConditionalGeneration"),krt.forEach(t),NTo=r(hye," (FairSeq Machine-Translation model)"),hye.forEach(t),jTo=i(O),pu=n(O,"LI",{});var pye=s(pu);vie=n(pye,"STRONG",{});var Srt=s(vie);DTo=r(Srt,"funnel"),Srt.forEach(t),GTo=r(pye," \u2014 "),xN=n(pye,"A",{href:!0});var Rrt=s(xN);OTo=r(Rrt,"FunnelForPreTraining"),Rrt.forEach(t),VTo=r(pye," (Funnel Transformer model)"),pye.forEach(t),XTo=i(O),_u=n(O,"LI",{});var _ye=s(_u);Fie=n(_ye,"STRONG",{});var Prt=s(Fie);zTo=r(Prt,"gpt2"),Prt.forEach(t),WTo=r(_ye," \u2014 "),$N=n(_ye,"A",{href:!0});var Brt=s($N);QTo=r(Brt,"GPT2LMHeadModel"),Brt.forEach(t),HTo=r(_ye," (OpenAI GPT-2 model)"),_ye.forEach(t),UTo=i(O),uu=n(O,"LI",{});var uye=s(uu);Tie=n(uye,"STRONG",{});var Irt=s(Tie);JTo=r(Irt,"ibert"),Irt.forEach(t),YTo=r(uye," \u2014 "),kN=n(uye,"A",{href:!0});var qrt=s(kN);KTo=r(qrt,"IBertForMaskedLM"),qrt.forEach(t),ZTo=r(uye," (I-BERT model)"),uye.forEach(t),e7o=i(O),bu=n(O,"LI",{});var bye=s(bu);Mie=n(bye,"STRONG",{});var Nrt=s(Mie);o7o=r(Nrt,"layoutlm"),Nrt.forEach(t),r7o=r(bye," \u2014 "),SN=n(bye,"A",{href:!0});var jrt=s(SN);t7o=r(jrt,"LayoutLMForMaskedLM"),jrt.forEach(t),a7o=r(bye," (LayoutLM model)"),bye.forEach(t),n7o=i(O),vu=n(O,"LI",{});var vye=s(vu);Eie=n(vye,"STRONG",{});var Drt=s(Eie);s7o=r(Drt,"longformer"),Drt.forEach(t),l7o=r(vye," \u2014 "),RN=n(vye,"A",{href:!0});var Grt=s(RN);i7o=r(Grt,"LongformerForMaskedLM"),Grt.forEach(t),d7o=r(vye," (Longformer model)"),vye.forEach(t),c7o=i(O),Fu=n(O,"LI",{});var Fye=s(Fu);Cie=n(Fye,"STRONG",{});var Ort=s(Cie);f7o=r(Ort,"lxmert"),Ort.forEach(t),m7o=r(Fye," \u2014 "),PN=n(Fye,"A",{href:!0});var Vrt=s(PN);g7o=r(Vrt,"LxmertForPreTraining"),Vrt.forEach(t),h7o=r(Fye," (LXMERT model)"),Fye.forEach(t),p7o=i(O),Tu=n(O,"LI",{});var Tye=s(Tu);wie=n(Tye,"STRONG",{});var Xrt=s(wie);_7o=r(Xrt,"megatron-bert"),Xrt.forEach(t),u7o=r(Tye," \u2014 "),BN=n(Tye,"A",{href:!0});var zrt=s(BN);b7o=r(zrt,"MegatronBertForPreTraining"),zrt.forEach(t),v7o=r(Tye," (MegatronBert model)"),Tye.forEach(t),F7o=i(O),Mu=n(O,"LI",{});var Mye=s(Mu);Aie=n(Mye,"STRONG",{});var Wrt=s(Aie);T7o=r(Wrt,"mobilebert"),Wrt.forEach(t),M7o=r(Mye," \u2014 "),IN=n(Mye,"A",{href:!0});var Qrt=s(IN);E7o=r(Qrt,"MobileBertForPreTraining"),Qrt.forEach(t),C7o=r(Mye," (MobileBERT model)"),Mye.forEach(t),w7o=i(O),Eu=n(O,"LI",{});var Eye=s(Eu);yie=n(Eye,"STRONG",{});var Hrt=s(yie);A7o=r(Hrt,"mpnet"),Hrt.forEach(t),y7o=r(Eye," \u2014 "),qN=n(Eye,"A",{href:!0});var Urt=s(qN);L7o=r(Urt,"MPNetForMaskedLM"),Urt.forEach(t),x7o=r(Eye," (MPNet model)"),Eye.forEach(t),$7o=i(O),Cu=n(O,"LI",{});var Cye=s(Cu);Lie=n(Cye,"STRONG",{});var Jrt=s(Lie);k7o=r(Jrt,"openai-gpt"),Jrt.forEach(t),S7o=r(Cye," \u2014 "),NN=n(Cye,"A",{href:!0});var Yrt=s(NN);R7o=r(Yrt,"OpenAIGPTLMHeadModel"),Yrt.forEach(t),P7o=r(Cye," (OpenAI GPT model)"),Cye.forEach(t),B7o=i(O),wu=n(O,"LI",{});var wye=s(wu);xie=n(wye,"STRONG",{});var Krt=s(xie);I7o=r(Krt,"retribert"),Krt.forEach(t),q7o=r(wye," \u2014 "),jN=n(wye,"A",{href:!0});var Zrt=s(jN);N7o=r(Zrt,"RetriBertModel"),Zrt.forEach(t),j7o=r(wye," (RetriBERT model)"),wye.forEach(t),D7o=i(O),Au=n(O,"LI",{});var Aye=s(Au);$ie=n(Aye,"STRONG",{});var ett=s($ie);G7o=r(ett,"roberta"),ett.forEach(t),O7o=r(Aye," \u2014 "),DN=n(Aye,"A",{href:!0});var ott=s(DN);V7o=r(ott,"RobertaForMaskedLM"),ott.forEach(t),X7o=r(Aye," (RoBERTa model)"),Aye.forEach(t),z7o=i(O),yu=n(O,"LI",{});var yye=s(yu);kie=n(yye,"STRONG",{});var rtt=s(kie);W7o=r(rtt,"splinter"),rtt.forEach(t),Q7o=r(yye," \u2014 "),GN=n(yye,"A",{href:!0});var ttt=s(GN);H7o=r(ttt,"SplinterForPreTraining"),ttt.forEach(t),U7o=r(yye," (Splinter model)"),yye.forEach(t),J7o=i(O),Lu=n(O,"LI",{});var Lye=s(Lu);Sie=n(Lye,"STRONG",{});var att=s(Sie);Y7o=r(att,"squeezebert"),att.forEach(t),K7o=r(Lye," \u2014 "),ON=n(Lye,"A",{href:!0});var ntt=s(ON);Z7o=r(ntt,"SqueezeBertForMaskedLM"),ntt.forEach(t),eMo=r(Lye," (SqueezeBERT model)"),Lye.forEach(t),oMo=i(O),xu=n(O,"LI",{});var xye=s(xu);Rie=n(xye,"STRONG",{});var stt=s(Rie);rMo=r(stt,"t5"),stt.forEach(t),tMo=r(xye," \u2014 "),VN=n(xye,"A",{href:!0});var ltt=s(VN);aMo=r(ltt,"T5ForConditionalGeneration"),ltt.forEach(t),nMo=r(xye," (T5 model)"),xye.forEach(t),sMo=i(O),$u=n(O,"LI",{});var $ye=s($u);Pie=n($ye,"STRONG",{});var itt=s(Pie);lMo=r(itt,"tapas"),itt.forEach(t),iMo=r($ye," \u2014 "),XN=n($ye,"A",{href:!0});var dtt=s(XN);dMo=r(dtt,"TapasForMaskedLM"),dtt.forEach(t),cMo=r($ye," (TAPAS model)"),$ye.forEach(t),fMo=i(O),ku=n(O,"LI",{});var kye=s(ku);Bie=n(kye,"STRONG",{});var ctt=s(Bie);mMo=r(ctt,"transfo-xl"),ctt.forEach(t),gMo=r(kye," \u2014 "),zN=n(kye,"A",{href:!0});var ftt=s(zN);hMo=r(ftt,"TransfoXLLMHeadModel"),ftt.forEach(t),pMo=r(kye," (Transformer-XL model)"),kye.forEach(t),_Mo=i(O),Su=n(O,"LI",{});var Sye=s(Su);Iie=n(Sye,"STRONG",{});var mtt=s(Iie);uMo=r(mtt,"unispeech"),mtt.forEach(t),bMo=r(Sye," \u2014 "),WN=n(Sye,"A",{href:!0});var gtt=s(WN);vMo=r(gtt,"UniSpeechForPreTraining"),gtt.forEach(t),FMo=r(Sye," (UniSpeech model)"),Sye.forEach(t),TMo=i(O),Ru=n(O,"LI",{});var Rye=s(Ru);qie=n(Rye,"STRONG",{});var htt=s(qie);MMo=r(htt,"unispeech-sat"),htt.forEach(t),EMo=r(Rye," \u2014 "),QN=n(Rye,"A",{href:!0});var ptt=s(QN);CMo=r(ptt,"UniSpeechSatForPreTraining"),ptt.forEach(t),wMo=r(Rye," (UniSpeechSat model)"),Rye.forEach(t),AMo=i(O),Pu=n(O,"LI",{});var Pye=s(Pu);Nie=n(Pye,"STRONG",{});var _tt=s(Nie);yMo=r(_tt,"visual_bert"),_tt.forEach(t),LMo=r(Pye," \u2014 "),HN=n(Pye,"A",{href:!0});var utt=s(HN);xMo=r(utt,"VisualBertForPreTraining"),utt.forEach(t),$Mo=r(Pye," (VisualBert model)"),Pye.forEach(t),kMo=i(O),Bu=n(O,"LI",{});var Bye=s(Bu);jie=n(Bye,"STRONG",{});var btt=s(jie);SMo=r(btt,"vit_mae"),btt.forEach(t),RMo=r(Bye," \u2014 "),UN=n(Bye,"A",{href:!0});var vtt=s(UN);PMo=r(vtt,"ViTMAEForPreTraining"),vtt.forEach(t),BMo=r(Bye," (ViTMAE model)"),Bye.forEach(t),IMo=i(O),Iu=n(O,"LI",{});var Iye=s(Iu);Die=n(Iye,"STRONG",{});var Ftt=s(Die);qMo=r(Ftt,"wav2vec2"),Ftt.forEach(t),NMo=r(Iye," \u2014 "),JN=n(Iye,"A",{href:!0});var Ttt=s(JN);jMo=r(Ttt,"Wav2Vec2ForPreTraining"),Ttt.forEach(t),DMo=r(Iye," (Wav2Vec2 model)"),Iye.forEach(t),GMo=i(O),qu=n(O,"LI",{});var qye=s(qu);Gie=n(qye,"STRONG",{});var Mtt=s(Gie);OMo=r(Mtt,"wav2vec2-conformer"),Mtt.forEach(t),VMo=r(qye," \u2014 "),YN=n(qye,"A",{href:!0});var Ett=s(YN);XMo=r(Ett,"Wav2Vec2ConformerForPreTraining"),Ett.forEach(t),zMo=r(qye," (Wav2Vec2-Conformer model)"),qye.forEach(t),WMo=i(O),Nu=n(O,"LI",{});var Nye=s(Nu);Oie=n(Nye,"STRONG",{});var Ctt=s(Oie);QMo=r(Ctt,"xlm"),Ctt.forEach(t),HMo=r(Nye," \u2014 "),KN=n(Nye,"A",{href:!0});var wtt=s(KN);UMo=r(wtt,"XLMWithLMHeadModel"),wtt.forEach(t),JMo=r(Nye," (XLM model)"),Nye.forEach(t),YMo=i(O),ju=n(O,"LI",{});var jye=s(ju);Vie=n(jye,"STRONG",{});var Att=s(Vie);KMo=r(Att,"xlm-roberta"),Att.forEach(t),ZMo=r(jye," \u2014 "),ZN=n(jye,"A",{href:!0});var ytt=s(ZN);e4o=r(ytt,"XLMRobertaForMaskedLM"),ytt.forEach(t),o4o=r(jye," (XLM-RoBERTa model)"),jye.forEach(t),r4o=i(O),Du=n(O,"LI",{});var Dye=s(Du);Xie=n(Dye,"STRONG",{});var Ltt=s(Xie);t4o=r(Ltt,"xlm-roberta-xl"),Ltt.forEach(t),a4o=r(Dye," \u2014 "),ej=n(Dye,"A",{href:!0});var xtt=s(ej);n4o=r(xtt,"XLMRobertaXLForMaskedLM"),xtt.forEach(t),s4o=r(Dye," (XLM-RoBERTa-XL model)"),Dye.forEach(t),l4o=i(O),Gu=n(O,"LI",{});var Gye=s(Gu);zie=n(Gye,"STRONG",{});var $tt=s(zie);i4o=r($tt,"xlnet"),$tt.forEach(t),d4o=r(Gye," \u2014 "),oj=n(Gye,"A",{href:!0});var ktt=s(oj);c4o=r(ktt,"XLNetLMHeadModel"),ktt.forEach(t),f4o=r(Gye," (XLNet model)"),Gye.forEach(t),O.forEach(t),m4o=i(ta),Ou=n(ta,"P",{});var Oye=s(Ou);g4o=r(Oye,"The model is set in evaluation mode by default using "),Wie=n(Oye,"CODE",{});var Stt=s(Wie);h4o=r(Stt,"model.eval()"),Stt.forEach(t),p4o=r(Oye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qie=n(Oye,"CODE",{});var Rtt=s(Qie);_4o=r(Rtt,"model.train()"),Rtt.forEach(t),Oye.forEach(t),u4o=i(ta),T(Vu.$$.fragment,ta),ta.forEach(t),Gs.forEach(t),Iqe=i(f),ki=n(f,"H2",{class:!0});var Dje=s(ki);Xu=n(Dje,"A",{id:!0,class:!0,href:!0});var Ptt=s(Xu);Hie=n(Ptt,"SPAN",{});var Btt=s(Hie);T(oy.$$.fragment,Btt),Btt.forEach(t),Ptt.forEach(t),b4o=i(Dje),Uie=n(Dje,"SPAN",{});var Itt=s(Uie);v4o=r(Itt,"AutoModelForCausalLM"),Itt.forEach(t),Dje.forEach(t),qqe=i(f),$o=n(f,"DIV",{class:!0});var Os=s($o);T(ry.$$.fragment,Os),F4o=i(Os),Si=n(Os,"P",{});var oZ=s(Si);T4o=r(oZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),rj=n(oZ,"A",{href:!0});var qtt=s(rj);M4o=r(qtt,"from_pretrained()"),qtt.forEach(t),E4o=r(oZ," class method or the "),tj=n(oZ,"A",{href:!0});var Ntt=s(tj);C4o=r(Ntt,"from_config()"),Ntt.forEach(t),w4o=r(oZ,` class
method.`),oZ.forEach(t),A4o=i(Os),ty=n(Os,"P",{});var Gje=s(ty);y4o=r(Gje,"This class cannot be instantiated directly using "),Jie=n(Gje,"CODE",{});var jtt=s(Jie);L4o=r(jtt,"__init__()"),jtt.forEach(t),x4o=r(Gje," (throws an error)."),Gje.forEach(t),$4o=i(Os),st=n(Os,"DIV",{class:!0});var Lw=s(st);T(ay.$$.fragment,Lw),k4o=i(Lw),Yie=n(Lw,"P",{});var Dtt=s(Yie);S4o=r(Dtt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Dtt.forEach(t),R4o=i(Lw),Ri=n(Lw,"P",{});var rZ=s(Ri);P4o=r(rZ,`Note:
Loading a model from its configuration file does `),Kie=n(rZ,"STRONG",{});var Gtt=s(Kie);B4o=r(Gtt,"not"),Gtt.forEach(t),I4o=r(rZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),aj=n(rZ,"A",{href:!0});var Ott=s(aj);q4o=r(Ott,"from_pretrained()"),Ott.forEach(t),N4o=r(rZ," to load the model weights."),rZ.forEach(t),j4o=i(Lw),T(zu.$$.fragment,Lw),Lw.forEach(t),D4o=i(Os),Ke=n(Os,"DIV",{class:!0});var aa=s(Ke);T(ny.$$.fragment,aa),G4o=i(aa),Zie=n(aa,"P",{});var Vtt=s(Zie);O4o=r(Vtt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Vtt.forEach(t),V4o=i(aa),ka=n(aa,"P",{});var xw=s(ka);X4o=r(xw,"The model class to instantiate is selected based on the "),ede=n(xw,"CODE",{});var Xtt=s(ede);z4o=r(Xtt,"model_type"),Xtt.forEach(t),W4o=r(xw,` property of the config object (either
passed as an argument or loaded from `),ode=n(xw,"CODE",{});var ztt=s(ode);Q4o=r(ztt,"pretrained_model_name_or_path"),ztt.forEach(t),H4o=r(xw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rde=n(xw,"CODE",{});var Wtt=s(rde);U4o=r(Wtt,"pretrained_model_name_or_path"),Wtt.forEach(t),J4o=r(xw,":"),xw.forEach(t),Y4o=i(aa),z=n(aa,"UL",{});var Q=s(z);Wu=n(Q,"LI",{});var Vye=s(Wu);tde=n(Vye,"STRONG",{});var Qtt=s(tde);K4o=r(Qtt,"bart"),Qtt.forEach(t),Z4o=r(Vye," \u2014 "),nj=n(Vye,"A",{href:!0});var Htt=s(nj);eEo=r(Htt,"BartForCausalLM"),Htt.forEach(t),oEo=r(Vye," (BART model)"),Vye.forEach(t),rEo=i(Q),Qu=n(Q,"LI",{});var Xye=s(Qu);ade=n(Xye,"STRONG",{});var Utt=s(ade);tEo=r(Utt,"bert"),Utt.forEach(t),aEo=r(Xye," \u2014 "),sj=n(Xye,"A",{href:!0});var Jtt=s(sj);nEo=r(Jtt,"BertLMHeadModel"),Jtt.forEach(t),sEo=r(Xye," (BERT model)"),Xye.forEach(t),lEo=i(Q),Hu=n(Q,"LI",{});var zye=s(Hu);nde=n(zye,"STRONG",{});var Ytt=s(nde);iEo=r(Ytt,"bert-generation"),Ytt.forEach(t),dEo=r(zye," \u2014 "),lj=n(zye,"A",{href:!0});var Ktt=s(lj);cEo=r(Ktt,"BertGenerationDecoder"),Ktt.forEach(t),fEo=r(zye," (Bert Generation model)"),zye.forEach(t),mEo=i(Q),Uu=n(Q,"LI",{});var Wye=s(Uu);sde=n(Wye,"STRONG",{});var Ztt=s(sde);gEo=r(Ztt,"big_bird"),Ztt.forEach(t),hEo=r(Wye," \u2014 "),ij=n(Wye,"A",{href:!0});var eat=s(ij);pEo=r(eat,"BigBirdForCausalLM"),eat.forEach(t),_Eo=r(Wye," (BigBird model)"),Wye.forEach(t),uEo=i(Q),Ju=n(Q,"LI",{});var Qye=s(Ju);lde=n(Qye,"STRONG",{});var oat=s(lde);bEo=r(oat,"bigbird_pegasus"),oat.forEach(t),vEo=r(Qye," \u2014 "),dj=n(Qye,"A",{href:!0});var rat=s(dj);FEo=r(rat,"BigBirdPegasusForCausalLM"),rat.forEach(t),TEo=r(Qye," (BigBirdPegasus model)"),Qye.forEach(t),MEo=i(Q),Yu=n(Q,"LI",{});var Hye=s(Yu);ide=n(Hye,"STRONG",{});var tat=s(ide);EEo=r(tat,"blenderbot"),tat.forEach(t),CEo=r(Hye," \u2014 "),cj=n(Hye,"A",{href:!0});var aat=s(cj);wEo=r(aat,"BlenderbotForCausalLM"),aat.forEach(t),AEo=r(Hye," (Blenderbot model)"),Hye.forEach(t),yEo=i(Q),Ku=n(Q,"LI",{});var Uye=s(Ku);dde=n(Uye,"STRONG",{});var nat=s(dde);LEo=r(nat,"blenderbot-small"),nat.forEach(t),xEo=r(Uye," \u2014 "),fj=n(Uye,"A",{href:!0});var sat=s(fj);$Eo=r(sat,"BlenderbotSmallForCausalLM"),sat.forEach(t),kEo=r(Uye," (BlenderbotSmall model)"),Uye.forEach(t),SEo=i(Q),Zu=n(Q,"LI",{});var Jye=s(Zu);cde=n(Jye,"STRONG",{});var lat=s(cde);REo=r(lat,"camembert"),lat.forEach(t),PEo=r(Jye," \u2014 "),mj=n(Jye,"A",{href:!0});var iat=s(mj);BEo=r(iat,"CamembertForCausalLM"),iat.forEach(t),IEo=r(Jye," (CamemBERT model)"),Jye.forEach(t),qEo=i(Q),e2=n(Q,"LI",{});var Yye=s(e2);fde=n(Yye,"STRONG",{});var dat=s(fde);NEo=r(dat,"ctrl"),dat.forEach(t),jEo=r(Yye," \u2014 "),gj=n(Yye,"A",{href:!0});var cat=s(gj);DEo=r(cat,"CTRLLMHeadModel"),cat.forEach(t),GEo=r(Yye," (CTRL model)"),Yye.forEach(t),OEo=i(Q),o2=n(Q,"LI",{});var Kye=s(o2);mde=n(Kye,"STRONG",{});var fat=s(mde);VEo=r(fat,"data2vec-text"),fat.forEach(t),XEo=r(Kye," \u2014 "),hj=n(Kye,"A",{href:!0});var mat=s(hj);zEo=r(mat,"Data2VecTextForCausalLM"),mat.forEach(t),WEo=r(Kye," (Data2VecText model)"),Kye.forEach(t),QEo=i(Q),r2=n(Q,"LI",{});var Zye=s(r2);gde=n(Zye,"STRONG",{});var gat=s(gde);HEo=r(gat,"electra"),gat.forEach(t),UEo=r(Zye," \u2014 "),pj=n(Zye,"A",{href:!0});var hat=s(pj);JEo=r(hat,"ElectraForCausalLM"),hat.forEach(t),YEo=r(Zye," (ELECTRA model)"),Zye.forEach(t),KEo=i(Q),t2=n(Q,"LI",{});var e8e=s(t2);hde=n(e8e,"STRONG",{});var pat=s(hde);ZEo=r(pat,"gpt2"),pat.forEach(t),eCo=r(e8e," \u2014 "),_j=n(e8e,"A",{href:!0});var _at=s(_j);oCo=r(_at,"GPT2LMHeadModel"),_at.forEach(t),rCo=r(e8e," (OpenAI GPT-2 model)"),e8e.forEach(t),tCo=i(Q),a2=n(Q,"LI",{});var o8e=s(a2);pde=n(o8e,"STRONG",{});var uat=s(pde);aCo=r(uat,"gpt_neo"),uat.forEach(t),nCo=r(o8e," \u2014 "),uj=n(o8e,"A",{href:!0});var bat=s(uj);sCo=r(bat,"GPTNeoForCausalLM"),bat.forEach(t),lCo=r(o8e," (GPT Neo model)"),o8e.forEach(t),iCo=i(Q),n2=n(Q,"LI",{});var r8e=s(n2);_de=n(r8e,"STRONG",{});var vat=s(_de);dCo=r(vat,"gptj"),vat.forEach(t),cCo=r(r8e," \u2014 "),bj=n(r8e,"A",{href:!0});var Fat=s(bj);fCo=r(Fat,"GPTJForCausalLM"),Fat.forEach(t),mCo=r(r8e," (GPT-J model)"),r8e.forEach(t),gCo=i(Q),s2=n(Q,"LI",{});var t8e=s(s2);ude=n(t8e,"STRONG",{});var Tat=s(ude);hCo=r(Tat,"marian"),Tat.forEach(t),pCo=r(t8e," \u2014 "),vj=n(t8e,"A",{href:!0});var Mat=s(vj);_Co=r(Mat,"MarianForCausalLM"),Mat.forEach(t),uCo=r(t8e," (Marian model)"),t8e.forEach(t),bCo=i(Q),l2=n(Q,"LI",{});var a8e=s(l2);bde=n(a8e,"STRONG",{});var Eat=s(bde);vCo=r(Eat,"mbart"),Eat.forEach(t),FCo=r(a8e," \u2014 "),Fj=n(a8e,"A",{href:!0});var Cat=s(Fj);TCo=r(Cat,"MBartForCausalLM"),Cat.forEach(t),MCo=r(a8e," (mBART model)"),a8e.forEach(t),ECo=i(Q),i2=n(Q,"LI",{});var n8e=s(i2);vde=n(n8e,"STRONG",{});var wat=s(vde);CCo=r(wat,"megatron-bert"),wat.forEach(t),wCo=r(n8e," \u2014 "),Tj=n(n8e,"A",{href:!0});var Aat=s(Tj);ACo=r(Aat,"MegatronBertForCausalLM"),Aat.forEach(t),yCo=r(n8e," (MegatronBert model)"),n8e.forEach(t),LCo=i(Q),d2=n(Q,"LI",{});var s8e=s(d2);Fde=n(s8e,"STRONG",{});var yat=s(Fde);xCo=r(yat,"openai-gpt"),yat.forEach(t),$Co=r(s8e," \u2014 "),Mj=n(s8e,"A",{href:!0});var Lat=s(Mj);kCo=r(Lat,"OpenAIGPTLMHeadModel"),Lat.forEach(t),SCo=r(s8e," (OpenAI GPT model)"),s8e.forEach(t),RCo=i(Q),c2=n(Q,"LI",{});var l8e=s(c2);Tde=n(l8e,"STRONG",{});var xat=s(Tde);PCo=r(xat,"opt"),xat.forEach(t),BCo=r(l8e," \u2014 "),Ej=n(l8e,"A",{href:!0});var $at=s(Ej);ICo=r($at,"OPTForCausalLM"),$at.forEach(t),qCo=r(l8e," (OPT model)"),l8e.forEach(t),NCo=i(Q),f2=n(Q,"LI",{});var i8e=s(f2);Mde=n(i8e,"STRONG",{});var kat=s(Mde);jCo=r(kat,"pegasus"),kat.forEach(t),DCo=r(i8e," \u2014 "),Cj=n(i8e,"A",{href:!0});var Sat=s(Cj);GCo=r(Sat,"PegasusForCausalLM"),Sat.forEach(t),OCo=r(i8e," (Pegasus model)"),i8e.forEach(t),VCo=i(Q),m2=n(Q,"LI",{});var d8e=s(m2);Ede=n(d8e,"STRONG",{});var Rat=s(Ede);XCo=r(Rat,"plbart"),Rat.forEach(t),zCo=r(d8e," \u2014 "),wj=n(d8e,"A",{href:!0});var Pat=s(wj);WCo=r(Pat,"PLBartForCausalLM"),Pat.forEach(t),QCo=r(d8e," (PLBart model)"),d8e.forEach(t),HCo=i(Q),g2=n(Q,"LI",{});var c8e=s(g2);Cde=n(c8e,"STRONG",{});var Bat=s(Cde);UCo=r(Bat,"prophetnet"),Bat.forEach(t),JCo=r(c8e," \u2014 "),Aj=n(c8e,"A",{href:!0});var Iat=s(Aj);YCo=r(Iat,"ProphetNetForCausalLM"),Iat.forEach(t),KCo=r(c8e," (ProphetNet model)"),c8e.forEach(t),ZCo=i(Q),h2=n(Q,"LI",{});var f8e=s(h2);wde=n(f8e,"STRONG",{});var qat=s(wde);e3o=r(qat,"qdqbert"),qat.forEach(t),o3o=r(f8e," \u2014 "),yj=n(f8e,"A",{href:!0});var Nat=s(yj);r3o=r(Nat,"QDQBertLMHeadModel"),Nat.forEach(t),t3o=r(f8e," (QDQBert model)"),f8e.forEach(t),a3o=i(Q),p2=n(Q,"LI",{});var m8e=s(p2);Ade=n(m8e,"STRONG",{});var jat=s(Ade);n3o=r(jat,"reformer"),jat.forEach(t),s3o=r(m8e," \u2014 "),Lj=n(m8e,"A",{href:!0});var Dat=s(Lj);l3o=r(Dat,"ReformerModelWithLMHead"),Dat.forEach(t),i3o=r(m8e," (Reformer model)"),m8e.forEach(t),d3o=i(Q),_2=n(Q,"LI",{});var g8e=s(_2);yde=n(g8e,"STRONG",{});var Gat=s(yde);c3o=r(Gat,"rembert"),Gat.forEach(t),f3o=r(g8e," \u2014 "),xj=n(g8e,"A",{href:!0});var Oat=s(xj);m3o=r(Oat,"RemBertForCausalLM"),Oat.forEach(t),g3o=r(g8e," (RemBERT model)"),g8e.forEach(t),h3o=i(Q),u2=n(Q,"LI",{});var h8e=s(u2);Lde=n(h8e,"STRONG",{});var Vat=s(Lde);p3o=r(Vat,"roberta"),Vat.forEach(t),_3o=r(h8e," \u2014 "),$j=n(h8e,"A",{href:!0});var Xat=s($j);u3o=r(Xat,"RobertaForCausalLM"),Xat.forEach(t),b3o=r(h8e," (RoBERTa model)"),h8e.forEach(t),v3o=i(Q),b2=n(Q,"LI",{});var p8e=s(b2);xde=n(p8e,"STRONG",{});var zat=s(xde);F3o=r(zat,"roformer"),zat.forEach(t),T3o=r(p8e," \u2014 "),kj=n(p8e,"A",{href:!0});var Wat=s(kj);M3o=r(Wat,"RoFormerForCausalLM"),Wat.forEach(t),E3o=r(p8e," (RoFormer model)"),p8e.forEach(t),C3o=i(Q),v2=n(Q,"LI",{});var _8e=s(v2);$de=n(_8e,"STRONG",{});var Qat=s($de);w3o=r(Qat,"speech_to_text_2"),Qat.forEach(t),A3o=r(_8e," \u2014 "),Sj=n(_8e,"A",{href:!0});var Hat=s(Sj);y3o=r(Hat,"Speech2Text2ForCausalLM"),Hat.forEach(t),L3o=r(_8e," (Speech2Text2 model)"),_8e.forEach(t),x3o=i(Q),F2=n(Q,"LI",{});var u8e=s(F2);kde=n(u8e,"STRONG",{});var Uat=s(kde);$3o=r(Uat,"transfo-xl"),Uat.forEach(t),k3o=r(u8e," \u2014 "),Rj=n(u8e,"A",{href:!0});var Jat=s(Rj);S3o=r(Jat,"TransfoXLLMHeadModel"),Jat.forEach(t),R3o=r(u8e," (Transformer-XL model)"),u8e.forEach(t),P3o=i(Q),T2=n(Q,"LI",{});var b8e=s(T2);Sde=n(b8e,"STRONG",{});var Yat=s(Sde);B3o=r(Yat,"trocr"),Yat.forEach(t),I3o=r(b8e," \u2014 "),Pj=n(b8e,"A",{href:!0});var Kat=s(Pj);q3o=r(Kat,"TrOCRForCausalLM"),Kat.forEach(t),N3o=r(b8e," (TrOCR model)"),b8e.forEach(t),j3o=i(Q),M2=n(Q,"LI",{});var v8e=s(M2);Rde=n(v8e,"STRONG",{});var Zat=s(Rde);D3o=r(Zat,"xglm"),Zat.forEach(t),G3o=r(v8e," \u2014 "),Bj=n(v8e,"A",{href:!0});var ent=s(Bj);O3o=r(ent,"XGLMForCausalLM"),ent.forEach(t),V3o=r(v8e," (XGLM model)"),v8e.forEach(t),X3o=i(Q),E2=n(Q,"LI",{});var F8e=s(E2);Pde=n(F8e,"STRONG",{});var ont=s(Pde);z3o=r(ont,"xlm"),ont.forEach(t),W3o=r(F8e," \u2014 "),Ij=n(F8e,"A",{href:!0});var rnt=s(Ij);Q3o=r(rnt,"XLMWithLMHeadModel"),rnt.forEach(t),H3o=r(F8e," (XLM model)"),F8e.forEach(t),U3o=i(Q),C2=n(Q,"LI",{});var T8e=s(C2);Bde=n(T8e,"STRONG",{});var tnt=s(Bde);J3o=r(tnt,"xlm-prophetnet"),tnt.forEach(t),Y3o=r(T8e," \u2014 "),qj=n(T8e,"A",{href:!0});var ant=s(qj);K3o=r(ant,"XLMProphetNetForCausalLM"),ant.forEach(t),Z3o=r(T8e," (XLMProphetNet model)"),T8e.forEach(t),ewo=i(Q),w2=n(Q,"LI",{});var M8e=s(w2);Ide=n(M8e,"STRONG",{});var nnt=s(Ide);owo=r(nnt,"xlm-roberta"),nnt.forEach(t),rwo=r(M8e," \u2014 "),Nj=n(M8e,"A",{href:!0});var snt=s(Nj);two=r(snt,"XLMRobertaForCausalLM"),snt.forEach(t),awo=r(M8e," (XLM-RoBERTa model)"),M8e.forEach(t),nwo=i(Q),A2=n(Q,"LI",{});var E8e=s(A2);qde=n(E8e,"STRONG",{});var lnt=s(qde);swo=r(lnt,"xlm-roberta-xl"),lnt.forEach(t),lwo=r(E8e," \u2014 "),jj=n(E8e,"A",{href:!0});var int=s(jj);iwo=r(int,"XLMRobertaXLForCausalLM"),int.forEach(t),dwo=r(E8e," (XLM-RoBERTa-XL model)"),E8e.forEach(t),cwo=i(Q),y2=n(Q,"LI",{});var C8e=s(y2);Nde=n(C8e,"STRONG",{});var dnt=s(Nde);fwo=r(dnt,"xlnet"),dnt.forEach(t),mwo=r(C8e," \u2014 "),Dj=n(C8e,"A",{href:!0});var cnt=s(Dj);gwo=r(cnt,"XLNetLMHeadModel"),cnt.forEach(t),hwo=r(C8e," (XLNet model)"),C8e.forEach(t),Q.forEach(t),pwo=i(aa),L2=n(aa,"P",{});var w8e=s(L2);_wo=r(w8e,"The model is set in evaluation mode by default using "),jde=n(w8e,"CODE",{});var fnt=s(jde);uwo=r(fnt,"model.eval()"),fnt.forEach(t),bwo=r(w8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dde=n(w8e,"CODE",{});var mnt=s(Dde);vwo=r(mnt,"model.train()"),mnt.forEach(t),w8e.forEach(t),Fwo=i(aa),T(x2.$$.fragment,aa),aa.forEach(t),Os.forEach(t),Nqe=i(f),Pi=n(f,"H2",{class:!0});var Oje=s(Pi);$2=n(Oje,"A",{id:!0,class:!0,href:!0});var gnt=s($2);Gde=n(gnt,"SPAN",{});var hnt=s(Gde);T(sy.$$.fragment,hnt),hnt.forEach(t),gnt.forEach(t),Two=i(Oje),Ode=n(Oje,"SPAN",{});var pnt=s(Ode);Mwo=r(pnt,"AutoModelForMaskedLM"),pnt.forEach(t),Oje.forEach(t),jqe=i(f),ko=n(f,"DIV",{class:!0});var Vs=s(ko);T(ly.$$.fragment,Vs),Ewo=i(Vs),Bi=n(Vs,"P",{});var tZ=s(Bi);Cwo=r(tZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Gj=n(tZ,"A",{href:!0});var _nt=s(Gj);wwo=r(_nt,"from_pretrained()"),_nt.forEach(t),Awo=r(tZ," class method or the "),Oj=n(tZ,"A",{href:!0});var unt=s(Oj);ywo=r(unt,"from_config()"),unt.forEach(t),Lwo=r(tZ,` class
method.`),tZ.forEach(t),xwo=i(Vs),iy=n(Vs,"P",{});var Vje=s(iy);$wo=r(Vje,"This class cannot be instantiated directly using "),Vde=n(Vje,"CODE",{});var bnt=s(Vde);kwo=r(bnt,"__init__()"),bnt.forEach(t),Swo=r(Vje," (throws an error)."),Vje.forEach(t),Rwo=i(Vs),lt=n(Vs,"DIV",{class:!0});var $w=s(lt);T(dy.$$.fragment,$w),Pwo=i($w),Xde=n($w,"P",{});var vnt=s(Xde);Bwo=r(vnt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),vnt.forEach(t),Iwo=i($w),Ii=n($w,"P",{});var aZ=s(Ii);qwo=r(aZ,`Note:
Loading a model from its configuration file does `),zde=n(aZ,"STRONG",{});var Fnt=s(zde);Nwo=r(Fnt,"not"),Fnt.forEach(t),jwo=r(aZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Vj=n(aZ,"A",{href:!0});var Tnt=s(Vj);Dwo=r(Tnt,"from_pretrained()"),Tnt.forEach(t),Gwo=r(aZ," to load the model weights."),aZ.forEach(t),Owo=i($w),T(k2.$$.fragment,$w),$w.forEach(t),Vwo=i(Vs),Ze=n(Vs,"DIV",{class:!0});var na=s(Ze);T(cy.$$.fragment,na),Xwo=i(na),Wde=n(na,"P",{});var Mnt=s(Wde);zwo=r(Mnt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Mnt.forEach(t),Wwo=i(na),Sa=n(na,"P",{});var kw=s(Sa);Qwo=r(kw,"The model class to instantiate is selected based on the "),Qde=n(kw,"CODE",{});var Ent=s(Qde);Hwo=r(Ent,"model_type"),Ent.forEach(t),Uwo=r(kw,` property of the config object (either
passed as an argument or loaded from `),Hde=n(kw,"CODE",{});var Cnt=s(Hde);Jwo=r(Cnt,"pretrained_model_name_or_path"),Cnt.forEach(t),Ywo=r(kw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ude=n(kw,"CODE",{});var wnt=s(Ude);Kwo=r(wnt,"pretrained_model_name_or_path"),wnt.forEach(t),Zwo=r(kw,":"),kw.forEach(t),e6o=i(na),W=n(na,"UL",{});var H=s(W);S2=n(H,"LI",{});var A8e=s(S2);Jde=n(A8e,"STRONG",{});var Ant=s(Jde);o6o=r(Ant,"albert"),Ant.forEach(t),r6o=r(A8e," \u2014 "),Xj=n(A8e,"A",{href:!0});var ynt=s(Xj);t6o=r(ynt,"AlbertForMaskedLM"),ynt.forEach(t),a6o=r(A8e," (ALBERT model)"),A8e.forEach(t),n6o=i(H),R2=n(H,"LI",{});var y8e=s(R2);Yde=n(y8e,"STRONG",{});var Lnt=s(Yde);s6o=r(Lnt,"bart"),Lnt.forEach(t),l6o=r(y8e," \u2014 "),zj=n(y8e,"A",{href:!0});var xnt=s(zj);i6o=r(xnt,"BartForConditionalGeneration"),xnt.forEach(t),d6o=r(y8e," (BART model)"),y8e.forEach(t),c6o=i(H),P2=n(H,"LI",{});var L8e=s(P2);Kde=n(L8e,"STRONG",{});var $nt=s(Kde);f6o=r($nt,"bert"),$nt.forEach(t),m6o=r(L8e," \u2014 "),Wj=n(L8e,"A",{href:!0});var knt=s(Wj);g6o=r(knt,"BertForMaskedLM"),knt.forEach(t),h6o=r(L8e," (BERT model)"),L8e.forEach(t),p6o=i(H),B2=n(H,"LI",{});var x8e=s(B2);Zde=n(x8e,"STRONG",{});var Snt=s(Zde);_6o=r(Snt,"big_bird"),Snt.forEach(t),u6o=r(x8e," \u2014 "),Qj=n(x8e,"A",{href:!0});var Rnt=s(Qj);b6o=r(Rnt,"BigBirdForMaskedLM"),Rnt.forEach(t),v6o=r(x8e," (BigBird model)"),x8e.forEach(t),F6o=i(H),I2=n(H,"LI",{});var $8e=s(I2);ece=n($8e,"STRONG",{});var Pnt=s(ece);T6o=r(Pnt,"camembert"),Pnt.forEach(t),M6o=r($8e," \u2014 "),Hj=n($8e,"A",{href:!0});var Bnt=s(Hj);E6o=r(Bnt,"CamembertForMaskedLM"),Bnt.forEach(t),C6o=r($8e," (CamemBERT model)"),$8e.forEach(t),w6o=i(H),q2=n(H,"LI",{});var k8e=s(q2);oce=n(k8e,"STRONG",{});var Int=s(oce);A6o=r(Int,"convbert"),Int.forEach(t),y6o=r(k8e," \u2014 "),Uj=n(k8e,"A",{href:!0});var qnt=s(Uj);L6o=r(qnt,"ConvBertForMaskedLM"),qnt.forEach(t),x6o=r(k8e," (ConvBERT model)"),k8e.forEach(t),$6o=i(H),N2=n(H,"LI",{});var S8e=s(N2);rce=n(S8e,"STRONG",{});var Nnt=s(rce);k6o=r(Nnt,"data2vec-text"),Nnt.forEach(t),S6o=r(S8e," \u2014 "),Jj=n(S8e,"A",{href:!0});var jnt=s(Jj);R6o=r(jnt,"Data2VecTextForMaskedLM"),jnt.forEach(t),P6o=r(S8e," (Data2VecText model)"),S8e.forEach(t),B6o=i(H),j2=n(H,"LI",{});var R8e=s(j2);tce=n(R8e,"STRONG",{});var Dnt=s(tce);I6o=r(Dnt,"deberta"),Dnt.forEach(t),q6o=r(R8e," \u2014 "),Yj=n(R8e,"A",{href:!0});var Gnt=s(Yj);N6o=r(Gnt,"DebertaForMaskedLM"),Gnt.forEach(t),j6o=r(R8e," (DeBERTa model)"),R8e.forEach(t),D6o=i(H),D2=n(H,"LI",{});var P8e=s(D2);ace=n(P8e,"STRONG",{});var Ont=s(ace);G6o=r(Ont,"deberta-v2"),Ont.forEach(t),O6o=r(P8e," \u2014 "),Kj=n(P8e,"A",{href:!0});var Vnt=s(Kj);V6o=r(Vnt,"DebertaV2ForMaskedLM"),Vnt.forEach(t),X6o=r(P8e," (DeBERTa-v2 model)"),P8e.forEach(t),z6o=i(H),G2=n(H,"LI",{});var B8e=s(G2);nce=n(B8e,"STRONG",{});var Xnt=s(nce);W6o=r(Xnt,"distilbert"),Xnt.forEach(t),Q6o=r(B8e," \u2014 "),Zj=n(B8e,"A",{href:!0});var znt=s(Zj);H6o=r(znt,"DistilBertForMaskedLM"),znt.forEach(t),U6o=r(B8e," (DistilBERT model)"),B8e.forEach(t),J6o=i(H),O2=n(H,"LI",{});var I8e=s(O2);sce=n(I8e,"STRONG",{});var Wnt=s(sce);Y6o=r(Wnt,"electra"),Wnt.forEach(t),K6o=r(I8e," \u2014 "),eD=n(I8e,"A",{href:!0});var Qnt=s(eD);Z6o=r(Qnt,"ElectraForMaskedLM"),Qnt.forEach(t),eAo=r(I8e," (ELECTRA model)"),I8e.forEach(t),oAo=i(H),V2=n(H,"LI",{});var q8e=s(V2);lce=n(q8e,"STRONG",{});var Hnt=s(lce);rAo=r(Hnt,"flaubert"),Hnt.forEach(t),tAo=r(q8e," \u2014 "),oD=n(q8e,"A",{href:!0});var Unt=s(oD);aAo=r(Unt,"FlaubertWithLMHeadModel"),Unt.forEach(t),nAo=r(q8e," (FlauBERT model)"),q8e.forEach(t),sAo=i(H),X2=n(H,"LI",{});var N8e=s(X2);ice=n(N8e,"STRONG",{});var Jnt=s(ice);lAo=r(Jnt,"fnet"),Jnt.forEach(t),iAo=r(N8e," \u2014 "),rD=n(N8e,"A",{href:!0});var Ynt=s(rD);dAo=r(Ynt,"FNetForMaskedLM"),Ynt.forEach(t),cAo=r(N8e," (FNet model)"),N8e.forEach(t),fAo=i(H),z2=n(H,"LI",{});var j8e=s(z2);dce=n(j8e,"STRONG",{});var Knt=s(dce);mAo=r(Knt,"funnel"),Knt.forEach(t),gAo=r(j8e," \u2014 "),tD=n(j8e,"A",{href:!0});var Znt=s(tD);hAo=r(Znt,"FunnelForMaskedLM"),Znt.forEach(t),pAo=r(j8e," (Funnel Transformer model)"),j8e.forEach(t),_Ao=i(H),W2=n(H,"LI",{});var D8e=s(W2);cce=n(D8e,"STRONG",{});var est=s(cce);uAo=r(est,"ibert"),est.forEach(t),bAo=r(D8e," \u2014 "),aD=n(D8e,"A",{href:!0});var ost=s(aD);vAo=r(ost,"IBertForMaskedLM"),ost.forEach(t),FAo=r(D8e," (I-BERT model)"),D8e.forEach(t),TAo=i(H),Q2=n(H,"LI",{});var G8e=s(Q2);fce=n(G8e,"STRONG",{});var rst=s(fce);MAo=r(rst,"layoutlm"),rst.forEach(t),EAo=r(G8e," \u2014 "),nD=n(G8e,"A",{href:!0});var tst=s(nD);CAo=r(tst,"LayoutLMForMaskedLM"),tst.forEach(t),wAo=r(G8e," (LayoutLM model)"),G8e.forEach(t),AAo=i(H),H2=n(H,"LI",{});var O8e=s(H2);mce=n(O8e,"STRONG",{});var ast=s(mce);yAo=r(ast,"longformer"),ast.forEach(t),LAo=r(O8e," \u2014 "),sD=n(O8e,"A",{href:!0});var nst=s(sD);xAo=r(nst,"LongformerForMaskedLM"),nst.forEach(t),$Ao=r(O8e," (Longformer model)"),O8e.forEach(t),kAo=i(H),U2=n(H,"LI",{});var V8e=s(U2);gce=n(V8e,"STRONG",{});var sst=s(gce);SAo=r(sst,"mbart"),sst.forEach(t),RAo=r(V8e," \u2014 "),lD=n(V8e,"A",{href:!0});var lst=s(lD);PAo=r(lst,"MBartForConditionalGeneration"),lst.forEach(t),BAo=r(V8e," (mBART model)"),V8e.forEach(t),IAo=i(H),J2=n(H,"LI",{});var X8e=s(J2);hce=n(X8e,"STRONG",{});var ist=s(hce);qAo=r(ist,"megatron-bert"),ist.forEach(t),NAo=r(X8e," \u2014 "),iD=n(X8e,"A",{href:!0});var dst=s(iD);jAo=r(dst,"MegatronBertForMaskedLM"),dst.forEach(t),DAo=r(X8e," (MegatronBert model)"),X8e.forEach(t),GAo=i(H),Y2=n(H,"LI",{});var z8e=s(Y2);pce=n(z8e,"STRONG",{});var cst=s(pce);OAo=r(cst,"mobilebert"),cst.forEach(t),VAo=r(z8e," \u2014 "),dD=n(z8e,"A",{href:!0});var fst=s(dD);XAo=r(fst,"MobileBertForMaskedLM"),fst.forEach(t),zAo=r(z8e," (MobileBERT model)"),z8e.forEach(t),WAo=i(H),K2=n(H,"LI",{});var W8e=s(K2);_ce=n(W8e,"STRONG",{});var mst=s(_ce);QAo=r(mst,"mpnet"),mst.forEach(t),HAo=r(W8e," \u2014 "),cD=n(W8e,"A",{href:!0});var gst=s(cD);UAo=r(gst,"MPNetForMaskedLM"),gst.forEach(t),JAo=r(W8e," (MPNet model)"),W8e.forEach(t),YAo=i(H),Z2=n(H,"LI",{});var Q8e=s(Z2);uce=n(Q8e,"STRONG",{});var hst=s(uce);KAo=r(hst,"nystromformer"),hst.forEach(t),ZAo=r(Q8e," \u2014 "),fD=n(Q8e,"A",{href:!0});var pst=s(fD);eyo=r(pst,"NystromformerForMaskedLM"),pst.forEach(t),oyo=r(Q8e," (Nystromformer model)"),Q8e.forEach(t),ryo=i(H),e1=n(H,"LI",{});var H8e=s(e1);bce=n(H8e,"STRONG",{});var _st=s(bce);tyo=r(_st,"perceiver"),_st.forEach(t),ayo=r(H8e," \u2014 "),mD=n(H8e,"A",{href:!0});var ust=s(mD);nyo=r(ust,"PerceiverForMaskedLM"),ust.forEach(t),syo=r(H8e," (Perceiver model)"),H8e.forEach(t),lyo=i(H),o1=n(H,"LI",{});var U8e=s(o1);vce=n(U8e,"STRONG",{});var bst=s(vce);iyo=r(bst,"qdqbert"),bst.forEach(t),dyo=r(U8e," \u2014 "),gD=n(U8e,"A",{href:!0});var vst=s(gD);cyo=r(vst,"QDQBertForMaskedLM"),vst.forEach(t),fyo=r(U8e," (QDQBert model)"),U8e.forEach(t),myo=i(H),r1=n(H,"LI",{});var J8e=s(r1);Fce=n(J8e,"STRONG",{});var Fst=s(Fce);gyo=r(Fst,"reformer"),Fst.forEach(t),hyo=r(J8e," \u2014 "),hD=n(J8e,"A",{href:!0});var Tst=s(hD);pyo=r(Tst,"ReformerForMaskedLM"),Tst.forEach(t),_yo=r(J8e," (Reformer model)"),J8e.forEach(t),uyo=i(H),t1=n(H,"LI",{});var Y8e=s(t1);Tce=n(Y8e,"STRONG",{});var Mst=s(Tce);byo=r(Mst,"rembert"),Mst.forEach(t),vyo=r(Y8e," \u2014 "),pD=n(Y8e,"A",{href:!0});var Est=s(pD);Fyo=r(Est,"RemBertForMaskedLM"),Est.forEach(t),Tyo=r(Y8e," (RemBERT model)"),Y8e.forEach(t),Myo=i(H),a1=n(H,"LI",{});var K8e=s(a1);Mce=n(K8e,"STRONG",{});var Cst=s(Mce);Eyo=r(Cst,"roberta"),Cst.forEach(t),Cyo=r(K8e," \u2014 "),_D=n(K8e,"A",{href:!0});var wst=s(_D);wyo=r(wst,"RobertaForMaskedLM"),wst.forEach(t),Ayo=r(K8e," (RoBERTa model)"),K8e.forEach(t),yyo=i(H),n1=n(H,"LI",{});var Z8e=s(n1);Ece=n(Z8e,"STRONG",{});var Ast=s(Ece);Lyo=r(Ast,"roformer"),Ast.forEach(t),xyo=r(Z8e," \u2014 "),uD=n(Z8e,"A",{href:!0});var yst=s(uD);$yo=r(yst,"RoFormerForMaskedLM"),yst.forEach(t),kyo=r(Z8e," (RoFormer model)"),Z8e.forEach(t),Syo=i(H),s1=n(H,"LI",{});var eLe=s(s1);Cce=n(eLe,"STRONG",{});var Lst=s(Cce);Ryo=r(Lst,"squeezebert"),Lst.forEach(t),Pyo=r(eLe," \u2014 "),bD=n(eLe,"A",{href:!0});var xst=s(bD);Byo=r(xst,"SqueezeBertForMaskedLM"),xst.forEach(t),Iyo=r(eLe," (SqueezeBERT model)"),eLe.forEach(t),qyo=i(H),l1=n(H,"LI",{});var oLe=s(l1);wce=n(oLe,"STRONG",{});var $st=s(wce);Nyo=r($st,"tapas"),$st.forEach(t),jyo=r(oLe," \u2014 "),vD=n(oLe,"A",{href:!0});var kst=s(vD);Dyo=r(kst,"TapasForMaskedLM"),kst.forEach(t),Gyo=r(oLe," (TAPAS model)"),oLe.forEach(t),Oyo=i(H),i1=n(H,"LI",{});var rLe=s(i1);Ace=n(rLe,"STRONG",{});var Sst=s(Ace);Vyo=r(Sst,"wav2vec2"),Sst.forEach(t),Xyo=r(rLe," \u2014 "),yce=n(rLe,"CODE",{});var Rst=s(yce);zyo=r(Rst,"Wav2Vec2ForMaskedLM"),Rst.forEach(t),Wyo=r(rLe," (Wav2Vec2 model)"),rLe.forEach(t),Qyo=i(H),d1=n(H,"LI",{});var tLe=s(d1);Lce=n(tLe,"STRONG",{});var Pst=s(Lce);Hyo=r(Pst,"xlm"),Pst.forEach(t),Uyo=r(tLe," \u2014 "),FD=n(tLe,"A",{href:!0});var Bst=s(FD);Jyo=r(Bst,"XLMWithLMHeadModel"),Bst.forEach(t),Yyo=r(tLe," (XLM model)"),tLe.forEach(t),Kyo=i(H),c1=n(H,"LI",{});var aLe=s(c1);xce=n(aLe,"STRONG",{});var Ist=s(xce);Zyo=r(Ist,"xlm-roberta"),Ist.forEach(t),e8o=r(aLe," \u2014 "),TD=n(aLe,"A",{href:!0});var qst=s(TD);o8o=r(qst,"XLMRobertaForMaskedLM"),qst.forEach(t),r8o=r(aLe," (XLM-RoBERTa model)"),aLe.forEach(t),t8o=i(H),f1=n(H,"LI",{});var nLe=s(f1);$ce=n(nLe,"STRONG",{});var Nst=s($ce);a8o=r(Nst,"xlm-roberta-xl"),Nst.forEach(t),n8o=r(nLe," \u2014 "),MD=n(nLe,"A",{href:!0});var jst=s(MD);s8o=r(jst,"XLMRobertaXLForMaskedLM"),jst.forEach(t),l8o=r(nLe," (XLM-RoBERTa-XL model)"),nLe.forEach(t),i8o=i(H),m1=n(H,"LI",{});var sLe=s(m1);kce=n(sLe,"STRONG",{});var Dst=s(kce);d8o=r(Dst,"yoso"),Dst.forEach(t),c8o=r(sLe," \u2014 "),ED=n(sLe,"A",{href:!0});var Gst=s(ED);f8o=r(Gst,"YosoForMaskedLM"),Gst.forEach(t),m8o=r(sLe," (YOSO model)"),sLe.forEach(t),H.forEach(t),g8o=i(na),g1=n(na,"P",{});var lLe=s(g1);h8o=r(lLe,"The model is set in evaluation mode by default using "),Sce=n(lLe,"CODE",{});var Ost=s(Sce);p8o=r(Ost,"model.eval()"),Ost.forEach(t),_8o=r(lLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rce=n(lLe,"CODE",{});var Vst=s(Rce);u8o=r(Vst,"model.train()"),Vst.forEach(t),lLe.forEach(t),b8o=i(na),T(h1.$$.fragment,na),na.forEach(t),Vs.forEach(t),Dqe=i(f),qi=n(f,"H2",{class:!0});var Xje=s(qi);p1=n(Xje,"A",{id:!0,class:!0,href:!0});var Xst=s(p1);Pce=n(Xst,"SPAN",{});var zst=s(Pce);T(fy.$$.fragment,zst),zst.forEach(t),Xst.forEach(t),v8o=i(Xje),Bce=n(Xje,"SPAN",{});var Wst=s(Bce);F8o=r(Wst,"AutoModelForSeq2SeqLM"),Wst.forEach(t),Xje.forEach(t),Gqe=i(f),So=n(f,"DIV",{class:!0});var Xs=s(So);T(my.$$.fragment,Xs),T8o=i(Xs),Ni=n(Xs,"P",{});var nZ=s(Ni);M8o=r(nZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),CD=n(nZ,"A",{href:!0});var Qst=s(CD);E8o=r(Qst,"from_pretrained()"),Qst.forEach(t),C8o=r(nZ," class method or the "),wD=n(nZ,"A",{href:!0});var Hst=s(wD);w8o=r(Hst,"from_config()"),Hst.forEach(t),A8o=r(nZ,` class
method.`),nZ.forEach(t),y8o=i(Xs),gy=n(Xs,"P",{});var zje=s(gy);L8o=r(zje,"This class cannot be instantiated directly using "),Ice=n(zje,"CODE",{});var Ust=s(Ice);x8o=r(Ust,"__init__()"),Ust.forEach(t),$8o=r(zje," (throws an error)."),zje.forEach(t),k8o=i(Xs),it=n(Xs,"DIV",{class:!0});var Sw=s(it);T(hy.$$.fragment,Sw),S8o=i(Sw),qce=n(Sw,"P",{});var Jst=s(qce);R8o=r(Jst,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Jst.forEach(t),P8o=i(Sw),ji=n(Sw,"P",{});var sZ=s(ji);B8o=r(sZ,`Note:
Loading a model from its configuration file does `),Nce=n(sZ,"STRONG",{});var Yst=s(Nce);I8o=r(Yst,"not"),Yst.forEach(t),q8o=r(sZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),AD=n(sZ,"A",{href:!0});var Kst=s(AD);N8o=r(Kst,"from_pretrained()"),Kst.forEach(t),j8o=r(sZ," to load the model weights."),sZ.forEach(t),D8o=i(Sw),T(_1.$$.fragment,Sw),Sw.forEach(t),G8o=i(Xs),eo=n(Xs,"DIV",{class:!0});var sa=s(eo);T(py.$$.fragment,sa),O8o=i(sa),jce=n(sa,"P",{});var Zst=s(jce);V8o=r(Zst,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Zst.forEach(t),X8o=i(sa),Ra=n(sa,"P",{});var Rw=s(Ra);z8o=r(Rw,"The model class to instantiate is selected based on the "),Dce=n(Rw,"CODE",{});var elt=s(Dce);W8o=r(elt,"model_type"),elt.forEach(t),Q8o=r(Rw,` property of the config object (either
passed as an argument or loaded from `),Gce=n(Rw,"CODE",{});var olt=s(Gce);H8o=r(olt,"pretrained_model_name_or_path"),olt.forEach(t),U8o=r(Rw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Oce=n(Rw,"CODE",{});var rlt=s(Oce);J8o=r(rlt,"pretrained_model_name_or_path"),rlt.forEach(t),Y8o=r(Rw,":"),Rw.forEach(t),K8o=i(sa),_e=n(sa,"UL",{});var Fe=s(_e);u1=n(Fe,"LI",{});var iLe=s(u1);Vce=n(iLe,"STRONG",{});var tlt=s(Vce);Z8o=r(tlt,"bart"),tlt.forEach(t),eLo=r(iLe," \u2014 "),yD=n(iLe,"A",{href:!0});var alt=s(yD);oLo=r(alt,"BartForConditionalGeneration"),alt.forEach(t),rLo=r(iLe," (BART model)"),iLe.forEach(t),tLo=i(Fe),b1=n(Fe,"LI",{});var dLe=s(b1);Xce=n(dLe,"STRONG",{});var nlt=s(Xce);aLo=r(nlt,"bigbird_pegasus"),nlt.forEach(t),nLo=r(dLe," \u2014 "),LD=n(dLe,"A",{href:!0});var slt=s(LD);sLo=r(slt,"BigBirdPegasusForConditionalGeneration"),slt.forEach(t),lLo=r(dLe," (BigBirdPegasus model)"),dLe.forEach(t),iLo=i(Fe),v1=n(Fe,"LI",{});var cLe=s(v1);zce=n(cLe,"STRONG",{});var llt=s(zce);dLo=r(llt,"blenderbot"),llt.forEach(t),cLo=r(cLe," \u2014 "),xD=n(cLe,"A",{href:!0});var ilt=s(xD);fLo=r(ilt,"BlenderbotForConditionalGeneration"),ilt.forEach(t),mLo=r(cLe," (Blenderbot model)"),cLe.forEach(t),gLo=i(Fe),F1=n(Fe,"LI",{});var fLe=s(F1);Wce=n(fLe,"STRONG",{});var dlt=s(Wce);hLo=r(dlt,"blenderbot-small"),dlt.forEach(t),pLo=r(fLe," \u2014 "),$D=n(fLe,"A",{href:!0});var clt=s($D);_Lo=r(clt,"BlenderbotSmallForConditionalGeneration"),clt.forEach(t),uLo=r(fLe," (BlenderbotSmall model)"),fLe.forEach(t),bLo=i(Fe),T1=n(Fe,"LI",{});var mLe=s(T1);Qce=n(mLe,"STRONG",{});var flt=s(Qce);vLo=r(flt,"encoder-decoder"),flt.forEach(t),FLo=r(mLe," \u2014 "),kD=n(mLe,"A",{href:!0});var mlt=s(kD);TLo=r(mlt,"EncoderDecoderModel"),mlt.forEach(t),MLo=r(mLe," (Encoder decoder model)"),mLe.forEach(t),ELo=i(Fe),M1=n(Fe,"LI",{});var gLe=s(M1);Hce=n(gLe,"STRONG",{});var glt=s(Hce);CLo=r(glt,"fsmt"),glt.forEach(t),wLo=r(gLe," \u2014 "),SD=n(gLe,"A",{href:!0});var hlt=s(SD);ALo=r(hlt,"FSMTForConditionalGeneration"),hlt.forEach(t),yLo=r(gLe," (FairSeq Machine-Translation model)"),gLe.forEach(t),LLo=i(Fe),E1=n(Fe,"LI",{});var hLe=s(E1);Uce=n(hLe,"STRONG",{});var plt=s(Uce);xLo=r(plt,"led"),plt.forEach(t),$Lo=r(hLe," \u2014 "),RD=n(hLe,"A",{href:!0});var _lt=s(RD);kLo=r(_lt,"LEDForConditionalGeneration"),_lt.forEach(t),SLo=r(hLe," (LED model)"),hLe.forEach(t),RLo=i(Fe),C1=n(Fe,"LI",{});var pLe=s(C1);Jce=n(pLe,"STRONG",{});var ult=s(Jce);PLo=r(ult,"m2m_100"),ult.forEach(t),BLo=r(pLe," \u2014 "),PD=n(pLe,"A",{href:!0});var blt=s(PD);ILo=r(blt,"M2M100ForConditionalGeneration"),blt.forEach(t),qLo=r(pLe," (M2M100 model)"),pLe.forEach(t),NLo=i(Fe),w1=n(Fe,"LI",{});var _Le=s(w1);Yce=n(_Le,"STRONG",{});var vlt=s(Yce);jLo=r(vlt,"marian"),vlt.forEach(t),DLo=r(_Le," \u2014 "),BD=n(_Le,"A",{href:!0});var Flt=s(BD);GLo=r(Flt,"MarianMTModel"),Flt.forEach(t),OLo=r(_Le," (Marian model)"),_Le.forEach(t),VLo=i(Fe),A1=n(Fe,"LI",{});var uLe=s(A1);Kce=n(uLe,"STRONG",{});var Tlt=s(Kce);XLo=r(Tlt,"mbart"),Tlt.forEach(t),zLo=r(uLe," \u2014 "),ID=n(uLe,"A",{href:!0});var Mlt=s(ID);WLo=r(Mlt,"MBartForConditionalGeneration"),Mlt.forEach(t),QLo=r(uLe," (mBART model)"),uLe.forEach(t),HLo=i(Fe),y1=n(Fe,"LI",{});var bLe=s(y1);Zce=n(bLe,"STRONG",{});var Elt=s(Zce);ULo=r(Elt,"mt5"),Elt.forEach(t),JLo=r(bLe," \u2014 "),qD=n(bLe,"A",{href:!0});var Clt=s(qD);YLo=r(Clt,"MT5ForConditionalGeneration"),Clt.forEach(t),KLo=r(bLe," (mT5 model)"),bLe.forEach(t),ZLo=i(Fe),L1=n(Fe,"LI",{});var vLe=s(L1);efe=n(vLe,"STRONG",{});var wlt=s(efe);e9o=r(wlt,"pegasus"),wlt.forEach(t),o9o=r(vLe," \u2014 "),ND=n(vLe,"A",{href:!0});var Alt=s(ND);r9o=r(Alt,"PegasusForConditionalGeneration"),Alt.forEach(t),t9o=r(vLe," (Pegasus model)"),vLe.forEach(t),a9o=i(Fe),x1=n(Fe,"LI",{});var FLe=s(x1);ofe=n(FLe,"STRONG",{});var ylt=s(ofe);n9o=r(ylt,"plbart"),ylt.forEach(t),s9o=r(FLe," \u2014 "),jD=n(FLe,"A",{href:!0});var Llt=s(jD);l9o=r(Llt,"PLBartForConditionalGeneration"),Llt.forEach(t),i9o=r(FLe," (PLBart model)"),FLe.forEach(t),d9o=i(Fe),$1=n(Fe,"LI",{});var TLe=s($1);rfe=n(TLe,"STRONG",{});var xlt=s(rfe);c9o=r(xlt,"prophetnet"),xlt.forEach(t),f9o=r(TLe," \u2014 "),DD=n(TLe,"A",{href:!0});var $lt=s(DD);m9o=r($lt,"ProphetNetForConditionalGeneration"),$lt.forEach(t),g9o=r(TLe," (ProphetNet model)"),TLe.forEach(t),h9o=i(Fe),k1=n(Fe,"LI",{});var MLe=s(k1);tfe=n(MLe,"STRONG",{});var klt=s(tfe);p9o=r(klt,"t5"),klt.forEach(t),_9o=r(MLe," \u2014 "),GD=n(MLe,"A",{href:!0});var Slt=s(GD);u9o=r(Slt,"T5ForConditionalGeneration"),Slt.forEach(t),b9o=r(MLe," (T5 model)"),MLe.forEach(t),v9o=i(Fe),S1=n(Fe,"LI",{});var ELe=s(S1);afe=n(ELe,"STRONG",{});var Rlt=s(afe);F9o=r(Rlt,"xlm-prophetnet"),Rlt.forEach(t),T9o=r(ELe," \u2014 "),OD=n(ELe,"A",{href:!0});var Plt=s(OD);M9o=r(Plt,"XLMProphetNetForConditionalGeneration"),Plt.forEach(t),E9o=r(ELe," (XLMProphetNet model)"),ELe.forEach(t),Fe.forEach(t),C9o=i(sa),R1=n(sa,"P",{});var CLe=s(R1);w9o=r(CLe,"The model is set in evaluation mode by default using "),nfe=n(CLe,"CODE",{});var Blt=s(nfe);A9o=r(Blt,"model.eval()"),Blt.forEach(t),y9o=r(CLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sfe=n(CLe,"CODE",{});var Ilt=s(sfe);L9o=r(Ilt,"model.train()"),Ilt.forEach(t),CLe.forEach(t),x9o=i(sa),T(P1.$$.fragment,sa),sa.forEach(t),Xs.forEach(t),Oqe=i(f),Di=n(f,"H2",{class:!0});var Wje=s(Di);B1=n(Wje,"A",{id:!0,class:!0,href:!0});var qlt=s(B1);lfe=n(qlt,"SPAN",{});var Nlt=s(lfe);T(_y.$$.fragment,Nlt),Nlt.forEach(t),qlt.forEach(t),$9o=i(Wje),ife=n(Wje,"SPAN",{});var jlt=s(ife);k9o=r(jlt,"AutoModelForSequenceClassification"),jlt.forEach(t),Wje.forEach(t),Vqe=i(f),Ro=n(f,"DIV",{class:!0});var zs=s(Ro);T(uy.$$.fragment,zs),S9o=i(zs),Gi=n(zs,"P",{});var lZ=s(Gi);R9o=r(lZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),VD=n(lZ,"A",{href:!0});var Dlt=s(VD);P9o=r(Dlt,"from_pretrained()"),Dlt.forEach(t),B9o=r(lZ," class method or the "),XD=n(lZ,"A",{href:!0});var Glt=s(XD);I9o=r(Glt,"from_config()"),Glt.forEach(t),q9o=r(lZ,` class
method.`),lZ.forEach(t),N9o=i(zs),by=n(zs,"P",{});var Qje=s(by);j9o=r(Qje,"This class cannot be instantiated directly using "),dfe=n(Qje,"CODE",{});var Olt=s(dfe);D9o=r(Olt,"__init__()"),Olt.forEach(t),G9o=r(Qje," (throws an error)."),Qje.forEach(t),O9o=i(zs),dt=n(zs,"DIV",{class:!0});var Pw=s(dt);T(vy.$$.fragment,Pw),V9o=i(Pw),cfe=n(Pw,"P",{});var Vlt=s(cfe);X9o=r(Vlt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Vlt.forEach(t),z9o=i(Pw),Oi=n(Pw,"P",{});var iZ=s(Oi);W9o=r(iZ,`Note:
Loading a model from its configuration file does `),ffe=n(iZ,"STRONG",{});var Xlt=s(ffe);Q9o=r(Xlt,"not"),Xlt.forEach(t),H9o=r(iZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),zD=n(iZ,"A",{href:!0});var zlt=s(zD);U9o=r(zlt,"from_pretrained()"),zlt.forEach(t),J9o=r(iZ," to load the model weights."),iZ.forEach(t),Y9o=i(Pw),T(I1.$$.fragment,Pw),Pw.forEach(t),K9o=i(zs),oo=n(zs,"DIV",{class:!0});var la=s(oo);T(Fy.$$.fragment,la),Z9o=i(la),mfe=n(la,"P",{});var Wlt=s(mfe);exo=r(Wlt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Wlt.forEach(t),oxo=i(la),Pa=n(la,"P",{});var Bw=s(Pa);rxo=r(Bw,"The model class to instantiate is selected based on the "),gfe=n(Bw,"CODE",{});var Qlt=s(gfe);txo=r(Qlt,"model_type"),Qlt.forEach(t),axo=r(Bw,` property of the config object (either
passed as an argument or loaded from `),hfe=n(Bw,"CODE",{});var Hlt=s(hfe);nxo=r(Hlt,"pretrained_model_name_or_path"),Hlt.forEach(t),sxo=r(Bw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pfe=n(Bw,"CODE",{});var Ult=s(pfe);lxo=r(Ult,"pretrained_model_name_or_path"),Ult.forEach(t),ixo=r(Bw,":"),Bw.forEach(t),dxo=i(la),q=n(la,"UL",{});var j=s(q);q1=n(j,"LI",{});var wLe=s(q1);_fe=n(wLe,"STRONG",{});var Jlt=s(_fe);cxo=r(Jlt,"albert"),Jlt.forEach(t),fxo=r(wLe," \u2014 "),WD=n(wLe,"A",{href:!0});var Ylt=s(WD);mxo=r(Ylt,"AlbertForSequenceClassification"),Ylt.forEach(t),gxo=r(wLe," (ALBERT model)"),wLe.forEach(t),hxo=i(j),N1=n(j,"LI",{});var ALe=s(N1);ufe=n(ALe,"STRONG",{});var Klt=s(ufe);pxo=r(Klt,"bart"),Klt.forEach(t),_xo=r(ALe," \u2014 "),QD=n(ALe,"A",{href:!0});var Zlt=s(QD);uxo=r(Zlt,"BartForSequenceClassification"),Zlt.forEach(t),bxo=r(ALe," (BART model)"),ALe.forEach(t),vxo=i(j),j1=n(j,"LI",{});var yLe=s(j1);bfe=n(yLe,"STRONG",{});var eit=s(bfe);Fxo=r(eit,"bert"),eit.forEach(t),Txo=r(yLe," \u2014 "),HD=n(yLe,"A",{href:!0});var oit=s(HD);Mxo=r(oit,"BertForSequenceClassification"),oit.forEach(t),Exo=r(yLe," (BERT model)"),yLe.forEach(t),Cxo=i(j),D1=n(j,"LI",{});var LLe=s(D1);vfe=n(LLe,"STRONG",{});var rit=s(vfe);wxo=r(rit,"big_bird"),rit.forEach(t),Axo=r(LLe," \u2014 "),UD=n(LLe,"A",{href:!0});var tit=s(UD);yxo=r(tit,"BigBirdForSequenceClassification"),tit.forEach(t),Lxo=r(LLe," (BigBird model)"),LLe.forEach(t),xxo=i(j),G1=n(j,"LI",{});var xLe=s(G1);Ffe=n(xLe,"STRONG",{});var ait=s(Ffe);$xo=r(ait,"bigbird_pegasus"),ait.forEach(t),kxo=r(xLe," \u2014 "),JD=n(xLe,"A",{href:!0});var nit=s(JD);Sxo=r(nit,"BigBirdPegasusForSequenceClassification"),nit.forEach(t),Rxo=r(xLe," (BigBirdPegasus model)"),xLe.forEach(t),Pxo=i(j),O1=n(j,"LI",{});var $Le=s(O1);Tfe=n($Le,"STRONG",{});var sit=s(Tfe);Bxo=r(sit,"camembert"),sit.forEach(t),Ixo=r($Le," \u2014 "),YD=n($Le,"A",{href:!0});var lit=s(YD);qxo=r(lit,"CamembertForSequenceClassification"),lit.forEach(t),Nxo=r($Le," (CamemBERT model)"),$Le.forEach(t),jxo=i(j),V1=n(j,"LI",{});var kLe=s(V1);Mfe=n(kLe,"STRONG",{});var iit=s(Mfe);Dxo=r(iit,"canine"),iit.forEach(t),Gxo=r(kLe," \u2014 "),KD=n(kLe,"A",{href:!0});var dit=s(KD);Oxo=r(dit,"CanineForSequenceClassification"),dit.forEach(t),Vxo=r(kLe," (Canine model)"),kLe.forEach(t),Xxo=i(j),X1=n(j,"LI",{});var SLe=s(X1);Efe=n(SLe,"STRONG",{});var cit=s(Efe);zxo=r(cit,"convbert"),cit.forEach(t),Wxo=r(SLe," \u2014 "),ZD=n(SLe,"A",{href:!0});var fit=s(ZD);Qxo=r(fit,"ConvBertForSequenceClassification"),fit.forEach(t),Hxo=r(SLe," (ConvBERT model)"),SLe.forEach(t),Uxo=i(j),z1=n(j,"LI",{});var RLe=s(z1);Cfe=n(RLe,"STRONG",{});var mit=s(Cfe);Jxo=r(mit,"ctrl"),mit.forEach(t),Yxo=r(RLe," \u2014 "),eG=n(RLe,"A",{href:!0});var git=s(eG);Kxo=r(git,"CTRLForSequenceClassification"),git.forEach(t),Zxo=r(RLe," (CTRL model)"),RLe.forEach(t),e$o=i(j),W1=n(j,"LI",{});var PLe=s(W1);wfe=n(PLe,"STRONG",{});var hit=s(wfe);o$o=r(hit,"data2vec-text"),hit.forEach(t),r$o=r(PLe," \u2014 "),oG=n(PLe,"A",{href:!0});var pit=s(oG);t$o=r(pit,"Data2VecTextForSequenceClassification"),pit.forEach(t),a$o=r(PLe," (Data2VecText model)"),PLe.forEach(t),n$o=i(j),Q1=n(j,"LI",{});var BLe=s(Q1);Afe=n(BLe,"STRONG",{});var _it=s(Afe);s$o=r(_it,"deberta"),_it.forEach(t),l$o=r(BLe," \u2014 "),rG=n(BLe,"A",{href:!0});var uit=s(rG);i$o=r(uit,"DebertaForSequenceClassification"),uit.forEach(t),d$o=r(BLe," (DeBERTa model)"),BLe.forEach(t),c$o=i(j),H1=n(j,"LI",{});var ILe=s(H1);yfe=n(ILe,"STRONG",{});var bit=s(yfe);f$o=r(bit,"deberta-v2"),bit.forEach(t),m$o=r(ILe," \u2014 "),tG=n(ILe,"A",{href:!0});var vit=s(tG);g$o=r(vit,"DebertaV2ForSequenceClassification"),vit.forEach(t),h$o=r(ILe," (DeBERTa-v2 model)"),ILe.forEach(t),p$o=i(j),U1=n(j,"LI",{});var qLe=s(U1);Lfe=n(qLe,"STRONG",{});var Fit=s(Lfe);_$o=r(Fit,"distilbert"),Fit.forEach(t),u$o=r(qLe," \u2014 "),aG=n(qLe,"A",{href:!0});var Tit=s(aG);b$o=r(Tit,"DistilBertForSequenceClassification"),Tit.forEach(t),v$o=r(qLe," (DistilBERT model)"),qLe.forEach(t),F$o=i(j),J1=n(j,"LI",{});var NLe=s(J1);xfe=n(NLe,"STRONG",{});var Mit=s(xfe);T$o=r(Mit,"electra"),Mit.forEach(t),M$o=r(NLe," \u2014 "),nG=n(NLe,"A",{href:!0});var Eit=s(nG);E$o=r(Eit,"ElectraForSequenceClassification"),Eit.forEach(t),C$o=r(NLe," (ELECTRA model)"),NLe.forEach(t),w$o=i(j),Y1=n(j,"LI",{});var jLe=s(Y1);$fe=n(jLe,"STRONG",{});var Cit=s($fe);A$o=r(Cit,"flaubert"),Cit.forEach(t),y$o=r(jLe," \u2014 "),sG=n(jLe,"A",{href:!0});var wit=s(sG);L$o=r(wit,"FlaubertForSequenceClassification"),wit.forEach(t),x$o=r(jLe," (FlauBERT model)"),jLe.forEach(t),$$o=i(j),K1=n(j,"LI",{});var DLe=s(K1);kfe=n(DLe,"STRONG",{});var Ait=s(kfe);k$o=r(Ait,"fnet"),Ait.forEach(t),S$o=r(DLe," \u2014 "),lG=n(DLe,"A",{href:!0});var yit=s(lG);R$o=r(yit,"FNetForSequenceClassification"),yit.forEach(t),P$o=r(DLe," (FNet model)"),DLe.forEach(t),B$o=i(j),Z1=n(j,"LI",{});var GLe=s(Z1);Sfe=n(GLe,"STRONG",{});var Lit=s(Sfe);I$o=r(Lit,"funnel"),Lit.forEach(t),q$o=r(GLe," \u2014 "),iG=n(GLe,"A",{href:!0});var xit=s(iG);N$o=r(xit,"FunnelForSequenceClassification"),xit.forEach(t),j$o=r(GLe," (Funnel Transformer model)"),GLe.forEach(t),D$o=i(j),eb=n(j,"LI",{});var OLe=s(eb);Rfe=n(OLe,"STRONG",{});var $it=s(Rfe);G$o=r($it,"gpt2"),$it.forEach(t),O$o=r(OLe," \u2014 "),dG=n(OLe,"A",{href:!0});var kit=s(dG);V$o=r(kit,"GPT2ForSequenceClassification"),kit.forEach(t),X$o=r(OLe," (OpenAI GPT-2 model)"),OLe.forEach(t),z$o=i(j),ob=n(j,"LI",{});var VLe=s(ob);Pfe=n(VLe,"STRONG",{});var Sit=s(Pfe);W$o=r(Sit,"gpt_neo"),Sit.forEach(t),Q$o=r(VLe," \u2014 "),cG=n(VLe,"A",{href:!0});var Rit=s(cG);H$o=r(Rit,"GPTNeoForSequenceClassification"),Rit.forEach(t),U$o=r(VLe," (GPT Neo model)"),VLe.forEach(t),J$o=i(j),rb=n(j,"LI",{});var XLe=s(rb);Bfe=n(XLe,"STRONG",{});var Pit=s(Bfe);Y$o=r(Pit,"gptj"),Pit.forEach(t),K$o=r(XLe," \u2014 "),fG=n(XLe,"A",{href:!0});var Bit=s(fG);Z$o=r(Bit,"GPTJForSequenceClassification"),Bit.forEach(t),eko=r(XLe," (GPT-J model)"),XLe.forEach(t),oko=i(j),tb=n(j,"LI",{});var zLe=s(tb);Ife=n(zLe,"STRONG",{});var Iit=s(Ife);rko=r(Iit,"ibert"),Iit.forEach(t),tko=r(zLe," \u2014 "),mG=n(zLe,"A",{href:!0});var qit=s(mG);ako=r(qit,"IBertForSequenceClassification"),qit.forEach(t),nko=r(zLe," (I-BERT model)"),zLe.forEach(t),sko=i(j),ab=n(j,"LI",{});var WLe=s(ab);qfe=n(WLe,"STRONG",{});var Nit=s(qfe);lko=r(Nit,"layoutlm"),Nit.forEach(t),iko=r(WLe," \u2014 "),gG=n(WLe,"A",{href:!0});var jit=s(gG);dko=r(jit,"LayoutLMForSequenceClassification"),jit.forEach(t),cko=r(WLe," (LayoutLM model)"),WLe.forEach(t),fko=i(j),nb=n(j,"LI",{});var QLe=s(nb);Nfe=n(QLe,"STRONG",{});var Dit=s(Nfe);mko=r(Dit,"layoutlmv2"),Dit.forEach(t),gko=r(QLe," \u2014 "),hG=n(QLe,"A",{href:!0});var Git=s(hG);hko=r(Git,"LayoutLMv2ForSequenceClassification"),Git.forEach(t),pko=r(QLe," (LayoutLMv2 model)"),QLe.forEach(t),_ko=i(j),sb=n(j,"LI",{});var HLe=s(sb);jfe=n(HLe,"STRONG",{});var Oit=s(jfe);uko=r(Oit,"led"),Oit.forEach(t),bko=r(HLe," \u2014 "),pG=n(HLe,"A",{href:!0});var Vit=s(pG);vko=r(Vit,"LEDForSequenceClassification"),Vit.forEach(t),Fko=r(HLe," (LED model)"),HLe.forEach(t),Tko=i(j),lb=n(j,"LI",{});var ULe=s(lb);Dfe=n(ULe,"STRONG",{});var Xit=s(Dfe);Mko=r(Xit,"longformer"),Xit.forEach(t),Eko=r(ULe," \u2014 "),_G=n(ULe,"A",{href:!0});var zit=s(_G);Cko=r(zit,"LongformerForSequenceClassification"),zit.forEach(t),wko=r(ULe," (Longformer model)"),ULe.forEach(t),Ako=i(j),ib=n(j,"LI",{});var JLe=s(ib);Gfe=n(JLe,"STRONG",{});var Wit=s(Gfe);yko=r(Wit,"mbart"),Wit.forEach(t),Lko=r(JLe," \u2014 "),uG=n(JLe,"A",{href:!0});var Qit=s(uG);xko=r(Qit,"MBartForSequenceClassification"),Qit.forEach(t),$ko=r(JLe," (mBART model)"),JLe.forEach(t),kko=i(j),db=n(j,"LI",{});var YLe=s(db);Ofe=n(YLe,"STRONG",{});var Hit=s(Ofe);Sko=r(Hit,"megatron-bert"),Hit.forEach(t),Rko=r(YLe," \u2014 "),bG=n(YLe,"A",{href:!0});var Uit=s(bG);Pko=r(Uit,"MegatronBertForSequenceClassification"),Uit.forEach(t),Bko=r(YLe," (MegatronBert model)"),YLe.forEach(t),Iko=i(j),cb=n(j,"LI",{});var KLe=s(cb);Vfe=n(KLe,"STRONG",{});var Jit=s(Vfe);qko=r(Jit,"mobilebert"),Jit.forEach(t),Nko=r(KLe," \u2014 "),vG=n(KLe,"A",{href:!0});var Yit=s(vG);jko=r(Yit,"MobileBertForSequenceClassification"),Yit.forEach(t),Dko=r(KLe," (MobileBERT model)"),KLe.forEach(t),Gko=i(j),fb=n(j,"LI",{});var ZLe=s(fb);Xfe=n(ZLe,"STRONG",{});var Kit=s(Xfe);Oko=r(Kit,"mpnet"),Kit.forEach(t),Vko=r(ZLe," \u2014 "),FG=n(ZLe,"A",{href:!0});var Zit=s(FG);Xko=r(Zit,"MPNetForSequenceClassification"),Zit.forEach(t),zko=r(ZLe," (MPNet model)"),ZLe.forEach(t),Wko=i(j),mb=n(j,"LI",{});var e9e=s(mb);zfe=n(e9e,"STRONG",{});var edt=s(zfe);Qko=r(edt,"nystromformer"),edt.forEach(t),Hko=r(e9e," \u2014 "),TG=n(e9e,"A",{href:!0});var odt=s(TG);Uko=r(odt,"NystromformerForSequenceClassification"),odt.forEach(t),Jko=r(e9e," (Nystromformer model)"),e9e.forEach(t),Yko=i(j),gb=n(j,"LI",{});var o9e=s(gb);Wfe=n(o9e,"STRONG",{});var rdt=s(Wfe);Kko=r(rdt,"openai-gpt"),rdt.forEach(t),Zko=r(o9e," \u2014 "),MG=n(o9e,"A",{href:!0});var tdt=s(MG);eSo=r(tdt,"OpenAIGPTForSequenceClassification"),tdt.forEach(t),oSo=r(o9e," (OpenAI GPT model)"),o9e.forEach(t),rSo=i(j),hb=n(j,"LI",{});var r9e=s(hb);Qfe=n(r9e,"STRONG",{});var adt=s(Qfe);tSo=r(adt,"perceiver"),adt.forEach(t),aSo=r(r9e," \u2014 "),EG=n(r9e,"A",{href:!0});var ndt=s(EG);nSo=r(ndt,"PerceiverForSequenceClassification"),ndt.forEach(t),sSo=r(r9e," (Perceiver model)"),r9e.forEach(t),lSo=i(j),pb=n(j,"LI",{});var t9e=s(pb);Hfe=n(t9e,"STRONG",{});var sdt=s(Hfe);iSo=r(sdt,"plbart"),sdt.forEach(t),dSo=r(t9e," \u2014 "),CG=n(t9e,"A",{href:!0});var ldt=s(CG);cSo=r(ldt,"PLBartForSequenceClassification"),ldt.forEach(t),fSo=r(t9e," (PLBart model)"),t9e.forEach(t),mSo=i(j),_b=n(j,"LI",{});var a9e=s(_b);Ufe=n(a9e,"STRONG",{});var idt=s(Ufe);gSo=r(idt,"qdqbert"),idt.forEach(t),hSo=r(a9e," \u2014 "),wG=n(a9e,"A",{href:!0});var ddt=s(wG);pSo=r(ddt,"QDQBertForSequenceClassification"),ddt.forEach(t),_So=r(a9e," (QDQBert model)"),a9e.forEach(t),uSo=i(j),ub=n(j,"LI",{});var n9e=s(ub);Jfe=n(n9e,"STRONG",{});var cdt=s(Jfe);bSo=r(cdt,"reformer"),cdt.forEach(t),vSo=r(n9e," \u2014 "),AG=n(n9e,"A",{href:!0});var fdt=s(AG);FSo=r(fdt,"ReformerForSequenceClassification"),fdt.forEach(t),TSo=r(n9e," (Reformer model)"),n9e.forEach(t),MSo=i(j),bb=n(j,"LI",{});var s9e=s(bb);Yfe=n(s9e,"STRONG",{});var mdt=s(Yfe);ESo=r(mdt,"rembert"),mdt.forEach(t),CSo=r(s9e," \u2014 "),yG=n(s9e,"A",{href:!0});var gdt=s(yG);wSo=r(gdt,"RemBertForSequenceClassification"),gdt.forEach(t),ASo=r(s9e," (RemBERT model)"),s9e.forEach(t),ySo=i(j),vb=n(j,"LI",{});var l9e=s(vb);Kfe=n(l9e,"STRONG",{});var hdt=s(Kfe);LSo=r(hdt,"roberta"),hdt.forEach(t),xSo=r(l9e," \u2014 "),LG=n(l9e,"A",{href:!0});var pdt=s(LG);$So=r(pdt,"RobertaForSequenceClassification"),pdt.forEach(t),kSo=r(l9e," (RoBERTa model)"),l9e.forEach(t),SSo=i(j),Fb=n(j,"LI",{});var i9e=s(Fb);Zfe=n(i9e,"STRONG",{});var _dt=s(Zfe);RSo=r(_dt,"roformer"),_dt.forEach(t),PSo=r(i9e," \u2014 "),xG=n(i9e,"A",{href:!0});var udt=s(xG);BSo=r(udt,"RoFormerForSequenceClassification"),udt.forEach(t),ISo=r(i9e," (RoFormer model)"),i9e.forEach(t),qSo=i(j),Tb=n(j,"LI",{});var d9e=s(Tb);eme=n(d9e,"STRONG",{});var bdt=s(eme);NSo=r(bdt,"squeezebert"),bdt.forEach(t),jSo=r(d9e," \u2014 "),$G=n(d9e,"A",{href:!0});var vdt=s($G);DSo=r(vdt,"SqueezeBertForSequenceClassification"),vdt.forEach(t),GSo=r(d9e," (SqueezeBERT model)"),d9e.forEach(t),OSo=i(j),Mb=n(j,"LI",{});var c9e=s(Mb);ome=n(c9e,"STRONG",{});var Fdt=s(ome);VSo=r(Fdt,"tapas"),Fdt.forEach(t),XSo=r(c9e," \u2014 "),kG=n(c9e,"A",{href:!0});var Tdt=s(kG);zSo=r(Tdt,"TapasForSequenceClassification"),Tdt.forEach(t),WSo=r(c9e," (TAPAS model)"),c9e.forEach(t),QSo=i(j),Eb=n(j,"LI",{});var f9e=s(Eb);rme=n(f9e,"STRONG",{});var Mdt=s(rme);HSo=r(Mdt,"transfo-xl"),Mdt.forEach(t),USo=r(f9e," \u2014 "),SG=n(f9e,"A",{href:!0});var Edt=s(SG);JSo=r(Edt,"TransfoXLForSequenceClassification"),Edt.forEach(t),YSo=r(f9e," (Transformer-XL model)"),f9e.forEach(t),KSo=i(j),Cb=n(j,"LI",{});var m9e=s(Cb);tme=n(m9e,"STRONG",{});var Cdt=s(tme);ZSo=r(Cdt,"xlm"),Cdt.forEach(t),eRo=r(m9e," \u2014 "),RG=n(m9e,"A",{href:!0});var wdt=s(RG);oRo=r(wdt,"XLMForSequenceClassification"),wdt.forEach(t),rRo=r(m9e," (XLM model)"),m9e.forEach(t),tRo=i(j),wb=n(j,"LI",{});var g9e=s(wb);ame=n(g9e,"STRONG",{});var Adt=s(ame);aRo=r(Adt,"xlm-roberta"),Adt.forEach(t),nRo=r(g9e," \u2014 "),PG=n(g9e,"A",{href:!0});var ydt=s(PG);sRo=r(ydt,"XLMRobertaForSequenceClassification"),ydt.forEach(t),lRo=r(g9e," (XLM-RoBERTa model)"),g9e.forEach(t),iRo=i(j),Ab=n(j,"LI",{});var h9e=s(Ab);nme=n(h9e,"STRONG",{});var Ldt=s(nme);dRo=r(Ldt,"xlm-roberta-xl"),Ldt.forEach(t),cRo=r(h9e," \u2014 "),BG=n(h9e,"A",{href:!0});var xdt=s(BG);fRo=r(xdt,"XLMRobertaXLForSequenceClassification"),xdt.forEach(t),mRo=r(h9e," (XLM-RoBERTa-XL model)"),h9e.forEach(t),gRo=i(j),yb=n(j,"LI",{});var p9e=s(yb);sme=n(p9e,"STRONG",{});var $dt=s(sme);hRo=r($dt,"xlnet"),$dt.forEach(t),pRo=r(p9e," \u2014 "),IG=n(p9e,"A",{href:!0});var kdt=s(IG);_Ro=r(kdt,"XLNetForSequenceClassification"),kdt.forEach(t),uRo=r(p9e," (XLNet model)"),p9e.forEach(t),bRo=i(j),Lb=n(j,"LI",{});var _9e=s(Lb);lme=n(_9e,"STRONG",{});var Sdt=s(lme);vRo=r(Sdt,"yoso"),Sdt.forEach(t),FRo=r(_9e," \u2014 "),qG=n(_9e,"A",{href:!0});var Rdt=s(qG);TRo=r(Rdt,"YosoForSequenceClassification"),Rdt.forEach(t),MRo=r(_9e," (YOSO model)"),_9e.forEach(t),j.forEach(t),ERo=i(la),xb=n(la,"P",{});var u9e=s(xb);CRo=r(u9e,"The model is set in evaluation mode by default using "),ime=n(u9e,"CODE",{});var Pdt=s(ime);wRo=r(Pdt,"model.eval()"),Pdt.forEach(t),ARo=r(u9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dme=n(u9e,"CODE",{});var Bdt=s(dme);yRo=r(Bdt,"model.train()"),Bdt.forEach(t),u9e.forEach(t),LRo=i(la),T($b.$$.fragment,la),la.forEach(t),zs.forEach(t),Xqe=i(f),Vi=n(f,"H2",{class:!0});var Hje=s(Vi);kb=n(Hje,"A",{id:!0,class:!0,href:!0});var Idt=s(kb);cme=n(Idt,"SPAN",{});var qdt=s(cme);T(Ty.$$.fragment,qdt),qdt.forEach(t),Idt.forEach(t),xRo=i(Hje),fme=n(Hje,"SPAN",{});var Ndt=s(fme);$Ro=r(Ndt,"AutoModelForMultipleChoice"),Ndt.forEach(t),Hje.forEach(t),zqe=i(f),Po=n(f,"DIV",{class:!0});var Ws=s(Po);T(My.$$.fragment,Ws),kRo=i(Ws),Xi=n(Ws,"P",{});var dZ=s(Xi);SRo=r(dZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),NG=n(dZ,"A",{href:!0});var jdt=s(NG);RRo=r(jdt,"from_pretrained()"),jdt.forEach(t),PRo=r(dZ," class method or the "),jG=n(dZ,"A",{href:!0});var Ddt=s(jG);BRo=r(Ddt,"from_config()"),Ddt.forEach(t),IRo=r(dZ,` class
method.`),dZ.forEach(t),qRo=i(Ws),Ey=n(Ws,"P",{});var Uje=s(Ey);NRo=r(Uje,"This class cannot be instantiated directly using "),mme=n(Uje,"CODE",{});var Gdt=s(mme);jRo=r(Gdt,"__init__()"),Gdt.forEach(t),DRo=r(Uje," (throws an error)."),Uje.forEach(t),GRo=i(Ws),ct=n(Ws,"DIV",{class:!0});var Iw=s(ct);T(Cy.$$.fragment,Iw),ORo=i(Iw),gme=n(Iw,"P",{});var Odt=s(gme);VRo=r(Odt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Odt.forEach(t),XRo=i(Iw),zi=n(Iw,"P",{});var cZ=s(zi);zRo=r(cZ,`Note:
Loading a model from its configuration file does `),hme=n(cZ,"STRONG",{});var Vdt=s(hme);WRo=r(Vdt,"not"),Vdt.forEach(t),QRo=r(cZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),DG=n(cZ,"A",{href:!0});var Xdt=s(DG);HRo=r(Xdt,"from_pretrained()"),Xdt.forEach(t),URo=r(cZ," to load the model weights."),cZ.forEach(t),JRo=i(Iw),T(Sb.$$.fragment,Iw),Iw.forEach(t),YRo=i(Ws),ro=n(Ws,"DIV",{class:!0});var ia=s(ro);T(wy.$$.fragment,ia),KRo=i(ia),pme=n(ia,"P",{});var zdt=s(pme);ZRo=r(zdt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),zdt.forEach(t),ePo=i(ia),Ba=n(ia,"P",{});var qw=s(Ba);oPo=r(qw,"The model class to instantiate is selected based on the "),_me=n(qw,"CODE",{});var Wdt=s(_me);rPo=r(Wdt,"model_type"),Wdt.forEach(t),tPo=r(qw,` property of the config object (either
passed as an argument or loaded from `),ume=n(qw,"CODE",{});var Qdt=s(ume);aPo=r(Qdt,"pretrained_model_name_or_path"),Qdt.forEach(t),nPo=r(qw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bme=n(qw,"CODE",{});var Hdt=s(bme);sPo=r(Hdt,"pretrained_model_name_or_path"),Hdt.forEach(t),lPo=r(qw,":"),qw.forEach(t),iPo=i(ia),Y=n(ia,"UL",{});var Z=s(Y);Rb=n(Z,"LI",{});var b9e=s(Rb);vme=n(b9e,"STRONG",{});var Udt=s(vme);dPo=r(Udt,"albert"),Udt.forEach(t),cPo=r(b9e," \u2014 "),GG=n(b9e,"A",{href:!0});var Jdt=s(GG);fPo=r(Jdt,"AlbertForMultipleChoice"),Jdt.forEach(t),mPo=r(b9e," (ALBERT model)"),b9e.forEach(t),gPo=i(Z),Pb=n(Z,"LI",{});var v9e=s(Pb);Fme=n(v9e,"STRONG",{});var Ydt=s(Fme);hPo=r(Ydt,"bert"),Ydt.forEach(t),pPo=r(v9e," \u2014 "),OG=n(v9e,"A",{href:!0});var Kdt=s(OG);_Po=r(Kdt,"BertForMultipleChoice"),Kdt.forEach(t),uPo=r(v9e," (BERT model)"),v9e.forEach(t),bPo=i(Z),Bb=n(Z,"LI",{});var F9e=s(Bb);Tme=n(F9e,"STRONG",{});var Zdt=s(Tme);vPo=r(Zdt,"big_bird"),Zdt.forEach(t),FPo=r(F9e," \u2014 "),VG=n(F9e,"A",{href:!0});var ect=s(VG);TPo=r(ect,"BigBirdForMultipleChoice"),ect.forEach(t),MPo=r(F9e," (BigBird model)"),F9e.forEach(t),EPo=i(Z),Ib=n(Z,"LI",{});var T9e=s(Ib);Mme=n(T9e,"STRONG",{});var oct=s(Mme);CPo=r(oct,"camembert"),oct.forEach(t),wPo=r(T9e," \u2014 "),XG=n(T9e,"A",{href:!0});var rct=s(XG);APo=r(rct,"CamembertForMultipleChoice"),rct.forEach(t),yPo=r(T9e," (CamemBERT model)"),T9e.forEach(t),LPo=i(Z),qb=n(Z,"LI",{});var M9e=s(qb);Eme=n(M9e,"STRONG",{});var tct=s(Eme);xPo=r(tct,"canine"),tct.forEach(t),$Po=r(M9e," \u2014 "),zG=n(M9e,"A",{href:!0});var act=s(zG);kPo=r(act,"CanineForMultipleChoice"),act.forEach(t),SPo=r(M9e," (Canine model)"),M9e.forEach(t),RPo=i(Z),Nb=n(Z,"LI",{});var E9e=s(Nb);Cme=n(E9e,"STRONG",{});var nct=s(Cme);PPo=r(nct,"convbert"),nct.forEach(t),BPo=r(E9e," \u2014 "),WG=n(E9e,"A",{href:!0});var sct=s(WG);IPo=r(sct,"ConvBertForMultipleChoice"),sct.forEach(t),qPo=r(E9e," (ConvBERT model)"),E9e.forEach(t),NPo=i(Z),jb=n(Z,"LI",{});var C9e=s(jb);wme=n(C9e,"STRONG",{});var lct=s(wme);jPo=r(lct,"data2vec-text"),lct.forEach(t),DPo=r(C9e," \u2014 "),QG=n(C9e,"A",{href:!0});var ict=s(QG);GPo=r(ict,"Data2VecTextForMultipleChoice"),ict.forEach(t),OPo=r(C9e," (Data2VecText model)"),C9e.forEach(t),VPo=i(Z),Db=n(Z,"LI",{});var w9e=s(Db);Ame=n(w9e,"STRONG",{});var dct=s(Ame);XPo=r(dct,"deberta-v2"),dct.forEach(t),zPo=r(w9e," \u2014 "),HG=n(w9e,"A",{href:!0});var cct=s(HG);WPo=r(cct,"DebertaV2ForMultipleChoice"),cct.forEach(t),QPo=r(w9e," (DeBERTa-v2 model)"),w9e.forEach(t),HPo=i(Z),Gb=n(Z,"LI",{});var A9e=s(Gb);yme=n(A9e,"STRONG",{});var fct=s(yme);UPo=r(fct,"distilbert"),fct.forEach(t),JPo=r(A9e," \u2014 "),UG=n(A9e,"A",{href:!0});var mct=s(UG);YPo=r(mct,"DistilBertForMultipleChoice"),mct.forEach(t),KPo=r(A9e," (DistilBERT model)"),A9e.forEach(t),ZPo=i(Z),Ob=n(Z,"LI",{});var y9e=s(Ob);Lme=n(y9e,"STRONG",{});var gct=s(Lme);eBo=r(gct,"electra"),gct.forEach(t),oBo=r(y9e," \u2014 "),JG=n(y9e,"A",{href:!0});var hct=s(JG);rBo=r(hct,"ElectraForMultipleChoice"),hct.forEach(t),tBo=r(y9e," (ELECTRA model)"),y9e.forEach(t),aBo=i(Z),Vb=n(Z,"LI",{});var L9e=s(Vb);xme=n(L9e,"STRONG",{});var pct=s(xme);nBo=r(pct,"flaubert"),pct.forEach(t),sBo=r(L9e," \u2014 "),YG=n(L9e,"A",{href:!0});var _ct=s(YG);lBo=r(_ct,"FlaubertForMultipleChoice"),_ct.forEach(t),iBo=r(L9e," (FlauBERT model)"),L9e.forEach(t),dBo=i(Z),Xb=n(Z,"LI",{});var x9e=s(Xb);$me=n(x9e,"STRONG",{});var uct=s($me);cBo=r(uct,"fnet"),uct.forEach(t),fBo=r(x9e," \u2014 "),KG=n(x9e,"A",{href:!0});var bct=s(KG);mBo=r(bct,"FNetForMultipleChoice"),bct.forEach(t),gBo=r(x9e," (FNet model)"),x9e.forEach(t),hBo=i(Z),zb=n(Z,"LI",{});var $9e=s(zb);kme=n($9e,"STRONG",{});var vct=s(kme);pBo=r(vct,"funnel"),vct.forEach(t),_Bo=r($9e," \u2014 "),ZG=n($9e,"A",{href:!0});var Fct=s(ZG);uBo=r(Fct,"FunnelForMultipleChoice"),Fct.forEach(t),bBo=r($9e," (Funnel Transformer model)"),$9e.forEach(t),vBo=i(Z),Wb=n(Z,"LI",{});var k9e=s(Wb);Sme=n(k9e,"STRONG",{});var Tct=s(Sme);FBo=r(Tct,"ibert"),Tct.forEach(t),TBo=r(k9e," \u2014 "),eO=n(k9e,"A",{href:!0});var Mct=s(eO);MBo=r(Mct,"IBertForMultipleChoice"),Mct.forEach(t),EBo=r(k9e," (I-BERT model)"),k9e.forEach(t),CBo=i(Z),Qb=n(Z,"LI",{});var S9e=s(Qb);Rme=n(S9e,"STRONG",{});var Ect=s(Rme);wBo=r(Ect,"longformer"),Ect.forEach(t),ABo=r(S9e," \u2014 "),oO=n(S9e,"A",{href:!0});var Cct=s(oO);yBo=r(Cct,"LongformerForMultipleChoice"),Cct.forEach(t),LBo=r(S9e," (Longformer model)"),S9e.forEach(t),xBo=i(Z),Hb=n(Z,"LI",{});var R9e=s(Hb);Pme=n(R9e,"STRONG",{});var wct=s(Pme);$Bo=r(wct,"megatron-bert"),wct.forEach(t),kBo=r(R9e," \u2014 "),rO=n(R9e,"A",{href:!0});var Act=s(rO);SBo=r(Act,"MegatronBertForMultipleChoice"),Act.forEach(t),RBo=r(R9e," (MegatronBert model)"),R9e.forEach(t),PBo=i(Z),Ub=n(Z,"LI",{});var P9e=s(Ub);Bme=n(P9e,"STRONG",{});var yct=s(Bme);BBo=r(yct,"mobilebert"),yct.forEach(t),IBo=r(P9e," \u2014 "),tO=n(P9e,"A",{href:!0});var Lct=s(tO);qBo=r(Lct,"MobileBertForMultipleChoice"),Lct.forEach(t),NBo=r(P9e," (MobileBERT model)"),P9e.forEach(t),jBo=i(Z),Jb=n(Z,"LI",{});var B9e=s(Jb);Ime=n(B9e,"STRONG",{});var xct=s(Ime);DBo=r(xct,"mpnet"),xct.forEach(t),GBo=r(B9e," \u2014 "),aO=n(B9e,"A",{href:!0});var $ct=s(aO);OBo=r($ct,"MPNetForMultipleChoice"),$ct.forEach(t),VBo=r(B9e," (MPNet model)"),B9e.forEach(t),XBo=i(Z),Yb=n(Z,"LI",{});var I9e=s(Yb);qme=n(I9e,"STRONG",{});var kct=s(qme);zBo=r(kct,"nystromformer"),kct.forEach(t),WBo=r(I9e," \u2014 "),nO=n(I9e,"A",{href:!0});var Sct=s(nO);QBo=r(Sct,"NystromformerForMultipleChoice"),Sct.forEach(t),HBo=r(I9e," (Nystromformer model)"),I9e.forEach(t),UBo=i(Z),Kb=n(Z,"LI",{});var q9e=s(Kb);Nme=n(q9e,"STRONG",{});var Rct=s(Nme);JBo=r(Rct,"qdqbert"),Rct.forEach(t),YBo=r(q9e," \u2014 "),sO=n(q9e,"A",{href:!0});var Pct=s(sO);KBo=r(Pct,"QDQBertForMultipleChoice"),Pct.forEach(t),ZBo=r(q9e," (QDQBert model)"),q9e.forEach(t),eIo=i(Z),Zb=n(Z,"LI",{});var N9e=s(Zb);jme=n(N9e,"STRONG",{});var Bct=s(jme);oIo=r(Bct,"rembert"),Bct.forEach(t),rIo=r(N9e," \u2014 "),lO=n(N9e,"A",{href:!0});var Ict=s(lO);tIo=r(Ict,"RemBertForMultipleChoice"),Ict.forEach(t),aIo=r(N9e," (RemBERT model)"),N9e.forEach(t),nIo=i(Z),e5=n(Z,"LI",{});var j9e=s(e5);Dme=n(j9e,"STRONG",{});var qct=s(Dme);sIo=r(qct,"roberta"),qct.forEach(t),lIo=r(j9e," \u2014 "),iO=n(j9e,"A",{href:!0});var Nct=s(iO);iIo=r(Nct,"RobertaForMultipleChoice"),Nct.forEach(t),dIo=r(j9e," (RoBERTa model)"),j9e.forEach(t),cIo=i(Z),o5=n(Z,"LI",{});var D9e=s(o5);Gme=n(D9e,"STRONG",{});var jct=s(Gme);fIo=r(jct,"roformer"),jct.forEach(t),mIo=r(D9e," \u2014 "),dO=n(D9e,"A",{href:!0});var Dct=s(dO);gIo=r(Dct,"RoFormerForMultipleChoice"),Dct.forEach(t),hIo=r(D9e," (RoFormer model)"),D9e.forEach(t),pIo=i(Z),r5=n(Z,"LI",{});var G9e=s(r5);Ome=n(G9e,"STRONG",{});var Gct=s(Ome);_Io=r(Gct,"squeezebert"),Gct.forEach(t),uIo=r(G9e," \u2014 "),cO=n(G9e,"A",{href:!0});var Oct=s(cO);bIo=r(Oct,"SqueezeBertForMultipleChoice"),Oct.forEach(t),vIo=r(G9e," (SqueezeBERT model)"),G9e.forEach(t),FIo=i(Z),t5=n(Z,"LI",{});var O9e=s(t5);Vme=n(O9e,"STRONG",{});var Vct=s(Vme);TIo=r(Vct,"xlm"),Vct.forEach(t),MIo=r(O9e," \u2014 "),fO=n(O9e,"A",{href:!0});var Xct=s(fO);EIo=r(Xct,"XLMForMultipleChoice"),Xct.forEach(t),CIo=r(O9e," (XLM model)"),O9e.forEach(t),wIo=i(Z),a5=n(Z,"LI",{});var V9e=s(a5);Xme=n(V9e,"STRONG",{});var zct=s(Xme);AIo=r(zct,"xlm-roberta"),zct.forEach(t),yIo=r(V9e," \u2014 "),mO=n(V9e,"A",{href:!0});var Wct=s(mO);LIo=r(Wct,"XLMRobertaForMultipleChoice"),Wct.forEach(t),xIo=r(V9e," (XLM-RoBERTa model)"),V9e.forEach(t),$Io=i(Z),n5=n(Z,"LI",{});var X9e=s(n5);zme=n(X9e,"STRONG",{});var Qct=s(zme);kIo=r(Qct,"xlm-roberta-xl"),Qct.forEach(t),SIo=r(X9e," \u2014 "),gO=n(X9e,"A",{href:!0});var Hct=s(gO);RIo=r(Hct,"XLMRobertaXLForMultipleChoice"),Hct.forEach(t),PIo=r(X9e," (XLM-RoBERTa-XL model)"),X9e.forEach(t),BIo=i(Z),s5=n(Z,"LI",{});var z9e=s(s5);Wme=n(z9e,"STRONG",{});var Uct=s(Wme);IIo=r(Uct,"xlnet"),Uct.forEach(t),qIo=r(z9e," \u2014 "),hO=n(z9e,"A",{href:!0});var Jct=s(hO);NIo=r(Jct,"XLNetForMultipleChoice"),Jct.forEach(t),jIo=r(z9e," (XLNet model)"),z9e.forEach(t),DIo=i(Z),l5=n(Z,"LI",{});var W9e=s(l5);Qme=n(W9e,"STRONG",{});var Yct=s(Qme);GIo=r(Yct,"yoso"),Yct.forEach(t),OIo=r(W9e," \u2014 "),pO=n(W9e,"A",{href:!0});var Kct=s(pO);VIo=r(Kct,"YosoForMultipleChoice"),Kct.forEach(t),XIo=r(W9e," (YOSO model)"),W9e.forEach(t),Z.forEach(t),zIo=i(ia),i5=n(ia,"P",{});var Q9e=s(i5);WIo=r(Q9e,"The model is set in evaluation mode by default using "),Hme=n(Q9e,"CODE",{});var Zct=s(Hme);QIo=r(Zct,"model.eval()"),Zct.forEach(t),HIo=r(Q9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ume=n(Q9e,"CODE",{});var eft=s(Ume);UIo=r(eft,"model.train()"),eft.forEach(t),Q9e.forEach(t),JIo=i(ia),T(d5.$$.fragment,ia),ia.forEach(t),Ws.forEach(t),Wqe=i(f),Wi=n(f,"H2",{class:!0});var Jje=s(Wi);c5=n(Jje,"A",{id:!0,class:!0,href:!0});var oft=s(c5);Jme=n(oft,"SPAN",{});var rft=s(Jme);T(Ay.$$.fragment,rft),rft.forEach(t),oft.forEach(t),YIo=i(Jje),Yme=n(Jje,"SPAN",{});var tft=s(Yme);KIo=r(tft,"AutoModelForNextSentencePrediction"),tft.forEach(t),Jje.forEach(t),Qqe=i(f),Bo=n(f,"DIV",{class:!0});var Qs=s(Bo);T(yy.$$.fragment,Qs),ZIo=i(Qs),Qi=n(Qs,"P",{});var fZ=s(Qi);eqo=r(fZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),_O=n(fZ,"A",{href:!0});var aft=s(_O);oqo=r(aft,"from_pretrained()"),aft.forEach(t),rqo=r(fZ," class method or the "),uO=n(fZ,"A",{href:!0});var nft=s(uO);tqo=r(nft,"from_config()"),nft.forEach(t),aqo=r(fZ,` class
method.`),fZ.forEach(t),nqo=i(Qs),Ly=n(Qs,"P",{});var Yje=s(Ly);sqo=r(Yje,"This class cannot be instantiated directly using "),Kme=n(Yje,"CODE",{});var sft=s(Kme);lqo=r(sft,"__init__()"),sft.forEach(t),iqo=r(Yje," (throws an error)."),Yje.forEach(t),dqo=i(Qs),ft=n(Qs,"DIV",{class:!0});var Nw=s(ft);T(xy.$$.fragment,Nw),cqo=i(Nw),Zme=n(Nw,"P",{});var lft=s(Zme);fqo=r(lft,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),lft.forEach(t),mqo=i(Nw),Hi=n(Nw,"P",{});var mZ=s(Hi);gqo=r(mZ,`Note:
Loading a model from its configuration file does `),ege=n(mZ,"STRONG",{});var ift=s(ege);hqo=r(ift,"not"),ift.forEach(t),pqo=r(mZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),bO=n(mZ,"A",{href:!0});var dft=s(bO);_qo=r(dft,"from_pretrained()"),dft.forEach(t),uqo=r(mZ," to load the model weights."),mZ.forEach(t),bqo=i(Nw),T(f5.$$.fragment,Nw),Nw.forEach(t),vqo=i(Qs),to=n(Qs,"DIV",{class:!0});var da=s(to);T($y.$$.fragment,da),Fqo=i(da),oge=n(da,"P",{});var cft=s(oge);Tqo=r(cft,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),cft.forEach(t),Mqo=i(da),Ia=n(da,"P",{});var jw=s(Ia);Eqo=r(jw,"The model class to instantiate is selected based on the "),rge=n(jw,"CODE",{});var fft=s(rge);Cqo=r(fft,"model_type"),fft.forEach(t),wqo=r(jw,` property of the config object (either
passed as an argument or loaded from `),tge=n(jw,"CODE",{});var mft=s(tge);Aqo=r(mft,"pretrained_model_name_or_path"),mft.forEach(t),yqo=r(jw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),age=n(jw,"CODE",{});var gft=s(age);Lqo=r(gft,"pretrained_model_name_or_path"),gft.forEach(t),xqo=r(jw,":"),jw.forEach(t),$qo=i(da),Yr=n(da,"UL",{});var Hs=s(Yr);m5=n(Hs,"LI",{});var H9e=s(m5);nge=n(H9e,"STRONG",{});var hft=s(nge);kqo=r(hft,"bert"),hft.forEach(t),Sqo=r(H9e," \u2014 "),vO=n(H9e,"A",{href:!0});var pft=s(vO);Rqo=r(pft,"BertForNextSentencePrediction"),pft.forEach(t),Pqo=r(H9e," (BERT model)"),H9e.forEach(t),Bqo=i(Hs),g5=n(Hs,"LI",{});var U9e=s(g5);sge=n(U9e,"STRONG",{});var _ft=s(sge);Iqo=r(_ft,"fnet"),_ft.forEach(t),qqo=r(U9e," \u2014 "),FO=n(U9e,"A",{href:!0});var uft=s(FO);Nqo=r(uft,"FNetForNextSentencePrediction"),uft.forEach(t),jqo=r(U9e," (FNet model)"),U9e.forEach(t),Dqo=i(Hs),h5=n(Hs,"LI",{});var J9e=s(h5);lge=n(J9e,"STRONG",{});var bft=s(lge);Gqo=r(bft,"megatron-bert"),bft.forEach(t),Oqo=r(J9e," \u2014 "),TO=n(J9e,"A",{href:!0});var vft=s(TO);Vqo=r(vft,"MegatronBertForNextSentencePrediction"),vft.forEach(t),Xqo=r(J9e," (MegatronBert model)"),J9e.forEach(t),zqo=i(Hs),p5=n(Hs,"LI",{});var Y9e=s(p5);ige=n(Y9e,"STRONG",{});var Fft=s(ige);Wqo=r(Fft,"mobilebert"),Fft.forEach(t),Qqo=r(Y9e," \u2014 "),MO=n(Y9e,"A",{href:!0});var Tft=s(MO);Hqo=r(Tft,"MobileBertForNextSentencePrediction"),Tft.forEach(t),Uqo=r(Y9e," (MobileBERT model)"),Y9e.forEach(t),Jqo=i(Hs),_5=n(Hs,"LI",{});var K9e=s(_5);dge=n(K9e,"STRONG",{});var Mft=s(dge);Yqo=r(Mft,"qdqbert"),Mft.forEach(t),Kqo=r(K9e," \u2014 "),EO=n(K9e,"A",{href:!0});var Eft=s(EO);Zqo=r(Eft,"QDQBertForNextSentencePrediction"),Eft.forEach(t),eNo=r(K9e," (QDQBert model)"),K9e.forEach(t),Hs.forEach(t),oNo=i(da),u5=n(da,"P",{});var Z9e=s(u5);rNo=r(Z9e,"The model is set in evaluation mode by default using "),cge=n(Z9e,"CODE",{});var Cft=s(cge);tNo=r(Cft,"model.eval()"),Cft.forEach(t),aNo=r(Z9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fge=n(Z9e,"CODE",{});var wft=s(fge);nNo=r(wft,"model.train()"),wft.forEach(t),Z9e.forEach(t),sNo=i(da),T(b5.$$.fragment,da),da.forEach(t),Qs.forEach(t),Hqe=i(f),Ui=n(f,"H2",{class:!0});var Kje=s(Ui);v5=n(Kje,"A",{id:!0,class:!0,href:!0});var Aft=s(v5);mge=n(Aft,"SPAN",{});var yft=s(mge);T(ky.$$.fragment,yft),yft.forEach(t),Aft.forEach(t),lNo=i(Kje),gge=n(Kje,"SPAN",{});var Lft=s(gge);iNo=r(Lft,"AutoModelForTokenClassification"),Lft.forEach(t),Kje.forEach(t),Uqe=i(f),Io=n(f,"DIV",{class:!0});var Us=s(Io);T(Sy.$$.fragment,Us),dNo=i(Us),Ji=n(Us,"P",{});var gZ=s(Ji);cNo=r(gZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),CO=n(gZ,"A",{href:!0});var xft=s(CO);fNo=r(xft,"from_pretrained()"),xft.forEach(t),mNo=r(gZ," class method or the "),wO=n(gZ,"A",{href:!0});var $ft=s(wO);gNo=r($ft,"from_config()"),$ft.forEach(t),hNo=r(gZ,` class
method.`),gZ.forEach(t),pNo=i(Us),Ry=n(Us,"P",{});var Zje=s(Ry);_No=r(Zje,"This class cannot be instantiated directly using "),hge=n(Zje,"CODE",{});var kft=s(hge);uNo=r(kft,"__init__()"),kft.forEach(t),bNo=r(Zje," (throws an error)."),Zje.forEach(t),vNo=i(Us),mt=n(Us,"DIV",{class:!0});var Dw=s(mt);T(Py.$$.fragment,Dw),FNo=i(Dw),pge=n(Dw,"P",{});var Sft=s(pge);TNo=r(Sft,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Sft.forEach(t),MNo=i(Dw),Yi=n(Dw,"P",{});var hZ=s(Yi);ENo=r(hZ,`Note:
Loading a model from its configuration file does `),_ge=n(hZ,"STRONG",{});var Rft=s(_ge);CNo=r(Rft,"not"),Rft.forEach(t),wNo=r(hZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),AO=n(hZ,"A",{href:!0});var Pft=s(AO);ANo=r(Pft,"from_pretrained()"),Pft.forEach(t),yNo=r(hZ," to load the model weights."),hZ.forEach(t),LNo=i(Dw),T(F5.$$.fragment,Dw),Dw.forEach(t),xNo=i(Us),ao=n(Us,"DIV",{class:!0});var ca=s(ao);T(By.$$.fragment,ca),$No=i(ca),uge=n(ca,"P",{});var Bft=s(uge);kNo=r(Bft,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Bft.forEach(t),SNo=i(ca),qa=n(ca,"P",{});var Gw=s(qa);RNo=r(Gw,"The model class to instantiate is selected based on the "),bge=n(Gw,"CODE",{});var Ift=s(bge);PNo=r(Ift,"model_type"),Ift.forEach(t),BNo=r(Gw,` property of the config object (either
passed as an argument or loaded from `),vge=n(Gw,"CODE",{});var qft=s(vge);INo=r(qft,"pretrained_model_name_or_path"),qft.forEach(t),qNo=r(Gw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fge=n(Gw,"CODE",{});var Nft=s(Fge);NNo=r(Nft,"pretrained_model_name_or_path"),Nft.forEach(t),jNo=r(Gw,":"),Gw.forEach(t),DNo=i(ca),U=n(ca,"UL",{});var J=s(U);T5=n(J,"LI",{});var exe=s(T5);Tge=n(exe,"STRONG",{});var jft=s(Tge);GNo=r(jft,"albert"),jft.forEach(t),ONo=r(exe," \u2014 "),yO=n(exe,"A",{href:!0});var Dft=s(yO);VNo=r(Dft,"AlbertForTokenClassification"),Dft.forEach(t),XNo=r(exe," (ALBERT model)"),exe.forEach(t),zNo=i(J),M5=n(J,"LI",{});var oxe=s(M5);Mge=n(oxe,"STRONG",{});var Gft=s(Mge);WNo=r(Gft,"bert"),Gft.forEach(t),QNo=r(oxe," \u2014 "),LO=n(oxe,"A",{href:!0});var Oft=s(LO);HNo=r(Oft,"BertForTokenClassification"),Oft.forEach(t),UNo=r(oxe," (BERT model)"),oxe.forEach(t),JNo=i(J),E5=n(J,"LI",{});var rxe=s(E5);Ege=n(rxe,"STRONG",{});var Vft=s(Ege);YNo=r(Vft,"big_bird"),Vft.forEach(t),KNo=r(rxe," \u2014 "),xO=n(rxe,"A",{href:!0});var Xft=s(xO);ZNo=r(Xft,"BigBirdForTokenClassification"),Xft.forEach(t),ejo=r(rxe," (BigBird model)"),rxe.forEach(t),ojo=i(J),C5=n(J,"LI",{});var txe=s(C5);Cge=n(txe,"STRONG",{});var zft=s(Cge);rjo=r(zft,"camembert"),zft.forEach(t),tjo=r(txe," \u2014 "),$O=n(txe,"A",{href:!0});var Wft=s($O);ajo=r(Wft,"CamembertForTokenClassification"),Wft.forEach(t),njo=r(txe," (CamemBERT model)"),txe.forEach(t),sjo=i(J),w5=n(J,"LI",{});var axe=s(w5);wge=n(axe,"STRONG",{});var Qft=s(wge);ljo=r(Qft,"canine"),Qft.forEach(t),ijo=r(axe," \u2014 "),kO=n(axe,"A",{href:!0});var Hft=s(kO);djo=r(Hft,"CanineForTokenClassification"),Hft.forEach(t),cjo=r(axe," (Canine model)"),axe.forEach(t),fjo=i(J),A5=n(J,"LI",{});var nxe=s(A5);Age=n(nxe,"STRONG",{});var Uft=s(Age);mjo=r(Uft,"convbert"),Uft.forEach(t),gjo=r(nxe," \u2014 "),SO=n(nxe,"A",{href:!0});var Jft=s(SO);hjo=r(Jft,"ConvBertForTokenClassification"),Jft.forEach(t),pjo=r(nxe," (ConvBERT model)"),nxe.forEach(t),_jo=i(J),y5=n(J,"LI",{});var sxe=s(y5);yge=n(sxe,"STRONG",{});var Yft=s(yge);ujo=r(Yft,"data2vec-text"),Yft.forEach(t),bjo=r(sxe," \u2014 "),RO=n(sxe,"A",{href:!0});var Kft=s(RO);vjo=r(Kft,"Data2VecTextForTokenClassification"),Kft.forEach(t),Fjo=r(sxe," (Data2VecText model)"),sxe.forEach(t),Tjo=i(J),L5=n(J,"LI",{});var lxe=s(L5);Lge=n(lxe,"STRONG",{});var Zft=s(Lge);Mjo=r(Zft,"deberta"),Zft.forEach(t),Ejo=r(lxe," \u2014 "),PO=n(lxe,"A",{href:!0});var emt=s(PO);Cjo=r(emt,"DebertaForTokenClassification"),emt.forEach(t),wjo=r(lxe," (DeBERTa model)"),lxe.forEach(t),Ajo=i(J),x5=n(J,"LI",{});var ixe=s(x5);xge=n(ixe,"STRONG",{});var omt=s(xge);yjo=r(omt,"deberta-v2"),omt.forEach(t),Ljo=r(ixe," \u2014 "),BO=n(ixe,"A",{href:!0});var rmt=s(BO);xjo=r(rmt,"DebertaV2ForTokenClassification"),rmt.forEach(t),$jo=r(ixe," (DeBERTa-v2 model)"),ixe.forEach(t),kjo=i(J),$5=n(J,"LI",{});var dxe=s($5);$ge=n(dxe,"STRONG",{});var tmt=s($ge);Sjo=r(tmt,"distilbert"),tmt.forEach(t),Rjo=r(dxe," \u2014 "),IO=n(dxe,"A",{href:!0});var amt=s(IO);Pjo=r(amt,"DistilBertForTokenClassification"),amt.forEach(t),Bjo=r(dxe," (DistilBERT model)"),dxe.forEach(t),Ijo=i(J),k5=n(J,"LI",{});var cxe=s(k5);kge=n(cxe,"STRONG",{});var nmt=s(kge);qjo=r(nmt,"electra"),nmt.forEach(t),Njo=r(cxe," \u2014 "),qO=n(cxe,"A",{href:!0});var smt=s(qO);jjo=r(smt,"ElectraForTokenClassification"),smt.forEach(t),Djo=r(cxe," (ELECTRA model)"),cxe.forEach(t),Gjo=i(J),S5=n(J,"LI",{});var fxe=s(S5);Sge=n(fxe,"STRONG",{});var lmt=s(Sge);Ojo=r(lmt,"flaubert"),lmt.forEach(t),Vjo=r(fxe," \u2014 "),NO=n(fxe,"A",{href:!0});var imt=s(NO);Xjo=r(imt,"FlaubertForTokenClassification"),imt.forEach(t),zjo=r(fxe," (FlauBERT model)"),fxe.forEach(t),Wjo=i(J),R5=n(J,"LI",{});var mxe=s(R5);Rge=n(mxe,"STRONG",{});var dmt=s(Rge);Qjo=r(dmt,"fnet"),dmt.forEach(t),Hjo=r(mxe," \u2014 "),jO=n(mxe,"A",{href:!0});var cmt=s(jO);Ujo=r(cmt,"FNetForTokenClassification"),cmt.forEach(t),Jjo=r(mxe," (FNet model)"),mxe.forEach(t),Yjo=i(J),P5=n(J,"LI",{});var gxe=s(P5);Pge=n(gxe,"STRONG",{});var fmt=s(Pge);Kjo=r(fmt,"funnel"),fmt.forEach(t),Zjo=r(gxe," \u2014 "),DO=n(gxe,"A",{href:!0});var mmt=s(DO);eDo=r(mmt,"FunnelForTokenClassification"),mmt.forEach(t),oDo=r(gxe," (Funnel Transformer model)"),gxe.forEach(t),rDo=i(J),B5=n(J,"LI",{});var hxe=s(B5);Bge=n(hxe,"STRONG",{});var gmt=s(Bge);tDo=r(gmt,"gpt2"),gmt.forEach(t),aDo=r(hxe," \u2014 "),GO=n(hxe,"A",{href:!0});var hmt=s(GO);nDo=r(hmt,"GPT2ForTokenClassification"),hmt.forEach(t),sDo=r(hxe," (OpenAI GPT-2 model)"),hxe.forEach(t),lDo=i(J),I5=n(J,"LI",{});var pxe=s(I5);Ige=n(pxe,"STRONG",{});var pmt=s(Ige);iDo=r(pmt,"ibert"),pmt.forEach(t),dDo=r(pxe," \u2014 "),OO=n(pxe,"A",{href:!0});var _mt=s(OO);cDo=r(_mt,"IBertForTokenClassification"),_mt.forEach(t),fDo=r(pxe," (I-BERT model)"),pxe.forEach(t),mDo=i(J),q5=n(J,"LI",{});var _xe=s(q5);qge=n(_xe,"STRONG",{});var umt=s(qge);gDo=r(umt,"layoutlm"),umt.forEach(t),hDo=r(_xe," \u2014 "),VO=n(_xe,"A",{href:!0});var bmt=s(VO);pDo=r(bmt,"LayoutLMForTokenClassification"),bmt.forEach(t),_Do=r(_xe," (LayoutLM model)"),_xe.forEach(t),uDo=i(J),N5=n(J,"LI",{});var uxe=s(N5);Nge=n(uxe,"STRONG",{});var vmt=s(Nge);bDo=r(vmt,"layoutlmv2"),vmt.forEach(t),vDo=r(uxe," \u2014 "),XO=n(uxe,"A",{href:!0});var Fmt=s(XO);FDo=r(Fmt,"LayoutLMv2ForTokenClassification"),Fmt.forEach(t),TDo=r(uxe," (LayoutLMv2 model)"),uxe.forEach(t),MDo=i(J),j5=n(J,"LI",{});var bxe=s(j5);jge=n(bxe,"STRONG",{});var Tmt=s(jge);EDo=r(Tmt,"longformer"),Tmt.forEach(t),CDo=r(bxe," \u2014 "),zO=n(bxe,"A",{href:!0});var Mmt=s(zO);wDo=r(Mmt,"LongformerForTokenClassification"),Mmt.forEach(t),ADo=r(bxe," (Longformer model)"),bxe.forEach(t),yDo=i(J),D5=n(J,"LI",{});var vxe=s(D5);Dge=n(vxe,"STRONG",{});var Emt=s(Dge);LDo=r(Emt,"megatron-bert"),Emt.forEach(t),xDo=r(vxe," \u2014 "),WO=n(vxe,"A",{href:!0});var Cmt=s(WO);$Do=r(Cmt,"MegatronBertForTokenClassification"),Cmt.forEach(t),kDo=r(vxe," (MegatronBert model)"),vxe.forEach(t),SDo=i(J),G5=n(J,"LI",{});var Fxe=s(G5);Gge=n(Fxe,"STRONG",{});var wmt=s(Gge);RDo=r(wmt,"mobilebert"),wmt.forEach(t),PDo=r(Fxe," \u2014 "),QO=n(Fxe,"A",{href:!0});var Amt=s(QO);BDo=r(Amt,"MobileBertForTokenClassification"),Amt.forEach(t),IDo=r(Fxe," (MobileBERT model)"),Fxe.forEach(t),qDo=i(J),O5=n(J,"LI",{});var Txe=s(O5);Oge=n(Txe,"STRONG",{});var ymt=s(Oge);NDo=r(ymt,"mpnet"),ymt.forEach(t),jDo=r(Txe," \u2014 "),HO=n(Txe,"A",{href:!0});var Lmt=s(HO);DDo=r(Lmt,"MPNetForTokenClassification"),Lmt.forEach(t),GDo=r(Txe," (MPNet model)"),Txe.forEach(t),ODo=i(J),V5=n(J,"LI",{});var Mxe=s(V5);Vge=n(Mxe,"STRONG",{});var xmt=s(Vge);VDo=r(xmt,"nystromformer"),xmt.forEach(t),XDo=r(Mxe," \u2014 "),UO=n(Mxe,"A",{href:!0});var $mt=s(UO);zDo=r($mt,"NystromformerForTokenClassification"),$mt.forEach(t),WDo=r(Mxe," (Nystromformer model)"),Mxe.forEach(t),QDo=i(J),X5=n(J,"LI",{});var Exe=s(X5);Xge=n(Exe,"STRONG",{});var kmt=s(Xge);HDo=r(kmt,"qdqbert"),kmt.forEach(t),UDo=r(Exe," \u2014 "),JO=n(Exe,"A",{href:!0});var Smt=s(JO);JDo=r(Smt,"QDQBertForTokenClassification"),Smt.forEach(t),YDo=r(Exe," (QDQBert model)"),Exe.forEach(t),KDo=i(J),z5=n(J,"LI",{});var Cxe=s(z5);zge=n(Cxe,"STRONG",{});var Rmt=s(zge);ZDo=r(Rmt,"rembert"),Rmt.forEach(t),eGo=r(Cxe," \u2014 "),YO=n(Cxe,"A",{href:!0});var Pmt=s(YO);oGo=r(Pmt,"RemBertForTokenClassification"),Pmt.forEach(t),rGo=r(Cxe," (RemBERT model)"),Cxe.forEach(t),tGo=i(J),W5=n(J,"LI",{});var wxe=s(W5);Wge=n(wxe,"STRONG",{});var Bmt=s(Wge);aGo=r(Bmt,"roberta"),Bmt.forEach(t),nGo=r(wxe," \u2014 "),KO=n(wxe,"A",{href:!0});var Imt=s(KO);sGo=r(Imt,"RobertaForTokenClassification"),Imt.forEach(t),lGo=r(wxe," (RoBERTa model)"),wxe.forEach(t),iGo=i(J),Q5=n(J,"LI",{});var Axe=s(Q5);Qge=n(Axe,"STRONG",{});var qmt=s(Qge);dGo=r(qmt,"roformer"),qmt.forEach(t),cGo=r(Axe," \u2014 "),ZO=n(Axe,"A",{href:!0});var Nmt=s(ZO);fGo=r(Nmt,"RoFormerForTokenClassification"),Nmt.forEach(t),mGo=r(Axe," (RoFormer model)"),Axe.forEach(t),gGo=i(J),H5=n(J,"LI",{});var yxe=s(H5);Hge=n(yxe,"STRONG",{});var jmt=s(Hge);hGo=r(jmt,"squeezebert"),jmt.forEach(t),pGo=r(yxe," \u2014 "),eV=n(yxe,"A",{href:!0});var Dmt=s(eV);_Go=r(Dmt,"SqueezeBertForTokenClassification"),Dmt.forEach(t),uGo=r(yxe," (SqueezeBERT model)"),yxe.forEach(t),bGo=i(J),U5=n(J,"LI",{});var Lxe=s(U5);Uge=n(Lxe,"STRONG",{});var Gmt=s(Uge);vGo=r(Gmt,"xlm"),Gmt.forEach(t),FGo=r(Lxe," \u2014 "),oV=n(Lxe,"A",{href:!0});var Omt=s(oV);TGo=r(Omt,"XLMForTokenClassification"),Omt.forEach(t),MGo=r(Lxe," (XLM model)"),Lxe.forEach(t),EGo=i(J),J5=n(J,"LI",{});var xxe=s(J5);Jge=n(xxe,"STRONG",{});var Vmt=s(Jge);CGo=r(Vmt,"xlm-roberta"),Vmt.forEach(t),wGo=r(xxe," \u2014 "),rV=n(xxe,"A",{href:!0});var Xmt=s(rV);AGo=r(Xmt,"XLMRobertaForTokenClassification"),Xmt.forEach(t),yGo=r(xxe," (XLM-RoBERTa model)"),xxe.forEach(t),LGo=i(J),Y5=n(J,"LI",{});var $xe=s(Y5);Yge=n($xe,"STRONG",{});var zmt=s(Yge);xGo=r(zmt,"xlm-roberta-xl"),zmt.forEach(t),$Go=r($xe," \u2014 "),tV=n($xe,"A",{href:!0});var Wmt=s(tV);kGo=r(Wmt,"XLMRobertaXLForTokenClassification"),Wmt.forEach(t),SGo=r($xe," (XLM-RoBERTa-XL model)"),$xe.forEach(t),RGo=i(J),K5=n(J,"LI",{});var kxe=s(K5);Kge=n(kxe,"STRONG",{});var Qmt=s(Kge);PGo=r(Qmt,"xlnet"),Qmt.forEach(t),BGo=r(kxe," \u2014 "),aV=n(kxe,"A",{href:!0});var Hmt=s(aV);IGo=r(Hmt,"XLNetForTokenClassification"),Hmt.forEach(t),qGo=r(kxe," (XLNet model)"),kxe.forEach(t),NGo=i(J),Z5=n(J,"LI",{});var Sxe=s(Z5);Zge=n(Sxe,"STRONG",{});var Umt=s(Zge);jGo=r(Umt,"yoso"),Umt.forEach(t),DGo=r(Sxe," \u2014 "),nV=n(Sxe,"A",{href:!0});var Jmt=s(nV);GGo=r(Jmt,"YosoForTokenClassification"),Jmt.forEach(t),OGo=r(Sxe," (YOSO model)"),Sxe.forEach(t),J.forEach(t),VGo=i(ca),ev=n(ca,"P",{});var Rxe=s(ev);XGo=r(Rxe,"The model is set in evaluation mode by default using "),ehe=n(Rxe,"CODE",{});var Ymt=s(ehe);zGo=r(Ymt,"model.eval()"),Ymt.forEach(t),WGo=r(Rxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ohe=n(Rxe,"CODE",{});var Kmt=s(ohe);QGo=r(Kmt,"model.train()"),Kmt.forEach(t),Rxe.forEach(t),HGo=i(ca),T(ov.$$.fragment,ca),ca.forEach(t),Us.forEach(t),Jqe=i(f),Ki=n(f,"H2",{class:!0});var eDe=s(Ki);rv=n(eDe,"A",{id:!0,class:!0,href:!0});var Zmt=s(rv);rhe=n(Zmt,"SPAN",{});var egt=s(rhe);T(Iy.$$.fragment,egt),egt.forEach(t),Zmt.forEach(t),UGo=i(eDe),the=n(eDe,"SPAN",{});var ogt=s(the);JGo=r(ogt,"AutoModelForQuestionAnswering"),ogt.forEach(t),eDe.forEach(t),Yqe=i(f),qo=n(f,"DIV",{class:!0});var Js=s(qo);T(qy.$$.fragment,Js),YGo=i(Js),Zi=n(Js,"P",{});var pZ=s(Zi);KGo=r(pZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),sV=n(pZ,"A",{href:!0});var rgt=s(sV);ZGo=r(rgt,"from_pretrained()"),rgt.forEach(t),eOo=r(pZ," class method or the "),lV=n(pZ,"A",{href:!0});var tgt=s(lV);oOo=r(tgt,"from_config()"),tgt.forEach(t),rOo=r(pZ,` class
method.`),pZ.forEach(t),tOo=i(Js),Ny=n(Js,"P",{});var oDe=s(Ny);aOo=r(oDe,"This class cannot be instantiated directly using "),ahe=n(oDe,"CODE",{});var agt=s(ahe);nOo=r(agt,"__init__()"),agt.forEach(t),sOo=r(oDe," (throws an error)."),oDe.forEach(t),lOo=i(Js),gt=n(Js,"DIV",{class:!0});var Ow=s(gt);T(jy.$$.fragment,Ow),iOo=i(Ow),nhe=n(Ow,"P",{});var ngt=s(nhe);dOo=r(ngt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),ngt.forEach(t),cOo=i(Ow),ed=n(Ow,"P",{});var _Z=s(ed);fOo=r(_Z,`Note:
Loading a model from its configuration file does `),she=n(_Z,"STRONG",{});var sgt=s(she);mOo=r(sgt,"not"),sgt.forEach(t),gOo=r(_Z,` load the model weights. It only affects the
model\u2019s configuration. Use `),iV=n(_Z,"A",{href:!0});var lgt=s(iV);hOo=r(lgt,"from_pretrained()"),lgt.forEach(t),pOo=r(_Z," to load the model weights."),_Z.forEach(t),_Oo=i(Ow),T(tv.$$.fragment,Ow),Ow.forEach(t),uOo=i(Js),no=n(Js,"DIV",{class:!0});var fa=s(no);T(Dy.$$.fragment,fa),bOo=i(fa),lhe=n(fa,"P",{});var igt=s(lhe);vOo=r(igt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),igt.forEach(t),FOo=i(fa),Na=n(fa,"P",{});var Vw=s(Na);TOo=r(Vw,"The model class to instantiate is selected based on the "),ihe=n(Vw,"CODE",{});var dgt=s(ihe);MOo=r(dgt,"model_type"),dgt.forEach(t),EOo=r(Vw,` property of the config object (either
passed as an argument or loaded from `),dhe=n(Vw,"CODE",{});var cgt=s(dhe);COo=r(cgt,"pretrained_model_name_or_path"),cgt.forEach(t),wOo=r(Vw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),che=n(Vw,"CODE",{});var fgt=s(che);AOo=r(fgt,"pretrained_model_name_or_path"),fgt.forEach(t),yOo=r(Vw,":"),Vw.forEach(t),LOo=i(fa),V=n(fa,"UL",{});var X=s(V);av=n(X,"LI",{});var Pxe=s(av);fhe=n(Pxe,"STRONG",{});var mgt=s(fhe);xOo=r(mgt,"albert"),mgt.forEach(t),$Oo=r(Pxe," \u2014 "),dV=n(Pxe,"A",{href:!0});var ggt=s(dV);kOo=r(ggt,"AlbertForQuestionAnswering"),ggt.forEach(t),SOo=r(Pxe," (ALBERT model)"),Pxe.forEach(t),ROo=i(X),nv=n(X,"LI",{});var Bxe=s(nv);mhe=n(Bxe,"STRONG",{});var hgt=s(mhe);POo=r(hgt,"bart"),hgt.forEach(t),BOo=r(Bxe," \u2014 "),cV=n(Bxe,"A",{href:!0});var pgt=s(cV);IOo=r(pgt,"BartForQuestionAnswering"),pgt.forEach(t),qOo=r(Bxe," (BART model)"),Bxe.forEach(t),NOo=i(X),sv=n(X,"LI",{});var Ixe=s(sv);ghe=n(Ixe,"STRONG",{});var _gt=s(ghe);jOo=r(_gt,"bert"),_gt.forEach(t),DOo=r(Ixe," \u2014 "),fV=n(Ixe,"A",{href:!0});var ugt=s(fV);GOo=r(ugt,"BertForQuestionAnswering"),ugt.forEach(t),OOo=r(Ixe," (BERT model)"),Ixe.forEach(t),VOo=i(X),lv=n(X,"LI",{});var qxe=s(lv);hhe=n(qxe,"STRONG",{});var bgt=s(hhe);XOo=r(bgt,"big_bird"),bgt.forEach(t),zOo=r(qxe," \u2014 "),mV=n(qxe,"A",{href:!0});var vgt=s(mV);WOo=r(vgt,"BigBirdForQuestionAnswering"),vgt.forEach(t),QOo=r(qxe," (BigBird model)"),qxe.forEach(t),HOo=i(X),iv=n(X,"LI",{});var Nxe=s(iv);phe=n(Nxe,"STRONG",{});var Fgt=s(phe);UOo=r(Fgt,"bigbird_pegasus"),Fgt.forEach(t),JOo=r(Nxe," \u2014 "),gV=n(Nxe,"A",{href:!0});var Tgt=s(gV);YOo=r(Tgt,"BigBirdPegasusForQuestionAnswering"),Tgt.forEach(t),KOo=r(Nxe," (BigBirdPegasus model)"),Nxe.forEach(t),ZOo=i(X),dv=n(X,"LI",{});var jxe=s(dv);_he=n(jxe,"STRONG",{});var Mgt=s(_he);eVo=r(Mgt,"camembert"),Mgt.forEach(t),oVo=r(jxe," \u2014 "),hV=n(jxe,"A",{href:!0});var Egt=s(hV);rVo=r(Egt,"CamembertForQuestionAnswering"),Egt.forEach(t),tVo=r(jxe," (CamemBERT model)"),jxe.forEach(t),aVo=i(X),cv=n(X,"LI",{});var Dxe=s(cv);uhe=n(Dxe,"STRONG",{});var Cgt=s(uhe);nVo=r(Cgt,"canine"),Cgt.forEach(t),sVo=r(Dxe," \u2014 "),pV=n(Dxe,"A",{href:!0});var wgt=s(pV);lVo=r(wgt,"CanineForQuestionAnswering"),wgt.forEach(t),iVo=r(Dxe," (Canine model)"),Dxe.forEach(t),dVo=i(X),fv=n(X,"LI",{});var Gxe=s(fv);bhe=n(Gxe,"STRONG",{});var Agt=s(bhe);cVo=r(Agt,"convbert"),Agt.forEach(t),fVo=r(Gxe," \u2014 "),_V=n(Gxe,"A",{href:!0});var ygt=s(_V);mVo=r(ygt,"ConvBertForQuestionAnswering"),ygt.forEach(t),gVo=r(Gxe," (ConvBERT model)"),Gxe.forEach(t),hVo=i(X),mv=n(X,"LI",{});var Oxe=s(mv);vhe=n(Oxe,"STRONG",{});var Lgt=s(vhe);pVo=r(Lgt,"data2vec-text"),Lgt.forEach(t),_Vo=r(Oxe," \u2014 "),uV=n(Oxe,"A",{href:!0});var xgt=s(uV);uVo=r(xgt,"Data2VecTextForQuestionAnswering"),xgt.forEach(t),bVo=r(Oxe," (Data2VecText model)"),Oxe.forEach(t),vVo=i(X),gv=n(X,"LI",{});var Vxe=s(gv);Fhe=n(Vxe,"STRONG",{});var $gt=s(Fhe);FVo=r($gt,"deberta"),$gt.forEach(t),TVo=r(Vxe," \u2014 "),bV=n(Vxe,"A",{href:!0});var kgt=s(bV);MVo=r(kgt,"DebertaForQuestionAnswering"),kgt.forEach(t),EVo=r(Vxe," (DeBERTa model)"),Vxe.forEach(t),CVo=i(X),hv=n(X,"LI",{});var Xxe=s(hv);The=n(Xxe,"STRONG",{});var Sgt=s(The);wVo=r(Sgt,"deberta-v2"),Sgt.forEach(t),AVo=r(Xxe," \u2014 "),vV=n(Xxe,"A",{href:!0});var Rgt=s(vV);yVo=r(Rgt,"DebertaV2ForQuestionAnswering"),Rgt.forEach(t),LVo=r(Xxe," (DeBERTa-v2 model)"),Xxe.forEach(t),xVo=i(X),pv=n(X,"LI",{});var zxe=s(pv);Mhe=n(zxe,"STRONG",{});var Pgt=s(Mhe);$Vo=r(Pgt,"distilbert"),Pgt.forEach(t),kVo=r(zxe," \u2014 "),FV=n(zxe,"A",{href:!0});var Bgt=s(FV);SVo=r(Bgt,"DistilBertForQuestionAnswering"),Bgt.forEach(t),RVo=r(zxe," (DistilBERT model)"),zxe.forEach(t),PVo=i(X),_v=n(X,"LI",{});var Wxe=s(_v);Ehe=n(Wxe,"STRONG",{});var Igt=s(Ehe);BVo=r(Igt,"electra"),Igt.forEach(t),IVo=r(Wxe," \u2014 "),TV=n(Wxe,"A",{href:!0});var qgt=s(TV);qVo=r(qgt,"ElectraForQuestionAnswering"),qgt.forEach(t),NVo=r(Wxe," (ELECTRA model)"),Wxe.forEach(t),jVo=i(X),uv=n(X,"LI",{});var Qxe=s(uv);Che=n(Qxe,"STRONG",{});var Ngt=s(Che);DVo=r(Ngt,"flaubert"),Ngt.forEach(t),GVo=r(Qxe," \u2014 "),MV=n(Qxe,"A",{href:!0});var jgt=s(MV);OVo=r(jgt,"FlaubertForQuestionAnsweringSimple"),jgt.forEach(t),VVo=r(Qxe," (FlauBERT model)"),Qxe.forEach(t),XVo=i(X),bv=n(X,"LI",{});var Hxe=s(bv);whe=n(Hxe,"STRONG",{});var Dgt=s(whe);zVo=r(Dgt,"fnet"),Dgt.forEach(t),WVo=r(Hxe," \u2014 "),EV=n(Hxe,"A",{href:!0});var Ggt=s(EV);QVo=r(Ggt,"FNetForQuestionAnswering"),Ggt.forEach(t),HVo=r(Hxe," (FNet model)"),Hxe.forEach(t),UVo=i(X),vv=n(X,"LI",{});var Uxe=s(vv);Ahe=n(Uxe,"STRONG",{});var Ogt=s(Ahe);JVo=r(Ogt,"funnel"),Ogt.forEach(t),YVo=r(Uxe," \u2014 "),CV=n(Uxe,"A",{href:!0});var Vgt=s(CV);KVo=r(Vgt,"FunnelForQuestionAnswering"),Vgt.forEach(t),ZVo=r(Uxe," (Funnel Transformer model)"),Uxe.forEach(t),eXo=i(X),Fv=n(X,"LI",{});var Jxe=s(Fv);yhe=n(Jxe,"STRONG",{});var Xgt=s(yhe);oXo=r(Xgt,"gptj"),Xgt.forEach(t),rXo=r(Jxe," \u2014 "),wV=n(Jxe,"A",{href:!0});var zgt=s(wV);tXo=r(zgt,"GPTJForQuestionAnswering"),zgt.forEach(t),aXo=r(Jxe," (GPT-J model)"),Jxe.forEach(t),nXo=i(X),Tv=n(X,"LI",{});var Yxe=s(Tv);Lhe=n(Yxe,"STRONG",{});var Wgt=s(Lhe);sXo=r(Wgt,"ibert"),Wgt.forEach(t),lXo=r(Yxe," \u2014 "),AV=n(Yxe,"A",{href:!0});var Qgt=s(AV);iXo=r(Qgt,"IBertForQuestionAnswering"),Qgt.forEach(t),dXo=r(Yxe," (I-BERT model)"),Yxe.forEach(t),cXo=i(X),Mv=n(X,"LI",{});var Kxe=s(Mv);xhe=n(Kxe,"STRONG",{});var Hgt=s(xhe);fXo=r(Hgt,"layoutlmv2"),Hgt.forEach(t),mXo=r(Kxe," \u2014 "),yV=n(Kxe,"A",{href:!0});var Ugt=s(yV);gXo=r(Ugt,"LayoutLMv2ForQuestionAnswering"),Ugt.forEach(t),hXo=r(Kxe," (LayoutLMv2 model)"),Kxe.forEach(t),pXo=i(X),Ev=n(X,"LI",{});var Zxe=s(Ev);$he=n(Zxe,"STRONG",{});var Jgt=s($he);_Xo=r(Jgt,"led"),Jgt.forEach(t),uXo=r(Zxe," \u2014 "),LV=n(Zxe,"A",{href:!0});var Ygt=s(LV);bXo=r(Ygt,"LEDForQuestionAnswering"),Ygt.forEach(t),vXo=r(Zxe," (LED model)"),Zxe.forEach(t),FXo=i(X),Cv=n(X,"LI",{});var e$e=s(Cv);khe=n(e$e,"STRONG",{});var Kgt=s(khe);TXo=r(Kgt,"longformer"),Kgt.forEach(t),MXo=r(e$e," \u2014 "),xV=n(e$e,"A",{href:!0});var Zgt=s(xV);EXo=r(Zgt,"LongformerForQuestionAnswering"),Zgt.forEach(t),CXo=r(e$e," (Longformer model)"),e$e.forEach(t),wXo=i(X),wv=n(X,"LI",{});var o$e=s(wv);She=n(o$e,"STRONG",{});var eht=s(She);AXo=r(eht,"lxmert"),eht.forEach(t),yXo=r(o$e," \u2014 "),$V=n(o$e,"A",{href:!0});var oht=s($V);LXo=r(oht,"LxmertForQuestionAnswering"),oht.forEach(t),xXo=r(o$e," (LXMERT model)"),o$e.forEach(t),$Xo=i(X),Av=n(X,"LI",{});var r$e=s(Av);Rhe=n(r$e,"STRONG",{});var rht=s(Rhe);kXo=r(rht,"mbart"),rht.forEach(t),SXo=r(r$e," \u2014 "),kV=n(r$e,"A",{href:!0});var tht=s(kV);RXo=r(tht,"MBartForQuestionAnswering"),tht.forEach(t),PXo=r(r$e," (mBART model)"),r$e.forEach(t),BXo=i(X),yv=n(X,"LI",{});var t$e=s(yv);Phe=n(t$e,"STRONG",{});var aht=s(Phe);IXo=r(aht,"megatron-bert"),aht.forEach(t),qXo=r(t$e," \u2014 "),SV=n(t$e,"A",{href:!0});var nht=s(SV);NXo=r(nht,"MegatronBertForQuestionAnswering"),nht.forEach(t),jXo=r(t$e," (MegatronBert model)"),t$e.forEach(t),DXo=i(X),Lv=n(X,"LI",{});var a$e=s(Lv);Bhe=n(a$e,"STRONG",{});var sht=s(Bhe);GXo=r(sht,"mobilebert"),sht.forEach(t),OXo=r(a$e," \u2014 "),RV=n(a$e,"A",{href:!0});var lht=s(RV);VXo=r(lht,"MobileBertForQuestionAnswering"),lht.forEach(t),XXo=r(a$e," (MobileBERT model)"),a$e.forEach(t),zXo=i(X),xv=n(X,"LI",{});var n$e=s(xv);Ihe=n(n$e,"STRONG",{});var iht=s(Ihe);WXo=r(iht,"mpnet"),iht.forEach(t),QXo=r(n$e," \u2014 "),PV=n(n$e,"A",{href:!0});var dht=s(PV);HXo=r(dht,"MPNetForQuestionAnswering"),dht.forEach(t),UXo=r(n$e," (MPNet model)"),n$e.forEach(t),JXo=i(X),$v=n(X,"LI",{});var s$e=s($v);qhe=n(s$e,"STRONG",{});var cht=s(qhe);YXo=r(cht,"nystromformer"),cht.forEach(t),KXo=r(s$e," \u2014 "),BV=n(s$e,"A",{href:!0});var fht=s(BV);ZXo=r(fht,"NystromformerForQuestionAnswering"),fht.forEach(t),ezo=r(s$e," (Nystromformer model)"),s$e.forEach(t),ozo=i(X),kv=n(X,"LI",{});var l$e=s(kv);Nhe=n(l$e,"STRONG",{});var mht=s(Nhe);rzo=r(mht,"qdqbert"),mht.forEach(t),tzo=r(l$e," \u2014 "),IV=n(l$e,"A",{href:!0});var ght=s(IV);azo=r(ght,"QDQBertForQuestionAnswering"),ght.forEach(t),nzo=r(l$e," (QDQBert model)"),l$e.forEach(t),szo=i(X),Sv=n(X,"LI",{});var i$e=s(Sv);jhe=n(i$e,"STRONG",{});var hht=s(jhe);lzo=r(hht,"reformer"),hht.forEach(t),izo=r(i$e," \u2014 "),qV=n(i$e,"A",{href:!0});var pht=s(qV);dzo=r(pht,"ReformerForQuestionAnswering"),pht.forEach(t),czo=r(i$e," (Reformer model)"),i$e.forEach(t),fzo=i(X),Rv=n(X,"LI",{});var d$e=s(Rv);Dhe=n(d$e,"STRONG",{});var _ht=s(Dhe);mzo=r(_ht,"rembert"),_ht.forEach(t),gzo=r(d$e," \u2014 "),NV=n(d$e,"A",{href:!0});var uht=s(NV);hzo=r(uht,"RemBertForQuestionAnswering"),uht.forEach(t),pzo=r(d$e," (RemBERT model)"),d$e.forEach(t),_zo=i(X),Pv=n(X,"LI",{});var c$e=s(Pv);Ghe=n(c$e,"STRONG",{});var bht=s(Ghe);uzo=r(bht,"roberta"),bht.forEach(t),bzo=r(c$e," \u2014 "),jV=n(c$e,"A",{href:!0});var vht=s(jV);vzo=r(vht,"RobertaForQuestionAnswering"),vht.forEach(t),Fzo=r(c$e," (RoBERTa model)"),c$e.forEach(t),Tzo=i(X),Bv=n(X,"LI",{});var f$e=s(Bv);Ohe=n(f$e,"STRONG",{});var Fht=s(Ohe);Mzo=r(Fht,"roformer"),Fht.forEach(t),Ezo=r(f$e," \u2014 "),DV=n(f$e,"A",{href:!0});var Tht=s(DV);Czo=r(Tht,"RoFormerForQuestionAnswering"),Tht.forEach(t),wzo=r(f$e," (RoFormer model)"),f$e.forEach(t),Azo=i(X),Iv=n(X,"LI",{});var m$e=s(Iv);Vhe=n(m$e,"STRONG",{});var Mht=s(Vhe);yzo=r(Mht,"splinter"),Mht.forEach(t),Lzo=r(m$e," \u2014 "),GV=n(m$e,"A",{href:!0});var Eht=s(GV);xzo=r(Eht,"SplinterForQuestionAnswering"),Eht.forEach(t),$zo=r(m$e," (Splinter model)"),m$e.forEach(t),kzo=i(X),qv=n(X,"LI",{});var g$e=s(qv);Xhe=n(g$e,"STRONG",{});var Cht=s(Xhe);Szo=r(Cht,"squeezebert"),Cht.forEach(t),Rzo=r(g$e," \u2014 "),OV=n(g$e,"A",{href:!0});var wht=s(OV);Pzo=r(wht,"SqueezeBertForQuestionAnswering"),wht.forEach(t),Bzo=r(g$e," (SqueezeBERT model)"),g$e.forEach(t),Izo=i(X),Nv=n(X,"LI",{});var h$e=s(Nv);zhe=n(h$e,"STRONG",{});var Aht=s(zhe);qzo=r(Aht,"xlm"),Aht.forEach(t),Nzo=r(h$e," \u2014 "),VV=n(h$e,"A",{href:!0});var yht=s(VV);jzo=r(yht,"XLMForQuestionAnsweringSimple"),yht.forEach(t),Dzo=r(h$e," (XLM model)"),h$e.forEach(t),Gzo=i(X),jv=n(X,"LI",{});var p$e=s(jv);Whe=n(p$e,"STRONG",{});var Lht=s(Whe);Ozo=r(Lht,"xlm-roberta"),Lht.forEach(t),Vzo=r(p$e," \u2014 "),XV=n(p$e,"A",{href:!0});var xht=s(XV);Xzo=r(xht,"XLMRobertaForQuestionAnswering"),xht.forEach(t),zzo=r(p$e," (XLM-RoBERTa model)"),p$e.forEach(t),Wzo=i(X),Dv=n(X,"LI",{});var _$e=s(Dv);Qhe=n(_$e,"STRONG",{});var $ht=s(Qhe);Qzo=r($ht,"xlm-roberta-xl"),$ht.forEach(t),Hzo=r(_$e," \u2014 "),zV=n(_$e,"A",{href:!0});var kht=s(zV);Uzo=r(kht,"XLMRobertaXLForQuestionAnswering"),kht.forEach(t),Jzo=r(_$e," (XLM-RoBERTa-XL model)"),_$e.forEach(t),Yzo=i(X),Gv=n(X,"LI",{});var u$e=s(Gv);Hhe=n(u$e,"STRONG",{});var Sht=s(Hhe);Kzo=r(Sht,"xlnet"),Sht.forEach(t),Zzo=r(u$e," \u2014 "),WV=n(u$e,"A",{href:!0});var Rht=s(WV);eWo=r(Rht,"XLNetForQuestionAnsweringSimple"),Rht.forEach(t),oWo=r(u$e," (XLNet model)"),u$e.forEach(t),rWo=i(X),Ov=n(X,"LI",{});var b$e=s(Ov);Uhe=n(b$e,"STRONG",{});var Pht=s(Uhe);tWo=r(Pht,"yoso"),Pht.forEach(t),aWo=r(b$e," \u2014 "),QV=n(b$e,"A",{href:!0});var Bht=s(QV);nWo=r(Bht,"YosoForQuestionAnswering"),Bht.forEach(t),sWo=r(b$e," (YOSO model)"),b$e.forEach(t),X.forEach(t),lWo=i(fa),Vv=n(fa,"P",{});var v$e=s(Vv);iWo=r(v$e,"The model is set in evaluation mode by default using "),Jhe=n(v$e,"CODE",{});var Iht=s(Jhe);dWo=r(Iht,"model.eval()"),Iht.forEach(t),cWo=r(v$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Yhe=n(v$e,"CODE",{});var qht=s(Yhe);fWo=r(qht,"model.train()"),qht.forEach(t),v$e.forEach(t),mWo=i(fa),T(Xv.$$.fragment,fa),fa.forEach(t),Js.forEach(t),Kqe=i(f),od=n(f,"H2",{class:!0});var rDe=s(od);zv=n(rDe,"A",{id:!0,class:!0,href:!0});var Nht=s(zv);Khe=n(Nht,"SPAN",{});var jht=s(Khe);T(Gy.$$.fragment,jht),jht.forEach(t),Nht.forEach(t),gWo=i(rDe),Zhe=n(rDe,"SPAN",{});var Dht=s(Zhe);hWo=r(Dht,"AutoModelForTableQuestionAnswering"),Dht.forEach(t),rDe.forEach(t),Zqe=i(f),No=n(f,"DIV",{class:!0});var Ys=s(No);T(Oy.$$.fragment,Ys),pWo=i(Ys),rd=n(Ys,"P",{});var uZ=s(rd);_Wo=r(uZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),HV=n(uZ,"A",{href:!0});var Ght=s(HV);uWo=r(Ght,"from_pretrained()"),Ght.forEach(t),bWo=r(uZ," class method or the "),UV=n(uZ,"A",{href:!0});var Oht=s(UV);vWo=r(Oht,"from_config()"),Oht.forEach(t),FWo=r(uZ,` class
method.`),uZ.forEach(t),TWo=i(Ys),Vy=n(Ys,"P",{});var tDe=s(Vy);MWo=r(tDe,"This class cannot be instantiated directly using "),epe=n(tDe,"CODE",{});var Vht=s(epe);EWo=r(Vht,"__init__()"),Vht.forEach(t),CWo=r(tDe," (throws an error)."),tDe.forEach(t),wWo=i(Ys),ht=n(Ys,"DIV",{class:!0});var Xw=s(ht);T(Xy.$$.fragment,Xw),AWo=i(Xw),ope=n(Xw,"P",{});var Xht=s(ope);yWo=r(Xht,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Xht.forEach(t),LWo=i(Xw),td=n(Xw,"P",{});var bZ=s(td);xWo=r(bZ,`Note:
Loading a model from its configuration file does `),rpe=n(bZ,"STRONG",{});var zht=s(rpe);$Wo=r(zht,"not"),zht.forEach(t),kWo=r(bZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),JV=n(bZ,"A",{href:!0});var Wht=s(JV);SWo=r(Wht,"from_pretrained()"),Wht.forEach(t),RWo=r(bZ," to load the model weights."),bZ.forEach(t),PWo=i(Xw),T(Wv.$$.fragment,Xw),Xw.forEach(t),BWo=i(Ys),so=n(Ys,"DIV",{class:!0});var ma=s(so);T(zy.$$.fragment,ma),IWo=i(ma),tpe=n(ma,"P",{});var Qht=s(tpe);qWo=r(Qht,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Qht.forEach(t),NWo=i(ma),ja=n(ma,"P",{});var zw=s(ja);jWo=r(zw,"The model class to instantiate is selected based on the "),ape=n(zw,"CODE",{});var Hht=s(ape);DWo=r(Hht,"model_type"),Hht.forEach(t),GWo=r(zw,` property of the config object (either
passed as an argument or loaded from `),npe=n(zw,"CODE",{});var Uht=s(npe);OWo=r(Uht,"pretrained_model_name_or_path"),Uht.forEach(t),VWo=r(zw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),spe=n(zw,"CODE",{});var Jht=s(spe);XWo=r(Jht,"pretrained_model_name_or_path"),Jht.forEach(t),zWo=r(zw,":"),zw.forEach(t),WWo=i(ma),lpe=n(ma,"UL",{});var Yht=s(lpe);Qv=n(Yht,"LI",{});var F$e=s(Qv);ipe=n(F$e,"STRONG",{});var Kht=s(ipe);QWo=r(Kht,"tapas"),Kht.forEach(t),HWo=r(F$e," \u2014 "),YV=n(F$e,"A",{href:!0});var Zht=s(YV);UWo=r(Zht,"TapasForQuestionAnswering"),Zht.forEach(t),JWo=r(F$e," (TAPAS model)"),F$e.forEach(t),Yht.forEach(t),YWo=i(ma),Hv=n(ma,"P",{});var T$e=s(Hv);KWo=r(T$e,"The model is set in evaluation mode by default using "),dpe=n(T$e,"CODE",{});var ept=s(dpe);ZWo=r(ept,"model.eval()"),ept.forEach(t),eQo=r(T$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cpe=n(T$e,"CODE",{});var opt=s(cpe);oQo=r(opt,"model.train()"),opt.forEach(t),T$e.forEach(t),rQo=i(ma),T(Uv.$$.fragment,ma),ma.forEach(t),Ys.forEach(t),eNe=i(f),ad=n(f,"H2",{class:!0});var aDe=s(ad);Jv=n(aDe,"A",{id:!0,class:!0,href:!0});var rpt=s(Jv);fpe=n(rpt,"SPAN",{});var tpt=s(fpe);T(Wy.$$.fragment,tpt),tpt.forEach(t),rpt.forEach(t),tQo=i(aDe),mpe=n(aDe,"SPAN",{});var apt=s(mpe);aQo=r(apt,"AutoModelForImageClassification"),apt.forEach(t),aDe.forEach(t),oNe=i(f),jo=n(f,"DIV",{class:!0});var Ks=s(jo);T(Qy.$$.fragment,Ks),nQo=i(Ks),nd=n(Ks,"P",{});var vZ=s(nd);sQo=r(vZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),KV=n(vZ,"A",{href:!0});var npt=s(KV);lQo=r(npt,"from_pretrained()"),npt.forEach(t),iQo=r(vZ," class method or the "),ZV=n(vZ,"A",{href:!0});var spt=s(ZV);dQo=r(spt,"from_config()"),spt.forEach(t),cQo=r(vZ,` class
method.`),vZ.forEach(t),fQo=i(Ks),Hy=n(Ks,"P",{});var nDe=s(Hy);mQo=r(nDe,"This class cannot be instantiated directly using "),gpe=n(nDe,"CODE",{});var lpt=s(gpe);gQo=r(lpt,"__init__()"),lpt.forEach(t),hQo=r(nDe," (throws an error)."),nDe.forEach(t),pQo=i(Ks),pt=n(Ks,"DIV",{class:!0});var Ww=s(pt);T(Uy.$$.fragment,Ww),_Qo=i(Ww),hpe=n(Ww,"P",{});var ipt=s(hpe);uQo=r(ipt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),ipt.forEach(t),bQo=i(Ww),sd=n(Ww,"P",{});var FZ=s(sd);vQo=r(FZ,`Note:
Loading a model from its configuration file does `),ppe=n(FZ,"STRONG",{});var dpt=s(ppe);FQo=r(dpt,"not"),dpt.forEach(t),TQo=r(FZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),eX=n(FZ,"A",{href:!0});var cpt=s(eX);MQo=r(cpt,"from_pretrained()"),cpt.forEach(t),EQo=r(FZ," to load the model weights."),FZ.forEach(t),CQo=i(Ww),T(Yv.$$.fragment,Ww),Ww.forEach(t),wQo=i(Ks),lo=n(Ks,"DIV",{class:!0});var ga=s(lo);T(Jy.$$.fragment,ga),AQo=i(ga),_pe=n(ga,"P",{});var fpt=s(_pe);yQo=r(fpt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),fpt.forEach(t),LQo=i(ga),Da=n(ga,"P",{});var Qw=s(Da);xQo=r(Qw,"The model class to instantiate is selected based on the "),upe=n(Qw,"CODE",{});var mpt=s(upe);$Qo=r(mpt,"model_type"),mpt.forEach(t),kQo=r(Qw,` property of the config object (either
passed as an argument or loaded from `),bpe=n(Qw,"CODE",{});var gpt=s(bpe);SQo=r(gpt,"pretrained_model_name_or_path"),gpt.forEach(t),RQo=r(Qw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vpe=n(Qw,"CODE",{});var hpt=s(vpe);PQo=r(hpt,"pretrained_model_name_or_path"),hpt.forEach(t),BQo=r(Qw,":"),Qw.forEach(t),IQo=i(ga),be=n(ga,"UL",{});var Te=s(be);Kv=n(Te,"LI",{});var M$e=s(Kv);Fpe=n(M$e,"STRONG",{});var ppt=s(Fpe);qQo=r(ppt,"beit"),ppt.forEach(t),NQo=r(M$e," \u2014 "),oX=n(M$e,"A",{href:!0});var _pt=s(oX);jQo=r(_pt,"BeitForImageClassification"),_pt.forEach(t),DQo=r(M$e," (BEiT model)"),M$e.forEach(t),GQo=i(Te),Zv=n(Te,"LI",{});var E$e=s(Zv);Tpe=n(E$e,"STRONG",{});var upt=s(Tpe);OQo=r(upt,"convnext"),upt.forEach(t),VQo=r(E$e," \u2014 "),rX=n(E$e,"A",{href:!0});var bpt=s(rX);XQo=r(bpt,"ConvNextForImageClassification"),bpt.forEach(t),zQo=r(E$e," (ConvNext model)"),E$e.forEach(t),WQo=i(Te),eF=n(Te,"LI",{});var C$e=s(eF);Mpe=n(C$e,"STRONG",{});var vpt=s(Mpe);QQo=r(vpt,"cvt"),vpt.forEach(t),HQo=r(C$e," \u2014 "),tX=n(C$e,"A",{href:!0});var Fpt=s(tX);UQo=r(Fpt,"CvtForImageClassification"),Fpt.forEach(t),JQo=r(C$e," (CvT model)"),C$e.forEach(t),YQo=i(Te),oF=n(Te,"LI",{});var w$e=s(oF);Epe=n(w$e,"STRONG",{});var Tpt=s(Epe);KQo=r(Tpt,"data2vec-vision"),Tpt.forEach(t),ZQo=r(w$e," \u2014 "),aX=n(w$e,"A",{href:!0});var Mpt=s(aX);eHo=r(Mpt,"Data2VecVisionForImageClassification"),Mpt.forEach(t),oHo=r(w$e," (Data2VecVision model)"),w$e.forEach(t),rHo=i(Te),Ps=n(Te,"LI",{});var P$=s(Ps);Cpe=n(P$,"STRONG",{});var Ept=s(Cpe);tHo=r(Ept,"deit"),Ept.forEach(t),aHo=r(P$," \u2014 "),nX=n(P$,"A",{href:!0});var Cpt=s(nX);nHo=r(Cpt,"DeiTForImageClassification"),Cpt.forEach(t),sHo=r(P$," or "),sX=n(P$,"A",{href:!0});var wpt=s(sX);lHo=r(wpt,"DeiTForImageClassificationWithTeacher"),wpt.forEach(t),iHo=r(P$," (DeiT model)"),P$.forEach(t),dHo=i(Te),rF=n(Te,"LI",{});var A$e=s(rF);wpe=n(A$e,"STRONG",{});var Apt=s(wpe);cHo=r(Apt,"imagegpt"),Apt.forEach(t),fHo=r(A$e," \u2014 "),lX=n(A$e,"A",{href:!0});var ypt=s(lX);mHo=r(ypt,"ImageGPTForImageClassification"),ypt.forEach(t),gHo=r(A$e," (ImageGPT model)"),A$e.forEach(t),hHo=i(Te),tF=n(Te,"LI",{});var y$e=s(tF);Ape=n(y$e,"STRONG",{});var Lpt=s(Ape);pHo=r(Lpt,"mobilevit"),Lpt.forEach(t),_Ho=r(y$e," \u2014 "),iX=n(y$e,"A",{href:!0});var xpt=s(iX);uHo=r(xpt,"MobileViTForImageClassification"),xpt.forEach(t),bHo=r(y$e," (MobileViT model)"),y$e.forEach(t),vHo=i(Te),_t=n(Te,"LI",{});var hf=s(_t);ype=n(hf,"STRONG",{});var $pt=s(ype);FHo=r($pt,"perceiver"),$pt.forEach(t),THo=r(hf," \u2014 "),dX=n(hf,"A",{href:!0});var kpt=s(dX);MHo=r(kpt,"PerceiverForImageClassificationLearned"),kpt.forEach(t),EHo=r(hf," or "),cX=n(hf,"A",{href:!0});var Spt=s(cX);CHo=r(Spt,"PerceiverForImageClassificationFourier"),Spt.forEach(t),wHo=r(hf," or "),fX=n(hf,"A",{href:!0});var Rpt=s(fX);AHo=r(Rpt,"PerceiverForImageClassificationConvProcessing"),Rpt.forEach(t),yHo=r(hf," (Perceiver model)"),hf.forEach(t),LHo=i(Te),aF=n(Te,"LI",{});var L$e=s(aF);Lpe=n(L$e,"STRONG",{});var Ppt=s(Lpe);xHo=r(Ppt,"poolformer"),Ppt.forEach(t),$Ho=r(L$e," \u2014 "),mX=n(L$e,"A",{href:!0});var Bpt=s(mX);kHo=r(Bpt,"PoolFormerForImageClassification"),Bpt.forEach(t),SHo=r(L$e," (PoolFormer model)"),L$e.forEach(t),RHo=i(Te),nF=n(Te,"LI",{});var x$e=s(nF);xpe=n(x$e,"STRONG",{});var Ipt=s(xpe);PHo=r(Ipt,"regnet"),Ipt.forEach(t),BHo=r(x$e," \u2014 "),gX=n(x$e,"A",{href:!0});var qpt=s(gX);IHo=r(qpt,"RegNetForImageClassification"),qpt.forEach(t),qHo=r(x$e," (RegNet model)"),x$e.forEach(t),NHo=i(Te),sF=n(Te,"LI",{});var $$e=s(sF);$pe=n($$e,"STRONG",{});var Npt=s($pe);jHo=r(Npt,"resnet"),Npt.forEach(t),DHo=r($$e," \u2014 "),hX=n($$e,"A",{href:!0});var jpt=s(hX);GHo=r(jpt,"ResNetForImageClassification"),jpt.forEach(t),OHo=r($$e," (ResNet model)"),$$e.forEach(t),VHo=i(Te),lF=n(Te,"LI",{});var k$e=s(lF);kpe=n(k$e,"STRONG",{});var Dpt=s(kpe);XHo=r(Dpt,"segformer"),Dpt.forEach(t),zHo=r(k$e," \u2014 "),pX=n(k$e,"A",{href:!0});var Gpt=s(pX);WHo=r(Gpt,"SegformerForImageClassification"),Gpt.forEach(t),QHo=r(k$e," (SegFormer model)"),k$e.forEach(t),HHo=i(Te),iF=n(Te,"LI",{});var S$e=s(iF);Spe=n(S$e,"STRONG",{});var Opt=s(Spe);UHo=r(Opt,"swin"),Opt.forEach(t),JHo=r(S$e," \u2014 "),_X=n(S$e,"A",{href:!0});var Vpt=s(_X);YHo=r(Vpt,"SwinForImageClassification"),Vpt.forEach(t),KHo=r(S$e," (Swin model)"),S$e.forEach(t),ZHo=i(Te),dF=n(Te,"LI",{});var R$e=s(dF);Rpe=n(R$e,"STRONG",{});var Xpt=s(Rpe);eUo=r(Xpt,"van"),Xpt.forEach(t),oUo=r(R$e," \u2014 "),uX=n(R$e,"A",{href:!0});var zpt=s(uX);rUo=r(zpt,"VanForImageClassification"),zpt.forEach(t),tUo=r(R$e," (VAN model)"),R$e.forEach(t),aUo=i(Te),cF=n(Te,"LI",{});var P$e=s(cF);Ppe=n(P$e,"STRONG",{});var Wpt=s(Ppe);nUo=r(Wpt,"vit"),Wpt.forEach(t),sUo=r(P$e," \u2014 "),bX=n(P$e,"A",{href:!0});var Qpt=s(bX);lUo=r(Qpt,"ViTForImageClassification"),Qpt.forEach(t),iUo=r(P$e," (ViT model)"),P$e.forEach(t),Te.forEach(t),dUo=i(ga),fF=n(ga,"P",{});var B$e=s(fF);cUo=r(B$e,"The model is set in evaluation mode by default using "),Bpe=n(B$e,"CODE",{});var Hpt=s(Bpe);fUo=r(Hpt,"model.eval()"),Hpt.forEach(t),mUo=r(B$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ipe=n(B$e,"CODE",{});var Upt=s(Ipe);gUo=r(Upt,"model.train()"),Upt.forEach(t),B$e.forEach(t),hUo=i(ga),T(mF.$$.fragment,ga),ga.forEach(t),Ks.forEach(t),rNe=i(f),ld=n(f,"H2",{class:!0});var sDe=s(ld);gF=n(sDe,"A",{id:!0,class:!0,href:!0});var Jpt=s(gF);qpe=n(Jpt,"SPAN",{});var Ypt=s(qpe);T(Yy.$$.fragment,Ypt),Ypt.forEach(t),Jpt.forEach(t),pUo=i(sDe),Npe=n(sDe,"SPAN",{});var Kpt=s(Npe);_Uo=r(Kpt,"AutoModelForVision2Seq"),Kpt.forEach(t),sDe.forEach(t),tNe=i(f),Do=n(f,"DIV",{class:!0});var Zs=s(Do);T(Ky.$$.fragment,Zs),uUo=i(Zs),id=n(Zs,"P",{});var TZ=s(id);bUo=r(TZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),vX=n(TZ,"A",{href:!0});var Zpt=s(vX);vUo=r(Zpt,"from_pretrained()"),Zpt.forEach(t),FUo=r(TZ," class method or the "),FX=n(TZ,"A",{href:!0});var e_t=s(FX);TUo=r(e_t,"from_config()"),e_t.forEach(t),MUo=r(TZ,` class
method.`),TZ.forEach(t),EUo=i(Zs),Zy=n(Zs,"P",{});var lDe=s(Zy);CUo=r(lDe,"This class cannot be instantiated directly using "),jpe=n(lDe,"CODE",{});var o_t=s(jpe);wUo=r(o_t,"__init__()"),o_t.forEach(t),AUo=r(lDe," (throws an error)."),lDe.forEach(t),yUo=i(Zs),ut=n(Zs,"DIV",{class:!0});var Hw=s(ut);T(e8.$$.fragment,Hw),LUo=i(Hw),Dpe=n(Hw,"P",{});var r_t=s(Dpe);xUo=r(r_t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),r_t.forEach(t),$Uo=i(Hw),dd=n(Hw,"P",{});var MZ=s(dd);kUo=r(MZ,`Note:
Loading a model from its configuration file does `),Gpe=n(MZ,"STRONG",{});var t_t=s(Gpe);SUo=r(t_t,"not"),t_t.forEach(t),RUo=r(MZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),TX=n(MZ,"A",{href:!0});var a_t=s(TX);PUo=r(a_t,"from_pretrained()"),a_t.forEach(t),BUo=r(MZ," to load the model weights."),MZ.forEach(t),IUo=i(Hw),T(hF.$$.fragment,Hw),Hw.forEach(t),qUo=i(Zs),io=n(Zs,"DIV",{class:!0});var ha=s(io);T(o8.$$.fragment,ha),NUo=i(ha),Ope=n(ha,"P",{});var n_t=s(Ope);jUo=r(n_t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),n_t.forEach(t),DUo=i(ha),Ga=n(ha,"P",{});var Uw=s(Ga);GUo=r(Uw,"The model class to instantiate is selected based on the "),Vpe=n(Uw,"CODE",{});var s_t=s(Vpe);OUo=r(s_t,"model_type"),s_t.forEach(t),VUo=r(Uw,` property of the config object (either
passed as an argument or loaded from `),Xpe=n(Uw,"CODE",{});var l_t=s(Xpe);XUo=r(l_t,"pretrained_model_name_or_path"),l_t.forEach(t),zUo=r(Uw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zpe=n(Uw,"CODE",{});var i_t=s(zpe);WUo=r(i_t,"pretrained_model_name_or_path"),i_t.forEach(t),QUo=r(Uw,":"),Uw.forEach(t),HUo=i(ha),Wpe=n(ha,"UL",{});var d_t=s(Wpe);pF=n(d_t,"LI",{});var I$e=s(pF);Qpe=n(I$e,"STRONG",{});var c_t=s(Qpe);UUo=r(c_t,"vision-encoder-decoder"),c_t.forEach(t),JUo=r(I$e," \u2014 "),MX=n(I$e,"A",{href:!0});var f_t=s(MX);YUo=r(f_t,"VisionEncoderDecoderModel"),f_t.forEach(t),KUo=r(I$e," (Vision Encoder decoder model)"),I$e.forEach(t),d_t.forEach(t),ZUo=i(ha),_F=n(ha,"P",{});var q$e=s(_F);eJo=r(q$e,"The model is set in evaluation mode by default using "),Hpe=n(q$e,"CODE",{});var m_t=s(Hpe);oJo=r(m_t,"model.eval()"),m_t.forEach(t),rJo=r(q$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Upe=n(q$e,"CODE",{});var g_t=s(Upe);tJo=r(g_t,"model.train()"),g_t.forEach(t),q$e.forEach(t),aJo=i(ha),T(uF.$$.fragment,ha),ha.forEach(t),Zs.forEach(t),aNe=i(f),cd=n(f,"H2",{class:!0});var iDe=s(cd);bF=n(iDe,"A",{id:!0,class:!0,href:!0});var h_t=s(bF);Jpe=n(h_t,"SPAN",{});var p_t=s(Jpe);T(r8.$$.fragment,p_t),p_t.forEach(t),h_t.forEach(t),nJo=i(iDe),Ype=n(iDe,"SPAN",{});var __t=s(Ype);sJo=r(__t,"AutoModelForAudioClassification"),__t.forEach(t),iDe.forEach(t),nNe=i(f),Go=n(f,"DIV",{class:!0});var el=s(Go);T(t8.$$.fragment,el),lJo=i(el),fd=n(el,"P",{});var EZ=s(fd);iJo=r(EZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),EX=n(EZ,"A",{href:!0});var u_t=s(EX);dJo=r(u_t,"from_pretrained()"),u_t.forEach(t),cJo=r(EZ," class method or the "),CX=n(EZ,"A",{href:!0});var b_t=s(CX);fJo=r(b_t,"from_config()"),b_t.forEach(t),mJo=r(EZ,` class
method.`),EZ.forEach(t),gJo=i(el),a8=n(el,"P",{});var dDe=s(a8);hJo=r(dDe,"This class cannot be instantiated directly using "),Kpe=n(dDe,"CODE",{});var v_t=s(Kpe);pJo=r(v_t,"__init__()"),v_t.forEach(t),_Jo=r(dDe," (throws an error)."),dDe.forEach(t),uJo=i(el),bt=n(el,"DIV",{class:!0});var Jw=s(bt);T(n8.$$.fragment,Jw),bJo=i(Jw),Zpe=n(Jw,"P",{});var F_t=s(Zpe);vJo=r(F_t,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),F_t.forEach(t),FJo=i(Jw),md=n(Jw,"P",{});var CZ=s(md);TJo=r(CZ,`Note:
Loading a model from its configuration file does `),e_e=n(CZ,"STRONG",{});var T_t=s(e_e);MJo=r(T_t,"not"),T_t.forEach(t),EJo=r(CZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),wX=n(CZ,"A",{href:!0});var M_t=s(wX);CJo=r(M_t,"from_pretrained()"),M_t.forEach(t),wJo=r(CZ," to load the model weights."),CZ.forEach(t),AJo=i(Jw),T(vF.$$.fragment,Jw),Jw.forEach(t),yJo=i(el),co=n(el,"DIV",{class:!0});var pa=s(co);T(s8.$$.fragment,pa),LJo=i(pa),o_e=n(pa,"P",{});var E_t=s(o_e);xJo=r(E_t,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),E_t.forEach(t),$Jo=i(pa),Oa=n(pa,"P",{});var Yw=s(Oa);kJo=r(Yw,"The model class to instantiate is selected based on the "),r_e=n(Yw,"CODE",{});var C_t=s(r_e);SJo=r(C_t,"model_type"),C_t.forEach(t),RJo=r(Yw,` property of the config object (either
passed as an argument or loaded from `),t_e=n(Yw,"CODE",{});var w_t=s(t_e);PJo=r(w_t,"pretrained_model_name_or_path"),w_t.forEach(t),BJo=r(Yw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a_e=n(Yw,"CODE",{});var A_t=s(a_e);IJo=r(A_t,"pretrained_model_name_or_path"),A_t.forEach(t),qJo=r(Yw,":"),Yw.forEach(t),NJo=i(pa),ke=n(pa,"UL",{});var Oe=s(ke);FF=n(Oe,"LI",{});var N$e=s(FF);n_e=n(N$e,"STRONG",{});var y_t=s(n_e);jJo=r(y_t,"data2vec-audio"),y_t.forEach(t),DJo=r(N$e," \u2014 "),AX=n(N$e,"A",{href:!0});var L_t=s(AX);GJo=r(L_t,"Data2VecAudioForSequenceClassification"),L_t.forEach(t),OJo=r(N$e," (Data2VecAudio model)"),N$e.forEach(t),VJo=i(Oe),TF=n(Oe,"LI",{});var j$e=s(TF);s_e=n(j$e,"STRONG",{});var x_t=s(s_e);XJo=r(x_t,"hubert"),x_t.forEach(t),zJo=r(j$e," \u2014 "),yX=n(j$e,"A",{href:!0});var $_t=s(yX);WJo=r($_t,"HubertForSequenceClassification"),$_t.forEach(t),QJo=r(j$e," (Hubert model)"),j$e.forEach(t),HJo=i(Oe),MF=n(Oe,"LI",{});var D$e=s(MF);l_e=n(D$e,"STRONG",{});var k_t=s(l_e);UJo=r(k_t,"sew"),k_t.forEach(t),JJo=r(D$e," \u2014 "),LX=n(D$e,"A",{href:!0});var S_t=s(LX);YJo=r(S_t,"SEWForSequenceClassification"),S_t.forEach(t),KJo=r(D$e," (SEW model)"),D$e.forEach(t),ZJo=i(Oe),EF=n(Oe,"LI",{});var G$e=s(EF);i_e=n(G$e,"STRONG",{});var R_t=s(i_e);eYo=r(R_t,"sew-d"),R_t.forEach(t),oYo=r(G$e," \u2014 "),xX=n(G$e,"A",{href:!0});var P_t=s(xX);rYo=r(P_t,"SEWDForSequenceClassification"),P_t.forEach(t),tYo=r(G$e," (SEW-D model)"),G$e.forEach(t),aYo=i(Oe),CF=n(Oe,"LI",{});var O$e=s(CF);d_e=n(O$e,"STRONG",{});var B_t=s(d_e);nYo=r(B_t,"unispeech"),B_t.forEach(t),sYo=r(O$e," \u2014 "),$X=n(O$e,"A",{href:!0});var I_t=s($X);lYo=r(I_t,"UniSpeechForSequenceClassification"),I_t.forEach(t),iYo=r(O$e," (UniSpeech model)"),O$e.forEach(t),dYo=i(Oe),wF=n(Oe,"LI",{});var V$e=s(wF);c_e=n(V$e,"STRONG",{});var q_t=s(c_e);cYo=r(q_t,"unispeech-sat"),q_t.forEach(t),fYo=r(V$e," \u2014 "),kX=n(V$e,"A",{href:!0});var N_t=s(kX);mYo=r(N_t,"UniSpeechSatForSequenceClassification"),N_t.forEach(t),gYo=r(V$e," (UniSpeechSat model)"),V$e.forEach(t),hYo=i(Oe),AF=n(Oe,"LI",{});var X$e=s(AF);f_e=n(X$e,"STRONG",{});var j_t=s(f_e);pYo=r(j_t,"wav2vec2"),j_t.forEach(t),_Yo=r(X$e," \u2014 "),SX=n(X$e,"A",{href:!0});var D_t=s(SX);uYo=r(D_t,"Wav2Vec2ForSequenceClassification"),D_t.forEach(t),bYo=r(X$e," (Wav2Vec2 model)"),X$e.forEach(t),vYo=i(Oe),yF=n(Oe,"LI",{});var z$e=s(yF);m_e=n(z$e,"STRONG",{});var G_t=s(m_e);FYo=r(G_t,"wav2vec2-conformer"),G_t.forEach(t),TYo=r(z$e," \u2014 "),RX=n(z$e,"A",{href:!0});var O_t=s(RX);MYo=r(O_t,"Wav2Vec2ConformerForSequenceClassification"),O_t.forEach(t),EYo=r(z$e," (Wav2Vec2-Conformer model)"),z$e.forEach(t),CYo=i(Oe),LF=n(Oe,"LI",{});var W$e=s(LF);g_e=n(W$e,"STRONG",{});var V_t=s(g_e);wYo=r(V_t,"wavlm"),V_t.forEach(t),AYo=r(W$e," \u2014 "),PX=n(W$e,"A",{href:!0});var X_t=s(PX);yYo=r(X_t,"WavLMForSequenceClassification"),X_t.forEach(t),LYo=r(W$e," (WavLM model)"),W$e.forEach(t),Oe.forEach(t),xYo=i(pa),xF=n(pa,"P",{});var Q$e=s(xF);$Yo=r(Q$e,"The model is set in evaluation mode by default using "),h_e=n(Q$e,"CODE",{});var z_t=s(h_e);kYo=r(z_t,"model.eval()"),z_t.forEach(t),SYo=r(Q$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),p_e=n(Q$e,"CODE",{});var W_t=s(p_e);RYo=r(W_t,"model.train()"),W_t.forEach(t),Q$e.forEach(t),PYo=i(pa),T($F.$$.fragment,pa),pa.forEach(t),el.forEach(t),sNe=i(f),gd=n(f,"H2",{class:!0});var cDe=s(gd);kF=n(cDe,"A",{id:!0,class:!0,href:!0});var Q_t=s(kF);__e=n(Q_t,"SPAN",{});var H_t=s(__e);T(l8.$$.fragment,H_t),H_t.forEach(t),Q_t.forEach(t),BYo=i(cDe),u_e=n(cDe,"SPAN",{});var U_t=s(u_e);IYo=r(U_t,"AutoModelForAudioFrameClassification"),U_t.forEach(t),cDe.forEach(t),lNe=i(f),Oo=n(f,"DIV",{class:!0});var ol=s(Oo);T(i8.$$.fragment,ol),qYo=i(ol),hd=n(ol,"P",{});var wZ=s(hd);NYo=r(wZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),BX=n(wZ,"A",{href:!0});var J_t=s(BX);jYo=r(J_t,"from_pretrained()"),J_t.forEach(t),DYo=r(wZ," class method or the "),IX=n(wZ,"A",{href:!0});var Y_t=s(IX);GYo=r(Y_t,"from_config()"),Y_t.forEach(t),OYo=r(wZ,` class
method.`),wZ.forEach(t),VYo=i(ol),d8=n(ol,"P",{});var fDe=s(d8);XYo=r(fDe,"This class cannot be instantiated directly using "),b_e=n(fDe,"CODE",{});var K_t=s(b_e);zYo=r(K_t,"__init__()"),K_t.forEach(t),WYo=r(fDe," (throws an error)."),fDe.forEach(t),QYo=i(ol),vt=n(ol,"DIV",{class:!0});var Kw=s(vt);T(c8.$$.fragment,Kw),HYo=i(Kw),v_e=n(Kw,"P",{});var Z_t=s(v_e);UYo=r(Z_t,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),Z_t.forEach(t),JYo=i(Kw),pd=n(Kw,"P",{});var AZ=s(pd);YYo=r(AZ,`Note:
Loading a model from its configuration file does `),F_e=n(AZ,"STRONG",{});var eut=s(F_e);KYo=r(eut,"not"),eut.forEach(t),ZYo=r(AZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),qX=n(AZ,"A",{href:!0});var out=s(qX);eKo=r(out,"from_pretrained()"),out.forEach(t),oKo=r(AZ," to load the model weights."),AZ.forEach(t),rKo=i(Kw),T(SF.$$.fragment,Kw),Kw.forEach(t),tKo=i(ol),fo=n(ol,"DIV",{class:!0});var _a=s(fo);T(f8.$$.fragment,_a),aKo=i(_a),T_e=n(_a,"P",{});var rut=s(T_e);nKo=r(rut,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),rut.forEach(t),sKo=i(_a),Va=n(_a,"P",{});var Zw=s(Va);lKo=r(Zw,"The model class to instantiate is selected based on the "),M_e=n(Zw,"CODE",{});var tut=s(M_e);iKo=r(tut,"model_type"),tut.forEach(t),dKo=r(Zw,` property of the config object (either
passed as an argument or loaded from `),E_e=n(Zw,"CODE",{});var aut=s(E_e);cKo=r(aut,"pretrained_model_name_or_path"),aut.forEach(t),fKo=r(Zw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C_e=n(Zw,"CODE",{});var nut=s(C_e);mKo=r(nut,"pretrained_model_name_or_path"),nut.forEach(t),gKo=r(Zw,":"),Zw.forEach(t),hKo=i(_a),Kr=n(_a,"UL",{});var rl=s(Kr);RF=n(rl,"LI",{});var H$e=s(RF);w_e=n(H$e,"STRONG",{});var sut=s(w_e);pKo=r(sut,"data2vec-audio"),sut.forEach(t),_Ko=r(H$e," \u2014 "),NX=n(H$e,"A",{href:!0});var lut=s(NX);uKo=r(lut,"Data2VecAudioForAudioFrameClassification"),lut.forEach(t),bKo=r(H$e," (Data2VecAudio model)"),H$e.forEach(t),vKo=i(rl),PF=n(rl,"LI",{});var U$e=s(PF);A_e=n(U$e,"STRONG",{});var iut=s(A_e);FKo=r(iut,"unispeech-sat"),iut.forEach(t),TKo=r(U$e," \u2014 "),jX=n(U$e,"A",{href:!0});var dut=s(jX);MKo=r(dut,"UniSpeechSatForAudioFrameClassification"),dut.forEach(t),EKo=r(U$e," (UniSpeechSat model)"),U$e.forEach(t),CKo=i(rl),BF=n(rl,"LI",{});var J$e=s(BF);y_e=n(J$e,"STRONG",{});var cut=s(y_e);wKo=r(cut,"wav2vec2"),cut.forEach(t),AKo=r(J$e," \u2014 "),DX=n(J$e,"A",{href:!0});var fut=s(DX);yKo=r(fut,"Wav2Vec2ForAudioFrameClassification"),fut.forEach(t),LKo=r(J$e," (Wav2Vec2 model)"),J$e.forEach(t),xKo=i(rl),IF=n(rl,"LI",{});var Y$e=s(IF);L_e=n(Y$e,"STRONG",{});var mut=s(L_e);$Ko=r(mut,"wav2vec2-conformer"),mut.forEach(t),kKo=r(Y$e," \u2014 "),GX=n(Y$e,"A",{href:!0});var gut=s(GX);SKo=r(gut,"Wav2Vec2ConformerForAudioFrameClassification"),gut.forEach(t),RKo=r(Y$e," (Wav2Vec2-Conformer model)"),Y$e.forEach(t),PKo=i(rl),qF=n(rl,"LI",{});var K$e=s(qF);x_e=n(K$e,"STRONG",{});var hut=s(x_e);BKo=r(hut,"wavlm"),hut.forEach(t),IKo=r(K$e," \u2014 "),OX=n(K$e,"A",{href:!0});var put=s(OX);qKo=r(put,"WavLMForAudioFrameClassification"),put.forEach(t),NKo=r(K$e," (WavLM model)"),K$e.forEach(t),rl.forEach(t),jKo=i(_a),NF=n(_a,"P",{});var Z$e=s(NF);DKo=r(Z$e,"The model is set in evaluation mode by default using "),$_e=n(Z$e,"CODE",{});var _ut=s($_e);GKo=r(_ut,"model.eval()"),_ut.forEach(t),OKo=r(Z$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),k_e=n(Z$e,"CODE",{});var uut=s(k_e);VKo=r(uut,"model.train()"),uut.forEach(t),Z$e.forEach(t),XKo=i(_a),T(jF.$$.fragment,_a),_a.forEach(t),ol.forEach(t),iNe=i(f),_d=n(f,"H2",{class:!0});var mDe=s(_d);DF=n(mDe,"A",{id:!0,class:!0,href:!0});var but=s(DF);S_e=n(but,"SPAN",{});var vut=s(S_e);T(m8.$$.fragment,vut),vut.forEach(t),but.forEach(t),zKo=i(mDe),R_e=n(mDe,"SPAN",{});var Fut=s(R_e);WKo=r(Fut,"AutoModelForCTC"),Fut.forEach(t),mDe.forEach(t),dNe=i(f),Vo=n(f,"DIV",{class:!0});var tl=s(Vo);T(g8.$$.fragment,tl),QKo=i(tl),ud=n(tl,"P",{});var yZ=s(ud);HKo=r(yZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),VX=n(yZ,"A",{href:!0});var Tut=s(VX);UKo=r(Tut,"from_pretrained()"),Tut.forEach(t),JKo=r(yZ," class method or the "),XX=n(yZ,"A",{href:!0});var Mut=s(XX);YKo=r(Mut,"from_config()"),Mut.forEach(t),KKo=r(yZ,` class
method.`),yZ.forEach(t),ZKo=i(tl),h8=n(tl,"P",{});var gDe=s(h8);eZo=r(gDe,"This class cannot be instantiated directly using "),P_e=n(gDe,"CODE",{});var Eut=s(P_e);oZo=r(Eut,"__init__()"),Eut.forEach(t),rZo=r(gDe," (throws an error)."),gDe.forEach(t),tZo=i(tl),Ft=n(tl,"DIV",{class:!0});var e6=s(Ft);T(p8.$$.fragment,e6),aZo=i(e6),B_e=n(e6,"P",{});var Cut=s(B_e);nZo=r(Cut,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Cut.forEach(t),sZo=i(e6),bd=n(e6,"P",{});var LZ=s(bd);lZo=r(LZ,`Note:
Loading a model from its configuration file does `),I_e=n(LZ,"STRONG",{});var wut=s(I_e);iZo=r(wut,"not"),wut.forEach(t),dZo=r(LZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),zX=n(LZ,"A",{href:!0});var Aut=s(zX);cZo=r(Aut,"from_pretrained()"),Aut.forEach(t),fZo=r(LZ," to load the model weights."),LZ.forEach(t),mZo=i(e6),T(GF.$$.fragment,e6),e6.forEach(t),gZo=i(tl),mo=n(tl,"DIV",{class:!0});var ua=s(mo);T(_8.$$.fragment,ua),hZo=i(ua),q_e=n(ua,"P",{});var yut=s(q_e);pZo=r(yut,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),yut.forEach(t),_Zo=i(ua),Xa=n(ua,"P",{});var o6=s(Xa);uZo=r(o6,"The model class to instantiate is selected based on the "),N_e=n(o6,"CODE",{});var Lut=s(N_e);bZo=r(Lut,"model_type"),Lut.forEach(t),vZo=r(o6,` property of the config object (either
passed as an argument or loaded from `),j_e=n(o6,"CODE",{});var xut=s(j_e);FZo=r(xut,"pretrained_model_name_or_path"),xut.forEach(t),TZo=r(o6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D_e=n(o6,"CODE",{});var $ut=s(D_e);MZo=r($ut,"pretrained_model_name_or_path"),$ut.forEach(t),EZo=r(o6,":"),o6.forEach(t),CZo=i(ua),Se=n(ua,"UL",{});var Ve=s(Se);OF=n(Ve,"LI",{});var eke=s(OF);G_e=n(eke,"STRONG",{});var kut=s(G_e);wZo=r(kut,"data2vec-audio"),kut.forEach(t),AZo=r(eke," \u2014 "),WX=n(eke,"A",{href:!0});var Sut=s(WX);yZo=r(Sut,"Data2VecAudioForCTC"),Sut.forEach(t),LZo=r(eke," (Data2VecAudio model)"),eke.forEach(t),xZo=i(Ve),VF=n(Ve,"LI",{});var oke=s(VF);O_e=n(oke,"STRONG",{});var Rut=s(O_e);$Zo=r(Rut,"hubert"),Rut.forEach(t),kZo=r(oke," \u2014 "),QX=n(oke,"A",{href:!0});var Put=s(QX);SZo=r(Put,"HubertForCTC"),Put.forEach(t),RZo=r(oke," (Hubert model)"),oke.forEach(t),PZo=i(Ve),XF=n(Ve,"LI",{});var rke=s(XF);V_e=n(rke,"STRONG",{});var But=s(V_e);BZo=r(But,"sew"),But.forEach(t),IZo=r(rke," \u2014 "),HX=n(rke,"A",{href:!0});var Iut=s(HX);qZo=r(Iut,"SEWForCTC"),Iut.forEach(t),NZo=r(rke," (SEW model)"),rke.forEach(t),jZo=i(Ve),zF=n(Ve,"LI",{});var tke=s(zF);X_e=n(tke,"STRONG",{});var qut=s(X_e);DZo=r(qut,"sew-d"),qut.forEach(t),GZo=r(tke," \u2014 "),UX=n(tke,"A",{href:!0});var Nut=s(UX);OZo=r(Nut,"SEWDForCTC"),Nut.forEach(t),VZo=r(tke," (SEW-D model)"),tke.forEach(t),XZo=i(Ve),WF=n(Ve,"LI",{});var ake=s(WF);z_e=n(ake,"STRONG",{});var jut=s(z_e);zZo=r(jut,"unispeech"),jut.forEach(t),WZo=r(ake," \u2014 "),JX=n(ake,"A",{href:!0});var Dut=s(JX);QZo=r(Dut,"UniSpeechForCTC"),Dut.forEach(t),HZo=r(ake," (UniSpeech model)"),ake.forEach(t),UZo=i(Ve),QF=n(Ve,"LI",{});var nke=s(QF);W_e=n(nke,"STRONG",{});var Gut=s(W_e);JZo=r(Gut,"unispeech-sat"),Gut.forEach(t),YZo=r(nke," \u2014 "),YX=n(nke,"A",{href:!0});var Out=s(YX);KZo=r(Out,"UniSpeechSatForCTC"),Out.forEach(t),ZZo=r(nke," (UniSpeechSat model)"),nke.forEach(t),eer=i(Ve),HF=n(Ve,"LI",{});var ske=s(HF);Q_e=n(ske,"STRONG",{});var Vut=s(Q_e);oer=r(Vut,"wav2vec2"),Vut.forEach(t),rer=r(ske," \u2014 "),KX=n(ske,"A",{href:!0});var Xut=s(KX);ter=r(Xut,"Wav2Vec2ForCTC"),Xut.forEach(t),aer=r(ske," (Wav2Vec2 model)"),ske.forEach(t),ner=i(Ve),UF=n(Ve,"LI",{});var lke=s(UF);H_e=n(lke,"STRONG",{});var zut=s(H_e);ser=r(zut,"wav2vec2-conformer"),zut.forEach(t),ler=r(lke," \u2014 "),ZX=n(lke,"A",{href:!0});var Wut=s(ZX);ier=r(Wut,"Wav2Vec2ConformerForCTC"),Wut.forEach(t),der=r(lke," (Wav2Vec2-Conformer model)"),lke.forEach(t),cer=i(Ve),JF=n(Ve,"LI",{});var ike=s(JF);U_e=n(ike,"STRONG",{});var Qut=s(U_e);fer=r(Qut,"wavlm"),Qut.forEach(t),mer=r(ike," \u2014 "),ez=n(ike,"A",{href:!0});var Hut=s(ez);ger=r(Hut,"WavLMForCTC"),Hut.forEach(t),her=r(ike," (WavLM model)"),ike.forEach(t),Ve.forEach(t),per=i(ua),YF=n(ua,"P",{});var dke=s(YF);_er=r(dke,"The model is set in evaluation mode by default using "),J_e=n(dke,"CODE",{});var Uut=s(J_e);uer=r(Uut,"model.eval()"),Uut.forEach(t),ber=r(dke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Y_e=n(dke,"CODE",{});var Jut=s(Y_e);ver=r(Jut,"model.train()"),Jut.forEach(t),dke.forEach(t),Fer=i(ua),T(KF.$$.fragment,ua),ua.forEach(t),tl.forEach(t),cNe=i(f),vd=n(f,"H2",{class:!0});var hDe=s(vd);ZF=n(hDe,"A",{id:!0,class:!0,href:!0});var Yut=s(ZF);K_e=n(Yut,"SPAN",{});var Kut=s(K_e);T(u8.$$.fragment,Kut),Kut.forEach(t),Yut.forEach(t),Ter=i(hDe),Z_e=n(hDe,"SPAN",{});var Zut=s(Z_e);Mer=r(Zut,"AutoModelForSpeechSeq2Seq"),Zut.forEach(t),hDe.forEach(t),fNe=i(f),Xo=n(f,"DIV",{class:!0});var al=s(Xo);T(b8.$$.fragment,al),Eer=i(al),Fd=n(al,"P",{});var xZ=s(Fd);Cer=r(xZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),oz=n(xZ,"A",{href:!0});var e2t=s(oz);wer=r(e2t,"from_pretrained()"),e2t.forEach(t),Aer=r(xZ," class method or the "),rz=n(xZ,"A",{href:!0});var o2t=s(rz);yer=r(o2t,"from_config()"),o2t.forEach(t),Ler=r(xZ,` class
method.`),xZ.forEach(t),xer=i(al),v8=n(al,"P",{});var pDe=s(v8);$er=r(pDe,"This class cannot be instantiated directly using "),eue=n(pDe,"CODE",{});var r2t=s(eue);ker=r(r2t,"__init__()"),r2t.forEach(t),Ser=r(pDe," (throws an error)."),pDe.forEach(t),Rer=i(al),Tt=n(al,"DIV",{class:!0});var r6=s(Tt);T(F8.$$.fragment,r6),Per=i(r6),oue=n(r6,"P",{});var t2t=s(oue);Ber=r(t2t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),t2t.forEach(t),Ier=i(r6),Td=n(r6,"P",{});var $Z=s(Td);qer=r($Z,`Note:
Loading a model from its configuration file does `),rue=n($Z,"STRONG",{});var a2t=s(rue);Ner=r(a2t,"not"),a2t.forEach(t),jer=r($Z,` load the model weights. It only affects the
model\u2019s configuration. Use `),tz=n($Z,"A",{href:!0});var n2t=s(tz);Der=r(n2t,"from_pretrained()"),n2t.forEach(t),Ger=r($Z," to load the model weights."),$Z.forEach(t),Oer=i(r6),T(e0.$$.fragment,r6),r6.forEach(t),Ver=i(al),go=n(al,"DIV",{class:!0});var ba=s(go);T(T8.$$.fragment,ba),Xer=i(ba),tue=n(ba,"P",{});var s2t=s(tue);zer=r(s2t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),s2t.forEach(t),Wer=i(ba),za=n(ba,"P",{});var t6=s(za);Qer=r(t6,"The model class to instantiate is selected based on the "),aue=n(t6,"CODE",{});var l2t=s(aue);Her=r(l2t,"model_type"),l2t.forEach(t),Uer=r(t6,` property of the config object (either
passed as an argument or loaded from `),nue=n(t6,"CODE",{});var i2t=s(nue);Jer=r(i2t,"pretrained_model_name_or_path"),i2t.forEach(t),Yer=r(t6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sue=n(t6,"CODE",{});var d2t=s(sue);Ker=r(d2t,"pretrained_model_name_or_path"),d2t.forEach(t),Zer=r(t6,":"),t6.forEach(t),eor=i(ba),M8=n(ba,"UL",{});var _De=s(M8);o0=n(_De,"LI",{});var cke=s(o0);lue=n(cke,"STRONG",{});var c2t=s(lue);oor=r(c2t,"speech-encoder-decoder"),c2t.forEach(t),ror=r(cke," \u2014 "),az=n(cke,"A",{href:!0});var f2t=s(az);tor=r(f2t,"SpeechEncoderDecoderModel"),f2t.forEach(t),aor=r(cke," (Speech Encoder decoder model)"),cke.forEach(t),nor=i(_De),r0=n(_De,"LI",{});var fke=s(r0);iue=n(fke,"STRONG",{});var m2t=s(iue);sor=r(m2t,"speech_to_text"),m2t.forEach(t),lor=r(fke," \u2014 "),nz=n(fke,"A",{href:!0});var g2t=s(nz);ior=r(g2t,"Speech2TextForConditionalGeneration"),g2t.forEach(t),dor=r(fke," (Speech2Text model)"),fke.forEach(t),_De.forEach(t),cor=i(ba),t0=n(ba,"P",{});var mke=s(t0);mor=r(mke,"The model is set in evaluation mode by default using "),due=n(mke,"CODE",{});var h2t=s(due);gor=r(h2t,"model.eval()"),h2t.forEach(t),hor=r(mke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cue=n(mke,"CODE",{});var p2t=s(cue);por=r(p2t,"model.train()"),p2t.forEach(t),mke.forEach(t),_or=i(ba),T(a0.$$.fragment,ba),ba.forEach(t),al.forEach(t),mNe=i(f),Md=n(f,"H2",{class:!0});var uDe=s(Md);n0=n(uDe,"A",{id:!0,class:!0,href:!0});var _2t=s(n0);fue=n(_2t,"SPAN",{});var u2t=s(fue);T(E8.$$.fragment,u2t),u2t.forEach(t),_2t.forEach(t),uor=i(uDe),mue=n(uDe,"SPAN",{});var b2t=s(mue);bor=r(b2t,"AutoModelForAudioXVector"),b2t.forEach(t),uDe.forEach(t),gNe=i(f),zo=n(f,"DIV",{class:!0});var nl=s(zo);T(C8.$$.fragment,nl),vor=i(nl),Ed=n(nl,"P",{});var kZ=s(Ed);For=r(kZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),sz=n(kZ,"A",{href:!0});var v2t=s(sz);Tor=r(v2t,"from_pretrained()"),v2t.forEach(t),Mor=r(kZ," class method or the "),lz=n(kZ,"A",{href:!0});var F2t=s(lz);Eor=r(F2t,"from_config()"),F2t.forEach(t),Cor=r(kZ,` class
method.`),kZ.forEach(t),wor=i(nl),w8=n(nl,"P",{});var bDe=s(w8);Aor=r(bDe,"This class cannot be instantiated directly using "),gue=n(bDe,"CODE",{});var T2t=s(gue);yor=r(T2t,"__init__()"),T2t.forEach(t),Lor=r(bDe," (throws an error)."),bDe.forEach(t),xor=i(nl),Mt=n(nl,"DIV",{class:!0});var a6=s(Mt);T(A8.$$.fragment,a6),$or=i(a6),hue=n(a6,"P",{});var M2t=s(hue);kor=r(M2t,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),M2t.forEach(t),Sor=i(a6),Cd=n(a6,"P",{});var SZ=s(Cd);Ror=r(SZ,`Note:
Loading a model from its configuration file does `),pue=n(SZ,"STRONG",{});var E2t=s(pue);Por=r(E2t,"not"),E2t.forEach(t),Bor=r(SZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),iz=n(SZ,"A",{href:!0});var C2t=s(iz);Ior=r(C2t,"from_pretrained()"),C2t.forEach(t),qor=r(SZ," to load the model weights."),SZ.forEach(t),Nor=i(a6),T(s0.$$.fragment,a6),a6.forEach(t),jor=i(nl),ho=n(nl,"DIV",{class:!0});var va=s(ho);T(y8.$$.fragment,va),Dor=i(va),_ue=n(va,"P",{});var w2t=s(_ue);Gor=r(w2t,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),w2t.forEach(t),Oor=i(va),Wa=n(va,"P",{});var n6=s(Wa);Vor=r(n6,"The model class to instantiate is selected based on the "),uue=n(n6,"CODE",{});var A2t=s(uue);Xor=r(A2t,"model_type"),A2t.forEach(t),zor=r(n6,` property of the config object (either
passed as an argument or loaded from `),bue=n(n6,"CODE",{});var y2t=s(bue);Wor=r(y2t,"pretrained_model_name_or_path"),y2t.forEach(t),Qor=r(n6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vue=n(n6,"CODE",{});var L2t=s(vue);Hor=r(L2t,"pretrained_model_name_or_path"),L2t.forEach(t),Uor=r(n6,":"),n6.forEach(t),Jor=i(va),Zr=n(va,"UL",{});var sl=s(Zr);l0=n(sl,"LI",{});var gke=s(l0);Fue=n(gke,"STRONG",{});var x2t=s(Fue);Yor=r(x2t,"data2vec-audio"),x2t.forEach(t),Kor=r(gke," \u2014 "),dz=n(gke,"A",{href:!0});var $2t=s(dz);Zor=r($2t,"Data2VecAudioForXVector"),$2t.forEach(t),err=r(gke," (Data2VecAudio model)"),gke.forEach(t),orr=i(sl),i0=n(sl,"LI",{});var hke=s(i0);Tue=n(hke,"STRONG",{});var k2t=s(Tue);rrr=r(k2t,"unispeech-sat"),k2t.forEach(t),trr=r(hke," \u2014 "),cz=n(hke,"A",{href:!0});var S2t=s(cz);arr=r(S2t,"UniSpeechSatForXVector"),S2t.forEach(t),nrr=r(hke," (UniSpeechSat model)"),hke.forEach(t),srr=i(sl),d0=n(sl,"LI",{});var pke=s(d0);Mue=n(pke,"STRONG",{});var R2t=s(Mue);lrr=r(R2t,"wav2vec2"),R2t.forEach(t),irr=r(pke," \u2014 "),fz=n(pke,"A",{href:!0});var P2t=s(fz);drr=r(P2t,"Wav2Vec2ForXVector"),P2t.forEach(t),crr=r(pke," (Wav2Vec2 model)"),pke.forEach(t),frr=i(sl),c0=n(sl,"LI",{});var _ke=s(c0);Eue=n(_ke,"STRONG",{});var B2t=s(Eue);mrr=r(B2t,"wav2vec2-conformer"),B2t.forEach(t),grr=r(_ke," \u2014 "),mz=n(_ke,"A",{href:!0});var I2t=s(mz);hrr=r(I2t,"Wav2Vec2ConformerForXVector"),I2t.forEach(t),prr=r(_ke," (Wav2Vec2-Conformer model)"),_ke.forEach(t),_rr=i(sl),f0=n(sl,"LI",{});var uke=s(f0);Cue=n(uke,"STRONG",{});var q2t=s(Cue);urr=r(q2t,"wavlm"),q2t.forEach(t),brr=r(uke," \u2014 "),gz=n(uke,"A",{href:!0});var N2t=s(gz);vrr=r(N2t,"WavLMForXVector"),N2t.forEach(t),Frr=r(uke," (WavLM model)"),uke.forEach(t),sl.forEach(t),Trr=i(va),m0=n(va,"P",{});var bke=s(m0);Mrr=r(bke,"The model is set in evaluation mode by default using "),wue=n(bke,"CODE",{});var j2t=s(wue);Err=r(j2t,"model.eval()"),j2t.forEach(t),Crr=r(bke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Aue=n(bke,"CODE",{});var D2t=s(Aue);wrr=r(D2t,"model.train()"),D2t.forEach(t),bke.forEach(t),Arr=i(va),T(g0.$$.fragment,va),va.forEach(t),nl.forEach(t),hNe=i(f),wd=n(f,"H2",{class:!0});var vDe=s(wd);h0=n(vDe,"A",{id:!0,class:!0,href:!0});var G2t=s(h0);yue=n(G2t,"SPAN",{});var O2t=s(yue);T(L8.$$.fragment,O2t),O2t.forEach(t),G2t.forEach(t),yrr=i(vDe),Lue=n(vDe,"SPAN",{});var V2t=s(Lue);Lrr=r(V2t,"AutoModelForMaskedImageModeling"),V2t.forEach(t),vDe.forEach(t),pNe=i(f),Wo=n(f,"DIV",{class:!0});var ll=s(Wo);T(x8.$$.fragment,ll),xrr=i(ll),Ad=n(ll,"P",{});var RZ=s(Ad);$rr=r(RZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),hz=n(RZ,"A",{href:!0});var X2t=s(hz);krr=r(X2t,"from_pretrained()"),X2t.forEach(t),Srr=r(RZ," class method or the "),pz=n(RZ,"A",{href:!0});var z2t=s(pz);Rrr=r(z2t,"from_config()"),z2t.forEach(t),Prr=r(RZ,` class
method.`),RZ.forEach(t),Brr=i(ll),$8=n(ll,"P",{});var FDe=s($8);Irr=r(FDe,"This class cannot be instantiated directly using "),xue=n(FDe,"CODE",{});var W2t=s(xue);qrr=r(W2t,"__init__()"),W2t.forEach(t),Nrr=r(FDe," (throws an error)."),FDe.forEach(t),jrr=i(ll),Et=n(ll,"DIV",{class:!0});var s6=s(Et);T(k8.$$.fragment,s6),Drr=i(s6),$ue=n(s6,"P",{});var Q2t=s($ue);Grr=r(Q2t,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Q2t.forEach(t),Orr=i(s6),yd=n(s6,"P",{});var PZ=s(yd);Vrr=r(PZ,`Note:
Loading a model from its configuration file does `),kue=n(PZ,"STRONG",{});var H2t=s(kue);Xrr=r(H2t,"not"),H2t.forEach(t),zrr=r(PZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),_z=n(PZ,"A",{href:!0});var U2t=s(_z);Wrr=r(U2t,"from_pretrained()"),U2t.forEach(t),Qrr=r(PZ," to load the model weights."),PZ.forEach(t),Hrr=i(s6),T(p0.$$.fragment,s6),s6.forEach(t),Urr=i(ll),po=n(ll,"DIV",{class:!0});var Fa=s(po);T(S8.$$.fragment,Fa),Jrr=i(Fa),Sue=n(Fa,"P",{});var J2t=s(Sue);Yrr=r(J2t,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),J2t.forEach(t),Krr=i(Fa),Qa=n(Fa,"P",{});var l6=s(Qa);Zrr=r(l6,"The model class to instantiate is selected based on the "),Rue=n(l6,"CODE",{});var Y2t=s(Rue);etr=r(Y2t,"model_type"),Y2t.forEach(t),otr=r(l6,` property of the config object (either
passed as an argument or loaded from `),Pue=n(l6,"CODE",{});var K2t=s(Pue);rtr=r(K2t,"pretrained_model_name_or_path"),K2t.forEach(t),ttr=r(l6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bue=n(l6,"CODE",{});var Z2t=s(Bue);atr=r(Z2t,"pretrained_model_name_or_path"),Z2t.forEach(t),ntr=r(l6,":"),l6.forEach(t),str=i(Fa),Ld=n(Fa,"UL",{});var BZ=s(Ld);_0=n(BZ,"LI",{});var vke=s(_0);Iue=n(vke,"STRONG",{});var e1t=s(Iue);ltr=r(e1t,"deit"),e1t.forEach(t),itr=r(vke," \u2014 "),uz=n(vke,"A",{href:!0});var o1t=s(uz);dtr=r(o1t,"DeiTForMaskedImageModeling"),o1t.forEach(t),ctr=r(vke," (DeiT model)"),vke.forEach(t),ftr=i(BZ),u0=n(BZ,"LI",{});var Fke=s(u0);que=n(Fke,"STRONG",{});var r1t=s(que);mtr=r(r1t,"swin"),r1t.forEach(t),gtr=r(Fke," \u2014 "),bz=n(Fke,"A",{href:!0});var t1t=s(bz);htr=r(t1t,"SwinForMaskedImageModeling"),t1t.forEach(t),ptr=r(Fke," (Swin model)"),Fke.forEach(t),_tr=i(BZ),b0=n(BZ,"LI",{});var Tke=s(b0);Nue=n(Tke,"STRONG",{});var a1t=s(Nue);utr=r(a1t,"vit"),a1t.forEach(t),btr=r(Tke," \u2014 "),vz=n(Tke,"A",{href:!0});var n1t=s(vz);vtr=r(n1t,"ViTForMaskedImageModeling"),n1t.forEach(t),Ftr=r(Tke," (ViT model)"),Tke.forEach(t),BZ.forEach(t),Ttr=i(Fa),v0=n(Fa,"P",{});var Mke=s(v0);Mtr=r(Mke,"The model is set in evaluation mode by default using "),jue=n(Mke,"CODE",{});var s1t=s(jue);Etr=r(s1t,"model.eval()"),s1t.forEach(t),Ctr=r(Mke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Due=n(Mke,"CODE",{});var l1t=s(Due);wtr=r(l1t,"model.train()"),l1t.forEach(t),Mke.forEach(t),Atr=i(Fa),T(F0.$$.fragment,Fa),Fa.forEach(t),ll.forEach(t),_Ne=i(f),xd=n(f,"H2",{class:!0});var TDe=s(xd);T0=n(TDe,"A",{id:!0,class:!0,href:!0});var i1t=s(T0);Gue=n(i1t,"SPAN",{});var d1t=s(Gue);T(R8.$$.fragment,d1t),d1t.forEach(t),i1t.forEach(t),ytr=i(TDe),Oue=n(TDe,"SPAN",{});var c1t=s(Oue);Ltr=r(c1t,"AutoModelForObjectDetection"),c1t.forEach(t),TDe.forEach(t),uNe=i(f),Qo=n(f,"DIV",{class:!0});var il=s(Qo);T(P8.$$.fragment,il),xtr=i(il),$d=n(il,"P",{});var IZ=s($d);$tr=r(IZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),Fz=n(IZ,"A",{href:!0});var f1t=s(Fz);ktr=r(f1t,"from_pretrained()"),f1t.forEach(t),Str=r(IZ," class method or the "),Tz=n(IZ,"A",{href:!0});var m1t=s(Tz);Rtr=r(m1t,"from_config()"),m1t.forEach(t),Ptr=r(IZ,` class
method.`),IZ.forEach(t),Btr=i(il),B8=n(il,"P",{});var MDe=s(B8);Itr=r(MDe,"This class cannot be instantiated directly using "),Vue=n(MDe,"CODE",{});var g1t=s(Vue);qtr=r(g1t,"__init__()"),g1t.forEach(t),Ntr=r(MDe," (throws an error)."),MDe.forEach(t),jtr=i(il),Ct=n(il,"DIV",{class:!0});var i6=s(Ct);T(I8.$$.fragment,i6),Dtr=i(i6),Xue=n(i6,"P",{});var h1t=s(Xue);Gtr=r(h1t,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),h1t.forEach(t),Otr=i(i6),kd=n(i6,"P",{});var qZ=s(kd);Vtr=r(qZ,`Note:
Loading a model from its configuration file does `),zue=n(qZ,"STRONG",{});var p1t=s(zue);Xtr=r(p1t,"not"),p1t.forEach(t),ztr=r(qZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Mz=n(qZ,"A",{href:!0});var _1t=s(Mz);Wtr=r(_1t,"from_pretrained()"),_1t.forEach(t),Qtr=r(qZ," to load the model weights."),qZ.forEach(t),Htr=i(i6),T(M0.$$.fragment,i6),i6.forEach(t),Utr=i(il),_o=n(il,"DIV",{class:!0});var Ta=s(_o);T(q8.$$.fragment,Ta),Jtr=i(Ta),Wue=n(Ta,"P",{});var u1t=s(Wue);Ytr=r(u1t,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),u1t.forEach(t),Ktr=i(Ta),Ha=n(Ta,"P",{});var d6=s(Ha);Ztr=r(d6,"The model class to instantiate is selected based on the "),Que=n(d6,"CODE",{});var b1t=s(Que);ear=r(b1t,"model_type"),b1t.forEach(t),oar=r(d6,` property of the config object (either
passed as an argument or loaded from `),Hue=n(d6,"CODE",{});var v1t=s(Hue);rar=r(v1t,"pretrained_model_name_or_path"),v1t.forEach(t),tar=r(d6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uue=n(d6,"CODE",{});var F1t=s(Uue);aar=r(F1t,"pretrained_model_name_or_path"),F1t.forEach(t),nar=r(d6,":"),d6.forEach(t),sar=i(Ta),N8=n(Ta,"UL",{});var EDe=s(N8);E0=n(EDe,"LI",{});var Eke=s(E0);Jue=n(Eke,"STRONG",{});var T1t=s(Jue);lar=r(T1t,"detr"),T1t.forEach(t),iar=r(Eke," \u2014 "),Ez=n(Eke,"A",{href:!0});var M1t=s(Ez);dar=r(M1t,"DetrForObjectDetection"),M1t.forEach(t),car=r(Eke," (DETR model)"),Eke.forEach(t),far=i(EDe),C0=n(EDe,"LI",{});var Cke=s(C0);Yue=n(Cke,"STRONG",{});var E1t=s(Yue);mar=r(E1t,"yolos"),E1t.forEach(t),gar=r(Cke," \u2014 "),Cz=n(Cke,"A",{href:!0});var C1t=s(Cz);har=r(C1t,"YolosForObjectDetection"),C1t.forEach(t),par=r(Cke," (YOLOS model)"),Cke.forEach(t),EDe.forEach(t),_ar=i(Ta),w0=n(Ta,"P",{});var wke=s(w0);uar=r(wke,"The model is set in evaluation mode by default using "),Kue=n(wke,"CODE",{});var w1t=s(Kue);bar=r(w1t,"model.eval()"),w1t.forEach(t),Far=r(wke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zue=n(wke,"CODE",{});var A1t=s(Zue);Tar=r(A1t,"model.train()"),A1t.forEach(t),wke.forEach(t),Mar=i(Ta),T(A0.$$.fragment,Ta),Ta.forEach(t),il.forEach(t),bNe=i(f),Sd=n(f,"H2",{class:!0});var CDe=s(Sd);y0=n(CDe,"A",{id:!0,class:!0,href:!0});var y1t=s(y0);e2e=n(y1t,"SPAN",{});var L1t=s(e2e);T(j8.$$.fragment,L1t),L1t.forEach(t),y1t.forEach(t),Ear=i(CDe),o2e=n(CDe,"SPAN",{});var x1t=s(o2e);Car=r(x1t,"AutoModelForImageSegmentation"),x1t.forEach(t),CDe.forEach(t),vNe=i(f),Ho=n(f,"DIV",{class:!0});var dl=s(Ho);T(D8.$$.fragment,dl),war=i(dl),Rd=n(dl,"P",{});var NZ=s(Rd);Aar=r(NZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),wz=n(NZ,"A",{href:!0});var $1t=s(wz);yar=r($1t,"from_pretrained()"),$1t.forEach(t),Lar=r(NZ," class method or the "),Az=n(NZ,"A",{href:!0});var k1t=s(Az);xar=r(k1t,"from_config()"),k1t.forEach(t),$ar=r(NZ,` class
method.`),NZ.forEach(t),kar=i(dl),G8=n(dl,"P",{});var wDe=s(G8);Sar=r(wDe,"This class cannot be instantiated directly using "),r2e=n(wDe,"CODE",{});var S1t=s(r2e);Rar=r(S1t,"__init__()"),S1t.forEach(t),Par=r(wDe," (throws an error)."),wDe.forEach(t),Bar=i(dl),wt=n(dl,"DIV",{class:!0});var c6=s(wt);T(O8.$$.fragment,c6),Iar=i(c6),t2e=n(c6,"P",{});var R1t=s(t2e);qar=r(R1t,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),R1t.forEach(t),Nar=i(c6),Pd=n(c6,"P",{});var jZ=s(Pd);jar=r(jZ,`Note:
Loading a model from its configuration file does `),a2e=n(jZ,"STRONG",{});var P1t=s(a2e);Dar=r(P1t,"not"),P1t.forEach(t),Gar=r(jZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),yz=n(jZ,"A",{href:!0});var B1t=s(yz);Oar=r(B1t,"from_pretrained()"),B1t.forEach(t),Var=r(jZ," to load the model weights."),jZ.forEach(t),Xar=i(c6),T(L0.$$.fragment,c6),c6.forEach(t),zar=i(dl),uo=n(dl,"DIV",{class:!0});var Ma=s(uo);T(V8.$$.fragment,Ma),War=i(Ma),n2e=n(Ma,"P",{});var I1t=s(n2e);Qar=r(I1t,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),I1t.forEach(t),Har=i(Ma),Ua=n(Ma,"P",{});var f6=s(Ua);Uar=r(f6,"The model class to instantiate is selected based on the "),s2e=n(f6,"CODE",{});var q1t=s(s2e);Jar=r(q1t,"model_type"),q1t.forEach(t),Yar=r(f6,` property of the config object (either
passed as an argument or loaded from `),l2e=n(f6,"CODE",{});var N1t=s(l2e);Kar=r(N1t,"pretrained_model_name_or_path"),N1t.forEach(t),Zar=r(f6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i2e=n(f6,"CODE",{});var j1t=s(i2e);enr=r(j1t,"pretrained_model_name_or_path"),j1t.forEach(t),onr=r(f6,":"),f6.forEach(t),rnr=i(Ma),d2e=n(Ma,"UL",{});var D1t=s(d2e);x0=n(D1t,"LI",{});var Ake=s(x0);c2e=n(Ake,"STRONG",{});var G1t=s(c2e);tnr=r(G1t,"detr"),G1t.forEach(t),anr=r(Ake," \u2014 "),Lz=n(Ake,"A",{href:!0});var O1t=s(Lz);nnr=r(O1t,"DetrForSegmentation"),O1t.forEach(t),snr=r(Ake," (DETR model)"),Ake.forEach(t),D1t.forEach(t),lnr=i(Ma),$0=n(Ma,"P",{});var yke=s($0);inr=r(yke,"The model is set in evaluation mode by default using "),f2e=n(yke,"CODE",{});var V1t=s(f2e);dnr=r(V1t,"model.eval()"),V1t.forEach(t),cnr=r(yke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),m2e=n(yke,"CODE",{});var X1t=s(m2e);fnr=r(X1t,"model.train()"),X1t.forEach(t),yke.forEach(t),mnr=i(Ma),T(k0.$$.fragment,Ma),Ma.forEach(t),dl.forEach(t),FNe=i(f),Bd=n(f,"H2",{class:!0});var ADe=s(Bd);S0=n(ADe,"A",{id:!0,class:!0,href:!0});var z1t=s(S0);g2e=n(z1t,"SPAN",{});var W1t=s(g2e);T(X8.$$.fragment,W1t),W1t.forEach(t),z1t.forEach(t),gnr=i(ADe),h2e=n(ADe,"SPAN",{});var Q1t=s(h2e);hnr=r(Q1t,"AutoModelForSemanticSegmentation"),Q1t.forEach(t),ADe.forEach(t),TNe=i(f),Uo=n(f,"DIV",{class:!0});var cl=s(Uo);T(z8.$$.fragment,cl),pnr=i(cl),Id=n(cl,"P",{});var DZ=s(Id);_nr=r(DZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),xz=n(DZ,"A",{href:!0});var H1t=s(xz);unr=r(H1t,"from_pretrained()"),H1t.forEach(t),bnr=r(DZ," class method or the "),$z=n(DZ,"A",{href:!0});var U1t=s($z);vnr=r(U1t,"from_config()"),U1t.forEach(t),Fnr=r(DZ,` class
method.`),DZ.forEach(t),Tnr=i(cl),W8=n(cl,"P",{});var yDe=s(W8);Mnr=r(yDe,"This class cannot be instantiated directly using "),p2e=n(yDe,"CODE",{});var J1t=s(p2e);Enr=r(J1t,"__init__()"),J1t.forEach(t),Cnr=r(yDe," (throws an error)."),yDe.forEach(t),wnr=i(cl),At=n(cl,"DIV",{class:!0});var m6=s(At);T(Q8.$$.fragment,m6),Anr=i(m6),_2e=n(m6,"P",{});var Y1t=s(_2e);ynr=r(Y1t,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Y1t.forEach(t),Lnr=i(m6),qd=n(m6,"P",{});var GZ=s(qd);xnr=r(GZ,`Note:
Loading a model from its configuration file does `),u2e=n(GZ,"STRONG",{});var K1t=s(u2e);$nr=r(K1t,"not"),K1t.forEach(t),knr=r(GZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),kz=n(GZ,"A",{href:!0});var Z1t=s(kz);Snr=r(Z1t,"from_pretrained()"),Z1t.forEach(t),Rnr=r(GZ," to load the model weights."),GZ.forEach(t),Pnr=i(m6),T(R0.$$.fragment,m6),m6.forEach(t),Bnr=i(cl),bo=n(cl,"DIV",{class:!0});var Ea=s(bo);T(H8.$$.fragment,Ea),Inr=i(Ea),b2e=n(Ea,"P",{});var ebt=s(b2e);qnr=r(ebt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),ebt.forEach(t),Nnr=i(Ea),Ja=n(Ea,"P",{});var g6=s(Ja);jnr=r(g6,"The model class to instantiate is selected based on the "),v2e=n(g6,"CODE",{});var obt=s(v2e);Dnr=r(obt,"model_type"),obt.forEach(t),Gnr=r(g6,` property of the config object (either
passed as an argument or loaded from `),F2e=n(g6,"CODE",{});var rbt=s(F2e);Onr=r(rbt,"pretrained_model_name_or_path"),rbt.forEach(t),Vnr=r(g6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T2e=n(g6,"CODE",{});var tbt=s(T2e);Xnr=r(tbt,"pretrained_model_name_or_path"),tbt.forEach(t),znr=r(g6,":"),g6.forEach(t),Wnr=i(Ea),et=n(Ea,"UL",{});var fl=s(et);P0=n(fl,"LI",{});var Lke=s(P0);M2e=n(Lke,"STRONG",{});var abt=s(M2e);Qnr=r(abt,"beit"),abt.forEach(t),Hnr=r(Lke," \u2014 "),Sz=n(Lke,"A",{href:!0});var nbt=s(Sz);Unr=r(nbt,"BeitForSemanticSegmentation"),nbt.forEach(t),Jnr=r(Lke," (BEiT model)"),Lke.forEach(t),Ynr=i(fl),B0=n(fl,"LI",{});var xke=s(B0);E2e=n(xke,"STRONG",{});var sbt=s(E2e);Knr=r(sbt,"data2vec-vision"),sbt.forEach(t),Znr=r(xke," \u2014 "),Rz=n(xke,"A",{href:!0});var lbt=s(Rz);esr=r(lbt,"Data2VecVisionForSemanticSegmentation"),lbt.forEach(t),osr=r(xke," (Data2VecVision model)"),xke.forEach(t),rsr=i(fl),I0=n(fl,"LI",{});var $ke=s(I0);C2e=n($ke,"STRONG",{});var ibt=s(C2e);tsr=r(ibt,"dpt"),ibt.forEach(t),asr=r($ke," \u2014 "),Pz=n($ke,"A",{href:!0});var dbt=s(Pz);nsr=r(dbt,"DPTForSemanticSegmentation"),dbt.forEach(t),ssr=r($ke," (DPT model)"),$ke.forEach(t),lsr=i(fl),q0=n(fl,"LI",{});var kke=s(q0);w2e=n(kke,"STRONG",{});var cbt=s(w2e);isr=r(cbt,"mobilevit"),cbt.forEach(t),dsr=r(kke," \u2014 "),Bz=n(kke,"A",{href:!0});var fbt=s(Bz);csr=r(fbt,"MobileViTForSemanticSegmentation"),fbt.forEach(t),fsr=r(kke," (MobileViT model)"),kke.forEach(t),msr=i(fl),N0=n(fl,"LI",{});var Ske=s(N0);A2e=n(Ske,"STRONG",{});var mbt=s(A2e);gsr=r(mbt,"segformer"),mbt.forEach(t),hsr=r(Ske," \u2014 "),Iz=n(Ske,"A",{href:!0});var gbt=s(Iz);psr=r(gbt,"SegformerForSemanticSegmentation"),gbt.forEach(t),_sr=r(Ske," (SegFormer model)"),Ske.forEach(t),fl.forEach(t),usr=i(Ea),j0=n(Ea,"P",{});var Rke=s(j0);bsr=r(Rke,"The model is set in evaluation mode by default using "),y2e=n(Rke,"CODE",{});var hbt=s(y2e);vsr=r(hbt,"model.eval()"),hbt.forEach(t),Fsr=r(Rke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),L2e=n(Rke,"CODE",{});var pbt=s(L2e);Tsr=r(pbt,"model.train()"),pbt.forEach(t),Rke.forEach(t),Msr=i(Ea),T(D0.$$.fragment,Ea),Ea.forEach(t),cl.forEach(t),MNe=i(f),Nd=n(f,"H2",{class:!0});var LDe=s(Nd);G0=n(LDe,"A",{id:!0,class:!0,href:!0});var _bt=s(G0);x2e=n(_bt,"SPAN",{});var ubt=s(x2e);T(U8.$$.fragment,ubt),ubt.forEach(t),_bt.forEach(t),Esr=i(LDe),$2e=n(LDe,"SPAN",{});var bbt=s($2e);Csr=r(bbt,"AutoModelForInstanceSegmentation"),bbt.forEach(t),LDe.forEach(t),ENe=i(f),Jo=n(f,"DIV",{class:!0});var ml=s(Jo);T(J8.$$.fragment,ml),wsr=i(ml),jd=n(ml,"P",{});var OZ=s(jd);Asr=r(OZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),qz=n(OZ,"A",{href:!0});var vbt=s(qz);ysr=r(vbt,"from_pretrained()"),vbt.forEach(t),Lsr=r(OZ," class method or the "),Nz=n(OZ,"A",{href:!0});var Fbt=s(Nz);xsr=r(Fbt,"from_config()"),Fbt.forEach(t),$sr=r(OZ,` class
method.`),OZ.forEach(t),ksr=i(ml),Y8=n(ml,"P",{});var xDe=s(Y8);Ssr=r(xDe,"This class cannot be instantiated directly using "),k2e=n(xDe,"CODE",{});var Tbt=s(k2e);Rsr=r(Tbt,"__init__()"),Tbt.forEach(t),Psr=r(xDe," (throws an error)."),xDe.forEach(t),Bsr=i(ml),yt=n(ml,"DIV",{class:!0});var h6=s(yt);T(K8.$$.fragment,h6),Isr=i(h6),S2e=n(h6,"P",{});var Mbt=s(S2e);qsr=r(Mbt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Mbt.forEach(t),Nsr=i(h6),Dd=n(h6,"P",{});var VZ=s(Dd);jsr=r(VZ,`Note:
Loading a model from its configuration file does `),R2e=n(VZ,"STRONG",{});var Ebt=s(R2e);Dsr=r(Ebt,"not"),Ebt.forEach(t),Gsr=r(VZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),jz=n(VZ,"A",{href:!0});var Cbt=s(jz);Osr=r(Cbt,"from_pretrained()"),Cbt.forEach(t),Vsr=r(VZ," to load the model weights."),VZ.forEach(t),Xsr=i(h6),T(O0.$$.fragment,h6),h6.forEach(t),zsr=i(ml),vo=n(ml,"DIV",{class:!0});var Ca=s(vo);T(Z8.$$.fragment,Ca),Wsr=i(Ca),P2e=n(Ca,"P",{});var wbt=s(P2e);Qsr=r(wbt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),wbt.forEach(t),Hsr=i(Ca),Ya=n(Ca,"P",{});var p6=s(Ya);Usr=r(p6,"The model class to instantiate is selected based on the "),B2e=n(p6,"CODE",{});var Abt=s(B2e);Jsr=r(Abt,"model_type"),Abt.forEach(t),Ysr=r(p6,` property of the config object (either
passed as an argument or loaded from `),I2e=n(p6,"CODE",{});var ybt=s(I2e);Ksr=r(ybt,"pretrained_model_name_or_path"),ybt.forEach(t),Zsr=r(p6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q2e=n(p6,"CODE",{});var Lbt=s(q2e);elr=r(Lbt,"pretrained_model_name_or_path"),Lbt.forEach(t),olr=r(p6,":"),p6.forEach(t),rlr=i(Ca),N2e=n(Ca,"UL",{});var xbt=s(N2e);V0=n(xbt,"LI",{});var Pke=s(V0);j2e=n(Pke,"STRONG",{});var $bt=s(j2e);tlr=r($bt,"maskformer"),$bt.forEach(t),alr=r(Pke," \u2014 "),Dz=n(Pke,"A",{href:!0});var kbt=s(Dz);nlr=r(kbt,"MaskFormerForInstanceSegmentation"),kbt.forEach(t),slr=r(Pke," (MaskFormer model)"),Pke.forEach(t),xbt.forEach(t),llr=i(Ca),X0=n(Ca,"P",{});var Bke=s(X0);ilr=r(Bke,"The model is set in evaluation mode by default using "),D2e=n(Bke,"CODE",{});var Sbt=s(D2e);dlr=r(Sbt,"model.eval()"),Sbt.forEach(t),clr=r(Bke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),G2e=n(Bke,"CODE",{});var Rbt=s(G2e);flr=r(Rbt,"model.train()"),Rbt.forEach(t),Bke.forEach(t),mlr=i(Ca),T(z0.$$.fragment,Ca),Ca.forEach(t),ml.forEach(t),CNe=i(f),Gd=n(f,"H2",{class:!0});var $De=s(Gd);W0=n($De,"A",{id:!0,class:!0,href:!0});var Pbt=s(W0);O2e=n(Pbt,"SPAN",{});var Bbt=s(O2e);T(eL.$$.fragment,Bbt),Bbt.forEach(t),Pbt.forEach(t),glr=i($De),V2e=n($De,"SPAN",{});var Ibt=s(V2e);hlr=r(Ibt,"TFAutoModel"),Ibt.forEach(t),$De.forEach(t),wNe=i(f),Yo=n(f,"DIV",{class:!0});var gl=s(Yo);T(oL.$$.fragment,gl),plr=i(gl),Od=n(gl,"P",{});var XZ=s(Od);_lr=r(XZ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Gz=n(XZ,"A",{href:!0});var qbt=s(Gz);ulr=r(qbt,"from_pretrained()"),qbt.forEach(t),blr=r(XZ," class method or the "),Oz=n(XZ,"A",{href:!0});var Nbt=s(Oz);vlr=r(Nbt,"from_config()"),Nbt.forEach(t),Flr=r(XZ,` class
method.`),XZ.forEach(t),Tlr=i(gl),rL=n(gl,"P",{});var kDe=s(rL);Mlr=r(kDe,"This class cannot be instantiated directly using "),X2e=n(kDe,"CODE",{});var jbt=s(X2e);Elr=r(jbt,"__init__()"),jbt.forEach(t),Clr=r(kDe," (throws an error)."),kDe.forEach(t),wlr=i(gl),Lt=n(gl,"DIV",{class:!0});var _6=s(Lt);T(tL.$$.fragment,_6),Alr=i(_6),z2e=n(_6,"P",{});var Dbt=s(z2e);ylr=r(Dbt,"Instantiates one of the base model classes of the library from a configuration."),Dbt.forEach(t),Llr=i(_6),Vd=n(_6,"P",{});var zZ=s(Vd);xlr=r(zZ,`Note:
Loading a model from its configuration file does `),W2e=n(zZ,"STRONG",{});var Gbt=s(W2e);$lr=r(Gbt,"not"),Gbt.forEach(t),klr=r(zZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Vz=n(zZ,"A",{href:!0});var Obt=s(Vz);Slr=r(Obt,"from_pretrained()"),Obt.forEach(t),Rlr=r(zZ," to load the model weights."),zZ.forEach(t),Plr=i(_6),T(Q0.$$.fragment,_6),_6.forEach(t),Blr=i(gl),wr=n(gl,"DIV",{class:!0});var hl=s(wr);T(aL.$$.fragment,hl),Ilr=i(hl),Q2e=n(hl,"P",{});var Vbt=s(Q2e);qlr=r(Vbt,"Instantiate one of the base model classes of the library from a pretrained model."),Vbt.forEach(t),Nlr=i(hl),Ka=n(hl,"P",{});var u6=s(Ka);jlr=r(u6,"The model class to instantiate is selected based on the "),H2e=n(u6,"CODE",{});var Xbt=s(H2e);Dlr=r(Xbt,"model_type"),Xbt.forEach(t),Glr=r(u6,` property of the config object (either
passed as an argument or loaded from `),U2e=n(u6,"CODE",{});var zbt=s(U2e);Olr=r(zbt,"pretrained_model_name_or_path"),zbt.forEach(t),Vlr=r(u6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J2e=n(u6,"CODE",{});var Wbt=s(J2e);Xlr=r(Wbt,"pretrained_model_name_or_path"),Wbt.forEach(t),zlr=r(u6,":"),u6.forEach(t),Wlr=i(hl),N=n(hl,"UL",{});var D=s(N);H0=n(D,"LI",{});var Ike=s(H0);Y2e=n(Ike,"STRONG",{});var Qbt=s(Y2e);Qlr=r(Qbt,"albert"),Qbt.forEach(t),Hlr=r(Ike," \u2014 "),Xz=n(Ike,"A",{href:!0});var Hbt=s(Xz);Ulr=r(Hbt,"TFAlbertModel"),Hbt.forEach(t),Jlr=r(Ike," (ALBERT model)"),Ike.forEach(t),Ylr=i(D),U0=n(D,"LI",{});var qke=s(U0);K2e=n(qke,"STRONG",{});var Ubt=s(K2e);Klr=r(Ubt,"bart"),Ubt.forEach(t),Zlr=r(qke," \u2014 "),zz=n(qke,"A",{href:!0});var Jbt=s(zz);eir=r(Jbt,"TFBartModel"),Jbt.forEach(t),oir=r(qke," (BART model)"),qke.forEach(t),rir=i(D),J0=n(D,"LI",{});var Nke=s(J0);Z2e=n(Nke,"STRONG",{});var Ybt=s(Z2e);tir=r(Ybt,"bert"),Ybt.forEach(t),air=r(Nke," \u2014 "),Wz=n(Nke,"A",{href:!0});var Kbt=s(Wz);nir=r(Kbt,"TFBertModel"),Kbt.forEach(t),sir=r(Nke," (BERT model)"),Nke.forEach(t),lir=i(D),Y0=n(D,"LI",{});var jke=s(Y0);e1e=n(jke,"STRONG",{});var Zbt=s(e1e);iir=r(Zbt,"blenderbot"),Zbt.forEach(t),dir=r(jke," \u2014 "),Qz=n(jke,"A",{href:!0});var e5t=s(Qz);cir=r(e5t,"TFBlenderbotModel"),e5t.forEach(t),fir=r(jke," (Blenderbot model)"),jke.forEach(t),mir=i(D),K0=n(D,"LI",{});var Dke=s(K0);o1e=n(Dke,"STRONG",{});var o5t=s(o1e);gir=r(o5t,"blenderbot-small"),o5t.forEach(t),hir=r(Dke," \u2014 "),Hz=n(Dke,"A",{href:!0});var r5t=s(Hz);pir=r(r5t,"TFBlenderbotSmallModel"),r5t.forEach(t),_ir=r(Dke," (BlenderbotSmall model)"),Dke.forEach(t),uir=i(D),Z0=n(D,"LI",{});var Gke=s(Z0);r1e=n(Gke,"STRONG",{});var t5t=s(r1e);bir=r(t5t,"camembert"),t5t.forEach(t),vir=r(Gke," \u2014 "),Uz=n(Gke,"A",{href:!0});var a5t=s(Uz);Fir=r(a5t,"TFCamembertModel"),a5t.forEach(t),Tir=r(Gke," (CamemBERT model)"),Gke.forEach(t),Mir=i(D),eT=n(D,"LI",{});var Oke=s(eT);t1e=n(Oke,"STRONG",{});var n5t=s(t1e);Eir=r(n5t,"clip"),n5t.forEach(t),Cir=r(Oke," \u2014 "),Jz=n(Oke,"A",{href:!0});var s5t=s(Jz);wir=r(s5t,"TFCLIPModel"),s5t.forEach(t),Air=r(Oke," (CLIP model)"),Oke.forEach(t),yir=i(D),oT=n(D,"LI",{});var Vke=s(oT);a1e=n(Vke,"STRONG",{});var l5t=s(a1e);Lir=r(l5t,"convbert"),l5t.forEach(t),xir=r(Vke," \u2014 "),Yz=n(Vke,"A",{href:!0});var i5t=s(Yz);$ir=r(i5t,"TFConvBertModel"),i5t.forEach(t),kir=r(Vke," (ConvBERT model)"),Vke.forEach(t),Sir=i(D),rT=n(D,"LI",{});var Xke=s(rT);n1e=n(Xke,"STRONG",{});var d5t=s(n1e);Rir=r(d5t,"convnext"),d5t.forEach(t),Pir=r(Xke," \u2014 "),Kz=n(Xke,"A",{href:!0});var c5t=s(Kz);Bir=r(c5t,"TFConvNextModel"),c5t.forEach(t),Iir=r(Xke," (ConvNext model)"),Xke.forEach(t),qir=i(D),tT=n(D,"LI",{});var zke=s(tT);s1e=n(zke,"STRONG",{});var f5t=s(s1e);Nir=r(f5t,"ctrl"),f5t.forEach(t),jir=r(zke," \u2014 "),Zz=n(zke,"A",{href:!0});var m5t=s(Zz);Dir=r(m5t,"TFCTRLModel"),m5t.forEach(t),Gir=r(zke," (CTRL model)"),zke.forEach(t),Oir=i(D),aT=n(D,"LI",{});var Wke=s(aT);l1e=n(Wke,"STRONG",{});var g5t=s(l1e);Vir=r(g5t,"data2vec-vision"),g5t.forEach(t),Xir=r(Wke," \u2014 "),eW=n(Wke,"A",{href:!0});var h5t=s(eW);zir=r(h5t,"TFData2VecVisionModel"),h5t.forEach(t),Wir=r(Wke," (Data2VecVision model)"),Wke.forEach(t),Qir=i(D),nT=n(D,"LI",{});var Qke=s(nT);i1e=n(Qke,"STRONG",{});var p5t=s(i1e);Hir=r(p5t,"deberta"),p5t.forEach(t),Uir=r(Qke," \u2014 "),oW=n(Qke,"A",{href:!0});var _5t=s(oW);Jir=r(_5t,"TFDebertaModel"),_5t.forEach(t),Yir=r(Qke," (DeBERTa model)"),Qke.forEach(t),Kir=i(D),sT=n(D,"LI",{});var Hke=s(sT);d1e=n(Hke,"STRONG",{});var u5t=s(d1e);Zir=r(u5t,"deberta-v2"),u5t.forEach(t),edr=r(Hke," \u2014 "),rW=n(Hke,"A",{href:!0});var b5t=s(rW);odr=r(b5t,"TFDebertaV2Model"),b5t.forEach(t),rdr=r(Hke," (DeBERTa-v2 model)"),Hke.forEach(t),tdr=i(D),lT=n(D,"LI",{});var Uke=s(lT);c1e=n(Uke,"STRONG",{});var v5t=s(c1e);adr=r(v5t,"distilbert"),v5t.forEach(t),ndr=r(Uke," \u2014 "),tW=n(Uke,"A",{href:!0});var F5t=s(tW);sdr=r(F5t,"TFDistilBertModel"),F5t.forEach(t),ldr=r(Uke," (DistilBERT model)"),Uke.forEach(t),idr=i(D),iT=n(D,"LI",{});var Jke=s(iT);f1e=n(Jke,"STRONG",{});var T5t=s(f1e);ddr=r(T5t,"dpr"),T5t.forEach(t),cdr=r(Jke," \u2014 "),aW=n(Jke,"A",{href:!0});var M5t=s(aW);fdr=r(M5t,"TFDPRQuestionEncoder"),M5t.forEach(t),mdr=r(Jke," (DPR model)"),Jke.forEach(t),gdr=i(D),dT=n(D,"LI",{});var Yke=s(dT);m1e=n(Yke,"STRONG",{});var E5t=s(m1e);hdr=r(E5t,"electra"),E5t.forEach(t),pdr=r(Yke," \u2014 "),nW=n(Yke,"A",{href:!0});var C5t=s(nW);_dr=r(C5t,"TFElectraModel"),C5t.forEach(t),udr=r(Yke," (ELECTRA model)"),Yke.forEach(t),bdr=i(D),cT=n(D,"LI",{});var Kke=s(cT);g1e=n(Kke,"STRONG",{});var w5t=s(g1e);vdr=r(w5t,"flaubert"),w5t.forEach(t),Fdr=r(Kke," \u2014 "),sW=n(Kke,"A",{href:!0});var A5t=s(sW);Tdr=r(A5t,"TFFlaubertModel"),A5t.forEach(t),Mdr=r(Kke," (FlauBERT model)"),Kke.forEach(t),Edr=i(D),Bs=n(D,"LI",{});var B$=s(Bs);h1e=n(B$,"STRONG",{});var y5t=s(h1e);Cdr=r(y5t,"funnel"),y5t.forEach(t),wdr=r(B$," \u2014 "),lW=n(B$,"A",{href:!0});var L5t=s(lW);Adr=r(L5t,"TFFunnelModel"),L5t.forEach(t),ydr=r(B$," or "),iW=n(B$,"A",{href:!0});var x5t=s(iW);Ldr=r(x5t,"TFFunnelBaseModel"),x5t.forEach(t),xdr=r(B$," (Funnel Transformer model)"),B$.forEach(t),$dr=i(D),fT=n(D,"LI",{});var Zke=s(fT);p1e=n(Zke,"STRONG",{});var $5t=s(p1e);kdr=r($5t,"gpt2"),$5t.forEach(t),Sdr=r(Zke," \u2014 "),dW=n(Zke,"A",{href:!0});var k5t=s(dW);Rdr=r(k5t,"TFGPT2Model"),k5t.forEach(t),Pdr=r(Zke," (OpenAI GPT-2 model)"),Zke.forEach(t),Bdr=i(D),mT=n(D,"LI",{});var eSe=s(mT);_1e=n(eSe,"STRONG",{});var S5t=s(_1e);Idr=r(S5t,"gptj"),S5t.forEach(t),qdr=r(eSe," \u2014 "),cW=n(eSe,"A",{href:!0});var R5t=s(cW);Ndr=r(R5t,"TFGPTJModel"),R5t.forEach(t),jdr=r(eSe," (GPT-J model)"),eSe.forEach(t),Ddr=i(D),gT=n(D,"LI",{});var oSe=s(gT);u1e=n(oSe,"STRONG",{});var P5t=s(u1e);Gdr=r(P5t,"hubert"),P5t.forEach(t),Odr=r(oSe," \u2014 "),fW=n(oSe,"A",{href:!0});var B5t=s(fW);Vdr=r(B5t,"TFHubertModel"),B5t.forEach(t),Xdr=r(oSe," (Hubert model)"),oSe.forEach(t),zdr=i(D),hT=n(D,"LI",{});var rSe=s(hT);b1e=n(rSe,"STRONG",{});var I5t=s(b1e);Wdr=r(I5t,"layoutlm"),I5t.forEach(t),Qdr=r(rSe," \u2014 "),mW=n(rSe,"A",{href:!0});var q5t=s(mW);Hdr=r(q5t,"TFLayoutLMModel"),q5t.forEach(t),Udr=r(rSe," (LayoutLM model)"),rSe.forEach(t),Jdr=i(D),pT=n(D,"LI",{});var tSe=s(pT);v1e=n(tSe,"STRONG",{});var N5t=s(v1e);Ydr=r(N5t,"led"),N5t.forEach(t),Kdr=r(tSe," \u2014 "),gW=n(tSe,"A",{href:!0});var j5t=s(gW);Zdr=r(j5t,"TFLEDModel"),j5t.forEach(t),ecr=r(tSe," (LED model)"),tSe.forEach(t),ocr=i(D),_T=n(D,"LI",{});var aSe=s(_T);F1e=n(aSe,"STRONG",{});var D5t=s(F1e);rcr=r(D5t,"longformer"),D5t.forEach(t),tcr=r(aSe," \u2014 "),hW=n(aSe,"A",{href:!0});var G5t=s(hW);acr=r(G5t,"TFLongformerModel"),G5t.forEach(t),ncr=r(aSe," (Longformer model)"),aSe.forEach(t),scr=i(D),uT=n(D,"LI",{});var nSe=s(uT);T1e=n(nSe,"STRONG",{});var O5t=s(T1e);lcr=r(O5t,"lxmert"),O5t.forEach(t),icr=r(nSe," \u2014 "),pW=n(nSe,"A",{href:!0});var V5t=s(pW);dcr=r(V5t,"TFLxmertModel"),V5t.forEach(t),ccr=r(nSe," (LXMERT model)"),nSe.forEach(t),fcr=i(D),bT=n(D,"LI",{});var sSe=s(bT);M1e=n(sSe,"STRONG",{});var X5t=s(M1e);mcr=r(X5t,"marian"),X5t.forEach(t),gcr=r(sSe," \u2014 "),_W=n(sSe,"A",{href:!0});var z5t=s(_W);hcr=r(z5t,"TFMarianModel"),z5t.forEach(t),pcr=r(sSe," (Marian model)"),sSe.forEach(t),_cr=i(D),vT=n(D,"LI",{});var lSe=s(vT);E1e=n(lSe,"STRONG",{});var W5t=s(E1e);ucr=r(W5t,"mbart"),W5t.forEach(t),bcr=r(lSe," \u2014 "),uW=n(lSe,"A",{href:!0});var Q5t=s(uW);vcr=r(Q5t,"TFMBartModel"),Q5t.forEach(t),Fcr=r(lSe," (mBART model)"),lSe.forEach(t),Tcr=i(D),FT=n(D,"LI",{});var iSe=s(FT);C1e=n(iSe,"STRONG",{});var H5t=s(C1e);Mcr=r(H5t,"mobilebert"),H5t.forEach(t),Ecr=r(iSe," \u2014 "),bW=n(iSe,"A",{href:!0});var U5t=s(bW);Ccr=r(U5t,"TFMobileBertModel"),U5t.forEach(t),wcr=r(iSe," (MobileBERT model)"),iSe.forEach(t),Acr=i(D),TT=n(D,"LI",{});var dSe=s(TT);w1e=n(dSe,"STRONG",{});var J5t=s(w1e);ycr=r(J5t,"mpnet"),J5t.forEach(t),Lcr=r(dSe," \u2014 "),vW=n(dSe,"A",{href:!0});var Y5t=s(vW);xcr=r(Y5t,"TFMPNetModel"),Y5t.forEach(t),$cr=r(dSe," (MPNet model)"),dSe.forEach(t),kcr=i(D),MT=n(D,"LI",{});var cSe=s(MT);A1e=n(cSe,"STRONG",{});var K5t=s(A1e);Scr=r(K5t,"mt5"),K5t.forEach(t),Rcr=r(cSe," \u2014 "),FW=n(cSe,"A",{href:!0});var Z5t=s(FW);Pcr=r(Z5t,"TFMT5Model"),Z5t.forEach(t),Bcr=r(cSe," (mT5 model)"),cSe.forEach(t),Icr=i(D),ET=n(D,"LI",{});var fSe=s(ET);y1e=n(fSe,"STRONG",{});var evt=s(y1e);qcr=r(evt,"openai-gpt"),evt.forEach(t),Ncr=r(fSe," \u2014 "),TW=n(fSe,"A",{href:!0});var ovt=s(TW);jcr=r(ovt,"TFOpenAIGPTModel"),ovt.forEach(t),Dcr=r(fSe," (OpenAI GPT model)"),fSe.forEach(t),Gcr=i(D),CT=n(D,"LI",{});var mSe=s(CT);L1e=n(mSe,"STRONG",{});var rvt=s(L1e);Ocr=r(rvt,"pegasus"),rvt.forEach(t),Vcr=r(mSe," \u2014 "),MW=n(mSe,"A",{href:!0});var tvt=s(MW);Xcr=r(tvt,"TFPegasusModel"),tvt.forEach(t),zcr=r(mSe," (Pegasus model)"),mSe.forEach(t),Wcr=i(D),wT=n(D,"LI",{});var gSe=s(wT);x1e=n(gSe,"STRONG",{});var avt=s(x1e);Qcr=r(avt,"rembert"),avt.forEach(t),Hcr=r(gSe," \u2014 "),EW=n(gSe,"A",{href:!0});var nvt=s(EW);Ucr=r(nvt,"TFRemBertModel"),nvt.forEach(t),Jcr=r(gSe," (RemBERT model)"),gSe.forEach(t),Ycr=i(D),AT=n(D,"LI",{});var hSe=s(AT);$1e=n(hSe,"STRONG",{});var svt=s($1e);Kcr=r(svt,"roberta"),svt.forEach(t),Zcr=r(hSe," \u2014 "),CW=n(hSe,"A",{href:!0});var lvt=s(CW);efr=r(lvt,"TFRobertaModel"),lvt.forEach(t),ofr=r(hSe," (RoBERTa model)"),hSe.forEach(t),rfr=i(D),yT=n(D,"LI",{});var pSe=s(yT);k1e=n(pSe,"STRONG",{});var ivt=s(k1e);tfr=r(ivt,"roformer"),ivt.forEach(t),afr=r(pSe," \u2014 "),wW=n(pSe,"A",{href:!0});var dvt=s(wW);nfr=r(dvt,"TFRoFormerModel"),dvt.forEach(t),sfr=r(pSe," (RoFormer model)"),pSe.forEach(t),lfr=i(D),LT=n(D,"LI",{});var _Se=s(LT);S1e=n(_Se,"STRONG",{});var cvt=s(S1e);ifr=r(cvt,"speech_to_text"),cvt.forEach(t),dfr=r(_Se," \u2014 "),AW=n(_Se,"A",{href:!0});var fvt=s(AW);cfr=r(fvt,"TFSpeech2TextModel"),fvt.forEach(t),ffr=r(_Se," (Speech2Text model)"),_Se.forEach(t),mfr=i(D),xT=n(D,"LI",{});var uSe=s(xT);R1e=n(uSe,"STRONG",{});var mvt=s(R1e);gfr=r(mvt,"swin"),mvt.forEach(t),hfr=r(uSe," \u2014 "),yW=n(uSe,"A",{href:!0});var gvt=s(yW);pfr=r(gvt,"TFSwinModel"),gvt.forEach(t),_fr=r(uSe," (Swin model)"),uSe.forEach(t),ufr=i(D),$T=n(D,"LI",{});var bSe=s($T);P1e=n(bSe,"STRONG",{});var hvt=s(P1e);bfr=r(hvt,"t5"),hvt.forEach(t),vfr=r(bSe," \u2014 "),LW=n(bSe,"A",{href:!0});var pvt=s(LW);Ffr=r(pvt,"TFT5Model"),pvt.forEach(t),Tfr=r(bSe," (T5 model)"),bSe.forEach(t),Mfr=i(D),kT=n(D,"LI",{});var vSe=s(kT);B1e=n(vSe,"STRONG",{});var _vt=s(B1e);Efr=r(_vt,"tapas"),_vt.forEach(t),Cfr=r(vSe," \u2014 "),xW=n(vSe,"A",{href:!0});var uvt=s(xW);wfr=r(uvt,"TFTapasModel"),uvt.forEach(t),Afr=r(vSe," (TAPAS model)"),vSe.forEach(t),yfr=i(D),ST=n(D,"LI",{});var FSe=s(ST);I1e=n(FSe,"STRONG",{});var bvt=s(I1e);Lfr=r(bvt,"transfo-xl"),bvt.forEach(t),xfr=r(FSe," \u2014 "),$W=n(FSe,"A",{href:!0});var vvt=s($W);$fr=r(vvt,"TFTransfoXLModel"),vvt.forEach(t),kfr=r(FSe," (Transformer-XL model)"),FSe.forEach(t),Sfr=i(D),RT=n(D,"LI",{});var TSe=s(RT);q1e=n(TSe,"STRONG",{});var Fvt=s(q1e);Rfr=r(Fvt,"vit"),Fvt.forEach(t),Pfr=r(TSe," \u2014 "),kW=n(TSe,"A",{href:!0});var Tvt=s(kW);Bfr=r(Tvt,"TFViTModel"),Tvt.forEach(t),Ifr=r(TSe," (ViT model)"),TSe.forEach(t),qfr=i(D),PT=n(D,"LI",{});var MSe=s(PT);N1e=n(MSe,"STRONG",{});var Mvt=s(N1e);Nfr=r(Mvt,"vit_mae"),Mvt.forEach(t),jfr=r(MSe," \u2014 "),SW=n(MSe,"A",{href:!0});var Evt=s(SW);Dfr=r(Evt,"TFViTMAEModel"),Evt.forEach(t),Gfr=r(MSe," (ViTMAE model)"),MSe.forEach(t),Ofr=i(D),BT=n(D,"LI",{});var ESe=s(BT);j1e=n(ESe,"STRONG",{});var Cvt=s(j1e);Vfr=r(Cvt,"wav2vec2"),Cvt.forEach(t),Xfr=r(ESe," \u2014 "),RW=n(ESe,"A",{href:!0});var wvt=s(RW);zfr=r(wvt,"TFWav2Vec2Model"),wvt.forEach(t),Wfr=r(ESe," (Wav2Vec2 model)"),ESe.forEach(t),Qfr=i(D),IT=n(D,"LI",{});var CSe=s(IT);D1e=n(CSe,"STRONG",{});var Avt=s(D1e);Hfr=r(Avt,"xlm"),Avt.forEach(t),Ufr=r(CSe," \u2014 "),PW=n(CSe,"A",{href:!0});var yvt=s(PW);Jfr=r(yvt,"TFXLMModel"),yvt.forEach(t),Yfr=r(CSe," (XLM model)"),CSe.forEach(t),Kfr=i(D),qT=n(D,"LI",{});var wSe=s(qT);G1e=n(wSe,"STRONG",{});var Lvt=s(G1e);Zfr=r(Lvt,"xlm-roberta"),Lvt.forEach(t),emr=r(wSe," \u2014 "),BW=n(wSe,"A",{href:!0});var xvt=s(BW);omr=r(xvt,"TFXLMRobertaModel"),xvt.forEach(t),rmr=r(wSe," (XLM-RoBERTa model)"),wSe.forEach(t),tmr=i(D),NT=n(D,"LI",{});var ASe=s(NT);O1e=n(ASe,"STRONG",{});var $vt=s(O1e);amr=r($vt,"xlnet"),$vt.forEach(t),nmr=r(ASe," \u2014 "),IW=n(ASe,"A",{href:!0});var kvt=s(IW);smr=r(kvt,"TFXLNetModel"),kvt.forEach(t),lmr=r(ASe," (XLNet model)"),ASe.forEach(t),D.forEach(t),imr=i(hl),T(jT.$$.fragment,hl),hl.forEach(t),gl.forEach(t),ANe=i(f),Xd=n(f,"H2",{class:!0});var SDe=s(Xd);DT=n(SDe,"A",{id:!0,class:!0,href:!0});var Svt=s(DT);V1e=n(Svt,"SPAN",{});var Rvt=s(V1e);T(nL.$$.fragment,Rvt),Rvt.forEach(t),Svt.forEach(t),dmr=i(SDe),X1e=n(SDe,"SPAN",{});var Pvt=s(X1e);cmr=r(Pvt,"TFAutoModelForPreTraining"),Pvt.forEach(t),SDe.forEach(t),yNe=i(f),Ko=n(f,"DIV",{class:!0});var pl=s(Ko);T(sL.$$.fragment,pl),fmr=i(pl),zd=n(pl,"P",{});var WZ=s(zd);mmr=r(WZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),qW=n(WZ,"A",{href:!0});var Bvt=s(qW);gmr=r(Bvt,"from_pretrained()"),Bvt.forEach(t),hmr=r(WZ," class method or the "),NW=n(WZ,"A",{href:!0});var Ivt=s(NW);pmr=r(Ivt,"from_config()"),Ivt.forEach(t),_mr=r(WZ,` class
method.`),WZ.forEach(t),umr=i(pl),lL=n(pl,"P",{});var RDe=s(lL);bmr=r(RDe,"This class cannot be instantiated directly using "),z1e=n(RDe,"CODE",{});var qvt=s(z1e);vmr=r(qvt,"__init__()"),qvt.forEach(t),Fmr=r(RDe," (throws an error)."),RDe.forEach(t),Tmr=i(pl),xt=n(pl,"DIV",{class:!0});var b6=s(xt);T(iL.$$.fragment,b6),Mmr=i(b6),W1e=n(b6,"P",{});var Nvt=s(W1e);Emr=r(Nvt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Nvt.forEach(t),Cmr=i(b6),Wd=n(b6,"P",{});var QZ=s(Wd);wmr=r(QZ,`Note:
Loading a model from its configuration file does `),Q1e=n(QZ,"STRONG",{});var jvt=s(Q1e);Amr=r(jvt,"not"),jvt.forEach(t),ymr=r(QZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),jW=n(QZ,"A",{href:!0});var Dvt=s(jW);Lmr=r(Dvt,"from_pretrained()"),Dvt.forEach(t),xmr=r(QZ," to load the model weights."),QZ.forEach(t),$mr=i(b6),T(GT.$$.fragment,b6),b6.forEach(t),kmr=i(pl),Ar=n(pl,"DIV",{class:!0});var _l=s(Ar);T(dL.$$.fragment,_l),Smr=i(_l),H1e=n(_l,"P",{});var Gvt=s(H1e);Rmr=r(Gvt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Gvt.forEach(t),Pmr=i(_l),Za=n(_l,"P",{});var v6=s(Za);Bmr=r(v6,"The model class to instantiate is selected based on the "),U1e=n(v6,"CODE",{});var Ovt=s(U1e);Imr=r(Ovt,"model_type"),Ovt.forEach(t),qmr=r(v6,` property of the config object (either
passed as an argument or loaded from `),J1e=n(v6,"CODE",{});var Vvt=s(J1e);Nmr=r(Vvt,"pretrained_model_name_or_path"),Vvt.forEach(t),jmr=r(v6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y1e=n(v6,"CODE",{});var Xvt=s(Y1e);Dmr=r(Xvt,"pretrained_model_name_or_path"),Xvt.forEach(t),Gmr=r(v6,":"),v6.forEach(t),Omr=i(_l),se=n(_l,"UL",{});var le=s(se);OT=n(le,"LI",{});var ySe=s(OT);K1e=n(ySe,"STRONG",{});var zvt=s(K1e);Vmr=r(zvt,"albert"),zvt.forEach(t),Xmr=r(ySe," \u2014 "),DW=n(ySe,"A",{href:!0});var Wvt=s(DW);zmr=r(Wvt,"TFAlbertForPreTraining"),Wvt.forEach(t),Wmr=r(ySe," (ALBERT model)"),ySe.forEach(t),Qmr=i(le),VT=n(le,"LI",{});var LSe=s(VT);Z1e=n(LSe,"STRONG",{});var Qvt=s(Z1e);Hmr=r(Qvt,"bart"),Qvt.forEach(t),Umr=r(LSe," \u2014 "),GW=n(LSe,"A",{href:!0});var Hvt=s(GW);Jmr=r(Hvt,"TFBartForConditionalGeneration"),Hvt.forEach(t),Ymr=r(LSe," (BART model)"),LSe.forEach(t),Kmr=i(le),XT=n(le,"LI",{});var xSe=s(XT);ebe=n(xSe,"STRONG",{});var Uvt=s(ebe);Zmr=r(Uvt,"bert"),Uvt.forEach(t),egr=r(xSe," \u2014 "),OW=n(xSe,"A",{href:!0});var Jvt=s(OW);ogr=r(Jvt,"TFBertForPreTraining"),Jvt.forEach(t),rgr=r(xSe," (BERT model)"),xSe.forEach(t),tgr=i(le),zT=n(le,"LI",{});var $Se=s(zT);obe=n($Se,"STRONG",{});var Yvt=s(obe);agr=r(Yvt,"camembert"),Yvt.forEach(t),ngr=r($Se," \u2014 "),VW=n($Se,"A",{href:!0});var Kvt=s(VW);sgr=r(Kvt,"TFCamembertForMaskedLM"),Kvt.forEach(t),lgr=r($Se," (CamemBERT model)"),$Se.forEach(t),igr=i(le),WT=n(le,"LI",{});var kSe=s(WT);rbe=n(kSe,"STRONG",{});var Zvt=s(rbe);dgr=r(Zvt,"ctrl"),Zvt.forEach(t),cgr=r(kSe," \u2014 "),XW=n(kSe,"A",{href:!0});var eFt=s(XW);fgr=r(eFt,"TFCTRLLMHeadModel"),eFt.forEach(t),mgr=r(kSe," (CTRL model)"),kSe.forEach(t),ggr=i(le),QT=n(le,"LI",{});var SSe=s(QT);tbe=n(SSe,"STRONG",{});var oFt=s(tbe);hgr=r(oFt,"distilbert"),oFt.forEach(t),pgr=r(SSe," \u2014 "),zW=n(SSe,"A",{href:!0});var rFt=s(zW);_gr=r(rFt,"TFDistilBertForMaskedLM"),rFt.forEach(t),ugr=r(SSe," (DistilBERT model)"),SSe.forEach(t),bgr=i(le),HT=n(le,"LI",{});var RSe=s(HT);abe=n(RSe,"STRONG",{});var tFt=s(abe);vgr=r(tFt,"electra"),tFt.forEach(t),Fgr=r(RSe," \u2014 "),WW=n(RSe,"A",{href:!0});var aFt=s(WW);Tgr=r(aFt,"TFElectraForPreTraining"),aFt.forEach(t),Mgr=r(RSe," (ELECTRA model)"),RSe.forEach(t),Egr=i(le),UT=n(le,"LI",{});var PSe=s(UT);nbe=n(PSe,"STRONG",{});var nFt=s(nbe);Cgr=r(nFt,"flaubert"),nFt.forEach(t),wgr=r(PSe," \u2014 "),QW=n(PSe,"A",{href:!0});var sFt=s(QW);Agr=r(sFt,"TFFlaubertWithLMHeadModel"),sFt.forEach(t),ygr=r(PSe," (FlauBERT model)"),PSe.forEach(t),Lgr=i(le),JT=n(le,"LI",{});var BSe=s(JT);sbe=n(BSe,"STRONG",{});var lFt=s(sbe);xgr=r(lFt,"funnel"),lFt.forEach(t),$gr=r(BSe," \u2014 "),HW=n(BSe,"A",{href:!0});var iFt=s(HW);kgr=r(iFt,"TFFunnelForPreTraining"),iFt.forEach(t),Sgr=r(BSe," (Funnel Transformer model)"),BSe.forEach(t),Rgr=i(le),YT=n(le,"LI",{});var ISe=s(YT);lbe=n(ISe,"STRONG",{});var dFt=s(lbe);Pgr=r(dFt,"gpt2"),dFt.forEach(t),Bgr=r(ISe," \u2014 "),UW=n(ISe,"A",{href:!0});var cFt=s(UW);Igr=r(cFt,"TFGPT2LMHeadModel"),cFt.forEach(t),qgr=r(ISe," (OpenAI GPT-2 model)"),ISe.forEach(t),Ngr=i(le),KT=n(le,"LI",{});var qSe=s(KT);ibe=n(qSe,"STRONG",{});var fFt=s(ibe);jgr=r(fFt,"layoutlm"),fFt.forEach(t),Dgr=r(qSe," \u2014 "),JW=n(qSe,"A",{href:!0});var mFt=s(JW);Ggr=r(mFt,"TFLayoutLMForMaskedLM"),mFt.forEach(t),Ogr=r(qSe," (LayoutLM model)"),qSe.forEach(t),Vgr=i(le),ZT=n(le,"LI",{});var NSe=s(ZT);dbe=n(NSe,"STRONG",{});var gFt=s(dbe);Xgr=r(gFt,"lxmert"),gFt.forEach(t),zgr=r(NSe," \u2014 "),YW=n(NSe,"A",{href:!0});var hFt=s(YW);Wgr=r(hFt,"TFLxmertForPreTraining"),hFt.forEach(t),Qgr=r(NSe," (LXMERT model)"),NSe.forEach(t),Hgr=i(le),e7=n(le,"LI",{});var jSe=s(e7);cbe=n(jSe,"STRONG",{});var pFt=s(cbe);Ugr=r(pFt,"mobilebert"),pFt.forEach(t),Jgr=r(jSe," \u2014 "),KW=n(jSe,"A",{href:!0});var _Ft=s(KW);Ygr=r(_Ft,"TFMobileBertForPreTraining"),_Ft.forEach(t),Kgr=r(jSe," (MobileBERT model)"),jSe.forEach(t),Zgr=i(le),o7=n(le,"LI",{});var DSe=s(o7);fbe=n(DSe,"STRONG",{});var uFt=s(fbe);ehr=r(uFt,"mpnet"),uFt.forEach(t),ohr=r(DSe," \u2014 "),ZW=n(DSe,"A",{href:!0});var bFt=s(ZW);rhr=r(bFt,"TFMPNetForMaskedLM"),bFt.forEach(t),thr=r(DSe," (MPNet model)"),DSe.forEach(t),ahr=i(le),r7=n(le,"LI",{});var GSe=s(r7);mbe=n(GSe,"STRONG",{});var vFt=s(mbe);nhr=r(vFt,"openai-gpt"),vFt.forEach(t),shr=r(GSe," \u2014 "),eQ=n(GSe,"A",{href:!0});var FFt=s(eQ);lhr=r(FFt,"TFOpenAIGPTLMHeadModel"),FFt.forEach(t),ihr=r(GSe," (OpenAI GPT model)"),GSe.forEach(t),dhr=i(le),t7=n(le,"LI",{});var OSe=s(t7);gbe=n(OSe,"STRONG",{});var TFt=s(gbe);chr=r(TFt,"roberta"),TFt.forEach(t),fhr=r(OSe," \u2014 "),oQ=n(OSe,"A",{href:!0});var MFt=s(oQ);mhr=r(MFt,"TFRobertaForMaskedLM"),MFt.forEach(t),ghr=r(OSe," (RoBERTa model)"),OSe.forEach(t),hhr=i(le),a7=n(le,"LI",{});var VSe=s(a7);hbe=n(VSe,"STRONG",{});var EFt=s(hbe);phr=r(EFt,"t5"),EFt.forEach(t),_hr=r(VSe," \u2014 "),rQ=n(VSe,"A",{href:!0});var CFt=s(rQ);uhr=r(CFt,"TFT5ForConditionalGeneration"),CFt.forEach(t),bhr=r(VSe," (T5 model)"),VSe.forEach(t),vhr=i(le),n7=n(le,"LI",{});var XSe=s(n7);pbe=n(XSe,"STRONG",{});var wFt=s(pbe);Fhr=r(wFt,"tapas"),wFt.forEach(t),Thr=r(XSe," \u2014 "),tQ=n(XSe,"A",{href:!0});var AFt=s(tQ);Mhr=r(AFt,"TFTapasForMaskedLM"),AFt.forEach(t),Ehr=r(XSe," (TAPAS model)"),XSe.forEach(t),Chr=i(le),s7=n(le,"LI",{});var zSe=s(s7);_be=n(zSe,"STRONG",{});var yFt=s(_be);whr=r(yFt,"transfo-xl"),yFt.forEach(t),Ahr=r(zSe," \u2014 "),aQ=n(zSe,"A",{href:!0});var LFt=s(aQ);yhr=r(LFt,"TFTransfoXLLMHeadModel"),LFt.forEach(t),Lhr=r(zSe," (Transformer-XL model)"),zSe.forEach(t),xhr=i(le),l7=n(le,"LI",{});var WSe=s(l7);ube=n(WSe,"STRONG",{});var xFt=s(ube);$hr=r(xFt,"vit_mae"),xFt.forEach(t),khr=r(WSe," \u2014 "),nQ=n(WSe,"A",{href:!0});var $Ft=s(nQ);Shr=r($Ft,"TFViTMAEForPreTraining"),$Ft.forEach(t),Rhr=r(WSe," (ViTMAE model)"),WSe.forEach(t),Phr=i(le),i7=n(le,"LI",{});var QSe=s(i7);bbe=n(QSe,"STRONG",{});var kFt=s(bbe);Bhr=r(kFt,"xlm"),kFt.forEach(t),Ihr=r(QSe," \u2014 "),sQ=n(QSe,"A",{href:!0});var SFt=s(sQ);qhr=r(SFt,"TFXLMWithLMHeadModel"),SFt.forEach(t),Nhr=r(QSe," (XLM model)"),QSe.forEach(t),jhr=i(le),d7=n(le,"LI",{});var HSe=s(d7);vbe=n(HSe,"STRONG",{});var RFt=s(vbe);Dhr=r(RFt,"xlm-roberta"),RFt.forEach(t),Ghr=r(HSe," \u2014 "),lQ=n(HSe,"A",{href:!0});var PFt=s(lQ);Ohr=r(PFt,"TFXLMRobertaForMaskedLM"),PFt.forEach(t),Vhr=r(HSe," (XLM-RoBERTa model)"),HSe.forEach(t),Xhr=i(le),c7=n(le,"LI",{});var USe=s(c7);Fbe=n(USe,"STRONG",{});var BFt=s(Fbe);zhr=r(BFt,"xlnet"),BFt.forEach(t),Whr=r(USe," \u2014 "),iQ=n(USe,"A",{href:!0});var IFt=s(iQ);Qhr=r(IFt,"TFXLNetLMHeadModel"),IFt.forEach(t),Hhr=r(USe," (XLNet model)"),USe.forEach(t),le.forEach(t),Uhr=i(_l),T(f7.$$.fragment,_l),_l.forEach(t),pl.forEach(t),LNe=i(f),Qd=n(f,"H2",{class:!0});var PDe=s(Qd);m7=n(PDe,"A",{id:!0,class:!0,href:!0});var qFt=s(m7);Tbe=n(qFt,"SPAN",{});var NFt=s(Tbe);T(cL.$$.fragment,NFt),NFt.forEach(t),qFt.forEach(t),Jhr=i(PDe),Mbe=n(PDe,"SPAN",{});var jFt=s(Mbe);Yhr=r(jFt,"TFAutoModelForCausalLM"),jFt.forEach(t),PDe.forEach(t),xNe=i(f),Zo=n(f,"DIV",{class:!0});var ul=s(Zo);T(fL.$$.fragment,ul),Khr=i(ul),Hd=n(ul,"P",{});var HZ=s(Hd);Zhr=r(HZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),dQ=n(HZ,"A",{href:!0});var DFt=s(dQ);epr=r(DFt,"from_pretrained()"),DFt.forEach(t),opr=r(HZ," class method or the "),cQ=n(HZ,"A",{href:!0});var GFt=s(cQ);rpr=r(GFt,"from_config()"),GFt.forEach(t),tpr=r(HZ,` class
method.`),HZ.forEach(t),apr=i(ul),mL=n(ul,"P",{});var BDe=s(mL);npr=r(BDe,"This class cannot be instantiated directly using "),Ebe=n(BDe,"CODE",{});var OFt=s(Ebe);spr=r(OFt,"__init__()"),OFt.forEach(t),lpr=r(BDe," (throws an error)."),BDe.forEach(t),ipr=i(ul),$t=n(ul,"DIV",{class:!0});var F6=s($t);T(gL.$$.fragment,F6),dpr=i(F6),Cbe=n(F6,"P",{});var VFt=s(Cbe);cpr=r(VFt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),VFt.forEach(t),fpr=i(F6),Ud=n(F6,"P",{});var UZ=s(Ud);mpr=r(UZ,`Note:
Loading a model from its configuration file does `),wbe=n(UZ,"STRONG",{});var XFt=s(wbe);gpr=r(XFt,"not"),XFt.forEach(t),hpr=r(UZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),fQ=n(UZ,"A",{href:!0});var zFt=s(fQ);ppr=r(zFt,"from_pretrained()"),zFt.forEach(t),_pr=r(UZ," to load the model weights."),UZ.forEach(t),upr=i(F6),T(g7.$$.fragment,F6),F6.forEach(t),bpr=i(ul),yr=n(ul,"DIV",{class:!0});var bl=s(yr);T(hL.$$.fragment,bl),vpr=i(bl),Abe=n(bl,"P",{});var WFt=s(Abe);Fpr=r(WFt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),WFt.forEach(t),Tpr=i(bl),en=n(bl,"P",{});var T6=s(en);Mpr=r(T6,"The model class to instantiate is selected based on the "),ybe=n(T6,"CODE",{});var QFt=s(ybe);Epr=r(QFt,"model_type"),QFt.forEach(t),Cpr=r(T6,` property of the config object (either
passed as an argument or loaded from `),Lbe=n(T6,"CODE",{});var HFt=s(Lbe);wpr=r(HFt,"pretrained_model_name_or_path"),HFt.forEach(t),Apr=r(T6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xbe=n(T6,"CODE",{});var UFt=s(xbe);ypr=r(UFt,"pretrained_model_name_or_path"),UFt.forEach(t),Lpr=r(T6,":"),T6.forEach(t),xpr=i(bl),Me=n(bl,"UL",{});var Ce=s(Me);h7=n(Ce,"LI",{});var JSe=s(h7);$be=n(JSe,"STRONG",{});var JFt=s($be);$pr=r(JFt,"bert"),JFt.forEach(t),kpr=r(JSe," \u2014 "),mQ=n(JSe,"A",{href:!0});var YFt=s(mQ);Spr=r(YFt,"TFBertLMHeadModel"),YFt.forEach(t),Rpr=r(JSe," (BERT model)"),JSe.forEach(t),Ppr=i(Ce),p7=n(Ce,"LI",{});var YSe=s(p7);kbe=n(YSe,"STRONG",{});var KFt=s(kbe);Bpr=r(KFt,"camembert"),KFt.forEach(t),Ipr=r(YSe," \u2014 "),gQ=n(YSe,"A",{href:!0});var ZFt=s(gQ);qpr=r(ZFt,"TFCamembertForCausalLM"),ZFt.forEach(t),Npr=r(YSe," (CamemBERT model)"),YSe.forEach(t),jpr=i(Ce),_7=n(Ce,"LI",{});var KSe=s(_7);Sbe=n(KSe,"STRONG",{});var e0t=s(Sbe);Dpr=r(e0t,"ctrl"),e0t.forEach(t),Gpr=r(KSe," \u2014 "),hQ=n(KSe,"A",{href:!0});var o0t=s(hQ);Opr=r(o0t,"TFCTRLLMHeadModel"),o0t.forEach(t),Vpr=r(KSe," (CTRL model)"),KSe.forEach(t),Xpr=i(Ce),u7=n(Ce,"LI",{});var ZSe=s(u7);Rbe=n(ZSe,"STRONG",{});var r0t=s(Rbe);zpr=r(r0t,"gpt2"),r0t.forEach(t),Wpr=r(ZSe," \u2014 "),pQ=n(ZSe,"A",{href:!0});var t0t=s(pQ);Qpr=r(t0t,"TFGPT2LMHeadModel"),t0t.forEach(t),Hpr=r(ZSe," (OpenAI GPT-2 model)"),ZSe.forEach(t),Upr=i(Ce),b7=n(Ce,"LI",{});var eRe=s(b7);Pbe=n(eRe,"STRONG",{});var a0t=s(Pbe);Jpr=r(a0t,"gptj"),a0t.forEach(t),Ypr=r(eRe," \u2014 "),_Q=n(eRe,"A",{href:!0});var n0t=s(_Q);Kpr=r(n0t,"TFGPTJForCausalLM"),n0t.forEach(t),Zpr=r(eRe," (GPT-J model)"),eRe.forEach(t),e_r=i(Ce),v7=n(Ce,"LI",{});var oRe=s(v7);Bbe=n(oRe,"STRONG",{});var s0t=s(Bbe);o_r=r(s0t,"openai-gpt"),s0t.forEach(t),r_r=r(oRe," \u2014 "),uQ=n(oRe,"A",{href:!0});var l0t=s(uQ);t_r=r(l0t,"TFOpenAIGPTLMHeadModel"),l0t.forEach(t),a_r=r(oRe," (OpenAI GPT model)"),oRe.forEach(t),n_r=i(Ce),F7=n(Ce,"LI",{});var rRe=s(F7);Ibe=n(rRe,"STRONG",{});var i0t=s(Ibe);s_r=r(i0t,"rembert"),i0t.forEach(t),l_r=r(rRe," \u2014 "),bQ=n(rRe,"A",{href:!0});var d0t=s(bQ);i_r=r(d0t,"TFRemBertForCausalLM"),d0t.forEach(t),d_r=r(rRe," (RemBERT model)"),rRe.forEach(t),c_r=i(Ce),T7=n(Ce,"LI",{});var tRe=s(T7);qbe=n(tRe,"STRONG",{});var c0t=s(qbe);f_r=r(c0t,"roberta"),c0t.forEach(t),m_r=r(tRe," \u2014 "),vQ=n(tRe,"A",{href:!0});var f0t=s(vQ);g_r=r(f0t,"TFRobertaForCausalLM"),f0t.forEach(t),h_r=r(tRe," (RoBERTa model)"),tRe.forEach(t),p_r=i(Ce),M7=n(Ce,"LI",{});var aRe=s(M7);Nbe=n(aRe,"STRONG",{});var m0t=s(Nbe);__r=r(m0t,"roformer"),m0t.forEach(t),u_r=r(aRe," \u2014 "),FQ=n(aRe,"A",{href:!0});var g0t=s(FQ);b_r=r(g0t,"TFRoFormerForCausalLM"),g0t.forEach(t),v_r=r(aRe," (RoFormer model)"),aRe.forEach(t),F_r=i(Ce),E7=n(Ce,"LI",{});var nRe=s(E7);jbe=n(nRe,"STRONG",{});var h0t=s(jbe);T_r=r(h0t,"transfo-xl"),h0t.forEach(t),M_r=r(nRe," \u2014 "),TQ=n(nRe,"A",{href:!0});var p0t=s(TQ);E_r=r(p0t,"TFTransfoXLLMHeadModel"),p0t.forEach(t),C_r=r(nRe," (Transformer-XL model)"),nRe.forEach(t),w_r=i(Ce),C7=n(Ce,"LI",{});var sRe=s(C7);Dbe=n(sRe,"STRONG",{});var _0t=s(Dbe);A_r=r(_0t,"xlm"),_0t.forEach(t),y_r=r(sRe," \u2014 "),MQ=n(sRe,"A",{href:!0});var u0t=s(MQ);L_r=r(u0t,"TFXLMWithLMHeadModel"),u0t.forEach(t),x_r=r(sRe," (XLM model)"),sRe.forEach(t),$_r=i(Ce),w7=n(Ce,"LI",{});var lRe=s(w7);Gbe=n(lRe,"STRONG",{});var b0t=s(Gbe);k_r=r(b0t,"xlnet"),b0t.forEach(t),S_r=r(lRe," \u2014 "),EQ=n(lRe,"A",{href:!0});var v0t=s(EQ);R_r=r(v0t,"TFXLNetLMHeadModel"),v0t.forEach(t),P_r=r(lRe," (XLNet model)"),lRe.forEach(t),Ce.forEach(t),B_r=i(bl),T(A7.$$.fragment,bl),bl.forEach(t),ul.forEach(t),$Ne=i(f),Jd=n(f,"H2",{class:!0});var IDe=s(Jd);y7=n(IDe,"A",{id:!0,class:!0,href:!0});var F0t=s(y7);Obe=n(F0t,"SPAN",{});var T0t=s(Obe);T(pL.$$.fragment,T0t),T0t.forEach(t),F0t.forEach(t),I_r=i(IDe),Vbe=n(IDe,"SPAN",{});var M0t=s(Vbe);q_r=r(M0t,"TFAutoModelForImageClassification"),M0t.forEach(t),IDe.forEach(t),kNe=i(f),er=n(f,"DIV",{class:!0});var vl=s(er);T(_L.$$.fragment,vl),N_r=i(vl),Yd=n(vl,"P",{});var JZ=s(Yd);j_r=r(JZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),CQ=n(JZ,"A",{href:!0});var E0t=s(CQ);D_r=r(E0t,"from_pretrained()"),E0t.forEach(t),G_r=r(JZ," class method or the "),wQ=n(JZ,"A",{href:!0});var C0t=s(wQ);O_r=r(C0t,"from_config()"),C0t.forEach(t),V_r=r(JZ,` class
method.`),JZ.forEach(t),X_r=i(vl),uL=n(vl,"P",{});var qDe=s(uL);z_r=r(qDe,"This class cannot be instantiated directly using "),Xbe=n(qDe,"CODE",{});var w0t=s(Xbe);W_r=r(w0t,"__init__()"),w0t.forEach(t),Q_r=r(qDe," (throws an error)."),qDe.forEach(t),H_r=i(vl),kt=n(vl,"DIV",{class:!0});var M6=s(kt);T(bL.$$.fragment,M6),U_r=i(M6),zbe=n(M6,"P",{});var A0t=s(zbe);J_r=r(A0t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),A0t.forEach(t),Y_r=i(M6),Kd=n(M6,"P",{});var YZ=s(Kd);K_r=r(YZ,`Note:
Loading a model from its configuration file does `),Wbe=n(YZ,"STRONG",{});var y0t=s(Wbe);Z_r=r(y0t,"not"),y0t.forEach(t),eur=r(YZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),AQ=n(YZ,"A",{href:!0});var L0t=s(AQ);our=r(L0t,"from_pretrained()"),L0t.forEach(t),rur=r(YZ," to load the model weights."),YZ.forEach(t),tur=i(M6),T(L7.$$.fragment,M6),M6.forEach(t),aur=i(vl),Lr=n(vl,"DIV",{class:!0});var Fl=s(Lr);T(vL.$$.fragment,Fl),nur=i(Fl),Qbe=n(Fl,"P",{});var x0t=s(Qbe);sur=r(x0t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),x0t.forEach(t),lur=i(Fl),on=n(Fl,"P",{});var E6=s(on);iur=r(E6,"The model class to instantiate is selected based on the "),Hbe=n(E6,"CODE",{});var $0t=s(Hbe);dur=r($0t,"model_type"),$0t.forEach(t),cur=r(E6,` property of the config object (either
passed as an argument or loaded from `),Ube=n(E6,"CODE",{});var k0t=s(Ube);fur=r(k0t,"pretrained_model_name_or_path"),k0t.forEach(t),mur=r(E6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jbe=n(E6,"CODE",{});var S0t=s(Jbe);gur=r(S0t,"pretrained_model_name_or_path"),S0t.forEach(t),hur=r(E6,":"),E6.forEach(t),pur=i(Fl),rn=n(Fl,"UL",{});var C6=s(rn);x7=n(C6,"LI",{});var iRe=s(x7);Ybe=n(iRe,"STRONG",{});var R0t=s(Ybe);_ur=r(R0t,"convnext"),R0t.forEach(t),uur=r(iRe," \u2014 "),yQ=n(iRe,"A",{href:!0});var P0t=s(yQ);bur=r(P0t,"TFConvNextForImageClassification"),P0t.forEach(t),vur=r(iRe," (ConvNext model)"),iRe.forEach(t),Fur=i(C6),$7=n(C6,"LI",{});var dRe=s($7);Kbe=n(dRe,"STRONG",{});var B0t=s(Kbe);Tur=r(B0t,"data2vec-vision"),B0t.forEach(t),Mur=r(dRe," \u2014 "),LQ=n(dRe,"A",{href:!0});var I0t=s(LQ);Eur=r(I0t,"TFData2VecVisionForImageClassification"),I0t.forEach(t),Cur=r(dRe," (Data2VecVision model)"),dRe.forEach(t),wur=i(C6),k7=n(C6,"LI",{});var cRe=s(k7);Zbe=n(cRe,"STRONG",{});var q0t=s(Zbe);Aur=r(q0t,"swin"),q0t.forEach(t),yur=r(cRe," \u2014 "),xQ=n(cRe,"A",{href:!0});var N0t=s(xQ);Lur=r(N0t,"TFSwinForImageClassification"),N0t.forEach(t),xur=r(cRe," (Swin model)"),cRe.forEach(t),$ur=i(C6),S7=n(C6,"LI",{});var fRe=s(S7);e5e=n(fRe,"STRONG",{});var j0t=s(e5e);kur=r(j0t,"vit"),j0t.forEach(t),Sur=r(fRe," \u2014 "),$Q=n(fRe,"A",{href:!0});var D0t=s($Q);Rur=r(D0t,"TFViTForImageClassification"),D0t.forEach(t),Pur=r(fRe," (ViT model)"),fRe.forEach(t),C6.forEach(t),Bur=i(Fl),T(R7.$$.fragment,Fl),Fl.forEach(t),vl.forEach(t),SNe=i(f),Zd=n(f,"H2",{class:!0});var NDe=s(Zd);P7=n(NDe,"A",{id:!0,class:!0,href:!0});var G0t=s(P7);o5e=n(G0t,"SPAN",{});var O0t=s(o5e);T(FL.$$.fragment,O0t),O0t.forEach(t),G0t.forEach(t),Iur=i(NDe),r5e=n(NDe,"SPAN",{});var V0t=s(r5e);qur=r(V0t,"TFAutoModelForMaskedLM"),V0t.forEach(t),NDe.forEach(t),RNe=i(f),or=n(f,"DIV",{class:!0});var Tl=s(or);T(TL.$$.fragment,Tl),Nur=i(Tl),ec=n(Tl,"P",{});var KZ=s(ec);jur=r(KZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),kQ=n(KZ,"A",{href:!0});var X0t=s(kQ);Dur=r(X0t,"from_pretrained()"),X0t.forEach(t),Gur=r(KZ," class method or the "),SQ=n(KZ,"A",{href:!0});var z0t=s(SQ);Our=r(z0t,"from_config()"),z0t.forEach(t),Vur=r(KZ,` class
method.`),KZ.forEach(t),Xur=i(Tl),ML=n(Tl,"P",{});var jDe=s(ML);zur=r(jDe,"This class cannot be instantiated directly using "),t5e=n(jDe,"CODE",{});var W0t=s(t5e);Wur=r(W0t,"__init__()"),W0t.forEach(t),Qur=r(jDe," (throws an error)."),jDe.forEach(t),Hur=i(Tl),St=n(Tl,"DIV",{class:!0});var w6=s(St);T(EL.$$.fragment,w6),Uur=i(w6),a5e=n(w6,"P",{});var Q0t=s(a5e);Jur=r(Q0t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Q0t.forEach(t),Yur=i(w6),oc=n(w6,"P",{});var ZZ=s(oc);Kur=r(ZZ,`Note:
Loading a model from its configuration file does `),n5e=n(ZZ,"STRONG",{});var H0t=s(n5e);Zur=r(H0t,"not"),H0t.forEach(t),e2r=r(ZZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),RQ=n(ZZ,"A",{href:!0});var U0t=s(RQ);o2r=r(U0t,"from_pretrained()"),U0t.forEach(t),r2r=r(ZZ," to load the model weights."),ZZ.forEach(t),t2r=i(w6),T(B7.$$.fragment,w6),w6.forEach(t),a2r=i(Tl),xr=n(Tl,"DIV",{class:!0});var Ml=s(xr);T(CL.$$.fragment,Ml),n2r=i(Ml),s5e=n(Ml,"P",{});var J0t=s(s5e);s2r=r(J0t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),J0t.forEach(t),l2r=i(Ml),tn=n(Ml,"P",{});var A6=s(tn);i2r=r(A6,"The model class to instantiate is selected based on the "),l5e=n(A6,"CODE",{});var Y0t=s(l5e);d2r=r(Y0t,"model_type"),Y0t.forEach(t),c2r=r(A6,` property of the config object (either
passed as an argument or loaded from `),i5e=n(A6,"CODE",{});var K0t=s(i5e);f2r=r(K0t,"pretrained_model_name_or_path"),K0t.forEach(t),m2r=r(A6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d5e=n(A6,"CODE",{});var Z0t=s(d5e);g2r=r(Z0t,"pretrained_model_name_or_path"),Z0t.forEach(t),h2r=r(A6,":"),A6.forEach(t),p2r=i(Ml),ie=n(Ml,"UL",{});var fe=s(ie);I7=n(fe,"LI",{});var mRe=s(I7);c5e=n(mRe,"STRONG",{});var eTt=s(c5e);_2r=r(eTt,"albert"),eTt.forEach(t),u2r=r(mRe," \u2014 "),PQ=n(mRe,"A",{href:!0});var oTt=s(PQ);b2r=r(oTt,"TFAlbertForMaskedLM"),oTt.forEach(t),v2r=r(mRe," (ALBERT model)"),mRe.forEach(t),F2r=i(fe),q7=n(fe,"LI",{});var gRe=s(q7);f5e=n(gRe,"STRONG",{});var rTt=s(f5e);T2r=r(rTt,"bert"),rTt.forEach(t),M2r=r(gRe," \u2014 "),BQ=n(gRe,"A",{href:!0});var tTt=s(BQ);E2r=r(tTt,"TFBertForMaskedLM"),tTt.forEach(t),C2r=r(gRe," (BERT model)"),gRe.forEach(t),w2r=i(fe),N7=n(fe,"LI",{});var hRe=s(N7);m5e=n(hRe,"STRONG",{});var aTt=s(m5e);A2r=r(aTt,"camembert"),aTt.forEach(t),y2r=r(hRe," \u2014 "),IQ=n(hRe,"A",{href:!0});var nTt=s(IQ);L2r=r(nTt,"TFCamembertForMaskedLM"),nTt.forEach(t),x2r=r(hRe," (CamemBERT model)"),hRe.forEach(t),$2r=i(fe),j7=n(fe,"LI",{});var pRe=s(j7);g5e=n(pRe,"STRONG",{});var sTt=s(g5e);k2r=r(sTt,"convbert"),sTt.forEach(t),S2r=r(pRe," \u2014 "),qQ=n(pRe,"A",{href:!0});var lTt=s(qQ);R2r=r(lTt,"TFConvBertForMaskedLM"),lTt.forEach(t),P2r=r(pRe," (ConvBERT model)"),pRe.forEach(t),B2r=i(fe),D7=n(fe,"LI",{});var _Re=s(D7);h5e=n(_Re,"STRONG",{});var iTt=s(h5e);I2r=r(iTt,"deberta"),iTt.forEach(t),q2r=r(_Re," \u2014 "),NQ=n(_Re,"A",{href:!0});var dTt=s(NQ);N2r=r(dTt,"TFDebertaForMaskedLM"),dTt.forEach(t),j2r=r(_Re," (DeBERTa model)"),_Re.forEach(t),D2r=i(fe),G7=n(fe,"LI",{});var uRe=s(G7);p5e=n(uRe,"STRONG",{});var cTt=s(p5e);G2r=r(cTt,"deberta-v2"),cTt.forEach(t),O2r=r(uRe," \u2014 "),jQ=n(uRe,"A",{href:!0});var fTt=s(jQ);V2r=r(fTt,"TFDebertaV2ForMaskedLM"),fTt.forEach(t),X2r=r(uRe," (DeBERTa-v2 model)"),uRe.forEach(t),z2r=i(fe),O7=n(fe,"LI",{});var bRe=s(O7);_5e=n(bRe,"STRONG",{});var mTt=s(_5e);W2r=r(mTt,"distilbert"),mTt.forEach(t),Q2r=r(bRe," \u2014 "),DQ=n(bRe,"A",{href:!0});var gTt=s(DQ);H2r=r(gTt,"TFDistilBertForMaskedLM"),gTt.forEach(t),U2r=r(bRe," (DistilBERT model)"),bRe.forEach(t),J2r=i(fe),V7=n(fe,"LI",{});var vRe=s(V7);u5e=n(vRe,"STRONG",{});var hTt=s(u5e);Y2r=r(hTt,"electra"),hTt.forEach(t),K2r=r(vRe," \u2014 "),GQ=n(vRe,"A",{href:!0});var pTt=s(GQ);Z2r=r(pTt,"TFElectraForMaskedLM"),pTt.forEach(t),e1r=r(vRe," (ELECTRA model)"),vRe.forEach(t),o1r=i(fe),X7=n(fe,"LI",{});var FRe=s(X7);b5e=n(FRe,"STRONG",{});var _Tt=s(b5e);r1r=r(_Tt,"flaubert"),_Tt.forEach(t),t1r=r(FRe," \u2014 "),OQ=n(FRe,"A",{href:!0});var uTt=s(OQ);a1r=r(uTt,"TFFlaubertWithLMHeadModel"),uTt.forEach(t),n1r=r(FRe," (FlauBERT model)"),FRe.forEach(t),s1r=i(fe),z7=n(fe,"LI",{});var TRe=s(z7);v5e=n(TRe,"STRONG",{});var bTt=s(v5e);l1r=r(bTt,"funnel"),bTt.forEach(t),i1r=r(TRe," \u2014 "),VQ=n(TRe,"A",{href:!0});var vTt=s(VQ);d1r=r(vTt,"TFFunnelForMaskedLM"),vTt.forEach(t),c1r=r(TRe," (Funnel Transformer model)"),TRe.forEach(t),f1r=i(fe),W7=n(fe,"LI",{});var MRe=s(W7);F5e=n(MRe,"STRONG",{});var FTt=s(F5e);m1r=r(FTt,"layoutlm"),FTt.forEach(t),g1r=r(MRe," \u2014 "),XQ=n(MRe,"A",{href:!0});var TTt=s(XQ);h1r=r(TTt,"TFLayoutLMForMaskedLM"),TTt.forEach(t),p1r=r(MRe," (LayoutLM model)"),MRe.forEach(t),_1r=i(fe),Q7=n(fe,"LI",{});var ERe=s(Q7);T5e=n(ERe,"STRONG",{});var MTt=s(T5e);u1r=r(MTt,"longformer"),MTt.forEach(t),b1r=r(ERe," \u2014 "),zQ=n(ERe,"A",{href:!0});var ETt=s(zQ);v1r=r(ETt,"TFLongformerForMaskedLM"),ETt.forEach(t),F1r=r(ERe," (Longformer model)"),ERe.forEach(t),T1r=i(fe),H7=n(fe,"LI",{});var CRe=s(H7);M5e=n(CRe,"STRONG",{});var CTt=s(M5e);M1r=r(CTt,"mobilebert"),CTt.forEach(t),E1r=r(CRe," \u2014 "),WQ=n(CRe,"A",{href:!0});var wTt=s(WQ);C1r=r(wTt,"TFMobileBertForMaskedLM"),wTt.forEach(t),w1r=r(CRe," (MobileBERT model)"),CRe.forEach(t),A1r=i(fe),U7=n(fe,"LI",{});var wRe=s(U7);E5e=n(wRe,"STRONG",{});var ATt=s(E5e);y1r=r(ATt,"mpnet"),ATt.forEach(t),L1r=r(wRe," \u2014 "),QQ=n(wRe,"A",{href:!0});var yTt=s(QQ);x1r=r(yTt,"TFMPNetForMaskedLM"),yTt.forEach(t),$1r=r(wRe," (MPNet model)"),wRe.forEach(t),k1r=i(fe),J7=n(fe,"LI",{});var ARe=s(J7);C5e=n(ARe,"STRONG",{});var LTt=s(C5e);S1r=r(LTt,"rembert"),LTt.forEach(t),R1r=r(ARe," \u2014 "),HQ=n(ARe,"A",{href:!0});var xTt=s(HQ);P1r=r(xTt,"TFRemBertForMaskedLM"),xTt.forEach(t),B1r=r(ARe," (RemBERT model)"),ARe.forEach(t),I1r=i(fe),Y7=n(fe,"LI",{});var yRe=s(Y7);w5e=n(yRe,"STRONG",{});var $Tt=s(w5e);q1r=r($Tt,"roberta"),$Tt.forEach(t),N1r=r(yRe," \u2014 "),UQ=n(yRe,"A",{href:!0});var kTt=s(UQ);j1r=r(kTt,"TFRobertaForMaskedLM"),kTt.forEach(t),D1r=r(yRe," (RoBERTa model)"),yRe.forEach(t),G1r=i(fe),K7=n(fe,"LI",{});var LRe=s(K7);A5e=n(LRe,"STRONG",{});var STt=s(A5e);O1r=r(STt,"roformer"),STt.forEach(t),V1r=r(LRe," \u2014 "),JQ=n(LRe,"A",{href:!0});var RTt=s(JQ);X1r=r(RTt,"TFRoFormerForMaskedLM"),RTt.forEach(t),z1r=r(LRe," (RoFormer model)"),LRe.forEach(t),W1r=i(fe),Z7=n(fe,"LI",{});var xRe=s(Z7);y5e=n(xRe,"STRONG",{});var PTt=s(y5e);Q1r=r(PTt,"tapas"),PTt.forEach(t),H1r=r(xRe," \u2014 "),YQ=n(xRe,"A",{href:!0});var BTt=s(YQ);U1r=r(BTt,"TFTapasForMaskedLM"),BTt.forEach(t),J1r=r(xRe," (TAPAS model)"),xRe.forEach(t),Y1r=i(fe),eM=n(fe,"LI",{});var $Re=s(eM);L5e=n($Re,"STRONG",{});var ITt=s(L5e);K1r=r(ITt,"xlm"),ITt.forEach(t),Z1r=r($Re," \u2014 "),KQ=n($Re,"A",{href:!0});var qTt=s(KQ);ebr=r(qTt,"TFXLMWithLMHeadModel"),qTt.forEach(t),obr=r($Re," (XLM model)"),$Re.forEach(t),rbr=i(fe),oM=n(fe,"LI",{});var kRe=s(oM);x5e=n(kRe,"STRONG",{});var NTt=s(x5e);tbr=r(NTt,"xlm-roberta"),NTt.forEach(t),abr=r(kRe," \u2014 "),ZQ=n(kRe,"A",{href:!0});var jTt=s(ZQ);nbr=r(jTt,"TFXLMRobertaForMaskedLM"),jTt.forEach(t),sbr=r(kRe," (XLM-RoBERTa model)"),kRe.forEach(t),fe.forEach(t),lbr=i(Ml),T(rM.$$.fragment,Ml),Ml.forEach(t),Tl.forEach(t),PNe=i(f),rc=n(f,"H2",{class:!0});var DDe=s(rc);tM=n(DDe,"A",{id:!0,class:!0,href:!0});var DTt=s(tM);$5e=n(DTt,"SPAN",{});var GTt=s($5e);T(wL.$$.fragment,GTt),GTt.forEach(t),DTt.forEach(t),ibr=i(DDe),k5e=n(DDe,"SPAN",{});var OTt=s(k5e);dbr=r(OTt,"TFAutoModelForSeq2SeqLM"),OTt.forEach(t),DDe.forEach(t),BNe=i(f),rr=n(f,"DIV",{class:!0});var El=s(rr);T(AL.$$.fragment,El),cbr=i(El),tc=n(El,"P",{});var eee=s(tc);fbr=r(eee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),eH=n(eee,"A",{href:!0});var VTt=s(eH);mbr=r(VTt,"from_pretrained()"),VTt.forEach(t),gbr=r(eee," class method or the "),oH=n(eee,"A",{href:!0});var XTt=s(oH);hbr=r(XTt,"from_config()"),XTt.forEach(t),pbr=r(eee,` class
method.`),eee.forEach(t),_br=i(El),yL=n(El,"P",{});var GDe=s(yL);ubr=r(GDe,"This class cannot be instantiated directly using "),S5e=n(GDe,"CODE",{});var zTt=s(S5e);bbr=r(zTt,"__init__()"),zTt.forEach(t),vbr=r(GDe," (throws an error)."),GDe.forEach(t),Fbr=i(El),Rt=n(El,"DIV",{class:!0});var y6=s(Rt);T(LL.$$.fragment,y6),Tbr=i(y6),R5e=n(y6,"P",{});var WTt=s(R5e);Mbr=r(WTt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),WTt.forEach(t),Ebr=i(y6),ac=n(y6,"P",{});var oee=s(ac);Cbr=r(oee,`Note:
Loading a model from its configuration file does `),P5e=n(oee,"STRONG",{});var QTt=s(P5e);wbr=r(QTt,"not"),QTt.forEach(t),Abr=r(oee,` load the model weights. It only affects the
model\u2019s configuration. Use `),rH=n(oee,"A",{href:!0});var HTt=s(rH);ybr=r(HTt,"from_pretrained()"),HTt.forEach(t),Lbr=r(oee," to load the model weights."),oee.forEach(t),xbr=i(y6),T(aM.$$.fragment,y6),y6.forEach(t),$br=i(El),$r=n(El,"DIV",{class:!0});var Cl=s($r);T(xL.$$.fragment,Cl),kbr=i(Cl),B5e=n(Cl,"P",{});var UTt=s(B5e);Sbr=r(UTt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),UTt.forEach(t),Rbr=i(Cl),an=n(Cl,"P",{});var L6=s(an);Pbr=r(L6,"The model class to instantiate is selected based on the "),I5e=n(L6,"CODE",{});var JTt=s(I5e);Bbr=r(JTt,"model_type"),JTt.forEach(t),Ibr=r(L6,` property of the config object (either
passed as an argument or loaded from `),q5e=n(L6,"CODE",{});var YTt=s(q5e);qbr=r(YTt,"pretrained_model_name_or_path"),YTt.forEach(t),Nbr=r(L6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N5e=n(L6,"CODE",{});var KTt=s(N5e);jbr=r(KTt,"pretrained_model_name_or_path"),KTt.forEach(t),Dbr=r(L6,":"),L6.forEach(t),Gbr=i(Cl),ye=n(Cl,"UL",{});var Be=s(ye);nM=n(Be,"LI",{});var SRe=s(nM);j5e=n(SRe,"STRONG",{});var ZTt=s(j5e);Obr=r(ZTt,"bart"),ZTt.forEach(t),Vbr=r(SRe," \u2014 "),tH=n(SRe,"A",{href:!0});var e7t=s(tH);Xbr=r(e7t,"TFBartForConditionalGeneration"),e7t.forEach(t),zbr=r(SRe," (BART model)"),SRe.forEach(t),Wbr=i(Be),sM=n(Be,"LI",{});var RRe=s(sM);D5e=n(RRe,"STRONG",{});var o7t=s(D5e);Qbr=r(o7t,"blenderbot"),o7t.forEach(t),Hbr=r(RRe," \u2014 "),aH=n(RRe,"A",{href:!0});var r7t=s(aH);Ubr=r(r7t,"TFBlenderbotForConditionalGeneration"),r7t.forEach(t),Jbr=r(RRe," (Blenderbot model)"),RRe.forEach(t),Ybr=i(Be),lM=n(Be,"LI",{});var PRe=s(lM);G5e=n(PRe,"STRONG",{});var t7t=s(G5e);Kbr=r(t7t,"blenderbot-small"),t7t.forEach(t),Zbr=r(PRe," \u2014 "),nH=n(PRe,"A",{href:!0});var a7t=s(nH);e5r=r(a7t,"TFBlenderbotSmallForConditionalGeneration"),a7t.forEach(t),o5r=r(PRe," (BlenderbotSmall model)"),PRe.forEach(t),r5r=i(Be),iM=n(Be,"LI",{});var BRe=s(iM);O5e=n(BRe,"STRONG",{});var n7t=s(O5e);t5r=r(n7t,"encoder-decoder"),n7t.forEach(t),a5r=r(BRe," \u2014 "),sH=n(BRe,"A",{href:!0});var s7t=s(sH);n5r=r(s7t,"TFEncoderDecoderModel"),s7t.forEach(t),s5r=r(BRe," (Encoder decoder model)"),BRe.forEach(t),l5r=i(Be),dM=n(Be,"LI",{});var IRe=s(dM);V5e=n(IRe,"STRONG",{});var l7t=s(V5e);i5r=r(l7t,"led"),l7t.forEach(t),d5r=r(IRe," \u2014 "),lH=n(IRe,"A",{href:!0});var i7t=s(lH);c5r=r(i7t,"TFLEDForConditionalGeneration"),i7t.forEach(t),f5r=r(IRe," (LED model)"),IRe.forEach(t),m5r=i(Be),cM=n(Be,"LI",{});var qRe=s(cM);X5e=n(qRe,"STRONG",{});var d7t=s(X5e);g5r=r(d7t,"marian"),d7t.forEach(t),h5r=r(qRe," \u2014 "),iH=n(qRe,"A",{href:!0});var c7t=s(iH);p5r=r(c7t,"TFMarianMTModel"),c7t.forEach(t),_5r=r(qRe," (Marian model)"),qRe.forEach(t),u5r=i(Be),fM=n(Be,"LI",{});var NRe=s(fM);z5e=n(NRe,"STRONG",{});var f7t=s(z5e);b5r=r(f7t,"mbart"),f7t.forEach(t),v5r=r(NRe," \u2014 "),dH=n(NRe,"A",{href:!0});var m7t=s(dH);F5r=r(m7t,"TFMBartForConditionalGeneration"),m7t.forEach(t),T5r=r(NRe," (mBART model)"),NRe.forEach(t),M5r=i(Be),mM=n(Be,"LI",{});var jRe=s(mM);W5e=n(jRe,"STRONG",{});var g7t=s(W5e);E5r=r(g7t,"mt5"),g7t.forEach(t),C5r=r(jRe," \u2014 "),cH=n(jRe,"A",{href:!0});var h7t=s(cH);w5r=r(h7t,"TFMT5ForConditionalGeneration"),h7t.forEach(t),A5r=r(jRe," (mT5 model)"),jRe.forEach(t),y5r=i(Be),gM=n(Be,"LI",{});var DRe=s(gM);Q5e=n(DRe,"STRONG",{});var p7t=s(Q5e);L5r=r(p7t,"pegasus"),p7t.forEach(t),x5r=r(DRe," \u2014 "),fH=n(DRe,"A",{href:!0});var _7t=s(fH);$5r=r(_7t,"TFPegasusForConditionalGeneration"),_7t.forEach(t),k5r=r(DRe," (Pegasus model)"),DRe.forEach(t),S5r=i(Be),hM=n(Be,"LI",{});var GRe=s(hM);H5e=n(GRe,"STRONG",{});var u7t=s(H5e);R5r=r(u7t,"t5"),u7t.forEach(t),P5r=r(GRe," \u2014 "),mH=n(GRe,"A",{href:!0});var b7t=s(mH);B5r=r(b7t,"TFT5ForConditionalGeneration"),b7t.forEach(t),I5r=r(GRe," (T5 model)"),GRe.forEach(t),Be.forEach(t),q5r=i(Cl),T(pM.$$.fragment,Cl),Cl.forEach(t),El.forEach(t),INe=i(f),nc=n(f,"H2",{class:!0});var ODe=s(nc);_M=n(ODe,"A",{id:!0,class:!0,href:!0});var v7t=s(_M);U5e=n(v7t,"SPAN",{});var F7t=s(U5e);T($L.$$.fragment,F7t),F7t.forEach(t),v7t.forEach(t),N5r=i(ODe),J5e=n(ODe,"SPAN",{});var T7t=s(J5e);j5r=r(T7t,"TFAutoModelForSequenceClassification"),T7t.forEach(t),ODe.forEach(t),qNe=i(f),tr=n(f,"DIV",{class:!0});var wl=s(tr);T(kL.$$.fragment,wl),D5r=i(wl),sc=n(wl,"P",{});var ree=s(sc);G5r=r(ree,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),gH=n(ree,"A",{href:!0});var M7t=s(gH);O5r=r(M7t,"from_pretrained()"),M7t.forEach(t),V5r=r(ree," class method or the "),hH=n(ree,"A",{href:!0});var E7t=s(hH);X5r=r(E7t,"from_config()"),E7t.forEach(t),z5r=r(ree,` class
method.`),ree.forEach(t),W5r=i(wl),SL=n(wl,"P",{});var VDe=s(SL);Q5r=r(VDe,"This class cannot be instantiated directly using "),Y5e=n(VDe,"CODE",{});var C7t=s(Y5e);H5r=r(C7t,"__init__()"),C7t.forEach(t),U5r=r(VDe," (throws an error)."),VDe.forEach(t),J5r=i(wl),Pt=n(wl,"DIV",{class:!0});var x6=s(Pt);T(RL.$$.fragment,x6),Y5r=i(x6),K5e=n(x6,"P",{});var w7t=s(K5e);K5r=r(w7t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),w7t.forEach(t),Z5r=i(x6),lc=n(x6,"P",{});var tee=s(lc);evr=r(tee,`Note:
Loading a model from its configuration file does `),Z5e=n(tee,"STRONG",{});var A7t=s(Z5e);ovr=r(A7t,"not"),A7t.forEach(t),rvr=r(tee,` load the model weights. It only affects the
model\u2019s configuration. Use `),pH=n(tee,"A",{href:!0});var y7t=s(pH);tvr=r(y7t,"from_pretrained()"),y7t.forEach(t),avr=r(tee," to load the model weights."),tee.forEach(t),nvr=i(x6),T(uM.$$.fragment,x6),x6.forEach(t),svr=i(wl),kr=n(wl,"DIV",{class:!0});var Al=s(kr);T(PL.$$.fragment,Al),lvr=i(Al),eve=n(Al,"P",{});var L7t=s(eve);ivr=r(L7t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),L7t.forEach(t),dvr=i(Al),nn=n(Al,"P",{});var $6=s(nn);cvr=r($6,"The model class to instantiate is selected based on the "),ove=n($6,"CODE",{});var x7t=s(ove);fvr=r(x7t,"model_type"),x7t.forEach(t),mvr=r($6,` property of the config object (either
passed as an argument or loaded from `),rve=n($6,"CODE",{});var $7t=s(rve);gvr=r($7t,"pretrained_model_name_or_path"),$7t.forEach(t),hvr=r($6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tve=n($6,"CODE",{});var k7t=s(tve);pvr=r(k7t,"pretrained_model_name_or_path"),k7t.forEach(t),_vr=r($6,":"),$6.forEach(t),uvr=i(Al),oe=n(Al,"UL",{});var ae=s(oe);bM=n(ae,"LI",{});var ORe=s(bM);ave=n(ORe,"STRONG",{});var S7t=s(ave);bvr=r(S7t,"albert"),S7t.forEach(t),vvr=r(ORe," \u2014 "),_H=n(ORe,"A",{href:!0});var R7t=s(_H);Fvr=r(R7t,"TFAlbertForSequenceClassification"),R7t.forEach(t),Tvr=r(ORe," (ALBERT model)"),ORe.forEach(t),Mvr=i(ae),vM=n(ae,"LI",{});var VRe=s(vM);nve=n(VRe,"STRONG",{});var P7t=s(nve);Evr=r(P7t,"bert"),P7t.forEach(t),Cvr=r(VRe," \u2014 "),uH=n(VRe,"A",{href:!0});var B7t=s(uH);wvr=r(B7t,"TFBertForSequenceClassification"),B7t.forEach(t),Avr=r(VRe," (BERT model)"),VRe.forEach(t),yvr=i(ae),FM=n(ae,"LI",{});var XRe=s(FM);sve=n(XRe,"STRONG",{});var I7t=s(sve);Lvr=r(I7t,"camembert"),I7t.forEach(t),xvr=r(XRe," \u2014 "),bH=n(XRe,"A",{href:!0});var q7t=s(bH);$vr=r(q7t,"TFCamembertForSequenceClassification"),q7t.forEach(t),kvr=r(XRe," (CamemBERT model)"),XRe.forEach(t),Svr=i(ae),TM=n(ae,"LI",{});var zRe=s(TM);lve=n(zRe,"STRONG",{});var N7t=s(lve);Rvr=r(N7t,"convbert"),N7t.forEach(t),Pvr=r(zRe," \u2014 "),vH=n(zRe,"A",{href:!0});var j7t=s(vH);Bvr=r(j7t,"TFConvBertForSequenceClassification"),j7t.forEach(t),Ivr=r(zRe," (ConvBERT model)"),zRe.forEach(t),qvr=i(ae),MM=n(ae,"LI",{});var WRe=s(MM);ive=n(WRe,"STRONG",{});var D7t=s(ive);Nvr=r(D7t,"ctrl"),D7t.forEach(t),jvr=r(WRe," \u2014 "),FH=n(WRe,"A",{href:!0});var G7t=s(FH);Dvr=r(G7t,"TFCTRLForSequenceClassification"),G7t.forEach(t),Gvr=r(WRe," (CTRL model)"),WRe.forEach(t),Ovr=i(ae),EM=n(ae,"LI",{});var QRe=s(EM);dve=n(QRe,"STRONG",{});var O7t=s(dve);Vvr=r(O7t,"deberta"),O7t.forEach(t),Xvr=r(QRe," \u2014 "),TH=n(QRe,"A",{href:!0});var V7t=s(TH);zvr=r(V7t,"TFDebertaForSequenceClassification"),V7t.forEach(t),Wvr=r(QRe," (DeBERTa model)"),QRe.forEach(t),Qvr=i(ae),CM=n(ae,"LI",{});var HRe=s(CM);cve=n(HRe,"STRONG",{});var X7t=s(cve);Hvr=r(X7t,"deberta-v2"),X7t.forEach(t),Uvr=r(HRe," \u2014 "),MH=n(HRe,"A",{href:!0});var z7t=s(MH);Jvr=r(z7t,"TFDebertaV2ForSequenceClassification"),z7t.forEach(t),Yvr=r(HRe," (DeBERTa-v2 model)"),HRe.forEach(t),Kvr=i(ae),wM=n(ae,"LI",{});var URe=s(wM);fve=n(URe,"STRONG",{});var W7t=s(fve);Zvr=r(W7t,"distilbert"),W7t.forEach(t),eFr=r(URe," \u2014 "),EH=n(URe,"A",{href:!0});var Q7t=s(EH);oFr=r(Q7t,"TFDistilBertForSequenceClassification"),Q7t.forEach(t),rFr=r(URe," (DistilBERT model)"),URe.forEach(t),tFr=i(ae),AM=n(ae,"LI",{});var JRe=s(AM);mve=n(JRe,"STRONG",{});var H7t=s(mve);aFr=r(H7t,"electra"),H7t.forEach(t),nFr=r(JRe," \u2014 "),CH=n(JRe,"A",{href:!0});var U7t=s(CH);sFr=r(U7t,"TFElectraForSequenceClassification"),U7t.forEach(t),lFr=r(JRe," (ELECTRA model)"),JRe.forEach(t),iFr=i(ae),yM=n(ae,"LI",{});var YRe=s(yM);gve=n(YRe,"STRONG",{});var J7t=s(gve);dFr=r(J7t,"flaubert"),J7t.forEach(t),cFr=r(YRe," \u2014 "),wH=n(YRe,"A",{href:!0});var Y7t=s(wH);fFr=r(Y7t,"TFFlaubertForSequenceClassification"),Y7t.forEach(t),mFr=r(YRe," (FlauBERT model)"),YRe.forEach(t),gFr=i(ae),LM=n(ae,"LI",{});var KRe=s(LM);hve=n(KRe,"STRONG",{});var K7t=s(hve);hFr=r(K7t,"funnel"),K7t.forEach(t),pFr=r(KRe," \u2014 "),AH=n(KRe,"A",{href:!0});var Z7t=s(AH);_Fr=r(Z7t,"TFFunnelForSequenceClassification"),Z7t.forEach(t),uFr=r(KRe," (Funnel Transformer model)"),KRe.forEach(t),bFr=i(ae),xM=n(ae,"LI",{});var ZRe=s(xM);pve=n(ZRe,"STRONG",{});var eMt=s(pve);vFr=r(eMt,"gpt2"),eMt.forEach(t),FFr=r(ZRe," \u2014 "),yH=n(ZRe,"A",{href:!0});var oMt=s(yH);TFr=r(oMt,"TFGPT2ForSequenceClassification"),oMt.forEach(t),MFr=r(ZRe," (OpenAI GPT-2 model)"),ZRe.forEach(t),EFr=i(ae),$M=n(ae,"LI",{});var ePe=s($M);_ve=n(ePe,"STRONG",{});var rMt=s(_ve);CFr=r(rMt,"gptj"),rMt.forEach(t),wFr=r(ePe," \u2014 "),LH=n(ePe,"A",{href:!0});var tMt=s(LH);AFr=r(tMt,"TFGPTJForSequenceClassification"),tMt.forEach(t),yFr=r(ePe," (GPT-J model)"),ePe.forEach(t),LFr=i(ae),kM=n(ae,"LI",{});var oPe=s(kM);uve=n(oPe,"STRONG",{});var aMt=s(uve);xFr=r(aMt,"layoutlm"),aMt.forEach(t),$Fr=r(oPe," \u2014 "),xH=n(oPe,"A",{href:!0});var nMt=s(xH);kFr=r(nMt,"TFLayoutLMForSequenceClassification"),nMt.forEach(t),SFr=r(oPe," (LayoutLM model)"),oPe.forEach(t),RFr=i(ae),SM=n(ae,"LI",{});var rPe=s(SM);bve=n(rPe,"STRONG",{});var sMt=s(bve);PFr=r(sMt,"longformer"),sMt.forEach(t),BFr=r(rPe," \u2014 "),$H=n(rPe,"A",{href:!0});var lMt=s($H);IFr=r(lMt,"TFLongformerForSequenceClassification"),lMt.forEach(t),qFr=r(rPe," (Longformer model)"),rPe.forEach(t),NFr=i(ae),RM=n(ae,"LI",{});var tPe=s(RM);vve=n(tPe,"STRONG",{});var iMt=s(vve);jFr=r(iMt,"mobilebert"),iMt.forEach(t),DFr=r(tPe," \u2014 "),kH=n(tPe,"A",{href:!0});var dMt=s(kH);GFr=r(dMt,"TFMobileBertForSequenceClassification"),dMt.forEach(t),OFr=r(tPe," (MobileBERT model)"),tPe.forEach(t),VFr=i(ae),PM=n(ae,"LI",{});var aPe=s(PM);Fve=n(aPe,"STRONG",{});var cMt=s(Fve);XFr=r(cMt,"mpnet"),cMt.forEach(t),zFr=r(aPe," \u2014 "),SH=n(aPe,"A",{href:!0});var fMt=s(SH);WFr=r(fMt,"TFMPNetForSequenceClassification"),fMt.forEach(t),QFr=r(aPe," (MPNet model)"),aPe.forEach(t),HFr=i(ae),BM=n(ae,"LI",{});var nPe=s(BM);Tve=n(nPe,"STRONG",{});var mMt=s(Tve);UFr=r(mMt,"openai-gpt"),mMt.forEach(t),JFr=r(nPe," \u2014 "),RH=n(nPe,"A",{href:!0});var gMt=s(RH);YFr=r(gMt,"TFOpenAIGPTForSequenceClassification"),gMt.forEach(t),KFr=r(nPe," (OpenAI GPT model)"),nPe.forEach(t),ZFr=i(ae),IM=n(ae,"LI",{});var sPe=s(IM);Mve=n(sPe,"STRONG",{});var hMt=s(Mve);e0r=r(hMt,"rembert"),hMt.forEach(t),o0r=r(sPe," \u2014 "),PH=n(sPe,"A",{href:!0});var pMt=s(PH);r0r=r(pMt,"TFRemBertForSequenceClassification"),pMt.forEach(t),t0r=r(sPe," (RemBERT model)"),sPe.forEach(t),a0r=i(ae),qM=n(ae,"LI",{});var lPe=s(qM);Eve=n(lPe,"STRONG",{});var _Mt=s(Eve);n0r=r(_Mt,"roberta"),_Mt.forEach(t),s0r=r(lPe," \u2014 "),BH=n(lPe,"A",{href:!0});var uMt=s(BH);l0r=r(uMt,"TFRobertaForSequenceClassification"),uMt.forEach(t),i0r=r(lPe," (RoBERTa model)"),lPe.forEach(t),d0r=i(ae),NM=n(ae,"LI",{});var iPe=s(NM);Cve=n(iPe,"STRONG",{});var bMt=s(Cve);c0r=r(bMt,"roformer"),bMt.forEach(t),f0r=r(iPe," \u2014 "),IH=n(iPe,"A",{href:!0});var vMt=s(IH);m0r=r(vMt,"TFRoFormerForSequenceClassification"),vMt.forEach(t),g0r=r(iPe," (RoFormer model)"),iPe.forEach(t),h0r=i(ae),jM=n(ae,"LI",{});var dPe=s(jM);wve=n(dPe,"STRONG",{});var FMt=s(wve);p0r=r(FMt,"tapas"),FMt.forEach(t),_0r=r(dPe," \u2014 "),qH=n(dPe,"A",{href:!0});var TMt=s(qH);u0r=r(TMt,"TFTapasForSequenceClassification"),TMt.forEach(t),b0r=r(dPe," (TAPAS model)"),dPe.forEach(t),v0r=i(ae),DM=n(ae,"LI",{});var cPe=s(DM);Ave=n(cPe,"STRONG",{});var MMt=s(Ave);F0r=r(MMt,"transfo-xl"),MMt.forEach(t),T0r=r(cPe," \u2014 "),NH=n(cPe,"A",{href:!0});var EMt=s(NH);M0r=r(EMt,"TFTransfoXLForSequenceClassification"),EMt.forEach(t),E0r=r(cPe," (Transformer-XL model)"),cPe.forEach(t),C0r=i(ae),GM=n(ae,"LI",{});var fPe=s(GM);yve=n(fPe,"STRONG",{});var CMt=s(yve);w0r=r(CMt,"xlm"),CMt.forEach(t),A0r=r(fPe," \u2014 "),jH=n(fPe,"A",{href:!0});var wMt=s(jH);y0r=r(wMt,"TFXLMForSequenceClassification"),wMt.forEach(t),L0r=r(fPe," (XLM model)"),fPe.forEach(t),x0r=i(ae),OM=n(ae,"LI",{});var mPe=s(OM);Lve=n(mPe,"STRONG",{});var AMt=s(Lve);$0r=r(AMt,"xlm-roberta"),AMt.forEach(t),k0r=r(mPe," \u2014 "),DH=n(mPe,"A",{href:!0});var yMt=s(DH);S0r=r(yMt,"TFXLMRobertaForSequenceClassification"),yMt.forEach(t),R0r=r(mPe," (XLM-RoBERTa model)"),mPe.forEach(t),P0r=i(ae),VM=n(ae,"LI",{});var gPe=s(VM);xve=n(gPe,"STRONG",{});var LMt=s(xve);B0r=r(LMt,"xlnet"),LMt.forEach(t),I0r=r(gPe," \u2014 "),GH=n(gPe,"A",{href:!0});var xMt=s(GH);q0r=r(xMt,"TFXLNetForSequenceClassification"),xMt.forEach(t),N0r=r(gPe," (XLNet model)"),gPe.forEach(t),ae.forEach(t),j0r=i(Al),T(XM.$$.fragment,Al),Al.forEach(t),wl.forEach(t),NNe=i(f),ic=n(f,"H2",{class:!0});var XDe=s(ic);zM=n(XDe,"A",{id:!0,class:!0,href:!0});var $Mt=s(zM);$ve=n($Mt,"SPAN",{});var kMt=s($ve);T(BL.$$.fragment,kMt),kMt.forEach(t),$Mt.forEach(t),D0r=i(XDe),kve=n(XDe,"SPAN",{});var SMt=s(kve);G0r=r(SMt,"TFAutoModelForMultipleChoice"),SMt.forEach(t),XDe.forEach(t),jNe=i(f),ar=n(f,"DIV",{class:!0});var yl=s(ar);T(IL.$$.fragment,yl),O0r=i(yl),dc=n(yl,"P",{});var aee=s(dc);V0r=r(aee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),OH=n(aee,"A",{href:!0});var RMt=s(OH);X0r=r(RMt,"from_pretrained()"),RMt.forEach(t),z0r=r(aee," class method or the "),VH=n(aee,"A",{href:!0});var PMt=s(VH);W0r=r(PMt,"from_config()"),PMt.forEach(t),Q0r=r(aee,` class
method.`),aee.forEach(t),H0r=i(yl),qL=n(yl,"P",{});var zDe=s(qL);U0r=r(zDe,"This class cannot be instantiated directly using "),Sve=n(zDe,"CODE",{});var BMt=s(Sve);J0r=r(BMt,"__init__()"),BMt.forEach(t),Y0r=r(zDe," (throws an error)."),zDe.forEach(t),K0r=i(yl),Bt=n(yl,"DIV",{class:!0});var k6=s(Bt);T(NL.$$.fragment,k6),Z0r=i(k6),Rve=n(k6,"P",{});var IMt=s(Rve);eTr=r(IMt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),IMt.forEach(t),oTr=i(k6),cc=n(k6,"P",{});var nee=s(cc);rTr=r(nee,`Note:
Loading a model from its configuration file does `),Pve=n(nee,"STRONG",{});var qMt=s(Pve);tTr=r(qMt,"not"),qMt.forEach(t),aTr=r(nee,` load the model weights. It only affects the
model\u2019s configuration. Use `),XH=n(nee,"A",{href:!0});var NMt=s(XH);nTr=r(NMt,"from_pretrained()"),NMt.forEach(t),sTr=r(nee," to load the model weights."),nee.forEach(t),lTr=i(k6),T(WM.$$.fragment,k6),k6.forEach(t),iTr=i(yl),Sr=n(yl,"DIV",{class:!0});var Ll=s(Sr);T(jL.$$.fragment,Ll),dTr=i(Ll),Bve=n(Ll,"P",{});var jMt=s(Bve);cTr=r(jMt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),jMt.forEach(t),fTr=i(Ll),sn=n(Ll,"P",{});var S6=s(sn);mTr=r(S6,"The model class to instantiate is selected based on the "),Ive=n(S6,"CODE",{});var DMt=s(Ive);gTr=r(DMt,"model_type"),DMt.forEach(t),hTr=r(S6,` property of the config object (either
passed as an argument or loaded from `),qve=n(S6,"CODE",{});var GMt=s(qve);pTr=r(GMt,"pretrained_model_name_or_path"),GMt.forEach(t),_Tr=r(S6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nve=n(S6,"CODE",{});var OMt=s(Nve);uTr=r(OMt,"pretrained_model_name_or_path"),OMt.forEach(t),bTr=r(S6,":"),S6.forEach(t),vTr=i(Ll),he=n(Ll,"UL",{});var ue=s(he);QM=n(ue,"LI",{});var hPe=s(QM);jve=n(hPe,"STRONG",{});var VMt=s(jve);FTr=r(VMt,"albert"),VMt.forEach(t),TTr=r(hPe," \u2014 "),zH=n(hPe,"A",{href:!0});var XMt=s(zH);MTr=r(XMt,"TFAlbertForMultipleChoice"),XMt.forEach(t),ETr=r(hPe," (ALBERT model)"),hPe.forEach(t),CTr=i(ue),HM=n(ue,"LI",{});var pPe=s(HM);Dve=n(pPe,"STRONG",{});var zMt=s(Dve);wTr=r(zMt,"bert"),zMt.forEach(t),ATr=r(pPe," \u2014 "),WH=n(pPe,"A",{href:!0});var WMt=s(WH);yTr=r(WMt,"TFBertForMultipleChoice"),WMt.forEach(t),LTr=r(pPe," (BERT model)"),pPe.forEach(t),xTr=i(ue),UM=n(ue,"LI",{});var _Pe=s(UM);Gve=n(_Pe,"STRONG",{});var QMt=s(Gve);$Tr=r(QMt,"camembert"),QMt.forEach(t),kTr=r(_Pe," \u2014 "),QH=n(_Pe,"A",{href:!0});var HMt=s(QH);STr=r(HMt,"TFCamembertForMultipleChoice"),HMt.forEach(t),RTr=r(_Pe," (CamemBERT model)"),_Pe.forEach(t),PTr=i(ue),JM=n(ue,"LI",{});var uPe=s(JM);Ove=n(uPe,"STRONG",{});var UMt=s(Ove);BTr=r(UMt,"convbert"),UMt.forEach(t),ITr=r(uPe," \u2014 "),HH=n(uPe,"A",{href:!0});var JMt=s(HH);qTr=r(JMt,"TFConvBertForMultipleChoice"),JMt.forEach(t),NTr=r(uPe," (ConvBERT model)"),uPe.forEach(t),jTr=i(ue),YM=n(ue,"LI",{});var bPe=s(YM);Vve=n(bPe,"STRONG",{});var YMt=s(Vve);DTr=r(YMt,"distilbert"),YMt.forEach(t),GTr=r(bPe," \u2014 "),UH=n(bPe,"A",{href:!0});var KMt=s(UH);OTr=r(KMt,"TFDistilBertForMultipleChoice"),KMt.forEach(t),VTr=r(bPe," (DistilBERT model)"),bPe.forEach(t),XTr=i(ue),KM=n(ue,"LI",{});var vPe=s(KM);Xve=n(vPe,"STRONG",{});var ZMt=s(Xve);zTr=r(ZMt,"electra"),ZMt.forEach(t),WTr=r(vPe," \u2014 "),JH=n(vPe,"A",{href:!0});var e4t=s(JH);QTr=r(e4t,"TFElectraForMultipleChoice"),e4t.forEach(t),HTr=r(vPe," (ELECTRA model)"),vPe.forEach(t),UTr=i(ue),ZM=n(ue,"LI",{});var FPe=s(ZM);zve=n(FPe,"STRONG",{});var o4t=s(zve);JTr=r(o4t,"flaubert"),o4t.forEach(t),YTr=r(FPe," \u2014 "),YH=n(FPe,"A",{href:!0});var r4t=s(YH);KTr=r(r4t,"TFFlaubertForMultipleChoice"),r4t.forEach(t),ZTr=r(FPe," (FlauBERT model)"),FPe.forEach(t),e7r=i(ue),e4=n(ue,"LI",{});var TPe=s(e4);Wve=n(TPe,"STRONG",{});var t4t=s(Wve);o7r=r(t4t,"funnel"),t4t.forEach(t),r7r=r(TPe," \u2014 "),KH=n(TPe,"A",{href:!0});var a4t=s(KH);t7r=r(a4t,"TFFunnelForMultipleChoice"),a4t.forEach(t),a7r=r(TPe," (Funnel Transformer model)"),TPe.forEach(t),n7r=i(ue),o4=n(ue,"LI",{});var MPe=s(o4);Qve=n(MPe,"STRONG",{});var n4t=s(Qve);s7r=r(n4t,"longformer"),n4t.forEach(t),l7r=r(MPe," \u2014 "),ZH=n(MPe,"A",{href:!0});var s4t=s(ZH);i7r=r(s4t,"TFLongformerForMultipleChoice"),s4t.forEach(t),d7r=r(MPe," (Longformer model)"),MPe.forEach(t),c7r=i(ue),r4=n(ue,"LI",{});var EPe=s(r4);Hve=n(EPe,"STRONG",{});var l4t=s(Hve);f7r=r(l4t,"mobilebert"),l4t.forEach(t),m7r=r(EPe," \u2014 "),eU=n(EPe,"A",{href:!0});var i4t=s(eU);g7r=r(i4t,"TFMobileBertForMultipleChoice"),i4t.forEach(t),h7r=r(EPe," (MobileBERT model)"),EPe.forEach(t),p7r=i(ue),t4=n(ue,"LI",{});var CPe=s(t4);Uve=n(CPe,"STRONG",{});var d4t=s(Uve);_7r=r(d4t,"mpnet"),d4t.forEach(t),u7r=r(CPe," \u2014 "),oU=n(CPe,"A",{href:!0});var c4t=s(oU);b7r=r(c4t,"TFMPNetForMultipleChoice"),c4t.forEach(t),v7r=r(CPe," (MPNet model)"),CPe.forEach(t),F7r=i(ue),a4=n(ue,"LI",{});var wPe=s(a4);Jve=n(wPe,"STRONG",{});var f4t=s(Jve);T7r=r(f4t,"rembert"),f4t.forEach(t),M7r=r(wPe," \u2014 "),rU=n(wPe,"A",{href:!0});var m4t=s(rU);E7r=r(m4t,"TFRemBertForMultipleChoice"),m4t.forEach(t),C7r=r(wPe," (RemBERT model)"),wPe.forEach(t),w7r=i(ue),n4=n(ue,"LI",{});var APe=s(n4);Yve=n(APe,"STRONG",{});var g4t=s(Yve);A7r=r(g4t,"roberta"),g4t.forEach(t),y7r=r(APe," \u2014 "),tU=n(APe,"A",{href:!0});var h4t=s(tU);L7r=r(h4t,"TFRobertaForMultipleChoice"),h4t.forEach(t),x7r=r(APe," (RoBERTa model)"),APe.forEach(t),$7r=i(ue),s4=n(ue,"LI",{});var yPe=s(s4);Kve=n(yPe,"STRONG",{});var p4t=s(Kve);k7r=r(p4t,"roformer"),p4t.forEach(t),S7r=r(yPe," \u2014 "),aU=n(yPe,"A",{href:!0});var _4t=s(aU);R7r=r(_4t,"TFRoFormerForMultipleChoice"),_4t.forEach(t),P7r=r(yPe," (RoFormer model)"),yPe.forEach(t),B7r=i(ue),l4=n(ue,"LI",{});var LPe=s(l4);Zve=n(LPe,"STRONG",{});var u4t=s(Zve);I7r=r(u4t,"xlm"),u4t.forEach(t),q7r=r(LPe," \u2014 "),nU=n(LPe,"A",{href:!0});var b4t=s(nU);N7r=r(b4t,"TFXLMForMultipleChoice"),b4t.forEach(t),j7r=r(LPe," (XLM model)"),LPe.forEach(t),D7r=i(ue),i4=n(ue,"LI",{});var xPe=s(i4);eFe=n(xPe,"STRONG",{});var v4t=s(eFe);G7r=r(v4t,"xlm-roberta"),v4t.forEach(t),O7r=r(xPe," \u2014 "),sU=n(xPe,"A",{href:!0});var F4t=s(sU);V7r=r(F4t,"TFXLMRobertaForMultipleChoice"),F4t.forEach(t),X7r=r(xPe," (XLM-RoBERTa model)"),xPe.forEach(t),z7r=i(ue),d4=n(ue,"LI",{});var $Pe=s(d4);oFe=n($Pe,"STRONG",{});var T4t=s(oFe);W7r=r(T4t,"xlnet"),T4t.forEach(t),Q7r=r($Pe," \u2014 "),lU=n($Pe,"A",{href:!0});var M4t=s(lU);H7r=r(M4t,"TFXLNetForMultipleChoice"),M4t.forEach(t),U7r=r($Pe," (XLNet model)"),$Pe.forEach(t),ue.forEach(t),J7r=i(Ll),T(c4.$$.fragment,Ll),Ll.forEach(t),yl.forEach(t),DNe=i(f),fc=n(f,"H2",{class:!0});var WDe=s(fc);f4=n(WDe,"A",{id:!0,class:!0,href:!0});var E4t=s(f4);rFe=n(E4t,"SPAN",{});var C4t=s(rFe);T(DL.$$.fragment,C4t),C4t.forEach(t),E4t.forEach(t),Y7r=i(WDe),tFe=n(WDe,"SPAN",{});var w4t=s(tFe);K7r=r(w4t,"TFAutoModelForNextSentencePrediction"),w4t.forEach(t),WDe.forEach(t),GNe=i(f),nr=n(f,"DIV",{class:!0});var xl=s(nr);T(GL.$$.fragment,xl),Z7r=i(xl),mc=n(xl,"P",{});var see=s(mc);eMr=r(see,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),iU=n(see,"A",{href:!0});var A4t=s(iU);oMr=r(A4t,"from_pretrained()"),A4t.forEach(t),rMr=r(see," class method or the "),dU=n(see,"A",{href:!0});var y4t=s(dU);tMr=r(y4t,"from_config()"),y4t.forEach(t),aMr=r(see,` class
method.`),see.forEach(t),nMr=i(xl),OL=n(xl,"P",{});var QDe=s(OL);sMr=r(QDe,"This class cannot be instantiated directly using "),aFe=n(QDe,"CODE",{});var L4t=s(aFe);lMr=r(L4t,"__init__()"),L4t.forEach(t),iMr=r(QDe," (throws an error)."),QDe.forEach(t),dMr=i(xl),It=n(xl,"DIV",{class:!0});var R6=s(It);T(VL.$$.fragment,R6),cMr=i(R6),nFe=n(R6,"P",{});var x4t=s(nFe);fMr=r(x4t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),x4t.forEach(t),mMr=i(R6),gc=n(R6,"P",{});var lee=s(gc);gMr=r(lee,`Note:
Loading a model from its configuration file does `),sFe=n(lee,"STRONG",{});var $4t=s(sFe);hMr=r($4t,"not"),$4t.forEach(t),pMr=r(lee,` load the model weights. It only affects the
model\u2019s configuration. Use `),cU=n(lee,"A",{href:!0});var k4t=s(cU);_Mr=r(k4t,"from_pretrained()"),k4t.forEach(t),uMr=r(lee," to load the model weights."),lee.forEach(t),bMr=i(R6),T(m4.$$.fragment,R6),R6.forEach(t),vMr=i(xl),Rr=n(xl,"DIV",{class:!0});var $l=s(Rr);T(XL.$$.fragment,$l),FMr=i($l),lFe=n($l,"P",{});var S4t=s(lFe);TMr=r(S4t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),S4t.forEach(t),MMr=i($l),ln=n($l,"P",{});var P6=s(ln);EMr=r(P6,"The model class to instantiate is selected based on the "),iFe=n(P6,"CODE",{});var R4t=s(iFe);CMr=r(R4t,"model_type"),R4t.forEach(t),wMr=r(P6,` property of the config object (either
passed as an argument or loaded from `),dFe=n(P6,"CODE",{});var P4t=s(dFe);AMr=r(P4t,"pretrained_model_name_or_path"),P4t.forEach(t),yMr=r(P6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cFe=n(P6,"CODE",{});var B4t=s(cFe);LMr=r(B4t,"pretrained_model_name_or_path"),B4t.forEach(t),xMr=r(P6,":"),P6.forEach(t),$Mr=i($l),zL=n($l,"UL",{});var HDe=s(zL);g4=n(HDe,"LI",{});var kPe=s(g4);fFe=n(kPe,"STRONG",{});var I4t=s(fFe);kMr=r(I4t,"bert"),I4t.forEach(t),SMr=r(kPe," \u2014 "),fU=n(kPe,"A",{href:!0});var q4t=s(fU);RMr=r(q4t,"TFBertForNextSentencePrediction"),q4t.forEach(t),PMr=r(kPe," (BERT model)"),kPe.forEach(t),BMr=i(HDe),h4=n(HDe,"LI",{});var SPe=s(h4);mFe=n(SPe,"STRONG",{});var N4t=s(mFe);IMr=r(N4t,"mobilebert"),N4t.forEach(t),qMr=r(SPe," \u2014 "),mU=n(SPe,"A",{href:!0});var j4t=s(mU);NMr=r(j4t,"TFMobileBertForNextSentencePrediction"),j4t.forEach(t),jMr=r(SPe," (MobileBERT model)"),SPe.forEach(t),HDe.forEach(t),DMr=i($l),T(p4.$$.fragment,$l),$l.forEach(t),xl.forEach(t),ONe=i(f),hc=n(f,"H2",{class:!0});var UDe=s(hc);_4=n(UDe,"A",{id:!0,class:!0,href:!0});var D4t=s(_4);gFe=n(D4t,"SPAN",{});var G4t=s(gFe);T(WL.$$.fragment,G4t),G4t.forEach(t),D4t.forEach(t),GMr=i(UDe),hFe=n(UDe,"SPAN",{});var O4t=s(hFe);OMr=r(O4t,"TFAutoModelForTableQuestionAnswering"),O4t.forEach(t),UDe.forEach(t),VNe=i(f),sr=n(f,"DIV",{class:!0});var kl=s(sr);T(QL.$$.fragment,kl),VMr=i(kl),pc=n(kl,"P",{});var iee=s(pc);XMr=r(iee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),gU=n(iee,"A",{href:!0});var V4t=s(gU);zMr=r(V4t,"from_pretrained()"),V4t.forEach(t),WMr=r(iee," class method or the "),hU=n(iee,"A",{href:!0});var X4t=s(hU);QMr=r(X4t,"from_config()"),X4t.forEach(t),HMr=r(iee,` class
method.`),iee.forEach(t),UMr=i(kl),HL=n(kl,"P",{});var JDe=s(HL);JMr=r(JDe,"This class cannot be instantiated directly using "),pFe=n(JDe,"CODE",{});var z4t=s(pFe);YMr=r(z4t,"__init__()"),z4t.forEach(t),KMr=r(JDe," (throws an error)."),JDe.forEach(t),ZMr=i(kl),qt=n(kl,"DIV",{class:!0});var B6=s(qt);T(UL.$$.fragment,B6),e4r=i(B6),_Fe=n(B6,"P",{});var W4t=s(_Fe);o4r=r(W4t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),W4t.forEach(t),r4r=i(B6),_c=n(B6,"P",{});var dee=s(_c);t4r=r(dee,`Note:
Loading a model from its configuration file does `),uFe=n(dee,"STRONG",{});var Q4t=s(uFe);a4r=r(Q4t,"not"),Q4t.forEach(t),n4r=r(dee,` load the model weights. It only affects the
model\u2019s configuration. Use `),pU=n(dee,"A",{href:!0});var H4t=s(pU);s4r=r(H4t,"from_pretrained()"),H4t.forEach(t),l4r=r(dee," to load the model weights."),dee.forEach(t),i4r=i(B6),T(u4.$$.fragment,B6),B6.forEach(t),d4r=i(kl),Pr=n(kl,"DIV",{class:!0});var Sl=s(Pr);T(JL.$$.fragment,Sl),c4r=i(Sl),bFe=n(Sl,"P",{});var U4t=s(bFe);f4r=r(U4t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),U4t.forEach(t),m4r=i(Sl),dn=n(Sl,"P",{});var I6=s(dn);g4r=r(I6,"The model class to instantiate is selected based on the "),vFe=n(I6,"CODE",{});var J4t=s(vFe);h4r=r(J4t,"model_type"),J4t.forEach(t),p4r=r(I6,` property of the config object (either
passed as an argument or loaded from `),FFe=n(I6,"CODE",{});var Y4t=s(FFe);_4r=r(Y4t,"pretrained_model_name_or_path"),Y4t.forEach(t),u4r=r(I6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),TFe=n(I6,"CODE",{});var K4t=s(TFe);b4r=r(K4t,"pretrained_model_name_or_path"),K4t.forEach(t),v4r=r(I6,":"),I6.forEach(t),F4r=i(Sl),MFe=n(Sl,"UL",{});var Z4t=s(MFe);b4=n(Z4t,"LI",{});var RPe=s(b4);EFe=n(RPe,"STRONG",{});var eEt=s(EFe);T4r=r(eEt,"tapas"),eEt.forEach(t),M4r=r(RPe," \u2014 "),_U=n(RPe,"A",{href:!0});var oEt=s(_U);E4r=r(oEt,"TFTapasForQuestionAnswering"),oEt.forEach(t),C4r=r(RPe," (TAPAS model)"),RPe.forEach(t),Z4t.forEach(t),w4r=i(Sl),T(v4.$$.fragment,Sl),Sl.forEach(t),kl.forEach(t),XNe=i(f),uc=n(f,"H2",{class:!0});var YDe=s(uc);F4=n(YDe,"A",{id:!0,class:!0,href:!0});var rEt=s(F4);CFe=n(rEt,"SPAN",{});var tEt=s(CFe);T(YL.$$.fragment,tEt),tEt.forEach(t),rEt.forEach(t),A4r=i(YDe),wFe=n(YDe,"SPAN",{});var aEt=s(wFe);y4r=r(aEt,"TFAutoModelForTokenClassification"),aEt.forEach(t),YDe.forEach(t),zNe=i(f),lr=n(f,"DIV",{class:!0});var Rl=s(lr);T(KL.$$.fragment,Rl),L4r=i(Rl),bc=n(Rl,"P",{});var cee=s(bc);x4r=r(cee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),uU=n(cee,"A",{href:!0});var nEt=s(uU);$4r=r(nEt,"from_pretrained()"),nEt.forEach(t),k4r=r(cee," class method or the "),bU=n(cee,"A",{href:!0});var sEt=s(bU);S4r=r(sEt,"from_config()"),sEt.forEach(t),R4r=r(cee,` class
method.`),cee.forEach(t),P4r=i(Rl),ZL=n(Rl,"P",{});var KDe=s(ZL);B4r=r(KDe,"This class cannot be instantiated directly using "),AFe=n(KDe,"CODE",{});var lEt=s(AFe);I4r=r(lEt,"__init__()"),lEt.forEach(t),q4r=r(KDe," (throws an error)."),KDe.forEach(t),N4r=i(Rl),Nt=n(Rl,"DIV",{class:!0});var q6=s(Nt);T(e9.$$.fragment,q6),j4r=i(q6),yFe=n(q6,"P",{});var iEt=s(yFe);D4r=r(iEt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),iEt.forEach(t),G4r=i(q6),vc=n(q6,"P",{});var fee=s(vc);O4r=r(fee,`Note:
Loading a model from its configuration file does `),LFe=n(fee,"STRONG",{});var dEt=s(LFe);V4r=r(dEt,"not"),dEt.forEach(t),X4r=r(fee,` load the model weights. It only affects the
model\u2019s configuration. Use `),vU=n(fee,"A",{href:!0});var cEt=s(vU);z4r=r(cEt,"from_pretrained()"),cEt.forEach(t),W4r=r(fee," to load the model weights."),fee.forEach(t),Q4r=i(q6),T(T4.$$.fragment,q6),q6.forEach(t),H4r=i(Rl),Br=n(Rl,"DIV",{class:!0});var Pl=s(Br);T(o9.$$.fragment,Pl),U4r=i(Pl),xFe=n(Pl,"P",{});var fEt=s(xFe);J4r=r(fEt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),fEt.forEach(t),Y4r=i(Pl),cn=n(Pl,"P",{});var N6=s(cn);K4r=r(N6,"The model class to instantiate is selected based on the "),$Fe=n(N6,"CODE",{});var mEt=s($Fe);Z4r=r(mEt,"model_type"),mEt.forEach(t),eEr=r(N6,` property of the config object (either
passed as an argument or loaded from `),kFe=n(N6,"CODE",{});var gEt=s(kFe);oEr=r(gEt,"pretrained_model_name_or_path"),gEt.forEach(t),rEr=r(N6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),SFe=n(N6,"CODE",{});var hEt=s(SFe);tEr=r(hEt,"pretrained_model_name_or_path"),hEt.forEach(t),aEr=r(N6,":"),N6.forEach(t),nEr=i(Pl),de=n(Pl,"UL",{});var me=s(de);M4=n(me,"LI",{});var PPe=s(M4);RFe=n(PPe,"STRONG",{});var pEt=s(RFe);sEr=r(pEt,"albert"),pEt.forEach(t),lEr=r(PPe," \u2014 "),FU=n(PPe,"A",{href:!0});var _Et=s(FU);iEr=r(_Et,"TFAlbertForTokenClassification"),_Et.forEach(t),dEr=r(PPe," (ALBERT model)"),PPe.forEach(t),cEr=i(me),E4=n(me,"LI",{});var BPe=s(E4);PFe=n(BPe,"STRONG",{});var uEt=s(PFe);fEr=r(uEt,"bert"),uEt.forEach(t),mEr=r(BPe," \u2014 "),TU=n(BPe,"A",{href:!0});var bEt=s(TU);gEr=r(bEt,"TFBertForTokenClassification"),bEt.forEach(t),hEr=r(BPe," (BERT model)"),BPe.forEach(t),pEr=i(me),C4=n(me,"LI",{});var IPe=s(C4);BFe=n(IPe,"STRONG",{});var vEt=s(BFe);_Er=r(vEt,"camembert"),vEt.forEach(t),uEr=r(IPe," \u2014 "),MU=n(IPe,"A",{href:!0});var FEt=s(MU);bEr=r(FEt,"TFCamembertForTokenClassification"),FEt.forEach(t),vEr=r(IPe," (CamemBERT model)"),IPe.forEach(t),FEr=i(me),w4=n(me,"LI",{});var qPe=s(w4);IFe=n(qPe,"STRONG",{});var TEt=s(IFe);TEr=r(TEt,"convbert"),TEt.forEach(t),MEr=r(qPe," \u2014 "),EU=n(qPe,"A",{href:!0});var MEt=s(EU);EEr=r(MEt,"TFConvBertForTokenClassification"),MEt.forEach(t),CEr=r(qPe," (ConvBERT model)"),qPe.forEach(t),wEr=i(me),A4=n(me,"LI",{});var NPe=s(A4);qFe=n(NPe,"STRONG",{});var EEt=s(qFe);AEr=r(EEt,"deberta"),EEt.forEach(t),yEr=r(NPe," \u2014 "),CU=n(NPe,"A",{href:!0});var CEt=s(CU);LEr=r(CEt,"TFDebertaForTokenClassification"),CEt.forEach(t),xEr=r(NPe," (DeBERTa model)"),NPe.forEach(t),$Er=i(me),y4=n(me,"LI",{});var jPe=s(y4);NFe=n(jPe,"STRONG",{});var wEt=s(NFe);kEr=r(wEt,"deberta-v2"),wEt.forEach(t),SEr=r(jPe," \u2014 "),wU=n(jPe,"A",{href:!0});var AEt=s(wU);REr=r(AEt,"TFDebertaV2ForTokenClassification"),AEt.forEach(t),PEr=r(jPe," (DeBERTa-v2 model)"),jPe.forEach(t),BEr=i(me),L4=n(me,"LI",{});var DPe=s(L4);jFe=n(DPe,"STRONG",{});var yEt=s(jFe);IEr=r(yEt,"distilbert"),yEt.forEach(t),qEr=r(DPe," \u2014 "),AU=n(DPe,"A",{href:!0});var LEt=s(AU);NEr=r(LEt,"TFDistilBertForTokenClassification"),LEt.forEach(t),jEr=r(DPe," (DistilBERT model)"),DPe.forEach(t),DEr=i(me),x4=n(me,"LI",{});var GPe=s(x4);DFe=n(GPe,"STRONG",{});var xEt=s(DFe);GEr=r(xEt,"electra"),xEt.forEach(t),OEr=r(GPe," \u2014 "),yU=n(GPe,"A",{href:!0});var $Et=s(yU);VEr=r($Et,"TFElectraForTokenClassification"),$Et.forEach(t),XEr=r(GPe," (ELECTRA model)"),GPe.forEach(t),zEr=i(me),$4=n(me,"LI",{});var OPe=s($4);GFe=n(OPe,"STRONG",{});var kEt=s(GFe);WEr=r(kEt,"flaubert"),kEt.forEach(t),QEr=r(OPe," \u2014 "),LU=n(OPe,"A",{href:!0});var SEt=s(LU);HEr=r(SEt,"TFFlaubertForTokenClassification"),SEt.forEach(t),UEr=r(OPe," (FlauBERT model)"),OPe.forEach(t),JEr=i(me),k4=n(me,"LI",{});var VPe=s(k4);OFe=n(VPe,"STRONG",{});var REt=s(OFe);YEr=r(REt,"funnel"),REt.forEach(t),KEr=r(VPe," \u2014 "),xU=n(VPe,"A",{href:!0});var PEt=s(xU);ZEr=r(PEt,"TFFunnelForTokenClassification"),PEt.forEach(t),eCr=r(VPe," (Funnel Transformer model)"),VPe.forEach(t),oCr=i(me),S4=n(me,"LI",{});var XPe=s(S4);VFe=n(XPe,"STRONG",{});var BEt=s(VFe);rCr=r(BEt,"layoutlm"),BEt.forEach(t),tCr=r(XPe," \u2014 "),$U=n(XPe,"A",{href:!0});var IEt=s($U);aCr=r(IEt,"TFLayoutLMForTokenClassification"),IEt.forEach(t),nCr=r(XPe," (LayoutLM model)"),XPe.forEach(t),sCr=i(me),R4=n(me,"LI",{});var zPe=s(R4);XFe=n(zPe,"STRONG",{});var qEt=s(XFe);lCr=r(qEt,"longformer"),qEt.forEach(t),iCr=r(zPe," \u2014 "),kU=n(zPe,"A",{href:!0});var NEt=s(kU);dCr=r(NEt,"TFLongformerForTokenClassification"),NEt.forEach(t),cCr=r(zPe," (Longformer model)"),zPe.forEach(t),fCr=i(me),P4=n(me,"LI",{});var WPe=s(P4);zFe=n(WPe,"STRONG",{});var jEt=s(zFe);mCr=r(jEt,"mobilebert"),jEt.forEach(t),gCr=r(WPe," \u2014 "),SU=n(WPe,"A",{href:!0});var DEt=s(SU);hCr=r(DEt,"TFMobileBertForTokenClassification"),DEt.forEach(t),pCr=r(WPe," (MobileBERT model)"),WPe.forEach(t),_Cr=i(me),B4=n(me,"LI",{});var QPe=s(B4);WFe=n(QPe,"STRONG",{});var GEt=s(WFe);uCr=r(GEt,"mpnet"),GEt.forEach(t),bCr=r(QPe," \u2014 "),RU=n(QPe,"A",{href:!0});var OEt=s(RU);vCr=r(OEt,"TFMPNetForTokenClassification"),OEt.forEach(t),FCr=r(QPe," (MPNet model)"),QPe.forEach(t),TCr=i(me),I4=n(me,"LI",{});var HPe=s(I4);QFe=n(HPe,"STRONG",{});var VEt=s(QFe);MCr=r(VEt,"rembert"),VEt.forEach(t),ECr=r(HPe," \u2014 "),PU=n(HPe,"A",{href:!0});var XEt=s(PU);CCr=r(XEt,"TFRemBertForTokenClassification"),XEt.forEach(t),wCr=r(HPe," (RemBERT model)"),HPe.forEach(t),ACr=i(me),q4=n(me,"LI",{});var UPe=s(q4);HFe=n(UPe,"STRONG",{});var zEt=s(HFe);yCr=r(zEt,"roberta"),zEt.forEach(t),LCr=r(UPe," \u2014 "),BU=n(UPe,"A",{href:!0});var WEt=s(BU);xCr=r(WEt,"TFRobertaForTokenClassification"),WEt.forEach(t),$Cr=r(UPe," (RoBERTa model)"),UPe.forEach(t),kCr=i(me),N4=n(me,"LI",{});var JPe=s(N4);UFe=n(JPe,"STRONG",{});var QEt=s(UFe);SCr=r(QEt,"roformer"),QEt.forEach(t),RCr=r(JPe," \u2014 "),IU=n(JPe,"A",{href:!0});var HEt=s(IU);PCr=r(HEt,"TFRoFormerForTokenClassification"),HEt.forEach(t),BCr=r(JPe," (RoFormer model)"),JPe.forEach(t),ICr=i(me),j4=n(me,"LI",{});var YPe=s(j4);JFe=n(YPe,"STRONG",{});var UEt=s(JFe);qCr=r(UEt,"xlm"),UEt.forEach(t),NCr=r(YPe," \u2014 "),qU=n(YPe,"A",{href:!0});var JEt=s(qU);jCr=r(JEt,"TFXLMForTokenClassification"),JEt.forEach(t),DCr=r(YPe," (XLM model)"),YPe.forEach(t),GCr=i(me),D4=n(me,"LI",{});var KPe=s(D4);YFe=n(KPe,"STRONG",{});var YEt=s(YFe);OCr=r(YEt,"xlm-roberta"),YEt.forEach(t),VCr=r(KPe," \u2014 "),NU=n(KPe,"A",{href:!0});var KEt=s(NU);XCr=r(KEt,"TFXLMRobertaForTokenClassification"),KEt.forEach(t),zCr=r(KPe," (XLM-RoBERTa model)"),KPe.forEach(t),WCr=i(me),G4=n(me,"LI",{});var ZPe=s(G4);KFe=n(ZPe,"STRONG",{});var ZEt=s(KFe);QCr=r(ZEt,"xlnet"),ZEt.forEach(t),HCr=r(ZPe," \u2014 "),jU=n(ZPe,"A",{href:!0});var eCt=s(jU);UCr=r(eCt,"TFXLNetForTokenClassification"),eCt.forEach(t),JCr=r(ZPe," (XLNet model)"),ZPe.forEach(t),me.forEach(t),YCr=i(Pl),T(O4.$$.fragment,Pl),Pl.forEach(t),Rl.forEach(t),WNe=i(f),Fc=n(f,"H2",{class:!0});var ZDe=s(Fc);V4=n(ZDe,"A",{id:!0,class:!0,href:!0});var oCt=s(V4);ZFe=n(oCt,"SPAN",{});var rCt=s(ZFe);T(r9.$$.fragment,rCt),rCt.forEach(t),oCt.forEach(t),KCr=i(ZDe),e0e=n(ZDe,"SPAN",{});var tCt=s(e0e);ZCr=r(tCt,"TFAutoModelForQuestionAnswering"),tCt.forEach(t),ZDe.forEach(t),QNe=i(f),ir=n(f,"DIV",{class:!0});var Bl=s(ir);T(t9.$$.fragment,Bl),e3r=i(Bl),Tc=n(Bl,"P",{});var mee=s(Tc);o3r=r(mee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),DU=n(mee,"A",{href:!0});var aCt=s(DU);r3r=r(aCt,"from_pretrained()"),aCt.forEach(t),t3r=r(mee," class method or the "),GU=n(mee,"A",{href:!0});var nCt=s(GU);a3r=r(nCt,"from_config()"),nCt.forEach(t),n3r=r(mee,` class
method.`),mee.forEach(t),s3r=i(Bl),a9=n(Bl,"P",{});var eGe=s(a9);l3r=r(eGe,"This class cannot be instantiated directly using "),o0e=n(eGe,"CODE",{});var sCt=s(o0e);i3r=r(sCt,"__init__()"),sCt.forEach(t),d3r=r(eGe," (throws an error)."),eGe.forEach(t),c3r=i(Bl),jt=n(Bl,"DIV",{class:!0});var j6=s(jt);T(n9.$$.fragment,j6),f3r=i(j6),r0e=n(j6,"P",{});var lCt=s(r0e);m3r=r(lCt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),lCt.forEach(t),g3r=i(j6),Mc=n(j6,"P",{});var gee=s(Mc);h3r=r(gee,`Note:
Loading a model from its configuration file does `),t0e=n(gee,"STRONG",{});var iCt=s(t0e);p3r=r(iCt,"not"),iCt.forEach(t),_3r=r(gee,` load the model weights. It only affects the
model\u2019s configuration. Use `),OU=n(gee,"A",{href:!0});var dCt=s(OU);u3r=r(dCt,"from_pretrained()"),dCt.forEach(t),b3r=r(gee," to load the model weights."),gee.forEach(t),v3r=i(j6),T(X4.$$.fragment,j6),j6.forEach(t),F3r=i(Bl),Ir=n(Bl,"DIV",{class:!0});var Il=s(Ir);T(s9.$$.fragment,Il),T3r=i(Il),a0e=n(Il,"P",{});var cCt=s(a0e);M3r=r(cCt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),cCt.forEach(t),E3r=i(Il),fn=n(Il,"P",{});var D6=s(fn);C3r=r(D6,"The model class to instantiate is selected based on the "),n0e=n(D6,"CODE",{});var fCt=s(n0e);w3r=r(fCt,"model_type"),fCt.forEach(t),A3r=r(D6,` property of the config object (either
passed as an argument or loaded from `),s0e=n(D6,"CODE",{});var mCt=s(s0e);y3r=r(mCt,"pretrained_model_name_or_path"),mCt.forEach(t),L3r=r(D6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l0e=n(D6,"CODE",{});var gCt=s(l0e);x3r=r(gCt,"pretrained_model_name_or_path"),gCt.forEach(t),$3r=r(D6,":"),D6.forEach(t),k3r=i(Il),ce=n(Il,"UL",{});var ge=s(ce);z4=n(ge,"LI",{});var eBe=s(z4);i0e=n(eBe,"STRONG",{});var hCt=s(i0e);S3r=r(hCt,"albert"),hCt.forEach(t),R3r=r(eBe," \u2014 "),VU=n(eBe,"A",{href:!0});var pCt=s(VU);P3r=r(pCt,"TFAlbertForQuestionAnswering"),pCt.forEach(t),B3r=r(eBe," (ALBERT model)"),eBe.forEach(t),I3r=i(ge),W4=n(ge,"LI",{});var oBe=s(W4);d0e=n(oBe,"STRONG",{});var _Ct=s(d0e);q3r=r(_Ct,"bert"),_Ct.forEach(t),N3r=r(oBe," \u2014 "),XU=n(oBe,"A",{href:!0});var uCt=s(XU);j3r=r(uCt,"TFBertForQuestionAnswering"),uCt.forEach(t),D3r=r(oBe," (BERT model)"),oBe.forEach(t),G3r=i(ge),Q4=n(ge,"LI",{});var rBe=s(Q4);c0e=n(rBe,"STRONG",{});var bCt=s(c0e);O3r=r(bCt,"camembert"),bCt.forEach(t),V3r=r(rBe," \u2014 "),zU=n(rBe,"A",{href:!0});var vCt=s(zU);X3r=r(vCt,"TFCamembertForQuestionAnswering"),vCt.forEach(t),z3r=r(rBe," (CamemBERT model)"),rBe.forEach(t),W3r=i(ge),H4=n(ge,"LI",{});var tBe=s(H4);f0e=n(tBe,"STRONG",{});var FCt=s(f0e);Q3r=r(FCt,"convbert"),FCt.forEach(t),H3r=r(tBe," \u2014 "),WU=n(tBe,"A",{href:!0});var TCt=s(WU);U3r=r(TCt,"TFConvBertForQuestionAnswering"),TCt.forEach(t),J3r=r(tBe," (ConvBERT model)"),tBe.forEach(t),Y3r=i(ge),U4=n(ge,"LI",{});var aBe=s(U4);m0e=n(aBe,"STRONG",{});var MCt=s(m0e);K3r=r(MCt,"deberta"),MCt.forEach(t),Z3r=r(aBe," \u2014 "),QU=n(aBe,"A",{href:!0});var ECt=s(QU);ewr=r(ECt,"TFDebertaForQuestionAnswering"),ECt.forEach(t),owr=r(aBe," (DeBERTa model)"),aBe.forEach(t),rwr=i(ge),J4=n(ge,"LI",{});var nBe=s(J4);g0e=n(nBe,"STRONG",{});var CCt=s(g0e);twr=r(CCt,"deberta-v2"),CCt.forEach(t),awr=r(nBe," \u2014 "),HU=n(nBe,"A",{href:!0});var wCt=s(HU);nwr=r(wCt,"TFDebertaV2ForQuestionAnswering"),wCt.forEach(t),swr=r(nBe," (DeBERTa-v2 model)"),nBe.forEach(t),lwr=i(ge),Y4=n(ge,"LI",{});var sBe=s(Y4);h0e=n(sBe,"STRONG",{});var ACt=s(h0e);iwr=r(ACt,"distilbert"),ACt.forEach(t),dwr=r(sBe," \u2014 "),UU=n(sBe,"A",{href:!0});var yCt=s(UU);cwr=r(yCt,"TFDistilBertForQuestionAnswering"),yCt.forEach(t),fwr=r(sBe," (DistilBERT model)"),sBe.forEach(t),mwr=i(ge),K4=n(ge,"LI",{});var lBe=s(K4);p0e=n(lBe,"STRONG",{});var LCt=s(p0e);gwr=r(LCt,"electra"),LCt.forEach(t),hwr=r(lBe," \u2014 "),JU=n(lBe,"A",{href:!0});var xCt=s(JU);pwr=r(xCt,"TFElectraForQuestionAnswering"),xCt.forEach(t),_wr=r(lBe," (ELECTRA model)"),lBe.forEach(t),uwr=i(ge),Z4=n(ge,"LI",{});var iBe=s(Z4);_0e=n(iBe,"STRONG",{});var $Ct=s(_0e);bwr=r($Ct,"flaubert"),$Ct.forEach(t),vwr=r(iBe," \u2014 "),YU=n(iBe,"A",{href:!0});var kCt=s(YU);Fwr=r(kCt,"TFFlaubertForQuestionAnsweringSimple"),kCt.forEach(t),Twr=r(iBe," (FlauBERT model)"),iBe.forEach(t),Mwr=i(ge),eE=n(ge,"LI",{});var dBe=s(eE);u0e=n(dBe,"STRONG",{});var SCt=s(u0e);Ewr=r(SCt,"funnel"),SCt.forEach(t),Cwr=r(dBe," \u2014 "),KU=n(dBe,"A",{href:!0});var RCt=s(KU);wwr=r(RCt,"TFFunnelForQuestionAnswering"),RCt.forEach(t),Awr=r(dBe," (Funnel Transformer model)"),dBe.forEach(t),ywr=i(ge),oE=n(ge,"LI",{});var cBe=s(oE);b0e=n(cBe,"STRONG",{});var PCt=s(b0e);Lwr=r(PCt,"gptj"),PCt.forEach(t),xwr=r(cBe," \u2014 "),ZU=n(cBe,"A",{href:!0});var BCt=s(ZU);$wr=r(BCt,"TFGPTJForQuestionAnswering"),BCt.forEach(t),kwr=r(cBe," (GPT-J model)"),cBe.forEach(t),Swr=i(ge),rE=n(ge,"LI",{});var fBe=s(rE);v0e=n(fBe,"STRONG",{});var ICt=s(v0e);Rwr=r(ICt,"longformer"),ICt.forEach(t),Pwr=r(fBe," \u2014 "),eJ=n(fBe,"A",{href:!0});var qCt=s(eJ);Bwr=r(qCt,"TFLongformerForQuestionAnswering"),qCt.forEach(t),Iwr=r(fBe," (Longformer model)"),fBe.forEach(t),qwr=i(ge),tE=n(ge,"LI",{});var mBe=s(tE);F0e=n(mBe,"STRONG",{});var NCt=s(F0e);Nwr=r(NCt,"mobilebert"),NCt.forEach(t),jwr=r(mBe," \u2014 "),oJ=n(mBe,"A",{href:!0});var jCt=s(oJ);Dwr=r(jCt,"TFMobileBertForQuestionAnswering"),jCt.forEach(t),Gwr=r(mBe," (MobileBERT model)"),mBe.forEach(t),Owr=i(ge),aE=n(ge,"LI",{});var gBe=s(aE);T0e=n(gBe,"STRONG",{});var DCt=s(T0e);Vwr=r(DCt,"mpnet"),DCt.forEach(t),Xwr=r(gBe," \u2014 "),rJ=n(gBe,"A",{href:!0});var GCt=s(rJ);zwr=r(GCt,"TFMPNetForQuestionAnswering"),GCt.forEach(t),Wwr=r(gBe," (MPNet model)"),gBe.forEach(t),Qwr=i(ge),nE=n(ge,"LI",{});var hBe=s(nE);M0e=n(hBe,"STRONG",{});var OCt=s(M0e);Hwr=r(OCt,"rembert"),OCt.forEach(t),Uwr=r(hBe," \u2014 "),tJ=n(hBe,"A",{href:!0});var VCt=s(tJ);Jwr=r(VCt,"TFRemBertForQuestionAnswering"),VCt.forEach(t),Ywr=r(hBe," (RemBERT model)"),hBe.forEach(t),Kwr=i(ge),sE=n(ge,"LI",{});var pBe=s(sE);E0e=n(pBe,"STRONG",{});var XCt=s(E0e);Zwr=r(XCt,"roberta"),XCt.forEach(t),e6r=r(pBe," \u2014 "),aJ=n(pBe,"A",{href:!0});var zCt=s(aJ);o6r=r(zCt,"TFRobertaForQuestionAnswering"),zCt.forEach(t),r6r=r(pBe," (RoBERTa model)"),pBe.forEach(t),t6r=i(ge),lE=n(ge,"LI",{});var _Be=s(lE);C0e=n(_Be,"STRONG",{});var WCt=s(C0e);a6r=r(WCt,"roformer"),WCt.forEach(t),n6r=r(_Be," \u2014 "),nJ=n(_Be,"A",{href:!0});var QCt=s(nJ);s6r=r(QCt,"TFRoFormerForQuestionAnswering"),QCt.forEach(t),l6r=r(_Be," (RoFormer model)"),_Be.forEach(t),i6r=i(ge),iE=n(ge,"LI",{});var uBe=s(iE);w0e=n(uBe,"STRONG",{});var HCt=s(w0e);d6r=r(HCt,"xlm"),HCt.forEach(t),c6r=r(uBe," \u2014 "),sJ=n(uBe,"A",{href:!0});var UCt=s(sJ);f6r=r(UCt,"TFXLMForQuestionAnsweringSimple"),UCt.forEach(t),m6r=r(uBe," (XLM model)"),uBe.forEach(t),g6r=i(ge),dE=n(ge,"LI",{});var bBe=s(dE);A0e=n(bBe,"STRONG",{});var JCt=s(A0e);h6r=r(JCt,"xlm-roberta"),JCt.forEach(t),p6r=r(bBe," \u2014 "),lJ=n(bBe,"A",{href:!0});var YCt=s(lJ);_6r=r(YCt,"TFXLMRobertaForQuestionAnswering"),YCt.forEach(t),u6r=r(bBe," (XLM-RoBERTa model)"),bBe.forEach(t),b6r=i(ge),cE=n(ge,"LI",{});var vBe=s(cE);y0e=n(vBe,"STRONG",{});var KCt=s(y0e);v6r=r(KCt,"xlnet"),KCt.forEach(t),F6r=r(vBe," \u2014 "),iJ=n(vBe,"A",{href:!0});var ZCt=s(iJ);T6r=r(ZCt,"TFXLNetForQuestionAnsweringSimple"),ZCt.forEach(t),M6r=r(vBe," (XLNet model)"),vBe.forEach(t),ge.forEach(t),E6r=i(Il),T(fE.$$.fragment,Il),Il.forEach(t),Bl.forEach(t),HNe=i(f),Ec=n(f,"H2",{class:!0});var oGe=s(Ec);mE=n(oGe,"A",{id:!0,class:!0,href:!0});var e3t=s(mE);L0e=n(e3t,"SPAN",{});var o3t=s(L0e);T(l9.$$.fragment,o3t),o3t.forEach(t),e3t.forEach(t),C6r=i(oGe),x0e=n(oGe,"SPAN",{});var r3t=s(x0e);w6r=r(r3t,"TFAutoModelForVision2Seq"),r3t.forEach(t),oGe.forEach(t),UNe=i(f),dr=n(f,"DIV",{class:!0});var ql=s(dr);T(i9.$$.fragment,ql),A6r=i(ql),Cc=n(ql,"P",{});var hee=s(Cc);y6r=r(hee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),dJ=n(hee,"A",{href:!0});var t3t=s(dJ);L6r=r(t3t,"from_pretrained()"),t3t.forEach(t),x6r=r(hee," class method or the "),cJ=n(hee,"A",{href:!0});var a3t=s(cJ);$6r=r(a3t,"from_config()"),a3t.forEach(t),k6r=r(hee,` class
method.`),hee.forEach(t),S6r=i(ql),d9=n(ql,"P",{});var rGe=s(d9);R6r=r(rGe,"This class cannot be instantiated directly using "),$0e=n(rGe,"CODE",{});var n3t=s($0e);P6r=r(n3t,"__init__()"),n3t.forEach(t),B6r=r(rGe," (throws an error)."),rGe.forEach(t),I6r=i(ql),Dt=n(ql,"DIV",{class:!0});var G6=s(Dt);T(c9.$$.fragment,G6),q6r=i(G6),k0e=n(G6,"P",{});var s3t=s(k0e);N6r=r(s3t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),s3t.forEach(t),j6r=i(G6),wc=n(G6,"P",{});var pee=s(wc);D6r=r(pee,`Note:
Loading a model from its configuration file does `),S0e=n(pee,"STRONG",{});var l3t=s(S0e);G6r=r(l3t,"not"),l3t.forEach(t),O6r=r(pee,` load the model weights. It only affects the
model\u2019s configuration. Use `),fJ=n(pee,"A",{href:!0});var i3t=s(fJ);V6r=r(i3t,"from_pretrained()"),i3t.forEach(t),X6r=r(pee," to load the model weights."),pee.forEach(t),z6r=i(G6),T(gE.$$.fragment,G6),G6.forEach(t),W6r=i(ql),qr=n(ql,"DIV",{class:!0});var Nl=s(qr);T(f9.$$.fragment,Nl),Q6r=i(Nl),R0e=n(Nl,"P",{});var d3t=s(R0e);H6r=r(d3t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),d3t.forEach(t),U6r=i(Nl),mn=n(Nl,"P",{});var O6=s(mn);J6r=r(O6,"The model class to instantiate is selected based on the "),P0e=n(O6,"CODE",{});var c3t=s(P0e);Y6r=r(c3t,"model_type"),c3t.forEach(t),K6r=r(O6,` property of the config object (either
passed as an argument or loaded from `),B0e=n(O6,"CODE",{});var f3t=s(B0e);Z6r=r(f3t,"pretrained_model_name_or_path"),f3t.forEach(t),eAr=r(O6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I0e=n(O6,"CODE",{});var m3t=s(I0e);oAr=r(m3t,"pretrained_model_name_or_path"),m3t.forEach(t),rAr=r(O6,":"),O6.forEach(t),tAr=i(Nl),q0e=n(Nl,"UL",{});var g3t=s(q0e);hE=n(g3t,"LI",{});var FBe=s(hE);N0e=n(FBe,"STRONG",{});var h3t=s(N0e);aAr=r(h3t,"vision-encoder-decoder"),h3t.forEach(t),nAr=r(FBe," \u2014 "),mJ=n(FBe,"A",{href:!0});var p3t=s(mJ);sAr=r(p3t,"TFVisionEncoderDecoderModel"),p3t.forEach(t),lAr=r(FBe," (Vision Encoder decoder model)"),FBe.forEach(t),g3t.forEach(t),iAr=i(Nl),T(pE.$$.fragment,Nl),Nl.forEach(t),ql.forEach(t),JNe=i(f),Ac=n(f,"H2",{class:!0});var tGe=s(Ac);_E=n(tGe,"A",{id:!0,class:!0,href:!0});var _3t=s(_E);j0e=n(_3t,"SPAN",{});var u3t=s(j0e);T(m9.$$.fragment,u3t),u3t.forEach(t),_3t.forEach(t),dAr=i(tGe),D0e=n(tGe,"SPAN",{});var b3t=s(D0e);cAr=r(b3t,"TFAutoModelForSpeechSeq2Seq"),b3t.forEach(t),tGe.forEach(t),YNe=i(f),cr=n(f,"DIV",{class:!0});var jl=s(cr);T(g9.$$.fragment,jl),fAr=i(jl),yc=n(jl,"P",{});var _ee=s(yc);mAr=r(_ee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),gJ=n(_ee,"A",{href:!0});var v3t=s(gJ);gAr=r(v3t,"from_pretrained()"),v3t.forEach(t),hAr=r(_ee," class method or the "),hJ=n(_ee,"A",{href:!0});var F3t=s(hJ);pAr=r(F3t,"from_config()"),F3t.forEach(t),_Ar=r(_ee,` class
method.`),_ee.forEach(t),uAr=i(jl),h9=n(jl,"P",{});var aGe=s(h9);bAr=r(aGe,"This class cannot be instantiated directly using "),G0e=n(aGe,"CODE",{});var T3t=s(G0e);vAr=r(T3t,"__init__()"),T3t.forEach(t),FAr=r(aGe," (throws an error)."),aGe.forEach(t),TAr=i(jl),Gt=n(jl,"DIV",{class:!0});var V6=s(Gt);T(p9.$$.fragment,V6),MAr=i(V6),O0e=n(V6,"P",{});var M3t=s(O0e);EAr=r(M3t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),M3t.forEach(t),CAr=i(V6),Lc=n(V6,"P",{});var uee=s(Lc);wAr=r(uee,`Note:
Loading a model from its configuration file does `),V0e=n(uee,"STRONG",{});var E3t=s(V0e);AAr=r(E3t,"not"),E3t.forEach(t),yAr=r(uee,` load the model weights. It only affects the
model\u2019s configuration. Use `),pJ=n(uee,"A",{href:!0});var C3t=s(pJ);LAr=r(C3t,"from_pretrained()"),C3t.forEach(t),xAr=r(uee," to load the model weights."),uee.forEach(t),$Ar=i(V6),T(uE.$$.fragment,V6),V6.forEach(t),kAr=i(jl),Nr=n(jl,"DIV",{class:!0});var Dl=s(Nr);T(_9.$$.fragment,Dl),SAr=i(Dl),X0e=n(Dl,"P",{});var w3t=s(X0e);RAr=r(w3t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),w3t.forEach(t),PAr=i(Dl),gn=n(Dl,"P",{});var X6=s(gn);BAr=r(X6,"The model class to instantiate is selected based on the "),z0e=n(X6,"CODE",{});var A3t=s(z0e);IAr=r(A3t,"model_type"),A3t.forEach(t),qAr=r(X6,` property of the config object (either
passed as an argument or loaded from `),W0e=n(X6,"CODE",{});var y3t=s(W0e);NAr=r(y3t,"pretrained_model_name_or_path"),y3t.forEach(t),jAr=r(X6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q0e=n(X6,"CODE",{});var L3t=s(Q0e);DAr=r(L3t,"pretrained_model_name_or_path"),L3t.forEach(t),GAr=r(X6,":"),X6.forEach(t),OAr=i(Dl),H0e=n(Dl,"UL",{});var x3t=s(H0e);bE=n(x3t,"LI",{});var TBe=s(bE);U0e=n(TBe,"STRONG",{});var $3t=s(U0e);VAr=r($3t,"speech_to_text"),$3t.forEach(t),XAr=r(TBe," \u2014 "),_J=n(TBe,"A",{href:!0});var k3t=s(_J);zAr=r(k3t,"TFSpeech2TextForConditionalGeneration"),k3t.forEach(t),WAr=r(TBe," (Speech2Text model)"),TBe.forEach(t),x3t.forEach(t),QAr=i(Dl),T(vE.$$.fragment,Dl),Dl.forEach(t),jl.forEach(t),KNe=i(f),xc=n(f,"H2",{class:!0});var nGe=s(xc);FE=n(nGe,"A",{id:!0,class:!0,href:!0});var S3t=s(FE);J0e=n(S3t,"SPAN",{});var R3t=s(J0e);T(u9.$$.fragment,R3t),R3t.forEach(t),S3t.forEach(t),HAr=i(nGe),Y0e=n(nGe,"SPAN",{});var P3t=s(Y0e);UAr=r(P3t,"FlaxAutoModel"),P3t.forEach(t),nGe.forEach(t),ZNe=i(f),fr=n(f,"DIV",{class:!0});var Gl=s(fr);T(b9.$$.fragment,Gl),JAr=i(Gl),$c=n(Gl,"P",{});var bee=s($c);YAr=r(bee,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),uJ=n(bee,"A",{href:!0});var B3t=s(uJ);KAr=r(B3t,"from_pretrained()"),B3t.forEach(t),ZAr=r(bee," class method or the "),bJ=n(bee,"A",{href:!0});var I3t=s(bJ);eyr=r(I3t,"from_config()"),I3t.forEach(t),oyr=r(bee,` class
method.`),bee.forEach(t),ryr=i(Gl),v9=n(Gl,"P",{});var sGe=s(v9);tyr=r(sGe,"This class cannot be instantiated directly using "),K0e=n(sGe,"CODE",{});var q3t=s(K0e);ayr=r(q3t,"__init__()"),q3t.forEach(t),nyr=r(sGe," (throws an error)."),sGe.forEach(t),syr=i(Gl),Ot=n(Gl,"DIV",{class:!0});var z6=s(Ot);T(F9.$$.fragment,z6),lyr=i(z6),Z0e=n(z6,"P",{});var N3t=s(Z0e);iyr=r(N3t,"Instantiates one of the base model classes of the library from a configuration."),N3t.forEach(t),dyr=i(z6),kc=n(z6,"P",{});var vee=s(kc);cyr=r(vee,`Note:
Loading a model from its configuration file does `),eTe=n(vee,"STRONG",{});var j3t=s(eTe);fyr=r(j3t,"not"),j3t.forEach(t),myr=r(vee,` load the model weights. It only affects the
model\u2019s configuration. Use `),vJ=n(vee,"A",{href:!0});var D3t=s(vJ);gyr=r(D3t,"from_pretrained()"),D3t.forEach(t),hyr=r(vee," to load the model weights."),vee.forEach(t),pyr=i(z6),T(TE.$$.fragment,z6),z6.forEach(t),_yr=i(Gl),jr=n(Gl,"DIV",{class:!0});var Ol=s(jr);T(T9.$$.fragment,Ol),uyr=i(Ol),oTe=n(Ol,"P",{});var G3t=s(oTe);byr=r(G3t,"Instantiate one of the base model classes of the library from a pretrained model."),G3t.forEach(t),vyr=i(Ol),hn=n(Ol,"P",{});var W6=s(hn);Fyr=r(W6,"The model class to instantiate is selected based on the "),rTe=n(W6,"CODE",{});var O3t=s(rTe);Tyr=r(O3t,"model_type"),O3t.forEach(t),Myr=r(W6,` property of the config object (either
passed as an argument or loaded from `),tTe=n(W6,"CODE",{});var V3t=s(tTe);Eyr=r(V3t,"pretrained_model_name_or_path"),V3t.forEach(t),Cyr=r(W6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aTe=n(W6,"CODE",{});var X3t=s(aTe);wyr=r(X3t,"pretrained_model_name_or_path"),X3t.forEach(t),Ayr=r(W6,":"),W6.forEach(t),yyr=i(Ol),te=n(Ol,"UL",{});var ne=s(te);ME=n(ne,"LI",{});var MBe=s(ME);nTe=n(MBe,"STRONG",{});var z3t=s(nTe);Lyr=r(z3t,"albert"),z3t.forEach(t),xyr=r(MBe," \u2014 "),FJ=n(MBe,"A",{href:!0});var W3t=s(FJ);$yr=r(W3t,"FlaxAlbertModel"),W3t.forEach(t),kyr=r(MBe," (ALBERT model)"),MBe.forEach(t),Syr=i(ne),EE=n(ne,"LI",{});var EBe=s(EE);sTe=n(EBe,"STRONG",{});var Q3t=s(sTe);Ryr=r(Q3t,"bart"),Q3t.forEach(t),Pyr=r(EBe," \u2014 "),TJ=n(EBe,"A",{href:!0});var H3t=s(TJ);Byr=r(H3t,"FlaxBartModel"),H3t.forEach(t),Iyr=r(EBe," (BART model)"),EBe.forEach(t),qyr=i(ne),CE=n(ne,"LI",{});var CBe=s(CE);lTe=n(CBe,"STRONG",{});var U3t=s(lTe);Nyr=r(U3t,"beit"),U3t.forEach(t),jyr=r(CBe," \u2014 "),MJ=n(CBe,"A",{href:!0});var J3t=s(MJ);Dyr=r(J3t,"FlaxBeitModel"),J3t.forEach(t),Gyr=r(CBe," (BEiT model)"),CBe.forEach(t),Oyr=i(ne),wE=n(ne,"LI",{});var wBe=s(wE);iTe=n(wBe,"STRONG",{});var Y3t=s(iTe);Vyr=r(Y3t,"bert"),Y3t.forEach(t),Xyr=r(wBe," \u2014 "),EJ=n(wBe,"A",{href:!0});var K3t=s(EJ);zyr=r(K3t,"FlaxBertModel"),K3t.forEach(t),Wyr=r(wBe," (BERT model)"),wBe.forEach(t),Qyr=i(ne),AE=n(ne,"LI",{});var ABe=s(AE);dTe=n(ABe,"STRONG",{});var Z3t=s(dTe);Hyr=r(Z3t,"big_bird"),Z3t.forEach(t),Uyr=r(ABe," \u2014 "),CJ=n(ABe,"A",{href:!0});var ewt=s(CJ);Jyr=r(ewt,"FlaxBigBirdModel"),ewt.forEach(t),Yyr=r(ABe," (BigBird model)"),ABe.forEach(t),Kyr=i(ne),yE=n(ne,"LI",{});var yBe=s(yE);cTe=n(yBe,"STRONG",{});var owt=s(cTe);Zyr=r(owt,"blenderbot"),owt.forEach(t),e8r=r(yBe," \u2014 "),wJ=n(yBe,"A",{href:!0});var rwt=s(wJ);o8r=r(rwt,"FlaxBlenderbotModel"),rwt.forEach(t),r8r=r(yBe," (Blenderbot model)"),yBe.forEach(t),t8r=i(ne),LE=n(ne,"LI",{});var LBe=s(LE);fTe=n(LBe,"STRONG",{});var twt=s(fTe);a8r=r(twt,"blenderbot-small"),twt.forEach(t),n8r=r(LBe," \u2014 "),AJ=n(LBe,"A",{href:!0});var awt=s(AJ);s8r=r(awt,"FlaxBlenderbotSmallModel"),awt.forEach(t),l8r=r(LBe," (BlenderbotSmall model)"),LBe.forEach(t),i8r=i(ne),xE=n(ne,"LI",{});var xBe=s(xE);mTe=n(xBe,"STRONG",{});var nwt=s(mTe);d8r=r(nwt,"clip"),nwt.forEach(t),c8r=r(xBe," \u2014 "),yJ=n(xBe,"A",{href:!0});var swt=s(yJ);f8r=r(swt,"FlaxCLIPModel"),swt.forEach(t),m8r=r(xBe," (CLIP model)"),xBe.forEach(t),g8r=i(ne),$E=n(ne,"LI",{});var $Be=s($E);gTe=n($Be,"STRONG",{});var lwt=s(gTe);h8r=r(lwt,"distilbert"),lwt.forEach(t),p8r=r($Be," \u2014 "),LJ=n($Be,"A",{href:!0});var iwt=s(LJ);_8r=r(iwt,"FlaxDistilBertModel"),iwt.forEach(t),u8r=r($Be," (DistilBERT model)"),$Be.forEach(t),b8r=i(ne),kE=n(ne,"LI",{});var kBe=s(kE);hTe=n(kBe,"STRONG",{});var dwt=s(hTe);v8r=r(dwt,"electra"),dwt.forEach(t),F8r=r(kBe," \u2014 "),xJ=n(kBe,"A",{href:!0});var cwt=s(xJ);T8r=r(cwt,"FlaxElectraModel"),cwt.forEach(t),M8r=r(kBe," (ELECTRA model)"),kBe.forEach(t),E8r=i(ne),SE=n(ne,"LI",{});var SBe=s(SE);pTe=n(SBe,"STRONG",{});var fwt=s(pTe);C8r=r(fwt,"gpt2"),fwt.forEach(t),w8r=r(SBe," \u2014 "),$J=n(SBe,"A",{href:!0});var mwt=s($J);A8r=r(mwt,"FlaxGPT2Model"),mwt.forEach(t),y8r=r(SBe," (OpenAI GPT-2 model)"),SBe.forEach(t),L8r=i(ne),RE=n(ne,"LI",{});var RBe=s(RE);_Te=n(RBe,"STRONG",{});var gwt=s(_Te);x8r=r(gwt,"gpt_neo"),gwt.forEach(t),$8r=r(RBe," \u2014 "),kJ=n(RBe,"A",{href:!0});var hwt=s(kJ);k8r=r(hwt,"FlaxGPTNeoModel"),hwt.forEach(t),S8r=r(RBe," (GPT Neo model)"),RBe.forEach(t),R8r=i(ne),PE=n(ne,"LI",{});var PBe=s(PE);uTe=n(PBe,"STRONG",{});var pwt=s(uTe);P8r=r(pwt,"gptj"),pwt.forEach(t),B8r=r(PBe," \u2014 "),SJ=n(PBe,"A",{href:!0});var _wt=s(SJ);I8r=r(_wt,"FlaxGPTJModel"),_wt.forEach(t),q8r=r(PBe," (GPT-J model)"),PBe.forEach(t),N8r=i(ne),BE=n(ne,"LI",{});var BBe=s(BE);bTe=n(BBe,"STRONG",{});var uwt=s(bTe);j8r=r(uwt,"marian"),uwt.forEach(t),D8r=r(BBe," \u2014 "),RJ=n(BBe,"A",{href:!0});var bwt=s(RJ);G8r=r(bwt,"FlaxMarianModel"),bwt.forEach(t),O8r=r(BBe," (Marian model)"),BBe.forEach(t),V8r=i(ne),IE=n(ne,"LI",{});var IBe=s(IE);vTe=n(IBe,"STRONG",{});var vwt=s(vTe);X8r=r(vwt,"mbart"),vwt.forEach(t),z8r=r(IBe," \u2014 "),PJ=n(IBe,"A",{href:!0});var Fwt=s(PJ);W8r=r(Fwt,"FlaxMBartModel"),Fwt.forEach(t),Q8r=r(IBe," (mBART model)"),IBe.forEach(t),H8r=i(ne),qE=n(ne,"LI",{});var qBe=s(qE);FTe=n(qBe,"STRONG",{});var Twt=s(FTe);U8r=r(Twt,"mt5"),Twt.forEach(t),J8r=r(qBe," \u2014 "),BJ=n(qBe,"A",{href:!0});var Mwt=s(BJ);Y8r=r(Mwt,"FlaxMT5Model"),Mwt.forEach(t),K8r=r(qBe," (mT5 model)"),qBe.forEach(t),Z8r=i(ne),NE=n(ne,"LI",{});var NBe=s(NE);TTe=n(NBe,"STRONG",{});var Ewt=s(TTe);eLr=r(Ewt,"pegasus"),Ewt.forEach(t),oLr=r(NBe," \u2014 "),IJ=n(NBe,"A",{href:!0});var Cwt=s(IJ);rLr=r(Cwt,"FlaxPegasusModel"),Cwt.forEach(t),tLr=r(NBe," (Pegasus model)"),NBe.forEach(t),aLr=i(ne),jE=n(ne,"LI",{});var jBe=s(jE);MTe=n(jBe,"STRONG",{});var wwt=s(MTe);nLr=r(wwt,"roberta"),wwt.forEach(t),sLr=r(jBe," \u2014 "),qJ=n(jBe,"A",{href:!0});var Awt=s(qJ);lLr=r(Awt,"FlaxRobertaModel"),Awt.forEach(t),iLr=r(jBe," (RoBERTa model)"),jBe.forEach(t),dLr=i(ne),DE=n(ne,"LI",{});var DBe=s(DE);ETe=n(DBe,"STRONG",{});var ywt=s(ETe);cLr=r(ywt,"roformer"),ywt.forEach(t),fLr=r(DBe," \u2014 "),NJ=n(DBe,"A",{href:!0});var Lwt=s(NJ);mLr=r(Lwt,"FlaxRoFormerModel"),Lwt.forEach(t),gLr=r(DBe," (RoFormer model)"),DBe.forEach(t),hLr=i(ne),GE=n(ne,"LI",{});var GBe=s(GE);CTe=n(GBe,"STRONG",{});var xwt=s(CTe);pLr=r(xwt,"t5"),xwt.forEach(t),_Lr=r(GBe," \u2014 "),jJ=n(GBe,"A",{href:!0});var $wt=s(jJ);uLr=r($wt,"FlaxT5Model"),$wt.forEach(t),bLr=r(GBe," (T5 model)"),GBe.forEach(t),vLr=i(ne),OE=n(ne,"LI",{});var OBe=s(OE);wTe=n(OBe,"STRONG",{});var kwt=s(wTe);FLr=r(kwt,"vision-text-dual-encoder"),kwt.forEach(t),TLr=r(OBe," \u2014 "),DJ=n(OBe,"A",{href:!0});var Swt=s(DJ);MLr=r(Swt,"FlaxVisionTextDualEncoderModel"),Swt.forEach(t),ELr=r(OBe," (VisionTextDualEncoder model)"),OBe.forEach(t),CLr=i(ne),VE=n(ne,"LI",{});var VBe=s(VE);ATe=n(VBe,"STRONG",{});var Rwt=s(ATe);wLr=r(Rwt,"vit"),Rwt.forEach(t),ALr=r(VBe," \u2014 "),GJ=n(VBe,"A",{href:!0});var Pwt=s(GJ);yLr=r(Pwt,"FlaxViTModel"),Pwt.forEach(t),LLr=r(VBe," (ViT model)"),VBe.forEach(t),xLr=i(ne),XE=n(ne,"LI",{});var XBe=s(XE);yTe=n(XBe,"STRONG",{});var Bwt=s(yTe);$Lr=r(Bwt,"wav2vec2"),Bwt.forEach(t),kLr=r(XBe," \u2014 "),OJ=n(XBe,"A",{href:!0});var Iwt=s(OJ);SLr=r(Iwt,"FlaxWav2Vec2Model"),Iwt.forEach(t),RLr=r(XBe," (Wav2Vec2 model)"),XBe.forEach(t),PLr=i(ne),zE=n(ne,"LI",{});var zBe=s(zE);LTe=n(zBe,"STRONG",{});var qwt=s(LTe);BLr=r(qwt,"xglm"),qwt.forEach(t),ILr=r(zBe," \u2014 "),VJ=n(zBe,"A",{href:!0});var Nwt=s(VJ);qLr=r(Nwt,"FlaxXGLMModel"),Nwt.forEach(t),NLr=r(zBe," (XGLM model)"),zBe.forEach(t),jLr=i(ne),WE=n(ne,"LI",{});var WBe=s(WE);xTe=n(WBe,"STRONG",{});var jwt=s(xTe);DLr=r(jwt,"xlm-roberta"),jwt.forEach(t),GLr=r(WBe," \u2014 "),XJ=n(WBe,"A",{href:!0});var Dwt=s(XJ);OLr=r(Dwt,"FlaxXLMRobertaModel"),Dwt.forEach(t),VLr=r(WBe," (XLM-RoBERTa model)"),WBe.forEach(t),ne.forEach(t),XLr=i(Ol),T(QE.$$.fragment,Ol),Ol.forEach(t),Gl.forEach(t),eje=i(f),Sc=n(f,"H2",{class:!0});var lGe=s(Sc);HE=n(lGe,"A",{id:!0,class:!0,href:!0});var Gwt=s(HE);$Te=n(Gwt,"SPAN",{});var Owt=s($Te);T(M9.$$.fragment,Owt),Owt.forEach(t),Gwt.forEach(t),zLr=i(lGe),kTe=n(lGe,"SPAN",{});var Vwt=s(kTe);WLr=r(Vwt,"FlaxAutoModelForCausalLM"),Vwt.forEach(t),lGe.forEach(t),oje=i(f),mr=n(f,"DIV",{class:!0});var Vl=s(mr);T(E9.$$.fragment,Vl),QLr=i(Vl),Rc=n(Vl,"P",{});var Fee=s(Rc);HLr=r(Fee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),zJ=n(Fee,"A",{href:!0});var Xwt=s(zJ);ULr=r(Xwt,"from_pretrained()"),Xwt.forEach(t),JLr=r(Fee," class method or the "),WJ=n(Fee,"A",{href:!0});var zwt=s(WJ);YLr=r(zwt,"from_config()"),zwt.forEach(t),KLr=r(Fee,` class
method.`),Fee.forEach(t),ZLr=i(Vl),C9=n(Vl,"P",{});var iGe=s(C9);e9r=r(iGe,"This class cannot be instantiated directly using "),STe=n(iGe,"CODE",{});var Wwt=s(STe);o9r=r(Wwt,"__init__()"),Wwt.forEach(t),r9r=r(iGe," (throws an error)."),iGe.forEach(t),t9r=i(Vl),Vt=n(Vl,"DIV",{class:!0});var Q6=s(Vt);T(w9.$$.fragment,Q6),a9r=i(Q6),RTe=n(Q6,"P",{});var Qwt=s(RTe);n9r=r(Qwt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Qwt.forEach(t),s9r=i(Q6),Pc=n(Q6,"P",{});var Tee=s(Pc);l9r=r(Tee,`Note:
Loading a model from its configuration file does `),PTe=n(Tee,"STRONG",{});var Hwt=s(PTe);i9r=r(Hwt,"not"),Hwt.forEach(t),d9r=r(Tee,` load the model weights. It only affects the
model\u2019s configuration. Use `),QJ=n(Tee,"A",{href:!0});var Uwt=s(QJ);c9r=r(Uwt,"from_pretrained()"),Uwt.forEach(t),f9r=r(Tee," to load the model weights."),Tee.forEach(t),m9r=i(Q6),T(UE.$$.fragment,Q6),Q6.forEach(t),g9r=i(Vl),Dr=n(Vl,"DIV",{class:!0});var Xl=s(Dr);T(A9.$$.fragment,Xl),h9r=i(Xl),BTe=n(Xl,"P",{});var Jwt=s(BTe);p9r=r(Jwt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Jwt.forEach(t),_9r=i(Xl),pn=n(Xl,"P",{});var H6=s(pn);u9r=r(H6,"The model class to instantiate is selected based on the "),ITe=n(H6,"CODE",{});var Ywt=s(ITe);b9r=r(Ywt,"model_type"),Ywt.forEach(t),v9r=r(H6,` property of the config object (either
passed as an argument or loaded from `),qTe=n(H6,"CODE",{});var Kwt=s(qTe);F9r=r(Kwt,"pretrained_model_name_or_path"),Kwt.forEach(t),T9r=r(H6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),NTe=n(H6,"CODE",{});var Zwt=s(NTe);M9r=r(Zwt,"pretrained_model_name_or_path"),Zwt.forEach(t),E9r=r(H6,":"),H6.forEach(t),C9r=i(Xl),Re=n(Xl,"UL",{});var Xe=s(Re);JE=n(Xe,"LI",{});var QBe=s(JE);jTe=n(QBe,"STRONG",{});var e6t=s(jTe);w9r=r(e6t,"bart"),e6t.forEach(t),A9r=r(QBe," \u2014 "),HJ=n(QBe,"A",{href:!0});var o6t=s(HJ);y9r=r(o6t,"FlaxBartForCausalLM"),o6t.forEach(t),L9r=r(QBe," (BART model)"),QBe.forEach(t),x9r=i(Xe),YE=n(Xe,"LI",{});var HBe=s(YE);DTe=n(HBe,"STRONG",{});var r6t=s(DTe);$9r=r(r6t,"bert"),r6t.forEach(t),k9r=r(HBe," \u2014 "),UJ=n(HBe,"A",{href:!0});var t6t=s(UJ);S9r=r(t6t,"FlaxBertForCausalLM"),t6t.forEach(t),R9r=r(HBe," (BERT model)"),HBe.forEach(t),P9r=i(Xe),KE=n(Xe,"LI",{});var UBe=s(KE);GTe=n(UBe,"STRONG",{});var a6t=s(GTe);B9r=r(a6t,"big_bird"),a6t.forEach(t),I9r=r(UBe," \u2014 "),JJ=n(UBe,"A",{href:!0});var n6t=s(JJ);q9r=r(n6t,"FlaxBigBirdForCausalLM"),n6t.forEach(t),N9r=r(UBe," (BigBird model)"),UBe.forEach(t),j9r=i(Xe),ZE=n(Xe,"LI",{});var JBe=s(ZE);OTe=n(JBe,"STRONG",{});var s6t=s(OTe);D9r=r(s6t,"electra"),s6t.forEach(t),G9r=r(JBe," \u2014 "),YJ=n(JBe,"A",{href:!0});var l6t=s(YJ);O9r=r(l6t,"FlaxElectraForCausalLM"),l6t.forEach(t),V9r=r(JBe," (ELECTRA model)"),JBe.forEach(t),X9r=i(Xe),eC=n(Xe,"LI",{});var YBe=s(eC);VTe=n(YBe,"STRONG",{});var i6t=s(VTe);z9r=r(i6t,"gpt2"),i6t.forEach(t),W9r=r(YBe," \u2014 "),KJ=n(YBe,"A",{href:!0});var d6t=s(KJ);Q9r=r(d6t,"FlaxGPT2LMHeadModel"),d6t.forEach(t),H9r=r(YBe," (OpenAI GPT-2 model)"),YBe.forEach(t),U9r=i(Xe),oC=n(Xe,"LI",{});var KBe=s(oC);XTe=n(KBe,"STRONG",{});var c6t=s(XTe);J9r=r(c6t,"gpt_neo"),c6t.forEach(t),Y9r=r(KBe," \u2014 "),ZJ=n(KBe,"A",{href:!0});var f6t=s(ZJ);K9r=r(f6t,"FlaxGPTNeoForCausalLM"),f6t.forEach(t),Z9r=r(KBe," (GPT Neo model)"),KBe.forEach(t),exr=i(Xe),rC=n(Xe,"LI",{});var ZBe=s(rC);zTe=n(ZBe,"STRONG",{});var m6t=s(zTe);oxr=r(m6t,"gptj"),m6t.forEach(t),rxr=r(ZBe," \u2014 "),eY=n(ZBe,"A",{href:!0});var g6t=s(eY);txr=r(g6t,"FlaxGPTJForCausalLM"),g6t.forEach(t),axr=r(ZBe," (GPT-J model)"),ZBe.forEach(t),nxr=i(Xe),tC=n(Xe,"LI",{});var eIe=s(tC);WTe=n(eIe,"STRONG",{});var h6t=s(WTe);sxr=r(h6t,"roberta"),h6t.forEach(t),lxr=r(eIe," \u2014 "),oY=n(eIe,"A",{href:!0});var p6t=s(oY);ixr=r(p6t,"FlaxRobertaForCausalLM"),p6t.forEach(t),dxr=r(eIe," (RoBERTa model)"),eIe.forEach(t),cxr=i(Xe),aC=n(Xe,"LI",{});var oIe=s(aC);QTe=n(oIe,"STRONG",{});var _6t=s(QTe);fxr=r(_6t,"xglm"),_6t.forEach(t),mxr=r(oIe," \u2014 "),rY=n(oIe,"A",{href:!0});var u6t=s(rY);gxr=r(u6t,"FlaxXGLMForCausalLM"),u6t.forEach(t),hxr=r(oIe," (XGLM model)"),oIe.forEach(t),Xe.forEach(t),pxr=i(Xl),T(nC.$$.fragment,Xl),Xl.forEach(t),Vl.forEach(t),rje=i(f),Bc=n(f,"H2",{class:!0});var dGe=s(Bc);sC=n(dGe,"A",{id:!0,class:!0,href:!0});var b6t=s(sC);HTe=n(b6t,"SPAN",{});var v6t=s(HTe);T(y9.$$.fragment,v6t),v6t.forEach(t),b6t.forEach(t),_xr=i(dGe),UTe=n(dGe,"SPAN",{});var F6t=s(UTe);uxr=r(F6t,"FlaxAutoModelForPreTraining"),F6t.forEach(t),dGe.forEach(t),tje=i(f),gr=n(f,"DIV",{class:!0});var zl=s(gr);T(L9.$$.fragment,zl),bxr=i(zl),Ic=n(zl,"P",{});var Mee=s(Ic);vxr=r(Mee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),tY=n(Mee,"A",{href:!0});var T6t=s(tY);Fxr=r(T6t,"from_pretrained()"),T6t.forEach(t),Txr=r(Mee," class method or the "),aY=n(Mee,"A",{href:!0});var M6t=s(aY);Mxr=r(M6t,"from_config()"),M6t.forEach(t),Exr=r(Mee,` class
method.`),Mee.forEach(t),Cxr=i(zl),x9=n(zl,"P",{});var cGe=s(x9);wxr=r(cGe,"This class cannot be instantiated directly using "),JTe=n(cGe,"CODE",{});var E6t=s(JTe);Axr=r(E6t,"__init__()"),E6t.forEach(t),yxr=r(cGe," (throws an error)."),cGe.forEach(t),Lxr=i(zl),Xt=n(zl,"DIV",{class:!0});var U6=s(Xt);T($9.$$.fragment,U6),xxr=i(U6),YTe=n(U6,"P",{});var C6t=s(YTe);$xr=r(C6t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),C6t.forEach(t),kxr=i(U6),qc=n(U6,"P",{});var Eee=s(qc);Sxr=r(Eee,`Note:
Loading a model from its configuration file does `),KTe=n(Eee,"STRONG",{});var w6t=s(KTe);Rxr=r(w6t,"not"),w6t.forEach(t),Pxr=r(Eee,` load the model weights. It only affects the
model\u2019s configuration. Use `),nY=n(Eee,"A",{href:!0});var A6t=s(nY);Bxr=r(A6t,"from_pretrained()"),A6t.forEach(t),Ixr=r(Eee," to load the model weights."),Eee.forEach(t),qxr=i(U6),T(lC.$$.fragment,U6),U6.forEach(t),Nxr=i(zl),Gr=n(zl,"DIV",{class:!0});var Wl=s(Gr);T(k9.$$.fragment,Wl),jxr=i(Wl),ZTe=n(Wl,"P",{});var y6t=s(ZTe);Dxr=r(y6t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),y6t.forEach(t),Gxr=i(Wl),_n=n(Wl,"P",{});var J6=s(_n);Oxr=r(J6,"The model class to instantiate is selected based on the "),e7e=n(J6,"CODE",{});var L6t=s(e7e);Vxr=r(L6t,"model_type"),L6t.forEach(t),Xxr=r(J6,` property of the config object (either
passed as an argument or loaded from `),o7e=n(J6,"CODE",{});var x6t=s(o7e);zxr=r(x6t,"pretrained_model_name_or_path"),x6t.forEach(t),Wxr=r(J6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r7e=n(J6,"CODE",{});var $6t=s(r7e);Qxr=r($6t,"pretrained_model_name_or_path"),$6t.forEach(t),Hxr=r(J6,":"),J6.forEach(t),Uxr=i(Wl),Ee=n(Wl,"UL",{});var we=s(Ee);iC=n(we,"LI",{});var rIe=s(iC);t7e=n(rIe,"STRONG",{});var k6t=s(t7e);Jxr=r(k6t,"albert"),k6t.forEach(t),Yxr=r(rIe," \u2014 "),sY=n(rIe,"A",{href:!0});var S6t=s(sY);Kxr=r(S6t,"FlaxAlbertForPreTraining"),S6t.forEach(t),Zxr=r(rIe," (ALBERT model)"),rIe.forEach(t),e$r=i(we),dC=n(we,"LI",{});var tIe=s(dC);a7e=n(tIe,"STRONG",{});var R6t=s(a7e);o$r=r(R6t,"bart"),R6t.forEach(t),r$r=r(tIe," \u2014 "),lY=n(tIe,"A",{href:!0});var P6t=s(lY);t$r=r(P6t,"FlaxBartForConditionalGeneration"),P6t.forEach(t),a$r=r(tIe," (BART model)"),tIe.forEach(t),n$r=i(we),cC=n(we,"LI",{});var aIe=s(cC);n7e=n(aIe,"STRONG",{});var B6t=s(n7e);s$r=r(B6t,"bert"),B6t.forEach(t),l$r=r(aIe," \u2014 "),iY=n(aIe,"A",{href:!0});var I6t=s(iY);i$r=r(I6t,"FlaxBertForPreTraining"),I6t.forEach(t),d$r=r(aIe," (BERT model)"),aIe.forEach(t),c$r=i(we),fC=n(we,"LI",{});var nIe=s(fC);s7e=n(nIe,"STRONG",{});var q6t=s(s7e);f$r=r(q6t,"big_bird"),q6t.forEach(t),m$r=r(nIe," \u2014 "),dY=n(nIe,"A",{href:!0});var N6t=s(dY);g$r=r(N6t,"FlaxBigBirdForPreTraining"),N6t.forEach(t),h$r=r(nIe," (BigBird model)"),nIe.forEach(t),p$r=i(we),mC=n(we,"LI",{});var sIe=s(mC);l7e=n(sIe,"STRONG",{});var j6t=s(l7e);_$r=r(j6t,"electra"),j6t.forEach(t),u$r=r(sIe," \u2014 "),cY=n(sIe,"A",{href:!0});var D6t=s(cY);b$r=r(D6t,"FlaxElectraForPreTraining"),D6t.forEach(t),v$r=r(sIe," (ELECTRA model)"),sIe.forEach(t),F$r=i(we),gC=n(we,"LI",{});var lIe=s(gC);i7e=n(lIe,"STRONG",{});var G6t=s(i7e);T$r=r(G6t,"mbart"),G6t.forEach(t),M$r=r(lIe," \u2014 "),fY=n(lIe,"A",{href:!0});var O6t=s(fY);E$r=r(O6t,"FlaxMBartForConditionalGeneration"),O6t.forEach(t),C$r=r(lIe," (mBART model)"),lIe.forEach(t),w$r=i(we),hC=n(we,"LI",{});var iIe=s(hC);d7e=n(iIe,"STRONG",{});var V6t=s(d7e);A$r=r(V6t,"mt5"),V6t.forEach(t),y$r=r(iIe," \u2014 "),mY=n(iIe,"A",{href:!0});var X6t=s(mY);L$r=r(X6t,"FlaxMT5ForConditionalGeneration"),X6t.forEach(t),x$r=r(iIe," (mT5 model)"),iIe.forEach(t),$$r=i(we),pC=n(we,"LI",{});var dIe=s(pC);c7e=n(dIe,"STRONG",{});var z6t=s(c7e);k$r=r(z6t,"roberta"),z6t.forEach(t),S$r=r(dIe," \u2014 "),gY=n(dIe,"A",{href:!0});var W6t=s(gY);R$r=r(W6t,"FlaxRobertaForMaskedLM"),W6t.forEach(t),P$r=r(dIe," (RoBERTa model)"),dIe.forEach(t),B$r=i(we),_C=n(we,"LI",{});var cIe=s(_C);f7e=n(cIe,"STRONG",{});var Q6t=s(f7e);I$r=r(Q6t,"roformer"),Q6t.forEach(t),q$r=r(cIe," \u2014 "),hY=n(cIe,"A",{href:!0});var H6t=s(hY);N$r=r(H6t,"FlaxRoFormerForMaskedLM"),H6t.forEach(t),j$r=r(cIe," (RoFormer model)"),cIe.forEach(t),D$r=i(we),uC=n(we,"LI",{});var fIe=s(uC);m7e=n(fIe,"STRONG",{});var U6t=s(m7e);G$r=r(U6t,"t5"),U6t.forEach(t),O$r=r(fIe," \u2014 "),pY=n(fIe,"A",{href:!0});var J6t=s(pY);V$r=r(J6t,"FlaxT5ForConditionalGeneration"),J6t.forEach(t),X$r=r(fIe," (T5 model)"),fIe.forEach(t),z$r=i(we),bC=n(we,"LI",{});var mIe=s(bC);g7e=n(mIe,"STRONG",{});var Y6t=s(g7e);W$r=r(Y6t,"wav2vec2"),Y6t.forEach(t),Q$r=r(mIe," \u2014 "),_Y=n(mIe,"A",{href:!0});var K6t=s(_Y);H$r=r(K6t,"FlaxWav2Vec2ForPreTraining"),K6t.forEach(t),U$r=r(mIe," (Wav2Vec2 model)"),mIe.forEach(t),J$r=i(we),vC=n(we,"LI",{});var gIe=s(vC);h7e=n(gIe,"STRONG",{});var Z6t=s(h7e);Y$r=r(Z6t,"xlm-roberta"),Z6t.forEach(t),K$r=r(gIe," \u2014 "),uY=n(gIe,"A",{href:!0});var eAt=s(uY);Z$r=r(eAt,"FlaxXLMRobertaForMaskedLM"),eAt.forEach(t),ekr=r(gIe," (XLM-RoBERTa model)"),gIe.forEach(t),we.forEach(t),okr=i(Wl),T(FC.$$.fragment,Wl),Wl.forEach(t),zl.forEach(t),aje=i(f),Nc=n(f,"H2",{class:!0});var fGe=s(Nc);TC=n(fGe,"A",{id:!0,class:!0,href:!0});var oAt=s(TC);p7e=n(oAt,"SPAN",{});var rAt=s(p7e);T(S9.$$.fragment,rAt),rAt.forEach(t),oAt.forEach(t),rkr=i(fGe),_7e=n(fGe,"SPAN",{});var tAt=s(_7e);tkr=r(tAt,"FlaxAutoModelForMaskedLM"),tAt.forEach(t),fGe.forEach(t),nje=i(f),hr=n(f,"DIV",{class:!0});var Ql=s(hr);T(R9.$$.fragment,Ql),akr=i(Ql),jc=n(Ql,"P",{});var Cee=s(jc);nkr=r(Cee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),bY=n(Cee,"A",{href:!0});var aAt=s(bY);skr=r(aAt,"from_pretrained()"),aAt.forEach(t),lkr=r(Cee," class method or the "),vY=n(Cee,"A",{href:!0});var nAt=s(vY);ikr=r(nAt,"from_config()"),nAt.forEach(t),dkr=r(Cee,` class
method.`),Cee.forEach(t),ckr=i(Ql),P9=n(Ql,"P",{});var mGe=s(P9);fkr=r(mGe,"This class cannot be instantiated directly using "),u7e=n(mGe,"CODE",{});var sAt=s(u7e);mkr=r(sAt,"__init__()"),sAt.forEach(t),gkr=r(mGe," (throws an error)."),mGe.forEach(t),hkr=i(Ql),zt=n(Ql,"DIV",{class:!0});var Y6=s(zt);T(B9.$$.fragment,Y6),pkr=i(Y6),b7e=n(Y6,"P",{});var lAt=s(b7e);_kr=r(lAt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),lAt.forEach(t),ukr=i(Y6),Dc=n(Y6,"P",{});var wee=s(Dc);bkr=r(wee,`Note:
Loading a model from its configuration file does `),v7e=n(wee,"STRONG",{});var iAt=s(v7e);vkr=r(iAt,"not"),iAt.forEach(t),Fkr=r(wee,` load the model weights. It only affects the
model\u2019s configuration. Use `),FY=n(wee,"A",{href:!0});var dAt=s(FY);Tkr=r(dAt,"from_pretrained()"),dAt.forEach(t),Mkr=r(wee," to load the model weights."),wee.forEach(t),Ekr=i(Y6),T(MC.$$.fragment,Y6),Y6.forEach(t),Ckr=i(Ql),Or=n(Ql,"DIV",{class:!0});var Hl=s(Or);T(I9.$$.fragment,Hl),wkr=i(Hl),F7e=n(Hl,"P",{});var cAt=s(F7e);Akr=r(cAt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),cAt.forEach(t),ykr=i(Hl),un=n(Hl,"P",{});var K6=s(un);Lkr=r(K6,"The model class to instantiate is selected based on the "),T7e=n(K6,"CODE",{});var fAt=s(T7e);xkr=r(fAt,"model_type"),fAt.forEach(t),$kr=r(K6,` property of the config object (either
passed as an argument or loaded from `),M7e=n(K6,"CODE",{});var mAt=s(M7e);kkr=r(mAt,"pretrained_model_name_or_path"),mAt.forEach(t),Skr=r(K6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E7e=n(K6,"CODE",{});var gAt=s(E7e);Rkr=r(gAt,"pretrained_model_name_or_path"),gAt.forEach(t),Pkr=r(K6,":"),K6.forEach(t),Bkr=i(Hl),Le=n(Hl,"UL",{});var Ie=s(Le);EC=n(Ie,"LI",{});var hIe=s(EC);C7e=n(hIe,"STRONG",{});var hAt=s(C7e);Ikr=r(hAt,"albert"),hAt.forEach(t),qkr=r(hIe," \u2014 "),TY=n(hIe,"A",{href:!0});var pAt=s(TY);Nkr=r(pAt,"FlaxAlbertForMaskedLM"),pAt.forEach(t),jkr=r(hIe," (ALBERT model)"),hIe.forEach(t),Dkr=i(Ie),CC=n(Ie,"LI",{});var pIe=s(CC);w7e=n(pIe,"STRONG",{});var _At=s(w7e);Gkr=r(_At,"bart"),_At.forEach(t),Okr=r(pIe," \u2014 "),MY=n(pIe,"A",{href:!0});var uAt=s(MY);Vkr=r(uAt,"FlaxBartForConditionalGeneration"),uAt.forEach(t),Xkr=r(pIe," (BART model)"),pIe.forEach(t),zkr=i(Ie),wC=n(Ie,"LI",{});var _Ie=s(wC);A7e=n(_Ie,"STRONG",{});var bAt=s(A7e);Wkr=r(bAt,"bert"),bAt.forEach(t),Qkr=r(_Ie," \u2014 "),EY=n(_Ie,"A",{href:!0});var vAt=s(EY);Hkr=r(vAt,"FlaxBertForMaskedLM"),vAt.forEach(t),Ukr=r(_Ie," (BERT model)"),_Ie.forEach(t),Jkr=i(Ie),AC=n(Ie,"LI",{});var uIe=s(AC);y7e=n(uIe,"STRONG",{});var FAt=s(y7e);Ykr=r(FAt,"big_bird"),FAt.forEach(t),Kkr=r(uIe," \u2014 "),CY=n(uIe,"A",{href:!0});var TAt=s(CY);Zkr=r(TAt,"FlaxBigBirdForMaskedLM"),TAt.forEach(t),eSr=r(uIe," (BigBird model)"),uIe.forEach(t),oSr=i(Ie),yC=n(Ie,"LI",{});var bIe=s(yC);L7e=n(bIe,"STRONG",{});var MAt=s(L7e);rSr=r(MAt,"distilbert"),MAt.forEach(t),tSr=r(bIe," \u2014 "),wY=n(bIe,"A",{href:!0});var EAt=s(wY);aSr=r(EAt,"FlaxDistilBertForMaskedLM"),EAt.forEach(t),nSr=r(bIe," (DistilBERT model)"),bIe.forEach(t),sSr=i(Ie),LC=n(Ie,"LI",{});var vIe=s(LC);x7e=n(vIe,"STRONG",{});var CAt=s(x7e);lSr=r(CAt,"electra"),CAt.forEach(t),iSr=r(vIe," \u2014 "),AY=n(vIe,"A",{href:!0});var wAt=s(AY);dSr=r(wAt,"FlaxElectraForMaskedLM"),wAt.forEach(t),cSr=r(vIe," (ELECTRA model)"),vIe.forEach(t),fSr=i(Ie),xC=n(Ie,"LI",{});var FIe=s(xC);$7e=n(FIe,"STRONG",{});var AAt=s($7e);mSr=r(AAt,"mbart"),AAt.forEach(t),gSr=r(FIe," \u2014 "),yY=n(FIe,"A",{href:!0});var yAt=s(yY);hSr=r(yAt,"FlaxMBartForConditionalGeneration"),yAt.forEach(t),pSr=r(FIe," (mBART model)"),FIe.forEach(t),_Sr=i(Ie),$C=n(Ie,"LI",{});var TIe=s($C);k7e=n(TIe,"STRONG",{});var LAt=s(k7e);uSr=r(LAt,"roberta"),LAt.forEach(t),bSr=r(TIe," \u2014 "),LY=n(TIe,"A",{href:!0});var xAt=s(LY);vSr=r(xAt,"FlaxRobertaForMaskedLM"),xAt.forEach(t),FSr=r(TIe," (RoBERTa model)"),TIe.forEach(t),TSr=i(Ie),kC=n(Ie,"LI",{});var MIe=s(kC);S7e=n(MIe,"STRONG",{});var $At=s(S7e);MSr=r($At,"roformer"),$At.forEach(t),ESr=r(MIe," \u2014 "),xY=n(MIe,"A",{href:!0});var kAt=s(xY);CSr=r(kAt,"FlaxRoFormerForMaskedLM"),kAt.forEach(t),wSr=r(MIe," (RoFormer model)"),MIe.forEach(t),ASr=i(Ie),SC=n(Ie,"LI",{});var EIe=s(SC);R7e=n(EIe,"STRONG",{});var SAt=s(R7e);ySr=r(SAt,"xlm-roberta"),SAt.forEach(t),LSr=r(EIe," \u2014 "),$Y=n(EIe,"A",{href:!0});var RAt=s($Y);xSr=r(RAt,"FlaxXLMRobertaForMaskedLM"),RAt.forEach(t),$Sr=r(EIe," (XLM-RoBERTa model)"),EIe.forEach(t),Ie.forEach(t),kSr=i(Hl),T(RC.$$.fragment,Hl),Hl.forEach(t),Ql.forEach(t),sje=i(f),Gc=n(f,"H2",{class:!0});var gGe=s(Gc);PC=n(gGe,"A",{id:!0,class:!0,href:!0});var PAt=s(PC);P7e=n(PAt,"SPAN",{});var BAt=s(P7e);T(q9.$$.fragment,BAt),BAt.forEach(t),PAt.forEach(t),SSr=i(gGe),B7e=n(gGe,"SPAN",{});var IAt=s(B7e);RSr=r(IAt,"FlaxAutoModelForSeq2SeqLM"),IAt.forEach(t),gGe.forEach(t),lje=i(f),pr=n(f,"DIV",{class:!0});var Ul=s(pr);T(N9.$$.fragment,Ul),PSr=i(Ul),Oc=n(Ul,"P",{});var Aee=s(Oc);BSr=r(Aee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),kY=n(Aee,"A",{href:!0});var qAt=s(kY);ISr=r(qAt,"from_pretrained()"),qAt.forEach(t),qSr=r(Aee," class method or the "),SY=n(Aee,"A",{href:!0});var NAt=s(SY);NSr=r(NAt,"from_config()"),NAt.forEach(t),jSr=r(Aee,` class
method.`),Aee.forEach(t),DSr=i(Ul),j9=n(Ul,"P",{});var hGe=s(j9);GSr=r(hGe,"This class cannot be instantiated directly using "),I7e=n(hGe,"CODE",{});var jAt=s(I7e);OSr=r(jAt,"__init__()"),jAt.forEach(t),VSr=r(hGe," (throws an error)."),hGe.forEach(t),XSr=i(Ul),Wt=n(Ul,"DIV",{class:!0});var Z6=s(Wt);T(D9.$$.fragment,Z6),zSr=i(Z6),q7e=n(Z6,"P",{});var DAt=s(q7e);WSr=r(DAt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),DAt.forEach(t),QSr=i(Z6),Vc=n(Z6,"P",{});var yee=s(Vc);HSr=r(yee,`Note:
Loading a model from its configuration file does `),N7e=n(yee,"STRONG",{});var GAt=s(N7e);USr=r(GAt,"not"),GAt.forEach(t),JSr=r(yee,` load the model weights. It only affects the
model\u2019s configuration. Use `),RY=n(yee,"A",{href:!0});var OAt=s(RY);YSr=r(OAt,"from_pretrained()"),OAt.forEach(t),KSr=r(yee," to load the model weights."),yee.forEach(t),ZSr=i(Z6),T(BC.$$.fragment,Z6),Z6.forEach(t),eRr=i(Ul),Vr=n(Ul,"DIV",{class:!0});var Jl=s(Vr);T(G9.$$.fragment,Jl),oRr=i(Jl),j7e=n(Jl,"P",{});var VAt=s(j7e);rRr=r(VAt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),VAt.forEach(t),tRr=i(Jl),bn=n(Jl,"P",{});var eA=s(bn);aRr=r(eA,"The model class to instantiate is selected based on the "),D7e=n(eA,"CODE",{});var XAt=s(D7e);nRr=r(XAt,"model_type"),XAt.forEach(t),sRr=r(eA,` property of the config object (either
passed as an argument or loaded from `),G7e=n(eA,"CODE",{});var zAt=s(G7e);lRr=r(zAt,"pretrained_model_name_or_path"),zAt.forEach(t),iRr=r(eA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O7e=n(eA,"CODE",{});var WAt=s(O7e);dRr=r(WAt,"pretrained_model_name_or_path"),WAt.forEach(t),cRr=r(eA,":"),eA.forEach(t),fRr=i(Jl),Pe=n(Jl,"UL",{});var ze=s(Pe);IC=n(ze,"LI",{});var CIe=s(IC);V7e=n(CIe,"STRONG",{});var QAt=s(V7e);mRr=r(QAt,"bart"),QAt.forEach(t),gRr=r(CIe," \u2014 "),PY=n(CIe,"A",{href:!0});var HAt=s(PY);hRr=r(HAt,"FlaxBartForConditionalGeneration"),HAt.forEach(t),pRr=r(CIe," (BART model)"),CIe.forEach(t),_Rr=i(ze),qC=n(ze,"LI",{});var wIe=s(qC);X7e=n(wIe,"STRONG",{});var UAt=s(X7e);uRr=r(UAt,"blenderbot"),UAt.forEach(t),bRr=r(wIe," \u2014 "),BY=n(wIe,"A",{href:!0});var JAt=s(BY);vRr=r(JAt,"FlaxBlenderbotForConditionalGeneration"),JAt.forEach(t),FRr=r(wIe," (Blenderbot model)"),wIe.forEach(t),TRr=i(ze),NC=n(ze,"LI",{});var AIe=s(NC);z7e=n(AIe,"STRONG",{});var YAt=s(z7e);MRr=r(YAt,"blenderbot-small"),YAt.forEach(t),ERr=r(AIe," \u2014 "),IY=n(AIe,"A",{href:!0});var KAt=s(IY);CRr=r(KAt,"FlaxBlenderbotSmallForConditionalGeneration"),KAt.forEach(t),wRr=r(AIe," (BlenderbotSmall model)"),AIe.forEach(t),ARr=i(ze),jC=n(ze,"LI",{});var yIe=s(jC);W7e=n(yIe,"STRONG",{});var ZAt=s(W7e);yRr=r(ZAt,"encoder-decoder"),ZAt.forEach(t),LRr=r(yIe," \u2014 "),qY=n(yIe,"A",{href:!0});var eyt=s(qY);xRr=r(eyt,"FlaxEncoderDecoderModel"),eyt.forEach(t),$Rr=r(yIe," (Encoder decoder model)"),yIe.forEach(t),kRr=i(ze),DC=n(ze,"LI",{});var LIe=s(DC);Q7e=n(LIe,"STRONG",{});var oyt=s(Q7e);SRr=r(oyt,"marian"),oyt.forEach(t),RRr=r(LIe," \u2014 "),NY=n(LIe,"A",{href:!0});var ryt=s(NY);PRr=r(ryt,"FlaxMarianMTModel"),ryt.forEach(t),BRr=r(LIe," (Marian model)"),LIe.forEach(t),IRr=i(ze),GC=n(ze,"LI",{});var xIe=s(GC);H7e=n(xIe,"STRONG",{});var tyt=s(H7e);qRr=r(tyt,"mbart"),tyt.forEach(t),NRr=r(xIe," \u2014 "),jY=n(xIe,"A",{href:!0});var ayt=s(jY);jRr=r(ayt,"FlaxMBartForConditionalGeneration"),ayt.forEach(t),DRr=r(xIe," (mBART model)"),xIe.forEach(t),GRr=i(ze),OC=n(ze,"LI",{});var $Ie=s(OC);U7e=n($Ie,"STRONG",{});var nyt=s(U7e);ORr=r(nyt,"mt5"),nyt.forEach(t),VRr=r($Ie," \u2014 "),DY=n($Ie,"A",{href:!0});var syt=s(DY);XRr=r(syt,"FlaxMT5ForConditionalGeneration"),syt.forEach(t),zRr=r($Ie," (mT5 model)"),$Ie.forEach(t),WRr=i(ze),VC=n(ze,"LI",{});var kIe=s(VC);J7e=n(kIe,"STRONG",{});var lyt=s(J7e);QRr=r(lyt,"pegasus"),lyt.forEach(t),HRr=r(kIe," \u2014 "),GY=n(kIe,"A",{href:!0});var iyt=s(GY);URr=r(iyt,"FlaxPegasusForConditionalGeneration"),iyt.forEach(t),JRr=r(kIe," (Pegasus model)"),kIe.forEach(t),YRr=i(ze),XC=n(ze,"LI",{});var SIe=s(XC);Y7e=n(SIe,"STRONG",{});var dyt=s(Y7e);KRr=r(dyt,"t5"),dyt.forEach(t),ZRr=r(SIe," \u2014 "),OY=n(SIe,"A",{href:!0});var cyt=s(OY);ePr=r(cyt,"FlaxT5ForConditionalGeneration"),cyt.forEach(t),oPr=r(SIe," (T5 model)"),SIe.forEach(t),ze.forEach(t),rPr=i(Jl),T(zC.$$.fragment,Jl),Jl.forEach(t),Ul.forEach(t),ije=i(f),Xc=n(f,"H2",{class:!0});var pGe=s(Xc);WC=n(pGe,"A",{id:!0,class:!0,href:!0});var fyt=s(WC);K7e=n(fyt,"SPAN",{});var myt=s(K7e);T(O9.$$.fragment,myt),myt.forEach(t),fyt.forEach(t),tPr=i(pGe),Z7e=n(pGe,"SPAN",{});var gyt=s(Z7e);aPr=r(gyt,"FlaxAutoModelForSequenceClassification"),gyt.forEach(t),pGe.forEach(t),dje=i(f),_r=n(f,"DIV",{class:!0});var Yl=s(_r);T(V9.$$.fragment,Yl),nPr=i(Yl),zc=n(Yl,"P",{});var Lee=s(zc);sPr=r(Lee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),VY=n(Lee,"A",{href:!0});var hyt=s(VY);lPr=r(hyt,"from_pretrained()"),hyt.forEach(t),iPr=r(Lee," class method or the "),XY=n(Lee,"A",{href:!0});var pyt=s(XY);dPr=r(pyt,"from_config()"),pyt.forEach(t),cPr=r(Lee,` class
method.`),Lee.forEach(t),fPr=i(Yl),X9=n(Yl,"P",{});var _Ge=s(X9);mPr=r(_Ge,"This class cannot be instantiated directly using "),eMe=n(_Ge,"CODE",{});var _yt=s(eMe);gPr=r(_yt,"__init__()"),_yt.forEach(t),hPr=r(_Ge," (throws an error)."),_Ge.forEach(t),pPr=i(Yl),Qt=n(Yl,"DIV",{class:!0});var oA=s(Qt);T(z9.$$.fragment,oA),_Pr=i(oA),oMe=n(oA,"P",{});var uyt=s(oMe);uPr=r(uyt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),uyt.forEach(t),bPr=i(oA),Wc=n(oA,"P",{});var xee=s(Wc);vPr=r(xee,`Note:
Loading a model from its configuration file does `),rMe=n(xee,"STRONG",{});var byt=s(rMe);FPr=r(byt,"not"),byt.forEach(t),TPr=r(xee,` load the model weights. It only affects the
model\u2019s configuration. Use `),zY=n(xee,"A",{href:!0});var vyt=s(zY);MPr=r(vyt,"from_pretrained()"),vyt.forEach(t),EPr=r(xee," to load the model weights."),xee.forEach(t),CPr=i(oA),T(QC.$$.fragment,oA),oA.forEach(t),wPr=i(Yl),Xr=n(Yl,"DIV",{class:!0});var Kl=s(Xr);T(W9.$$.fragment,Kl),APr=i(Kl),tMe=n(Kl,"P",{});var Fyt=s(tMe);yPr=r(Fyt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Fyt.forEach(t),LPr=i(Kl),vn=n(Kl,"P",{});var rA=s(vn);xPr=r(rA,"The model class to instantiate is selected based on the "),aMe=n(rA,"CODE",{});var Tyt=s(aMe);$Pr=r(Tyt,"model_type"),Tyt.forEach(t),kPr=r(rA,` property of the config object (either
passed as an argument or loaded from `),nMe=n(rA,"CODE",{});var Myt=s(nMe);SPr=r(Myt,"pretrained_model_name_or_path"),Myt.forEach(t),RPr=r(rA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sMe=n(rA,"CODE",{});var Eyt=s(sMe);PPr=r(Eyt,"pretrained_model_name_or_path"),Eyt.forEach(t),BPr=r(rA,":"),rA.forEach(t),IPr=i(Kl),xe=n(Kl,"UL",{});var qe=s(xe);HC=n(qe,"LI",{});var RIe=s(HC);lMe=n(RIe,"STRONG",{});var Cyt=s(lMe);qPr=r(Cyt,"albert"),Cyt.forEach(t),NPr=r(RIe," \u2014 "),WY=n(RIe,"A",{href:!0});var wyt=s(WY);jPr=r(wyt,"FlaxAlbertForSequenceClassification"),wyt.forEach(t),DPr=r(RIe," (ALBERT model)"),RIe.forEach(t),GPr=i(qe),UC=n(qe,"LI",{});var PIe=s(UC);iMe=n(PIe,"STRONG",{});var Ayt=s(iMe);OPr=r(Ayt,"bart"),Ayt.forEach(t),VPr=r(PIe," \u2014 "),QY=n(PIe,"A",{href:!0});var yyt=s(QY);XPr=r(yyt,"FlaxBartForSequenceClassification"),yyt.forEach(t),zPr=r(PIe," (BART model)"),PIe.forEach(t),WPr=i(qe),JC=n(qe,"LI",{});var BIe=s(JC);dMe=n(BIe,"STRONG",{});var Lyt=s(dMe);QPr=r(Lyt,"bert"),Lyt.forEach(t),HPr=r(BIe," \u2014 "),HY=n(BIe,"A",{href:!0});var xyt=s(HY);UPr=r(xyt,"FlaxBertForSequenceClassification"),xyt.forEach(t),JPr=r(BIe," (BERT model)"),BIe.forEach(t),YPr=i(qe),YC=n(qe,"LI",{});var IIe=s(YC);cMe=n(IIe,"STRONG",{});var $yt=s(cMe);KPr=r($yt,"big_bird"),$yt.forEach(t),ZPr=r(IIe," \u2014 "),UY=n(IIe,"A",{href:!0});var kyt=s(UY);eBr=r(kyt,"FlaxBigBirdForSequenceClassification"),kyt.forEach(t),oBr=r(IIe," (BigBird model)"),IIe.forEach(t),rBr=i(qe),KC=n(qe,"LI",{});var qIe=s(KC);fMe=n(qIe,"STRONG",{});var Syt=s(fMe);tBr=r(Syt,"distilbert"),Syt.forEach(t),aBr=r(qIe," \u2014 "),JY=n(qIe,"A",{href:!0});var Ryt=s(JY);nBr=r(Ryt,"FlaxDistilBertForSequenceClassification"),Ryt.forEach(t),sBr=r(qIe," (DistilBERT model)"),qIe.forEach(t),lBr=i(qe),ZC=n(qe,"LI",{});var NIe=s(ZC);mMe=n(NIe,"STRONG",{});var Pyt=s(mMe);iBr=r(Pyt,"electra"),Pyt.forEach(t),dBr=r(NIe," \u2014 "),YY=n(NIe,"A",{href:!0});var Byt=s(YY);cBr=r(Byt,"FlaxElectraForSequenceClassification"),Byt.forEach(t),fBr=r(NIe," (ELECTRA model)"),NIe.forEach(t),mBr=i(qe),e3=n(qe,"LI",{});var jIe=s(e3);gMe=n(jIe,"STRONG",{});var Iyt=s(gMe);gBr=r(Iyt,"mbart"),Iyt.forEach(t),hBr=r(jIe," \u2014 "),KY=n(jIe,"A",{href:!0});var qyt=s(KY);pBr=r(qyt,"FlaxMBartForSequenceClassification"),qyt.forEach(t),_Br=r(jIe," (mBART model)"),jIe.forEach(t),uBr=i(qe),o3=n(qe,"LI",{});var DIe=s(o3);hMe=n(DIe,"STRONG",{});var Nyt=s(hMe);bBr=r(Nyt,"roberta"),Nyt.forEach(t),vBr=r(DIe," \u2014 "),ZY=n(DIe,"A",{href:!0});var jyt=s(ZY);FBr=r(jyt,"FlaxRobertaForSequenceClassification"),jyt.forEach(t),TBr=r(DIe," (RoBERTa model)"),DIe.forEach(t),MBr=i(qe),r3=n(qe,"LI",{});var GIe=s(r3);pMe=n(GIe,"STRONG",{});var Dyt=s(pMe);EBr=r(Dyt,"roformer"),Dyt.forEach(t),CBr=r(GIe," \u2014 "),eK=n(GIe,"A",{href:!0});var Gyt=s(eK);wBr=r(Gyt,"FlaxRoFormerForSequenceClassification"),Gyt.forEach(t),ABr=r(GIe," (RoFormer model)"),GIe.forEach(t),yBr=i(qe),t3=n(qe,"LI",{});var OIe=s(t3);_Me=n(OIe,"STRONG",{});var Oyt=s(_Me);LBr=r(Oyt,"xlm-roberta"),Oyt.forEach(t),xBr=r(OIe," \u2014 "),oK=n(OIe,"A",{href:!0});var Vyt=s(oK);$Br=r(Vyt,"FlaxXLMRobertaForSequenceClassification"),Vyt.forEach(t),kBr=r(OIe," (XLM-RoBERTa model)"),OIe.forEach(t),qe.forEach(t),SBr=i(Kl),T(a3.$$.fragment,Kl),Kl.forEach(t),Yl.forEach(t),cje=i(f),Qc=n(f,"H2",{class:!0});var uGe=s(Qc);n3=n(uGe,"A",{id:!0,class:!0,href:!0});var Xyt=s(n3);uMe=n(Xyt,"SPAN",{});var zyt=s(uMe);T(Q9.$$.fragment,zyt),zyt.forEach(t),Xyt.forEach(t),RBr=i(uGe),bMe=n(uGe,"SPAN",{});var Wyt=s(bMe);PBr=r(Wyt,"FlaxAutoModelForQuestionAnswering"),Wyt.forEach(t),uGe.forEach(t),fje=i(f),ur=n(f,"DIV",{class:!0});var Zl=s(ur);T(H9.$$.fragment,Zl),BBr=i(Zl),Hc=n(Zl,"P",{});var $ee=s(Hc);IBr=r($ee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),rK=n($ee,"A",{href:!0});var Qyt=s(rK);qBr=r(Qyt,"from_pretrained()"),Qyt.forEach(t),NBr=r($ee," class method or the "),tK=n($ee,"A",{href:!0});var Hyt=s(tK);jBr=r(Hyt,"from_config()"),Hyt.forEach(t),DBr=r($ee,` class
method.`),$ee.forEach(t),GBr=i(Zl),U9=n(Zl,"P",{});var bGe=s(U9);OBr=r(bGe,"This class cannot be instantiated directly using "),vMe=n(bGe,"CODE",{});var Uyt=s(vMe);VBr=r(Uyt,"__init__()"),Uyt.forEach(t),XBr=r(bGe," (throws an error)."),bGe.forEach(t),zBr=i(Zl),Ht=n(Zl,"DIV",{class:!0});var tA=s(Ht);T(J9.$$.fragment,tA),WBr=i(tA),FMe=n(tA,"P",{});var Jyt=s(FMe);QBr=r(Jyt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Jyt.forEach(t),HBr=i(tA),Uc=n(tA,"P",{});var kee=s(Uc);UBr=r(kee,`Note:
Loading a model from its configuration file does `),TMe=n(kee,"STRONG",{});var Yyt=s(TMe);JBr=r(Yyt,"not"),Yyt.forEach(t),YBr=r(kee,` load the model weights. It only affects the
model\u2019s configuration. Use `),aK=n(kee,"A",{href:!0});var Kyt=s(aK);KBr=r(Kyt,"from_pretrained()"),Kyt.forEach(t),ZBr=r(kee," to load the model weights."),kee.forEach(t),eIr=i(tA),T(s3.$$.fragment,tA),tA.forEach(t),oIr=i(Zl),zr=n(Zl,"DIV",{class:!0});var ei=s(zr);T(Y9.$$.fragment,ei),rIr=i(ei),MMe=n(ei,"P",{});var Zyt=s(MMe);tIr=r(Zyt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Zyt.forEach(t),aIr=i(ei),Fn=n(ei,"P",{});var aA=s(Fn);nIr=r(aA,"The model class to instantiate is selected based on the "),EMe=n(aA,"CODE",{});var e8t=s(EMe);sIr=r(e8t,"model_type"),e8t.forEach(t),lIr=r(aA,` property of the config object (either
passed as an argument or loaded from `),CMe=n(aA,"CODE",{});var o8t=s(CMe);iIr=r(o8t,"pretrained_model_name_or_path"),o8t.forEach(t),dIr=r(aA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wMe=n(aA,"CODE",{});var r8t=s(wMe);cIr=r(r8t,"pretrained_model_name_or_path"),r8t.forEach(t),fIr=r(aA,":"),aA.forEach(t),mIr=i(ei),$e=n(ei,"UL",{});var Ne=s($e);l3=n(Ne,"LI",{});var VIe=s(l3);AMe=n(VIe,"STRONG",{});var t8t=s(AMe);gIr=r(t8t,"albert"),t8t.forEach(t),hIr=r(VIe," \u2014 "),nK=n(VIe,"A",{href:!0});var a8t=s(nK);pIr=r(a8t,"FlaxAlbertForQuestionAnswering"),a8t.forEach(t),_Ir=r(VIe," (ALBERT model)"),VIe.forEach(t),uIr=i(Ne),i3=n(Ne,"LI",{});var XIe=s(i3);yMe=n(XIe,"STRONG",{});var n8t=s(yMe);bIr=r(n8t,"bart"),n8t.forEach(t),vIr=r(XIe," \u2014 "),sK=n(XIe,"A",{href:!0});var s8t=s(sK);FIr=r(s8t,"FlaxBartForQuestionAnswering"),s8t.forEach(t),TIr=r(XIe," (BART model)"),XIe.forEach(t),MIr=i(Ne),d3=n(Ne,"LI",{});var zIe=s(d3);LMe=n(zIe,"STRONG",{});var l8t=s(LMe);EIr=r(l8t,"bert"),l8t.forEach(t),CIr=r(zIe," \u2014 "),lK=n(zIe,"A",{href:!0});var i8t=s(lK);wIr=r(i8t,"FlaxBertForQuestionAnswering"),i8t.forEach(t),AIr=r(zIe," (BERT model)"),zIe.forEach(t),yIr=i(Ne),c3=n(Ne,"LI",{});var WIe=s(c3);xMe=n(WIe,"STRONG",{});var d8t=s(xMe);LIr=r(d8t,"big_bird"),d8t.forEach(t),xIr=r(WIe," \u2014 "),iK=n(WIe,"A",{href:!0});var c8t=s(iK);$Ir=r(c8t,"FlaxBigBirdForQuestionAnswering"),c8t.forEach(t),kIr=r(WIe," (BigBird model)"),WIe.forEach(t),SIr=i(Ne),f3=n(Ne,"LI",{});var QIe=s(f3);$Me=n(QIe,"STRONG",{});var f8t=s($Me);RIr=r(f8t,"distilbert"),f8t.forEach(t),PIr=r(QIe," \u2014 "),dK=n(QIe,"A",{href:!0});var m8t=s(dK);BIr=r(m8t,"FlaxDistilBertForQuestionAnswering"),m8t.forEach(t),IIr=r(QIe," (DistilBERT model)"),QIe.forEach(t),qIr=i(Ne),m3=n(Ne,"LI",{});var HIe=s(m3);kMe=n(HIe,"STRONG",{});var g8t=s(kMe);NIr=r(g8t,"electra"),g8t.forEach(t),jIr=r(HIe," \u2014 "),cK=n(HIe,"A",{href:!0});var h8t=s(cK);DIr=r(h8t,"FlaxElectraForQuestionAnswering"),h8t.forEach(t),GIr=r(HIe," (ELECTRA model)"),HIe.forEach(t),OIr=i(Ne),g3=n(Ne,"LI",{});var UIe=s(g3);SMe=n(UIe,"STRONG",{});var p8t=s(SMe);VIr=r(p8t,"mbart"),p8t.forEach(t),XIr=r(UIe," \u2014 "),fK=n(UIe,"A",{href:!0});var _8t=s(fK);zIr=r(_8t,"FlaxMBartForQuestionAnswering"),_8t.forEach(t),WIr=r(UIe," (mBART model)"),UIe.forEach(t),QIr=i(Ne),h3=n(Ne,"LI",{});var JIe=s(h3);RMe=n(JIe,"STRONG",{});var u8t=s(RMe);HIr=r(u8t,"roberta"),u8t.forEach(t),UIr=r(JIe," \u2014 "),mK=n(JIe,"A",{href:!0});var b8t=s(mK);JIr=r(b8t,"FlaxRobertaForQuestionAnswering"),b8t.forEach(t),YIr=r(JIe," (RoBERTa model)"),JIe.forEach(t),KIr=i(Ne),p3=n(Ne,"LI",{});var YIe=s(p3);PMe=n(YIe,"STRONG",{});var v8t=s(PMe);ZIr=r(v8t,"roformer"),v8t.forEach(t),eqr=r(YIe," \u2014 "),gK=n(YIe,"A",{href:!0});var F8t=s(gK);oqr=r(F8t,"FlaxRoFormerForQuestionAnswering"),F8t.forEach(t),rqr=r(YIe," (RoFormer model)"),YIe.forEach(t),tqr=i(Ne),_3=n(Ne,"LI",{});var KIe=s(_3);BMe=n(KIe,"STRONG",{});var T8t=s(BMe);aqr=r(T8t,"xlm-roberta"),T8t.forEach(t),nqr=r(KIe," \u2014 "),hK=n(KIe,"A",{href:!0});var M8t=s(hK);sqr=r(M8t,"FlaxXLMRobertaForQuestionAnswering"),M8t.forEach(t),lqr=r(KIe," (XLM-RoBERTa model)"),KIe.forEach(t),Ne.forEach(t),iqr=i(ei),T(u3.$$.fragment,ei),ei.forEach(t),Zl.forEach(t),mje=i(f),Jc=n(f,"H2",{class:!0});var vGe=s(Jc);b3=n(vGe,"A",{id:!0,class:!0,href:!0});var E8t=s(b3);IMe=n(E8t,"SPAN",{});var C8t=s(IMe);T(K9.$$.fragment,C8t),C8t.forEach(t),E8t.forEach(t),dqr=i(vGe),qMe=n(vGe,"SPAN",{});var w8t=s(qMe);cqr=r(w8t,"FlaxAutoModelForTokenClassification"),w8t.forEach(t),vGe.forEach(t),gje=i(f),br=n(f,"DIV",{class:!0});var oi=s(br);T(Z9.$$.fragment,oi),fqr=i(oi),Yc=n(oi,"P",{});var See=s(Yc);mqr=r(See,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),pK=n(See,"A",{href:!0});var A8t=s(pK);gqr=r(A8t,"from_pretrained()"),A8t.forEach(t),hqr=r(See," class method or the "),_K=n(See,"A",{href:!0});var y8t=s(_K);pqr=r(y8t,"from_config()"),y8t.forEach(t),_qr=r(See,` class
method.`),See.forEach(t),uqr=i(oi),ex=n(oi,"P",{});var FGe=s(ex);bqr=r(FGe,"This class cannot be instantiated directly using "),NMe=n(FGe,"CODE",{});var L8t=s(NMe);vqr=r(L8t,"__init__()"),L8t.forEach(t),Fqr=r(FGe," (throws an error)."),FGe.forEach(t),Tqr=i(oi),Ut=n(oi,"DIV",{class:!0});var nA=s(Ut);T(ox.$$.fragment,nA),Mqr=i(nA),jMe=n(nA,"P",{});var x8t=s(jMe);Eqr=r(x8t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),x8t.forEach(t),Cqr=i(nA),Kc=n(nA,"P",{});var Ree=s(Kc);wqr=r(Ree,`Note:
Loading a model from its configuration file does `),DMe=n(Ree,"STRONG",{});var $8t=s(DMe);Aqr=r($8t,"not"),$8t.forEach(t),yqr=r(Ree,` load the model weights. It only affects the
model\u2019s configuration. Use `),uK=n(Ree,"A",{href:!0});var k8t=s(uK);Lqr=r(k8t,"from_pretrained()"),k8t.forEach(t),xqr=r(Ree," to load the model weights."),Ree.forEach(t),$qr=i(nA),T(v3.$$.fragment,nA),nA.forEach(t),kqr=i(oi),Wr=n(oi,"DIV",{class:!0});var ri=s(Wr);T(rx.$$.fragment,ri),Sqr=i(ri),GMe=n(ri,"P",{});var S8t=s(GMe);Rqr=r(S8t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),S8t.forEach(t),Pqr=i(ri),Tn=n(ri,"P",{});var sA=s(Tn);Bqr=r(sA,"The model class to instantiate is selected based on the "),OMe=n(sA,"CODE",{});var R8t=s(OMe);Iqr=r(R8t,"model_type"),R8t.forEach(t),qqr=r(sA,` property of the config object (either
passed as an argument or loaded from `),VMe=n(sA,"CODE",{});var P8t=s(VMe);Nqr=r(P8t,"pretrained_model_name_or_path"),P8t.forEach(t),jqr=r(sA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),XMe=n(sA,"CODE",{});var B8t=s(XMe);Dqr=r(B8t,"pretrained_model_name_or_path"),B8t.forEach(t),Gqr=r(sA,":"),sA.forEach(t),Oqr=i(ri),De=n(ri,"UL",{});var Fo=s(De);F3=n(Fo,"LI",{});var ZIe=s(F3);zMe=n(ZIe,"STRONG",{});var I8t=s(zMe);Vqr=r(I8t,"albert"),I8t.forEach(t),Xqr=r(ZIe," \u2014 "),bK=n(ZIe,"A",{href:!0});var q8t=s(bK);zqr=r(q8t,"FlaxAlbertForTokenClassification"),q8t.forEach(t),Wqr=r(ZIe," (ALBERT model)"),ZIe.forEach(t),Qqr=i(Fo),T3=n(Fo,"LI",{});var eqe=s(T3);WMe=n(eqe,"STRONG",{});var N8t=s(WMe);Hqr=r(N8t,"bert"),N8t.forEach(t),Uqr=r(eqe," \u2014 "),vK=n(eqe,"A",{href:!0});var j8t=s(vK);Jqr=r(j8t,"FlaxBertForTokenClassification"),j8t.forEach(t),Yqr=r(eqe," (BERT model)"),eqe.forEach(t),Kqr=i(Fo),M3=n(Fo,"LI",{});var oqe=s(M3);QMe=n(oqe,"STRONG",{});var D8t=s(QMe);Zqr=r(D8t,"big_bird"),D8t.forEach(t),eNr=r(oqe," \u2014 "),FK=n(oqe,"A",{href:!0});var G8t=s(FK);oNr=r(G8t,"FlaxBigBirdForTokenClassification"),G8t.forEach(t),rNr=r(oqe," (BigBird model)"),oqe.forEach(t),tNr=i(Fo),E3=n(Fo,"LI",{});var rqe=s(E3);HMe=n(rqe,"STRONG",{});var O8t=s(HMe);aNr=r(O8t,"distilbert"),O8t.forEach(t),nNr=r(rqe," \u2014 "),TK=n(rqe,"A",{href:!0});var V8t=s(TK);sNr=r(V8t,"FlaxDistilBertForTokenClassification"),V8t.forEach(t),lNr=r(rqe," (DistilBERT model)"),rqe.forEach(t),iNr=i(Fo),C3=n(Fo,"LI",{});var tqe=s(C3);UMe=n(tqe,"STRONG",{});var X8t=s(UMe);dNr=r(X8t,"electra"),X8t.forEach(t),cNr=r(tqe," \u2014 "),MK=n(tqe,"A",{href:!0});var z8t=s(MK);fNr=r(z8t,"FlaxElectraForTokenClassification"),z8t.forEach(t),mNr=r(tqe," (ELECTRA model)"),tqe.forEach(t),gNr=i(Fo),w3=n(Fo,"LI",{});var aqe=s(w3);JMe=n(aqe,"STRONG",{});var W8t=s(JMe);hNr=r(W8t,"roberta"),W8t.forEach(t),pNr=r(aqe," \u2014 "),EK=n(aqe,"A",{href:!0});var Q8t=s(EK);_Nr=r(Q8t,"FlaxRobertaForTokenClassification"),Q8t.forEach(t),uNr=r(aqe," (RoBERTa model)"),aqe.forEach(t),bNr=i(Fo),A3=n(Fo,"LI",{});var nqe=s(A3);YMe=n(nqe,"STRONG",{});var H8t=s(YMe);vNr=r(H8t,"roformer"),H8t.forEach(t),FNr=r(nqe," \u2014 "),CK=n(nqe,"A",{href:!0});var U8t=s(CK);TNr=r(U8t,"FlaxRoFormerForTokenClassification"),U8t.forEach(t),MNr=r(nqe," (RoFormer model)"),nqe.forEach(t),ENr=i(Fo),y3=n(Fo,"LI",{});var sqe=s(y3);KMe=n(sqe,"STRONG",{});var J8t=s(KMe);CNr=r(J8t,"xlm-roberta"),J8t.forEach(t),wNr=r(sqe," \u2014 "),wK=n(sqe,"A",{href:!0});var Y8t=s(wK);ANr=r(Y8t,"FlaxXLMRobertaForTokenClassification"),Y8t.forEach(t),yNr=r(sqe," (XLM-RoBERTa model)"),sqe.forEach(t),Fo.forEach(t),LNr=i(ri),T(L3.$$.fragment,ri),ri.forEach(t),oi.forEach(t),hje=i(f),Zc=n(f,"H2",{class:!0});var TGe=s(Zc);x3=n(TGe,"A",{id:!0,class:!0,href:!0});var K8t=s(x3);ZMe=n(K8t,"SPAN",{});var Z8t=s(ZMe);T(tx.$$.fragment,Z8t),Z8t.forEach(t),K8t.forEach(t),xNr=i(TGe),e4e=n(TGe,"SPAN",{});var eLt=s(e4e);$Nr=r(eLt,"FlaxAutoModelForMultipleChoice"),eLt.forEach(t),TGe.forEach(t),pje=i(f),vr=n(f,"DIV",{class:!0});var ti=s(vr);T(ax.$$.fragment,ti),kNr=i(ti),ef=n(ti,"P",{});var Pee=s(ef);SNr=r(Pee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),AK=n(Pee,"A",{href:!0});var oLt=s(AK);RNr=r(oLt,"from_pretrained()"),oLt.forEach(t),PNr=r(Pee," class method or the "),yK=n(Pee,"A",{href:!0});var rLt=s(yK);BNr=r(rLt,"from_config()"),rLt.forEach(t),INr=r(Pee,` class
method.`),Pee.forEach(t),qNr=i(ti),nx=n(ti,"P",{});var MGe=s(nx);NNr=r(MGe,"This class cannot be instantiated directly using "),o4e=n(MGe,"CODE",{});var tLt=s(o4e);jNr=r(tLt,"__init__()"),tLt.forEach(t),DNr=r(MGe," (throws an error)."),MGe.forEach(t),GNr=i(ti),Jt=n(ti,"DIV",{class:!0});var lA=s(Jt);T(sx.$$.fragment,lA),ONr=i(lA),r4e=n(lA,"P",{});var aLt=s(r4e);VNr=r(aLt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),aLt.forEach(t),XNr=i(lA),of=n(lA,"P",{});var Bee=s(of);zNr=r(Bee,`Note:
Loading a model from its configuration file does `),t4e=n(Bee,"STRONG",{});var nLt=s(t4e);WNr=r(nLt,"not"),nLt.forEach(t),QNr=r(Bee,` load the model weights. It only affects the
model\u2019s configuration. Use `),LK=n(Bee,"A",{href:!0});var sLt=s(LK);HNr=r(sLt,"from_pretrained()"),sLt.forEach(t),UNr=r(Bee," to load the model weights."),Bee.forEach(t),JNr=i(lA),T($3.$$.fragment,lA),lA.forEach(t),YNr=i(ti),Qr=n(ti,"DIV",{class:!0});var ai=s(Qr);T(lx.$$.fragment,ai),KNr=i(ai),a4e=n(ai,"P",{});var lLt=s(a4e);ZNr=r(lLt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),lLt.forEach(t),ejr=i(ai),Mn=n(ai,"P",{});var iA=s(Mn);ojr=r(iA,"The model class to instantiate is selected based on the "),n4e=n(iA,"CODE",{});var iLt=s(n4e);rjr=r(iLt,"model_type"),iLt.forEach(t),tjr=r(iA,` property of the config object (either
passed as an argument or loaded from `),s4e=n(iA,"CODE",{});var dLt=s(s4e);ajr=r(dLt,"pretrained_model_name_or_path"),dLt.forEach(t),njr=r(iA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l4e=n(iA,"CODE",{});var cLt=s(l4e);sjr=r(cLt,"pretrained_model_name_or_path"),cLt.forEach(t),ljr=r(iA,":"),iA.forEach(t),ijr=i(ai),Ge=n(ai,"UL",{});var To=s(Ge);k3=n(To,"LI",{});var lqe=s(k3);i4e=n(lqe,"STRONG",{});var fLt=s(i4e);djr=r(fLt,"albert"),fLt.forEach(t),cjr=r(lqe," \u2014 "),xK=n(lqe,"A",{href:!0});var mLt=s(xK);fjr=r(mLt,"FlaxAlbertForMultipleChoice"),mLt.forEach(t),mjr=r(lqe," (ALBERT model)"),lqe.forEach(t),gjr=i(To),S3=n(To,"LI",{});var iqe=s(S3);d4e=n(iqe,"STRONG",{});var gLt=s(d4e);hjr=r(gLt,"bert"),gLt.forEach(t),pjr=r(iqe," \u2014 "),$K=n(iqe,"A",{href:!0});var hLt=s($K);_jr=r(hLt,"FlaxBertForMultipleChoice"),hLt.forEach(t),ujr=r(iqe," (BERT model)"),iqe.forEach(t),bjr=i(To),R3=n(To,"LI",{});var dqe=s(R3);c4e=n(dqe,"STRONG",{});var pLt=s(c4e);vjr=r(pLt,"big_bird"),pLt.forEach(t),Fjr=r(dqe," \u2014 "),kK=n(dqe,"A",{href:!0});var _Lt=s(kK);Tjr=r(_Lt,"FlaxBigBirdForMultipleChoice"),_Lt.forEach(t),Mjr=r(dqe," (BigBird model)"),dqe.forEach(t),Ejr=i(To),P3=n(To,"LI",{});var cqe=s(P3);f4e=n(cqe,"STRONG",{});var uLt=s(f4e);Cjr=r(uLt,"distilbert"),uLt.forEach(t),wjr=r(cqe," \u2014 "),SK=n(cqe,"A",{href:!0});var bLt=s(SK);Ajr=r(bLt,"FlaxDistilBertForMultipleChoice"),bLt.forEach(t),yjr=r(cqe," (DistilBERT model)"),cqe.forEach(t),Ljr=i(To),B3=n(To,"LI",{});var fqe=s(B3);m4e=n(fqe,"STRONG",{});var vLt=s(m4e);xjr=r(vLt,"electra"),vLt.forEach(t),$jr=r(fqe," \u2014 "),RK=n(fqe,"A",{href:!0});var FLt=s(RK);kjr=r(FLt,"FlaxElectraForMultipleChoice"),FLt.forEach(t),Sjr=r(fqe," (ELECTRA model)"),fqe.forEach(t),Rjr=i(To),I3=n(To,"LI",{});var mqe=s(I3);g4e=n(mqe,"STRONG",{});var TLt=s(g4e);Pjr=r(TLt,"roberta"),TLt.forEach(t),Bjr=r(mqe," \u2014 "),PK=n(mqe,"A",{href:!0});var MLt=s(PK);Ijr=r(MLt,"FlaxRobertaForMultipleChoice"),MLt.forEach(t),qjr=r(mqe," (RoBERTa model)"),mqe.forEach(t),Njr=i(To),q3=n(To,"LI",{});var gqe=s(q3);h4e=n(gqe,"STRONG",{});var ELt=s(h4e);jjr=r(ELt,"roformer"),ELt.forEach(t),Djr=r(gqe," \u2014 "),BK=n(gqe,"A",{href:!0});var CLt=s(BK);Gjr=r(CLt,"FlaxRoFormerForMultipleChoice"),CLt.forEach(t),Ojr=r(gqe," (RoFormer model)"),gqe.forEach(t),Vjr=i(To),N3=n(To,"LI",{});var hqe=s(N3);p4e=n(hqe,"STRONG",{});var wLt=s(p4e);Xjr=r(wLt,"xlm-roberta"),wLt.forEach(t),zjr=r(hqe," \u2014 "),IK=n(hqe,"A",{href:!0});var ALt=s(IK);Wjr=r(ALt,"FlaxXLMRobertaForMultipleChoice"),ALt.forEach(t),Qjr=r(hqe," (XLM-RoBERTa model)"),hqe.forEach(t),To.forEach(t),Hjr=i(ai),T(j3.$$.fragment,ai),ai.forEach(t),ti.forEach(t),_je=i(f),rf=n(f,"H2",{class:!0});var EGe=s(rf);D3=n(EGe,"A",{id:!0,class:!0,href:!0});var yLt=s(D3);_4e=n(yLt,"SPAN",{});var LLt=s(_4e);T(ix.$$.fragment,LLt),LLt.forEach(t),yLt.forEach(t),Ujr=i(EGe),u4e=n(EGe,"SPAN",{});var xLt=s(u4e);Jjr=r(xLt,"FlaxAutoModelForNextSentencePrediction"),xLt.forEach(t),EGe.forEach(t),uje=i(f),Fr=n(f,"DIV",{class:!0});var ni=s(Fr);T(dx.$$.fragment,ni),Yjr=i(ni),tf=n(ni,"P",{});var Iee=s(tf);Kjr=r(Iee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),qK=n(Iee,"A",{href:!0});var $Lt=s(qK);Zjr=r($Lt,"from_pretrained()"),$Lt.forEach(t),eDr=r(Iee," class method or the "),NK=n(Iee,"A",{href:!0});var kLt=s(NK);oDr=r(kLt,"from_config()"),kLt.forEach(t),rDr=r(Iee,` class
method.`),Iee.forEach(t),tDr=i(ni),cx=n(ni,"P",{});var CGe=s(cx);aDr=r(CGe,"This class cannot be instantiated directly using "),b4e=n(CGe,"CODE",{});var SLt=s(b4e);nDr=r(SLt,"__init__()"),SLt.forEach(t),sDr=r(CGe," (throws an error)."),CGe.forEach(t),lDr=i(ni),Yt=n(ni,"DIV",{class:!0});var dA=s(Yt);T(fx.$$.fragment,dA),iDr=i(dA),v4e=n(dA,"P",{});var RLt=s(v4e);dDr=r(RLt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),RLt.forEach(t),cDr=i(dA),af=n(dA,"P",{});var qee=s(af);fDr=r(qee,`Note:
Loading a model from its configuration file does `),F4e=n(qee,"STRONG",{});var PLt=s(F4e);mDr=r(PLt,"not"),PLt.forEach(t),gDr=r(qee,` load the model weights. It only affects the
model\u2019s configuration. Use `),jK=n(qee,"A",{href:!0});var BLt=s(jK);hDr=r(BLt,"from_pretrained()"),BLt.forEach(t),pDr=r(qee," to load the model weights."),qee.forEach(t),_Dr=i(dA),T(G3.$$.fragment,dA),dA.forEach(t),uDr=i(ni),Hr=n(ni,"DIV",{class:!0});var si=s(Hr);T(mx.$$.fragment,si),bDr=i(si),T4e=n(si,"P",{});var ILt=s(T4e);vDr=r(ILt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),ILt.forEach(t),FDr=i(si),En=n(si,"P",{});var cA=s(En);TDr=r(cA,"The model class to instantiate is selected based on the "),M4e=n(cA,"CODE",{});var qLt=s(M4e);MDr=r(qLt,"model_type"),qLt.forEach(t),EDr=r(cA,` property of the config object (either
passed as an argument or loaded from `),E4e=n(cA,"CODE",{});var NLt=s(E4e);CDr=r(NLt,"pretrained_model_name_or_path"),NLt.forEach(t),wDr=r(cA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C4e=n(cA,"CODE",{});var jLt=s(C4e);ADr=r(jLt,"pretrained_model_name_or_path"),jLt.forEach(t),yDr=r(cA,":"),cA.forEach(t),LDr=i(si),w4e=n(si,"UL",{});var DLt=s(w4e);O3=n(DLt,"LI",{});var pqe=s(O3);A4e=n(pqe,"STRONG",{});var GLt=s(A4e);xDr=r(GLt,"bert"),GLt.forEach(t),$Dr=r(pqe," \u2014 "),DK=n(pqe,"A",{href:!0});var OLt=s(DK);kDr=r(OLt,"FlaxBertForNextSentencePrediction"),OLt.forEach(t),SDr=r(pqe," (BERT model)"),pqe.forEach(t),DLt.forEach(t),RDr=i(si),T(V3.$$.fragment,si),si.forEach(t),ni.forEach(t),bje=i(f),nf=n(f,"H2",{class:!0});var wGe=s(nf);X3=n(wGe,"A",{id:!0,class:!0,href:!0});var VLt=s(X3);y4e=n(VLt,"SPAN",{});var XLt=s(y4e);T(gx.$$.fragment,XLt),XLt.forEach(t),VLt.forEach(t),PDr=i(wGe),L4e=n(wGe,"SPAN",{});var zLt=s(L4e);BDr=r(zLt,"FlaxAutoModelForImageClassification"),zLt.forEach(t),wGe.forEach(t),vje=i(f),Tr=n(f,"DIV",{class:!0});var li=s(Tr);T(hx.$$.fragment,li),IDr=i(li),sf=n(li,"P",{});var Nee=s(sf);qDr=r(Nee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),GK=n(Nee,"A",{href:!0});var WLt=s(GK);NDr=r(WLt,"from_pretrained()"),WLt.forEach(t),jDr=r(Nee," class method or the "),OK=n(Nee,"A",{href:!0});var QLt=s(OK);DDr=r(QLt,"from_config()"),QLt.forEach(t),GDr=r(Nee,` class
method.`),Nee.forEach(t),ODr=i(li),px=n(li,"P",{});var AGe=s(px);VDr=r(AGe,"This class cannot be instantiated directly using "),x4e=n(AGe,"CODE",{});var HLt=s(x4e);XDr=r(HLt,"__init__()"),HLt.forEach(t),zDr=r(AGe," (throws an error)."),AGe.forEach(t),WDr=i(li),Kt=n(li,"DIV",{class:!0});var fA=s(Kt);T(_x.$$.fragment,fA),QDr=i(fA),$4e=n(fA,"P",{});var ULt=s($4e);HDr=r(ULt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),ULt.forEach(t),UDr=i(fA),lf=n(fA,"P",{});var jee=s(lf);JDr=r(jee,`Note:
Loading a model from its configuration file does `),k4e=n(jee,"STRONG",{});var JLt=s(k4e);YDr=r(JLt,"not"),JLt.forEach(t),KDr=r(jee,` load the model weights. It only affects the
model\u2019s configuration. Use `),VK=n(jee,"A",{href:!0});var YLt=s(VK);ZDr=r(YLt,"from_pretrained()"),YLt.forEach(t),eGr=r(jee," to load the model weights."),jee.forEach(t),oGr=i(fA),T(z3.$$.fragment,fA),fA.forEach(t),rGr=i(li),Ur=n(li,"DIV",{class:!0});var ii=s(Ur);T(ux.$$.fragment,ii),tGr=i(ii),S4e=n(ii,"P",{});var KLt=s(S4e);aGr=r(KLt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),KLt.forEach(t),nGr=i(ii),Cn=n(ii,"P",{});var mA=s(Cn);sGr=r(mA,"The model class to instantiate is selected based on the "),R4e=n(mA,"CODE",{});var ZLt=s(R4e);lGr=r(ZLt,"model_type"),ZLt.forEach(t),iGr=r(mA,` property of the config object (either
passed as an argument or loaded from `),P4e=n(mA,"CODE",{});var e9t=s(P4e);dGr=r(e9t,"pretrained_model_name_or_path"),e9t.forEach(t),cGr=r(mA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B4e=n(mA,"CODE",{});var o9t=s(B4e);fGr=r(o9t,"pretrained_model_name_or_path"),o9t.forEach(t),mGr=r(mA,":"),mA.forEach(t),gGr=i(ii),bx=n(ii,"UL",{});var yGe=s(bx);W3=n(yGe,"LI",{});var _qe=s(W3);I4e=n(_qe,"STRONG",{});var r9t=s(I4e);hGr=r(r9t,"beit"),r9t.forEach(t),pGr=r(_qe," \u2014 "),XK=n(_qe,"A",{href:!0});var t9t=s(XK);_Gr=r(t9t,"FlaxBeitForImageClassification"),t9t.forEach(t),uGr=r(_qe," (BEiT model)"),_qe.forEach(t),bGr=i(yGe),Q3=n(yGe,"LI",{});var uqe=s(Q3);q4e=n(uqe,"STRONG",{});var a9t=s(q4e);vGr=r(a9t,"vit"),a9t.forEach(t),FGr=r(uqe," \u2014 "),zK=n(uqe,"A",{href:!0});var n9t=s(zK);TGr=r(n9t,"FlaxViTForImageClassification"),n9t.forEach(t),MGr=r(uqe," (ViT model)"),uqe.forEach(t),yGe.forEach(t),EGr=i(ii),T(H3.$$.fragment,ii),ii.forEach(t),li.forEach(t),Fje=i(f),df=n(f,"H2",{class:!0});var LGe=s(df);U3=n(LGe,"A",{id:!0,class:!0,href:!0});var s9t=s(U3);N4e=n(s9t,"SPAN",{});var l9t=s(N4e);T(vx.$$.fragment,l9t),l9t.forEach(t),s9t.forEach(t),CGr=i(LGe),j4e=n(LGe,"SPAN",{});var i9t=s(j4e);wGr=r(i9t,"FlaxAutoModelForVision2Seq"),i9t.forEach(t),LGe.forEach(t),Tje=i(f),Mr=n(f,"DIV",{class:!0});var di=s(Mr);T(Fx.$$.fragment,di),AGr=i(di),cf=n(di,"P",{});var Dee=s(cf);yGr=r(Dee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),WK=n(Dee,"A",{href:!0});var d9t=s(WK);LGr=r(d9t,"from_pretrained()"),d9t.forEach(t),xGr=r(Dee," class method or the "),QK=n(Dee,"A",{href:!0});var c9t=s(QK);$Gr=r(c9t,"from_config()"),c9t.forEach(t),kGr=r(Dee,` class
method.`),Dee.forEach(t),SGr=i(di),Tx=n(di,"P",{});var xGe=s(Tx);RGr=r(xGe,"This class cannot be instantiated directly using "),D4e=n(xGe,"CODE",{});var f9t=s(D4e);PGr=r(f9t,"__init__()"),f9t.forEach(t),BGr=r(xGe," (throws an error)."),xGe.forEach(t),IGr=i(di),Zt=n(di,"DIV",{class:!0});var gA=s(Zt);T(Mx.$$.fragment,gA),qGr=i(gA),G4e=n(gA,"P",{});var m9t=s(G4e);NGr=r(m9t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),m9t.forEach(t),jGr=i(gA),ff=n(gA,"P",{});var Gee=s(ff);DGr=r(Gee,`Note:
Loading a model from its configuration file does `),O4e=n(Gee,"STRONG",{});var g9t=s(O4e);GGr=r(g9t,"not"),g9t.forEach(t),OGr=r(Gee,` load the model weights. It only affects the
model\u2019s configuration. Use `),HK=n(Gee,"A",{href:!0});var h9t=s(HK);VGr=r(h9t,"from_pretrained()"),h9t.forEach(t),XGr=r(Gee," to load the model weights."),Gee.forEach(t),zGr=i(gA),T(J3.$$.fragment,gA),gA.forEach(t),WGr=i(di),Jr=n(di,"DIV",{class:!0});var ci=s(Jr);T(Ex.$$.fragment,ci),QGr=i(ci),V4e=n(ci,"P",{});var p9t=s(V4e);HGr=r(p9t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),p9t.forEach(t),UGr=i(ci),wn=n(ci,"P",{});var hA=s(wn);JGr=r(hA,"The model class to instantiate is selected based on the "),X4e=n(hA,"CODE",{});var _9t=s(X4e);YGr=r(_9t,"model_type"),_9t.forEach(t),KGr=r(hA,` property of the config object (either
passed as an argument or loaded from `),z4e=n(hA,"CODE",{});var u9t=s(z4e);ZGr=r(u9t,"pretrained_model_name_or_path"),u9t.forEach(t),eOr=r(hA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W4e=n(hA,"CODE",{});var b9t=s(W4e);oOr=r(b9t,"pretrained_model_name_or_path"),b9t.forEach(t),rOr=r(hA,":"),hA.forEach(t),tOr=i(ci),Q4e=n(ci,"UL",{});var v9t=s(Q4e);Y3=n(v9t,"LI",{});var bqe=s(Y3);H4e=n(bqe,"STRONG",{});var F9t=s(H4e);aOr=r(F9t,"vision-encoder-decoder"),F9t.forEach(t),nOr=r(bqe," \u2014 "),UK=n(bqe,"A",{href:!0});var T9t=s(UK);sOr=r(T9t,"FlaxVisionEncoderDecoderModel"),T9t.forEach(t),lOr=r(bqe," (Vision Encoder decoder model)"),bqe.forEach(t),v9t.forEach(t),iOr=i(ci),T(K3.$$.fragment,ci),ci.forEach(t),di.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(w$t)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(yn,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.AutoConfig"),c(xn,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.AutoModel"),c($n,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.AutoTokenizer"),c(ui,"href","/docs/transformers/pr_17205/en/model_doc/bert#transformers.BertModel"),c(vf,"id","extending-the-auto-classes"),c(vf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vf,"href","#extending-the-auto-classes"),c(bi,"class","relative group"),c(Tf,"id","transformers.AutoConfig"),c(Tf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Tf,"href","#transformers.AutoConfig"),c(vi,"class","relative group"),c(O$,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(V$,"href","/docs/transformers/pr_17205/en/model_doc/albert#transformers.AlbertConfig"),c(X$,"href","/docs/transformers/pr_17205/en/model_doc/bart#transformers.BartConfig"),c(z$,"href","/docs/transformers/pr_17205/en/model_doc/beit#transformers.BeitConfig"),c(W$,"href","/docs/transformers/pr_17205/en/model_doc/bert#transformers.BertConfig"),c(Q$,"href","/docs/transformers/pr_17205/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(H$,"href","/docs/transformers/pr_17205/en/model_doc/big_bird#transformers.BigBirdConfig"),c(U$,"href","/docs/transformers/pr_17205/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(J$,"href","/docs/transformers/pr_17205/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(Y$,"href","/docs/transformers/pr_17205/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(K$,"href","/docs/transformers/pr_17205/en/model_doc/camembert#transformers.CamembertConfig"),c(Z$,"href","/docs/transformers/pr_17205/en/model_doc/canine#transformers.CanineConfig"),c(ek,"href","/docs/transformers/pr_17205/en/model_doc/clip#transformers.CLIPConfig"),c(ok,"href","/docs/transformers/pr_17205/en/model_doc/convbert#transformers.ConvBertConfig"),c(rk,"href","/docs/transformers/pr_17205/en/model_doc/convnext#transformers.ConvNextConfig"),c(tk,"href","/docs/transformers/pr_17205/en/model_doc/ctrl#transformers.CTRLConfig"),c(ak,"href","/docs/transformers/pr_17205/en/model_doc/cvt#transformers.CvtConfig"),c(nk,"href","/docs/transformers/pr_17205/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(sk,"href","/docs/transformers/pr_17205/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(lk,"href","/docs/transformers/pr_17205/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(ik,"href","/docs/transformers/pr_17205/en/model_doc/deberta#transformers.DebertaConfig"),c(dk,"href","/docs/transformers/pr_17205/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(ck,"href","/docs/transformers/pr_17205/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(fk,"href","/docs/transformers/pr_17205/en/model_doc/deit#transformers.DeiTConfig"),c(mk,"href","/docs/transformers/pr_17205/en/model_doc/detr#transformers.DetrConfig"),c(gk,"href","/docs/transformers/pr_17205/en/model_doc/distilbert#transformers.DistilBertConfig"),c(hk,"href","/docs/transformers/pr_17205/en/model_doc/dpr#transformers.DPRConfig"),c(pk,"href","/docs/transformers/pr_17205/en/model_doc/dpt#transformers.DPTConfig"),c(_k,"href","/docs/transformers/pr_17205/en/model_doc/electra#transformers.ElectraConfig"),c(uk,"href","/docs/transformers/pr_17205/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(bk,"href","/docs/transformers/pr_17205/en/model_doc/flaubert#transformers.FlaubertConfig"),c(vk,"href","/docs/transformers/pr_17205/en/model_doc/flava#transformers.FlavaConfig"),c(Fk,"href","/docs/transformers/pr_17205/en/model_doc/fnet#transformers.FNetConfig"),c(Tk,"href","/docs/transformers/pr_17205/en/model_doc/fsmt#transformers.FSMTConfig"),c(Mk,"href","/docs/transformers/pr_17205/en/model_doc/funnel#transformers.FunnelConfig"),c(Ek,"href","/docs/transformers/pr_17205/en/model_doc/glpn#transformers.GLPNConfig"),c(Ck,"href","/docs/transformers/pr_17205/en/model_doc/gpt2#transformers.GPT2Config"),c(wk,"href","/docs/transformers/pr_17205/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(Ak,"href","/docs/transformers/pr_17205/en/model_doc/gptj#transformers.GPTJConfig"),c(yk,"href","/docs/transformers/pr_17205/en/model_doc/hubert#transformers.HubertConfig"),c(Lk,"href","/docs/transformers/pr_17205/en/model_doc/ibert#transformers.IBertConfig"),c(xk,"href","/docs/transformers/pr_17205/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c($k,"href","/docs/transformers/pr_17205/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(kk,"href","/docs/transformers/pr_17205/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(Sk,"href","/docs/transformers/pr_17205/en/model_doc/led#transformers.LEDConfig"),c(Rk,"href","/docs/transformers/pr_17205/en/model_doc/longformer#transformers.LongformerConfig"),c(Pk,"href","/docs/transformers/pr_17205/en/model_doc/luke#transformers.LukeConfig"),c(Bk,"href","/docs/transformers/pr_17205/en/model_doc/lxmert#transformers.LxmertConfig"),c(Ik,"href","/docs/transformers/pr_17205/en/model_doc/m2m_100#transformers.M2M100Config"),c(qk,"href","/docs/transformers/pr_17205/en/model_doc/marian#transformers.MarianConfig"),c(Nk,"href","/docs/transformers/pr_17205/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(jk,"href","/docs/transformers/pr_17205/en/model_doc/mbart#transformers.MBartConfig"),c(Dk,"href","/docs/transformers/pr_17205/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(Gk,"href","/docs/transformers/pr_17205/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(Ok,"href","/docs/transformers/pr_17205/en/model_doc/mobilevit#transformers.MobileViTConfig"),c(Vk,"href","/docs/transformers/pr_17205/en/model_doc/mpnet#transformers.MPNetConfig"),c(Xk,"href","/docs/transformers/pr_17205/en/model_doc/mt5#transformers.MT5Config"),c(zk,"href","/docs/transformers/pr_17205/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(Wk,"href","/docs/transformers/pr_17205/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(Qk,"href","/docs/transformers/pr_17205/en/model_doc/opt#transformers.OPTConfig"),c(Hk,"href","/docs/transformers/pr_17205/en/model_doc/pegasus#transformers.PegasusConfig"),c(Uk,"href","/docs/transformers/pr_17205/en/model_doc/perceiver#transformers.PerceiverConfig"),c(Jk,"href","/docs/transformers/pr_17205/en/model_doc/plbart#transformers.PLBartConfig"),c(Yk,"href","/docs/transformers/pr_17205/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(Kk,"href","/docs/transformers/pr_17205/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(Zk,"href","/docs/transformers/pr_17205/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(eS,"href","/docs/transformers/pr_17205/en/model_doc/rag#transformers.RagConfig"),c(oS,"href","/docs/transformers/pr_17205/en/model_doc/realm#transformers.RealmConfig"),c(rS,"href","/docs/transformers/pr_17205/en/model_doc/reformer#transformers.ReformerConfig"),c(tS,"href","/docs/transformers/pr_17205/en/model_doc/regnet#transformers.RegNetConfig"),c(aS,"href","/docs/transformers/pr_17205/en/model_doc/rembert#transformers.RemBertConfig"),c(nS,"href","/docs/transformers/pr_17205/en/model_doc/resnet#transformers.ResNetConfig"),c(sS,"href","/docs/transformers/pr_17205/en/model_doc/retribert#transformers.RetriBertConfig"),c(lS,"href","/docs/transformers/pr_17205/en/model_doc/roberta#transformers.RobertaConfig"),c(iS,"href","/docs/transformers/pr_17205/en/model_doc/roformer#transformers.RoFormerConfig"),c(dS,"href","/docs/transformers/pr_17205/en/model_doc/segformer#transformers.SegformerConfig"),c(cS,"href","/docs/transformers/pr_17205/en/model_doc/sew#transformers.SEWConfig"),c(fS,"href","/docs/transformers/pr_17205/en/model_doc/sew-d#transformers.SEWDConfig"),c(mS,"href","/docs/transformers/pr_17205/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(gS,"href","/docs/transformers/pr_17205/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(hS,"href","/docs/transformers/pr_17205/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(pS,"href","/docs/transformers/pr_17205/en/model_doc/splinter#transformers.SplinterConfig"),c(_S,"href","/docs/transformers/pr_17205/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(uS,"href","/docs/transformers/pr_17205/en/model_doc/swin#transformers.SwinConfig"),c(bS,"href","/docs/transformers/pr_17205/en/model_doc/t5#transformers.T5Config"),c(vS,"href","/docs/transformers/pr_17205/en/model_doc/tapas#transformers.TapasConfig"),c(FS,"href","/docs/transformers/pr_17205/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(TS,"href","/docs/transformers/pr_17205/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(MS,"href","/docs/transformers/pr_17205/en/model_doc/trocr#transformers.TrOCRConfig"),c(ES,"href","/docs/transformers/pr_17205/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(CS,"href","/docs/transformers/pr_17205/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(wS,"href","/docs/transformers/pr_17205/en/model_doc/van#transformers.VanConfig"),c(AS,"href","/docs/transformers/pr_17205/en/model_doc/vilt#transformers.ViltConfig"),c(yS,"href","/docs/transformers/pr_17205/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(LS,"href","/docs/transformers/pr_17205/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(xS,"href","/docs/transformers/pr_17205/en/model_doc/visual_bert#transformers.VisualBertConfig"),c($S,"href","/docs/transformers/pr_17205/en/model_doc/vit#transformers.ViTConfig"),c(kS,"href","/docs/transformers/pr_17205/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(SS,"href","/docs/transformers/pr_17205/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(RS,"href","/docs/transformers/pr_17205/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(PS,"href","/docs/transformers/pr_17205/en/model_doc/wavlm#transformers.WavLMConfig"),c(BS,"href","/docs/transformers/pr_17205/en/model_doc/xglm#transformers.XGLMConfig"),c(IS,"href","/docs/transformers/pr_17205/en/model_doc/xlm#transformers.XLMConfig"),c(qS,"href","/docs/transformers/pr_17205/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(NS,"href","/docs/transformers/pr_17205/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(jS,"href","/docs/transformers/pr_17205/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(DS,"href","/docs/transformers/pr_17205/en/model_doc/xlnet#transformers.XLNetConfig"),c(GS,"href","/docs/transformers/pr_17205/en/model_doc/yolos#transformers.YolosConfig"),c(OS,"href","/docs/transformers/pr_17205/en/model_doc/yoso#transformers.YosoConfig"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Eg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cg,"id","transformers.AutoTokenizer"),c(Cg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Cg,"href","#transformers.AutoTokenizer"),c(Ti,"class","relative group"),c(VS,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(XS,"href","/docs/transformers/pr_17205/en/model_doc/albert#transformers.AlbertTokenizer"),c(zS,"href","/docs/transformers/pr_17205/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(WS,"href","/docs/transformers/pr_17205/en/model_doc/bart#transformers.BartTokenizer"),c(QS,"href","/docs/transformers/pr_17205/en/model_doc/bart#transformers.BartTokenizerFast"),c(HS,"href","/docs/transformers/pr_17205/en/model_doc/barthez#transformers.BarthezTokenizer"),c(US,"href","/docs/transformers/pr_17205/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(JS,"href","/docs/transformers/pr_17205/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(YS,"href","/docs/transformers/pr_17205/en/model_doc/bert#transformers.BertTokenizer"),c(KS,"href","/docs/transformers/pr_17205/en/model_doc/bert#transformers.BertTokenizerFast"),c(ZS,"href","/docs/transformers/pr_17205/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(eR,"href","/docs/transformers/pr_17205/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(oR,"href","/docs/transformers/pr_17205/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(rR,"href","/docs/transformers/pr_17205/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(tR,"href","/docs/transformers/pr_17205/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(aR,"href","/docs/transformers/pr_17205/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(nR,"href","/docs/transformers/pr_17205/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(sR,"href","/docs/transformers/pr_17205/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(lR,"href","/docs/transformers/pr_17205/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(iR,"href","/docs/transformers/pr_17205/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(dR,"href","/docs/transformers/pr_17205/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(cR,"href","/docs/transformers/pr_17205/en/model_doc/camembert#transformers.CamembertTokenizer"),c(fR,"href","/docs/transformers/pr_17205/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(mR,"href","/docs/transformers/pr_17205/en/model_doc/canine#transformers.CanineTokenizer"),c(gR,"href","/docs/transformers/pr_17205/en/model_doc/clip#transformers.CLIPTokenizer"),c(hR,"href","/docs/transformers/pr_17205/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(pR,"href","/docs/transformers/pr_17205/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(_R,"href","/docs/transformers/pr_17205/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(uR,"href","/docs/transformers/pr_17205/en/model_doc/cpm#transformers.CpmTokenizer"),c(bR,"href","/docs/transformers/pr_17205/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(vR,"href","/docs/transformers/pr_17205/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(FR,"href","/docs/transformers/pr_17205/en/model_doc/roberta#transformers.RobertaTokenizer"),c(TR,"href","/docs/transformers/pr_17205/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(MR,"href","/docs/transformers/pr_17205/en/model_doc/deberta#transformers.DebertaTokenizer"),c(ER,"href","/docs/transformers/pr_17205/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(CR,"href","/docs/transformers/pr_17205/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(wR,"href","/docs/transformers/pr_17205/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(AR,"href","/docs/transformers/pr_17205/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(yR,"href","/docs/transformers/pr_17205/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(LR,"href","/docs/transformers/pr_17205/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(xR,"href","/docs/transformers/pr_17205/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c($R,"href","/docs/transformers/pr_17205/en/model_doc/electra#transformers.ElectraTokenizer"),c(kR,"href","/docs/transformers/pr_17205/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(SR,"href","/docs/transformers/pr_17205/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(RR,"href","/docs/transformers/pr_17205/en/model_doc/fnet#transformers.FNetTokenizer"),c(PR,"href","/docs/transformers/pr_17205/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(BR,"href","/docs/transformers/pr_17205/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(IR,"href","/docs/transformers/pr_17205/en/model_doc/funnel#transformers.FunnelTokenizer"),c(qR,"href","/docs/transformers/pr_17205/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(NR,"href","/docs/transformers/pr_17205/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(jR,"href","/docs/transformers/pr_17205/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(DR,"href","/docs/transformers/pr_17205/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(GR,"href","/docs/transformers/pr_17205/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(OR,"href","/docs/transformers/pr_17205/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(VR,"href","/docs/transformers/pr_17205/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(XR,"href","/docs/transformers/pr_17205/en/model_doc/herbert#transformers.HerbertTokenizer"),c(zR,"href","/docs/transformers/pr_17205/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(WR,"href","/docs/transformers/pr_17205/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(QR,"href","/docs/transformers/pr_17205/en/model_doc/roberta#transformers.RobertaTokenizer"),c(HR,"href","/docs/transformers/pr_17205/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(UR,"href","/docs/transformers/pr_17205/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(JR,"href","/docs/transformers/pr_17205/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(YR,"href","/docs/transformers/pr_17205/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(KR,"href","/docs/transformers/pr_17205/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(ZR,"href","/docs/transformers/pr_17205/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(eP,"href","/docs/transformers/pr_17205/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(oP,"href","/docs/transformers/pr_17205/en/model_doc/led#transformers.LEDTokenizer"),c(rP,"href","/docs/transformers/pr_17205/en/model_doc/led#transformers.LEDTokenizerFast"),c(tP,"href","/docs/transformers/pr_17205/en/model_doc/longformer#transformers.LongformerTokenizer"),c(aP,"href","/docs/transformers/pr_17205/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(nP,"href","/docs/transformers/pr_17205/en/model_doc/luke#transformers.LukeTokenizer"),c(sP,"href","/docs/transformers/pr_17205/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(lP,"href","/docs/transformers/pr_17205/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(iP,"href","/docs/transformers/pr_17205/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(dP,"href","/docs/transformers/pr_17205/en/model_doc/marian#transformers.MarianTokenizer"),c(cP,"href","/docs/transformers/pr_17205/en/model_doc/mbart#transformers.MBartTokenizer"),c(fP,"href","/docs/transformers/pr_17205/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(mP,"href","/docs/transformers/pr_17205/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(gP,"href","/docs/transformers/pr_17205/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(hP,"href","/docs/transformers/pr_17205/en/model_doc/bert#transformers.BertTokenizer"),c(pP,"href","/docs/transformers/pr_17205/en/model_doc/bert#transformers.BertTokenizerFast"),c(_P,"href","/docs/transformers/pr_17205/en/model_doc/mluke#transformers.MLukeTokenizer"),c(uP,"href","/docs/transformers/pr_17205/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(bP,"href","/docs/transformers/pr_17205/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(vP,"href","/docs/transformers/pr_17205/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(FP,"href","/docs/transformers/pr_17205/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(TP,"href","/docs/transformers/pr_17205/en/model_doc/t5#transformers.T5Tokenizer"),c(MP,"href","/docs/transformers/pr_17205/en/model_doc/t5#transformers.T5TokenizerFast"),c(EP,"href","/docs/transformers/pr_17205/en/model_doc/albert#transformers.AlbertTokenizer"),c(CP,"href","/docs/transformers/pr_17205/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(wP,"href","/docs/transformers/pr_17205/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(AP,"href","/docs/transformers/pr_17205/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(yP,"href","/docs/transformers/pr_17205/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(LP,"href","/docs/transformers/pr_17205/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(xP,"href","/docs/transformers/pr_17205/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c($P,"href","/docs/transformers/pr_17205/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(kP,"href","/docs/transformers/pr_17205/en/model_doc/phobert#transformers.PhobertTokenizer"),c(SP,"href","/docs/transformers/pr_17205/en/model_doc/plbart#transformers.PLBartTokenizer"),c(RP,"href","/docs/transformers/pr_17205/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(PP,"href","/docs/transformers/pr_17205/en/model_doc/bert#transformers.BertTokenizer"),c(BP,"href","/docs/transformers/pr_17205/en/model_doc/bert#transformers.BertTokenizerFast"),c(IP,"href","/docs/transformers/pr_17205/en/model_doc/rag#transformers.RagTokenizer"),c(qP,"href","/docs/transformers/pr_17205/en/model_doc/realm#transformers.RealmTokenizer"),c(NP,"href","/docs/transformers/pr_17205/en/model_doc/realm#transformers.RealmTokenizerFast"),c(jP,"href","/docs/transformers/pr_17205/en/model_doc/reformer#transformers.ReformerTokenizer"),c(DP,"href","/docs/transformers/pr_17205/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(GP,"href","/docs/transformers/pr_17205/en/model_doc/rembert#transformers.RemBertTokenizer"),c(OP,"href","/docs/transformers/pr_17205/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(VP,"href","/docs/transformers/pr_17205/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(XP,"href","/docs/transformers/pr_17205/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(zP,"href","/docs/transformers/pr_17205/en/model_doc/roberta#transformers.RobertaTokenizer"),c(WP,"href","/docs/transformers/pr_17205/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(QP,"href","/docs/transformers/pr_17205/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(HP,"href","/docs/transformers/pr_17205/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(UP,"href","/docs/transformers/pr_17205/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(JP,"href","/docs/transformers/pr_17205/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(YP,"href","/docs/transformers/pr_17205/en/model_doc/splinter#transformers.SplinterTokenizer"),c(KP,"href","/docs/transformers/pr_17205/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(ZP,"href","/docs/transformers/pr_17205/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(eB,"href","/docs/transformers/pr_17205/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(oB,"href","/docs/transformers/pr_17205/en/model_doc/t5#transformers.T5Tokenizer"),c(rB,"href","/docs/transformers/pr_17205/en/model_doc/t5#transformers.T5TokenizerFast"),c(tB,"href","/docs/transformers/pr_17205/en/model_doc/tapas#transformers.TapasTokenizer"),c(aB,"href","/docs/transformers/pr_17205/en/model_doc/tapex#transformers.TapexTokenizer"),c(nB,"href","/docs/transformers/pr_17205/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(sB,"href","/docs/transformers/pr_17205/en/model_doc/bert#transformers.BertTokenizer"),c(lB,"href","/docs/transformers/pr_17205/en/model_doc/bert#transformers.BertTokenizerFast"),c(iB,"href","/docs/transformers/pr_17205/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(dB,"href","/docs/transformers/pr_17205/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(cB,"href","/docs/transformers/pr_17205/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(fB,"href","/docs/transformers/pr_17205/en/model_doc/xglm#transformers.XGLMTokenizer"),c(mB,"href","/docs/transformers/pr_17205/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(gB,"href","/docs/transformers/pr_17205/en/model_doc/xlm#transformers.XLMTokenizer"),c(hB,"href","/docs/transformers/pr_17205/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(pB,"href","/docs/transformers/pr_17205/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(_B,"href","/docs/transformers/pr_17205/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(uB,"href","/docs/transformers/pr_17205/en/model_doc/roberta#transformers.RobertaTokenizer"),c(bB,"href","/docs/transformers/pr_17205/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(vB,"href","/docs/transformers/pr_17205/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(FB,"href","/docs/transformers/pr_17205/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(TB,"href","/docs/transformers/pr_17205/en/model_doc/albert#transformers.AlbertTokenizer"),c(MB,"href","/docs/transformers/pr_17205/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(th,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ah,"id","transformers.AutoFeatureExtractor"),c(ah,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ah,"href","#transformers.AutoFeatureExtractor"),c(Mi,"class","relative group"),c(EB,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(CB,"href","/docs/transformers/pr_17205/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(wB,"href","/docs/transformers/pr_17205/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(AB,"href","/docs/transformers/pr_17205/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(yB,"href","/docs/transformers/pr_17205/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(LB,"href","/docs/transformers/pr_17205/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(xB,"href","/docs/transformers/pr_17205/en/model_doc/beit#transformers.BeitFeatureExtractor"),c($B,"href","/docs/transformers/pr_17205/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(kB,"href","/docs/transformers/pr_17205/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(SB,"href","/docs/transformers/pr_17205/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(RB,"href","/docs/transformers/pr_17205/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(PB,"href","/docs/transformers/pr_17205/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(BB,"href","/docs/transformers/pr_17205/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(IB,"href","/docs/transformers/pr_17205/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(qB,"href","/docs/transformers/pr_17205/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(NB,"href","/docs/transformers/pr_17205/en/model_doc/mobilevit#transformers.MobileViTFeatureExtractor"),c(jB,"href","/docs/transformers/pr_17205/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(DB,"href","/docs/transformers/pr_17205/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(GB,"href","/docs/transformers/pr_17205/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(OB,"href","/docs/transformers/pr_17205/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(VB,"href","/docs/transformers/pr_17205/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(XB,"href","/docs/transformers/pr_17205/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(zB,"href","/docs/transformers/pr_17205/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(WB,"href","/docs/transformers/pr_17205/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(QB,"href","/docs/transformers/pr_17205/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(HB,"href","/docs/transformers/pr_17205/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(UB,"href","/docs/transformers/pr_17205/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(JB,"href","/docs/transformers/pr_17205/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(YB,"href","/docs/transformers/pr_17205/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ih,"id","transformers.AutoProcessor"),c(Ih,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ih,"href","#transformers.AutoProcessor"),c(Ei,"class","relative group"),c(KB,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(ZB,"href","/docs/transformers/pr_17205/en/model_doc/clip#transformers.CLIPProcessor"),c(eI,"href","/docs/transformers/pr_17205/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(oI,"href","/docs/transformers/pr_17205/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(rI,"href","/docs/transformers/pr_17205/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(tI,"href","/docs/transformers/pr_17205/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(aI,"href","/docs/transformers/pr_17205/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(nI,"href","/docs/transformers/pr_17205/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(sI,"href","/docs/transformers/pr_17205/en/model_doc/trocr#transformers.TrOCRProcessor"),c(lI,"href","/docs/transformers/pr_17205/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(iI,"href","/docs/transformers/pr_17205/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(dI,"href","/docs/transformers/pr_17205/en/model_doc/vilt#transformers.ViltProcessor"),c(cI,"href","/docs/transformers/pr_17205/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(fI,"href","/docs/transformers/pr_17205/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(mI,"href","/docs/transformers/pr_17205/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(gI,"href","/docs/transformers/pr_17205/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(op,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rp,"id","transformers.AutoModel"),c(rp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(rp,"href","#transformers.AutoModel"),c(wi,"class","relative group"),c(hI,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pI,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_I,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uI,"href","/docs/transformers/pr_17205/en/model_doc/albert#transformers.AlbertModel"),c(bI,"href","/docs/transformers/pr_17205/en/model_doc/bart#transformers.BartModel"),c(vI,"href","/docs/transformers/pr_17205/en/model_doc/beit#transformers.BeitModel"),c(FI,"href","/docs/transformers/pr_17205/en/model_doc/bert#transformers.BertModel"),c(TI,"href","/docs/transformers/pr_17205/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(MI,"href","/docs/transformers/pr_17205/en/model_doc/big_bird#transformers.BigBirdModel"),c(EI,"href","/docs/transformers/pr_17205/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(CI,"href","/docs/transformers/pr_17205/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(wI,"href","/docs/transformers/pr_17205/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(AI,"href","/docs/transformers/pr_17205/en/model_doc/camembert#transformers.CamembertModel"),c(yI,"href","/docs/transformers/pr_17205/en/model_doc/canine#transformers.CanineModel"),c(LI,"href","/docs/transformers/pr_17205/en/model_doc/clip#transformers.CLIPModel"),c(xI,"href","/docs/transformers/pr_17205/en/model_doc/convbert#transformers.ConvBertModel"),c($I,"href","/docs/transformers/pr_17205/en/model_doc/convnext#transformers.ConvNextModel"),c(kI,"href","/docs/transformers/pr_17205/en/model_doc/ctrl#transformers.CTRLModel"),c(SI,"href","/docs/transformers/pr_17205/en/model_doc/cvt#transformers.CvtModel"),c(RI,"href","/docs/transformers/pr_17205/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(PI,"href","/docs/transformers/pr_17205/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(BI,"href","/docs/transformers/pr_17205/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(II,"href","/docs/transformers/pr_17205/en/model_doc/deberta#transformers.DebertaModel"),c(qI,"href","/docs/transformers/pr_17205/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(NI,"href","/docs/transformers/pr_17205/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(jI,"href","/docs/transformers/pr_17205/en/model_doc/deit#transformers.DeiTModel"),c(DI,"href","/docs/transformers/pr_17205/en/model_doc/detr#transformers.DetrModel"),c(GI,"href","/docs/transformers/pr_17205/en/model_doc/distilbert#transformers.DistilBertModel"),c(OI,"href","/docs/transformers/pr_17205/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(VI,"href","/docs/transformers/pr_17205/en/model_doc/dpt#transformers.DPTModel"),c(XI,"href","/docs/transformers/pr_17205/en/model_doc/electra#transformers.ElectraModel"),c(zI,"href","/docs/transformers/pr_17205/en/model_doc/flaubert#transformers.FlaubertModel"),c(WI,"href","/docs/transformers/pr_17205/en/model_doc/flava#transformers.FlavaModel"),c(QI,"href","/docs/transformers/pr_17205/en/model_doc/fnet#transformers.FNetModel"),c(HI,"href","/docs/transformers/pr_17205/en/model_doc/fsmt#transformers.FSMTModel"),c(UI,"href","/docs/transformers/pr_17205/en/model_doc/funnel#transformers.FunnelModel"),c(JI,"href","/docs/transformers/pr_17205/en/model_doc/funnel#transformers.FunnelBaseModel"),c(YI,"href","/docs/transformers/pr_17205/en/model_doc/glpn#transformers.GLPNModel"),c(KI,"href","/docs/transformers/pr_17205/en/model_doc/gpt2#transformers.GPT2Model"),c(ZI,"href","/docs/transformers/pr_17205/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(eq,"href","/docs/transformers/pr_17205/en/model_doc/gptj#transformers.GPTJModel"),c(oq,"href","/docs/transformers/pr_17205/en/model_doc/hubert#transformers.HubertModel"),c(rq,"href","/docs/transformers/pr_17205/en/model_doc/ibert#transformers.IBertModel"),c(tq,"href","/docs/transformers/pr_17205/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(aq,"href","/docs/transformers/pr_17205/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(nq,"href","/docs/transformers/pr_17205/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(sq,"href","/docs/transformers/pr_17205/en/model_doc/led#transformers.LEDModel"),c(lq,"href","/docs/transformers/pr_17205/en/model_doc/longformer#transformers.LongformerModel"),c(iq,"href","/docs/transformers/pr_17205/en/model_doc/luke#transformers.LukeModel"),c(dq,"href","/docs/transformers/pr_17205/en/model_doc/lxmert#transformers.LxmertModel"),c(cq,"href","/docs/transformers/pr_17205/en/model_doc/m2m_100#transformers.M2M100Model"),c(fq,"href","/docs/transformers/pr_17205/en/model_doc/marian#transformers.MarianModel"),c(mq,"href","/docs/transformers/pr_17205/en/model_doc/maskformer#transformers.MaskFormerModel"),c(gq,"href","/docs/transformers/pr_17205/en/model_doc/mbart#transformers.MBartModel"),c(hq,"href","/docs/transformers/pr_17205/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(pq,"href","/docs/transformers/pr_17205/en/model_doc/mobilebert#transformers.MobileBertModel"),c(_q,"href","/docs/transformers/pr_17205/en/model_doc/mobilevit#transformers.MobileViTModel"),c(uq,"href","/docs/transformers/pr_17205/en/model_doc/mpnet#transformers.MPNetModel"),c(bq,"href","/docs/transformers/pr_17205/en/model_doc/mt5#transformers.MT5Model"),c(vq,"href","/docs/transformers/pr_17205/en/model_doc/nystromformer#transformers.NystromformerModel"),c(Fq,"href","/docs/transformers/pr_17205/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(Tq,"href","/docs/transformers/pr_17205/en/model_doc/opt#transformers.OPTModel"),c(Mq,"href","/docs/transformers/pr_17205/en/model_doc/pegasus#transformers.PegasusModel"),c(Eq,"href","/docs/transformers/pr_17205/en/model_doc/perceiver#transformers.PerceiverModel"),c(Cq,"href","/docs/transformers/pr_17205/en/model_doc/plbart#transformers.PLBartModel"),c(wq,"href","/docs/transformers/pr_17205/en/model_doc/poolformer#transformers.PoolFormerModel"),c(Aq,"href","/docs/transformers/pr_17205/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(yq,"href","/docs/transformers/pr_17205/en/model_doc/qdqbert#transformers.QDQBertModel"),c(Lq,"href","/docs/transformers/pr_17205/en/model_doc/reformer#transformers.ReformerModel"),c(xq,"href","/docs/transformers/pr_17205/en/model_doc/regnet#transformers.RegNetModel"),c($q,"href","/docs/transformers/pr_17205/en/model_doc/rembert#transformers.RemBertModel"),c(kq,"href","/docs/transformers/pr_17205/en/model_doc/resnet#transformers.ResNetModel"),c(Sq,"href","/docs/transformers/pr_17205/en/model_doc/retribert#transformers.RetriBertModel"),c(Rq,"href","/docs/transformers/pr_17205/en/model_doc/roberta#transformers.RobertaModel"),c(Pq,"href","/docs/transformers/pr_17205/en/model_doc/roformer#transformers.RoFormerModel"),c(Bq,"href","/docs/transformers/pr_17205/en/model_doc/segformer#transformers.SegformerModel"),c(Iq,"href","/docs/transformers/pr_17205/en/model_doc/sew#transformers.SEWModel"),c(qq,"href","/docs/transformers/pr_17205/en/model_doc/sew-d#transformers.SEWDModel"),c(Nq,"href","/docs/transformers/pr_17205/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(jq,"href","/docs/transformers/pr_17205/en/model_doc/splinter#transformers.SplinterModel"),c(Dq,"href","/docs/transformers/pr_17205/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(Gq,"href","/docs/transformers/pr_17205/en/model_doc/swin#transformers.SwinModel"),c(Oq,"href","/docs/transformers/pr_17205/en/model_doc/t5#transformers.T5Model"),c(Vq,"href","/docs/transformers/pr_17205/en/model_doc/tapas#transformers.TapasModel"),c(Xq,"href","/docs/transformers/pr_17205/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(zq,"href","/docs/transformers/pr_17205/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(Wq,"href","/docs/transformers/pr_17205/en/model_doc/unispeech#transformers.UniSpeechModel"),c(Qq,"href","/docs/transformers/pr_17205/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(Hq,"href","/docs/transformers/pr_17205/en/model_doc/van#transformers.VanModel"),c(Uq,"href","/docs/transformers/pr_17205/en/model_doc/vilt#transformers.ViltModel"),c(Jq,"href","/docs/transformers/pr_17205/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(Yq,"href","/docs/transformers/pr_17205/en/model_doc/visual_bert#transformers.VisualBertModel"),c(Kq,"href","/docs/transformers/pr_17205/en/model_doc/vit#transformers.ViTModel"),c(Zq,"href","/docs/transformers/pr_17205/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(eN,"href","/docs/transformers/pr_17205/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(oN,"href","/docs/transformers/pr_17205/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(rN,"href","/docs/transformers/pr_17205/en/model_doc/wavlm#transformers.WavLMModel"),c(tN,"href","/docs/transformers/pr_17205/en/model_doc/xglm#transformers.XGLMModel"),c(aN,"href","/docs/transformers/pr_17205/en/model_doc/xlm#transformers.XLMModel"),c(nN,"href","/docs/transformers/pr_17205/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(sN,"href","/docs/transformers/pr_17205/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(lN,"href","/docs/transformers/pr_17205/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(iN,"href","/docs/transformers/pr_17205/en/model_doc/xlnet#transformers.XLNetModel"),c(dN,"href","/docs/transformers/pr_17205/en/model_doc/yolos#transformers.YolosModel"),c(cN,"href","/docs/transformers/pr_17205/en/model_doc/yoso#transformers.YosoModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(K_,"id","transformers.AutoModelForPreTraining"),c(K_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(K_,"href","#transformers.AutoModelForPreTraining"),c(Li,"class","relative group"),c(fN,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mN,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gN,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hN,"href","/docs/transformers/pr_17205/en/model_doc/albert#transformers.AlbertForPreTraining"),c(pN,"href","/docs/transformers/pr_17205/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(_N,"href","/docs/transformers/pr_17205/en/model_doc/bert#transformers.BertForPreTraining"),c(uN,"href","/docs/transformers/pr_17205/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(bN,"href","/docs/transformers/pr_17205/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(vN,"href","/docs/transformers/pr_17205/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(FN,"href","/docs/transformers/pr_17205/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(TN,"href","/docs/transformers/pr_17205/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(MN,"href","/docs/transformers/pr_17205/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(EN,"href","/docs/transformers/pr_17205/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(CN,"href","/docs/transformers/pr_17205/en/model_doc/electra#transformers.ElectraForPreTraining"),c(wN,"href","/docs/transformers/pr_17205/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(AN,"href","/docs/transformers/pr_17205/en/model_doc/flava#transformers.FlavaForPreTraining"),c(yN,"href","/docs/transformers/pr_17205/en/model_doc/fnet#transformers.FNetForPreTraining"),c(LN,"href","/docs/transformers/pr_17205/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(xN,"href","/docs/transformers/pr_17205/en/model_doc/funnel#transformers.FunnelForPreTraining"),c($N,"href","/docs/transformers/pr_17205/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(kN,"href","/docs/transformers/pr_17205/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(SN,"href","/docs/transformers/pr_17205/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(RN,"href","/docs/transformers/pr_17205/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(PN,"href","/docs/transformers/pr_17205/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(BN,"href","/docs/transformers/pr_17205/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(IN,"href","/docs/transformers/pr_17205/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(qN,"href","/docs/transformers/pr_17205/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(NN,"href","/docs/transformers/pr_17205/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(jN,"href","/docs/transformers/pr_17205/en/model_doc/retribert#transformers.RetriBertModel"),c(DN,"href","/docs/transformers/pr_17205/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(GN,"href","/docs/transformers/pr_17205/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(ON,"href","/docs/transformers/pr_17205/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(VN,"href","/docs/transformers/pr_17205/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(XN,"href","/docs/transformers/pr_17205/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(zN,"href","/docs/transformers/pr_17205/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(WN,"href","/docs/transformers/pr_17205/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(QN,"href","/docs/transformers/pr_17205/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(HN,"href","/docs/transformers/pr_17205/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(UN,"href","/docs/transformers/pr_17205/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(JN,"href","/docs/transformers/pr_17205/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(YN,"href","/docs/transformers/pr_17205/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(KN,"href","/docs/transformers/pr_17205/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(ZN,"href","/docs/transformers/pr_17205/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(ej,"href","/docs/transformers/pr_17205/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(oj,"href","/docs/transformers/pr_17205/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xu,"id","transformers.AutoModelForCausalLM"),c(Xu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Xu,"href","#transformers.AutoModelForCausalLM"),c(ki,"class","relative group"),c(rj,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tj,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aj,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nj,"href","/docs/transformers/pr_17205/en/model_doc/bart#transformers.BartForCausalLM"),c(sj,"href","/docs/transformers/pr_17205/en/model_doc/bert#transformers.BertLMHeadModel"),c(lj,"href","/docs/transformers/pr_17205/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(ij,"href","/docs/transformers/pr_17205/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(dj,"href","/docs/transformers/pr_17205/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(cj,"href","/docs/transformers/pr_17205/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(fj,"href","/docs/transformers/pr_17205/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(mj,"href","/docs/transformers/pr_17205/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(gj,"href","/docs/transformers/pr_17205/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(hj,"href","/docs/transformers/pr_17205/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(pj,"href","/docs/transformers/pr_17205/en/model_doc/electra#transformers.ElectraForCausalLM"),c(_j,"href","/docs/transformers/pr_17205/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(uj,"href","/docs/transformers/pr_17205/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(bj,"href","/docs/transformers/pr_17205/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(vj,"href","/docs/transformers/pr_17205/en/model_doc/marian#transformers.MarianForCausalLM"),c(Fj,"href","/docs/transformers/pr_17205/en/model_doc/mbart#transformers.MBartForCausalLM"),c(Tj,"href","/docs/transformers/pr_17205/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(Mj,"href","/docs/transformers/pr_17205/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(Ej,"href","/docs/transformers/pr_17205/en/model_doc/opt#transformers.OPTForCausalLM"),c(Cj,"href","/docs/transformers/pr_17205/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(wj,"href","/docs/transformers/pr_17205/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(Aj,"href","/docs/transformers/pr_17205/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(yj,"href","/docs/transformers/pr_17205/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(Lj,"href","/docs/transformers/pr_17205/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(xj,"href","/docs/transformers/pr_17205/en/model_doc/rembert#transformers.RemBertForCausalLM"),c($j,"href","/docs/transformers/pr_17205/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(kj,"href","/docs/transformers/pr_17205/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(Sj,"href","/docs/transformers/pr_17205/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(Rj,"href","/docs/transformers/pr_17205/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(Pj,"href","/docs/transformers/pr_17205/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(Bj,"href","/docs/transformers/pr_17205/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(Ij,"href","/docs/transformers/pr_17205/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(qj,"href","/docs/transformers/pr_17205/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(Nj,"href","/docs/transformers/pr_17205/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(jj,"href","/docs/transformers/pr_17205/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(Dj,"href","/docs/transformers/pr_17205/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($2,"id","transformers.AutoModelForMaskedLM"),c($2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($2,"href","#transformers.AutoModelForMaskedLM"),c(Pi,"class","relative group"),c(Gj,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Oj,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Vj,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xj,"href","/docs/transformers/pr_17205/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(zj,"href","/docs/transformers/pr_17205/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(Wj,"href","/docs/transformers/pr_17205/en/model_doc/bert#transformers.BertForMaskedLM"),c(Qj,"href","/docs/transformers/pr_17205/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(Hj,"href","/docs/transformers/pr_17205/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(Uj,"href","/docs/transformers/pr_17205/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(Jj,"href","/docs/transformers/pr_17205/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(Yj,"href","/docs/transformers/pr_17205/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(Kj,"href","/docs/transformers/pr_17205/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(Zj,"href","/docs/transformers/pr_17205/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(eD,"href","/docs/transformers/pr_17205/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(oD,"href","/docs/transformers/pr_17205/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(rD,"href","/docs/transformers/pr_17205/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(tD,"href","/docs/transformers/pr_17205/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(aD,"href","/docs/transformers/pr_17205/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(nD,"href","/docs/transformers/pr_17205/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(sD,"href","/docs/transformers/pr_17205/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(lD,"href","/docs/transformers/pr_17205/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(iD,"href","/docs/transformers/pr_17205/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(dD,"href","/docs/transformers/pr_17205/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(cD,"href","/docs/transformers/pr_17205/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(fD,"href","/docs/transformers/pr_17205/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(mD,"href","/docs/transformers/pr_17205/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(gD,"href","/docs/transformers/pr_17205/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(hD,"href","/docs/transformers/pr_17205/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(pD,"href","/docs/transformers/pr_17205/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(_D,"href","/docs/transformers/pr_17205/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(uD,"href","/docs/transformers/pr_17205/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(bD,"href","/docs/transformers/pr_17205/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(vD,"href","/docs/transformers/pr_17205/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(FD,"href","/docs/transformers/pr_17205/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(TD,"href","/docs/transformers/pr_17205/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(MD,"href","/docs/transformers/pr_17205/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(ED,"href","/docs/transformers/pr_17205/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(p1,"id","transformers.AutoModelForSeq2SeqLM"),c(p1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(p1,"href","#transformers.AutoModelForSeq2SeqLM"),c(qi,"class","relative group"),c(CD,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wD,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(AD,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yD,"href","/docs/transformers/pr_17205/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(LD,"href","/docs/transformers/pr_17205/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(xD,"href","/docs/transformers/pr_17205/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c($D,"href","/docs/transformers/pr_17205/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(kD,"href","/docs/transformers/pr_17205/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(SD,"href","/docs/transformers/pr_17205/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(RD,"href","/docs/transformers/pr_17205/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(PD,"href","/docs/transformers/pr_17205/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(BD,"href","/docs/transformers/pr_17205/en/model_doc/marian#transformers.MarianMTModel"),c(ID,"href","/docs/transformers/pr_17205/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(qD,"href","/docs/transformers/pr_17205/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(ND,"href","/docs/transformers/pr_17205/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(jD,"href","/docs/transformers/pr_17205/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(DD,"href","/docs/transformers/pr_17205/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(GD,"href","/docs/transformers/pr_17205/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(OD,"href","/docs/transformers/pr_17205/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(B1,"id","transformers.AutoModelForSequenceClassification"),c(B1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(B1,"href","#transformers.AutoModelForSequenceClassification"),c(Di,"class","relative group"),c(VD,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XD,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zD,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WD,"href","/docs/transformers/pr_17205/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(QD,"href","/docs/transformers/pr_17205/en/model_doc/bart#transformers.BartForSequenceClassification"),c(HD,"href","/docs/transformers/pr_17205/en/model_doc/bert#transformers.BertForSequenceClassification"),c(UD,"href","/docs/transformers/pr_17205/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(JD,"href","/docs/transformers/pr_17205/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(YD,"href","/docs/transformers/pr_17205/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(KD,"href","/docs/transformers/pr_17205/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(ZD,"href","/docs/transformers/pr_17205/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(eG,"href","/docs/transformers/pr_17205/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(oG,"href","/docs/transformers/pr_17205/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(rG,"href","/docs/transformers/pr_17205/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(tG,"href","/docs/transformers/pr_17205/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(aG,"href","/docs/transformers/pr_17205/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(nG,"href","/docs/transformers/pr_17205/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(sG,"href","/docs/transformers/pr_17205/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(lG,"href","/docs/transformers/pr_17205/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(iG,"href","/docs/transformers/pr_17205/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(dG,"href","/docs/transformers/pr_17205/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(cG,"href","/docs/transformers/pr_17205/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(fG,"href","/docs/transformers/pr_17205/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(mG,"href","/docs/transformers/pr_17205/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(gG,"href","/docs/transformers/pr_17205/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(hG,"href","/docs/transformers/pr_17205/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(pG,"href","/docs/transformers/pr_17205/en/model_doc/led#transformers.LEDForSequenceClassification"),c(_G,"href","/docs/transformers/pr_17205/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(uG,"href","/docs/transformers/pr_17205/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(bG,"href","/docs/transformers/pr_17205/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(vG,"href","/docs/transformers/pr_17205/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(FG,"href","/docs/transformers/pr_17205/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(TG,"href","/docs/transformers/pr_17205/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(MG,"href","/docs/transformers/pr_17205/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(EG,"href","/docs/transformers/pr_17205/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(CG,"href","/docs/transformers/pr_17205/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(wG,"href","/docs/transformers/pr_17205/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(AG,"href","/docs/transformers/pr_17205/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(yG,"href","/docs/transformers/pr_17205/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(LG,"href","/docs/transformers/pr_17205/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(xG,"href","/docs/transformers/pr_17205/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c($G,"href","/docs/transformers/pr_17205/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(kG,"href","/docs/transformers/pr_17205/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(SG,"href","/docs/transformers/pr_17205/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(RG,"href","/docs/transformers/pr_17205/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(PG,"href","/docs/transformers/pr_17205/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(BG,"href","/docs/transformers/pr_17205/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(IG,"href","/docs/transformers/pr_17205/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(qG,"href","/docs/transformers/pr_17205/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kb,"id","transformers.AutoModelForMultipleChoice"),c(kb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(kb,"href","#transformers.AutoModelForMultipleChoice"),c(Vi,"class","relative group"),c(NG,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jG,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DG,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GG,"href","/docs/transformers/pr_17205/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(OG,"href","/docs/transformers/pr_17205/en/model_doc/bert#transformers.BertForMultipleChoice"),c(VG,"href","/docs/transformers/pr_17205/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(XG,"href","/docs/transformers/pr_17205/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(zG,"href","/docs/transformers/pr_17205/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(WG,"href","/docs/transformers/pr_17205/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(QG,"href","/docs/transformers/pr_17205/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(HG,"href","/docs/transformers/pr_17205/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(UG,"href","/docs/transformers/pr_17205/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(JG,"href","/docs/transformers/pr_17205/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(YG,"href","/docs/transformers/pr_17205/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(KG,"href","/docs/transformers/pr_17205/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(ZG,"href","/docs/transformers/pr_17205/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(eO,"href","/docs/transformers/pr_17205/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(oO,"href","/docs/transformers/pr_17205/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(rO,"href","/docs/transformers/pr_17205/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(tO,"href","/docs/transformers/pr_17205/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(aO,"href","/docs/transformers/pr_17205/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(nO,"href","/docs/transformers/pr_17205/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(sO,"href","/docs/transformers/pr_17205/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(lO,"href","/docs/transformers/pr_17205/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(iO,"href","/docs/transformers/pr_17205/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(dO,"href","/docs/transformers/pr_17205/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(cO,"href","/docs/transformers/pr_17205/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(fO,"href","/docs/transformers/pr_17205/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(mO,"href","/docs/transformers/pr_17205/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(gO,"href","/docs/transformers/pr_17205/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(hO,"href","/docs/transformers/pr_17205/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(pO,"href","/docs/transformers/pr_17205/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(c5,"id","transformers.AutoModelForNextSentencePrediction"),c(c5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(c5,"href","#transformers.AutoModelForNextSentencePrediction"),c(Wi,"class","relative group"),c(_O,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uO,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bO,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vO,"href","/docs/transformers/pr_17205/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(FO,"href","/docs/transformers/pr_17205/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(TO,"href","/docs/transformers/pr_17205/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(MO,"href","/docs/transformers/pr_17205/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(EO,"href","/docs/transformers/pr_17205/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(v5,"id","transformers.AutoModelForTokenClassification"),c(v5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(v5,"href","#transformers.AutoModelForTokenClassification"),c(Ui,"class","relative group"),c(CO,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wO,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(AO,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yO,"href","/docs/transformers/pr_17205/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(LO,"href","/docs/transformers/pr_17205/en/model_doc/bert#transformers.BertForTokenClassification"),c(xO,"href","/docs/transformers/pr_17205/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c($O,"href","/docs/transformers/pr_17205/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(kO,"href","/docs/transformers/pr_17205/en/model_doc/canine#transformers.CanineForTokenClassification"),c(SO,"href","/docs/transformers/pr_17205/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(RO,"href","/docs/transformers/pr_17205/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(PO,"href","/docs/transformers/pr_17205/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(BO,"href","/docs/transformers/pr_17205/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(IO,"href","/docs/transformers/pr_17205/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(qO,"href","/docs/transformers/pr_17205/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(NO,"href","/docs/transformers/pr_17205/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(jO,"href","/docs/transformers/pr_17205/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(DO,"href","/docs/transformers/pr_17205/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(GO,"href","/docs/transformers/pr_17205/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(OO,"href","/docs/transformers/pr_17205/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(VO,"href","/docs/transformers/pr_17205/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(XO,"href","/docs/transformers/pr_17205/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(zO,"href","/docs/transformers/pr_17205/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(WO,"href","/docs/transformers/pr_17205/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(QO,"href","/docs/transformers/pr_17205/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(HO,"href","/docs/transformers/pr_17205/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(UO,"href","/docs/transformers/pr_17205/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(JO,"href","/docs/transformers/pr_17205/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(YO,"href","/docs/transformers/pr_17205/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(KO,"href","/docs/transformers/pr_17205/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(ZO,"href","/docs/transformers/pr_17205/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(eV,"href","/docs/transformers/pr_17205/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(oV,"href","/docs/transformers/pr_17205/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(rV,"href","/docs/transformers/pr_17205/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(tV,"href","/docs/transformers/pr_17205/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(aV,"href","/docs/transformers/pr_17205/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(nV,"href","/docs/transformers/pr_17205/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rv,"id","transformers.AutoModelForQuestionAnswering"),c(rv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(rv,"href","#transformers.AutoModelForQuestionAnswering"),c(Ki,"class","relative group"),c(sV,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lV,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iV,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dV,"href","/docs/transformers/pr_17205/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(cV,"href","/docs/transformers/pr_17205/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(fV,"href","/docs/transformers/pr_17205/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(mV,"href","/docs/transformers/pr_17205/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(gV,"href","/docs/transformers/pr_17205/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(hV,"href","/docs/transformers/pr_17205/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(pV,"href","/docs/transformers/pr_17205/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(_V,"href","/docs/transformers/pr_17205/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(uV,"href","/docs/transformers/pr_17205/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(bV,"href","/docs/transformers/pr_17205/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(vV,"href","/docs/transformers/pr_17205/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(FV,"href","/docs/transformers/pr_17205/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(TV,"href","/docs/transformers/pr_17205/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(MV,"href","/docs/transformers/pr_17205/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(EV,"href","/docs/transformers/pr_17205/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(CV,"href","/docs/transformers/pr_17205/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(wV,"href","/docs/transformers/pr_17205/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(AV,"href","/docs/transformers/pr_17205/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(yV,"href","/docs/transformers/pr_17205/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(LV,"href","/docs/transformers/pr_17205/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(xV,"href","/docs/transformers/pr_17205/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c($V,"href","/docs/transformers/pr_17205/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(kV,"href","/docs/transformers/pr_17205/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(SV,"href","/docs/transformers/pr_17205/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(RV,"href","/docs/transformers/pr_17205/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(PV,"href","/docs/transformers/pr_17205/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(BV,"href","/docs/transformers/pr_17205/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(IV,"href","/docs/transformers/pr_17205/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(qV,"href","/docs/transformers/pr_17205/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(NV,"href","/docs/transformers/pr_17205/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(jV,"href","/docs/transformers/pr_17205/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(DV,"href","/docs/transformers/pr_17205/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(GV,"href","/docs/transformers/pr_17205/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(OV,"href","/docs/transformers/pr_17205/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(VV,"href","/docs/transformers/pr_17205/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(XV,"href","/docs/transformers/pr_17205/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(zV,"href","/docs/transformers/pr_17205/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(WV,"href","/docs/transformers/pr_17205/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(QV,"href","/docs/transformers/pr_17205/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zv,"id","transformers.AutoModelForTableQuestionAnswering"),c(zv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zv,"href","#transformers.AutoModelForTableQuestionAnswering"),c(od,"class","relative group"),c(HV,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UV,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JV,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YV,"href","/docs/transformers/pr_17205/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jv,"id","transformers.AutoModelForImageClassification"),c(Jv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Jv,"href","#transformers.AutoModelForImageClassification"),c(ad,"class","relative group"),c(KV,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZV,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eX,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oX,"href","/docs/transformers/pr_17205/en/model_doc/beit#transformers.BeitForImageClassification"),c(rX,"href","/docs/transformers/pr_17205/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(tX,"href","/docs/transformers/pr_17205/en/model_doc/cvt#transformers.CvtForImageClassification"),c(aX,"href","/docs/transformers/pr_17205/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(nX,"href","/docs/transformers/pr_17205/en/model_doc/deit#transformers.DeiTForImageClassification"),c(sX,"href","/docs/transformers/pr_17205/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(lX,"href","/docs/transformers/pr_17205/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(iX,"href","/docs/transformers/pr_17205/en/model_doc/mobilevit#transformers.MobileViTForImageClassification"),c(dX,"href","/docs/transformers/pr_17205/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(cX,"href","/docs/transformers/pr_17205/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(fX,"href","/docs/transformers/pr_17205/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(mX,"href","/docs/transformers/pr_17205/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(gX,"href","/docs/transformers/pr_17205/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(hX,"href","/docs/transformers/pr_17205/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(pX,"href","/docs/transformers/pr_17205/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(_X,"href","/docs/transformers/pr_17205/en/model_doc/swin#transformers.SwinForImageClassification"),c(uX,"href","/docs/transformers/pr_17205/en/model_doc/van#transformers.VanForImageClassification"),c(bX,"href","/docs/transformers/pr_17205/en/model_doc/vit#transformers.ViTForImageClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gF,"id","transformers.AutoModelForVision2Seq"),c(gF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gF,"href","#transformers.AutoModelForVision2Seq"),c(ld,"class","relative group"),c(vX,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FX,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TX,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MX,"href","/docs/transformers/pr_17205/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bF,"id","transformers.AutoModelForAudioClassification"),c(bF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bF,"href","#transformers.AutoModelForAudioClassification"),c(cd,"class","relative group"),c(EX,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CX,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wX,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AX,"href","/docs/transformers/pr_17205/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(yX,"href","/docs/transformers/pr_17205/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(LX,"href","/docs/transformers/pr_17205/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(xX,"href","/docs/transformers/pr_17205/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c($X,"href","/docs/transformers/pr_17205/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(kX,"href","/docs/transformers/pr_17205/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(SX,"href","/docs/transformers/pr_17205/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(RX,"href","/docs/transformers/pr_17205/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(PX,"href","/docs/transformers/pr_17205/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kF,"id","transformers.AutoModelForAudioFrameClassification"),c(kF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(kF,"href","#transformers.AutoModelForAudioFrameClassification"),c(gd,"class","relative group"),c(BX,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IX,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qX,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NX,"href","/docs/transformers/pr_17205/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(jX,"href","/docs/transformers/pr_17205/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(DX,"href","/docs/transformers/pr_17205/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(GX,"href","/docs/transformers/pr_17205/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(OX,"href","/docs/transformers/pr_17205/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DF,"id","transformers.AutoModelForCTC"),c(DF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(DF,"href","#transformers.AutoModelForCTC"),c(_d,"class","relative group"),c(VX,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XX,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zX,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WX,"href","/docs/transformers/pr_17205/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(QX,"href","/docs/transformers/pr_17205/en/model_doc/hubert#transformers.HubertForCTC"),c(HX,"href","/docs/transformers/pr_17205/en/model_doc/sew#transformers.SEWForCTC"),c(UX,"href","/docs/transformers/pr_17205/en/model_doc/sew-d#transformers.SEWDForCTC"),c(JX,"href","/docs/transformers/pr_17205/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(YX,"href","/docs/transformers/pr_17205/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(KX,"href","/docs/transformers/pr_17205/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(ZX,"href","/docs/transformers/pr_17205/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(ez,"href","/docs/transformers/pr_17205/en/model_doc/wavlm#transformers.WavLMForCTC"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZF,"id","transformers.AutoModelForSpeechSeq2Seq"),c(ZF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ZF,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(vd,"class","relative group"),c(oz,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rz,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tz,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(az,"href","/docs/transformers/pr_17205/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(nz,"href","/docs/transformers/pr_17205/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(n0,"id","transformers.AutoModelForAudioXVector"),c(n0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(n0,"href","#transformers.AutoModelForAudioXVector"),c(Md,"class","relative group"),c(sz,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lz,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iz,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dz,"href","/docs/transformers/pr_17205/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(cz,"href","/docs/transformers/pr_17205/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(fz,"href","/docs/transformers/pr_17205/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(mz,"href","/docs/transformers/pr_17205/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(gz,"href","/docs/transformers/pr_17205/en/model_doc/wavlm#transformers.WavLMForXVector"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(h0,"id","transformers.AutoModelForMaskedImageModeling"),c(h0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(h0,"href","#transformers.AutoModelForMaskedImageModeling"),c(wd,"class","relative group"),c(hz,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pz,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_z,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uz,"href","/docs/transformers/pr_17205/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(bz,"href","/docs/transformers/pr_17205/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(vz,"href","/docs/transformers/pr_17205/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(T0,"id","transformers.AutoModelForObjectDetection"),c(T0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(T0,"href","#transformers.AutoModelForObjectDetection"),c(xd,"class","relative group"),c(Fz,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tz,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Mz,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ez,"href","/docs/transformers/pr_17205/en/model_doc/detr#transformers.DetrForObjectDetection"),c(Cz,"href","/docs/transformers/pr_17205/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(y0,"id","transformers.AutoModelForImageSegmentation"),c(y0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(y0,"href","#transformers.AutoModelForImageSegmentation"),c(Sd,"class","relative group"),c(wz,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Az,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yz,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lz,"href","/docs/transformers/pr_17205/en/model_doc/detr#transformers.DetrForSegmentation"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(S0,"id","transformers.AutoModelForSemanticSegmentation"),c(S0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(S0,"href","#transformers.AutoModelForSemanticSegmentation"),c(Bd,"class","relative group"),c(xz,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($z,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kz,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Sz,"href","/docs/transformers/pr_17205/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(Rz,"href","/docs/transformers/pr_17205/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(Pz,"href","/docs/transformers/pr_17205/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(Bz,"href","/docs/transformers/pr_17205/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation"),c(Iz,"href","/docs/transformers/pr_17205/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(G0,"id","transformers.AutoModelForInstanceSegmentation"),c(G0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(G0,"href","#transformers.AutoModelForInstanceSegmentation"),c(Nd,"class","relative group"),c(qz,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nz,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jz,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Dz,"href","/docs/transformers/pr_17205/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(W0,"id","transformers.TFAutoModel"),c(W0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(W0,"href","#transformers.TFAutoModel"),c(Gd,"class","relative group"),c(Gz,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Oz,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Vz,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xz,"href","/docs/transformers/pr_17205/en/model_doc/albert#transformers.TFAlbertModel"),c(zz,"href","/docs/transformers/pr_17205/en/model_doc/bart#transformers.TFBartModel"),c(Wz,"href","/docs/transformers/pr_17205/en/model_doc/bert#transformers.TFBertModel"),c(Qz,"href","/docs/transformers/pr_17205/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(Hz,"href","/docs/transformers/pr_17205/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(Uz,"href","/docs/transformers/pr_17205/en/model_doc/camembert#transformers.TFCamembertModel"),c(Jz,"href","/docs/transformers/pr_17205/en/model_doc/clip#transformers.TFCLIPModel"),c(Yz,"href","/docs/transformers/pr_17205/en/model_doc/convbert#transformers.TFConvBertModel"),c(Kz,"href","/docs/transformers/pr_17205/en/model_doc/convnext#transformers.TFConvNextModel"),c(Zz,"href","/docs/transformers/pr_17205/en/model_doc/ctrl#transformers.TFCTRLModel"),c(eW,"href","/docs/transformers/pr_17205/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(oW,"href","/docs/transformers/pr_17205/en/model_doc/deberta#transformers.TFDebertaModel"),c(rW,"href","/docs/transformers/pr_17205/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(tW,"href","/docs/transformers/pr_17205/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(aW,"href","/docs/transformers/pr_17205/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(nW,"href","/docs/transformers/pr_17205/en/model_doc/electra#transformers.TFElectraModel"),c(sW,"href","/docs/transformers/pr_17205/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(lW,"href","/docs/transformers/pr_17205/en/model_doc/funnel#transformers.TFFunnelModel"),c(iW,"href","/docs/transformers/pr_17205/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(dW,"href","/docs/transformers/pr_17205/en/model_doc/gpt2#transformers.TFGPT2Model"),c(cW,"href","/docs/transformers/pr_17205/en/model_doc/gptj#transformers.TFGPTJModel"),c(fW,"href","/docs/transformers/pr_17205/en/model_doc/hubert#transformers.TFHubertModel"),c(mW,"href","/docs/transformers/pr_17205/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(gW,"href","/docs/transformers/pr_17205/en/model_doc/led#transformers.TFLEDModel"),c(hW,"href","/docs/transformers/pr_17205/en/model_doc/longformer#transformers.TFLongformerModel"),c(pW,"href","/docs/transformers/pr_17205/en/model_doc/lxmert#transformers.TFLxmertModel"),c(_W,"href","/docs/transformers/pr_17205/en/model_doc/marian#transformers.TFMarianModel"),c(uW,"href","/docs/transformers/pr_17205/en/model_doc/mbart#transformers.TFMBartModel"),c(bW,"href","/docs/transformers/pr_17205/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(vW,"href","/docs/transformers/pr_17205/en/model_doc/mpnet#transformers.TFMPNetModel"),c(FW,"href","/docs/transformers/pr_17205/en/model_doc/mt5#transformers.TFMT5Model"),c(TW,"href","/docs/transformers/pr_17205/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(MW,"href","/docs/transformers/pr_17205/en/model_doc/pegasus#transformers.TFPegasusModel"),c(EW,"href","/docs/transformers/pr_17205/en/model_doc/rembert#transformers.TFRemBertModel"),c(CW,"href","/docs/transformers/pr_17205/en/model_doc/roberta#transformers.TFRobertaModel"),c(wW,"href","/docs/transformers/pr_17205/en/model_doc/roformer#transformers.TFRoFormerModel"),c(AW,"href","/docs/transformers/pr_17205/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(yW,"href","/docs/transformers/pr_17205/en/model_doc/swin#transformers.TFSwinModel"),c(LW,"href","/docs/transformers/pr_17205/en/model_doc/t5#transformers.TFT5Model"),c(xW,"href","/docs/transformers/pr_17205/en/model_doc/tapas#transformers.TFTapasModel"),c($W,"href","/docs/transformers/pr_17205/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(kW,"href","/docs/transformers/pr_17205/en/model_doc/vit#transformers.TFViTModel"),c(SW,"href","/docs/transformers/pr_17205/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(RW,"href","/docs/transformers/pr_17205/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(PW,"href","/docs/transformers/pr_17205/en/model_doc/xlm#transformers.TFXLMModel"),c(BW,"href","/docs/transformers/pr_17205/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(IW,"href","/docs/transformers/pr_17205/en/model_doc/xlnet#transformers.TFXLNetModel"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DT,"id","transformers.TFAutoModelForPreTraining"),c(DT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(DT,"href","#transformers.TFAutoModelForPreTraining"),c(Xd,"class","relative group"),c(qW,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NW,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jW,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DW,"href","/docs/transformers/pr_17205/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(GW,"href","/docs/transformers/pr_17205/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(OW,"href","/docs/transformers/pr_17205/en/model_doc/bert#transformers.TFBertForPreTraining"),c(VW,"href","/docs/transformers/pr_17205/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(XW,"href","/docs/transformers/pr_17205/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(zW,"href","/docs/transformers/pr_17205/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(WW,"href","/docs/transformers/pr_17205/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(QW,"href","/docs/transformers/pr_17205/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(HW,"href","/docs/transformers/pr_17205/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(UW,"href","/docs/transformers/pr_17205/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(JW,"href","/docs/transformers/pr_17205/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(YW,"href","/docs/transformers/pr_17205/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(KW,"href","/docs/transformers/pr_17205/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(ZW,"href","/docs/transformers/pr_17205/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(eQ,"href","/docs/transformers/pr_17205/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(oQ,"href","/docs/transformers/pr_17205/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(rQ,"href","/docs/transformers/pr_17205/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(tQ,"href","/docs/transformers/pr_17205/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(aQ,"href","/docs/transformers/pr_17205/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(nQ,"href","/docs/transformers/pr_17205/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(sQ,"href","/docs/transformers/pr_17205/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(lQ,"href","/docs/transformers/pr_17205/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(iQ,"href","/docs/transformers/pr_17205/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(m7,"id","transformers.TFAutoModelForCausalLM"),c(m7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m7,"href","#transformers.TFAutoModelForCausalLM"),c(Qd,"class","relative group"),c(dQ,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cQ,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fQ,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mQ,"href","/docs/transformers/pr_17205/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(gQ,"href","/docs/transformers/pr_17205/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(hQ,"href","/docs/transformers/pr_17205/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(pQ,"href","/docs/transformers/pr_17205/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(_Q,"href","/docs/transformers/pr_17205/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(uQ,"href","/docs/transformers/pr_17205/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(bQ,"href","/docs/transformers/pr_17205/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(vQ,"href","/docs/transformers/pr_17205/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(FQ,"href","/docs/transformers/pr_17205/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(TQ,"href","/docs/transformers/pr_17205/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(MQ,"href","/docs/transformers/pr_17205/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(EQ,"href","/docs/transformers/pr_17205/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(y7,"id","transformers.TFAutoModelForImageClassification"),c(y7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(y7,"href","#transformers.TFAutoModelForImageClassification"),c(Jd,"class","relative group"),c(CQ,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wQ,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(AQ,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yQ,"href","/docs/transformers/pr_17205/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(LQ,"href","/docs/transformers/pr_17205/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(xQ,"href","/docs/transformers/pr_17205/en/model_doc/swin#transformers.TFSwinForImageClassification"),c($Q,"href","/docs/transformers/pr_17205/en/model_doc/vit#transformers.TFViTForImageClassification"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(P7,"id","transformers.TFAutoModelForMaskedLM"),c(P7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(P7,"href","#transformers.TFAutoModelForMaskedLM"),c(Zd,"class","relative group"),c(kQ,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SQ,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RQ,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PQ,"href","/docs/transformers/pr_17205/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(BQ,"href","/docs/transformers/pr_17205/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(IQ,"href","/docs/transformers/pr_17205/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(qQ,"href","/docs/transformers/pr_17205/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(NQ,"href","/docs/transformers/pr_17205/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(jQ,"href","/docs/transformers/pr_17205/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(DQ,"href","/docs/transformers/pr_17205/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(GQ,"href","/docs/transformers/pr_17205/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(OQ,"href","/docs/transformers/pr_17205/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(VQ,"href","/docs/transformers/pr_17205/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(XQ,"href","/docs/transformers/pr_17205/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(zQ,"href","/docs/transformers/pr_17205/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(WQ,"href","/docs/transformers/pr_17205/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(QQ,"href","/docs/transformers/pr_17205/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(HQ,"href","/docs/transformers/pr_17205/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(UQ,"href","/docs/transformers/pr_17205/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(JQ,"href","/docs/transformers/pr_17205/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(YQ,"href","/docs/transformers/pr_17205/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(KQ,"href","/docs/transformers/pr_17205/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(ZQ,"href","/docs/transformers/pr_17205/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tM,"id","transformers.TFAutoModelForSeq2SeqLM"),c(tM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(tM,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(rc,"class","relative group"),c(eH,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oH,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rH,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tH,"href","/docs/transformers/pr_17205/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(aH,"href","/docs/transformers/pr_17205/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(nH,"href","/docs/transformers/pr_17205/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(sH,"href","/docs/transformers/pr_17205/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(lH,"href","/docs/transformers/pr_17205/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(iH,"href","/docs/transformers/pr_17205/en/model_doc/marian#transformers.TFMarianMTModel"),c(dH,"href","/docs/transformers/pr_17205/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(cH,"href","/docs/transformers/pr_17205/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(fH,"href","/docs/transformers/pr_17205/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(mH,"href","/docs/transformers/pr_17205/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_M,"id","transformers.TFAutoModelForSequenceClassification"),c(_M,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_M,"href","#transformers.TFAutoModelForSequenceClassification"),c(nc,"class","relative group"),c(gH,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hH,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pH,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_H,"href","/docs/transformers/pr_17205/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(uH,"href","/docs/transformers/pr_17205/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(bH,"href","/docs/transformers/pr_17205/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(vH,"href","/docs/transformers/pr_17205/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(FH,"href","/docs/transformers/pr_17205/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(TH,"href","/docs/transformers/pr_17205/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(MH,"href","/docs/transformers/pr_17205/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(EH,"href","/docs/transformers/pr_17205/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(CH,"href","/docs/transformers/pr_17205/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(wH,"href","/docs/transformers/pr_17205/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(AH,"href","/docs/transformers/pr_17205/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(yH,"href","/docs/transformers/pr_17205/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(LH,"href","/docs/transformers/pr_17205/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(xH,"href","/docs/transformers/pr_17205/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c($H,"href","/docs/transformers/pr_17205/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(kH,"href","/docs/transformers/pr_17205/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(SH,"href","/docs/transformers/pr_17205/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(RH,"href","/docs/transformers/pr_17205/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(PH,"href","/docs/transformers/pr_17205/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(BH,"href","/docs/transformers/pr_17205/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(IH,"href","/docs/transformers/pr_17205/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(qH,"href","/docs/transformers/pr_17205/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(NH,"href","/docs/transformers/pr_17205/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(jH,"href","/docs/transformers/pr_17205/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(DH,"href","/docs/transformers/pr_17205/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(GH,"href","/docs/transformers/pr_17205/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zM,"id","transformers.TFAutoModelForMultipleChoice"),c(zM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zM,"href","#transformers.TFAutoModelForMultipleChoice"),c(ic,"class","relative group"),c(OH,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VH,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XH,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zH,"href","/docs/transformers/pr_17205/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(WH,"href","/docs/transformers/pr_17205/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(QH,"href","/docs/transformers/pr_17205/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(HH,"href","/docs/transformers/pr_17205/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(UH,"href","/docs/transformers/pr_17205/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(JH,"href","/docs/transformers/pr_17205/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(YH,"href","/docs/transformers/pr_17205/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(KH,"href","/docs/transformers/pr_17205/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(ZH,"href","/docs/transformers/pr_17205/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(eU,"href","/docs/transformers/pr_17205/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(oU,"href","/docs/transformers/pr_17205/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(rU,"href","/docs/transformers/pr_17205/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(tU,"href","/docs/transformers/pr_17205/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(aU,"href","/docs/transformers/pr_17205/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(nU,"href","/docs/transformers/pr_17205/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(sU,"href","/docs/transformers/pr_17205/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(lU,"href","/docs/transformers/pr_17205/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(f4,"id","transformers.TFAutoModelForNextSentencePrediction"),c(f4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(f4,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(fc,"class","relative group"),c(iU,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dU,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cU,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fU,"href","/docs/transformers/pr_17205/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(mU,"href","/docs/transformers/pr_17205/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_4,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(_4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_4,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(hc,"class","relative group"),c(gU,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hU,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pU,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_U,"href","/docs/transformers/pr_17205/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(F4,"id","transformers.TFAutoModelForTokenClassification"),c(F4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(F4,"href","#transformers.TFAutoModelForTokenClassification"),c(uc,"class","relative group"),c(uU,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bU,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vU,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FU,"href","/docs/transformers/pr_17205/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(TU,"href","/docs/transformers/pr_17205/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(MU,"href","/docs/transformers/pr_17205/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(EU,"href","/docs/transformers/pr_17205/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(CU,"href","/docs/transformers/pr_17205/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(wU,"href","/docs/transformers/pr_17205/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(AU,"href","/docs/transformers/pr_17205/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(yU,"href","/docs/transformers/pr_17205/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(LU,"href","/docs/transformers/pr_17205/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(xU,"href","/docs/transformers/pr_17205/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c($U,"href","/docs/transformers/pr_17205/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(kU,"href","/docs/transformers/pr_17205/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(SU,"href","/docs/transformers/pr_17205/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(RU,"href","/docs/transformers/pr_17205/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(PU,"href","/docs/transformers/pr_17205/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(BU,"href","/docs/transformers/pr_17205/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(IU,"href","/docs/transformers/pr_17205/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(qU,"href","/docs/transformers/pr_17205/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(NU,"href","/docs/transformers/pr_17205/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(jU,"href","/docs/transformers/pr_17205/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(V4,"id","transformers.TFAutoModelForQuestionAnswering"),c(V4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(V4,"href","#transformers.TFAutoModelForQuestionAnswering"),c(Fc,"class","relative group"),c(DU,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GU,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OU,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VU,"href","/docs/transformers/pr_17205/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(XU,"href","/docs/transformers/pr_17205/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(zU,"href","/docs/transformers/pr_17205/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(WU,"href","/docs/transformers/pr_17205/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(QU,"href","/docs/transformers/pr_17205/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(HU,"href","/docs/transformers/pr_17205/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(UU,"href","/docs/transformers/pr_17205/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(JU,"href","/docs/transformers/pr_17205/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(YU,"href","/docs/transformers/pr_17205/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(KU,"href","/docs/transformers/pr_17205/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(ZU,"href","/docs/transformers/pr_17205/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(eJ,"href","/docs/transformers/pr_17205/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(oJ,"href","/docs/transformers/pr_17205/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(rJ,"href","/docs/transformers/pr_17205/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(tJ,"href","/docs/transformers/pr_17205/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(aJ,"href","/docs/transformers/pr_17205/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(nJ,"href","/docs/transformers/pr_17205/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(sJ,"href","/docs/transformers/pr_17205/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(lJ,"href","/docs/transformers/pr_17205/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(iJ,"href","/docs/transformers/pr_17205/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mE,"id","transformers.TFAutoModelForVision2Seq"),c(mE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(mE,"href","#transformers.TFAutoModelForVision2Seq"),c(Ec,"class","relative group"),c(dJ,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cJ,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fJ,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mJ,"href","/docs/transformers/pr_17205/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_E,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(_E,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_E,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(Ac,"class","relative group"),c(gJ,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hJ,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pJ,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_J,"href","/docs/transformers/pr_17205/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FE,"id","transformers.FlaxAutoModel"),c(FE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(FE,"href","#transformers.FlaxAutoModel"),c(xc,"class","relative group"),c(uJ,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bJ,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vJ,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FJ,"href","/docs/transformers/pr_17205/en/model_doc/albert#transformers.FlaxAlbertModel"),c(TJ,"href","/docs/transformers/pr_17205/en/model_doc/bart#transformers.FlaxBartModel"),c(MJ,"href","/docs/transformers/pr_17205/en/model_doc/beit#transformers.FlaxBeitModel"),c(EJ,"href","/docs/transformers/pr_17205/en/model_doc/bert#transformers.FlaxBertModel"),c(CJ,"href","/docs/transformers/pr_17205/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(wJ,"href","/docs/transformers/pr_17205/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(AJ,"href","/docs/transformers/pr_17205/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(yJ,"href","/docs/transformers/pr_17205/en/model_doc/clip#transformers.FlaxCLIPModel"),c(LJ,"href","/docs/transformers/pr_17205/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(xJ,"href","/docs/transformers/pr_17205/en/model_doc/electra#transformers.FlaxElectraModel"),c($J,"href","/docs/transformers/pr_17205/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(kJ,"href","/docs/transformers/pr_17205/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(SJ,"href","/docs/transformers/pr_17205/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(RJ,"href","/docs/transformers/pr_17205/en/model_doc/marian#transformers.FlaxMarianModel"),c(PJ,"href","/docs/transformers/pr_17205/en/model_doc/mbart#transformers.FlaxMBartModel"),c(BJ,"href","/docs/transformers/pr_17205/en/model_doc/mt5#transformers.FlaxMT5Model"),c(IJ,"href","/docs/transformers/pr_17205/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(qJ,"href","/docs/transformers/pr_17205/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(NJ,"href","/docs/transformers/pr_17205/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(jJ,"href","/docs/transformers/pr_17205/en/model_doc/t5#transformers.FlaxT5Model"),c(DJ,"href","/docs/transformers/pr_17205/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(GJ,"href","/docs/transformers/pr_17205/en/model_doc/vit#transformers.FlaxViTModel"),c(OJ,"href","/docs/transformers/pr_17205/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(VJ,"href","/docs/transformers/pr_17205/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(XJ,"href","/docs/transformers/pr_17205/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HE,"id","transformers.FlaxAutoModelForCausalLM"),c(HE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(HE,"href","#transformers.FlaxAutoModelForCausalLM"),c(Sc,"class","relative group"),c(zJ,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WJ,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QJ,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HJ,"href","/docs/transformers/pr_17205/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(UJ,"href","/docs/transformers/pr_17205/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(JJ,"href","/docs/transformers/pr_17205/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(YJ,"href","/docs/transformers/pr_17205/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(KJ,"href","/docs/transformers/pr_17205/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(ZJ,"href","/docs/transformers/pr_17205/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(eY,"href","/docs/transformers/pr_17205/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(oY,"href","/docs/transformers/pr_17205/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(rY,"href","/docs/transformers/pr_17205/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sC,"id","transformers.FlaxAutoModelForPreTraining"),c(sC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sC,"href","#transformers.FlaxAutoModelForPreTraining"),c(Bc,"class","relative group"),c(tY,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aY,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nY,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sY,"href","/docs/transformers/pr_17205/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(lY,"href","/docs/transformers/pr_17205/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(iY,"href","/docs/transformers/pr_17205/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(dY,"href","/docs/transformers/pr_17205/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(cY,"href","/docs/transformers/pr_17205/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(fY,"href","/docs/transformers/pr_17205/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(mY,"href","/docs/transformers/pr_17205/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(gY,"href","/docs/transformers/pr_17205/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(hY,"href","/docs/transformers/pr_17205/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(pY,"href","/docs/transformers/pr_17205/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(_Y,"href","/docs/transformers/pr_17205/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(uY,"href","/docs/transformers/pr_17205/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TC,"id","transformers.FlaxAutoModelForMaskedLM"),c(TC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(TC,"href","#transformers.FlaxAutoModelForMaskedLM"),c(Nc,"class","relative group"),c(bY,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vY,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FY,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TY,"href","/docs/transformers/pr_17205/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(MY,"href","/docs/transformers/pr_17205/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(EY,"href","/docs/transformers/pr_17205/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(CY,"href","/docs/transformers/pr_17205/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(wY,"href","/docs/transformers/pr_17205/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(AY,"href","/docs/transformers/pr_17205/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(yY,"href","/docs/transformers/pr_17205/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(LY,"href","/docs/transformers/pr_17205/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(xY,"href","/docs/transformers/pr_17205/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c($Y,"href","/docs/transformers/pr_17205/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PC,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(PC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(PC,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Gc,"class","relative group"),c(kY,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SY,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RY,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PY,"href","/docs/transformers/pr_17205/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(BY,"href","/docs/transformers/pr_17205/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(IY,"href","/docs/transformers/pr_17205/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(qY,"href","/docs/transformers/pr_17205/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(NY,"href","/docs/transformers/pr_17205/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(jY,"href","/docs/transformers/pr_17205/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(DY,"href","/docs/transformers/pr_17205/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(GY,"href","/docs/transformers/pr_17205/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(OY,"href","/docs/transformers/pr_17205/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WC,"id","transformers.FlaxAutoModelForSequenceClassification"),c(WC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(WC,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(Xc,"class","relative group"),c(VY,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XY,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zY,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WY,"href","/docs/transformers/pr_17205/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(QY,"href","/docs/transformers/pr_17205/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(HY,"href","/docs/transformers/pr_17205/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(UY,"href","/docs/transformers/pr_17205/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(JY,"href","/docs/transformers/pr_17205/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(YY,"href","/docs/transformers/pr_17205/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(KY,"href","/docs/transformers/pr_17205/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(ZY,"href","/docs/transformers/pr_17205/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(eK,"href","/docs/transformers/pr_17205/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(oK,"href","/docs/transformers/pr_17205/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(n3,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(n3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(n3,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(Qc,"class","relative group"),c(rK,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tK,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aK,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nK,"href","/docs/transformers/pr_17205/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(sK,"href","/docs/transformers/pr_17205/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(lK,"href","/docs/transformers/pr_17205/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(iK,"href","/docs/transformers/pr_17205/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(dK,"href","/docs/transformers/pr_17205/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(cK,"href","/docs/transformers/pr_17205/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(fK,"href","/docs/transformers/pr_17205/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(mK,"href","/docs/transformers/pr_17205/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(gK,"href","/docs/transformers/pr_17205/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(hK,"href","/docs/transformers/pr_17205/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(b3,"id","transformers.FlaxAutoModelForTokenClassification"),c(b3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(b3,"href","#transformers.FlaxAutoModelForTokenClassification"),c(Jc,"class","relative group"),c(pK,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_K,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uK,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bK,"href","/docs/transformers/pr_17205/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(vK,"href","/docs/transformers/pr_17205/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(FK,"href","/docs/transformers/pr_17205/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(TK,"href","/docs/transformers/pr_17205/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(MK,"href","/docs/transformers/pr_17205/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(EK,"href","/docs/transformers/pr_17205/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(CK,"href","/docs/transformers/pr_17205/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(wK,"href","/docs/transformers/pr_17205/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(x3,"id","transformers.FlaxAutoModelForMultipleChoice"),c(x3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(x3,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(Zc,"class","relative group"),c(AK,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yK,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(LK,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xK,"href","/docs/transformers/pr_17205/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c($K,"href","/docs/transformers/pr_17205/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(kK,"href","/docs/transformers/pr_17205/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(SK,"href","/docs/transformers/pr_17205/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(RK,"href","/docs/transformers/pr_17205/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(PK,"href","/docs/transformers/pr_17205/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(BK,"href","/docs/transformers/pr_17205/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(IK,"href","/docs/transformers/pr_17205/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(D3,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(D3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(D3,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(rf,"class","relative group"),c(qK,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NK,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jK,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DK,"href","/docs/transformers/pr_17205/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(X3,"id","transformers.FlaxAutoModelForImageClassification"),c(X3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(X3,"href","#transformers.FlaxAutoModelForImageClassification"),c(nf,"class","relative group"),c(GK,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OK,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VK,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XK,"href","/docs/transformers/pr_17205/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(zK,"href","/docs/transformers/pr_17205/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(U3,"id","transformers.FlaxAutoModelForVision2Seq"),c(U3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(U3,"href","#transformers.FlaxAutoModelForVision2Seq"),c(df,"class","relative group"),c(WK,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QK,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HK,"href","/docs/transformers/pr_17205/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UK,"href","/docs/transformers/pr_17205/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,u){e(document.head,g),b(f,v,u),b(f,p,u),e(p,m),e(m,_),M(d,_,null),e(p,h),e(p,Mo),e(Mo,fi),b(f,pf,u),b(f,tt,u),e(tt,mi),e(tt,gi),e(gi,pA),e(tt,_f),b(f,je,u),b(f,We,u),e(We,hi),e(We,yn),e(yn,_A),e(We,Ln),e(We,xn),e(xn,uA),e(We,pi),e(We,$n),e($n,bA),e(We,_i),b(f,uf,u),M(wa,f,u),b(f,Qe,u),b(f,Ae,u),e(Ae,I$),e(Ae,ui),e(ui,q$),e(Ae,N$),b(f,Eo,u),b(f,Aa,u),e(Aa,j$),e(Aa,bf),e(bf,D$),e(Aa,$Ge),b(f,vqe,u),b(f,bi,u),e(bi,vf),e(vf,Oee),M(vA,Oee,null),e(bi,kGe),e(bi,Vee),e(Vee,SGe),b(f,Fqe,u),b(f,kn,u),e(kn,RGe),e(kn,Xee),e(Xee,PGe),e(kn,BGe),e(kn,zee),e(zee,IGe),e(kn,qGe),b(f,Tqe,u),M(FA,f,u),b(f,Mqe,u),b(f,G$,u),e(G$,NGe),b(f,Eqe,u),M(Ff,f,u),b(f,Cqe,u),b(f,vi,u),e(vi,Tf),e(Tf,Wee),M(TA,Wee,null),e(vi,jGe),e(vi,Qee),e(Qee,DGe),b(f,wqe,u),b(f,Co,u),M(MA,Co,null),e(Co,GGe),e(Co,EA),e(EA,OGe),e(EA,O$),e(O$,VGe),e(EA,XGe),e(Co,zGe),e(Co,CA),e(CA,WGe),e(CA,Hee),e(Hee,QGe),e(CA,HGe),e(Co,UGe),e(Co,Er),M(wA,Er,null),e(Er,JGe),e(Er,Uee),e(Uee,YGe),e(Er,KGe),e(Er,Fi),e(Fi,ZGe),e(Fi,Jee),e(Jee,eOe),e(Fi,oOe),e(Fi,Yee),e(Yee,rOe),e(Fi,tOe),e(Er,aOe),e(Er,A),e(A,Mf),e(Mf,Kee),e(Kee,nOe),e(Mf,sOe),e(Mf,V$),e(V$,lOe),e(Mf,iOe),e(A,dOe),e(A,Ef),e(Ef,Zee),e(Zee,cOe),e(Ef,fOe),e(Ef,X$),e(X$,mOe),e(Ef,gOe),e(A,hOe),e(A,Cf),e(Cf,eoe),e(eoe,pOe),e(Cf,_Oe),e(Cf,z$),e(z$,uOe),e(Cf,bOe),e(A,vOe),e(A,wf),e(wf,ooe),e(ooe,FOe),e(wf,TOe),e(wf,W$),e(W$,MOe),e(wf,EOe),e(A,COe),e(A,Af),e(Af,roe),e(roe,wOe),e(Af,AOe),e(Af,Q$),e(Q$,yOe),e(Af,LOe),e(A,xOe),e(A,yf),e(yf,toe),e(toe,$Oe),e(yf,kOe),e(yf,H$),e(H$,SOe),e(yf,ROe),e(A,POe),e(A,Lf),e(Lf,aoe),e(aoe,BOe),e(Lf,IOe),e(Lf,U$),e(U$,qOe),e(Lf,NOe),e(A,jOe),e(A,xf),e(xf,noe),e(noe,DOe),e(xf,GOe),e(xf,J$),e(J$,OOe),e(xf,VOe),e(A,XOe),e(A,$f),e($f,soe),e(soe,zOe),e($f,WOe),e($f,Y$),e(Y$,QOe),e($f,HOe),e(A,UOe),e(A,kf),e(kf,loe),e(loe,JOe),e(kf,YOe),e(kf,K$),e(K$,KOe),e(kf,ZOe),e(A,eVe),e(A,Sf),e(Sf,ioe),e(ioe,oVe),e(Sf,rVe),e(Sf,Z$),e(Z$,tVe),e(Sf,aVe),e(A,nVe),e(A,Rf),e(Rf,doe),e(doe,sVe),e(Rf,lVe),e(Rf,ek),e(ek,iVe),e(Rf,dVe),e(A,cVe),e(A,Pf),e(Pf,coe),e(coe,fVe),e(Pf,mVe),e(Pf,ok),e(ok,gVe),e(Pf,hVe),e(A,pVe),e(A,Bf),e(Bf,foe),e(foe,_Ve),e(Bf,uVe),e(Bf,rk),e(rk,bVe),e(Bf,vVe),e(A,FVe),e(A,If),e(If,moe),e(moe,TVe),e(If,MVe),e(If,tk),e(tk,EVe),e(If,CVe),e(A,wVe),e(A,qf),e(qf,goe),e(goe,AVe),e(qf,yVe),e(qf,ak),e(ak,LVe),e(qf,xVe),e(A,$Ve),e(A,Nf),e(Nf,hoe),e(hoe,kVe),e(Nf,SVe),e(Nf,nk),e(nk,RVe),e(Nf,PVe),e(A,BVe),e(A,jf),e(jf,poe),e(poe,IVe),e(jf,qVe),e(jf,sk),e(sk,NVe),e(jf,jVe),e(A,DVe),e(A,Df),e(Df,_oe),e(_oe,GVe),e(Df,OVe),e(Df,lk),e(lk,VVe),e(Df,XVe),e(A,zVe),e(A,Gf),e(Gf,uoe),e(uoe,WVe),e(Gf,QVe),e(Gf,ik),e(ik,HVe),e(Gf,UVe),e(A,JVe),e(A,Of),e(Of,boe),e(boe,YVe),e(Of,KVe),e(Of,dk),e(dk,ZVe),e(Of,eXe),e(A,oXe),e(A,Vf),e(Vf,voe),e(voe,rXe),e(Vf,tXe),e(Vf,ck),e(ck,aXe),e(Vf,nXe),e(A,sXe),e(A,Xf),e(Xf,Foe),e(Foe,lXe),e(Xf,iXe),e(Xf,fk),e(fk,dXe),e(Xf,cXe),e(A,fXe),e(A,zf),e(zf,Toe),e(Toe,mXe),e(zf,gXe),e(zf,mk),e(mk,hXe),e(zf,pXe),e(A,_Xe),e(A,Wf),e(Wf,Moe),e(Moe,uXe),e(Wf,bXe),e(Wf,gk),e(gk,vXe),e(Wf,FXe),e(A,TXe),e(A,Qf),e(Qf,Eoe),e(Eoe,MXe),e(Qf,EXe),e(Qf,hk),e(hk,CXe),e(Qf,wXe),e(A,AXe),e(A,Hf),e(Hf,Coe),e(Coe,yXe),e(Hf,LXe),e(Hf,pk),e(pk,xXe),e(Hf,$Xe),e(A,kXe),e(A,Uf),e(Uf,woe),e(woe,SXe),e(Uf,RXe),e(Uf,_k),e(_k,PXe),e(Uf,BXe),e(A,IXe),e(A,Jf),e(Jf,Aoe),e(Aoe,qXe),e(Jf,NXe),e(Jf,uk),e(uk,jXe),e(Jf,DXe),e(A,GXe),e(A,Yf),e(Yf,yoe),e(yoe,OXe),e(Yf,VXe),e(Yf,bk),e(bk,XXe),e(Yf,zXe),e(A,WXe),e(A,Kf),e(Kf,Loe),e(Loe,QXe),e(Kf,HXe),e(Kf,vk),e(vk,UXe),e(Kf,JXe),e(A,YXe),e(A,Zf),e(Zf,xoe),e(xoe,KXe),e(Zf,ZXe),e(Zf,Fk),e(Fk,eze),e(Zf,oze),e(A,rze),e(A,em),e(em,$oe),e($oe,tze),e(em,aze),e(em,Tk),e(Tk,nze),e(em,sze),e(A,lze),e(A,om),e(om,koe),e(koe,ize),e(om,dze),e(om,Mk),e(Mk,cze),e(om,fze),e(A,mze),e(A,rm),e(rm,Soe),e(Soe,gze),e(rm,hze),e(rm,Ek),e(Ek,pze),e(rm,_ze),e(A,uze),e(A,tm),e(tm,Roe),e(Roe,bze),e(tm,vze),e(tm,Ck),e(Ck,Fze),e(tm,Tze),e(A,Mze),e(A,am),e(am,Poe),e(Poe,Eze),e(am,Cze),e(am,wk),e(wk,wze),e(am,Aze),e(A,yze),e(A,nm),e(nm,Boe),e(Boe,Lze),e(nm,xze),e(nm,Ak),e(Ak,$ze),e(nm,kze),e(A,Sze),e(A,sm),e(sm,Ioe),e(Ioe,Rze),e(sm,Pze),e(sm,yk),e(yk,Bze),e(sm,Ize),e(A,qze),e(A,lm),e(lm,qoe),e(qoe,Nze),e(lm,jze),e(lm,Lk),e(Lk,Dze),e(lm,Gze),e(A,Oze),e(A,im),e(im,Noe),e(Noe,Vze),e(im,Xze),e(im,xk),e(xk,zze),e(im,Wze),e(A,Qze),e(A,dm),e(dm,joe),e(joe,Hze),e(dm,Uze),e(dm,$k),e($k,Jze),e(dm,Yze),e(A,Kze),e(A,cm),e(cm,Doe),e(Doe,Zze),e(cm,eWe),e(cm,kk),e(kk,oWe),e(cm,rWe),e(A,tWe),e(A,fm),e(fm,Goe),e(Goe,aWe),e(fm,nWe),e(fm,Sk),e(Sk,sWe),e(fm,lWe),e(A,iWe),e(A,mm),e(mm,Ooe),e(Ooe,dWe),e(mm,cWe),e(mm,Rk),e(Rk,fWe),e(mm,mWe),e(A,gWe),e(A,gm),e(gm,Voe),e(Voe,hWe),e(gm,pWe),e(gm,Pk),e(Pk,_We),e(gm,uWe),e(A,bWe),e(A,hm),e(hm,Xoe),e(Xoe,vWe),e(hm,FWe),e(hm,Bk),e(Bk,TWe),e(hm,MWe),e(A,EWe),e(A,pm),e(pm,zoe),e(zoe,CWe),e(pm,wWe),e(pm,Ik),e(Ik,AWe),e(pm,yWe),e(A,LWe),e(A,_m),e(_m,Woe),e(Woe,xWe),e(_m,$We),e(_m,qk),e(qk,kWe),e(_m,SWe),e(A,RWe),e(A,um),e(um,Qoe),e(Qoe,PWe),e(um,BWe),e(um,Nk),e(Nk,IWe),e(um,qWe),e(A,NWe),e(A,bm),e(bm,Hoe),e(Hoe,jWe),e(bm,DWe),e(bm,jk),e(jk,GWe),e(bm,OWe),e(A,VWe),e(A,vm),e(vm,Uoe),e(Uoe,XWe),e(vm,zWe),e(vm,Dk),e(Dk,WWe),e(vm,QWe),e(A,HWe),e(A,Fm),e(Fm,Joe),e(Joe,UWe),e(Fm,JWe),e(Fm,Gk),e(Gk,YWe),e(Fm,KWe),e(A,ZWe),e(A,Tm),e(Tm,Yoe),e(Yoe,eQe),e(Tm,oQe),e(Tm,Ok),e(Ok,rQe),e(Tm,tQe),e(A,aQe),e(A,Mm),e(Mm,Koe),e(Koe,nQe),e(Mm,sQe),e(Mm,Vk),e(Vk,lQe),e(Mm,iQe),e(A,dQe),e(A,Em),e(Em,Zoe),e(Zoe,cQe),e(Em,fQe),e(Em,Xk),e(Xk,mQe),e(Em,gQe),e(A,hQe),e(A,Cm),e(Cm,ere),e(ere,pQe),e(Cm,_Qe),e(Cm,zk),e(zk,uQe),e(Cm,bQe),e(A,vQe),e(A,wm),e(wm,ore),e(ore,FQe),e(wm,TQe),e(wm,Wk),e(Wk,MQe),e(wm,EQe),e(A,CQe),e(A,Am),e(Am,rre),e(rre,wQe),e(Am,AQe),e(Am,Qk),e(Qk,yQe),e(Am,LQe),e(A,xQe),e(A,ym),e(ym,tre),e(tre,$Qe),e(ym,kQe),e(ym,Hk),e(Hk,SQe),e(ym,RQe),e(A,PQe),e(A,Lm),e(Lm,are),e(are,BQe),e(Lm,IQe),e(Lm,Uk),e(Uk,qQe),e(Lm,NQe),e(A,jQe),e(A,xm),e(xm,nre),e(nre,DQe),e(xm,GQe),e(xm,Jk),e(Jk,OQe),e(xm,VQe),e(A,XQe),e(A,$m),e($m,sre),e(sre,zQe),e($m,WQe),e($m,Yk),e(Yk,QQe),e($m,HQe),e(A,UQe),e(A,km),e(km,lre),e(lre,JQe),e(km,YQe),e(km,Kk),e(Kk,KQe),e(km,ZQe),e(A,eHe),e(A,Sm),e(Sm,ire),e(ire,oHe),e(Sm,rHe),e(Sm,Zk),e(Zk,tHe),e(Sm,aHe),e(A,nHe),e(A,Rm),e(Rm,dre),e(dre,sHe),e(Rm,lHe),e(Rm,eS),e(eS,iHe),e(Rm,dHe),e(A,cHe),e(A,Pm),e(Pm,cre),e(cre,fHe),e(Pm,mHe),e(Pm,oS),e(oS,gHe),e(Pm,hHe),e(A,pHe),e(A,Bm),e(Bm,fre),e(fre,_He),e(Bm,uHe),e(Bm,rS),e(rS,bHe),e(Bm,vHe),e(A,FHe),e(A,Im),e(Im,mre),e(mre,THe),e(Im,MHe),e(Im,tS),e(tS,EHe),e(Im,CHe),e(A,wHe),e(A,qm),e(qm,gre),e(gre,AHe),e(qm,yHe),e(qm,aS),e(aS,LHe),e(qm,xHe),e(A,$He),e(A,Nm),e(Nm,hre),e(hre,kHe),e(Nm,SHe),e(Nm,nS),e(nS,RHe),e(Nm,PHe),e(A,BHe),e(A,jm),e(jm,pre),e(pre,IHe),e(jm,qHe),e(jm,sS),e(sS,NHe),e(jm,jHe),e(A,DHe),e(A,Dm),e(Dm,_re),e(_re,GHe),e(Dm,OHe),e(Dm,lS),e(lS,VHe),e(Dm,XHe),e(A,zHe),e(A,Gm),e(Gm,ure),e(ure,WHe),e(Gm,QHe),e(Gm,iS),e(iS,HHe),e(Gm,UHe),e(A,JHe),e(A,Om),e(Om,bre),e(bre,YHe),e(Om,KHe),e(Om,dS),e(dS,ZHe),e(Om,eUe),e(A,oUe),e(A,Vm),e(Vm,vre),e(vre,rUe),e(Vm,tUe),e(Vm,cS),e(cS,aUe),e(Vm,nUe),e(A,sUe),e(A,Xm),e(Xm,Fre),e(Fre,lUe),e(Xm,iUe),e(Xm,fS),e(fS,dUe),e(Xm,cUe),e(A,fUe),e(A,zm),e(zm,Tre),e(Tre,mUe),e(zm,gUe),e(zm,mS),e(mS,hUe),e(zm,pUe),e(A,_Ue),e(A,Wm),e(Wm,Mre),e(Mre,uUe),e(Wm,bUe),e(Wm,gS),e(gS,vUe),e(Wm,FUe),e(A,TUe),e(A,Qm),e(Qm,Ere),e(Ere,MUe),e(Qm,EUe),e(Qm,hS),e(hS,CUe),e(Qm,wUe),e(A,AUe),e(A,Hm),e(Hm,Cre),e(Cre,yUe),e(Hm,LUe),e(Hm,pS),e(pS,xUe),e(Hm,$Ue),e(A,kUe),e(A,Um),e(Um,wre),e(wre,SUe),e(Um,RUe),e(Um,_S),e(_S,PUe),e(Um,BUe),e(A,IUe),e(A,Jm),e(Jm,Are),e(Are,qUe),e(Jm,NUe),e(Jm,uS),e(uS,jUe),e(Jm,DUe),e(A,GUe),e(A,Ym),e(Ym,yre),e(yre,OUe),e(Ym,VUe),e(Ym,bS),e(bS,XUe),e(Ym,zUe),e(A,WUe),e(A,Km),e(Km,Lre),e(Lre,QUe),e(Km,HUe),e(Km,vS),e(vS,UUe),e(Km,JUe),e(A,YUe),e(A,Zm),e(Zm,xre),e(xre,KUe),e(Zm,ZUe),e(Zm,FS),e(FS,eJe),e(Zm,oJe),e(A,rJe),e(A,eg),e(eg,$re),e($re,tJe),e(eg,aJe),e(eg,TS),e(TS,nJe),e(eg,sJe),e(A,lJe),e(A,og),e(og,kre),e(kre,iJe),e(og,dJe),e(og,MS),e(MS,cJe),e(og,fJe),e(A,mJe),e(A,rg),e(rg,Sre),e(Sre,gJe),e(rg,hJe),e(rg,ES),e(ES,pJe),e(rg,_Je),e(A,uJe),e(A,tg),e(tg,Rre),e(Rre,bJe),e(tg,vJe),e(tg,CS),e(CS,FJe),e(tg,TJe),e(A,MJe),e(A,ag),e(ag,Pre),e(Pre,EJe),e(ag,CJe),e(ag,wS),e(wS,wJe),e(ag,AJe),e(A,yJe),e(A,ng),e(ng,Bre),e(Bre,LJe),e(ng,xJe),e(ng,AS),e(AS,$Je),e(ng,kJe),e(A,SJe),e(A,sg),e(sg,Ire),e(Ire,RJe),e(sg,PJe),e(sg,yS),e(yS,BJe),e(sg,IJe),e(A,qJe),e(A,lg),e(lg,qre),e(qre,NJe),e(lg,jJe),e(lg,LS),e(LS,DJe),e(lg,GJe),e(A,OJe),e(A,ig),e(ig,Nre),e(Nre,VJe),e(ig,XJe),e(ig,xS),e(xS,zJe),e(ig,WJe),e(A,QJe),e(A,dg),e(dg,jre),e(jre,HJe),e(dg,UJe),e(dg,$S),e($S,JJe),e(dg,YJe),e(A,KJe),e(A,cg),e(cg,Dre),e(Dre,ZJe),e(cg,eYe),e(cg,kS),e(kS,oYe),e(cg,rYe),e(A,tYe),e(A,fg),e(fg,Gre),e(Gre,aYe),e(fg,nYe),e(fg,SS),e(SS,sYe),e(fg,lYe),e(A,iYe),e(A,mg),e(mg,Ore),e(Ore,dYe),e(mg,cYe),e(mg,RS),e(RS,fYe),e(mg,mYe),e(A,gYe),e(A,gg),e(gg,Vre),e(Vre,hYe),e(gg,pYe),e(gg,PS),e(PS,_Ye),e(gg,uYe),e(A,bYe),e(A,hg),e(hg,Xre),e(Xre,vYe),e(hg,FYe),e(hg,BS),e(BS,TYe),e(hg,MYe),e(A,EYe),e(A,pg),e(pg,zre),e(zre,CYe),e(pg,wYe),e(pg,IS),e(IS,AYe),e(pg,yYe),e(A,LYe),e(A,_g),e(_g,Wre),e(Wre,xYe),e(_g,$Ye),e(_g,qS),e(qS,kYe),e(_g,SYe),e(A,RYe),e(A,ug),e(ug,Qre),e(Qre,PYe),e(ug,BYe),e(ug,NS),e(NS,IYe),e(ug,qYe),e(A,NYe),e(A,bg),e(bg,Hre),e(Hre,jYe),e(bg,DYe),e(bg,jS),e(jS,GYe),e(bg,OYe),e(A,VYe),e(A,vg),e(vg,Ure),e(Ure,XYe),e(vg,zYe),e(vg,DS),e(DS,WYe),e(vg,QYe),e(A,HYe),e(A,Fg),e(Fg,Jre),e(Jre,UYe),e(Fg,JYe),e(Fg,GS),e(GS,YYe),e(Fg,KYe),e(A,ZYe),e(A,Tg),e(Tg,Yre),e(Yre,eKe),e(Tg,oKe),e(Tg,OS),e(OS,rKe),e(Tg,tKe),e(Er,aKe),M(Mg,Er,null),e(Co,nKe),e(Co,Eg),M(AA,Eg,null),e(Eg,sKe),e(Eg,Kre),e(Kre,lKe),b(f,Aqe,u),b(f,Ti,u),e(Ti,Cg),e(Cg,Zre),M(yA,Zre,null),e(Ti,iKe),e(Ti,ete),e(ete,dKe),b(f,yqe,u),b(f,wo,u),M(LA,wo,null),e(wo,cKe),e(wo,xA),e(xA,fKe),e(xA,VS),e(VS,mKe),e(xA,gKe),e(wo,hKe),e(wo,$A),e($A,pKe),e($A,ote),e(ote,_Ke),e($A,uKe),e(wo,bKe),e(wo,Cr),M(kA,Cr,null),e(Cr,vKe),e(Cr,rte),e(rte,FKe),e(Cr,TKe),e(Cr,ya),e(ya,MKe),e(ya,tte),e(tte,EKe),e(ya,CKe),e(ya,ate),e(ate,wKe),e(ya,AKe),e(ya,nte),e(nte,yKe),e(ya,LKe),e(Cr,xKe),e(Cr,k),e(k,Sn),e(Sn,ste),e(ste,$Ke),e(Sn,kKe),e(Sn,XS),e(XS,SKe),e(Sn,RKe),e(Sn,zS),e(zS,PKe),e(Sn,BKe),e(k,IKe),e(k,Rn),e(Rn,lte),e(lte,qKe),e(Rn,NKe),e(Rn,WS),e(WS,jKe),e(Rn,DKe),e(Rn,QS),e(QS,GKe),e(Rn,OKe),e(k,VKe),e(k,Pn),e(Pn,ite),e(ite,XKe),e(Pn,zKe),e(Pn,HS),e(HS,WKe),e(Pn,QKe),e(Pn,US),e(US,HKe),e(Pn,UKe),e(k,JKe),e(k,wg),e(wg,dte),e(dte,YKe),e(wg,KKe),e(wg,JS),e(JS,ZKe),e(wg,eZe),e(k,oZe),e(k,Bn),e(Bn,cte),e(cte,rZe),e(Bn,tZe),e(Bn,YS),e(YS,aZe),e(Bn,nZe),e(Bn,KS),e(KS,sZe),e(Bn,lZe),e(k,iZe),e(k,Ag),e(Ag,fte),e(fte,dZe),e(Ag,cZe),e(Ag,ZS),e(ZS,fZe),e(Ag,mZe),e(k,gZe),e(k,yg),e(yg,mte),e(mte,hZe),e(yg,pZe),e(yg,eR),e(eR,_Ze),e(yg,uZe),e(k,bZe),e(k,Lg),e(Lg,gte),e(gte,vZe),e(Lg,FZe),e(Lg,oR),e(oR,TZe),e(Lg,MZe),e(k,EZe),e(k,In),e(In,hte),e(hte,CZe),e(In,wZe),e(In,rR),e(rR,AZe),e(In,yZe),e(In,tR),e(tR,LZe),e(In,xZe),e(k,$Ze),e(k,qn),e(qn,pte),e(pte,kZe),e(qn,SZe),e(qn,aR),e(aR,RZe),e(qn,PZe),e(qn,nR),e(nR,BZe),e(qn,IZe),e(k,qZe),e(k,Nn),e(Nn,_te),e(_te,NZe),e(Nn,jZe),e(Nn,sR),e(sR,DZe),e(Nn,GZe),e(Nn,lR),e(lR,OZe),e(Nn,VZe),e(k,XZe),e(k,xg),e(xg,ute),e(ute,zZe),e(xg,WZe),e(xg,iR),e(iR,QZe),e(xg,HZe),e(k,UZe),e(k,$g),e($g,bte),e(bte,JZe),e($g,YZe),e($g,dR),e(dR,KZe),e($g,ZZe),e(k,eeo),e(k,jn),e(jn,vte),e(vte,oeo),e(jn,reo),e(jn,cR),e(cR,teo),e(jn,aeo),e(jn,fR),e(fR,neo),e(jn,seo),e(k,leo),e(k,kg),e(kg,Fte),e(Fte,ieo),e(kg,deo),e(kg,mR),e(mR,ceo),e(kg,feo),e(k,meo),e(k,Dn),e(Dn,Tte),e(Tte,geo),e(Dn,heo),e(Dn,gR),e(gR,peo),e(Dn,_eo),e(Dn,hR),e(hR,ueo),e(Dn,beo),e(k,veo),e(k,Gn),e(Gn,Mte),e(Mte,Feo),e(Gn,Teo),e(Gn,pR),e(pR,Meo),e(Gn,Eeo),e(Gn,_R),e(_R,Ceo),e(Gn,weo),e(k,Aeo),e(k,On),e(On,Ete),e(Ete,yeo),e(On,Leo),e(On,uR),e(uR,xeo),e(On,$eo),e(On,bR),e(bR,keo),e(On,Seo),e(k,Reo),e(k,Sg),e(Sg,Cte),e(Cte,Peo),e(Sg,Beo),e(Sg,vR),e(vR,Ieo),e(Sg,qeo),e(k,Neo),e(k,Vn),e(Vn,wte),e(wte,jeo),e(Vn,Deo),e(Vn,FR),e(FR,Geo),e(Vn,Oeo),e(Vn,TR),e(TR,Veo),e(Vn,Xeo),e(k,zeo),e(k,Xn),e(Xn,Ate),e(Ate,Weo),e(Xn,Qeo),e(Xn,MR),e(MR,Heo),e(Xn,Ueo),e(Xn,ER),e(ER,Jeo),e(Xn,Yeo),e(k,Keo),e(k,zn),e(zn,yte),e(yte,Zeo),e(zn,eoo),e(zn,CR),e(CR,ooo),e(zn,roo),e(zn,wR),e(wR,too),e(zn,aoo),e(k,noo),e(k,Wn),e(Wn,Lte),e(Lte,soo),e(Wn,loo),e(Wn,AR),e(AR,ioo),e(Wn,doo),e(Wn,yR),e(yR,coo),e(Wn,foo),e(k,moo),e(k,Qn),e(Qn,xte),e(xte,goo),e(Qn,hoo),e(Qn,LR),e(LR,poo),e(Qn,_oo),e(Qn,xR),e(xR,uoo),e(Qn,boo),e(k,voo),e(k,Hn),e(Hn,$te),e($te,Foo),e(Hn,Too),e(Hn,$R),e($R,Moo),e(Hn,Eoo),e(Hn,kR),e(kR,Coo),e(Hn,woo),e(k,Aoo),e(k,Rg),e(Rg,kte),e(kte,yoo),e(Rg,Loo),e(Rg,SR),e(SR,xoo),e(Rg,$oo),e(k,koo),e(k,Un),e(Un,Ste),e(Ste,Soo),e(Un,Roo),e(Un,RR),e(RR,Poo),e(Un,Boo),e(Un,PR),e(PR,Ioo),e(Un,qoo),e(k,Noo),e(k,Pg),e(Pg,Rte),e(Rte,joo),e(Pg,Doo),e(Pg,BR),e(BR,Goo),e(Pg,Ooo),e(k,Voo),e(k,Jn),e(Jn,Pte),e(Pte,Xoo),e(Jn,zoo),e(Jn,IR),e(IR,Woo),e(Jn,Qoo),e(Jn,qR),e(qR,Hoo),e(Jn,Uoo),e(k,Joo),e(k,Yn),e(Yn,Bte),e(Bte,Yoo),e(Yn,Koo),e(Yn,NR),e(NR,Zoo),e(Yn,ero),e(Yn,jR),e(jR,oro),e(Yn,rro),e(k,tro),e(k,Kn),e(Kn,Ite),e(Ite,aro),e(Kn,nro),e(Kn,DR),e(DR,sro),e(Kn,lro),e(Kn,GR),e(GR,iro),e(Kn,dro),e(k,cro),e(k,Zn),e(Zn,qte),e(qte,fro),e(Zn,mro),e(Zn,OR),e(OR,gro),e(Zn,hro),e(Zn,VR),e(VR,pro),e(Zn,_ro),e(k,uro),e(k,es),e(es,Nte),e(Nte,bro),e(es,vro),e(es,XR),e(XR,Fro),e(es,Tro),e(es,zR),e(zR,Mro),e(es,Ero),e(k,Cro),e(k,Bg),e(Bg,jte),e(jte,wro),e(Bg,Aro),e(Bg,WR),e(WR,yro),e(Bg,Lro),e(k,xro),e(k,os),e(os,Dte),e(Dte,$ro),e(os,kro),e(os,QR),e(QR,Sro),e(os,Rro),e(os,HR),e(HR,Pro),e(os,Bro),e(k,Iro),e(k,rs),e(rs,Gte),e(Gte,qro),e(rs,Nro),e(rs,UR),e(UR,jro),e(rs,Dro),e(rs,JR),e(JR,Gro),e(rs,Oro),e(k,Vro),e(k,ts),e(ts,Ote),e(Ote,Xro),e(ts,zro),e(ts,YR),e(YR,Wro),e(ts,Qro),e(ts,KR),e(KR,Hro),e(ts,Uro),e(k,Jro),e(k,as),e(as,Vte),e(Vte,Yro),e(as,Kro),e(as,ZR),e(ZR,Zro),e(as,eto),e(as,eP),e(eP,oto),e(as,rto),e(k,tto),e(k,ns),e(ns,Xte),e(Xte,ato),e(ns,nto),e(ns,oP),e(oP,sto),e(ns,lto),e(ns,rP),e(rP,ito),e(ns,dto),e(k,cto),e(k,ss),e(ss,zte),e(zte,fto),e(ss,mto),e(ss,tP),e(tP,gto),e(ss,hto),e(ss,aP),e(aP,pto),e(ss,_to),e(k,uto),e(k,Ig),e(Ig,Wte),e(Wte,bto),e(Ig,vto),e(Ig,nP),e(nP,Fto),e(Ig,Tto),e(k,Mto),e(k,ls),e(ls,Qte),e(Qte,Eto),e(ls,Cto),e(ls,sP),e(sP,wto),e(ls,Ato),e(ls,lP),e(lP,yto),e(ls,Lto),e(k,xto),e(k,qg),e(qg,Hte),e(Hte,$to),e(qg,kto),e(qg,iP),e(iP,Sto),e(qg,Rto),e(k,Pto),e(k,Ng),e(Ng,Ute),e(Ute,Bto),e(Ng,Ito),e(Ng,dP),e(dP,qto),e(Ng,Nto),e(k,jto),e(k,is),e(is,Jte),e(Jte,Dto),e(is,Gto),e(is,cP),e(cP,Oto),e(is,Vto),e(is,fP),e(fP,Xto),e(is,zto),e(k,Wto),e(k,ds),e(ds,Yte),e(Yte,Qto),e(ds,Hto),e(ds,mP),e(mP,Uto),e(ds,Jto),e(ds,gP),e(gP,Yto),e(ds,Kto),e(k,Zto),e(k,cs),e(cs,Kte),e(Kte,eao),e(cs,oao),e(cs,hP),e(hP,rao),e(cs,tao),e(cs,pP),e(pP,aao),e(cs,nao),e(k,sao),e(k,jg),e(jg,Zte),e(Zte,lao),e(jg,iao),e(jg,_P),e(_P,dao),e(jg,cao),e(k,fao),e(k,fs),e(fs,eae),e(eae,mao),e(fs,gao),e(fs,uP),e(uP,hao),e(fs,pao),e(fs,bP),e(bP,_ao),e(fs,uao),e(k,bao),e(k,ms),e(ms,oae),e(oae,vao),e(ms,Fao),e(ms,vP),e(vP,Tao),e(ms,Mao),e(ms,FP),e(FP,Eao),e(ms,Cao),e(k,wao),e(k,gs),e(gs,rae),e(rae,Aao),e(gs,yao),e(gs,TP),e(TP,Lao),e(gs,xao),e(gs,MP),e(MP,$ao),e(gs,kao),e(k,Sao),e(k,hs),e(hs,tae),e(tae,Rao),e(hs,Pao),e(hs,EP),e(EP,Bao),e(hs,Iao),e(hs,CP),e(CP,qao),e(hs,Nao),e(k,jao),e(k,ps),e(ps,aae),e(aae,Dao),e(ps,Gao),e(ps,wP),e(wP,Oao),e(ps,Vao),e(ps,AP),e(AP,Xao),e(ps,zao),e(k,Wao),e(k,Dg),e(Dg,nae),e(nae,Qao),e(Dg,Hao),e(Dg,yP),e(yP,Uao),e(Dg,Jao),e(k,Yao),e(k,_s),e(_s,sae),e(sae,Kao),e(_s,Zao),e(_s,LP),e(LP,eno),e(_s,ono),e(_s,xP),e(xP,rno),e(_s,tno),e(k,ano),e(k,Gg),e(Gg,lae),e(lae,nno),e(Gg,sno),e(Gg,$P),e($P,lno),e(Gg,ino),e(k,dno),e(k,Og),e(Og,iae),e(iae,cno),e(Og,fno),e(Og,kP),e(kP,mno),e(Og,gno),e(k,hno),e(k,Vg),e(Vg,dae),e(dae,pno),e(Vg,_no),e(Vg,SP),e(SP,uno),e(Vg,bno),e(k,vno),e(k,Xg),e(Xg,cae),e(cae,Fno),e(Xg,Tno),e(Xg,RP),e(RP,Mno),e(Xg,Eno),e(k,Cno),e(k,us),e(us,fae),e(fae,wno),e(us,Ano),e(us,PP),e(PP,yno),e(us,Lno),e(us,BP),e(BP,xno),e(us,$no),e(k,kno),e(k,zg),e(zg,mae),e(mae,Sno),e(zg,Rno),e(zg,IP),e(IP,Pno),e(zg,Bno),e(k,Ino),e(k,bs),e(bs,gae),e(gae,qno),e(bs,Nno),e(bs,qP),e(qP,jno),e(bs,Dno),e(bs,NP),e(NP,Gno),e(bs,Ono),e(k,Vno),e(k,vs),e(vs,hae),e(hae,Xno),e(vs,zno),e(vs,jP),e(jP,Wno),e(vs,Qno),e(vs,DP),e(DP,Hno),e(vs,Uno),e(k,Jno),e(k,Fs),e(Fs,pae),e(pae,Yno),e(Fs,Kno),e(Fs,GP),e(GP,Zno),e(Fs,eso),e(Fs,OP),e(OP,oso),e(Fs,rso),e(k,tso),e(k,Ts),e(Ts,_ae),e(_ae,aso),e(Ts,nso),e(Ts,VP),e(VP,sso),e(Ts,lso),e(Ts,XP),e(XP,iso),e(Ts,dso),e(k,cso),e(k,Ms),e(Ms,uae),e(uae,fso),e(Ms,mso),e(Ms,zP),e(zP,gso),e(Ms,hso),e(Ms,WP),e(WP,pso),e(Ms,_so),e(k,uso),e(k,Es),e(Es,bae),e(bae,bso),e(Es,vso),e(Es,QP),e(QP,Fso),e(Es,Tso),e(Es,HP),e(HP,Mso),e(Es,Eso),e(k,Cso),e(k,Wg),e(Wg,vae),e(vae,wso),e(Wg,Aso),e(Wg,UP),e(UP,yso),e(Wg,Lso),e(k,xso),e(k,Qg),e(Qg,Fae),e(Fae,$so),e(Qg,kso),e(Qg,JP),e(JP,Sso),e(Qg,Rso),e(k,Pso),e(k,Cs),e(Cs,Tae),e(Tae,Bso),e(Cs,Iso),e(Cs,YP),e(YP,qso),e(Cs,Nso),e(Cs,KP),e(KP,jso),e(Cs,Dso),e(k,Gso),e(k,ws),e(ws,Mae),e(Mae,Oso),e(ws,Vso),e(ws,ZP),e(ZP,Xso),e(ws,zso),e(ws,eB),e(eB,Wso),e(ws,Qso),e(k,Hso),e(k,As),e(As,Eae),e(Eae,Uso),e(As,Jso),e(As,oB),e(oB,Yso),e(As,Kso),e(As,rB),e(rB,Zso),e(As,elo),e(k,olo),e(k,Hg),e(Hg,Cae),e(Cae,rlo),e(Hg,tlo),e(Hg,tB),e(tB,alo),e(Hg,nlo),e(k,slo),e(k,Ug),e(Ug,wae),e(wae,llo),e(Ug,ilo),e(Ug,aB),e(aB,dlo),e(Ug,clo),e(k,flo),e(k,Jg),e(Jg,Aae),e(Aae,mlo),e(Jg,glo),e(Jg,nB),e(nB,hlo),e(Jg,plo),e(k,_lo),e(k,ys),e(ys,yae),e(yae,ulo),e(ys,blo),e(ys,sB),e(sB,vlo),e(ys,Flo),e(ys,lB),e(lB,Tlo),e(ys,Mlo),e(k,Elo),e(k,Yg),e(Yg,Lae),e(Lae,Clo),e(Yg,wlo),e(Yg,iB),e(iB,Alo),e(Yg,ylo),e(k,Llo),e(k,Kg),e(Kg,xae),e(xae,xlo),e(Kg,$lo),e(Kg,dB),e(dB,klo),e(Kg,Slo),e(k,Rlo),e(k,Zg),e(Zg,$ae),e($ae,Plo),e(Zg,Blo),e(Zg,cB),e(cB,Ilo),e(Zg,qlo),e(k,Nlo),e(k,Ls),e(Ls,kae),e(kae,jlo),e(Ls,Dlo),e(Ls,fB),e(fB,Glo),e(Ls,Olo),e(Ls,mB),e(mB,Vlo),e(Ls,Xlo),e(k,zlo),e(k,eh),e(eh,Sae),e(Sae,Wlo),e(eh,Qlo),e(eh,gB),e(gB,Hlo),e(eh,Ulo),e(k,Jlo),e(k,oh),e(oh,Rae),e(Rae,Ylo),e(oh,Klo),e(oh,hB),e(hB,Zlo),e(oh,eio),e(k,oio),e(k,xs),e(xs,Pae),e(Pae,rio),e(xs,tio),e(xs,pB),e(pB,aio),e(xs,nio),e(xs,_B),e(_B,sio),e(xs,lio),e(k,iio),e(k,$s),e($s,Bae),e(Bae,dio),e($s,cio),e($s,uB),e(uB,fio),e($s,mio),e($s,bB),e(bB,gio),e($s,hio),e(k,pio),e(k,ks),e(ks,Iae),e(Iae,_io),e(ks,uio),e(ks,vB),e(vB,bio),e(ks,vio),e(ks,FB),e(FB,Fio),e(ks,Tio),e(k,Mio),e(k,Ss),e(Ss,qae),e(qae,Eio),e(Ss,Cio),e(Ss,TB),e(TB,wio),e(Ss,Aio),e(Ss,MB),e(MB,yio),e(Ss,Lio),e(Cr,xio),M(rh,Cr,null),e(wo,$io),e(wo,th),M(SA,th,null),e(th,kio),e(th,Nae),e(Nae,Sio),b(f,Lqe,u),b(f,Mi,u),e(Mi,ah),e(ah,jae),M(RA,jae,null),e(Mi,Rio),e(Mi,Dae),e(Dae,Pio),b(f,xqe,u),b(f,Ao,u),M(PA,Ao,null),e(Ao,Bio),e(Ao,BA),e(BA,Iio),e(BA,EB),e(EB,qio),e(BA,Nio),e(Ao,jio),e(Ao,IA),e(IA,Dio),e(IA,Gae),e(Gae,Gio),e(IA,Oio),e(Ao,Vio),e(Ao,He),M(qA,He,null),e(He,Xio),e(He,Oae),e(Oae,zio),e(He,Wio),e(He,La),e(La,Qio),e(La,Vae),e(Vae,Hio),e(La,Uio),e(La,Xae),e(Xae,Jio),e(La,Yio),e(La,zae),e(zae,Kio),e(La,Zio),e(He,edo),e(He,K),e(K,nh),e(nh,Wae),e(Wae,odo),e(nh,rdo),e(nh,CB),e(CB,tdo),e(nh,ado),e(K,ndo),e(K,sh),e(sh,Qae),e(Qae,sdo),e(sh,ldo),e(sh,wB),e(wB,ido),e(sh,ddo),e(K,cdo),e(K,lh),e(lh,Hae),e(Hae,fdo),e(lh,mdo),e(lh,AB),e(AB,gdo),e(lh,hdo),e(K,pdo),e(K,ih),e(ih,Uae),e(Uae,_do),e(ih,udo),e(ih,yB),e(yB,bdo),e(ih,vdo),e(K,Fdo),e(K,dh),e(dh,Jae),e(Jae,Tdo),e(dh,Mdo),e(dh,LB),e(LB,Edo),e(dh,Cdo),e(K,wdo),e(K,ch),e(ch,Yae),e(Yae,Ado),e(ch,ydo),e(ch,xB),e(xB,Ldo),e(ch,xdo),e(K,$do),e(K,fh),e(fh,Kae),e(Kae,kdo),e(fh,Sdo),e(fh,$B),e($B,Rdo),e(fh,Pdo),e(K,Bdo),e(K,mh),e(mh,Zae),e(Zae,Ido),e(mh,qdo),e(mh,kB),e(kB,Ndo),e(mh,jdo),e(K,Ddo),e(K,gh),e(gh,ene),e(ene,Gdo),e(gh,Odo),e(gh,SB),e(SB,Vdo),e(gh,Xdo),e(K,zdo),e(K,hh),e(hh,one),e(one,Wdo),e(hh,Qdo),e(hh,RB),e(RB,Hdo),e(hh,Udo),e(K,Jdo),e(K,ph),e(ph,rne),e(rne,Ydo),e(ph,Kdo),e(ph,PB),e(PB,Zdo),e(ph,eco),e(K,oco),e(K,_h),e(_h,tne),e(tne,rco),e(_h,tco),e(_h,BB),e(BB,aco),e(_h,nco),e(K,sco),e(K,uh),e(uh,ane),e(ane,lco),e(uh,ico),e(uh,IB),e(IB,dco),e(uh,cco),e(K,fco),e(K,bh),e(bh,nne),e(nne,mco),e(bh,gco),e(bh,qB),e(qB,hco),e(bh,pco),e(K,_co),e(K,vh),e(vh,sne),e(sne,uco),e(vh,bco),e(vh,NB),e(NB,vco),e(vh,Fco),e(K,Tco),e(K,Fh),e(Fh,lne),e(lne,Mco),e(Fh,Eco),e(Fh,jB),e(jB,Cco),e(Fh,wco),e(K,Aco),e(K,Th),e(Th,ine),e(ine,yco),e(Th,Lco),e(Th,DB),e(DB,xco),e(Th,$co),e(K,kco),e(K,Mh),e(Mh,dne),e(dne,Sco),e(Mh,Rco),e(Mh,GB),e(GB,Pco),e(Mh,Bco),e(K,Ico),e(K,Eh),e(Eh,cne),e(cne,qco),e(Eh,Nco),e(Eh,OB),e(OB,jco),e(Eh,Dco),e(K,Gco),e(K,Ch),e(Ch,fne),e(fne,Oco),e(Ch,Vco),e(Ch,VB),e(VB,Xco),e(Ch,zco),e(K,Wco),e(K,wh),e(wh,mne),e(mne,Qco),e(wh,Hco),e(wh,XB),e(XB,Uco),e(wh,Jco),e(K,Yco),e(K,Ah),e(Ah,gne),e(gne,Kco),e(Ah,Zco),e(Ah,zB),e(zB,efo),e(Ah,ofo),e(K,rfo),e(K,yh),e(yh,hne),e(hne,tfo),e(yh,afo),e(yh,WB),e(WB,nfo),e(yh,sfo),e(K,lfo),e(K,Lh),e(Lh,pne),e(pne,ifo),e(Lh,dfo),e(Lh,QB),e(QB,cfo),e(Lh,ffo),e(K,mfo),e(K,xh),e(xh,_ne),e(_ne,gfo),e(xh,hfo),e(xh,HB),e(HB,pfo),e(xh,_fo),e(K,ufo),e(K,$h),e($h,une),e(une,bfo),e($h,vfo),e($h,UB),e(UB,Ffo),e($h,Tfo),e(K,Mfo),e(K,kh),e(kh,bne),e(bne,Efo),e(kh,Cfo),e(kh,JB),e(JB,wfo),e(kh,Afo),e(K,yfo),e(K,Sh),e(Sh,vne),e(vne,Lfo),e(Sh,xfo),e(Sh,YB),e(YB,$fo),e(Sh,kfo),e(He,Sfo),M(Rh,He,null),e(He,Rfo),M(Ph,He,null),e(Ao,Pfo),e(Ao,Bh),M(NA,Bh,null),e(Bh,Bfo),e(Bh,Fne),e(Fne,Ifo),b(f,$qe,u),b(f,Ei,u),e(Ei,Ih),e(Ih,Tne),M(jA,Tne,null),e(Ei,qfo),e(Ei,Mne),e(Mne,Nfo),b(f,kqe,u),b(f,yo,u),M(DA,yo,null),e(yo,jfo),e(yo,GA),e(GA,Dfo),e(GA,KB),e(KB,Gfo),e(GA,Ofo),e(yo,Vfo),e(yo,OA),e(OA,Xfo),e(OA,Ene),e(Ene,zfo),e(OA,Wfo),e(yo,Qfo),e(yo,Ue),M(VA,Ue,null),e(Ue,Hfo),e(Ue,Cne),e(Cne,Ufo),e(Ue,Jfo),e(Ue,Ci),e(Ci,Yfo),e(Ci,wne),e(wne,Kfo),e(Ci,Zfo),e(Ci,Ane),e(Ane,emo),e(Ci,omo),e(Ue,rmo),e(Ue,pe),e(pe,qh),e(qh,yne),e(yne,tmo),e(qh,amo),e(qh,ZB),e(ZB,nmo),e(qh,smo),e(pe,lmo),e(pe,Nh),e(Nh,Lne),e(Lne,imo),e(Nh,dmo),e(Nh,xne),e(xne,cmo),e(Nh,fmo),e(pe,mmo),e(pe,jh),e(jh,$ne),e($ne,gmo),e(jh,hmo),e(jh,eI),e(eI,pmo),e(jh,_mo),e(pe,umo),e(pe,Dh),e(Dh,kne),e(kne,bmo),e(Dh,vmo),e(Dh,oI),e(oI,Fmo),e(Dh,Tmo),e(pe,Mmo),e(pe,Gh),e(Gh,Sne),e(Sne,Emo),e(Gh,Cmo),e(Gh,rI),e(rI,wmo),e(Gh,Amo),e(pe,ymo),e(pe,Oh),e(Oh,Rne),e(Rne,Lmo),e(Oh,xmo),e(Oh,tI),e(tI,$mo),e(Oh,kmo),e(pe,Smo),e(pe,Vh),e(Vh,Pne),e(Pne,Rmo),e(Vh,Pmo),e(Vh,aI),e(aI,Bmo),e(Vh,Imo),e(pe,qmo),e(pe,Xh),e(Xh,Bne),e(Bne,Nmo),e(Xh,jmo),e(Xh,nI),e(nI,Dmo),e(Xh,Gmo),e(pe,Omo),e(pe,zh),e(zh,Ine),e(Ine,Vmo),e(zh,Xmo),e(zh,sI),e(sI,zmo),e(zh,Wmo),e(pe,Qmo),e(pe,Wh),e(Wh,qne),e(qne,Hmo),e(Wh,Umo),e(Wh,lI),e(lI,Jmo),e(Wh,Ymo),e(pe,Kmo),e(pe,Qh),e(Qh,Nne),e(Nne,Zmo),e(Qh,ego),e(Qh,iI),e(iI,ogo),e(Qh,rgo),e(pe,tgo),e(pe,Hh),e(Hh,jne),e(jne,ago),e(Hh,ngo),e(Hh,dI),e(dI,sgo),e(Hh,lgo),e(pe,igo),e(pe,Uh),e(Uh,Dne),e(Dne,dgo),e(Uh,cgo),e(Uh,cI),e(cI,fgo),e(Uh,mgo),e(pe,ggo),e(pe,Jh),e(Jh,Gne),e(Gne,hgo),e(Jh,pgo),e(Jh,fI),e(fI,_go),e(Jh,ugo),e(pe,bgo),e(pe,Yh),e(Yh,One),e(One,vgo),e(Yh,Fgo),e(Yh,mI),e(mI,Tgo),e(Yh,Mgo),e(pe,Ego),e(pe,Kh),e(Kh,Vne),e(Vne,Cgo),e(Kh,wgo),e(Kh,gI),e(gI,Ago),e(Kh,ygo),e(Ue,Lgo),M(Zh,Ue,null),e(Ue,xgo),M(ep,Ue,null),e(yo,$go),e(yo,op),M(XA,op,null),e(op,kgo),e(op,Xne),e(Xne,Sgo),b(f,Sqe,u),b(f,wi,u),e(wi,rp),e(rp,zne),M(zA,zne,null),e(wi,Rgo),e(wi,Wne),e(Wne,Pgo),b(f,Rqe,u),b(f,Lo,u),M(WA,Lo,null),e(Lo,Bgo),e(Lo,Ai),e(Ai,Igo),e(Ai,hI),e(hI,qgo),e(Ai,Ngo),e(Ai,pI),e(pI,jgo),e(Ai,Dgo),e(Lo,Ggo),e(Lo,QA),e(QA,Ogo),e(QA,Qne),e(Qne,Vgo),e(QA,Xgo),e(Lo,zgo),e(Lo,at),M(HA,at,null),e(at,Wgo),e(at,Hne),e(Hne,Qgo),e(at,Hgo),e(at,yi),e(yi,Ugo),e(yi,Une),e(Une,Jgo),e(yi,Ygo),e(yi,_I),e(_I,Kgo),e(yi,Zgo),e(at,eho),M(tp,at,null),e(Lo,oho),e(Lo,Je),M(UA,Je,null),e(Je,rho),e(Je,Jne),e(Jne,tho),e(Je,aho),e(Je,xa),e(xa,nho),e(xa,Yne),e(Yne,sho),e(xa,lho),e(xa,Kne),e(Kne,iho),e(xa,dho),e(xa,Zne),e(Zne,cho),e(xa,fho),e(Je,mho),e(Je,x),e(x,ap),e(ap,ese),e(ese,gho),e(ap,hho),e(ap,uI),e(uI,pho),e(ap,_ho),e(x,uho),e(x,np),e(np,ose),e(ose,bho),e(np,vho),e(np,bI),e(bI,Fho),e(np,Tho),e(x,Mho),e(x,sp),e(sp,rse),e(rse,Eho),e(sp,Cho),e(sp,vI),e(vI,who),e(sp,Aho),e(x,yho),e(x,lp),e(lp,tse),e(tse,Lho),e(lp,xho),e(lp,FI),e(FI,$ho),e(lp,kho),e(x,Sho),e(x,ip),e(ip,ase),e(ase,Rho),e(ip,Pho),e(ip,TI),e(TI,Bho),e(ip,Iho),e(x,qho),e(x,dp),e(dp,nse),e(nse,Nho),e(dp,jho),e(dp,MI),e(MI,Dho),e(dp,Gho),e(x,Oho),e(x,cp),e(cp,sse),e(sse,Vho),e(cp,Xho),e(cp,EI),e(EI,zho),e(cp,Who),e(x,Qho),e(x,fp),e(fp,lse),e(lse,Hho),e(fp,Uho),e(fp,CI),e(CI,Jho),e(fp,Yho),e(x,Kho),e(x,mp),e(mp,ise),e(ise,Zho),e(mp,epo),e(mp,wI),e(wI,opo),e(mp,rpo),e(x,tpo),e(x,gp),e(gp,dse),e(dse,apo),e(gp,npo),e(gp,AI),e(AI,spo),e(gp,lpo),e(x,ipo),e(x,hp),e(hp,cse),e(cse,dpo),e(hp,cpo),e(hp,yI),e(yI,fpo),e(hp,mpo),e(x,gpo),e(x,pp),e(pp,fse),e(fse,hpo),e(pp,ppo),e(pp,LI),e(LI,_po),e(pp,upo),e(x,bpo),e(x,_p),e(_p,mse),e(mse,vpo),e(_p,Fpo),e(_p,xI),e(xI,Tpo),e(_p,Mpo),e(x,Epo),e(x,up),e(up,gse),e(gse,Cpo),e(up,wpo),e(up,$I),e($I,Apo),e(up,ypo),e(x,Lpo),e(x,bp),e(bp,hse),e(hse,xpo),e(bp,$po),e(bp,kI),e(kI,kpo),e(bp,Spo),e(x,Rpo),e(x,vp),e(vp,pse),e(pse,Ppo),e(vp,Bpo),e(vp,SI),e(SI,Ipo),e(vp,qpo),e(x,Npo),e(x,Fp),e(Fp,_se),e(_se,jpo),e(Fp,Dpo),e(Fp,RI),e(RI,Gpo),e(Fp,Opo),e(x,Vpo),e(x,Tp),e(Tp,use),e(use,Xpo),e(Tp,zpo),e(Tp,PI),e(PI,Wpo),e(Tp,Qpo),e(x,Hpo),e(x,Mp),e(Mp,bse),e(bse,Upo),e(Mp,Jpo),e(Mp,BI),e(BI,Ypo),e(Mp,Kpo),e(x,Zpo),e(x,Ep),e(Ep,vse),e(vse,e_o),e(Ep,o_o),e(Ep,II),e(II,r_o),e(Ep,t_o),e(x,a_o),e(x,Cp),e(Cp,Fse),e(Fse,n_o),e(Cp,s_o),e(Cp,qI),e(qI,l_o),e(Cp,i_o),e(x,d_o),e(x,wp),e(wp,Tse),e(Tse,c_o),e(wp,f_o),e(wp,NI),e(NI,m_o),e(wp,g_o),e(x,h_o),e(x,Ap),e(Ap,Mse),e(Mse,p_o),e(Ap,__o),e(Ap,jI),e(jI,u_o),e(Ap,b_o),e(x,v_o),e(x,yp),e(yp,Ese),e(Ese,F_o),e(yp,T_o),e(yp,DI),e(DI,M_o),e(yp,E_o),e(x,C_o),e(x,Lp),e(Lp,Cse),e(Cse,w_o),e(Lp,A_o),e(Lp,GI),e(GI,y_o),e(Lp,L_o),e(x,x_o),e(x,xp),e(xp,wse),e(wse,$_o),e(xp,k_o),e(xp,OI),e(OI,S_o),e(xp,R_o),e(x,P_o),e(x,$p),e($p,Ase),e(Ase,B_o),e($p,I_o),e($p,VI),e(VI,q_o),e($p,N_o),e(x,j_o),e(x,kp),e(kp,yse),e(yse,D_o),e(kp,G_o),e(kp,XI),e(XI,O_o),e(kp,V_o),e(x,X_o),e(x,Sp),e(Sp,Lse),e(Lse,z_o),e(Sp,W_o),e(Sp,zI),e(zI,Q_o),e(Sp,H_o),e(x,U_o),e(x,Rp),e(Rp,xse),e(xse,J_o),e(Rp,Y_o),e(Rp,WI),e(WI,K_o),e(Rp,Z_o),e(x,euo),e(x,Pp),e(Pp,$se),e($se,ouo),e(Pp,ruo),e(Pp,QI),e(QI,tuo),e(Pp,auo),e(x,nuo),e(x,Bp),e(Bp,kse),e(kse,suo),e(Bp,luo),e(Bp,HI),e(HI,iuo),e(Bp,duo),e(x,cuo),e(x,Rs),e(Rs,Sse),e(Sse,fuo),e(Rs,muo),e(Rs,UI),e(UI,guo),e(Rs,huo),e(Rs,JI),e(JI,puo),e(Rs,_uo),e(x,uuo),e(x,Ip),e(Ip,Rse),e(Rse,buo),e(Ip,vuo),e(Ip,YI),e(YI,Fuo),e(Ip,Tuo),e(x,Muo),e(x,qp),e(qp,Pse),e(Pse,Euo),e(qp,Cuo),e(qp,KI),e(KI,wuo),e(qp,Auo),e(x,yuo),e(x,Np),e(Np,Bse),e(Bse,Luo),e(Np,xuo),e(Np,ZI),e(ZI,$uo),e(Np,kuo),e(x,Suo),e(x,jp),e(jp,Ise),e(Ise,Ruo),e(jp,Puo),e(jp,eq),e(eq,Buo),e(jp,Iuo),e(x,quo),e(x,Dp),e(Dp,qse),e(qse,Nuo),e(Dp,juo),e(Dp,oq),e(oq,Duo),e(Dp,Guo),e(x,Ouo),e(x,Gp),e(Gp,Nse),e(Nse,Vuo),e(Gp,Xuo),e(Gp,rq),e(rq,zuo),e(Gp,Wuo),e(x,Quo),e(x,Op),e(Op,jse),e(jse,Huo),e(Op,Uuo),e(Op,tq),e(tq,Juo),e(Op,Yuo),e(x,Kuo),e(x,Vp),e(Vp,Dse),e(Dse,Zuo),e(Vp,e2o),e(Vp,aq),e(aq,o2o),e(Vp,r2o),e(x,t2o),e(x,Xp),e(Xp,Gse),e(Gse,a2o),e(Xp,n2o),e(Xp,nq),e(nq,s2o),e(Xp,l2o),e(x,i2o),e(x,zp),e(zp,Ose),e(Ose,d2o),e(zp,c2o),e(zp,sq),e(sq,f2o),e(zp,m2o),e(x,g2o),e(x,Wp),e(Wp,Vse),e(Vse,h2o),e(Wp,p2o),e(Wp,lq),e(lq,_2o),e(Wp,u2o),e(x,b2o),e(x,Qp),e(Qp,Xse),e(Xse,v2o),e(Qp,F2o),e(Qp,iq),e(iq,T2o),e(Qp,M2o),e(x,E2o),e(x,Hp),e(Hp,zse),e(zse,C2o),e(Hp,w2o),e(Hp,dq),e(dq,A2o),e(Hp,y2o),e(x,L2o),e(x,Up),e(Up,Wse),e(Wse,x2o),e(Up,$2o),e(Up,cq),e(cq,k2o),e(Up,S2o),e(x,R2o),e(x,Jp),e(Jp,Qse),e(Qse,P2o),e(Jp,B2o),e(Jp,fq),e(fq,I2o),e(Jp,q2o),e(x,N2o),e(x,Yp),e(Yp,Hse),e(Hse,j2o),e(Yp,D2o),e(Yp,mq),e(mq,G2o),e(Yp,O2o),e(x,V2o),e(x,Kp),e(Kp,Use),e(Use,X2o),e(Kp,z2o),e(Kp,gq),e(gq,W2o),e(Kp,Q2o),e(x,H2o),e(x,Zp),e(Zp,Jse),e(Jse,U2o),e(Zp,J2o),e(Zp,hq),e(hq,Y2o),e(Zp,K2o),e(x,Z2o),e(x,e_),e(e_,Yse),e(Yse,e1o),e(e_,o1o),e(e_,pq),e(pq,r1o),e(e_,t1o),e(x,a1o),e(x,o_),e(o_,Kse),e(Kse,n1o),e(o_,s1o),e(o_,_q),e(_q,l1o),e(o_,i1o),e(x,d1o),e(x,r_),e(r_,Zse),e(Zse,c1o),e(r_,f1o),e(r_,uq),e(uq,m1o),e(r_,g1o),e(x,h1o),e(x,t_),e(t_,ele),e(ele,p1o),e(t_,_1o),e(t_,bq),e(bq,u1o),e(t_,b1o),e(x,v1o),e(x,a_),e(a_,ole),e(ole,F1o),e(a_,T1o),e(a_,vq),e(vq,M1o),e(a_,E1o),e(x,C1o),e(x,n_),e(n_,rle),e(rle,w1o),e(n_,A1o),e(n_,Fq),e(Fq,y1o),e(n_,L1o),e(x,x1o),e(x,s_),e(s_,tle),e(tle,$1o),e(s_,k1o),e(s_,Tq),e(Tq,S1o),e(s_,R1o),e(x,P1o),e(x,l_),e(l_,ale),e(ale,B1o),e(l_,I1o),e(l_,Mq),e(Mq,q1o),e(l_,N1o),e(x,j1o),e(x,i_),e(i_,nle),e(nle,D1o),e(i_,G1o),e(i_,Eq),e(Eq,O1o),e(i_,V1o),e(x,X1o),e(x,d_),e(d_,sle),e(sle,z1o),e(d_,W1o),e(d_,Cq),e(Cq,Q1o),e(d_,H1o),e(x,U1o),e(x,c_),e(c_,lle),e(lle,J1o),e(c_,Y1o),e(c_,wq),e(wq,K1o),e(c_,Z1o),e(x,ebo),e(x,f_),e(f_,ile),e(ile,obo),e(f_,rbo),e(f_,Aq),e(Aq,tbo),e(f_,abo),e(x,nbo),e(x,m_),e(m_,dle),e(dle,sbo),e(m_,lbo),e(m_,yq),e(yq,ibo),e(m_,dbo),e(x,cbo),e(x,g_),e(g_,cle),e(cle,fbo),e(g_,mbo),e(g_,Lq),e(Lq,gbo),e(g_,hbo),e(x,pbo),e(x,h_),e(h_,fle),e(fle,_bo),e(h_,ubo),e(h_,xq),e(xq,bbo),e(h_,vbo),e(x,Fbo),e(x,p_),e(p_,mle),e(mle,Tbo),e(p_,Mbo),e(p_,$q),e($q,Ebo),e(p_,Cbo),e(x,wbo),e(x,__),e(__,gle),e(gle,Abo),e(__,ybo),e(__,kq),e(kq,Lbo),e(__,xbo),e(x,$bo),e(x,u_),e(u_,hle),e(hle,kbo),e(u_,Sbo),e(u_,Sq),e(Sq,Rbo),e(u_,Pbo),e(x,Bbo),e(x,b_),e(b_,ple),e(ple,Ibo),e(b_,qbo),e(b_,Rq),e(Rq,Nbo),e(b_,jbo),e(x,Dbo),e(x,v_),e(v_,_le),e(_le,Gbo),e(v_,Obo),e(v_,Pq),e(Pq,Vbo),e(v_,Xbo),e(x,zbo),e(x,F_),e(F_,ule),e(ule,Wbo),e(F_,Qbo),e(F_,Bq),e(Bq,Hbo),e(F_,Ubo),e(x,Jbo),e(x,T_),e(T_,ble),e(ble,Ybo),e(T_,Kbo),e(T_,Iq),e(Iq,Zbo),e(T_,e5o),e(x,o5o),e(x,M_),e(M_,vle),e(vle,r5o),e(M_,t5o),e(M_,qq),e(qq,a5o),e(M_,n5o),e(x,s5o),e(x,E_),e(E_,Fle),e(Fle,l5o),e(E_,i5o),e(E_,Nq),e(Nq,d5o),e(E_,c5o),e(x,f5o),e(x,C_),e(C_,Tle),e(Tle,m5o),e(C_,g5o),e(C_,jq),e(jq,h5o),e(C_,p5o),e(x,_5o),e(x,w_),e(w_,Mle),e(Mle,u5o),e(w_,b5o),e(w_,Dq),e(Dq,v5o),e(w_,F5o),e(x,T5o),e(x,A_),e(A_,Ele),e(Ele,M5o),e(A_,E5o),e(A_,Gq),e(Gq,C5o),e(A_,w5o),e(x,A5o),e(x,y_),e(y_,Cle),e(Cle,y5o),e(y_,L5o),e(y_,Oq),e(Oq,x5o),e(y_,$5o),e(x,k5o),e(x,L_),e(L_,wle),e(wle,S5o),e(L_,R5o),e(L_,Vq),e(Vq,P5o),e(L_,B5o),e(x,I5o),e(x,x_),e(x_,Ale),e(Ale,q5o),e(x_,N5o),e(x_,Xq),e(Xq,j5o),e(x_,D5o),e(x,G5o),e(x,$_),e($_,yle),e(yle,O5o),e($_,V5o),e($_,zq),e(zq,X5o),e($_,z5o),e(x,W5o),e(x,k_),e(k_,Lle),e(Lle,Q5o),e(k_,H5o),e(k_,Wq),e(Wq,U5o),e(k_,J5o),e(x,Y5o),e(x,S_),e(S_,xle),e(xle,K5o),e(S_,Z5o),e(S_,Qq),e(Qq,evo),e(S_,ovo),e(x,rvo),e(x,R_),e(R_,$le),e($le,tvo),e(R_,avo),e(R_,Hq),e(Hq,nvo),e(R_,svo),e(x,lvo),e(x,P_),e(P_,kle),e(kle,ivo),e(P_,dvo),e(P_,Uq),e(Uq,cvo),e(P_,fvo),e(x,mvo),e(x,B_),e(B_,Sle),e(Sle,gvo),e(B_,hvo),e(B_,Jq),e(Jq,pvo),e(B_,_vo),e(x,uvo),e(x,I_),e(I_,Rle),e(Rle,bvo),e(I_,vvo),e(I_,Yq),e(Yq,Fvo),e(I_,Tvo),e(x,Mvo),e(x,q_),e(q_,Ple),e(Ple,Evo),e(q_,Cvo),e(q_,Kq),e(Kq,wvo),e(q_,Avo),e(x,yvo),e(x,N_),e(N_,Ble),e(Ble,Lvo),e(N_,xvo),e(N_,Zq),e(Zq,$vo),e(N_,kvo),e(x,Svo),e(x,j_),e(j_,Ile),e(Ile,Rvo),e(j_,Pvo),e(j_,eN),e(eN,Bvo),e(j_,Ivo),e(x,qvo),e(x,D_),e(D_,qle),e(qle,Nvo),e(D_,jvo),e(D_,oN),e(oN,Dvo),e(D_,Gvo),e(x,Ovo),e(x,G_),e(G_,Nle),e(Nle,Vvo),e(G_,Xvo),e(G_,rN),e(rN,zvo),e(G_,Wvo),e(x,Qvo),e(x,O_),e(O_,jle),e(jle,Hvo),e(O_,Uvo),e(O_,tN),e(tN,Jvo),e(O_,Yvo),e(x,Kvo),e(x,V_),e(V_,Dle),e(Dle,Zvo),e(V_,eFo),e(V_,aN),e(aN,oFo),e(V_,rFo),e(x,tFo),e(x,X_),e(X_,Gle),e(Gle,aFo),e(X_,nFo),e(X_,nN),e(nN,sFo),e(X_,lFo),e(x,iFo),e(x,z_),e(z_,Ole),e(Ole,dFo),e(z_,cFo),e(z_,sN),e(sN,fFo),e(z_,mFo),e(x,gFo),e(x,W_),e(W_,Vle),e(Vle,hFo),e(W_,pFo),e(W_,lN),e(lN,_Fo),e(W_,uFo),e(x,bFo),e(x,Q_),e(Q_,Xle),e(Xle,vFo),e(Q_,FFo),e(Q_,iN),e(iN,TFo),e(Q_,MFo),e(x,EFo),e(x,H_),e(H_,zle),e(zle,CFo),e(H_,wFo),e(H_,dN),e(dN,AFo),e(H_,yFo),e(x,LFo),e(x,U_),e(U_,Wle),e(Wle,xFo),e(U_,$Fo),e(U_,cN),e(cN,kFo),e(U_,SFo),e(Je,RFo),e(Je,J_),e(J_,PFo),e(J_,Qle),e(Qle,BFo),e(J_,IFo),e(J_,Hle),e(Hle,qFo),e(Je,NFo),M(Y_,Je,null),b(f,Pqe,u),b(f,Li,u),e(Li,K_),e(K_,Ule),M(JA,Ule,null),e(Li,jFo),e(Li,Jle),e(Jle,DFo),b(f,Bqe,u),b(f,xo,u),M(YA,xo,null),e(xo,GFo),e(xo,xi),e(xi,OFo),e(xi,fN),e(fN,VFo),e(xi,XFo),e(xi,mN),e(mN,zFo),e(xi,WFo),e(xo,QFo),e(xo,KA),e(KA,HFo),e(KA,Yle),e(Yle,UFo),e(KA,JFo),e(xo,YFo),e(xo,nt),M(ZA,nt,null),e(nt,KFo),e(nt,Kle),e(Kle,ZFo),e(nt,e0o),e(nt,$i),e($i,o0o),e($i,Zle),e(Zle,r0o),e($i,t0o),e($i,gN),e(gN,a0o),e($i,n0o),e(nt,s0o),M(Z_,nt,null),e(xo,l0o),e(xo,Ye),M(ey,Ye,null),e(Ye,i0o),e(Ye,eie),e(eie,d0o),e(Ye,c0o),e(Ye,$a),e($a,f0o),e($a,oie),e(oie,m0o),e($a,g0o),e($a,rie),e(rie,h0o),e($a,p0o),e($a,tie),e(tie,_0o),e($a,u0o),e(Ye,b0o),e(Ye,G),e(G,eu),e(eu,aie),e(aie,v0o),e(eu,F0o),e(eu,hN),e(hN,T0o),e(eu,M0o),e(G,E0o),e(G,ou),e(ou,nie),e(nie,C0o),e(ou,w0o),e(ou,pN),e(pN,A0o),e(ou,y0o),e(G,L0o),e(G,ru),e(ru,sie),e(sie,x0o),e(ru,$0o),e(ru,_N),e(_N,k0o),e(ru,S0o),e(G,R0o),e(G,tu),e(tu,lie),e(lie,P0o),e(tu,B0o),e(tu,uN),e(uN,I0o),e(tu,q0o),e(G,N0o),e(G,au),e(au,iie),e(iie,j0o),e(au,D0o),e(au,bN),e(bN,G0o),e(au,O0o),e(G,V0o),e(G,nu),e(nu,die),e(die,X0o),e(nu,z0o),e(nu,vN),e(vN,W0o),e(nu,Q0o),e(G,H0o),e(G,su),e(su,cie),e(cie,U0o),e(su,J0o),e(su,FN),e(FN,Y0o),e(su,K0o),e(G,Z0o),e(G,lu),e(lu,fie),e(fie,eTo),e(lu,oTo),e(lu,TN),e(TN,rTo),e(lu,tTo),e(G,aTo),e(G,iu),e(iu,mie),e(mie,nTo),e(iu,sTo),e(iu,MN),e(MN,lTo),e(iu,iTo),e(G,dTo),e(G,du),e(du,gie),e(gie,cTo),e(du,fTo),e(du,EN),e(EN,mTo),e(du,gTo),e(G,hTo),e(G,cu),e(cu,hie),e(hie,pTo),e(cu,_To),e(cu,CN),e(CN,uTo),e(cu,bTo),e(G,vTo),e(G,fu),e(fu,pie),e(pie,FTo),e(fu,TTo),e(fu,wN),e(wN,MTo),e(fu,ETo),e(G,CTo),e(G,mu),e(mu,_ie),e(_ie,wTo),e(mu,ATo),e(mu,AN),e(AN,yTo),e(mu,LTo),e(G,xTo),e(G,gu),e(gu,uie),e(uie,$To),e(gu,kTo),e(gu,yN),e(yN,STo),e(gu,RTo),e(G,PTo),e(G,hu),e(hu,bie),e(bie,BTo),e(hu,ITo),e(hu,LN),e(LN,qTo),e(hu,NTo),e(G,jTo),e(G,pu),e(pu,vie),e(vie,DTo),e(pu,GTo),e(pu,xN),e(xN,OTo),e(pu,VTo),e(G,XTo),e(G,_u),e(_u,Fie),e(Fie,zTo),e(_u,WTo),e(_u,$N),e($N,QTo),e(_u,HTo),e(G,UTo),e(G,uu),e(uu,Tie),e(Tie,JTo),e(uu,YTo),e(uu,kN),e(kN,KTo),e(uu,ZTo),e(G,e7o),e(G,bu),e(bu,Mie),e(Mie,o7o),e(bu,r7o),e(bu,SN),e(SN,t7o),e(bu,a7o),e(G,n7o),e(G,vu),e(vu,Eie),e(Eie,s7o),e(vu,l7o),e(vu,RN),e(RN,i7o),e(vu,d7o),e(G,c7o),e(G,Fu),e(Fu,Cie),e(Cie,f7o),e(Fu,m7o),e(Fu,PN),e(PN,g7o),e(Fu,h7o),e(G,p7o),e(G,Tu),e(Tu,wie),e(wie,_7o),e(Tu,u7o),e(Tu,BN),e(BN,b7o),e(Tu,v7o),e(G,F7o),e(G,Mu),e(Mu,Aie),e(Aie,T7o),e(Mu,M7o),e(Mu,IN),e(IN,E7o),e(Mu,C7o),e(G,w7o),e(G,Eu),e(Eu,yie),e(yie,A7o),e(Eu,y7o),e(Eu,qN),e(qN,L7o),e(Eu,x7o),e(G,$7o),e(G,Cu),e(Cu,Lie),e(Lie,k7o),e(Cu,S7o),e(Cu,NN),e(NN,R7o),e(Cu,P7o),e(G,B7o),e(G,wu),e(wu,xie),e(xie,I7o),e(wu,q7o),e(wu,jN),e(jN,N7o),e(wu,j7o),e(G,D7o),e(G,Au),e(Au,$ie),e($ie,G7o),e(Au,O7o),e(Au,DN),e(DN,V7o),e(Au,X7o),e(G,z7o),e(G,yu),e(yu,kie),e(kie,W7o),e(yu,Q7o),e(yu,GN),e(GN,H7o),e(yu,U7o),e(G,J7o),e(G,Lu),e(Lu,Sie),e(Sie,Y7o),e(Lu,K7o),e(Lu,ON),e(ON,Z7o),e(Lu,eMo),e(G,oMo),e(G,xu),e(xu,Rie),e(Rie,rMo),e(xu,tMo),e(xu,VN),e(VN,aMo),e(xu,nMo),e(G,sMo),e(G,$u),e($u,Pie),e(Pie,lMo),e($u,iMo),e($u,XN),e(XN,dMo),e($u,cMo),e(G,fMo),e(G,ku),e(ku,Bie),e(Bie,mMo),e(ku,gMo),e(ku,zN),e(zN,hMo),e(ku,pMo),e(G,_Mo),e(G,Su),e(Su,Iie),e(Iie,uMo),e(Su,bMo),e(Su,WN),e(WN,vMo),e(Su,FMo),e(G,TMo),e(G,Ru),e(Ru,qie),e(qie,MMo),e(Ru,EMo),e(Ru,QN),e(QN,CMo),e(Ru,wMo),e(G,AMo),e(G,Pu),e(Pu,Nie),e(Nie,yMo),e(Pu,LMo),e(Pu,HN),e(HN,xMo),e(Pu,$Mo),e(G,kMo),e(G,Bu),e(Bu,jie),e(jie,SMo),e(Bu,RMo),e(Bu,UN),e(UN,PMo),e(Bu,BMo),e(G,IMo),e(G,Iu),e(Iu,Die),e(Die,qMo),e(Iu,NMo),e(Iu,JN),e(JN,jMo),e(Iu,DMo),e(G,GMo),e(G,qu),e(qu,Gie),e(Gie,OMo),e(qu,VMo),e(qu,YN),e(YN,XMo),e(qu,zMo),e(G,WMo),e(G,Nu),e(Nu,Oie),e(Oie,QMo),e(Nu,HMo),e(Nu,KN),e(KN,UMo),e(Nu,JMo),e(G,YMo),e(G,ju),e(ju,Vie),e(Vie,KMo),e(ju,ZMo),e(ju,ZN),e(ZN,e4o),e(ju,o4o),e(G,r4o),e(G,Du),e(Du,Xie),e(Xie,t4o),e(Du,a4o),e(Du,ej),e(ej,n4o),e(Du,s4o),e(G,l4o),e(G,Gu),e(Gu,zie),e(zie,i4o),e(Gu,d4o),e(Gu,oj),e(oj,c4o),e(Gu,f4o),e(Ye,m4o),e(Ye,Ou),e(Ou,g4o),e(Ou,Wie),e(Wie,h4o),e(Ou,p4o),e(Ou,Qie),e(Qie,_4o),e(Ye,u4o),M(Vu,Ye,null),b(f,Iqe,u),b(f,ki,u),e(ki,Xu),e(Xu,Hie),M(oy,Hie,null),e(ki,b4o),e(ki,Uie),e(Uie,v4o),b(f,qqe,u),b(f,$o,u),M(ry,$o,null),e($o,F4o),e($o,Si),e(Si,T4o),e(Si,rj),e(rj,M4o),e(Si,E4o),e(Si,tj),e(tj,C4o),e(Si,w4o),e($o,A4o),e($o,ty),e(ty,y4o),e(ty,Jie),e(Jie,L4o),e(ty,x4o),e($o,$4o),e($o,st),M(ay,st,null),e(st,k4o),e(st,Yie),e(Yie,S4o),e(st,R4o),e(st,Ri),e(Ri,P4o),e(Ri,Kie),e(Kie,B4o),e(Ri,I4o),e(Ri,aj),e(aj,q4o),e(Ri,N4o),e(st,j4o),M(zu,st,null),e($o,D4o),e($o,Ke),M(ny,Ke,null),e(Ke,G4o),e(Ke,Zie),e(Zie,O4o),e(Ke,V4o),e(Ke,ka),e(ka,X4o),e(ka,ede),e(ede,z4o),e(ka,W4o),e(ka,ode),e(ode,Q4o),e(ka,H4o),e(ka,rde),e(rde,U4o),e(ka,J4o),e(Ke,Y4o),e(Ke,z),e(z,Wu),e(Wu,tde),e(tde,K4o),e(Wu,Z4o),e(Wu,nj),e(nj,eEo),e(Wu,oEo),e(z,rEo),e(z,Qu),e(Qu,ade),e(ade,tEo),e(Qu,aEo),e(Qu,sj),e(sj,nEo),e(Qu,sEo),e(z,lEo),e(z,Hu),e(Hu,nde),e(nde,iEo),e(Hu,dEo),e(Hu,lj),e(lj,cEo),e(Hu,fEo),e(z,mEo),e(z,Uu),e(Uu,sde),e(sde,gEo),e(Uu,hEo),e(Uu,ij),e(ij,pEo),e(Uu,_Eo),e(z,uEo),e(z,Ju),e(Ju,lde),e(lde,bEo),e(Ju,vEo),e(Ju,dj),e(dj,FEo),e(Ju,TEo),e(z,MEo),e(z,Yu),e(Yu,ide),e(ide,EEo),e(Yu,CEo),e(Yu,cj),e(cj,wEo),e(Yu,AEo),e(z,yEo),e(z,Ku),e(Ku,dde),e(dde,LEo),e(Ku,xEo),e(Ku,fj),e(fj,$Eo),e(Ku,kEo),e(z,SEo),e(z,Zu),e(Zu,cde),e(cde,REo),e(Zu,PEo),e(Zu,mj),e(mj,BEo),e(Zu,IEo),e(z,qEo),e(z,e2),e(e2,fde),e(fde,NEo),e(e2,jEo),e(e2,gj),e(gj,DEo),e(e2,GEo),e(z,OEo),e(z,o2),e(o2,mde),e(mde,VEo),e(o2,XEo),e(o2,hj),e(hj,zEo),e(o2,WEo),e(z,QEo),e(z,r2),e(r2,gde),e(gde,HEo),e(r2,UEo),e(r2,pj),e(pj,JEo),e(r2,YEo),e(z,KEo),e(z,t2),e(t2,hde),e(hde,ZEo),e(t2,eCo),e(t2,_j),e(_j,oCo),e(t2,rCo),e(z,tCo),e(z,a2),e(a2,pde),e(pde,aCo),e(a2,nCo),e(a2,uj),e(uj,sCo),e(a2,lCo),e(z,iCo),e(z,n2),e(n2,_de),e(_de,dCo),e(n2,cCo),e(n2,bj),e(bj,fCo),e(n2,mCo),e(z,gCo),e(z,s2),e(s2,ude),e(ude,hCo),e(s2,pCo),e(s2,vj),e(vj,_Co),e(s2,uCo),e(z,bCo),e(z,l2),e(l2,bde),e(bde,vCo),e(l2,FCo),e(l2,Fj),e(Fj,TCo),e(l2,MCo),e(z,ECo),e(z,i2),e(i2,vde),e(vde,CCo),e(i2,wCo),e(i2,Tj),e(Tj,ACo),e(i2,yCo),e(z,LCo),e(z,d2),e(d2,Fde),e(Fde,xCo),e(d2,$Co),e(d2,Mj),e(Mj,kCo),e(d2,SCo),e(z,RCo),e(z,c2),e(c2,Tde),e(Tde,PCo),e(c2,BCo),e(c2,Ej),e(Ej,ICo),e(c2,qCo),e(z,NCo),e(z,f2),e(f2,Mde),e(Mde,jCo),e(f2,DCo),e(f2,Cj),e(Cj,GCo),e(f2,OCo),e(z,VCo),e(z,m2),e(m2,Ede),e(Ede,XCo),e(m2,zCo),e(m2,wj),e(wj,WCo),e(m2,QCo),e(z,HCo),e(z,g2),e(g2,Cde),e(Cde,UCo),e(g2,JCo),e(g2,Aj),e(Aj,YCo),e(g2,KCo),e(z,ZCo),e(z,h2),e(h2,wde),e(wde,e3o),e(h2,o3o),e(h2,yj),e(yj,r3o),e(h2,t3o),e(z,a3o),e(z,p2),e(p2,Ade),e(Ade,n3o),e(p2,s3o),e(p2,Lj),e(Lj,l3o),e(p2,i3o),e(z,d3o),e(z,_2),e(_2,yde),e(yde,c3o),e(_2,f3o),e(_2,xj),e(xj,m3o),e(_2,g3o),e(z,h3o),e(z,u2),e(u2,Lde),e(Lde,p3o),e(u2,_3o),e(u2,$j),e($j,u3o),e(u2,b3o),e(z,v3o),e(z,b2),e(b2,xde),e(xde,F3o),e(b2,T3o),e(b2,kj),e(kj,M3o),e(b2,E3o),e(z,C3o),e(z,v2),e(v2,$de),e($de,w3o),e(v2,A3o),e(v2,Sj),e(Sj,y3o),e(v2,L3o),e(z,x3o),e(z,F2),e(F2,kde),e(kde,$3o),e(F2,k3o),e(F2,Rj),e(Rj,S3o),e(F2,R3o),e(z,P3o),e(z,T2),e(T2,Sde),e(Sde,B3o),e(T2,I3o),e(T2,Pj),e(Pj,q3o),e(T2,N3o),e(z,j3o),e(z,M2),e(M2,Rde),e(Rde,D3o),e(M2,G3o),e(M2,Bj),e(Bj,O3o),e(M2,V3o),e(z,X3o),e(z,E2),e(E2,Pde),e(Pde,z3o),e(E2,W3o),e(E2,Ij),e(Ij,Q3o),e(E2,H3o),e(z,U3o),e(z,C2),e(C2,Bde),e(Bde,J3o),e(C2,Y3o),e(C2,qj),e(qj,K3o),e(C2,Z3o),e(z,ewo),e(z,w2),e(w2,Ide),e(Ide,owo),e(w2,rwo),e(w2,Nj),e(Nj,two),e(w2,awo),e(z,nwo),e(z,A2),e(A2,qde),e(qde,swo),e(A2,lwo),e(A2,jj),e(jj,iwo),e(A2,dwo),e(z,cwo),e(z,y2),e(y2,Nde),e(Nde,fwo),e(y2,mwo),e(y2,Dj),e(Dj,gwo),e(y2,hwo),e(Ke,pwo),e(Ke,L2),e(L2,_wo),e(L2,jde),e(jde,uwo),e(L2,bwo),e(L2,Dde),e(Dde,vwo),e(Ke,Fwo),M(x2,Ke,null),b(f,Nqe,u),b(f,Pi,u),e(Pi,$2),e($2,Gde),M(sy,Gde,null),e(Pi,Two),e(Pi,Ode),e(Ode,Mwo),b(f,jqe,u),b(f,ko,u),M(ly,ko,null),e(ko,Ewo),e(ko,Bi),e(Bi,Cwo),e(Bi,Gj),e(Gj,wwo),e(Bi,Awo),e(Bi,Oj),e(Oj,ywo),e(Bi,Lwo),e(ko,xwo),e(ko,iy),e(iy,$wo),e(iy,Vde),e(Vde,kwo),e(iy,Swo),e(ko,Rwo),e(ko,lt),M(dy,lt,null),e(lt,Pwo),e(lt,Xde),e(Xde,Bwo),e(lt,Iwo),e(lt,Ii),e(Ii,qwo),e(Ii,zde),e(zde,Nwo),e(Ii,jwo),e(Ii,Vj),e(Vj,Dwo),e(Ii,Gwo),e(lt,Owo),M(k2,lt,null),e(ko,Vwo),e(ko,Ze),M(cy,Ze,null),e(Ze,Xwo),e(Ze,Wde),e(Wde,zwo),e(Ze,Wwo),e(Ze,Sa),e(Sa,Qwo),e(Sa,Qde),e(Qde,Hwo),e(Sa,Uwo),e(Sa,Hde),e(Hde,Jwo),e(Sa,Ywo),e(Sa,Ude),e(Ude,Kwo),e(Sa,Zwo),e(Ze,e6o),e(Ze,W),e(W,S2),e(S2,Jde),e(Jde,o6o),e(S2,r6o),e(S2,Xj),e(Xj,t6o),e(S2,a6o),e(W,n6o),e(W,R2),e(R2,Yde),e(Yde,s6o),e(R2,l6o),e(R2,zj),e(zj,i6o),e(R2,d6o),e(W,c6o),e(W,P2),e(P2,Kde),e(Kde,f6o),e(P2,m6o),e(P2,Wj),e(Wj,g6o),e(P2,h6o),e(W,p6o),e(W,B2),e(B2,Zde),e(Zde,_6o),e(B2,u6o),e(B2,Qj),e(Qj,b6o),e(B2,v6o),e(W,F6o),e(W,I2),e(I2,ece),e(ece,T6o),e(I2,M6o),e(I2,Hj),e(Hj,E6o),e(I2,C6o),e(W,w6o),e(W,q2),e(q2,oce),e(oce,A6o),e(q2,y6o),e(q2,Uj),e(Uj,L6o),e(q2,x6o),e(W,$6o),e(W,N2),e(N2,rce),e(rce,k6o),e(N2,S6o),e(N2,Jj),e(Jj,R6o),e(N2,P6o),e(W,B6o),e(W,j2),e(j2,tce),e(tce,I6o),e(j2,q6o),e(j2,Yj),e(Yj,N6o),e(j2,j6o),e(W,D6o),e(W,D2),e(D2,ace),e(ace,G6o),e(D2,O6o),e(D2,Kj),e(Kj,V6o),e(D2,X6o),e(W,z6o),e(W,G2),e(G2,nce),e(nce,W6o),e(G2,Q6o),e(G2,Zj),e(Zj,H6o),e(G2,U6o),e(W,J6o),e(W,O2),e(O2,sce),e(sce,Y6o),e(O2,K6o),e(O2,eD),e(eD,Z6o),e(O2,eAo),e(W,oAo),e(W,V2),e(V2,lce),e(lce,rAo),e(V2,tAo),e(V2,oD),e(oD,aAo),e(V2,nAo),e(W,sAo),e(W,X2),e(X2,ice),e(ice,lAo),e(X2,iAo),e(X2,rD),e(rD,dAo),e(X2,cAo),e(W,fAo),e(W,z2),e(z2,dce),e(dce,mAo),e(z2,gAo),e(z2,tD),e(tD,hAo),e(z2,pAo),e(W,_Ao),e(W,W2),e(W2,cce),e(cce,uAo),e(W2,bAo),e(W2,aD),e(aD,vAo),e(W2,FAo),e(W,TAo),e(W,Q2),e(Q2,fce),e(fce,MAo),e(Q2,EAo),e(Q2,nD),e(nD,CAo),e(Q2,wAo),e(W,AAo),e(W,H2),e(H2,mce),e(mce,yAo),e(H2,LAo),e(H2,sD),e(sD,xAo),e(H2,$Ao),e(W,kAo),e(W,U2),e(U2,gce),e(gce,SAo),e(U2,RAo),e(U2,lD),e(lD,PAo),e(U2,BAo),e(W,IAo),e(W,J2),e(J2,hce),e(hce,qAo),e(J2,NAo),e(J2,iD),e(iD,jAo),e(J2,DAo),e(W,GAo),e(W,Y2),e(Y2,pce),e(pce,OAo),e(Y2,VAo),e(Y2,dD),e(dD,XAo),e(Y2,zAo),e(W,WAo),e(W,K2),e(K2,_ce),e(_ce,QAo),e(K2,HAo),e(K2,cD),e(cD,UAo),e(K2,JAo),e(W,YAo),e(W,Z2),e(Z2,uce),e(uce,KAo),e(Z2,ZAo),e(Z2,fD),e(fD,eyo),e(Z2,oyo),e(W,ryo),e(W,e1),e(e1,bce),e(bce,tyo),e(e1,ayo),e(e1,mD),e(mD,nyo),e(e1,syo),e(W,lyo),e(W,o1),e(o1,vce),e(vce,iyo),e(o1,dyo),e(o1,gD),e(gD,cyo),e(o1,fyo),e(W,myo),e(W,r1),e(r1,Fce),e(Fce,gyo),e(r1,hyo),e(r1,hD),e(hD,pyo),e(r1,_yo),e(W,uyo),e(W,t1),e(t1,Tce),e(Tce,byo),e(t1,vyo),e(t1,pD),e(pD,Fyo),e(t1,Tyo),e(W,Myo),e(W,a1),e(a1,Mce),e(Mce,Eyo),e(a1,Cyo),e(a1,_D),e(_D,wyo),e(a1,Ayo),e(W,yyo),e(W,n1),e(n1,Ece),e(Ece,Lyo),e(n1,xyo),e(n1,uD),e(uD,$yo),e(n1,kyo),e(W,Syo),e(W,s1),e(s1,Cce),e(Cce,Ryo),e(s1,Pyo),e(s1,bD),e(bD,Byo),e(s1,Iyo),e(W,qyo),e(W,l1),e(l1,wce),e(wce,Nyo),e(l1,jyo),e(l1,vD),e(vD,Dyo),e(l1,Gyo),e(W,Oyo),e(W,i1),e(i1,Ace),e(Ace,Vyo),e(i1,Xyo),e(i1,yce),e(yce,zyo),e(i1,Wyo),e(W,Qyo),e(W,d1),e(d1,Lce),e(Lce,Hyo),e(d1,Uyo),e(d1,FD),e(FD,Jyo),e(d1,Yyo),e(W,Kyo),e(W,c1),e(c1,xce),e(xce,Zyo),e(c1,e8o),e(c1,TD),e(TD,o8o),e(c1,r8o),e(W,t8o),e(W,f1),e(f1,$ce),e($ce,a8o),e(f1,n8o),e(f1,MD),e(MD,s8o),e(f1,l8o),e(W,i8o),e(W,m1),e(m1,kce),e(kce,d8o),e(m1,c8o),e(m1,ED),e(ED,f8o),e(m1,m8o),e(Ze,g8o),e(Ze,g1),e(g1,h8o),e(g1,Sce),e(Sce,p8o),e(g1,_8o),e(g1,Rce),e(Rce,u8o),e(Ze,b8o),M(h1,Ze,null),b(f,Dqe,u),b(f,qi,u),e(qi,p1),e(p1,Pce),M(fy,Pce,null),e(qi,v8o),e(qi,Bce),e(Bce,F8o),b(f,Gqe,u),b(f,So,u),M(my,So,null),e(So,T8o),e(So,Ni),e(Ni,M8o),e(Ni,CD),e(CD,E8o),e(Ni,C8o),e(Ni,wD),e(wD,w8o),e(Ni,A8o),e(So,y8o),e(So,gy),e(gy,L8o),e(gy,Ice),e(Ice,x8o),e(gy,$8o),e(So,k8o),e(So,it),M(hy,it,null),e(it,S8o),e(it,qce),e(qce,R8o),e(it,P8o),e(it,ji),e(ji,B8o),e(ji,Nce),e(Nce,I8o),e(ji,q8o),e(ji,AD),e(AD,N8o),e(ji,j8o),e(it,D8o),M(_1,it,null),e(So,G8o),e(So,eo),M(py,eo,null),e(eo,O8o),e(eo,jce),e(jce,V8o),e(eo,X8o),e(eo,Ra),e(Ra,z8o),e(Ra,Dce),e(Dce,W8o),e(Ra,Q8o),e(Ra,Gce),e(Gce,H8o),e(Ra,U8o),e(Ra,Oce),e(Oce,J8o),e(Ra,Y8o),e(eo,K8o),e(eo,_e),e(_e,u1),e(u1,Vce),e(Vce,Z8o),e(u1,eLo),e(u1,yD),e(yD,oLo),e(u1,rLo),e(_e,tLo),e(_e,b1),e(b1,Xce),e(Xce,aLo),e(b1,nLo),e(b1,LD),e(LD,sLo),e(b1,lLo),e(_e,iLo),e(_e,v1),e(v1,zce),e(zce,dLo),e(v1,cLo),e(v1,xD),e(xD,fLo),e(v1,mLo),e(_e,gLo),e(_e,F1),e(F1,Wce),e(Wce,hLo),e(F1,pLo),e(F1,$D),e($D,_Lo),e(F1,uLo),e(_e,bLo),e(_e,T1),e(T1,Qce),e(Qce,vLo),e(T1,FLo),e(T1,kD),e(kD,TLo),e(T1,MLo),e(_e,ELo),e(_e,M1),e(M1,Hce),e(Hce,CLo),e(M1,wLo),e(M1,SD),e(SD,ALo),e(M1,yLo),e(_e,LLo),e(_e,E1),e(E1,Uce),e(Uce,xLo),e(E1,$Lo),e(E1,RD),e(RD,kLo),e(E1,SLo),e(_e,RLo),e(_e,C1),e(C1,Jce),e(Jce,PLo),e(C1,BLo),e(C1,PD),e(PD,ILo),e(C1,qLo),e(_e,NLo),e(_e,w1),e(w1,Yce),e(Yce,jLo),e(w1,DLo),e(w1,BD),e(BD,GLo),e(w1,OLo),e(_e,VLo),e(_e,A1),e(A1,Kce),e(Kce,XLo),e(A1,zLo),e(A1,ID),e(ID,WLo),e(A1,QLo),e(_e,HLo),e(_e,y1),e(y1,Zce),e(Zce,ULo),e(y1,JLo),e(y1,qD),e(qD,YLo),e(y1,KLo),e(_e,ZLo),e(_e,L1),e(L1,efe),e(efe,e9o),e(L1,o9o),e(L1,ND),e(ND,r9o),e(L1,t9o),e(_e,a9o),e(_e,x1),e(x1,ofe),e(ofe,n9o),e(x1,s9o),e(x1,jD),e(jD,l9o),e(x1,i9o),e(_e,d9o),e(_e,$1),e($1,rfe),e(rfe,c9o),e($1,f9o),e($1,DD),e(DD,m9o),e($1,g9o),e(_e,h9o),e(_e,k1),e(k1,tfe),e(tfe,p9o),e(k1,_9o),e(k1,GD),e(GD,u9o),e(k1,b9o),e(_e,v9o),e(_e,S1),e(S1,afe),e(afe,F9o),e(S1,T9o),e(S1,OD),e(OD,M9o),e(S1,E9o),e(eo,C9o),e(eo,R1),e(R1,w9o),e(R1,nfe),e(nfe,A9o),e(R1,y9o),e(R1,sfe),e(sfe,L9o),e(eo,x9o),M(P1,eo,null),b(f,Oqe,u),b(f,Di,u),e(Di,B1),e(B1,lfe),M(_y,lfe,null),e(Di,$9o),e(Di,ife),e(ife,k9o),b(f,Vqe,u),b(f,Ro,u),M(uy,Ro,null),e(Ro,S9o),e(Ro,Gi),e(Gi,R9o),e(Gi,VD),e(VD,P9o),e(Gi,B9o),e(Gi,XD),e(XD,I9o),e(Gi,q9o),e(Ro,N9o),e(Ro,by),e(by,j9o),e(by,dfe),e(dfe,D9o),e(by,G9o),e(Ro,O9o),e(Ro,dt),M(vy,dt,null),e(dt,V9o),e(dt,cfe),e(cfe,X9o),e(dt,z9o),e(dt,Oi),e(Oi,W9o),e(Oi,ffe),e(ffe,Q9o),e(Oi,H9o),e(Oi,zD),e(zD,U9o),e(Oi,J9o),e(dt,Y9o),M(I1,dt,null),e(Ro,K9o),e(Ro,oo),M(Fy,oo,null),e(oo,Z9o),e(oo,mfe),e(mfe,exo),e(oo,oxo),e(oo,Pa),e(Pa,rxo),e(Pa,gfe),e(gfe,txo),e(Pa,axo),e(Pa,hfe),e(hfe,nxo),e(Pa,sxo),e(Pa,pfe),e(pfe,lxo),e(Pa,ixo),e(oo,dxo),e(oo,q),e(q,q1),e(q1,_fe),e(_fe,cxo),e(q1,fxo),e(q1,WD),e(WD,mxo),e(q1,gxo),e(q,hxo),e(q,N1),e(N1,ufe),e(ufe,pxo),e(N1,_xo),e(N1,QD),e(QD,uxo),e(N1,bxo),e(q,vxo),e(q,j1),e(j1,bfe),e(bfe,Fxo),e(j1,Txo),e(j1,HD),e(HD,Mxo),e(j1,Exo),e(q,Cxo),e(q,D1),e(D1,vfe),e(vfe,wxo),e(D1,Axo),e(D1,UD),e(UD,yxo),e(D1,Lxo),e(q,xxo),e(q,G1),e(G1,Ffe),e(Ffe,$xo),e(G1,kxo),e(G1,JD),e(JD,Sxo),e(G1,Rxo),e(q,Pxo),e(q,O1),e(O1,Tfe),e(Tfe,Bxo),e(O1,Ixo),e(O1,YD),e(YD,qxo),e(O1,Nxo),e(q,jxo),e(q,V1),e(V1,Mfe),e(Mfe,Dxo),e(V1,Gxo),e(V1,KD),e(KD,Oxo),e(V1,Vxo),e(q,Xxo),e(q,X1),e(X1,Efe),e(Efe,zxo),e(X1,Wxo),e(X1,ZD),e(ZD,Qxo),e(X1,Hxo),e(q,Uxo),e(q,z1),e(z1,Cfe),e(Cfe,Jxo),e(z1,Yxo),e(z1,eG),e(eG,Kxo),e(z1,Zxo),e(q,e$o),e(q,W1),e(W1,wfe),e(wfe,o$o),e(W1,r$o),e(W1,oG),e(oG,t$o),e(W1,a$o),e(q,n$o),e(q,Q1),e(Q1,Afe),e(Afe,s$o),e(Q1,l$o),e(Q1,rG),e(rG,i$o),e(Q1,d$o),e(q,c$o),e(q,H1),e(H1,yfe),e(yfe,f$o),e(H1,m$o),e(H1,tG),e(tG,g$o),e(H1,h$o),e(q,p$o),e(q,U1),e(U1,Lfe),e(Lfe,_$o),e(U1,u$o),e(U1,aG),e(aG,b$o),e(U1,v$o),e(q,F$o),e(q,J1),e(J1,xfe),e(xfe,T$o),e(J1,M$o),e(J1,nG),e(nG,E$o),e(J1,C$o),e(q,w$o),e(q,Y1),e(Y1,$fe),e($fe,A$o),e(Y1,y$o),e(Y1,sG),e(sG,L$o),e(Y1,x$o),e(q,$$o),e(q,K1),e(K1,kfe),e(kfe,k$o),e(K1,S$o),e(K1,lG),e(lG,R$o),e(K1,P$o),e(q,B$o),e(q,Z1),e(Z1,Sfe),e(Sfe,I$o),e(Z1,q$o),e(Z1,iG),e(iG,N$o),e(Z1,j$o),e(q,D$o),e(q,eb),e(eb,Rfe),e(Rfe,G$o),e(eb,O$o),e(eb,dG),e(dG,V$o),e(eb,X$o),e(q,z$o),e(q,ob),e(ob,Pfe),e(Pfe,W$o),e(ob,Q$o),e(ob,cG),e(cG,H$o),e(ob,U$o),e(q,J$o),e(q,rb),e(rb,Bfe),e(Bfe,Y$o),e(rb,K$o),e(rb,fG),e(fG,Z$o),e(rb,eko),e(q,oko),e(q,tb),e(tb,Ife),e(Ife,rko),e(tb,tko),e(tb,mG),e(mG,ako),e(tb,nko),e(q,sko),e(q,ab),e(ab,qfe),e(qfe,lko),e(ab,iko),e(ab,gG),e(gG,dko),e(ab,cko),e(q,fko),e(q,nb),e(nb,Nfe),e(Nfe,mko),e(nb,gko),e(nb,hG),e(hG,hko),e(nb,pko),e(q,_ko),e(q,sb),e(sb,jfe),e(jfe,uko),e(sb,bko),e(sb,pG),e(pG,vko),e(sb,Fko),e(q,Tko),e(q,lb),e(lb,Dfe),e(Dfe,Mko),e(lb,Eko),e(lb,_G),e(_G,Cko),e(lb,wko),e(q,Ako),e(q,ib),e(ib,Gfe),e(Gfe,yko),e(ib,Lko),e(ib,uG),e(uG,xko),e(ib,$ko),e(q,kko),e(q,db),e(db,Ofe),e(Ofe,Sko),e(db,Rko),e(db,bG),e(bG,Pko),e(db,Bko),e(q,Iko),e(q,cb),e(cb,Vfe),e(Vfe,qko),e(cb,Nko),e(cb,vG),e(vG,jko),e(cb,Dko),e(q,Gko),e(q,fb),e(fb,Xfe),e(Xfe,Oko),e(fb,Vko),e(fb,FG),e(FG,Xko),e(fb,zko),e(q,Wko),e(q,mb),e(mb,zfe),e(zfe,Qko),e(mb,Hko),e(mb,TG),e(TG,Uko),e(mb,Jko),e(q,Yko),e(q,gb),e(gb,Wfe),e(Wfe,Kko),e(gb,Zko),e(gb,MG),e(MG,eSo),e(gb,oSo),e(q,rSo),e(q,hb),e(hb,Qfe),e(Qfe,tSo),e(hb,aSo),e(hb,EG),e(EG,nSo),e(hb,sSo),e(q,lSo),e(q,pb),e(pb,Hfe),e(Hfe,iSo),e(pb,dSo),e(pb,CG),e(CG,cSo),e(pb,fSo),e(q,mSo),e(q,_b),e(_b,Ufe),e(Ufe,gSo),e(_b,hSo),e(_b,wG),e(wG,pSo),e(_b,_So),e(q,uSo),e(q,ub),e(ub,Jfe),e(Jfe,bSo),e(ub,vSo),e(ub,AG),e(AG,FSo),e(ub,TSo),e(q,MSo),e(q,bb),e(bb,Yfe),e(Yfe,ESo),e(bb,CSo),e(bb,yG),e(yG,wSo),e(bb,ASo),e(q,ySo),e(q,vb),e(vb,Kfe),e(Kfe,LSo),e(vb,xSo),e(vb,LG),e(LG,$So),e(vb,kSo),e(q,SSo),e(q,Fb),e(Fb,Zfe),e(Zfe,RSo),e(Fb,PSo),e(Fb,xG),e(xG,BSo),e(Fb,ISo),e(q,qSo),e(q,Tb),e(Tb,eme),e(eme,NSo),e(Tb,jSo),e(Tb,$G),e($G,DSo),e(Tb,GSo),e(q,OSo),e(q,Mb),e(Mb,ome),e(ome,VSo),e(Mb,XSo),e(Mb,kG),e(kG,zSo),e(Mb,WSo),e(q,QSo),e(q,Eb),e(Eb,rme),e(rme,HSo),e(Eb,USo),e(Eb,SG),e(SG,JSo),e(Eb,YSo),e(q,KSo),e(q,Cb),e(Cb,tme),e(tme,ZSo),e(Cb,eRo),e(Cb,RG),e(RG,oRo),e(Cb,rRo),e(q,tRo),e(q,wb),e(wb,ame),e(ame,aRo),e(wb,nRo),e(wb,PG),e(PG,sRo),e(wb,lRo),e(q,iRo),e(q,Ab),e(Ab,nme),e(nme,dRo),e(Ab,cRo),e(Ab,BG),e(BG,fRo),e(Ab,mRo),e(q,gRo),e(q,yb),e(yb,sme),e(sme,hRo),e(yb,pRo),e(yb,IG),e(IG,_Ro),e(yb,uRo),e(q,bRo),e(q,Lb),e(Lb,lme),e(lme,vRo),e(Lb,FRo),e(Lb,qG),e(qG,TRo),e(Lb,MRo),e(oo,ERo),e(oo,xb),e(xb,CRo),e(xb,ime),e(ime,wRo),e(xb,ARo),e(xb,dme),e(dme,yRo),e(oo,LRo),M($b,oo,null),b(f,Xqe,u),b(f,Vi,u),e(Vi,kb),e(kb,cme),M(Ty,cme,null),e(Vi,xRo),e(Vi,fme),e(fme,$Ro),b(f,zqe,u),b(f,Po,u),M(My,Po,null),e(Po,kRo),e(Po,Xi),e(Xi,SRo),e(Xi,NG),e(NG,RRo),e(Xi,PRo),e(Xi,jG),e(jG,BRo),e(Xi,IRo),e(Po,qRo),e(Po,Ey),e(Ey,NRo),e(Ey,mme),e(mme,jRo),e(Ey,DRo),e(Po,GRo),e(Po,ct),M(Cy,ct,null),e(ct,ORo),e(ct,gme),e(gme,VRo),e(ct,XRo),e(ct,zi),e(zi,zRo),e(zi,hme),e(hme,WRo),e(zi,QRo),e(zi,DG),e(DG,HRo),e(zi,URo),e(ct,JRo),M(Sb,ct,null),e(Po,YRo),e(Po,ro),M(wy,ro,null),e(ro,KRo),e(ro,pme),e(pme,ZRo),e(ro,ePo),e(ro,Ba),e(Ba,oPo),e(Ba,_me),e(_me,rPo),e(Ba,tPo),e(Ba,ume),e(ume,aPo),e(Ba,nPo),e(Ba,bme),e(bme,sPo),e(Ba,lPo),e(ro,iPo),e(ro,Y),e(Y,Rb),e(Rb,vme),e(vme,dPo),e(Rb,cPo),e(Rb,GG),e(GG,fPo),e(Rb,mPo),e(Y,gPo),e(Y,Pb),e(Pb,Fme),e(Fme,hPo),e(Pb,pPo),e(Pb,OG),e(OG,_Po),e(Pb,uPo),e(Y,bPo),e(Y,Bb),e(Bb,Tme),e(Tme,vPo),e(Bb,FPo),e(Bb,VG),e(VG,TPo),e(Bb,MPo),e(Y,EPo),e(Y,Ib),e(Ib,Mme),e(Mme,CPo),e(Ib,wPo),e(Ib,XG),e(XG,APo),e(Ib,yPo),e(Y,LPo),e(Y,qb),e(qb,Eme),e(Eme,xPo),e(qb,$Po),e(qb,zG),e(zG,kPo),e(qb,SPo),e(Y,RPo),e(Y,Nb),e(Nb,Cme),e(Cme,PPo),e(Nb,BPo),e(Nb,WG),e(WG,IPo),e(Nb,qPo),e(Y,NPo),e(Y,jb),e(jb,wme),e(wme,jPo),e(jb,DPo),e(jb,QG),e(QG,GPo),e(jb,OPo),e(Y,VPo),e(Y,Db),e(Db,Ame),e(Ame,XPo),e(Db,zPo),e(Db,HG),e(HG,WPo),e(Db,QPo),e(Y,HPo),e(Y,Gb),e(Gb,yme),e(yme,UPo),e(Gb,JPo),e(Gb,UG),e(UG,YPo),e(Gb,KPo),e(Y,ZPo),e(Y,Ob),e(Ob,Lme),e(Lme,eBo),e(Ob,oBo),e(Ob,JG),e(JG,rBo),e(Ob,tBo),e(Y,aBo),e(Y,Vb),e(Vb,xme),e(xme,nBo),e(Vb,sBo),e(Vb,YG),e(YG,lBo),e(Vb,iBo),e(Y,dBo),e(Y,Xb),e(Xb,$me),e($me,cBo),e(Xb,fBo),e(Xb,KG),e(KG,mBo),e(Xb,gBo),e(Y,hBo),e(Y,zb),e(zb,kme),e(kme,pBo),e(zb,_Bo),e(zb,ZG),e(ZG,uBo),e(zb,bBo),e(Y,vBo),e(Y,Wb),e(Wb,Sme),e(Sme,FBo),e(Wb,TBo),e(Wb,eO),e(eO,MBo),e(Wb,EBo),e(Y,CBo),e(Y,Qb),e(Qb,Rme),e(Rme,wBo),e(Qb,ABo),e(Qb,oO),e(oO,yBo),e(Qb,LBo),e(Y,xBo),e(Y,Hb),e(Hb,Pme),e(Pme,$Bo),e(Hb,kBo),e(Hb,rO),e(rO,SBo),e(Hb,RBo),e(Y,PBo),e(Y,Ub),e(Ub,Bme),e(Bme,BBo),e(Ub,IBo),e(Ub,tO),e(tO,qBo),e(Ub,NBo),e(Y,jBo),e(Y,Jb),e(Jb,Ime),e(Ime,DBo),e(Jb,GBo),e(Jb,aO),e(aO,OBo),e(Jb,VBo),e(Y,XBo),e(Y,Yb),e(Yb,qme),e(qme,zBo),e(Yb,WBo),e(Yb,nO),e(nO,QBo),e(Yb,HBo),e(Y,UBo),e(Y,Kb),e(Kb,Nme),e(Nme,JBo),e(Kb,YBo),e(Kb,sO),e(sO,KBo),e(Kb,ZBo),e(Y,eIo),e(Y,Zb),e(Zb,jme),e(jme,oIo),e(Zb,rIo),e(Zb,lO),e(lO,tIo),e(Zb,aIo),e(Y,nIo),e(Y,e5),e(e5,Dme),e(Dme,sIo),e(e5,lIo),e(e5,iO),e(iO,iIo),e(e5,dIo),e(Y,cIo),e(Y,o5),e(o5,Gme),e(Gme,fIo),e(o5,mIo),e(o5,dO),e(dO,gIo),e(o5,hIo),e(Y,pIo),e(Y,r5),e(r5,Ome),e(Ome,_Io),e(r5,uIo),e(r5,cO),e(cO,bIo),e(r5,vIo),e(Y,FIo),e(Y,t5),e(t5,Vme),e(Vme,TIo),e(t5,MIo),e(t5,fO),e(fO,EIo),e(t5,CIo),e(Y,wIo),e(Y,a5),e(a5,Xme),e(Xme,AIo),e(a5,yIo),e(a5,mO),e(mO,LIo),e(a5,xIo),e(Y,$Io),e(Y,n5),e(n5,zme),e(zme,kIo),e(n5,SIo),e(n5,gO),e(gO,RIo),e(n5,PIo),e(Y,BIo),e(Y,s5),e(s5,Wme),e(Wme,IIo),e(s5,qIo),e(s5,hO),e(hO,NIo),e(s5,jIo),e(Y,DIo),e(Y,l5),e(l5,Qme),e(Qme,GIo),e(l5,OIo),e(l5,pO),e(pO,VIo),e(l5,XIo),e(ro,zIo),e(ro,i5),e(i5,WIo),e(i5,Hme),e(Hme,QIo),e(i5,HIo),e(i5,Ume),e(Ume,UIo),e(ro,JIo),M(d5,ro,null),b(f,Wqe,u),b(f,Wi,u),e(Wi,c5),e(c5,Jme),M(Ay,Jme,null),e(Wi,YIo),e(Wi,Yme),e(Yme,KIo),b(f,Qqe,u),b(f,Bo,u),M(yy,Bo,null),e(Bo,ZIo),e(Bo,Qi),e(Qi,eqo),e(Qi,_O),e(_O,oqo),e(Qi,rqo),e(Qi,uO),e(uO,tqo),e(Qi,aqo),e(Bo,nqo),e(Bo,Ly),e(Ly,sqo),e(Ly,Kme),e(Kme,lqo),e(Ly,iqo),e(Bo,dqo),e(Bo,ft),M(xy,ft,null),e(ft,cqo),e(ft,Zme),e(Zme,fqo),e(ft,mqo),e(ft,Hi),e(Hi,gqo),e(Hi,ege),e(ege,hqo),e(Hi,pqo),e(Hi,bO),e(bO,_qo),e(Hi,uqo),e(ft,bqo),M(f5,ft,null),e(Bo,vqo),e(Bo,to),M($y,to,null),e(to,Fqo),e(to,oge),e(oge,Tqo),e(to,Mqo),e(to,Ia),e(Ia,Eqo),e(Ia,rge),e(rge,Cqo),e(Ia,wqo),e(Ia,tge),e(tge,Aqo),e(Ia,yqo),e(Ia,age),e(age,Lqo),e(Ia,xqo),e(to,$qo),e(to,Yr),e(Yr,m5),e(m5,nge),e(nge,kqo),e(m5,Sqo),e(m5,vO),e(vO,Rqo),e(m5,Pqo),e(Yr,Bqo),e(Yr,g5),e(g5,sge),e(sge,Iqo),e(g5,qqo),e(g5,FO),e(FO,Nqo),e(g5,jqo),e(Yr,Dqo),e(Yr,h5),e(h5,lge),e(lge,Gqo),e(h5,Oqo),e(h5,TO),e(TO,Vqo),e(h5,Xqo),e(Yr,zqo),e(Yr,p5),e(p5,ige),e(ige,Wqo),e(p5,Qqo),e(p5,MO),e(MO,Hqo),e(p5,Uqo),e(Yr,Jqo),e(Yr,_5),e(_5,dge),e(dge,Yqo),e(_5,Kqo),e(_5,EO),e(EO,Zqo),e(_5,eNo),e(to,oNo),e(to,u5),e(u5,rNo),e(u5,cge),e(cge,tNo),e(u5,aNo),e(u5,fge),e(fge,nNo),e(to,sNo),M(b5,to,null),b(f,Hqe,u),b(f,Ui,u),e(Ui,v5),e(v5,mge),M(ky,mge,null),e(Ui,lNo),e(Ui,gge),e(gge,iNo),b(f,Uqe,u),b(f,Io,u),M(Sy,Io,null),e(Io,dNo),e(Io,Ji),e(Ji,cNo),e(Ji,CO),e(CO,fNo),e(Ji,mNo),e(Ji,wO),e(wO,gNo),e(Ji,hNo),e(Io,pNo),e(Io,Ry),e(Ry,_No),e(Ry,hge),e(hge,uNo),e(Ry,bNo),e(Io,vNo),e(Io,mt),M(Py,mt,null),e(mt,FNo),e(mt,pge),e(pge,TNo),e(mt,MNo),e(mt,Yi),e(Yi,ENo),e(Yi,_ge),e(_ge,CNo),e(Yi,wNo),e(Yi,AO),e(AO,ANo),e(Yi,yNo),e(mt,LNo),M(F5,mt,null),e(Io,xNo),e(Io,ao),M(By,ao,null),e(ao,$No),e(ao,uge),e(uge,kNo),e(ao,SNo),e(ao,qa),e(qa,RNo),e(qa,bge),e(bge,PNo),e(qa,BNo),e(qa,vge),e(vge,INo),e(qa,qNo),e(qa,Fge),e(Fge,NNo),e(qa,jNo),e(ao,DNo),e(ao,U),e(U,T5),e(T5,Tge),e(Tge,GNo),e(T5,ONo),e(T5,yO),e(yO,VNo),e(T5,XNo),e(U,zNo),e(U,M5),e(M5,Mge),e(Mge,WNo),e(M5,QNo),e(M5,LO),e(LO,HNo),e(M5,UNo),e(U,JNo),e(U,E5),e(E5,Ege),e(Ege,YNo),e(E5,KNo),e(E5,xO),e(xO,ZNo),e(E5,ejo),e(U,ojo),e(U,C5),e(C5,Cge),e(Cge,rjo),e(C5,tjo),e(C5,$O),e($O,ajo),e(C5,njo),e(U,sjo),e(U,w5),e(w5,wge),e(wge,ljo),e(w5,ijo),e(w5,kO),e(kO,djo),e(w5,cjo),e(U,fjo),e(U,A5),e(A5,Age),e(Age,mjo),e(A5,gjo),e(A5,SO),e(SO,hjo),e(A5,pjo),e(U,_jo),e(U,y5),e(y5,yge),e(yge,ujo),e(y5,bjo),e(y5,RO),e(RO,vjo),e(y5,Fjo),e(U,Tjo),e(U,L5),e(L5,Lge),e(Lge,Mjo),e(L5,Ejo),e(L5,PO),e(PO,Cjo),e(L5,wjo),e(U,Ajo),e(U,x5),e(x5,xge),e(xge,yjo),e(x5,Ljo),e(x5,BO),e(BO,xjo),e(x5,$jo),e(U,kjo),e(U,$5),e($5,$ge),e($ge,Sjo),e($5,Rjo),e($5,IO),e(IO,Pjo),e($5,Bjo),e(U,Ijo),e(U,k5),e(k5,kge),e(kge,qjo),e(k5,Njo),e(k5,qO),e(qO,jjo),e(k5,Djo),e(U,Gjo),e(U,S5),e(S5,Sge),e(Sge,Ojo),e(S5,Vjo),e(S5,NO),e(NO,Xjo),e(S5,zjo),e(U,Wjo),e(U,R5),e(R5,Rge),e(Rge,Qjo),e(R5,Hjo),e(R5,jO),e(jO,Ujo),e(R5,Jjo),e(U,Yjo),e(U,P5),e(P5,Pge),e(Pge,Kjo),e(P5,Zjo),e(P5,DO),e(DO,eDo),e(P5,oDo),e(U,rDo),e(U,B5),e(B5,Bge),e(Bge,tDo),e(B5,aDo),e(B5,GO),e(GO,nDo),e(B5,sDo),e(U,lDo),e(U,I5),e(I5,Ige),e(Ige,iDo),e(I5,dDo),e(I5,OO),e(OO,cDo),e(I5,fDo),e(U,mDo),e(U,q5),e(q5,qge),e(qge,gDo),e(q5,hDo),e(q5,VO),e(VO,pDo),e(q5,_Do),e(U,uDo),e(U,N5),e(N5,Nge),e(Nge,bDo),e(N5,vDo),e(N5,XO),e(XO,FDo),e(N5,TDo),e(U,MDo),e(U,j5),e(j5,jge),e(jge,EDo),e(j5,CDo),e(j5,zO),e(zO,wDo),e(j5,ADo),e(U,yDo),e(U,D5),e(D5,Dge),e(Dge,LDo),e(D5,xDo),e(D5,WO),e(WO,$Do),e(D5,kDo),e(U,SDo),e(U,G5),e(G5,Gge),e(Gge,RDo),e(G5,PDo),e(G5,QO),e(QO,BDo),e(G5,IDo),e(U,qDo),e(U,O5),e(O5,Oge),e(Oge,NDo),e(O5,jDo),e(O5,HO),e(HO,DDo),e(O5,GDo),e(U,ODo),e(U,V5),e(V5,Vge),e(Vge,VDo),e(V5,XDo),e(V5,UO),e(UO,zDo),e(V5,WDo),e(U,QDo),e(U,X5),e(X5,Xge),e(Xge,HDo),e(X5,UDo),e(X5,JO),e(JO,JDo),e(X5,YDo),e(U,KDo),e(U,z5),e(z5,zge),e(zge,ZDo),e(z5,eGo),e(z5,YO),e(YO,oGo),e(z5,rGo),e(U,tGo),e(U,W5),e(W5,Wge),e(Wge,aGo),e(W5,nGo),e(W5,KO),e(KO,sGo),e(W5,lGo),e(U,iGo),e(U,Q5),e(Q5,Qge),e(Qge,dGo),e(Q5,cGo),e(Q5,ZO),e(ZO,fGo),e(Q5,mGo),e(U,gGo),e(U,H5),e(H5,Hge),e(Hge,hGo),e(H5,pGo),e(H5,eV),e(eV,_Go),e(H5,uGo),e(U,bGo),e(U,U5),e(U5,Uge),e(Uge,vGo),e(U5,FGo),e(U5,oV),e(oV,TGo),e(U5,MGo),e(U,EGo),e(U,J5),e(J5,Jge),e(Jge,CGo),e(J5,wGo),e(J5,rV),e(rV,AGo),e(J5,yGo),e(U,LGo),e(U,Y5),e(Y5,Yge),e(Yge,xGo),e(Y5,$Go),e(Y5,tV),e(tV,kGo),e(Y5,SGo),e(U,RGo),e(U,K5),e(K5,Kge),e(Kge,PGo),e(K5,BGo),e(K5,aV),e(aV,IGo),e(K5,qGo),e(U,NGo),e(U,Z5),e(Z5,Zge),e(Zge,jGo),e(Z5,DGo),e(Z5,nV),e(nV,GGo),e(Z5,OGo),e(ao,VGo),e(ao,ev),e(ev,XGo),e(ev,ehe),e(ehe,zGo),e(ev,WGo),e(ev,ohe),e(ohe,QGo),e(ao,HGo),M(ov,ao,null),b(f,Jqe,u),b(f,Ki,u),e(Ki,rv),e(rv,rhe),M(Iy,rhe,null),e(Ki,UGo),e(Ki,the),e(the,JGo),b(f,Yqe,u),b(f,qo,u),M(qy,qo,null),e(qo,YGo),e(qo,Zi),e(Zi,KGo),e(Zi,sV),e(sV,ZGo),e(Zi,eOo),e(Zi,lV),e(lV,oOo),e(Zi,rOo),e(qo,tOo),e(qo,Ny),e(Ny,aOo),e(Ny,ahe),e(ahe,nOo),e(Ny,sOo),e(qo,lOo),e(qo,gt),M(jy,gt,null),e(gt,iOo),e(gt,nhe),e(nhe,dOo),e(gt,cOo),e(gt,ed),e(ed,fOo),e(ed,she),e(she,mOo),e(ed,gOo),e(ed,iV),e(iV,hOo),e(ed,pOo),e(gt,_Oo),M(tv,gt,null),e(qo,uOo),e(qo,no),M(Dy,no,null),e(no,bOo),e(no,lhe),e(lhe,vOo),e(no,FOo),e(no,Na),e(Na,TOo),e(Na,ihe),e(ihe,MOo),e(Na,EOo),e(Na,dhe),e(dhe,COo),e(Na,wOo),e(Na,che),e(che,AOo),e(Na,yOo),e(no,LOo),e(no,V),e(V,av),e(av,fhe),e(fhe,xOo),e(av,$Oo),e(av,dV),e(dV,kOo),e(av,SOo),e(V,ROo),e(V,nv),e(nv,mhe),e(mhe,POo),e(nv,BOo),e(nv,cV),e(cV,IOo),e(nv,qOo),e(V,NOo),e(V,sv),e(sv,ghe),e(ghe,jOo),e(sv,DOo),e(sv,fV),e(fV,GOo),e(sv,OOo),e(V,VOo),e(V,lv),e(lv,hhe),e(hhe,XOo),e(lv,zOo),e(lv,mV),e(mV,WOo),e(lv,QOo),e(V,HOo),e(V,iv),e(iv,phe),e(phe,UOo),e(iv,JOo),e(iv,gV),e(gV,YOo),e(iv,KOo),e(V,ZOo),e(V,dv),e(dv,_he),e(_he,eVo),e(dv,oVo),e(dv,hV),e(hV,rVo),e(dv,tVo),e(V,aVo),e(V,cv),e(cv,uhe),e(uhe,nVo),e(cv,sVo),e(cv,pV),e(pV,lVo),e(cv,iVo),e(V,dVo),e(V,fv),e(fv,bhe),e(bhe,cVo),e(fv,fVo),e(fv,_V),e(_V,mVo),e(fv,gVo),e(V,hVo),e(V,mv),e(mv,vhe),e(vhe,pVo),e(mv,_Vo),e(mv,uV),e(uV,uVo),e(mv,bVo),e(V,vVo),e(V,gv),e(gv,Fhe),e(Fhe,FVo),e(gv,TVo),e(gv,bV),e(bV,MVo),e(gv,EVo),e(V,CVo),e(V,hv),e(hv,The),e(The,wVo),e(hv,AVo),e(hv,vV),e(vV,yVo),e(hv,LVo),e(V,xVo),e(V,pv),e(pv,Mhe),e(Mhe,$Vo),e(pv,kVo),e(pv,FV),e(FV,SVo),e(pv,RVo),e(V,PVo),e(V,_v),e(_v,Ehe),e(Ehe,BVo),e(_v,IVo),e(_v,TV),e(TV,qVo),e(_v,NVo),e(V,jVo),e(V,uv),e(uv,Che),e(Che,DVo),e(uv,GVo),e(uv,MV),e(MV,OVo),e(uv,VVo),e(V,XVo),e(V,bv),e(bv,whe),e(whe,zVo),e(bv,WVo),e(bv,EV),e(EV,QVo),e(bv,HVo),e(V,UVo),e(V,vv),e(vv,Ahe),e(Ahe,JVo),e(vv,YVo),e(vv,CV),e(CV,KVo),e(vv,ZVo),e(V,eXo),e(V,Fv),e(Fv,yhe),e(yhe,oXo),e(Fv,rXo),e(Fv,wV),e(wV,tXo),e(Fv,aXo),e(V,nXo),e(V,Tv),e(Tv,Lhe),e(Lhe,sXo),e(Tv,lXo),e(Tv,AV),e(AV,iXo),e(Tv,dXo),e(V,cXo),e(V,Mv),e(Mv,xhe),e(xhe,fXo),e(Mv,mXo),e(Mv,yV),e(yV,gXo),e(Mv,hXo),e(V,pXo),e(V,Ev),e(Ev,$he),e($he,_Xo),e(Ev,uXo),e(Ev,LV),e(LV,bXo),e(Ev,vXo),e(V,FXo),e(V,Cv),e(Cv,khe),e(khe,TXo),e(Cv,MXo),e(Cv,xV),e(xV,EXo),e(Cv,CXo),e(V,wXo),e(V,wv),e(wv,She),e(She,AXo),e(wv,yXo),e(wv,$V),e($V,LXo),e(wv,xXo),e(V,$Xo),e(V,Av),e(Av,Rhe),e(Rhe,kXo),e(Av,SXo),e(Av,kV),e(kV,RXo),e(Av,PXo),e(V,BXo),e(V,yv),e(yv,Phe),e(Phe,IXo),e(yv,qXo),e(yv,SV),e(SV,NXo),e(yv,jXo),e(V,DXo),e(V,Lv),e(Lv,Bhe),e(Bhe,GXo),e(Lv,OXo),e(Lv,RV),e(RV,VXo),e(Lv,XXo),e(V,zXo),e(V,xv),e(xv,Ihe),e(Ihe,WXo),e(xv,QXo),e(xv,PV),e(PV,HXo),e(xv,UXo),e(V,JXo),e(V,$v),e($v,qhe),e(qhe,YXo),e($v,KXo),e($v,BV),e(BV,ZXo),e($v,ezo),e(V,ozo),e(V,kv),e(kv,Nhe),e(Nhe,rzo),e(kv,tzo),e(kv,IV),e(IV,azo),e(kv,nzo),e(V,szo),e(V,Sv),e(Sv,jhe),e(jhe,lzo),e(Sv,izo),e(Sv,qV),e(qV,dzo),e(Sv,czo),e(V,fzo),e(V,Rv),e(Rv,Dhe),e(Dhe,mzo),e(Rv,gzo),e(Rv,NV),e(NV,hzo),e(Rv,pzo),e(V,_zo),e(V,Pv),e(Pv,Ghe),e(Ghe,uzo),e(Pv,bzo),e(Pv,jV),e(jV,vzo),e(Pv,Fzo),e(V,Tzo),e(V,Bv),e(Bv,Ohe),e(Ohe,Mzo),e(Bv,Ezo),e(Bv,DV),e(DV,Czo),e(Bv,wzo),e(V,Azo),e(V,Iv),e(Iv,Vhe),e(Vhe,yzo),e(Iv,Lzo),e(Iv,GV),e(GV,xzo),e(Iv,$zo),e(V,kzo),e(V,qv),e(qv,Xhe),e(Xhe,Szo),e(qv,Rzo),e(qv,OV),e(OV,Pzo),e(qv,Bzo),e(V,Izo),e(V,Nv),e(Nv,zhe),e(zhe,qzo),e(Nv,Nzo),e(Nv,VV),e(VV,jzo),e(Nv,Dzo),e(V,Gzo),e(V,jv),e(jv,Whe),e(Whe,Ozo),e(jv,Vzo),e(jv,XV),e(XV,Xzo),e(jv,zzo),e(V,Wzo),e(V,Dv),e(Dv,Qhe),e(Qhe,Qzo),e(Dv,Hzo),e(Dv,zV),e(zV,Uzo),e(Dv,Jzo),e(V,Yzo),e(V,Gv),e(Gv,Hhe),e(Hhe,Kzo),e(Gv,Zzo),e(Gv,WV),e(WV,eWo),e(Gv,oWo),e(V,rWo),e(V,Ov),e(Ov,Uhe),e(Uhe,tWo),e(Ov,aWo),e(Ov,QV),e(QV,nWo),e(Ov,sWo),e(no,lWo),e(no,Vv),e(Vv,iWo),e(Vv,Jhe),e(Jhe,dWo),e(Vv,cWo),e(Vv,Yhe),e(Yhe,fWo),e(no,mWo),M(Xv,no,null),b(f,Kqe,u),b(f,od,u),e(od,zv),e(zv,Khe),M(Gy,Khe,null),e(od,gWo),e(od,Zhe),e(Zhe,hWo),b(f,Zqe,u),b(f,No,u),M(Oy,No,null),e(No,pWo),e(No,rd),e(rd,_Wo),e(rd,HV),e(HV,uWo),e(rd,bWo),e(rd,UV),e(UV,vWo),e(rd,FWo),e(No,TWo),e(No,Vy),e(Vy,MWo),e(Vy,epe),e(epe,EWo),e(Vy,CWo),e(No,wWo),e(No,ht),M(Xy,ht,null),e(ht,AWo),e(ht,ope),e(ope,yWo),e(ht,LWo),e(ht,td),e(td,xWo),e(td,rpe),e(rpe,$Wo),e(td,kWo),e(td,JV),e(JV,SWo),e(td,RWo),e(ht,PWo),M(Wv,ht,null),e(No,BWo),e(No,so),M(zy,so,null),e(so,IWo),e(so,tpe),e(tpe,qWo),e(so,NWo),e(so,ja),e(ja,jWo),e(ja,ape),e(ape,DWo),e(ja,GWo),e(ja,npe),e(npe,OWo),e(ja,VWo),e(ja,spe),e(spe,XWo),e(ja,zWo),e(so,WWo),e(so,lpe),e(lpe,Qv),e(Qv,ipe),e(ipe,QWo),e(Qv,HWo),e(Qv,YV),e(YV,UWo),e(Qv,JWo),e(so,YWo),e(so,Hv),e(Hv,KWo),e(Hv,dpe),e(dpe,ZWo),e(Hv,eQo),e(Hv,cpe),e(cpe,oQo),e(so,rQo),M(Uv,so,null),b(f,eNe,u),b(f,ad,u),e(ad,Jv),e(Jv,fpe),M(Wy,fpe,null),e(ad,tQo),e(ad,mpe),e(mpe,aQo),b(f,oNe,u),b(f,jo,u),M(Qy,jo,null),e(jo,nQo),e(jo,nd),e(nd,sQo),e(nd,KV),e(KV,lQo),e(nd,iQo),e(nd,ZV),e(ZV,dQo),e(nd,cQo),e(jo,fQo),e(jo,Hy),e(Hy,mQo),e(Hy,gpe),e(gpe,gQo),e(Hy,hQo),e(jo,pQo),e(jo,pt),M(Uy,pt,null),e(pt,_Qo),e(pt,hpe),e(hpe,uQo),e(pt,bQo),e(pt,sd),e(sd,vQo),e(sd,ppe),e(ppe,FQo),e(sd,TQo),e(sd,eX),e(eX,MQo),e(sd,EQo),e(pt,CQo),M(Yv,pt,null),e(jo,wQo),e(jo,lo),M(Jy,lo,null),e(lo,AQo),e(lo,_pe),e(_pe,yQo),e(lo,LQo),e(lo,Da),e(Da,xQo),e(Da,upe),e(upe,$Qo),e(Da,kQo),e(Da,bpe),e(bpe,SQo),e(Da,RQo),e(Da,vpe),e(vpe,PQo),e(Da,BQo),e(lo,IQo),e(lo,be),e(be,Kv),e(Kv,Fpe),e(Fpe,qQo),e(Kv,NQo),e(Kv,oX),e(oX,jQo),e(Kv,DQo),e(be,GQo),e(be,Zv),e(Zv,Tpe),e(Tpe,OQo),e(Zv,VQo),e(Zv,rX),e(rX,XQo),e(Zv,zQo),e(be,WQo),e(be,eF),e(eF,Mpe),e(Mpe,QQo),e(eF,HQo),e(eF,tX),e(tX,UQo),e(eF,JQo),e(be,YQo),e(be,oF),e(oF,Epe),e(Epe,KQo),e(oF,ZQo),e(oF,aX),e(aX,eHo),e(oF,oHo),e(be,rHo),e(be,Ps),e(Ps,Cpe),e(Cpe,tHo),e(Ps,aHo),e(Ps,nX),e(nX,nHo),e(Ps,sHo),e(Ps,sX),e(sX,lHo),e(Ps,iHo),e(be,dHo),e(be,rF),e(rF,wpe),e(wpe,cHo),e(rF,fHo),e(rF,lX),e(lX,mHo),e(rF,gHo),e(be,hHo),e(be,tF),e(tF,Ape),e(Ape,pHo),e(tF,_Ho),e(tF,iX),e(iX,uHo),e(tF,bHo),e(be,vHo),e(be,_t),e(_t,ype),e(ype,FHo),e(_t,THo),e(_t,dX),e(dX,MHo),e(_t,EHo),e(_t,cX),e(cX,CHo),e(_t,wHo),e(_t,fX),e(fX,AHo),e(_t,yHo),e(be,LHo),e(be,aF),e(aF,Lpe),e(Lpe,xHo),e(aF,$Ho),e(aF,mX),e(mX,kHo),e(aF,SHo),e(be,RHo),e(be,nF),e(nF,xpe),e(xpe,PHo),e(nF,BHo),e(nF,gX),e(gX,IHo),e(nF,qHo),e(be,NHo),e(be,sF),e(sF,$pe),e($pe,jHo),e(sF,DHo),e(sF,hX),e(hX,GHo),e(sF,OHo),e(be,VHo),e(be,lF),e(lF,kpe),e(kpe,XHo),e(lF,zHo),e(lF,pX),e(pX,WHo),e(lF,QHo),e(be,HHo),e(be,iF),e(iF,Spe),e(Spe,UHo),e(iF,JHo),e(iF,_X),e(_X,YHo),e(iF,KHo),e(be,ZHo),e(be,dF),e(dF,Rpe),e(Rpe,eUo),e(dF,oUo),e(dF,uX),e(uX,rUo),e(dF,tUo),e(be,aUo),e(be,cF),e(cF,Ppe),e(Ppe,nUo),e(cF,sUo),e(cF,bX),e(bX,lUo),e(cF,iUo),e(lo,dUo),e(lo,fF),e(fF,cUo),e(fF,Bpe),e(Bpe,fUo),e(fF,mUo),e(fF,Ipe),e(Ipe,gUo),e(lo,hUo),M(mF,lo,null),b(f,rNe,u),b(f,ld,u),e(ld,gF),e(gF,qpe),M(Yy,qpe,null),e(ld,pUo),e(ld,Npe),e(Npe,_Uo),b(f,tNe,u),b(f,Do,u),M(Ky,Do,null),e(Do,uUo),e(Do,id),e(id,bUo),e(id,vX),e(vX,vUo),e(id,FUo),e(id,FX),e(FX,TUo),e(id,MUo),e(Do,EUo),e(Do,Zy),e(Zy,CUo),e(Zy,jpe),e(jpe,wUo),e(Zy,AUo),e(Do,yUo),e(Do,ut),M(e8,ut,null),e(ut,LUo),e(ut,Dpe),e(Dpe,xUo),e(ut,$Uo),e(ut,dd),e(dd,kUo),e(dd,Gpe),e(Gpe,SUo),e(dd,RUo),e(dd,TX),e(TX,PUo),e(dd,BUo),e(ut,IUo),M(hF,ut,null),e(Do,qUo),e(Do,io),M(o8,io,null),e(io,NUo),e(io,Ope),e(Ope,jUo),e(io,DUo),e(io,Ga),e(Ga,GUo),e(Ga,Vpe),e(Vpe,OUo),e(Ga,VUo),e(Ga,Xpe),e(Xpe,XUo),e(Ga,zUo),e(Ga,zpe),e(zpe,WUo),e(Ga,QUo),e(io,HUo),e(io,Wpe),e(Wpe,pF),e(pF,Qpe),e(Qpe,UUo),e(pF,JUo),e(pF,MX),e(MX,YUo),e(pF,KUo),e(io,ZUo),e(io,_F),e(_F,eJo),e(_F,Hpe),e(Hpe,oJo),e(_F,rJo),e(_F,Upe),e(Upe,tJo),e(io,aJo),M(uF,io,null),b(f,aNe,u),b(f,cd,u),e(cd,bF),e(bF,Jpe),M(r8,Jpe,null),e(cd,nJo),e(cd,Ype),e(Ype,sJo),b(f,nNe,u),b(f,Go,u),M(t8,Go,null),e(Go,lJo),e(Go,fd),e(fd,iJo),e(fd,EX),e(EX,dJo),e(fd,cJo),e(fd,CX),e(CX,fJo),e(fd,mJo),e(Go,gJo),e(Go,a8),e(a8,hJo),e(a8,Kpe),e(Kpe,pJo),e(a8,_Jo),e(Go,uJo),e(Go,bt),M(n8,bt,null),e(bt,bJo),e(bt,Zpe),e(Zpe,vJo),e(bt,FJo),e(bt,md),e(md,TJo),e(md,e_e),e(e_e,MJo),e(md,EJo),e(md,wX),e(wX,CJo),e(md,wJo),e(bt,AJo),M(vF,bt,null),e(Go,yJo),e(Go,co),M(s8,co,null),e(co,LJo),e(co,o_e),e(o_e,xJo),e(co,$Jo),e(co,Oa),e(Oa,kJo),e(Oa,r_e),e(r_e,SJo),e(Oa,RJo),e(Oa,t_e),e(t_e,PJo),e(Oa,BJo),e(Oa,a_e),e(a_e,IJo),e(Oa,qJo),e(co,NJo),e(co,ke),e(ke,FF),e(FF,n_e),e(n_e,jJo),e(FF,DJo),e(FF,AX),e(AX,GJo),e(FF,OJo),e(ke,VJo),e(ke,TF),e(TF,s_e),e(s_e,XJo),e(TF,zJo),e(TF,yX),e(yX,WJo),e(TF,QJo),e(ke,HJo),e(ke,MF),e(MF,l_e),e(l_e,UJo),e(MF,JJo),e(MF,LX),e(LX,YJo),e(MF,KJo),e(ke,ZJo),e(ke,EF),e(EF,i_e),e(i_e,eYo),e(EF,oYo),e(EF,xX),e(xX,rYo),e(EF,tYo),e(ke,aYo),e(ke,CF),e(CF,d_e),e(d_e,nYo),e(CF,sYo),e(CF,$X),e($X,lYo),e(CF,iYo),e(ke,dYo),e(ke,wF),e(wF,c_e),e(c_e,cYo),e(wF,fYo),e(wF,kX),e(kX,mYo),e(wF,gYo),e(ke,hYo),e(ke,AF),e(AF,f_e),e(f_e,pYo),e(AF,_Yo),e(AF,SX),e(SX,uYo),e(AF,bYo),e(ke,vYo),e(ke,yF),e(yF,m_e),e(m_e,FYo),e(yF,TYo),e(yF,RX),e(RX,MYo),e(yF,EYo),e(ke,CYo),e(ke,LF),e(LF,g_e),e(g_e,wYo),e(LF,AYo),e(LF,PX),e(PX,yYo),e(LF,LYo),e(co,xYo),e(co,xF),e(xF,$Yo),e(xF,h_e),e(h_e,kYo),e(xF,SYo),e(xF,p_e),e(p_e,RYo),e(co,PYo),M($F,co,null),b(f,sNe,u),b(f,gd,u),e(gd,kF),e(kF,__e),M(l8,__e,null),e(gd,BYo),e(gd,u_e),e(u_e,IYo),b(f,lNe,u),b(f,Oo,u),M(i8,Oo,null),e(Oo,qYo),e(Oo,hd),e(hd,NYo),e(hd,BX),e(BX,jYo),e(hd,DYo),e(hd,IX),e(IX,GYo),e(hd,OYo),e(Oo,VYo),e(Oo,d8),e(d8,XYo),e(d8,b_e),e(b_e,zYo),e(d8,WYo),e(Oo,QYo),e(Oo,vt),M(c8,vt,null),e(vt,HYo),e(vt,v_e),e(v_e,UYo),e(vt,JYo),e(vt,pd),e(pd,YYo),e(pd,F_e),e(F_e,KYo),e(pd,ZYo),e(pd,qX),e(qX,eKo),e(pd,oKo),e(vt,rKo),M(SF,vt,null),e(Oo,tKo),e(Oo,fo),M(f8,fo,null),e(fo,aKo),e(fo,T_e),e(T_e,nKo),e(fo,sKo),e(fo,Va),e(Va,lKo),e(Va,M_e),e(M_e,iKo),e(Va,dKo),e(Va,E_e),e(E_e,cKo),e(Va,fKo),e(Va,C_e),e(C_e,mKo),e(Va,gKo),e(fo,hKo),e(fo,Kr),e(Kr,RF),e(RF,w_e),e(w_e,pKo),e(RF,_Ko),e(RF,NX),e(NX,uKo),e(RF,bKo),e(Kr,vKo),e(Kr,PF),e(PF,A_e),e(A_e,FKo),e(PF,TKo),e(PF,jX),e(jX,MKo),e(PF,EKo),e(Kr,CKo),e(Kr,BF),e(BF,y_e),e(y_e,wKo),e(BF,AKo),e(BF,DX),e(DX,yKo),e(BF,LKo),e(Kr,xKo),e(Kr,IF),e(IF,L_e),e(L_e,$Ko),e(IF,kKo),e(IF,GX),e(GX,SKo),e(IF,RKo),e(Kr,PKo),e(Kr,qF),e(qF,x_e),e(x_e,BKo),e(qF,IKo),e(qF,OX),e(OX,qKo),e(qF,NKo),e(fo,jKo),e(fo,NF),e(NF,DKo),e(NF,$_e),e($_e,GKo),e(NF,OKo),e(NF,k_e),e(k_e,VKo),e(fo,XKo),M(jF,fo,null),b(f,iNe,u),b(f,_d,u),e(_d,DF),e(DF,S_e),M(m8,S_e,null),e(_d,zKo),e(_d,R_e),e(R_e,WKo),b(f,dNe,u),b(f,Vo,u),M(g8,Vo,null),e(Vo,QKo),e(Vo,ud),e(ud,HKo),e(ud,VX),e(VX,UKo),e(ud,JKo),e(ud,XX),e(XX,YKo),e(ud,KKo),e(Vo,ZKo),e(Vo,h8),e(h8,eZo),e(h8,P_e),e(P_e,oZo),e(h8,rZo),e(Vo,tZo),e(Vo,Ft),M(p8,Ft,null),e(Ft,aZo),e(Ft,B_e),e(B_e,nZo),e(Ft,sZo),e(Ft,bd),e(bd,lZo),e(bd,I_e),e(I_e,iZo),e(bd,dZo),e(bd,zX),e(zX,cZo),e(bd,fZo),e(Ft,mZo),M(GF,Ft,null),e(Vo,gZo),e(Vo,mo),M(_8,mo,null),e(mo,hZo),e(mo,q_e),e(q_e,pZo),e(mo,_Zo),e(mo,Xa),e(Xa,uZo),e(Xa,N_e),e(N_e,bZo),e(Xa,vZo),e(Xa,j_e),e(j_e,FZo),e(Xa,TZo),e(Xa,D_e),e(D_e,MZo),e(Xa,EZo),e(mo,CZo),e(mo,Se),e(Se,OF),e(OF,G_e),e(G_e,wZo),e(OF,AZo),e(OF,WX),e(WX,yZo),e(OF,LZo),e(Se,xZo),e(Se,VF),e(VF,O_e),e(O_e,$Zo),e(VF,kZo),e(VF,QX),e(QX,SZo),e(VF,RZo),e(Se,PZo),e(Se,XF),e(XF,V_e),e(V_e,BZo),e(XF,IZo),e(XF,HX),e(HX,qZo),e(XF,NZo),e(Se,jZo),e(Se,zF),e(zF,X_e),e(X_e,DZo),e(zF,GZo),e(zF,UX),e(UX,OZo),e(zF,VZo),e(Se,XZo),e(Se,WF),e(WF,z_e),e(z_e,zZo),e(WF,WZo),e(WF,JX),e(JX,QZo),e(WF,HZo),e(Se,UZo),e(Se,QF),e(QF,W_e),e(W_e,JZo),e(QF,YZo),e(QF,YX),e(YX,KZo),e(QF,ZZo),e(Se,eer),e(Se,HF),e(HF,Q_e),e(Q_e,oer),e(HF,rer),e(HF,KX),e(KX,ter),e(HF,aer),e(Se,ner),e(Se,UF),e(UF,H_e),e(H_e,ser),e(UF,ler),e(UF,ZX),e(ZX,ier),e(UF,der),e(Se,cer),e(Se,JF),e(JF,U_e),e(U_e,fer),e(JF,mer),e(JF,ez),e(ez,ger),e(JF,her),e(mo,per),e(mo,YF),e(YF,_er),e(YF,J_e),e(J_e,uer),e(YF,ber),e(YF,Y_e),e(Y_e,ver),e(mo,Fer),M(KF,mo,null),b(f,cNe,u),b(f,vd,u),e(vd,ZF),e(ZF,K_e),M(u8,K_e,null),e(vd,Ter),e(vd,Z_e),e(Z_e,Mer),b(f,fNe,u),b(f,Xo,u),M(b8,Xo,null),e(Xo,Eer),e(Xo,Fd),e(Fd,Cer),e(Fd,oz),e(oz,wer),e(Fd,Aer),e(Fd,rz),e(rz,yer),e(Fd,Ler),e(Xo,xer),e(Xo,v8),e(v8,$er),e(v8,eue),e(eue,ker),e(v8,Ser),e(Xo,Rer),e(Xo,Tt),M(F8,Tt,null),e(Tt,Per),e(Tt,oue),e(oue,Ber),e(Tt,Ier),e(Tt,Td),e(Td,qer),e(Td,rue),e(rue,Ner),e(Td,jer),e(Td,tz),e(tz,Der),e(Td,Ger),e(Tt,Oer),M(e0,Tt,null),e(Xo,Ver),e(Xo,go),M(T8,go,null),e(go,Xer),e(go,tue),e(tue,zer),e(go,Wer),e(go,za),e(za,Qer),e(za,aue),e(aue,Her),e(za,Uer),e(za,nue),e(nue,Jer),e(za,Yer),e(za,sue),e(sue,Ker),e(za,Zer),e(go,eor),e(go,M8),e(M8,o0),e(o0,lue),e(lue,oor),e(o0,ror),e(o0,az),e(az,tor),e(o0,aor),e(M8,nor),e(M8,r0),e(r0,iue),e(iue,sor),e(r0,lor),e(r0,nz),e(nz,ior),e(r0,dor),e(go,cor),e(go,t0),e(t0,mor),e(t0,due),e(due,gor),e(t0,hor),e(t0,cue),e(cue,por),e(go,_or),M(a0,go,null),b(f,mNe,u),b(f,Md,u),e(Md,n0),e(n0,fue),M(E8,fue,null),e(Md,uor),e(Md,mue),e(mue,bor),b(f,gNe,u),b(f,zo,u),M(C8,zo,null),e(zo,vor),e(zo,Ed),e(Ed,For),e(Ed,sz),e(sz,Tor),e(Ed,Mor),e(Ed,lz),e(lz,Eor),e(Ed,Cor),e(zo,wor),e(zo,w8),e(w8,Aor),e(w8,gue),e(gue,yor),e(w8,Lor),e(zo,xor),e(zo,Mt),M(A8,Mt,null),e(Mt,$or),e(Mt,hue),e(hue,kor),e(Mt,Sor),e(Mt,Cd),e(Cd,Ror),e(Cd,pue),e(pue,Por),e(Cd,Bor),e(Cd,iz),e(iz,Ior),e(Cd,qor),e(Mt,Nor),M(s0,Mt,null),e(zo,jor),e(zo,ho),M(y8,ho,null),e(ho,Dor),e(ho,_ue),e(_ue,Gor),e(ho,Oor),e(ho,Wa),e(Wa,Vor),e(Wa,uue),e(uue,Xor),e(Wa,zor),e(Wa,bue),e(bue,Wor),e(Wa,Qor),e(Wa,vue),e(vue,Hor),e(Wa,Uor),e(ho,Jor),e(ho,Zr),e(Zr,l0),e(l0,Fue),e(Fue,Yor),e(l0,Kor),e(l0,dz),e(dz,Zor),e(l0,err),e(Zr,orr),e(Zr,i0),e(i0,Tue),e(Tue,rrr),e(i0,trr),e(i0,cz),e(cz,arr),e(i0,nrr),e(Zr,srr),e(Zr,d0),e(d0,Mue),e(Mue,lrr),e(d0,irr),e(d0,fz),e(fz,drr),e(d0,crr),e(Zr,frr),e(Zr,c0),e(c0,Eue),e(Eue,mrr),e(c0,grr),e(c0,mz),e(mz,hrr),e(c0,prr),e(Zr,_rr),e(Zr,f0),e(f0,Cue),e(Cue,urr),e(f0,brr),e(f0,gz),e(gz,vrr),e(f0,Frr),e(ho,Trr),e(ho,m0),e(m0,Mrr),e(m0,wue),e(wue,Err),e(m0,Crr),e(m0,Aue),e(Aue,wrr),e(ho,Arr),M(g0,ho,null),b(f,hNe,u),b(f,wd,u),e(wd,h0),e(h0,yue),M(L8,yue,null),e(wd,yrr),e(wd,Lue),e(Lue,Lrr),b(f,pNe,u),b(f,Wo,u),M(x8,Wo,null),e(Wo,xrr),e(Wo,Ad),e(Ad,$rr),e(Ad,hz),e(hz,krr),e(Ad,Srr),e(Ad,pz),e(pz,Rrr),e(Ad,Prr),e(Wo,Brr),e(Wo,$8),e($8,Irr),e($8,xue),e(xue,qrr),e($8,Nrr),e(Wo,jrr),e(Wo,Et),M(k8,Et,null),e(Et,Drr),e(Et,$ue),e($ue,Grr),e(Et,Orr),e(Et,yd),e(yd,Vrr),e(yd,kue),e(kue,Xrr),e(yd,zrr),e(yd,_z),e(_z,Wrr),e(yd,Qrr),e(Et,Hrr),M(p0,Et,null),e(Wo,Urr),e(Wo,po),M(S8,po,null),e(po,Jrr),e(po,Sue),e(Sue,Yrr),e(po,Krr),e(po,Qa),e(Qa,Zrr),e(Qa,Rue),e(Rue,etr),e(Qa,otr),e(Qa,Pue),e(Pue,rtr),e(Qa,ttr),e(Qa,Bue),e(Bue,atr),e(Qa,ntr),e(po,str),e(po,Ld),e(Ld,_0),e(_0,Iue),e(Iue,ltr),e(_0,itr),e(_0,uz),e(uz,dtr),e(_0,ctr),e(Ld,ftr),e(Ld,u0),e(u0,que),e(que,mtr),e(u0,gtr),e(u0,bz),e(bz,htr),e(u0,ptr),e(Ld,_tr),e(Ld,b0),e(b0,Nue),e(Nue,utr),e(b0,btr),e(b0,vz),e(vz,vtr),e(b0,Ftr),e(po,Ttr),e(po,v0),e(v0,Mtr),e(v0,jue),e(jue,Etr),e(v0,Ctr),e(v0,Due),e(Due,wtr),e(po,Atr),M(F0,po,null),b(f,_Ne,u),b(f,xd,u),e(xd,T0),e(T0,Gue),M(R8,Gue,null),e(xd,ytr),e(xd,Oue),e(Oue,Ltr),b(f,uNe,u),b(f,Qo,u),M(P8,Qo,null),e(Qo,xtr),e(Qo,$d),e($d,$tr),e($d,Fz),e(Fz,ktr),e($d,Str),e($d,Tz),e(Tz,Rtr),e($d,Ptr),e(Qo,Btr),e(Qo,B8),e(B8,Itr),e(B8,Vue),e(Vue,qtr),e(B8,Ntr),e(Qo,jtr),e(Qo,Ct),M(I8,Ct,null),e(Ct,Dtr),e(Ct,Xue),e(Xue,Gtr),e(Ct,Otr),e(Ct,kd),e(kd,Vtr),e(kd,zue),e(zue,Xtr),e(kd,ztr),e(kd,Mz),e(Mz,Wtr),e(kd,Qtr),e(Ct,Htr),M(M0,Ct,null),e(Qo,Utr),e(Qo,_o),M(q8,_o,null),e(_o,Jtr),e(_o,Wue),e(Wue,Ytr),e(_o,Ktr),e(_o,Ha),e(Ha,Ztr),e(Ha,Que),e(Que,ear),e(Ha,oar),e(Ha,Hue),e(Hue,rar),e(Ha,tar),e(Ha,Uue),e(Uue,aar),e(Ha,nar),e(_o,sar),e(_o,N8),e(N8,E0),e(E0,Jue),e(Jue,lar),e(E0,iar),e(E0,Ez),e(Ez,dar),e(E0,car),e(N8,far),e(N8,C0),e(C0,Yue),e(Yue,mar),e(C0,gar),e(C0,Cz),e(Cz,har),e(C0,par),e(_o,_ar),e(_o,w0),e(w0,uar),e(w0,Kue),e(Kue,bar),e(w0,Far),e(w0,Zue),e(Zue,Tar),e(_o,Mar),M(A0,_o,null),b(f,bNe,u),b(f,Sd,u),e(Sd,y0),e(y0,e2e),M(j8,e2e,null),e(Sd,Ear),e(Sd,o2e),e(o2e,Car),b(f,vNe,u),b(f,Ho,u),M(D8,Ho,null),e(Ho,war),e(Ho,Rd),e(Rd,Aar),e(Rd,wz),e(wz,yar),e(Rd,Lar),e(Rd,Az),e(Az,xar),e(Rd,$ar),e(Ho,kar),e(Ho,G8),e(G8,Sar),e(G8,r2e),e(r2e,Rar),e(G8,Par),e(Ho,Bar),e(Ho,wt),M(O8,wt,null),e(wt,Iar),e(wt,t2e),e(t2e,qar),e(wt,Nar),e(wt,Pd),e(Pd,jar),e(Pd,a2e),e(a2e,Dar),e(Pd,Gar),e(Pd,yz),e(yz,Oar),e(Pd,Var),e(wt,Xar),M(L0,wt,null),e(Ho,zar),e(Ho,uo),M(V8,uo,null),e(uo,War),e(uo,n2e),e(n2e,Qar),e(uo,Har),e(uo,Ua),e(Ua,Uar),e(Ua,s2e),e(s2e,Jar),e(Ua,Yar),e(Ua,l2e),e(l2e,Kar),e(Ua,Zar),e(Ua,i2e),e(i2e,enr),e(Ua,onr),e(uo,rnr),e(uo,d2e),e(d2e,x0),e(x0,c2e),e(c2e,tnr),e(x0,anr),e(x0,Lz),e(Lz,nnr),e(x0,snr),e(uo,lnr),e(uo,$0),e($0,inr),e($0,f2e),e(f2e,dnr),e($0,cnr),e($0,m2e),e(m2e,fnr),e(uo,mnr),M(k0,uo,null),b(f,FNe,u),b(f,Bd,u),e(Bd,S0),e(S0,g2e),M(X8,g2e,null),e(Bd,gnr),e(Bd,h2e),e(h2e,hnr),b(f,TNe,u),b(f,Uo,u),M(z8,Uo,null),e(Uo,pnr),e(Uo,Id),e(Id,_nr),e(Id,xz),e(xz,unr),e(Id,bnr),e(Id,$z),e($z,vnr),e(Id,Fnr),e(Uo,Tnr),e(Uo,W8),e(W8,Mnr),e(W8,p2e),e(p2e,Enr),e(W8,Cnr),e(Uo,wnr),e(Uo,At),M(Q8,At,null),e(At,Anr),e(At,_2e),e(_2e,ynr),e(At,Lnr),e(At,qd),e(qd,xnr),e(qd,u2e),e(u2e,$nr),e(qd,knr),e(qd,kz),e(kz,Snr),e(qd,Rnr),e(At,Pnr),M(R0,At,null),e(Uo,Bnr),e(Uo,bo),M(H8,bo,null),e(bo,Inr),e(bo,b2e),e(b2e,qnr),e(bo,Nnr),e(bo,Ja),e(Ja,jnr),e(Ja,v2e),e(v2e,Dnr),e(Ja,Gnr),e(Ja,F2e),e(F2e,Onr),e(Ja,Vnr),e(Ja,T2e),e(T2e,Xnr),e(Ja,znr),e(bo,Wnr),e(bo,et),e(et,P0),e(P0,M2e),e(M2e,Qnr),e(P0,Hnr),e(P0,Sz),e(Sz,Unr),e(P0,Jnr),e(et,Ynr),e(et,B0),e(B0,E2e),e(E2e,Knr),e(B0,Znr),e(B0,Rz),e(Rz,esr),e(B0,osr),e(et,rsr),e(et,I0),e(I0,C2e),e(C2e,tsr),e(I0,asr),e(I0,Pz),e(Pz,nsr),e(I0,ssr),e(et,lsr),e(et,q0),e(q0,w2e),e(w2e,isr),e(q0,dsr),e(q0,Bz),e(Bz,csr),e(q0,fsr),e(et,msr),e(et,N0),e(N0,A2e),e(A2e,gsr),e(N0,hsr),e(N0,Iz),e(Iz,psr),e(N0,_sr),e(bo,usr),e(bo,j0),e(j0,bsr),e(j0,y2e),e(y2e,vsr),e(j0,Fsr),e(j0,L2e),e(L2e,Tsr),e(bo,Msr),M(D0,bo,null),b(f,MNe,u),b(f,Nd,u),e(Nd,G0),e(G0,x2e),M(U8,x2e,null),e(Nd,Esr),e(Nd,$2e),e($2e,Csr),b(f,ENe,u),b(f,Jo,u),M(J8,Jo,null),e(Jo,wsr),e(Jo,jd),e(jd,Asr),e(jd,qz),e(qz,ysr),e(jd,Lsr),e(jd,Nz),e(Nz,xsr),e(jd,$sr),e(Jo,ksr),e(Jo,Y8),e(Y8,Ssr),e(Y8,k2e),e(k2e,Rsr),e(Y8,Psr),e(Jo,Bsr),e(Jo,yt),M(K8,yt,null),e(yt,Isr),e(yt,S2e),e(S2e,qsr),e(yt,Nsr),e(yt,Dd),e(Dd,jsr),e(Dd,R2e),e(R2e,Dsr),e(Dd,Gsr),e(Dd,jz),e(jz,Osr),e(Dd,Vsr),e(yt,Xsr),M(O0,yt,null),e(Jo,zsr),e(Jo,vo),M(Z8,vo,null),e(vo,Wsr),e(vo,P2e),e(P2e,Qsr),e(vo,Hsr),e(vo,Ya),e(Ya,Usr),e(Ya,B2e),e(B2e,Jsr),e(Ya,Ysr),e(Ya,I2e),e(I2e,Ksr),e(Ya,Zsr),e(Ya,q2e),e(q2e,elr),e(Ya,olr),e(vo,rlr),e(vo,N2e),e(N2e,V0),e(V0,j2e),e(j2e,tlr),e(V0,alr),e(V0,Dz),e(Dz,nlr),e(V0,slr),e(vo,llr),e(vo,X0),e(X0,ilr),e(X0,D2e),e(D2e,dlr),e(X0,clr),e(X0,G2e),e(G2e,flr),e(vo,mlr),M(z0,vo,null),b(f,CNe,u),b(f,Gd,u),e(Gd,W0),e(W0,O2e),M(eL,O2e,null),e(Gd,glr),e(Gd,V2e),e(V2e,hlr),b(f,wNe,u),b(f,Yo,u),M(oL,Yo,null),e(Yo,plr),e(Yo,Od),e(Od,_lr),e(Od,Gz),e(Gz,ulr),e(Od,blr),e(Od,Oz),e(Oz,vlr),e(Od,Flr),e(Yo,Tlr),e(Yo,rL),e(rL,Mlr),e(rL,X2e),e(X2e,Elr),e(rL,Clr),e(Yo,wlr),e(Yo,Lt),M(tL,Lt,null),e(Lt,Alr),e(Lt,z2e),e(z2e,ylr),e(Lt,Llr),e(Lt,Vd),e(Vd,xlr),e(Vd,W2e),e(W2e,$lr),e(Vd,klr),e(Vd,Vz),e(Vz,Slr),e(Vd,Rlr),e(Lt,Plr),M(Q0,Lt,null),e(Yo,Blr),e(Yo,wr),M(aL,wr,null),e(wr,Ilr),e(wr,Q2e),e(Q2e,qlr),e(wr,Nlr),e(wr,Ka),e(Ka,jlr),e(Ka,H2e),e(H2e,Dlr),e(Ka,Glr),e(Ka,U2e),e(U2e,Olr),e(Ka,Vlr),e(Ka,J2e),e(J2e,Xlr),e(Ka,zlr),e(wr,Wlr),e(wr,N),e(N,H0),e(H0,Y2e),e(Y2e,Qlr),e(H0,Hlr),e(H0,Xz),e(Xz,Ulr),e(H0,Jlr),e(N,Ylr),e(N,U0),e(U0,K2e),e(K2e,Klr),e(U0,Zlr),e(U0,zz),e(zz,eir),e(U0,oir),e(N,rir),e(N,J0),e(J0,Z2e),e(Z2e,tir),e(J0,air),e(J0,Wz),e(Wz,nir),e(J0,sir),e(N,lir),e(N,Y0),e(Y0,e1e),e(e1e,iir),e(Y0,dir),e(Y0,Qz),e(Qz,cir),e(Y0,fir),e(N,mir),e(N,K0),e(K0,o1e),e(o1e,gir),e(K0,hir),e(K0,Hz),e(Hz,pir),e(K0,_ir),e(N,uir),e(N,Z0),e(Z0,r1e),e(r1e,bir),e(Z0,vir),e(Z0,Uz),e(Uz,Fir),e(Z0,Tir),e(N,Mir),e(N,eT),e(eT,t1e),e(t1e,Eir),e(eT,Cir),e(eT,Jz),e(Jz,wir),e(eT,Air),e(N,yir),e(N,oT),e(oT,a1e),e(a1e,Lir),e(oT,xir),e(oT,Yz),e(Yz,$ir),e(oT,kir),e(N,Sir),e(N,rT),e(rT,n1e),e(n1e,Rir),e(rT,Pir),e(rT,Kz),e(Kz,Bir),e(rT,Iir),e(N,qir),e(N,tT),e(tT,s1e),e(s1e,Nir),e(tT,jir),e(tT,Zz),e(Zz,Dir),e(tT,Gir),e(N,Oir),e(N,aT),e(aT,l1e),e(l1e,Vir),e(aT,Xir),e(aT,eW),e(eW,zir),e(aT,Wir),e(N,Qir),e(N,nT),e(nT,i1e),e(i1e,Hir),e(nT,Uir),e(nT,oW),e(oW,Jir),e(nT,Yir),e(N,Kir),e(N,sT),e(sT,d1e),e(d1e,Zir),e(sT,edr),e(sT,rW),e(rW,odr),e(sT,rdr),e(N,tdr),e(N,lT),e(lT,c1e),e(c1e,adr),e(lT,ndr),e(lT,tW),e(tW,sdr),e(lT,ldr),e(N,idr),e(N,iT),e(iT,f1e),e(f1e,ddr),e(iT,cdr),e(iT,aW),e(aW,fdr),e(iT,mdr),e(N,gdr),e(N,dT),e(dT,m1e),e(m1e,hdr),e(dT,pdr),e(dT,nW),e(nW,_dr),e(dT,udr),e(N,bdr),e(N,cT),e(cT,g1e),e(g1e,vdr),e(cT,Fdr),e(cT,sW),e(sW,Tdr),e(cT,Mdr),e(N,Edr),e(N,Bs),e(Bs,h1e),e(h1e,Cdr),e(Bs,wdr),e(Bs,lW),e(lW,Adr),e(Bs,ydr),e(Bs,iW),e(iW,Ldr),e(Bs,xdr),e(N,$dr),e(N,fT),e(fT,p1e),e(p1e,kdr),e(fT,Sdr),e(fT,dW),e(dW,Rdr),e(fT,Pdr),e(N,Bdr),e(N,mT),e(mT,_1e),e(_1e,Idr),e(mT,qdr),e(mT,cW),e(cW,Ndr),e(mT,jdr),e(N,Ddr),e(N,gT),e(gT,u1e),e(u1e,Gdr),e(gT,Odr),e(gT,fW),e(fW,Vdr),e(gT,Xdr),e(N,zdr),e(N,hT),e(hT,b1e),e(b1e,Wdr),e(hT,Qdr),e(hT,mW),e(mW,Hdr),e(hT,Udr),e(N,Jdr),e(N,pT),e(pT,v1e),e(v1e,Ydr),e(pT,Kdr),e(pT,gW),e(gW,Zdr),e(pT,ecr),e(N,ocr),e(N,_T),e(_T,F1e),e(F1e,rcr),e(_T,tcr),e(_T,hW),e(hW,acr),e(_T,ncr),e(N,scr),e(N,uT),e(uT,T1e),e(T1e,lcr),e(uT,icr),e(uT,pW),e(pW,dcr),e(uT,ccr),e(N,fcr),e(N,bT),e(bT,M1e),e(M1e,mcr),e(bT,gcr),e(bT,_W),e(_W,hcr),e(bT,pcr),e(N,_cr),e(N,vT),e(vT,E1e),e(E1e,ucr),e(vT,bcr),e(vT,uW),e(uW,vcr),e(vT,Fcr),e(N,Tcr),e(N,FT),e(FT,C1e),e(C1e,Mcr),e(FT,Ecr),e(FT,bW),e(bW,Ccr),e(FT,wcr),e(N,Acr),e(N,TT),e(TT,w1e),e(w1e,ycr),e(TT,Lcr),e(TT,vW),e(vW,xcr),e(TT,$cr),e(N,kcr),e(N,MT),e(MT,A1e),e(A1e,Scr),e(MT,Rcr),e(MT,FW),e(FW,Pcr),e(MT,Bcr),e(N,Icr),e(N,ET),e(ET,y1e),e(y1e,qcr),e(ET,Ncr),e(ET,TW),e(TW,jcr),e(ET,Dcr),e(N,Gcr),e(N,CT),e(CT,L1e),e(L1e,Ocr),e(CT,Vcr),e(CT,MW),e(MW,Xcr),e(CT,zcr),e(N,Wcr),e(N,wT),e(wT,x1e),e(x1e,Qcr),e(wT,Hcr),e(wT,EW),e(EW,Ucr),e(wT,Jcr),e(N,Ycr),e(N,AT),e(AT,$1e),e($1e,Kcr),e(AT,Zcr),e(AT,CW),e(CW,efr),e(AT,ofr),e(N,rfr),e(N,yT),e(yT,k1e),e(k1e,tfr),e(yT,afr),e(yT,wW),e(wW,nfr),e(yT,sfr),e(N,lfr),e(N,LT),e(LT,S1e),e(S1e,ifr),e(LT,dfr),e(LT,AW),e(AW,cfr),e(LT,ffr),e(N,mfr),e(N,xT),e(xT,R1e),e(R1e,gfr),e(xT,hfr),e(xT,yW),e(yW,pfr),e(xT,_fr),e(N,ufr),e(N,$T),e($T,P1e),e(P1e,bfr),e($T,vfr),e($T,LW),e(LW,Ffr),e($T,Tfr),e(N,Mfr),e(N,kT),e(kT,B1e),e(B1e,Efr),e(kT,Cfr),e(kT,xW),e(xW,wfr),e(kT,Afr),e(N,yfr),e(N,ST),e(ST,I1e),e(I1e,Lfr),e(ST,xfr),e(ST,$W),e($W,$fr),e(ST,kfr),e(N,Sfr),e(N,RT),e(RT,q1e),e(q1e,Rfr),e(RT,Pfr),e(RT,kW),e(kW,Bfr),e(RT,Ifr),e(N,qfr),e(N,PT),e(PT,N1e),e(N1e,Nfr),e(PT,jfr),e(PT,SW),e(SW,Dfr),e(PT,Gfr),e(N,Ofr),e(N,BT),e(BT,j1e),e(j1e,Vfr),e(BT,Xfr),e(BT,RW),e(RW,zfr),e(BT,Wfr),e(N,Qfr),e(N,IT),e(IT,D1e),e(D1e,Hfr),e(IT,Ufr),e(IT,PW),e(PW,Jfr),e(IT,Yfr),e(N,Kfr),e(N,qT),e(qT,G1e),e(G1e,Zfr),e(qT,emr),e(qT,BW),e(BW,omr),e(qT,rmr),e(N,tmr),e(N,NT),e(NT,O1e),e(O1e,amr),e(NT,nmr),e(NT,IW),e(IW,smr),e(NT,lmr),e(wr,imr),M(jT,wr,null),b(f,ANe,u),b(f,Xd,u),e(Xd,DT),e(DT,V1e),M(nL,V1e,null),e(Xd,dmr),e(Xd,X1e),e(X1e,cmr),b(f,yNe,u),b(f,Ko,u),M(sL,Ko,null),e(Ko,fmr),e(Ko,zd),e(zd,mmr),e(zd,qW),e(qW,gmr),e(zd,hmr),e(zd,NW),e(NW,pmr),e(zd,_mr),e(Ko,umr),e(Ko,lL),e(lL,bmr),e(lL,z1e),e(z1e,vmr),e(lL,Fmr),e(Ko,Tmr),e(Ko,xt),M(iL,xt,null),e(xt,Mmr),e(xt,W1e),e(W1e,Emr),e(xt,Cmr),e(xt,Wd),e(Wd,wmr),e(Wd,Q1e),e(Q1e,Amr),e(Wd,ymr),e(Wd,jW),e(jW,Lmr),e(Wd,xmr),e(xt,$mr),M(GT,xt,null),e(Ko,kmr),e(Ko,Ar),M(dL,Ar,null),e(Ar,Smr),e(Ar,H1e),e(H1e,Rmr),e(Ar,Pmr),e(Ar,Za),e(Za,Bmr),e(Za,U1e),e(U1e,Imr),e(Za,qmr),e(Za,J1e),e(J1e,Nmr),e(Za,jmr),e(Za,Y1e),e(Y1e,Dmr),e(Za,Gmr),e(Ar,Omr),e(Ar,se),e(se,OT),e(OT,K1e),e(K1e,Vmr),e(OT,Xmr),e(OT,DW),e(DW,zmr),e(OT,Wmr),e(se,Qmr),e(se,VT),e(VT,Z1e),e(Z1e,Hmr),e(VT,Umr),e(VT,GW),e(GW,Jmr),e(VT,Ymr),e(se,Kmr),e(se,XT),e(XT,ebe),e(ebe,Zmr),e(XT,egr),e(XT,OW),e(OW,ogr),e(XT,rgr),e(se,tgr),e(se,zT),e(zT,obe),e(obe,agr),e(zT,ngr),e(zT,VW),e(VW,sgr),e(zT,lgr),e(se,igr),e(se,WT),e(WT,rbe),e(rbe,dgr),e(WT,cgr),e(WT,XW),e(XW,fgr),e(WT,mgr),e(se,ggr),e(se,QT),e(QT,tbe),e(tbe,hgr),e(QT,pgr),e(QT,zW),e(zW,_gr),e(QT,ugr),e(se,bgr),e(se,HT),e(HT,abe),e(abe,vgr),e(HT,Fgr),e(HT,WW),e(WW,Tgr),e(HT,Mgr),e(se,Egr),e(se,UT),e(UT,nbe),e(nbe,Cgr),e(UT,wgr),e(UT,QW),e(QW,Agr),e(UT,ygr),e(se,Lgr),e(se,JT),e(JT,sbe),e(sbe,xgr),e(JT,$gr),e(JT,HW),e(HW,kgr),e(JT,Sgr),e(se,Rgr),e(se,YT),e(YT,lbe),e(lbe,Pgr),e(YT,Bgr),e(YT,UW),e(UW,Igr),e(YT,qgr),e(se,Ngr),e(se,KT),e(KT,ibe),e(ibe,jgr),e(KT,Dgr),e(KT,JW),e(JW,Ggr),e(KT,Ogr),e(se,Vgr),e(se,ZT),e(ZT,dbe),e(dbe,Xgr),e(ZT,zgr),e(ZT,YW),e(YW,Wgr),e(ZT,Qgr),e(se,Hgr),e(se,e7),e(e7,cbe),e(cbe,Ugr),e(e7,Jgr),e(e7,KW),e(KW,Ygr),e(e7,Kgr),e(se,Zgr),e(se,o7),e(o7,fbe),e(fbe,ehr),e(o7,ohr),e(o7,ZW),e(ZW,rhr),e(o7,thr),e(se,ahr),e(se,r7),e(r7,mbe),e(mbe,nhr),e(r7,shr),e(r7,eQ),e(eQ,lhr),e(r7,ihr),e(se,dhr),e(se,t7),e(t7,gbe),e(gbe,chr),e(t7,fhr),e(t7,oQ),e(oQ,mhr),e(t7,ghr),e(se,hhr),e(se,a7),e(a7,hbe),e(hbe,phr),e(a7,_hr),e(a7,rQ),e(rQ,uhr),e(a7,bhr),e(se,vhr),e(se,n7),e(n7,pbe),e(pbe,Fhr),e(n7,Thr),e(n7,tQ),e(tQ,Mhr),e(n7,Ehr),e(se,Chr),e(se,s7),e(s7,_be),e(_be,whr),e(s7,Ahr),e(s7,aQ),e(aQ,yhr),e(s7,Lhr),e(se,xhr),e(se,l7),e(l7,ube),e(ube,$hr),e(l7,khr),e(l7,nQ),e(nQ,Shr),e(l7,Rhr),e(se,Phr),e(se,i7),e(i7,bbe),e(bbe,Bhr),e(i7,Ihr),e(i7,sQ),e(sQ,qhr),e(i7,Nhr),e(se,jhr),e(se,d7),e(d7,vbe),e(vbe,Dhr),e(d7,Ghr),e(d7,lQ),e(lQ,Ohr),e(d7,Vhr),e(se,Xhr),e(se,c7),e(c7,Fbe),e(Fbe,zhr),e(c7,Whr),e(c7,iQ),e(iQ,Qhr),e(c7,Hhr),e(Ar,Uhr),M(f7,Ar,null),b(f,LNe,u),b(f,Qd,u),e(Qd,m7),e(m7,Tbe),M(cL,Tbe,null),e(Qd,Jhr),e(Qd,Mbe),e(Mbe,Yhr),b(f,xNe,u),b(f,Zo,u),M(fL,Zo,null),e(Zo,Khr),e(Zo,Hd),e(Hd,Zhr),e(Hd,dQ),e(dQ,epr),e(Hd,opr),e(Hd,cQ),e(cQ,rpr),e(Hd,tpr),e(Zo,apr),e(Zo,mL),e(mL,npr),e(mL,Ebe),e(Ebe,spr),e(mL,lpr),e(Zo,ipr),e(Zo,$t),M(gL,$t,null),e($t,dpr),e($t,Cbe),e(Cbe,cpr),e($t,fpr),e($t,Ud),e(Ud,mpr),e(Ud,wbe),e(wbe,gpr),e(Ud,hpr),e(Ud,fQ),e(fQ,ppr),e(Ud,_pr),e($t,upr),M(g7,$t,null),e(Zo,bpr),e(Zo,yr),M(hL,yr,null),e(yr,vpr),e(yr,Abe),e(Abe,Fpr),e(yr,Tpr),e(yr,en),e(en,Mpr),e(en,ybe),e(ybe,Epr),e(en,Cpr),e(en,Lbe),e(Lbe,wpr),e(en,Apr),e(en,xbe),e(xbe,ypr),e(en,Lpr),e(yr,xpr),e(yr,Me),e(Me,h7),e(h7,$be),e($be,$pr),e(h7,kpr),e(h7,mQ),e(mQ,Spr),e(h7,Rpr),e(Me,Ppr),e(Me,p7),e(p7,kbe),e(kbe,Bpr),e(p7,Ipr),e(p7,gQ),e(gQ,qpr),e(p7,Npr),e(Me,jpr),e(Me,_7),e(_7,Sbe),e(Sbe,Dpr),e(_7,Gpr),e(_7,hQ),e(hQ,Opr),e(_7,Vpr),e(Me,Xpr),e(Me,u7),e(u7,Rbe),e(Rbe,zpr),e(u7,Wpr),e(u7,pQ),e(pQ,Qpr),e(u7,Hpr),e(Me,Upr),e(Me,b7),e(b7,Pbe),e(Pbe,Jpr),e(b7,Ypr),e(b7,_Q),e(_Q,Kpr),e(b7,Zpr),e(Me,e_r),e(Me,v7),e(v7,Bbe),e(Bbe,o_r),e(v7,r_r),e(v7,uQ),e(uQ,t_r),e(v7,a_r),e(Me,n_r),e(Me,F7),e(F7,Ibe),e(Ibe,s_r),e(F7,l_r),e(F7,bQ),e(bQ,i_r),e(F7,d_r),e(Me,c_r),e(Me,T7),e(T7,qbe),e(qbe,f_r),e(T7,m_r),e(T7,vQ),e(vQ,g_r),e(T7,h_r),e(Me,p_r),e(Me,M7),e(M7,Nbe),e(Nbe,__r),e(M7,u_r),e(M7,FQ),e(FQ,b_r),e(M7,v_r),e(Me,F_r),e(Me,E7),e(E7,jbe),e(jbe,T_r),e(E7,M_r),e(E7,TQ),e(TQ,E_r),e(E7,C_r),e(Me,w_r),e(Me,C7),e(C7,Dbe),e(Dbe,A_r),e(C7,y_r),e(C7,MQ),e(MQ,L_r),e(C7,x_r),e(Me,$_r),e(Me,w7),e(w7,Gbe),e(Gbe,k_r),e(w7,S_r),e(w7,EQ),e(EQ,R_r),e(w7,P_r),e(yr,B_r),M(A7,yr,null),b(f,$Ne,u),b(f,Jd,u),e(Jd,y7),e(y7,Obe),M(pL,Obe,null),e(Jd,I_r),e(Jd,Vbe),e(Vbe,q_r),b(f,kNe,u),b(f,er,u),M(_L,er,null),e(er,N_r),e(er,Yd),e(Yd,j_r),e(Yd,CQ),e(CQ,D_r),e(Yd,G_r),e(Yd,wQ),e(wQ,O_r),e(Yd,V_r),e(er,X_r),e(er,uL),e(uL,z_r),e(uL,Xbe),e(Xbe,W_r),e(uL,Q_r),e(er,H_r),e(er,kt),M(bL,kt,null),e(kt,U_r),e(kt,zbe),e(zbe,J_r),e(kt,Y_r),e(kt,Kd),e(Kd,K_r),e(Kd,Wbe),e(Wbe,Z_r),e(Kd,eur),e(Kd,AQ),e(AQ,our),e(Kd,rur),e(kt,tur),M(L7,kt,null),e(er,aur),e(er,Lr),M(vL,Lr,null),e(Lr,nur),e(Lr,Qbe),e(Qbe,sur),e(Lr,lur),e(Lr,on),e(on,iur),e(on,Hbe),e(Hbe,dur),e(on,cur),e(on,Ube),e(Ube,fur),e(on,mur),e(on,Jbe),e(Jbe,gur),e(on,hur),e(Lr,pur),e(Lr,rn),e(rn,x7),e(x7,Ybe),e(Ybe,_ur),e(x7,uur),e(x7,yQ),e(yQ,bur),e(x7,vur),e(rn,Fur),e(rn,$7),e($7,Kbe),e(Kbe,Tur),e($7,Mur),e($7,LQ),e(LQ,Eur),e($7,Cur),e(rn,wur),e(rn,k7),e(k7,Zbe),e(Zbe,Aur),e(k7,yur),e(k7,xQ),e(xQ,Lur),e(k7,xur),e(rn,$ur),e(rn,S7),e(S7,e5e),e(e5e,kur),e(S7,Sur),e(S7,$Q),e($Q,Rur),e(S7,Pur),e(Lr,Bur),M(R7,Lr,null),b(f,SNe,u),b(f,Zd,u),e(Zd,P7),e(P7,o5e),M(FL,o5e,null),e(Zd,Iur),e(Zd,r5e),e(r5e,qur),b(f,RNe,u),b(f,or,u),M(TL,or,null),e(or,Nur),e(or,ec),e(ec,jur),e(ec,kQ),e(kQ,Dur),e(ec,Gur),e(ec,SQ),e(SQ,Our),e(ec,Vur),e(or,Xur),e(or,ML),e(ML,zur),e(ML,t5e),e(t5e,Wur),e(ML,Qur),e(or,Hur),e(or,St),M(EL,St,null),e(St,Uur),e(St,a5e),e(a5e,Jur),e(St,Yur),e(St,oc),e(oc,Kur),e(oc,n5e),e(n5e,Zur),e(oc,e2r),e(oc,RQ),e(RQ,o2r),e(oc,r2r),e(St,t2r),M(B7,St,null),e(or,a2r),e(or,xr),M(CL,xr,null),e(xr,n2r),e(xr,s5e),e(s5e,s2r),e(xr,l2r),e(xr,tn),e(tn,i2r),e(tn,l5e),e(l5e,d2r),e(tn,c2r),e(tn,i5e),e(i5e,f2r),e(tn,m2r),e(tn,d5e),e(d5e,g2r),e(tn,h2r),e(xr,p2r),e(xr,ie),e(ie,I7),e(I7,c5e),e(c5e,_2r),e(I7,u2r),e(I7,PQ),e(PQ,b2r),e(I7,v2r),e(ie,F2r),e(ie,q7),e(q7,f5e),e(f5e,T2r),e(q7,M2r),e(q7,BQ),e(BQ,E2r),e(q7,C2r),e(ie,w2r),e(ie,N7),e(N7,m5e),e(m5e,A2r),e(N7,y2r),e(N7,IQ),e(IQ,L2r),e(N7,x2r),e(ie,$2r),e(ie,j7),e(j7,g5e),e(g5e,k2r),e(j7,S2r),e(j7,qQ),e(qQ,R2r),e(j7,P2r),e(ie,B2r),e(ie,D7),e(D7,h5e),e(h5e,I2r),e(D7,q2r),e(D7,NQ),e(NQ,N2r),e(D7,j2r),e(ie,D2r),e(ie,G7),e(G7,p5e),e(p5e,G2r),e(G7,O2r),e(G7,jQ),e(jQ,V2r),e(G7,X2r),e(ie,z2r),e(ie,O7),e(O7,_5e),e(_5e,W2r),e(O7,Q2r),e(O7,DQ),e(DQ,H2r),e(O7,U2r),e(ie,J2r),e(ie,V7),e(V7,u5e),e(u5e,Y2r),e(V7,K2r),e(V7,GQ),e(GQ,Z2r),e(V7,e1r),e(ie,o1r),e(ie,X7),e(X7,b5e),e(b5e,r1r),e(X7,t1r),e(X7,OQ),e(OQ,a1r),e(X7,n1r),e(ie,s1r),e(ie,z7),e(z7,v5e),e(v5e,l1r),e(z7,i1r),e(z7,VQ),e(VQ,d1r),e(z7,c1r),e(ie,f1r),e(ie,W7),e(W7,F5e),e(F5e,m1r),e(W7,g1r),e(W7,XQ),e(XQ,h1r),e(W7,p1r),e(ie,_1r),e(ie,Q7),e(Q7,T5e),e(T5e,u1r),e(Q7,b1r),e(Q7,zQ),e(zQ,v1r),e(Q7,F1r),e(ie,T1r),e(ie,H7),e(H7,M5e),e(M5e,M1r),e(H7,E1r),e(H7,WQ),e(WQ,C1r),e(H7,w1r),e(ie,A1r),e(ie,U7),e(U7,E5e),e(E5e,y1r),e(U7,L1r),e(U7,QQ),e(QQ,x1r),e(U7,$1r),e(ie,k1r),e(ie,J7),e(J7,C5e),e(C5e,S1r),e(J7,R1r),e(J7,HQ),e(HQ,P1r),e(J7,B1r),e(ie,I1r),e(ie,Y7),e(Y7,w5e),e(w5e,q1r),e(Y7,N1r),e(Y7,UQ),e(UQ,j1r),e(Y7,D1r),e(ie,G1r),e(ie,K7),e(K7,A5e),e(A5e,O1r),e(K7,V1r),e(K7,JQ),e(JQ,X1r),e(K7,z1r),e(ie,W1r),e(ie,Z7),e(Z7,y5e),e(y5e,Q1r),e(Z7,H1r),e(Z7,YQ),e(YQ,U1r),e(Z7,J1r),e(ie,Y1r),e(ie,eM),e(eM,L5e),e(L5e,K1r),e(eM,Z1r),e(eM,KQ),e(KQ,ebr),e(eM,obr),e(ie,rbr),e(ie,oM),e(oM,x5e),e(x5e,tbr),e(oM,abr),e(oM,ZQ),e(ZQ,nbr),e(oM,sbr),e(xr,lbr),M(rM,xr,null),b(f,PNe,u),b(f,rc,u),e(rc,tM),e(tM,$5e),M(wL,$5e,null),e(rc,ibr),e(rc,k5e),e(k5e,dbr),b(f,BNe,u),b(f,rr,u),M(AL,rr,null),e(rr,cbr),e(rr,tc),e(tc,fbr),e(tc,eH),e(eH,mbr),e(tc,gbr),e(tc,oH),e(oH,hbr),e(tc,pbr),e(rr,_br),e(rr,yL),e(yL,ubr),e(yL,S5e),e(S5e,bbr),e(yL,vbr),e(rr,Fbr),e(rr,Rt),M(LL,Rt,null),e(Rt,Tbr),e(Rt,R5e),e(R5e,Mbr),e(Rt,Ebr),e(Rt,ac),e(ac,Cbr),e(ac,P5e),e(P5e,wbr),e(ac,Abr),e(ac,rH),e(rH,ybr),e(ac,Lbr),e(Rt,xbr),M(aM,Rt,null),e(rr,$br),e(rr,$r),M(xL,$r,null),e($r,kbr),e($r,B5e),e(B5e,Sbr),e($r,Rbr),e($r,an),e(an,Pbr),e(an,I5e),e(I5e,Bbr),e(an,Ibr),e(an,q5e),e(q5e,qbr),e(an,Nbr),e(an,N5e),e(N5e,jbr),e(an,Dbr),e($r,Gbr),e($r,ye),e(ye,nM),e(nM,j5e),e(j5e,Obr),e(nM,Vbr),e(nM,tH),e(tH,Xbr),e(nM,zbr),e(ye,Wbr),e(ye,sM),e(sM,D5e),e(D5e,Qbr),e(sM,Hbr),e(sM,aH),e(aH,Ubr),e(sM,Jbr),e(ye,Ybr),e(ye,lM),e(lM,G5e),e(G5e,Kbr),e(lM,Zbr),e(lM,nH),e(nH,e5r),e(lM,o5r),e(ye,r5r),e(ye,iM),e(iM,O5e),e(O5e,t5r),e(iM,a5r),e(iM,sH),e(sH,n5r),e(iM,s5r),e(ye,l5r),e(ye,dM),e(dM,V5e),e(V5e,i5r),e(dM,d5r),e(dM,lH),e(lH,c5r),e(dM,f5r),e(ye,m5r),e(ye,cM),e(cM,X5e),e(X5e,g5r),e(cM,h5r),e(cM,iH),e(iH,p5r),e(cM,_5r),e(ye,u5r),e(ye,fM),e(fM,z5e),e(z5e,b5r),e(fM,v5r),e(fM,dH),e(dH,F5r),e(fM,T5r),e(ye,M5r),e(ye,mM),e(mM,W5e),e(W5e,E5r),e(mM,C5r),e(mM,cH),e(cH,w5r),e(mM,A5r),e(ye,y5r),e(ye,gM),e(gM,Q5e),e(Q5e,L5r),e(gM,x5r),e(gM,fH),e(fH,$5r),e(gM,k5r),e(ye,S5r),e(ye,hM),e(hM,H5e),e(H5e,R5r),e(hM,P5r),e(hM,mH),e(mH,B5r),e(hM,I5r),e($r,q5r),M(pM,$r,null),b(f,INe,u),b(f,nc,u),e(nc,_M),e(_M,U5e),M($L,U5e,null),e(nc,N5r),e(nc,J5e),e(J5e,j5r),b(f,qNe,u),b(f,tr,u),M(kL,tr,null),e(tr,D5r),e(tr,sc),e(sc,G5r),e(sc,gH),e(gH,O5r),e(sc,V5r),e(sc,hH),e(hH,X5r),e(sc,z5r),e(tr,W5r),e(tr,SL),e(SL,Q5r),e(SL,Y5e),e(Y5e,H5r),e(SL,U5r),e(tr,J5r),e(tr,Pt),M(RL,Pt,null),e(Pt,Y5r),e(Pt,K5e),e(K5e,K5r),e(Pt,Z5r),e(Pt,lc),e(lc,evr),e(lc,Z5e),e(Z5e,ovr),e(lc,rvr),e(lc,pH),e(pH,tvr),e(lc,avr),e(Pt,nvr),M(uM,Pt,null),e(tr,svr),e(tr,kr),M(PL,kr,null),e(kr,lvr),e(kr,eve),e(eve,ivr),e(kr,dvr),e(kr,nn),e(nn,cvr),e(nn,ove),e(ove,fvr),e(nn,mvr),e(nn,rve),e(rve,gvr),e(nn,hvr),e(nn,tve),e(tve,pvr),e(nn,_vr),e(kr,uvr),e(kr,oe),e(oe,bM),e(bM,ave),e(ave,bvr),e(bM,vvr),e(bM,_H),e(_H,Fvr),e(bM,Tvr),e(oe,Mvr),e(oe,vM),e(vM,nve),e(nve,Evr),e(vM,Cvr),e(vM,uH),e(uH,wvr),e(vM,Avr),e(oe,yvr),e(oe,FM),e(FM,sve),e(sve,Lvr),e(FM,xvr),e(FM,bH),e(bH,$vr),e(FM,kvr),e(oe,Svr),e(oe,TM),e(TM,lve),e(lve,Rvr),e(TM,Pvr),e(TM,vH),e(vH,Bvr),e(TM,Ivr),e(oe,qvr),e(oe,MM),e(MM,ive),e(ive,Nvr),e(MM,jvr),e(MM,FH),e(FH,Dvr),e(MM,Gvr),e(oe,Ovr),e(oe,EM),e(EM,dve),e(dve,Vvr),e(EM,Xvr),e(EM,TH),e(TH,zvr),e(EM,Wvr),e(oe,Qvr),e(oe,CM),e(CM,cve),e(cve,Hvr),e(CM,Uvr),e(CM,MH),e(MH,Jvr),e(CM,Yvr),e(oe,Kvr),e(oe,wM),e(wM,fve),e(fve,Zvr),e(wM,eFr),e(wM,EH),e(EH,oFr),e(wM,rFr),e(oe,tFr),e(oe,AM),e(AM,mve),e(mve,aFr),e(AM,nFr),e(AM,CH),e(CH,sFr),e(AM,lFr),e(oe,iFr),e(oe,yM),e(yM,gve),e(gve,dFr),e(yM,cFr),e(yM,wH),e(wH,fFr),e(yM,mFr),e(oe,gFr),e(oe,LM),e(LM,hve),e(hve,hFr),e(LM,pFr),e(LM,AH),e(AH,_Fr),e(LM,uFr),e(oe,bFr),e(oe,xM),e(xM,pve),e(pve,vFr),e(xM,FFr),e(xM,yH),e(yH,TFr),e(xM,MFr),e(oe,EFr),e(oe,$M),e($M,_ve),e(_ve,CFr),e($M,wFr),e($M,LH),e(LH,AFr),e($M,yFr),e(oe,LFr),e(oe,kM),e(kM,uve),e(uve,xFr),e(kM,$Fr),e(kM,xH),e(xH,kFr),e(kM,SFr),e(oe,RFr),e(oe,SM),e(SM,bve),e(bve,PFr),e(SM,BFr),e(SM,$H),e($H,IFr),e(SM,qFr),e(oe,NFr),e(oe,RM),e(RM,vve),e(vve,jFr),e(RM,DFr),e(RM,kH),e(kH,GFr),e(RM,OFr),e(oe,VFr),e(oe,PM),e(PM,Fve),e(Fve,XFr),e(PM,zFr),e(PM,SH),e(SH,WFr),e(PM,QFr),e(oe,HFr),e(oe,BM),e(BM,Tve),e(Tve,UFr),e(BM,JFr),e(BM,RH),e(RH,YFr),e(BM,KFr),e(oe,ZFr),e(oe,IM),e(IM,Mve),e(Mve,e0r),e(IM,o0r),e(IM,PH),e(PH,r0r),e(IM,t0r),e(oe,a0r),e(oe,qM),e(qM,Eve),e(Eve,n0r),e(qM,s0r),e(qM,BH),e(BH,l0r),e(qM,i0r),e(oe,d0r),e(oe,NM),e(NM,Cve),e(Cve,c0r),e(NM,f0r),e(NM,IH),e(IH,m0r),e(NM,g0r),e(oe,h0r),e(oe,jM),e(jM,wve),e(wve,p0r),e(jM,_0r),e(jM,qH),e(qH,u0r),e(jM,b0r),e(oe,v0r),e(oe,DM),e(DM,Ave),e(Ave,F0r),e(DM,T0r),e(DM,NH),e(NH,M0r),e(DM,E0r),e(oe,C0r),e(oe,GM),e(GM,yve),e(yve,w0r),e(GM,A0r),e(GM,jH),e(jH,y0r),e(GM,L0r),e(oe,x0r),e(oe,OM),e(OM,Lve),e(Lve,$0r),e(OM,k0r),e(OM,DH),e(DH,S0r),e(OM,R0r),e(oe,P0r),e(oe,VM),e(VM,xve),e(xve,B0r),e(VM,I0r),e(VM,GH),e(GH,q0r),e(VM,N0r),e(kr,j0r),M(XM,kr,null),b(f,NNe,u),b(f,ic,u),e(ic,zM),e(zM,$ve),M(BL,$ve,null),e(ic,D0r),e(ic,kve),e(kve,G0r),b(f,jNe,u),b(f,ar,u),M(IL,ar,null),e(ar,O0r),e(ar,dc),e(dc,V0r),e(dc,OH),e(OH,X0r),e(dc,z0r),e(dc,VH),e(VH,W0r),e(dc,Q0r),e(ar,H0r),e(ar,qL),e(qL,U0r),e(qL,Sve),e(Sve,J0r),e(qL,Y0r),e(ar,K0r),e(ar,Bt),M(NL,Bt,null),e(Bt,Z0r),e(Bt,Rve),e(Rve,eTr),e(Bt,oTr),e(Bt,cc),e(cc,rTr),e(cc,Pve),e(Pve,tTr),e(cc,aTr),e(cc,XH),e(XH,nTr),e(cc,sTr),e(Bt,lTr),M(WM,Bt,null),e(ar,iTr),e(ar,Sr),M(jL,Sr,null),e(Sr,dTr),e(Sr,Bve),e(Bve,cTr),e(Sr,fTr),e(Sr,sn),e(sn,mTr),e(sn,Ive),e(Ive,gTr),e(sn,hTr),e(sn,qve),e(qve,pTr),e(sn,_Tr),e(sn,Nve),e(Nve,uTr),e(sn,bTr),e(Sr,vTr),e(Sr,he),e(he,QM),e(QM,jve),e(jve,FTr),e(QM,TTr),e(QM,zH),e(zH,MTr),e(QM,ETr),e(he,CTr),e(he,HM),e(HM,Dve),e(Dve,wTr),e(HM,ATr),e(HM,WH),e(WH,yTr),e(HM,LTr),e(he,xTr),e(he,UM),e(UM,Gve),e(Gve,$Tr),e(UM,kTr),e(UM,QH),e(QH,STr),e(UM,RTr),e(he,PTr),e(he,JM),e(JM,Ove),e(Ove,BTr),e(JM,ITr),e(JM,HH),e(HH,qTr),e(JM,NTr),e(he,jTr),e(he,YM),e(YM,Vve),e(Vve,DTr),e(YM,GTr),e(YM,UH),e(UH,OTr),e(YM,VTr),e(he,XTr),e(he,KM),e(KM,Xve),e(Xve,zTr),e(KM,WTr),e(KM,JH),e(JH,QTr),e(KM,HTr),e(he,UTr),e(he,ZM),e(ZM,zve),e(zve,JTr),e(ZM,YTr),e(ZM,YH),e(YH,KTr),e(ZM,ZTr),e(he,e7r),e(he,e4),e(e4,Wve),e(Wve,o7r),e(e4,r7r),e(e4,KH),e(KH,t7r),e(e4,a7r),e(he,n7r),e(he,o4),e(o4,Qve),e(Qve,s7r),e(o4,l7r),e(o4,ZH),e(ZH,i7r),e(o4,d7r),e(he,c7r),e(he,r4),e(r4,Hve),e(Hve,f7r),e(r4,m7r),e(r4,eU),e(eU,g7r),e(r4,h7r),e(he,p7r),e(he,t4),e(t4,Uve),e(Uve,_7r),e(t4,u7r),e(t4,oU),e(oU,b7r),e(t4,v7r),e(he,F7r),e(he,a4),e(a4,Jve),e(Jve,T7r),e(a4,M7r),e(a4,rU),e(rU,E7r),e(a4,C7r),e(he,w7r),e(he,n4),e(n4,Yve),e(Yve,A7r),e(n4,y7r),e(n4,tU),e(tU,L7r),e(n4,x7r),e(he,$7r),e(he,s4),e(s4,Kve),e(Kve,k7r),e(s4,S7r),e(s4,aU),e(aU,R7r),e(s4,P7r),e(he,B7r),e(he,l4),e(l4,Zve),e(Zve,I7r),e(l4,q7r),e(l4,nU),e(nU,N7r),e(l4,j7r),e(he,D7r),e(he,i4),e(i4,eFe),e(eFe,G7r),e(i4,O7r),e(i4,sU),e(sU,V7r),e(i4,X7r),e(he,z7r),e(he,d4),e(d4,oFe),e(oFe,W7r),e(d4,Q7r),e(d4,lU),e(lU,H7r),e(d4,U7r),e(Sr,J7r),M(c4,Sr,null),b(f,DNe,u),b(f,fc,u),e(fc,f4),e(f4,rFe),M(DL,rFe,null),e(fc,Y7r),e(fc,tFe),e(tFe,K7r),b(f,GNe,u),b(f,nr,u),M(GL,nr,null),e(nr,Z7r),e(nr,mc),e(mc,eMr),e(mc,iU),e(iU,oMr),e(mc,rMr),e(mc,dU),e(dU,tMr),e(mc,aMr),e(nr,nMr),e(nr,OL),e(OL,sMr),e(OL,aFe),e(aFe,lMr),e(OL,iMr),e(nr,dMr),e(nr,It),M(VL,It,null),e(It,cMr),e(It,nFe),e(nFe,fMr),e(It,mMr),e(It,gc),e(gc,gMr),e(gc,sFe),e(sFe,hMr),e(gc,pMr),e(gc,cU),e(cU,_Mr),e(gc,uMr),e(It,bMr),M(m4,It,null),e(nr,vMr),e(nr,Rr),M(XL,Rr,null),e(Rr,FMr),e(Rr,lFe),e(lFe,TMr),e(Rr,MMr),e(Rr,ln),e(ln,EMr),e(ln,iFe),e(iFe,CMr),e(ln,wMr),e(ln,dFe),e(dFe,AMr),e(ln,yMr),e(ln,cFe),e(cFe,LMr),e(ln,xMr),e(Rr,$Mr),e(Rr,zL),e(zL,g4),e(g4,fFe),e(fFe,kMr),e(g4,SMr),e(g4,fU),e(fU,RMr),e(g4,PMr),e(zL,BMr),e(zL,h4),e(h4,mFe),e(mFe,IMr),e(h4,qMr),e(h4,mU),e(mU,NMr),e(h4,jMr),e(Rr,DMr),M(p4,Rr,null),b(f,ONe,u),b(f,hc,u),e(hc,_4),e(_4,gFe),M(WL,gFe,null),e(hc,GMr),e(hc,hFe),e(hFe,OMr),b(f,VNe,u),b(f,sr,u),M(QL,sr,null),e(sr,VMr),e(sr,pc),e(pc,XMr),e(pc,gU),e(gU,zMr),e(pc,WMr),e(pc,hU),e(hU,QMr),e(pc,HMr),e(sr,UMr),e(sr,HL),e(HL,JMr),e(HL,pFe),e(pFe,YMr),e(HL,KMr),e(sr,ZMr),e(sr,qt),M(UL,qt,null),e(qt,e4r),e(qt,_Fe),e(_Fe,o4r),e(qt,r4r),e(qt,_c),e(_c,t4r),e(_c,uFe),e(uFe,a4r),e(_c,n4r),e(_c,pU),e(pU,s4r),e(_c,l4r),e(qt,i4r),M(u4,qt,null),e(sr,d4r),e(sr,Pr),M(JL,Pr,null),e(Pr,c4r),e(Pr,bFe),e(bFe,f4r),e(Pr,m4r),e(Pr,dn),e(dn,g4r),e(dn,vFe),e(vFe,h4r),e(dn,p4r),e(dn,FFe),e(FFe,_4r),e(dn,u4r),e(dn,TFe),e(TFe,b4r),e(dn,v4r),e(Pr,F4r),e(Pr,MFe),e(MFe,b4),e(b4,EFe),e(EFe,T4r),e(b4,M4r),e(b4,_U),e(_U,E4r),e(b4,C4r),e(Pr,w4r),M(v4,Pr,null),b(f,XNe,u),b(f,uc,u),e(uc,F4),e(F4,CFe),M(YL,CFe,null),e(uc,A4r),e(uc,wFe),e(wFe,y4r),b(f,zNe,u),b(f,lr,u),M(KL,lr,null),e(lr,L4r),e(lr,bc),e(bc,x4r),e(bc,uU),e(uU,$4r),e(bc,k4r),e(bc,bU),e(bU,S4r),e(bc,R4r),e(lr,P4r),e(lr,ZL),e(ZL,B4r),e(ZL,AFe),e(AFe,I4r),e(ZL,q4r),e(lr,N4r),e(lr,Nt),M(e9,Nt,null),e(Nt,j4r),e(Nt,yFe),e(yFe,D4r),e(Nt,G4r),e(Nt,vc),e(vc,O4r),e(vc,LFe),e(LFe,V4r),e(vc,X4r),e(vc,vU),e(vU,z4r),e(vc,W4r),e(Nt,Q4r),M(T4,Nt,null),e(lr,H4r),e(lr,Br),M(o9,Br,null),e(Br,U4r),e(Br,xFe),e(xFe,J4r),e(Br,Y4r),e(Br,cn),e(cn,K4r),e(cn,$Fe),e($Fe,Z4r),e(cn,eEr),e(cn,kFe),e(kFe,oEr),e(cn,rEr),e(cn,SFe),e(SFe,tEr),e(cn,aEr),e(Br,nEr),e(Br,de),e(de,M4),e(M4,RFe),e(RFe,sEr),e(M4,lEr),e(M4,FU),e(FU,iEr),e(M4,dEr),e(de,cEr),e(de,E4),e(E4,PFe),e(PFe,fEr),e(E4,mEr),e(E4,TU),e(TU,gEr),e(E4,hEr),e(de,pEr),e(de,C4),e(C4,BFe),e(BFe,_Er),e(C4,uEr),e(C4,MU),e(MU,bEr),e(C4,vEr),e(de,FEr),e(de,w4),e(w4,IFe),e(IFe,TEr),e(w4,MEr),e(w4,EU),e(EU,EEr),e(w4,CEr),e(de,wEr),e(de,A4),e(A4,qFe),e(qFe,AEr),e(A4,yEr),e(A4,CU),e(CU,LEr),e(A4,xEr),e(de,$Er),e(de,y4),e(y4,NFe),e(NFe,kEr),e(y4,SEr),e(y4,wU),e(wU,REr),e(y4,PEr),e(de,BEr),e(de,L4),e(L4,jFe),e(jFe,IEr),e(L4,qEr),e(L4,AU),e(AU,NEr),e(L4,jEr),e(de,DEr),e(de,x4),e(x4,DFe),e(DFe,GEr),e(x4,OEr),e(x4,yU),e(yU,VEr),e(x4,XEr),e(de,zEr),e(de,$4),e($4,GFe),e(GFe,WEr),e($4,QEr),e($4,LU),e(LU,HEr),e($4,UEr),e(de,JEr),e(de,k4),e(k4,OFe),e(OFe,YEr),e(k4,KEr),e(k4,xU),e(xU,ZEr),e(k4,eCr),e(de,oCr),e(de,S4),e(S4,VFe),e(VFe,rCr),e(S4,tCr),e(S4,$U),e($U,aCr),e(S4,nCr),e(de,sCr),e(de,R4),e(R4,XFe),e(XFe,lCr),e(R4,iCr),e(R4,kU),e(kU,dCr),e(R4,cCr),e(de,fCr),e(de,P4),e(P4,zFe),e(zFe,mCr),e(P4,gCr),e(P4,SU),e(SU,hCr),e(P4,pCr),e(de,_Cr),e(de,B4),e(B4,WFe),e(WFe,uCr),e(B4,bCr),e(B4,RU),e(RU,vCr),e(B4,FCr),e(de,TCr),e(de,I4),e(I4,QFe),e(QFe,MCr),e(I4,ECr),e(I4,PU),e(PU,CCr),e(I4,wCr),e(de,ACr),e(de,q4),e(q4,HFe),e(HFe,yCr),e(q4,LCr),e(q4,BU),e(BU,xCr),e(q4,$Cr),e(de,kCr),e(de,N4),e(N4,UFe),e(UFe,SCr),e(N4,RCr),e(N4,IU),e(IU,PCr),e(N4,BCr),e(de,ICr),e(de,j4),e(j4,JFe),e(JFe,qCr),e(j4,NCr),e(j4,qU),e(qU,jCr),e(j4,DCr),e(de,GCr),e(de,D4),e(D4,YFe),e(YFe,OCr),e(D4,VCr),e(D4,NU),e(NU,XCr),e(D4,zCr),e(de,WCr),e(de,G4),e(G4,KFe),e(KFe,QCr),e(G4,HCr),e(G4,jU),e(jU,UCr),e(G4,JCr),e(Br,YCr),M(O4,Br,null),b(f,WNe,u),b(f,Fc,u),e(Fc,V4),e(V4,ZFe),M(r9,ZFe,null),e(Fc,KCr),e(Fc,e0e),e(e0e,ZCr),b(f,QNe,u),b(f,ir,u),M(t9,ir,null),e(ir,e3r),e(ir,Tc),e(Tc,o3r),e(Tc,DU),e(DU,r3r),e(Tc,t3r),e(Tc,GU),e(GU,a3r),e(Tc,n3r),e(ir,s3r),e(ir,a9),e(a9,l3r),e(a9,o0e),e(o0e,i3r),e(a9,d3r),e(ir,c3r),e(ir,jt),M(n9,jt,null),e(jt,f3r),e(jt,r0e),e(r0e,m3r),e(jt,g3r),e(jt,Mc),e(Mc,h3r),e(Mc,t0e),e(t0e,p3r),e(Mc,_3r),e(Mc,OU),e(OU,u3r),e(Mc,b3r),e(jt,v3r),M(X4,jt,null),e(ir,F3r),e(ir,Ir),M(s9,Ir,null),e(Ir,T3r),e(Ir,a0e),e(a0e,M3r),e(Ir,E3r),e(Ir,fn),e(fn,C3r),e(fn,n0e),e(n0e,w3r),e(fn,A3r),e(fn,s0e),e(s0e,y3r),e(fn,L3r),e(fn,l0e),e(l0e,x3r),e(fn,$3r),e(Ir,k3r),e(Ir,ce),e(ce,z4),e(z4,i0e),e(i0e,S3r),e(z4,R3r),e(z4,VU),e(VU,P3r),e(z4,B3r),e(ce,I3r),e(ce,W4),e(W4,d0e),e(d0e,q3r),e(W4,N3r),e(W4,XU),e(XU,j3r),e(W4,D3r),e(ce,G3r),e(ce,Q4),e(Q4,c0e),e(c0e,O3r),e(Q4,V3r),e(Q4,zU),e(zU,X3r),e(Q4,z3r),e(ce,W3r),e(ce,H4),e(H4,f0e),e(f0e,Q3r),e(H4,H3r),e(H4,WU),e(WU,U3r),e(H4,J3r),e(ce,Y3r),e(ce,U4),e(U4,m0e),e(m0e,K3r),e(U4,Z3r),e(U4,QU),e(QU,ewr),e(U4,owr),e(ce,rwr),e(ce,J4),e(J4,g0e),e(g0e,twr),e(J4,awr),e(J4,HU),e(HU,nwr),e(J4,swr),e(ce,lwr),e(ce,Y4),e(Y4,h0e),e(h0e,iwr),e(Y4,dwr),e(Y4,UU),e(UU,cwr),e(Y4,fwr),e(ce,mwr),e(ce,K4),e(K4,p0e),e(p0e,gwr),e(K4,hwr),e(K4,JU),e(JU,pwr),e(K4,_wr),e(ce,uwr),e(ce,Z4),e(Z4,_0e),e(_0e,bwr),e(Z4,vwr),e(Z4,YU),e(YU,Fwr),e(Z4,Twr),e(ce,Mwr),e(ce,eE),e(eE,u0e),e(u0e,Ewr),e(eE,Cwr),e(eE,KU),e(KU,wwr),e(eE,Awr),e(ce,ywr),e(ce,oE),e(oE,b0e),e(b0e,Lwr),e(oE,xwr),e(oE,ZU),e(ZU,$wr),e(oE,kwr),e(ce,Swr),e(ce,rE),e(rE,v0e),e(v0e,Rwr),e(rE,Pwr),e(rE,eJ),e(eJ,Bwr),e(rE,Iwr),e(ce,qwr),e(ce,tE),e(tE,F0e),e(F0e,Nwr),e(tE,jwr),e(tE,oJ),e(oJ,Dwr),e(tE,Gwr),e(ce,Owr),e(ce,aE),e(aE,T0e),e(T0e,Vwr),e(aE,Xwr),e(aE,rJ),e(rJ,zwr),e(aE,Wwr),e(ce,Qwr),e(ce,nE),e(nE,M0e),e(M0e,Hwr),e(nE,Uwr),e(nE,tJ),e(tJ,Jwr),e(nE,Ywr),e(ce,Kwr),e(ce,sE),e(sE,E0e),e(E0e,Zwr),e(sE,e6r),e(sE,aJ),e(aJ,o6r),e(sE,r6r),e(ce,t6r),e(ce,lE),e(lE,C0e),e(C0e,a6r),e(lE,n6r),e(lE,nJ),e(nJ,s6r),e(lE,l6r),e(ce,i6r),e(ce,iE),e(iE,w0e),e(w0e,d6r),e(iE,c6r),e(iE,sJ),e(sJ,f6r),e(iE,m6r),e(ce,g6r),e(ce,dE),e(dE,A0e),e(A0e,h6r),e(dE,p6r),e(dE,lJ),e(lJ,_6r),e(dE,u6r),e(ce,b6r),e(ce,cE),e(cE,y0e),e(y0e,v6r),e(cE,F6r),e(cE,iJ),e(iJ,T6r),e(cE,M6r),e(Ir,E6r),M(fE,Ir,null),b(f,HNe,u),b(f,Ec,u),e(Ec,mE),e(mE,L0e),M(l9,L0e,null),e(Ec,C6r),e(Ec,x0e),e(x0e,w6r),b(f,UNe,u),b(f,dr,u),M(i9,dr,null),e(dr,A6r),e(dr,Cc),e(Cc,y6r),e(Cc,dJ),e(dJ,L6r),e(Cc,x6r),e(Cc,cJ),e(cJ,$6r),e(Cc,k6r),e(dr,S6r),e(dr,d9),e(d9,R6r),e(d9,$0e),e($0e,P6r),e(d9,B6r),e(dr,I6r),e(dr,Dt),M(c9,Dt,null),e(Dt,q6r),e(Dt,k0e),e(k0e,N6r),e(Dt,j6r),e(Dt,wc),e(wc,D6r),e(wc,S0e),e(S0e,G6r),e(wc,O6r),e(wc,fJ),e(fJ,V6r),e(wc,X6r),e(Dt,z6r),M(gE,Dt,null),e(dr,W6r),e(dr,qr),M(f9,qr,null),e(qr,Q6r),e(qr,R0e),e(R0e,H6r),e(qr,U6r),e(qr,mn),e(mn,J6r),e(mn,P0e),e(P0e,Y6r),e(mn,K6r),e(mn,B0e),e(B0e,Z6r),e(mn,eAr),e(mn,I0e),e(I0e,oAr),e(mn,rAr),e(qr,tAr),e(qr,q0e),e(q0e,hE),e(hE,N0e),e(N0e,aAr),e(hE,nAr),e(hE,mJ),e(mJ,sAr),e(hE,lAr),e(qr,iAr),M(pE,qr,null),b(f,JNe,u),b(f,Ac,u),e(Ac,_E),e(_E,j0e),M(m9,j0e,null),e(Ac,dAr),e(Ac,D0e),e(D0e,cAr),b(f,YNe,u),b(f,cr,u),M(g9,cr,null),e(cr,fAr),e(cr,yc),e(yc,mAr),e(yc,gJ),e(gJ,gAr),e(yc,hAr),e(yc,hJ),e(hJ,pAr),e(yc,_Ar),e(cr,uAr),e(cr,h9),e(h9,bAr),e(h9,G0e),e(G0e,vAr),e(h9,FAr),e(cr,TAr),e(cr,Gt),M(p9,Gt,null),e(Gt,MAr),e(Gt,O0e),e(O0e,EAr),e(Gt,CAr),e(Gt,Lc),e(Lc,wAr),e(Lc,V0e),e(V0e,AAr),e(Lc,yAr),e(Lc,pJ),e(pJ,LAr),e(Lc,xAr),e(Gt,$Ar),M(uE,Gt,null),e(cr,kAr),e(cr,Nr),M(_9,Nr,null),e(Nr,SAr),e(Nr,X0e),e(X0e,RAr),e(Nr,PAr),e(Nr,gn),e(gn,BAr),e(gn,z0e),e(z0e,IAr),e(gn,qAr),e(gn,W0e),e(W0e,NAr),e(gn,jAr),e(gn,Q0e),e(Q0e,DAr),e(gn,GAr),e(Nr,OAr),e(Nr,H0e),e(H0e,bE),e(bE,U0e),e(U0e,VAr),e(bE,XAr),e(bE,_J),e(_J,zAr),e(bE,WAr),e(Nr,QAr),M(vE,Nr,null),b(f,KNe,u),b(f,xc,u),e(xc,FE),e(FE,J0e),M(u9,J0e,null),e(xc,HAr),e(xc,Y0e),e(Y0e,UAr),b(f,ZNe,u),b(f,fr,u),M(b9,fr,null),e(fr,JAr),e(fr,$c),e($c,YAr),e($c,uJ),e(uJ,KAr),e($c,ZAr),e($c,bJ),e(bJ,eyr),e($c,oyr),e(fr,ryr),e(fr,v9),e(v9,tyr),e(v9,K0e),e(K0e,ayr),e(v9,nyr),e(fr,syr),e(fr,Ot),M(F9,Ot,null),e(Ot,lyr),e(Ot,Z0e),e(Z0e,iyr),e(Ot,dyr),e(Ot,kc),e(kc,cyr),e(kc,eTe),e(eTe,fyr),e(kc,myr),e(kc,vJ),e(vJ,gyr),e(kc,hyr),e(Ot,pyr),M(TE,Ot,null),e(fr,_yr),e(fr,jr),M(T9,jr,null),e(jr,uyr),e(jr,oTe),e(oTe,byr),e(jr,vyr),e(jr,hn),e(hn,Fyr),e(hn,rTe),e(rTe,Tyr),e(hn,Myr),e(hn,tTe),e(tTe,Eyr),e(hn,Cyr),e(hn,aTe),e(aTe,wyr),e(hn,Ayr),e(jr,yyr),e(jr,te),e(te,ME),e(ME,nTe),e(nTe,Lyr),e(ME,xyr),e(ME,FJ),e(FJ,$yr),e(ME,kyr),e(te,Syr),e(te,EE),e(EE,sTe),e(sTe,Ryr),e(EE,Pyr),e(EE,TJ),e(TJ,Byr),e(EE,Iyr),e(te,qyr),e(te,CE),e(CE,lTe),e(lTe,Nyr),e(CE,jyr),e(CE,MJ),e(MJ,Dyr),e(CE,Gyr),e(te,Oyr),e(te,wE),e(wE,iTe),e(iTe,Vyr),e(wE,Xyr),e(wE,EJ),e(EJ,zyr),e(wE,Wyr),e(te,Qyr),e(te,AE),e(AE,dTe),e(dTe,Hyr),e(AE,Uyr),e(AE,CJ),e(CJ,Jyr),e(AE,Yyr),e(te,Kyr),e(te,yE),e(yE,cTe),e(cTe,Zyr),e(yE,e8r),e(yE,wJ),e(wJ,o8r),e(yE,r8r),e(te,t8r),e(te,LE),e(LE,fTe),e(fTe,a8r),e(LE,n8r),e(LE,AJ),e(AJ,s8r),e(LE,l8r),e(te,i8r),e(te,xE),e(xE,mTe),e(mTe,d8r),e(xE,c8r),e(xE,yJ),e(yJ,f8r),e(xE,m8r),e(te,g8r),e(te,$E),e($E,gTe),e(gTe,h8r),e($E,p8r),e($E,LJ),e(LJ,_8r),e($E,u8r),e(te,b8r),e(te,kE),e(kE,hTe),e(hTe,v8r),e(kE,F8r),e(kE,xJ),e(xJ,T8r),e(kE,M8r),e(te,E8r),e(te,SE),e(SE,pTe),e(pTe,C8r),e(SE,w8r),e(SE,$J),e($J,A8r),e(SE,y8r),e(te,L8r),e(te,RE),e(RE,_Te),e(_Te,x8r),e(RE,$8r),e(RE,kJ),e(kJ,k8r),e(RE,S8r),e(te,R8r),e(te,PE),e(PE,uTe),e(uTe,P8r),e(PE,B8r),e(PE,SJ),e(SJ,I8r),e(PE,q8r),e(te,N8r),e(te,BE),e(BE,bTe),e(bTe,j8r),e(BE,D8r),e(BE,RJ),e(RJ,G8r),e(BE,O8r),e(te,V8r),e(te,IE),e(IE,vTe),e(vTe,X8r),e(IE,z8r),e(IE,PJ),e(PJ,W8r),e(IE,Q8r),e(te,H8r),e(te,qE),e(qE,FTe),e(FTe,U8r),e(qE,J8r),e(qE,BJ),e(BJ,Y8r),e(qE,K8r),e(te,Z8r),e(te,NE),e(NE,TTe),e(TTe,eLr),e(NE,oLr),e(NE,IJ),e(IJ,rLr),e(NE,tLr),e(te,aLr),e(te,jE),e(jE,MTe),e(MTe,nLr),e(jE,sLr),e(jE,qJ),e(qJ,lLr),e(jE,iLr),e(te,dLr),e(te,DE),e(DE,ETe),e(ETe,cLr),e(DE,fLr),e(DE,NJ),e(NJ,mLr),e(DE,gLr),e(te,hLr),e(te,GE),e(GE,CTe),e(CTe,pLr),e(GE,_Lr),e(GE,jJ),e(jJ,uLr),e(GE,bLr),e(te,vLr),e(te,OE),e(OE,wTe),e(wTe,FLr),e(OE,TLr),e(OE,DJ),e(DJ,MLr),e(OE,ELr),e(te,CLr),e(te,VE),e(VE,ATe),e(ATe,wLr),e(VE,ALr),e(VE,GJ),e(GJ,yLr),e(VE,LLr),e(te,xLr),e(te,XE),e(XE,yTe),e(yTe,$Lr),e(XE,kLr),e(XE,OJ),e(OJ,SLr),e(XE,RLr),e(te,PLr),e(te,zE),e(zE,LTe),e(LTe,BLr),e(zE,ILr),e(zE,VJ),e(VJ,qLr),e(zE,NLr),e(te,jLr),e(te,WE),e(WE,xTe),e(xTe,DLr),e(WE,GLr),e(WE,XJ),e(XJ,OLr),e(WE,VLr),e(jr,XLr),M(QE,jr,null),b(f,eje,u),b(f,Sc,u),e(Sc,HE),e(HE,$Te),M(M9,$Te,null),e(Sc,zLr),e(Sc,kTe),e(kTe,WLr),b(f,oje,u),b(f,mr,u),M(E9,mr,null),e(mr,QLr),e(mr,Rc),e(Rc,HLr),e(Rc,zJ),e(zJ,ULr),e(Rc,JLr),e(Rc,WJ),e(WJ,YLr),e(Rc,KLr),e(mr,ZLr),e(mr,C9),e(C9,e9r),e(C9,STe),e(STe,o9r),e(C9,r9r),e(mr,t9r),e(mr,Vt),M(w9,Vt,null),e(Vt,a9r),e(Vt,RTe),e(RTe,n9r),e(Vt,s9r),e(Vt,Pc),e(Pc,l9r),e(Pc,PTe),e(PTe,i9r),e(Pc,d9r),e(Pc,QJ),e(QJ,c9r),e(Pc,f9r),e(Vt,m9r),M(UE,Vt,null),e(mr,g9r),e(mr,Dr),M(A9,Dr,null),e(Dr,h9r),e(Dr,BTe),e(BTe,p9r),e(Dr,_9r),e(Dr,pn),e(pn,u9r),e(pn,ITe),e(ITe,b9r),e(pn,v9r),e(pn,qTe),e(qTe,F9r),e(pn,T9r),e(pn,NTe),e(NTe,M9r),e(pn,E9r),e(Dr,C9r),e(Dr,Re),e(Re,JE),e(JE,jTe),e(jTe,w9r),e(JE,A9r),e(JE,HJ),e(HJ,y9r),e(JE,L9r),e(Re,x9r),e(Re,YE),e(YE,DTe),e(DTe,$9r),e(YE,k9r),e(YE,UJ),e(UJ,S9r),e(YE,R9r),e(Re,P9r),e(Re,KE),e(KE,GTe),e(GTe,B9r),e(KE,I9r),e(KE,JJ),e(JJ,q9r),e(KE,N9r),e(Re,j9r),e(Re,ZE),e(ZE,OTe),e(OTe,D9r),e(ZE,G9r),e(ZE,YJ),e(YJ,O9r),e(ZE,V9r),e(Re,X9r),e(Re,eC),e(eC,VTe),e(VTe,z9r),e(eC,W9r),e(eC,KJ),e(KJ,Q9r),e(eC,H9r),e(Re,U9r),e(Re,oC),e(oC,XTe),e(XTe,J9r),e(oC,Y9r),e(oC,ZJ),e(ZJ,K9r),e(oC,Z9r),e(Re,exr),e(Re,rC),e(rC,zTe),e(zTe,oxr),e(rC,rxr),e(rC,eY),e(eY,txr),e(rC,axr),e(Re,nxr),e(Re,tC),e(tC,WTe),e(WTe,sxr),e(tC,lxr),e(tC,oY),e(oY,ixr),e(tC,dxr),e(Re,cxr),e(Re,aC),e(aC,QTe),e(QTe,fxr),e(aC,mxr),e(aC,rY),e(rY,gxr),e(aC,hxr),e(Dr,pxr),M(nC,Dr,null),b(f,rje,u),b(f,Bc,u),e(Bc,sC),e(sC,HTe),M(y9,HTe,null),e(Bc,_xr),e(Bc,UTe),e(UTe,uxr),b(f,tje,u),b(f,gr,u),M(L9,gr,null),e(gr,bxr),e(gr,Ic),e(Ic,vxr),e(Ic,tY),e(tY,Fxr),e(Ic,Txr),e(Ic,aY),e(aY,Mxr),e(Ic,Exr),e(gr,Cxr),e(gr,x9),e(x9,wxr),e(x9,JTe),e(JTe,Axr),e(x9,yxr),e(gr,Lxr),e(gr,Xt),M($9,Xt,null),e(Xt,xxr),e(Xt,YTe),e(YTe,$xr),e(Xt,kxr),e(Xt,qc),e(qc,Sxr),e(qc,KTe),e(KTe,Rxr),e(qc,Pxr),e(qc,nY),e(nY,Bxr),e(qc,Ixr),e(Xt,qxr),M(lC,Xt,null),e(gr,Nxr),e(gr,Gr),M(k9,Gr,null),e(Gr,jxr),e(Gr,ZTe),e(ZTe,Dxr),e(Gr,Gxr),e(Gr,_n),e(_n,Oxr),e(_n,e7e),e(e7e,Vxr),e(_n,Xxr),e(_n,o7e),e(o7e,zxr),e(_n,Wxr),e(_n,r7e),e(r7e,Qxr),e(_n,Hxr),e(Gr,Uxr),e(Gr,Ee),e(Ee,iC),e(iC,t7e),e(t7e,Jxr),e(iC,Yxr),e(iC,sY),e(sY,Kxr),e(iC,Zxr),e(Ee,e$r),e(Ee,dC),e(dC,a7e),e(a7e,o$r),e(dC,r$r),e(dC,lY),e(lY,t$r),e(dC,a$r),e(Ee,n$r),e(Ee,cC),e(cC,n7e),e(n7e,s$r),e(cC,l$r),e(cC,iY),e(iY,i$r),e(cC,d$r),e(Ee,c$r),e(Ee,fC),e(fC,s7e),e(s7e,f$r),e(fC,m$r),e(fC,dY),e(dY,g$r),e(fC,h$r),e(Ee,p$r),e(Ee,mC),e(mC,l7e),e(l7e,_$r),e(mC,u$r),e(mC,cY),e(cY,b$r),e(mC,v$r),e(Ee,F$r),e(Ee,gC),e(gC,i7e),e(i7e,T$r),e(gC,M$r),e(gC,fY),e(fY,E$r),e(gC,C$r),e(Ee,w$r),e(Ee,hC),e(hC,d7e),e(d7e,A$r),e(hC,y$r),e(hC,mY),e(mY,L$r),e(hC,x$r),e(Ee,$$r),e(Ee,pC),e(pC,c7e),e(c7e,k$r),e(pC,S$r),e(pC,gY),e(gY,R$r),e(pC,P$r),e(Ee,B$r),e(Ee,_C),e(_C,f7e),e(f7e,I$r),e(_C,q$r),e(_C,hY),e(hY,N$r),e(_C,j$r),e(Ee,D$r),e(Ee,uC),e(uC,m7e),e(m7e,G$r),e(uC,O$r),e(uC,pY),e(pY,V$r),e(uC,X$r),e(Ee,z$r),e(Ee,bC),e(bC,g7e),e(g7e,W$r),e(bC,Q$r),e(bC,_Y),e(_Y,H$r),e(bC,U$r),e(Ee,J$r),e(Ee,vC),e(vC,h7e),e(h7e,Y$r),e(vC,K$r),e(vC,uY),e(uY,Z$r),e(vC,ekr),e(Gr,okr),M(FC,Gr,null),b(f,aje,u),b(f,Nc,u),e(Nc,TC),e(TC,p7e),M(S9,p7e,null),e(Nc,rkr),e(Nc,_7e),e(_7e,tkr),b(f,nje,u),b(f,hr,u),M(R9,hr,null),e(hr,akr),e(hr,jc),e(jc,nkr),e(jc,bY),e(bY,skr),e(jc,lkr),e(jc,vY),e(vY,ikr),e(jc,dkr),e(hr,ckr),e(hr,P9),e(P9,fkr),e(P9,u7e),e(u7e,mkr),e(P9,gkr),e(hr,hkr),e(hr,zt),M(B9,zt,null),e(zt,pkr),e(zt,b7e),e(b7e,_kr),e(zt,ukr),e(zt,Dc),e(Dc,bkr),e(Dc,v7e),e(v7e,vkr),e(Dc,Fkr),e(Dc,FY),e(FY,Tkr),e(Dc,Mkr),e(zt,Ekr),M(MC,zt,null),e(hr,Ckr),e(hr,Or),M(I9,Or,null),e(Or,wkr),e(Or,F7e),e(F7e,Akr),e(Or,ykr),e(Or,un),e(un,Lkr),e(un,T7e),e(T7e,xkr),e(un,$kr),e(un,M7e),e(M7e,kkr),e(un,Skr),e(un,E7e),e(E7e,Rkr),e(un,Pkr),e(Or,Bkr),e(Or,Le),e(Le,EC),e(EC,C7e),e(C7e,Ikr),e(EC,qkr),e(EC,TY),e(TY,Nkr),e(EC,jkr),e(Le,Dkr),e(Le,CC),e(CC,w7e),e(w7e,Gkr),e(CC,Okr),e(CC,MY),e(MY,Vkr),e(CC,Xkr),e(Le,zkr),e(Le,wC),e(wC,A7e),e(A7e,Wkr),e(wC,Qkr),e(wC,EY),e(EY,Hkr),e(wC,Ukr),e(Le,Jkr),e(Le,AC),e(AC,y7e),e(y7e,Ykr),e(AC,Kkr),e(AC,CY),e(CY,Zkr),e(AC,eSr),e(Le,oSr),e(Le,yC),e(yC,L7e),e(L7e,rSr),e(yC,tSr),e(yC,wY),e(wY,aSr),e(yC,nSr),e(Le,sSr),e(Le,LC),e(LC,x7e),e(x7e,lSr),e(LC,iSr),e(LC,AY),e(AY,dSr),e(LC,cSr),e(Le,fSr),e(Le,xC),e(xC,$7e),e($7e,mSr),e(xC,gSr),e(xC,yY),e(yY,hSr),e(xC,pSr),e(Le,_Sr),e(Le,$C),e($C,k7e),e(k7e,uSr),e($C,bSr),e($C,LY),e(LY,vSr),e($C,FSr),e(Le,TSr),e(Le,kC),e(kC,S7e),e(S7e,MSr),e(kC,ESr),e(kC,xY),e(xY,CSr),e(kC,wSr),e(Le,ASr),e(Le,SC),e(SC,R7e),e(R7e,ySr),e(SC,LSr),e(SC,$Y),e($Y,xSr),e(SC,$Sr),e(Or,kSr),M(RC,Or,null),b(f,sje,u),b(f,Gc,u),e(Gc,PC),e(PC,P7e),M(q9,P7e,null),e(Gc,SSr),e(Gc,B7e),e(B7e,RSr),b(f,lje,u),b(f,pr,u),M(N9,pr,null),e(pr,PSr),e(pr,Oc),e(Oc,BSr),e(Oc,kY),e(kY,ISr),e(Oc,qSr),e(Oc,SY),e(SY,NSr),e(Oc,jSr),e(pr,DSr),e(pr,j9),e(j9,GSr),e(j9,I7e),e(I7e,OSr),e(j9,VSr),e(pr,XSr),e(pr,Wt),M(D9,Wt,null),e(Wt,zSr),e(Wt,q7e),e(q7e,WSr),e(Wt,QSr),e(Wt,Vc),e(Vc,HSr),e(Vc,N7e),e(N7e,USr),e(Vc,JSr),e(Vc,RY),e(RY,YSr),e(Vc,KSr),e(Wt,ZSr),M(BC,Wt,null),e(pr,eRr),e(pr,Vr),M(G9,Vr,null),e(Vr,oRr),e(Vr,j7e),e(j7e,rRr),e(Vr,tRr),e(Vr,bn),e(bn,aRr),e(bn,D7e),e(D7e,nRr),e(bn,sRr),e(bn,G7e),e(G7e,lRr),e(bn,iRr),e(bn,O7e),e(O7e,dRr),e(bn,cRr),e(Vr,fRr),e(Vr,Pe),e(Pe,IC),e(IC,V7e),e(V7e,mRr),e(IC,gRr),e(IC,PY),e(PY,hRr),e(IC,pRr),e(Pe,_Rr),e(Pe,qC),e(qC,X7e),e(X7e,uRr),e(qC,bRr),e(qC,BY),e(BY,vRr),e(qC,FRr),e(Pe,TRr),e(Pe,NC),e(NC,z7e),e(z7e,MRr),e(NC,ERr),e(NC,IY),e(IY,CRr),e(NC,wRr),e(Pe,ARr),e(Pe,jC),e(jC,W7e),e(W7e,yRr),e(jC,LRr),e(jC,qY),e(qY,xRr),e(jC,$Rr),e(Pe,kRr),e(Pe,DC),e(DC,Q7e),e(Q7e,SRr),e(DC,RRr),e(DC,NY),e(NY,PRr),e(DC,BRr),e(Pe,IRr),e(Pe,GC),e(GC,H7e),e(H7e,qRr),e(GC,NRr),e(GC,jY),e(jY,jRr),e(GC,DRr),e(Pe,GRr),e(Pe,OC),e(OC,U7e),e(U7e,ORr),e(OC,VRr),e(OC,DY),e(DY,XRr),e(OC,zRr),e(Pe,WRr),e(Pe,VC),e(VC,J7e),e(J7e,QRr),e(VC,HRr),e(VC,GY),e(GY,URr),e(VC,JRr),e(Pe,YRr),e(Pe,XC),e(XC,Y7e),e(Y7e,KRr),e(XC,ZRr),e(XC,OY),e(OY,ePr),e(XC,oPr),e(Vr,rPr),M(zC,Vr,null),b(f,ije,u),b(f,Xc,u),e(Xc,WC),e(WC,K7e),M(O9,K7e,null),e(Xc,tPr),e(Xc,Z7e),e(Z7e,aPr),b(f,dje,u),b(f,_r,u),M(V9,_r,null),e(_r,nPr),e(_r,zc),e(zc,sPr),e(zc,VY),e(VY,lPr),e(zc,iPr),e(zc,XY),e(XY,dPr),e(zc,cPr),e(_r,fPr),e(_r,X9),e(X9,mPr),e(X9,eMe),e(eMe,gPr),e(X9,hPr),e(_r,pPr),e(_r,Qt),M(z9,Qt,null),e(Qt,_Pr),e(Qt,oMe),e(oMe,uPr),e(Qt,bPr),e(Qt,Wc),e(Wc,vPr),e(Wc,rMe),e(rMe,FPr),e(Wc,TPr),e(Wc,zY),e(zY,MPr),e(Wc,EPr),e(Qt,CPr),M(QC,Qt,null),e(_r,wPr),e(_r,Xr),M(W9,Xr,null),e(Xr,APr),e(Xr,tMe),e(tMe,yPr),e(Xr,LPr),e(Xr,vn),e(vn,xPr),e(vn,aMe),e(aMe,$Pr),e(vn,kPr),e(vn,nMe),e(nMe,SPr),e(vn,RPr),e(vn,sMe),e(sMe,PPr),e(vn,BPr),e(Xr,IPr),e(Xr,xe),e(xe,HC),e(HC,lMe),e(lMe,qPr),e(HC,NPr),e(HC,WY),e(WY,jPr),e(HC,DPr),e(xe,GPr),e(xe,UC),e(UC,iMe),e(iMe,OPr),e(UC,VPr),e(UC,QY),e(QY,XPr),e(UC,zPr),e(xe,WPr),e(xe,JC),e(JC,dMe),e(dMe,QPr),e(JC,HPr),e(JC,HY),e(HY,UPr),e(JC,JPr),e(xe,YPr),e(xe,YC),e(YC,cMe),e(cMe,KPr),e(YC,ZPr),e(YC,UY),e(UY,eBr),e(YC,oBr),e(xe,rBr),e(xe,KC),e(KC,fMe),e(fMe,tBr),e(KC,aBr),e(KC,JY),e(JY,nBr),e(KC,sBr),e(xe,lBr),e(xe,ZC),e(ZC,mMe),e(mMe,iBr),e(ZC,dBr),e(ZC,YY),e(YY,cBr),e(ZC,fBr),e(xe,mBr),e(xe,e3),e(e3,gMe),e(gMe,gBr),e(e3,hBr),e(e3,KY),e(KY,pBr),e(e3,_Br),e(xe,uBr),e(xe,o3),e(o3,hMe),e(hMe,bBr),e(o3,vBr),e(o3,ZY),e(ZY,FBr),e(o3,TBr),e(xe,MBr),e(xe,r3),e(r3,pMe),e(pMe,EBr),e(r3,CBr),e(r3,eK),e(eK,wBr),e(r3,ABr),e(xe,yBr),e(xe,t3),e(t3,_Me),e(_Me,LBr),e(t3,xBr),e(t3,oK),e(oK,$Br),e(t3,kBr),e(Xr,SBr),M(a3,Xr,null),b(f,cje,u),b(f,Qc,u),e(Qc,n3),e(n3,uMe),M(Q9,uMe,null),e(Qc,RBr),e(Qc,bMe),e(bMe,PBr),b(f,fje,u),b(f,ur,u),M(H9,ur,null),e(ur,BBr),e(ur,Hc),e(Hc,IBr),e(Hc,rK),e(rK,qBr),e(Hc,NBr),e(Hc,tK),e(tK,jBr),e(Hc,DBr),e(ur,GBr),e(ur,U9),e(U9,OBr),e(U9,vMe),e(vMe,VBr),e(U9,XBr),e(ur,zBr),e(ur,Ht),M(J9,Ht,null),e(Ht,WBr),e(Ht,FMe),e(FMe,QBr),e(Ht,HBr),e(Ht,Uc),e(Uc,UBr),e(Uc,TMe),e(TMe,JBr),e(Uc,YBr),e(Uc,aK),e(aK,KBr),e(Uc,ZBr),e(Ht,eIr),M(s3,Ht,null),e(ur,oIr),e(ur,zr),M(Y9,zr,null),e(zr,rIr),e(zr,MMe),e(MMe,tIr),e(zr,aIr),e(zr,Fn),e(Fn,nIr),e(Fn,EMe),e(EMe,sIr),e(Fn,lIr),e(Fn,CMe),e(CMe,iIr),e(Fn,dIr),e(Fn,wMe),e(wMe,cIr),e(Fn,fIr),e(zr,mIr),e(zr,$e),e($e,l3),e(l3,AMe),e(AMe,gIr),e(l3,hIr),e(l3,nK),e(nK,pIr),e(l3,_Ir),e($e,uIr),e($e,i3),e(i3,yMe),e(yMe,bIr),e(i3,vIr),e(i3,sK),e(sK,FIr),e(i3,TIr),e($e,MIr),e($e,d3),e(d3,LMe),e(LMe,EIr),e(d3,CIr),e(d3,lK),e(lK,wIr),e(d3,AIr),e($e,yIr),e($e,c3),e(c3,xMe),e(xMe,LIr),e(c3,xIr),e(c3,iK),e(iK,$Ir),e(c3,kIr),e($e,SIr),e($e,f3),e(f3,$Me),e($Me,RIr),e(f3,PIr),e(f3,dK),e(dK,BIr),e(f3,IIr),e($e,qIr),e($e,m3),e(m3,kMe),e(kMe,NIr),e(m3,jIr),e(m3,cK),e(cK,DIr),e(m3,GIr),e($e,OIr),e($e,g3),e(g3,SMe),e(SMe,VIr),e(g3,XIr),e(g3,fK),e(fK,zIr),e(g3,WIr),e($e,QIr),e($e,h3),e(h3,RMe),e(RMe,HIr),e(h3,UIr),e(h3,mK),e(mK,JIr),e(h3,YIr),e($e,KIr),e($e,p3),e(p3,PMe),e(PMe,ZIr),e(p3,eqr),e(p3,gK),e(gK,oqr),e(p3,rqr),e($e,tqr),e($e,_3),e(_3,BMe),e(BMe,aqr),e(_3,nqr),e(_3,hK),e(hK,sqr),e(_3,lqr),e(zr,iqr),M(u3,zr,null),b(f,mje,u),b(f,Jc,u),e(Jc,b3),e(b3,IMe),M(K9,IMe,null),e(Jc,dqr),e(Jc,qMe),e(qMe,cqr),b(f,gje,u),b(f,br,u),M(Z9,br,null),e(br,fqr),e(br,Yc),e(Yc,mqr),e(Yc,pK),e(pK,gqr),e(Yc,hqr),e(Yc,_K),e(_K,pqr),e(Yc,_qr),e(br,uqr),e(br,ex),e(ex,bqr),e(ex,NMe),e(NMe,vqr),e(ex,Fqr),e(br,Tqr),e(br,Ut),M(ox,Ut,null),e(Ut,Mqr),e(Ut,jMe),e(jMe,Eqr),e(Ut,Cqr),e(Ut,Kc),e(Kc,wqr),e(Kc,DMe),e(DMe,Aqr),e(Kc,yqr),e(Kc,uK),e(uK,Lqr),e(Kc,xqr),e(Ut,$qr),M(v3,Ut,null),e(br,kqr),e(br,Wr),M(rx,Wr,null),e(Wr,Sqr),e(Wr,GMe),e(GMe,Rqr),e(Wr,Pqr),e(Wr,Tn),e(Tn,Bqr),e(Tn,OMe),e(OMe,Iqr),e(Tn,qqr),e(Tn,VMe),e(VMe,Nqr),e(Tn,jqr),e(Tn,XMe),e(XMe,Dqr),e(Tn,Gqr),e(Wr,Oqr),e(Wr,De),e(De,F3),e(F3,zMe),e(zMe,Vqr),e(F3,Xqr),e(F3,bK),e(bK,zqr),e(F3,Wqr),e(De,Qqr),e(De,T3),e(T3,WMe),e(WMe,Hqr),e(T3,Uqr),e(T3,vK),e(vK,Jqr),e(T3,Yqr),e(De,Kqr),e(De,M3),e(M3,QMe),e(QMe,Zqr),e(M3,eNr),e(M3,FK),e(FK,oNr),e(M3,rNr),e(De,tNr),e(De,E3),e(E3,HMe),e(HMe,aNr),e(E3,nNr),e(E3,TK),e(TK,sNr),e(E3,lNr),e(De,iNr),e(De,C3),e(C3,UMe),e(UMe,dNr),e(C3,cNr),e(C3,MK),e(MK,fNr),e(C3,mNr),e(De,gNr),e(De,w3),e(w3,JMe),e(JMe,hNr),e(w3,pNr),e(w3,EK),e(EK,_Nr),e(w3,uNr),e(De,bNr),e(De,A3),e(A3,YMe),e(YMe,vNr),e(A3,FNr),e(A3,CK),e(CK,TNr),e(A3,MNr),e(De,ENr),e(De,y3),e(y3,KMe),e(KMe,CNr),e(y3,wNr),e(y3,wK),e(wK,ANr),e(y3,yNr),e(Wr,LNr),M(L3,Wr,null),b(f,hje,u),b(f,Zc,u),e(Zc,x3),e(x3,ZMe),M(tx,ZMe,null),e(Zc,xNr),e(Zc,e4e),e(e4e,$Nr),b(f,pje,u),b(f,vr,u),M(ax,vr,null),e(vr,kNr),e(vr,ef),e(ef,SNr),e(ef,AK),e(AK,RNr),e(ef,PNr),e(ef,yK),e(yK,BNr),e(ef,INr),e(vr,qNr),e(vr,nx),e(nx,NNr),e(nx,o4e),e(o4e,jNr),e(nx,DNr),e(vr,GNr),e(vr,Jt),M(sx,Jt,null),e(Jt,ONr),e(Jt,r4e),e(r4e,VNr),e(Jt,XNr),e(Jt,of),e(of,zNr),e(of,t4e),e(t4e,WNr),e(of,QNr),e(of,LK),e(LK,HNr),e(of,UNr),e(Jt,JNr),M($3,Jt,null),e(vr,YNr),e(vr,Qr),M(lx,Qr,null),e(Qr,KNr),e(Qr,a4e),e(a4e,ZNr),e(Qr,ejr),e(Qr,Mn),e(Mn,ojr),e(Mn,n4e),e(n4e,rjr),e(Mn,tjr),e(Mn,s4e),e(s4e,ajr),e(Mn,njr),e(Mn,l4e),e(l4e,sjr),e(Mn,ljr),e(Qr,ijr),e(Qr,Ge),e(Ge,k3),e(k3,i4e),e(i4e,djr),e(k3,cjr),e(k3,xK),e(xK,fjr),e(k3,mjr),e(Ge,gjr),e(Ge,S3),e(S3,d4e),e(d4e,hjr),e(S3,pjr),e(S3,$K),e($K,_jr),e(S3,ujr),e(Ge,bjr),e(Ge,R3),e(R3,c4e),e(c4e,vjr),e(R3,Fjr),e(R3,kK),e(kK,Tjr),e(R3,Mjr),e(Ge,Ejr),e(Ge,P3),e(P3,f4e),e(f4e,Cjr),e(P3,wjr),e(P3,SK),e(SK,Ajr),e(P3,yjr),e(Ge,Ljr),e(Ge,B3),e(B3,m4e),e(m4e,xjr),e(B3,$jr),e(B3,RK),e(RK,kjr),e(B3,Sjr),e(Ge,Rjr),e(Ge,I3),e(I3,g4e),e(g4e,Pjr),e(I3,Bjr),e(I3,PK),e(PK,Ijr),e(I3,qjr),e(Ge,Njr),e(Ge,q3),e(q3,h4e),e(h4e,jjr),e(q3,Djr),e(q3,BK),e(BK,Gjr),e(q3,Ojr),e(Ge,Vjr),e(Ge,N3),e(N3,p4e),e(p4e,Xjr),e(N3,zjr),e(N3,IK),e(IK,Wjr),e(N3,Qjr),e(Qr,Hjr),M(j3,Qr,null),b(f,_je,u),b(f,rf,u),e(rf,D3),e(D3,_4e),M(ix,_4e,null),e(rf,Ujr),e(rf,u4e),e(u4e,Jjr),b(f,uje,u),b(f,Fr,u),M(dx,Fr,null),e(Fr,Yjr),e(Fr,tf),e(tf,Kjr),e(tf,qK),e(qK,Zjr),e(tf,eDr),e(tf,NK),e(NK,oDr),e(tf,rDr),e(Fr,tDr),e(Fr,cx),e(cx,aDr),e(cx,b4e),e(b4e,nDr),e(cx,sDr),e(Fr,lDr),e(Fr,Yt),M(fx,Yt,null),e(Yt,iDr),e(Yt,v4e),e(v4e,dDr),e(Yt,cDr),e(Yt,af),e(af,fDr),e(af,F4e),e(F4e,mDr),e(af,gDr),e(af,jK),e(jK,hDr),e(af,pDr),e(Yt,_Dr),M(G3,Yt,null),e(Fr,uDr),e(Fr,Hr),M(mx,Hr,null),e(Hr,bDr),e(Hr,T4e),e(T4e,vDr),e(Hr,FDr),e(Hr,En),e(En,TDr),e(En,M4e),e(M4e,MDr),e(En,EDr),e(En,E4e),e(E4e,CDr),e(En,wDr),e(En,C4e),e(C4e,ADr),e(En,yDr),e(Hr,LDr),e(Hr,w4e),e(w4e,O3),e(O3,A4e),e(A4e,xDr),e(O3,$Dr),e(O3,DK),e(DK,kDr),e(O3,SDr),e(Hr,RDr),M(V3,Hr,null),b(f,bje,u),b(f,nf,u),e(nf,X3),e(X3,y4e),M(gx,y4e,null),e(nf,PDr),e(nf,L4e),e(L4e,BDr),b(f,vje,u),b(f,Tr,u),M(hx,Tr,null),e(Tr,IDr),e(Tr,sf),e(sf,qDr),e(sf,GK),e(GK,NDr),e(sf,jDr),e(sf,OK),e(OK,DDr),e(sf,GDr),e(Tr,ODr),e(Tr,px),e(px,VDr),e(px,x4e),e(x4e,XDr),e(px,zDr),e(Tr,WDr),e(Tr,Kt),M(_x,Kt,null),e(Kt,QDr),e(Kt,$4e),e($4e,HDr),e(Kt,UDr),e(Kt,lf),e(lf,JDr),e(lf,k4e),e(k4e,YDr),e(lf,KDr),e(lf,VK),e(VK,ZDr),e(lf,eGr),e(Kt,oGr),M(z3,Kt,null),e(Tr,rGr),e(Tr,Ur),M(ux,Ur,null),e(Ur,tGr),e(Ur,S4e),e(S4e,aGr),e(Ur,nGr),e(Ur,Cn),e(Cn,sGr),e(Cn,R4e),e(R4e,lGr),e(Cn,iGr),e(Cn,P4e),e(P4e,dGr),e(Cn,cGr),e(Cn,B4e),e(B4e,fGr),e(Cn,mGr),e(Ur,gGr),e(Ur,bx),e(bx,W3),e(W3,I4e),e(I4e,hGr),e(W3,pGr),e(W3,XK),e(XK,_Gr),e(W3,uGr),e(bx,bGr),e(bx,Q3),e(Q3,q4e),e(q4e,vGr),e(Q3,FGr),e(Q3,zK),e(zK,TGr),e(Q3,MGr),e(Ur,EGr),M(H3,Ur,null),b(f,Fje,u),b(f,df,u),e(df,U3),e(U3,N4e),M(vx,N4e,null),e(df,CGr),e(df,j4e),e(j4e,wGr),b(f,Tje,u),b(f,Mr,u),M(Fx,Mr,null),e(Mr,AGr),e(Mr,cf),e(cf,yGr),e(cf,WK),e(WK,LGr),e(cf,xGr),e(cf,QK),e(QK,$Gr),e(cf,kGr),e(Mr,SGr),e(Mr,Tx),e(Tx,RGr),e(Tx,D4e),e(D4e,PGr),e(Tx,BGr),e(Mr,IGr),e(Mr,Zt),M(Mx,Zt,null),e(Zt,qGr),e(Zt,G4e),e(G4e,NGr),e(Zt,jGr),e(Zt,ff),e(ff,DGr),e(ff,O4e),e(O4e,GGr),e(ff,OGr),e(ff,HK),e(HK,VGr),e(ff,XGr),e(Zt,zGr),M(J3,Zt,null),e(Mr,WGr),e(Mr,Jr),M(Ex,Jr,null),e(Jr,QGr),e(Jr,V4e),e(V4e,HGr),e(Jr,UGr),e(Jr,wn),e(wn,JGr),e(wn,X4e),e(X4e,YGr),e(wn,KGr),e(wn,z4e),e(z4e,ZGr),e(wn,eOr),e(wn,W4e),e(W4e,oOr),e(wn,rOr),e(Jr,tOr),e(Jr,Q4e),e(Q4e,Y3),e(Y3,H4e),e(H4e,aOr),e(Y3,nOr),e(Y3,UK),e(UK,sOr),e(Y3,lOr),e(Jr,iOr),M(K3,Jr,null),Mje=!0},p(f,[u]){const Cx={};u&2&&(Cx.$$scope={dirty:u,ctx:f}),Ff.$set(Cx);const U4e={};u&2&&(U4e.$$scope={dirty:u,ctx:f}),Mg.$set(U4e);const J4e={};u&2&&(J4e.$$scope={dirty:u,ctx:f}),rh.$set(J4e);const Y4e={};u&2&&(Y4e.$$scope={dirty:u,ctx:f}),Rh.$set(Y4e);const wx={};u&2&&(wx.$$scope={dirty:u,ctx:f}),Ph.$set(wx);const K4e={};u&2&&(K4e.$$scope={dirty:u,ctx:f}),Zh.$set(K4e);const An={};u&2&&(An.$$scope={dirty:u,ctx:f}),ep.$set(An);const Z4e={};u&2&&(Z4e.$$scope={dirty:u,ctx:f}),tp.$set(Z4e);const eEe={};u&2&&(eEe.$$scope={dirty:u,ctx:f}),Y_.$set(eEe);const oEe={};u&2&&(oEe.$$scope={dirty:u,ctx:f}),Z_.$set(oEe);const Ax={};u&2&&(Ax.$$scope={dirty:u,ctx:f}),Vu.$set(Ax);const rEe={};u&2&&(rEe.$$scope={dirty:u,ctx:f}),zu.$set(rEe);const yx={};u&2&&(yx.$$scope={dirty:u,ctx:f}),x2.$set(yx);const tEe={};u&2&&(tEe.$$scope={dirty:u,ctx:f}),k2.$set(tEe);const Lx={};u&2&&(Lx.$$scope={dirty:u,ctx:f}),h1.$set(Lx);const aEe={};u&2&&(aEe.$$scope={dirty:u,ctx:f}),_1.$set(aEe);const nEe={};u&2&&(nEe.$$scope={dirty:u,ctx:f}),P1.$set(nEe);const sEe={};u&2&&(sEe.$$scope={dirty:u,ctx:f}),I1.$set(sEe);const mf={};u&2&&(mf.$$scope={dirty:u,ctx:f}),$b.$set(mf);const lEe={};u&2&&(lEe.$$scope={dirty:u,ctx:f}),Sb.$set(lEe);const iEe={};u&2&&(iEe.$$scope={dirty:u,ctx:f}),d5.$set(iEe);const dEe={};u&2&&(dEe.$$scope={dirty:u,ctx:f}),f5.$set(dEe);const xx={};u&2&&(xx.$$scope={dirty:u,ctx:f}),b5.$set(xx);const cEe={};u&2&&(cEe.$$scope={dirty:u,ctx:f}),F5.$set(cEe);const fEe={};u&2&&(fEe.$$scope={dirty:u,ctx:f}),ov.$set(fEe);const mEe={};u&2&&(mEe.$$scope={dirty:u,ctx:f}),tv.$set(mEe);const ot={};u&2&&(ot.$$scope={dirty:u,ctx:f}),Xv.$set(ot);const $x={};u&2&&($x.$$scope={dirty:u,ctx:f}),Wv.$set($x);const gEe={};u&2&&(gEe.$$scope={dirty:u,ctx:f}),Uv.$set(gEe);const kx={};u&2&&(kx.$$scope={dirty:u,ctx:f}),Yv.$set(kx);const hEe={};u&2&&(hEe.$$scope={dirty:u,ctx:f}),mF.$set(hEe);const rt={};u&2&&(rt.$$scope={dirty:u,ctx:f}),hF.$set(rt);const pEe={};u&2&&(pEe.$$scope={dirty:u,ctx:f}),uF.$set(pEe);const gf={};u&2&&(gf.$$scope={dirty:u,ctx:f}),vF.$set(gf);const _Ee={};u&2&&(_Ee.$$scope={dirty:u,ctx:f}),$F.$set(_Ee);const uEe={};u&2&&(uEe.$$scope={dirty:u,ctx:f}),SF.$set(uEe);const y={};u&2&&(y.$$scope={dirty:u,ctx:f}),jF.$set(y);const Z3={};u&2&&(Z3.$$scope={dirty:u,ctx:f}),GF.$set(Z3);const bEe={};u&2&&(bEe.$$scope={dirty:u,ctx:f}),KF.$set(bEe);const vEe={};u&2&&(vEe.$$scope={dirty:u,ctx:f}),e0.$set(vEe);const ew={};u&2&&(ew.$$scope={dirty:u,ctx:f}),a0.$set(ew);const FEe={};u&2&&(FEe.$$scope={dirty:u,ctx:f}),s0.$set(FEe);const TEe={};u&2&&(TEe.$$scope={dirty:u,ctx:f}),g0.$set(TEe);const ow={};u&2&&(ow.$$scope={dirty:u,ctx:f}),p0.$set(ow);const MEe={};u&2&&(MEe.$$scope={dirty:u,ctx:f}),F0.$set(MEe);const EEe={};u&2&&(EEe.$$scope={dirty:u,ctx:f}),M0.$set(EEe);const rw={};u&2&&(rw.$$scope={dirty:u,ctx:f}),A0.$set(rw);const CEe={};u&2&&(CEe.$$scope={dirty:u,ctx:f}),L0.$set(CEe);const wEe={};u&2&&(wEe.$$scope={dirty:u,ctx:f}),k0.$set(wEe);const tw={};u&2&&(tw.$$scope={dirty:u,ctx:f}),R0.$set(tw);const AEe={};u&2&&(AEe.$$scope={dirty:u,ctx:f}),D0.$set(AEe);const yEe={};u&2&&(yEe.$$scope={dirty:u,ctx:f}),O0.$set(yEe);const aw={};u&2&&(aw.$$scope={dirty:u,ctx:f}),z0.$set(aw);const LEe={};u&2&&(LEe.$$scope={dirty:u,ctx:f}),Q0.$set(LEe);const xEe={};u&2&&(xEe.$$scope={dirty:u,ctx:f}),jT.$set(xEe);const nw={};u&2&&(nw.$$scope={dirty:u,ctx:f}),GT.$set(nw);const $Ee={};u&2&&($Ee.$$scope={dirty:u,ctx:f}),f7.$set($Ee);const kEe={};u&2&&(kEe.$$scope={dirty:u,ctx:f}),g7.$set(kEe);const sw={};u&2&&(sw.$$scope={dirty:u,ctx:f}),A7.$set(sw);const SEe={};u&2&&(SEe.$$scope={dirty:u,ctx:f}),L7.$set(SEe);const REe={};u&2&&(REe.$$scope={dirty:u,ctx:f}),R7.$set(REe);const lw={};u&2&&(lw.$$scope={dirty:u,ctx:f}),B7.$set(lw);const PEe={};u&2&&(PEe.$$scope={dirty:u,ctx:f}),rM.$set(PEe);const BEe={};u&2&&(BEe.$$scope={dirty:u,ctx:f}),aM.$set(BEe);const iw={};u&2&&(iw.$$scope={dirty:u,ctx:f}),pM.$set(iw);const IEe={};u&2&&(IEe.$$scope={dirty:u,ctx:f}),uM.$set(IEe);const qEe={};u&2&&(qEe.$$scope={dirty:u,ctx:f}),XM.$set(qEe);const dw={};u&2&&(dw.$$scope={dirty:u,ctx:f}),WM.$set(dw);const NEe={};u&2&&(NEe.$$scope={dirty:u,ctx:f}),c4.$set(NEe);const jEe={};u&2&&(jEe.$$scope={dirty:u,ctx:f}),m4.$set(jEe);const cw={};u&2&&(cw.$$scope={dirty:u,ctx:f}),p4.$set(cw);const DEe={};u&2&&(DEe.$$scope={dirty:u,ctx:f}),u4.$set(DEe);const GEe={};u&2&&(GEe.$$scope={dirty:u,ctx:f}),v4.$set(GEe);const fw={};u&2&&(fw.$$scope={dirty:u,ctx:f}),T4.$set(fw);const OEe={};u&2&&(OEe.$$scope={dirty:u,ctx:f}),O4.$set(OEe);const VEe={};u&2&&(VEe.$$scope={dirty:u,ctx:f}),X4.$set(VEe);const mw={};u&2&&(mw.$$scope={dirty:u,ctx:f}),fE.$set(mw);const XEe={};u&2&&(XEe.$$scope={dirty:u,ctx:f}),gE.$set(XEe);const zEe={};u&2&&(zEe.$$scope={dirty:u,ctx:f}),pE.$set(zEe);const gw={};u&2&&(gw.$$scope={dirty:u,ctx:f}),uE.$set(gw);const WEe={};u&2&&(WEe.$$scope={dirty:u,ctx:f}),vE.$set(WEe);const QEe={};u&2&&(QEe.$$scope={dirty:u,ctx:f}),TE.$set(QEe);const hw={};u&2&&(hw.$$scope={dirty:u,ctx:f}),QE.$set(hw);const HEe={};u&2&&(HEe.$$scope={dirty:u,ctx:f}),UE.$set(HEe);const UEe={};u&2&&(UEe.$$scope={dirty:u,ctx:f}),nC.$set(UEe);const pw={};u&2&&(pw.$$scope={dirty:u,ctx:f}),lC.$set(pw);const JEe={};u&2&&(JEe.$$scope={dirty:u,ctx:f}),FC.$set(JEe);const YEe={};u&2&&(YEe.$$scope={dirty:u,ctx:f}),MC.$set(YEe);const _w={};u&2&&(_w.$$scope={dirty:u,ctx:f}),RC.$set(_w);const KEe={};u&2&&(KEe.$$scope={dirty:u,ctx:f}),BC.$set(KEe);const ZEe={};u&2&&(ZEe.$$scope={dirty:u,ctx:f}),zC.$set(ZEe);const uw={};u&2&&(uw.$$scope={dirty:u,ctx:f}),QC.$set(uw);const eCe={};u&2&&(eCe.$$scope={dirty:u,ctx:f}),a3.$set(eCe);const oCe={};u&2&&(oCe.$$scope={dirty:u,ctx:f}),s3.$set(oCe);const bw={};u&2&&(bw.$$scope={dirty:u,ctx:f}),u3.$set(bw);const rCe={};u&2&&(rCe.$$scope={dirty:u,ctx:f}),v3.$set(rCe);const tCe={};u&2&&(tCe.$$scope={dirty:u,ctx:f}),L3.$set(tCe);const vw={};u&2&&(vw.$$scope={dirty:u,ctx:f}),$3.$set(vw);const aCe={};u&2&&(aCe.$$scope={dirty:u,ctx:f}),j3.$set(aCe);const nCe={};u&2&&(nCe.$$scope={dirty:u,ctx:f}),G3.$set(nCe);const Fw={};u&2&&(Fw.$$scope={dirty:u,ctx:f}),V3.$set(Fw);const sCe={};u&2&&(sCe.$$scope={dirty:u,ctx:f}),z3.$set(sCe);const lCe={};u&2&&(lCe.$$scope={dirty:u,ctx:f}),H3.$set(lCe);const Tw={};u&2&&(Tw.$$scope={dirty:u,ctx:f}),J3.$set(Tw);const iCe={};u&2&&(iCe.$$scope={dirty:u,ctx:f}),K3.$set(iCe)},i(f){Mje||(E(d.$$.fragment,f),E(wa.$$.fragment,f),E(vA.$$.fragment,f),E(FA.$$.fragment,f),E(Ff.$$.fragment,f),E(TA.$$.fragment,f),E(MA.$$.fragment,f),E(wA.$$.fragment,f),E(Mg.$$.fragment,f),E(AA.$$.fragment,f),E(yA.$$.fragment,f),E(LA.$$.fragment,f),E(kA.$$.fragment,f),E(rh.$$.fragment,f),E(SA.$$.fragment,f),E(RA.$$.fragment,f),E(PA.$$.fragment,f),E(qA.$$.fragment,f),E(Rh.$$.fragment,f),E(Ph.$$.fragment,f),E(NA.$$.fragment,f),E(jA.$$.fragment,f),E(DA.$$.fragment,f),E(VA.$$.fragment,f),E(Zh.$$.fragment,f),E(ep.$$.fragment,f),E(XA.$$.fragment,f),E(zA.$$.fragment,f),E(WA.$$.fragment,f),E(HA.$$.fragment,f),E(tp.$$.fragment,f),E(UA.$$.fragment,f),E(Y_.$$.fragment,f),E(JA.$$.fragment,f),E(YA.$$.fragment,f),E(ZA.$$.fragment,f),E(Z_.$$.fragment,f),E(ey.$$.fragment,f),E(Vu.$$.fragment,f),E(oy.$$.fragment,f),E(ry.$$.fragment,f),E(ay.$$.fragment,f),E(zu.$$.fragment,f),E(ny.$$.fragment,f),E(x2.$$.fragment,f),E(sy.$$.fragment,f),E(ly.$$.fragment,f),E(dy.$$.fragment,f),E(k2.$$.fragment,f),E(cy.$$.fragment,f),E(h1.$$.fragment,f),E(fy.$$.fragment,f),E(my.$$.fragment,f),E(hy.$$.fragment,f),E(_1.$$.fragment,f),E(py.$$.fragment,f),E(P1.$$.fragment,f),E(_y.$$.fragment,f),E(uy.$$.fragment,f),E(vy.$$.fragment,f),E(I1.$$.fragment,f),E(Fy.$$.fragment,f),E($b.$$.fragment,f),E(Ty.$$.fragment,f),E(My.$$.fragment,f),E(Cy.$$.fragment,f),E(Sb.$$.fragment,f),E(wy.$$.fragment,f),E(d5.$$.fragment,f),E(Ay.$$.fragment,f),E(yy.$$.fragment,f),E(xy.$$.fragment,f),E(f5.$$.fragment,f),E($y.$$.fragment,f),E(b5.$$.fragment,f),E(ky.$$.fragment,f),E(Sy.$$.fragment,f),E(Py.$$.fragment,f),E(F5.$$.fragment,f),E(By.$$.fragment,f),E(ov.$$.fragment,f),E(Iy.$$.fragment,f),E(qy.$$.fragment,f),E(jy.$$.fragment,f),E(tv.$$.fragment,f),E(Dy.$$.fragment,f),E(Xv.$$.fragment,f),E(Gy.$$.fragment,f),E(Oy.$$.fragment,f),E(Xy.$$.fragment,f),E(Wv.$$.fragment,f),E(zy.$$.fragment,f),E(Uv.$$.fragment,f),E(Wy.$$.fragment,f),E(Qy.$$.fragment,f),E(Uy.$$.fragment,f),E(Yv.$$.fragment,f),E(Jy.$$.fragment,f),E(mF.$$.fragment,f),E(Yy.$$.fragment,f),E(Ky.$$.fragment,f),E(e8.$$.fragment,f),E(hF.$$.fragment,f),E(o8.$$.fragment,f),E(uF.$$.fragment,f),E(r8.$$.fragment,f),E(t8.$$.fragment,f),E(n8.$$.fragment,f),E(vF.$$.fragment,f),E(s8.$$.fragment,f),E($F.$$.fragment,f),E(l8.$$.fragment,f),E(i8.$$.fragment,f),E(c8.$$.fragment,f),E(SF.$$.fragment,f),E(f8.$$.fragment,f),E(jF.$$.fragment,f),E(m8.$$.fragment,f),E(g8.$$.fragment,f),E(p8.$$.fragment,f),E(GF.$$.fragment,f),E(_8.$$.fragment,f),E(KF.$$.fragment,f),E(u8.$$.fragment,f),E(b8.$$.fragment,f),E(F8.$$.fragment,f),E(e0.$$.fragment,f),E(T8.$$.fragment,f),E(a0.$$.fragment,f),E(E8.$$.fragment,f),E(C8.$$.fragment,f),E(A8.$$.fragment,f),E(s0.$$.fragment,f),E(y8.$$.fragment,f),E(g0.$$.fragment,f),E(L8.$$.fragment,f),E(x8.$$.fragment,f),E(k8.$$.fragment,f),E(p0.$$.fragment,f),E(S8.$$.fragment,f),E(F0.$$.fragment,f),E(R8.$$.fragment,f),E(P8.$$.fragment,f),E(I8.$$.fragment,f),E(M0.$$.fragment,f),E(q8.$$.fragment,f),E(A0.$$.fragment,f),E(j8.$$.fragment,f),E(D8.$$.fragment,f),E(O8.$$.fragment,f),E(L0.$$.fragment,f),E(V8.$$.fragment,f),E(k0.$$.fragment,f),E(X8.$$.fragment,f),E(z8.$$.fragment,f),E(Q8.$$.fragment,f),E(R0.$$.fragment,f),E(H8.$$.fragment,f),E(D0.$$.fragment,f),E(U8.$$.fragment,f),E(J8.$$.fragment,f),E(K8.$$.fragment,f),E(O0.$$.fragment,f),E(Z8.$$.fragment,f),E(z0.$$.fragment,f),E(eL.$$.fragment,f),E(oL.$$.fragment,f),E(tL.$$.fragment,f),E(Q0.$$.fragment,f),E(aL.$$.fragment,f),E(jT.$$.fragment,f),E(nL.$$.fragment,f),E(sL.$$.fragment,f),E(iL.$$.fragment,f),E(GT.$$.fragment,f),E(dL.$$.fragment,f),E(f7.$$.fragment,f),E(cL.$$.fragment,f),E(fL.$$.fragment,f),E(gL.$$.fragment,f),E(g7.$$.fragment,f),E(hL.$$.fragment,f),E(A7.$$.fragment,f),E(pL.$$.fragment,f),E(_L.$$.fragment,f),E(bL.$$.fragment,f),E(L7.$$.fragment,f),E(vL.$$.fragment,f),E(R7.$$.fragment,f),E(FL.$$.fragment,f),E(TL.$$.fragment,f),E(EL.$$.fragment,f),E(B7.$$.fragment,f),E(CL.$$.fragment,f),E(rM.$$.fragment,f),E(wL.$$.fragment,f),E(AL.$$.fragment,f),E(LL.$$.fragment,f),E(aM.$$.fragment,f),E(xL.$$.fragment,f),E(pM.$$.fragment,f),E($L.$$.fragment,f),E(kL.$$.fragment,f),E(RL.$$.fragment,f),E(uM.$$.fragment,f),E(PL.$$.fragment,f),E(XM.$$.fragment,f),E(BL.$$.fragment,f),E(IL.$$.fragment,f),E(NL.$$.fragment,f),E(WM.$$.fragment,f),E(jL.$$.fragment,f),E(c4.$$.fragment,f),E(DL.$$.fragment,f),E(GL.$$.fragment,f),E(VL.$$.fragment,f),E(m4.$$.fragment,f),E(XL.$$.fragment,f),E(p4.$$.fragment,f),E(WL.$$.fragment,f),E(QL.$$.fragment,f),E(UL.$$.fragment,f),E(u4.$$.fragment,f),E(JL.$$.fragment,f),E(v4.$$.fragment,f),E(YL.$$.fragment,f),E(KL.$$.fragment,f),E(e9.$$.fragment,f),E(T4.$$.fragment,f),E(o9.$$.fragment,f),E(O4.$$.fragment,f),E(r9.$$.fragment,f),E(t9.$$.fragment,f),E(n9.$$.fragment,f),E(X4.$$.fragment,f),E(s9.$$.fragment,f),E(fE.$$.fragment,f),E(l9.$$.fragment,f),E(i9.$$.fragment,f),E(c9.$$.fragment,f),E(gE.$$.fragment,f),E(f9.$$.fragment,f),E(pE.$$.fragment,f),E(m9.$$.fragment,f),E(g9.$$.fragment,f),E(p9.$$.fragment,f),E(uE.$$.fragment,f),E(_9.$$.fragment,f),E(vE.$$.fragment,f),E(u9.$$.fragment,f),E(b9.$$.fragment,f),E(F9.$$.fragment,f),E(TE.$$.fragment,f),E(T9.$$.fragment,f),E(QE.$$.fragment,f),E(M9.$$.fragment,f),E(E9.$$.fragment,f),E(w9.$$.fragment,f),E(UE.$$.fragment,f),E(A9.$$.fragment,f),E(nC.$$.fragment,f),E(y9.$$.fragment,f),E(L9.$$.fragment,f),E($9.$$.fragment,f),E(lC.$$.fragment,f),E(k9.$$.fragment,f),E(FC.$$.fragment,f),E(S9.$$.fragment,f),E(R9.$$.fragment,f),E(B9.$$.fragment,f),E(MC.$$.fragment,f),E(I9.$$.fragment,f),E(RC.$$.fragment,f),E(q9.$$.fragment,f),E(N9.$$.fragment,f),E(D9.$$.fragment,f),E(BC.$$.fragment,f),E(G9.$$.fragment,f),E(zC.$$.fragment,f),E(O9.$$.fragment,f),E(V9.$$.fragment,f),E(z9.$$.fragment,f),E(QC.$$.fragment,f),E(W9.$$.fragment,f),E(a3.$$.fragment,f),E(Q9.$$.fragment,f),E(H9.$$.fragment,f),E(J9.$$.fragment,f),E(s3.$$.fragment,f),E(Y9.$$.fragment,f),E(u3.$$.fragment,f),E(K9.$$.fragment,f),E(Z9.$$.fragment,f),E(ox.$$.fragment,f),E(v3.$$.fragment,f),E(rx.$$.fragment,f),E(L3.$$.fragment,f),E(tx.$$.fragment,f),E(ax.$$.fragment,f),E(sx.$$.fragment,f),E($3.$$.fragment,f),E(lx.$$.fragment,f),E(j3.$$.fragment,f),E(ix.$$.fragment,f),E(dx.$$.fragment,f),E(fx.$$.fragment,f),E(G3.$$.fragment,f),E(mx.$$.fragment,f),E(V3.$$.fragment,f),E(gx.$$.fragment,f),E(hx.$$.fragment,f),E(_x.$$.fragment,f),E(z3.$$.fragment,f),E(ux.$$.fragment,f),E(H3.$$.fragment,f),E(vx.$$.fragment,f),E(Fx.$$.fragment,f),E(Mx.$$.fragment,f),E(J3.$$.fragment,f),E(Ex.$$.fragment,f),E(K3.$$.fragment,f),Mje=!0)},o(f){C(d.$$.fragment,f),C(wa.$$.fragment,f),C(vA.$$.fragment,f),C(FA.$$.fragment,f),C(Ff.$$.fragment,f),C(TA.$$.fragment,f),C(MA.$$.fragment,f),C(wA.$$.fragment,f),C(Mg.$$.fragment,f),C(AA.$$.fragment,f),C(yA.$$.fragment,f),C(LA.$$.fragment,f),C(kA.$$.fragment,f),C(rh.$$.fragment,f),C(SA.$$.fragment,f),C(RA.$$.fragment,f),C(PA.$$.fragment,f),C(qA.$$.fragment,f),C(Rh.$$.fragment,f),C(Ph.$$.fragment,f),C(NA.$$.fragment,f),C(jA.$$.fragment,f),C(DA.$$.fragment,f),C(VA.$$.fragment,f),C(Zh.$$.fragment,f),C(ep.$$.fragment,f),C(XA.$$.fragment,f),C(zA.$$.fragment,f),C(WA.$$.fragment,f),C(HA.$$.fragment,f),C(tp.$$.fragment,f),C(UA.$$.fragment,f),C(Y_.$$.fragment,f),C(JA.$$.fragment,f),C(YA.$$.fragment,f),C(ZA.$$.fragment,f),C(Z_.$$.fragment,f),C(ey.$$.fragment,f),C(Vu.$$.fragment,f),C(oy.$$.fragment,f),C(ry.$$.fragment,f),C(ay.$$.fragment,f),C(zu.$$.fragment,f),C(ny.$$.fragment,f),C(x2.$$.fragment,f),C(sy.$$.fragment,f),C(ly.$$.fragment,f),C(dy.$$.fragment,f),C(k2.$$.fragment,f),C(cy.$$.fragment,f),C(h1.$$.fragment,f),C(fy.$$.fragment,f),C(my.$$.fragment,f),C(hy.$$.fragment,f),C(_1.$$.fragment,f),C(py.$$.fragment,f),C(P1.$$.fragment,f),C(_y.$$.fragment,f),C(uy.$$.fragment,f),C(vy.$$.fragment,f),C(I1.$$.fragment,f),C(Fy.$$.fragment,f),C($b.$$.fragment,f),C(Ty.$$.fragment,f),C(My.$$.fragment,f),C(Cy.$$.fragment,f),C(Sb.$$.fragment,f),C(wy.$$.fragment,f),C(d5.$$.fragment,f),C(Ay.$$.fragment,f),C(yy.$$.fragment,f),C(xy.$$.fragment,f),C(f5.$$.fragment,f),C($y.$$.fragment,f),C(b5.$$.fragment,f),C(ky.$$.fragment,f),C(Sy.$$.fragment,f),C(Py.$$.fragment,f),C(F5.$$.fragment,f),C(By.$$.fragment,f),C(ov.$$.fragment,f),C(Iy.$$.fragment,f),C(qy.$$.fragment,f),C(jy.$$.fragment,f),C(tv.$$.fragment,f),C(Dy.$$.fragment,f),C(Xv.$$.fragment,f),C(Gy.$$.fragment,f),C(Oy.$$.fragment,f),C(Xy.$$.fragment,f),C(Wv.$$.fragment,f),C(zy.$$.fragment,f),C(Uv.$$.fragment,f),C(Wy.$$.fragment,f),C(Qy.$$.fragment,f),C(Uy.$$.fragment,f),C(Yv.$$.fragment,f),C(Jy.$$.fragment,f),C(mF.$$.fragment,f),C(Yy.$$.fragment,f),C(Ky.$$.fragment,f),C(e8.$$.fragment,f),C(hF.$$.fragment,f),C(o8.$$.fragment,f),C(uF.$$.fragment,f),C(r8.$$.fragment,f),C(t8.$$.fragment,f),C(n8.$$.fragment,f),C(vF.$$.fragment,f),C(s8.$$.fragment,f),C($F.$$.fragment,f),C(l8.$$.fragment,f),C(i8.$$.fragment,f),C(c8.$$.fragment,f),C(SF.$$.fragment,f),C(f8.$$.fragment,f),C(jF.$$.fragment,f),C(m8.$$.fragment,f),C(g8.$$.fragment,f),C(p8.$$.fragment,f),C(GF.$$.fragment,f),C(_8.$$.fragment,f),C(KF.$$.fragment,f),C(u8.$$.fragment,f),C(b8.$$.fragment,f),C(F8.$$.fragment,f),C(e0.$$.fragment,f),C(T8.$$.fragment,f),C(a0.$$.fragment,f),C(E8.$$.fragment,f),C(C8.$$.fragment,f),C(A8.$$.fragment,f),C(s0.$$.fragment,f),C(y8.$$.fragment,f),C(g0.$$.fragment,f),C(L8.$$.fragment,f),C(x8.$$.fragment,f),C(k8.$$.fragment,f),C(p0.$$.fragment,f),C(S8.$$.fragment,f),C(F0.$$.fragment,f),C(R8.$$.fragment,f),C(P8.$$.fragment,f),C(I8.$$.fragment,f),C(M0.$$.fragment,f),C(q8.$$.fragment,f),C(A0.$$.fragment,f),C(j8.$$.fragment,f),C(D8.$$.fragment,f),C(O8.$$.fragment,f),C(L0.$$.fragment,f),C(V8.$$.fragment,f),C(k0.$$.fragment,f),C(X8.$$.fragment,f),C(z8.$$.fragment,f),C(Q8.$$.fragment,f),C(R0.$$.fragment,f),C(H8.$$.fragment,f),C(D0.$$.fragment,f),C(U8.$$.fragment,f),C(J8.$$.fragment,f),C(K8.$$.fragment,f),C(O0.$$.fragment,f),C(Z8.$$.fragment,f),C(z0.$$.fragment,f),C(eL.$$.fragment,f),C(oL.$$.fragment,f),C(tL.$$.fragment,f),C(Q0.$$.fragment,f),C(aL.$$.fragment,f),C(jT.$$.fragment,f),C(nL.$$.fragment,f),C(sL.$$.fragment,f),C(iL.$$.fragment,f),C(GT.$$.fragment,f),C(dL.$$.fragment,f),C(f7.$$.fragment,f),C(cL.$$.fragment,f),C(fL.$$.fragment,f),C(gL.$$.fragment,f),C(g7.$$.fragment,f),C(hL.$$.fragment,f),C(A7.$$.fragment,f),C(pL.$$.fragment,f),C(_L.$$.fragment,f),C(bL.$$.fragment,f),C(L7.$$.fragment,f),C(vL.$$.fragment,f),C(R7.$$.fragment,f),C(FL.$$.fragment,f),C(TL.$$.fragment,f),C(EL.$$.fragment,f),C(B7.$$.fragment,f),C(CL.$$.fragment,f),C(rM.$$.fragment,f),C(wL.$$.fragment,f),C(AL.$$.fragment,f),C(LL.$$.fragment,f),C(aM.$$.fragment,f),C(xL.$$.fragment,f),C(pM.$$.fragment,f),C($L.$$.fragment,f),C(kL.$$.fragment,f),C(RL.$$.fragment,f),C(uM.$$.fragment,f),C(PL.$$.fragment,f),C(XM.$$.fragment,f),C(BL.$$.fragment,f),C(IL.$$.fragment,f),C(NL.$$.fragment,f),C(WM.$$.fragment,f),C(jL.$$.fragment,f),C(c4.$$.fragment,f),C(DL.$$.fragment,f),C(GL.$$.fragment,f),C(VL.$$.fragment,f),C(m4.$$.fragment,f),C(XL.$$.fragment,f),C(p4.$$.fragment,f),C(WL.$$.fragment,f),C(QL.$$.fragment,f),C(UL.$$.fragment,f),C(u4.$$.fragment,f),C(JL.$$.fragment,f),C(v4.$$.fragment,f),C(YL.$$.fragment,f),C(KL.$$.fragment,f),C(e9.$$.fragment,f),C(T4.$$.fragment,f),C(o9.$$.fragment,f),C(O4.$$.fragment,f),C(r9.$$.fragment,f),C(t9.$$.fragment,f),C(n9.$$.fragment,f),C(X4.$$.fragment,f),C(s9.$$.fragment,f),C(fE.$$.fragment,f),C(l9.$$.fragment,f),C(i9.$$.fragment,f),C(c9.$$.fragment,f),C(gE.$$.fragment,f),C(f9.$$.fragment,f),C(pE.$$.fragment,f),C(m9.$$.fragment,f),C(g9.$$.fragment,f),C(p9.$$.fragment,f),C(uE.$$.fragment,f),C(_9.$$.fragment,f),C(vE.$$.fragment,f),C(u9.$$.fragment,f),C(b9.$$.fragment,f),C(F9.$$.fragment,f),C(TE.$$.fragment,f),C(T9.$$.fragment,f),C(QE.$$.fragment,f),C(M9.$$.fragment,f),C(E9.$$.fragment,f),C(w9.$$.fragment,f),C(UE.$$.fragment,f),C(A9.$$.fragment,f),C(nC.$$.fragment,f),C(y9.$$.fragment,f),C(L9.$$.fragment,f),C($9.$$.fragment,f),C(lC.$$.fragment,f),C(k9.$$.fragment,f),C(FC.$$.fragment,f),C(S9.$$.fragment,f),C(R9.$$.fragment,f),C(B9.$$.fragment,f),C(MC.$$.fragment,f),C(I9.$$.fragment,f),C(RC.$$.fragment,f),C(q9.$$.fragment,f),C(N9.$$.fragment,f),C(D9.$$.fragment,f),C(BC.$$.fragment,f),C(G9.$$.fragment,f),C(zC.$$.fragment,f),C(O9.$$.fragment,f),C(V9.$$.fragment,f),C(z9.$$.fragment,f),C(QC.$$.fragment,f),C(W9.$$.fragment,f),C(a3.$$.fragment,f),C(Q9.$$.fragment,f),C(H9.$$.fragment,f),C(J9.$$.fragment,f),C(s3.$$.fragment,f),C(Y9.$$.fragment,f),C(u3.$$.fragment,f),C(K9.$$.fragment,f),C(Z9.$$.fragment,f),C(ox.$$.fragment,f),C(v3.$$.fragment,f),C(rx.$$.fragment,f),C(L3.$$.fragment,f),C(tx.$$.fragment,f),C(ax.$$.fragment,f),C(sx.$$.fragment,f),C($3.$$.fragment,f),C(lx.$$.fragment,f),C(j3.$$.fragment,f),C(ix.$$.fragment,f),C(dx.$$.fragment,f),C(fx.$$.fragment,f),C(G3.$$.fragment,f),C(mx.$$.fragment,f),C(V3.$$.fragment,f),C(gx.$$.fragment,f),C(hx.$$.fragment,f),C(_x.$$.fragment,f),C(z3.$$.fragment,f),C(ux.$$.fragment,f),C(H3.$$.fragment,f),C(vx.$$.fragment,f),C(Fx.$$.fragment,f),C(Mx.$$.fragment,f),C(J3.$$.fragment,f),C(Ex.$$.fragment,f),C(K3.$$.fragment,f),Mje=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(pf),f&&t(tt),f&&t(je),f&&t(We),f&&t(uf),w(wa,f),f&&t(Qe),f&&t(Ae),f&&t(Eo),f&&t(Aa),f&&t(vqe),f&&t(bi),w(vA),f&&t(Fqe),f&&t(kn),f&&t(Tqe),w(FA,f),f&&t(Mqe),f&&t(G$),f&&t(Eqe),w(Ff,f),f&&t(Cqe),f&&t(vi),w(TA),f&&t(wqe),f&&t(Co),w(MA),w(wA),w(Mg),w(AA),f&&t(Aqe),f&&t(Ti),w(yA),f&&t(yqe),f&&t(wo),w(LA),w(kA),w(rh),w(SA),f&&t(Lqe),f&&t(Mi),w(RA),f&&t(xqe),f&&t(Ao),w(PA),w(qA),w(Rh),w(Ph),w(NA),f&&t($qe),f&&t(Ei),w(jA),f&&t(kqe),f&&t(yo),w(DA),w(VA),w(Zh),w(ep),w(XA),f&&t(Sqe),f&&t(wi),w(zA),f&&t(Rqe),f&&t(Lo),w(WA),w(HA),w(tp),w(UA),w(Y_),f&&t(Pqe),f&&t(Li),w(JA),f&&t(Bqe),f&&t(xo),w(YA),w(ZA),w(Z_),w(ey),w(Vu),f&&t(Iqe),f&&t(ki),w(oy),f&&t(qqe),f&&t($o),w(ry),w(ay),w(zu),w(ny),w(x2),f&&t(Nqe),f&&t(Pi),w(sy),f&&t(jqe),f&&t(ko),w(ly),w(dy),w(k2),w(cy),w(h1),f&&t(Dqe),f&&t(qi),w(fy),f&&t(Gqe),f&&t(So),w(my),w(hy),w(_1),w(py),w(P1),f&&t(Oqe),f&&t(Di),w(_y),f&&t(Vqe),f&&t(Ro),w(uy),w(vy),w(I1),w(Fy),w($b),f&&t(Xqe),f&&t(Vi),w(Ty),f&&t(zqe),f&&t(Po),w(My),w(Cy),w(Sb),w(wy),w(d5),f&&t(Wqe),f&&t(Wi),w(Ay),f&&t(Qqe),f&&t(Bo),w(yy),w(xy),w(f5),w($y),w(b5),f&&t(Hqe),f&&t(Ui),w(ky),f&&t(Uqe),f&&t(Io),w(Sy),w(Py),w(F5),w(By),w(ov),f&&t(Jqe),f&&t(Ki),w(Iy),f&&t(Yqe),f&&t(qo),w(qy),w(jy),w(tv),w(Dy),w(Xv),f&&t(Kqe),f&&t(od),w(Gy),f&&t(Zqe),f&&t(No),w(Oy),w(Xy),w(Wv),w(zy),w(Uv),f&&t(eNe),f&&t(ad),w(Wy),f&&t(oNe),f&&t(jo),w(Qy),w(Uy),w(Yv),w(Jy),w(mF),f&&t(rNe),f&&t(ld),w(Yy),f&&t(tNe),f&&t(Do),w(Ky),w(e8),w(hF),w(o8),w(uF),f&&t(aNe),f&&t(cd),w(r8),f&&t(nNe),f&&t(Go),w(t8),w(n8),w(vF),w(s8),w($F),f&&t(sNe),f&&t(gd),w(l8),f&&t(lNe),f&&t(Oo),w(i8),w(c8),w(SF),w(f8),w(jF),f&&t(iNe),f&&t(_d),w(m8),f&&t(dNe),f&&t(Vo),w(g8),w(p8),w(GF),w(_8),w(KF),f&&t(cNe),f&&t(vd),w(u8),f&&t(fNe),f&&t(Xo),w(b8),w(F8),w(e0),w(T8),w(a0),f&&t(mNe),f&&t(Md),w(E8),f&&t(gNe),f&&t(zo),w(C8),w(A8),w(s0),w(y8),w(g0),f&&t(hNe),f&&t(wd),w(L8),f&&t(pNe),f&&t(Wo),w(x8),w(k8),w(p0),w(S8),w(F0),f&&t(_Ne),f&&t(xd),w(R8),f&&t(uNe),f&&t(Qo),w(P8),w(I8),w(M0),w(q8),w(A0),f&&t(bNe),f&&t(Sd),w(j8),f&&t(vNe),f&&t(Ho),w(D8),w(O8),w(L0),w(V8),w(k0),f&&t(FNe),f&&t(Bd),w(X8),f&&t(TNe),f&&t(Uo),w(z8),w(Q8),w(R0),w(H8),w(D0),f&&t(MNe),f&&t(Nd),w(U8),f&&t(ENe),f&&t(Jo),w(J8),w(K8),w(O0),w(Z8),w(z0),f&&t(CNe),f&&t(Gd),w(eL),f&&t(wNe),f&&t(Yo),w(oL),w(tL),w(Q0),w(aL),w(jT),f&&t(ANe),f&&t(Xd),w(nL),f&&t(yNe),f&&t(Ko),w(sL),w(iL),w(GT),w(dL),w(f7),f&&t(LNe),f&&t(Qd),w(cL),f&&t(xNe),f&&t(Zo),w(fL),w(gL),w(g7),w(hL),w(A7),f&&t($Ne),f&&t(Jd),w(pL),f&&t(kNe),f&&t(er),w(_L),w(bL),w(L7),w(vL),w(R7),f&&t(SNe),f&&t(Zd),w(FL),f&&t(RNe),f&&t(or),w(TL),w(EL),w(B7),w(CL),w(rM),f&&t(PNe),f&&t(rc),w(wL),f&&t(BNe),f&&t(rr),w(AL),w(LL),w(aM),w(xL),w(pM),f&&t(INe),f&&t(nc),w($L),f&&t(qNe),f&&t(tr),w(kL),w(RL),w(uM),w(PL),w(XM),f&&t(NNe),f&&t(ic),w(BL),f&&t(jNe),f&&t(ar),w(IL),w(NL),w(WM),w(jL),w(c4),f&&t(DNe),f&&t(fc),w(DL),f&&t(GNe),f&&t(nr),w(GL),w(VL),w(m4),w(XL),w(p4),f&&t(ONe),f&&t(hc),w(WL),f&&t(VNe),f&&t(sr),w(QL),w(UL),w(u4),w(JL),w(v4),f&&t(XNe),f&&t(uc),w(YL),f&&t(zNe),f&&t(lr),w(KL),w(e9),w(T4),w(o9),w(O4),f&&t(WNe),f&&t(Fc),w(r9),f&&t(QNe),f&&t(ir),w(t9),w(n9),w(X4),w(s9),w(fE),f&&t(HNe),f&&t(Ec),w(l9),f&&t(UNe),f&&t(dr),w(i9),w(c9),w(gE),w(f9),w(pE),f&&t(JNe),f&&t(Ac),w(m9),f&&t(YNe),f&&t(cr),w(g9),w(p9),w(uE),w(_9),w(vE),f&&t(KNe),f&&t(xc),w(u9),f&&t(ZNe),f&&t(fr),w(b9),w(F9),w(TE),w(T9),w(QE),f&&t(eje),f&&t(Sc),w(M9),f&&t(oje),f&&t(mr),w(E9),w(w9),w(UE),w(A9),w(nC),f&&t(rje),f&&t(Bc),w(y9),f&&t(tje),f&&t(gr),w(L9),w($9),w(lC),w(k9),w(FC),f&&t(aje),f&&t(Nc),w(S9),f&&t(nje),f&&t(hr),w(R9),w(B9),w(MC),w(I9),w(RC),f&&t(sje),f&&t(Gc),w(q9),f&&t(lje),f&&t(pr),w(N9),w(D9),w(BC),w(G9),w(zC),f&&t(ije),f&&t(Xc),w(O9),f&&t(dje),f&&t(_r),w(V9),w(z9),w(QC),w(W9),w(a3),f&&t(cje),f&&t(Qc),w(Q9),f&&t(fje),f&&t(ur),w(H9),w(J9),w(s3),w(Y9),w(u3),f&&t(mje),f&&t(Jc),w(K9),f&&t(gje),f&&t(br),w(Z9),w(ox),w(v3),w(rx),w(L3),f&&t(hje),f&&t(Zc),w(tx),f&&t(pje),f&&t(vr),w(ax),w(sx),w($3),w(lx),w(j3),f&&t(_je),f&&t(rf),w(ix),f&&t(uje),f&&t(Fr),w(dx),w(fx),w(G3),w(mx),w(V3),f&&t(bje),f&&t(nf),w(gx),f&&t(vje),f&&t(Tr),w(hx),w(_x),w(z3),w(ux),w(H3),f&&t(Fje),f&&t(df),w(vx),f&&t(Tje),f&&t(Mr),w(Fx),w(Mx),w(J3),w(Ex),w(K3)}}}const w$t={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function A$t(L){return A9t(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class R$t extends M9t{constructor(g){super();E9t(this,g,A$t,C$t,C9t,{})}}export{R$t as default,w$t as metadata};
